    of dma_buffer[].
    struct snd_dma_buffer. The ipc3-dtrace passes for now the pointer to
    ASoC: SOF: Intel: hda-loader: Use local snd_dma_buffer
    guaranteed that substream->dma_buffer points to the actually used
    Note: snd_dma_buffer_sync() is also used for normal playback and capture
    guaranteed that substream->dma_buffer points to the actually used
    from snd_dma_buffer for firmware use.
    Pass the snd_dma_buffer pointer as parameter to hda_dsp_trace_prepare()
      ALSA: memalloc: Catch call with NULL snd_dma_buffer pointer
    buffer information to the standard snd_dma_buffer object that is
    This patch is an attempt to fix the regression.  The snd_dma_buffer
    helpers instead.  The original snd_dma_buffer objects are managed by
    it by allowing snd_dma_buffer_mmap() helper to receive the NULL
    ALSA: memalloc: Catch call with NULL snd_dma_buffer pointer
    ALSA: memalloc: Fix a typo in snd_dma_buffer_sync() description
    ALSA: memalloc: Drop superfluous snd_dma_buffer_sync() declaration
    snd_dma_buffer_sync() is declared twice, and the one outside the ifdef
    - A new helper snd_dma_buffer_sync() is introduced; this gets called
    memalloc: Store snd_dma_buffer.addr for continuous pages, too").
    Currently we check only the substream->dma_buffer as the preset of the
    standard buffer preallocation using substream->dma_buffer, and they
    Actually, they may set up the runtime dma_buffer (referred via
    substream->dma_buffer as fallback.
    substream->dma_buffer), just assume that the driver handles the mmap
    ALSA: memalloc: Store snd_dma_buffer.addr for continuous pages, too
    guaranteed that substream->dma_buffer points to the actually used
    guaranteed that substream->dma_buffer points to the actually used
    guaranteed that substream->dma_buffer points to the actually used
    instead of substream->dma_buffer (and shouldn't use virt_to_phys).
    directly the snd_dma_buffer pointer.  The caller needs NULL-check for
    rpcrdma_buffer is already available.
    If the callee gpmi_alloc_dma_buffer() failed to alloc memory for
    this->raw_buffer, gpmi_free_dma_buffer() will be called to free
    Then gpmi_alloc_dma_buffer() returns err and gpmi_free_dma_buffer()
    As gpmi_free_dma_buffer() has already called in gpmi_alloc_dma_buffer's
    stm32_adc_trigger, but out of stm32_adc_dma_buffer_done, which runs in
    Note that, after this change, snd_dma_buffer.bytes field contains the
          - Fix meson_nfc_dma_buffer_release() arguments
      - Fix meson_nfc_dma_buffer_release() arguments
    mtd: rawnand: meson: fix meson_nfc_dma_buffer_release() arguments
    Arguments 'infolen' and 'datalen' to meson_nfc_dma_buffer_release() were mixed up.
    ALSA: memalloc: Initialize all fields of snd_dma_buffer properly
    Some fields in snd_dma_buffer aren't touched in snd_dma_alloc_pages()
    a multi-threaded producer (rpcrdma_buffer_put) can both access the
    handler and rpcrdma_buffer_get, and makes the rep consumer wait-
    xprtrdma: Remove rpcrdma_buffer::rb_mrlock
    xprtrdma: Rename rpcrdma_buffer::rb_all
            memcpy(dma_buffer, data, bufsz);
    There is only one remaining function, rpcrdma_buffer_put(), that
    rpcrdma_buffer, enabling the removal of an 8-byte pointer field
    rb_lock is contended between rpcrdma_buffer_create,
    rpcrdma_buffer_put, and rpcrdma_post_recvs.
    Without EMPTY_SCQ, rpcrdma_buffer::rb_flags is no longer used and
    mtd: rawnand: meson: use a void pointer for meson_nfc_dma_buffer_setup
    The logic inside meson_nfc_dma_buffer_setup() doesn't care about the
    meson_nfc_dma_buffer_setup() is called with the "info" buffer which is
    meson_nfc_dma_buffer_setup() fails we need to free the allocated "info"
       - Fix error code in rpcrdma_buffer_create()
      xprtrdma: Fix error code in rpcrdma_buffer_create()
    The clean up is handled by the caller, rpcrdma_buffer_create(), so this
    xprtrdma: Fix error code in rpcrdma_buffer_create()
      xprtrdma: Add documenting comment for rpcrdma_buffer_destroy
    xprtrdma: Add documenting comment for rpcrdma_buffer_destroy
    ASoC: amd: remove set but not used variable 'dma_buffer'
     variable 'dma_buffer' set but not used [-Wunused-but-set-variable]
    and the parameters passed there are all contained in snd_dma_buffer
    object.  As a code-simplification, pass snd_dma_buffer object and
    The function alloc_dma_buffer() is called from ibmvmc_add_buffer(),
    drm/vmwgfx: Replace vmw_dma_buffer with vmw_buffer_object
    xprtrdma: Remove rpcrdma_buffer_get_rep_locked()
    xprtrdma: Remove rpcrdma_buffer_get_req_locked()
    rpcrdma_buffer_get acquires an rpcrdma_req and rep for each RPC.
    - Fix memory leak if rpcrdma_buffer_create() fails
    spoofs the receive overrun logic in rpcrdma_buffer_get_rep.
    rpcrdma_buffer_create and then allocate additional rpcrdma_reps in
    the driver by copying of the dma_buffer as done previously for the
    [trond.myklebust@primarydata.com: Remove call to rpcrdma_buffer_put() from
      ASoC: Intel: Skylake: Fix default dma_buffer_size
    rpcrdma_buffer_put) while the RPC reply handler is still running.
    rpcrdma_rep can be re-used, via rpcrdma_buffer_put, while the RPC
    ASoC: Intel: Skylake: Fix default dma_buffer_size
    If the dma_buffer_size is not defined in topology, fix it to 2ms default
      usb: host: xhci: delete sp_dma_buffers for scratchpad
    - Remove rpcrdma_buffer->rb_pool.
    xprtrdma: Remove rpcrdma_buffer::rb_pool
    usb: host: xhci: delete sp_dma_buffers for scratchpad
    it doesn't need another sp_dma_buffers array to store it.
    ASoC: AMD: remove unused ‘dma_buffer’
    In acp_dma_hw_params(), 'dma_buffer' is initialized, but not used. So
    sound/soc/amd/acp-pcm-dma.c:673:25: warning: variable ‘dma_buffer’ set but not used [-Wunused-but-set-variable]
      struct snd_dma_buffer *dma_buffer;
      i2c: xgene: Avoid dma_buffer overrun
    i2c: xgene: Avoid dma_buffer overrun
    The dma_buffer should be increased by 1 to avoid the overrun issue.
    3. double_free: Calling gpmi_alloc_dma_buffer frees pointer
    Skylake driver uses snd_dma_buffer for data and buffer, these are variables
    sh_eth: merge sh_eth_free_dma_buffer() into sh_eth_ring_free()
    one after the other) for no good reason. Merge  sh_eth_free_dma_buffer()
    iio_dma_buffer_block_done() to notify. The abort() callback is used for
    In xprt_rdma_destroy(), call rpcrdma_buffer_destroy() only after calling
    /proc/lock_stat showed contention between rpcrdma_buffer_get/put
    Now that MRs are no longer allocated in rpcrdma_buffer_get(),
    struct rpcrdma_buffer is re-arranged to ensure rb_mwlock and rb_mws
    Acquiring 64 MRs in rpcrdma_buffer_get() while holding the buffer
    Acquiring 64 FMRs in rpcrdma_buffer_get() while holding the buffer
        drivers/built-in.o: In function `grcan_free_dma_buffers':
        drivers/built-in.o: In function `grcan_allocate_dma_buffers':
      xprtrdma: Allocate zero pad separately from rpcrdma_buffer
      xprtrdma: Refactor rpcrdma_buffer_create() and rpcrdma_buffer_destroy()
      xprtrdma: Simplify synopsis of rpcrdma_buffer_create()
    xprtrdma: Allocate zero pad separately from rpcrdma_buffer
    xprtrdma: Refactor rpcrdma_buffer_create() and rpcrdma_buffer_destroy()
    xprtrdma: Simplify synopsis of rpcrdma_buffer_create()
    Clean up: There is one call site for rpcrdma_buffer_create(). All of
    staging: comedi: ni_labpc_isadma: convert 'dma_buffer_size' to a define
    Currently, `interrupt_pci9118_ai_dma()` calls `defragment_dma_buffer()`
    This fixes a bug in load_ao_dma_buffer(). That function was decrementing
    In block write mode, when encapsulating dma_buffer, first element is
    Currently rpcrdma_buffer_create() allocates struct rpcrdma_mw's as
    VALID state. This FRMR can be returned by rpcrdma_buffer_get(), and
    Instead, capture these in rpcrdma_buffer_get(), and reset them.
    [ 1455.349350]  [<ffffffffa038a639>] rpcrdma_buffer_destroy+0x69/0x170 [xprtrdma]
    xilly_get_dma_buffers().
    sound/built-in.o: In function `mmp_pcm_free_dma_buffers':
    sound/built-in.o: In function `mmp_pcm_free_dma_buffers':
    rpcrdma_buffer_create() allocates and pre-registers a set of RPC
    RPC buffers pre-allocated by rpcrdma_buffer_create().
    On my 64-bit system, rpcrdma_buffer_create() requests roughly 7000
    1. rpcrdma_buffer_create: While allocating RPCRDMA_FRMR's
    2. rpcrdma_buffer_destroy: While cleaning up, the routine will only free
    rpcrdma_buffer_create while the rb_mws list is being built if one of the MR
    the rpcrdma_buffer_destroy routine which will never free the MR's on rb_mws
    staging: comedi: gsc_hpdi: rename drain_dma_buffers()
    The gpmi_alloc_dma_buffer will be called twice. The first time is to
    chip when gpmi_alloc_dma_buffer is called the first time, and allocates a
    buffer of the real NAND page size for the second time gpmi_alloc_dma_buffer
    static inline dma_addr_t snd_sgbuf_get_addr(struct snd_dma_buffer *dmab,
    Change the type of the `dma_buffer` member of `struct a2150_private`
    Also change the type of the `dma_buffer` parameter of
    sound/soc/atmel/atmel-pcm.c: In function 'atmel_pcm_preallocate_dma_buffer':
    staging: comedi: ni_labpc: fix possible double-free of dma_buffer
    If `labpc_attach()` allocates memory for `devpriv->dma_buffer` but fails
    to request a DMA channel, it frees `devpriv->dma_buffer` but leaves the
    pointer set.  Later, `labpc_detach()` frees `devpriv->dma_buffer` again,
    Fix it by only setting `devpriv->dma_buffer` in `labpc_attach()` if the
    drivers/built-in.o: In function `sh_eth_free_dma_buffer':
    pxa2xx_spi_map_dma_buffer() gets called in tasklet context so we can't
    usb: musb: gadget: do *unmap_dma_buffer* only for valid DMA addr
    and will result in kernel OOPS if tried to *unmap_dma_buffer* for requests in
    ep0. Fixed it by doing *unmap_dma_buffer* only for valid DMA addr and
    drivers/spi/spi-pxa2xx.c: In function ‘map_dma_buffers’: drivers/spi/spi-pxa2xx.c:384:7: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
    `set_ai_fifo_size()`, `ai_fifo_size()`, `load_ao_dma_buffer()`, and
    Passing struct snd_dma_buffer pointer instead, so that they work no
      ASoC: spear: correct the check for NULL dma_buffer pointer
    ASoC: spear: correct the check for NULL dma_buffer pointer
    The reason is that the single dma buffer (ar_sdio->dma_buffer)
      TTY: snyclinkmp: forever loop in tx_load_dma_buffer()
    TTY: snyclinkmp: forever loop in tx_load_dma_buffer()
      ASoC: Tegra: tegra_pcm_deallocate_dma_buffer: Don't OOPS
    ASoC: Tegra: tegra_pcm_deallocate_dma_buffer: Don't OOPS
    buffers in tegra_pcm_deallocate_dma_buffer.
    musb_g_giveback(), even if txstate()/rxstate() has called unmap_dma_buffer()
    Moreover, check for musb_ep->dma is moved within map_dma_buffer() so where
        [<c0204148>] (ep93xx_pcm_preallocate_dma_buffer+0x44/0x60)
    2) s3c24xx_pcm_preallocate_dma_buffer -> s3c_preallocate_dma_buffer
    drivers/spi/pxa2xx_spi.c: In function 'map_dma_buffers':
    drivers/char/synclinkmp.c:5040:6: warning: symbol 'tx_load_dma_buffer' was not declared. Should it be static?
     > Function map_dma_buffers now return 0 for success and -1 for failure.
