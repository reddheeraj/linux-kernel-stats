commit 5ac01865a2b99d6da24e66d12cfea2f7c185c610
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Thu Jan 5 06:02:51 2023 +0000

    tipc: fix unexpected link reset due to discovery messages
    
    [ Upstream commit c244c092f1ed2acfb5af3d3da81e22367d3dd733 ]
    
    This unexpected behavior is observed:
    
    node 1                    | node 2
    ------                    | ------
    link is established       | link is established
    reboot                    | link is reset
    up                        | send discovery message
    receive discovery message |
    link is established       | link is established
    send discovery message    |
                              | receive discovery message
                              | link is reset (unexpected)
                              | send reset message
    link is reset             |
    
    It is due to delayed re-discovery as described in function
    tipc_node_check_dest(): "this link endpoint has already reset
    and re-established contact with the peer, before receiving a
    discovery message from that node."
    
    However, commit 598411d70f85 has changed the condition for calling
    tipc_node_link_down() which was the acceptance of new media address.
    
    This commit fixes this by restoring the old and correct behavior.
    
    Fixes: 598411d70f85 ("tipc: make resetting of links non-atomic")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 303d06288122ed2bfbc232a5db80093e873d394a
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Thu Jan 5 06:02:51 2023 +0000

    tipc: fix unexpected link reset due to discovery messages
    
    [ Upstream commit c244c092f1ed2acfb5af3d3da81e22367d3dd733 ]
    
    This unexpected behavior is observed:
    
    node 1                    | node 2
    ------                    | ------
    link is established       | link is established
    reboot                    | link is reset
    up                        | send discovery message
    receive discovery message |
    link is established       | link is established
    send discovery message    |
                              | receive discovery message
                              | link is reset (unexpected)
                              | send reset message
    link is reset             |
    
    It is due to delayed re-discovery as described in function
    tipc_node_check_dest(): "this link endpoint has already reset
    and re-established contact with the peer, before receiving a
    discovery message from that node."
    
    However, commit 598411d70f85 has changed the condition for calling
    tipc_node_link_down() which was the acceptance of new media address.
    
    This commit fixes this by restoring the old and correct behavior.
    
    Fixes: 598411d70f85 ("tipc: make resetting of links non-atomic")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0d0675bc33e655297562681200b06fafa5eb7ed8
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Thu Jan 5 06:02:51 2023 +0000

    tipc: fix unexpected link reset due to discovery messages
    
    [ Upstream commit c244c092f1ed2acfb5af3d3da81e22367d3dd733 ]
    
    This unexpected behavior is observed:
    
    node 1                    | node 2
    ------                    | ------
    link is established       | link is established
    reboot                    | link is reset
    up                        | send discovery message
    receive discovery message |
    link is established       | link is established
    send discovery message    |
                              | receive discovery message
                              | link is reset (unexpected)
                              | send reset message
    link is reset             |
    
    It is due to delayed re-discovery as described in function
    tipc_node_check_dest(): "this link endpoint has already reset
    and re-established contact with the peer, before receiving a
    discovery message from that node."
    
    However, commit 598411d70f85 has changed the condition for calling
    tipc_node_link_down() which was the acceptance of new media address.
    
    This commit fixes this by restoring the old and correct behavior.
    
    Fixes: 598411d70f85 ("tipc: make resetting of links non-atomic")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 68a37dc77e2fb53530749ac982bd11f3fa2c9028
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sat Dec 3 18:37:21 2022 -0500

    tipc: call tipc_lxc_xmit without holding node_read_lock
    
    commit 88956177db179e4eba7cd590971961857d1565b8 upstream.
    
    When sending packets between nodes in netns, it calls tipc_lxc_xmit() for
    peer node to receive the packets where tipc_sk_mcast_rcv()/tipc_sk_rcv()
    might be called, and it's pretty much like in tipc_rcv().
    
    Currently the local 'node rw lock' is held during calling tipc_lxc_xmit()
    to protect the peer_net not being freed by another thread. However, when
    receiving these packets, tipc_node_add_conn() might be called where the
    peer 'node rw lock' is acquired. Then a dead lock warning is triggered by
    lockdep detector, although it is not a real dead lock:
    
        WARNING: possible recursive locking detected
        --------------------------------------------
        conn_server/1086 is trying to acquire lock:
        ffff8880065cb020 (&n->lock#2){++--}-{2:2}, \
                         at: tipc_node_add_conn.cold.76+0xaa/0x211 [tipc]
    
        but task is already holding lock:
        ffff8880065cd020 (&n->lock#2){++--}-{2:2}, \
                         at: tipc_node_xmit+0x285/0xb30 [tipc]
    
        other info that might help us debug this:
         Possible unsafe locking scenario:
    
               CPU0
               ----
          lock(&n->lock#2);
          lock(&n->lock#2);
    
         *** DEADLOCK ***
    
         May be due to missing lock nesting notation
    
        4 locks held by conn_server/1086:
         #0: ffff8880036d1e40 (sk_lock-AF_TIPC){+.+.}-{0:0}, \
                              at: tipc_accept+0x9c0/0x10b0 [tipc]
         #1: ffff8880036d5f80 (sk_lock-AF_TIPC/1){+.+.}-{0:0}, \
                              at: tipc_accept+0x363/0x10b0 [tipc]
         #2: ffff8880065cd020 (&n->lock#2){++--}-{2:2}, \
                              at: tipc_node_xmit+0x285/0xb30 [tipc]
         #3: ffff888012e13370 (slock-AF_TIPC){+...}-{2:2}, \
                              at: tipc_sk_rcv+0x2da/0x1b40 [tipc]
    
        Call Trace:
         <TASK>
         dump_stack_lvl+0x44/0x5b
         __lock_acquire.cold.77+0x1f2/0x3d7
         lock_acquire+0x1d2/0x610
         _raw_write_lock_bh+0x38/0x80
         tipc_node_add_conn.cold.76+0xaa/0x211 [tipc]
         tipc_sk_finish_conn+0x21e/0x640 [tipc]
         tipc_sk_filter_rcv+0x147b/0x3030 [tipc]
         tipc_sk_rcv+0xbb4/0x1b40 [tipc]
         tipc_lxc_xmit+0x225/0x26b [tipc]
         tipc_node_xmit.cold.82+0x4a/0x102 [tipc]
         __tipc_sendstream+0x879/0xff0 [tipc]
         tipc_accept+0x966/0x10b0 [tipc]
         do_accept+0x37d/0x590
    
    This patch avoids this warning by not holding the 'node rw lock' before
    calling tipc_lxc_xmit(). As to protect the 'peer_net', rcu_read_lock()
    should be enough, as in cleanup_net() when freeing the netns, it calls
    synchronize_rcu() before the free is continued.
    
    Also since tipc_lxc_xmit() is like the RX path in tipc_rcv(), it makes
    sense to call it under rcu_read_lock(). Note that the right lock order
    must be:
    
       rcu_read_lock();
       tipc_node_read_lock(n);
       tipc_node_read_unlock(n);
       tipc_lxc_xmit();
       rcu_read_unlock();
    
    instead of:
    
       tipc_node_read_lock(n);
       rcu_read_lock();
       tipc_node_read_unlock(n);
       tipc_lxc_xmit();
       rcu_read_unlock();
    
    and we have to call tipc_node_read_lock/unlock() twice in
    tipc_node_xmit().
    
    Fixes: f73b12812a3d ("tipc: improve throughput between nodes in netns")
    Reported-by: Shuang Li <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Link: https://lore.kernel.org/r/5bdd1f8fee9db695cfff4528a48c9b9d0523fb00.1670110641.git.lucien.xin@gmail.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2db88851fa4d78d71e97c80261b5337de87e8355
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Mar 26 09:50:29 2020 +0700

    tipc: Add a missing case of TIPC_DIRECT_MSG type
    
    commit 8b1e5b0a99f04bda2d6c85ecfe5e68a356c10914 upstream.
    
    In the commit f73b12812a3d
    ("tipc: improve throughput between nodes in netns"), we're missing a check
    to handle TIPC_DIRECT_MSG type, it's still using old sending mechanism for
    this message type. So, throughput improvement is not significant as
    expected.
    
    Besides that, when sending a large message with that type, we're also
    handle wrong receiving queue, it should be enqueued in socket receiving
    instead of multicast messages.
    
    Fix this by adding the missing case for TIPC_DIRECT_MSG.
    
    Fixes: f73b12812a3d ("tipc: improve throughput between nodes in netns")
    Reported-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3188f80b80d62823d3e3a6539b5216dd89e6250c
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Tue Dec 10 15:21:05 2019 +0700

    tipc: fix use-after-free in tipc_disc_rcv()
    
    commit 31e4ccc99eda8a5a7e6902c98bee6e78ffd3edb9 upstream.
    
    In the function 'tipc_disc_rcv()', the 'msg_peer_net_hash()' is called
    to read the header data field but after the message skb has been freed,
    that might result in a garbage value...
    
    This commit fixes it by defining a new local variable to store the data
    first, just like the other header fields' handling.
    
    Fixes: f73b12812a3d ("tipc: improve throughput between nodes in netns")
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7d04fe153dfc2b0476e5f92f30b16f2381439e63
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Thu Jan 5 06:02:51 2023 +0000

    tipc: fix unexpected link reset due to discovery messages
    
    [ Upstream commit c244c092f1ed2acfb5af3d3da81e22367d3dd733 ]
    
    This unexpected behavior is observed:
    
    node 1                    | node 2
    ------                    | ------
    link is established       | link is established
    reboot                    | link is reset
    up                        | send discovery message
    receive discovery message |
    link is established       | link is established
    send discovery message    |
                              | receive discovery message
                              | link is reset (unexpected)
                              | send reset message
    link is reset             |
    
    It is due to delayed re-discovery as described in function
    tipc_node_check_dest(): "this link endpoint has already reset
    and re-established contact with the peer, before receiving a
    discovery message from that node."
    
    However, commit 598411d70f85 has changed the condition for calling
    tipc_node_link_down() which was the acceptance of new media address.
    
    This commit fixes this by restoring the old and correct behavior.
    
    Fixes: 598411d70f85 ("tipc: make resetting of links non-atomic")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 95b2d4889fbd0f1a1fb66f5d8955f4476b893037
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Fri Nov 8 10:02:37 2019 +0700

    tipc: eliminate checking netns if node established
    
    [ Upstream commit d408bef4bfa60bac665b6e7239269570039a968b ]
    
    Currently, we scan over all network namespaces at each received
    discovery message in order to check if the sending peer might be
    present in a host local namespaces.
    
    This is unnecessary since we can assume that a peer will not change its
    location during an established session.
    
    We now improve the condition for this testing so that we don't perform
    any redundant scans.
    
    Fixes: f73b12812a3d ("tipc: improve throughput between nodes in netns")
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Stable-dep-of: c244c092f1ed ("tipc: fix unexpected link reset due to discovery messages")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d6418829cef16eba10fdcf928009575c647f16e9
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Tue Oct 29 07:51:21 2019 +0700

    tipc: improve throughput between nodes in netns
    
    [ Upstream commit f73b12812a3d1d798b7517547ccdcf864844d2cd ]
    
    Currently, TIPC transports intra-node user data messages directly
    socket to socket, hence shortcutting all the lower layers of the
    communication stack. This gives TIPC very good intra node performance,
    both regarding throughput and latency.
    
    We now introduce a similar mechanism for TIPC data traffic across
    network namespaces located in the same kernel. On the send path, the
    call chain is as always accompanied by the sending node's network name
    space pointer. However, once we have reliably established that the
    receiving node is represented by a namespace on the same host, we just
    replace the namespace pointer with the receiving node/namespace's
    ditto, and follow the regular socket receive patch though the receiving
    node. This technique gives us a throughput similar to the node internal
    throughput, several times larger than if we let the traffic go though
    the full network stacks. As a comparison, max throughput for 64k
    messages is four times larger than TCP throughput for the same type of
    traffic.
    
    To meet any security concerns, the following should be noted.
    
    - All nodes joining a cluster are supposed to have been be certified
    and authenticated by mechanisms outside TIPC. This is no different for
    nodes/namespaces on the same host; they have to auto discover each
    other using the attached interfaces, and establish links which are
    supervised via the regular link monitoring mechanism. Hence, a kernel
    local node has no other way to join a cluster than any other node, and
    have to obey to policies set in the IP or device layers of the stack.
    
    - Only when a sender has established with 100% certainty that the peer
    node is located in a kernel local namespace does it choose to let user
    data messages, and only those, take the crossover path to the receiving
    node/namespace.
    
    - If the receiving node/namespace is removed, its namespace pointer
    is invalidated at all peer nodes, and their neighbor link monitoring
    will eventually note that this node is gone.
    
    - To ensure the "100% certainty" criteria, and prevent any possible
    spoofing, received discovery messages must contain a proof that the
    sender knows a common secret. We use the hash mix of the sending
    node/namespace for this purpose, since it can be accessed directly by
    all other namespaces in the kernel. Upon reception of a discovery
    message, the receiver checks this proof against all the local
    namespaces'hash_mix:es. If it finds a match, that, along with a
    matching node id and cluster id, this is deemed sufficient proof that
    the peer node in question is in a local namespace, and a wormhole can
    be opened.
    
    - We should also consider that TIPC is intended to be a cluster local
    IPC mechanism (just like e.g. UNIX sockets) rather than a network
    protocol, and hence we think it can justified to allow it to shortcut the
    lower protocol layers.
    
    Regarding traceability, we should notice that since commit 6c9081a3915d
    ("tipc: add loopback device tracking") it is possible to follow the node
    internal packet flow by just activating tcpdump on the loopback
    interface. This will be true even for this mechanism; by activating
    tcpdump on the involved nodes' loopback interfaces their inter-name
    space messaging can easily be tracked.
    
    v2:
    - update 'net' pointer when node left/rejoined
    v3:
    - grab read/write lock when using node ref obj
    v4:
    - clone traffics between netns to loopback
    
    Suggested-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Stable-dep-of: c244c092f1ed ("tipc: fix unexpected link reset due to discovery messages")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d9fc1511728c15df49ff18e49a494d00f78b7cd4
Merge: 5be413a6e2a1 be53771c87f4
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Jan 12 18:20:44 2023 -0600

    Merge tag 'net-6.2-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from Paolo Abeni:
     "Including fixes from rxrpc.
    
      The rxrpc changes are noticeable large: to address a recent regression
      has been necessary completing the threaded refactor.
    
      Current release - regressions:
    
       - rxrpc:
           - only disconnect calls in the I/O thread
           - move client call connection to the I/O thread
           - fix incoming call setup race
    
       - eth: mlx5:
           - restore pkt rate policing support
           - fix memory leak on updating vport counters
    
      Previous releases - regressions:
    
       - gro: take care of DODGY packets
    
       - ipv6: deduct extension header length in rawv6_push_pending_frames
    
       - tipc: fix unexpected link reset due to discovery messages
    
      Previous releases - always broken:
    
       - sched: disallow noqueue for qdisc classes
    
       - eth: ice: fix potential memory leak in ice_gnss_tty_write()
    
       - eth: ixgbe: fix pci device refcount leak
    
       - eth: mlx5:
           - fix command stats access after free
           - fix macsec possible null dereference when updating MAC security
             entity (SecY)"
    
    * tag 'net-6.2-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (64 commits)
      r8152: add vendor/device ID pair for Microsoft Devkit
      net: stmmac: add aux timestamps fifo clearance wait
      bnxt: make sure we return pages to the pool
      net: hns3: fix wrong use of rss size during VF rss config
      ipv6: raw: Deduct extension header length in rawv6_push_pending_frames
      net: lan966x: check for ptp to be enabled in lan966x_ptp_deinit()
      net: sched: disallow noqueue for qdisc classes
      iavf/iavf_main: actually log ->src mask when talking about it
      igc: Fix PPS delta between two synchronized end-points
      ixgbe: fix pci device refcount leak
      octeontx2-pf: Fix resource leakage in VF driver unbind
      selftests/net: l2_tos_ttl_inherit.sh: Ensure environment cleanup on failure.
      selftests/net: l2_tos_ttl_inherit.sh: Run tests in their own netns.
      selftests/net: l2_tos_ttl_inherit.sh: Set IPv6 addresses with "nodad".
      net/mlx5e: Fix macsec possible null dereference when updating MAC security entity (SecY)
      net/mlx5e: Fix macsec ssci attribute handling in offload path
      net/mlx5: E-switch, Coverity: overlapping copy
      net/mlx5e: Don't support encap rules with gbp option
      net/mlx5: Fix ptp max frequency adjustment range
      net/mlx5e: Fix memory leak on updating vport counters
      ...

commit c244c092f1ed2acfb5af3d3da81e22367d3dd733
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Thu Jan 5 06:02:51 2023 +0000

    tipc: fix unexpected link reset due to discovery messages
    
    This unexpected behavior is observed:
    
    node 1                    | node 2
    ------                    | ------
    link is established       | link is established
    reboot                    | link is reset
    up                        | send discovery message
    receive discovery message |
    link is established       | link is established
    send discovery message    |
                              | receive discovery message
                              | link is reset (unexpected)
                              | send reset message
    link is reset             |
    
    It is due to delayed re-discovery as described in function
    tipc_node_check_dest(): "this link endpoint has already reset
    and re-established contact with the peer, before receiving a
    discovery message from that node."
    
    However, commit 598411d70f85 has changed the condition for calling
    tipc_node_link_down() which was the acceptance of new media address.
    
    This commit fixes this by restoring the old and correct behavior.
    
    Fixes: 598411d70f85 ("tipc: make resetting of links non-atomic")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1bb4f8be3797a1c12c1708253ca5535cff9afa9c
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sat Dec 3 18:37:21 2022 -0500

    tipc: call tipc_lxc_xmit without holding node_read_lock
    
    [ Upstream commit 88956177db179e4eba7cd590971961857d1565b8 ]
    
    When sending packets between nodes in netns, it calls tipc_lxc_xmit() for
    peer node to receive the packets where tipc_sk_mcast_rcv()/tipc_sk_rcv()
    might be called, and it's pretty much like in tipc_rcv().
    
    Currently the local 'node rw lock' is held during calling tipc_lxc_xmit()
    to protect the peer_net not being freed by another thread. However, when
    receiving these packets, tipc_node_add_conn() might be called where the
    peer 'node rw lock' is acquired. Then a dead lock warning is triggered by
    lockdep detector, although it is not a real dead lock:
    
        WARNING: possible recursive locking detected
        --------------------------------------------
        conn_server/1086 is trying to acquire lock:
        ffff8880065cb020 (&n->lock#2){++--}-{2:2}, \
                         at: tipc_node_add_conn.cold.76+0xaa/0x211 [tipc]
    
        but task is already holding lock:
        ffff8880065cd020 (&n->lock#2){++--}-{2:2}, \
                         at: tipc_node_xmit+0x285/0xb30 [tipc]
    
        other info that might help us debug this:
         Possible unsafe locking scenario:
    
               CPU0
               ----
          lock(&n->lock#2);
          lock(&n->lock#2);
    
         *** DEADLOCK ***
    
         May be due to missing lock nesting notation
    
        4 locks held by conn_server/1086:
         #0: ffff8880036d1e40 (sk_lock-AF_TIPC){+.+.}-{0:0}, \
                              at: tipc_accept+0x9c0/0x10b0 [tipc]
         #1: ffff8880036d5f80 (sk_lock-AF_TIPC/1){+.+.}-{0:0}, \
                              at: tipc_accept+0x363/0x10b0 [tipc]
         #2: ffff8880065cd020 (&n->lock#2){++--}-{2:2}, \
                              at: tipc_node_xmit+0x285/0xb30 [tipc]
         #3: ffff888012e13370 (slock-AF_TIPC){+...}-{2:2}, \
                              at: tipc_sk_rcv+0x2da/0x1b40 [tipc]
    
        Call Trace:
         <TASK>
         dump_stack_lvl+0x44/0x5b
         __lock_acquire.cold.77+0x1f2/0x3d7
         lock_acquire+0x1d2/0x610
         _raw_write_lock_bh+0x38/0x80
         tipc_node_add_conn.cold.76+0xaa/0x211 [tipc]
         tipc_sk_finish_conn+0x21e/0x640 [tipc]
         tipc_sk_filter_rcv+0x147b/0x3030 [tipc]
         tipc_sk_rcv+0xbb4/0x1b40 [tipc]
         tipc_lxc_xmit+0x225/0x26b [tipc]
         tipc_node_xmit.cold.82+0x4a/0x102 [tipc]
         __tipc_sendstream+0x879/0xff0 [tipc]
         tipc_accept+0x966/0x10b0 [tipc]
         do_accept+0x37d/0x590
    
    This patch avoids this warning by not holding the 'node rw lock' before
    calling tipc_lxc_xmit(). As to protect the 'peer_net', rcu_read_lock()
    should be enough, as in cleanup_net() when freeing the netns, it calls
    synchronize_rcu() before the free is continued.
    
    Also since tipc_lxc_xmit() is like the RX path in tipc_rcv(), it makes
    sense to call it under rcu_read_lock(). Note that the right lock order
    must be:
    
       rcu_read_lock();
       tipc_node_read_lock(n);
       tipc_node_read_unlock(n);
       tipc_lxc_xmit();
       rcu_read_unlock();
    
    instead of:
    
       tipc_node_read_lock(n);
       rcu_read_lock();
       tipc_node_read_unlock(n);
       tipc_lxc_xmit();
       rcu_read_unlock();
    
    and we have to call tipc_node_read_lock/unlock() twice in
    tipc_node_xmit().
    
    Fixes: f73b12812a3d ("tipc: improve throughput between nodes in netns")
    Reported-by: Shuang Li <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Link: https://lore.kernel.org/r/5bdd1f8fee9db695cfff4528a48c9b9d0523fb00.1670110641.git.lucien.xin@gmail.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b80b6282d7dcb2b4091ccd1f3da3e05e7dc6df0f
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Sat Dec 3 17:46:35 2022 +0800

    tipc: Fix potential OOB in tipc_link_proto_rcv()
    
    [ Upstream commit 743117a997bbd4840e827295c07e59bcd7f7caa3 ]
    
    Fix the potential risk of OOB if skb_linearize() fails in
    tipc_link_proto_rcv().
    
    Fixes: 5cbb28a4bf65 ("tipc: linearize arriving NAME_DISTR and LINK_PROTO buffers")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Link: https://lore.kernel.org/r/20221203094635.29024-1-yuehaibing@huawei.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d962d42d637613e16c7be218a167d42257eac5f4
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sat Dec 3 18:37:21 2022 -0500

    tipc: call tipc_lxc_xmit without holding node_read_lock
    
    [ Upstream commit 88956177db179e4eba7cd590971961857d1565b8 ]
    
    When sending packets between nodes in netns, it calls tipc_lxc_xmit() for
    peer node to receive the packets where tipc_sk_mcast_rcv()/tipc_sk_rcv()
    might be called, and it's pretty much like in tipc_rcv().
    
    Currently the local 'node rw lock' is held during calling tipc_lxc_xmit()
    to protect the peer_net not being freed by another thread. However, when
    receiving these packets, tipc_node_add_conn() might be called where the
    peer 'node rw lock' is acquired. Then a dead lock warning is triggered by
    lockdep detector, although it is not a real dead lock:
    
        WARNING: possible recursive locking detected
        --------------------------------------------
        conn_server/1086 is trying to acquire lock:
        ffff8880065cb020 (&n->lock#2){++--}-{2:2}, \
                         at: tipc_node_add_conn.cold.76+0xaa/0x211 [tipc]
    
        but task is already holding lock:
        ffff8880065cd020 (&n->lock#2){++--}-{2:2}, \
                         at: tipc_node_xmit+0x285/0xb30 [tipc]
    
        other info that might help us debug this:
         Possible unsafe locking scenario:
    
               CPU0
               ----
          lock(&n->lock#2);
          lock(&n->lock#2);
    
         *** DEADLOCK ***
    
         May be due to missing lock nesting notation
    
        4 locks held by conn_server/1086:
         #0: ffff8880036d1e40 (sk_lock-AF_TIPC){+.+.}-{0:0}, \
                              at: tipc_accept+0x9c0/0x10b0 [tipc]
         #1: ffff8880036d5f80 (sk_lock-AF_TIPC/1){+.+.}-{0:0}, \
                              at: tipc_accept+0x363/0x10b0 [tipc]
         #2: ffff8880065cd020 (&n->lock#2){++--}-{2:2}, \
                              at: tipc_node_xmit+0x285/0xb30 [tipc]
         #3: ffff888012e13370 (slock-AF_TIPC){+...}-{2:2}, \
                              at: tipc_sk_rcv+0x2da/0x1b40 [tipc]
    
        Call Trace:
         <TASK>
         dump_stack_lvl+0x44/0x5b
         __lock_acquire.cold.77+0x1f2/0x3d7
         lock_acquire+0x1d2/0x610
         _raw_write_lock_bh+0x38/0x80
         tipc_node_add_conn.cold.76+0xaa/0x211 [tipc]
         tipc_sk_finish_conn+0x21e/0x640 [tipc]
         tipc_sk_filter_rcv+0x147b/0x3030 [tipc]
         tipc_sk_rcv+0xbb4/0x1b40 [tipc]
         tipc_lxc_xmit+0x225/0x26b [tipc]
         tipc_node_xmit.cold.82+0x4a/0x102 [tipc]
         __tipc_sendstream+0x879/0xff0 [tipc]
         tipc_accept+0x966/0x10b0 [tipc]
         do_accept+0x37d/0x590
    
    This patch avoids this warning by not holding the 'node rw lock' before
    calling tipc_lxc_xmit(). As to protect the 'peer_net', rcu_read_lock()
    should be enough, as in cleanup_net() when freeing the netns, it calls
    synchronize_rcu() before the free is continued.
    
    Also since tipc_lxc_xmit() is like the RX path in tipc_rcv(), it makes
    sense to call it under rcu_read_lock(). Note that the right lock order
    must be:
    
       rcu_read_lock();
       tipc_node_read_lock(n);
       tipc_node_read_unlock(n);
       tipc_lxc_xmit();
       rcu_read_unlock();
    
    instead of:
    
       tipc_node_read_lock(n);
       rcu_read_lock();
       tipc_node_read_unlock(n);
       tipc_lxc_xmit();
       rcu_read_unlock();
    
    and we have to call tipc_node_read_lock/unlock() twice in
    tipc_node_xmit().
    
    Fixes: f73b12812a3d ("tipc: improve throughput between nodes in netns")
    Reported-by: Shuang Li <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Link: https://lore.kernel.org/r/5bdd1f8fee9db695cfff4528a48c9b9d0523fb00.1670110641.git.lucien.xin@gmail.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit af4ccae4b704ee333e199ca27542be0ed040b269
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Sat Dec 3 17:46:35 2022 +0800

    tipc: Fix potential OOB in tipc_link_proto_rcv()
    
    [ Upstream commit 743117a997bbd4840e827295c07e59bcd7f7caa3 ]
    
    Fix the potential risk of OOB if skb_linearize() fails in
    tipc_link_proto_rcv().
    
    Fixes: 5cbb28a4bf65 ("tipc: linearize arriving NAME_DISTR and LINK_PROTO buffers")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Link: https://lore.kernel.org/r/20221203094635.29024-1-yuehaibing@huawei.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cc668fddde4262f608baca2c9d85b9cf333e41c3
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sat Dec 3 18:37:21 2022 -0500

    tipc: call tipc_lxc_xmit without holding node_read_lock
    
    [ Upstream commit 88956177db179e4eba7cd590971961857d1565b8 ]
    
    When sending packets between nodes in netns, it calls tipc_lxc_xmit() for
    peer node to receive the packets where tipc_sk_mcast_rcv()/tipc_sk_rcv()
    might be called, and it's pretty much like in tipc_rcv().
    
    Currently the local 'node rw lock' is held during calling tipc_lxc_xmit()
    to protect the peer_net not being freed by another thread. However, when
    receiving these packets, tipc_node_add_conn() might be called where the
    peer 'node rw lock' is acquired. Then a dead lock warning is triggered by
    lockdep detector, although it is not a real dead lock:
    
        WARNING: possible recursive locking detected
        --------------------------------------------
        conn_server/1086 is trying to acquire lock:
        ffff8880065cb020 (&n->lock#2){++--}-{2:2}, \
                         at: tipc_node_add_conn.cold.76+0xaa/0x211 [tipc]
    
        but task is already holding lock:
        ffff8880065cd020 (&n->lock#2){++--}-{2:2}, \
                         at: tipc_node_xmit+0x285/0xb30 [tipc]
    
        other info that might help us debug this:
         Possible unsafe locking scenario:
    
               CPU0
               ----
          lock(&n->lock#2);
          lock(&n->lock#2);
    
         *** DEADLOCK ***
    
         May be due to missing lock nesting notation
    
        4 locks held by conn_server/1086:
         #0: ffff8880036d1e40 (sk_lock-AF_TIPC){+.+.}-{0:0}, \
                              at: tipc_accept+0x9c0/0x10b0 [tipc]
         #1: ffff8880036d5f80 (sk_lock-AF_TIPC/1){+.+.}-{0:0}, \
                              at: tipc_accept+0x363/0x10b0 [tipc]
         #2: ffff8880065cd020 (&n->lock#2){++--}-{2:2}, \
                              at: tipc_node_xmit+0x285/0xb30 [tipc]
         #3: ffff888012e13370 (slock-AF_TIPC){+...}-{2:2}, \
                              at: tipc_sk_rcv+0x2da/0x1b40 [tipc]
    
        Call Trace:
         <TASK>
         dump_stack_lvl+0x44/0x5b
         __lock_acquire.cold.77+0x1f2/0x3d7
         lock_acquire+0x1d2/0x610
         _raw_write_lock_bh+0x38/0x80
         tipc_node_add_conn.cold.76+0xaa/0x211 [tipc]
         tipc_sk_finish_conn+0x21e/0x640 [tipc]
         tipc_sk_filter_rcv+0x147b/0x3030 [tipc]
         tipc_sk_rcv+0xbb4/0x1b40 [tipc]
         tipc_lxc_xmit+0x225/0x26b [tipc]
         tipc_node_xmit.cold.82+0x4a/0x102 [tipc]
         __tipc_sendstream+0x879/0xff0 [tipc]
         tipc_accept+0x966/0x10b0 [tipc]
         do_accept+0x37d/0x590
    
    This patch avoids this warning by not holding the 'node rw lock' before
    calling tipc_lxc_xmit(). As to protect the 'peer_net', rcu_read_lock()
    should be enough, as in cleanup_net() when freeing the netns, it calls
    synchronize_rcu() before the free is continued.
    
    Also since tipc_lxc_xmit() is like the RX path in tipc_rcv(), it makes
    sense to call it under rcu_read_lock(). Note that the right lock order
    must be:
    
       rcu_read_lock();
       tipc_node_read_lock(n);
       tipc_node_read_unlock(n);
       tipc_lxc_xmit();
       rcu_read_unlock();
    
    instead of:
    
       tipc_node_read_lock(n);
       rcu_read_lock();
       tipc_node_read_unlock(n);
       tipc_lxc_xmit();
       rcu_read_unlock();
    
    and we have to call tipc_node_read_lock/unlock() twice in
    tipc_node_xmit().
    
    Fixes: f73b12812a3d ("tipc: improve throughput between nodes in netns")
    Reported-by: Shuang Li <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Link: https://lore.kernel.org/r/5bdd1f8fee9db695cfff4528a48c9b9d0523fb00.1670110641.git.lucien.xin@gmail.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 36e248269a16bd872631b76d4f0ec710f84e140d
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Sat Dec 3 17:46:35 2022 +0800

    tipc: Fix potential OOB in tipc_link_proto_rcv()
    
    [ Upstream commit 743117a997bbd4840e827295c07e59bcd7f7caa3 ]
    
    Fix the potential risk of OOB if skb_linearize() fails in
    tipc_link_proto_rcv().
    
    Fixes: 5cbb28a4bf65 ("tipc: linearize arriving NAME_DISTR and LINK_PROTO buffers")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Link: https://lore.kernel.org/r/20221203094635.29024-1-yuehaibing@huawei.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 36eedb9a05a765e837d2a328aa8b70754617ceaa
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Sat Dec 3 17:46:35 2022 +0800

    tipc: Fix potential OOB in tipc_link_proto_rcv()
    
    [ Upstream commit 743117a997bbd4840e827295c07e59bcd7f7caa3 ]
    
    Fix the potential risk of OOB if skb_linearize() fails in
    tipc_link_proto_rcv().
    
    Fixes: 5cbb28a4bf65 ("tipc: linearize arriving NAME_DISTR and LINK_PROTO buffers")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Link: https://lore.kernel.org/r/20221203094635.29024-1-yuehaibing@huawei.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8abe4a23980700f4a8a28988fd3e07bb461bd483
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Sat Dec 3 17:46:35 2022 +0800

    tipc: Fix potential OOB in tipc_link_proto_rcv()
    
    [ Upstream commit 743117a997bbd4840e827295c07e59bcd7f7caa3 ]
    
    Fix the potential risk of OOB if skb_linearize() fails in
    tipc_link_proto_rcv().
    
    Fixes: 5cbb28a4bf65 ("tipc: linearize arriving NAME_DISTR and LINK_PROTO buffers")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Link: https://lore.kernel.org/r/20221203094635.29024-1-yuehaibing@huawei.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit abf037ca3025b30dc20d97a40d922a4e0a7cafe3
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Sat Dec 3 17:46:35 2022 +0800

    tipc: Fix potential OOB in tipc_link_proto_rcv()
    
    [ Upstream commit 743117a997bbd4840e827295c07e59bcd7f7caa3 ]
    
    Fix the potential risk of OOB if skb_linearize() fails in
    tipc_link_proto_rcv().
    
    Fixes: 5cbb28a4bf65 ("tipc: linearize arriving NAME_DISTR and LINK_PROTO buffers")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Link: https://lore.kernel.org/r/20221203094635.29024-1-yuehaibing@huawei.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 62ae69ea7be897d75022999378477b2a94ee90b4
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Sat Dec 3 17:46:35 2022 +0800

    tipc: Fix potential OOB in tipc_link_proto_rcv()
    
    [ Upstream commit 743117a997bbd4840e827295c07e59bcd7f7caa3 ]
    
    Fix the potential risk of OOB if skb_linearize() fails in
    tipc_link_proto_rcv().
    
    Fixes: 5cbb28a4bf65 ("tipc: linearize arriving NAME_DISTR and LINK_PROTO buffers")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Link: https://lore.kernel.org/r/20221203094635.29024-1-yuehaibing@huawei.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 010b6761a9fc5006267d99abb6f9f196bf5d3d13
Merge: ce19275f0103 f8bac7f9fdb0
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Dec 8 15:32:13 2022 -0800

    Merge tag 'net-6.1-rc9' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from Jakub Kicinski:
     "Including fixes from bluetooth, can and netfilter.
    
      Current release - new code bugs:
    
       - bonding: ipv6: correct address used in Neighbour Advertisement
         parsing (src vs dst typo)
    
       - fec: properly scope IRQ coalesce setup during link up to supported
         chips only
    
      Previous releases - regressions:
    
       - Bluetooth fixes for fake CSR clones (knockoffs):
           - re-add ERR_DATA_REPORTING quirk
           - fix crash when device is replugged
    
       - Bluetooth:
           - silence a user-triggerable dmesg error message
           - L2CAP: fix u8 overflow, oob access
           - correct vendor codec definition
           - fix support for Read Local Supported Codecs V2
    
       - ti: am65-cpsw: fix RGMII configuration at SPEED_10
    
       - mana: fix race on per-CQ variable NAPI work_done
    
      Previous releases - always broken:
    
       - af_unix: diag: fetch user_ns from in_skb in unix_diag_get_exact(),
         avoid null-deref
    
       - af_can: fix NULL pointer dereference in can_rcv_filter
    
       - can: slcan: fix UAF with a freed work
    
       - can: can327: flush TX_work on ldisc .close()
    
       - macsec: add missing attribute validation for offload
    
       - ipv6: avoid use-after-free in ip6_fragment()
    
       - nft_set_pipapo: actually validate intervals in fields after the
         first one
    
       - mvneta: prevent oob access in mvneta_config_rss()
    
       - ipv4: fix incorrect route flushing when table ID 0 is used, or when
         source address is deleted
    
       - phy: mxl-gpy: add workaround for IRQ bug on GPY215B and GPY215C"
    
    * tag 'net-6.1-rc9' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (77 commits)
      net: dsa: sja1105: avoid out of bounds access in sja1105_init_l2_policing()
      s390/qeth: fix use-after-free in hsci
      macsec: add missing attribute validation for offload
      net: mvneta: Fix an out of bounds check
      net: thunderbolt: fix memory leak in tbnet_open()
      ipv6: avoid use-after-free in ip6_fragment()
      net: plip: don't call kfree_skb/dev_kfree_skb() under spin_lock_irq()
      net: phy: mxl-gpy: add MDINT workaround
      net: dsa: mv88e6xxx: accept phy-mode = "internal" for internal PHY ports
      xen/netback: don't call kfree_skb() under spin_lock_irqsave()
      dpaa2-switch: Fix memory leak in dpaa2_switch_acl_entry_add() and dpaa2_switch_acl_entry_remove()
      ethernet: aeroflex: fix potential skb leak in greth_init_rings()
      tipc: call tipc_lxc_xmit without holding node_read_lock
      can: esd_usb: Allow REC and TEC to return to zero
      can: can327: flush TX_work on ldisc .close()
      can: slcan: fix freed work crash
      can: af_can: fix NULL pointer dereference in can_rcv_filter
      net: dsa: sja1105: fix memory leak in sja1105_setup_devlink_regions()
      ipv4: Fix incorrect route flushing when table ID 0 is used
      ipv4: Fix incorrect route flushing when source address is deleted
      ...

commit e128190adb2edfd5042105b5d1ed4553f295f5ef
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Nov 25 12:46:43 2022 -0500

    tipc: re-fetch skb cb after tipc_msg_validate
    
    [ Upstream commit 3067bc61fcfe3081bf4807ce65560f499e895e77 ]
    
    As the call trace shows, the original skb was freed in tipc_msg_validate(),
    and dereferencing the old skb cb would cause an use-after-free crash.
    
      BUG: KASAN: use-after-free in tipc_crypto_rcv_complete+0x1835/0x2240 [tipc]
      Call Trace:
       <IRQ>
       tipc_crypto_rcv_complete+0x1835/0x2240 [tipc]
       tipc_crypto_rcv+0xd32/0x1ec0 [tipc]
       tipc_rcv+0x744/0x1150 [tipc]
      ...
      Allocated by task 47078:
       kmem_cache_alloc_node+0x158/0x4d0
       __alloc_skb+0x1c1/0x270
       tipc_buf_acquire+0x1e/0xe0 [tipc]
       tipc_msg_create+0x33/0x1c0 [tipc]
       tipc_link_build_proto_msg+0x38a/0x2100 [tipc]
       tipc_link_timeout+0x8b8/0xef0 [tipc]
       tipc_node_timeout+0x2a1/0x960 [tipc]
       call_timer_fn+0x2d/0x1c0
      ...
      Freed by task 47078:
       tipc_msg_validate+0x7b/0x440 [tipc]
       tipc_crypto_rcv_complete+0x4b5/0x2240 [tipc]
       tipc_crypto_rcv+0xd32/0x1ec0 [tipc]
       tipc_rcv+0x744/0x1150 [tipc]
    
    This patch fixes it by re-fetching the skb cb from the new allocated skb
    after calling tipc_msg_validate().
    
    Fixes: fc1b6d6de220 ("tipc: introduce TIPC encryption & authentication")
    Reported-by: Shuang Li <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Link: https://lore.kernel.org/r/1b1cdba762915325bd8ef9a98d0276eb673df2a5.1669398403.git.lucien.xin@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1daec0815655e110c6f206c5e777a4af8168ff58
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Nov 25 12:46:43 2022 -0500

    tipc: re-fetch skb cb after tipc_msg_validate
    
    [ Upstream commit 3067bc61fcfe3081bf4807ce65560f499e895e77 ]
    
    As the call trace shows, the original skb was freed in tipc_msg_validate(),
    and dereferencing the old skb cb would cause an use-after-free crash.
    
      BUG: KASAN: use-after-free in tipc_crypto_rcv_complete+0x1835/0x2240 [tipc]
      Call Trace:
       <IRQ>
       tipc_crypto_rcv_complete+0x1835/0x2240 [tipc]
       tipc_crypto_rcv+0xd32/0x1ec0 [tipc]
       tipc_rcv+0x744/0x1150 [tipc]
      ...
      Allocated by task 47078:
       kmem_cache_alloc_node+0x158/0x4d0
       __alloc_skb+0x1c1/0x270
       tipc_buf_acquire+0x1e/0xe0 [tipc]
       tipc_msg_create+0x33/0x1c0 [tipc]
       tipc_link_build_proto_msg+0x38a/0x2100 [tipc]
       tipc_link_timeout+0x8b8/0xef0 [tipc]
       tipc_node_timeout+0x2a1/0x960 [tipc]
       call_timer_fn+0x2d/0x1c0
      ...
      Freed by task 47078:
       tipc_msg_validate+0x7b/0x440 [tipc]
       tipc_crypto_rcv_complete+0x4b5/0x2240 [tipc]
       tipc_crypto_rcv+0xd32/0x1ec0 [tipc]
       tipc_rcv+0x744/0x1150 [tipc]
    
    This patch fixes it by re-fetching the skb cb from the new allocated skb
    after calling tipc_msg_validate().
    
    Fixes: fc1b6d6de220 ("tipc: introduce TIPC encryption & authentication")
    Reported-by: Shuang Li <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Link: https://lore.kernel.org/r/1b1cdba762915325bd8ef9a98d0276eb673df2a5.1669398403.git.lucien.xin@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a1ba595e35aa3afbe417ff0af353afb9f65559c0
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Nov 25 12:46:43 2022 -0500

    tipc: re-fetch skb cb after tipc_msg_validate
    
    [ Upstream commit 3067bc61fcfe3081bf4807ce65560f499e895e77 ]
    
    As the call trace shows, the original skb was freed in tipc_msg_validate(),
    and dereferencing the old skb cb would cause an use-after-free crash.
    
      BUG: KASAN: use-after-free in tipc_crypto_rcv_complete+0x1835/0x2240 [tipc]
      Call Trace:
       <IRQ>
       tipc_crypto_rcv_complete+0x1835/0x2240 [tipc]
       tipc_crypto_rcv+0xd32/0x1ec0 [tipc]
       tipc_rcv+0x744/0x1150 [tipc]
      ...
      Allocated by task 47078:
       kmem_cache_alloc_node+0x158/0x4d0
       __alloc_skb+0x1c1/0x270
       tipc_buf_acquire+0x1e/0xe0 [tipc]
       tipc_msg_create+0x33/0x1c0 [tipc]
       tipc_link_build_proto_msg+0x38a/0x2100 [tipc]
       tipc_link_timeout+0x8b8/0xef0 [tipc]
       tipc_node_timeout+0x2a1/0x960 [tipc]
       call_timer_fn+0x2d/0x1c0
      ...
      Freed by task 47078:
       tipc_msg_validate+0x7b/0x440 [tipc]
       tipc_crypto_rcv_complete+0x4b5/0x2240 [tipc]
       tipc_crypto_rcv+0xd32/0x1ec0 [tipc]
       tipc_rcv+0x744/0x1150 [tipc]
    
    This patch fixes it by re-fetching the skb cb from the new allocated skb
    after calling tipc_msg_validate().
    
    Fixes: fc1b6d6de220 ("tipc: introduce TIPC encryption & authentication")
    Reported-by: Shuang Li <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Link: https://lore.kernel.org/r/1b1cdba762915325bd8ef9a98d0276eb673df2a5.1669398403.git.lucien.xin@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 23ba1997ebc0d2183fc4e87f8038fa3457e0106e
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Sat Nov 19 15:28:32 2022 +0800

    tipc: check skb_linearize() return value in tipc_disc_rcv()
    
    [ Upstream commit cd0f6421162201e4b22ce757a1966729323185eb ]
    
    If skb_linearize() fails in tipc_disc_rcv(), we need to free the skb instead of
    handle it.
    
    Fixes: 25b0b9c4e835 ("tipc: handle collisions of 32-bit node address hash values")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Link: https://lore.kernel.org/r/20221119072832.7896-1-yuehaibing@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 59f9aad22fd743572bdafa37d3e1dd5dc5658e26
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Nov 18 16:45:01 2022 -0500

    tipc: add an extra conn_get in tipc_conn_alloc
    
    [ Upstream commit a7b42969d63f47320853a802efd879fbdc4e010e ]
    
    One extra conn_get() is needed in tipc_conn_alloc(), as after
    tipc_conn_alloc() is called, tipc_conn_close() may free this
    con before deferencing it in tipc_topsrv_accept():
    
       tipc_conn_alloc();
       newsk = newsock->sk;
                                     <---- tipc_conn_close();
       write_lock_bh(&sk->sk_callback_lock);
       newsk->sk_data_ready = tipc_conn_data_ready;
    
    Then an uaf issue can be triggered:
    
      BUG: KASAN: use-after-free in tipc_topsrv_accept+0x1e7/0x370 [tipc]
      Call Trace:
       <TASK>
       dump_stack_lvl+0x33/0x46
       print_report+0x178/0x4b0
       kasan_report+0x8c/0x100
       kasan_check_range+0x179/0x1e0
       tipc_topsrv_accept+0x1e7/0x370 [tipc]
       process_one_work+0x6a3/0x1030
       worker_thread+0x8a/0xdf0
    
    This patch fixes it by holding it in tipc_conn_alloc(), then after
    all accessing in tipc_topsrv_accept() releasing it. Note when does
    this in tipc_topsrv_kern_subscr(), as tipc_conn_rcv_sub() returns
    0 or -1 only, we don't need to check for "> 0".
    
    Fixes: c5fa7b3cf3cb ("tipc: introduce new TIPC server infrastructure")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 30f91687fa2502abb0b4d79569b63d1381169ccf
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Nov 18 16:45:00 2022 -0500

    tipc: set con sock in tipc_conn_alloc
    
    [ Upstream commit 0e5d56c64afcd6fd2d132ea972605b66f8a7d3c4 ]
    
    A crash was reported by Wei Chen:
    
      BUG: kernel NULL pointer dereference, address: 0000000000000018
      RIP: 0010:tipc_conn_close+0x12/0x100
      Call Trace:
       tipc_topsrv_exit_net+0x139/0x320
       ops_exit_list.isra.9+0x49/0x80
       cleanup_net+0x31a/0x540
       process_one_work+0x3fa/0x9f0
       worker_thread+0x42/0x5c0
    
    It was caused by !con->sock in tipc_conn_close(). In tipc_topsrv_accept(),
    con is allocated in conn_idr then its sock is set:
    
      con = tipc_conn_alloc();
      ...                    <----[1]
      con->sock = newsock;
    
    If tipc_conn_close() is called in anytime of [1], the null-pointer-def
    is triggered by con->sock->sk due to con->sock is not yet set.
    
    This patch fixes it by moving the con->sock setting to tipc_conn_alloc()
    under s->idr_lock. So that con->sock can never be NULL when getting the
    con from s->conn_idr. It will be also safer to move con->server and flag
    CF_CONNECTED setting under s->idr_lock, as they should all be set before
    tipc_conn_alloc() is called.
    
    Fixes: c5fa7b3cf3cb ("tipc: introduce new TIPC server infrastructure")
    Reported-by: Wei Chen <harperchen1110@gmail.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cbf4d5ea57e0419f8b20e06fa04fc31898f576d1
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Sat Nov 19 15:28:32 2022 +0800

    tipc: check skb_linearize() return value in tipc_disc_rcv()
    
    [ Upstream commit cd0f6421162201e4b22ce757a1966729323185eb ]
    
    If skb_linearize() fails in tipc_disc_rcv(), we need to free the skb instead of
    handle it.
    
    Fixes: 25b0b9c4e835 ("tipc: handle collisions of 32-bit node address hash values")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Link: https://lore.kernel.org/r/20221119072832.7896-1-yuehaibing@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f46826a6fce33c3549332c3eb1fbf615dc79be18
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Nov 18 16:45:01 2022 -0500

    tipc: add an extra conn_get in tipc_conn_alloc
    
    [ Upstream commit a7b42969d63f47320853a802efd879fbdc4e010e ]
    
    One extra conn_get() is needed in tipc_conn_alloc(), as after
    tipc_conn_alloc() is called, tipc_conn_close() may free this
    con before deferencing it in tipc_topsrv_accept():
    
       tipc_conn_alloc();
       newsk = newsock->sk;
                                     <---- tipc_conn_close();
       write_lock_bh(&sk->sk_callback_lock);
       newsk->sk_data_ready = tipc_conn_data_ready;
    
    Then an uaf issue can be triggered:
    
      BUG: KASAN: use-after-free in tipc_topsrv_accept+0x1e7/0x370 [tipc]
      Call Trace:
       <TASK>
       dump_stack_lvl+0x33/0x46
       print_report+0x178/0x4b0
       kasan_report+0x8c/0x100
       kasan_check_range+0x179/0x1e0
       tipc_topsrv_accept+0x1e7/0x370 [tipc]
       process_one_work+0x6a3/0x1030
       worker_thread+0x8a/0xdf0
    
    This patch fixes it by holding it in tipc_conn_alloc(), then after
    all accessing in tipc_topsrv_accept() releasing it. Note when does
    this in tipc_topsrv_kern_subscr(), as tipc_conn_rcv_sub() returns
    0 or -1 only, we don't need to check for "> 0".
    
    Fixes: c5fa7b3cf3cb ("tipc: introduce new TIPC server infrastructure")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2c9c64a95d97727c9ada0d35abc90ee5fdbaeff7
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Nov 18 16:45:00 2022 -0500

    tipc: set con sock in tipc_conn_alloc
    
    [ Upstream commit 0e5d56c64afcd6fd2d132ea972605b66f8a7d3c4 ]
    
    A crash was reported by Wei Chen:
    
      BUG: kernel NULL pointer dereference, address: 0000000000000018
      RIP: 0010:tipc_conn_close+0x12/0x100
      Call Trace:
       tipc_topsrv_exit_net+0x139/0x320
       ops_exit_list.isra.9+0x49/0x80
       cleanup_net+0x31a/0x540
       process_one_work+0x3fa/0x9f0
       worker_thread+0x42/0x5c0
    
    It was caused by !con->sock in tipc_conn_close(). In tipc_topsrv_accept(),
    con is allocated in conn_idr then its sock is set:
    
      con = tipc_conn_alloc();
      ...                    <----[1]
      con->sock = newsock;
    
    If tipc_conn_close() is called in anytime of [1], the null-pointer-def
    is triggered by con->sock->sk due to con->sock is not yet set.
    
    This patch fixes it by moving the con->sock setting to tipc_conn_alloc()
    under s->idr_lock. So that con->sock can never be NULL when getting the
    con from s->conn_idr. It will be also safer to move con->server and flag
    CF_CONNECTED setting under s->idr_lock, as they should all be set before
    tipc_conn_alloc() is called.
    
    Fixes: c5fa7b3cf3cb ("tipc: introduce new TIPC server infrastructure")
    Reported-by: Wei Chen <harperchen1110@gmail.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 88956177db179e4eba7cd590971961857d1565b8
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sat Dec 3 18:37:21 2022 -0500

    tipc: call tipc_lxc_xmit without holding node_read_lock
    
    When sending packets between nodes in netns, it calls tipc_lxc_xmit() for
    peer node to receive the packets where tipc_sk_mcast_rcv()/tipc_sk_rcv()
    might be called, and it's pretty much like in tipc_rcv().
    
    Currently the local 'node rw lock' is held during calling tipc_lxc_xmit()
    to protect the peer_net not being freed by another thread. However, when
    receiving these packets, tipc_node_add_conn() might be called where the
    peer 'node rw lock' is acquired. Then a dead lock warning is triggered by
    lockdep detector, although it is not a real dead lock:
    
        WARNING: possible recursive locking detected
        --------------------------------------------
        conn_server/1086 is trying to acquire lock:
        ffff8880065cb020 (&n->lock#2){++--}-{2:2}, \
                         at: tipc_node_add_conn.cold.76+0xaa/0x211 [tipc]
    
        but task is already holding lock:
        ffff8880065cd020 (&n->lock#2){++--}-{2:2}, \
                         at: tipc_node_xmit+0x285/0xb30 [tipc]
    
        other info that might help us debug this:
         Possible unsafe locking scenario:
    
               CPU0
               ----
          lock(&n->lock#2);
          lock(&n->lock#2);
    
         *** DEADLOCK ***
    
         May be due to missing lock nesting notation
    
        4 locks held by conn_server/1086:
         #0: ffff8880036d1e40 (sk_lock-AF_TIPC){+.+.}-{0:0}, \
                              at: tipc_accept+0x9c0/0x10b0 [tipc]
         #1: ffff8880036d5f80 (sk_lock-AF_TIPC/1){+.+.}-{0:0}, \
                              at: tipc_accept+0x363/0x10b0 [tipc]
         #2: ffff8880065cd020 (&n->lock#2){++--}-{2:2}, \
                              at: tipc_node_xmit+0x285/0xb30 [tipc]
         #3: ffff888012e13370 (slock-AF_TIPC){+...}-{2:2}, \
                              at: tipc_sk_rcv+0x2da/0x1b40 [tipc]
    
        Call Trace:
         <TASK>
         dump_stack_lvl+0x44/0x5b
         __lock_acquire.cold.77+0x1f2/0x3d7
         lock_acquire+0x1d2/0x610
         _raw_write_lock_bh+0x38/0x80
         tipc_node_add_conn.cold.76+0xaa/0x211 [tipc]
         tipc_sk_finish_conn+0x21e/0x640 [tipc]
         tipc_sk_filter_rcv+0x147b/0x3030 [tipc]
         tipc_sk_rcv+0xbb4/0x1b40 [tipc]
         tipc_lxc_xmit+0x225/0x26b [tipc]
         tipc_node_xmit.cold.82+0x4a/0x102 [tipc]
         __tipc_sendstream+0x879/0xff0 [tipc]
         tipc_accept+0x966/0x10b0 [tipc]
         do_accept+0x37d/0x590
    
    This patch avoids this warning by not holding the 'node rw lock' before
    calling tipc_lxc_xmit(). As to protect the 'peer_net', rcu_read_lock()
    should be enough, as in cleanup_net() when freeing the netns, it calls
    synchronize_rcu() before the free is continued.
    
    Also since tipc_lxc_xmit() is like the RX path in tipc_rcv(), it makes
    sense to call it under rcu_read_lock(). Note that the right lock order
    must be:
    
       rcu_read_lock();
       tipc_node_read_lock(n);
       tipc_node_read_unlock(n);
       tipc_lxc_xmit();
       rcu_read_unlock();
    
    instead of:
    
       tipc_node_read_lock(n);
       rcu_read_lock();
       tipc_node_read_unlock(n);
       tipc_lxc_xmit();
       rcu_read_unlock();
    
    and we have to call tipc_node_read_lock/unlock() twice in
    tipc_node_xmit().
    
    Fixes: f73b12812a3d ("tipc: improve throughput between nodes in netns")
    Reported-by: Shuang Li <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Link: https://lore.kernel.org/r/5bdd1f8fee9db695cfff4528a48c9b9d0523fb00.1670110641.git.lucien.xin@gmail.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>

commit 743117a997bbd4840e827295c07e59bcd7f7caa3
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Sat Dec 3 17:46:35 2022 +0800

    tipc: Fix potential OOB in tipc_link_proto_rcv()
    
    Fix the potential risk of OOB if skb_linearize() fails in
    tipc_link_proto_rcv().
    
    Fixes: 5cbb28a4bf65 ("tipc: linearize arriving NAME_DISTR and LINK_PROTO buffers")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Link: https://lore.kernel.org/r/20221203094635.29024-1-yuehaibing@huawei.com
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>

commit a201e66319c953b8468beeb5eabcece87cc22ecf
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Sat Nov 19 15:28:32 2022 +0800

    tipc: check skb_linearize() return value in tipc_disc_rcv()
    
    [ Upstream commit cd0f6421162201e4b22ce757a1966729323185eb ]
    
    If skb_linearize() fails in tipc_disc_rcv(), we need to free the skb instead of
    handle it.
    
    Fixes: 25b0b9c4e835 ("tipc: handle collisions of 32-bit node address hash values")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Link: https://lore.kernel.org/r/20221119072832.7896-1-yuehaibing@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bd5a4220f3414bb23d389040481f86928adf32e0
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Nov 18 16:45:01 2022 -0500

    tipc: add an extra conn_get in tipc_conn_alloc
    
    [ Upstream commit a7b42969d63f47320853a802efd879fbdc4e010e ]
    
    One extra conn_get() is needed in tipc_conn_alloc(), as after
    tipc_conn_alloc() is called, tipc_conn_close() may free this
    con before deferencing it in tipc_topsrv_accept():
    
       tipc_conn_alloc();
       newsk = newsock->sk;
                                     <---- tipc_conn_close();
       write_lock_bh(&sk->sk_callback_lock);
       newsk->sk_data_ready = tipc_conn_data_ready;
    
    Then an uaf issue can be triggered:
    
      BUG: KASAN: use-after-free in tipc_topsrv_accept+0x1e7/0x370 [tipc]
      Call Trace:
       <TASK>
       dump_stack_lvl+0x33/0x46
       print_report+0x178/0x4b0
       kasan_report+0x8c/0x100
       kasan_check_range+0x179/0x1e0
       tipc_topsrv_accept+0x1e7/0x370 [tipc]
       process_one_work+0x6a3/0x1030
       worker_thread+0x8a/0xdf0
    
    This patch fixes it by holding it in tipc_conn_alloc(), then after
    all accessing in tipc_topsrv_accept() releasing it. Note when does
    this in tipc_topsrv_kern_subscr(), as tipc_conn_rcv_sub() returns
    0 or -1 only, we don't need to check for "> 0".
    
    Fixes: c5fa7b3cf3cb ("tipc: introduce new TIPC server infrastructure")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 66d7a37e2ec769fbb4b086cc03c320565be3fbb9
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Nov 18 16:45:00 2022 -0500

    tipc: set con sock in tipc_conn_alloc
    
    [ Upstream commit 0e5d56c64afcd6fd2d132ea972605b66f8a7d3c4 ]
    
    A crash was reported by Wei Chen:
    
      BUG: kernel NULL pointer dereference, address: 0000000000000018
      RIP: 0010:tipc_conn_close+0x12/0x100
      Call Trace:
       tipc_topsrv_exit_net+0x139/0x320
       ops_exit_list.isra.9+0x49/0x80
       cleanup_net+0x31a/0x540
       process_one_work+0x3fa/0x9f0
       worker_thread+0x42/0x5c0
    
    It was caused by !con->sock in tipc_conn_close(). In tipc_topsrv_accept(),
    con is allocated in conn_idr then its sock is set:
    
      con = tipc_conn_alloc();
      ...                    <----[1]
      con->sock = newsock;
    
    If tipc_conn_close() is called in anytime of [1], the null-pointer-def
    is triggered by con->sock->sk due to con->sock is not yet set.
    
    This patch fixes it by moving the con->sock setting to tipc_conn_alloc()
    under s->idr_lock. So that con->sock can never be NULL when getting the
    con from s->conn_idr. It will be also safer to move con->server and flag
    CF_CONNECTED setting under s->idr_lock, as they should all be set before
    tipc_conn_alloc() is called.
    
    Fixes: c5fa7b3cf3cb ("tipc: introduce new TIPC server infrastructure")
    Reported-by: Wei Chen <harperchen1110@gmail.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 46d450067fc0fc0573ce05f7dce34164b4800af1
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Sat Nov 19 15:28:32 2022 +0800

    tipc: check skb_linearize() return value in tipc_disc_rcv()
    
    [ Upstream commit cd0f6421162201e4b22ce757a1966729323185eb ]
    
    If skb_linearize() fails in tipc_disc_rcv(), we need to free the skb instead of
    handle it.
    
    Fixes: 25b0b9c4e835 ("tipc: handle collisions of 32-bit node address hash values")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Link: https://lore.kernel.org/r/20221119072832.7896-1-yuehaibing@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 33fb115a76ae6683e34f76f7e07f6f0734b2525f
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Nov 18 16:45:01 2022 -0500

    tipc: add an extra conn_get in tipc_conn_alloc
    
    [ Upstream commit a7b42969d63f47320853a802efd879fbdc4e010e ]
    
    One extra conn_get() is needed in tipc_conn_alloc(), as after
    tipc_conn_alloc() is called, tipc_conn_close() may free this
    con before deferencing it in tipc_topsrv_accept():
    
       tipc_conn_alloc();
       newsk = newsock->sk;
                                     <---- tipc_conn_close();
       write_lock_bh(&sk->sk_callback_lock);
       newsk->sk_data_ready = tipc_conn_data_ready;
    
    Then an uaf issue can be triggered:
    
      BUG: KASAN: use-after-free in tipc_topsrv_accept+0x1e7/0x370 [tipc]
      Call Trace:
       <TASK>
       dump_stack_lvl+0x33/0x46
       print_report+0x178/0x4b0
       kasan_report+0x8c/0x100
       kasan_check_range+0x179/0x1e0
       tipc_topsrv_accept+0x1e7/0x370 [tipc]
       process_one_work+0x6a3/0x1030
       worker_thread+0x8a/0xdf0
    
    This patch fixes it by holding it in tipc_conn_alloc(), then after
    all accessing in tipc_topsrv_accept() releasing it. Note when does
    this in tipc_topsrv_kern_subscr(), as tipc_conn_rcv_sub() returns
    0 or -1 only, we don't need to check for "> 0".
    
    Fixes: c5fa7b3cf3cb ("tipc: introduce new TIPC server infrastructure")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4ae907c45fcad4450423b8cdefa5a74bad772068
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Nov 18 16:45:00 2022 -0500

    tipc: set con sock in tipc_conn_alloc
    
    [ Upstream commit 0e5d56c64afcd6fd2d132ea972605b66f8a7d3c4 ]
    
    A crash was reported by Wei Chen:
    
      BUG: kernel NULL pointer dereference, address: 0000000000000018
      RIP: 0010:tipc_conn_close+0x12/0x100
      Call Trace:
       tipc_topsrv_exit_net+0x139/0x320
       ops_exit_list.isra.9+0x49/0x80
       cleanup_net+0x31a/0x540
       process_one_work+0x3fa/0x9f0
       worker_thread+0x42/0x5c0
    
    It was caused by !con->sock in tipc_conn_close(). In tipc_topsrv_accept(),
    con is allocated in conn_idr then its sock is set:
    
      con = tipc_conn_alloc();
      ...                    <----[1]
      con->sock = newsock;
    
    If tipc_conn_close() is called in anytime of [1], the null-pointer-def
    is triggered by con->sock->sk due to con->sock is not yet set.
    
    This patch fixes it by moving the con->sock setting to tipc_conn_alloc()
    under s->idr_lock. So that con->sock can never be NULL when getting the
    con from s->conn_idr. It will be also safer to move con->server and flag
    CF_CONNECTED setting under s->idr_lock, as they should all be set before
    tipc_conn_alloc() is called.
    
    Fixes: c5fa7b3cf3cb ("tipc: introduce new TIPC server infrastructure")
    Reported-by: Wei Chen <harperchen1110@gmail.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c7788361a645708a51924d8aa63ead223923a5a8
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Sat Nov 19 15:28:32 2022 +0800

    tipc: check skb_linearize() return value in tipc_disc_rcv()
    
    [ Upstream commit cd0f6421162201e4b22ce757a1966729323185eb ]
    
    If skb_linearize() fails in tipc_disc_rcv(), we need to free the skb instead of
    handle it.
    
    Fixes: 25b0b9c4e835 ("tipc: handle collisions of 32-bit node address hash values")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Link: https://lore.kernel.org/r/20221119072832.7896-1-yuehaibing@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4058e3b74ab3eabe0835cee9a0c6deda79e8a295
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Nov 18 16:45:01 2022 -0500

    tipc: add an extra conn_get in tipc_conn_alloc
    
    [ Upstream commit a7b42969d63f47320853a802efd879fbdc4e010e ]
    
    One extra conn_get() is needed in tipc_conn_alloc(), as after
    tipc_conn_alloc() is called, tipc_conn_close() may free this
    con before deferencing it in tipc_topsrv_accept():
    
       tipc_conn_alloc();
       newsk = newsock->sk;
                                     <---- tipc_conn_close();
       write_lock_bh(&sk->sk_callback_lock);
       newsk->sk_data_ready = tipc_conn_data_ready;
    
    Then an uaf issue can be triggered:
    
      BUG: KASAN: use-after-free in tipc_topsrv_accept+0x1e7/0x370 [tipc]
      Call Trace:
       <TASK>
       dump_stack_lvl+0x33/0x46
       print_report+0x178/0x4b0
       kasan_report+0x8c/0x100
       kasan_check_range+0x179/0x1e0
       tipc_topsrv_accept+0x1e7/0x370 [tipc]
       process_one_work+0x6a3/0x1030
       worker_thread+0x8a/0xdf0
    
    This patch fixes it by holding it in tipc_conn_alloc(), then after
    all accessing in tipc_topsrv_accept() releasing it. Note when does
    this in tipc_topsrv_kern_subscr(), as tipc_conn_rcv_sub() returns
    0 or -1 only, we don't need to check for "> 0".
    
    Fixes: c5fa7b3cf3cb ("tipc: introduce new TIPC server infrastructure")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e87a077d09c05985a0edac7c6c49bb307f775d12
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Nov 18 16:45:00 2022 -0500

    tipc: set con sock in tipc_conn_alloc
    
    [ Upstream commit 0e5d56c64afcd6fd2d132ea972605b66f8a7d3c4 ]
    
    A crash was reported by Wei Chen:
    
      BUG: kernel NULL pointer dereference, address: 0000000000000018
      RIP: 0010:tipc_conn_close+0x12/0x100
      Call Trace:
       tipc_topsrv_exit_net+0x139/0x320
       ops_exit_list.isra.9+0x49/0x80
       cleanup_net+0x31a/0x540
       process_one_work+0x3fa/0x9f0
       worker_thread+0x42/0x5c0
    
    It was caused by !con->sock in tipc_conn_close(). In tipc_topsrv_accept(),
    con is allocated in conn_idr then its sock is set:
    
      con = tipc_conn_alloc();
      ...                    <----[1]
      con->sock = newsock;
    
    If tipc_conn_close() is called in anytime of [1], the null-pointer-def
    is triggered by con->sock->sk due to con->sock is not yet set.
    
    This patch fixes it by moving the con->sock setting to tipc_conn_alloc()
    under s->idr_lock. So that con->sock can never be NULL when getting the
    con from s->conn_idr. It will be also safer to move con->server and flag
    CF_CONNECTED setting under s->idr_lock, as they should all be set before
    tipc_conn_alloc() is called.
    
    Fixes: c5fa7b3cf3cb ("tipc: introduce new TIPC server infrastructure")
    Reported-by: Wei Chen <harperchen1110@gmail.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 01f856ae6d0ca5ad0505b79bf2d22d7ca439b2a1
Merge: ca57f02295f1 d66233a312ec
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Nov 29 09:52:10 2022 -0800

    Merge tag 'net-6.1-rc8-2' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from Jakub Kicinski:
     "Including fixes from bpf, can and wifi.
    
      Current release - new code bugs:
    
       - eth: mlx5e:
          - use kvfree() in mlx5e_accel_fs_tcp_create()
          - MACsec, fix RX data path 16 RX security channel limit
          - MACsec, fix memory leak when MACsec device is deleted
          - MACsec, fix update Rx secure channel active field
          - MACsec, fix add Rx security association (SA) rule memory leak
    
      Previous releases - regressions:
    
       - wifi: cfg80211: don't allow multi-BSSID in S1G
    
       - stmmac: set MAC's flow control register to reflect current settings
    
       - eth: mlx5:
          - E-switch, fix duplicate lag creation
          - fix use-after-free when reverting termination table
    
      Previous releases - always broken:
    
       - ipv4: fix route deletion when nexthop info is not specified
    
       - bpf: fix a local storage BPF map bug where the value's spin lock
         field can get initialized incorrectly
    
       - tipc: re-fetch skb cb after tipc_msg_validate
    
       - wifi: wilc1000: fix Information Element parsing
    
       - packet: do not set TP_STATUS_CSUM_VALID on CHECKSUM_COMPLETE
    
       - sctp: fix memory leak in sctp_stream_outq_migrate()
    
       - can: can327: fix potential skb leak when netdev is down
    
       - can: add number of missing netdev freeing on error paths
    
       - aquantia: do not purge addresses when setting the number of rings
    
       - wwan: iosm:
          - fix incorrect skb length leading to truncated packet
          - fix crash in peek throughput test due to skb UAF"
    
    * tag 'net-6.1-rc8-2' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (79 commits)
      net: ethernet: renesas: ravb: Fix promiscuous mode after system resumed
      MAINTAINERS: Update maintainer list for chelsio drivers
      ionic: update MAINTAINERS entry
      sctp: fix memory leak in sctp_stream_outq_migrate()
      packet: do not set TP_STATUS_CSUM_VALID on CHECKSUM_COMPLETE
      net/mlx5: Lag, Fix for loop when checking lag
      Revert "net/mlx5e: MACsec, remove replay window size limitation in offload path"
      net: marvell: prestera: Fix a NULL vs IS_ERR() check in some functions
      net: tun: Fix use-after-free in tun_detach()
      net: mdiobus: fix unbalanced node reference count
      net: hsr: Fix potential use-after-free
      tipc: re-fetch skb cb after tipc_msg_validate
      mptcp: fix sleep in atomic at close time
      mptcp: don't orphan ssk in mptcp_close()
      dsa: lan9303: Correct stat name
      ipv4: Fix route deletion when nexthop info is not specified
      net: wwan: iosm: fix incorrect skb length
      net: wwan: iosm: fix crash in peek throughput test
      net: wwan: iosm: fix dma_alloc_coherent incompatible pointer type
      net: wwan: iosm: fix kernel test robot reported error
      ...

commit 3067bc61fcfe3081bf4807ce65560f499e895e77
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Nov 25 12:46:43 2022 -0500

    tipc: re-fetch skb cb after tipc_msg_validate
    
    As the call trace shows, the original skb was freed in tipc_msg_validate(),
    and dereferencing the old skb cb would cause an use-after-free crash.
    
      BUG: KASAN: use-after-free in tipc_crypto_rcv_complete+0x1835/0x2240 [tipc]
      Call Trace:
       <IRQ>
       tipc_crypto_rcv_complete+0x1835/0x2240 [tipc]
       tipc_crypto_rcv+0xd32/0x1ec0 [tipc]
       tipc_rcv+0x744/0x1150 [tipc]
      ...
      Allocated by task 47078:
       kmem_cache_alloc_node+0x158/0x4d0
       __alloc_skb+0x1c1/0x270
       tipc_buf_acquire+0x1e/0xe0 [tipc]
       tipc_msg_create+0x33/0x1c0 [tipc]
       tipc_link_build_proto_msg+0x38a/0x2100 [tipc]
       tipc_link_timeout+0x8b8/0xef0 [tipc]
       tipc_node_timeout+0x2a1/0x960 [tipc]
       call_timer_fn+0x2d/0x1c0
      ...
      Freed by task 47078:
       tipc_msg_validate+0x7b/0x440 [tipc]
       tipc_crypto_rcv_complete+0x4b5/0x2240 [tipc]
       tipc_crypto_rcv+0xd32/0x1ec0 [tipc]
       tipc_rcv+0x744/0x1150 [tipc]
    
    This patch fixes it by re-fetching the skb cb from the new allocated skb
    after calling tipc_msg_validate().
    
    Fixes: fc1b6d6de220 ("tipc: introduce TIPC encryption & authentication")
    Reported-by: Shuang Li <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Link: https://lore.kernel.org/r/1b1cdba762915325bd8ef9a98d0276eb673df2a5.1669398403.git.lucien.xin@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 36769b9477491a7af6635863bd950309c1e1b96c
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Nov 4 16:48:53 2022 -0400

    tipc: fix the msg->req tlv len check in tipc_nl_compat_name_table_dump_header
    
    [ Upstream commit 1c075b192fe41030457cd4a5f7dea730412bca40 ]
    
    This is a follow-up for commit 974cb0e3e7c9 ("tipc: fix uninit-value
    in tipc_nl_compat_name_table_dump") where it should have type casted
    sizeof(..) to int to work when TLV_GET_DATA_LEN() returns a negative
    value.
    
    syzbot reported a call trace because of it:
    
      BUG: KMSAN: uninit-value in ...
       tipc_nl_compat_name_table_dump+0x841/0xea0 net/tipc/netlink_compat.c:934
       __tipc_nl_compat_dumpit+0xab2/0x1320 net/tipc/netlink_compat.c:238
       tipc_nl_compat_dumpit+0x991/0xb50 net/tipc/netlink_compat.c:321
       tipc_nl_compat_recv+0xb6e/0x1640 net/tipc/netlink_compat.c:1324
       genl_family_rcv_msg_doit net/netlink/genetlink.c:731 [inline]
       genl_family_rcv_msg net/netlink/genetlink.c:775 [inline]
       genl_rcv_msg+0x103f/0x1260 net/netlink/genetlink.c:792
       netlink_rcv_skb+0x3a5/0x6c0 net/netlink/af_netlink.c:2501
       genl_rcv+0x3c/0x50 net/netlink/genetlink.c:803
       netlink_unicast_kernel net/netlink/af_netlink.c:1319 [inline]
       netlink_unicast+0xf3b/0x1270 net/netlink/af_netlink.c:1345
       netlink_sendmsg+0x1288/0x1440 net/netlink/af_netlink.c:1921
       sock_sendmsg_nosec net/socket.c:714 [inline]
       sock_sendmsg net/socket.c:734 [inline]
    
    Reported-by: syzbot+e5dbaaa238680ce206ea@syzkaller.appspotmail.com
    Fixes: 974cb0e3e7c9 ("tipc: fix uninit-value in tipc_nl_compat_name_table_dump")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Link: https://lore.kernel.org/r/ccd6a7ea801b15aec092c3b532a883b4c5708695.1667594933.git.lucien.xin@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 55a253a6753a603e80b95932ca971ba514aa6ce7
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Nov 4 16:48:53 2022 -0400

    tipc: fix the msg->req tlv len check in tipc_nl_compat_name_table_dump_header
    
    [ Upstream commit 1c075b192fe41030457cd4a5f7dea730412bca40 ]
    
    This is a follow-up for commit 974cb0e3e7c9 ("tipc: fix uninit-value
    in tipc_nl_compat_name_table_dump") where it should have type casted
    sizeof(..) to int to work when TLV_GET_DATA_LEN() returns a negative
    value.
    
    syzbot reported a call trace because of it:
    
      BUG: KMSAN: uninit-value in ...
       tipc_nl_compat_name_table_dump+0x841/0xea0 net/tipc/netlink_compat.c:934
       __tipc_nl_compat_dumpit+0xab2/0x1320 net/tipc/netlink_compat.c:238
       tipc_nl_compat_dumpit+0x991/0xb50 net/tipc/netlink_compat.c:321
       tipc_nl_compat_recv+0xb6e/0x1640 net/tipc/netlink_compat.c:1324
       genl_family_rcv_msg_doit net/netlink/genetlink.c:731 [inline]
       genl_family_rcv_msg net/netlink/genetlink.c:775 [inline]
       genl_rcv_msg+0x103f/0x1260 net/netlink/genetlink.c:792
       netlink_rcv_skb+0x3a5/0x6c0 net/netlink/af_netlink.c:2501
       genl_rcv+0x3c/0x50 net/netlink/genetlink.c:803
       netlink_unicast_kernel net/netlink/af_netlink.c:1319 [inline]
       netlink_unicast+0xf3b/0x1270 net/netlink/af_netlink.c:1345
       netlink_sendmsg+0x1288/0x1440 net/netlink/af_netlink.c:1921
       sock_sendmsg_nosec net/socket.c:714 [inline]
       sock_sendmsg net/socket.c:734 [inline]
    
    Reported-by: syzbot+e5dbaaa238680ce206ea@syzkaller.appspotmail.com
    Fixes: 974cb0e3e7c9 ("tipc: fix uninit-value in tipc_nl_compat_name_table_dump")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Link: https://lore.kernel.org/r/ccd6a7ea801b15aec092c3b532a883b4c5708695.1667594933.git.lucien.xin@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a0ead1d648df9c456baec832b494513ef405949a
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Nov 4 16:48:53 2022 -0400

    tipc: fix the msg->req tlv len check in tipc_nl_compat_name_table_dump_header
    
    [ Upstream commit 1c075b192fe41030457cd4a5f7dea730412bca40 ]
    
    This is a follow-up for commit 974cb0e3e7c9 ("tipc: fix uninit-value
    in tipc_nl_compat_name_table_dump") where it should have type casted
    sizeof(..) to int to work when TLV_GET_DATA_LEN() returns a negative
    value.
    
    syzbot reported a call trace because of it:
    
      BUG: KMSAN: uninit-value in ...
       tipc_nl_compat_name_table_dump+0x841/0xea0 net/tipc/netlink_compat.c:934
       __tipc_nl_compat_dumpit+0xab2/0x1320 net/tipc/netlink_compat.c:238
       tipc_nl_compat_dumpit+0x991/0xb50 net/tipc/netlink_compat.c:321
       tipc_nl_compat_recv+0xb6e/0x1640 net/tipc/netlink_compat.c:1324
       genl_family_rcv_msg_doit net/netlink/genetlink.c:731 [inline]
       genl_family_rcv_msg net/netlink/genetlink.c:775 [inline]
       genl_rcv_msg+0x103f/0x1260 net/netlink/genetlink.c:792
       netlink_rcv_skb+0x3a5/0x6c0 net/netlink/af_netlink.c:2501
       genl_rcv+0x3c/0x50 net/netlink/genetlink.c:803
       netlink_unicast_kernel net/netlink/af_netlink.c:1319 [inline]
       netlink_unicast+0xf3b/0x1270 net/netlink/af_netlink.c:1345
       netlink_sendmsg+0x1288/0x1440 net/netlink/af_netlink.c:1921
       sock_sendmsg_nosec net/socket.c:714 [inline]
       sock_sendmsg net/socket.c:734 [inline]
    
    Reported-by: syzbot+e5dbaaa238680ce206ea@syzkaller.appspotmail.com
    Fixes: 974cb0e3e7c9 ("tipc: fix uninit-value in tipc_nl_compat_name_table_dump")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Link: https://lore.kernel.org/r/ccd6a7ea801b15aec092c3b532a883b4c5708695.1667594933.git.lucien.xin@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 082707d3df191bf5bb8801d43e4ce3dea39ca173
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Nov 4 16:48:53 2022 -0400

    tipc: fix the msg->req tlv len check in tipc_nl_compat_name_table_dump_header
    
    [ Upstream commit 1c075b192fe41030457cd4a5f7dea730412bca40 ]
    
    This is a follow-up for commit 974cb0e3e7c9 ("tipc: fix uninit-value
    in tipc_nl_compat_name_table_dump") where it should have type casted
    sizeof(..) to int to work when TLV_GET_DATA_LEN() returns a negative
    value.
    
    syzbot reported a call trace because of it:
    
      BUG: KMSAN: uninit-value in ...
       tipc_nl_compat_name_table_dump+0x841/0xea0 net/tipc/netlink_compat.c:934
       __tipc_nl_compat_dumpit+0xab2/0x1320 net/tipc/netlink_compat.c:238
       tipc_nl_compat_dumpit+0x991/0xb50 net/tipc/netlink_compat.c:321
       tipc_nl_compat_recv+0xb6e/0x1640 net/tipc/netlink_compat.c:1324
       genl_family_rcv_msg_doit net/netlink/genetlink.c:731 [inline]
       genl_family_rcv_msg net/netlink/genetlink.c:775 [inline]
       genl_rcv_msg+0x103f/0x1260 net/netlink/genetlink.c:792
       netlink_rcv_skb+0x3a5/0x6c0 net/netlink/af_netlink.c:2501
       genl_rcv+0x3c/0x50 net/netlink/genetlink.c:803
       netlink_unicast_kernel net/netlink/af_netlink.c:1319 [inline]
       netlink_unicast+0xf3b/0x1270 net/netlink/af_netlink.c:1345
       netlink_sendmsg+0x1288/0x1440 net/netlink/af_netlink.c:1921
       sock_sendmsg_nosec net/socket.c:714 [inline]
       sock_sendmsg net/socket.c:734 [inline]
    
    Reported-by: syzbot+e5dbaaa238680ce206ea@syzkaller.appspotmail.com
    Fixes: 974cb0e3e7c9 ("tipc: fix uninit-value in tipc_nl_compat_name_table_dump")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Link: https://lore.kernel.org/r/ccd6a7ea801b15aec092c3b532a883b4c5708695.1667594933.git.lucien.xin@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 08ad43d554bacb9769c6a69d5f771f02f5ba411c
Merge: cd89db60e228 661e5ebbafd2
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Nov 24 11:19:20 2022 -0800

    Merge tag 'net-6.1-rc7' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from Paolo Abeni:
     "Including fixes from rxrpc, netfilter and xfrm.
    
      Current release - regressions:
    
       - dccp/tcp: fix bhash2 issues related to WARN_ON() in
         inet_csk_get_port()
    
       - l2tp: don't sleep and disable BH under writer-side sk_callback_lock
    
       - eth: ice: fix handling of burst tx timestamps
    
      Current release - new code bugs:
    
       - xfrm: squelch kernel warning in case XFRM encap type is not
         available
    
       - eth: mlx5e: fix possible race condition in macsec extended packet
         number update routine
    
      Previous releases - regressions:
    
       - neigh: decrement the family specific qlen
    
       - netfilter: fix ipset regression
    
       - rxrpc: fix race between conn bundle lookup and bundle removal
         [ZDI-CAN-15975]
    
       - eth: iavf: do not restart tx queues after reset task failure
    
       - eth: nfp: add port from netdev validation for EEPROM access
    
       - eth: mtk_eth_soc: fix potential memory leak in mtk_rx_alloc()
    
      Previous releases - always broken:
    
       - tipc: set con sock in tipc_conn_alloc
    
       - nfc:
          - fix potential memory leaks
          - fix incorrect sizing calculations in EVT_TRANSACTION
    
       - eth: octeontx2-af: fix pci device refcount leak
    
       - eth: bonding: fix ICMPv6 header handling when receiving IPv6
         messages
    
       - eth: prestera: add missing unregister_netdev() in
         prestera_port_create()
    
       - eth: tsnep: fix rotten packets
    
      Misc:
    
       - usb: qmi_wwan: add support for LARA-L6"
    
    * tag 'net-6.1-rc7' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (95 commits)
      net: thunderx: Fix the ACPI memory leak
      octeontx2-af: Fix reference count issue in rvu_sdp_init()
      net: altera_tse: release phylink resources in tse_shutdown()
      virtio_net: Fix probe failed when modprobe virtio_net
      net: wwan: t7xx: Fix the ACPI memory leak
      octeontx2-pf: Add check for devm_kcalloc
      net: enetc: preserve TX ring priority across reconfiguration
      net: marvell: prestera: add missing unregister_netdev() in prestera_port_create()
      nfc: st-nci: fix incorrect sizing calculations in EVT_TRANSACTION
      nfc: st-nci: fix memory leaks in EVT_TRANSACTION
      nfc: st-nci: fix incorrect validating logic in EVT_TRANSACTION
      Documentation: networking: Update generic_netlink_howto URL
      net/cdc_ncm: Fix multicast RX support for CDC NCM devices with ZLP
      net: usb: qmi_wwan: add u-blox 0x1342 composition
      l2tp: Don't sleep and disable BH under writer-side sk_callback_lock
      net: dm9051: Fix missing dev_kfree_skb() in dm9051_loop_rx()
      arcnet: fix potential memory leak in com20020_probe()
      ipv4: Fix error return code in fib_table_insert()
      net: ethernet: mtk_eth_soc: fix memory leak in error path
      net: ethernet: mtk_eth_soc: fix resource leak in error path
      ...

commit cd0f6421162201e4b22ce757a1966729323185eb
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Sat Nov 19 15:28:32 2022 +0800

    tipc: check skb_linearize() return value in tipc_disc_rcv()
    
    If skb_linearize() fails in tipc_disc_rcv(), we need to free the skb instead of
    handle it.
    
    Fixes: 25b0b9c4e835 ("tipc: handle collisions of 32-bit node address hash values")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Link: https://lore.kernel.org/r/20221119072832.7896-1-yuehaibing@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 3349c272de07c75ebe0e6362b58db2d4502e75d2
Merge: 1f0dd412e34e a7b42969d63f
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Nov 21 20:45:28 2022 -0800

    Merge branch 'tipc-fix-two-race-issues-in-tipc_conn_alloc'
    
    Xin Long says:
    
    ====================
    tipc: fix two race issues in tipc_conn_alloc
    
    The race exists beteen tipc_topsrv_accept() and tipc_conn_close(),
    one is allocating the con while the other is freeing it and there
    is no proper lock protecting it. Therefore, a null-pointer-defer
    and a use-after-free may be triggered, see details on each patch.
    ====================
    
    Link: https://lore.kernel.org/r/cover.1668807842.git.lucien.xin@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit a7b42969d63f47320853a802efd879fbdc4e010e
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Nov 18 16:45:01 2022 -0500

    tipc: add an extra conn_get in tipc_conn_alloc
    
    One extra conn_get() is needed in tipc_conn_alloc(), as after
    tipc_conn_alloc() is called, tipc_conn_close() may free this
    con before deferencing it in tipc_topsrv_accept():
    
       tipc_conn_alloc();
       newsk = newsock->sk;
                                     <---- tipc_conn_close();
       write_lock_bh(&sk->sk_callback_lock);
       newsk->sk_data_ready = tipc_conn_data_ready;
    
    Then an uaf issue can be triggered:
    
      BUG: KASAN: use-after-free in tipc_topsrv_accept+0x1e7/0x370 [tipc]
      Call Trace:
       <TASK>
       dump_stack_lvl+0x33/0x46
       print_report+0x178/0x4b0
       kasan_report+0x8c/0x100
       kasan_check_range+0x179/0x1e0
       tipc_topsrv_accept+0x1e7/0x370 [tipc]
       process_one_work+0x6a3/0x1030
       worker_thread+0x8a/0xdf0
    
    This patch fixes it by holding it in tipc_conn_alloc(), then after
    all accessing in tipc_topsrv_accept() releasing it. Note when does
    this in tipc_topsrv_kern_subscr(), as tipc_conn_rcv_sub() returns
    0 or -1 only, we don't need to check for "> 0".
    
    Fixes: c5fa7b3cf3cb ("tipc: introduce new TIPC server infrastructure")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 0e5d56c64afcd6fd2d132ea972605b66f8a7d3c4
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Nov 18 16:45:00 2022 -0500

    tipc: set con sock in tipc_conn_alloc
    
    A crash was reported by Wei Chen:
    
      BUG: kernel NULL pointer dereference, address: 0000000000000018
      RIP: 0010:tipc_conn_close+0x12/0x100
      Call Trace:
       tipc_topsrv_exit_net+0x139/0x320
       ops_exit_list.isra.9+0x49/0x80
       cleanup_net+0x31a/0x540
       process_one_work+0x3fa/0x9f0
       worker_thread+0x42/0x5c0
    
    It was caused by !con->sock in tipc_conn_close(). In tipc_topsrv_accept(),
    con is allocated in conn_idr then its sock is set:
    
      con = tipc_conn_alloc();
      ...                    <----[1]
      con->sock = newsock;
    
    If tipc_conn_close() is called in anytime of [1], the null-pointer-def
    is triggered by con->sock->sk due to con->sock is not yet set.
    
    This patch fixes it by moving the con->sock setting to tipc_conn_alloc()
    under s->idr_lock. So that con->sock can never be NULL when getting the
    con from s->conn_idr. It will be also safer to move con->server and flag
    CF_CONNECTED setting under s->idr_lock, as they should all be set before
    tipc_conn_alloc() is called.
    
    Fixes: c5fa7b3cf3cb ("tipc: introduce new TIPC server infrastructure")
    Reported-by: Wei Chen <harperchen1110@gmail.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 6cee2c60bd168279852ac7dbe54c2b70d1028644
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Nov 4 16:48:53 2022 -0400

    tipc: fix the msg->req tlv len check in tipc_nl_compat_name_table_dump_header
    
    [ Upstream commit 1c075b192fe41030457cd4a5f7dea730412bca40 ]
    
    This is a follow-up for commit 974cb0e3e7c9 ("tipc: fix uninit-value
    in tipc_nl_compat_name_table_dump") where it should have type casted
    sizeof(..) to int to work when TLV_GET_DATA_LEN() returns a negative
    value.
    
    syzbot reported a call trace because of it:
    
      BUG: KMSAN: uninit-value in ...
       tipc_nl_compat_name_table_dump+0x841/0xea0 net/tipc/netlink_compat.c:934
       __tipc_nl_compat_dumpit+0xab2/0x1320 net/tipc/netlink_compat.c:238
       tipc_nl_compat_dumpit+0x991/0xb50 net/tipc/netlink_compat.c:321
       tipc_nl_compat_recv+0xb6e/0x1640 net/tipc/netlink_compat.c:1324
       genl_family_rcv_msg_doit net/netlink/genetlink.c:731 [inline]
       genl_family_rcv_msg net/netlink/genetlink.c:775 [inline]
       genl_rcv_msg+0x103f/0x1260 net/netlink/genetlink.c:792
       netlink_rcv_skb+0x3a5/0x6c0 net/netlink/af_netlink.c:2501
       genl_rcv+0x3c/0x50 net/netlink/genetlink.c:803
       netlink_unicast_kernel net/netlink/af_netlink.c:1319 [inline]
       netlink_unicast+0xf3b/0x1270 net/netlink/af_netlink.c:1345
       netlink_sendmsg+0x1288/0x1440 net/netlink/af_netlink.c:1921
       sock_sendmsg_nosec net/socket.c:714 [inline]
       sock_sendmsg net/socket.c:734 [inline]
    
    Reported-by: syzbot+e5dbaaa238680ce206ea@syzkaller.appspotmail.com
    Fixes: 974cb0e3e7c9 ("tipc: fix uninit-value in tipc_nl_compat_name_table_dump")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Link: https://lore.kernel.org/r/ccd6a7ea801b15aec092c3b532a883b4c5708695.1667594933.git.lucien.xin@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 301caa06091af4d5cf056ac8249cbda4e6029c6a
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Nov 4 16:48:53 2022 -0400

    tipc: fix the msg->req tlv len check in tipc_nl_compat_name_table_dump_header
    
    [ Upstream commit 1c075b192fe41030457cd4a5f7dea730412bca40 ]
    
    This is a follow-up for commit 974cb0e3e7c9 ("tipc: fix uninit-value
    in tipc_nl_compat_name_table_dump") where it should have type casted
    sizeof(..) to int to work when TLV_GET_DATA_LEN() returns a negative
    value.
    
    syzbot reported a call trace because of it:
    
      BUG: KMSAN: uninit-value in ...
       tipc_nl_compat_name_table_dump+0x841/0xea0 net/tipc/netlink_compat.c:934
       __tipc_nl_compat_dumpit+0xab2/0x1320 net/tipc/netlink_compat.c:238
       tipc_nl_compat_dumpit+0x991/0xb50 net/tipc/netlink_compat.c:321
       tipc_nl_compat_recv+0xb6e/0x1640 net/tipc/netlink_compat.c:1324
       genl_family_rcv_msg_doit net/netlink/genetlink.c:731 [inline]
       genl_family_rcv_msg net/netlink/genetlink.c:775 [inline]
       genl_rcv_msg+0x103f/0x1260 net/netlink/genetlink.c:792
       netlink_rcv_skb+0x3a5/0x6c0 net/netlink/af_netlink.c:2501
       genl_rcv+0x3c/0x50 net/netlink/genetlink.c:803
       netlink_unicast_kernel net/netlink/af_netlink.c:1319 [inline]
       netlink_unicast+0xf3b/0x1270 net/netlink/af_netlink.c:1345
       netlink_sendmsg+0x1288/0x1440 net/netlink/af_netlink.c:1921
       sock_sendmsg_nosec net/socket.c:714 [inline]
       sock_sendmsg net/socket.c:734 [inline]
    
    Reported-by: syzbot+e5dbaaa238680ce206ea@syzkaller.appspotmail.com
    Fixes: 974cb0e3e7c9 ("tipc: fix uninit-value in tipc_nl_compat_name_table_dump")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Link: https://lore.kernel.org/r/ccd6a7ea801b15aec092c3b532a883b4c5708695.1667594933.git.lucien.xin@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f31dd158580940938f77514b87337a777520185a
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Nov 4 16:48:53 2022 -0400

    tipc: fix the msg->req tlv len check in tipc_nl_compat_name_table_dump_header
    
    [ Upstream commit 1c075b192fe41030457cd4a5f7dea730412bca40 ]
    
    This is a follow-up for commit 974cb0e3e7c9 ("tipc: fix uninit-value
    in tipc_nl_compat_name_table_dump") where it should have type casted
    sizeof(..) to int to work when TLV_GET_DATA_LEN() returns a negative
    value.
    
    syzbot reported a call trace because of it:
    
      BUG: KMSAN: uninit-value in ...
       tipc_nl_compat_name_table_dump+0x841/0xea0 net/tipc/netlink_compat.c:934
       __tipc_nl_compat_dumpit+0xab2/0x1320 net/tipc/netlink_compat.c:238
       tipc_nl_compat_dumpit+0x991/0xb50 net/tipc/netlink_compat.c:321
       tipc_nl_compat_recv+0xb6e/0x1640 net/tipc/netlink_compat.c:1324
       genl_family_rcv_msg_doit net/netlink/genetlink.c:731 [inline]
       genl_family_rcv_msg net/netlink/genetlink.c:775 [inline]
       genl_rcv_msg+0x103f/0x1260 net/netlink/genetlink.c:792
       netlink_rcv_skb+0x3a5/0x6c0 net/netlink/af_netlink.c:2501
       genl_rcv+0x3c/0x50 net/netlink/genetlink.c:803
       netlink_unicast_kernel net/netlink/af_netlink.c:1319 [inline]
       netlink_unicast+0xf3b/0x1270 net/netlink/af_netlink.c:1345
       netlink_sendmsg+0x1288/0x1440 net/netlink/af_netlink.c:1921
       sock_sendmsg_nosec net/socket.c:714 [inline]
       sock_sendmsg net/socket.c:734 [inline]
    
    Reported-by: syzbot+e5dbaaa238680ce206ea@syzkaller.appspotmail.com
    Fixes: 974cb0e3e7c9 ("tipc: fix uninit-value in tipc_nl_compat_name_table_dump")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Link: https://lore.kernel.org/r/ccd6a7ea801b15aec092c3b532a883b4c5708695.1667594933.git.lucien.xin@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4bbf3422df78029f03161640dcb1e9d1ed64d1ea
Merge: 1767a722a708 abd5ac18ae66
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Nov 10 17:31:15 2022 -0800

    Merge tag 'net-6.1-rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from Jakub Kicinski:
     "Including fixes from netfilter, wifi, can and bpf.
    
      Current release - new code bugs:
    
       - can: af_can: can_exit(): add missing dev_remove_pack() of
         canxl_packet
    
      Previous releases - regressions:
    
       - bpf, sockmap: fix the sk->sk_forward_alloc warning
    
       - wifi: mac80211: fix general-protection-fault in
         ieee80211_subif_start_xmit()
    
       - can: af_can: fix NULL pointer dereference in can_rx_register()
    
       - can: dev: fix skb drop check, avoid o-o-b access
    
       - nfnetlink: fix potential dead lock in nfnetlink_rcv_msg()
    
      Previous releases - always broken:
    
       - bpf: fix wrong reg type conversion in release_reference()
    
       - gso: fix panic on frag_list with mixed head alloc types
    
       - wifi: brcmfmac: fix buffer overflow in brcmf_fweh_event_worker()
    
       - wifi: mac80211: set TWT Information Frame Disabled bit as 1
    
       - eth: macsec offload related fixes, make sure to clear the keys from
         memory
    
       - tun: fix memory leaks in the use of napi_get_frags
    
       - tun: call napi_schedule_prep() to ensure we own a napi
    
       - tcp: prohibit TCP_REPAIR_OPTIONS if data was already sent
    
       - ipv6: addrlabel: fix infoleak when sending struct ifaddrlblmsg to
         network
    
       - tipc: fix a msg->req tlv length check
    
       - sctp: clear out_curr if all frag chunks of current msg are pruned,
         avoid list corruption
    
       - mctp: fix an error handling path in mctp_init(), avoid leaks"
    
    * tag 'net-6.1-rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (101 commits)
      eth: sp7021: drop free_netdev() from spl2sw_init_netdev()
      MAINTAINERS: Move Vivien to CREDITS
      net: macvlan: fix memory leaks of macvlan_common_newlink
      ethernet: tundra: free irq when alloc ring failed in tsi108_open()
      net: mv643xx_eth: disable napi when init rxq or txq failed in mv643xx_eth_open()
      ethernet: s2io: disable napi when start nic failed in s2io_card_up()
      net: atlantic: macsec: clear encryption keys from the stack
      net: phy: mscc: macsec: clear encryption keys when freeing a flow
      stmmac: dwmac-loongson: fix missing of_node_put() while module exiting
      stmmac: dwmac-loongson: fix missing pci_disable_device() in loongson_dwmac_probe()
      stmmac: dwmac-loongson: fix missing pci_disable_msi() while module exiting
      cxgb4vf: shut down the adapter when t4vf_update_port_info() failed in cxgb4vf_open()
      mctp: Fix an error handling path in mctp_init()
      stmmac: intel: Update PCH PTP clock rate from 200MHz to 204.8MHz
      net: cxgb3_main: disable napi when bind qsets failed in cxgb_up()
      net: cpsw: disable napi in cpsw_ndo_open()
      iavf: Fix VF driver counting VLAN 0 filters
      ice: Fix spurious interrupt during removal of trusted VF
      net/mlx5e: TC, Fix slab-out-of-bounds in parse_tc_actions
      net/mlx5e: E-Switch, Fix comparing termination table instance
      ...

commit 1c075b192fe41030457cd4a5f7dea730412bca40
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Nov 4 16:48:53 2022 -0400

    tipc: fix the msg->req tlv len check in tipc_nl_compat_name_table_dump_header
    
    This is a follow-up for commit 974cb0e3e7c9 ("tipc: fix uninit-value
    in tipc_nl_compat_name_table_dump") where it should have type casted
    sizeof(..) to int to work when TLV_GET_DATA_LEN() returns a negative
    value.
    
    syzbot reported a call trace because of it:
    
      BUG: KMSAN: uninit-value in ...
       tipc_nl_compat_name_table_dump+0x841/0xea0 net/tipc/netlink_compat.c:934
       __tipc_nl_compat_dumpit+0xab2/0x1320 net/tipc/netlink_compat.c:238
       tipc_nl_compat_dumpit+0x991/0xb50 net/tipc/netlink_compat.c:321
       tipc_nl_compat_recv+0xb6e/0x1640 net/tipc/netlink_compat.c:1324
       genl_family_rcv_msg_doit net/netlink/genetlink.c:731 [inline]
       genl_family_rcv_msg net/netlink/genetlink.c:775 [inline]
       genl_rcv_msg+0x103f/0x1260 net/netlink/genetlink.c:792
       netlink_rcv_skb+0x3a5/0x6c0 net/netlink/af_netlink.c:2501
       genl_rcv+0x3c/0x50 net/netlink/genetlink.c:803
       netlink_unicast_kernel net/netlink/af_netlink.c:1319 [inline]
       netlink_unicast+0xf3b/0x1270 net/netlink/af_netlink.c:1345
       netlink_sendmsg+0x1288/0x1440 net/netlink/af_netlink.c:1921
       sock_sendmsg_nosec net/socket.c:714 [inline]
       sock_sendmsg net/socket.c:734 [inline]
    
    Reported-by: syzbot+e5dbaaa238680ce206ea@syzkaller.appspotmail.com
    Fixes: 974cb0e3e7c9 ("tipc: fix uninit-value in tipc_nl_compat_name_table_dump")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Link: https://lore.kernel.org/r/ccd6a7ea801b15aec092c3b532a883b4c5708695.1667594933.git.lucien.xin@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit cedb41664e27b2cae7e21487f1bee22dcd84037d
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Oct 18 15:19:50 2022 -0400

    tipc: fix a null-ptr-deref in tipc_topsrv_accept
    
    [ Upstream commit 82cb4e4612c633a9ce320e1773114875604a3cce ]
    
    syzbot found a crash in tipc_topsrv_accept:
    
      KASAN: null-ptr-deref in range [0x0000000000000008-0x000000000000000f]
      Workqueue: tipc_rcv tipc_topsrv_accept
      RIP: 0010:kernel_accept+0x22d/0x350 net/socket.c:3487
      Call Trace:
       <TASK>
       tipc_topsrv_accept+0x197/0x280 net/tipc/topsrv.c:460
       process_one_work+0x991/0x1610 kernel/workqueue.c:2289
       worker_thread+0x665/0x1080 kernel/workqueue.c:2436
       kthread+0x2e4/0x3a0 kernel/kthread.c:376
       ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:306
    
    It was caused by srv->listener that might be set to null by
    tipc_topsrv_stop() in net .exit whereas it's still used in
    tipc_topsrv_accept() worker.
    
    srv->listener is protected by srv->idr_lock in tipc_topsrv_stop(), so add
    a check for srv->listener under srv->idr_lock in tipc_topsrv_accept() to
    avoid the null-ptr-deref. To ensure the lsock is not released during the
    tipc_topsrv_accept(), move sock_release() after tipc_topsrv_work_stop()
    where it's waiting until the tipc_topsrv_accept worker to be done.
    
    Note that sk_callback_lock is used to protect sk->sk_user_data instead of
    srv->listener, and it should check srv in tipc_topsrv_listener_data_ready()
    instead. This also ensures that no more tipc_topsrv_accept worker will be
    started after tipc_conn_close() is called in tipc_topsrv_stop() where it
    sets sk->sk_user_data to null.
    
    Fixes: 0ef897be12b8 ("tipc: separate topology server listener socket from subcsriber sockets")
    Reported-by: syzbot+c5ce866a8d30f4be0651@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Link: https://lore.kernel.org/r/4eee264380c409c61c6451af1059b7fb271a7e7b.1666120790.git.lucien.xin@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7a939503fc32bff4ed60800b73ff7fbb4aea2142
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Oct 18 15:19:50 2022 -0400

    tipc: fix a null-ptr-deref in tipc_topsrv_accept
    
    [ Upstream commit 82cb4e4612c633a9ce320e1773114875604a3cce ]
    
    syzbot found a crash in tipc_topsrv_accept:
    
      KASAN: null-ptr-deref in range [0x0000000000000008-0x000000000000000f]
      Workqueue: tipc_rcv tipc_topsrv_accept
      RIP: 0010:kernel_accept+0x22d/0x350 net/socket.c:3487
      Call Trace:
       <TASK>
       tipc_topsrv_accept+0x197/0x280 net/tipc/topsrv.c:460
       process_one_work+0x991/0x1610 kernel/workqueue.c:2289
       worker_thread+0x665/0x1080 kernel/workqueue.c:2436
       kthread+0x2e4/0x3a0 kernel/kthread.c:376
       ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:306
    
    It was caused by srv->listener that might be set to null by
    tipc_topsrv_stop() in net .exit whereas it's still used in
    tipc_topsrv_accept() worker.
    
    srv->listener is protected by srv->idr_lock in tipc_topsrv_stop(), so add
    a check for srv->listener under srv->idr_lock in tipc_topsrv_accept() to
    avoid the null-ptr-deref. To ensure the lsock is not released during the
    tipc_topsrv_accept(), move sock_release() after tipc_topsrv_work_stop()
    where it's waiting until the tipc_topsrv_accept worker to be done.
    
    Note that sk_callback_lock is used to protect sk->sk_user_data instead of
    srv->listener, and it should check srv in tipc_topsrv_listener_data_ready()
    instead. This also ensures that no more tipc_topsrv_accept worker will be
    started after tipc_conn_close() is called in tipc_topsrv_stop() where it
    sets sk->sk_user_data to null.
    
    Fixes: 0ef897be12b8 ("tipc: separate topology server listener socket from subcsriber sockets")
    Reported-by: syzbot+c5ce866a8d30f4be0651@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Link: https://lore.kernel.org/r/4eee264380c409c61c6451af1059b7fb271a7e7b.1666120790.git.lucien.xin@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 32a3d4660b34ce49ac0162338ebe362098e2f5df
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Oct 18 15:19:50 2022 -0400

    tipc: fix a null-ptr-deref in tipc_topsrv_accept
    
    [ Upstream commit 82cb4e4612c633a9ce320e1773114875604a3cce ]
    
    syzbot found a crash in tipc_topsrv_accept:
    
      KASAN: null-ptr-deref in range [0x0000000000000008-0x000000000000000f]
      Workqueue: tipc_rcv tipc_topsrv_accept
      RIP: 0010:kernel_accept+0x22d/0x350 net/socket.c:3487
      Call Trace:
       <TASK>
       tipc_topsrv_accept+0x197/0x280 net/tipc/topsrv.c:460
       process_one_work+0x991/0x1610 kernel/workqueue.c:2289
       worker_thread+0x665/0x1080 kernel/workqueue.c:2436
       kthread+0x2e4/0x3a0 kernel/kthread.c:376
       ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:306
    
    It was caused by srv->listener that might be set to null by
    tipc_topsrv_stop() in net .exit whereas it's still used in
    tipc_topsrv_accept() worker.
    
    srv->listener is protected by srv->idr_lock in tipc_topsrv_stop(), so add
    a check for srv->listener under srv->idr_lock in tipc_topsrv_accept() to
    avoid the null-ptr-deref. To ensure the lsock is not released during the
    tipc_topsrv_accept(), move sock_release() after tipc_topsrv_work_stop()
    where it's waiting until the tipc_topsrv_accept worker to be done.
    
    Note that sk_callback_lock is used to protect sk->sk_user_data instead of
    srv->listener, and it should check srv in tipc_topsrv_listener_data_ready()
    instead. This also ensures that no more tipc_topsrv_accept worker will be
    started after tipc_conn_close() is called in tipc_topsrv_stop() where it
    sets sk->sk_user_data to null.
    
    Fixes: 0ef897be12b8 ("tipc: separate topology server listener socket from subcsriber sockets")
    Reported-by: syzbot+c5ce866a8d30f4be0651@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Link: https://lore.kernel.org/r/4eee264380c409c61c6451af1059b7fb271a7e7b.1666120790.git.lucien.xin@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 24b129aed8730e48f47d852d58d76825ab6f407c
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Oct 18 15:19:50 2022 -0400

    tipc: fix a null-ptr-deref in tipc_topsrv_accept
    
    [ Upstream commit 82cb4e4612c633a9ce320e1773114875604a3cce ]
    
    syzbot found a crash in tipc_topsrv_accept:
    
      KASAN: null-ptr-deref in range [0x0000000000000008-0x000000000000000f]
      Workqueue: tipc_rcv tipc_topsrv_accept
      RIP: 0010:kernel_accept+0x22d/0x350 net/socket.c:3487
      Call Trace:
       <TASK>
       tipc_topsrv_accept+0x197/0x280 net/tipc/topsrv.c:460
       process_one_work+0x991/0x1610 kernel/workqueue.c:2289
       worker_thread+0x665/0x1080 kernel/workqueue.c:2436
       kthread+0x2e4/0x3a0 kernel/kthread.c:376
       ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:306
    
    It was caused by srv->listener that might be set to null by
    tipc_topsrv_stop() in net .exit whereas it's still used in
    tipc_topsrv_accept() worker.
    
    srv->listener is protected by srv->idr_lock in tipc_topsrv_stop(), so add
    a check for srv->listener under srv->idr_lock in tipc_topsrv_accept() to
    avoid the null-ptr-deref. To ensure the lsock is not released during the
    tipc_topsrv_accept(), move sock_release() after tipc_topsrv_work_stop()
    where it's waiting until the tipc_topsrv_accept worker to be done.
    
    Note that sk_callback_lock is used to protect sk->sk_user_data instead of
    srv->listener, and it should check srv in tipc_topsrv_listener_data_ready()
    instead. This also ensures that no more tipc_topsrv_accept worker will be
    started after tipc_conn_close() is called in tipc_topsrv_stop() where it
    sets sk->sk_user_data to null.
    
    Fixes: 0ef897be12b8 ("tipc: separate topology server listener socket from subcsriber sockets")
    Reported-by: syzbot+c5ce866a8d30f4be0651@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Link: https://lore.kernel.org/r/4eee264380c409c61c6451af1059b7fb271a7e7b.1666120790.git.lucien.xin@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ce69bdac2310152bb70845024d5d704c52aabfc3
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Oct 18 15:19:50 2022 -0400

    tipc: fix a null-ptr-deref in tipc_topsrv_accept
    
    [ Upstream commit 82cb4e4612c633a9ce320e1773114875604a3cce ]
    
    syzbot found a crash in tipc_topsrv_accept:
    
      KASAN: null-ptr-deref in range [0x0000000000000008-0x000000000000000f]
      Workqueue: tipc_rcv tipc_topsrv_accept
      RIP: 0010:kernel_accept+0x22d/0x350 net/socket.c:3487
      Call Trace:
       <TASK>
       tipc_topsrv_accept+0x197/0x280 net/tipc/topsrv.c:460
       process_one_work+0x991/0x1610 kernel/workqueue.c:2289
       worker_thread+0x665/0x1080 kernel/workqueue.c:2436
       kthread+0x2e4/0x3a0 kernel/kthread.c:376
       ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:306
    
    It was caused by srv->listener that might be set to null by
    tipc_topsrv_stop() in net .exit whereas it's still used in
    tipc_topsrv_accept() worker.
    
    srv->listener is protected by srv->idr_lock in tipc_topsrv_stop(), so add
    a check for srv->listener under srv->idr_lock in tipc_topsrv_accept() to
    avoid the null-ptr-deref. To ensure the lsock is not released during the
    tipc_topsrv_accept(), move sock_release() after tipc_topsrv_work_stop()
    where it's waiting until the tipc_topsrv_accept worker to be done.
    
    Note that sk_callback_lock is used to protect sk->sk_user_data instead of
    srv->listener, and it should check srv in tipc_topsrv_listener_data_ready()
    instead. This also ensures that no more tipc_topsrv_accept worker will be
    started after tipc_conn_close() is called in tipc_topsrv_stop() where it
    sets sk->sk_user_data to null.
    
    Fixes: 0ef897be12b8 ("tipc: separate topology server listener socket from subcsriber sockets")
    Reported-by: syzbot+c5ce866a8d30f4be0651@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Link: https://lore.kernel.org/r/4eee264380c409c61c6451af1059b7fb271a7e7b.1666120790.git.lucien.xin@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3d1b83ff7b6575a4e41283203e6b2e25ea700cd7
Author: Alexander Potapenko <glider@google.com>
Date:   Wed Oct 12 17:25:14 2022 +0200

    tipc: fix an information leak in tipc_topsrv_kern_subscr
    
    [ Upstream commit 777ecaabd614d47c482a5c9031579e66da13989a ]
    
    Use a 8-byte write to initialize sub.usr_handle in
    tipc_topsrv_kern_subscr(), otherwise four bytes remain uninitialized
    when issuing setsockopt(..., SOL_TIPC, ...).
    This resulted in an infoleak reported by KMSAN when the packet was
    received:
    
      =====================================================
      BUG: KMSAN: kernel-infoleak in copyout+0xbc/0x100 lib/iov_iter.c:169
       instrument_copy_to_user ./include/linux/instrumented.h:121
       copyout+0xbc/0x100 lib/iov_iter.c:169
       _copy_to_iter+0x5c0/0x20a0 lib/iov_iter.c:527
       copy_to_iter ./include/linux/uio.h:176
       simple_copy_to_iter+0x64/0xa0 net/core/datagram.c:513
       __skb_datagram_iter+0x123/0xdc0 net/core/datagram.c:419
       skb_copy_datagram_iter+0x58/0x200 net/core/datagram.c:527
       skb_copy_datagram_msg ./include/linux/skbuff.h:3903
       packet_recvmsg+0x521/0x1e70 net/packet/af_packet.c:3469
       ____sys_recvmsg+0x2c4/0x810 net/socket.c:?
       ___sys_recvmsg+0x217/0x840 net/socket.c:2743
       __sys_recvmsg net/socket.c:2773
       __do_sys_recvmsg net/socket.c:2783
       __se_sys_recvmsg net/socket.c:2780
       __x64_sys_recvmsg+0x364/0x540 net/socket.c:2780
       do_syscall_x64 arch/x86/entry/common.c:50
       do_syscall_64+0x3d/0xb0 arch/x86/entry/common.c:80
       entry_SYSCALL_64_after_hwframe+0x63/0xcd arch/x86/entry/entry_64.S:120
    
      ...
    
      Uninit was stored to memory at:
       tipc_sub_subscribe+0x42d/0xb50 net/tipc/subscr.c:156
       tipc_conn_rcv_sub+0x246/0x620 net/tipc/topsrv.c:375
       tipc_topsrv_kern_subscr+0x2e8/0x400 net/tipc/topsrv.c:579
       tipc_group_create+0x4e7/0x7d0 net/tipc/group.c:190
       tipc_sk_join+0x2a8/0x770 net/tipc/socket.c:3084
       tipc_setsockopt+0xae5/0xe40 net/tipc/socket.c:3201
       __sys_setsockopt+0x87f/0xdc0 net/socket.c:2252
       __do_sys_setsockopt net/socket.c:2263
       __se_sys_setsockopt net/socket.c:2260
       __x64_sys_setsockopt+0xe0/0x160 net/socket.c:2260
       do_syscall_x64 arch/x86/entry/common.c:50
       do_syscall_64+0x3d/0xb0 arch/x86/entry/common.c:80
       entry_SYSCALL_64_after_hwframe+0x63/0xcd arch/x86/entry/entry_64.S:120
    
      Local variable sub created at:
       tipc_topsrv_kern_subscr+0x57/0x400 net/tipc/topsrv.c:562
       tipc_group_create+0x4e7/0x7d0 net/tipc/group.c:190
    
      Bytes 84-87 of 88 are uninitialized
      Memory access of size 88 starts at ffff88801ed57cd0
      Data copied to user address 0000000020000400
      ...
      =====================================================
    
    Signed-off-by: Alexander Potapenko <glider@google.com>
    Fixes: 026321c6d056a5 ("tipc: rename tipc_server to tipc_topsrv")
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d62e0f037e482f2fbb671496a797ff807f292dd6
Author: Mark Tomlinson <mark.tomlinson@alliedtelesis.co.nz>
Date:   Mon Oct 10 15:46:13 2022 +1300

    tipc: Fix recognition of trial period
    
    [ Upstream commit 28be7ca4fcfd69a2d52aaa331adbf9dbe91f9e6e ]
    
    The trial period exists until jiffies is after addr_trial_end. But as
    jiffies will eventually overflow, just using time_after will eventually
    give incorrect results. As the node address is set once the trial period
    ends, this can be used to know that we are not in the trial period.
    
    Fixes: e415577f57f4 ("tipc: correct discovery message handling during address trial period")
    Signed-off-by: Mark Tomlinson <mark.tomlinson@alliedtelesis.co.nz>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e558e148938442dd49628cd7ef61c360832bef31
Author: Alexander Potapenko <glider@google.com>
Date:   Wed Oct 12 17:25:14 2022 +0200

    tipc: fix an information leak in tipc_topsrv_kern_subscr
    
    [ Upstream commit 777ecaabd614d47c482a5c9031579e66da13989a ]
    
    Use a 8-byte write to initialize sub.usr_handle in
    tipc_topsrv_kern_subscr(), otherwise four bytes remain uninitialized
    when issuing setsockopt(..., SOL_TIPC, ...).
    This resulted in an infoleak reported by KMSAN when the packet was
    received:
    
      =====================================================
      BUG: KMSAN: kernel-infoleak in copyout+0xbc/0x100 lib/iov_iter.c:169
       instrument_copy_to_user ./include/linux/instrumented.h:121
       copyout+0xbc/0x100 lib/iov_iter.c:169
       _copy_to_iter+0x5c0/0x20a0 lib/iov_iter.c:527
       copy_to_iter ./include/linux/uio.h:176
       simple_copy_to_iter+0x64/0xa0 net/core/datagram.c:513
       __skb_datagram_iter+0x123/0xdc0 net/core/datagram.c:419
       skb_copy_datagram_iter+0x58/0x200 net/core/datagram.c:527
       skb_copy_datagram_msg ./include/linux/skbuff.h:3903
       packet_recvmsg+0x521/0x1e70 net/packet/af_packet.c:3469
       ____sys_recvmsg+0x2c4/0x810 net/socket.c:?
       ___sys_recvmsg+0x217/0x840 net/socket.c:2743
       __sys_recvmsg net/socket.c:2773
       __do_sys_recvmsg net/socket.c:2783
       __se_sys_recvmsg net/socket.c:2780
       __x64_sys_recvmsg+0x364/0x540 net/socket.c:2780
       do_syscall_x64 arch/x86/entry/common.c:50
       do_syscall_64+0x3d/0xb0 arch/x86/entry/common.c:80
       entry_SYSCALL_64_after_hwframe+0x63/0xcd arch/x86/entry/entry_64.S:120
    
      ...
    
      Uninit was stored to memory at:
       tipc_sub_subscribe+0x42d/0xb50 net/tipc/subscr.c:156
       tipc_conn_rcv_sub+0x246/0x620 net/tipc/topsrv.c:375
       tipc_topsrv_kern_subscr+0x2e8/0x400 net/tipc/topsrv.c:579
       tipc_group_create+0x4e7/0x7d0 net/tipc/group.c:190
       tipc_sk_join+0x2a8/0x770 net/tipc/socket.c:3084
       tipc_setsockopt+0xae5/0xe40 net/tipc/socket.c:3201
       __sys_setsockopt+0x87f/0xdc0 net/socket.c:2252
       __do_sys_setsockopt net/socket.c:2263
       __se_sys_setsockopt net/socket.c:2260
       __x64_sys_setsockopt+0xe0/0x160 net/socket.c:2260
       do_syscall_x64 arch/x86/entry/common.c:50
       do_syscall_64+0x3d/0xb0 arch/x86/entry/common.c:80
       entry_SYSCALL_64_after_hwframe+0x63/0xcd arch/x86/entry/entry_64.S:120
    
      Local variable sub created at:
       tipc_topsrv_kern_subscr+0x57/0x400 net/tipc/topsrv.c:562
       tipc_group_create+0x4e7/0x7d0 net/tipc/group.c:190
    
      Bytes 84-87 of 88 are uninitialized
      Memory access of size 88 starts at ffff88801ed57cd0
      Data copied to user address 0000000020000400
      ...
      =====================================================
    
    Signed-off-by: Alexander Potapenko <glider@google.com>
    Fixes: 026321c6d056a5 ("tipc: rename tipc_server to tipc_topsrv")
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1f4ed95ce617fbb4f2e3c3bf54fc3f8c72092fe6
Author: Mark Tomlinson <mark.tomlinson@alliedtelesis.co.nz>
Date:   Mon Oct 10 15:46:13 2022 +1300

    tipc: Fix recognition of trial period
    
    [ Upstream commit 28be7ca4fcfd69a2d52aaa331adbf9dbe91f9e6e ]
    
    The trial period exists until jiffies is after addr_trial_end. But as
    jiffies will eventually overflow, just using time_after will eventually
    give incorrect results. As the node address is set once the trial period
    ends, this can be used to know that we are not in the trial period.
    
    Fixes: e415577f57f4 ("tipc: correct discovery message handling during address trial period")
    Signed-off-by: Mark Tomlinson <mark.tomlinson@alliedtelesis.co.nz>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 567f8de358b61015dcfb8878a1f06c5369a45f54
Author: Alexander Potapenko <glider@google.com>
Date:   Wed Oct 12 17:25:14 2022 +0200

    tipc: fix an information leak in tipc_topsrv_kern_subscr
    
    [ Upstream commit 777ecaabd614d47c482a5c9031579e66da13989a ]
    
    Use a 8-byte write to initialize sub.usr_handle in
    tipc_topsrv_kern_subscr(), otherwise four bytes remain uninitialized
    when issuing setsockopt(..., SOL_TIPC, ...).
    This resulted in an infoleak reported by KMSAN when the packet was
    received:
    
      =====================================================
      BUG: KMSAN: kernel-infoleak in copyout+0xbc/0x100 lib/iov_iter.c:169
       instrument_copy_to_user ./include/linux/instrumented.h:121
       copyout+0xbc/0x100 lib/iov_iter.c:169
       _copy_to_iter+0x5c0/0x20a0 lib/iov_iter.c:527
       copy_to_iter ./include/linux/uio.h:176
       simple_copy_to_iter+0x64/0xa0 net/core/datagram.c:513
       __skb_datagram_iter+0x123/0xdc0 net/core/datagram.c:419
       skb_copy_datagram_iter+0x58/0x200 net/core/datagram.c:527
       skb_copy_datagram_msg ./include/linux/skbuff.h:3903
       packet_recvmsg+0x521/0x1e70 net/packet/af_packet.c:3469
       ____sys_recvmsg+0x2c4/0x810 net/socket.c:?
       ___sys_recvmsg+0x217/0x840 net/socket.c:2743
       __sys_recvmsg net/socket.c:2773
       __do_sys_recvmsg net/socket.c:2783
       __se_sys_recvmsg net/socket.c:2780
       __x64_sys_recvmsg+0x364/0x540 net/socket.c:2780
       do_syscall_x64 arch/x86/entry/common.c:50
       do_syscall_64+0x3d/0xb0 arch/x86/entry/common.c:80
       entry_SYSCALL_64_after_hwframe+0x63/0xcd arch/x86/entry/entry_64.S:120
    
      ...
    
      Uninit was stored to memory at:
       tipc_sub_subscribe+0x42d/0xb50 net/tipc/subscr.c:156
       tipc_conn_rcv_sub+0x246/0x620 net/tipc/topsrv.c:375
       tipc_topsrv_kern_subscr+0x2e8/0x400 net/tipc/topsrv.c:579
       tipc_group_create+0x4e7/0x7d0 net/tipc/group.c:190
       tipc_sk_join+0x2a8/0x770 net/tipc/socket.c:3084
       tipc_setsockopt+0xae5/0xe40 net/tipc/socket.c:3201
       __sys_setsockopt+0x87f/0xdc0 net/socket.c:2252
       __do_sys_setsockopt net/socket.c:2263
       __se_sys_setsockopt net/socket.c:2260
       __x64_sys_setsockopt+0xe0/0x160 net/socket.c:2260
       do_syscall_x64 arch/x86/entry/common.c:50
       do_syscall_64+0x3d/0xb0 arch/x86/entry/common.c:80
       entry_SYSCALL_64_after_hwframe+0x63/0xcd arch/x86/entry/entry_64.S:120
    
      Local variable sub created at:
       tipc_topsrv_kern_subscr+0x57/0x400 net/tipc/topsrv.c:562
       tipc_group_create+0x4e7/0x7d0 net/tipc/group.c:190
    
      Bytes 84-87 of 88 are uninitialized
      Memory access of size 88 starts at ffff88801ed57cd0
      Data copied to user address 0000000020000400
      ...
      =====================================================
    
    Signed-off-by: Alexander Potapenko <glider@google.com>
    Fixes: 026321c6d056a5 ("tipc: rename tipc_server to tipc_topsrv")
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 27ee73c1199e0a8fec0784f4aa333ebb022e7348
Author: Mark Tomlinson <mark.tomlinson@alliedtelesis.co.nz>
Date:   Mon Oct 10 15:46:13 2022 +1300

    tipc: Fix recognition of trial period
    
    [ Upstream commit 28be7ca4fcfd69a2d52aaa331adbf9dbe91f9e6e ]
    
    The trial period exists until jiffies is after addr_trial_end. But as
    jiffies will eventually overflow, just using time_after will eventually
    give incorrect results. As the node address is set once the trial period
    ends, this can be used to know that we are not in the trial period.
    
    Fixes: e415577f57f4 ("tipc: correct discovery message handling during address trial period")
    Signed-off-by: Mark Tomlinson <mark.tomlinson@alliedtelesis.co.nz>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dbc01c0a4e202a7e925dad1d4b7c1d6eb0c81154
Author: Alexander Potapenko <glider@google.com>
Date:   Wed Oct 12 17:25:14 2022 +0200

    tipc: fix an information leak in tipc_topsrv_kern_subscr
    
    [ Upstream commit 777ecaabd614d47c482a5c9031579e66da13989a ]
    
    Use a 8-byte write to initialize sub.usr_handle in
    tipc_topsrv_kern_subscr(), otherwise four bytes remain uninitialized
    when issuing setsockopt(..., SOL_TIPC, ...).
    This resulted in an infoleak reported by KMSAN when the packet was
    received:
    
      =====================================================
      BUG: KMSAN: kernel-infoleak in copyout+0xbc/0x100 lib/iov_iter.c:169
       instrument_copy_to_user ./include/linux/instrumented.h:121
       copyout+0xbc/0x100 lib/iov_iter.c:169
       _copy_to_iter+0x5c0/0x20a0 lib/iov_iter.c:527
       copy_to_iter ./include/linux/uio.h:176
       simple_copy_to_iter+0x64/0xa0 net/core/datagram.c:513
       __skb_datagram_iter+0x123/0xdc0 net/core/datagram.c:419
       skb_copy_datagram_iter+0x58/0x200 net/core/datagram.c:527
       skb_copy_datagram_msg ./include/linux/skbuff.h:3903
       packet_recvmsg+0x521/0x1e70 net/packet/af_packet.c:3469
       ____sys_recvmsg+0x2c4/0x810 net/socket.c:?
       ___sys_recvmsg+0x217/0x840 net/socket.c:2743
       __sys_recvmsg net/socket.c:2773
       __do_sys_recvmsg net/socket.c:2783
       __se_sys_recvmsg net/socket.c:2780
       __x64_sys_recvmsg+0x364/0x540 net/socket.c:2780
       do_syscall_x64 arch/x86/entry/common.c:50
       do_syscall_64+0x3d/0xb0 arch/x86/entry/common.c:80
       entry_SYSCALL_64_after_hwframe+0x63/0xcd arch/x86/entry/entry_64.S:120
    
      ...
    
      Uninit was stored to memory at:
       tipc_sub_subscribe+0x42d/0xb50 net/tipc/subscr.c:156
       tipc_conn_rcv_sub+0x246/0x620 net/tipc/topsrv.c:375
       tipc_topsrv_kern_subscr+0x2e8/0x400 net/tipc/topsrv.c:579
       tipc_group_create+0x4e7/0x7d0 net/tipc/group.c:190
       tipc_sk_join+0x2a8/0x770 net/tipc/socket.c:3084
       tipc_setsockopt+0xae5/0xe40 net/tipc/socket.c:3201
       __sys_setsockopt+0x87f/0xdc0 net/socket.c:2252
       __do_sys_setsockopt net/socket.c:2263
       __se_sys_setsockopt net/socket.c:2260
       __x64_sys_setsockopt+0xe0/0x160 net/socket.c:2260
       do_syscall_x64 arch/x86/entry/common.c:50
       do_syscall_64+0x3d/0xb0 arch/x86/entry/common.c:80
       entry_SYSCALL_64_after_hwframe+0x63/0xcd arch/x86/entry/entry_64.S:120
    
      Local variable sub created at:
       tipc_topsrv_kern_subscr+0x57/0x400 net/tipc/topsrv.c:562
       tipc_group_create+0x4e7/0x7d0 net/tipc/group.c:190
    
      Bytes 84-87 of 88 are uninitialized
      Memory access of size 88 starts at ffff88801ed57cd0
      Data copied to user address 0000000020000400
      ...
      =====================================================
    
    Signed-off-by: Alexander Potapenko <glider@google.com>
    Fixes: 026321c6d056a5 ("tipc: rename tipc_server to tipc_topsrv")
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b294cad6f02ef89fed5d14ca6af528d7f5217a3a
Author: Mark Tomlinson <mark.tomlinson@alliedtelesis.co.nz>
Date:   Mon Oct 10 15:46:13 2022 +1300

    tipc: Fix recognition of trial period
    
    [ Upstream commit 28be7ca4fcfd69a2d52aaa331adbf9dbe91f9e6e ]
    
    The trial period exists until jiffies is after addr_trial_end. But as
    jiffies will eventually overflow, just using time_after will eventually
    give incorrect results. As the node address is set once the trial period
    ends, this can be used to know that we are not in the trial period.
    
    Fixes: e415577f57f4 ("tipc: correct discovery message handling during address trial period")
    Signed-off-by: Mark Tomlinson <mark.tomlinson@alliedtelesis.co.nz>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fef70f978bc289642501d88d2a3f5e841bd31a67
Author: Alexander Potapenko <glider@google.com>
Date:   Wed Oct 12 17:25:14 2022 +0200

    tipc: fix an information leak in tipc_topsrv_kern_subscr
    
    [ Upstream commit 777ecaabd614d47c482a5c9031579e66da13989a ]
    
    Use a 8-byte write to initialize sub.usr_handle in
    tipc_topsrv_kern_subscr(), otherwise four bytes remain uninitialized
    when issuing setsockopt(..., SOL_TIPC, ...).
    This resulted in an infoleak reported by KMSAN when the packet was
    received:
    
      =====================================================
      BUG: KMSAN: kernel-infoleak in copyout+0xbc/0x100 lib/iov_iter.c:169
       instrument_copy_to_user ./include/linux/instrumented.h:121
       copyout+0xbc/0x100 lib/iov_iter.c:169
       _copy_to_iter+0x5c0/0x20a0 lib/iov_iter.c:527
       copy_to_iter ./include/linux/uio.h:176
       simple_copy_to_iter+0x64/0xa0 net/core/datagram.c:513
       __skb_datagram_iter+0x123/0xdc0 net/core/datagram.c:419
       skb_copy_datagram_iter+0x58/0x200 net/core/datagram.c:527
       skb_copy_datagram_msg ./include/linux/skbuff.h:3903
       packet_recvmsg+0x521/0x1e70 net/packet/af_packet.c:3469
       ____sys_recvmsg+0x2c4/0x810 net/socket.c:?
       ___sys_recvmsg+0x217/0x840 net/socket.c:2743
       __sys_recvmsg net/socket.c:2773
       __do_sys_recvmsg net/socket.c:2783
       __se_sys_recvmsg net/socket.c:2780
       __x64_sys_recvmsg+0x364/0x540 net/socket.c:2780
       do_syscall_x64 arch/x86/entry/common.c:50
       do_syscall_64+0x3d/0xb0 arch/x86/entry/common.c:80
       entry_SYSCALL_64_after_hwframe+0x63/0xcd arch/x86/entry/entry_64.S:120
    
      ...
    
      Uninit was stored to memory at:
       tipc_sub_subscribe+0x42d/0xb50 net/tipc/subscr.c:156
       tipc_conn_rcv_sub+0x246/0x620 net/tipc/topsrv.c:375
       tipc_topsrv_kern_subscr+0x2e8/0x400 net/tipc/topsrv.c:579
       tipc_group_create+0x4e7/0x7d0 net/tipc/group.c:190
       tipc_sk_join+0x2a8/0x770 net/tipc/socket.c:3084
       tipc_setsockopt+0xae5/0xe40 net/tipc/socket.c:3201
       __sys_setsockopt+0x87f/0xdc0 net/socket.c:2252
       __do_sys_setsockopt net/socket.c:2263
       __se_sys_setsockopt net/socket.c:2260
       __x64_sys_setsockopt+0xe0/0x160 net/socket.c:2260
       do_syscall_x64 arch/x86/entry/common.c:50
       do_syscall_64+0x3d/0xb0 arch/x86/entry/common.c:80
       entry_SYSCALL_64_after_hwframe+0x63/0xcd arch/x86/entry/entry_64.S:120
    
      Local variable sub created at:
       tipc_topsrv_kern_subscr+0x57/0x400 net/tipc/topsrv.c:562
       tipc_group_create+0x4e7/0x7d0 net/tipc/group.c:190
    
      Bytes 84-87 of 88 are uninitialized
      Memory access of size 88 starts at ffff88801ed57cd0
      Data copied to user address 0000000020000400
      ...
      =====================================================
    
    Signed-off-by: Alexander Potapenko <glider@google.com>
    Fixes: 026321c6d056a5 ("tipc: rename tipc_server to tipc_topsrv")
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4e21f28563af691eb669c3e45f8ece5bd8bf19fb
Author: Mark Tomlinson <mark.tomlinson@alliedtelesis.co.nz>
Date:   Mon Oct 10 15:46:13 2022 +1300

    tipc: Fix recognition of trial period
    
    [ Upstream commit 28be7ca4fcfd69a2d52aaa331adbf9dbe91f9e6e ]
    
    The trial period exists until jiffies is after addr_trial_end. But as
    jiffies will eventually overflow, just using time_after will eventually
    give incorrect results. As the node address is set once the trial period
    ends, this can be used to know that we are not in the trial period.
    
    Fixes: e415577f57f4 ("tipc: correct discovery message handling during address trial period")
    Signed-off-by: Mark Tomlinson <mark.tomlinson@alliedtelesis.co.nz>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 337a0a0b63f1c30195733eaacf39e4310a592a68
Merge: f6602a97a11a 720ca52bcef2
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Oct 24 12:43:51 2022 -0700

    Merge tag 'net-6.1-rc3-1' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from Jakub Kicinski:
     "Including fixes from bpf.
    
      The net-memcg fix stands out, the rest is very run-off-the-mill. Maybe
      I'm biased.
    
      Current release - regressions:
    
       - eth: fman: re-expose location of the MAC address to userspace,
         apparently some udev scripts depended on the exact value
    
      Current release - new code bugs:
    
       - bpf:
           - wait for busy refill_work when destroying bpf memory allocator
           - allow bpf_user_ringbuf_drain() callbacks to return 1
           - fix dispatcher patchable function entry to 5 bytes nop
    
      Previous releases - regressions:
    
       - net-memcg: avoid stalls when under memory pressure
    
       - tcp: fix indefinite deferral of RTO with SACK reneging
    
       - tipc: fix a null-ptr-deref in tipc_topsrv_accept
    
       - eth: macb: specify PHY PM management done by MAC
    
       - tcp: fix a signed-integer-overflow bug in tcp_add_backlog()
    
      Previous releases - always broken:
    
       - eth: amd-xgbe: SFP fixes and compatibility improvements
    
      Misc:
    
       - docs: netdev: offer performance feedback to contributors"
    
    * tag 'net-6.1-rc3-1' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (37 commits)
      net-memcg: avoid stalls when under memory pressure
      tcp: fix indefinite deferral of RTO with SACK reneging
      tcp: fix a signed-integer-overflow bug in tcp_add_backlog()
      net: lantiq_etop: don't free skb when returning NETDEV_TX_BUSY
      net: fix UAF issue in nfqnl_nf_hook_drop() when ops_init() failed
      docs: netdev: offer performance feedback to contributors
      kcm: annotate data-races around kcm->rx_wait
      kcm: annotate data-races around kcm->rx_psock
      net: fman: Use physical address for userspace interfaces
      net/mlx5e: Cleanup MACsec uninitialization routine
      atlantic: fix deadlock at aq_nic_stop
      nfp: only clean `sp_indiff` when application firmware is unloaded
      amd-xgbe: add the bit rate quirk for Molex cables
      amd-xgbe: fix the SFP compliance codes check for DAC cables
      amd-xgbe: enable PLL_CTL for fixed PHY modes only
      amd-xgbe: use enums for mailbox cmd and sub_cmds
      amd-xgbe: Yellow carp devices do not need rrc
      bpf: Use __llist_del_all() whenever possbile during memory draining
      bpf: Wait for busy refill_work when destroying bpf memory allocator
      MAINTAINERS: add keyword match on PTP
      ...

commit 82cb4e4612c633a9ce320e1773114875604a3cce
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Oct 18 15:19:50 2022 -0400

    tipc: fix a null-ptr-deref in tipc_topsrv_accept
    
    syzbot found a crash in tipc_topsrv_accept:
    
      KASAN: null-ptr-deref in range [0x0000000000000008-0x000000000000000f]
      Workqueue: tipc_rcv tipc_topsrv_accept
      RIP: 0010:kernel_accept+0x22d/0x350 net/socket.c:3487
      Call Trace:
       <TASK>
       tipc_topsrv_accept+0x197/0x280 net/tipc/topsrv.c:460
       process_one_work+0x991/0x1610 kernel/workqueue.c:2289
       worker_thread+0x665/0x1080 kernel/workqueue.c:2436
       kthread+0x2e4/0x3a0 kernel/kthread.c:376
       ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:306
    
    It was caused by srv->listener that might be set to null by
    tipc_topsrv_stop() in net .exit whereas it's still used in
    tipc_topsrv_accept() worker.
    
    srv->listener is protected by srv->idr_lock in tipc_topsrv_stop(), so add
    a check for srv->listener under srv->idr_lock in tipc_topsrv_accept() to
    avoid the null-ptr-deref. To ensure the lsock is not released during the
    tipc_topsrv_accept(), move sock_release() after tipc_topsrv_work_stop()
    where it's waiting until the tipc_topsrv_accept worker to be done.
    
    Note that sk_callback_lock is used to protect sk->sk_user_data instead of
    srv->listener, and it should check srv in tipc_topsrv_listener_data_ready()
    instead. This also ensures that no more tipc_topsrv_accept worker will be
    started after tipc_conn_close() is called in tipc_topsrv_stop() where it
    sets sk->sk_user_data to null.
    
    Fixes: 0ef897be12b8 ("tipc: separate topology server listener socket from subcsriber sockets")
    Reported-by: syzbot+c5ce866a8d30f4be0651@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Link: https://lore.kernel.org/r/4eee264380c409c61c6451af1059b7fb271a7e7b.1666120790.git.lucien.xin@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 6d36c728bc2e2d632f4b0dea00df5532e20dfdab
Merge: c7b006525bb0 7f378c03aa49
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Oct 20 17:24:59 2022 -0700

    Merge tag 'net-6.1-rc2' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from Paolo Abeni:
     "Including fixes from netfilter.
    
      Current release - regressions:
    
       - revert "net: fix cpu_max_bits_warn() usage in
         netif_attrmask_next{,_and}"
    
       - revert "net: sched: fq_codel: remove redundant resource cleanup in
         fq_codel_init()"
    
       - dsa: uninitialized variable in dsa_slave_netdevice_event()
    
       - eth: sunhme: uninitialized variable in happy_meal_init()
    
      Current release - new code bugs:
    
       - eth: octeontx2: fix resource not freed after malloc
    
      Previous releases - regressions:
    
       - sched: fix return value of qdisc ingress handling on success
    
       - sched: fix race condition in qdisc_graft()
    
       - udp: update reuse->has_conns under reuseport_lock.
    
       - tls: strp: make sure the TCP skbs do not have overlapping data
    
       - hsr: avoid possible NULL deref in skb_clone()
    
       - tipc: fix an information leak in tipc_topsrv_kern_subscr
    
       - phylink: add mac_managed_pm in phylink_config structure
    
       - eth: i40e: fix DMA mappings leak
    
       - eth: hyperv: fix a RX-path warning
    
       - eth: mtk: fix memory leaks
    
      Previous releases - always broken:
    
       - sched: cake: fix null pointer access issue when cake_init() fails"
    
    * tag 'net-6.1-rc2' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (43 commits)
      net: phy: dp83822: disable MDI crossover status change interrupt
      net: sched: fix race condition in qdisc_graft()
      net: hns: fix possible memory leak in hnae_ae_register()
      wwan_hwsim: fix possible memory leak in wwan_hwsim_dev_new()
      sfc: include vport_id in filter spec hash and equal()
      genetlink: fix kdoc warnings
      selftests: add selftest for chaining of tc ingress handling to egress
      net: Fix return value of qdisc ingress handling on success
      net: sched: sfb: fix null pointer access issue when sfb_init() fails
      Revert "net: sched: fq_codel: remove redundant resource cleanup in fq_codel_init()"
      net: sched: cake: fix null pointer access issue when cake_init() fails
      ethernet: marvell: octeontx2 Fix resource not freed after malloc
      netfilter: nf_tables: relax NFTA_SET_ELEM_KEY_END set flags requirements
      netfilter: rpfilter/fib: Set ->flowic_uid correctly for user namespaces.
      ionic: catch NULL pointer issue on reconfig
      net: hsr: avoid possible NULL deref in skb_clone()
      bnxt_en: fix memory leak in bnxt_nvm_test()
      ip6mr: fix UAF issue in ip6mr_sk_done() when addrconf_init_net() failed
      udp: Update reuse->has_conns under reuseport_lock.
      net: ethernet: mediatek: ppe: Remove the unused function mtk_foe_entry_usable()
      ...

commit 777ecaabd614d47c482a5c9031579e66da13989a
Author: Alexander Potapenko <glider@google.com>
Date:   Wed Oct 12 17:25:14 2022 +0200

    tipc: fix an information leak in tipc_topsrv_kern_subscr
    
    Use a 8-byte write to initialize sub.usr_handle in
    tipc_topsrv_kern_subscr(), otherwise four bytes remain uninitialized
    when issuing setsockopt(..., SOL_TIPC, ...).
    This resulted in an infoleak reported by KMSAN when the packet was
    received:
    
      =====================================================
      BUG: KMSAN: kernel-infoleak in copyout+0xbc/0x100 lib/iov_iter.c:169
       instrument_copy_to_user ./include/linux/instrumented.h:121
       copyout+0xbc/0x100 lib/iov_iter.c:169
       _copy_to_iter+0x5c0/0x20a0 lib/iov_iter.c:527
       copy_to_iter ./include/linux/uio.h:176
       simple_copy_to_iter+0x64/0xa0 net/core/datagram.c:513
       __skb_datagram_iter+0x123/0xdc0 net/core/datagram.c:419
       skb_copy_datagram_iter+0x58/0x200 net/core/datagram.c:527
       skb_copy_datagram_msg ./include/linux/skbuff.h:3903
       packet_recvmsg+0x521/0x1e70 net/packet/af_packet.c:3469
       ____sys_recvmsg+0x2c4/0x810 net/socket.c:?
       ___sys_recvmsg+0x217/0x840 net/socket.c:2743
       __sys_recvmsg net/socket.c:2773
       __do_sys_recvmsg net/socket.c:2783
       __se_sys_recvmsg net/socket.c:2780
       __x64_sys_recvmsg+0x364/0x540 net/socket.c:2780
       do_syscall_x64 arch/x86/entry/common.c:50
       do_syscall_64+0x3d/0xb0 arch/x86/entry/common.c:80
       entry_SYSCALL_64_after_hwframe+0x63/0xcd arch/x86/entry/entry_64.S:120
    
      ...
    
      Uninit was stored to memory at:
       tipc_sub_subscribe+0x42d/0xb50 net/tipc/subscr.c:156
       tipc_conn_rcv_sub+0x246/0x620 net/tipc/topsrv.c:375
       tipc_topsrv_kern_subscr+0x2e8/0x400 net/tipc/topsrv.c:579
       tipc_group_create+0x4e7/0x7d0 net/tipc/group.c:190
       tipc_sk_join+0x2a8/0x770 net/tipc/socket.c:3084
       tipc_setsockopt+0xae5/0xe40 net/tipc/socket.c:3201
       __sys_setsockopt+0x87f/0xdc0 net/socket.c:2252
       __do_sys_setsockopt net/socket.c:2263
       __se_sys_setsockopt net/socket.c:2260
       __x64_sys_setsockopt+0xe0/0x160 net/socket.c:2260
       do_syscall_x64 arch/x86/entry/common.c:50
       do_syscall_64+0x3d/0xb0 arch/x86/entry/common.c:80
       entry_SYSCALL_64_after_hwframe+0x63/0xcd arch/x86/entry/entry_64.S:120
    
      Local variable sub created at:
       tipc_topsrv_kern_subscr+0x57/0x400 net/tipc/topsrv.c:562
       tipc_group_create+0x4e7/0x7d0 net/tipc/group.c:190
    
      Bytes 84-87 of 88 are uninitialized
      Memory access of size 88 starts at ffff88801ed57cd0
      Data copied to user address 0000000020000400
      ...
      =====================================================
    
    Signed-off-by: Alexander Potapenko <glider@google.com>
    Fixes: 026321c6d056a5 ("tipc: rename tipc_server to tipc_topsrv")
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 28be7ca4fcfd69a2d52aaa331adbf9dbe91f9e6e
Author: Mark Tomlinson <mark.tomlinson@alliedtelesis.co.nz>
Date:   Mon Oct 10 15:46:13 2022 +1300

    tipc: Fix recognition of trial period
    
    The trial period exists until jiffies is after addr_trial_end. But as
    jiffies will eventually overflow, just using time_after will eventually
    give incorrect results. As the node address is set once the trial period
    ends, this can be used to know that we are not in the trial period.
    
    Fixes: e415577f57f4 ("tipc: correct discovery message handling during address trial period")
    Signed-off-by: Mark Tomlinson <mark.tomlinson@alliedtelesis.co.nz>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8af535b6b14c57b3c1ba7eaf64919f4b4ef0f260
Author: Yuan Can <yuancan@huawei.com>
Date:   Wed Sep 28 08:56:36 2022 +0000

    net/tipc: Remove unused struct distr_queue_item
    
    After commit 09b5678c778f("tipc: remove dead code in tipc_net and relatives"),
    struct distr_queue_item is not used any more and can be removed as well.
    
    Signed-off-by: Yuan Can <yuancan@huawei.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Link: https://lore.kernel.org/r/20220928085636.71749-1-yuancan@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit f4d04a991d238afb03b692ec5ba9eada3b627a59
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Aug 31 17:47:56 2022 +0300

    tipc: fix shift wrapping bug in map_get()
    
    [ Upstream commit e2b224abd9bf45dcb55750479fc35970725a430b ]
    
    There is a shift wrapping bug in this code so anything thing above
    31 will return false.
    
    Fixes: 35c55c9877f8 ("tipc: add neighbor monitoring framework")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c9d6f7ce3b13c48d6693055fae996be72a2d71b0
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Aug 31 17:47:56 2022 +0300

    tipc: fix shift wrapping bug in map_get()
    
    [ Upstream commit e2b224abd9bf45dcb55750479fc35970725a430b ]
    
    There is a shift wrapping bug in this code so anything thing above
    31 will return false.
    
    Fixes: 35c55c9877f8 ("tipc: add neighbor monitoring framework")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 878fab48ff1bce18b42f62fa911dde8ecee8b304
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Aug 31 17:47:56 2022 +0300

    tipc: fix shift wrapping bug in map_get()
    
    [ Upstream commit e2b224abd9bf45dcb55750479fc35970725a430b ]
    
    There is a shift wrapping bug in this code so anything thing above
    31 will return false.
    
    Fixes: 35c55c9877f8 ("tipc: add neighbor monitoring framework")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d488e2baf2efaa2d64a98917dacb728737b67f22
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Aug 31 17:47:56 2022 +0300

    tipc: fix shift wrapping bug in map_get()
    
    [ Upstream commit e2b224abd9bf45dcb55750479fc35970725a430b ]
    
    There is a shift wrapping bug in this code so anything thing above
    31 will return false.
    
    Fixes: 35c55c9877f8 ("tipc: add neighbor monitoring framework")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 22922da7373c38c91dd36de993589b81a4129178
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Aug 31 17:47:56 2022 +0300

    tipc: fix shift wrapping bug in map_get()
    
    [ Upstream commit e2b224abd9bf45dcb55750479fc35970725a430b ]
    
    There is a shift wrapping bug in this code so anything thing above
    31 will return false.
    
    Fixes: 35c55c9877f8 ("tipc: add neighbor monitoring framework")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7eb9bf4edd1c7d65fe59e4d4a27b33ba8dd00098
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Aug 31 17:47:56 2022 +0300

    tipc: fix shift wrapping bug in map_get()
    
    [ Upstream commit e2b224abd9bf45dcb55750479fc35970725a430b ]
    
    There is a shift wrapping bug in this code so anything thing above
    31 will return false.
    
    Fixes: 35c55c9877f8 ("tipc: add neighbor monitoring framework")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 63e19e592980b0c53cb5144646c3c33c9d3dc7a0
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Aug 31 17:47:56 2022 +0300

    tipc: fix shift wrapping bug in map_get()
    
    [ Upstream commit e2b224abd9bf45dcb55750479fc35970725a430b ]
    
    There is a shift wrapping bug in this code so anything thing above
    31 will return false.
    
    Fixes: 35c55c9877f8 ("tipc: add neighbor monitoring framework")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e2b224abd9bf45dcb55750479fc35970725a430b
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Aug 31 17:47:56 2022 +0300

    tipc: fix shift wrapping bug in map_get()
    
    There is a shift wrapping bug in this code so anything thing above
    31 will return false.
    
    Fixes: 35c55c9877f8 ("tipc: add neighbor monitoring framework")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 613fd026209e6f6ee69afaf45d1bec2a11b09fea
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Fri Jul 22 11:22:00 2022 -0700

    net: Fix data-races around sysctl_[rw]mem(_offset)?.
    
    [ Upstream commit 02739545951ad4c1215160db7fbf9b7a918d3c0b ]
    
    While reading these sysctl variables, they can be changed concurrently.
    Thus, we need to add READ_ONCE() to their readers.
    
      - .sysctl_rmem
      - .sysctl_rwmem
      - .sysctl_rmem_offset
      - .sysctl_wmem_offset
      - sysctl_tcp_rmem[1, 2]
      - sysctl_tcp_wmem[1, 2]
      - sysctl_decnet_rmem[1]
      - sysctl_decnet_wmem[1]
      - sysctl_tipc_rmem[1]
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1faa34672f8a17a3e155e74bde9648564e9480d6
Author: Bagas Sanjaya <bagasdotme@gmail.com>
Date:   Wed Aug 24 10:58:04 2022 +0700

    Documentation: sysctl: align cells in second content column
    
    Stephen Rothwell reported htmldocs warning when merging net-next tree:
    
    Documentation/admin-guide/sysctl/net.rst:37: WARNING: Malformed table.
    Text in column margin in table line 4.
    
    ========= =================== = ========== ==================
    Directory Content               Directory  Content
    ========= =================== = ========== ==================
    802       E802 protocol         mptcp     Multipath TCP
    appletalk Appletalk protocol    netfilter Network Filter
    ax25      AX25                  netrom     NET/ROM
    bridge    Bridging              rose      X.25 PLP layer
    core      General parameter     tipc      TIPC
    ethernet  Ethernet protocol     unix      Unix domain sockets
    ipv4      IP version 4          x25       X.25 protocol
    ipv6      IP version 6
    ========= =================== = ========== ==================
    
    The warning above is caused by cells in second "Content" column of
    /proc/sys/net subdirectory table which are in column margin.
    
    Align these cells against the column header to fix the warning.
    
    Link: https://lore.kernel.org/linux-next/20220823134905.57ed08d5@canb.auug.org.au/
    Fixes: 1202cdd665315c ("Remove DECnet support from kernel")
    Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: Bagas Sanjaya <bagasdotme@gmail.com>
    Link: https://lore.kernel.org/r/20220824035804.204322-1-bagasdotme@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit f530ecad7f0858f28ba776d4d159ed7c704af1db
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Fri Jul 22 11:22:00 2022 -0700

    net: Fix data-races around sysctl_[rw]mem(_offset)?.
    
    [ Upstream commit 02739545951ad4c1215160db7fbf9b7a918d3c0b ]
    
    While reading these sysctl variables, they can be changed concurrently.
    Thus, we need to add READ_ONCE() to their readers.
    
      - .sysctl_rmem
      - .sysctl_rwmem
      - .sysctl_rmem_offset
      - .sysctl_wmem_offset
      - sysctl_tcp_rmem[1, 2]
      - sysctl_tcp_wmem[1, 2]
      - sysctl_decnet_rmem[1]
      - sysctl_decnet_wmem[1]
      - sysctl_tipc_rmem[1]
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 618116a273b7a4df296296bd1b4057e41b77e9f1
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Fri Jul 22 11:22:00 2022 -0700

    net: Fix data-races around sysctl_[rw]mem(_offset)?.
    
    [ Upstream commit 02739545951ad4c1215160db7fbf9b7a918d3c0b ]
    
    While reading these sysctl variables, they can be changed concurrently.
    Thus, we need to add READ_ONCE() to their readers.
    
      - .sysctl_rmem
      - .sysctl_rwmem
      - .sysctl_rmem_offset
      - .sysctl_wmem_offset
      - sysctl_tcp_rmem[1, 2]
      - sysctl_tcp_wmem[1, 2]
      - sysctl_decnet_rmem[1]
      - sysctl_decnet_wmem[1]
      - sysctl_tipc_rmem[1]
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9af0620de1e118666881376f6497d1785758b04c
Merge: 3e7d18b9dca3 96b9bd8c6d12
Author: David S. Miller <davem@davemloft.net>
Date:   Mon Jul 25 12:42:10 2022 +0100

    Merge branch 'net-sysctl-races-part-6'
    
    Kuniyuki Iwashima says:
    
    ====================
    sysctl: Fix data-races around ipv4_net_table (Round 6, Final).
    
    This series fixes data-races around 11 knobs after tcp_pacing_ss_ratio
    ipv4_net_table, and this is the final round for ipv4_net_table.
    
    While at it, other data-races around these related knobs are fixed.
    
      - decnet_mem
      - decnet_rmem
      - tipc_rmem
    
    There are still 58 tables possibly missing some fixes under net/.
    
      $ grep -rnE "struct ctl_table.*?\[\] =" net/ | wc -l
      60
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 02739545951ad4c1215160db7fbf9b7a918d3c0b
Author: Kuniyuki Iwashima <kuniyu@amazon.com>
Date:   Fri Jul 22 11:22:00 2022 -0700

    net: Fix data-races around sysctl_[rw]mem(_offset)?.
    
    While reading these sysctl variables, they can be changed concurrently.
    Thus, we need to add READ_ONCE() to their readers.
    
      - .sysctl_rmem
      - .sysctl_rwmem
      - .sysctl_rmem_offset
      - .sysctl_wmem_offset
      - sysctl_tcp_rmem[1, 2]
      - sysctl_tcp_wmem[1, 2]
      - sysctl_decnet_rmem[1]
      - sysctl_decnet_wmem[1]
      - sysctl_tipc_rmem[1]
    
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Kuniyuki Iwashima <kuniyu@amazon.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3b2957fc09fe1ac7f07f40dd50dd5f93e3f3a7a2
Author: Hangyu Hua <hbh25y@gmail.com>
Date:   Wed Jun 29 14:34:18 2022 +0800

    net: tipc: fix possible refcount leak in tipc_sk_create()
    
    [ Upstream commit 00aff3590fc0a73bddd3b743863c14e76fd35c0c ]
    
    Free sk in case tipc_sk_insert() fails.
    
    Signed-off-by: Hangyu Hua <hbh25y@gmail.com>
    Reviewed-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 833ecd0eae76eadf81d6d747bb5bc992d1151867
Author: Hangyu Hua <hbh25y@gmail.com>
Date:   Wed Jun 29 14:34:18 2022 +0800

    net: tipc: fix possible refcount leak in tipc_sk_create()
    
    [ Upstream commit 00aff3590fc0a73bddd3b743863c14e76fd35c0c ]
    
    Free sk in case tipc_sk_insert() fails.
    
    Signed-off-by: Hangyu Hua <hbh25y@gmail.com>
    Reviewed-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit efa78f2ae363428525fb4981bb63c555ee79f3c7
Author: Hangyu Hua <hbh25y@gmail.com>
Date:   Wed Jun 29 14:34:18 2022 +0800

    net: tipc: fix possible refcount leak in tipc_sk_create()
    
    [ Upstream commit 00aff3590fc0a73bddd3b743863c14e76fd35c0c ]
    
    Free sk in case tipc_sk_insert() fails.
    
    Signed-off-by: Hangyu Hua <hbh25y@gmail.com>
    Reviewed-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ef488669b2652bde5b6ee5a409a5b048a2a50db4
Author: Hangyu Hua <hbh25y@gmail.com>
Date:   Wed Jun 29 14:34:18 2022 +0800

    net: tipc: fix possible refcount leak in tipc_sk_create()
    
    [ Upstream commit 00aff3590fc0a73bddd3b743863c14e76fd35c0c ]
    
    Free sk in case tipc_sk_insert() fails.
    
    Signed-off-by: Hangyu Hua <hbh25y@gmail.com>
    Reviewed-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4919d82f7041157a421ca9bf39a78551d5ad8a1b
Author: Hangyu Hua <hbh25y@gmail.com>
Date:   Wed Jun 29 14:34:18 2022 +0800

    net: tipc: fix possible refcount leak in tipc_sk_create()
    
    [ Upstream commit 00aff3590fc0a73bddd3b743863c14e76fd35c0c ]
    
    Free sk in case tipc_sk_insert() fails.
    
    Signed-off-by: Hangyu Hua <hbh25y@gmail.com>
    Reviewed-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7bc9e7f70bc57d8f02ffea2a42094281effb15ef
Author: Hangyu Hua <hbh25y@gmail.com>
Date:   Wed Jun 29 14:34:18 2022 +0800

    net: tipc: fix possible refcount leak in tipc_sk_create()
    
    [ Upstream commit 00aff3590fc0a73bddd3b743863c14e76fd35c0c ]
    
    Free sk in case tipc_sk_insert() fails.
    
    Signed-off-by: Hangyu Hua <hbh25y@gmail.com>
    Reviewed-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 638fa20b618b2bbcf86da71231624cc82121a036
Author: Hangyu Hua <hbh25y@gmail.com>
Date:   Wed Jun 29 14:34:18 2022 +0800

    net: tipc: fix possible refcount leak in tipc_sk_create()
    
    [ Upstream commit 00aff3590fc0a73bddd3b743863c14e76fd35c0c ]
    
    Free sk in case tipc_sk_insert() fails.
    
    Signed-off-by: Hangyu Hua <hbh25y@gmail.com>
    Reviewed-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e52910e671f58c619e33dac476b11b35e2d3ab6f
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Jun 24 12:24:31 2022 -0400

    tipc: move bc link creation back to tipc_node_create
    
    commit cb8092d70a6f5f01ec1490fce4d35efed3ed996c upstream.
    
    Shuang Li reported a NULL pointer dereference crash:
    
      [] BUG: kernel NULL pointer dereference, address: 0000000000000068
      [] RIP: 0010:tipc_link_is_up+0x5/0x10 [tipc]
      [] Call Trace:
      []  <IRQ>
      []  tipc_bcast_rcv+0xa2/0x190 [tipc]
      []  tipc_node_bc_rcv+0x8b/0x200 [tipc]
      []  tipc_rcv+0x3af/0x5b0 [tipc]
      []  tipc_udp_recv+0xc7/0x1e0 [tipc]
    
    It was caused by the 'l' passed into tipc_bcast_rcv() is NULL. When it
    creates a node in tipc_node_check_dest(), after inserting the new node
    into hashtable in tipc_node_create(), it creates the bc link. However,
    there is a gap between this insert and bc link creation, a bc packet
    may come in and get the node from the hashtable then try to dereference
    its bc link, which is NULL.
    
    This patch is to fix it by moving the bc link creation before inserting
    into the hashtable.
    
    Note that for a preliminary node becoming "real", the bc link creation
    should also be called before it's rehashed, as we don't create it for
    preliminary nodes.
    
    Fixes: 4cbf8ac2fe5a ("tipc: enable creating a "preliminary" node")
    Reported-by: Shuang Li <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 35fcb2ba35b4d9b592b558c3bcc6e0d90e213588
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Jun 24 12:24:31 2022 -0400

    tipc: move bc link creation back to tipc_node_create
    
    commit cb8092d70a6f5f01ec1490fce4d35efed3ed996c upstream.
    
    Shuang Li reported a NULL pointer dereference crash:
    
      [] BUG: kernel NULL pointer dereference, address: 0000000000000068
      [] RIP: 0010:tipc_link_is_up+0x5/0x10 [tipc]
      [] Call Trace:
      []  <IRQ>
      []  tipc_bcast_rcv+0xa2/0x190 [tipc]
      []  tipc_node_bc_rcv+0x8b/0x200 [tipc]
      []  tipc_rcv+0x3af/0x5b0 [tipc]
      []  tipc_udp_recv+0xc7/0x1e0 [tipc]
    
    It was caused by the 'l' passed into tipc_bcast_rcv() is NULL. When it
    creates a node in tipc_node_check_dest(), after inserting the new node
    into hashtable in tipc_node_create(), it creates the bc link. However,
    there is a gap between this insert and bc link creation, a bc packet
    may come in and get the node from the hashtable then try to dereference
    its bc link, which is NULL.
    
    This patch is to fix it by moving the bc link creation before inserting
    into the hashtable.
    
    Note that for a preliminary node becoming "real", the bc link creation
    should also be called before it's rehashed, as we don't create it for
    preliminary nodes.
    
    Fixes: 4cbf8ac2fe5a ("tipc: enable creating a "preliminary" node")
    Reported-by: Shuang Li <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 456bc338871c4a52117dd5ef29cce3745456d248
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Jun 24 12:24:31 2022 -0400

    tipc: move bc link creation back to tipc_node_create
    
    commit cb8092d70a6f5f01ec1490fce4d35efed3ed996c upstream.
    
    Shuang Li reported a NULL pointer dereference crash:
    
      [] BUG: kernel NULL pointer dereference, address: 0000000000000068
      [] RIP: 0010:tipc_link_is_up+0x5/0x10 [tipc]
      [] Call Trace:
      []  <IRQ>
      []  tipc_bcast_rcv+0xa2/0x190 [tipc]
      []  tipc_node_bc_rcv+0x8b/0x200 [tipc]
      []  tipc_rcv+0x3af/0x5b0 [tipc]
      []  tipc_udp_recv+0xc7/0x1e0 [tipc]
    
    It was caused by the 'l' passed into tipc_bcast_rcv() is NULL. When it
    creates a node in tipc_node_check_dest(), after inserting the new node
    into hashtable in tipc_node_create(), it creates the bc link. However,
    there is a gap between this insert and bc link creation, a bc packet
    may come in and get the node from the hashtable then try to dereference
    its bc link, which is NULL.
    
    This patch is to fix it by moving the bc link creation before inserting
    into the hashtable.
    
    Note that for a preliminary node becoming "real", the bc link creation
    should also be called before it's rehashed, as we don't create it for
    preliminary nodes.
    
    Fixes: 4cbf8ac2fe5a ("tipc: enable creating a "preliminary" node")
    Reported-by: Shuang Li <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e8379351dbde61ea383e514f0f9ecb2c047cf4e
Merge: 868f9f2f8e00 58bf4db69528
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Jun 30 15:26:55 2022 -0700

    Merge tag 'net-5.19-rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from Jakub Kicinski:
     "Including fixes from netfilter.
    
      Current release - new code bugs:
    
       - clear msg_get_inq in __sys_recvfrom() and __copy_msghdr_from_user()
    
       - mptcp:
          - invoke MP_FAIL response only when needed
          - fix shutdown vs fallback race
          - consistent map handling on failure
    
       - octeon_ep: use bitwise AND
    
      Previous releases - regressions:
    
       - tipc: move bc link creation back to tipc_node_create, fix NPD
    
      Previous releases - always broken:
    
       - tcp: add a missing nf_reset_ct() in 3WHS handling to prevent socket
         buffered skbs from keeping refcount on the conntrack module
    
       - ipv6: take care of disable_policy when restoring routes
    
       - tun: make sure to always disable and unlink NAPI instances
    
       - phy: don't trigger state machine while in suspend
    
       - netfilter: nf_tables: avoid skb access on nf_stolen
    
       - asix: fix "can't send until first packet is send" issue
    
       - usb: asix: do not force pause frames support
    
       - nxp-nci: don't issue a zero length i2c_master_read()
    
      Misc:
    
       - ncsi: allow use of proper "mellanox" DT vendor prefix
    
       - act_api: add a message for user space if any actions were already
         flushed before the error was hit"
    
    * tag 'net-5.19-rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (55 commits)
      net: dsa: felix: fix race between reading PSFP stats and port stats
      selftest: tun: add test for NAPI dismantle
      net: tun: avoid disabling NAPI twice
      net: sparx5: mdb add/del handle non-sparx5 devices
      net: sfp: fix memory leak in sfp_probe()
      mlxsw: spectrum_router: Fix rollback in tunnel next hop init
      net: rose: fix UAF bugs caused by timer handler
      net: usb: ax88179_178a: Fix packet receiving
      net: bonding: fix use-after-free after 802.3ad slave unbind
      ipv6: fix lockdep splat in in6_dump_addrs()
      net: phy: ax88772a: fix lost pause advertisement configuration
      net: phy: Don't trigger state machine while in suspend
      usbnet: fix memory allocation in helpers
      selftests net: fix kselftest net fatal error
      NFC: nxp-nci: don't print header length mismatch on i2c error
      NFC: nxp-nci: Don't issue a zero length i2c_master_read()
      net: tipc: fix possible refcount leak in tipc_sk_create()
      nfc: nfcmrvl: Fix irq_of_parse_and_map() return value
      net: ipv6: unexport __init-annotated seg6_hmac_net_init()
      ipv6/sit: fix ipip6_tunnel_get_prl return value
      ...

commit 00aff3590fc0a73bddd3b743863c14e76fd35c0c
Author: Hangyu Hua <hbh25y@gmail.com>
Date:   Wed Jun 29 14:34:18 2022 +0800

    net: tipc: fix possible refcount leak in tipc_sk_create()
    
    Free sk in case tipc_sk_insert() fails.
    
    Signed-off-by: Hangyu Hua <hbh25y@gmail.com>
    Reviewed-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8b246ddd394d7d9640816611693b0096b998e27a
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Fri Jun 17 08:45:51 2022 +0700

    tipc: fix use-after-free Read in tipc_named_reinit
    
    [ Upstream commit 911600bf5a5e84bfda4d33ee32acc75ecf6159f0 ]
    
    syzbot found the following issue on:
    ==================================================================
    BUG: KASAN: use-after-free in tipc_named_reinit+0x94f/0x9b0
    net/tipc/name_distr.c:413
    Read of size 8 at addr ffff88805299a000 by task kworker/1:9/23764
    
    CPU: 1 PID: 23764 Comm: kworker/1:9 Not tainted
    5.18.0-rc4-syzkaller-00878-g17d49e6e8012 #0
    Hardware name: Google Compute Engine/Google Compute Engine,
    BIOS Google 01/01/2011
    Workqueue: events tipc_net_finalize_work
    Call Trace:
     <TASK>
     __dump_stack lib/dump_stack.c:88 [inline]
     dump_stack_lvl+0xcd/0x134 lib/dump_stack.c:106
     print_address_description.constprop.0.cold+0xeb/0x495
    mm/kasan/report.c:313
     print_report mm/kasan/report.c:429 [inline]
     kasan_report.cold+0xf4/0x1c6 mm/kasan/report.c:491
     tipc_named_reinit+0x94f/0x9b0 net/tipc/name_distr.c:413
     tipc_net_finalize+0x234/0x3d0 net/tipc/net.c:138
     process_one_work+0x996/0x1610 kernel/workqueue.c:2289
     worker_thread+0x665/0x1080 kernel/workqueue.c:2436
     kthread+0x2e9/0x3a0 kernel/kthread.c:376
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:298
     </TASK>
    [...]
    ==================================================================
    
    In the commit
    d966ddcc3821 ("tipc: fix a deadlock when flushing scheduled work"),
    the cancel_work_sync() function just to make sure ONLY the work
    tipc_net_finalize_work() is executing/pending on any CPU completed before
    tipc namespace is destroyed through tipc_exit_net(). But this function
    is not guaranteed the work is the last queued. So, the destroyed instance
    may be accessed in the work which will try to enqueue later.
    
    In order to completely fix, we re-order the calling of cancel_work_sync()
    to make sure the work tipc_net_finalize_work() was last queued and it
    must be completed by calling cancel_work_sync().
    
    Reported-by: syzbot+47af19f3307fc9c5c82e@syzkaller.appspotmail.com
    Fixes: d966ddcc3821 ("tipc: fix a deadlock when flushing scheduled work")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cd7789e659e84f137631dc1f5ec8d794f2700e6c
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Fri Jun 17 08:45:51 2022 +0700

    tipc: fix use-after-free Read in tipc_named_reinit
    
    [ Upstream commit 911600bf5a5e84bfda4d33ee32acc75ecf6159f0 ]
    
    syzbot found the following issue on:
    ==================================================================
    BUG: KASAN: use-after-free in tipc_named_reinit+0x94f/0x9b0
    net/tipc/name_distr.c:413
    Read of size 8 at addr ffff88805299a000 by task kworker/1:9/23764
    
    CPU: 1 PID: 23764 Comm: kworker/1:9 Not tainted
    5.18.0-rc4-syzkaller-00878-g17d49e6e8012 #0
    Hardware name: Google Compute Engine/Google Compute Engine,
    BIOS Google 01/01/2011
    Workqueue: events tipc_net_finalize_work
    Call Trace:
     <TASK>
     __dump_stack lib/dump_stack.c:88 [inline]
     dump_stack_lvl+0xcd/0x134 lib/dump_stack.c:106
     print_address_description.constprop.0.cold+0xeb/0x495
    mm/kasan/report.c:313
     print_report mm/kasan/report.c:429 [inline]
     kasan_report.cold+0xf4/0x1c6 mm/kasan/report.c:491
     tipc_named_reinit+0x94f/0x9b0 net/tipc/name_distr.c:413
     tipc_net_finalize+0x234/0x3d0 net/tipc/net.c:138
     process_one_work+0x996/0x1610 kernel/workqueue.c:2289
     worker_thread+0x665/0x1080 kernel/workqueue.c:2436
     kthread+0x2e9/0x3a0 kernel/kthread.c:376
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:298
     </TASK>
    [...]
    ==================================================================
    
    In the commit
    d966ddcc3821 ("tipc: fix a deadlock when flushing scheduled work"),
    the cancel_work_sync() function just to make sure ONLY the work
    tipc_net_finalize_work() is executing/pending on any CPU completed before
    tipc namespace is destroyed through tipc_exit_net(). But this function
    is not guaranteed the work is the last queued. So, the destroyed instance
    may be accessed in the work which will try to enqueue later.
    
    In order to completely fix, we re-order the calling of cancel_work_sync()
    to make sure the work tipc_net_finalize_work() was last queued and it
    must be completed by calling cancel_work_sync().
    
    Reported-by: syzbot+47af19f3307fc9c5c82e@syzkaller.appspotmail.com
    Fixes: d966ddcc3821 ("tipc: fix a deadlock when flushing scheduled work")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 361c5521c1e49843b710f455cae3c0a50b714323
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Fri Jun 17 08:45:51 2022 +0700

    tipc: fix use-after-free Read in tipc_named_reinit
    
    [ Upstream commit 911600bf5a5e84bfda4d33ee32acc75ecf6159f0 ]
    
    syzbot found the following issue on:
    ==================================================================
    BUG: KASAN: use-after-free in tipc_named_reinit+0x94f/0x9b0
    net/tipc/name_distr.c:413
    Read of size 8 at addr ffff88805299a000 by task kworker/1:9/23764
    
    CPU: 1 PID: 23764 Comm: kworker/1:9 Not tainted
    5.18.0-rc4-syzkaller-00878-g17d49e6e8012 #0
    Hardware name: Google Compute Engine/Google Compute Engine,
    BIOS Google 01/01/2011
    Workqueue: events tipc_net_finalize_work
    Call Trace:
     <TASK>
     __dump_stack lib/dump_stack.c:88 [inline]
     dump_stack_lvl+0xcd/0x134 lib/dump_stack.c:106
     print_address_description.constprop.0.cold+0xeb/0x495
    mm/kasan/report.c:313
     print_report mm/kasan/report.c:429 [inline]
     kasan_report.cold+0xf4/0x1c6 mm/kasan/report.c:491
     tipc_named_reinit+0x94f/0x9b0 net/tipc/name_distr.c:413
     tipc_net_finalize+0x234/0x3d0 net/tipc/net.c:138
     process_one_work+0x996/0x1610 kernel/workqueue.c:2289
     worker_thread+0x665/0x1080 kernel/workqueue.c:2436
     kthread+0x2e9/0x3a0 kernel/kthread.c:376
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:298
     </TASK>
    [...]
    ==================================================================
    
    In the commit
    d966ddcc3821 ("tipc: fix a deadlock when flushing scheduled work"),
    the cancel_work_sync() function just to make sure ONLY the work
    tipc_net_finalize_work() is executing/pending on any CPU completed before
    tipc namespace is destroyed through tipc_exit_net(). But this function
    is not guaranteed the work is the last queued. So, the destroyed instance
    may be accessed in the work which will try to enqueue later.
    
    In order to completely fix, we re-order the calling of cancel_work_sync()
    to make sure the work tipc_net_finalize_work() was last queued and it
    must be completed by calling cancel_work_sync().
    
    Reported-by: syzbot+47af19f3307fc9c5c82e@syzkaller.appspotmail.com
    Fixes: d966ddcc3821 ("tipc: fix a deadlock when flushing scheduled work")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f299d3fbe431aa5556edc0670a401d2b7b796490
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue May 18 10:09:08 2021 +0800

    tipc: simplify the finalize work queue
    
    [ Upstream commit be07f056396d6bb40963c45a02951c566ddeef8e ]
    
    This patch is to use "struct work_struct" for the finalize work queue
    instead of "struct tipc_net_work", as it can get the "net" and "addr"
    from tipc_net's other members and there is no need to add extra net
    and addr in tipc_net by defining "struct tipc_net_work".
    
    Note that it's safe to get net from tn->bcl as bcl is always released
    after the finalize work queue is done.
    
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cb8092d70a6f5f01ec1490fce4d35efed3ed996c
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Jun 24 12:24:31 2022 -0400

    tipc: move bc link creation back to tipc_node_create
    
    Shuang Li reported a NULL pointer dereference crash:
    
      [] BUG: kernel NULL pointer dereference, address: 0000000000000068
      [] RIP: 0010:tipc_link_is_up+0x5/0x10 [tipc]
      [] Call Trace:
      []  <IRQ>
      []  tipc_bcast_rcv+0xa2/0x190 [tipc]
      []  tipc_node_bc_rcv+0x8b/0x200 [tipc]
      []  tipc_rcv+0x3af/0x5b0 [tipc]
      []  tipc_udp_recv+0xc7/0x1e0 [tipc]
    
    It was caused by the 'l' passed into tipc_bcast_rcv() is NULL. When it
    creates a node in tipc_node_check_dest(), after inserting the new node
    into hashtable in tipc_node_create(), it creates the bc link. However,
    there is a gap between this insert and bc link creation, a bc packet
    may come in and get the node from the hashtable then try to dereference
    its bc link, which is NULL.
    
    This patch is to fix it by moving the bc link creation before inserting
    into the hashtable.
    
    Note that for a preliminary node becoming "real", the bc link creation
    should also be called before it's rehashed, as we don't create it for
    preliminary nodes.
    
    Fixes: 4cbf8ac2fe5a ("tipc: enable creating a "preliminary" node")
    Reported-by: Shuang Li <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 399bd66e219e331976fe6fa6ab81a023c0c97870
Merge: f410c3e000a3 12378a5a75e3
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Jun 23 09:01:01 2022 -0500

    Merge tag 'net-5.19-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from Paolo Abeni:
     "Including fixes from bpf and netfilter.
    
      Current release - regressions:
    
       - netfilter: cttimeout: fix slab-out-of-bounds read in
         cttimeout_net_exit
    
    Current release - new code bugs:
    
       - bpf: ftrace: keep address offset in ftrace_lookup_symbols
    
       - bpf: force cookies array to follow symbols sorting
    
      Previous releases - regressions:
    
       - ipv4: ping: fix bind address validity check
    
       - tipc: fix use-after-free read in tipc_named_reinit
    
       - eth: veth: add updating of trans_start
    
      Previous releases - always broken:
    
       - sock: redo the psock vs ULP protection check
    
       - netfilter: nf_dup_netdev: fix skb_under_panic
    
       - bpf: fix request_sock leak in sk lookup helpers
    
       - eth: igb: fix a use-after-free issue in igb_clean_tx_ring
    
       - eth: ice: prohibit improper channel config for DCB
    
       - eth: at803x: fix null pointer dereference on AR9331 phy
    
       - eth: virtio_net: fix xdp_rxq_info bug after suspend/resume
    
      Misc:
    
       - eth: hinic: replace memcpy() with direct assignment"
    
    * tag 'net-5.19-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (47 commits)
      net: openvswitch: fix parsing of nw_proto for IPv6 fragments
      sock: redo the psock vs ULP protection check
      Revert "net/tls: fix tls_sk_proto_close executed repeatedly"
      virtio_net: fix xdp_rxq_info bug after suspend/resume
      igb: Make DMA faster when CPU is active on the PCIe link
      net: dsa: qca8k: reduce mgmt ethernet timeout
      net: dsa: qca8k: reset cpu port on MTU change
      MAINTAINERS: Add a maintainer for OCP Time Card
      hinic: Replace memcpy() with direct assignment
      Revert "drivers/net/ethernet/neterion/vxge: Fix a use-after-free bug in vxge-main.c"
      net: phy: smsc: Disable Energy Detect Power-Down in interrupt mode
      ice: ethtool: Prohibit improper channel config for DCB
      ice: ethtool: advertise 1000M speeds properly
      ice: Fix switchdev rules book keeping
      ice: ignore protocol field in GTP offload
      netfilter: nf_dup_netdev: add and use recursion counter
      netfilter: nf_dup_netdev: do not push mac header a second time
      selftests: netfilter: correct PKTGEN_SCRIPT_PATHS in nft_concat_range.sh
      net/tls: fix tls_sk_proto_close executed repeatedly
      erspan: do not assume transport header is always set
      ...

commit 4875d94c69d5a4836c4225b51429d277c297aae8
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Fri Jun 17 08:47:51 2022 +0700

    tipc: cleanup unused function
    
    tipc_dest_list_len() is not being called anywhere. Clean it up.
    
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 911600bf5a5e84bfda4d33ee32acc75ecf6159f0
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Fri Jun 17 08:45:51 2022 +0700

    tipc: fix use-after-free Read in tipc_named_reinit
    
    syzbot found the following issue on:
    ==================================================================
    BUG: KASAN: use-after-free in tipc_named_reinit+0x94f/0x9b0
    net/tipc/name_distr.c:413
    Read of size 8 at addr ffff88805299a000 by task kworker/1:9/23764
    
    CPU: 1 PID: 23764 Comm: kworker/1:9 Not tainted
    5.18.0-rc4-syzkaller-00878-g17d49e6e8012 #0
    Hardware name: Google Compute Engine/Google Compute Engine,
    BIOS Google 01/01/2011
    Workqueue: events tipc_net_finalize_work
    Call Trace:
     <TASK>
     __dump_stack lib/dump_stack.c:88 [inline]
     dump_stack_lvl+0xcd/0x134 lib/dump_stack.c:106
     print_address_description.constprop.0.cold+0xeb/0x495
    mm/kasan/report.c:313
     print_report mm/kasan/report.c:429 [inline]
     kasan_report.cold+0xf4/0x1c6 mm/kasan/report.c:491
     tipc_named_reinit+0x94f/0x9b0 net/tipc/name_distr.c:413
     tipc_net_finalize+0x234/0x3d0 net/tipc/net.c:138
     process_one_work+0x996/0x1610 kernel/workqueue.c:2289
     worker_thread+0x665/0x1080 kernel/workqueue.c:2436
     kthread+0x2e9/0x3a0 kernel/kthread.c:376
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:298
     </TASK>
    [...]
    ==================================================================
    
    In the commit
    d966ddcc3821 ("tipc: fix a deadlock when flushing scheduled work"),
    the cancel_work_sync() function just to make sure ONLY the work
    tipc_net_finalize_work() is executing/pending on any CPU completed before
    tipc namespace is destroyed through tipc_exit_net(). But this function
    is not guaranteed the work is the last queued. So, the destroyed instance
    may be accessed in the work which will try to enqueue later.
    
    In order to completely fix, we re-order the calling of cancel_work_sync()
    to make sure the work tipc_net_finalize_work() was last queued and it
    must be completed by calling cancel_work_sync().
    
    Reported-by: syzbot+47af19f3307fc9c5c82e@syzkaller.appspotmail.com
    Fixes: d966ddcc3821 ("tipc: fix a deadlock when flushing scheduled work")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3af15272cde28fe5c8489174b8624e232c1775ec
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Jun 2 13:30:53 2022 +0700

    tipc: check attribute length for bearer name
    
    [ Upstream commit 7f36f798f89bf32c0164049cb0e3fd1af613d0bb ]
    
    syzbot reported uninit-value:
    =====================================================
    BUG: KMSAN: uninit-value in string_nocheck lib/vsprintf.c:644 [inline]
    BUG: KMSAN: uninit-value in string+0x4f9/0x6f0 lib/vsprintf.c:725
     string_nocheck lib/vsprintf.c:644 [inline]
     string+0x4f9/0x6f0 lib/vsprintf.c:725
     vsnprintf+0x2222/0x3650 lib/vsprintf.c:2806
     vprintk_store+0x537/0x2150 kernel/printk/printk.c:2158
     vprintk_emit+0x28b/0xab0 kernel/printk/printk.c:2256
     vprintk_default+0x86/0xa0 kernel/printk/printk.c:2283
     vprintk+0x15f/0x180 kernel/printk/printk_safe.c:50
     _printk+0x18d/0x1cf kernel/printk/printk.c:2293
     tipc_enable_bearer net/tipc/bearer.c:371 [inline]
     __tipc_nl_bearer_enable+0x2022/0x22a0 net/tipc/bearer.c:1033
     tipc_nl_bearer_enable+0x6c/0xb0 net/tipc/bearer.c:1042
     genl_family_rcv_msg_doit net/netlink/genetlink.c:731 [inline]
    
    - Do sanity check the attribute length for TIPC_NLA_BEARER_NAME.
    - Do not use 'illegal name' in printing message.
    
    Reported-by: syzbot+e820fdc8ce362f2dea51@syzkaller.appspotmail.com
    Fixes: cb30a63384bc ("tipc: refactor function tipc_enable_bearer()")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Link: https://lore.kernel.org/r/20220602063053.5892-1-hoang.h.le@dektech.com.au
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 292be63c382ce20673ee61dff1ee9ed4a3dcaae7
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Jun 2 13:30:53 2022 +0700

    tipc: check attribute length for bearer name
    
    [ Upstream commit 7f36f798f89bf32c0164049cb0e3fd1af613d0bb ]
    
    syzbot reported uninit-value:
    =====================================================
    BUG: KMSAN: uninit-value in string_nocheck lib/vsprintf.c:644 [inline]
    BUG: KMSAN: uninit-value in string+0x4f9/0x6f0 lib/vsprintf.c:725
     string_nocheck lib/vsprintf.c:644 [inline]
     string+0x4f9/0x6f0 lib/vsprintf.c:725
     vsnprintf+0x2222/0x3650 lib/vsprintf.c:2806
     vprintk_store+0x537/0x2150 kernel/printk/printk.c:2158
     vprintk_emit+0x28b/0xab0 kernel/printk/printk.c:2256
     vprintk_default+0x86/0xa0 kernel/printk/printk.c:2283
     vprintk+0x15f/0x180 kernel/printk/printk_safe.c:50
     _printk+0x18d/0x1cf kernel/printk/printk.c:2293
     tipc_enable_bearer net/tipc/bearer.c:371 [inline]
     __tipc_nl_bearer_enable+0x2022/0x22a0 net/tipc/bearer.c:1033
     tipc_nl_bearer_enable+0x6c/0xb0 net/tipc/bearer.c:1042
     genl_family_rcv_msg_doit net/netlink/genetlink.c:731 [inline]
    
    - Do sanity check the attribute length for TIPC_NLA_BEARER_NAME.
    - Do not use 'illegal name' in printing message.
    
    Reported-by: syzbot+e820fdc8ce362f2dea51@syzkaller.appspotmail.com
    Fixes: cb30a63384bc ("tipc: refactor function tipc_enable_bearer()")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Link: https://lore.kernel.org/r/20220602063053.5892-1-hoang.h.le@dektech.com.au
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 92a930fcf4250fe961f6238b99af0bc405799f39
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Jun 2 13:30:53 2022 +0700

    tipc: check attribute length for bearer name
    
    [ Upstream commit 7f36f798f89bf32c0164049cb0e3fd1af613d0bb ]
    
    syzbot reported uninit-value:
    =====================================================
    BUG: KMSAN: uninit-value in string_nocheck lib/vsprintf.c:644 [inline]
    BUG: KMSAN: uninit-value in string+0x4f9/0x6f0 lib/vsprintf.c:725
     string_nocheck lib/vsprintf.c:644 [inline]
     string+0x4f9/0x6f0 lib/vsprintf.c:725
     vsnprintf+0x2222/0x3650 lib/vsprintf.c:2806
     vprintk_store+0x537/0x2150 kernel/printk/printk.c:2158
     vprintk_emit+0x28b/0xab0 kernel/printk/printk.c:2256
     vprintk_default+0x86/0xa0 kernel/printk/printk.c:2283
     vprintk+0x15f/0x180 kernel/printk/printk_safe.c:50
     _printk+0x18d/0x1cf kernel/printk/printk.c:2293
     tipc_enable_bearer net/tipc/bearer.c:371 [inline]
     __tipc_nl_bearer_enable+0x2022/0x22a0 net/tipc/bearer.c:1033
     tipc_nl_bearer_enable+0x6c/0xb0 net/tipc/bearer.c:1042
     genl_family_rcv_msg_doit net/netlink/genetlink.c:731 [inline]
    
    - Do sanity check the attribute length for TIPC_NLA_BEARER_NAME.
    - Do not use 'illegal name' in printing message.
    
    Reported-by: syzbot+e820fdc8ce362f2dea51@syzkaller.appspotmail.com
    Fixes: cb30a63384bc ("tipc: refactor function tipc_enable_bearer()")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Link: https://lore.kernel.org/r/20220602063053.5892-1-hoang.h.le@dektech.com.au
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b8fac8e321044a9ac50f7185b4e9d91a7745e4b0
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Jun 2 13:30:53 2022 +0700

    tipc: check attribute length for bearer name
    
    [ Upstream commit 7f36f798f89bf32c0164049cb0e3fd1af613d0bb ]
    
    syzbot reported uninit-value:
    =====================================================
    BUG: KMSAN: uninit-value in string_nocheck lib/vsprintf.c:644 [inline]
    BUG: KMSAN: uninit-value in string+0x4f9/0x6f0 lib/vsprintf.c:725
     string_nocheck lib/vsprintf.c:644 [inline]
     string+0x4f9/0x6f0 lib/vsprintf.c:725
     vsnprintf+0x2222/0x3650 lib/vsprintf.c:2806
     vprintk_store+0x537/0x2150 kernel/printk/printk.c:2158
     vprintk_emit+0x28b/0xab0 kernel/printk/printk.c:2256
     vprintk_default+0x86/0xa0 kernel/printk/printk.c:2283
     vprintk+0x15f/0x180 kernel/printk/printk_safe.c:50
     _printk+0x18d/0x1cf kernel/printk/printk.c:2293
     tipc_enable_bearer net/tipc/bearer.c:371 [inline]
     __tipc_nl_bearer_enable+0x2022/0x22a0 net/tipc/bearer.c:1033
     tipc_nl_bearer_enable+0x6c/0xb0 net/tipc/bearer.c:1042
     genl_family_rcv_msg_doit net/netlink/genetlink.c:731 [inline]
    
    - Do sanity check the attribute length for TIPC_NLA_BEARER_NAME.
    - Do not use 'illegal name' in printing message.
    
    Reported-by: syzbot+e820fdc8ce362f2dea51@syzkaller.appspotmail.com
    Fixes: cb30a63384bc ("tipc: refactor function tipc_enable_bearer()")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Link: https://lore.kernel.org/r/20220602063053.5892-1-hoang.h.le@dektech.com.au
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8b91d0dfc839e67708c905648cd0e7507a2263e5
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Jun 2 13:30:53 2022 +0700

    tipc: check attribute length for bearer name
    
    [ Upstream commit 7f36f798f89bf32c0164049cb0e3fd1af613d0bb ]
    
    syzbot reported uninit-value:
    =====================================================
    BUG: KMSAN: uninit-value in string_nocheck lib/vsprintf.c:644 [inline]
    BUG: KMSAN: uninit-value in string+0x4f9/0x6f0 lib/vsprintf.c:725
     string_nocheck lib/vsprintf.c:644 [inline]
     string+0x4f9/0x6f0 lib/vsprintf.c:725
     vsnprintf+0x2222/0x3650 lib/vsprintf.c:2806
     vprintk_store+0x537/0x2150 kernel/printk/printk.c:2158
     vprintk_emit+0x28b/0xab0 kernel/printk/printk.c:2256
     vprintk_default+0x86/0xa0 kernel/printk/printk.c:2283
     vprintk+0x15f/0x180 kernel/printk/printk_safe.c:50
     _printk+0x18d/0x1cf kernel/printk/printk.c:2293
     tipc_enable_bearer net/tipc/bearer.c:371 [inline]
     __tipc_nl_bearer_enable+0x2022/0x22a0 net/tipc/bearer.c:1033
     tipc_nl_bearer_enable+0x6c/0xb0 net/tipc/bearer.c:1042
     genl_family_rcv_msg_doit net/netlink/genetlink.c:731 [inline]
    
    - Do sanity check the attribute length for TIPC_NLA_BEARER_NAME.
    - Do not use 'illegal name' in printing message.
    
    Reported-by: syzbot+e820fdc8ce362f2dea51@syzkaller.appspotmail.com
    Fixes: cb30a63384bc ("tipc: refactor function tipc_enable_bearer()")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Link: https://lore.kernel.org/r/20220602063053.5892-1-hoang.h.le@dektech.com.au
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f07670871f4d19e613740eebe210e7e9ea535973
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Jun 2 13:30:53 2022 +0700

    tipc: check attribute length for bearer name
    
    [ Upstream commit 7f36f798f89bf32c0164049cb0e3fd1af613d0bb ]
    
    syzbot reported uninit-value:
    =====================================================
    BUG: KMSAN: uninit-value in string_nocheck lib/vsprintf.c:644 [inline]
    BUG: KMSAN: uninit-value in string+0x4f9/0x6f0 lib/vsprintf.c:725
     string_nocheck lib/vsprintf.c:644 [inline]
     string+0x4f9/0x6f0 lib/vsprintf.c:725
     vsnprintf+0x2222/0x3650 lib/vsprintf.c:2806
     vprintk_store+0x537/0x2150 kernel/printk/printk.c:2158
     vprintk_emit+0x28b/0xab0 kernel/printk/printk.c:2256
     vprintk_default+0x86/0xa0 kernel/printk/printk.c:2283
     vprintk+0x15f/0x180 kernel/printk/printk_safe.c:50
     _printk+0x18d/0x1cf kernel/printk/printk.c:2293
     tipc_enable_bearer net/tipc/bearer.c:371 [inline]
     __tipc_nl_bearer_enable+0x2022/0x22a0 net/tipc/bearer.c:1033
     tipc_nl_bearer_enable+0x6c/0xb0 net/tipc/bearer.c:1042
     genl_family_rcv_msg_doit net/netlink/genetlink.c:731 [inline]
    
    - Do sanity check the attribute length for TIPC_NLA_BEARER_NAME.
    - Do not use 'illegal name' in printing message.
    
    Reported-by: syzbot+e820fdc8ce362f2dea51@syzkaller.appspotmail.com
    Fixes: cb30a63384bc ("tipc: refactor function tipc_enable_bearer()")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Link: https://lore.kernel.org/r/20220602063053.5892-1-hoang.h.le@dektech.com.au
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 58f9d52ff689a262bec7f5713c07f5a79e115168
Merge: 73503963b715 638696efc147
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Jun 2 12:50:16 2022 -0700

    Merge tag 'net-5.19-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from Jakub Kicinski:
     "Including fixes from bpf and netfilter.
    
      Current release - new code bugs:
    
       - af_packet: make sure to pull the MAC header, avoid skb panic in GSO
    
       - ptp_clockmatrix: fix inverted logic in is_single_shot()
    
       - netfilter: flowtable: fix missing FLOWI_FLAG_ANYSRC flag
    
       - dt-bindings: net: adin: fix adi,phy-output-clock description syntax
    
       - wifi: iwlwifi: pcie: rename CAUSE macro, avoid MIPS build warning
    
      Previous releases - regressions:
    
       - Revert "net: af_key: add check for pfkey_broadcast in function
         pfkey_process"
    
       - tcp: fix tcp_mtup_probe_success vs wrong snd_cwnd
    
       - nf_tables: disallow non-stateful expression in sets earlier
    
       - nft_limit: clone packet limits' cost value
    
       - nf_tables: double hook unregistration in netns path
    
       - ping6: fix ping -6 with interface name
    
      Previous releases - always broken:
    
       - sched: fix memory barriers to prevent skbs from getting stuck in
         lockless qdiscs
    
       - neigh: set lower cap for neigh_managed_work rearming, avoid
         constantly scheduling the probe work
    
       - bpf: fix probe read error on big endian in ___bpf_prog_run()
    
       - amt: memory leak and error handling fixes
    
      Misc:
    
       - ipv6: expand & rename accept_unsolicited_na to accept_untracked_na"
    
    * tag 'net-5.19-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (80 commits)
      net/af_packet: make sure to pull mac header
      net: add debug info to __skb_pull()
      net: CONFIG_DEBUG_NET depends on CONFIG_NET
      stmmac: intel: Add RPL-P PCI ID
      net: stmmac: use dev_err_probe() for reporting mdio bus registration failure
      tipc: check attribute length for bearer name
      ice: fix access-beyond-end in the switch code
      nfp: remove padding in nfp_nfdk_tx_desc
      ax25: Fix ax25 session cleanup problems
      net: usb: qmi_wwan: Add support for Cinterion MV31 with new baseline
      sfc/siena: fix wrong tx channel offset with efx_separate_tx_channels
      sfc/siena: fix considering that all channels have TX queues
      socket: Don't use u8 type in uapi socket.h
      net/sched: act_api: fix error code in tcf_ct_flow_table_fill_tuple_ipv6()
      net: ping6: Fix ping -6 with interface name
      macsec: fix UAF bug for real_dev
      octeontx2-af: fix error code in is_valid_offset()
      wifi: mac80211: fix use-after-free in chanctx code
      bonding: guard ns_targets by CONFIG_IPV6
      tcp: tcp_rtx_synack() can be called from process context
      ...

commit 7f36f798f89bf32c0164049cb0e3fd1af613d0bb
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Jun 2 13:30:53 2022 +0700

    tipc: check attribute length for bearer name
    
    syzbot reported uninit-value:
    =====================================================
    BUG: KMSAN: uninit-value in string_nocheck lib/vsprintf.c:644 [inline]
    BUG: KMSAN: uninit-value in string+0x4f9/0x6f0 lib/vsprintf.c:725
     string_nocheck lib/vsprintf.c:644 [inline]
     string+0x4f9/0x6f0 lib/vsprintf.c:725
     vsnprintf+0x2222/0x3650 lib/vsprintf.c:2806
     vprintk_store+0x537/0x2150 kernel/printk/printk.c:2158
     vprintk_emit+0x28b/0xab0 kernel/printk/printk.c:2256
     vprintk_default+0x86/0xa0 kernel/printk/printk.c:2283
     vprintk+0x15f/0x180 kernel/printk/printk_safe.c:50
     _printk+0x18d/0x1cf kernel/printk/printk.c:2293
     tipc_enable_bearer net/tipc/bearer.c:371 [inline]
     __tipc_nl_bearer_enable+0x2022/0x22a0 net/tipc/bearer.c:1033
     tipc_nl_bearer_enable+0x6c/0xb0 net/tipc/bearer.c:1042
     genl_family_rcv_msg_doit net/netlink/genetlink.c:731 [inline]
    
    - Do sanity check the attribute length for TIPC_NLA_BEARER_NAME.
    - Do not use 'illegal name' in printing message.
    
    Reported-by: syzbot+e820fdc8ce362f2dea51@syzkaller.appspotmail.com
    Fixes: cb30a63384bc ("tipc: refactor function tipc_enable_bearer()")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Link: https://lore.kernel.org/r/20220602063053.5892-1-hoang.h.le@dektech.com.au
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 043b1970133290cae3eef1bf8caa2a8f5f3fb500
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Mon Mar 21 11:22:29 2022 +0700

    tipc: fix the timer expires after interval 100ms
    
    [ Upstream commit 6a7d8cff4a3301087dd139293e9bddcf63827282 ]
    
    In the timer callback function tipc_sk_timeout(), we're trying to
    reschedule another timeout to retransmit a setup request if destination
    link is congested. But we use the incorrect timeout value
    (msecs_to_jiffies(100)) instead of (jiffies + msecs_to_jiffies(100)),
    so that the timer expires immediately, it's irrelevant for original
    description.
    
    In this commit we correct the timeout value in sk_reset_timer()
    
    Fixes: 6787927475e5 ("tipc: buffer overflow handling in listener socket")
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Link: https://lore.kernel.org/r/20220321042229.314288-1-hoang.h.le@dektech.com.au
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 084be6309f4f7d71cf7cbc4da6a6be513992b69f
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Mon Mar 21 11:22:29 2022 +0700

    tipc: fix the timer expires after interval 100ms
    
    [ Upstream commit 6a7d8cff4a3301087dd139293e9bddcf63827282 ]
    
    In the timer callback function tipc_sk_timeout(), we're trying to
    reschedule another timeout to retransmit a setup request if destination
    link is congested. But we use the incorrect timeout value
    (msecs_to_jiffies(100)) instead of (jiffies + msecs_to_jiffies(100)),
    so that the timer expires immediately, it's irrelevant for original
    description.
    
    In this commit we correct the timeout value in sk_reset_timer()
    
    Fixes: 6787927475e5 ("tipc: buffer overflow handling in listener socket")
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Link: https://lore.kernel.org/r/20220321042229.314288-1-hoang.h.le@dektech.com.au
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 21a2b4ab48a4878205825f2c8344a49edad8476d
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Mon Mar 21 11:22:29 2022 +0700

    tipc: fix the timer expires after interval 100ms
    
    [ Upstream commit 6a7d8cff4a3301087dd139293e9bddcf63827282 ]
    
    In the timer callback function tipc_sk_timeout(), we're trying to
    reschedule another timeout to retransmit a setup request if destination
    link is congested. But we use the incorrect timeout value
    (msecs_to_jiffies(100)) instead of (jiffies + msecs_to_jiffies(100)),
    so that the timer expires immediately, it's irrelevant for original
    description.
    
    In this commit we correct the timeout value in sk_reset_timer()
    
    Fixes: 6787927475e5 ("tipc: buffer overflow handling in listener socket")
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Link: https://lore.kernel.org/r/20220321042229.314288-1-hoang.h.le@dektech.com.au
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b58fa5cf636f66cd3d955b351f15c0e5d9445250
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Mon Mar 21 11:22:29 2022 +0700

    tipc: fix the timer expires after interval 100ms
    
    [ Upstream commit 6a7d8cff4a3301087dd139293e9bddcf63827282 ]
    
    In the timer callback function tipc_sk_timeout(), we're trying to
    reschedule another timeout to retransmit a setup request if destination
    link is congested. But we use the incorrect timeout value
    (msecs_to_jiffies(100)) instead of (jiffies + msecs_to_jiffies(100)),
    so that the timer expires immediately, it's irrelevant for original
    description.
    
    In this commit we correct the timeout value in sk_reset_timer()
    
    Fixes: 6787927475e5 ("tipc: buffer overflow handling in listener socket")
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Link: https://lore.kernel.org/r/20220321042229.314288-1-hoang.h.le@dektech.com.au
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8d8cb4166a4705b9067087d459bf8369869782fa
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Mon Mar 21 11:22:29 2022 +0700

    tipc: fix the timer expires after interval 100ms
    
    [ Upstream commit 6a7d8cff4a3301087dd139293e9bddcf63827282 ]
    
    In the timer callback function tipc_sk_timeout(), we're trying to
    reschedule another timeout to retransmit a setup request if destination
    link is congested. But we use the incorrect timeout value
    (msecs_to_jiffies(100)) instead of (jiffies + msecs_to_jiffies(100)),
    so that the timer expires immediately, it's irrelevant for original
    description.
    
    In this commit we correct the timeout value in sk_reset_timer()
    
    Fixes: 6787927475e5 ("tipc: buffer overflow handling in listener socket")
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Link: https://lore.kernel.org/r/20220321042229.314288-1-hoang.h.le@dektech.com.au
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1ee375d77bb944321c969b456aa73994566cecf6
Author: Nick Desaulniers <ndesaulniers@google.com>
Date:   Mon Apr 4 10:54:47 2022 -0700

    net, uapi: remove inclusion of arpa/inet.h
    
    In include/uapi/linux/tipc_config.h, there's a comment that it includes
    arpa/inet.h for ntohs; but ntohs is not defined in any UAPI header. For
    now, reuse the definitions from include/linux/byteorder/generic.h, since
    the various conversion functions do exist in UAPI headers:
    include/uapi/linux/byteorder/big_endian.h
    include/uapi/linux/byteorder/little_endian.h
    
    We would like to get to the point where we can build UAPI header tests
    with -nostdinc, meaning that kernel UAPI headers should not have a
    circular dependency on libc headers.
    
    Link: https://android-review.googlesource.com/c/platform/bionic/+/2048127
    Suggested-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Nick Desaulniers <ndesaulniers@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6a7d8cff4a3301087dd139293e9bddcf63827282
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Mon Mar 21 11:22:29 2022 +0700

    tipc: fix the timer expires after interval 100ms
    
    In the timer callback function tipc_sk_timeout(), we're trying to
    reschedule another timeout to retransmit a setup request if destination
    link is congested. But we use the incorrect timeout value
    (msecs_to_jiffies(100)) instead of (jiffies + msecs_to_jiffies(100)),
    so that the timer expires immediately, it's irrelevant for original
    description.
    
    In this commit we correct the timeout value in sk_reset_timer()
    
    Fixes: 6787927475e5 ("tipc: buffer overflow handling in listener socket")
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Link: https://lore.kernel.org/r/20220321042229.314288-1-hoang.h.le@dektech.com.au
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>

commit 688a5ec2274c4f53755101b48efdbb18a358ac42
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Tue Mar 8 02:11:59 2022 +0000

    tipc: fix incorrect order of state message data sanity check
    
    [ Upstream commit c79fcc27be90b308b3fa90811aefafdd4078668c ]
    
    When receiving a state message, function tipc_link_validate_msg()
    is called to validate its header portion. Then, its data portion
    is validated before it can be accessed correctly. However, current
    data sanity  check is done after the message header is accessed to
    update some link variables.
    
    This commit fixes this issue by moving the data sanity check to
    the beginning of state message handling and right after the header
    sanity check.
    
    Fixes: 9aa422ad3266 ("tipc: improve size validations for received domain records")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Link: https://lore.kernel.org/r/20220308021200.9245-1-tung.q.nguyen@dektech.com.au
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f4f59fdbc748805b08c13dae14c01f0518c77c94
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Fri Mar 4 03:25:18 2022 +0000

    tipc: fix kernel panic when enabling bearer
    
    [ Upstream commit be4977b847f5d5cedb64d50eaaf2218c3a55a3a3 ]
    
    When enabling a bearer on a node, a kernel panic is observed:
    
    [    4.498085] RIP: 0010:tipc_mon_prep+0x4e/0x130 [tipc]
    ...
    [    4.520030] Call Trace:
    [    4.520689]  <IRQ>
    [    4.521236]  tipc_link_build_proto_msg+0x375/0x750 [tipc]
    [    4.522654]  tipc_link_build_state_msg+0x48/0xc0 [tipc]
    [    4.524034]  __tipc_node_link_up+0xd7/0x290 [tipc]
    [    4.525292]  tipc_rcv+0x5da/0x730 [tipc]
    [    4.526346]  ? __netif_receive_skb_core+0xb7/0xfc0
    [    4.527601]  tipc_l2_rcv_msg+0x5e/0x90 [tipc]
    [    4.528737]  __netif_receive_skb_list_core+0x20b/0x260
    [    4.530068]  netif_receive_skb_list_internal+0x1bf/0x2e0
    [    4.531450]  ? dev_gro_receive+0x4c2/0x680
    [    4.532512]  napi_complete_done+0x6f/0x180
    [    4.533570]  virtnet_poll+0x29c/0x42e [virtio_net]
    ...
    
    The node in question is receiving activate messages in another
    thread after changing bearer status to allow message sending/
    receiving in current thread:
    
             thread 1           |              thread 2
             --------           |              --------
                                |
    tipc_enable_bearer()        |
      test_and_set_bit_lock()   |
        tipc_bearer_xmit_skb()  |
                                | tipc_l2_rcv_msg()
                                |   tipc_rcv()
                                |     __tipc_node_link_up()
                                |       tipc_link_build_state_msg()
                                |         tipc_link_build_proto_msg()
                                |           tipc_mon_prep()
                                |           {
                                |             ...
                                |             // null-pointer dereference
                                |             u16 gen = mon->dom_gen;
                                |             ...
                                |           }
      // Not being executed yet |
      tipc_mon_create()         |
      {                         |
        ...                     |
        // allocate             |
        mon = kzalloc();        |
        ...                     |
      }                         |
    
    Monitoring pointer in thread 2 is dereferenced before monitoring data
    is allocated in thread 1. This causes kernel panic.
    
    This commit fixes it by allocating the monitoring data before enabling
    the bearer to receive messages.
    
    Fixes: 35c55c9877f8 ("tipc: add neighbor monitoring framework")
    Reported-by: Shuang Li <shuali@redhat.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5548c81e97ab85fb03199d7080b8441957bdea3a
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Tue Mar 8 02:11:59 2022 +0000

    tipc: fix incorrect order of state message data sanity check
    
    [ Upstream commit c79fcc27be90b308b3fa90811aefafdd4078668c ]
    
    When receiving a state message, function tipc_link_validate_msg()
    is called to validate its header portion. Then, its data portion
    is validated before it can be accessed correctly. However, current
    data sanity  check is done after the message header is accessed to
    update some link variables.
    
    This commit fixes this issue by moving the data sanity check to
    the beginning of state message handling and right after the header
    sanity check.
    
    Fixes: 9aa422ad3266 ("tipc: improve size validations for received domain records")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Link: https://lore.kernel.org/r/20220308021200.9245-1-tung.q.nguyen@dektech.com.au
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f96dc3adb9a97b8f3dfdb88796483491a3006b71
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Fri Mar 4 03:25:18 2022 +0000

    tipc: fix kernel panic when enabling bearer
    
    [ Upstream commit be4977b847f5d5cedb64d50eaaf2218c3a55a3a3 ]
    
    When enabling a bearer on a node, a kernel panic is observed:
    
    [    4.498085] RIP: 0010:tipc_mon_prep+0x4e/0x130 [tipc]
    ...
    [    4.520030] Call Trace:
    [    4.520689]  <IRQ>
    [    4.521236]  tipc_link_build_proto_msg+0x375/0x750 [tipc]
    [    4.522654]  tipc_link_build_state_msg+0x48/0xc0 [tipc]
    [    4.524034]  __tipc_node_link_up+0xd7/0x290 [tipc]
    [    4.525292]  tipc_rcv+0x5da/0x730 [tipc]
    [    4.526346]  ? __netif_receive_skb_core+0xb7/0xfc0
    [    4.527601]  tipc_l2_rcv_msg+0x5e/0x90 [tipc]
    [    4.528737]  __netif_receive_skb_list_core+0x20b/0x260
    [    4.530068]  netif_receive_skb_list_internal+0x1bf/0x2e0
    [    4.531450]  ? dev_gro_receive+0x4c2/0x680
    [    4.532512]  napi_complete_done+0x6f/0x180
    [    4.533570]  virtnet_poll+0x29c/0x42e [virtio_net]
    ...
    
    The node in question is receiving activate messages in another
    thread after changing bearer status to allow message sending/
    receiving in current thread:
    
             thread 1           |              thread 2
             --------           |              --------
                                |
    tipc_enable_bearer()        |
      test_and_set_bit_lock()   |
        tipc_bearer_xmit_skb()  |
                                | tipc_l2_rcv_msg()
                                |   tipc_rcv()
                                |     __tipc_node_link_up()
                                |       tipc_link_build_state_msg()
                                |         tipc_link_build_proto_msg()
                                |           tipc_mon_prep()
                                |           {
                                |             ...
                                |             // null-pointer dereference
                                |             u16 gen = mon->dom_gen;
                                |             ...
                                |           }
      // Not being executed yet |
      tipc_mon_create()         |
      {                         |
        ...                     |
        // allocate             |
        mon = kzalloc();        |
        ...                     |
      }                         |
    
    Monitoring pointer in thread 2 is dereferenced before monitoring data
    is allocated in thread 1. This causes kernel panic.
    
    This commit fixes it by allocating the monitoring data before enabling
    the bearer to receive messages.
    
    Fixes: 35c55c9877f8 ("tipc: add neighbor monitoring framework")
    Reported-by: Shuang Li <shuali@redhat.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5e42f90d7220f1956767be16c620c28ffaa55369
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Tue Mar 8 02:11:59 2022 +0000

    tipc: fix incorrect order of state message data sanity check
    
    [ Upstream commit c79fcc27be90b308b3fa90811aefafdd4078668c ]
    
    When receiving a state message, function tipc_link_validate_msg()
    is called to validate its header portion. Then, its data portion
    is validated before it can be accessed correctly. However, current
    data sanity  check is done after the message header is accessed to
    update some link variables.
    
    This commit fixes this issue by moving the data sanity check to
    the beginning of state message handling and right after the header
    sanity check.
    
    Fixes: 9aa422ad3266 ("tipc: improve size validations for received domain records")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Link: https://lore.kernel.org/r/20220308021200.9245-1-tung.q.nguyen@dektech.com.au
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2de76d37d4a6dca9b96ea51da24d4290e6cfa1a5
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Fri Mar 4 03:25:18 2022 +0000

    tipc: fix kernel panic when enabling bearer
    
    [ Upstream commit be4977b847f5d5cedb64d50eaaf2218c3a55a3a3 ]
    
    When enabling a bearer on a node, a kernel panic is observed:
    
    [    4.498085] RIP: 0010:tipc_mon_prep+0x4e/0x130 [tipc]
    ...
    [    4.520030] Call Trace:
    [    4.520689]  <IRQ>
    [    4.521236]  tipc_link_build_proto_msg+0x375/0x750 [tipc]
    [    4.522654]  tipc_link_build_state_msg+0x48/0xc0 [tipc]
    [    4.524034]  __tipc_node_link_up+0xd7/0x290 [tipc]
    [    4.525292]  tipc_rcv+0x5da/0x730 [tipc]
    [    4.526346]  ? __netif_receive_skb_core+0xb7/0xfc0
    [    4.527601]  tipc_l2_rcv_msg+0x5e/0x90 [tipc]
    [    4.528737]  __netif_receive_skb_list_core+0x20b/0x260
    [    4.530068]  netif_receive_skb_list_internal+0x1bf/0x2e0
    [    4.531450]  ? dev_gro_receive+0x4c2/0x680
    [    4.532512]  napi_complete_done+0x6f/0x180
    [    4.533570]  virtnet_poll+0x29c/0x42e [virtio_net]
    ...
    
    The node in question is receiving activate messages in another
    thread after changing bearer status to allow message sending/
    receiving in current thread:
    
             thread 1           |              thread 2
             --------           |              --------
                                |
    tipc_enable_bearer()        |
      test_and_set_bit_lock()   |
        tipc_bearer_xmit_skb()  |
                                | tipc_l2_rcv_msg()
                                |   tipc_rcv()
                                |     __tipc_node_link_up()
                                |       tipc_link_build_state_msg()
                                |         tipc_link_build_proto_msg()
                                |           tipc_mon_prep()
                                |           {
                                |             ...
                                |             // null-pointer dereference
                                |             u16 gen = mon->dom_gen;
                                |             ...
                                |           }
      // Not being executed yet |
      tipc_mon_create()         |
      {                         |
        ...                     |
        // allocate             |
        mon = kzalloc();        |
        ...                     |
      }                         |
    
    Monitoring pointer in thread 2 is dereferenced before monitoring data
    is allocated in thread 1. This causes kernel panic.
    
    This commit fixes it by allocating the monitoring data before enabling
    the bearer to receive messages.
    
    Fixes: 35c55c9877f8 ("tipc: add neighbor monitoring framework")
    Reported-by: Shuang Li <shuali@redhat.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 186d32bbf034417b40e2b4e773eeb8ef106c16c1
Merge: 3bcb6451cc96 e0ae713023a9
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Mar 10 16:47:58 2022 -0800

    Merge tag 'net-5.17-rc8' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from Jakub Kicinski:
     "Including fixes from bluetooth, and ipsec.
    
      Current release - regressions:
    
       - Bluetooth: fix unbalanced unlock in set_device_flags()
    
       - Bluetooth: fix not processing all entries on cmd_sync_work, make
         connect with qualcomm and intel adapters reliable
    
       - Revert "xfrm: state and policy should fail if XFRMA_IF_ID 0"
    
       - xdp: xdp_mem_allocator can be NULL in trace_mem_connect()
    
       - eth: ice: fix race condition and deadlock during interface enslave
    
      Current release - new code bugs:
    
       - tipc: fix incorrect order of state message data sanity check
    
      Previous releases - regressions:
    
       - esp: fix possible buffer overflow in ESP transformation
    
       - dsa: unlock the rtnl_mutex when dsa_master_setup() fails
    
       - phy: meson-gxl: fix interrupt handling in forced mode
    
       - smsc95xx: ignore -ENODEV errors when device is unplugged
    
      Previous releases - always broken:
    
       - xfrm: fix tunnel mode fragmentation behavior
    
       - esp: fix inter address family tunneling on GSO
    
       - tipc: fix null-deref due to race when enabling bearer
    
       - sctp: fix kernel-infoleak for SCTP sockets
    
       - eth: macb: fix lost RX packet wakeup race in NAPI receive
    
       - eth: intel stop disabling VFs due to PF error responses
    
       - eth: bcmgenet: don't claim WOL when its not available"
    
    * tag 'net-5.17-rc8' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (50 commits)
      xdp: xdp_mem_allocator can be NULL in trace_mem_connect().
      ice: Fix race condition during interface enslave
      net: phy: meson-gxl: improve link-up behavior
      net: bcmgenet: Don't claim WOL when its not available
      net: arc_emac: Fix use after free in arc_mdio_probe()
      sctp: fix kernel-infoleak for SCTP sockets
      net: phy: correct spelling error of media in documentation
      net: phy: DP83822: clear MISR2 register to disable interrupts
      gianfar: ethtool: Fix refcount leak in gfar_get_ts_info
      selftests: pmtu.sh: Kill nettest processes launched in subshell.
      selftests: pmtu.sh: Kill tcpdump processes launched by subshell.
      NFC: port100: fix use-after-free in port100_send_complete
      net/mlx5e: SHAMPO, reduce TIR indication
      net/mlx5e: Lag, Only handle events from highest priority multipath entry
      net/mlx5: Fix offloading with ESWITCH_IPV4_TTL_MODIFY_ENABLE
      net/mlx5: Fix a race on command flush flow
      net/mlx5: Fix size field in bufferx_reg struct
      ax25: Fix NULL pointer dereference in ax25_kill_by_device
      net: marvell: prestera: Add missing of_node_put() in prestera_switch_set_base_mac_addr
      net: ethernet: lpc_eth: Handle error for clk_enable
      ...

commit c79fcc27be90b308b3fa90811aefafdd4078668c
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Tue Mar 8 02:11:59 2022 +0000

    tipc: fix incorrect order of state message data sanity check
    
    When receiving a state message, function tipc_link_validate_msg()
    is called to validate its header portion. Then, its data portion
    is validated before it can be accessed correctly. However, current
    data sanity  check is done after the message header is accessed to
    update some link variables.
    
    This commit fixes this issue by moving the data sanity check to
    the beginning of state message handling and right after the header
    sanity check.
    
    Fixes: 9aa422ad3266 ("tipc: improve size validations for received domain records")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Link: https://lore.kernel.org/r/20220308021200.9245-1-tung.q.nguyen@dektech.com.au
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 35f4fa41a7eafd5bfbc1c440c38e87cf83857762
Author: Hangyu Hua <hbh25y@gmail.com>
Date:   Fri Feb 11 12:55:10 2022 +0800

    tipc: fix a bit overflow in tipc_crypto_key_rcv()
    
    [ Upstream commit 143de8d97d79316590475dc2a84513c63c863ddf ]
    
    msg_data_sz return a 32bit value, but size is 16bit. This may lead to a
    bit overflow.
    
    Signed-off-by: Hangyu Hua <hbh25y@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5340a0924ea9c07c5d9a7c5476317731131eead2
Author: Hangyu Hua <hbh25y@gmail.com>
Date:   Fri Feb 11 12:55:10 2022 +0800

    tipc: fix a bit overflow in tipc_crypto_key_rcv()
    
    [ Upstream commit 143de8d97d79316590475dc2a84513c63c863ddf ]
    
    msg_data_sz return a 32bit value, but size is 16bit. This may lead to a
    bit overflow.
    
    Signed-off-by: Hangyu Hua <hbh25y@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e3850e211df6817e7a6c3999080a8bc4a63092c0
Author: Hangyu Hua <hbh25y@gmail.com>
Date:   Fri Feb 11 12:55:10 2022 +0800

    tipc: fix a bit overflow in tipc_crypto_key_rcv()
    
    [ Upstream commit 143de8d97d79316590475dc2a84513c63c863ddf ]
    
    msg_data_sz return a 32bit value, but size is 16bit. This may lead to a
    bit overflow.
    
    Signed-off-by: Hangyu Hua <hbh25y@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a0f0db8292e6fdb6b467a2270fa88b219ac98fb7
Author: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
Date:   Sun Mar 6 22:57:47 2022 +0100

    tipc: Use netif_rx().
    
    Since commit
       baebdf48c3600 ("net: dev: Makes sure netif_rx() can be invoked in any context.")
    
    the function netif_rx() can be used in preemptible/thread context as
    well as in interrupt context.
    
    Use netif_rx().
    
    Cc: Jon Maloy <jmaloy@redhat.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: tipc-discussion@lists.sourceforge.net
    Signed-off-by: Sebastian Andrzej Siewior <bigeasy@linutronix.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit be4977b847f5d5cedb64d50eaaf2218c3a55a3a3
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Fri Mar 4 03:25:18 2022 +0000

    tipc: fix kernel panic when enabling bearer
    
    When enabling a bearer on a node, a kernel panic is observed:
    
    [    4.498085] RIP: 0010:tipc_mon_prep+0x4e/0x130 [tipc]
    ...
    [    4.520030] Call Trace:
    [    4.520689]  <IRQ>
    [    4.521236]  tipc_link_build_proto_msg+0x375/0x750 [tipc]
    [    4.522654]  tipc_link_build_state_msg+0x48/0xc0 [tipc]
    [    4.524034]  __tipc_node_link_up+0xd7/0x290 [tipc]
    [    4.525292]  tipc_rcv+0x5da/0x730 [tipc]
    [    4.526346]  ? __netif_receive_skb_core+0xb7/0xfc0
    [    4.527601]  tipc_l2_rcv_msg+0x5e/0x90 [tipc]
    [    4.528737]  __netif_receive_skb_list_core+0x20b/0x260
    [    4.530068]  netif_receive_skb_list_internal+0x1bf/0x2e0
    [    4.531450]  ? dev_gro_receive+0x4c2/0x680
    [    4.532512]  napi_complete_done+0x6f/0x180
    [    4.533570]  virtnet_poll+0x29c/0x42e [virtio_net]
    ...
    
    The node in question is receiving activate messages in another
    thread after changing bearer status to allow message sending/
    receiving in current thread:
    
             thread 1           |              thread 2
             --------           |              --------
                                |
    tipc_enable_bearer()        |
      test_and_set_bit_lock()   |
        tipc_bearer_xmit_skb()  |
                                | tipc_l2_rcv_msg()
                                |   tipc_rcv()
                                |     __tipc_node_link_up()
                                |       tipc_link_build_state_msg()
                                |         tipc_link_build_proto_msg()
                                |           tipc_mon_prep()
                                |           {
                                |             ...
                                |             // null-pointer dereference
                                |             u16 gen = mon->dom_gen;
                                |             ...
                                |           }
      // Not being executed yet |
      tipc_mon_create()         |
      {                         |
        ...                     |
        // allocate             |
        mon = kzalloc();        |
        ...                     |
      }                         |
    
    Monitoring pointer in thread 2 is dereferenced before monitoring data
    is allocated in thread 1. This causes kernel panic.
    
    This commit fixes it by allocating the monitoring data before enabling
    the bearer to receive messages.
    
    Fixes: 35c55c9877f8 ("tipc: add neighbor monitoring framework")
    Reported-by: Shuang Li <shuali@redhat.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e6ad72c5ec08c5e652bf171c88677d74b8cdefd9
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Feb 22 16:43:12 2022 +0300

    tipc: Fix end of loop tests for list_for_each_entry()
    
    commit a1f8fec4dac8bc7b172b2bdbd881e015261a6322 upstream.
    
    These tests are supposed to check if the loop exited via a break or not.
    However the tests are wrong because if we did not exit via a break then
    "p" is not a valid pointer.  In that case, it's the equivalent of
    "if (*(u32 *)sr == *last_key) {".  That's going to work most of the time,
    but there is a potential for those to be equal.
    
    Fixes: 1593123a6a49 ("tipc: add name table dump to new netlink api")
    Fixes: 1a1a143daf84 ("tipc: add publication dump to new netlink api")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0a9bc4179c30fded323334be0eab246d118cd351
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Feb 22 16:43:12 2022 +0300

    tipc: Fix end of loop tests for list_for_each_entry()
    
    commit a1f8fec4dac8bc7b172b2bdbd881e015261a6322 upstream.
    
    These tests are supposed to check if the loop exited via a break or not.
    However the tests are wrong because if we did not exit via a break then
    "p" is not a valid pointer.  In that case, it's the equivalent of
    "if (*(u32 *)sr == *last_key) {".  That's going to work most of the time,
    but there is a potential for those to be equal.
    
    Fixes: 1593123a6a49 ("tipc: add name table dump to new netlink api")
    Fixes: 1a1a143daf84 ("tipc: add publication dump to new netlink api")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b692d5dc6f541961379e123e31c4bea8ba0725f1
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Feb 22 16:43:12 2022 +0300

    tipc: Fix end of loop tests for list_for_each_entry()
    
    commit a1f8fec4dac8bc7b172b2bdbd881e015261a6322 upstream.
    
    These tests are supposed to check if the loop exited via a break or not.
    However the tests are wrong because if we did not exit via a break then
    "p" is not a valid pointer.  In that case, it's the equivalent of
    "if (*(u32 *)sr == *last_key) {".  That's going to work most of the time,
    but there is a potential for those to be equal.
    
    Fixes: 1593123a6a49 ("tipc: add name table dump to new netlink api")
    Fixes: 1a1a143daf84 ("tipc: add publication dump to new netlink api")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0240bb276fd6df7329d0222bf2842d25718bdcbb
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Feb 22 16:43:12 2022 +0300

    tipc: Fix end of loop tests for list_for_each_entry()
    
    commit a1f8fec4dac8bc7b172b2bdbd881e015261a6322 upstream.
    
    These tests are supposed to check if the loop exited via a break or not.
    However the tests are wrong because if we did not exit via a break then
    "p" is not a valid pointer.  In that case, it's the equivalent of
    "if (*(u32 *)sr == *last_key) {".  That's going to work most of the time,
    but there is a potential for those to be equal.
    
    Fixes: 1593123a6a49 ("tipc: add name table dump to new netlink api")
    Fixes: 1a1a143daf84 ("tipc: add publication dump to new netlink api")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33f724448e055b615301c039df5638cce458d6ac
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Feb 22 16:43:12 2022 +0300

    tipc: Fix end of loop tests for list_for_each_entry()
    
    commit a1f8fec4dac8bc7b172b2bdbd881e015261a6322 upstream.
    
    These tests are supposed to check if the loop exited via a break or not.
    However the tests are wrong because if we did not exit via a break then
    "p" is not a valid pointer.  In that case, it's the equivalent of
    "if (*(u32 *)sr == *last_key) {".  That's going to work most of the time,
    but there is a potential for those to be equal.
    
    Fixes: 1593123a6a49 ("tipc: add name table dump to new netlink api")
    Fixes: 1a1a143daf84 ("tipc: add publication dump to new netlink api")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a1f8fec4dac8bc7b172b2bdbd881e015261a6322
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Feb 22 16:43:12 2022 +0300

    tipc: Fix end of loop tests for list_for_each_entry()
    
    These tests are supposed to check if the loop exited via a break or not.
    However the tests are wrong because if we did not exit via a break then
    "p" is not a valid pointer.  In that case, it's the equivalent of
    "if (*(u32 *)sr == *last_key) {".  That's going to work most of the time,
    but there is a potential for those to be equal.
    
    Fixes: 1593123a6a49 ("tipc: add name table dump to new netlink api")
    Fixes: 1a1a143daf84 ("tipc: add publication dump to new netlink api")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 934c8c95bfb8a10fc52b70ac8dd654c709e9366c
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Tue Feb 15 21:00:09 2022 -0500

    tipc: fix wrong notification node addresses
    
    commit c08e58438d4a709fb451b6d7d33432cc9907a2a8 upstream.
    
    The previous bug fix had an unfortunate side effect that broke
    distribution of binding table entries between nodes. The updated
    tipc_sock_addr struct is also used further down in the same
    function, and there the old value is still the correct one.
    
    Fixes: 032062f363b4 ("tipc: fix wrong publisher node address in link publications")
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Link: https://lore.kernel.org/r/20220216020009.3404578-1-jmaloy@redhat.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ca941e56f48e41b2fb0d74599bb9b8f1ec0a9323
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Sun Feb 13 20:38:52 2022 -0500

    tipc: fix wrong publisher node address in link publications
    
    commit 032062f363b4bf02b1d547f329aa5d97b6a17410 upstream.
    
    When a link comes up we add its presence to the name table to make it
    possible for users to subscribe for link up/down events. However, after
    a previous call signature change the binding is wrongly published with
    the peer node as publishing node, instead of the own node as it should
    be. This has the effect that the command 'tipc name table show' will
    list the link binding (service type 2) with node scope and a peer node
    as originator, something that obviously is impossible.
    
    We correct this bug here.
    
    Fixes: 50a3499ab853 ("tipc: simplify signature of tipc_namtbl_publish()")
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Link: https://lore.kernel.org/r/20220214013852.2803940-1-jmaloy@redhat.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 84c109620fef864927ee74f8618b295ed22dc8a3
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Tue Feb 15 21:00:09 2022 -0500

    tipc: fix wrong notification node addresses
    
    commit c08e58438d4a709fb451b6d7d33432cc9907a2a8 upstream.
    
    The previous bug fix had an unfortunate side effect that broke
    distribution of binding table entries between nodes. The updated
    tipc_sock_addr struct is also used further down in the same
    function, and there the old value is still the correct one.
    
    Fixes: 032062f363b4 ("tipc: fix wrong publisher node address in link publications")
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Link: https://lore.kernel.org/r/20220216020009.3404578-1-jmaloy@redhat.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1a16f047946b89a75d3d4c2d246f71c13d8131ac
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Sun Feb 13 20:38:52 2022 -0500

    tipc: fix wrong publisher node address in link publications
    
    commit 032062f363b4bf02b1d547f329aa5d97b6a17410 upstream.
    
    When a link comes up we add its presence to the name table to make it
    possible for users to subscribe for link up/down events. However, after
    a previous call signature change the binding is wrongly published with
    the peer node as publishing node, instead of the own node as it should
    be. This has the effect that the command 'tipc name table show' will
    list the link binding (service type 2) with node scope and a peer node
    as originator, something that obviously is impossible.
    
    We correct this bug here.
    
    Fixes: 50a3499ab853 ("tipc: simplify signature of tipc_namtbl_publish()")
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Link: https://lore.kernel.org/r/20220214013852.2803940-1-jmaloy@redhat.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b97cae315cafd7debf3601f88621e2aa8956ef3
Merge: a3580ac9b7a3 a6ab75cec1e4
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Feb 17 11:33:59 2022 -0800

    Merge tag 'net-5.17-rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from Jakub Kicinski:
     "Including fixes from wireless and netfilter.
    
      Current release - regressions:
    
       - dsa: lantiq_gswip: fix use after free in gswip_remove()
    
       - smc: avoid overwriting the copies of clcsock callback functions
    
      Current release - new code bugs:
    
       - iwlwifi:
          - fix use-after-free when no FW is present
          - mei: fix the pskb_may_pull check in ipv4
          - mei: retry mapping the shared area
          - mvm: don't feed the hardware RFKILL into iwlmei
    
      Previous releases - regressions:
    
       - ipv6: mcast: use rcu-safe version of ipv6_get_lladdr()
    
       - tipc: fix wrong publisher node address in link publications
    
       - iwlwifi: mvm: don't send SAR GEO command for 3160 devices, avoid FW
         assertion
    
       - bgmac: make idm and nicpm resource optional again
    
       - atl1c: fix tx timeout after link flap
    
      Previous releases - always broken:
    
       - vsock: remove vsock from connected table when connect is
         interrupted by a signal
    
       - ping: change destination interface checks to match raw sockets
    
       - crypto: af_alg - get rid of alg_memory_allocated to avoid confusing
         semantics (and null-deref) after SO_RESERVE_MEM was added
    
       - ipv6: make exclusive flowlabel checks per-netns
    
       - bonding: force carrier update when releasing slave
    
       - sched: limit TC_ACT_REPEAT loops
    
       - bridge: multicast: notify switchdev driver whenever MC processing
         gets disabled because of max entries reached
    
       - wifi: brcmfmac: fix crash in brcm_alt_fw_path when WLAN not found
    
       - iwlwifi: fix locking when "HW not ready"
    
       - phy: mediatek: remove PHY mode check on MT7531
    
       - dsa: mv88e6xxx: flush switchdev FDB workqueue before removing VLAN
    
       - dsa: lan9303:
          - fix polarity of reset during probe
          - fix accelerated VLAN handling"
    
    * tag 'net-5.17-rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (65 commits)
      bonding: force carrier update when releasing slave
      nfp: flower: netdev offload check for ip6gretap
      ipv6: fix data-race in fib6_info_hw_flags_set / fib6_purge_rt
      ipv4: fix data races in fib_alias_hw_flags_set
      net: dsa: lan9303: add VLAN IDs to master device
      net: dsa: lan9303: handle hwaccel VLAN tags
      vsock: remove vsock from connected table when connect is interrupted by a signal
      Revert "net: ethernet: bgmac: Use devm_platform_ioremap_resource_byname"
      ping: fix the dif and sdif check in ping_lookup
      net: usb: cdc_mbim: avoid altsetting toggling for Telit FN990
      net: sched: limit TC_ACT_REPEAT loops
      tipc: fix wrong notification node addresses
      net: dsa: lantiq_gswip: fix use after free in gswip_remove()
      ipv6: per-netns exclusive flowlabel checks
      net: bridge: multicast: notify switchdev driver whenever MC processing gets disabled
      CDC-NCM: avoid overflow in sanity checking
      mctp: fix use after free
      net: mscc: ocelot: fix use-after-free in ocelot_vlan_del()
      bonding: fix data-races around agg_select_timer
      dpaa2-eth: Initialize mutex used in one step timestamping path
      ...

commit c08e58438d4a709fb451b6d7d33432cc9907a2a8
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Tue Feb 15 21:00:09 2022 -0500

    tipc: fix wrong notification node addresses
    
    The previous bug fix had an unfortunate side effect that broke
    distribution of binding table entries between nodes. The updated
    tipc_sock_addr struct is also used further down in the same
    function, and there the old value is still the correct one.
    
    Fixes: 032062f363b4 ("tipc: fix wrong publisher node address in link publications")
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Link: https://lore.kernel.org/r/20220216020009.3404578-1-jmaloy@redhat.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 7377bdeb324da76bc678b5ccc96bc5b1f9780240
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Tue Feb 8 22:22:37 2022 -0500

    tipc: rate limit warning for received illegal binding update
    
    [ Upstream commit c7223d687758462826a20e9735305d55bb874c70 ]
    
    It would be easy to craft a message containing an illegal binding table
    update operation. This is handled correctly by the code, but the
    corresponding warning printout is not rate limited as is should be.
    We fix this now.
    
    Fixes: b97bf3fd8f6a ("[TIPC] Initial merge")
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 489d9fa78e59712b1219b1b7d58906abf2b007fe
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Tue Feb 8 22:22:37 2022 -0500

    tipc: rate limit warning for received illegal binding update
    
    [ Upstream commit c7223d687758462826a20e9735305d55bb874c70 ]
    
    It would be easy to craft a message containing an illegal binding table
    update operation. This is handled correctly by the code, but the
    corresponding warning printout is not rate limited as is should be.
    We fix this now.
    
    Fixes: b97bf3fd8f6a ("[TIPC] Initial merge")
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 657aea782887f6a55d6e2ad6ce82d8425b2e5bab
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Tue Feb 8 22:22:37 2022 -0500

    tipc: rate limit warning for received illegal binding update
    
    [ Upstream commit c7223d687758462826a20e9735305d55bb874c70 ]
    
    It would be easy to craft a message containing an illegal binding table
    update operation. This is handled correctly by the code, but the
    corresponding warning printout is not rate limited as is should be.
    We fix this now.
    
    Fixes: b97bf3fd8f6a ("[TIPC] Initial merge")
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b3e998a5dc46d0d125ae588f267098df2860d7e0
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Tue Feb 8 22:22:37 2022 -0500

    tipc: rate limit warning for received illegal binding update
    
    [ Upstream commit c7223d687758462826a20e9735305d55bb874c70 ]
    
    It would be easy to craft a message containing an illegal binding table
    update operation. This is handled correctly by the code, but the
    corresponding warning printout is not rate limited as is should be.
    We fix this now.
    
    Fixes: b97bf3fd8f6a ("[TIPC] Initial merge")
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7b4ba5427c4ea716f73af01b0324209909822485
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Tue Feb 8 22:22:37 2022 -0500

    tipc: rate limit warning for received illegal binding update
    
    [ Upstream commit c7223d687758462826a20e9735305d55bb874c70 ]
    
    It would be easy to craft a message containing an illegal binding table
    update operation. This is handled correctly by the code, but the
    corresponding warning printout is not rate limited as is should be.
    We fix this now.
    
    Fixes: b97bf3fd8f6a ("[TIPC] Initial merge")
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cedb7445f4e872bfe50e28254b5e0ef2a720335a
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Tue Feb 8 22:22:37 2022 -0500

    tipc: rate limit warning for received illegal binding update
    
    [ Upstream commit c7223d687758462826a20e9735305d55bb874c70 ]
    
    It would be easy to craft a message containing an illegal binding table
    update operation. This is handled correctly by the code, but the
    corresponding warning printout is not rate limited as is should be.
    We fix this now.
    
    Fixes: b97bf3fd8f6a ("[TIPC] Initial merge")
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9839da923ff9eaaae7cb3fc9d59bf2141cc3e15d
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Tue Feb 8 22:22:37 2022 -0500

    tipc: rate limit warning for received illegal binding update
    
    [ Upstream commit c7223d687758462826a20e9735305d55bb874c70 ]
    
    It would be easy to craft a message containing an illegal binding table
    update operation. This is handled correctly by the code, but the
    corresponding warning printout is not rate limited as is should be.
    We fix this now.
    
    Fixes: b97bf3fd8f6a ("[TIPC] Initial merge")
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 032062f363b4bf02b1d547f329aa5d97b6a17410
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Sun Feb 13 20:38:52 2022 -0500

    tipc: fix wrong publisher node address in link publications
    
    When a link comes up we add its presence to the name table to make it
    possible for users to subscribe for link up/down events. However, after
    a previous call signature change the binding is wrongly published with
    the peer node as publishing node, instead of the own node as it should
    be. This has the effect that the command 'tipc name table show' will
    list the link binding (service type 2) with node scope and a peer node
    as originator, something that obviously is impossible.
    
    We correct this bug here.
    
    Fixes: 50a3499ab853 ("tipc: simplify signature of tipc_namtbl_publish()")
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Link: https://lore.kernel.org/r/20220214013852.2803940-1-jmaloy@redhat.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 143de8d97d79316590475dc2a84513c63c863ddf
Author: Hangyu Hua <hbh25y@gmail.com>
Date:   Fri Feb 11 12:55:10 2022 +0800

    tipc: fix a bit overflow in tipc_crypto_key_rcv()
    
    msg_data_sz return a 32bit value, but size is 16bit. This may lead to a
    bit overflow.
    
    Signed-off-by: Hangyu Hua <hbh25y@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 59ff7514f8c56f166aadca49bcecfa028e0ad50f
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Sat Feb 5 14:11:18 2022 -0500

    tipc: improve size validations for received domain records
    
    commit 9aa422ad326634b76309e8ff342c246800621216 upstream.
    
    The function tipc_mon_rcv() allows a node to receive and process
    domain_record structs from peer nodes to track their views of the
    network topology.
    
    This patch verifies that the number of members in a received domain
    record does not exceed the limit defined by MAX_MON_DOMAIN, something
    that may otherwise lead to a stack overflow.
    
    tipc_mon_rcv() is called from the function tipc_link_proto_rcv(), where
    we are reading a 32 bit message data length field into a uint16.  To
    avert any risk of bit overflow, we add an extra sanity check for this in
    that function.  We cannot see that happen with the current code, but
    future designers being unaware of this risk, may introduce it by
    allowing delivery of very large (> 64k) sk buffers from the bearer
    layer.  This potential problem was identified by Eric Dumazet.
    
    This fixes CVE-2022-0435
    
    Reported-by: Samuel Page <samuel.page@appgate.com>
    Reported-by: Eric Dumazet <edumazet@google.com>
    Fixes: 35c55c9877f8 ("tipc: add neighbor monitoring framework")
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Reviewed-by: Samuel Page <samuel.page@appgate.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f1788616157b0222b0c2153828b475d95e374a7
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Sat Feb 5 14:11:18 2022 -0500

    tipc: improve size validations for received domain records
    
    commit 9aa422ad326634b76309e8ff342c246800621216 upstream.
    
    The function tipc_mon_rcv() allows a node to receive and process
    domain_record structs from peer nodes to track their views of the
    network topology.
    
    This patch verifies that the number of members in a received domain
    record does not exceed the limit defined by MAX_MON_DOMAIN, something
    that may otherwise lead to a stack overflow.
    
    tipc_mon_rcv() is called from the function tipc_link_proto_rcv(), where
    we are reading a 32 bit message data length field into a uint16.  To
    avert any risk of bit overflow, we add an extra sanity check for this in
    that function.  We cannot see that happen with the current code, but
    future designers being unaware of this risk, may introduce it by
    allowing delivery of very large (> 64k) sk buffers from the bearer
    layer.  This potential problem was identified by Eric Dumazet.
    
    This fixes CVE-2022-0435
    
    Reported-by: Samuel Page <samuel.page@appgate.com>
    Reported-by: Eric Dumazet <edumazet@google.com>
    Fixes: 35c55c9877f8 ("tipc: add neighbor monitoring framework")
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Reviewed-by: Samuel Page <samuel.page@appgate.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3c7e5943553594f68bbc070683db6bb6f6e9e78e
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Sat Feb 5 14:11:18 2022 -0500

    tipc: improve size validations for received domain records
    
    commit 9aa422ad326634b76309e8ff342c246800621216 upstream.
    
    The function tipc_mon_rcv() allows a node to receive and process
    domain_record structs from peer nodes to track their views of the
    network topology.
    
    This patch verifies that the number of members in a received domain
    record does not exceed the limit defined by MAX_MON_DOMAIN, something
    that may otherwise lead to a stack overflow.
    
    tipc_mon_rcv() is called from the function tipc_link_proto_rcv(), where
    we are reading a 32 bit message data length field into a uint16.  To
    avert any risk of bit overflow, we add an extra sanity check for this in
    that function.  We cannot see that happen with the current code, but
    future designers being unaware of this risk, may introduce it by
    allowing delivery of very large (> 64k) sk buffers from the bearer
    layer.  This potential problem was identified by Eric Dumazet.
    
    This fixes CVE-2022-0435
    
    Reported-by: Samuel Page <samuel.page@appgate.com>
    Reported-by: Eric Dumazet <edumazet@google.com>
    Fixes: 35c55c9877f8 ("tipc: add neighbor monitoring framework")
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Reviewed-by: Samuel Page <samuel.page@appgate.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d692e3406e052dbf9f6d9da0cba36cb763272529
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Sat Feb 5 14:11:18 2022 -0500

    tipc: improve size validations for received domain records
    
    commit 9aa422ad326634b76309e8ff342c246800621216 upstream.
    
    The function tipc_mon_rcv() allows a node to receive and process
    domain_record structs from peer nodes to track their views of the
    network topology.
    
    This patch verifies that the number of members in a received domain
    record does not exceed the limit defined by MAX_MON_DOMAIN, something
    that may otherwise lead to a stack overflow.
    
    tipc_mon_rcv() is called from the function tipc_link_proto_rcv(), where
    we are reading a 32 bit message data length field into a uint16.  To
    avert any risk of bit overflow, we add an extra sanity check for this in
    that function.  We cannot see that happen with the current code, but
    future designers being unaware of this risk, may introduce it by
    allowing delivery of very large (> 64k) sk buffers from the bearer
    layer.  This potential problem was identified by Eric Dumazet.
    
    This fixes CVE-2022-0435
    
    Reported-by: Samuel Page <samuel.page@appgate.com>
    Reported-by: Eric Dumazet <edumazet@google.com>
    Fixes: 35c55c9877f8 ("tipc: add neighbor monitoring framework")
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Reviewed-by: Samuel Page <samuel.page@appgate.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f1af11edd08dd8376f7a84487cbb0ea8203e3a1d
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Sat Feb 5 14:11:18 2022 -0500

    tipc: improve size validations for received domain records
    
    commit 9aa422ad326634b76309e8ff342c246800621216 upstream.
    
    The function tipc_mon_rcv() allows a node to receive and process
    domain_record structs from peer nodes to track their views of the
    network topology.
    
    This patch verifies that the number of members in a received domain
    record does not exceed the limit defined by MAX_MON_DOMAIN, something
    that may otherwise lead to a stack overflow.
    
    tipc_mon_rcv() is called from the function tipc_link_proto_rcv(), where
    we are reading a 32 bit message data length field into a uint16.  To
    avert any risk of bit overflow, we add an extra sanity check for this in
    that function.  We cannot see that happen with the current code, but
    future designers being unaware of this risk, may introduce it by
    allowing delivery of very large (> 64k) sk buffers from the bearer
    layer.  This potential problem was identified by Eric Dumazet.
    
    This fixes CVE-2022-0435
    
    Reported-by: Samuel Page <samuel.page@appgate.com>
    Reported-by: Eric Dumazet <edumazet@google.com>
    Fixes: 35c55c9877f8 ("tipc: add neighbor monitoring framework")
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Reviewed-by: Samuel Page <samuel.page@appgate.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fde4ddeadd099bf9fbb9ccbee8e1b5c20d530a2d
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Sat Feb 5 14:11:18 2022 -0500

    tipc: improve size validations for received domain records
    
    commit 9aa422ad326634b76309e8ff342c246800621216 upstream.
    
    The function tipc_mon_rcv() allows a node to receive and process
    domain_record structs from peer nodes to track their views of the
    network topology.
    
    This patch verifies that the number of members in a received domain
    record does not exceed the limit defined by MAX_MON_DOMAIN, something
    that may otherwise lead to a stack overflow.
    
    tipc_mon_rcv() is called from the function tipc_link_proto_rcv(), where
    we are reading a 32 bit message data length field into a uint16.  To
    avert any risk of bit overflow, we add an extra sanity check for this in
    that function.  We cannot see that happen with the current code, but
    future designers being unaware of this risk, may introduce it by
    allowing delivery of very large (> 64k) sk buffers from the bearer
    layer.  This potential problem was identified by Eric Dumazet.
    
    This fixes CVE-2022-0435
    
    Reported-by: Samuel Page <samuel.page@appgate.com>
    Reported-by: Eric Dumazet <edumazet@google.com>
    Fixes: 35c55c9877f8 ("tipc: add neighbor monitoring framework")
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Reviewed-by: Samuel Page <samuel.page@appgate.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 175db196e45d6f0e6047eccd09c8ba55465eb131
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Sat Feb 5 14:11:18 2022 -0500

    tipc: improve size validations for received domain records
    
    commit 9aa422ad326634b76309e8ff342c246800621216 upstream.
    
    The function tipc_mon_rcv() allows a node to receive and process
    domain_record structs from peer nodes to track their views of the
    network topology.
    
    This patch verifies that the number of members in a received domain
    record does not exceed the limit defined by MAX_MON_DOMAIN, something
    that may otherwise lead to a stack overflow.
    
    tipc_mon_rcv() is called from the function tipc_link_proto_rcv(), where
    we are reading a 32 bit message data length field into a uint16.  To
    avert any risk of bit overflow, we add an extra sanity check for this in
    that function.  We cannot see that happen with the current code, but
    future designers being unaware of this risk, may introduce it by
    allowing delivery of very large (> 64k) sk buffers from the bearer
    layer.  This potential problem was identified by Eric Dumazet.
    
    This fixes CVE-2022-0435
    
    Reported-by: Samuel Page <samuel.page@appgate.com>
    Reported-by: Eric Dumazet <edumazet@google.com>
    Fixes: 35c55c9877f8 ("tipc: add neighbor monitoring framework")
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Reviewed-by: Samuel Page <samuel.page@appgate.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f1baf68e1383f6ed93eb9cff2866d46562607a43
Merge: 16f7432c884b 51a04ebf2112
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Feb 10 16:01:22 2022 -0800

    Merge tag 'net-5.17-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from Jakub Kicinski:
     "Including fixes from netfilter and can.
    
    Current release - new code bugs:
    
       - sparx5: fix get_stat64 out-of-bound access and crash
    
       - smc: fix netdev ref tracker misuse
    
      Previous releases - regressions:
    
       - eth: ixgbevf: require large buffers for build_skb on 82599VF, avoid
         overflows
    
       - eth: ocelot: fix all IP traffic getting trapped to CPU with PTP
         over IP
    
       - bonding: fix rare link activation misses in 802.3ad mode
    
      Previous releases - always broken:
    
       - tcp: fix tcp sock mem accounting in zero-copy corner cases
    
       - remove the cached dst when uncloning an skb dst and its metadata,
         since we only have one ref it'd lead to an UaF
    
       - netfilter:
          - conntrack: don't refresh sctp entries in closed state
          - conntrack: re-init state for retransmitted syn-ack, avoid
            connection establishment getting stuck with strange stacks
          - ctnetlink: disable helper autoassign, avoid it getting lost
          - nft_payload: don't allow transport header access for fragments
    
       - dsa: fix use of devres for mdio throughout drivers
    
       - eth: amd-xgbe: disable interrupts during pci removal
    
       - eth: dpaa2-eth: unregister netdev before disconnecting the PHY
    
       - eth: ice: fix IPIP and SIT TSO offload"
    
    * tag 'net-5.17-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (53 commits)
      net: dsa: mv88e6xxx: fix use-after-free in mv88e6xxx_mdios_unregister
      net: mscc: ocelot: fix mutex lock error during ethtool stats read
      ice: Avoid RTNL lock when re-creating auxiliary device
      ice: Fix KASAN error in LAG NETDEV_UNREGISTER handler
      ice: fix IPIP and SIT TSO offload
      ice: fix an error code in ice_cfg_phy_fec()
      net: mpls: Fix GCC 12 warning
      dpaa2-eth: unregister the netdev before disconnecting from the PHY
      skbuff: cleanup double word in comment
      net: macb: Align the dma and coherent dma masks
      mptcp: netlink: process IPv6 addrs in creating listening sockets
      selftests: mptcp: add missing join check
      net: usb: qmi_wwan: Add support for Dell DW5829e
      vlan: move dev_put into vlan_dev_uninit
      vlan: introduce vlan_dev_free_egress_priority
      ax25: fix UAF bugs of net_device caused by rebinding operation
      net: dsa: fix panic when DSA master device unbinds on shutdown
      net: amd-xgbe: disable interrupts during pci removal
      tipc: rate limit warning for received illegal binding update
      net: mdio: aspeed: Add missing MODULE_DEVICE_TABLE
      ...

commit 9aa422ad326634b76309e8ff342c246800621216
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Sat Feb 5 14:11:18 2022 -0500

    tipc: improve size validations for received domain records
    
    The function tipc_mon_rcv() allows a node to receive and process
    domain_record structs from peer nodes to track their views of the
    network topology.
    
    This patch verifies that the number of members in a received domain
    record does not exceed the limit defined by MAX_MON_DOMAIN, something
    that may otherwise lead to a stack overflow.
    
    tipc_mon_rcv() is called from the function tipc_link_proto_rcv(), where
    we are reading a 32 bit message data length field into a uint16.  To
    avert any risk of bit overflow, we add an extra sanity check for this in
    that function.  We cannot see that happen with the current code, but
    future designers being unaware of this risk, may introduce it by
    allowing delivery of very large (> 64k) sk buffers from the bearer
    layer.  This potential problem was identified by Eric Dumazet.
    
    This fixes CVE-2022-0435
    
    Reported-by: Samuel Page <samuel.page@appgate.com>
    Reported-by: Eric Dumazet <edumazet@google.com>
    Fixes: 35c55c9877f8 ("tipc: add neighbor monitoring framework")
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Reviewed-by: Samuel Page <samuel.page@appgate.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit c7223d687758462826a20e9735305d55bb874c70
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Tue Feb 8 22:22:37 2022 -0500

    tipc: rate limit warning for received illegal binding update
    
    It would be easy to craft a message containing an illegal binding table
    update operation. This is handled correctly by the code, but the
    corresponding warning printout is not rate limited as is should be.
    We fix this now.
    
    Fixes: b97bf3fd8f6a ("[TIPC] Initial merge")
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5e4eca5d929a168085140fe93b1e8cef841008d5
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Wed Jan 26 11:11:09 2022 -0800

    net: tipc: remove unused static inlines
    
    IIUC the TIPC msg helpers are not meant to provide
    and exhaustive API, so remove the unused ones.
    
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d57da5185defccf383be53f41604fd5f006aba8c
Author: Haimin Zhang <tcs_kernel@tencent.com>
Date:   Fri Dec 31 10:35:23 2021 +0800

    net ticp:fix a kernel-infoleak in __tipc_sendmsg()
    
    commit d6d86830705f173fca6087a3e67ceaf68db80523 upstream.
    
    struct tipc_socket_addr.ref has a 4-byte hole,and __tipc_getname() currently
    copying it to user space,causing kernel-infoleak.
    
    BUG: KMSAN: kernel-infoleak in instrument_copy_to_user include/linux/instrumented.h:121 [inline]
    BUG: KMSAN: kernel-infoleak in instrument_copy_to_user include/linux/instrumented.h:121 [inline] lib/usercopy.c:33
    BUG: KMSAN: kernel-infoleak in _copy_to_user+0x1c9/0x270 lib/usercopy.c:33 lib/usercopy.c:33
     instrument_copy_to_user include/linux/instrumented.h:121 [inline]
     instrument_copy_to_user include/linux/instrumented.h:121 [inline] lib/usercopy.c:33
     _copy_to_user+0x1c9/0x270 lib/usercopy.c:33 lib/usercopy.c:33
     copy_to_user include/linux/uaccess.h:209 [inline]
     copy_to_user include/linux/uaccess.h:209 [inline] net/socket.c:287
     move_addr_to_user+0x3f6/0x600 net/socket.c:287 net/socket.c:287
     __sys_getpeername+0x470/0x6b0 net/socket.c:1987 net/socket.c:1987
     __do_sys_getpeername net/socket.c:1997 [inline]
     __se_sys_getpeername net/socket.c:1994 [inline]
     __do_sys_getpeername net/socket.c:1997 [inline] net/socket.c:1994
     __se_sys_getpeername net/socket.c:1994 [inline] net/socket.c:1994
     __x64_sys_getpeername+0xda/0x120 net/socket.c:1994 net/socket.c:1994
     do_syscall_x64 arch/x86/entry/common.c:51 [inline]
     do_syscall_x64 arch/x86/entry/common.c:51 [inline] arch/x86/entry/common.c:82
     do_syscall_64+0x54/0xd0 arch/x86/entry/common.c:82 arch/x86/entry/common.c:82
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Uninit was stored to memory at:
     tipc_getname+0x575/0x5e0 net/tipc/socket.c:757 net/tipc/socket.c:757
     __sys_getpeername+0x3b3/0x6b0 net/socket.c:1984 net/socket.c:1984
     __do_sys_getpeername net/socket.c:1997 [inline]
     __se_sys_getpeername net/socket.c:1994 [inline]
     __do_sys_getpeername net/socket.c:1997 [inline] net/socket.c:1994
     __se_sys_getpeername net/socket.c:1994 [inline] net/socket.c:1994
     __x64_sys_getpeername+0xda/0x120 net/socket.c:1994 net/socket.c:1994
     do_syscall_x64 arch/x86/entry/common.c:51 [inline]
     do_syscall_x64 arch/x86/entry/common.c:51 [inline] arch/x86/entry/common.c:82
     do_syscall_64+0x54/0xd0 arch/x86/entry/common.c:82 arch/x86/entry/common.c:82
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Uninit was stored to memory at:
     msg_set_word net/tipc/msg.h:212 [inline]
     msg_set_destport net/tipc/msg.h:619 [inline]
     msg_set_word net/tipc/msg.h:212 [inline] net/tipc/socket.c:1486
     msg_set_destport net/tipc/msg.h:619 [inline] net/tipc/socket.c:1486
     __tipc_sendmsg+0x44fa/0x5890 net/tipc/socket.c:1486 net/tipc/socket.c:1486
     tipc_sendmsg+0xeb/0x140 net/tipc/socket.c:1402 net/tipc/socket.c:1402
     sock_sendmsg_nosec net/socket.c:704 [inline]
     sock_sendmsg net/socket.c:724 [inline]
     sock_sendmsg_nosec net/socket.c:704 [inline] net/socket.c:2409
     sock_sendmsg net/socket.c:724 [inline] net/socket.c:2409
     ____sys_sendmsg+0xe11/0x12c0 net/socket.c:2409 net/socket.c:2409
     ___sys_sendmsg net/socket.c:2463 [inline]
     ___sys_sendmsg net/socket.c:2463 [inline] net/socket.c:2492
     __sys_sendmsg+0x704/0x840 net/socket.c:2492 net/socket.c:2492
     __do_sys_sendmsg net/socket.c:2501 [inline]
     __se_sys_sendmsg net/socket.c:2499 [inline]
     __do_sys_sendmsg net/socket.c:2501 [inline] net/socket.c:2499
     __se_sys_sendmsg net/socket.c:2499 [inline] net/socket.c:2499
     __x64_sys_sendmsg+0xe2/0x120 net/socket.c:2499 net/socket.c:2499
     do_syscall_x64 arch/x86/entry/common.c:51 [inline]
     do_syscall_x64 arch/x86/entry/common.c:51 [inline] arch/x86/entry/common.c:82
     do_syscall_64+0x54/0xd0 arch/x86/entry/common.c:82 arch/x86/entry/common.c:82
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Local variable skaddr created at:
     __tipc_sendmsg+0x2d0/0x5890 net/tipc/socket.c:1419 net/tipc/socket.c:1419
     tipc_sendmsg+0xeb/0x140 net/tipc/socket.c:1402 net/tipc/socket.c:1402
    
    Bytes 4-7 of 16 are uninitialized
    Memory access of size 16 starts at ffff888113753e00
    Data copied to user address 0000000020000280
    
    Reported-by: syzbot+cdbd40e0c3ca02cae3b7@syzkaller.appspotmail.com
    Signed-off-by: Haimin Zhang <tcs_kernel@tencent.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Link: https://lore.kernel.org/r/1640918123-14547-1-git-send-email-tcs.kernel@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 75acfdb6fd922598a408a0d864486aeb167c1a97
Merge: 49ef78e59b07 db54c12a3d7e
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Jan 5 14:08:56 2022 -0800

    Merge tag 'net-5.16-final' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from Jakub Kicinski"
     "Networking fixes, including fixes from bpf, and WiFi. One last pull
      request, turns out some of the recent fixes did more harm than good.
    
      Current release - regressions:
    
       - Revert "xsk: Do not sleep in poll() when need_wakeup set", made the
         problem worse
    
       - Revert "net: phy: fixed_phy: Fix NULL vs IS_ERR() checking in
         __fixed_phy_register", broke EPROBE_DEFER handling
    
       - Revert "net: usb: r8152: Add MAC pass-through support for more
         Lenovo Docks", broke setups without a Lenovo dock
    
      Current release - new code bugs:
    
       - selftests: set amt.sh executable
    
      Previous releases - regressions:
    
       - batman-adv: mcast: don't send link-local multicast to mcast routers
    
      Previous releases - always broken:
    
       - ipv4/ipv6: check attribute length for RTA_FLOW / RTA_GATEWAY
    
       - sctp: hold endpoint before calling cb in
         sctp_transport_lookup_process
    
       - mac80211: mesh: embed mesh_paths and mpp_paths into
         ieee80211_if_mesh to avoid complicated handling of sub-object
         allocation failures
    
       - seg6: fix traceroute in the presence of SRv6
    
       - tipc: fix a kernel-infoleak in __tipc_sendmsg()"
    
    * tag 'net-5.16-final' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (36 commits)
      selftests: set amt.sh executable
      Revert "net: usb: r8152: Add MAC passthrough support for more Lenovo Docks"
      sfc: The RX page_ring is optional
      iavf: Fix limit of total number of queues to active queues of VF
      i40e: Fix incorrect netdev's real number of RX/TX queues
      i40e: Fix for displaying message regarding NVM version
      i40e: fix use-after-free in i40e_sync_filters_subtask()
      i40e: Fix to not show opcode msg on unsuccessful VF MAC change
      ieee802154: atusb: fix uninit value in atusb_set_extended_addr
      mac80211: mesh: embedd mesh_paths and mpp_paths into ieee80211_if_mesh
      mac80211: initialize variable have_higher_than_11mbit
      sch_qfq: prevent shift-out-of-bounds in qfq_init_qdisc
      netrom: fix copying in user data in nr_setsockopt
      udp6: Use Segment Routing Header for dest address if present
      icmp: ICMPV6: Examine invoking packet for Segment Route Headers.
      seg6: export get_srh() for ICMP handling
      Revert "net: phy: fixed_phy: Fix NULL vs IS_ERR() checking in __fixed_phy_register"
      ipv6: Do cleanup if attribute validation fails in multipath route
      ipv6: Continue processing multipath route even if gateway attribute is invalid
      net/fsl: Remove leftover definition in xgmac_mdio
      ...

commit d6d86830705f173fca6087a3e67ceaf68db80523
Author: Haimin Zhang <tcs_kernel@tencent.com>
Date:   Fri Dec 31 10:35:23 2021 +0800

    net ticp:fix a kernel-infoleak in __tipc_sendmsg()
    
    struct tipc_socket_addr.ref has a 4-byte hole,and __tipc_getname() currently
    copying it to user space,causing kernel-infoleak.
    
    BUG: KMSAN: kernel-infoleak in instrument_copy_to_user include/linux/instrumented.h:121 [inline]
    BUG: KMSAN: kernel-infoleak in instrument_copy_to_user include/linux/instrumented.h:121 [inline] lib/usercopy.c:33
    BUG: KMSAN: kernel-infoleak in _copy_to_user+0x1c9/0x270 lib/usercopy.c:33 lib/usercopy.c:33
     instrument_copy_to_user include/linux/instrumented.h:121 [inline]
     instrument_copy_to_user include/linux/instrumented.h:121 [inline] lib/usercopy.c:33
     _copy_to_user+0x1c9/0x270 lib/usercopy.c:33 lib/usercopy.c:33
     copy_to_user include/linux/uaccess.h:209 [inline]
     copy_to_user include/linux/uaccess.h:209 [inline] net/socket.c:287
     move_addr_to_user+0x3f6/0x600 net/socket.c:287 net/socket.c:287
     __sys_getpeername+0x470/0x6b0 net/socket.c:1987 net/socket.c:1987
     __do_sys_getpeername net/socket.c:1997 [inline]
     __se_sys_getpeername net/socket.c:1994 [inline]
     __do_sys_getpeername net/socket.c:1997 [inline] net/socket.c:1994
     __se_sys_getpeername net/socket.c:1994 [inline] net/socket.c:1994
     __x64_sys_getpeername+0xda/0x120 net/socket.c:1994 net/socket.c:1994
     do_syscall_x64 arch/x86/entry/common.c:51 [inline]
     do_syscall_x64 arch/x86/entry/common.c:51 [inline] arch/x86/entry/common.c:82
     do_syscall_64+0x54/0xd0 arch/x86/entry/common.c:82 arch/x86/entry/common.c:82
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Uninit was stored to memory at:
     tipc_getname+0x575/0x5e0 net/tipc/socket.c:757 net/tipc/socket.c:757
     __sys_getpeername+0x3b3/0x6b0 net/socket.c:1984 net/socket.c:1984
     __do_sys_getpeername net/socket.c:1997 [inline]
     __se_sys_getpeername net/socket.c:1994 [inline]
     __do_sys_getpeername net/socket.c:1997 [inline] net/socket.c:1994
     __se_sys_getpeername net/socket.c:1994 [inline] net/socket.c:1994
     __x64_sys_getpeername+0xda/0x120 net/socket.c:1994 net/socket.c:1994
     do_syscall_x64 arch/x86/entry/common.c:51 [inline]
     do_syscall_x64 arch/x86/entry/common.c:51 [inline] arch/x86/entry/common.c:82
     do_syscall_64+0x54/0xd0 arch/x86/entry/common.c:82 arch/x86/entry/common.c:82
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Uninit was stored to memory at:
     msg_set_word net/tipc/msg.h:212 [inline]
     msg_set_destport net/tipc/msg.h:619 [inline]
     msg_set_word net/tipc/msg.h:212 [inline] net/tipc/socket.c:1486
     msg_set_destport net/tipc/msg.h:619 [inline] net/tipc/socket.c:1486
     __tipc_sendmsg+0x44fa/0x5890 net/tipc/socket.c:1486 net/tipc/socket.c:1486
     tipc_sendmsg+0xeb/0x140 net/tipc/socket.c:1402 net/tipc/socket.c:1402
     sock_sendmsg_nosec net/socket.c:704 [inline]
     sock_sendmsg net/socket.c:724 [inline]
     sock_sendmsg_nosec net/socket.c:704 [inline] net/socket.c:2409
     sock_sendmsg net/socket.c:724 [inline] net/socket.c:2409
     ____sys_sendmsg+0xe11/0x12c0 net/socket.c:2409 net/socket.c:2409
     ___sys_sendmsg net/socket.c:2463 [inline]
     ___sys_sendmsg net/socket.c:2463 [inline] net/socket.c:2492
     __sys_sendmsg+0x704/0x840 net/socket.c:2492 net/socket.c:2492
     __do_sys_sendmsg net/socket.c:2501 [inline]
     __se_sys_sendmsg net/socket.c:2499 [inline]
     __do_sys_sendmsg net/socket.c:2501 [inline] net/socket.c:2499
     __se_sys_sendmsg net/socket.c:2499 [inline] net/socket.c:2499
     __x64_sys_sendmsg+0xe2/0x120 net/socket.c:2499 net/socket.c:2499
     do_syscall_x64 arch/x86/entry/common.c:51 [inline]
     do_syscall_x64 arch/x86/entry/common.c:51 [inline] arch/x86/entry/common.c:82
     do_syscall_64+0x54/0xd0 arch/x86/entry/common.c:82 arch/x86/entry/common.c:82
     entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Local variable skaddr created at:
     __tipc_sendmsg+0x2d0/0x5890 net/tipc/socket.c:1419 net/tipc/socket.c:1419
     tipc_sendmsg+0xeb/0x140 net/tipc/socket.c:1402 net/tipc/socket.c:1402
    
    Bytes 4-7 of 16 are uninitialized
    Memory access of size 16 starts at ffff888113753e00
    Data copied to user address 0000000020000280
    
    Reported-by: syzbot+cdbd40e0c3ca02cae3b7@syzkaller.appspotmail.com
    Signed-off-by: Haimin Zhang <tcs_kernel@tencent.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Link: https://lore.kernel.org/r/1640918123-14547-1-git-send-email-tcs.kernel@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 76657eaef4a759e695eb1883d4f1d9af1e4ff9a8
Merge: 996a18eb796a 391e5975c020
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Dec 23 10:45:55 2021 -0800

    Merge tag 'net-5.16-rc7' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from Jakub Kicinski:
     "Including fixes from netfilter.
    
      Current release - regressions:
    
       - revert "tipc: use consistent GFP flags"
    
      Previous releases - regressions:
    
       - igb: fix deadlock caused by taking RTNL in runtime resume path
    
       - accept UFOv6 packages in virtio_net_hdr_to_skb
    
       - netfilter: fix regression in looped (broad|multi)cast's MAC
         handling
    
       - bridge: fix ioctl old_deviceless bridge argument
    
       - ice: xsk: do not clear status_error0 for ntu + nb_buffs descriptor,
         avoid stalls when multiple sockets use an interface
    
      Previous releases - always broken:
    
       - inet: fully convert sk->sk_rx_dst to RCU rules
    
       - veth: ensure skb entering GRO are not cloned
    
       - sched: fix zone matching for invalid conntrack state
    
       - bonding: fix ad_actor_system option setting to default
    
       - nf_tables: fix use-after-free in nft_set_catchall_destroy()
    
       - lantiq_xrx200: increase buffer reservation to avoid mem corruption
    
       - ice: xsk: avoid leaking app buffers during clean up
    
       - tun: avoid double free in tun_free_netdev"
    
    * tag 'net-5.16-rc7' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (45 commits)
      net: stmmac: dwmac-visconti: Fix value of ETHER_CLK_SEL_FREQ_SEL_2P5M
      r8152: sync ocp base
      r8152: fix the force speed doesn't work for RTL8156
      net: bridge: fix ioctl old_deviceless bridge argument
      net: stmmac: ptp: fix potentially overflowing expression
      net: dsa: tag_ocelot: use traffic class to map priority on injected header
      veth: ensure skb entering GRO are not cloned.
      asix: fix wrong return value in asix_check_host_enable()
      asix: fix uninit-value in asix_mdio_read()
      sfc: falcon: Check null pointer of rx_queue->page_ring
      sfc: Check null pointer of rx_queue->page_ring
      net: ks8851: Check for error irq
      drivers: net: smc911x: Check for error irq
      fjes: Check for error irq
      bonding: fix ad_actor_system option setting to default
      igb: fix deadlock caused by taking RTNL in RPM resume path
      gve: Correct order of processing device options
      net: skip virtio_net_hdr_set_proto if protocol already set
      net: accept UFOv6 packages in virtio_net_hdr_to_skb
      docs: networking: replace skb_hwtstamp_tx with skb_tstamp_tx
      ...

commit f845fe5819efc4111c456c102f15db6d9ed3406e
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Fri Dec 17 10:00:59 2021 +0700

    Revert "tipc: use consistent GFP flags"
    
    This reverts commit 86c3a3e964d910a62eeb277d60b2a60ebefa9feb.
    
    The tipc_aead_init() function can be calling from an interrupt routine.
    This allocation might sleep with GFP_KERNEL flag, hence the following BUG
    is reported.
    
    [   17.657509] BUG: sleeping function called from invalid context at include/linux/sched/mm.h:230
    [   17.660916] in_atomic(): 1, irqs_disabled(): 0, non_block: 0, pid: 0, name: swapper/3
    [   17.664093] preempt_count: 302, expected: 0
    [   17.665619] RCU nest depth: 2, expected: 0
    [   17.667163] Preemption disabled at:
    [   17.667165] [<0000000000000000>] 0x0
    [   17.669753] CPU: 3 PID: 0 Comm: swapper/3 Kdump: loaded Tainted: G        W         5.16.0-rc4+ #1
    [   17.673006] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-1 04/01/2014
    [   17.675540] Call Trace:
    [   17.676285]  <IRQ>
    [   17.676913]  dump_stack_lvl+0x34/0x44
    [   17.678033]  __might_resched.cold+0xd6/0x10f
    [   17.679311]  kmem_cache_alloc_trace+0x14d/0x220
    [   17.680663]  tipc_crypto_start+0x4a/0x2b0 [tipc]
    [   17.682146]  ? kmem_cache_alloc_trace+0xd3/0x220
    [   17.683545]  tipc_node_create+0x2f0/0x790 [tipc]
    [   17.684956]  tipc_node_check_dest+0x72/0x680 [tipc]
    [   17.686706]  ? ___cache_free+0x31/0x350
    [   17.688008]  ? skb_release_data+0x128/0x140
    [   17.689431]  tipc_disc_rcv+0x479/0x510 [tipc]
    [   17.690904]  tipc_rcv+0x71c/0x730 [tipc]
    [   17.692219]  ? __netif_receive_skb_core+0xb7/0xf60
    [   17.693856]  tipc_l2_rcv_msg+0x5e/0x90 [tipc]
    [   17.695333]  __netif_receive_skb_list_core+0x20b/0x260
    [   17.697072]  netif_receive_skb_list_internal+0x1bf/0x2e0
    [   17.698870]  ? dev_gro_receive+0x4c2/0x680
    [   17.700255]  napi_complete_done+0x6f/0x180
    [   17.701657]  virtnet_poll+0x29c/0x42e [virtio_net]
    [   17.703262]  __napi_poll+0x2c/0x170
    [   17.704429]  net_rx_action+0x22f/0x280
    [   17.705706]  __do_softirq+0xfd/0x30a
    [   17.706921]  common_interrupt+0xa4/0xc0
    [   17.708206]  </IRQ>
    [   17.708922]  <TASK>
    [   17.709651]  asm_common_interrupt+0x1e/0x40
    [   17.711078] RIP: 0010:default_idle+0x18/0x20
    
    Fixes: 86c3a3e964d9 ("tipc: use consistent GFP flags")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Link: https://lore.kernel.org/r/20211217030059.5947-1-hoang.h.le@dektech.com.au
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit f1d9268e061863ead77b07f5a6807d063e28a1c2
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Dec 14 07:09:33 2021 -0800

    net: add net device refcount tracker to struct packet_type
    
    Most notable changes are in af_packet, tipc ones are trivial.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Jon Maloy <jmaloy@redhat.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6180c780e64ceb8dd23345b586dfa70c0a1536ee
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Dec 10 13:50:40 2021 -0500

    tipc: discard MSG_CRYPTO msgs when key_exchange_enabled is not set
    
    When key_exchange is disabled, there is no reason to accept MSG_CRYPTO
    msgs if it doesn't send MSG_CRYPTO msgs.
    
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a7d91625863d4ffed63b993b5e6dc1298b6430c9
Author: Tadeusz Struk <tadeusz.struk@linaro.org>
Date:   Mon Nov 15 08:01:43 2021 -0800

    tipc: check for null after calling kmemdup
    
    commit 3e6db079751afd527bf3db32314ae938dc571916 upstream.
    
    kmemdup can return a null pointer so need to check for it, otherwise
    the null key will be dereferenced later in tipc_crypto_key_xmit as
    can be seen in the trace [1].
    
    Cc: tipc-discussion@lists.sourceforge.net
    Cc: stable@vger.kernel.org # 5.15, 5.14, 5.10
    
    [1] https://syzkaller.appspot.com/bug?id=bca180abb29567b189efdbdb34cbf7ba851c2a58
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Tadeusz Struk <tadeusz.struk@linaro.org>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Link: https://lore.kernel.org/r/20211115160143.5099-1-tadeusz.struk@linaro.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9c3c2ef6ca2618c64f925b28a9d31a0d1212cd15
Author: Xin Long <lucien.xin@gmail.com>
Date:   Mon Nov 15 07:45:24 2021 -0500

    tipc: only accept encrypted MSG_CRYPTO msgs
    
    [ Upstream commit 271351d255b09e39c7f6437738cba595f9b235be ]
    
    The MSG_CRYPTO msgs are always encrypted and sent to other nodes
    for keys' deployment. But when receiving in peers, if those nodes
    do not validate it and make sure it's encrypted, one could craft
    a malicious MSG_CRYPTO msg to deploy its key with no need to know
    other nodes' keys.
    
    This patch is to do that by checking TIPC_SKB_CB(skb)->decrypted
    and discard it if this packet never got decrypted.
    
    Note that this is also a supplementary fix to CVE-2021-43267 that
    can be triggered by an unencrypted malicious MSG_CRYPTO msg.
    
    Fixes: 1ef6f7c9390f ("tipc: add automatic session key exchange")
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0c51dffcc8a2821cb18ef6fdf5b02ea891b850c4
Author: Xin Long <lucien.xin@gmail.com>
Date:   Wed Nov 24 12:11:12 2021 -0500

    tipc: delete the unlikely branch in tipc_aead_encrypt
    
    When a skb comes to tipc_aead_encrypt(), it's always linear. The
    unlikely check 'skb_cloned(skb) && tailen <= skb_tailroom(skb)'
    can completely be taken care of in skb_cow_data() by the code
    in branch "if (!skb_has_frag_list())".
    
    Also, remove the 'TODO:' annotation, as the pages in skbs are not
    writable, see more on commit 3cf4375a0904 ("tipc: do not write
    skb_shinfo frags when doing decrytion").
    
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Link: https://lore.kernel.org/r/47a478da0b6095b76e3cbe7a75cbd25d9da1df9a.1637773872.git.lucien.xin@gmail.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 9404c4145542c23019a80ab1bb2ecf73cd057b10
Author: Tadeusz Struk <tadeusz.struk@linaro.org>
Date:   Mon Nov 15 08:01:43 2021 -0800

    tipc: check for null after calling kmemdup
    
    commit 3e6db079751afd527bf3db32314ae938dc571916 upstream.
    
    kmemdup can return a null pointer so need to check for it, otherwise
    the null key will be dereferenced later in tipc_crypto_key_xmit as
    can be seen in the trace [1].
    
    Cc: tipc-discussion@lists.sourceforge.net
    Cc: stable@vger.kernel.org # 5.15, 5.14, 5.10
    
    [1] https://syzkaller.appspot.com/bug?id=bca180abb29567b189efdbdb34cbf7ba851c2a58
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Tadeusz Struk <tadeusz.struk@linaro.org>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Link: https://lore.kernel.org/r/20211115160143.5099-1-tadeusz.struk@linaro.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 95fe8904bcd6f0dab210d3deb985a90bb4705069
Author: Xin Long <lucien.xin@gmail.com>
Date:   Mon Nov 15 07:45:24 2021 -0500

    tipc: only accept encrypted MSG_CRYPTO msgs
    
    [ Upstream commit 271351d255b09e39c7f6437738cba595f9b235be ]
    
    The MSG_CRYPTO msgs are always encrypted and sent to other nodes
    for keys' deployment. But when receiving in peers, if those nodes
    do not validate it and make sure it's encrypted, one could craft
    a malicious MSG_CRYPTO msg to deploy its key with no need to know
    other nodes' keys.
    
    This patch is to do that by checking TIPC_SKB_CB(skb)->decrypted
    and discard it if this packet never got decrypted.
    
    Note that this is also a supplementary fix to CVE-2021-43267 that
    can be triggered by an unencrypted malicious MSG_CRYPTO msg.
    
    Fixes: 1ef6f7c9390f ("tipc: add automatic session key exchange")
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8d0112ac6fd001f95aabb084ec2ccaa3637bc344
Merge: 6fdf886424cf c7521d3aa2fa
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Nov 18 12:54:24 2021 -0800

    Merge tag 'net-5.16-rc2' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from Jakub Kicinski:
     "Including fixes from bpf, mac80211.
    
      Current release - regressions:
    
       - devlink: don't throw an error if flash notification sent before
         devlink visible
    
       - page_pool: Revert "page_pool: disable dma mapping support...",
         turns out there are active arches who need it
    
      Current release - new code bugs:
    
       - amt: cancel delayed_work synchronously in amt_fini()
    
      Previous releases - regressions:
    
       - xsk: fix crash on double free in buffer pool
    
       - bpf: fix inner map state pruning regression causing program
         rejections
    
       - mac80211: drop check for DONT_REORDER in __ieee80211_select_queue,
         preventing mis-selecting the best effort queue
    
       - mac80211: do not access the IV when it was stripped
    
       - mac80211: fix radiotap header generation, off-by-one
    
       - nl80211: fix getting radio statistics in survey dump
    
       - e100: fix device suspend/resume
    
      Previous releases - always broken:
    
       - tcp: fix uninitialized access in skb frags array for Rx 0cp
    
       - bpf: fix toctou on read-only map's constant scalar tracking
    
       - bpf: forbid bpf_ktime_get_coarse_ns and bpf_timer_* in tracing
         progs
    
       - tipc: only accept encrypted MSG_CRYPTO msgs
    
       - smc: transfer remaining wait queue entries during fallback, fix
         missing wake ups
    
       - udp: validate checksum in udp_read_sock() (when sockmap is used)
    
       - sched: act_mirred: drop dst for the direction from egress to
         ingress
    
       - virtio_net_hdr_to_skb: count transport header in UFO, prevent
         allowing bad skbs into the stack
    
       - nfc: reorder the logic in nfc_{un,}register_device, fix unregister
    
       - ipsec: check return value of ipv6_skip_exthdr
    
       - usb: r8152: add MAC passthrough support for more Lenovo Docks"
    
    * tag 'net-5.16-rc2' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (96 commits)
      ptp: ocp: Fix a couple NULL vs IS_ERR() checks
      net: ethernet: dec: tulip: de4x5: fix possible array overflows in type3_infoblock()
      net: tulip: de4x5: fix the problem that the array 'lp->phy[8]' may be out of bound
      ipv6: check return value of ipv6_skip_exthdr
      e100: fix device suspend/resume
      devlink: Don't throw an error if flash notification sent before devlink visible
      page_pool: Revert "page_pool: disable dma mapping support..."
      ethernet: hisilicon: hns: hns_dsaf_misc: fix a possible array overflow in hns_dsaf_ge_srst_by_port()
      octeontx2-af: debugfs: don't corrupt user memory
      NFC: add NCI_UNREG flag to eliminate the race
      NFC: reorder the logic in nfc_{un,}register_device
      NFC: reorganize the functions in nci_request
      tipc: check for null after calling kmemdup
      i40e: Fix display error code in dmesg
      i40e: Fix creation of first queue by omitting it if is not power of two
      i40e: Fix warning message and call stack during rmmod i40e driver
      i40e: Fix ping is lost after configuring ADq on VF
      i40e: Fix changing previously set num_queue_pairs for PFs
      i40e: Fix NULL ptr dereference on VSI filter sync
      i40e: Fix correct max_pkt_size on VF RX queue
      ...

commit 3e6db079751afd527bf3db32314ae938dc571916
Author: Tadeusz Struk <tadeusz.struk@linaro.org>
Date:   Mon Nov 15 08:01:43 2021 -0800

    tipc: check for null after calling kmemdup
    
    kmemdup can return a null pointer so need to check for it, otherwise
    the null key will be dereferenced later in tipc_crypto_key_xmit as
    can be seen in the trace [1].
    
    Cc: tipc-discussion@lists.sourceforge.net
    Cc: stable@vger.kernel.org # 5.15, 5.14, 5.10
    
    [1] https://syzkaller.appspot.com/bug?id=bca180abb29567b189efdbdb34cbf7ba851c2a58
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Tadeusz Struk <tadeusz.struk@linaro.org>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Link: https://lore.kernel.org/r/20211115160143.5099-1-tadeusz.struk@linaro.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 271351d255b09e39c7f6437738cba595f9b235be
Author: Xin Long <lucien.xin@gmail.com>
Date:   Mon Nov 15 07:45:24 2021 -0500

    tipc: only accept encrypted MSG_CRYPTO msgs
    
    The MSG_CRYPTO msgs are always encrypted and sent to other nodes
    for keys' deployment. But when receiving in peers, if those nodes
    do not validate it and make sure it's encrypted, one could craft
    a malicious MSG_CRYPTO msg to deploy its key with no need to know
    other nodes' keys.
    
    This patch is to do that by checking TIPC_SKB_CB(skb)->decrypted
    and discard it if this packet never got decrypted.
    
    Note that this is also a supplementary fix to CVE-2021-43267 that
    can be triggered by an unencrypted malicious MSG_CRYPTO msg.
    
    Fixes: 1ef6f7c9390f ("tipc: add automatic session key exchange")
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 86c3a3e964d910a62eeb277d60b2a60ebefa9feb
Author: Tadeusz Struk <tadeusz.struk@linaro.org>
Date:   Thu Nov 11 12:59:16 2021 -0800

    tipc: use consistent GFP flags
    
    Some functions, like tipc_crypto_start use inconsisten GFP flags
    when allocating memory. The mentioned function use GFP_ATOMIC to
    to alloc a crypto instance, and then calls alloc_ordered_workqueue()
    which allocates memory with GFP_KERNEL. tipc_aead_init() function
    even uses GFP_KERNEL and GFP_ATOMIC interchangeably.
    No doc comment specifies what context a function is designed to
    work in, but the flags should at least be consistent within a function.
    
    Cc: Jon Maloy <jmaloy@redhat.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Jakub Kicinski <kuba@kernel.org>
    Cc: netdev@vger.kernel.org
    Cc: tipc-discussion@lists.sourceforge.net
    Cc: linux-kernel@vger.kernel.org
    
    Signed-off-by: Tadeusz Struk <tadeusz.struk@linaro.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e029c9828c5b503b11a609fcc7c5840de2db3fb4
Author: Max VA <maxv@sentinelone.com>
Date:   Mon Oct 25 17:31:53 2021 +0200

    tipc: fix size validations for the MSG_CRYPTO type
    
    commit fa40d9734a57bcbfa79a280189799f76c88f7bb0 upstream.
    
    The function tipc_crypto_key_rcv is used to parse MSG_CRYPTO messages
    to receive keys from other nodes in the cluster in order to decrypt any
    further messages from them.
    This patch verifies that any supplied sizes in the message body are
    valid for the received message.
    
    Fixes: 1ef6f7c9390f ("tipc: add automatic session key exchange")
    Signed-off-by: Max VA <maxv@sentinelone.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b1b3e086b0af2c2faa9938c4db956fe6ce5c965
Author: Max VA <maxv@sentinelone.com>
Date:   Mon Oct 25 17:31:53 2021 +0200

    tipc: fix size validations for the MSG_CRYPTO type
    
    commit fa40d9734a57bcbfa79a280189799f76c88f7bb0 upstream.
    
    The function tipc_crypto_key_rcv is used to parse MSG_CRYPTO messages
    to receive keys from other nodes in the cluster in order to decrypt any
    further messages from them.
    This patch verifies that any supplied sizes in the message body are
    valid for the received message.
    
    Fixes: 1ef6f7c9390f ("tipc: add automatic session key exchange")
    Signed-off-by: Max VA <maxv@sentinelone.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 411a44c24a561e449b592ff631b7ae321f1eb559
Merge: 4fb7d85b2ebf 35392da51b1a
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Oct 28 10:17:31 2021 -0700

    Merge tag 'net-5.15-rc8' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from Jakub Kicinski:
     "Including fixes from WiFi (mac80211), and BPF.
    
      Current release - regressions:
    
       - skb_expand_head: adjust skb->truesize to fix socket memory
         accounting
    
       - mptcp: fix corrupt receiver key in MPC + data + checksum
    
      Previous releases - regressions:
    
       - multicast: calculate csum of looped-back and forwarded packets
    
       - cgroup: fix memory leak caused by missing cgroup_bpf_offline
    
       - cfg80211: fix management registrations locking, prevent list
         corruption
    
       - cfg80211: correct false positive in bridge/4addr mode check
    
       - tcp_bpf: fix race in the tcp_bpf_send_verdict resulting in reusing
         previous verdict
    
      Previous releases - always broken:
    
       - sctp: enhancements for the verification tag, prevent attackers from
         killing SCTP sessions
    
       - tipc: fix size validations for the MSG_CRYPTO type
    
       - mac80211: mesh: fix HE operation element length check, prevent out
         of bound access
    
       - tls: fix sign of socket errors, prevent positive error codes being
         reported from read()/write()
    
       - cfg80211: scan: extend RCU protection in
         cfg80211_add_nontrans_list()
    
       - implement ->sock_is_readable() for UDP and AF_UNIX, fix poll() for
         sockets in a BPF sockmap
    
       - bpf: fix potential race in tail call compatibility check resulting
         in two operations which would make the map incompatible succeeding
    
       - bpf: prevent increasing bpf_jit_limit above max
    
       - bpf: fix error usage of map_fd and fdget() in generic batch update
    
       - phy: ethtool: lock the phy for consistency of results
    
       - prevent infinite while loop in skb_tx_hash() when Tx races with
         driver reconfiguring the queue <> traffic class mapping
    
       - usbnet: fixes for bad HW conjured by syzbot
    
       - xen: stop tx queues during live migration, prevent UAF
    
       - net-sysfs: initialize uid and gid before calling
         net_ns_get_ownership
    
       - mlxsw: prevent Rx stalls under memory pressure"
    
    * tag 'net-5.15-rc8' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (67 commits)
      Revert "net: hns3: fix pause config problem after autoneg disabled"
      mptcp: fix corrupt receiver key in MPC + data + checksum
      riscv, bpf: Fix potential NULL dereference
      octeontx2-af: Fix possible null pointer dereference.
      octeontx2-af: Display all enabled PF VF rsrc_alloc entries.
      octeontx2-af: Check whether ipolicers exists
      net: ethernet: microchip: lan743x: Fix skb allocation failure
      net/tls: Fix flipped sign in async_wait.err assignment
      net/tls: Fix flipped sign in tls_err_abort() calls
      net/smc: Correct spelling mistake to TCPF_SYN_RECV
      net/smc: Fix smc_link->llc_testlink_time overflow
      nfp: bpf: relax prog rejection for mtu check through max_pkt_offset
      vmxnet3: do not stop tx queues after netif_device_detach()
      r8169: Add device 10ec:8162 to driver r8169
      ptp: Document the PTP_CLK_MAGIC ioctl number
      usbnet: fix error return code in usbnet_probe()
      net: hns3: adjust string spaces of some parameters of tx bd info in debugfs
      net: hns3: expand buffer len for some debugfs command
      net: hns3: add more string spaces for dumping packets number of queue info in debugfs
      net: hns3: fix data endian problem of some functions of debugfs
      ...

commit fa40d9734a57bcbfa79a280189799f76c88f7bb0
Author: Max VA <maxv@sentinelone.com>
Date:   Mon Oct 25 17:31:53 2021 +0200

    tipc: fix size validations for the MSG_CRYPTO type
    
    The function tipc_crypto_key_rcv is used to parse MSG_CRYPTO messages
    to receive keys from other nodes in the cluster in order to decrypt any
    further messages from them.
    This patch verifies that any supplied sizes in the message body are
    valid for the received message.
    
    Fixes: 1ef6f7c9390f ("tipc: add automatic session key exchange")
    Signed-off-by: Max VA <maxv@sentinelone.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6cf862807234fa8d7c91a3a2d327a87471b9adbd
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Tue Oct 12 08:58:39 2021 -0700

    tipc: constify dev_addr passing
    
    In preparation for netdev->dev_addr being constant
    make all relevant arguments in tipc constant.
    
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 2926d3827105969d9939a9ba3ef0a9432b8c8e89
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Mon Sep 13 16:28:52 2021 +0700

    tipc: increase timeout in tipc_sk_enqueue()
    
    commit f4bb62e64c88c93060c051195d3bbba804e56945 upstream.
    
    In tipc_sk_enqueue() we use hardcoded 2 jiffies to extract
    socket buffer from generic queue to particular socket.
    The 2 jiffies is too short in case there are other high priority
    tasks get CPU cycles for multiple jiffies update. As result, no
    buffer could be enqueued to particular socket.
    
    To solve this, we switch to use constant timeout 20msecs.
    Then, the function will be expired between 2 jiffies (CONFIG_100HZ)
    and 20 jiffies (CONFIG_1000HZ).
    
    Fixes: c637c1035534 ("tipc: resolve race problem at unicast message reception")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba099fe50c0aeb682382facbefc5d6aaa83e7226
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Jul 23 13:25:36 2021 -0400

    tipc: fix an use-after-free issue in tipc_recvmsg
    
    commit cc19862ffe454a5b632ca202e5a51bfec9f89fd2 upstream.
    
    syzbot reported an use-after-free crash:
    
      BUG: KASAN: use-after-free in tipc_recvmsg+0xf77/0xf90 net/tipc/socket.c:1979
      Call Trace:
       tipc_recvmsg+0xf77/0xf90 net/tipc/socket.c:1979
       sock_recvmsg_nosec net/socket.c:943 [inline]
       sock_recvmsg net/socket.c:961 [inline]
       sock_recvmsg+0xca/0x110 net/socket.c:957
       tipc_conn_rcv_from_sock+0x162/0x2f0 net/tipc/topsrv.c:398
       tipc_conn_recv_work+0xeb/0x190 net/tipc/topsrv.c:421
       process_one_work+0x98d/0x1630 kernel/workqueue.c:2276
       worker_thread+0x658/0x11f0 kernel/workqueue.c:2422
    
    As Hoang pointed out, it was caused by skb_cb->bytes_read still accessed
    after calling tsk_advance_rx_queue() to free the skb in tipc_recvmsg().
    
    This patch is to fix it by accessing skb_cb->bytes_read earlier than
    calling tsk_advance_rx_queue().
    
    Fixes: f4919ff59c28 ("tipc: keep the skb in rcv queue until the whole data is read")
    Reported-by: syzbot+e6741b97d5552f97c24d@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd9ed47fe6be437bccab7afb396a270b6c79e499
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Mon Sep 13 16:28:52 2021 +0700

    tipc: increase timeout in tipc_sk_enqueue()
    
    commit f4bb62e64c88c93060c051195d3bbba804e56945 upstream.
    
    In tipc_sk_enqueue() we use hardcoded 2 jiffies to extract
    socket buffer from generic queue to particular socket.
    The 2 jiffies is too short in case there are other high priority
    tasks get CPU cycles for multiple jiffies update. As result, no
    buffer could be enqueued to particular socket.
    
    To solve this, we switch to use constant timeout 20msecs.
    Then, the function will be expired between 2 jiffies (CONFIG_100HZ)
    and 20 jiffies (CONFIG_1000HZ).
    
    Fixes: c637c1035534 ("tipc: resolve race problem at unicast message reception")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ee3ffd56b40ea6e5128502d03b49ffb53a09c7f6
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Jul 23 13:25:36 2021 -0400

    tipc: fix an use-after-free issue in tipc_recvmsg
    
    commit cc19862ffe454a5b632ca202e5a51bfec9f89fd2 upstream.
    
    syzbot reported an use-after-free crash:
    
      BUG: KASAN: use-after-free in tipc_recvmsg+0xf77/0xf90 net/tipc/socket.c:1979
      Call Trace:
       tipc_recvmsg+0xf77/0xf90 net/tipc/socket.c:1979
       sock_recvmsg_nosec net/socket.c:943 [inline]
       sock_recvmsg net/socket.c:961 [inline]
       sock_recvmsg+0xca/0x110 net/socket.c:957
       tipc_conn_rcv_from_sock+0x162/0x2f0 net/tipc/topsrv.c:398
       tipc_conn_recv_work+0xeb/0x190 net/tipc/topsrv.c:421
       process_one_work+0x98d/0x1630 kernel/workqueue.c:2276
       worker_thread+0x658/0x11f0 kernel/workqueue.c:2422
    
    As Hoang pointed out, it was caused by skb_cb->bytes_read still accessed
    after calling tsk_advance_rx_queue() to free the skb in tipc_recvmsg().
    
    This patch is to fix it by accessing skb_cb->bytes_read earlier than
    calling tsk_advance_rx_queue().
    
    Fixes: f4919ff59c28 ("tipc: keep the skb in rcv queue until the whole data is read")
    Reported-by: syzbot+e6741b97d5552f97c24d@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6808e70a77e9cd4fb564118069a2e573d67d8f74
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Mon Sep 13 16:28:52 2021 +0700

    tipc: increase timeout in tipc_sk_enqueue()
    
    commit f4bb62e64c88c93060c051195d3bbba804e56945 upstream.
    
    In tipc_sk_enqueue() we use hardcoded 2 jiffies to extract
    socket buffer from generic queue to particular socket.
    The 2 jiffies is too short in case there are other high priority
    tasks get CPU cycles for multiple jiffies update. As result, no
    buffer could be enqueued to particular socket.
    
    To solve this, we switch to use constant timeout 20msecs.
    Then, the function will be expired between 2 jiffies (CONFIG_100HZ)
    and 20 jiffies (CONFIG_1000HZ).
    
    Fixes: c637c1035534 ("tipc: resolve race problem at unicast message reception")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 79ab38864d5ea49f46c771be0d3f4db3231e37d2
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Jul 23 13:25:36 2021 -0400

    tipc: fix an use-after-free issue in tipc_recvmsg
    
    commit cc19862ffe454a5b632ca202e5a51bfec9f89fd2 upstream.
    
    syzbot reported an use-after-free crash:
    
      BUG: KASAN: use-after-free in tipc_recvmsg+0xf77/0xf90 net/tipc/socket.c:1979
      Call Trace:
       tipc_recvmsg+0xf77/0xf90 net/tipc/socket.c:1979
       sock_recvmsg_nosec net/socket.c:943 [inline]
       sock_recvmsg net/socket.c:961 [inline]
       sock_recvmsg+0xca/0x110 net/socket.c:957
       tipc_conn_rcv_from_sock+0x162/0x2f0 net/tipc/topsrv.c:398
       tipc_conn_recv_work+0xeb/0x190 net/tipc/topsrv.c:421
       process_one_work+0x98d/0x1630 kernel/workqueue.c:2276
       worker_thread+0x658/0x11f0 kernel/workqueue.c:2422
    
    As Hoang pointed out, it was caused by skb_cb->bytes_read still accessed
    after calling tsk_advance_rx_queue() to free the skb in tipc_recvmsg().
    
    This patch is to fix it by accessing skb_cb->bytes_read earlier than
    calling tsk_advance_rx_queue().
    
    Fixes: f4919ff59c28 ("tipc: keep the skb in rcv queue until the whole data is read")
    Reported-by: syzbot+e6741b97d5552f97c24d@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0de0c167392785d25f31a7a3666bd1abbf1fd46c
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Jul 16 17:44:07 2021 -0400

    tipc: keep the skb in rcv queue until the whole data is read
    
    [ Upstream commit f4919ff59c2828064b4156e3c3600a169909bcf4 ]
    
    Currently, when userspace reads a datagram with a buffer that is
    smaller than this datagram, the data will be truncated and only
    part of it can be received by users. It doesn't seem right that
    users don't know the datagram size and have to use a huge buffer
    to read it to avoid the truncation.
    
    This patch to fix it by keeping the skb in rcv queue until the
    whole data is read by users. Only the last msg of the datagram
    will be marked with MSG_EOR, just as TCP/SCTP does.
    
    Note that this will work as above only when MSG_EOR is set in the
    flags parameter of recvmsg(), so that it won't break any old user
    applications.
    
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit df957462980e7a68ccc389ccee9c2de72e973c43
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Mon Sep 13 16:28:52 2021 +0700

    tipc: increase timeout in tipc_sk_enqueue()
    
    commit f4bb62e64c88c93060c051195d3bbba804e56945 upstream.
    
    In tipc_sk_enqueue() we use hardcoded 2 jiffies to extract
    socket buffer from generic queue to particular socket.
    The 2 jiffies is too short in case there are other high priority
    tasks get CPU cycles for multiple jiffies update. As result, no
    buffer could be enqueued to particular socket.
    
    To solve this, we switch to use constant timeout 20msecs.
    Then, the function will be expired between 2 jiffies (CONFIG_100HZ)
    and 20 jiffies (CONFIG_1000HZ).
    
    Fixes: c637c1035534 ("tipc: resolve race problem at unicast message reception")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bd02719fe29c9514c7cec70040b71af13e549e11
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Jul 23 13:25:36 2021 -0400

    tipc: fix an use-after-free issue in tipc_recvmsg
    
    commit cc19862ffe454a5b632ca202e5a51bfec9f89fd2 upstream.
    
    syzbot reported an use-after-free crash:
    
      BUG: KASAN: use-after-free in tipc_recvmsg+0xf77/0xf90 net/tipc/socket.c:1979
      Call Trace:
       tipc_recvmsg+0xf77/0xf90 net/tipc/socket.c:1979
       sock_recvmsg_nosec net/socket.c:943 [inline]
       sock_recvmsg net/socket.c:961 [inline]
       sock_recvmsg+0xca/0x110 net/socket.c:957
       tipc_conn_rcv_from_sock+0x162/0x2f0 net/tipc/topsrv.c:398
       tipc_conn_recv_work+0xeb/0x190 net/tipc/topsrv.c:421
       process_one_work+0x98d/0x1630 kernel/workqueue.c:2276
       worker_thread+0x658/0x11f0 kernel/workqueue.c:2422
    
    As Hoang pointed out, it was caused by skb_cb->bytes_read still accessed
    after calling tsk_advance_rx_queue() to free the skb in tipc_recvmsg().
    
    This patch is to fix it by accessing skb_cb->bytes_read earlier than
    calling tsk_advance_rx_queue().
    
    Fixes: f4919ff59c28 ("tipc: keep the skb in rcv queue until the whole data is read")
    Reported-by: syzbot+e6741b97d5552f97c24d@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ef306a7dd849d3e623716cb539e56fe4c0f4c64f
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Jul 16 17:44:07 2021 -0400

    tipc: keep the skb in rcv queue until the whole data is read
    
    [ Upstream commit f4919ff59c2828064b4156e3c3600a169909bcf4 ]
    
    Currently, when userspace reads a datagram with a buffer that is
    smaller than this datagram, the data will be truncated and only
    part of it can be received by users. It doesn't seem right that
    users don't know the datagram size and have to use a huge buffer
    to read it to avoid the truncation.
    
    This patch to fix it by keeping the skb in rcv queue until the
    whole data is read by users. Only the last msg of the datagram
    will be marked with MSG_EOR, just as TCP/SCTP does.
    
    Note that this will work as above only when MSG_EOR is set in the
    flags parameter of recvmsg(), so that it won't break any old user
    applications.
    
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit adc7f7c53219f8e0430cfba81a0b7cfc23bb7e68
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Mon Sep 13 16:28:52 2021 +0700

    tipc: increase timeout in tipc_sk_enqueue()
    
    commit f4bb62e64c88c93060c051195d3bbba804e56945 upstream.
    
    In tipc_sk_enqueue() we use hardcoded 2 jiffies to extract
    socket buffer from generic queue to particular socket.
    The 2 jiffies is too short in case there are other high priority
    tasks get CPU cycles for multiple jiffies update. As result, no
    buffer could be enqueued to particular socket.
    
    To solve this, we switch to use constant timeout 20msecs.
    Then, the function will be expired between 2 jiffies (CONFIG_100HZ)
    and 20 jiffies (CONFIG_1000HZ).
    
    Fixes: c637c1035534 ("tipc: resolve race problem at unicast message reception")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit de9b2e5256951d542bf8721fdb216ce3d6c463ba
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Mon Sep 13 16:28:52 2021 +0700

    tipc: increase timeout in tipc_sk_enqueue()
    
    commit f4bb62e64c88c93060c051195d3bbba804e56945 upstream.
    
    In tipc_sk_enqueue() we use hardcoded 2 jiffies to extract
    socket buffer from generic queue to particular socket.
    The 2 jiffies is too short in case there are other high priority
    tasks get CPU cycles for multiple jiffies update. As result, no
    buffer could be enqueued to particular socket.
    
    To solve this, we switch to use constant timeout 20msecs.
    Then, the function will be expired between 2 jiffies (CONFIG_100HZ)
    and 20 jiffies (CONFIG_1000HZ).
    
    Fixes: c637c1035534 ("tipc: resolve race problem at unicast message reception")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 44f2a9f34770d9dc879ea15994f2f90bc9485dbe
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Mon Sep 13 16:28:52 2021 +0700

    tipc: increase timeout in tipc_sk_enqueue()
    
    commit f4bb62e64c88c93060c051195d3bbba804e56945 upstream.
    
    In tipc_sk_enqueue() we use hardcoded 2 jiffies to extract
    socket buffer from generic queue to particular socket.
    The 2 jiffies is too short in case there are other high priority
    tasks get CPU cycles for multiple jiffies update. As result, no
    buffer could be enqueued to particular socket.
    
    To solve this, we switch to use constant timeout 20msecs.
    Then, the function will be expired between 2 jiffies (CONFIG_100HZ)
    and 20 jiffies (CONFIG_1000HZ).
    
    Fixes: c637c1035534 ("tipc: resolve race problem at unicast message reception")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24c75df12b9522fb9d880abb549234b1173157fb
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Jul 16 17:44:07 2021 -0400

    tipc: keep the skb in rcv queue until the whole data is read
    
    [ Upstream commit f4919ff59c2828064b4156e3c3600a169909bcf4 ]
    
    Currently, when userspace reads a datagram with a buffer that is
    smaller than this datagram, the data will be truncated and only
    part of it can be received by users. It doesn't seem right that
    users don't know the datagram size and have to use a huge buffer
    to read it to avoid the truncation.
    
    This patch to fix it by keeping the skb in rcv queue until the
    whole data is read by users. Only the last msg of the datagram
    will be marked with MSG_EOR, just as TCP/SCTP does.
    
    Note that this will work as above only when MSG_EOR is set in the
    flags parameter of recvmsg(), so that it won't break any old user
    applications.
    
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 064b2d2bb5ffb54b12bf09aacd99e89b4e2d968e
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Jul 16 17:44:07 2021 -0400

    tipc: keep the skb in rcv queue until the whole data is read
    
    [ Upstream commit f4919ff59c2828064b4156e3c3600a169909bcf4 ]
    
    Currently, when userspace reads a datagram with a buffer that is
    smaller than this datagram, the data will be truncated and only
    part of it can be received by users. It doesn't seem right that
    users don't know the datagram size and have to use a huge buffer
    to read it to avoid the truncation.
    
    This patch to fix it by keeping the skb in rcv queue until the
    whole data is read by users. Only the last msg of the datagram
    will be marked with MSG_EOR, just as TCP/SCTP does.
    
    Note that this will work as above only when MSG_EOR is set in the
    flags parameter of recvmsg(), so that it won't break any old user
    applications.
    
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cca61275874a8807ba357905206961a5decdc326
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Jul 16 17:44:07 2021 -0400

    tipc: keep the skb in rcv queue until the whole data is read
    
    [ Upstream commit f4919ff59c2828064b4156e3c3600a169909bcf4 ]
    
    Currently, when userspace reads a datagram with a buffer that is
    smaller than this datagram, the data will be truncated and only
    part of it can be received by users. It doesn't seem right that
    users don't know the datagram size and have to use a huge buffer
    to read it to avoid the truncation.
    
    This patch to fix it by keeping the skb in rcv queue until the
    whole data is read by users. Only the last msg of the datagram
    will be marked with MSG_EOR, just as TCP/SCTP does.
    
    Note that this will work as above only when MSG_EOR is set in the
    flags parameter of recvmsg(), so that it won't break any old user
    applications.
    
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f4bb62e64c88c93060c051195d3bbba804e56945
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Mon Sep 13 16:28:52 2021 +0700

    tipc: increase timeout in tipc_sk_enqueue()
    
    In tipc_sk_enqueue() we use hardcoded 2 jiffies to extract
    socket buffer from generic queue to particular socket.
    The 2 jiffies is too short in case there are other high priority
    tasks get CPU cycles for multiple jiffies update. As result, no
    buffer could be enqueued to particular socket.
    
    To solve this, we switch to use constant timeout 20msecs.
    Then, the function will be expired between 2 jiffies (CONFIG_100HZ)
    and 20 jiffies (CONFIG_1000HZ).
    
    Fixes: c637c1035534 ("tipc: resolve race problem at unicast message reception")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 743902c5446190d9293672e717a6933dffabcb24
Author: Colin Ian King <colin.king@canonical.com>
Date:   Fri Sep 3 00:00:11 2021 +0100

    tipc: clean up inconsistent indenting
    
    There is a statement that is indented one character too deeply,
    clean this up.
    
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 65f5602cd767c384af39429cbe9ff1ecdd1d3db8
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Aug 15 03:13:36 2021 -0400

    tipc: call tipc_wait_for_connect only when dlen is not 0
    
    commit 7387a72c5f84f0dfb57618f9e4770672c0d2e4c9 upstream.
    
    __tipc_sendmsg() is called to send SYN packet by either tipc_sendmsg()
    or tipc_connect(). The difference is in tipc_connect(), it will call
    tipc_wait_for_connect() after __tipc_sendmsg() to wait until connecting
    is done. So there's no need to wait in __tipc_sendmsg() for this case.
    
    This patch is to fix it by calling tipc_wait_for_connect() only when dlen
    is not 0 in __tipc_sendmsg(), which means it's called by tipc_connect().
    
    Note this also fixes the failure in tipcutils/test/ptts/:
    
      # ./tipcTS &
      # ./tipcTC 9
      (hang)
    
    Fixes: 36239dab6da7 ("tipc: fix implicit-connect for SYN+")
    Reported-by: Shuang Li <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0a178a01516158caeb3aa26c1b54d50ad12333f6
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Aug 15 03:13:36 2021 -0400

    tipc: call tipc_wait_for_connect only when dlen is not 0
    
    commit 7387a72c5f84f0dfb57618f9e4770672c0d2e4c9 upstream.
    
    __tipc_sendmsg() is called to send SYN packet by either tipc_sendmsg()
    or tipc_connect(). The difference is in tipc_connect(), it will call
    tipc_wait_for_connect() after __tipc_sendmsg() to wait until connecting
    is done. So there's no need to wait in __tipc_sendmsg() for this case.
    
    This patch is to fix it by calling tipc_wait_for_connect() only when dlen
    is not 0 in __tipc_sendmsg(), which means it's called by tipc_connect().
    
    Note this also fixes the failure in tipcutils/test/ptts/:
    
      # ./tipcTS &
      # ./tipcTC 9
      (hang)
    
    Fixes: 36239dab6da7 ("tipc: fix implicit-connect for SYN+")
    Reported-by: Shuang Li <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f87d64319e6f980c82acfc9b95ed523d053fb7ac
Merge: e649e4c806b4 cd0a719fbd70
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Aug 19 12:33:43 2021 -0700

    Merge tag 'net-5.14-rc7' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from Jakub Kicinski:
     "Networking fixes, including fixes from bpf, wireless and mac80211
      trees.
    
      Current release - regressions:
    
       - tipc: call tipc_wait_for_connect only when dlen is not 0
    
       - mac80211: fix locking in ieee80211_restart_work()
    
      Current release - new code bugs:
    
       - bpf: add rcu_read_lock in bpf_get_current_[ancestor_]cgroup_id()
    
       - ethernet: ice: fix perout start time rounding
    
       - wwan: iosm: prevent underflow in ipc_chnl_cfg_get()
    
      Previous releases - regressions:
    
       - bpf: clear zext_dst of dead insns
    
       - sch_cake: fix srchost/dsthost hashing mode
    
       - vrf: reset skb conntrack connection on VRF rcv
    
       - net/rds: dma_map_sg is entitled to merge entries
    
      Previous releases - always broken:
    
       - ethernet: bnxt: fix Tx path locking and races, add Rx path
         barriers"
    
    * tag 'net-5.14-rc7' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (42 commits)
      net: dpaa2-switch: disable the control interface on error path
      Revert "flow_offload: action should not be NULL when it is referenced"
      iavf: Fix ping is lost after untrusted VF had tried to change MAC
      i40e: Fix ATR queue selection
      r8152: fix the maximum number of PLA bp for RTL8153C
      r8152: fix writing USB_BP2_EN
      mptcp: full fully established support after ADD_ADDR
      mptcp: fix memory leak on address flush
      net/rds: dma_map_sg is entitled to merge entries
      net: mscc: ocelot: allow forwarding from bridge ports to the tag_8021q CPU port
      net: asix: fix uninit value bugs
      ovs: clear skb->tstamp in forwarding path
      net: mdio-mux: Handle -EPROBE_DEFER correctly
      net: mdio-mux: Don't ignore memory allocation errors
      net: mdio-mux: Delete unnecessary devm_kfree
      net: dsa: sja1105: fix use-after-free after calling of_find_compatible_node, or worse
      sch_cake: fix srchost/dsthost hashing mode
      ixgbe, xsk: clean up the resources in ixgbe_xsk_pool_enable error path
      net: qlcnic: add missed unlock in qlcnic_83xx_flash_read32
      mac80211: fix locking in ieee80211_restart_work()
      ...

commit 7387a72c5f84f0dfb57618f9e4770672c0d2e4c9
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Aug 15 03:13:36 2021 -0400

    tipc: call tipc_wait_for_connect only when dlen is not 0
    
    __tipc_sendmsg() is called to send SYN packet by either tipc_sendmsg()
    or tipc_connect(). The difference is in tipc_connect(), it will call
    tipc_wait_for_connect() after __tipc_sendmsg() to wait until connecting
    is done. So there's no need to wait in __tipc_sendmsg() for this case.
    
    This patch is to fix it by calling tipc_wait_for_connect() only when dlen
    is not 0 in __tipc_sendmsg(), which means it's called by tipc_connect().
    
    Note this also fixes the failure in tipcutils/test/ptts/:
    
      # ./tipcTS &
      # ./tipcTC 9
      (hang)
    
    Fixes: 36239dab6da7 ("tipc: fix implicit-connect for SYN+")
    Reported-by: Shuang Li <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f8e6dfc64f6135d1b6c5215c14cd30b9b60a0008
Merge: 3a03c67de276 a9a507013a6f
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Aug 12 16:24:03 2021 -1000

    Merge tag 'net-5.14-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from Jakub Kicinski:
     "Networking fixes, including fixes from netfilter, bpf, can and
      ieee802154.
    
      The size of this is pretty normal, but we got more fixes for 5.14
      changes this week than last week. Nothing major but the trend is the
      opposite of what we like. We'll see how the next week goes..
    
      Current release - regressions:
    
       - r8169: fix ASPM-related link-up regressions
    
       - bridge: fix flags interpretation for extern learn fdb entries
    
       - phy: micrel: fix link detection on ksz87xx switch
    
       - Revert "tipc: Return the correct errno code"
    
       - ptp: fix possible memory leak caused by invalid cast
    
      Current release - new code bugs:
    
       - bpf: add missing bpf_read_[un]lock_trace() for syscall program
    
       - bpf: fix potentially incorrect results with bpf_get_local_storage()
    
       - page_pool: mask the page->signature before the checking, avoid dma
         mapping leaks
    
       - netfilter: nfnetlink_hook: 5 fixes to information in netlink dumps
    
       - bnxt_en: fix firmware interface issues with PTP
    
       - mlx5: Bridge, fix ageing time
    
      Previous releases - regressions:
    
       - linkwatch: fix failure to restore device state across
         suspend/resume
    
       - bareudp: fix invalid read beyond skb's linear data
    
      Previous releases - always broken:
    
       - bpf: fix integer overflow involving bucket_size
    
       - ppp: fix issues when desired interface name is specified via
         netlink
    
       - wwan: mhi_wwan_ctrl: fix possible deadlock
    
       - dsa: microchip: ksz8795: fix number of VLAN related bugs
    
       - dsa: drivers: fix broken backpressure in .port_fdb_dump
    
       - dsa: qca: ar9331: make proper initial port defaults
    
      Misc:
    
       - bpf: add lockdown check for probe_write_user helper
    
       - netfilter: conntrack: remove offload_pickup sysctl before 5.14 is
         out
    
       - netfilter: conntrack: collect all entries in one cycle,
         heuristically slow down garbage collection scans on idle systems to
         prevent frequent wake ups"
    
    * tag 'net-5.14-rc6' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (87 commits)
      vsock/virtio: avoid potential deadlock when vsock device remove
      wwan: core: Avoid returning NULL from wwan_create_dev()
      net: dsa: sja1105: unregister the MDIO buses during teardown
      Revert "tipc: Return the correct errno code"
      net: mscc: Fix non-GPL export of regmap APIs
      net: igmp: increase size of mr_ifc_count
      MAINTAINERS: switch to my OMP email for Renesas Ethernet drivers
      tcp_bbr: fix u32 wrap bug in round logic if bbr_init() called after 2B packets
      net: pcs: xpcs: fix error handling on failed to allocate memory
      net: linkwatch: fix failure to restore device state across suspend/resume
      net: bridge: fix memleak in br_add_if()
      net: switchdev: zero-initialize struct switchdev_notifier_fdb_info emitted by drivers towards the bridge
      net: bridge: fix flags interpretation for extern learn fdb entries
      net: dsa: sja1105: fix broken backpressure in .port_fdb_dump
      net: dsa: lantiq: fix broken backpressure in .port_fdb_dump
      net: dsa: lan9303: fix broken backpressure in .port_fdb_dump
      net: dsa: hellcreek: fix broken backpressure in .port_fdb_dump
      bpf, core: Fix kernel-doc notation
      net: igmp: fix data-race in igmp_ifc_timer_expire()
      net: Fix memory leak in ieee802154_raw_deliver
      ...

commit 86704993e6a5989e256b4212ca03115cc2694eda
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Wed Aug 11 08:22:09 2021 +0700

    Revert "tipc: Return the correct errno code"
    
    This reverts commit 0efea3c649f0 because of:
    - The returning -ENOBUF error is fine on socket buffer allocation.
    - There is side effect in the calling path
    tipc_node_xmit()->tipc_link_xmit() when checking error code returning.
    
    Fixes: 0efea3c649f0 ("tipc: Return the correct errno code")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b8a071889fb3d44f75c620bb86c2bdbcb3b1157a
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Jul 23 18:46:01 2021 -0400

    tipc: do not write skb_shinfo frags when doing decrytion
    
    [ Upstream commit 3cf4375a090473d240281a0d2b04a3a5aaeac34b ]
    
    One skb's skb_shinfo frags are not writable, and they can be shared with
    other skbs' like by pskb_copy(). To write the frags may cause other skb's
    data crash.
    
    So before doing en/decryption, skb_cow_data() should always be called for
    a cloned or nonlinear skb if req dst is using the same sg as req src.
    While at it, the likely branch can be removed, as it will be covered
    by skb_cow_data().
    
    Note that esp_input() has the same issue, and I will fix it in another
    patch. tipc_aead_encrypt() doesn't have this issue, as it only processes
    linear data in the unlikely branch.
    
    Fixes: fc1b6d6de220 ("tipc: introduce TIPC encryption & authentication")
    Reported-by: Shuang Li <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7b3f85278d90410788480257f010a03dd82c391a
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Fri Jul 23 09:25:34 2021 +0700

    tipc: fix sleeping in tipc accept routine
    
    [ Upstream commit d237a7f11719ff9320721be5818352e48071aab6 ]
    
    The release_sock() is blocking function, it would change the state
    after sleeping. In order to evaluate the stated condition outside
    the socket lock context, switch to use wait_woken() instead.
    
    Fixes: 6398e23cdb1d8 ("tipc: standardize accept routine")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a73d03806166582f280d502ac4c4cbe77b192409
Author: Xin Long <lucien.xin@gmail.com>
Date:   Thu Jul 22 12:05:41 2021 -0400

    tipc: fix implicit-connect for SYN+
    
    [ Upstream commit f8dd60de194817c86bf812700980762bb5a8d9a4 ]
    
    For implicit-connect, when it's either SYN- or SYN+, an ACK should
    be sent back to the client immediately. It's not appropriate for
    the client to enter established state only after receiving data
    from the server.
    
    On client side, after the SYN is sent out, tipc_wait_for_connect()
    should be called to wait for the ACK if timeout is set.
    
    This patch also restricts __tipc_sendstream() to call __sendmsg()
    only when it's in TIPC_OPEN state, so that the client can program
    in a single loop doing both connecting and data sending like:
    
      for (...)
          sendmsg(dest, buf);
    
    This makes the implicit-connect more implicit.
    
    Fixes: b97bf3fd8f6a ("[TIPC] Initial merge")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4951ffa3fac8892949a09b630191ff12f35f4b72
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Jul 23 18:46:01 2021 -0400

    tipc: do not write skb_shinfo frags when doing decrytion
    
    [ Upstream commit 3cf4375a090473d240281a0d2b04a3a5aaeac34b ]
    
    One skb's skb_shinfo frags are not writable, and they can be shared with
    other skbs' like by pskb_copy(). To write the frags may cause other skb's
    data crash.
    
    So before doing en/decryption, skb_cow_data() should always be called for
    a cloned or nonlinear skb if req dst is using the same sg as req src.
    While at it, the likely branch can be removed, as it will be covered
    by skb_cow_data().
    
    Note that esp_input() has the same issue, and I will fix it in another
    patch. tipc_aead_encrypt() doesn't have this issue, as it only processes
    linear data in the unlikely branch.
    
    Fixes: fc1b6d6de220 ("tipc: introduce TIPC encryption & authentication")
    Reported-by: Shuang Li <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a41282e82a1d13ad2cca0f07879d7042780d8e78
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Fri Jul 23 09:25:34 2021 +0700

    tipc: fix sleeping in tipc accept routine
    
    [ Upstream commit d237a7f11719ff9320721be5818352e48071aab6 ]
    
    The release_sock() is blocking function, it would change the state
    after sleeping. In order to evaluate the stated condition outside
    the socket lock context, switch to use wait_woken() instead.
    
    Fixes: 6398e23cdb1d8 ("tipc: standardize accept routine")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 10f585740cf0bf5b037a70a4d4eb3096fd713490
Author: Xin Long <lucien.xin@gmail.com>
Date:   Thu Jul 22 12:05:41 2021 -0400

    tipc: fix implicit-connect for SYN+
    
    [ Upstream commit f8dd60de194817c86bf812700980762bb5a8d9a4 ]
    
    For implicit-connect, when it's either SYN- or SYN+, an ACK should
    be sent back to the client immediately. It's not appropriate for
    the client to enter established state only after receiving data
    from the server.
    
    On client side, after the SYN is sent out, tipc_wait_for_connect()
    should be called to wait for the ACK if timeout is set.
    
    This patch also restricts __tipc_sendstream() to call __sendmsg()
    only when it's in TIPC_OPEN state, so that the client can program
    in a single loop doing both connecting and data sending like:
    
      for (...)
          sendmsg(dest, buf);
    
    This makes the implicit-connect more implicit.
    
    Fixes: b97bf3fd8f6a ("[TIPC] Initial merge")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 851946a681362d2e5a4df122909c85ec3eb93e97
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Fri Jul 23 09:25:34 2021 +0700

    tipc: fix sleeping in tipc accept routine
    
    [ Upstream commit d237a7f11719ff9320721be5818352e48071aab6 ]
    
    The release_sock() is blocking function, it would change the state
    after sleeping. In order to evaluate the stated condition outside
    the socket lock context, switch to use wait_woken() instead.
    
    Fixes: 6398e23cdb1d8 ("tipc: standardize accept routine")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 01f178e5f855d38da00f87e9ba51764757e9cee4
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Fri Jul 23 09:25:34 2021 +0700

    tipc: fix sleeping in tipc accept routine
    
    [ Upstream commit d237a7f11719ff9320721be5818352e48071aab6 ]
    
    The release_sock() is blocking function, it would change the state
    after sleeping. In order to evaluate the stated condition outside
    the socket lock context, switch to use wait_woken() instead.
    
    Fixes: 6398e23cdb1d8 ("tipc: standardize accept routine")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit cf76aa1aab8089d271ea827995099a914dec7c98
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Fri Jul 23 09:25:34 2021 +0700

    tipc: fix sleeping in tipc accept routine
    
    [ Upstream commit d237a7f11719ff9320721be5818352e48071aab6 ]
    
    The release_sock() is blocking function, it would change the state
    after sleeping. In order to evaluate the stated condition outside
    the socket lock context, switch to use wait_woken() instead.
    
    Fixes: 6398e23cdb1d8 ("tipc: standardize accept routine")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a1d2c2ed0650ad924d9007dc2931020c47c41394
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Fri Jul 23 09:25:34 2021 +0700

    tipc: fix sleeping in tipc accept routine
    
    [ Upstream commit d237a7f11719ff9320721be5818352e48071aab6 ]
    
    The release_sock() is blocking function, it would change the state
    after sleeping. In order to evaluate the stated condition outside
    the socket lock context, switch to use wait_woken() instead.
    
    Fixes: 6398e23cdb1d8 ("tipc: standardize accept routine")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 088f160d6f6dc06cf858e864ba8e81548387af1e
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Tue Jul 27 15:56:50 2021 -0700

    tipc: Fix backport of b77413446408fdd256599daf00d5be72b5f3e7c6
    
    Clang warns:
    
    net/tipc/link.c:896:23: warning: variable 'hdr' is uninitialized when
    used here [-Wuninitialized]
            imp = msg_importance(hdr);
                                 ^~~
    net/tipc/link.c:890:22: note: initialize the variable 'hdr' to silence
    this warning
            struct tipc_msg *hdr;
                                ^
                                 = NULL
    1 warning generated.
    
    The backport of commit b77413446408 ("tipc: fix NULL deref in
    tipc_link_xmit()") to 4.9 as commit 310014f572a5 ("tipc: fix NULL deref
    in tipc_link_xmit()") added the hdr initialization above the
    
        if (unlikely(msg_size(hdr) > mtu)) {
    
    like in the upstream commit; however, in 4.9, that check is below imp's
    first use because commit 365ad353c256 ("tipc: reduce risk of user
    starvation during link congestion") is not present. This results in hdr
    being used uninitialized.
    
    Fix this by moving hdr's initialization before imp and after the if
    check like the original backport did.
    
    Cc: Hoang Le <hoang.h.le@dektech.com.au>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Fixes: 310014f572a5 ("tipc: fix NULL deref in tipc_link_xmit()")
    Reported-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e4bee8d2a1c9446d4b081b713d297ba850668117
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Fri Jul 23 09:25:34 2021 +0700

    tipc: fix sleeping in tipc accept routine
    
    [ Upstream commit d237a7f11719ff9320721be5818352e48071aab6 ]
    
    The release_sock() is blocking function, it would change the state
    after sleeping. In order to evaluate the stated condition outside
    the socket lock context, switch to use wait_woken() instead.
    
    Fixes: 6398e23cdb1d8 ("tipc: standardize accept routine")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c7d102232649226a69dddd58a4942cf13cff4f7c
Merge: e1dab4c02de0 8d67041228ac
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Jul 30 16:01:36 2021 -0700

    Merge tag 'net-5.14-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from Jakub Kicinski:
     "Networking fixes for 5.14-rc4, including fixes from bpf, can, WiFi
      (mac80211) and netfilter trees.
    
      Current release - regressions:
    
       - mac80211: fix starting aggregation sessions on mesh interfaces
    
      Current release - new code bugs:
    
       - sctp: send pmtu probe only if packet loss in Search Complete state
    
       - bnxt_en: add missing periodic PHC overflow check
    
       - devlink: fix phys_port_name of virtual port and merge error
    
       - hns3: change the method of obtaining default ptp cycle
    
       - can: mcba_usb_start(): add missing urb->transfer_dma initialization
    
      Previous releases - regressions:
    
       - set true network header for ECN decapsulation
    
       - mlx5e: RX, avoid possible data corruption w/ relaxed ordering and
         LRO
    
       - phy: re-add check for PHY_BRCM_DIS_TXCRXC_NOENRGY on the BCM54811
         PHY
    
       - sctp: fix return value check in __sctp_rcv_asconf_lookup
    
      Previous releases - always broken:
    
       - bpf:
           - more spectre corner case fixes, introduce a BPF nospec
             instruction for mitigating Spectre v4
           - fix OOB read when printing XDP link fdinfo
           - sockmap: fix cleanup related races
    
       - mac80211: fix enabling 4-address mode on a sta vif after assoc
    
       - can:
           - raw: raw_setsockopt(): fix raw_rcv panic for sock UAF
           - j1939: j1939_session_deactivate(): clarify lifetime of session
             object, avoid UAF
           - fix number of identical memory leaks in USB drivers
    
       - tipc:
           - do not blindly write skb_shinfo frags when doing decryption
           - fix sleeping in tipc accept routine"
    
    * tag 'net-5.14-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (91 commits)
      gve: Update MAINTAINERS list
      can: esd_usb2: fix memory leak
      can: ems_usb: fix memory leak
      can: usb_8dev: fix memory leak
      can: mcba_usb_start(): add missing urb->transfer_dma initialization
      can: hi311x: fix a signedness bug in hi3110_cmd()
      MAINTAINERS: add Yasushi SHOJI as reviewer for the Microchip CAN BUS Analyzer Tool driver
      bpf: Fix leakage due to insufficient speculative store bypass mitigation
      bpf: Introduce BPF nospec instruction for mitigating Spectre v4
      sis900: Fix missing pci_disable_device() in probe and remove
      net: let flow have same hash in two directions
      nfc: nfcsim: fix use after free during module unload
      tulip: windbond-840: Fix missing pci_disable_device() in probe and remove
      sctp: fix return value check in __sctp_rcv_asconf_lookup
      nfc: s3fwrn5: fix undefined parameter values in dev_err()
      net/mlx5: Fix mlx5_vport_tbl_attr chain from u16 to u32
      net/mlx5e: Fix nullptr in mlx5e_hairpin_get_mdev()
      net/mlx5: Unload device upon firmware fatal error
      net/mlx5e: Fix page allocation failure for ptp-RQ over SF
      net/mlx5e: Fix page allocation failure for trap-RQ over SF
      ...

commit cc19862ffe454a5b632ca202e5a51bfec9f89fd2
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Jul 23 13:25:36 2021 -0400

    tipc: fix an use-after-free issue in tipc_recvmsg
    
    syzbot reported an use-after-free crash:
    
      BUG: KASAN: use-after-free in tipc_recvmsg+0xf77/0xf90 net/tipc/socket.c:1979
      Call Trace:
       tipc_recvmsg+0xf77/0xf90 net/tipc/socket.c:1979
       sock_recvmsg_nosec net/socket.c:943 [inline]
       sock_recvmsg net/socket.c:961 [inline]
       sock_recvmsg+0xca/0x110 net/socket.c:957
       tipc_conn_rcv_from_sock+0x162/0x2f0 net/tipc/topsrv.c:398
       tipc_conn_recv_work+0xeb/0x190 net/tipc/topsrv.c:421
       process_one_work+0x98d/0x1630 kernel/workqueue.c:2276
       worker_thread+0x658/0x11f0 kernel/workqueue.c:2422
    
    As Hoang pointed out, it was caused by skb_cb->bytes_read still accessed
    after calling tsk_advance_rx_queue() to free the skb in tipc_recvmsg().
    
    This patch is to fix it by accessing skb_cb->bytes_read earlier than
    calling tsk_advance_rx_queue().
    
    Fixes: f4919ff59c28 ("tipc: keep the skb in rcv queue until the whole data is read")
    Reported-by: syzbot+e6741b97d5552f97c24d@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3cf4375a090473d240281a0d2b04a3a5aaeac34b
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Jul 23 18:46:01 2021 -0400

    tipc: do not write skb_shinfo frags when doing decrytion
    
    One skb's skb_shinfo frags are not writable, and they can be shared with
    other skbs' like by pskb_copy(). To write the frags may cause other skb's
    data crash.
    
    So before doing en/decryption, skb_cow_data() should always be called for
    a cloned or nonlinear skb if req dst is using the same sg as req src.
    While at it, the likely branch can be removed, as it will be covered
    by skb_cow_data().
    
    Note that esp_input() has the same issue, and I will fix it in another
    patch. tipc_aead_encrypt() doesn't have this issue, as it only processes
    linear data in the unlikely branch.
    
    Fixes: fc1b6d6de220 ("tipc: introduce TIPC encryption & authentication")
    Reported-by: Shuang Li <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d237a7f11719ff9320721be5818352e48071aab6
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Fri Jul 23 09:25:34 2021 +0700

    tipc: fix sleeping in tipc accept routine
    
    The release_sock() is blocking function, it would change the state
    after sleeping. In order to evaluate the stated condition outside
    the socket lock context, switch to use wait_woken() instead.
    
    Fixes: 6398e23cdb1d8 ("tipc: standardize accept routine")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f8dd60de194817c86bf812700980762bb5a8d9a4
Author: Xin Long <lucien.xin@gmail.com>
Date:   Thu Jul 22 12:05:41 2021 -0400

    tipc: fix implicit-connect for SYN+
    
    For implicit-connect, when it's either SYN- or SYN+, an ACK should
    be sent back to the client immediately. It's not appropriate for
    the client to enter established state only after receiving data
    from the server.
    
    On client side, after the SYN is sent out, tipc_wait_for_connect()
    should be called to wait for the ACK if timeout is set.
    
    This patch also restricts __tipc_sendstream() to call __sendmsg()
    only when it's in TIPC_OPEN state, so that the client can program
    in a single loop doing both connecting and data sending like:
    
      for (...)
          sendmsg(dest, buf);
    
    This makes the implicit-connect more implicit.
    
    Fixes: b97bf3fd8f6a ("[TIPC] Initial merge")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f4919ff59c2828064b4156e3c3600a169909bcf4
Author: Xin Long <lucien.xin@gmail.com>
Date:   Fri Jul 16 17:44:07 2021 -0400

    tipc: keep the skb in rcv queue until the whole data is read
    
    Currently, when userspace reads a datagram with a buffer that is
    smaller than this datagram, the data will be truncated and only
    part of it can be received by users. It doesn't seem right that
    users don't know the datagram size and have to use a huge buffer
    to read it to avoid the truncation.
    
    This patch to fix it by keeping the skb in rcv queue until the
    whole data is read by users. Only the last msg of the datagram
    will be marked with MSG_EOR, just as TCP/SCTP does.
    
    Note that this will work as above only when MSG_EOR is set in the
    flags parameter of recvmsg(), so that it won't break any old user
    applications.
    
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 420451e090ee7667b10b5232c58a9e72607f732e
Author: Menglong Dong <dong.menglong@zte.com.cn>
Date:   Sun Jun 27 23:37:44 2021 -0700

    net: tipc: fix FB_MTU eat two pages
    
    [ Upstream commit 0c6de0c943dbb42831bf7502eb5c007f71e752d2 ]
    
    FB_MTU is used in 'tipc_msg_build()' to alloc smaller skb when memory
    allocation fails, which can avoid unnecessary sending failures.
    
    The value of FB_MTU now is 3744, and the data size will be:
    
      (3744 + SKB_DATA_ALIGN(sizeof(struct skb_shared_info)) + \
        SKB_DATA_ALIGN(BUF_HEADROOM + BUF_TAILROOM + 3))
    
    which is larger than one page(4096), and two pages will be allocated.
    
    To avoid it, replace '3744' with a calculation:
    
      (PAGE_SIZE - SKB_DATA_ALIGN(BUF_OVERHEAD) - \
        SKB_DATA_ALIGN(sizeof(struct skb_shared_info)))
    
    What's more, alloc_skb_fclone() will call SKB_DATA_ALIGN for data size,
    and it's not necessary to make alignment for buf_size in
    tipc_buf_acquire(). So, just remove it.
    
    Fixes: 4c94cc2d3d57 ("tipc: fall back to smaller MTU if allocation of local send skb fails")
    Signed-off-by: Menglong Dong <dong.menglong@zte.com.cn>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3296c8fceb2d0553437a9525057944cd94ee8016
Author: Menglong Dong <dong.menglong@zte.com.cn>
Date:   Sun Jun 27 23:37:44 2021 -0700

    net: tipc: fix FB_MTU eat two pages
    
    [ Upstream commit 0c6de0c943dbb42831bf7502eb5c007f71e752d2 ]
    
    FB_MTU is used in 'tipc_msg_build()' to alloc smaller skb when memory
    allocation fails, which can avoid unnecessary sending failures.
    
    The value of FB_MTU now is 3744, and the data size will be:
    
      (3744 + SKB_DATA_ALIGN(sizeof(struct skb_shared_info)) + \
        SKB_DATA_ALIGN(BUF_HEADROOM + BUF_TAILROOM + 3))
    
    which is larger than one page(4096), and two pages will be allocated.
    
    To avoid it, replace '3744' with a calculation:
    
      (PAGE_SIZE - SKB_DATA_ALIGN(BUF_OVERHEAD) - \
        SKB_DATA_ALIGN(sizeof(struct skb_shared_info)))
    
    What's more, alloc_skb_fclone() will call SKB_DATA_ALIGN for data size,
    and it's not necessary to make alignment for buf_size in
    tipc_buf_acquire(). So, just remove it.
    
    Fixes: 4c94cc2d3d57 ("tipc: fall back to smaller MTU if allocation of local send skb fails")
    Signed-off-by: Menglong Dong <dong.menglong@zte.com.cn>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c6965316d6845bf8a02822c5529d8be3858045ff
Author: Menglong Dong <dong.menglong@zte.com.cn>
Date:   Sun Jun 27 23:37:44 2021 -0700

    net: tipc: fix FB_MTU eat two pages
    
    [ Upstream commit 0c6de0c943dbb42831bf7502eb5c007f71e752d2 ]
    
    FB_MTU is used in 'tipc_msg_build()' to alloc smaller skb when memory
    allocation fails, which can avoid unnecessary sending failures.
    
    The value of FB_MTU now is 3744, and the data size will be:
    
      (3744 + SKB_DATA_ALIGN(sizeof(struct skb_shared_info)) + \
        SKB_DATA_ALIGN(BUF_HEADROOM + BUF_TAILROOM + 3))
    
    which is larger than one page(4096), and two pages will be allocated.
    
    To avoid it, replace '3744' with a calculation:
    
      (PAGE_SIZE - SKB_DATA_ALIGN(BUF_OVERHEAD) - \
        SKB_DATA_ALIGN(sizeof(struct skb_shared_info)))
    
    What's more, alloc_skb_fclone() will call SKB_DATA_ALIGN for data size,
    and it's not necessary to make alignment for buf_size in
    tipc_buf_acquire(). So, just remove it.
    
    Fixes: 4c94cc2d3d57 ("tipc: fall back to smaller MTU if allocation of local send skb fails")
    Signed-off-by: Menglong Dong <dong.menglong@zte.com.cn>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 09ef17863f37235fe4e65a7d991e487b9ff6e553
Author: Xin Long <lucien.xin@gmail.com>
Date:   Wed Jun 30 20:18:20 2021 -0400

    Documentation: add more details in tipc.rst
    
    kernel-doc for TIPC is too simple, we need to add more information for it.
    
    This patch is to extend the abstract, and add the Features and Links items.
    
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8ec035ac4a1391c16c3cf328e6e8d9531d7a229f
Merge: 07bdc0746a5a 40e67c120093
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jun 28 20:03:38 2021 -0700

    Merge tag 'fallthrough-fixes-clang-5.14-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/gustavoars/linux
    
    Pull fallthrough fixes from Gustavo Silva:
     "Fix many fall-through warnings when building with Clang 12.0.0 and
      '-Wimplicit-fallthrough' so that we at some point will be able to
      enable that warning by default"
    
    * tag 'fallthrough-fixes-clang-5.14-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/gustavoars/linux: (26 commits)
      rxrpc: Fix fall-through warnings for Clang
      drm/nouveau/clk: Fix fall-through warnings for Clang
      drm/nouveau/therm: Fix fall-through warnings for Clang
      drm/nouveau: Fix fall-through warnings for Clang
      xfs: Fix fall-through warnings for Clang
      xfrm: Fix fall-through warnings for Clang
      tipc: Fix fall-through warnings for Clang
      sctp: Fix fall-through warnings for Clang
      rds: Fix fall-through warnings for Clang
      net/packet: Fix fall-through warnings for Clang
      net: netrom: Fix fall-through warnings for Clang
      ide: Fix fall-through warnings for Clang
      hwmon: (max6621) Fix fall-through warnings for Clang
      hwmon: (corsair-cpro) Fix fall-through warnings for Clang
      firewire: core: Fix fall-through warnings for Clang
      braille_console: Fix fall-through warnings for Clang
      ipv4: Fix fall-through warnings for Clang
      qlcnic: Fix fall-through warnings for Clang
      bnxt_en: Fix fall-through warnings for Clang
      netxen_nic: Fix fall-through warnings for Clang
      ...

commit c948b46a7dcd131e3ac3d4ed48f9cfaaa9103d58
Merge: 1b077ce1c5be d4cfb7fe5713
Author: David S. Miller <davem@davemloft.net>
Date:   Mon Jun 28 13:31:57 2021 -0700

    Merge branch 'tipc-next'
    
    Menglong Dong says:
    
    ====================
    net: tipc: fix FB_MTU eat two pages and do some code cleanup
    
    In the first patch, FB_MTU is redefined to make sure data size will not
    exceed PAGE_SIZE. Besides, I removed the alignment for buf_size in
    tipc_buf_acquire, because skb_alloc_fclone will do the alignment job.
    
    In the second patch, I removed align() in msg.c and replace it with
    ALIGN().
    
    Changes since V5:
    - remove blank line after Fixes in commit log in the first patch
    
    Changes since V4:
    - remove ONE_PAGE_SKB_SZ and replace it with one_page_mtu in the first
      patch.
    - fix some code style problems for the second patch.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d4cfb7fe5713521280925019e7a7857b373aa627
Author: Menglong Dong <dong.menglong@zte.com.cn>
Date:   Sun Jun 27 23:37:45 2021 -0700

    net: tipc: replace align() with ALIGN in msg.c
    
    The function align() which is defined in msg.c is redundant, replace it
    with ALIGN() and introduce a BUF_ALIGN().
    
    Signed-off-by: Menglong Dong <dong.menglong@zte.com.cn>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0c6de0c943dbb42831bf7502eb5c007f71e752d2
Author: Menglong Dong <dong.menglong@zte.com.cn>
Date:   Sun Jun 27 23:37:44 2021 -0700

    net: tipc: fix FB_MTU eat two pages
    
    FB_MTU is used in 'tipc_msg_build()' to alloc smaller skb when memory
    allocation fails, which can avoid unnecessary sending failures.
    
    The value of FB_MTU now is 3744, and the data size will be:
    
      (3744 + SKB_DATA_ALIGN(sizeof(struct skb_shared_info)) + \
        SKB_DATA_ALIGN(BUF_HEADROOM + BUF_TAILROOM + 3))
    
    which is larger than one page(4096), and two pages will be allocated.
    
    To avoid it, replace '3744' with a calculation:
    
      (PAGE_SIZE - SKB_DATA_ALIGN(BUF_OVERHEAD) - \
        SKB_DATA_ALIGN(sizeof(struct skb_shared_info)))
    
    What's more, alloc_skb_fclone() will call SKB_DATA_ALIGN for data size,
    and it's not necessary to make alignment for buf_size in
    tipc_buf_acquire(). So, just remove it.
    
    Fixes: 4c94cc2d3d57 ("tipc: fall back to smaller MTU if allocation of local send skb fails")
    Signed-off-by: Menglong Dong <dong.menglong@zte.com.cn>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 220e898dd0db995f32fa6e2a6e28aa2d8b5f8dd0
Merge: fb0a1dacf2be 194730a9beb5
Author: David S. Miller <davem@davemloft.net>
Date:   Wed Jun 16 12:54:02 2021 -0700

    Merge branch 'net-smc-stats'
    
    Karsten Graul says:
    
    ====================
    net/smc: Add SMC statistic support
    
    Please apply the following patch series for smc to netdev's net-next tree.
    
    This v2 is a resend of the code contained in v1 but with an updated
    cover letter to describe why we have chosen to use the generic netlink
    mechanism to access the smc protocol's statistic data.
    
    The patchset adds statistic support to the SMC protocol. Per-cpu
    variables are used to collect the statistic information for better
    performance and for reducing concurrency pitfalls. The code that is
    collecting statistic data is implemented in macros to increase code
    reuse and readability.
    The generic netlink mechanism in SMC is extended to provide the
    collected statistics to userspace.
    Network namespace awareness is also part of the statistics
    implementation.
    
    SMC is a protocol interacting with PCI devices (like RoCE Cards) and
    runs on top of the TCP protocol. As SMC is a network protocol and not
    an ethernet device driver, we decided to use the generic netlink
    interface. This should be comparable to what other protocols in the
    net subsystem like tipc, ncsi, ieee802154 or tcp, et al, do.
    There is already an established internal generic netlink interface
    mechanism in SMC which is used to collect SMC Protocol internal
    information. This patchset extends that existing mechanism.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f1dcdc075617a2a8a866f4f928a780287a553ed0
Author: gushengxian <gushengxian@yulong.com>
Date:   Wed Jun 9 23:29:58 2021 -0700

    tipc:subscr.c: fix a spelling mistake
    
    Fix a spelling mistake.
    
    Signed-off-by: gushengxian <gushengxian@yulong.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 326af505ca1fbad6b9b7ba9f36399ceba0b6aba2
Author: gushengxian <gushengxian@yulong.com>
Date:   Wed Jun 9 23:18:53 2021 -0700

    tipc: socket.c: fix the use of copular verb
    
    Fix the use of copular verb.
    
    Signed-off-by: gushengxian <gushengxian@yulong.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ab5cfe2c05fec9fe0890bb048cf527500e271f2e
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Apr 1 09:30:48 2021 +0700

    tipc: fix unique bearer names sanity check
    
    [ Upstream commit f20a46c3044c3f75232b3d0e2d09af9b25efaf45 ]
    
    When enabling a bearer by name, we don't sanity check its name with
    higher slot in bearer list. This may have the effect that the name
    of an already enabled bearer bypasses the check.
    
    To fix the above issue, we just perform an extra checking with all
    existing bearers.
    
    Fixes: cb30a63384bc9 ("tipc: refactor function tipc_enable_bearer()")
    Cc: stable@vger.kernel.org
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 506285aa2f7fb37c0300dcece36e638277c26056
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Mar 25 08:56:41 2021 +0700

    tipc: add extack messages for bearer/media failure
    
    [ Upstream commit b83e214b2e04204f1fc674574362061492c37245 ]
    
    Add extack error messages for -EINVAL errors when enabling bearer,
    getting/setting properties for a media/bearer
    
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fdf1e5eec3eddef6255cbc149e85877c924458d8
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Apr 1 09:30:48 2021 +0700

    tipc: fix unique bearer names sanity check
    
    [ Upstream commit f20a46c3044c3f75232b3d0e2d09af9b25efaf45 ]
    
    When enabling a bearer by name, we don't sanity check its name with
    higher slot in bearer list. This may have the effect that the name
    of an already enabled bearer bypasses the check.
    
    To fix the above issue, we just perform an extra checking with all
    existing bearers.
    
    Fixes: cb30a63384bc9 ("tipc: refactor function tipc_enable_bearer()")
    Cc: stable@vger.kernel.org
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e31ae45ed1d323b4409c3575299f6c203f0b3d2a
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Mar 25 08:56:41 2021 +0700

    tipc: add extack messages for bearer/media failure
    
    [ Upstream commit b83e214b2e04204f1fc674574362061492c37245 ]
    
    Add extack error messages for -EINVAL errors when enabling bearer,
    getting/setting properties for a media/bearer
    
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 28efacc21d2a5c4f10abad1631a6c848a209256f
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Apr 1 09:30:48 2021 +0700

    tipc: fix unique bearer names sanity check
    
    [ Upstream commit f20a46c3044c3f75232b3d0e2d09af9b25efaf45 ]
    
    When enabling a bearer by name, we don't sanity check its name with
    higher slot in bearer list. This may have the effect that the name
    of an already enabled bearer bypasses the check.
    
    To fix the above issue, we just perform an extra checking with all
    existing bearers.
    
    Fixes: cb30a63384bc9 ("tipc: refactor function tipc_enable_bearer()")
    Cc: stable@vger.kernel.org
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9ac67fdf64e0be982fdb4ce4702398abea276246
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Mar 25 08:56:41 2021 +0700

    tipc: add extack messages for bearer/media failure
    
    [ Upstream commit b83e214b2e04204f1fc674574362061492c37245 ]
    
    Add extack error messages for -EINVAL errors when enabling bearer,
    getting/setting properties for a media/bearer
    
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a13a42c573a496a05b528ddbe6ea32083f44e9f1
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Apr 1 09:30:48 2021 +0700

    tipc: fix unique bearer names sanity check
    
    [ Upstream commit f20a46c3044c3f75232b3d0e2d09af9b25efaf45 ]
    
    When enabling a bearer by name, we don't sanity check its name with
    higher slot in bearer list. This may have the effect that the name
    of an already enabled bearer bypasses the check.
    
    To fix the above issue, we just perform an extra checking with all
    existing bearers.
    
    Fixes: cb30a63384bc9 ("tipc: refactor function tipc_enable_bearer()")
    Cc: stable@vger.kernel.org
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 65281d6aeca781b024a3cc83df6b55b987877ae8
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Mar 25 08:56:41 2021 +0700

    tipc: add extack messages for bearer/media failure
    
    [ Upstream commit b83e214b2e04204f1fc674574362061492c37245 ]
    
    Add extack error messages for -EINVAL errors when enabling bearer,
    getting/setting properties for a media/bearer
    
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0efea3c649f0a50d473a4afe2d17c2bbcee639e1
Author: Zheng Yongjun <zhengyongjun3@huawei.com>
Date:   Fri Jun 4 09:47:02 2021 +0800

    tipc: Return the correct errno code
    
    When kalloc or kmemdup failed, should return ENOMEM rather than ENOBUF.
    
    Signed-off-by: Zheng Yongjun <zhengyongjun3@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ae1d9cc31244407710131b7ca531e7a8be3381c2
Merge: eda1bc65b0dc 5ef213258ddf
Author: David S. Miller <davem@davemloft.net>
Date:   Thu Jun 3 14:06:39 2021 -0700

    Merge branch 'tipc-cleanups'
    
    Jon Maloy says:
    
    ====================
    tipc: some small cleanups
    
    We make some minor code cleanups and improvements.
    
    v2: Changed value of TIPC_ANY_SCOPE macro in patch #3
        to avoid compiler warning
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5ef213258ddf38fc8b6de5d7aea3d514ff13f71a
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Wed Jun 2 13:44:26 2021 -0400

    tipc: simplify handling of lookup scope during multicast message reception
    
    We introduce a new macro TIPC_ANY_SCOPE to make the handling of the
    lookup scope value more comprehensible during multicast reception.
    
    The (unchanged) rules go as follows:
    
    1) Multicast messages sent from own node are delivered to all matching
       sockets on the own node, irrespective of their binding scope.
    
    2) Multicast messages sent from other nodes arrive here because they
       have found TIPC_CLUSTER_SCOPE bindings emanating from this node.
       Those messages should be delivered to exactly those sockets, but not
       to local sockets bound with TIPC_NODE_SCOPE, since the latter
       obviously were not meant to be visible for those senders.
    
    3) Group multicast/broadcast messages are delivered to the sockets with
       a binding scope matching exactly the lookup scope indicated in the
       message header, and nobody else.
    
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Tested-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 62633c2f17f1f0e6dd6932f990ade9525204ea24
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Wed Jun 2 13:44:25 2021 -0400

    tipc: refactor function tipc_sk_anc_data_recv()
    
    We refactor tipc_sk_anc_data_recv() to make it slightly more
    comprehensible, but also to facilitate application of some additions
    to the code in a future commit.
    
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Tested-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 14623e005a1e74864afca1261a3aa8e6e8017df9
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Wed Jun 2 13:44:24 2021 -0400

    tipc: eliminate redundant fields in struct tipc_sock
    
    We eliminate the redundant fields conn_type and conn_instance in
    struct tipc_sock. On the connecting side, this information is already
    present in the unused (after the connection is established) part of
    the pre-allocated header, and on the accepting side, we put it there
    when the new socket is created.
    
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Tested-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ace300eecbccaa698e2b472843c74a5f33f7dce8
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sat May 8 03:57:03 2021 +0800

    tipc: skb_linearize the head skb when reassembling msgs
    
    commit b7df21cf1b79ab7026f545e7bf837bd5750ac026 upstream.
    
    It's not a good idea to append the frag skb to a skb's frag_list if
    the frag_list already has skbs from elsewhere, such as this skb was
    created by pskb_copy() where the frag_list was cloned (all the skbs
    in it were skb_get'ed) and shared by multiple skbs.
    
    However, the new appended frag skb should have been only seen by the
    current skb. Otherwise, it will cause use after free crashes as this
    appended frag skb are seen by multiple skbs but it only got skb_get
    called once.
    
    The same thing happens with a skb updated by pskb_may_pull() with a
    skb_cloned skb. Li Shuang has reported quite a few crashes caused
    by this when doing testing over macvlan devices:
    
      [] kernel BUG at net/core/skbuff.c:1970!
      [] Call Trace:
      []  skb_clone+0x4d/0xb0
      []  macvlan_broadcast+0xd8/0x160 [macvlan]
      []  macvlan_process_broadcast+0x148/0x150 [macvlan]
      []  process_one_work+0x1a7/0x360
      []  worker_thread+0x30/0x390
    
      [] kernel BUG at mm/usercopy.c:102!
      [] Call Trace:
      []  __check_heap_object+0xd3/0x100
      []  __check_object_size+0xff/0x16b
      []  simple_copy_to_iter+0x1c/0x30
      []  __skb_datagram_iter+0x7d/0x310
      []  __skb_datagram_iter+0x2a5/0x310
      []  skb_copy_datagram_iter+0x3b/0x90
      []  tipc_recvmsg+0x14a/0x3a0 [tipc]
      []  ____sys_recvmsg+0x91/0x150
      []  ___sys_recvmsg+0x7b/0xc0
    
      [] kernel BUG at mm/slub.c:305!
      [] Call Trace:
      []  <IRQ>
      []  kmem_cache_free+0x3ff/0x400
      []  __netif_receive_skb_core+0x12c/0xc40
      []  ? kmem_cache_alloc+0x12e/0x270
      []  netif_receive_skb_internal+0x3d/0xb0
      []  ? get_rx_page_info+0x8e/0xa0 [be2net]
      []  be_poll+0x6ef/0xd00 [be2net]
      []  ? irq_exit+0x4f/0x100
      []  net_rx_action+0x149/0x3b0
    
      ...
    
    This patch is to fix it by linearizing the head skb if it has frag_list
    set in tipc_buf_append(). Note that we choose to do this before calling
    skb_unshare(), as __skb_linearize() will avoid skb_copy(). Also, we can
    not just drop the frag_list either as the early time.
    
    Fixes: 45c8b7b175ce ("tipc: allow non-linear first fragment buffer")
    Reported-by: Li Shuang <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b9f5b7ad4ac3af006443f535b1ce7bff1d130d7d
Author: Xin Long <lucien.xin@gmail.com>
Date:   Mon May 17 02:28:58 2021 +0800

    tipc: wait and exit until all work queues are done
    
    commit 04c26faa51d1e2fe71cf13c45791f5174c37f986 upstream.
    
    On some host, a crash could be triggered simply by repeating these
    commands several times:
    
      # modprobe tipc
      # tipc bearer enable media udp name UDP1 localip 127.0.0.1
      # rmmod tipc
    
      [] BUG: unable to handle kernel paging request at ffffffffc096bb00
      [] Workqueue: events 0xffffffffc096bb00
      [] Call Trace:
      []  ? process_one_work+0x1a7/0x360
      []  ? worker_thread+0x30/0x390
      []  ? create_worker+0x1a0/0x1a0
      []  ? kthread+0x116/0x130
      []  ? kthread_flush_work_fn+0x10/0x10
      []  ? ret_from_fork+0x35/0x40
    
    When removing the TIPC module, the UDP tunnel sock will be delayed to
    release in a work queue as sock_release() can't be done in rtnl_lock().
    If the work queue is schedule to run after the TIPC module is removed,
    kernel will crash as the work queue function cleanup_beareri() code no
    longer exists when trying to invoke it.
    
    To fix it, this patch introduce a member wq_count in tipc_net to track
    the numbers of work queues in schedule, and  wait and exit until all
    work queues are done in tipc_exit_net().
    
    Fixes: d0f91938bede ("tipc: add ip/udp media type")
    Reported-by: Shuang Li <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5875860d7a751bfb295915a2a51e6f104ab6159f
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Fri May 14 08:23:03 2021 +0700

    Revert "net:tipc: Fix a double free in tipc_sk_mcast_rcv"
    
    commit 75016891357a628d2b8acc09e2b9b2576c18d318 upstream.
    
    This reverts commit 6bf24dc0cc0cc43b29ba344b66d78590e687e046.
    Above fix is not correct and caused memory leak issue.
    
    Fixes: 6bf24dc0cc0c ("net:tipc: Fix a double free in tipc_sk_mcast_rcv")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Acked-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6da24cfc83ba4f97ea44fc7ae9999a006101755c
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sat May 8 03:57:03 2021 +0800

    tipc: skb_linearize the head skb when reassembling msgs
    
    commit b7df21cf1b79ab7026f545e7bf837bd5750ac026 upstream.
    
    It's not a good idea to append the frag skb to a skb's frag_list if
    the frag_list already has skbs from elsewhere, such as this skb was
    created by pskb_copy() where the frag_list was cloned (all the skbs
    in it were skb_get'ed) and shared by multiple skbs.
    
    However, the new appended frag skb should have been only seen by the
    current skb. Otherwise, it will cause use after free crashes as this
    appended frag skb are seen by multiple skbs but it only got skb_get
    called once.
    
    The same thing happens with a skb updated by pskb_may_pull() with a
    skb_cloned skb. Li Shuang has reported quite a few crashes caused
    by this when doing testing over macvlan devices:
    
      [] kernel BUG at net/core/skbuff.c:1970!
      [] Call Trace:
      []  skb_clone+0x4d/0xb0
      []  macvlan_broadcast+0xd8/0x160 [macvlan]
      []  macvlan_process_broadcast+0x148/0x150 [macvlan]
      []  process_one_work+0x1a7/0x360
      []  worker_thread+0x30/0x390
    
      [] kernel BUG at mm/usercopy.c:102!
      [] Call Trace:
      []  __check_heap_object+0xd3/0x100
      []  __check_object_size+0xff/0x16b
      []  simple_copy_to_iter+0x1c/0x30
      []  __skb_datagram_iter+0x7d/0x310
      []  __skb_datagram_iter+0x2a5/0x310
      []  skb_copy_datagram_iter+0x3b/0x90
      []  tipc_recvmsg+0x14a/0x3a0 [tipc]
      []  ____sys_recvmsg+0x91/0x150
      []  ___sys_recvmsg+0x7b/0xc0
    
      [] kernel BUG at mm/slub.c:305!
      [] Call Trace:
      []  <IRQ>
      []  kmem_cache_free+0x3ff/0x400
      []  __netif_receive_skb_core+0x12c/0xc40
      []  ? kmem_cache_alloc+0x12e/0x270
      []  netif_receive_skb_internal+0x3d/0xb0
      []  ? get_rx_page_info+0x8e/0xa0 [be2net]
      []  be_poll+0x6ef/0xd00 [be2net]
      []  ? irq_exit+0x4f/0x100
      []  net_rx_action+0x149/0x3b0
    
      ...
    
    This patch is to fix it by linearizing the head skb if it has frag_list
    set in tipc_buf_append(). Note that we choose to do this before calling
    skb_unshare(), as __skb_linearize() will avoid skb_copy(). Also, we can
    not just drop the frag_list either as the early time.
    
    Fixes: 45c8b7b175ce ("tipc: allow non-linear first fragment buffer")
    Reported-by: Li Shuang <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5195ec5e365a2a9331bfeb585b613a6e94f98dba
Author: Xin Long <lucien.xin@gmail.com>
Date:   Mon May 17 02:28:58 2021 +0800

    tipc: wait and exit until all work queues are done
    
    commit 04c26faa51d1e2fe71cf13c45791f5174c37f986 upstream.
    
    On some host, a crash could be triggered simply by repeating these
    commands several times:
    
      # modprobe tipc
      # tipc bearer enable media udp name UDP1 localip 127.0.0.1
      # rmmod tipc
    
      [] BUG: unable to handle kernel paging request at ffffffffc096bb00
      [] Workqueue: events 0xffffffffc096bb00
      [] Call Trace:
      []  ? process_one_work+0x1a7/0x360
      []  ? worker_thread+0x30/0x390
      []  ? create_worker+0x1a0/0x1a0
      []  ? kthread+0x116/0x130
      []  ? kthread_flush_work_fn+0x10/0x10
      []  ? ret_from_fork+0x35/0x40
    
    When removing the TIPC module, the UDP tunnel sock will be delayed to
    release in a work queue as sock_release() can't be done in rtnl_lock().
    If the work queue is schedule to run after the TIPC module is removed,
    kernel will crash as the work queue function cleanup_beareri() code no
    longer exists when trying to invoke it.
    
    To fix it, this patch introduce a member wq_count in tipc_net to track
    the numbers of work queues in schedule, and  wait and exit until all
    work queues are done in tipc_exit_net().
    
    Fixes: d0f91938bede ("tipc: add ip/udp media type")
    Reported-by: Shuang Li <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0aa2212940b85f71b81383e6bfdf70c439eeff04
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Fri May 14 08:23:03 2021 +0700

    Revert "net:tipc: Fix a double free in tipc_sk_mcast_rcv"
    
    commit 75016891357a628d2b8acc09e2b9b2576c18d318 upstream.
    
    This reverts commit 6bf24dc0cc0cc43b29ba344b66d78590e687e046.
    Above fix is not correct and caused memory leak issue.
    
    Fixes: 6bf24dc0cc0c ("net:tipc: Fix a double free in tipc_sk_mcast_rcv")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Acked-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 64d17ec9f1ded042c4b188d15734f33486ed9966
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sat May 8 03:57:03 2021 +0800

    tipc: skb_linearize the head skb when reassembling msgs
    
    commit b7df21cf1b79ab7026f545e7bf837bd5750ac026 upstream.
    
    It's not a good idea to append the frag skb to a skb's frag_list if
    the frag_list already has skbs from elsewhere, such as this skb was
    created by pskb_copy() where the frag_list was cloned (all the skbs
    in it were skb_get'ed) and shared by multiple skbs.
    
    However, the new appended frag skb should have been only seen by the
    current skb. Otherwise, it will cause use after free crashes as this
    appended frag skb are seen by multiple skbs but it only got skb_get
    called once.
    
    The same thing happens with a skb updated by pskb_may_pull() with a
    skb_cloned skb. Li Shuang has reported quite a few crashes caused
    by this when doing testing over macvlan devices:
    
      [] kernel BUG at net/core/skbuff.c:1970!
      [] Call Trace:
      []  skb_clone+0x4d/0xb0
      []  macvlan_broadcast+0xd8/0x160 [macvlan]
      []  macvlan_process_broadcast+0x148/0x150 [macvlan]
      []  process_one_work+0x1a7/0x360
      []  worker_thread+0x30/0x390
    
      [] kernel BUG at mm/usercopy.c:102!
      [] Call Trace:
      []  __check_heap_object+0xd3/0x100
      []  __check_object_size+0xff/0x16b
      []  simple_copy_to_iter+0x1c/0x30
      []  __skb_datagram_iter+0x7d/0x310
      []  __skb_datagram_iter+0x2a5/0x310
      []  skb_copy_datagram_iter+0x3b/0x90
      []  tipc_recvmsg+0x14a/0x3a0 [tipc]
      []  ____sys_recvmsg+0x91/0x150
      []  ___sys_recvmsg+0x7b/0xc0
    
      [] kernel BUG at mm/slub.c:305!
      [] Call Trace:
      []  <IRQ>
      []  kmem_cache_free+0x3ff/0x400
      []  __netif_receive_skb_core+0x12c/0xc40
      []  ? kmem_cache_alloc+0x12e/0x270
      []  netif_receive_skb_internal+0x3d/0xb0
      []  ? get_rx_page_info+0x8e/0xa0 [be2net]
      []  be_poll+0x6ef/0xd00 [be2net]
      []  ? irq_exit+0x4f/0x100
      []  net_rx_action+0x149/0x3b0
    
      ...
    
    This patch is to fix it by linearizing the head skb if it has frag_list
    set in tipc_buf_append(). Note that we choose to do this before calling
    skb_unshare(), as __skb_linearize() will avoid skb_copy(). Also, we can
    not just drop the frag_list either as the early time.
    
    Fixes: 45c8b7b175ce ("tipc: allow non-linear first fragment buffer")
    Reported-by: Li Shuang <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d1f76dfadaf8f47ed1753f97dbcbd41c16215ffa
Author: Xin Long <lucien.xin@gmail.com>
Date:   Mon May 17 02:28:58 2021 +0800

    tipc: wait and exit until all work queues are done
    
    commit 04c26faa51d1e2fe71cf13c45791f5174c37f986 upstream.
    
    On some host, a crash could be triggered simply by repeating these
    commands several times:
    
      # modprobe tipc
      # tipc bearer enable media udp name UDP1 localip 127.0.0.1
      # rmmod tipc
    
      [] BUG: unable to handle kernel paging request at ffffffffc096bb00
      [] Workqueue: events 0xffffffffc096bb00
      [] Call Trace:
      []  ? process_one_work+0x1a7/0x360
      []  ? worker_thread+0x30/0x390
      []  ? create_worker+0x1a0/0x1a0
      []  ? kthread+0x116/0x130
      []  ? kthread_flush_work_fn+0x10/0x10
      []  ? ret_from_fork+0x35/0x40
    
    When removing the TIPC module, the UDP tunnel sock will be delayed to
    release in a work queue as sock_release() can't be done in rtnl_lock().
    If the work queue is schedule to run after the TIPC module is removed,
    kernel will crash as the work queue function cleanup_beareri() code no
    longer exists when trying to invoke it.
    
    To fix it, this patch introduce a member wq_count in tipc_net to track
    the numbers of work queues in schedule, and  wait and exit until all
    work queues are done in tipc_exit_net().
    
    Fixes: d0f91938bede ("tipc: add ip/udp media type")
    Reported-by: Shuang Li <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bdd37028a026a3cb93a0ff8486cbaad553109d8e
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Fri May 14 08:23:03 2021 +0700

    Revert "net:tipc: Fix a double free in tipc_sk_mcast_rcv"
    
    commit 75016891357a628d2b8acc09e2b9b2576c18d318 upstream.
    
    This reverts commit 6bf24dc0cc0cc43b29ba344b66d78590e687e046.
    Above fix is not correct and caused memory leak issue.
    
    Fixes: 6bf24dc0cc0c ("net:tipc: Fix a double free in tipc_sk_mcast_rcv")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Acked-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4b1761898861117c97066aea6c58f68a7787f0bf
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sat May 8 03:57:03 2021 +0800

    tipc: skb_linearize the head skb when reassembling msgs
    
    commit b7df21cf1b79ab7026f545e7bf837bd5750ac026 upstream.
    
    It's not a good idea to append the frag skb to a skb's frag_list if
    the frag_list already has skbs from elsewhere, such as this skb was
    created by pskb_copy() where the frag_list was cloned (all the skbs
    in it were skb_get'ed) and shared by multiple skbs.
    
    However, the new appended frag skb should have been only seen by the
    current skb. Otherwise, it will cause use after free crashes as this
    appended frag skb are seen by multiple skbs but it only got skb_get
    called once.
    
    The same thing happens with a skb updated by pskb_may_pull() with a
    skb_cloned skb. Li Shuang has reported quite a few crashes caused
    by this when doing testing over macvlan devices:
    
      [] kernel BUG at net/core/skbuff.c:1970!
      [] Call Trace:
      []  skb_clone+0x4d/0xb0
      []  macvlan_broadcast+0xd8/0x160 [macvlan]
      []  macvlan_process_broadcast+0x148/0x150 [macvlan]
      []  process_one_work+0x1a7/0x360
      []  worker_thread+0x30/0x390
    
      [] kernel BUG at mm/usercopy.c:102!
      [] Call Trace:
      []  __check_heap_object+0xd3/0x100
      []  __check_object_size+0xff/0x16b
      []  simple_copy_to_iter+0x1c/0x30
      []  __skb_datagram_iter+0x7d/0x310
      []  __skb_datagram_iter+0x2a5/0x310
      []  skb_copy_datagram_iter+0x3b/0x90
      []  tipc_recvmsg+0x14a/0x3a0 [tipc]
      []  ____sys_recvmsg+0x91/0x150
      []  ___sys_recvmsg+0x7b/0xc0
    
      [] kernel BUG at mm/slub.c:305!
      [] Call Trace:
      []  <IRQ>
      []  kmem_cache_free+0x3ff/0x400
      []  __netif_receive_skb_core+0x12c/0xc40
      []  ? kmem_cache_alloc+0x12e/0x270
      []  netif_receive_skb_internal+0x3d/0xb0
      []  ? get_rx_page_info+0x8e/0xa0 [be2net]
      []  be_poll+0x6ef/0xd00 [be2net]
      []  ? irq_exit+0x4f/0x100
      []  net_rx_action+0x149/0x3b0
    
      ...
    
    This patch is to fix it by linearizing the head skb if it has frag_list
    set in tipc_buf_append(). Note that we choose to do this before calling
    skb_unshare(), as __skb_linearize() will avoid skb_copy(). Also, we can
    not just drop the frag_list either as the early time.
    
    Fixes: 45c8b7b175ce ("tipc: allow non-linear first fragment buffer")
    Reported-by: Li Shuang <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb803a1edeff61487a038c5c1e8820ab831e7a52
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Fri May 14 08:23:03 2021 +0700

    Revert "net:tipc: Fix a double free in tipc_sk_mcast_rcv"
    
    commit 75016891357a628d2b8acc09e2b9b2576c18d318 upstream.
    
    This reverts commit 6bf24dc0cc0cc43b29ba344b66d78590e687e046.
    Above fix is not correct and caused memory leak issue.
    
    Fixes: 6bf24dc0cc0c ("net:tipc: Fix a double free in tipc_sk_mcast_rcv")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Acked-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 436d650d374329a591c30339a91fa5078052ed1e
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sat May 8 03:57:03 2021 +0800

    tipc: skb_linearize the head skb when reassembling msgs
    
    commit b7df21cf1b79ab7026f545e7bf837bd5750ac026 upstream.
    
    It's not a good idea to append the frag skb to a skb's frag_list if
    the frag_list already has skbs from elsewhere, such as this skb was
    created by pskb_copy() where the frag_list was cloned (all the skbs
    in it were skb_get'ed) and shared by multiple skbs.
    
    However, the new appended frag skb should have been only seen by the
    current skb. Otherwise, it will cause use after free crashes as this
    appended frag skb are seen by multiple skbs but it only got skb_get
    called once.
    
    The same thing happens with a skb updated by pskb_may_pull() with a
    skb_cloned skb. Li Shuang has reported quite a few crashes caused
    by this when doing testing over macvlan devices:
    
      [] kernel BUG at net/core/skbuff.c:1970!
      [] Call Trace:
      []  skb_clone+0x4d/0xb0
      []  macvlan_broadcast+0xd8/0x160 [macvlan]
      []  macvlan_process_broadcast+0x148/0x150 [macvlan]
      []  process_one_work+0x1a7/0x360
      []  worker_thread+0x30/0x390
    
      [] kernel BUG at mm/usercopy.c:102!
      [] Call Trace:
      []  __check_heap_object+0xd3/0x100
      []  __check_object_size+0xff/0x16b
      []  simple_copy_to_iter+0x1c/0x30
      []  __skb_datagram_iter+0x7d/0x310
      []  __skb_datagram_iter+0x2a5/0x310
      []  skb_copy_datagram_iter+0x3b/0x90
      []  tipc_recvmsg+0x14a/0x3a0 [tipc]
      []  ____sys_recvmsg+0x91/0x150
      []  ___sys_recvmsg+0x7b/0xc0
    
      [] kernel BUG at mm/slub.c:305!
      [] Call Trace:
      []  <IRQ>
      []  kmem_cache_free+0x3ff/0x400
      []  __netif_receive_skb_core+0x12c/0xc40
      []  ? kmem_cache_alloc+0x12e/0x270
      []  netif_receive_skb_internal+0x3d/0xb0
      []  ? get_rx_page_info+0x8e/0xa0 [be2net]
      []  be_poll+0x6ef/0xd00 [be2net]
      []  ? irq_exit+0x4f/0x100
      []  net_rx_action+0x149/0x3b0
    
      ...
    
    This patch is to fix it by linearizing the head skb if it has frag_list
    set in tipc_buf_append(). Note that we choose to do this before calling
    skb_unshare(), as __skb_linearize() will avoid skb_copy(). Also, we can
    not just drop the frag_list either as the early time.
    
    Fixes: 45c8b7b175ce ("tipc: allow non-linear first fragment buffer")
    Reported-by: Li Shuang <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eff80392fe9ca7c8bfbedb0d61f1de63ebd8b0a5
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Fri May 14 08:23:03 2021 +0700

    Revert "net:tipc: Fix a double free in tipc_sk_mcast_rcv"
    
    commit 75016891357a628d2b8acc09e2b9b2576c18d318 upstream.
    
    This reverts commit 6bf24dc0cc0cc43b29ba344b66d78590e687e046.
    Above fix is not correct and caused memory leak issue.
    
    Fixes: 6bf24dc0cc0c ("net:tipc: Fix a double free in tipc_sk_mcast_rcv")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Acked-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5489f30bb78ff0dafb4229a69632afc2ba20765c
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sat May 8 03:57:03 2021 +0800

    tipc: skb_linearize the head skb when reassembling msgs
    
    commit b7df21cf1b79ab7026f545e7bf837bd5750ac026 upstream.
    
    It's not a good idea to append the frag skb to a skb's frag_list if
    the frag_list already has skbs from elsewhere, such as this skb was
    created by pskb_copy() where the frag_list was cloned (all the skbs
    in it were skb_get'ed) and shared by multiple skbs.
    
    However, the new appended frag skb should have been only seen by the
    current skb. Otherwise, it will cause use after free crashes as this
    appended frag skb are seen by multiple skbs but it only got skb_get
    called once.
    
    The same thing happens with a skb updated by pskb_may_pull() with a
    skb_cloned skb. Li Shuang has reported quite a few crashes caused
    by this when doing testing over macvlan devices:
    
      [] kernel BUG at net/core/skbuff.c:1970!
      [] Call Trace:
      []  skb_clone+0x4d/0xb0
      []  macvlan_broadcast+0xd8/0x160 [macvlan]
      []  macvlan_process_broadcast+0x148/0x150 [macvlan]
      []  process_one_work+0x1a7/0x360
      []  worker_thread+0x30/0x390
    
      [] kernel BUG at mm/usercopy.c:102!
      [] Call Trace:
      []  __check_heap_object+0xd3/0x100
      []  __check_object_size+0xff/0x16b
      []  simple_copy_to_iter+0x1c/0x30
      []  __skb_datagram_iter+0x7d/0x310
      []  __skb_datagram_iter+0x2a5/0x310
      []  skb_copy_datagram_iter+0x3b/0x90
      []  tipc_recvmsg+0x14a/0x3a0 [tipc]
      []  ____sys_recvmsg+0x91/0x150
      []  ___sys_recvmsg+0x7b/0xc0
    
      [] kernel BUG at mm/slub.c:305!
      [] Call Trace:
      []  <IRQ>
      []  kmem_cache_free+0x3ff/0x400
      []  __netif_receive_skb_core+0x12c/0xc40
      []  ? kmem_cache_alloc+0x12e/0x270
      []  netif_receive_skb_internal+0x3d/0xb0
      []  ? get_rx_page_info+0x8e/0xa0 [be2net]
      []  be_poll+0x6ef/0xd00 [be2net]
      []  ? irq_exit+0x4f/0x100
      []  net_rx_action+0x149/0x3b0
    
      ...
    
    This patch is to fix it by linearizing the head skb if it has frag_list
    set in tipc_buf_append(). Note that we choose to do this before calling
    skb_unshare(), as __skb_linearize() will avoid skb_copy(). Also, we can
    not just drop the frag_list either as the early time.
    
    Fixes: 45c8b7b175ce ("tipc: allow non-linear first fragment buffer")
    Reported-by: Li Shuang <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9d8a165f747974113c5215539c08a220566f8c64
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Fri May 14 08:23:03 2021 +0700

    Revert "net:tipc: Fix a double free in tipc_sk_mcast_rcv"
    
    commit 75016891357a628d2b8acc09e2b9b2576c18d318 upstream.
    
    This reverts commit 6bf24dc0cc0cc43b29ba344b66d78590e687e046.
    Above fix is not correct and caused memory leak issue.
    
    Fixes: 6bf24dc0cc0c ("net:tipc: Fix a double free in tipc_sk_mcast_rcv")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Acked-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b2c8d28c34b3070407cb1741f9ba3f15d0284b8b
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sat May 8 03:57:03 2021 +0800

    tipc: skb_linearize the head skb when reassembling msgs
    
    commit b7df21cf1b79ab7026f545e7bf837bd5750ac026 upstream.
    
    It's not a good idea to append the frag skb to a skb's frag_list if
    the frag_list already has skbs from elsewhere, such as this skb was
    created by pskb_copy() where the frag_list was cloned (all the skbs
    in it were skb_get'ed) and shared by multiple skbs.
    
    However, the new appended frag skb should have been only seen by the
    current skb. Otherwise, it will cause use after free crashes as this
    appended frag skb are seen by multiple skbs but it only got skb_get
    called once.
    
    The same thing happens with a skb updated by pskb_may_pull() with a
    skb_cloned skb. Li Shuang has reported quite a few crashes caused
    by this when doing testing over macvlan devices:
    
      [] kernel BUG at net/core/skbuff.c:1970!
      [] Call Trace:
      []  skb_clone+0x4d/0xb0
      []  macvlan_broadcast+0xd8/0x160 [macvlan]
      []  macvlan_process_broadcast+0x148/0x150 [macvlan]
      []  process_one_work+0x1a7/0x360
      []  worker_thread+0x30/0x390
    
      [] kernel BUG at mm/usercopy.c:102!
      [] Call Trace:
      []  __check_heap_object+0xd3/0x100
      []  __check_object_size+0xff/0x16b
      []  simple_copy_to_iter+0x1c/0x30
      []  __skb_datagram_iter+0x7d/0x310
      []  __skb_datagram_iter+0x2a5/0x310
      []  skb_copy_datagram_iter+0x3b/0x90
      []  tipc_recvmsg+0x14a/0x3a0 [tipc]
      []  ____sys_recvmsg+0x91/0x150
      []  ___sys_recvmsg+0x7b/0xc0
    
      [] kernel BUG at mm/slub.c:305!
      [] Call Trace:
      []  <IRQ>
      []  kmem_cache_free+0x3ff/0x400
      []  __netif_receive_skb_core+0x12c/0xc40
      []  ? kmem_cache_alloc+0x12e/0x270
      []  netif_receive_skb_internal+0x3d/0xb0
      []  ? get_rx_page_info+0x8e/0xa0 [be2net]
      []  be_poll+0x6ef/0xd00 [be2net]
      []  ? irq_exit+0x4f/0x100
      []  net_rx_action+0x149/0x3b0
    
      ...
    
    This patch is to fix it by linearizing the head skb if it has frag_list
    set in tipc_buf_append(). Note that we choose to do this before calling
    skb_unshare(), as __skb_linearize() will avoid skb_copy(). Also, we can
    not just drop the frag_list either as the early time.
    
    Fixes: 45c8b7b175ce ("tipc: allow non-linear first fragment buffer")
    Reported-by: Li Shuang <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3917fe8933b3abfcd9f40bc354ec6dbfcdf61c1c
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Fri May 14 08:23:03 2021 +0700

    Revert "net:tipc: Fix a double free in tipc_sk_mcast_rcv"
    
    commit 75016891357a628d2b8acc09e2b9b2576c18d318 upstream.
    
    This reverts commit 6bf24dc0cc0cc43b29ba344b66d78590e687e046.
    Above fix is not correct and caused memory leak issue.
    
    Fixes: 6bf24dc0cc0c ("net:tipc: Fix a double free in tipc_sk_mcast_rcv")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Acked-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d7c5303fbc8ac874ae3e597a5a0d3707dc0230b4
Merge: 7ac3a1c1ae51 62f3415db237
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed May 26 17:44:49 2021 -1000

    Merge tag 'net-5.13-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from Jakub Kicinski:
     "Networking fixes for 5.13-rc4, including fixes from bpf, netfilter,
      can and wireless trees. Notably including fixes for the recently
      announced "FragAttacks" WiFi vulnerabilities. Rather large batch,
      touching some core parts of the stack, too, but nothing hair-raising.
    
      Current release - regressions:
    
       - tipc: make node link identity publish thread safe
    
       - dsa: felix: re-enable TAS guard band mode
    
       - stmmac: correct clocks enabled in stmmac_vlan_rx_kill_vid()
    
       - stmmac: fix system hang if change mac address after interface
         ifdown
    
      Current release - new code bugs:
    
       - mptcp: avoid OOB access in setsockopt()
    
       - bpf: Fix nested bpf_bprintf_prepare with more per-cpu buffers
    
       - ethtool: stats: fix a copy-paste error - init correct array size
    
      Previous releases - regressions:
    
       - sched: fix packet stuck problem for lockless qdisc
    
       - net: really orphan skbs tied to closing sk
    
       - mlx4: fix EEPROM dump support
    
       - bpf: fix alu32 const subreg bound tracking on bitwise operations
    
       - bpf: fix mask direction swap upon off reg sign change
    
       - bpf, offload: reorder offload callback 'prepare' in verifier
    
       - stmmac: Fix MAC WoL not working if PHY does not support WoL
    
       - packetmmap: fix only tx timestamp on request
    
       - tipc: skb_linearize the head skb when reassembling msgs
    
      Previous releases - always broken:
    
       - mac80211: address recent "FragAttacks" vulnerabilities
    
       - mac80211: do not accept/forward invalid EAPOL frames
    
       - mptcp: avoid potential error message floods
    
       - bpf, ringbuf: deny reserve of buffers larger than ringbuf to
         prevent out of buffer writes
    
       - bpf: forbid trampoline attach for functions with variable arguments
    
       - bpf: add deny list of functions to prevent inf recursion of tracing
         programs
    
       - tls splice: check SPLICE_F_NONBLOCK instead of MSG_DONTWAIT
    
       - can: isotp: prevent race between isotp_bind() and
         isotp_setsockopt()
    
       - netfilter: nft_set_pipapo_avx2: Add irq_fpu_usable() check,
         fallback to non-AVX2 version
    
      Misc:
    
       - bpf: add kconfig knob for disabling unpriv bpf by default"
    
    * tag 'net-5.13-rc4' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (172 commits)
      net: phy: Document phydev::dev_flags bits allocation
      mptcp: validate 'id' when stopping the ADD_ADDR retransmit timer
      mptcp: avoid error message on infinite mapping
      mptcp: drop unconditional pr_warn on bad opt
      mptcp: avoid OOB access in setsockopt()
      nfp: update maintainer and mailing list addresses
      net: mvpp2: add buffer header handling in RX
      bnx2x: Fix missing error code in bnx2x_iov_init_one()
      net: zero-initialize tc skb extension on allocation
      net: hns: Fix kernel-doc
      sctp: fix the proc_handler for sysctl encap_port
      sctp: add the missing setting for asoc encap_port
      bpf, selftests: Adjust few selftest result_unpriv outcomes
      bpf: No need to simulate speculative domain for immediates
      bpf: Fix mask direction swap upon off reg sign change
      bpf: Wrap aux data inside bpf_sanitize_info container
      bpf: Fix BPF_LSM kconfig symbol dependency
      selftests/bpf: Add test for l3 use of bpf_redirect_peer
      bpftool: Add sock_release help info for cgroup attach/prog load command
      net: dsa: microchip: enable phy errata workaround on 9567
      ...

commit cd80b4b7fdd155fddca31d0d82d8997b4f576ccb
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Mar 11 10:33:22 2021 +0700

    tipc: convert dest node's address to network order
    
    [ Upstream commit 1980d37565061ab44bdc2f9e4da477d3b9752e81 ]
    
    (struct tipc_link_info)->dest is in network order (__be32), so we must
    convert the value to network order before assigning. The problem detected
    by sparse:
    
    net/tipc/netlink_compat.c:699:24: warning: incorrect type in assignment (different base types)
    net/tipc/netlink_compat.c:699:24:    expected restricted __be32 [usertype] dest
    net/tipc/netlink_compat.c:699:24:    got int
    
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6ba5c4e5bf9890a215f46613eb72cf9da80a8a7d
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Mar 11 10:33:22 2021 +0700

    tipc: convert dest node's address to network order
    
    [ Upstream commit 1980d37565061ab44bdc2f9e4da477d3b9752e81 ]
    
    (struct tipc_link_info)->dest is in network order (__be32), so we must
    convert the value to network order before assigning. The problem detected
    by sparse:
    
    net/tipc/netlink_compat.c:699:24: warning: incorrect type in assignment (different base types)
    net/tipc/netlink_compat.c:699:24:    expected restricted __be32 [usertype] dest
    net/tipc/netlink_compat.c:699:24:    got int
    
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 315938b0afe8002fd3cb49297fafb74fc51280bb
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Mar 11 10:33:22 2021 +0700

    tipc: convert dest node's address to network order
    
    [ Upstream commit 1980d37565061ab44bdc2f9e4da477d3b9752e81 ]
    
    (struct tipc_link_info)->dest is in network order (__be32), so we must
    convert the value to network order before assigning. The problem detected
    by sparse:
    
    net/tipc/netlink_compat.c:699:24: warning: incorrect type in assignment (different base types)
    net/tipc/netlink_compat.c:699:24:    expected restricted __be32 [usertype] dest
    net/tipc/netlink_compat.c:699:24:    got int
    
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7ef25db0e32e9c65ba15e2bd29538d2bf3edac24
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Mar 11 10:33:22 2021 +0700

    tipc: convert dest node's address to network order
    
    [ Upstream commit 1980d37565061ab44bdc2f9e4da477d3b9752e81 ]
    
    (struct tipc_link_info)->dest is in network order (__be32), so we must
    convert the value to network order before assigning. The problem detected
    by sparse:
    
    net/tipc/netlink_compat.c:699:24: warning: incorrect type in assignment (different base types)
    net/tipc/netlink_compat.c:699:24:    expected restricted __be32 [usertype] dest
    net/tipc/netlink_compat.c:699:24:    got int
    
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e7610fc2dda78fb3930f3a9bb64585c76cccda52
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Mar 11 10:33:22 2021 +0700

    tipc: convert dest node's address to network order
    
    [ Upstream commit 1980d37565061ab44bdc2f9e4da477d3b9752e81 ]
    
    (struct tipc_link_info)->dest is in network order (__be32), so we must
    convert the value to network order before assigning. The problem detected
    by sparse:
    
    net/tipc/netlink_compat.c:699:24: warning: incorrect type in assignment (different base types)
    net/tipc/netlink_compat.c:699:24:    expected restricted __be32 [usertype] dest
    net/tipc/netlink_compat.c:699:24:    got int
    
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d0513cce80823078dd4078b26c77d2dba08d8b5f
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Mar 11 10:33:22 2021 +0700

    tipc: convert dest node's address to network order
    
    [ Upstream commit 1980d37565061ab44bdc2f9e4da477d3b9752e81 ]
    
    (struct tipc_link_info)->dest is in network order (__be32), so we must
    convert the value to network order before assigning. The problem detected
    by sparse:
    
    net/tipc/netlink_compat.c:699:24: warning: incorrect type in assignment (different base types)
    net/tipc/netlink_compat.c:699:24:    expected restricted __be32 [usertype] dest
    net/tipc/netlink_compat.c:699:24:    got int
    
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3d1bede85632a6330bacb77a90eeeb5a956a78d0
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Mar 11 10:33:22 2021 +0700

    tipc: convert dest node's address to network order
    
    [ Upstream commit 1980d37565061ab44bdc2f9e4da477d3b9752e81 ]
    
    (struct tipc_link_info)->dest is in network order (__be32), so we must
    convert the value to network order before assigning. The problem detected
    by sparse:
    
    net/tipc/netlink_compat.c:699:24: warning: incorrect type in assignment (different base types)
    net/tipc/netlink_compat.c:699:24:    expected restricted __be32 [usertype] dest
    net/tipc/netlink_compat.c:699:24:    got int
    
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aee46e847d19a539e7950c1c5807706c14abaff1
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Mar 11 10:33:22 2021 +0700

    tipc: convert dest node's address to network order
    
    [ Upstream commit 1980d37565061ab44bdc2f9e4da477d3b9752e81 ]
    
    (struct tipc_link_info)->dest is in network order (__be32), so we must
    convert the value to network order before assigning. The problem detected
    by sparse:
    
    net/tipc/netlink_compat.c:699:24: warning: incorrect type in assignment (different base types)
    net/tipc/netlink_compat.c:699:24:    expected restricted __be32 [usertype] dest
    net/tipc/netlink_compat.c:699:24:    got int
    
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be07f056396d6bb40963c45a02951c566ddeef8e
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue May 18 10:09:08 2021 +0800

    tipc: simplify the finalize work queue
    
    This patch is to use "struct work_struct" for the finalize work queue
    instead of "struct tipc_net_work", as it can get the "net" and "addr"
    from tipc_net's other members and there is no need to add extra net
    and addr in tipc_net by defining "struct tipc_net_work".
    
    Note that it's safe to get net from tn->bcl as bcl is always released
    after the finalize work queue is done.
    
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1c78ba4924107b06de60f887a0d20d9b3e9bc9e2
Author: Gustavo A. R. Silva <gustavoars@kernel.org>
Date:   Fri Nov 20 12:40:08 2020 -0600

    tipc: Fix fall-through warnings for Clang
    
    In preparation to enable -Wimplicit-fallthrough for Clang, fix a warning
    by explicitly adding a break statement instead of letting the code fall
    through to the next case.
    
    Link: https://github.com/KSPP/linux/issues/115
    Signed-off-by: Gustavo A. R. Silva <gustavoars@kernel.org>

commit 04c26faa51d1e2fe71cf13c45791f5174c37f986
Author: Xin Long <lucien.xin@gmail.com>
Date:   Mon May 17 02:28:58 2021 +0800

    tipc: wait and exit until all work queues are done
    
    On some host, a crash could be triggered simply by repeating these
    commands several times:
    
      # modprobe tipc
      # tipc bearer enable media udp name UDP1 localip 127.0.0.1
      # rmmod tipc
    
      [] BUG: unable to handle kernel paging request at ffffffffc096bb00
      [] Workqueue: events 0xffffffffc096bb00
      [] Call Trace:
      []  ? process_one_work+0x1a7/0x360
      []  ? worker_thread+0x30/0x390
      []  ? create_worker+0x1a0/0x1a0
      []  ? kthread+0x116/0x130
      []  ? kthread_flush_work_fn+0x10/0x10
      []  ? ret_from_fork+0x35/0x40
    
    When removing the TIPC module, the UDP tunnel sock will be delayed to
    release in a work queue as sock_release() can't be done in rtnl_lock().
    If the work queue is schedule to run after the TIPC module is removed,
    kernel will crash as the work queue function cleanup_beareri() code no
    longer exists when trying to invoke it.
    
    To fix it, this patch introduce a member wq_count in tipc_net to track
    the numbers of work queues in schedule, and  wait and exit until all
    work queues are done in tipc_exit_net().
    
    Fixes: d0f91938bede ("tipc: add ip/udp media type")
    Reported-by: Shuang Li <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b7df21cf1b79ab7026f545e7bf837bd5750ac026
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sat May 8 03:57:03 2021 +0800

    tipc: skb_linearize the head skb when reassembling msgs
    
    It's not a good idea to append the frag skb to a skb's frag_list if
    the frag_list already has skbs from elsewhere, such as this skb was
    created by pskb_copy() where the frag_list was cloned (all the skbs
    in it were skb_get'ed) and shared by multiple skbs.
    
    However, the new appended frag skb should have been only seen by the
    current skb. Otherwise, it will cause use after free crashes as this
    appended frag skb are seen by multiple skbs but it only got skb_get
    called once.
    
    The same thing happens with a skb updated by pskb_may_pull() with a
    skb_cloned skb. Li Shuang has reported quite a few crashes caused
    by this when doing testing over macvlan devices:
    
      [] kernel BUG at net/core/skbuff.c:1970!
      [] Call Trace:
      []  skb_clone+0x4d/0xb0
      []  macvlan_broadcast+0xd8/0x160 [macvlan]
      []  macvlan_process_broadcast+0x148/0x150 [macvlan]
      []  process_one_work+0x1a7/0x360
      []  worker_thread+0x30/0x390
    
      [] kernel BUG at mm/usercopy.c:102!
      [] Call Trace:
      []  __check_heap_object+0xd3/0x100
      []  __check_object_size+0xff/0x16b
      []  simple_copy_to_iter+0x1c/0x30
      []  __skb_datagram_iter+0x7d/0x310
      []  __skb_datagram_iter+0x2a5/0x310
      []  skb_copy_datagram_iter+0x3b/0x90
      []  tipc_recvmsg+0x14a/0x3a0 [tipc]
      []  ____sys_recvmsg+0x91/0x150
      []  ___sys_recvmsg+0x7b/0xc0
    
      [] kernel BUG at mm/slub.c:305!
      [] Call Trace:
      []  <IRQ>
      []  kmem_cache_free+0x3ff/0x400
      []  __netif_receive_skb_core+0x12c/0xc40
      []  ? kmem_cache_alloc+0x12e/0x270
      []  netif_receive_skb_internal+0x3d/0xb0
      []  ? get_rx_page_info+0x8e/0xa0 [be2net]
      []  be_poll+0x6ef/0xd00 [be2net]
      []  ? irq_exit+0x4f/0x100
      []  net_rx_action+0x149/0x3b0
    
      ...
    
    This patch is to fix it by linearizing the head skb if it has frag_list
    set in tipc_buf_append(). Note that we choose to do this before calling
    skb_unshare(), as __skb_linearize() will avoid skb_copy(). Also, we can
    not just drop the frag_list either as the early time.
    
    Fixes: 45c8b7b175ce ("tipc: allow non-linear first fragment buffer")
    Reported-by: Li Shuang <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 75016891357a628d2b8acc09e2b9b2576c18d318
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Fri May 14 08:23:03 2021 +0700

    Revert "net:tipc: Fix a double free in tipc_sk_mcast_rcv"
    
    This reverts commit 6bf24dc0cc0cc43b29ba344b66d78590e687e046.
    Above fix is not correct and caused memory leak issue.
    
    Fixes: 6bf24dc0cc0c ("net:tipc: Fix a double free in tipc_sk_mcast_rcv")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Acked-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5528b6014c49f7b150f38919b27f5e267ec61111
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Wed Mar 31 16:36:02 2021 +0800

    net/tipc: fix missing destroy_workqueue() on error in tipc_crypto_start()
    
    [ Upstream commit ac1db7acea67777be1ba86e36e058c479eab6508 ]
    
    Add the missing destroy_workqueue() before return from
    tipc_crypto_start() in the error handling case.
    
    Fixes: 1ef6f7c9390f ("tipc: add automatic session key exchange")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit aff396dadefdba6a07f39571835332d2ba9fa9ca
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Wed Mar 31 16:36:02 2021 +0800

    net/tipc: fix missing destroy_workqueue() on error in tipc_crypto_start()
    
    [ Upstream commit ac1db7acea67777be1ba86e36e058c479eab6508 ]
    
    Add the missing destroy_workqueue() before return from
    tipc_crypto_start() in the error handling case.
    
    Fixes: 1ef6f7c9390f ("tipc: add automatic session key exchange")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit faba97afdbb9d3ae4f4829603dc6513f0ad133b6
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Wed Mar 31 16:36:02 2021 +0800

    net/tipc: fix missing destroy_workqueue() on error in tipc_crypto_start()
    
    [ Upstream commit ac1db7acea67777be1ba86e36e058c479eab6508 ]
    
    Add the missing destroy_workqueue() before return from
    tipc_crypto_start() in the error handling case.
    
    Fixes: 1ef6f7c9390f ("tipc: add automatic session key exchange")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3058e01d31bbdbe50e02cafece2b22817a6a0eae
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Mon May 10 09:57:38 2021 +0700

    tipc: make node link identity publish thread safe
    
    The using of the node address and node link identity are not thread safe,
    meaning that two publications may be published the same values, as result
    one of them will get failure because of already existing in the name table.
    To avoid this we have to use the node address and node link identity values
    from inside the node item's write lock protection.
    
    Fixes: 50a3499ab853 ("tipc: simplify signature of tipc_namtbl_publish()")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c8728e4d18716b776f2b2fd5c88763db5d76dbc7
Author: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
Date:   Sun Mar 28 00:30:29 2021 -0700

    net:tipc: Fix a double free in tipc_sk_mcast_rcv
    
    [ Upstream commit 6bf24dc0cc0cc43b29ba344b66d78590e687e046 ]
    
    In the if(skb_peek(arrvq) == skb) branch, it calls __skb_dequeue(arrvq) to get
    the skb by skb = skb_peek(arrvq). Then __skb_dequeue() unlinks the skb from arrvq
    and returns the skb which equals to skb_peek(arrvq). After __skb_dequeue(arrvq)
    finished, the skb is freed by kfree_skb(__skb_dequeue(arrvq)) in the first time.
    
    Unfortunately, the same skb is freed in the second time by kfree_skb(skb) after
    the branch completed.
    
    My patch removes kfree_skb() in the if(skb_peek(arrvq) == skb) branch, because
    this skb will be freed by kfree_skb(skb) finally.
    
    Fixes: cb1b728096f54 ("tipc: eliminate race condition at multicast reception")
    Signed-off-by: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d0d49f2c1b904a1d3134f55fcc73abe1ce573be0
Author: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
Date:   Sun Mar 28 00:30:29 2021 -0700

    net:tipc: Fix a double free in tipc_sk_mcast_rcv
    
    [ Upstream commit 6bf24dc0cc0cc43b29ba344b66d78590e687e046 ]
    
    In the if(skb_peek(arrvq) == skb) branch, it calls __skb_dequeue(arrvq) to get
    the skb by skb = skb_peek(arrvq). Then __skb_dequeue() unlinks the skb from arrvq
    and returns the skb which equals to skb_peek(arrvq). After __skb_dequeue(arrvq)
    finished, the skb is freed by kfree_skb(__skb_dequeue(arrvq)) in the first time.
    
    Unfortunately, the same skb is freed in the second time by kfree_skb(skb) after
    the branch completed.
    
    My patch removes kfree_skb() in the if(skb_peek(arrvq) == skb) branch, because
    this skb will be freed by kfree_skb(skb) finally.
    
    Fixes: cb1b728096f54 ("tipc: eliminate race condition at multicast reception")
    Signed-off-by: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 439340105136c98a3cc247e806ed816ddcf0715d
Author: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
Date:   Sun Mar 28 00:30:29 2021 -0700

    net:tipc: Fix a double free in tipc_sk_mcast_rcv
    
    [ Upstream commit 6bf24dc0cc0cc43b29ba344b66d78590e687e046 ]
    
    In the if(skb_peek(arrvq) == skb) branch, it calls __skb_dequeue(arrvq) to get
    the skb by skb = skb_peek(arrvq). Then __skb_dequeue() unlinks the skb from arrvq
    and returns the skb which equals to skb_peek(arrvq). After __skb_dequeue(arrvq)
    finished, the skb is freed by kfree_skb(__skb_dequeue(arrvq)) in the first time.
    
    Unfortunately, the same skb is freed in the second time by kfree_skb(skb) after
    the branch completed.
    
    My patch removes kfree_skb() in the if(skb_peek(arrvq) == skb) branch, because
    this skb will be freed by kfree_skb(skb) finally.
    
    Fixes: cb1b728096f54 ("tipc: eliminate race condition at multicast reception")
    Signed-off-by: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 67f7aba24445293c05e8879f77c1326b2be89587
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Apr 6 10:45:23 2021 +0800

    tipc: increment the tmp aead refcnt before attaching it
    
    [ Upstream commit 2a2403ca3add03f542f6b34bef9f74649969b06d ]
    
    Li Shuang found a NULL pointer dereference crash in her testing:
    
      [] BUG: unable to handle kernel NULL pointer dereference at 0000000000000020
      [] RIP: 0010:tipc_crypto_rcv_complete+0xc8/0x7e0 [tipc]
      [] Call Trace:
      []  <IRQ>
      []  tipc_crypto_rcv+0x2d9/0x8f0 [tipc]
      []  tipc_rcv+0x2fc/0x1120 [tipc]
      []  tipc_udp_recv+0xc6/0x1e0 [tipc]
      []  udpv6_queue_rcv_one_skb+0x16a/0x460
      []  udp6_unicast_rcv_skb.isra.35+0x41/0xa0
      []  ip6_protocol_deliver_rcu+0x23b/0x4c0
      []  ip6_input+0x3d/0xb0
      []  ipv6_rcv+0x395/0x510
      []  __netif_receive_skb_core+0x5fc/0xc40
    
    This is caused by NULL returned by tipc_aead_get(), and then crashed when
    dereferencing it later in tipc_crypto_rcv_complete(). This might happen
    when tipc_crypto_rcv_complete() is called by two threads at the same time:
    the tmp attached by tipc_crypto_key_attach() in one thread may be released
    by the one attached by that in the other thread.
    
    This patch is to fix it by incrementing the tmp's refcnt before attaching
    it instead of calling tipc_aead_get() after attaching it.
    
    Fixes: fc1b6d6de220 ("tipc: introduce TIPC encryption & authentication")
    Reported-by: Li Shuang <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be1aab34608957c2fbec39ce28a68566e7e6fdb3
Author: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
Date:   Sun Mar 28 00:30:29 2021 -0700

    net:tipc: Fix a double free in tipc_sk_mcast_rcv
    
    [ Upstream commit 6bf24dc0cc0cc43b29ba344b66d78590e687e046 ]
    
    In the if(skb_peek(arrvq) == skb) branch, it calls __skb_dequeue(arrvq) to get
    the skb by skb = skb_peek(arrvq). Then __skb_dequeue() unlinks the skb from arrvq
    and returns the skb which equals to skb_peek(arrvq). After __skb_dequeue(arrvq)
    finished, the skb is freed by kfree_skb(__skb_dequeue(arrvq)) in the first time.
    
    Unfortunately, the same skb is freed in the second time by kfree_skb(skb) after
    the branch completed.
    
    My patch removes kfree_skb() in the if(skb_peek(arrvq) == skb) branch, because
    this skb will be freed by kfree_skb(skb) finally.
    
    Fixes: cb1b728096f54 ("tipc: eliminate race condition at multicast reception")
    Signed-off-by: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f473789db5369f1cc33b6490276029ab58716c34
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Apr 6 10:45:23 2021 +0800

    tipc: increment the tmp aead refcnt before attaching it
    
    [ Upstream commit 2a2403ca3add03f542f6b34bef9f74649969b06d ]
    
    Li Shuang found a NULL pointer dereference crash in her testing:
    
      [] BUG: unable to handle kernel NULL pointer dereference at 0000000000000020
      [] RIP: 0010:tipc_crypto_rcv_complete+0xc8/0x7e0 [tipc]
      [] Call Trace:
      []  <IRQ>
      []  tipc_crypto_rcv+0x2d9/0x8f0 [tipc]
      []  tipc_rcv+0x2fc/0x1120 [tipc]
      []  tipc_udp_recv+0xc6/0x1e0 [tipc]
      []  udpv6_queue_rcv_one_skb+0x16a/0x460
      []  udp6_unicast_rcv_skb.isra.35+0x41/0xa0
      []  ip6_protocol_deliver_rcu+0x23b/0x4c0
      []  ip6_input+0x3d/0xb0
      []  ipv6_rcv+0x395/0x510
      []  __netif_receive_skb_core+0x5fc/0xc40
    
    This is caused by NULL returned by tipc_aead_get(), and then crashed when
    dereferencing it later in tipc_crypto_rcv_complete(). This might happen
    when tipc_crypto_rcv_complete() is called by two threads at the same time:
    the tmp attached by tipc_crypto_key_attach() in one thread may be released
    by the one attached by that in the other thread.
    
    This patch is to fix it by incrementing the tmp's refcnt before attaching
    it instead of calling tipc_aead_get() after attaching it.
    
    Fixes: fc1b6d6de220 ("tipc: introduce TIPC encryption & authentication")
    Reported-by: Li Shuang <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e5e5ecc9d9fd28ef3f3e5276198b7d2f31acbe0b
Author: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
Date:   Sun Mar 28 00:30:29 2021 -0700

    net:tipc: Fix a double free in tipc_sk_mcast_rcv
    
    [ Upstream commit 6bf24dc0cc0cc43b29ba344b66d78590e687e046 ]
    
    In the if(skb_peek(arrvq) == skb) branch, it calls __skb_dequeue(arrvq) to get
    the skb by skb = skb_peek(arrvq). Then __skb_dequeue() unlinks the skb from arrvq
    and returns the skb which equals to skb_peek(arrvq). After __skb_dequeue(arrvq)
    finished, the skb is freed by kfree_skb(__skb_dequeue(arrvq)) in the first time.
    
    Unfortunately, the same skb is freed in the second time by kfree_skb(skb) after
    the branch completed.
    
    My patch removes kfree_skb() in the if(skb_peek(arrvq) == skb) branch, because
    this skb will be freed by kfree_skb(skb) finally.
    
    Fixes: cb1b728096f54 ("tipc: eliminate race condition at multicast reception")
    Signed-off-by: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c991ca6a2c79cdb078c27616f13a1f688c7212ab
Author: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
Date:   Sun Mar 28 00:30:29 2021 -0700

    net:tipc: Fix a double free in tipc_sk_mcast_rcv
    
    [ Upstream commit 6bf24dc0cc0cc43b29ba344b66d78590e687e046 ]
    
    In the if(skb_peek(arrvq) == skb) branch, it calls __skb_dequeue(arrvq) to get
    the skb by skb = skb_peek(arrvq). Then __skb_dequeue() unlinks the skb from arrvq
    and returns the skb which equals to skb_peek(arrvq). After __skb_dequeue(arrvq)
    finished, the skb is freed by kfree_skb(__skb_dequeue(arrvq)) in the first time.
    
    Unfortunately, the same skb is freed in the second time by kfree_skb(skb) after
    the branch completed.
    
    My patch removes kfree_skb() in the if(skb_peek(arrvq) == skb) branch, because
    this skb will be freed by kfree_skb(skb) finally.
    
    Fixes: cb1b728096f54 ("tipc: eliminate race condition at multicast reception")
    Signed-off-by: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b89b5b030c1ea2ce4811766faadec0ee49d793b2
Author: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
Date:   Sun Mar 28 00:30:29 2021 -0700

    net:tipc: Fix a double free in tipc_sk_mcast_rcv
    
    [ Upstream commit 6bf24dc0cc0cc43b29ba344b66d78590e687e046 ]
    
    In the if(skb_peek(arrvq) == skb) branch, it calls __skb_dequeue(arrvq) to get
    the skb by skb = skb_peek(arrvq). Then __skb_dequeue() unlinks the skb from arrvq
    and returns the skb which equals to skb_peek(arrvq). After __skb_dequeue(arrvq)
    finished, the skb is freed by kfree_skb(__skb_dequeue(arrvq)) in the first time.
    
    Unfortunately, the same skb is freed in the second time by kfree_skb(skb) after
    the branch completed.
    
    My patch removes kfree_skb() in the if(skb_peek(arrvq) == skb) branch, because
    this skb will be freed by kfree_skb(skb) finally.
    
    Fixes: cb1b728096f54 ("tipc: eliminate race condition at multicast reception")
    Signed-off-by: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8859a44ea0df92bccdc942ef15781ebbfe0ad9f3
Merge: 6c5e6b4ccc1b 4e04e7513b0f
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Fri Apr 9 20:46:01 2021 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Conflicts:
    
    MAINTAINERS
     - keep Chandrasekar
    drivers/net/ethernet/mellanox/mlx5/core/en_main.c
     - simple fix + trust the code re-added to param.c in -next is fine
    include/linux/bpf.h
     - trivial
    include/linux/ethtool.h
     - trivial, fix kdoc while at it
    include/linux/skmsg.h
     - move to relevant place in tcp.c, comment re-wrapped
    net/core/skmsg.c
     - add the sk = sk // sk = NULL around calls
    net/tipc/crypto.c
     - trivial
    
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit a79ace4b312953c5835fafb12adc3cb6878b26bd
Author: Zheng Yongjun <zhengyongjun3@huawei.com>
Date:   Wed Apr 7 09:59:45 2021 +0800

    net: tipc: Fix spelling errors in net/tipc module
    
    These patches fix a series of spelling errors in net/tipc module.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Zheng Yongjun <zhengyongjun3@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2a2403ca3add03f542f6b34bef9f74649969b06d
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Apr 6 10:45:23 2021 +0800

    tipc: increment the tmp aead refcnt before attaching it
    
    Li Shuang found a NULL pointer dereference crash in her testing:
    
      [] BUG: unable to handle kernel NULL pointer dereference at 0000000000000020
      [] RIP: 0010:tipc_crypto_rcv_complete+0xc8/0x7e0 [tipc]
      [] Call Trace:
      []  <IRQ>
      []  tipc_crypto_rcv+0x2d9/0x8f0 [tipc]
      []  tipc_rcv+0x2fc/0x1120 [tipc]
      []  tipc_udp_recv+0xc6/0x1e0 [tipc]
      []  udpv6_queue_rcv_one_skb+0x16a/0x460
      []  udp6_unicast_rcv_skb.isra.35+0x41/0xa0
      []  ip6_protocol_deliver_rcu+0x23b/0x4c0
      []  ip6_input+0x3d/0xb0
      []  ipv6_rcv+0x395/0x510
      []  __netif_receive_skb_core+0x5fc/0xc40
    
    This is caused by NULL returned by tipc_aead_get(), and then crashed when
    dereferencing it later in tipc_crypto_rcv_complete(). This might happen
    when tipc_crypto_rcv_complete() is called by two threads at the same time:
    the tmp attached by tipc_crypto_key_attach() in one thread may be released
    by the one attached by that in the other thread.
    
    This patch is to fix it by incrementing the tmp's refcnt before attaching
    it instead of calling tipc_aead_get() after attaching it.
    
    Fixes: fc1b6d6de220 ("tipc: introduce TIPC encryption & authentication")
    Reported-by: Li Shuang <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 85d091a794f883ea19b421c38e158558f9b24b60
Author: Wu XiangCheng <bobwxc@email.cn>
Date:   Sun Apr 4 22:23:15 2021 +0800

    tipc: Fix a kernel-doc warning in name_table.c
    
    Fix kernel-doc warning:
    
    Documentation/networking/tipc:66: /home/sfr/next/next/net/tipc/name_table.c
      :558: WARNING: Unexpected indentation.
    Documentation/networking/tipc:66: /home/sfr/next/next/net/tipc/name_table.c
      :559: WARNING: Block quote ends without a blank line; unexpected unindent.
    
    Due to blank line missing.
    
    Fixes: 908148bc5046 ("tipc: refactor tipc_sendmsg() and tipc_lookup_anycast()")
    Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Link: https://lore.kernel.org/netdev/20210318172255.63185609@canb.auug.org.au/
    Signed-off-by: Wu XiangCheng <bobwxc@email.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f20a46c3044c3f75232b3d0e2d09af9b25efaf45
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Apr 1 09:30:48 2021 +0700

    tipc: fix unique bearer names sanity check
    
    When enabling a bearer by name, we don't sanity check its name with
    higher slot in bearer list. This may have the effect that the name
    of an already enabled bearer bypasses the check.
    
    To fix the above issue, we just perform an extra checking with all
    existing bearers.
    
    Fixes: cb30a63384bc9 ("tipc: refactor function tipc_enable_bearer()")
    Cc: stable@vger.kernel.org
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ac1db7acea67777be1ba86e36e058c479eab6508
Author: Yang Yingliang <yangyingliang@huawei.com>
Date:   Wed Mar 31 16:36:02 2021 +0800

    net/tipc: fix missing destroy_workqueue() on error in tipc_crypto_start()
    
    Add the missing destroy_workqueue() before return from
    tipc_crypto_start() in the error handling case.
    
    Fixes: 1ef6f7c9390f ("tipc: add automatic session key exchange")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 50f41f2e29ff1980f7edfca40bbf81a4336b9feb
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Mar 15 03:06:58 2021 -0700

    tipc: better validate user input in tipc_nl_retrieve_key()
    
    [ Upstream commit 0217ed2848e8538bcf9172d97ed2eeb4a26041bb ]
    
    Before calling tipc_aead_key_size(ptr), we need to ensure
    we have enough data to dereference ptr->keylen.
    
    We probably also want to make sure tipc_aead_key_size()
    wont overflow with malicious ptr->keylen values.
    
    Syzbot reported:
    
    BUG: KMSAN: uninit-value in __tipc_nl_node_set_key net/tipc/node.c:2971 [inline]
    BUG: KMSAN: uninit-value in tipc_nl_node_set_key+0x9bf/0x13b0 net/tipc/node.c:3023
    CPU: 0 PID: 21060 Comm: syz-executor.5 Not tainted 5.11.0-rc7-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:79 [inline]
     dump_stack+0x21c/0x280 lib/dump_stack.c:120
     kmsan_report+0xfb/0x1e0 mm/kmsan/kmsan_report.c:118
     __msan_warning+0x5f/0xa0 mm/kmsan/kmsan_instr.c:197
     __tipc_nl_node_set_key net/tipc/node.c:2971 [inline]
     tipc_nl_node_set_key+0x9bf/0x13b0 net/tipc/node.c:3023
     genl_family_rcv_msg_doit net/netlink/genetlink.c:739 [inline]
     genl_family_rcv_msg net/netlink/genetlink.c:783 [inline]
     genl_rcv_msg+0x1319/0x1610 net/netlink/genetlink.c:800
     netlink_rcv_skb+0x6fa/0x810 net/netlink/af_netlink.c:2494
     genl_rcv+0x63/0x80 net/netlink/genetlink.c:811
     netlink_unicast_kernel net/netlink/af_netlink.c:1304 [inline]
     netlink_unicast+0x11d6/0x14a0 net/netlink/af_netlink.c:1330
     netlink_sendmsg+0x1740/0x1840 net/netlink/af_netlink.c:1919
     sock_sendmsg_nosec net/socket.c:652 [inline]
     sock_sendmsg net/socket.c:672 [inline]
     ____sys_sendmsg+0xcfc/0x12f0 net/socket.c:2345
     ___sys_sendmsg net/socket.c:2399 [inline]
     __sys_sendmsg+0x714/0x830 net/socket.c:2432
     __compat_sys_sendmsg net/compat.c:347 [inline]
     __do_compat_sys_sendmsg net/compat.c:354 [inline]
     __se_compat_sys_sendmsg+0xa7/0xc0 net/compat.c:351
     __ia32_compat_sys_sendmsg+0x4a/0x70 net/compat.c:351
     do_syscall_32_irqs_on arch/x86/entry/common.c:79 [inline]
     __do_fast_syscall_32+0x102/0x160 arch/x86/entry/common.c:141
     do_fast_syscall_32+0x6a/0xc0 arch/x86/entry/common.c:166
     do_SYSENTER_32+0x73/0x90 arch/x86/entry/common.c:209
     entry_SYSENTER_compat_after_hwframe+0x4d/0x5c
    RIP: 0023:0xf7f60549
    Code: 03 74 c0 01 10 05 03 74 b8 01 10 06 03 74 b4 01 10 07 03 74 b0 01 10 08 03 74 d8 01 00 00 00 00 00 51 52 55 89 e5 0f 34 cd 80 <5d> 5a 59 c3 90 90 90 90 8d b4 26 00 00 00 00 8d b4 26 00 00 00 00
    RSP: 002b:00000000f555a5fc EFLAGS: 00000296 ORIG_RAX: 0000000000000172
    RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 0000000020000200
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000000
    RBP: 0000000000000000 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000000
    R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:121 [inline]
     kmsan_internal_poison_shadow+0x5c/0xf0 mm/kmsan/kmsan.c:104
     kmsan_slab_alloc+0x8d/0xe0 mm/kmsan/kmsan_hooks.c:76
     slab_alloc_node mm/slub.c:2907 [inline]
     __kmalloc_node_track_caller+0xa37/0x1430 mm/slub.c:4527
     __kmalloc_reserve net/core/skbuff.c:142 [inline]
     __alloc_skb+0x2f8/0xb30 net/core/skbuff.c:210
     alloc_skb include/linux/skbuff.h:1099 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1176 [inline]
     netlink_sendmsg+0xdbc/0x1840 net/netlink/af_netlink.c:1894
     sock_sendmsg_nosec net/socket.c:652 [inline]
     sock_sendmsg net/socket.c:672 [inline]
     ____sys_sendmsg+0xcfc/0x12f0 net/socket.c:2345
     ___sys_sendmsg net/socket.c:2399 [inline]
     __sys_sendmsg+0x714/0x830 net/socket.c:2432
     __compat_sys_sendmsg net/compat.c:347 [inline]
     __do_compat_sys_sendmsg net/compat.c:354 [inline]
     __se_compat_sys_sendmsg+0xa7/0xc0 net/compat.c:351
     __ia32_compat_sys_sendmsg+0x4a/0x70 net/compat.c:351
     do_syscall_32_irqs_on arch/x86/entry/common.c:79 [inline]
     __do_fast_syscall_32+0x102/0x160 arch/x86/entry/common.c:141
     do_fast_syscall_32+0x6a/0xc0 arch/x86/entry/common.c:166
     do_SYSENTER_32+0x73/0x90 arch/x86/entry/common.c:209
     entry_SYSENTER_compat_after_hwframe+0x4d/0x5c
    
    Fixes: e1f32190cf7d ("tipc: add support for AEAD key setting via netlink")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Tuong Lien <tuong.t.lien@dektech.com.au>
    Cc: Jon Maloy <jmaloy@redhat.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ea9f7fa30ba71c2550bd556de30eabed6f1b0c6e
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Mar 15 03:06:58 2021 -0700

    tipc: better validate user input in tipc_nl_retrieve_key()
    
    [ Upstream commit 0217ed2848e8538bcf9172d97ed2eeb4a26041bb ]
    
    Before calling tipc_aead_key_size(ptr), we need to ensure
    we have enough data to dereference ptr->keylen.
    
    We probably also want to make sure tipc_aead_key_size()
    wont overflow with malicious ptr->keylen values.
    
    Syzbot reported:
    
    BUG: KMSAN: uninit-value in __tipc_nl_node_set_key net/tipc/node.c:2971 [inline]
    BUG: KMSAN: uninit-value in tipc_nl_node_set_key+0x9bf/0x13b0 net/tipc/node.c:3023
    CPU: 0 PID: 21060 Comm: syz-executor.5 Not tainted 5.11.0-rc7-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:79 [inline]
     dump_stack+0x21c/0x280 lib/dump_stack.c:120
     kmsan_report+0xfb/0x1e0 mm/kmsan/kmsan_report.c:118
     __msan_warning+0x5f/0xa0 mm/kmsan/kmsan_instr.c:197
     __tipc_nl_node_set_key net/tipc/node.c:2971 [inline]
     tipc_nl_node_set_key+0x9bf/0x13b0 net/tipc/node.c:3023
     genl_family_rcv_msg_doit net/netlink/genetlink.c:739 [inline]
     genl_family_rcv_msg net/netlink/genetlink.c:783 [inline]
     genl_rcv_msg+0x1319/0x1610 net/netlink/genetlink.c:800
     netlink_rcv_skb+0x6fa/0x810 net/netlink/af_netlink.c:2494
     genl_rcv+0x63/0x80 net/netlink/genetlink.c:811
     netlink_unicast_kernel net/netlink/af_netlink.c:1304 [inline]
     netlink_unicast+0x11d6/0x14a0 net/netlink/af_netlink.c:1330
     netlink_sendmsg+0x1740/0x1840 net/netlink/af_netlink.c:1919
     sock_sendmsg_nosec net/socket.c:652 [inline]
     sock_sendmsg net/socket.c:672 [inline]
     ____sys_sendmsg+0xcfc/0x12f0 net/socket.c:2345
     ___sys_sendmsg net/socket.c:2399 [inline]
     __sys_sendmsg+0x714/0x830 net/socket.c:2432
     __compat_sys_sendmsg net/compat.c:347 [inline]
     __do_compat_sys_sendmsg net/compat.c:354 [inline]
     __se_compat_sys_sendmsg+0xa7/0xc0 net/compat.c:351
     __ia32_compat_sys_sendmsg+0x4a/0x70 net/compat.c:351
     do_syscall_32_irqs_on arch/x86/entry/common.c:79 [inline]
     __do_fast_syscall_32+0x102/0x160 arch/x86/entry/common.c:141
     do_fast_syscall_32+0x6a/0xc0 arch/x86/entry/common.c:166
     do_SYSENTER_32+0x73/0x90 arch/x86/entry/common.c:209
     entry_SYSENTER_compat_after_hwframe+0x4d/0x5c
    RIP: 0023:0xf7f60549
    Code: 03 74 c0 01 10 05 03 74 b8 01 10 06 03 74 b4 01 10 07 03 74 b0 01 10 08 03 74 d8 01 00 00 00 00 00 51 52 55 89 e5 0f 34 cd 80 <5d> 5a 59 c3 90 90 90 90 8d b4 26 00 00 00 00 8d b4 26 00 00 00 00
    RSP: 002b:00000000f555a5fc EFLAGS: 00000296 ORIG_RAX: 0000000000000172
    RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 0000000020000200
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000000
    RBP: 0000000000000000 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000000
    R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:121 [inline]
     kmsan_internal_poison_shadow+0x5c/0xf0 mm/kmsan/kmsan.c:104
     kmsan_slab_alloc+0x8d/0xe0 mm/kmsan/kmsan_hooks.c:76
     slab_alloc_node mm/slub.c:2907 [inline]
     __kmalloc_node_track_caller+0xa37/0x1430 mm/slub.c:4527
     __kmalloc_reserve net/core/skbuff.c:142 [inline]
     __alloc_skb+0x2f8/0xb30 net/core/skbuff.c:210
     alloc_skb include/linux/skbuff.h:1099 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1176 [inline]
     netlink_sendmsg+0xdbc/0x1840 net/netlink/af_netlink.c:1894
     sock_sendmsg_nosec net/socket.c:652 [inline]
     sock_sendmsg net/socket.c:672 [inline]
     ____sys_sendmsg+0xcfc/0x12f0 net/socket.c:2345
     ___sys_sendmsg net/socket.c:2399 [inline]
     __sys_sendmsg+0x714/0x830 net/socket.c:2432
     __compat_sys_sendmsg net/compat.c:347 [inline]
     __do_compat_sys_sendmsg net/compat.c:354 [inline]
     __se_compat_sys_sendmsg+0xa7/0xc0 net/compat.c:351
     __ia32_compat_sys_sendmsg+0x4a/0x70 net/compat.c:351
     do_syscall_32_irqs_on arch/x86/entry/common.c:79 [inline]
     __do_fast_syscall_32+0x102/0x160 arch/x86/entry/common.c:141
     do_fast_syscall_32+0x6a/0xc0 arch/x86/entry/common.c:166
     do_SYSENTER_32+0x73/0x90 arch/x86/entry/common.c:209
     entry_SYSENTER_compat_after_hwframe+0x4d/0x5c
    
    Fixes: e1f32190cf7d ("tipc: add support for AEAD key setting via netlink")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Tuong Lien <tuong.t.lien@dektech.com.au>
    Cc: Jon Maloy <jmaloy@redhat.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 02fdc14d9bf15d2a2b6aab1f3fd247fe2d70cf1b
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Mon Mar 29 13:17:31 2021 -0400

    tipc: fix htmldoc and smatch warnings
    
    We fix a warning from the htmldoc tool and an indentation error reported
    by smatch. There are no functional changes in this commit.
    
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6bf24dc0cc0cc43b29ba344b66d78590e687e046
Author: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
Date:   Sun Mar 28 00:30:29 2021 -0700

    net:tipc: Fix a double free in tipc_sk_mcast_rcv
    
    In the if(skb_peek(arrvq) == skb) branch, it calls __skb_dequeue(arrvq) to get
    the skb by skb = skb_peek(arrvq). Then __skb_dequeue() unlinks the skb from arrvq
    and returns the skb which equals to skb_peek(arrvq). After __skb_dequeue(arrvq)
    finished, the skb is freed by kfree_skb(__skb_dequeue(arrvq)) in the first time.
    
    Unfortunately, the same skb is freed in the second time by kfree_skb(skb) after
    the branch completed.
    
    My patch removes kfree_skb() in the if(skb_peek(arrvq) == skb) branch, because
    this skb will be freed by kfree_skb(skb) finally.
    
    Fixes: cb1b728096f54 ("tipc: eliminate race condition at multicast reception")
    Signed-off-by: Lv Yunlong <lyl2019@mail.ustc.edu.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit bc556d3edd0d3062b22fb5ce4d192650c4ddc2a6
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Fri Mar 26 16:14:14 2021 +0700

    tipc: fix kernel-doc warnings
    
    Fix kernel-doc warning introduced in
    commit b83e214b2e04 ("tipc: add extack messages for bearer/media failure"):
    
    net/tipc/bearer.c:248: warning: Function parameter or member 'extack' not described in 'tipc_enable_bearer'
    
    Fixes: b83e214b2e04 ("tipc: add extack messages for bearer/media failure")
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b83e214b2e04204f1fc674574362061492c37245
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Mar 25 08:56:41 2021 +0700

    tipc: add extack messages for bearer/media failure
    
    Add extack error messages for -EINVAL errors when enabling bearer,
    getting/setting properties for a media/bearer
    
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b7d5e2973e153053dc2689f03dc0d46acf7fcc67
Merge: 5c9e418b0616 5c8349503d00
Author: David S. Miller <davem@davemloft.net>
Date:   Wed Mar 17 11:51:05 2021 -0700

    Merge branch 'tipc-cleanups-and-simplifications'
    
    Jon Maloy says:
    
    ====================
    tipc: cleanups and simplifications
    
    We do a number of cleanups and simplifications, especially regarding
    call signatures in the binding table. This makes the code easier to
    understand and serves as preparation for upcoming functional additions.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5c8349503d007f9fa46e90b58f48b60830d6e47d
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Tue Mar 16 22:06:23 2021 -0400

    tipc: remove some unnecessary warnings
    
    We move some warning printouts to more strategic locations to avoid
    duplicates and yield more detailed information about the reported
    problem.
    
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Hoang Le <hoang.h.le@dektech.com.au>
    Acked-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Acked-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 429189acac534378cee113b16fe3f18effac1697
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Tue Mar 16 22:06:22 2021 -0400

    tipc: add host-endian copy of user subscription to struct tipc_subscription
    
    We reduce and localize the usage of the tipc_sub_xx() macros by adding a
    corresponding member, with fields set in host-endian format, to struct
    tipc_subscription.
    
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Hoang Le <hoang.h.le@dektech.com.au>
    Acked-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Acked-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 09f78b851ea332a67ebaf7b4463a80a4d0d3d747
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Tue Mar 16 22:06:21 2021 -0400

    tipc: simplify api between binding table and topology server
    
    The function tipc_report_overlap() is called from the binding table
    with numerous parameters taken from an instance of struct publication.
    A closer look reveals that it always is safe to send along a pointer
    to the instance itself, and hence reduce the call signature. We do
    that in this commit.
    
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Hoang Le <hoang.h.le@dektech.com.au>
    Acked-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Acked-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6e44867b01e6998ce4c997dc7921d0fb157c3661
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Tue Mar 16 22:06:20 2021 -0400

    tipc: simplify signature of tipc_find_service()
    
    We reduce the signature of tipc_find_service() and
    tipc_create_service(). The reason for doing this might not
    be obvious, but we plan to let struct tipc_uaddr contain
    information that is relevant for these functions in a later
    commit.
    
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Hoang Le <hoang.h.le@dektech.com.au>
    Acked-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Acked-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 13c9d23f6ac3fa05f1e4f485c1873748912c1d23
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Tue Mar 16 22:06:19 2021 -0400

    tipc: simplify signature of tipc_service_find_range()
    
    We simplify the signatures of the functions tipc_service_create_range()
    and tipc_service_find_range().
    
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Hoang Le <hoang.h.le@dektech.com.au>
    Acked-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Acked-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 006ed14ef82b26605bdc8e2706235e2723d825d3
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Tue Mar 16 22:06:18 2021 -0400

    tipc: simplify signature of tipc_nametbl_lookup_group()
    
    We reduce the signature of tipc_nametbl_lookup_group() by using a
    struct tipc_uaddr pointer. This entails a couple of minor changes in the
    functions tipc_send_group_mcast/anycast/unicast/bcast() in socket.c
    
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Hoang Le <hoang.h.le@dektech.com.au>
    Acked-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Acked-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 833f867089e5fa8dc67c06d4abb51a256e53416c
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Tue Mar 16 22:06:17 2021 -0400

    tipc: simplify signature of tipc_nametbl_lookup_mcast_nodes()
    
    We follow up the preceding commits by reducing the signature of
    the function tipc_nametbl_lookup_mcast_nodes().
    
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Hoang Le <hoang.h.le@dektech.com.au>
    Acked-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Acked-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 45ceea2d403b811cb67cff59cfb395deeda733be
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Tue Mar 16 22:06:16 2021 -0400

    tipc: simplify signature of tipc_namtbl_lookup_mcast_sockets()
    
    We reduce the signature of this function according to the same
    principle as the preceding commits.
    
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Hoang Le <hoang.h.le@dektech.com.au>
    Acked-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Acked-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 908148bc5046e3503f2758d1d94c43766958d5be
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Tue Mar 16 22:06:15 2021 -0400

    tipc: refactor tipc_sendmsg() and tipc_lookup_anycast()
    
    We simplify the signature if function tipc_nametbl_lookup_anycast(),
    using address structures instead of discrete integers.
    
    This also makes it possible to make some improvements to the functions
    __tipc_sendmsg() in socket.c and tipc_msg_lookup_dest() in msg.c.
    
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Hoang Le <hoang.h.le@dektech.com.au>
    Acked-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Acked-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 66db239c4894be1016c3b1afae8e136c28c2da06
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Tue Mar 16 22:06:14 2021 -0400

    tipc: rename binding table lookup functions
    
    The binding table provides four different lookup functions, which
    purpose is not obvious neither by their names nor by the (lack of)
    descriptions.
    
    We now give these functions names that better match their purposes,
    and improve the comments that describe what they are doing.
    
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Hoang Le <hoang.h.le@dektech.com.au>
    Acked-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Acked-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2c98da0790634d0ec08ff7856769ffb56ca7c469
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Tue Mar 16 22:06:13 2021 -0400

    tipc: simplify signature of tipc_nametbl_withdraw() functions
    
    Following the principles of the preceding commits, we reduce
    the number of parameters passed along in tipc_sk_withdraw(),
    tipc_nametbl_withdraw() and associated functions.
    
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Hoang Le <hoang.h.le@dektech.com.au>
    Acked-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Acked-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a45ffa68573e97fdced4b08aef19efda555f18bc
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Tue Mar 16 22:06:12 2021 -0400

    tipc: simplify call signatures for publication creation
    
    We simplify the call signatures for tipc_nametbl_insert_publ() and
    tipc_publ_create() so that fewer parameters are passed around.
    
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Hoang Le <hoang.h.le@dektech.com.au>
    Acked-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Acked-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 50a3499ab853acd5ae5056231a576637af1bed8d
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Tue Mar 16 22:06:11 2021 -0400

    tipc: simplify signature of tipc_namtbl_publish()
    
    Using the new address structure tipc_uaddr, we simplify the signature
    of function tipc_sk_publish() and tipc_namtbl_publish() so that fewer
    parameters need to be passed around.
    
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Hoang Le <hoang.h.le@dektech.com.au>
    Acked-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Acked-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7823f04f34b89ae65de612adf40b314a61969bf0
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Tue Mar 16 22:06:10 2021 -0400

    tipc: introduce new unified address type for internal use
    
    We introduce a simplified version of struct sockaddr_tipc, using
    anonymous unions and structures. Apart from being nicer to work with,
    this struct will come in handy when we in a later commit add another
    address type.
    
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Hoang Le <hoang.h.le@dektech.com.au>
    Acked-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Acked-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b26b5aa9cebe336028421b0641ed762fef81d178
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Tue Mar 16 22:06:09 2021 -0400

    tipc: move creation of publication item one level up in call chain
    
    We instantiate struct publication in tipc_nametbl_insert_publ()
    instead of as currently in tipc_service_insert_publ(). This has the
    advantage that we can pass a pointer to the publication struct to
    the next call levels, instead of the numerous individual parameters
    we pass on now. It also gives us a location to keep the contents of
    the additional fields we will introduce in a later commit.
    
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Hoang Le <hoang.h.le@dektech.com.au>
    Acked-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Acked-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 998d3907f419ed5c27728161d34f5ed14be53fc0
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Tue Mar 16 22:06:08 2021 -0400

    tipc: re-organize members of struct publication
    
    In a future commit we will introduce more members to struct publication.
    In order to keep this structure comprehensible we now group some of
    its current fields into the sub-structures where they really belong,
    - A struct tipc_service_range for the functional address the publication
      is representing.
    - A struct tipc_socket_addr for the socket bound to that service range.
    
    We also rename the stack variable 'publ' to just 'p' in a few places.
    This is just as easy to understand in the given context, and keeps the
    number of wrapped code lines to a minimum.
    
    There are no functional changes in this commit.
    
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Hoang Le <hoang.h.le@dektech.com.au>
    Acked-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Acked-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0217ed2848e8538bcf9172d97ed2eeb4a26041bb
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Mar 15 03:06:58 2021 -0700

    tipc: better validate user input in tipc_nl_retrieve_key()
    
    Before calling tipc_aead_key_size(ptr), we need to ensure
    we have enough data to dereference ptr->keylen.
    
    We probably also want to make sure tipc_aead_key_size()
    wont overflow with malicious ptr->keylen values.
    
    Syzbot reported:
    
    BUG: KMSAN: uninit-value in __tipc_nl_node_set_key net/tipc/node.c:2971 [inline]
    BUG: KMSAN: uninit-value in tipc_nl_node_set_key+0x9bf/0x13b0 net/tipc/node.c:3023
    CPU: 0 PID: 21060 Comm: syz-executor.5 Not tainted 5.11.0-rc7-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:79 [inline]
     dump_stack+0x21c/0x280 lib/dump_stack.c:120
     kmsan_report+0xfb/0x1e0 mm/kmsan/kmsan_report.c:118
     __msan_warning+0x5f/0xa0 mm/kmsan/kmsan_instr.c:197
     __tipc_nl_node_set_key net/tipc/node.c:2971 [inline]
     tipc_nl_node_set_key+0x9bf/0x13b0 net/tipc/node.c:3023
     genl_family_rcv_msg_doit net/netlink/genetlink.c:739 [inline]
     genl_family_rcv_msg net/netlink/genetlink.c:783 [inline]
     genl_rcv_msg+0x1319/0x1610 net/netlink/genetlink.c:800
     netlink_rcv_skb+0x6fa/0x810 net/netlink/af_netlink.c:2494
     genl_rcv+0x63/0x80 net/netlink/genetlink.c:811
     netlink_unicast_kernel net/netlink/af_netlink.c:1304 [inline]
     netlink_unicast+0x11d6/0x14a0 net/netlink/af_netlink.c:1330
     netlink_sendmsg+0x1740/0x1840 net/netlink/af_netlink.c:1919
     sock_sendmsg_nosec net/socket.c:652 [inline]
     sock_sendmsg net/socket.c:672 [inline]
     ____sys_sendmsg+0xcfc/0x12f0 net/socket.c:2345
     ___sys_sendmsg net/socket.c:2399 [inline]
     __sys_sendmsg+0x714/0x830 net/socket.c:2432
     __compat_sys_sendmsg net/compat.c:347 [inline]
     __do_compat_sys_sendmsg net/compat.c:354 [inline]
     __se_compat_sys_sendmsg+0xa7/0xc0 net/compat.c:351
     __ia32_compat_sys_sendmsg+0x4a/0x70 net/compat.c:351
     do_syscall_32_irqs_on arch/x86/entry/common.c:79 [inline]
     __do_fast_syscall_32+0x102/0x160 arch/x86/entry/common.c:141
     do_fast_syscall_32+0x6a/0xc0 arch/x86/entry/common.c:166
     do_SYSENTER_32+0x73/0x90 arch/x86/entry/common.c:209
     entry_SYSENTER_compat_after_hwframe+0x4d/0x5c
    RIP: 0023:0xf7f60549
    Code: 03 74 c0 01 10 05 03 74 b8 01 10 06 03 74 b4 01 10 07 03 74 b0 01 10 08 03 74 d8 01 00 00 00 00 00 51 52 55 89 e5 0f 34 cd 80 <5d> 5a 59 c3 90 90 90 90 8d b4 26 00 00 00 00 8d b4 26 00 00 00 00
    RSP: 002b:00000000f555a5fc EFLAGS: 00000296 ORIG_RAX: 0000000000000172
    RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 0000000020000200
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000000
    RBP: 0000000000000000 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000000
    R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:121 [inline]
     kmsan_internal_poison_shadow+0x5c/0xf0 mm/kmsan/kmsan.c:104
     kmsan_slab_alloc+0x8d/0xe0 mm/kmsan/kmsan_hooks.c:76
     slab_alloc_node mm/slub.c:2907 [inline]
     __kmalloc_node_track_caller+0xa37/0x1430 mm/slub.c:4527
     __kmalloc_reserve net/core/skbuff.c:142 [inline]
     __alloc_skb+0x2f8/0xb30 net/core/skbuff.c:210
     alloc_skb include/linux/skbuff.h:1099 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1176 [inline]
     netlink_sendmsg+0xdbc/0x1840 net/netlink/af_netlink.c:1894
     sock_sendmsg_nosec net/socket.c:652 [inline]
     sock_sendmsg net/socket.c:672 [inline]
     ____sys_sendmsg+0xcfc/0x12f0 net/socket.c:2345
     ___sys_sendmsg net/socket.c:2399 [inline]
     __sys_sendmsg+0x714/0x830 net/socket.c:2432
     __compat_sys_sendmsg net/compat.c:347 [inline]
     __do_compat_sys_sendmsg net/compat.c:354 [inline]
     __se_compat_sys_sendmsg+0xa7/0xc0 net/compat.c:351
     __ia32_compat_sys_sendmsg+0x4a/0x70 net/compat.c:351
     do_syscall_32_irqs_on arch/x86/entry/common.c:79 [inline]
     __do_fast_syscall_32+0x102/0x160 arch/x86/entry/common.c:141
     do_fast_syscall_32+0x6a/0xc0 arch/x86/entry/common.c:166
     do_SYSENTER_32+0x73/0x90 arch/x86/entry/common.c:209
     entry_SYSENTER_compat_after_hwframe+0x4d/0x5c
    
    Fixes: e1f32190cf7d ("tipc: add support for AEAD key setting via netlink")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Tuong Lien <tuong.t.lien@dektech.com.au>
    Cc: Jon Maloy <jmaloy@redhat.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 97bc84bbd4de3c060b68aea4d546c7f21c4d6814
Author: Hoang Huu Le <hoang.h.le@dektech.com.au>
Date:   Thu Mar 11 10:33:23 2021 +0700

    tipc: clean up warnings detected by sparse
    
    This patch fixes the following warning from sparse:
    
    net/tipc/monitor.c:263:35: warning: incorrect type in assignment (different base types)
    net/tipc/monitor.c:263:35:    expected unsigned int
    net/tipc/monitor.c:263:35:    got restricted __be32 [usertype]
    [...]
    net/tipc/node.c:374:13: warning: context imbalance in 'tipc_node_read_lock' - wrong count at exit
    net/tipc/node.c:379:13: warning: context imbalance in 'tipc_node_read_unlock' - unexpected unlock
    net/tipc/node.c:384:13: warning: context imbalance in 'tipc_node_write_lock' - wrong count at exit
    net/tipc/node.c:389:13: warning: context imbalance in 'tipc_node_write_unlock_fast' - unexpected unlock
    net/tipc/node.c:404:17: warning: context imbalance in 'tipc_node_write_unlock' - unexpected unlock
    [...]
    net/tipc/crypto.c:1201:9: warning: incorrect type in initializer (different address spaces)
    net/tipc/crypto.c:1201:9:    expected struct tipc_aead [noderef] __rcu *__tmp
    net/tipc/crypto.c:1201:9:    got struct tipc_aead *
    [...]
    
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Huu Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1980d37565061ab44bdc2f9e4da477d3b9752e81
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Mar 11 10:33:22 2021 +0700

    tipc: convert dest node's address to network order
    
    (struct tipc_link_info)->dest is in network order (__be32), so we must
    convert the value to network order before assigning. The problem detected
    by sparse:
    
    net/tipc/netlink_compat.c:699:24: warning: incorrect type in assignment (different base types)
    net/tipc/netlink_compat.c:699:24:    expected restricted __be32 [usertype] dest
    net/tipc/netlink_compat.c:699:24:    got int
    
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2a9063b7fface7e665e9be62e14aa8b0ed207e2f
Author: Hoang Huu Le <hoang.h.le@dektech.com.au>
Date:   Wed Jan 27 09:51:23 2021 +0700

    tipc: remove duplicated code in tipc_msg_create
    
    Remove a duplicate code checking for header size in tipc_msg_create() as
    it's already being done in tipc_msg_init().
    
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Huu Le <hoang.h.le@dektech.com.au>
    Link: https://lore.kernel.org/r/20210127025123.6390-1-hoang.h.le@dektech.com.au
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 60b8b4e6310b7dfc551ba68e8639eeaf70a0b2dd
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Fri Jan 8 14:13:37 2021 +0700

    tipc: fix NULL deref in tipc_link_xmit()
    
    [ Upstream commit b77413446408fdd256599daf00d5be72b5f3e7c6 ]
    
    The buffer list can have zero skb as following path:
    tipc_named_node_up()->tipc_node_xmit()->tipc_link_xmit(), so
    we need to check the list before casting an &sk_buff.
    
    Fault report:
     [] tipc: Bulk publication failure
     [] general protection fault, probably for non-canonical [#1] PREEMPT [...]
     [] KASAN: null-ptr-deref in range [0x00000000000000c8-0x00000000000000cf]
     [] CPU: 0 PID: 0 Comm: swapper/0 Kdump: loaded Not tainted 5.10.0-rc4+ #2
     [] Hardware name: Bochs ..., BIOS Bochs 01/01/2011
     [] RIP: 0010:tipc_link_xmit+0xc1/0x2180
     [] Code: 24 b8 00 00 00 00 4d 39 ec 4c 0f 44 e8 e8 d7 0a 10 f9 48 [...]
     [] RSP: 0018:ffffc90000006ea0 EFLAGS: 00010202
     [] RAX: dffffc0000000000 RBX: ffff8880224da000 RCX: 1ffff11003d3cc0d
     [] RDX: 0000000000000019 RSI: ffffffff886007b9 RDI: 00000000000000c8
     [] RBP: ffffc90000007018 R08: 0000000000000001 R09: fffff52000000ded
     [] R10: 0000000000000003 R11: fffff52000000dec R12: ffffc90000007148
     [] R13: 0000000000000000 R14: 0000000000000000 R15: ffffc90000007018
     [] FS:  0000000000000000(0000) GS:ffff888037400000(0000) knlGS:000[...]
     [] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     [] CR2: 00007fffd2db5000 CR3: 000000002b08f000 CR4: 00000000000006f0
    
    Fixes: af9b028e270fd ("tipc: make media xmit call outside node spinlock context")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Link: https://lore.kernel.org/r/20210108071337.3598-1-hoang.h.le@dektech.com.au
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 56e8947bcf814d195eb4954b4821868803d3dd67
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Fri Jan 8 14:13:37 2021 +0700

    tipc: fix NULL deref in tipc_link_xmit()
    
    [ Upstream commit b77413446408fdd256599daf00d5be72b5f3e7c6 ]
    
    The buffer list can have zero skb as following path:
    tipc_named_node_up()->tipc_node_xmit()->tipc_link_xmit(), so
    we need to check the list before casting an &sk_buff.
    
    Fault report:
     [] tipc: Bulk publication failure
     [] general protection fault, probably for non-canonical [#1] PREEMPT [...]
     [] KASAN: null-ptr-deref in range [0x00000000000000c8-0x00000000000000cf]
     [] CPU: 0 PID: 0 Comm: swapper/0 Kdump: loaded Not tainted 5.10.0-rc4+ #2
     [] Hardware name: Bochs ..., BIOS Bochs 01/01/2011
     [] RIP: 0010:tipc_link_xmit+0xc1/0x2180
     [] Code: 24 b8 00 00 00 00 4d 39 ec 4c 0f 44 e8 e8 d7 0a 10 f9 48 [...]
     [] RSP: 0018:ffffc90000006ea0 EFLAGS: 00010202
     [] RAX: dffffc0000000000 RBX: ffff8880224da000 RCX: 1ffff11003d3cc0d
     [] RDX: 0000000000000019 RSI: ffffffff886007b9 RDI: 00000000000000c8
     [] RBP: ffffc90000007018 R08: 0000000000000001 R09: fffff52000000ded
     [] R10: 0000000000000003 R11: fffff52000000dec R12: ffffc90000007148
     [] R13: 0000000000000000 R14: 0000000000000000 R15: ffffc90000007018
     [] FS:  0000000000000000(0000) GS:ffff888037400000(0000) knlGS:000[...]
     [] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     [] CR2: 00007fffd2db5000 CR3: 000000002b08f000 CR4: 00000000000006f0
    
    Fixes: af9b028e270fd ("tipc: make media xmit call outside node spinlock context")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Link: https://lore.kernel.org/r/20210108071337.3598-1-hoang.h.le@dektech.com.au
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d1d3dddcb3f26000e66cd0a9b8b16f7c2eb41bb
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Fri Jan 8 14:13:37 2021 +0700

    tipc: fix NULL deref in tipc_link_xmit()
    
    [ Upstream commit b77413446408fdd256599daf00d5be72b5f3e7c6 ]
    
    The buffer list can have zero skb as following path:
    tipc_named_node_up()->tipc_node_xmit()->tipc_link_xmit(), so
    we need to check the list before casting an &sk_buff.
    
    Fault report:
     [] tipc: Bulk publication failure
     [] general protection fault, probably for non-canonical [#1] PREEMPT [...]
     [] KASAN: null-ptr-deref in range [0x00000000000000c8-0x00000000000000cf]
     [] CPU: 0 PID: 0 Comm: swapper/0 Kdump: loaded Not tainted 5.10.0-rc4+ #2
     [] Hardware name: Bochs ..., BIOS Bochs 01/01/2011
     [] RIP: 0010:tipc_link_xmit+0xc1/0x2180
     [] Code: 24 b8 00 00 00 00 4d 39 ec 4c 0f 44 e8 e8 d7 0a 10 f9 48 [...]
     [] RSP: 0018:ffffc90000006ea0 EFLAGS: 00010202
     [] RAX: dffffc0000000000 RBX: ffff8880224da000 RCX: 1ffff11003d3cc0d
     [] RDX: 0000000000000019 RSI: ffffffff886007b9 RDI: 00000000000000c8
     [] RBP: ffffc90000007018 R08: 0000000000000001 R09: fffff52000000ded
     [] R10: 0000000000000003 R11: fffff52000000dec R12: ffffc90000007148
     [] R13: 0000000000000000 R14: 0000000000000000 R15: ffffc90000007018
     [] FS:  0000000000000000(0000) GS:ffff888037400000(0000) knlGS:000[...]
     [] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     [] CR2: 00007fffd2db5000 CR3: 000000002b08f000 CR4: 00000000000006f0
    
    Fixes: af9b028e270fd ("tipc: make media xmit call outside node spinlock context")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Link: https://lore.kernel.org/r/20210108071337.3598-1-hoang.h.le@dektech.com.au
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ed0b5bb8cf71b4b9f995d4b3763648674fa032a
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Fri Jan 8 14:13:37 2021 +0700

    tipc: fix NULL deref in tipc_link_xmit()
    
    [ Upstream commit b77413446408fdd256599daf00d5be72b5f3e7c6 ]
    
    The buffer list can have zero skb as following path:
    tipc_named_node_up()->tipc_node_xmit()->tipc_link_xmit(), so
    we need to check the list before casting an &sk_buff.
    
    Fault report:
     [] tipc: Bulk publication failure
     [] general protection fault, probably for non-canonical [#1] PREEMPT [...]
     [] KASAN: null-ptr-deref in range [0x00000000000000c8-0x00000000000000cf]
     [] CPU: 0 PID: 0 Comm: swapper/0 Kdump: loaded Not tainted 5.10.0-rc4+ #2
     [] Hardware name: Bochs ..., BIOS Bochs 01/01/2011
     [] RIP: 0010:tipc_link_xmit+0xc1/0x2180
     [] Code: 24 b8 00 00 00 00 4d 39 ec 4c 0f 44 e8 e8 d7 0a 10 f9 48 [...]
     [] RSP: 0018:ffffc90000006ea0 EFLAGS: 00010202
     [] RAX: dffffc0000000000 RBX: ffff8880224da000 RCX: 1ffff11003d3cc0d
     [] RDX: 0000000000000019 RSI: ffffffff886007b9 RDI: 00000000000000c8
     [] RBP: ffffc90000007018 R08: 0000000000000001 R09: fffff52000000ded
     [] R10: 0000000000000003 R11: fffff52000000dec R12: ffffc90000007148
     [] R13: 0000000000000000 R14: 0000000000000000 R15: ffffc90000007018
     [] FS:  0000000000000000(0000) GS:ffff888037400000(0000) knlGS:000[...]
     [] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     [] CR2: 00007fffd2db5000 CR3: 000000002b08f000 CR4: 00000000000006f0
    
    Fixes: af9b028e270fd ("tipc: make media xmit call outside node spinlock context")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Link: https://lore.kernel.org/r/20210108071337.3598-1-hoang.h.le@dektech.com.au
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 310014f572a59b311c175321265a08c9adfced0c
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Fri Jan 8 14:13:37 2021 +0700

    tipc: fix NULL deref in tipc_link_xmit()
    
    [ Upstream commit b77413446408fdd256599daf00d5be72b5f3e7c6 ]
    
    The buffer list can have zero skb as following path:
    tipc_named_node_up()->tipc_node_xmit()->tipc_link_xmit(), so
    we need to check the list before casting an &sk_buff.
    
    Fault report:
     [] tipc: Bulk publication failure
     [] general protection fault, probably for non-canonical [#1] PREEMPT [...]
     [] KASAN: null-ptr-deref in range [0x00000000000000c8-0x00000000000000cf]
     [] CPU: 0 PID: 0 Comm: swapper/0 Kdump: loaded Not tainted 5.10.0-rc4+ #2
     [] Hardware name: Bochs ..., BIOS Bochs 01/01/2011
     [] RIP: 0010:tipc_link_xmit+0xc1/0x2180
     [] Code: 24 b8 00 00 00 00 4d 39 ec 4c 0f 44 e8 e8 d7 0a 10 f9 48 [...]
     [] RSP: 0018:ffffc90000006ea0 EFLAGS: 00010202
     [] RAX: dffffc0000000000 RBX: ffff8880224da000 RCX: 1ffff11003d3cc0d
     [] RDX: 0000000000000019 RSI: ffffffff886007b9 RDI: 00000000000000c8
     [] RBP: ffffc90000007018 R08: 0000000000000001 R09: fffff52000000ded
     [] R10: 0000000000000003 R11: fffff52000000dec R12: ffffc90000007148
     [] R13: 0000000000000000 R14: 0000000000000000 R15: ffffc90000007018
     [] FS:  0000000000000000(0000) GS:ffff888037400000(0000) knlGS:000[...]
     [] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     [] CR2: 00007fffd2db5000 CR3: 000000002b08f000 CR4: 00000000000006f0
    
    Fixes: af9b028e270fd ("tipc: make media xmit call outside node spinlock context")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Link: https://lore.kernel.org/r/20210108071337.3598-1-hoang.h.le@dektech.com.au
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25764779298f23a659f3daf39f9e2b5975a7a89d
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Thu Jan 14 09:04:48 2021 +0100

    net: tip: fix a couple kernel-doc markups
    
    A function has a different name between their prototype
    and its kernel-doc markup:
    
            ../net/tipc/link.c:2551: warning: expecting prototype for link_reset_stats(). Prototype was for tipc_link_reset_stats() instead
            ../net/tipc/node.c:1678: warning: expecting prototype for is the general link level function for message sending(). Prototype was for tipc_node_xmit() instead
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit b77413446408fdd256599daf00d5be72b5f3e7c6
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Fri Jan 8 14:13:37 2021 +0700

    tipc: fix NULL deref in tipc_link_xmit()
    
    The buffer list can have zero skb as following path:
    tipc_named_node_up()->tipc_node_xmit()->tipc_link_xmit(), so
    we need to check the list before casting an &sk_buff.
    
    Fault report:
     [] tipc: Bulk publication failure
     [] general protection fault, probably for non-canonical [#1] PREEMPT [...]
     [] KASAN: null-ptr-deref in range [0x00000000000000c8-0x00000000000000cf]
     [] CPU: 0 PID: 0 Comm: swapper/0 Kdump: loaded Not tainted 5.10.0-rc4+ #2
     [] Hardware name: Bochs ..., BIOS Bochs 01/01/2011
     [] RIP: 0010:tipc_link_xmit+0xc1/0x2180
     [] Code: 24 b8 00 00 00 00 4d 39 ec 4c 0f 44 e8 e8 d7 0a 10 f9 48 [...]
     [] RSP: 0018:ffffc90000006ea0 EFLAGS: 00010202
     [] RAX: dffffc0000000000 RBX: ffff8880224da000 RCX: 1ffff11003d3cc0d
     [] RDX: 0000000000000019 RSI: ffffffff886007b9 RDI: 00000000000000c8
     [] RBP: ffffc90000007018 R08: 0000000000000001 R09: fffff52000000ded
     [] R10: 0000000000000003 R11: fffff52000000dec R12: ffffc90000007148
     [] R13: 0000000000000000 R14: 0000000000000000 R15: ffffc90000007018
     [] FS:  0000000000000000(0000) GS:ffff888037400000(0000) knlGS:000[...]
     [] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     [] CR2: 00007fffd2db5000 CR3: 000000002b08f000 CR4: 00000000000006f0
    
    Fixes: af9b028e270fd ("tipc: make media xmit call outside node spinlock context")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Link: https://lore.kernel.org/r/20210108071337.3598-1-hoang.h.le@dektech.com.au
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 520ec34385d57ae18ec034ddc38b4b3425b2742b
Author: Zheng Yongjun <zhengyongjun3@huawei.com>
Date:   Tue Dec 29 21:49:04 2020 +0800

    net: tipc: Replace expression with offsetof()
    
    Use the existing offsetof() macro instead of duplicating code.
    
    Signed-off-by: Zheng Yongjun <zhengyongjun3@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4dd9051068f536453e7e8fedc7c6cc873a0910d7
Author: Cengiz Can <cengiz@kernel.wtf>
Date:   Mon Dec 7 11:14:24 2020 +0300

    net: tipc: prevent possible null deref of link
    
    [ Upstream commit 0398ba9e5a4b5675aa571e0445689d3c2e499c2d ]
    
    `tipc_node_apply_property` does a null check on a `tipc_link_entry`
    pointer but also accesses the same pointer out of the null check block.
    
    This triggers a warning on Coverity Static Analyzer because we're
    implying that `e->link` can BE null.
    
    Move "Update MTU for node link entry" line into if block to make sure
    that we're not in a state that `e->link` is null.
    
    Signed-off-by: Cengiz Can <cengiz@kernel.wtf>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d64c6f96ba86bd8b97ed8d6762a8c8cc1770d214
Merge: 0c6c887835b5 44d4775ca518
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Dec 17 13:45:24 2020 -0800

    Merge tag 'net-5.11-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from Jakub Kicinski:
     "Current release - always broken:
    
       - net/smc: fix access to parent of an ib device
    
       - devlink: use _BITUL() macro instead of BIT() in the UAPI header
    
       - handful of mptcp fixes
    
      Previous release - regressions:
    
       - intel: AF_XDP: clear the status bits for the next_to_use descriptor
    
       - dpaa2-eth: fix the size of the mapped SGT buffer
    
      Previous release - always broken:
    
       - mptcp: fix security context on server socket
    
       - ethtool: fix string set id check
    
       - ethtool: fix error paths in ethnl_set_channels()
    
       - lan743x: fix rx_napi_poll/interrupt ping-pong
    
       - qca: ar9331: fix sleeping function called from invalid context bug"
    
    * tag 'net-5.11-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (32 commits)
      net/sched: sch_taprio: reset child qdiscs before freeing them
      nfp: move indirect block cleanup to flower app stop callback
      octeontx2-af: Fix undetected unmap PF error check
      net: nixge: fix spelling mistake in Kconfig: "Instuments" -> "Instruments"
      qlcnic: Fix error code in probe
      mptcp: fix pending data accounting
      mptcp: push pending frames when subflow has free space
      mptcp: properly annotate nested lock
      mptcp: fix security context on server socket
      net/mlx5: Fix compilation warning for 32-bit platform
      mptcp: clear use_ack and use_map when dropping other suboptions
      devlink: use _BITUL() macro instead of BIT() in the UAPI header
      net: korina: fix return value
      net/smc: fix access to parent of an ib device
      ethtool: fix error paths in ethnl_set_channels()
      nfc: s3fwrn5: Remove unused NCI prop commands
      nfc: s3fwrn5: Remove the delay for NFC sleep
      phy: fix kdoc warning
      tipc: do sanity check payload of a netlink message
      use __netdev_notify_peers in hyperv
      ...

commit c32c928d29deb2636e5889f59305cc15b004909f
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Tue Dec 15 10:31:51 2020 +0700

    tipc: do sanity check payload of a netlink message
    
    When we initialize nlmsghdr with no payload inside tipc_nl_compat_dumpit()
    the parsing function returns -EINVAL. We fix it by making the parsing call
    conditional.
    
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Link: https://lore.kernel.org/r/20201215033151.76139-1-hoang.h.le@dektech.com.au
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit fdc1416c21992ea7b4737123c8aa8c7424a1a540
Author: Hoang Huu Le <hoang.h.le@dektech.com.au>
Date:   Mon Sep 7 13:17:25 2020 +0700

    tipc: fix a deadlock when flushing scheduled work
    
    commit d966ddcc38217a6110a6a0ff37ad2dee7d42e23e upstream.
    
    In the commit fdeba99b1e58
    ("tipc: fix use-after-free in tipc_bcast_get_mode"), we're trying
    to make sure the tipc_net_finalize_work work item finished if it
    enqueued. But calling flush_scheduled_work() is not just affecting
    above work item but either any scheduled work. This has turned out
    to be overkill and caused to deadlock as syzbot reported:
    
    ======================================================
    WARNING: possible circular locking dependency detected
    5.9.0-rc2-next-20200828-syzkaller #0 Not tainted
    ------------------------------------------------------
    kworker/u4:6/349 is trying to acquire lock:
    ffff8880aa063d38 ((wq_completion)events){+.+.}-{0:0}, at: flush_workqueue+0xe1/0x13e0 kernel/workqueue.c:2777
    
    but task is already holding lock:
    ffffffff8a879430 (pernet_ops_rwsem){++++}-{3:3}, at: cleanup_net+0x9b/0xb10 net/core/net_namespace.c:565
    
    [...]
     Possible unsafe locking scenario:
    
           CPU0                    CPU1
           ----                    ----
      lock(pernet_ops_rwsem);
                                   lock(&sb->s_type->i_mutex_key#13);
                                   lock(pernet_ops_rwsem);
      lock((wq_completion)events);
    
     *** DEADLOCK ***
    [...]
    
    v1:
    To fix the original issue, we replace above calling by introducing
    a bit flag. When a namespace cleaned-up, bit flag is set to zero and:
    - tipc_net_finalize functionial just does return immediately.
    - tipc_net_finalize_work does not enqueue into the scheduled work queue.
    
    v2:
    Use cancel_work_sync() helper to make sure ONLY the
    tipc_net_finalize_work() stopped before releasing bcbase object.
    
    Reported-by: syzbot+d5aa7e0385f6a5d0f4fd@syzkaller.appspotmail.com
    Fixes: fdeba99b1e58 ("tipc: fix use-after-free in tipc_bcast_get_mode")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Huu Le <hoang.h.le@dektech.com.au>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1716c9bd567bc6cdb3d18be78f36941a306b708d
Author: Hoang Huu Le <hoang.h.le@dektech.com.au>
Date:   Mon Sep 7 13:17:25 2020 +0700

    tipc: fix a deadlock when flushing scheduled work
    
    commit d966ddcc38217a6110a6a0ff37ad2dee7d42e23e upstream.
    
    In the commit fdeba99b1e58
    ("tipc: fix use-after-free in tipc_bcast_get_mode"), we're trying
    to make sure the tipc_net_finalize_work work item finished if it
    enqueued. But calling flush_scheduled_work() is not just affecting
    above work item but either any scheduled work. This has turned out
    to be overkill and caused to deadlock as syzbot reported:
    
    ======================================================
    WARNING: possible circular locking dependency detected
    5.9.0-rc2-next-20200828-syzkaller #0 Not tainted
    ------------------------------------------------------
    kworker/u4:6/349 is trying to acquire lock:
    ffff8880aa063d38 ((wq_completion)events){+.+.}-{0:0}, at: flush_workqueue+0xe1/0x13e0 kernel/workqueue.c:2777
    
    but task is already holding lock:
    ffffffff8a879430 (pernet_ops_rwsem){++++}-{3:3}, at: cleanup_net+0x9b/0xb10 net/core/net_namespace.c:565
    
    [...]
     Possible unsafe locking scenario:
    
           CPU0                    CPU1
           ----                    ----
      lock(pernet_ops_rwsem);
                                   lock(&sb->s_type->i_mutex_key#13);
                                   lock(pernet_ops_rwsem);
      lock((wq_completion)events);
    
     *** DEADLOCK ***
    [...]
    
    v1:
    To fix the original issue, we replace above calling by introducing
    a bit flag. When a namespace cleaned-up, bit flag is set to zero and:
    - tipc_net_finalize functionial just does return immediately.
    - tipc_net_finalize_work does not enqueue into the scheduled work queue.
    
    v2:
    Use cancel_work_sync() helper to make sure ONLY the
    tipc_net_finalize_work() stopped before releasing bcbase object.
    
    Reported-by: syzbot+d5aa7e0385f6a5d0f4fd@syzkaller.appspotmail.com
    Fixes: fdeba99b1e58 ("tipc: fix use-after-free in tipc_bcast_get_mode")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Huu Le <hoang.h.le@dektech.com.au>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d31058b823cb338f5218043ac09fb7795b9d908
Merge: 9fca90cf2892 d9838b1d3928
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Dec 10 15:30:13 2020 -0800

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from David Miller:
    
     1) IPsec compat fixes, from Dmitry Safonov.
    
     2) Fix memory leak in xfrm_user_policy(). Fix from Yu Kuai.
    
     3) Fix polling in xsk sockets by using sk_poll_wait() instead of
        datagram_poll() which keys off of sk_wmem_alloc and such which xsk
        sockets do not update. From Xuan Zhuo.
    
     4) Missing init of rekey_data in cfgh80211, from Sara Sharon.
    
     5) Fix destroy of timer before init, from Davide Caratti.
    
     6) Missing CRYPTO_CRC32 selects in ethernet driver Kconfigs, from Arnd
        Bergmann.
    
     7) Missing error return in rtm_to_fib_config() switch case, from Zhang
        Changzhong.
    
     8) Fix some src/dest address handling in vrf and add a testcase. From
        Stephen Suryaputra.
    
     9) Fix multicast handling in Seville switches driven by mscc-ocelot
        driver. From Vladimir Oltean.
    
    10) Fix proto value passed to skb delivery demux in udp, from Xin Long.
    
    11) HW pkt counters not reported correctly in enetc driver, from Claudiu
        Manoil.
    
    12) Fix deadlock in bridge, from Joseph Huang.
    
    13) Missing of_node_pur() in dpaa2 driver, fromn Christophe JAILLET.
    
    14) Fix pid fetching in bpftool when there are a lot of results, from
        Andrii Nakryiko.
    
    15) Fix long timeouts in nft_dynset, from Pablo Neira Ayuso.
    
    16) Various stymmac fixes, from Fugang Duan.
    
    17) Fix null deref in tipc, from Cengiz Can.
    
    18) When mss is biog, coose more resonable rcvq_space in tcp, fromn Eric
        Dumazet.
    
    19) Revert a geneve change that likely isnt necessary, from Jakub
        Kicinski.
    
    20) Avoid premature rx buffer reuse in various Intel driversm from Björn
        Töpel.
    
    21) retain EcT bits during TIS reflection in tcp, from Wei Wang.
    
    22) Fix Tso deferral wrt. cwnd limiting in tcp, from Neal Cardwell.
    
    23) MPLS_OPT_LSE_LABEL attribute is 342 ot 8 bits, from Guillaume Nault
    
    24) Fix propagation of 32-bit signed bounds in bpf verifier and add test
        cases, from Alexei Starovoitov.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (81 commits)
      selftests: fix poll error in udpgro.sh
      selftests/bpf: Fix "dubious pointer arithmetic" test
      selftests/bpf: Fix array access with signed variable test
      selftests/bpf: Add test for signed 32-bit bound check bug
      bpf: Fix propagation of 32-bit signed bounds from 64-bit bounds.
      MAINTAINERS: Add entry for Marvell Prestera Ethernet Switch driver
      net: sched: Fix dump of MPLS_OPT_LSE_LABEL attribute in cls_flower
      net/mlx4_en: Handle TX error CQE
      net/mlx4_en: Avoid scheduling restart task if it is already running
      tcp: fix cwnd-limited bug for TSO deferral where we send nothing
      net: flow_offload: Fix memory leak for indirect flow block
      tcp: Retain ECT bits for tos reflection
      ethtool: fix stack overflow in ethnl_parse_bitset()
      e1000e: fix S0ix flow to allow S0i3.2 subset entry
      ice: avoid premature Rx buffer reuse
      ixgbe: avoid premature Rx buffer reuse
      i40e: avoid premature Rx buffer reuse
      igb: avoid transmit queue timeout in xdp path
      igb: use xdp_do_flush
      igb: skb add metasize for xdp
      ...

commit 0398ba9e5a4b5675aa571e0445689d3c2e499c2d
Author: Cengiz Can <cengiz@kernel.wtf>
Date:   Mon Dec 7 11:14:24 2020 +0300

    net: tipc: prevent possible null deref of link
    
    `tipc_node_apply_property` does a null check on a `tipc_link_entry`
    pointer but also accesses the same pointer out of the null check block.
    
    This triggers a warning on Coverity Static Analyzer because we're
    implying that `e->link` can BE null.
    
    Move "Update MTU for node link entry" line into if block to make sure
    that we're not in a state that `e->link` is null.
    
    Signed-off-by: Cengiz Can <cengiz@kernel.wtf>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ecaeeb4b5acbb37ad3343a69a2c3e50a8d346aea
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Mon Nov 30 09:55:44 2020 +0700

    tipc: fix incompatible mtu of transmission
    
    [ Upstream commit 0643334902fcdc770e2d9555811200213339a3f6 ]
    
    In commit 682cd3cf946b6
    ("tipc: confgiure and apply UDP bearer MTU on running links"), we
    introduced a function to change UDP bearer MTU and applied this new value
    across existing per-link. However, we did not apply this new MTU value at
    node level. This lead to packet dropped at link level if its size is
    greater than new MTU value.
    
    To fix this issue, we also apply this new MTU value for node level.
    
    Fixes: 682cd3cf946b6 ("tipc: confgiure and apply UDP bearer MTU on running links")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Link: https://lore.kernel.org/r/20201130025544.3602-1-hoang.h.le@dektech.com.au
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 43fcd906d9c1048f2492a412917e70ce91775dfb
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Dec 3 10:50:45 2020 +0700

    tipc: support 128bit node identity for peer removing
    
    We add the support to remove a specific node down with 128bit
    node identifier, as an alternative to legacy 32-bit node address.
    
    example:
    $tipc peer remove identiy <1001002|16777777>
    
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Link: https://lore.kernel.org/r/20201203035045.4564-1-hoang.h.le@dektech.com.au
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit f7cf335c7d008543539708e8051d27c4265fa103
Merge: 7fe2af16e6a1 2fc30decf730
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Tue Dec 1 15:38:46 2020 -0800

    Merge branch 'net-tipc-fix-all-kernel-doc-and-add-tipc-networking-chapter'
    
    Randy Dunlap says:
    
    ====================
    net/tipc: fix all kernel-doc and add TIPC networking chapter
    
    Fix lots of net/tipc/ kernel-doc warnings. Add many struct field and
    function parameter descriptions.
    
    Then add a TIPC chapter to the networking documentation book.
    
    All patches have been rebased to current net-next.
    
    Note: some of the struct members and function parameters are marked
    with "FIXME". They could use some additional descriptions if
    someone could help add to them. Thanks.
    ====================
    
    Link: https://lore.kernel.org/r/20201129183251.7049-1-rdunlap@infradead.org
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 2fc30decf730832f05a07fae710869c3577a36a8
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Sun Nov 29 10:32:51 2020 -0800

    net/tipc: add TIPC chapter to networking Documentation
    
    Add a TIPC chapter to the networking docbook.
    
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 637b77fdca5c5e74e9f3f45aca9f52a763edd0ff
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Sun Nov 29 10:32:48 2020 -0800

    net/tipc: fix all function Return: notation
    
    Fix Return: kernel-doc notation in all net/tipc/ source files.
    Also keep ReST list notation intact for output formatting.
    Fix a few typos in comments.
    
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit f172f4b81aea899b52923b77e01e2a247f14c207
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Sun Nov 29 10:32:49 2020 -0800

    net/tipc: fix socket.c kernel-doc
    
    Fix socket.c kernel-doc warnings in preparation for adding to the
    networking docbook.
    
    Also, for rcvbuf_limit(), use bullet notation so that the lines do
    not run together.
    
    ../net/tipc/socket.c:130: warning: Function parameter or member 'cong_links' not described in 'tipc_sock'
    ../net/tipc/socket.c:130: warning: Function parameter or member 'probe_unacked' not described in 'tipc_sock'
    ../net/tipc/socket.c:130: warning: Function parameter or member 'snd_win' not described in 'tipc_sock'
    ../net/tipc/socket.c:130: warning: Function parameter or member 'peer_caps' not described in 'tipc_sock'
    ../net/tipc/socket.c:130: warning: Function parameter or member 'rcv_win' not described in 'tipc_sock'
    ../net/tipc/socket.c:130: warning: Function parameter or member 'group' not described in 'tipc_sock'
    ../net/tipc/socket.c:130: warning: Function parameter or member 'oneway' not described in 'tipc_sock'
    ../net/tipc/socket.c:130: warning: Function parameter or member 'nagle_start' not described in 'tipc_sock'
    ../net/tipc/socket.c:130: warning: Function parameter or member 'snd_backlog' not described in 'tipc_sock'
    ../net/tipc/socket.c:130: warning: Function parameter or member 'msg_acc' not described in 'tipc_sock'
    ../net/tipc/socket.c:130: warning: Function parameter or member 'pkt_cnt' not described in 'tipc_sock'
    ../net/tipc/socket.c:130: warning: Function parameter or member 'expect_ack' not described in 'tipc_sock'
    ../net/tipc/socket.c:130: warning: Function parameter or member 'nodelay' not described in 'tipc_sock'
    ../net/tipc/socket.c:130: warning: Function parameter or member 'group_is_open' not described in 'tipc_sock'
    ../net/tipc/socket.c:267: warning: Function parameter or member 'sk' not described in 'tsk_advance_rx_queue'
    ../net/tipc/socket.c:295: warning: Function parameter or member 'sk' not described in 'tsk_rej_rx_queue'
    ../net/tipc/socket.c:295: warning: Function parameter or member 'error' not described in 'tsk_rej_rx_queue'
    ../net/tipc/socket.c:894: warning: Function parameter or member 'tsk' not described in 'tipc_send_group_msg'
    ../net/tipc/socket.c:1187: warning: Function parameter or member 'net' not described in 'tipc_sk_mcast_rcv'
    ../net/tipc/socket.c:1323: warning: Function parameter or member 'inputq' not described in 'tipc_sk_conn_proto_rcv'
    ../net/tipc/socket.c:1323: warning: Function parameter or member 'xmitq' not described in 'tipc_sk_conn_proto_rcv'
    ../net/tipc/socket.c:1885: warning: Function parameter or member 'sock' not described in 'tipc_recvmsg'
    ../net/tipc/socket.c:1993: warning: Function parameter or member 'sock' not described in 'tipc_recvstream'
    ../net/tipc/socket.c:2313: warning: Function parameter or member 'xmitq' not described in 'tipc_sk_filter_rcv'
    ../net/tipc/socket.c:2404: warning: Function parameter or member 'xmitq' not described in 'tipc_sk_enqueue'
    ../net/tipc/socket.c:2456: warning: Function parameter or member 'net' not described in 'tipc_sk_rcv'
    ../net/tipc/socket.c:2693: warning: Function parameter or member 'kern' not described in 'tipc_accept'
    ../net/tipc/socket.c:3816: warning: Excess function parameter 'sysctl_tipc_sk_filter' description in 'tipc_sk_filtering'
    
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 4476441e4894b9108b6ddab3612e830416bf2ff9
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Sun Nov 29 10:32:47 2020 -0800

    net/tipc: fix node.c kernel-doc
    
    Fix node.c kernel-doc warnings in preparation for adding to the
    networking docbook.
    
    ../net/tipc/node.c:141: warning: Function parameter or member 'kref' not described in 'tipc_node'
    ../net/tipc/node.c:141: warning: Function parameter or member 'bc_entry' not described in 'tipc_node'
    ../net/tipc/node.c:141: warning: Function parameter or member 'failover_sent' not described in 'tipc_node'
    ../net/tipc/node.c:141: warning: Function parameter or member 'peer_id' not described in 'tipc_node'
    ../net/tipc/node.c:141: warning: Function parameter or member 'peer_id_string' not described in 'tipc_node'
    ../net/tipc/node.c:141: warning: Function parameter or member 'conn_sks' not described in 'tipc_node'
    ../net/tipc/node.c:141: warning: Function parameter or member 'keepalive_intv' not described in 'tipc_node'
    ../net/tipc/node.c:141: warning: Function parameter or member 'timer' not described in 'tipc_node'
    ../net/tipc/node.c:141: warning: Function parameter or member 'peer_net' not described in 'tipc_node'
    ../net/tipc/node.c:141: warning: Function parameter or member 'peer_hash_mix' not described in 'tipc_node'
    ../net/tipc/node.c:273: warning: Function parameter or member '__n' not described in 'tipc_node_crypto_rx'
    ../net/tipc/node.c:822: warning: Function parameter or member 'n' not described in '__tipc_node_link_up'
    ../net/tipc/node.c:822: warning: Function parameter or member 'bearer_id' not described in '__tipc_node_link_up'
    ../net/tipc/node.c:822: warning: Function parameter or member 'xmitq' not described in '__tipc_node_link_up'
    ../net/tipc/node.c:888: warning: Function parameter or member 'n' not described in 'tipc_node_link_up'
    ../net/tipc/node.c:888: warning: Function parameter or member 'bearer_id' not described in 'tipc_node_link_up'
    ../net/tipc/node.c:888: warning: Function parameter or member 'xmitq' not described in 'tipc_node_link_up'
    ../net/tipc/node.c:948: warning: Function parameter or member 'n' not described in '__tipc_node_link_down'
    ../net/tipc/node.c:948: warning: Function parameter or member 'bearer_id' not described in '__tipc_node_link_down'
    ../net/tipc/node.c:948: warning: Function parameter or member 'xmitq' not described in '__tipc_node_link_down'
    ../net/tipc/node.c:948: warning: Function parameter or member 'maddr' not described in '__tipc_node_link_down'
    ../net/tipc/node.c:1537: warning: Function parameter or member 'net' not described in 'tipc_node_get_linkname'
    ../net/tipc/node.c:1537: warning: Function parameter or member 'len' not described in 'tipc_node_get_linkname'
    ../net/tipc/node.c:1891: warning: Function parameter or member 'n' not described in 'tipc_node_check_state'
    ../net/tipc/node.c:1891: warning: Function parameter or member 'xmitq' not described in 'tipc_node_check_state'
    
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 5c5d6796d42091c99e7192845a6f94b4754735a3
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Sun Nov 29 10:32:46 2020 -0800

    net/tipc: fix name_table.c kernel-doc
    
    Fix name_table.c kernel-doc warnings in preparation for adding to the
    networking docbook.
    
    ../net/tipc/name_table.c:115: warning: Function parameter or member 'start' not described in 'service_range_foreach_match'
    ../net/tipc/name_table.c:115: warning: Function parameter or member 'end' not described in 'service_range_foreach_match'
    ../net/tipc/name_table.c:127: warning: Function parameter or member 'start' not described in 'service_range_match_first'
    ../net/tipc/name_table.c:127: warning: Function parameter or member 'end' not described in 'service_range_match_first'
    ../net/tipc/name_table.c:176: warning: Function parameter or member 'start' not described in 'service_range_match_next'
    ../net/tipc/name_table.c:176: warning: Function parameter or member 'end' not described in 'service_range_match_next'
    ../net/tipc/name_table.c:225: warning: Function parameter or member 'type' not described in 'tipc_publ_create'
    ../net/tipc/name_table.c:225: warning: Function parameter or member 'lower' not described in 'tipc_publ_create'
    ../net/tipc/name_table.c:225: warning: Function parameter or member 'upper' not described in 'tipc_publ_create'
    ../net/tipc/name_table.c:225: warning: Function parameter or member 'scope' not described in 'tipc_publ_create'
    ../net/tipc/name_table.c:225: warning: Function parameter or member 'node' not described in 'tipc_publ_create'
    ../net/tipc/name_table.c:225: warning: Function parameter or member 'port' not described in 'tipc_publ_create'
    ../net/tipc/name_table.c:225: warning: Function parameter or member 'key' not described in 'tipc_publ_create'
    ../net/tipc/name_table.c:252: warning: Function parameter or member 'type' not described in 'tipc_service_create'
    ../net/tipc/name_table.c:252: warning: Function parameter or member 'hd' not described in 'tipc_service_create'
    ../net/tipc/name_table.c:367: warning: Function parameter or member 'sr' not described in 'tipc_service_remove_publ'
    ../net/tipc/name_table.c:367: warning: Function parameter or member 'node' not described in 'tipc_service_remove_publ'
    ../net/tipc/name_table.c:367: warning: Function parameter or member 'key' not described in 'tipc_service_remove_publ'
    ../net/tipc/name_table.c:383: warning: Function parameter or member 'pa' not described in 'publication_after'
    ../net/tipc/name_table.c:383: warning: Function parameter or member 'pb' not described in 'publication_after'
    ../net/tipc/name_table.c:401: warning: Function parameter or member 'service' not described in 'tipc_service_subscribe'
    ../net/tipc/name_table.c:401: warning: Function parameter or member 'sub' not described in 'tipc_service_subscribe'
    ../net/tipc/name_table.c:546: warning: Function parameter or member 'net' not described in 'tipc_nametbl_translate'
    ../net/tipc/name_table.c:546: warning: Function parameter or member 'type' not described in 'tipc_nametbl_translate'
    ../net/tipc/name_table.c:546: warning: Function parameter or member 'instance' not described in 'tipc_nametbl_translate'
    ../net/tipc/name_table.c:546: warning: Function parameter or member 'dnode' not described in 'tipc_nametbl_translate'
    ../net/tipc/name_table.c:762: warning: Function parameter or member 'net' not described in 'tipc_nametbl_withdraw'
    ../net/tipc/name_table.c:762: warning: Function parameter or member 'type' not described in 'tipc_nametbl_withdraw'
    ../net/tipc/name_table.c:762: warning: Function parameter or member 'lower' not described in 'tipc_nametbl_withdraw'
    ../net/tipc/name_table.c:762: warning: Function parameter or member 'upper' not described in 'tipc_nametbl_withdraw'
    ../net/tipc/name_table.c:762: warning: Function parameter or member 'key' not described in 'tipc_nametbl_withdraw'
    ../net/tipc/name_table.c:796: warning: Function parameter or member 'sub' not described in 'tipc_nametbl_subscribe'
    ../net/tipc/name_table.c:826: warning: Function parameter or member 'sub' not described in 'tipc_nametbl_unsubscribe'
    ../net/tipc/name_table.c:876: warning: Function parameter or member 'net' not described in 'tipc_service_delete'
    ../net/tipc/name_table.c:876: warning: Function parameter or member 'sc' not described in 'tipc_service_delete'
    
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit cb67296e8cc86c0021f5859f8671e2fb5b8d6df5
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Sun Nov 29 10:32:45 2020 -0800

    net/tipc: fix name_distr.c kernel-doc
    
    Fix name_distr.c kernel-doc warnings in preparation for adding to the
    networking docbook.
    
    ../net/tipc/name_distr.c:55: warning: Function parameter or member 'i' not described in 'publ_to_item'
    ../net/tipc/name_distr.c:55: warning: Function parameter or member 'p' not described in 'publ_to_item'
    ../net/tipc/name_distr.c:70: warning: Function parameter or member 'net' not described in 'named_prepare_buf'
    ../net/tipc/name_distr.c:70: warning: Function parameter or member 'type' not described in 'named_prepare_buf'
    ../net/tipc/name_distr.c:70: warning: Function parameter or member 'size' not described in 'named_prepare_buf'
    ../net/tipc/name_distr.c:70: warning: Function parameter or member 'dest' not described in 'named_prepare_buf'
    ../net/tipc/name_distr.c:88: warning: Function parameter or member 'net' not described in 'tipc_named_publish'
    ../net/tipc/name_distr.c:88: warning: Function parameter or member 'publ' not described in 'tipc_named_publish'
    ../net/tipc/name_distr.c:116: warning: Function parameter or member 'net' not described in 'tipc_named_withdraw'
    ../net/tipc/name_distr.c:116: warning: Function parameter or member 'publ' not described in 'tipc_named_withdraw'
    ../net/tipc/name_distr.c:147: warning: Function parameter or member 'net' not described in 'named_distribute'
    ../net/tipc/name_distr.c:147: warning: Function parameter or member 'seqno' not described in 'named_distribute'
    ../net/tipc/name_distr.c:199: warning: Function parameter or member 'net' not described in 'tipc_named_node_up'
    ../net/tipc/name_distr.c:199: warning: Function parameter or member 'dnode' not described in 'tipc_named_node_up'
    ../net/tipc/name_distr.c:199: warning: Function parameter or member 'capabilities' not described in 'tipc_named_node_up'
    ../net/tipc/name_distr.c:225: warning: Function parameter or member 'net' not described in 'tipc_publ_purge'
    ../net/tipc/name_distr.c:225: warning: Function parameter or member 'publ' not described in 'tipc_publ_purge'
    ../net/tipc/name_distr.c:225: warning: Function parameter or member 'addr' not described in 'tipc_publ_purge'
    ../net/tipc/name_distr.c:272: warning: Function parameter or member 'net' not described in 'tipc_update_nametbl'
    ../net/tipc/name_distr.c:272: warning: Function parameter or member 'i' not described in 'tipc_update_nametbl'
    ../net/tipc/name_distr.c:272: warning: Function parameter or member 'node' not described in 'tipc_update_nametbl'
    ../net/tipc/name_distr.c:272: warning: Function parameter or member 'dtype' not described in 'tipc_update_nametbl'
    ../net/tipc/name_distr.c:353: warning: Function parameter or member 'net' not described in 'tipc_named_rcv'
    ../net/tipc/name_distr.c:353: warning: Function parameter or member 'namedq' not described in 'tipc_named_rcv'
    ../net/tipc/name_distr.c:353: warning: Function parameter or member 'rcv_nxt' not described in 'tipc_named_rcv'
    ../net/tipc/name_distr.c:353: warning: Function parameter or member 'open' not described in 'tipc_named_rcv'
    ../net/tipc/name_distr.c:383: warning: Function parameter or member 'net' not described in 'tipc_named_reinit'
    
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit a99df449b01880646ded2c522d10552a5133b04e
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Sun Nov 29 10:32:44 2020 -0800

    net/tipc: fix link.c kernel-doc
    
    Fix link.c kernel-doc warnings in preparation for adding to the
    networking docbook.
    
    ../net/tipc/link.c:200: warning: Function parameter or member 'session' not described in 'tipc_link'
    ../net/tipc/link.c:200: warning: Function parameter or member 'snd_nxt_state' not described in 'tipc_link'
    ../net/tipc/link.c:200: warning: Function parameter or member 'rcv_nxt_state' not described in 'tipc_link'
    ../net/tipc/link.c:200: warning: Function parameter or member 'in_session' not described in 'tipc_link'
    ../net/tipc/link.c:200: warning: Function parameter or member 'active' not described in 'tipc_link'
    ../net/tipc/link.c:200: warning: Function parameter or member 'if_name' not described in 'tipc_link'
    ../net/tipc/link.c:200: warning: Function parameter or member 'rst_cnt' not described in 'tipc_link'
    ../net/tipc/link.c:200: warning: Function parameter or member 'drop_point' not described in 'tipc_link'
    ../net/tipc/link.c:200: warning: Function parameter or member 'failover_reasm_skb' not described in 'tipc_link'
    ../net/tipc/link.c:200: warning: Function parameter or member 'failover_deferdq' not described in 'tipc_link'
    ../net/tipc/link.c:200: warning: Function parameter or member 'transmq' not described in 'tipc_link'
    ../net/tipc/link.c:200: warning: Function parameter or member 'backlog' not described in 'tipc_link'
    ../net/tipc/link.c:200: warning: Function parameter or member 'snd_nxt' not described in 'tipc_link'
    ../net/tipc/link.c:200: warning: Function parameter or member 'rcv_unacked' not described in 'tipc_link'
    ../net/tipc/link.c:200: warning: Function parameter or member 'deferdq' not described in 'tipc_link'
    ../net/tipc/link.c:200: warning: Function parameter or member 'window' not described in 'tipc_link'
    ../net/tipc/link.c:200: warning: Function parameter or member 'min_win' not described in 'tipc_link'
    ../net/tipc/link.c:200: warning: Function parameter or member 'ssthresh' not described in 'tipc_link'
    ../net/tipc/link.c:200: warning: Function parameter or member 'max_win' not described in 'tipc_link'
    ../net/tipc/link.c:200: warning: Function parameter or member 'cong_acks' not described in 'tipc_link'
    ../net/tipc/link.c:200: warning: Function parameter or member 'checkpoint' not described in 'tipc_link'
    ../net/tipc/link.c:200: warning: Function parameter or member 'reasm_tnlmsg' not described in 'tipc_link'
    ../net/tipc/link.c:200: warning: Function parameter or member 'last_gap' not described in 'tipc_link'
    ../net/tipc/link.c:200: warning: Function parameter or member 'last_ga' not described in 'tipc_link'
    ../net/tipc/link.c:200: warning: Function parameter or member 'bc_rcvlink' not described in 'tipc_link'
    ../net/tipc/link.c:200: warning: Function parameter or member 'bc_sndlink' not described in 'tipc_link'
    ../net/tipc/link.c:200: warning: Function parameter or member 'nack_state' not described in 'tipc_link'
    ../net/tipc/link.c:200: warning: Function parameter or member 'bc_peer_is_up' not described in 'tipc_link'
    ../net/tipc/link.c:473: warning: Function parameter or member 'self' not described in 'tipc_link_create'
    ../net/tipc/link.c:473: warning: Function parameter or member 'peer_id' not described in 'tipc_link_create'
    ../net/tipc/link.c:473: warning: Excess function parameter 'ownnode' description in 'tipc_link_create'
    ../net/tipc/link.c:544: warning: Function parameter or member 'ownnode' not described in 'tipc_link_bc_create'
    ../net/tipc/link.c:544: warning: Function parameter or member 'peer' not described in 'tipc_link_bc_create'
    ../net/tipc/link.c:544: warning: Function parameter or member 'peer_id' not described in 'tipc_link_bc_create'
    ../net/tipc/link.c:544: warning: Function parameter or member 'peer_caps' not described in 'tipc_link_bc_create'
    ../net/tipc/link.c:544: warning: Function parameter or member 'bc_sndlink' not described in 'tipc_link_bc_create'
    
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit ec6a1649fe27821207631e081f200c6d6f98d4e5
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Sun Nov 29 10:32:42 2020 -0800

    net/tipc: fix bearer.c for kernel-doc
    
    Fix kernel-doc warnings in bearer.c:
    
    ../net/tipc/bearer.c:77: warning: Function parameter or member 'name' not described in 'tipc_media_find'
    ../net/tipc/bearer.c:91: warning: Function parameter or member 'type' not described in 'media_find_id'
    ../net/tipc/bearer.c:105: warning: Function parameter or member 'buf' not described in 'tipc_media_addr_printf'
    ../net/tipc/bearer.c:105: warning: Function parameter or member 'len' not described in 'tipc_media_addr_printf'
    ../net/tipc/bearer.c:105: warning: Function parameter or member 'a' not described in 'tipc_media_addr_printf'
    ../net/tipc/bearer.c:174: warning: Function parameter or member 'net' not described in 'tipc_bearer_find'
    ../net/tipc/bearer.c:174: warning: Function parameter or member 'name' not described in 'tipc_bearer_find'
    ../net/tipc/bearer.c:238: warning: Function parameter or member 'net' not described in 'tipc_enable_bearer'
    ../net/tipc/bearer.c:238: warning: Function parameter or member 'name' not described in 'tipc_enable_bearer'
    ../net/tipc/bearer.c:238: warning: Function parameter or member 'disc_domain' not described in 'tipc_enable_bearer'
    ../net/tipc/bearer.c:238: warning: Function parameter or member 'prio' not described in 'tipc_enable_bearer'
    ../net/tipc/bearer.c:238: warning: Function parameter or member 'attr' not described in 'tipc_enable_bearer'
    ../net/tipc/bearer.c:350: warning: Function parameter or member 'net' not described in 'tipc_reset_bearer'
    ../net/tipc/bearer.c:350: warning: Function parameter or member 'b' not described in 'tipc_reset_bearer'
    ../net/tipc/bearer.c:374: warning: Function parameter or member 'net' not described in 'bearer_disable'
    ../net/tipc/bearer.c:374: warning: Function parameter or member 'b' not described in 'bearer_disable'
    ../net/tipc/bearer.c:462: warning: Function parameter or member 'net' not described in 'tipc_l2_send_msg'
    ../net/tipc/bearer.c:479: warning: Function parameter or member 'net' not described in 'tipc_l2_send_msg'
    
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 5fcb7d47fef3862ee59d08d501dff7442b3ed391
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Sun Nov 29 10:32:50 2020 -0800

    net/tipc: fix various kernel-doc warnings
    
    kernel-doc and Sphinx fixes to eliminate lots of warnings
    in preparation for adding to the networking docbook.
    
    ../net/tipc/crypto.c:57: warning: cannot understand function prototype: 'enum '
    ../net/tipc/crypto.c:69: warning: cannot understand function prototype: 'enum '
    ../net/tipc/crypto.c:130: warning: Function parameter or member 'tfm' not described in 'tipc_tfm'
    ../net/tipc/crypto.c:130: warning: Function parameter or member 'list' not described in 'tipc_tfm'
    ../net/tipc/crypto.c:172: warning: Function parameter or member 'stat' not described in 'tipc_crypto_stats'
    ../net/tipc/crypto.c:232: warning: Function parameter or member 'flags' not described in 'tipc_crypto'
    ../net/tipc/crypto.c:329: warning: Function parameter or member 'ukey' not described in 'tipc_aead_key_validate'
    ../net/tipc/crypto.c:329: warning: Function parameter or member 'info' not described in 'tipc_aead_key_validate'
    ../net/tipc/crypto.c:482: warning: Function parameter or member 'aead' not described in 'tipc_aead_tfm_next'
    ../net/tipc/trace.c:43: warning: cannot understand function prototype: 'unsigned long sysctl_tipc_sk_filter[5] __read_mostly = '
    
    Documentation/networking/tipc:57: ../net/tipc/msg.c:584: WARNING: Unexpected indentation.
    Documentation/networking/tipc:63: ../net/tipc/name_table.c:536: WARNING: Unexpected indentation.
    Documentation/networking/tipc:63: ../net/tipc/name_table.c:537: WARNING: Block quote ends without a blank line; unexpected unindent.
    Documentation/networking/tipc:78: ../net/tipc/socket.c:3809: WARNING: Unexpected indentation.
    Documentation/networking/tipc:78: ../net/tipc/socket.c:3807: WARNING: Inline strong start-string without end-string.
    Documentation/networking/tipc:72: ../net/tipc/node.c:904: WARNING: Unexpected indentation.
    Documentation/networking/tipc:39: ../net/tipc/crypto.c:97: WARNING: Block quote ends without a blank line; unexpected unindent.
    Documentation/networking/tipc:39: ../net/tipc/crypto.c:98: WARNING: Block quote ends without a blank line; unexpected unindent.
    Documentation/networking/tipc:39: ../net/tipc/crypto.c:141: WARNING: Inline strong start-string without end-string.
    
    ../net/tipc/discover.c:82: warning: Function parameter or member 'skb' not described in 'tipc_disc_init_msg'
    
    ../net/tipc/msg.c:69: warning: Function parameter or member 'gfp' not described in 'tipc_buf_acquire'
    ../net/tipc/msg.c:382: warning: Function parameter or member 'offset' not described in 'tipc_msg_build'
    ../net/tipc/msg.c:708: warning: Function parameter or member 'net' not described in 'tipc_msg_lookup_dest'
    
    ../net/tipc/subscr.c:65: warning: Function parameter or member 'seq' not described in 'tipc_sub_check_overlap'
    ../net/tipc/subscr.c:65: warning: Function parameter or member 'found_lower' not described in 'tipc_sub_check_overlap'
    ../net/tipc/subscr.c:65: warning: Function parameter or member 'found_upper' not described in 'tipc_sub_check_overlap'
    
    ../net/tipc/udp_media.c:75: warning: Function parameter or member 'proto' not described in 'udp_media_addr'
    ../net/tipc/udp_media.c:75: warning: Function parameter or member 'port' not described in 'udp_media_addr'
    ../net/tipc/udp_media.c:75: warning: Function parameter or member 'ipv4' not described in 'udp_media_addr'
    ../net/tipc/udp_media.c:75: warning: Function parameter or member 'ipv6' not described in 'udp_media_addr'
    ../net/tipc/udp_media.c:98: warning: Function parameter or member 'rcast' not described in 'udp_bearer'
    
    Also fixed a typo of "duest" to "dest".
    
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit ff10527e89826aaf76480ee47e6fd05213189963
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Sun Nov 29 10:32:43 2020 -0800

    net/tipc: fix tipc header files for kernel-doc
    
    Fix tipc header files for adding to the networking docbook.
    
    Remove some uses of "/**" that were not kernel-doc notation.
    
    Fix some source formatting to eliminate Sphinx warnings.
    
    Add missing struct member and function argument kernel-doc descriptions.
    
    Correct the description of a couple of struct members that were
    marked as "(FIXME)".
    
    Documentation/networking/tipc:18: ../net/tipc/name_table.h:65: WARNING: Unexpected indentation.
    Documentation/networking/tipc:18: ../net/tipc/name_table.h:66: WARNING: Block quote ends without a blank line; unexpected unindent.
    
    ../net/tipc/bearer.h:128: warning: Function parameter or member 'min_win' not described in 'tipc_media'
    ../net/tipc/bearer.h:128: warning: Function parameter or member 'max_win' not described in 'tipc_media'
    
    ../net/tipc/bearer.h:171: warning: Function parameter or member 'min_win' not described in 'tipc_bearer'
    ../net/tipc/bearer.h:171: warning: Function parameter or member 'max_win' not described in 'tipc_bearer'
    ../net/tipc/bearer.h:171: warning: Function parameter or member 'disc' not described in 'tipc_bearer'
    ../net/tipc/bearer.h:171: warning: Function parameter or member 'up' not described in 'tipc_bearer'
    ../net/tipc/bearer.h:171: warning: Function parameter or member 'refcnt' not described in 'tipc_bearer'
    
    ../net/tipc/name_distr.h:68: warning: Function parameter or member 'port' not described in 'distr_item'
    
    ../net/tipc/name_table.h:111: warning: Function parameter or member 'services' not described in 'name_table'
    ../net/tipc/name_table.h:111: warning: Function parameter or member 'cluster_scope_lock' not described in 'name_table'
    ../net/tipc/name_table.h:111: warning: Function parameter or member 'rc_dests' not described in 'name_table'
    ../net/tipc/name_table.h:111: warning: Function parameter or member 'snd_nxt' not described in 'name_table'
    
    ../net/tipc/subscr.h:67: warning: Function parameter or member 'kref' not described in 'tipc_subscription'
    ../net/tipc/subscr.h:67: warning: Function parameter or member 'net' not described in 'tipc_subscription'
    ../net/tipc/subscr.h:67: warning: Function parameter or member 'service_list' not described in 'tipc_subscription'
    ../net/tipc/subscr.h:67: warning: Function parameter or member 'conid' not described in 'tipc_subscription'
    ../net/tipc/subscr.h:67: warning: Function parameter or member 'inactive' not described in 'tipc_subscription'
    ../net/tipc/subscr.h:67: warning: Function parameter or member 'lock' not described in 'tipc_subscription'
    
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 0643334902fcdc770e2d9555811200213339a3f6
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Mon Nov 30 09:55:44 2020 +0700

    tipc: fix incompatible mtu of transmission
    
    In commit 682cd3cf946b6
    ("tipc: confgiure and apply UDP bearer MTU on running links"), we
    introduced a function to change UDP bearer MTU and applied this new value
    across existing per-link. However, we did not apply this new MTU value at
    node level. This lead to packet dropped at link level if its size is
    greater than new MTU value.
    
    To fix this issue, we also apply this new MTU value for node level.
    
    Fixes: 682cd3cf946b6 ("tipc: confgiure and apply UDP bearer MTU on running links")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Link: https://lore.kernel.org/r/20201130025544.3602-1-hoang.h.le@dektech.com.au
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 6375da9dac8bec05a022f22ab22300cc824ec268
Merge: fff4c7469001 b6f88d9c2fae
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Fri Nov 27 17:34:04 2020 -0800

    Merge branch 'tipc-some-minor-improvements'
    
    Jon Maloy says:
    
    ====================
    tipc: some minor improvements
    
    We add some improvements that will be useful in future commits.
    ====================
    
    Link: https://lore.kernel.org/r/20201125182915.711370-1-jmaloy@redhat.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit b6f88d9c2faec015491a4c9936c170d7bc8539d5
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Wed Nov 25 13:29:15 2020 -0500

    tipc: update address terminology in code
    
    We update the terminology in the code so that deprecated structure
    names and macros are replaced with those currently recommended in
    the user API.
    
    struct tipc_portid   -> struct tipc_socket_addr
    struct tipc_name     -> struct tipc_service_addr
    struct tipc_name_seq -> struct tipc_service_range
    
    TIPC_ADDR_ID       -> TIPC_SOCKET_ADDR
    TIPC_ADDR_NAME     -> TIPC_SERVICE_ADDR
    TIPC_ADDR_NAMESEQ  -> TIPC_SERVICE_RANGE
    TIPC_CFG_SRV       -> TIPC_NODE_STATE
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 5f75e0a0e92a6c6ef93d61fb4d1d2a185cdbc2f9
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Wed Nov 25 13:29:14 2020 -0500

    tipc: make node number calculation reproducible
    
    The 32-bit node number, aka node hash or node address, is calculated
    based on the 128-bit node identity when it is not set explicitly by
    the user. In future commits we will need to perform this hash operation
    on peer nodes while feeling safe that we obtain the same result.
    
    We do this by interpreting the initial hash as a network byte order
    number. Whenever we need to use the number locally on a node
    we must therefore translate it to host byte order to obtain an
    architecure independent result.
    
    Furthermore, given the context where we use this number, we must not
    allow it to be zero unless the node identity also is zero. Hence, in
    the rare cases when the xor-ed hash value may end up as zero we replace
    it with a fix number, knowing that the code anyway is capable of
    handling hash collisions.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 60c102eedea0e487c897dd23cc7fefecf4449769
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Wed Nov 25 13:29:13 2020 -0500

    tipc: refactor tipc_sk_bind() function
    
    We refactor the tipc_sk_bind() function, so that the lock handling
    is handled separately from the logics. We also move some sanity
    tests to earlier in the call chain, to the function tipc_bind().
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 2589466499050a999c091f7e0fcfd9ec96e02b0c
Author: Wang Hai <wanghai38@huawei.com>
Date:   Mon Nov 9 22:09:13 2020 +0800

    tipc: fix memory leak in tipc_topsrv_start()
    
    [ Upstream commit fa6882c63621821f73cc806f291208e1c6ea6187 ]
    
    kmemleak report a memory leak as follows:
    
    unreferenced object 0xffff88810a596800 (size 512):
      comm "ip", pid 21558, jiffies 4297568990 (age 112.120s)
      hex dump (first 32 bytes):
        00 00 00 00 ad 4e ad de ff ff ff ff 00 00 00 00  .....N..........
        ff ff ff ff ff ff ff ff 00 83 60 b0 ff ff ff ff  ..........`.....
      backtrace:
        [<0000000022bbe21f>] tipc_topsrv_init_net+0x1f3/0xa70
        [<00000000fe15ddf7>] ops_init+0xa8/0x3c0
        [<00000000138af6f2>] setup_net+0x2de/0x7e0
        [<000000008c6807a3>] copy_net_ns+0x27d/0x530
        [<000000006b21adbd>] create_new_namespaces+0x382/0xa30
        [<00000000bb169746>] unshare_nsproxy_namespaces+0xa1/0x1d0
        [<00000000fe2e42bc>] ksys_unshare+0x39c/0x780
        [<0000000009ba3b19>] __x64_sys_unshare+0x2d/0x40
        [<00000000614ad866>] do_syscall_64+0x56/0xa0
        [<00000000a1b5ca3c>] entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    'srv' is malloced in tipc_topsrv_start() but not free before
    leaving from the error handling cases. We need to free it.
    
    Fixes: 5c45ab24ac77 ("tipc: make struct tipc_server private for server.c")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wang Hai <wanghai38@huawei.com>
    Link: https://lore.kernel.org/r/20201109140913.47370-1-wanghai38@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 78f6fac0814e242690d047ee5aacf093709b8797
Author: Wang Hai <wanghai38@huawei.com>
Date:   Mon Nov 9 22:09:13 2020 +0800

    tipc: fix memory leak in tipc_topsrv_start()
    
    [ Upstream commit fa6882c63621821f73cc806f291208e1c6ea6187 ]
    
    kmemleak report a memory leak as follows:
    
    unreferenced object 0xffff88810a596800 (size 512):
      comm "ip", pid 21558, jiffies 4297568990 (age 112.120s)
      hex dump (first 32 bytes):
        00 00 00 00 ad 4e ad de ff ff ff ff 00 00 00 00  .....N..........
        ff ff ff ff ff ff ff ff 00 83 60 b0 ff ff ff ff  ..........`.....
      backtrace:
        [<0000000022bbe21f>] tipc_topsrv_init_net+0x1f3/0xa70
        [<00000000fe15ddf7>] ops_init+0xa8/0x3c0
        [<00000000138af6f2>] setup_net+0x2de/0x7e0
        [<000000008c6807a3>] copy_net_ns+0x27d/0x530
        [<000000006b21adbd>] create_new_namespaces+0x382/0xa30
        [<00000000bb169746>] unshare_nsproxy_namespaces+0xa1/0x1d0
        [<00000000fe2e42bc>] ksys_unshare+0x39c/0x780
        [<0000000009ba3b19>] __x64_sys_unshare+0x2d/0x40
        [<00000000614ad866>] do_syscall_64+0x56/0xa0
        [<00000000a1b5ca3c>] entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    'srv' is malloced in tipc_topsrv_start() but not free before
    leaving from the error handling cases. We need to free it.
    
    Fixes: 5c45ab24ac77 ("tipc: make struct tipc_server private for server.c")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wang Hai <wanghai38@huawei.com>
    Link: https://lore.kernel.org/r/20201109140913.47370-1-wanghai38@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf9913775901db56dd5c5c4488c3c3f47d5ff4e0
Author: Wang Hai <wanghai38@huawei.com>
Date:   Mon Nov 9 22:09:13 2020 +0800

    tipc: fix memory leak in tipc_topsrv_start()
    
    [ Upstream commit fa6882c63621821f73cc806f291208e1c6ea6187 ]
    
    kmemleak report a memory leak as follows:
    
    unreferenced object 0xffff88810a596800 (size 512):
      comm "ip", pid 21558, jiffies 4297568990 (age 112.120s)
      hex dump (first 32 bytes):
        00 00 00 00 ad 4e ad de ff ff ff ff 00 00 00 00  .....N..........
        ff ff ff ff ff ff ff ff 00 83 60 b0 ff ff ff ff  ..........`.....
      backtrace:
        [<0000000022bbe21f>] tipc_topsrv_init_net+0x1f3/0xa70
        [<00000000fe15ddf7>] ops_init+0xa8/0x3c0
        [<00000000138af6f2>] setup_net+0x2de/0x7e0
        [<000000008c6807a3>] copy_net_ns+0x27d/0x530
        [<000000006b21adbd>] create_new_namespaces+0x382/0xa30
        [<00000000bb169746>] unshare_nsproxy_namespaces+0xa1/0x1d0
        [<00000000fe2e42bc>] ksys_unshare+0x39c/0x780
        [<0000000009ba3b19>] __x64_sys_unshare+0x2d/0x40
        [<00000000614ad866>] do_syscall_64+0x56/0xa0
        [<00000000a1b5ca3c>] entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    'srv' is malloced in tipc_topsrv_start() but not free before
    leaving from the error handling cases. We need to free it.
    
    Fixes: 5c45ab24ac77 ("tipc: make struct tipc_server private for server.c")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wang Hai <wanghai38@huawei.com>
    Link: https://lore.kernel.org/r/20201109140913.47370-1-wanghai38@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2f51e5758d61d37e517b809051048c6d0118ab41
Author: Wenlin Kang <wenlin.kang@windriver.com>
Date:   Thu Nov 12 17:34:42 2020 +0800

    tipc: fix -Wstringop-truncation warnings
    
    Replace strncpy() with strscpy(), fixes the following warning:
    
    In function 'bearer_name_validate',
        inlined from 'tipc_enable_bearer' at net/tipc/bearer.c:246:7:
    net/tipc/bearer.c:141:2: warning: 'strncpy' specified bound 32 equals destination size [-Wstringop-truncation]
      strncpy(name_copy, name, TIPC_MAX_BEARER_NAME);
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    Signed-off-by: Wenlin Kang <wenlin.kang@windriver.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Link: https://lore.kernel.org/r/20201112093442.8132-1-wenlin.kang@windriver.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit fa6882c63621821f73cc806f291208e1c6ea6187
Author: Wang Hai <wanghai38@huawei.com>
Date:   Mon Nov 9 22:09:13 2020 +0800

    tipc: fix memory leak in tipc_topsrv_start()
    
    kmemleak report a memory leak as follows:
    
    unreferenced object 0xffff88810a596800 (size 512):
      comm "ip", pid 21558, jiffies 4297568990 (age 112.120s)
      hex dump (first 32 bytes):
        00 00 00 00 ad 4e ad de ff ff ff ff 00 00 00 00  .....N..........
        ff ff ff ff ff ff ff ff 00 83 60 b0 ff ff ff ff  ..........`.....
      backtrace:
        [<0000000022bbe21f>] tipc_topsrv_init_net+0x1f3/0xa70
        [<00000000fe15ddf7>] ops_init+0xa8/0x3c0
        [<00000000138af6f2>] setup_net+0x2de/0x7e0
        [<000000008c6807a3>] copy_net_ns+0x27d/0x530
        [<000000006b21adbd>] create_new_namespaces+0x382/0xa30
        [<00000000bb169746>] unshare_nsproxy_namespaces+0xa1/0x1d0
        [<00000000fe2e42bc>] ksys_unshare+0x39c/0x780
        [<0000000009ba3b19>] __x64_sys_unshare+0x2d/0x40
        [<00000000614ad866>] do_syscall_64+0x56/0xa0
        [<00000000a1b5ca3c>] entry_SYSCALL_64_after_hwframe+0x44/0xa9
    
    'srv' is malloced in tipc_topsrv_start() but not free before
    leaving from the error handling cases. We need to free it.
    
    Fixes: 5c45ab24ac77 ("tipc: make struct tipc_server private for server.c")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wang Hai <wanghai38@huawei.com>
    Link: https://lore.kernel.org/r/20201109140913.47370-1-wanghai38@huawei.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit e240d9ca8801050d7bf74d1ddb190f55906b54f8
Author: Hoang Huu Le <hoang.h.le@dektech.com.au>
Date:   Thu Aug 27 09:56:51 2020 +0700

    tipc: fix use-after-free in tipc_bcast_get_mode
    
    commit fdeba99b1e58ecd18c2940c453e19e4ef20ff591 upstream.
    
    Syzbot has reported those issues as:
    
    ==================================================================
    BUG: KASAN: use-after-free in tipc_bcast_get_mode+0x3ab/0x400 net/tipc/bcast.c:759
    Read of size 1 at addr ffff88805e6b3571 by task kworker/0:6/3850
    
    CPU: 0 PID: 3850 Comm: kworker/0:6 Not tainted 5.8.0-rc7-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: events tipc_net_finalize_work
    
    Thread 1's call trace:
    [...]
      kfree+0x103/0x2c0 mm/slab.c:3757 <- bcbase releasing
      tipc_bcast_stop+0x1b0/0x2f0 net/tipc/bcast.c:721
      tipc_exit_net+0x24/0x270 net/tipc/core.c:112
    [...]
    
    Thread 2's call trace:
    [...]
      tipc_bcast_get_mode+0x3ab/0x400 net/tipc/bcast.c:759 <- bcbase
    has already been freed by Thread 1
    
      tipc_node_broadcast+0x9e/0xcc0 net/tipc/node.c:1744
      tipc_nametbl_publish+0x60b/0x970 net/tipc/name_table.c:752
      tipc_net_finalize net/tipc/net.c:141 [inline]
      tipc_net_finalize+0x1fa/0x310 net/tipc/net.c:131
      tipc_net_finalize_work+0x55/0x80 net/tipc/net.c:150
    [...]
    
    ==================================================================
    BUG: KASAN: use-after-free in tipc_named_reinit+0xef/0x290 net/tipc/name_distr.c:344
    Read of size 8 at addr ffff888052ab2000 by task kworker/0:13/30628
    CPU: 0 PID: 30628 Comm: kworker/0:13 Not tainted 5.8.0-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: events tipc_net_finalize_work
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1f0/0x31e lib/dump_stack.c:118
     print_address_description+0x66/0x5a0 mm/kasan/report.c:383
     __kasan_report mm/kasan/report.c:513 [inline]
     kasan_report+0x132/0x1d0 mm/kasan/report.c:530
     tipc_named_reinit+0xef/0x290 net/tipc/name_distr.c:344
     tipc_net_finalize+0x85/0xe0 net/tipc/net.c:138
     tipc_net_finalize_work+0x50/0x70 net/tipc/net.c:150
     process_one_work+0x789/0xfc0 kernel/workqueue.c:2269
     worker_thread+0xaa4/0x1460 kernel/workqueue.c:2415
     kthread+0x37e/0x3a0 drivers/block/aoe/aoecmd.c:1234
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:293
    [...]
    Freed by task 14058:
     save_stack mm/kasan/common.c:48 [inline]
     set_track mm/kasan/common.c:56 [inline]
     kasan_set_free_info mm/kasan/common.c:316 [inline]
     __kasan_slab_free+0x114/0x170 mm/kasan/common.c:455
     __cache_free mm/slab.c:3426 [inline]
     kfree+0x10a/0x220 mm/slab.c:3757
     tipc_exit_net+0x29/0x50 net/tipc/core.c:113
     ops_exit_list net/core/net_namespace.c:186 [inline]
     cleanup_net+0x708/0xba0 net/core/net_namespace.c:603
     process_one_work+0x789/0xfc0 kernel/workqueue.c:2269
     worker_thread+0xaa4/0x1460 kernel/workqueue.c:2415
     kthread+0x37e/0x3a0 drivers/block/aoe/aoecmd.c:1234
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:293
    
    Fix it by calling flush_scheduled_work() to make sure the
    tipc_net_finalize_work() stopped before releasing bcbase object.
    
    Reported-by: syzbot+6ea1f7a8df64596ef4d7@syzkaller.appspotmail.com
    Reported-by: syzbot+e9cc557752ab126c1b99@syzkaller.appspotmail.com
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Huu Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 76e5bba75a631602d10399eba4b38a791bc8a1ec
Author: Hoang Huu Le <hoang.h.le@dektech.com.au>
Date:   Thu Aug 27 09:56:51 2020 +0700

    tipc: fix use-after-free in tipc_bcast_get_mode
    
    commit fdeba99b1e58ecd18c2940c453e19e4ef20ff591 upstream.
    
    Syzbot has reported those issues as:
    
    ==================================================================
    BUG: KASAN: use-after-free in tipc_bcast_get_mode+0x3ab/0x400 net/tipc/bcast.c:759
    Read of size 1 at addr ffff88805e6b3571 by task kworker/0:6/3850
    
    CPU: 0 PID: 3850 Comm: kworker/0:6 Not tainted 5.8.0-rc7-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: events tipc_net_finalize_work
    
    Thread 1's call trace:
    [...]
      kfree+0x103/0x2c0 mm/slab.c:3757 <- bcbase releasing
      tipc_bcast_stop+0x1b0/0x2f0 net/tipc/bcast.c:721
      tipc_exit_net+0x24/0x270 net/tipc/core.c:112
    [...]
    
    Thread 2's call trace:
    [...]
      tipc_bcast_get_mode+0x3ab/0x400 net/tipc/bcast.c:759 <- bcbase
    has already been freed by Thread 1
    
      tipc_node_broadcast+0x9e/0xcc0 net/tipc/node.c:1744
      tipc_nametbl_publish+0x60b/0x970 net/tipc/name_table.c:752
      tipc_net_finalize net/tipc/net.c:141 [inline]
      tipc_net_finalize+0x1fa/0x310 net/tipc/net.c:131
      tipc_net_finalize_work+0x55/0x80 net/tipc/net.c:150
    [...]
    
    ==================================================================
    BUG: KASAN: use-after-free in tipc_named_reinit+0xef/0x290 net/tipc/name_distr.c:344
    Read of size 8 at addr ffff888052ab2000 by task kworker/0:13/30628
    CPU: 0 PID: 30628 Comm: kworker/0:13 Not tainted 5.8.0-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: events tipc_net_finalize_work
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1f0/0x31e lib/dump_stack.c:118
     print_address_description+0x66/0x5a0 mm/kasan/report.c:383
     __kasan_report mm/kasan/report.c:513 [inline]
     kasan_report+0x132/0x1d0 mm/kasan/report.c:530
     tipc_named_reinit+0xef/0x290 net/tipc/name_distr.c:344
     tipc_net_finalize+0x85/0xe0 net/tipc/net.c:138
     tipc_net_finalize_work+0x50/0x70 net/tipc/net.c:150
     process_one_work+0x789/0xfc0 kernel/workqueue.c:2269
     worker_thread+0xaa4/0x1460 kernel/workqueue.c:2415
     kthread+0x37e/0x3a0 drivers/block/aoe/aoecmd.c:1234
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:293
    [...]
    Freed by task 14058:
     save_stack mm/kasan/common.c:48 [inline]
     set_track mm/kasan/common.c:56 [inline]
     kasan_set_free_info mm/kasan/common.c:316 [inline]
     __kasan_slab_free+0x114/0x170 mm/kasan/common.c:455
     __cache_free mm/slab.c:3426 [inline]
     kfree+0x10a/0x220 mm/slab.c:3757
     tipc_exit_net+0x29/0x50 net/tipc/core.c:113
     ops_exit_list net/core/net_namespace.c:186 [inline]
     cleanup_net+0x708/0xba0 net/core/net_namespace.c:603
     process_one_work+0x789/0xfc0 kernel/workqueue.c:2269
     worker_thread+0xaa4/0x1460 kernel/workqueue.c:2415
     kthread+0x37e/0x3a0 drivers/block/aoe/aoecmd.c:1234
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:293
    
    Fix it by calling flush_scheduled_work() to make sure the
    tipc_net_finalize_work() stopped before releasing bcbase object.
    
    Reported-by: syzbot+6ea1f7a8df64596ef4d7@syzkaller.appspotmail.com
    Reported-by: syzbot+e9cc557752ab126c1b99@syzkaller.appspotmail.com
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Huu Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 604ac10d9d1e9a85787d53acbba541f420b9cc9e
Author: Hoang Huu Le <hoang.h.le@dektech.com.au>
Date:   Thu Aug 27 09:56:51 2020 +0700

    tipc: fix use-after-free in tipc_bcast_get_mode
    
    commit fdeba99b1e58ecd18c2940c453e19e4ef20ff591 upstream.
    
    Syzbot has reported those issues as:
    
    ==================================================================
    BUG: KASAN: use-after-free in tipc_bcast_get_mode+0x3ab/0x400 net/tipc/bcast.c:759
    Read of size 1 at addr ffff88805e6b3571 by task kworker/0:6/3850
    
    CPU: 0 PID: 3850 Comm: kworker/0:6 Not tainted 5.8.0-rc7-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: events tipc_net_finalize_work
    
    Thread 1's call trace:
    [...]
      kfree+0x103/0x2c0 mm/slab.c:3757 <- bcbase releasing
      tipc_bcast_stop+0x1b0/0x2f0 net/tipc/bcast.c:721
      tipc_exit_net+0x24/0x270 net/tipc/core.c:112
    [...]
    
    Thread 2's call trace:
    [...]
      tipc_bcast_get_mode+0x3ab/0x400 net/tipc/bcast.c:759 <- bcbase
    has already been freed by Thread 1
    
      tipc_node_broadcast+0x9e/0xcc0 net/tipc/node.c:1744
      tipc_nametbl_publish+0x60b/0x970 net/tipc/name_table.c:752
      tipc_net_finalize net/tipc/net.c:141 [inline]
      tipc_net_finalize+0x1fa/0x310 net/tipc/net.c:131
      tipc_net_finalize_work+0x55/0x80 net/tipc/net.c:150
    [...]
    
    ==================================================================
    BUG: KASAN: use-after-free in tipc_named_reinit+0xef/0x290 net/tipc/name_distr.c:344
    Read of size 8 at addr ffff888052ab2000 by task kworker/0:13/30628
    CPU: 0 PID: 30628 Comm: kworker/0:13 Not tainted 5.8.0-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: events tipc_net_finalize_work
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1f0/0x31e lib/dump_stack.c:118
     print_address_description+0x66/0x5a0 mm/kasan/report.c:383
     __kasan_report mm/kasan/report.c:513 [inline]
     kasan_report+0x132/0x1d0 mm/kasan/report.c:530
     tipc_named_reinit+0xef/0x290 net/tipc/name_distr.c:344
     tipc_net_finalize+0x85/0xe0 net/tipc/net.c:138
     tipc_net_finalize_work+0x50/0x70 net/tipc/net.c:150
     process_one_work+0x789/0xfc0 kernel/workqueue.c:2269
     worker_thread+0xaa4/0x1460 kernel/workqueue.c:2415
     kthread+0x37e/0x3a0 drivers/block/aoe/aoecmd.c:1234
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:293
    [...]
    Freed by task 14058:
     save_stack mm/kasan/common.c:48 [inline]
     set_track mm/kasan/common.c:56 [inline]
     kasan_set_free_info mm/kasan/common.c:316 [inline]
     __kasan_slab_free+0x114/0x170 mm/kasan/common.c:455
     __cache_free mm/slab.c:3426 [inline]
     kfree+0x10a/0x220 mm/slab.c:3757
     tipc_exit_net+0x29/0x50 net/tipc/core.c:113
     ops_exit_list net/core/net_namespace.c:186 [inline]
     cleanup_net+0x708/0xba0 net/core/net_namespace.c:603
     process_one_work+0x789/0xfc0 kernel/workqueue.c:2269
     worker_thread+0xaa4/0x1460 kernel/workqueue.c:2415
     kthread+0x37e/0x3a0 drivers/block/aoe/aoecmd.c:1234
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:293
    
    Fix it by calling flush_scheduled_work() to make sure the
    tipc_net_finalize_work() stopped before releasing bcbase object.
    
    Reported-by: syzbot+6ea1f7a8df64596ef4d7@syzkaller.appspotmail.com
    Reported-by: syzbot+e9cc557752ab126c1b99@syzkaller.appspotmail.com
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Huu Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3ac95d9564041a4f469e5c71884f4d7821ce68b2
Author: Hoang Huu Le <hoang.h.le@dektech.com.au>
Date:   Thu Aug 27 09:56:51 2020 +0700

    tipc: fix use-after-free in tipc_bcast_get_mode
    
    commit fdeba99b1e58ecd18c2940c453e19e4ef20ff591 upstream.
    
    Syzbot has reported those issues as:
    
    ==================================================================
    BUG: KASAN: use-after-free in tipc_bcast_get_mode+0x3ab/0x400 net/tipc/bcast.c:759
    Read of size 1 at addr ffff88805e6b3571 by task kworker/0:6/3850
    
    CPU: 0 PID: 3850 Comm: kworker/0:6 Not tainted 5.8.0-rc7-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: events tipc_net_finalize_work
    
    Thread 1's call trace:
    [...]
      kfree+0x103/0x2c0 mm/slab.c:3757 <- bcbase releasing
      tipc_bcast_stop+0x1b0/0x2f0 net/tipc/bcast.c:721
      tipc_exit_net+0x24/0x270 net/tipc/core.c:112
    [...]
    
    Thread 2's call trace:
    [...]
      tipc_bcast_get_mode+0x3ab/0x400 net/tipc/bcast.c:759 <- bcbase
    has already been freed by Thread 1
    
      tipc_node_broadcast+0x9e/0xcc0 net/tipc/node.c:1744
      tipc_nametbl_publish+0x60b/0x970 net/tipc/name_table.c:752
      tipc_net_finalize net/tipc/net.c:141 [inline]
      tipc_net_finalize+0x1fa/0x310 net/tipc/net.c:131
      tipc_net_finalize_work+0x55/0x80 net/tipc/net.c:150
    [...]
    
    ==================================================================
    BUG: KASAN: use-after-free in tipc_named_reinit+0xef/0x290 net/tipc/name_distr.c:344
    Read of size 8 at addr ffff888052ab2000 by task kworker/0:13/30628
    CPU: 0 PID: 30628 Comm: kworker/0:13 Not tainted 5.8.0-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: events tipc_net_finalize_work
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1f0/0x31e lib/dump_stack.c:118
     print_address_description+0x66/0x5a0 mm/kasan/report.c:383
     __kasan_report mm/kasan/report.c:513 [inline]
     kasan_report+0x132/0x1d0 mm/kasan/report.c:530
     tipc_named_reinit+0xef/0x290 net/tipc/name_distr.c:344
     tipc_net_finalize+0x85/0xe0 net/tipc/net.c:138
     tipc_net_finalize_work+0x50/0x70 net/tipc/net.c:150
     process_one_work+0x789/0xfc0 kernel/workqueue.c:2269
     worker_thread+0xaa4/0x1460 kernel/workqueue.c:2415
     kthread+0x37e/0x3a0 drivers/block/aoe/aoecmd.c:1234
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:293
    [...]
    Freed by task 14058:
     save_stack mm/kasan/common.c:48 [inline]
     set_track mm/kasan/common.c:56 [inline]
     kasan_set_free_info mm/kasan/common.c:316 [inline]
     __kasan_slab_free+0x114/0x170 mm/kasan/common.c:455
     __cache_free mm/slab.c:3426 [inline]
     kfree+0x10a/0x220 mm/slab.c:3757
     tipc_exit_net+0x29/0x50 net/tipc/core.c:113
     ops_exit_list net/core/net_namespace.c:186 [inline]
     cleanup_net+0x708/0xba0 net/core/net_namespace.c:603
     process_one_work+0x789/0xfc0 kernel/workqueue.c:2269
     worker_thread+0xaa4/0x1460 kernel/workqueue.c:2415
     kthread+0x37e/0x3a0 drivers/block/aoe/aoecmd.c:1234
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:293
    
    Fix it by calling flush_scheduled_work() to make sure the
    tipc_net_finalize_work() stopped before releasing bcbase object.
    
    Reported-by: syzbot+6ea1f7a8df64596ef4d7@syzkaller.appspotmail.com
    Reported-by: syzbot+e9cc557752ab126c1b99@syzkaller.appspotmail.com
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Huu Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7153ef83273e586602fa0df3ff23e37d00d65e17
Author: Hoang Huu Le <hoang.h.le@dektech.com.au>
Date:   Thu Aug 27 09:56:51 2020 +0700

    tipc: fix use-after-free in tipc_bcast_get_mode
    
    commit fdeba99b1e58ecd18c2940c453e19e4ef20ff591 upstream.
    
    Syzbot has reported those issues as:
    
    ==================================================================
    BUG: KASAN: use-after-free in tipc_bcast_get_mode+0x3ab/0x400 net/tipc/bcast.c:759
    Read of size 1 at addr ffff88805e6b3571 by task kworker/0:6/3850
    
    CPU: 0 PID: 3850 Comm: kworker/0:6 Not tainted 5.8.0-rc7-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: events tipc_net_finalize_work
    
    Thread 1's call trace:
    [...]
      kfree+0x103/0x2c0 mm/slab.c:3757 <- bcbase releasing
      tipc_bcast_stop+0x1b0/0x2f0 net/tipc/bcast.c:721
      tipc_exit_net+0x24/0x270 net/tipc/core.c:112
    [...]
    
    Thread 2's call trace:
    [...]
      tipc_bcast_get_mode+0x3ab/0x400 net/tipc/bcast.c:759 <- bcbase
    has already been freed by Thread 1
    
      tipc_node_broadcast+0x9e/0xcc0 net/tipc/node.c:1744
      tipc_nametbl_publish+0x60b/0x970 net/tipc/name_table.c:752
      tipc_net_finalize net/tipc/net.c:141 [inline]
      tipc_net_finalize+0x1fa/0x310 net/tipc/net.c:131
      tipc_net_finalize_work+0x55/0x80 net/tipc/net.c:150
    [...]
    
    ==================================================================
    BUG: KASAN: use-after-free in tipc_named_reinit+0xef/0x290 net/tipc/name_distr.c:344
    Read of size 8 at addr ffff888052ab2000 by task kworker/0:13/30628
    CPU: 0 PID: 30628 Comm: kworker/0:13 Not tainted 5.8.0-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: events tipc_net_finalize_work
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1f0/0x31e lib/dump_stack.c:118
     print_address_description+0x66/0x5a0 mm/kasan/report.c:383
     __kasan_report mm/kasan/report.c:513 [inline]
     kasan_report+0x132/0x1d0 mm/kasan/report.c:530
     tipc_named_reinit+0xef/0x290 net/tipc/name_distr.c:344
     tipc_net_finalize+0x85/0xe0 net/tipc/net.c:138
     tipc_net_finalize_work+0x50/0x70 net/tipc/net.c:150
     process_one_work+0x789/0xfc0 kernel/workqueue.c:2269
     worker_thread+0xaa4/0x1460 kernel/workqueue.c:2415
     kthread+0x37e/0x3a0 drivers/block/aoe/aoecmd.c:1234
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:293
    [...]
    Freed by task 14058:
     save_stack mm/kasan/common.c:48 [inline]
     set_track mm/kasan/common.c:56 [inline]
     kasan_set_free_info mm/kasan/common.c:316 [inline]
     __kasan_slab_free+0x114/0x170 mm/kasan/common.c:455
     __cache_free mm/slab.c:3426 [inline]
     kfree+0x10a/0x220 mm/slab.c:3757
     tipc_exit_net+0x29/0x50 net/tipc/core.c:113
     ops_exit_list net/core/net_namespace.c:186 [inline]
     cleanup_net+0x708/0xba0 net/core/net_namespace.c:603
     process_one_work+0x789/0xfc0 kernel/workqueue.c:2269
     worker_thread+0xaa4/0x1460 kernel/workqueue.c:2415
     kthread+0x37e/0x3a0 drivers/block/aoe/aoecmd.c:1234
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:293
    
    Fix it by calling flush_scheduled_work() to make sure the
    tipc_net_finalize_work() stopped before releasing bcbase object.
    
    Reported-by: syzbot+6ea1f7a8df64596ef4d7@syzkaller.appspotmail.com
    Reported-by: syzbot+e9cc557752ab126c1b99@syzkaller.appspotmail.com
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Huu Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f955928611df67f2aa2ca136b31931d2304fcb38
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Tue Oct 27 10:24:03 2020 +0700

    tipc: fix memory leak caused by tipc_buf_append()
    
    [ Upstream commit ceb1eb2fb609c88363e06618b8d4bbf7815a4e03 ]
    
    Commit ed42989eab57 ("tipc: fix the skb_unshare() in tipc_buf_append()")
    replaced skb_unshare() with skb_copy() to not reduce the data reference
    counter of the original skb intentionally. This is not the correct
    way to handle the cloned skb because it causes memory leak in 2
    following cases:
     1/ Sending multicast messages via broadcast link
      The original skb list is cloned to the local skb list for local
      destination. After that, the data reference counter of each skb
      in the original list has the value of 2. This causes each skb not
      to be freed after receiving ACK:
      tipc_link_advance_transmq()
      {
       ...
       /* release skb */
       __skb_unlink(skb, &l->transmq);
       kfree_skb(skb); <-- memory exists after being freed
      }
    
     2/ Sending multicast messages via replicast link
      Similar to the above case, each skb cannot be freed after purging
      the skb list:
      tipc_mcast_xmit()
      {
       ...
       __skb_queue_purge(pkts); <-- memory exists after being freed
      }
    
    This commit fixes this issue by using skb_unshare() instead. Besides,
    to avoid use-after-free error reported by KASAN, the pointer to the
    fragment is set to NULL before calling skb_unshare() to make sure that
    the original skb is not freed after freeing the fragment 2 times in
    case skb_unshare() returns NULL.
    
    Fixes: ed42989eab57 ("tipc: fix the skb_unshare() in tipc_buf_append()")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Reported-by: Thang Hoang Ngo <thang.h.ngo@dektech.com.au>
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
    Link: https://lore.kernel.org/r/20201027032403.1823-1-tung.q.nguyen@dektech.com.au
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ae010785847f89122ba38f0eb94947c782f842ad
Author: Hoang Huu Le <hoang.h.le@dektech.com.au>
Date:   Thu Aug 27 09:56:51 2020 +0700

    tipc: fix use-after-free in tipc_bcast_get_mode
    
    commit fdeba99b1e58ecd18c2940c453e19e4ef20ff591 upstream.
    
    Syzbot has reported those issues as:
    
    ==================================================================
    BUG: KASAN: use-after-free in tipc_bcast_get_mode+0x3ab/0x400 net/tipc/bcast.c:759
    Read of size 1 at addr ffff88805e6b3571 by task kworker/0:6/3850
    
    CPU: 0 PID: 3850 Comm: kworker/0:6 Not tainted 5.8.0-rc7-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: events tipc_net_finalize_work
    
    Thread 1's call trace:
    [...]
      kfree+0x103/0x2c0 mm/slab.c:3757 <- bcbase releasing
      tipc_bcast_stop+0x1b0/0x2f0 net/tipc/bcast.c:721
      tipc_exit_net+0x24/0x270 net/tipc/core.c:112
    [...]
    
    Thread 2's call trace:
    [...]
      tipc_bcast_get_mode+0x3ab/0x400 net/tipc/bcast.c:759 <- bcbase
    has already been freed by Thread 1
    
      tipc_node_broadcast+0x9e/0xcc0 net/tipc/node.c:1744
      tipc_nametbl_publish+0x60b/0x970 net/tipc/name_table.c:752
      tipc_net_finalize net/tipc/net.c:141 [inline]
      tipc_net_finalize+0x1fa/0x310 net/tipc/net.c:131
      tipc_net_finalize_work+0x55/0x80 net/tipc/net.c:150
    [...]
    
    ==================================================================
    BUG: KASAN: use-after-free in tipc_named_reinit+0xef/0x290 net/tipc/name_distr.c:344
    Read of size 8 at addr ffff888052ab2000 by task kworker/0:13/30628
    CPU: 0 PID: 30628 Comm: kworker/0:13 Not tainted 5.8.0-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: events tipc_net_finalize_work
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1f0/0x31e lib/dump_stack.c:118
     print_address_description+0x66/0x5a0 mm/kasan/report.c:383
     __kasan_report mm/kasan/report.c:513 [inline]
     kasan_report+0x132/0x1d0 mm/kasan/report.c:530
     tipc_named_reinit+0xef/0x290 net/tipc/name_distr.c:344
     tipc_net_finalize+0x85/0xe0 net/tipc/net.c:138
     tipc_net_finalize_work+0x50/0x70 net/tipc/net.c:150
     process_one_work+0x789/0xfc0 kernel/workqueue.c:2269
     worker_thread+0xaa4/0x1460 kernel/workqueue.c:2415
     kthread+0x37e/0x3a0 drivers/block/aoe/aoecmd.c:1234
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:293
    [...]
    Freed by task 14058:
     save_stack mm/kasan/common.c:48 [inline]
     set_track mm/kasan/common.c:56 [inline]
     kasan_set_free_info mm/kasan/common.c:316 [inline]
     __kasan_slab_free+0x114/0x170 mm/kasan/common.c:455
     __cache_free mm/slab.c:3426 [inline]
     kfree+0x10a/0x220 mm/slab.c:3757
     tipc_exit_net+0x29/0x50 net/tipc/core.c:113
     ops_exit_list net/core/net_namespace.c:186 [inline]
     cleanup_net+0x708/0xba0 net/core/net_namespace.c:603
     process_one_work+0x789/0xfc0 kernel/workqueue.c:2269
     worker_thread+0xaa4/0x1460 kernel/workqueue.c:2415
     kthread+0x37e/0x3a0 drivers/block/aoe/aoecmd.c:1234
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:293
    
    Fix it by calling flush_scheduled_work() to make sure the
    tipc_net_finalize_work() stopped before releasing bcbase object.
    
    Reported-by: syzbot+6ea1f7a8df64596ef4d7@syzkaller.appspotmail.com
    Reported-by: syzbot+e9cc557752ab126c1b99@syzkaller.appspotmail.com
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Huu Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a373602a898a071898db3797b3e2f9a5cb27ef18
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Tue Oct 27 10:24:03 2020 +0700

    tipc: fix memory leak caused by tipc_buf_append()
    
    [ Upstream commit ceb1eb2fb609c88363e06618b8d4bbf7815a4e03 ]
    
    Commit ed42989eab57 ("tipc: fix the skb_unshare() in tipc_buf_append()")
    replaced skb_unshare() with skb_copy() to not reduce the data reference
    counter of the original skb intentionally. This is not the correct
    way to handle the cloned skb because it causes memory leak in 2
    following cases:
     1/ Sending multicast messages via broadcast link
      The original skb list is cloned to the local skb list for local
      destination. After that, the data reference counter of each skb
      in the original list has the value of 2. This causes each skb not
      to be freed after receiving ACK:
      tipc_link_advance_transmq()
      {
       ...
       /* release skb */
       __skb_unlink(skb, &l->transmq);
       kfree_skb(skb); <-- memory exists after being freed
      }
    
     2/ Sending multicast messages via replicast link
      Similar to the above case, each skb cannot be freed after purging
      the skb list:
      tipc_mcast_xmit()
      {
       ...
       __skb_queue_purge(pkts); <-- memory exists after being freed
      }
    
    This commit fixes this issue by using skb_unshare() instead. Besides,
    to avoid use-after-free error reported by KASAN, the pointer to the
    fragment is set to NULL before calling skb_unshare() to make sure that
    the original skb is not freed after freeing the fragment 2 times in
    case skb_unshare() returns NULL.
    
    Fixes: ed42989eab57 ("tipc: fix the skb_unshare() in tipc_buf_append()")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Reported-by: Thang Hoang Ngo <thang.h.ngo@dektech.com.au>
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
    Link: https://lore.kernel.org/r/20201027032403.1823-1-tung.q.nguyen@dektech.com.au
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 48ea03f8bb651ed06c29bad75fcb35b7c2a13d3e
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Tue Oct 27 10:24:03 2020 +0700

    tipc: fix memory leak caused by tipc_buf_append()
    
    [ Upstream commit ceb1eb2fb609c88363e06618b8d4bbf7815a4e03 ]
    
    Commit ed42989eab57 ("tipc: fix the skb_unshare() in tipc_buf_append()")
    replaced skb_unshare() with skb_copy() to not reduce the data reference
    counter of the original skb intentionally. This is not the correct
    way to handle the cloned skb because it causes memory leak in 2
    following cases:
     1/ Sending multicast messages via broadcast link
      The original skb list is cloned to the local skb list for local
      destination. After that, the data reference counter of each skb
      in the original list has the value of 2. This causes each skb not
      to be freed after receiving ACK:
      tipc_link_advance_transmq()
      {
       ...
       /* release skb */
       __skb_unlink(skb, &l->transmq);
       kfree_skb(skb); <-- memory exists after being freed
      }
    
     2/ Sending multicast messages via replicast link
      Similar to the above case, each skb cannot be freed after purging
      the skb list:
      tipc_mcast_xmit()
      {
       ...
       __skb_queue_purge(pkts); <-- memory exists after being freed
      }
    
    This commit fixes this issue by using skb_unshare() instead. Besides,
    to avoid use-after-free error reported by KASAN, the pointer to the
    fragment is set to NULL before calling skb_unshare() to make sure that
    the original skb is not freed after freeing the fragment 2 times in
    case skb_unshare() returns NULL.
    
    Fixes: ed42989eab57 ("tipc: fix the skb_unshare() in tipc_buf_append()")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Reported-by: Thang Hoang Ngo <thang.h.ngo@dektech.com.au>
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
    Link: https://lore.kernel.org/r/20201027032403.1823-1-tung.q.nguyen@dektech.com.au
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d9cef8ed2bedbea1a6e533c9e555c2f5c8f884c0
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Tue Oct 27 10:24:03 2020 +0700

    tipc: fix memory leak caused by tipc_buf_append()
    
    [ Upstream commit ceb1eb2fb609c88363e06618b8d4bbf7815a4e03 ]
    
    Commit ed42989eab57 ("tipc: fix the skb_unshare() in tipc_buf_append()")
    replaced skb_unshare() with skb_copy() to not reduce the data reference
    counter of the original skb intentionally. This is not the correct
    way to handle the cloned skb because it causes memory leak in 2
    following cases:
     1/ Sending multicast messages via broadcast link
      The original skb list is cloned to the local skb list for local
      destination. After that, the data reference counter of each skb
      in the original list has the value of 2. This causes each skb not
      to be freed after receiving ACK:
      tipc_link_advance_transmq()
      {
       ...
       /* release skb */
       __skb_unlink(skb, &l->transmq);
       kfree_skb(skb); <-- memory exists after being freed
      }
    
     2/ Sending multicast messages via replicast link
      Similar to the above case, each skb cannot be freed after purging
      the skb list:
      tipc_mcast_xmit()
      {
       ...
       __skb_queue_purge(pkts); <-- memory exists after being freed
      }
    
    This commit fixes this issue by using skb_unshare() instead. Besides,
    to avoid use-after-free error reported by KASAN, the pointer to the
    fragment is set to NULL before calling skb_unshare() to make sure that
    the original skb is not freed after freeing the fragment 2 times in
    case skb_unshare() returns NULL.
    
    Fixes: ed42989eab57 ("tipc: fix the skb_unshare() in tipc_buf_append()")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Reported-by: Thang Hoang Ngo <thang.h.ngo@dektech.com.au>
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
    Link: https://lore.kernel.org/r/20201027032403.1823-1-tung.q.nguyen@dektech.com.au
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f2219c322ff2d91afbaa1236f1f91a28b785cd1e
Author: Tom Rix <trix@redhat.com>
Date:   Sun Nov 1 07:58:22 2020 -0800

    tipc: remove unneeded semicolon
    
    A semicolon is not needed after a switch statement.
    
    Signed-off-by: Tom Rix <trix@redhat.com>
    Link: https://lore.kernel.org/r/20201101155822.2294856-1-trix@redhat.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit edb2c939d889ef86341f51bda9f60c445710e739
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Tue Oct 27 10:24:03 2020 +0700

    tipc: fix memory leak caused by tipc_buf_append()
    
    [ Upstream commit ceb1eb2fb609c88363e06618b8d4bbf7815a4e03 ]
    
    Commit ed42989eab57 ("tipc: fix the skb_unshare() in tipc_buf_append()")
    replaced skb_unshare() with skb_copy() to not reduce the data reference
    counter of the original skb intentionally. This is not the correct
    way to handle the cloned skb because it causes memory leak in 2
    following cases:
     1/ Sending multicast messages via broadcast link
      The original skb list is cloned to the local skb list for local
      destination. After that, the data reference counter of each skb
      in the original list has the value of 2. This causes each skb not
      to be freed after receiving ACK:
      tipc_link_advance_transmq()
      {
       ...
       /* release skb */
       __skb_unlink(skb, &l->transmq);
       kfree_skb(skb); <-- memory exists after being freed
      }
    
     2/ Sending multicast messages via replicast link
      Similar to the above case, each skb cannot be freed after purging
      the skb list:
      tipc_mcast_xmit()
      {
       ...
       __skb_queue_purge(pkts); <-- memory exists after being freed
      }
    
    This commit fixes this issue by using skb_unshare() instead. Besides,
    to avoid use-after-free error reported by KASAN, the pointer to the
    fragment is set to NULL before calling skb_unshare() to make sure that
    the original skb is not freed after freeing the fragment 2 times in
    case skb_unshare() returns NULL.
    
    Fixes: ed42989eab57 ("tipc: fix the skb_unshare() in tipc_buf_append()")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Reported-by: Thang Hoang Ngo <thang.h.ngo@dektech.com.au>
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
    Link: https://lore.kernel.org/r/20201027032403.1823-1-tung.q.nguyen@dektech.com.au
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit af5d5b8afd1235517b2ea1590dbf145a458839f4
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Tue Oct 27 10:24:03 2020 +0700

    tipc: fix memory leak caused by tipc_buf_append()
    
    [ Upstream commit ceb1eb2fb609c88363e06618b8d4bbf7815a4e03 ]
    
    Commit ed42989eab57 ("tipc: fix the skb_unshare() in tipc_buf_append()")
    replaced skb_unshare() with skb_copy() to not reduce the data reference
    counter of the original skb intentionally. This is not the correct
    way to handle the cloned skb because it causes memory leak in 2
    following cases:
     1/ Sending multicast messages via broadcast link
      The original skb list is cloned to the local skb list for local
      destination. After that, the data reference counter of each skb
      in the original list has the value of 2. This causes each skb not
      to be freed after receiving ACK:
      tipc_link_advance_transmq()
      {
       ...
       /* release skb */
       __skb_unlink(skb, &l->transmq);
       kfree_skb(skb); <-- memory exists after being freed
      }
    
     2/ Sending multicast messages via replicast link
      Similar to the above case, each skb cannot be freed after purging
      the skb list:
      tipc_mcast_xmit()
      {
       ...
       __skb_queue_purge(pkts); <-- memory exists after being freed
      }
    
    This commit fixes this issue by using skb_unshare() instead. Besides,
    to avoid use-after-free error reported by KASAN, the pointer to the
    fragment is set to NULL before calling skb_unshare() to make sure that
    the original skb is not freed after freeing the fragment 2 times in
    case skb_unshare() returns NULL.
    
    Fixes: ed42989eab57 ("tipc: fix the skb_unshare() in tipc_buf_append()")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Reported-by: Thang Hoang Ngo <thang.h.ngo@dektech.com.au>
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
    Link: https://lore.kernel.org/r/20201027032403.1823-1-tung.q.nguyen@dektech.com.au
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 30d628ede582f33e8ff4e206af35be70c1e77f7f
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Tue Oct 27 10:24:03 2020 +0700

    tipc: fix memory leak caused by tipc_buf_append()
    
    [ Upstream commit ceb1eb2fb609c88363e06618b8d4bbf7815a4e03 ]
    
    Commit ed42989eab57 ("tipc: fix the skb_unshare() in tipc_buf_append()")
    replaced skb_unshare() with skb_copy() to not reduce the data reference
    counter of the original skb intentionally. This is not the correct
    way to handle the cloned skb because it causes memory leak in 2
    following cases:
     1/ Sending multicast messages via broadcast link
      The original skb list is cloned to the local skb list for local
      destination. After that, the data reference counter of each skb
      in the original list has the value of 2. This causes each skb not
      to be freed after receiving ACK:
      tipc_link_advance_transmq()
      {
       ...
       /* release skb */
       __skb_unlink(skb, &l->transmq);
       kfree_skb(skb); <-- memory exists after being freed
      }
    
     2/ Sending multicast messages via replicast link
      Similar to the above case, each skb cannot be freed after purging
      the skb list:
      tipc_mcast_xmit()
      {
       ...
       __skb_queue_purge(pkts); <-- memory exists after being freed
      }
    
    This commit fixes this issue by using skb_unshare() instead. Besides,
    to avoid use-after-free error reported by KASAN, the pointer to the
    fragment is set to NULL before calling skb_unshare() to make sure that
    the original skb is not freed after freeing the fragment 2 times in
    case skb_unshare() returns NULL.
    
    Fixes: ed42989eab57 ("tipc: fix the skb_unshare() in tipc_buf_append()")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Reported-by: Thang Hoang Ngo <thang.h.ngo@dektech.com.au>
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
    Link: https://lore.kernel.org/r/20201027032403.1823-1-tung.q.nguyen@dektech.com.au
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 09b5678c778f389d911a8ca80c42ca4dcd349043
Author: Hoang Huu Le <hoang.h.le@dektech.com.au>
Date:   Wed Oct 28 10:27:12 2020 +0700

    tipc: remove dead code in tipc_net and relatives
    
    dist_queue is no longer used since commit 37922ea4a310
    ("tipc: permit overlapping service ranges in name table")
    
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Hoang Huu Le <hoang.h.le@dektech.com.au>
    Link: https://lore.kernel.org/r/20201028032712.31009-1-hoang.h.le@dektech.com.au
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 79b1119b851d11f78b0e33b072f0bd6f347421b5
Author: Andrew Lunn <andrew@lunn.ch>
Date:   Wed Oct 28 01:38:49 2020 +0100

    net: tipc: Add __printf() markup to fix -Wsuggest-attribute=format
    
    net/tipc/netlink_compat.c: In function ‘tipc_tlv_sprintf’:
    net/tipc/netlink_compat.c:137:2: warning: function ‘tipc_tlv_sprintf’ might be a candidate for ‘gnu_printf’ format attribute [-Wsuggest-attribute=format]
      137 |  n = vscnprintf(buf, rem, fmt, args);
    
    Signed-off-by: Andrew Lunn <andrew@lunn.ch>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit b3b7e64bcbcb46542650d1980ea22ff25f0332ee
Author: Andrew Lunn <andrew@lunn.ch>
Date:   Wed Oct 28 01:43:33 2020 +0100

    net: tipc: Fix parameter types passed to %s formater
    
    Now that the compiler is performing printf checking, we get the warning:
    
    net/tipc/netlink_compat.c: In function ‘tipc_nl_compat_link_stat_dump’:
    net/tipc/netlink_compat.c:591:39: warning: format ‘%s’ expects argument of type ‘char *’, but argument 3 has type ‘void *’ [-Wformat=]
      591 |  tipc_tlv_sprintf(msg->rep, "\nLink <%s>\n",
          |                                      ~^
          |                                       |
          |                                       char *
          |                                      %p
      592 |     nla_data(link[TIPC_NLA_LINK_NAME]));
          |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          |     |
          |     void *
    
    There is no nla_string(), so cast to a char *.
    
    Signed-off-by: Andrew Lunn <andrew@lunn.ch>
    Link: https://lore.kernel.org/r/20201028004333.929816-1-andrew@lunn.ch
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 72671b355f9daaf4b8b9b5f13138b17c67e2959d
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Thu Oct 29 21:29:38 2020 -0400

    tipc: add stricter control of reserved service types
    
    TIPC reserves 64 service types for current and future internal use.
    Therefore, the bind() function is meant to block regular user sockets
    from being bound to these values, while it should let through such
    bindings from internal users.
    
    However, since we at the design moment saw no way to distinguish
    between regular and internal users the filter function ended up
    with allowing all bindings of the reserved types which were really
    in use ([0,1]), and block all the rest ([2,63]).
    
    This is risky, since a regular user may bind to the service type
    representing the topology server (TIPC_TOP_SRV == 1) or the one used
    for indicating neighboring node status (TIPC_CFG_SRV == 0), and wreak
    havoc for users of those services, i.e., most users.
    
    The reality is however that TIPC_CFG_SRV never is bound through the
    bind() function, since it doesn't represent a regular socket, and
    TIPC_TOP_SRV can also be made to bypass the checks in tipc_bind()
    by introducing a different entry function, tipc_sk_bind().
    
    It should be noted that although this is a change of the API semantics,
    there is no risk we will break any currently working applications by
    doing this. Any application trying to bind to the values in question
    would be badly broken from the outset, so there is no chance we would
    find any such applications in real-world production systems.
    
    v2: Added warning printout when a user is blocked from binding,
        as suggested by Jakub Kicinski
    
    Acked-by: Yung Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Link: https://lore.kernel.org/r/20201030012938.489557-1-jmaloy@redhat.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 934291ffb638f2785cc9587403df4895f5c838ac
Merge: b9c0f4bd5b81 2734a24e6e5d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Oct 29 12:55:02 2020 -0700

    Merge tag 'net-5.10-rc2' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from Jakub Kicinski:
     "Current release regressions:
    
       - r8169: fix forced threading conflicting with other shared
         interrupts; we tried to fix the use of raise_softirq_irqoff from an
         IRQ handler on RT by forcing hard irqs, but this driver shares
         legacy PCI IRQs so drop the _irqoff() instead
    
       - tipc: fix memory leak caused by a recent syzbot report fix to
         tipc_buf_append()
    
      Current release - bugs in new features:
    
       - devlink: Unlock on error in dumpit() and fix some error codes
    
       - net/smc: fix null pointer dereference in smc_listen_decline()
    
      Previous release - regressions:
    
       - tcp: Prevent low rmem stalls with SO_RCVLOWAT.
    
       - net: protect tcf_block_unbind with block lock
    
       - ibmveth: Fix use of ibmveth in a bridge; the self-imposed filtering
         to only send legal frames to the hypervisor was too strict
    
       - net: hns3: Clear the CMDQ registers before unmapping BAR region;
         incorrect cleanup order was leading to a crash
    
       - bnxt_en - handful of fixes to fixes:
          - Send HWRM_FUNC_RESET fw command unconditionally, even if there
            are PCIe errors being reported
          - Check abort error state in bnxt_open_nic().
          - Invoke cancel_delayed_work_sync() for PFs also.
          - Fix regression in workqueue cleanup logic in bnxt_remove_one().
    
       - mlxsw: Only advertise link modes supported by both driver and
         device, after removal of 56G support from the driver 56G was not
         cleared from advertised modes
    
       - net/smc: fix suppressed return code
    
      Previous release - always broken:
    
       - netem: fix zero division in tabledist, caused by integer overflow
    
       - bnxt_en: Re-write PCI BARs after PCI fatal error.
    
       - cxgb4: set up filter action after rewrites
    
       - net: ipa: command payloads already mapped
    
      Misc:
    
       - s390/ism: fix incorrect system EID, it's okay to change since it
         was added in current release
    
       - vsock: use ns_capable_noaudit() on socket create to suppress false
         positive audit messages"
    
    * tag 'net-5.10-rc2' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (36 commits)
      r8169: fix issue with forced threading in combination with shared interrupts
      netem: fix zero division in tabledist
      ibmvnic: fix ibmvnic_set_mac
      mptcp: add missing memory scheduling in the rx path
      tipc: fix memory leak caused by tipc_buf_append()
      gtp: fix an use-before-init in gtp_newlink()
      net: protect tcf_block_unbind with block lock
      ibmveth: Fix use of ibmveth in a bridge.
      net/sched: act_mpls: Add softdep on mpls_gso.ko
      ravb: Fix bit fields checking in ravb_hwtstamp_get()
      devlink: Unlock on error in dumpit()
      devlink: Fix some error codes
      chelsio/chtls: fix memory leaks in CPL handlers
      chelsio/chtls: fix deadlock issue
      net: hns3: Clear the CMDQ registers before unmapping BAR region
      bnxt_en: Send HWRM_FUNC_RESET fw command unconditionally.
      bnxt_en: Check abort error state in bnxt_open_nic().
      bnxt_en: Re-write PCI BARs after PCI fatal error.
      bnxt_en: Invoke cancel_delayed_work_sync() for PFs also.
      bnxt_en: Fix regression in workqueue cleanup logic in bnxt_remove_one().
      ...

commit ceb1eb2fb609c88363e06618b8d4bbf7815a4e03
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Tue Oct 27 10:24:03 2020 +0700

    tipc: fix memory leak caused by tipc_buf_append()
    
    Commit ed42989eab57 ("tipc: fix the skb_unshare() in tipc_buf_append()")
    replaced skb_unshare() with skb_copy() to not reduce the data reference
    counter of the original skb intentionally. This is not the correct
    way to handle the cloned skb because it causes memory leak in 2
    following cases:
     1/ Sending multicast messages via broadcast link
      The original skb list is cloned to the local skb list for local
      destination. After that, the data reference counter of each skb
      in the original list has the value of 2. This causes each skb not
      to be freed after receiving ACK:
      tipc_link_advance_transmq()
      {
       ...
       /* release skb */
       __skb_unlink(skb, &l->transmq);
       kfree_skb(skb); <-- memory exists after being freed
      }
    
     2/ Sending multicast messages via replicast link
      Similar to the above case, each skb cannot be freed after purging
      the skb list:
      tipc_mcast_xmit()
      {
       ...
       __skb_queue_purge(pkts); <-- memory exists after being freed
      }
    
    This commit fixes this issue by using skb_unshare() instead. Besides,
    to avoid use-after-free error reported by KASAN, the pointer to the
    fragment is set to NULL before calling skb_unshare() to make sure that
    the original skb is not freed after freeing the fragment 2 times in
    case skb_unshare() returns NULL.
    
    Fixes: ed42989eab57 ("tipc: fix the skb_unshare() in tipc_buf_append()")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Reported-by: Thang Hoang Ngo <thang.h.ngo@dektech.com.au>
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
    Link: https://lore.kernel.org/r/20201027032403.1823-1-tung.q.nguyen@dektech.com.au
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 95ac3301ec6256dcccdb5b0a60fd2f197af563d6
Author: Hoang Huu Le <hoang.h.le@dektech.com.au>
Date:   Fri Oct 16 09:31:19 2020 +0700

    tipc: fix incorrect setting window for bcast link
    
    [ Upstream commit ec78e31852c9bb7d96b6557468fecb6f6f3b28f3 ]
    
    In commit 16ad3f4022bb
    ("tipc: introduce variable window congestion control"), we applied
    the algorithm to select window size from minimum window to the
    configured maximum window for unicast link, and, besides we chose
    to keep the window size for broadcast link unchanged and equal (i.e
    fix window 50)
    
    However, when setting maximum window variable via command, the window
    variable was re-initialized to unexpect value (i.e 32).
    
    We fix this by updating the fix window for broadcast as we stated.
    
    Fixes: 16ad3f4022bb ("tipc: introduce variable window congestion control")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Huu Le <hoang.h.le@dektech.com.au>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 20770b1e88f219a4782e1513dd23185a23f788e5
Author: Hoang Huu Le <hoang.h.le@dektech.com.au>
Date:   Fri Oct 16 09:31:18 2020 +0700

    tipc: re-configure queue limit for broadcast link
    
    [ Upstream commit 75cee397ae6f1020fbb75db90aa22a51bc3318ac ]
    
    The queue limit of the broadcast link is being calculated base on initial
    MTU. However, when MTU value changed (e.g manual changing MTU on NIC
    device, MTU negotiation etc.,) we do not re-calculate queue limit.
    This gives throughput does not reflect with the change.
    
    So fix it by calling the function to re-calculate queue limit of the
    broadcast link.
    
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Huu Le <hoang.h.le@dektech.com.au>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3a4e7ac9fd56d8e34a274a9dad3dc67b564278f4
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Wed Oct 7 21:12:50 2020 -0700

    tipc: fix the skb_unshare() in tipc_buf_append()
    
    [ Upstream commit ed42989eab57d619667d7e87dfbd8fe207db54fe ]
    
    skb_unshare() drops a reference count on the old skb unconditionally,
    so in the failure case, we end up freeing the skb twice here.
    And because the skb is allocated in fclone and cloned by caller
    tipc_msg_reassemble(), the consequence is actually freeing the
    original skb too, thus triggered the UAF by syzbot.
    
    Fix this by replacing this skb_unshare() with skb_cloned()+skb_copy().
    
    Fixes: ff48b6222e65 ("tipc: use skb_unshare() instead in tipc_buf_append()")
    Reported-and-tested-by: syzbot+e96a7ba46281824cc46a@syzkaller.appspotmail.com
    Cc: Jon Maloy <jmaloy@redhat.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c99293ddd73fb19de2640e9d04dbd7417690102b
Author: Hoang Huu Le <hoang.h.le@dektech.com.au>
Date:   Thu Oct 8 14:31:56 2020 +0700

    tipc: fix NULL pointer dereference in tipc_named_rcv
    
    [ Upstream commit 7b50ee3dad2581dc022b4e32e55964d4fcdccf20 ]
    
    In the function node_lost_contact(), we call __skb_queue_purge() without
    grabbing the list->lock. This can cause to a race-condition why processing
    the list 'namedq' in calling path tipc_named_rcv()->tipc_named_dequeue().
    
        [] BUG: kernel NULL pointer dereference, address: 0000000000000000
        [] #PF: supervisor read access in kernel mode
        [] #PF: error_code(0x0000) - not-present page
        [] PGD 7ca63067 P4D 7ca63067 PUD 6c553067 PMD 0
        [] Oops: 0000 [#1] SMP NOPTI
        [] CPU: 1 PID: 15 Comm: ksoftirqd/1 Tainted: G  O  5.9.0-rc6+ #2
        [] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS [...]
        [] RIP: 0010:tipc_named_rcv+0x103/0x320 [tipc]
        [] Code: 41 89 44 24 10 49 8b 16 49 8b 46 08 49 c7 06 00 00 00 [...]
        [] RSP: 0018:ffffc900000a7c58 EFLAGS: 00000282
        [] RAX: 00000000000012ec RBX: 0000000000000000 RCX: ffff88807bde1270
        [] RDX: 0000000000002c7c RSI: 0000000000002c7c RDI: ffff88807b38f1a8
        [] RBP: ffff88807b006288 R08: ffff88806a367800 R09: ffff88806a367900
        [] R10: ffff88806a367a00 R11: ffff88806a367b00 R12: ffff88807b006258
        [] R13: ffff88807b00628a R14: ffff888069334d00 R15: ffff88806a434600
        [] FS:  0000000000000000(0000) GS:ffff888079480000(0000) knlGS:0[...]
        [] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
        [] CR2: 0000000000000000 CR3: 0000000077320000 CR4: 00000000000006e0
        [] Call Trace:
        []  ? tipc_bcast_rcv+0x9a/0x1a0 [tipc]
        []  tipc_rcv+0x40d/0x670 [tipc]
        []  ? _raw_spin_unlock+0xa/0x20
        []  tipc_l2_rcv_msg+0x55/0x80 [tipc]
        []  __netif_receive_skb_one_core+0x8c/0xa0
        []  process_backlog+0x98/0x140
        []  net_rx_action+0x13a/0x420
        []  __do_softirq+0xdb/0x316
        []  ? smpboot_thread_fn+0x2f/0x1e0
        []  ? smpboot_thread_fn+0x74/0x1e0
        []  ? smpboot_thread_fn+0x14e/0x1e0
        []  run_ksoftirqd+0x1a/0x40
        []  smpboot_thread_fn+0x149/0x1e0
        []  ? sort_range+0x20/0x20
        []  kthread+0x131/0x150
        []  ? kthread_unuse_mm+0xa0/0xa0
        []  ret_from_fork+0x22/0x30
        [] Modules linked in: veth tipc(O) ip6_udp_tunnel udp_tunnel [...]
        [] CR2: 0000000000000000
        [] ---[ end trace 65c276a8e2e2f310 ]---
    
    To fix this, we need to grab the lock of the 'namedq' list on both
    path calling.
    
    Fixes: cad2929dc432 ("tipc: update a binding service via broadcast")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Huu Le <hoang.h.le@dektech.com.au>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eb7ee70b922666701afdcf9f62235035947c2ec7
Author: Hoang Huu Le <hoang.h.le@dektech.com.au>
Date:   Fri Oct 16 09:31:19 2020 +0700

    tipc: fix incorrect setting window for bcast link
    
    [ Upstream commit ec78e31852c9bb7d96b6557468fecb6f6f3b28f3 ]
    
    In commit 16ad3f4022bb
    ("tipc: introduce variable window congestion control"), we applied
    the algorithm to select window size from minimum window to the
    configured maximum window for unicast link, and, besides we chose
    to keep the window size for broadcast link unchanged and equal (i.e
    fix window 50)
    
    However, when setting maximum window variable via command, the window
    variable was re-initialized to unexpect value (i.e 32).
    
    We fix this by updating the fix window for broadcast as we stated.
    
    Fixes: 16ad3f4022bb ("tipc: introduce variable window congestion control")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Huu Le <hoang.h.le@dektech.com.au>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a52c1d9114f1d801cebc48c64ad1e08b4a79dc8c
Author: Hoang Huu Le <hoang.h.le@dektech.com.au>
Date:   Fri Oct 16 09:31:18 2020 +0700

    tipc: re-configure queue limit for broadcast link
    
    [ Upstream commit 75cee397ae6f1020fbb75db90aa22a51bc3318ac ]
    
    The queue limit of the broadcast link is being calculated base on initial
    MTU. However, when MTU value changed (e.g manual changing MTU on NIC
    device, MTU negotiation etc.,) we do not re-calculate queue limit.
    This gives throughput does not reflect with the change.
    
    So fix it by calling the function to re-calculate queue limit of the
    broadcast link.
    
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Huu Le <hoang.h.le@dektech.com.au>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7d0ffde99d5f30182f03b414a9e6930d9f67f27
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Wed Oct 7 21:12:50 2020 -0700

    tipc: fix the skb_unshare() in tipc_buf_append()
    
    [ Upstream commit ed42989eab57d619667d7e87dfbd8fe207db54fe ]
    
    skb_unshare() drops a reference count on the old skb unconditionally,
    so in the failure case, we end up freeing the skb twice here.
    And because the skb is allocated in fclone and cloned by caller
    tipc_msg_reassemble(), the consequence is actually freeing the
    original skb too, thus triggered the UAF by syzbot.
    
    Fix this by replacing this skb_unshare() with skb_cloned()+skb_copy().
    
    Fixes: ff48b6222e65 ("tipc: use skb_unshare() instead in tipc_buf_append()")
    Reported-and-tested-by: syzbot+e96a7ba46281824cc46a@syzkaller.appspotmail.com
    Cc: Jon Maloy <jmaloy@redhat.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7d31e5722cbf4e24bb893ed56705bcce6950f6cb
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Wed Oct 7 21:12:50 2020 -0700

    tipc: fix the skb_unshare() in tipc_buf_append()
    
    [ Upstream commit ed42989eab57d619667d7e87dfbd8fe207db54fe ]
    
    skb_unshare() drops a reference count on the old skb unconditionally,
    so in the failure case, we end up freeing the skb twice here.
    And because the skb is allocated in fclone and cloned by caller
    tipc_msg_reassemble(), the consequence is actually freeing the
    original skb too, thus triggered the UAF by syzbot.
    
    Fix this by replacing this skb_unshare() with skb_cloned()+skb_copy().
    
    Fixes: ff48b6222e65 ("tipc: use skb_unshare() instead in tipc_buf_append()")
    Reported-and-tested-by: syzbot+e96a7ba46281824cc46a@syzkaller.appspotmail.com
    Cc: Jon Maloy <jmaloy@redhat.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 26217e062f976fc4e2b7b8b6981a6d119435ea51
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Wed Oct 7 21:12:50 2020 -0700

    tipc: fix the skb_unshare() in tipc_buf_append()
    
    [ Upstream commit ed42989eab57d619667d7e87dfbd8fe207db54fe ]
    
    skb_unshare() drops a reference count on the old skb unconditionally,
    so in the failure case, we end up freeing the skb twice here.
    And because the skb is allocated in fclone and cloned by caller
    tipc_msg_reassemble(), the consequence is actually freeing the
    original skb too, thus triggered the UAF by syzbot.
    
    Fix this by replacing this skb_unshare() with skb_cloned()+skb_copy().
    
    Fixes: ff48b6222e65 ("tipc: use skb_unshare() instead in tipc_buf_append()")
    Reported-and-tested-by: syzbot+e96a7ba46281824cc46a@syzkaller.appspotmail.com
    Cc: Jon Maloy <jmaloy@redhat.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cdc27eb1f52fe17857496df266da248cdb158d3f
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Wed Oct 7 21:12:50 2020 -0700

    tipc: fix the skb_unshare() in tipc_buf_append()
    
    [ Upstream commit ed42989eab57d619667d7e87dfbd8fe207db54fe ]
    
    skb_unshare() drops a reference count on the old skb unconditionally,
    so in the failure case, we end up freeing the skb twice here.
    And because the skb is allocated in fclone and cloned by caller
    tipc_msg_reassemble(), the consequence is actually freeing the
    original skb too, thus triggered the UAF by syzbot.
    
    Fix this by replacing this skb_unshare() with skb_cloned()+skb_copy().
    
    Fixes: ff48b6222e65 ("tipc: use skb_unshare() instead in tipc_buf_append()")
    Reported-and-tested-by: syzbot+e96a7ba46281824cc46a@syzkaller.appspotmail.com
    Cc: Jon Maloy <jmaloy@redhat.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bd6cdb5f53b8467c11f2a935f6c213ea257c8ab8
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Wed Oct 7 21:12:50 2020 -0700

    tipc: fix the skb_unshare() in tipc_buf_append()
    
    [ Upstream commit ed42989eab57d619667d7e87dfbd8fe207db54fe ]
    
    skb_unshare() drops a reference count on the old skb unconditionally,
    so in the failure case, we end up freeing the skb twice here.
    And because the skb is allocated in fclone and cloned by caller
    tipc_msg_reassemble(), the consequence is actually freeing the
    original skb too, thus triggered the UAF by syzbot.
    
    Fix this by replacing this skb_unshare() with skb_cloned()+skb_copy().
    
    Fixes: ff48b6222e65 ("tipc: use skb_unshare() instead in tipc_buf_append()")
    Reported-and-tested-by: syzbot+e96a7ba46281824cc46a@syzkaller.appspotmail.com
    Cc: Jon Maloy <jmaloy@redhat.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 77cffe70bcd906f6c806c5686a28bbd09a5b698e
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Wed Oct 7 21:12:50 2020 -0700

    tipc: fix the skb_unshare() in tipc_buf_append()
    
    [ Upstream commit ed42989eab57d619667d7e87dfbd8fe207db54fe ]
    
    skb_unshare() drops a reference count on the old skb unconditionally,
    so in the failure case, we end up freeing the skb twice here.
    And because the skb is allocated in fclone and cloned by caller
    tipc_msg_reassemble(), the consequence is actually freeing the
    original skb too, thus triggered the UAF by syzbot.
    
    Fix this by replacing this skb_unshare() with skb_cloned()+skb_copy().
    
    Fixes: ff48b6222e65 ("tipc: use skb_unshare() instead in tipc_buf_append()")
    Reported-and-tested-by: syzbot+e96a7ba46281824cc46a@syzkaller.appspotmail.com
    Cc: Jon Maloy <jmaloy@redhat.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3cb12d27ff655e57e8efe3486dca2a22f4e30578
Merge: 0adc313c4f20 18ded910b589
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Oct 23 12:05:49 2020 -0700

    Merge tag 'net-5.10-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from Jakub Kicinski:
     "Cross-tree/merge window issues:
    
       - rtl8150: don't incorrectly assign random MAC addresses; fix late in
         the 5.9 cycle started depending on a return code from a function
         which changed with the 5.10 PR from the usb subsystem
    
      Current release regressions:
    
       - Revert "virtio-net: ethtool configurable RXCSUM", it was causing
         crashes at probe when control vq was not negotiated/available
    
      Previous release regressions:
    
       - ixgbe: fix probing of multi-port 10 Gigabit Intel NICs with an MDIO
         bus, only first device would be probed correctly
    
       - nexthop: Fix performance regression in nexthop deletion by
         effectively switching from recently added synchronize_rcu() to
         synchronize_rcu_expedited()
    
       - netsec: ignore 'phy-mode' device property on ACPI systems; the
         property is not populated correctly by the firmware, but firmware
         configures the PHY so just keep boot settings
    
      Previous releases - always broken:
    
       - tcp: fix to update snd_wl1 in bulk receiver fast path, addressing
         bulk transfers getting "stuck"
    
       - icmp: randomize the global rate limiter to prevent attackers from
         getting useful signal
    
       - r8169: fix operation under forced interrupt threading, make the
         driver always use hard irqs, even on RT, given the handler is light
         and only wants to schedule napi (and do so through a _irqoff()
         variant, preferably)
    
       - bpf: Enforce pointer id generation for all may-be-null register
         type to avoid pointers erroneously getting marked as null-checked
    
       - tipc: re-configure queue limit for broadcast link
    
       - net/sched: act_tunnel_key: fix OOB write in case of IPv6 ERSPAN
         tunnels
    
       - fix various issues in chelsio inline tls driver
    
      Misc:
    
       - bpf: improve just-added bpf_redirect_neigh() helper api to support
         supplying nexthop by the caller - in case BPF program has already
         done a lookup we can avoid doing another one
    
       - remove unnecessary break statements
    
       - make MCTCP not select IPV6, but rather depend on it"
    
    * tag 'net-5.10-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (62 commits)
      tcp: fix to update snd_wl1 in bulk receiver fast path
      net: Properly typecast int values to set sk_max_pacing_rate
      netfilter: nf_fwd_netdev: clear timestamp in forwarding path
      ibmvnic: save changed mac address to adapter->mac_addr
      selftests: mptcp: depends on built-in IPv6
      Revert "virtio-net: ethtool configurable RXCSUM"
      rtnetlink: fix data overflow in rtnl_calcit()
      net: ethernet: mtk-star-emac: select REGMAP_MMIO
      net: hdlc_raw_eth: Clear the IFF_TX_SKB_SHARING flag after calling ether_setup
      net: hdlc: In hdlc_rcv, check to make sure dev is an HDLC device
      bpf, libbpf: Guard bpf inline asm from bpf_tail_call_static
      bpf, selftests: Extend test_tc_redirect to use modified bpf_redirect_neigh()
      bpf: Fix bpf_redirect_neigh helper api to support supplying nexthop
      mptcp: depends on IPV6 but not as a module
      sfc: move initialisation of efx->filter_sem to efx_init_struct()
      mpls: load mpls_gso after mpls_iptunnel
      net/sched: act_tunnel_key: fix OOB write in case of IPv6 ERSPAN tunnels
      net/sched: act_gate: Unlock ->tcfa_lock in tc_setup_flow_action()
      net: dsa: bcm_sf2: make const array static, makes object smaller
      mptcp: MPTCP_IPV6 should depend on IPV6 instead of selecting it
      ...

commit ec78e31852c9bb7d96b6557468fecb6f6f3b28f3
Author: Hoang Huu Le <hoang.h.le@dektech.com.au>
Date:   Fri Oct 16 09:31:19 2020 +0700

    tipc: fix incorrect setting window for bcast link
    
    In commit 16ad3f4022bb
    ("tipc: introduce variable window congestion control"), we applied
    the algorithm to select window size from minimum window to the
    configured maximum window for unicast link, and, besides we chose
    to keep the window size for broadcast link unchanged and equal (i.e
    fix window 50)
    
    However, when setting maximum window variable via command, the window
    variable was re-initialized to unexpect value (i.e 32).
    
    We fix this by updating the fix window for broadcast as we stated.
    
    Fixes: 16ad3f4022bb ("tipc: introduce variable window congestion control")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Huu Le <hoang.h.le@dektech.com.au>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 75cee397ae6f1020fbb75db90aa22a51bc3318ac
Author: Hoang Huu Le <hoang.h.le@dektech.com.au>
Date:   Fri Oct 16 09:31:18 2020 +0700

    tipc: re-configure queue limit for broadcast link
    
    The queue limit of the broadcast link is being calculated base on initial
    MTU. However, when MTU value changed (e.g manual changing MTU on NIC
    device, MTU negotiation etc.,) we do not re-calculate queue limit.
    This gives throughput does not reflect with the change.
    
    So fix it by calling the function to re-calculate queue limit of the
    broadcast link.
    
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Huu Le <hoang.h.le@dektech.com.au>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 7b50ee3dad2581dc022b4e32e55964d4fcdccf20
Author: Hoang Huu Le <hoang.h.le@dektech.com.au>
Date:   Thu Oct 8 14:31:56 2020 +0700

    tipc: fix NULL pointer dereference in tipc_named_rcv
    
    In the function node_lost_contact(), we call __skb_queue_purge() without
    grabbing the list->lock. This can cause to a race-condition why processing
    the list 'namedq' in calling path tipc_named_rcv()->tipc_named_dequeue().
    
        [] BUG: kernel NULL pointer dereference, address: 0000000000000000
        [] #PF: supervisor read access in kernel mode
        [] #PF: error_code(0x0000) - not-present page
        [] PGD 7ca63067 P4D 7ca63067 PUD 6c553067 PMD 0
        [] Oops: 0000 [#1] SMP NOPTI
        [] CPU: 1 PID: 15 Comm: ksoftirqd/1 Tainted: G  O  5.9.0-rc6+ #2
        [] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS [...]
        [] RIP: 0010:tipc_named_rcv+0x103/0x320 [tipc]
        [] Code: 41 89 44 24 10 49 8b 16 49 8b 46 08 49 c7 06 00 00 00 [...]
        [] RSP: 0018:ffffc900000a7c58 EFLAGS: 00000282
        [] RAX: 00000000000012ec RBX: 0000000000000000 RCX: ffff88807bde1270
        [] RDX: 0000000000002c7c RSI: 0000000000002c7c RDI: ffff88807b38f1a8
        [] RBP: ffff88807b006288 R08: ffff88806a367800 R09: ffff88806a367900
        [] R10: ffff88806a367a00 R11: ffff88806a367b00 R12: ffff88807b006258
        [] R13: ffff88807b00628a R14: ffff888069334d00 R15: ffff88806a434600
        [] FS:  0000000000000000(0000) GS:ffff888079480000(0000) knlGS:0[...]
        [] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
        [] CR2: 0000000000000000 CR3: 0000000077320000 CR4: 00000000000006e0
        [] Call Trace:
        []  ? tipc_bcast_rcv+0x9a/0x1a0 [tipc]
        []  tipc_rcv+0x40d/0x670 [tipc]
        []  ? _raw_spin_unlock+0xa/0x20
        []  tipc_l2_rcv_msg+0x55/0x80 [tipc]
        []  __netif_receive_skb_one_core+0x8c/0xa0
        []  process_backlog+0x98/0x140
        []  net_rx_action+0x13a/0x420
        []  __do_softirq+0xdb/0x316
        []  ? smpboot_thread_fn+0x2f/0x1e0
        []  ? smpboot_thread_fn+0x74/0x1e0
        []  ? smpboot_thread_fn+0x14e/0x1e0
        []  run_ksoftirqd+0x1a/0x40
        []  smpboot_thread_fn+0x149/0x1e0
        []  ? sort_range+0x20/0x20
        []  kthread+0x131/0x150
        []  ? kthread_unuse_mm+0xa0/0xa0
        []  ret_from_fork+0x22/0x30
        [] Modules linked in: veth tipc(O) ip6_udp_tunnel udp_tunnel [...]
        [] CR2: 0000000000000000
        [] ---[ end trace 65c276a8e2e2f310 ]---
    
    To fix this, we need to grab the lock of the 'namedq' list on both
    path calling.
    
    Fixes: cad2929dc432 ("tipc: update a binding service via broadcast")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Huu Le <hoang.h.le@dektech.com.au>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit ed42989eab57d619667d7e87dfbd8fe207db54fe
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Wed Oct 7 21:12:50 2020 -0700

    tipc: fix the skb_unshare() in tipc_buf_append()
    
    skb_unshare() drops a reference count on the old skb unconditionally,
    so in the failure case, we end up freeing the skb twice here.
    And because the skb is allocated in fclone and cloned by caller
    tipc_msg_reassemble(), the consequence is actually freeing the
    original skb too, thus triggered the UAF by syzbot.
    
    Fix this by replacing this skb_unshare() with skb_cloned()+skb_copy().
    
    Fixes: ff48b6222e65 ("tipc: use skb_unshare() instead in tipc_buf_append()")
    Reported-and-tested-by: syzbot+e96a7ba46281824cc46a@syzkaller.appspotmail.com
    Cc: Jon Maloy <jmaloy@redhat.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 0faf2aa5f29988d570b697b68ba5572ed00e41f4
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Sep 13 19:37:31 2020 +0800

    tipc: use skb_unshare() instead in tipc_buf_append()
    
    [ Upstream commit ff48b6222e65ebdba5a403ef1deba6214e749193 ]
    
    In tipc_buf_append() it may change skb's frag_list, and it causes
    problems when this skb is cloned. skb_unclone() doesn't really
    make this skb's flag_list available to change.
    
    Shuang Li has reported an use-after-free issue because of this
    when creating quite a few macvlan dev over the same dev, where
    the broadcast packets will be cloned and go up to the stack:
    
     [ ] BUG: KASAN: use-after-free in pskb_expand_head+0x86d/0xea0
     [ ] Call Trace:
     [ ]  dump_stack+0x7c/0xb0
     [ ]  print_address_description.constprop.7+0x1a/0x220
     [ ]  kasan_report.cold.10+0x37/0x7c
     [ ]  check_memory_region+0x183/0x1e0
     [ ]  pskb_expand_head+0x86d/0xea0
     [ ]  process_backlog+0x1df/0x660
     [ ]  net_rx_action+0x3b4/0xc90
     [ ]
     [ ] Allocated by task 1786:
     [ ]  kmem_cache_alloc+0xbf/0x220
     [ ]  skb_clone+0x10a/0x300
     [ ]  macvlan_broadcast+0x2f6/0x590 [macvlan]
     [ ]  macvlan_process_broadcast+0x37c/0x516 [macvlan]
     [ ]  process_one_work+0x66a/0x1060
     [ ]  worker_thread+0x87/0xb10
     [ ]
     [ ] Freed by task 3253:
     [ ]  kmem_cache_free+0x82/0x2a0
     [ ]  skb_release_data+0x2c3/0x6e0
     [ ]  kfree_skb+0x78/0x1d0
     [ ]  tipc_recvmsg+0x3be/0xa40 [tipc]
    
    So fix it by using skb_unshare() instead, which would create a new
    skb for the cloned frag and it'll be safe to change its frag_list.
    The similar things were also done in sctp_make_reassembled_event(),
    which is using skb_copy().
    
    Reported-by: Shuang Li <shuali@redhat.com>
    Fixes: 37e22164a8a3 ("tipc: rename and move message reassembly function")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 202ae05859eaac9c84cbbcb3bb73fbb46ddd0829
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Wed May 13 19:33:17 2020 +0700

    tipc: fix memory leak in service subscripting
    
    [ Upstream commit 0771d7df819284d46cf5cfb57698621b503ec17f ]
    
    Upon receipt of a service subscription request from user via a topology
    connection, one 'sub' object will be allocated in kernel, so it will be
    able to send an event of the service if any to the user correspondingly
    then. Also, in case of any failure, the connection will be shutdown and
    all the pertaining 'sub' objects will be freed.
    
    However, there is a race condition as follows resulting in memory leak:
    
           receive-work       connection        send-work
                  |                |                |
            sub-1 |<------//-------|                |
            sub-2 |<------//-------|                |
                  |                |<---------------| evt for sub-x
            sub-3 |<------//-------|                |
                  :                :                :
                  :                :                :
                  |       /--------|                |
                  |       |        * peer closed    |
                  |       |        |                |
                  |       |        |<-------X-------| evt for sub-y
                  |       |        |<===============|
            sub-n |<------/        X    shutdown    |
        -> orphan |                                 |
    
    That is, the 'receive-work' may get the last subscription request while
    the 'send-work' is shutting down the connection due to peer close.
    
    We had a 'lock' on the connection, so the two actions cannot be carried
    out simultaneously. If the last subscription is allocated e.g. 'sub-n',
    before the 'send-work' closes the connection, there will be no issue at
    all, the 'sub' objects will be freed. In contrast the last subscription
    will become orphan since the connection was closed, and we released all
    references.
    
    This commit fixes the issue by simply adding one test if the connection
    remains in 'connected' state right after we obtain the connection lock,
    then a subscription object can be created as usual, otherwise we ignore
    it.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Reported-by: Thang Ngo <thang.h.ngo@dektech.com.au>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8c926e159aface3567b2ded6024b1b14c0f27f18
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Wed Jan 8 09:18:15 2020 +0700

    tipc: fix link overflow issue at socket shutdown
    
    [ Upstream commit 49afb806cb650dd1f06f191994f3aa657d264009 ]
    
    When a socket is suddenly shutdown or released, it will reject all the
    unreceived messages in its receive queue. This applies to a connected
    socket too, whereas there is only one 'FIN' message required to be sent
    back to its peer in this case.
    
    In case there are many messages in the queue and/or some connections
    with such messages are shutdown at the same time, the link layer will
    easily get overflowed at the 'TIPC_SYSTEM_IMPORTANCE' backlog level
    because of the message rejections. As a result, the link will be taken
    down. Moreover, immediately when the link is re-established, the socket
    layer can continue to reject the messages and the same issue happens...
    
    The commit refactors the '__tipc_shutdown()' function to only send one
    'FIN' in the situation mentioned above. For the connectionless case, it
    is unavoidable but usually there is no rejections for such socket
    messages because they are 'dest-droppable' by default.
    
    In addition, the new code makes the other socket states clear
    (e.g.'TIPC_LISTEN') and treats as a separate case to avoid misbehaving.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6b3ea3aa6c675b65b6b068f5726c93abc8a4b460
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Wed May 13 19:33:17 2020 +0700

    tipc: fix memory leak in service subscripting
    
    [ Upstream commit 0771d7df819284d46cf5cfb57698621b503ec17f ]
    
    Upon receipt of a service subscription request from user via a topology
    connection, one 'sub' object will be allocated in kernel, so it will be
    able to send an event of the service if any to the user correspondingly
    then. Also, in case of any failure, the connection will be shutdown and
    all the pertaining 'sub' objects will be freed.
    
    However, there is a race condition as follows resulting in memory leak:
    
           receive-work       connection        send-work
                  |                |                |
            sub-1 |<------//-------|                |
            sub-2 |<------//-------|                |
                  |                |<---------------| evt for sub-x
            sub-3 |<------//-------|                |
                  :                :                :
                  :                :                :
                  |       /--------|                |
                  |       |        * peer closed    |
                  |       |        |                |
                  |       |        |<-------X-------| evt for sub-y
                  |       |        |<===============|
            sub-n |<------/        X    shutdown    |
        -> orphan |                                 |
    
    That is, the 'receive-work' may get the last subscription request while
    the 'send-work' is shutting down the connection due to peer close.
    
    We had a 'lock' on the connection, so the two actions cannot be carried
    out simultaneously. If the last subscription is allocated e.g. 'sub-n',
    before the 'send-work' closes the connection, there will be no issue at
    all, the 'sub' objects will be freed. In contrast the last subscription
    will become orphan since the connection was closed, and we released all
    references.
    
    This commit fixes the issue by simply adding one test if the connection
    remains in 'connected' state right after we obtain the connection lock,
    then a subscription object can be created as usual, otherwise we ignore
    it.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Reported-by: Thang Ngo <thang.h.ngo@dektech.com.au>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 40dbfc0be25f6ca92dcfe930c5349fab9d418a00
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Sep 13 19:37:31 2020 +0800

    tipc: use skb_unshare() instead in tipc_buf_append()
    
    [ Upstream commit ff48b6222e65ebdba5a403ef1deba6214e749193 ]
    
    In tipc_buf_append() it may change skb's frag_list, and it causes
    problems when this skb is cloned. skb_unclone() doesn't really
    make this skb's flag_list available to change.
    
    Shuang Li has reported an use-after-free issue because of this
    when creating quite a few macvlan dev over the same dev, where
    the broadcast packets will be cloned and go up to the stack:
    
     [ ] BUG: KASAN: use-after-free in pskb_expand_head+0x86d/0xea0
     [ ] Call Trace:
     [ ]  dump_stack+0x7c/0xb0
     [ ]  print_address_description.constprop.7+0x1a/0x220
     [ ]  kasan_report.cold.10+0x37/0x7c
     [ ]  check_memory_region+0x183/0x1e0
     [ ]  pskb_expand_head+0x86d/0xea0
     [ ]  process_backlog+0x1df/0x660
     [ ]  net_rx_action+0x3b4/0xc90
     [ ]
     [ ] Allocated by task 1786:
     [ ]  kmem_cache_alloc+0xbf/0x220
     [ ]  skb_clone+0x10a/0x300
     [ ]  macvlan_broadcast+0x2f6/0x590 [macvlan]
     [ ]  macvlan_process_broadcast+0x37c/0x516 [macvlan]
     [ ]  process_one_work+0x66a/0x1060
     [ ]  worker_thread+0x87/0xb10
     [ ]
     [ ] Freed by task 3253:
     [ ]  kmem_cache_free+0x82/0x2a0
     [ ]  skb_release_data+0x2c3/0x6e0
     [ ]  kfree_skb+0x78/0x1d0
     [ ]  tipc_recvmsg+0x3be/0xa40 [tipc]
    
    So fix it by using skb_unshare() instead, which would create a new
    skb for the cloned frag and it'll be safe to change its frag_list.
    The similar things were also done in sctp_make_reassembled_event(),
    which is using skb_copy().
    
    Reported-by: Shuang Li <shuali@redhat.com>
    Fixes: 37e22164a8a3 ("tipc: rename and move message reassembly function")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7241d653bcc17eaf4ccb9994f360168d8bfea32d
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Sat Sep 5 15:14:47 2020 +0900

    tipc: fix shutdown() of connection oriented socket
    
    [ Upstream commit a4b5cc9e10803ecba64a7d54c0f47e4564b4a980 ]
    
    I confirmed that the problem fixed by commit 2a63866c8b51a3f7 ("tipc: fix
    shutdown() of connectionless socket") also applies to stream socket.
    
    ----------
    #include <sys/socket.h>
    #include <unistd.h>
    #include <sys/wait.h>
    
    int main(int argc, char *argv[])
    {
            int fds[2] = { -1, -1 };
            socketpair(PF_TIPC, SOCK_STREAM /* or SOCK_DGRAM */, 0, fds);
            if (fork() == 0)
                    _exit(read(fds[0], NULL, 1));
            shutdown(fds[0], SHUT_RDWR); /* This must make read() return. */
            wait(NULL); /* To be woken up by _exit(). */
            return 0;
    }
    ----------
    
    Since shutdown(SHUT_RDWR) should affect all processes sharing that socket,
    unconditionally setting sk->sk_shutdown to SHUTDOWN_MASK will be the right
    behavior.
    
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6afd3e4010e57d278c3e79b4fbe323ade9c14f93
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Sep 13 19:37:31 2020 +0800

    tipc: use skb_unshare() instead in tipc_buf_append()
    
    [ Upstream commit ff48b6222e65ebdba5a403ef1deba6214e749193 ]
    
    In tipc_buf_append() it may change skb's frag_list, and it causes
    problems when this skb is cloned. skb_unclone() doesn't really
    make this skb's flag_list available to change.
    
    Shuang Li has reported an use-after-free issue because of this
    when creating quite a few macvlan dev over the same dev, where
    the broadcast packets will be cloned and go up to the stack:
    
     [ ] BUG: KASAN: use-after-free in pskb_expand_head+0x86d/0xea0
     [ ] Call Trace:
     [ ]  dump_stack+0x7c/0xb0
     [ ]  print_address_description.constprop.7+0x1a/0x220
     [ ]  kasan_report.cold.10+0x37/0x7c
     [ ]  check_memory_region+0x183/0x1e0
     [ ]  pskb_expand_head+0x86d/0xea0
     [ ]  process_backlog+0x1df/0x660
     [ ]  net_rx_action+0x3b4/0xc90
     [ ]
     [ ] Allocated by task 1786:
     [ ]  kmem_cache_alloc+0xbf/0x220
     [ ]  skb_clone+0x10a/0x300
     [ ]  macvlan_broadcast+0x2f6/0x590 [macvlan]
     [ ]  macvlan_process_broadcast+0x37c/0x516 [macvlan]
     [ ]  process_one_work+0x66a/0x1060
     [ ]  worker_thread+0x87/0xb10
     [ ]
     [ ] Freed by task 3253:
     [ ]  kmem_cache_free+0x82/0x2a0
     [ ]  skb_release_data+0x2c3/0x6e0
     [ ]  kfree_skb+0x78/0x1d0
     [ ]  tipc_recvmsg+0x3be/0xa40 [tipc]
    
    So fix it by using skb_unshare() instead, which would create a new
    skb for the cloned frag and it'll be safe to change its frag_list.
    The similar things were also done in sctp_make_reassembled_event(),
    which is using skb_copy().
    
    Reported-by: Shuang Li <shuali@redhat.com>
    Fixes: 37e22164a8a3 ("tipc: rename and move message reassembly function")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41f2b0bd171359a62f638d92d7064bbc41a00658
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Sep 13 19:37:31 2020 +0800

    tipc: use skb_unshare() instead in tipc_buf_append()
    
    [ Upstream commit ff48b6222e65ebdba5a403ef1deba6214e749193 ]
    
    In tipc_buf_append() it may change skb's frag_list, and it causes
    problems when this skb is cloned. skb_unclone() doesn't really
    make this skb's flag_list available to change.
    
    Shuang Li has reported an use-after-free issue because of this
    when creating quite a few macvlan dev over the same dev, where
    the broadcast packets will be cloned and go up to the stack:
    
     [ ] BUG: KASAN: use-after-free in pskb_expand_head+0x86d/0xea0
     [ ] Call Trace:
     [ ]  dump_stack+0x7c/0xb0
     [ ]  print_address_description.constprop.7+0x1a/0x220
     [ ]  kasan_report.cold.10+0x37/0x7c
     [ ]  check_memory_region+0x183/0x1e0
     [ ]  pskb_expand_head+0x86d/0xea0
     [ ]  process_backlog+0x1df/0x660
     [ ]  net_rx_action+0x3b4/0xc90
     [ ]
     [ ] Allocated by task 1786:
     [ ]  kmem_cache_alloc+0xbf/0x220
     [ ]  skb_clone+0x10a/0x300
     [ ]  macvlan_broadcast+0x2f6/0x590 [macvlan]
     [ ]  macvlan_process_broadcast+0x37c/0x516 [macvlan]
     [ ]  process_one_work+0x66a/0x1060
     [ ]  worker_thread+0x87/0xb10
     [ ]
     [ ] Freed by task 3253:
     [ ]  kmem_cache_free+0x82/0x2a0
     [ ]  skb_release_data+0x2c3/0x6e0
     [ ]  kfree_skb+0x78/0x1d0
     [ ]  tipc_recvmsg+0x3be/0xa40 [tipc]
    
    So fix it by using skb_unshare() instead, which would create a new
    skb for the cloned frag and it'll be safe to change its frag_list.
    The similar things were also done in sctp_make_reassembled_event(),
    which is using skb_copy().
    
    Reported-by: Shuang Li <shuali@redhat.com>
    Fixes: 37e22164a8a3 ("tipc: rename and move message reassembly function")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d8e7be19d2bddd97c91e678cdd495f41ed049f4a
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Sat Sep 5 15:14:47 2020 +0900

    tipc: fix shutdown() of connection oriented socket
    
    [ Upstream commit a4b5cc9e10803ecba64a7d54c0f47e4564b4a980 ]
    
    I confirmed that the problem fixed by commit 2a63866c8b51a3f7 ("tipc: fix
    shutdown() of connectionless socket") also applies to stream socket.
    
    ----------
    #include <sys/socket.h>
    #include <unistd.h>
    #include <sys/wait.h>
    
    int main(int argc, char *argv[])
    {
            int fds[2] = { -1, -1 };
            socketpair(PF_TIPC, SOCK_STREAM /* or SOCK_DGRAM */, 0, fds);
            if (fork() == 0)
                    _exit(read(fds[0], NULL, 1));
            shutdown(fds[0], SHUT_RDWR); /* This must make read() return. */
            wait(NULL); /* To be woken up by _exit(). */
            return 0;
    }
    ----------
    
    Since shutdown(SHUT_RDWR) should affect all processes sharing that socket,
    unconditionally setting sk->sk_shutdown to SHUTDOWN_MASK will be the right
    behavior.
    
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7ada162ea056a506bbb11c4f29c574e3da5d1490
Author: Peilin Ye <yepeilin.cs@gmail.com>
Date:   Sun Sep 13 04:06:05 2020 -0400

    tipc: Fix memory leak in tipc_group_create_member()
    
    [ Upstream commit bb3a420d47ab00d7e1e5083286cab15235a96680 ]
    
    tipc_group_add_to_tree() returns silently if `key` matches `nkey` of an
    existing node, causing tipc_group_create_member() to leak memory. Let
    tipc_group_add_to_tree() return an error in such a case, so that
    tipc_group_create_member() can handle it properly.
    
    Fixes: 75da2163dbb6 ("tipc: introduce communication groups")
    Reported-and-tested-by: syzbot+f95d90c454864b3b5bc9@syzkaller.appspotmail.com
    Cc: Hillf Danton <hdanton@sina.com>
    Link: https://syzkaller.appspot.com/bug?id=048390604fe1b60df34150265479202f10e13aff
    Signed-off-by: Peilin Ye <yepeilin.cs@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 825fc3167cf5c82685fb640d03d1c5028a1cea03
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Sep 13 19:37:31 2020 +0800

    tipc: use skb_unshare() instead in tipc_buf_append()
    
    [ Upstream commit ff48b6222e65ebdba5a403ef1deba6214e749193 ]
    
    In tipc_buf_append() it may change skb's frag_list, and it causes
    problems when this skb is cloned. skb_unclone() doesn't really
    make this skb's flag_list available to change.
    
    Shuang Li has reported an use-after-free issue because of this
    when creating quite a few macvlan dev over the same dev, where
    the broadcast packets will be cloned and go up to the stack:
    
     [ ] BUG: KASAN: use-after-free in pskb_expand_head+0x86d/0xea0
     [ ] Call Trace:
     [ ]  dump_stack+0x7c/0xb0
     [ ]  print_address_description.constprop.7+0x1a/0x220
     [ ]  kasan_report.cold.10+0x37/0x7c
     [ ]  check_memory_region+0x183/0x1e0
     [ ]  pskb_expand_head+0x86d/0xea0
     [ ]  process_backlog+0x1df/0x660
     [ ]  net_rx_action+0x3b4/0xc90
     [ ]
     [ ] Allocated by task 1786:
     [ ]  kmem_cache_alloc+0xbf/0x220
     [ ]  skb_clone+0x10a/0x300
     [ ]  macvlan_broadcast+0x2f6/0x590 [macvlan]
     [ ]  macvlan_process_broadcast+0x37c/0x516 [macvlan]
     [ ]  process_one_work+0x66a/0x1060
     [ ]  worker_thread+0x87/0xb10
     [ ]
     [ ] Freed by task 3253:
     [ ]  kmem_cache_free+0x82/0x2a0
     [ ]  skb_release_data+0x2c3/0x6e0
     [ ]  kfree_skb+0x78/0x1d0
     [ ]  tipc_recvmsg+0x3be/0xa40 [tipc]
    
    So fix it by using skb_unshare() instead, which would create a new
    skb for the cloned frag and it'll be safe to change its frag_list.
    The similar things were also done in sctp_make_reassembled_event(),
    which is using skb_copy().
    
    Reported-by: Shuang Li <shuali@redhat.com>
    Fixes: 37e22164a8a3 ("tipc: rename and move message reassembly function")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5efc178ebd1221fb5d57cc39e5bb0d3feb82eb5d
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Sat Sep 5 15:14:47 2020 +0900

    tipc: fix shutdown() of connection oriented socket
    
    [ Upstream commit a4b5cc9e10803ecba64a7d54c0f47e4564b4a980 ]
    
    I confirmed that the problem fixed by commit 2a63866c8b51a3f7 ("tipc: fix
    shutdown() of connectionless socket") also applies to stream socket.
    
    ----------
    #include <sys/socket.h>
    #include <unistd.h>
    #include <sys/wait.h>
    
    int main(int argc, char *argv[])
    {
            int fds[2] = { -1, -1 };
            socketpair(PF_TIPC, SOCK_STREAM /* or SOCK_DGRAM */, 0, fds);
            if (fork() == 0)
                    _exit(read(fds[0], NULL, 1));
            shutdown(fds[0], SHUT_RDWR); /* This must make read() return. */
            wait(NULL); /* To be woken up by _exit(). */
            return 0;
    }
    ----------
    
    Since shutdown(SHUT_RDWR) should affect all processes sharing that socket,
    unconditionally setting sk->sk_shutdown to SHUTDOWN_MASK will be the right
    behavior.
    
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 586b14ec481c9d6dd9db8994f991dd8725e8b093
Author: Peilin Ye <yepeilin.cs@gmail.com>
Date:   Sun Sep 13 04:06:05 2020 -0400

    tipc: Fix memory leak in tipc_group_create_member()
    
    [ Upstream commit bb3a420d47ab00d7e1e5083286cab15235a96680 ]
    
    tipc_group_add_to_tree() returns silently if `key` matches `nkey` of an
    existing node, causing tipc_group_create_member() to leak memory. Let
    tipc_group_add_to_tree() return an error in such a case, so that
    tipc_group_create_member() can handle it properly.
    
    Fixes: 75da2163dbb6 ("tipc: introduce communication groups")
    Reported-and-tested-by: syzbot+f95d90c454864b3b5bc9@syzkaller.appspotmail.com
    Cc: Hillf Danton <hdanton@sina.com>
    Link: https://syzkaller.appspot.com/bug?id=048390604fe1b60df34150265479202f10e13aff
    Signed-off-by: Peilin Ye <yepeilin.cs@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b15fcca8eff903c4a9a50336f5bd8a208ca45df7
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Sep 13 19:37:31 2020 +0800

    tipc: use skb_unshare() instead in tipc_buf_append()
    
    [ Upstream commit ff48b6222e65ebdba5a403ef1deba6214e749193 ]
    
    In tipc_buf_append() it may change skb's frag_list, and it causes
    problems when this skb is cloned. skb_unclone() doesn't really
    make this skb's flag_list available to change.
    
    Shuang Li has reported an use-after-free issue because of this
    when creating quite a few macvlan dev over the same dev, where
    the broadcast packets will be cloned and go up to the stack:
    
     [ ] BUG: KASAN: use-after-free in pskb_expand_head+0x86d/0xea0
     [ ] Call Trace:
     [ ]  dump_stack+0x7c/0xb0
     [ ]  print_address_description.constprop.7+0x1a/0x220
     [ ]  kasan_report.cold.10+0x37/0x7c
     [ ]  check_memory_region+0x183/0x1e0
     [ ]  pskb_expand_head+0x86d/0xea0
     [ ]  process_backlog+0x1df/0x660
     [ ]  net_rx_action+0x3b4/0xc90
     [ ]
     [ ] Allocated by task 1786:
     [ ]  kmem_cache_alloc+0xbf/0x220
     [ ]  skb_clone+0x10a/0x300
     [ ]  macvlan_broadcast+0x2f6/0x590 [macvlan]
     [ ]  macvlan_process_broadcast+0x37c/0x516 [macvlan]
     [ ]  process_one_work+0x66a/0x1060
     [ ]  worker_thread+0x87/0xb10
     [ ]
     [ ] Freed by task 3253:
     [ ]  kmem_cache_free+0x82/0x2a0
     [ ]  skb_release_data+0x2c3/0x6e0
     [ ]  kfree_skb+0x78/0x1d0
     [ ]  tipc_recvmsg+0x3be/0xa40 [tipc]
    
    So fix it by using skb_unshare() instead, which would create a new
    skb for the cloned frag and it'll be safe to change its frag_list.
    The similar things were also done in sctp_make_reassembled_event(),
    which is using skb_copy().
    
    Reported-by: Shuang Li <shuali@redhat.com>
    Fixes: 37e22164a8a3 ("tipc: rename and move message reassembly function")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0183a74c915882509f70c2ddc05bc9e6726cfb7c
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Sat Sep 5 15:14:47 2020 +0900

    tipc: fix shutdown() of connection oriented socket
    
    [ Upstream commit a4b5cc9e10803ecba64a7d54c0f47e4564b4a980 ]
    
    I confirmed that the problem fixed by commit 2a63866c8b51a3f7 ("tipc: fix
    shutdown() of connectionless socket") also applies to stream socket.
    
    ----------
    #include <sys/socket.h>
    #include <unistd.h>
    #include <sys/wait.h>
    
    int main(int argc, char *argv[])
    {
            int fds[2] = { -1, -1 };
            socketpair(PF_TIPC, SOCK_STREAM /* or SOCK_DGRAM */, 0, fds);
            if (fork() == 0)
                    _exit(read(fds[0], NULL, 1));
            shutdown(fds[0], SHUT_RDWR); /* This must make read() return. */
            wait(NULL); /* To be woken up by _exit(). */
            return 0;
    }
    ----------
    
    Since shutdown(SHUT_RDWR) should affect all processes sharing that socket,
    unconditionally setting sk->sk_shutdown to SHUTDOWN_MASK will be the right
    behavior.
    
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d82e08de23e36c37667f67a502b0cf4a3e3f61bd
Author: Peilin Ye <yepeilin.cs@gmail.com>
Date:   Sun Sep 13 04:06:05 2020 -0400

    tipc: Fix memory leak in tipc_group_create_member()
    
    [ Upstream commit bb3a420d47ab00d7e1e5083286cab15235a96680 ]
    
    tipc_group_add_to_tree() returns silently if `key` matches `nkey` of an
    existing node, causing tipc_group_create_member() to leak memory. Let
    tipc_group_add_to_tree() return an error in such a case, so that
    tipc_group_create_member() can handle it properly.
    
    Fixes: 75da2163dbb6 ("tipc: introduce communication groups")
    Reported-and-tested-by: syzbot+f95d90c454864b3b5bc9@syzkaller.appspotmail.com
    Cc: Hillf Danton <hdanton@sina.com>
    Link: https://syzkaller.appspot.com/bug?id=048390604fe1b60df34150265479202f10e13aff
    Signed-off-by: Peilin Ye <yepeilin.cs@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5f3666e8394580179b81dd90bf8b930efaf5138e
Author: Wang Hai <wanghai38@huawei.com>
Date:   Fri Sep 18 21:18:19 2020 +0800

    net: tipc: Supply missing udp_media.h include file
    
    If the header file containing a function's prototype isn't included by
    the sourcefile containing the associated function, the build system
    complains of missing prototypes.
    
    Fixes the following W=1 kernel build warning(s):
    
    net/tipc/udp_media.c:446:5: warning: no previous prototype for ‘tipc_udp_nl_dump_remoteip’ [-Wmissing-prototypes]
    net/tipc/udp_media.c:532:5: warning: no previous prototype for ‘tipc_udp_nl_add_bearer_data’ [-Wmissing-prototypes]
    net/tipc/udp_media.c:614:5: warning: no previous prototype for ‘tipc_udp_nl_bearer_add’ [-Wmissing-prototypes]
    
    Signed-off-by: Wang Hai <wanghai38@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7eae7f72edd02389dfaa8780e37eeb9ed5f01fab
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Fri Sep 18 21:16:15 2020 +0800

    tipc: Remove unused macro CF_SERVER
    
    It is no used any more, so can remove it.
    
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d134b78ee34823c607875c77426e18c762a911ea
Merge: 785a2b103627 4bbd026cb903
Author: David S. Miller <davem@davemloft.net>
Date:   Fri Sep 18 14:12:43 2020 -0700

    Merge branch 'net-various-delete-duplicated-words'
    
    Randy Dunlap says:
    
    ====================
    net: various: delete duplicated words
    
    [PATCH 1/7 net-next] net: core: delete duplicated words
    [PATCH 2/7 net-next] net: rds: delete duplicated words
    [PATCH 3/7 net-next] net: ipv6: delete duplicated words
    [PATCH 4/7 net-next] net: bluetooth: delete duplicated words
    [PATCH 5/7 net-next] net: tipc: delete duplicated words
    [PATCH 6/7 net-next] net: atm: delete duplicated words
    [PATCH 7/7 net-next] net: bridge: delete duplicated words
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 604621911603741ae33c9c5e2c9a0332ac9ccb52
Author: Randy Dunlap <rdunlap@infradead.org>
Date:   Thu Sep 17 21:35:19 2020 -0700

    net: tipc: delete duplicated words
    
    Drop repeated words in net/tipc/.
    
    Signed-off-by: Randy Dunlap <rdunlap@infradead.org>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: Jakub Kicinski <kuba@kernel.org>
    Cc: Jon Maloy <jmaloy@redhat.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: tipc-discussion@lists.sourceforge.net
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5d7d28e5fff9668ee8ea6a5f1459276330767aa9
Merge: cb589a55f45a 23700da29b83
Author: David S. Miller <davem@davemloft.net>
Date:   Fri Sep 18 13:58:37 2020 -0700

    Merge branch 'tipc-add-more-features-to-TIPC-encryption'
    
    Tuong Lien says:
    
    ====================
    tipc: add more features to TIPC encryption
    
    This series adds some new features to TIPC encryption:
    
    - Patch 1 ("tipc: optimize key switching time and logic") optimizes the
    code and logic in preparation for the following commits.
    
    - Patch 2 ("tipc: introduce encryption master key") introduces support
    of 'master key' for authentication of new nodes and key exchange. A
    master key can be set/changed by user via netlink (eg. using the same
    'tipc node set key' command in iproute2/tipc).
    
    - Patch 3 ("tipc: add automatic session key exchange") allows a session
    key to be securely exchanged between nodes as needed.
    
    - Patch 4 ("tipc: add automatic rekeying for encryption key") adds
    automatic 'rekeying' of session keys a specific interval. The new key
    will be distributed automatically to peer nodes, so become active then.
    The rekeying interval is configurable via netlink as well.
    
    v2: update the "tipc: add automatic session key exchange" patch to fix
    "implicit declaration" issue when built without "CONFIG_TIPC_CRYPTO".
    
    v3: update the patches according to David comments by using the
    "genl_info->extack" for messages in response to netlink user config
    requests.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 23700da29b83e859a8c3727fddd33ba74c4f3a39
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Fri Sep 18 08:17:29 2020 +0700

    tipc: add automatic rekeying for encryption key
    
    Rekeying is required for security since a key is less secure when using
    for a long time. Also, key will be detached when its nonce value (or
    seqno ...) is exhausted. We now make the rekeying process automatic and
    configurable by user.
    
    Basically, TIPC will at a specific interval generate a new key by using
    the kernel 'Random Number Generator' cipher, then attach it as the node
    TX key and securely distribute to others in the cluster as RX keys (-
    the key exchange). The automatic key switching will then take over, and
    make the new key active shortly. Afterwards, the traffic from this node
    will be encrypted with the new session key. The same can happen in peer
    nodes but not necessarily at the same time.
    
    For simplicity, the automatically generated key will be initiated as a
    per node key. It is not too hard to also support a cluster key rekeying
    (e.g. a given node will generate a unique cluster key and update to the
    others in the cluster...), but that doesn't bring much benefit, while a
    per-node key is even more secure.
    
    We also enable user to force a rekeying or change the rekeying interval
    via netlink, the new 'set key' command option: 'TIPC_NLA_NODE_REKEYING'
    is added for these purposes as follows:
    - A value >= 1 will be set as the rekeying interval (in minutes);
    - A value of 0 will disable the rekeying;
    - A value of 'TIPC_REKEYING_NOW' (~0) will force an immediate rekeying;
    
    The default rekeying interval is (60 * 24) minutes i.e. done every day.
    There isn't any restriction for the value but user shouldn't set it too
    small or too large which results in an "ineffective" rekeying (thats ok
    for testing though).
    
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1ef6f7c9390ff5308c940ff8d0a53533a4673ad9
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Fri Sep 18 08:17:28 2020 +0700

    tipc: add automatic session key exchange
    
    With support from the master key option in the previous commit, it
    becomes easy to make frequent updates/exchanges of session keys between
    authenticated cluster nodes.
    Basically, there are two situations where the key exchange will take in
    place:
    
    - When a new node joins the cluster (with the master key), it will need
      to get its peer's TX key, so that be able to decrypt further messages
      from that peer.
    
    - When a new session key is generated (by either user manual setting or
      later automatic rekeying feature), the key will be distributed to all
      peer nodes in the cluster.
    
    A key to be exchanged is encapsulated in the data part of a 'MSG_CRYPTO
    /KEY_DISTR_MSG' TIPC v2 message, then xmit-ed as usual and encrypted by
    using the master key before sending out. Upon receipt of the message it
    will be decrypted in the same way as regular messages, then attached as
    the sender's RX key in the receiver node.
    
    In this way, the key exchange is reliable by the link layer, as well as
    security, integrity and authenticity by the crypto layer.
    
    Also, the forward security will be easily achieved by user changing the
    master key actively but this should not be required very frequently.
    
    The key exchange feature is independent on the presence of a master key
    Note however that the master key still is needed for new nodes to be
    able to join the cluster. It is also optional, and can be turned off/on
    via the sysfs: 'net/tipc/key_exchange_enabled' [default 1: enabled].
    
    Backward compatibility is guaranteed because for nodes that do not have
    master key support, key exchange using master key ie. tx_key = 0 if any
    will be shortly discarded at the message validation step. In other
    words, the key exchange feature will be automatically disabled to those
    nodes.
    
    v2: fix the "implicit declaration of function 'tipc_crypto_key_flush'"
    error in node.c. The function only exists when built with the TIPC
    "CONFIG_TIPC_CRYPTO" option.
    
    v3: use 'info->extack' for a message emitted due to netlink operations
    instead (- David's comment).
    
    Reported-by: kernel test robot <lkp@intel.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit daef1ee3798b25e8464b8eb618eaa74b8f423ac7
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Fri Sep 18 08:17:27 2020 +0700

    tipc: introduce encryption master key
    
    In addition to the supported cluster & per-node encryption keys for the
    en/decryption of TIPC messages, we now introduce one option for user to
    set a cluster key as 'master key', which is simply a symmetric key like
    the former but has a longer life cycle. It has two purposes:
    
    - Authentication of new member nodes in the cluster. New nodes, having
      no knowledge of current session keys in the cluster will still be
      able to join the cluster as long as they know the master key. This is
      because all neighbor discovery (LINK_CONFIG) messages must be
      encrypted with this key.
    
    - Encryption of session encryption keys during automatic exchange and
      update of those.This is a feature we will introduce in a later commit
      in this series.
    
    We insert the new key into the currently unused slot 0 in the key array
    and start using it immediately once the user has set it.
    After joining, a node only knowing the master key should be fully
    communicable to existing nodes in the cluster, although those nodes may
    have their own session keys activated (i.e. not the master one). To
    support this, we define a 'grace period', starting from the time a node
    itself reports having no RX keys, so the existing nodes will use the
    master key for encryption instead. The grace period can be extended but
    will automatically stop after e.g. 5 seconds without a new report. This
    is also the basis for later key exchanging feature as the new node will
    be impossible to decrypt anything without the support from master key.
    
    For user to set a master key, we define a new netlink flag -
    'TIPC_NLA_NODE_KEY_MASTER', so it can be added to the current 'set key'
    netlink command to specify the setting key to be a master key.
    
    Above all, the traditional cluster/per-node key mechanism is guaranteed
    to work when user comes not to use this master key option. This is also
    compatible to legacy nodes without the feature supported.
    
    Even this master key can be updated without any interruption of cluster
    connectivity but is so is needed, this has to be coordinated and set by
    the user.
    
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f779bf792284fed78fedee61b46df2d4652636d3
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Fri Sep 18 08:17:26 2020 +0700

    tipc: optimize key switching time and logic
    
    We reduce the lasting time for a pending TX key to be active as well as
    for a passive RX key to be freed which generally helps speed up the key
    switching. It is not expected to be too fast but should not be too slow
    either. Also the key handling logic is simplified that a pending RX key
    will be removed automatically if it is found not working after a number
    of times; the probing for a pending TX key is now carried on a specific
    message user ('LINK_PROTOCOL' or 'LINK_CONFIG') which is more efficient
    than using a timer on broadcast messages, the timer is reserved for use
    later as needed.
    
    The kernel logs or 'pr***()' are now made as clear as possible to user.
    Some prints are added, removed or changed to the debug-level. The
    'TIPC_CRYPTO_DEBUG' definition is removed, and the 'pr_debug()' is used
    instead which will be much helpful in runtime.
    
    Besides we also optimize the code in some other places as a preparation
    for later commits.
    
    v2: silent more kernel logs, also use 'info->extack' for a message
    emitted due to netlink operations instead (- David's comments).
    
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2e5117ba9f582262e93a1fdf8e1a7b9affd5121c
Author: Lu Wei <luwei32@huawei.com>
Date:   Tue Sep 15 10:39:55 2020 +0800

    net: tipc: kerneldoc fixes
    
    Fix parameter description of tipc_link_bc_create()
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Fixes: 16ad3f4022bb ("tipc: introduce variable window congestion control")
    Signed-off-by: Lu Wei <luwei32@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ff48b6222e65ebdba5a403ef1deba6214e749193
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Sep 13 19:37:31 2020 +0800

    tipc: use skb_unshare() instead in tipc_buf_append()
    
    In tipc_buf_append() it may change skb's frag_list, and it causes
    problems when this skb is cloned. skb_unclone() doesn't really
    make this skb's flag_list available to change.
    
    Shuang Li has reported an use-after-free issue because of this
    when creating quite a few macvlan dev over the same dev, where
    the broadcast packets will be cloned and go up to the stack:
    
     [ ] BUG: KASAN: use-after-free in pskb_expand_head+0x86d/0xea0
     [ ] Call Trace:
     [ ]  dump_stack+0x7c/0xb0
     [ ]  print_address_description.constprop.7+0x1a/0x220
     [ ]  kasan_report.cold.10+0x37/0x7c
     [ ]  check_memory_region+0x183/0x1e0
     [ ]  pskb_expand_head+0x86d/0xea0
     [ ]  process_backlog+0x1df/0x660
     [ ]  net_rx_action+0x3b4/0xc90
     [ ]
     [ ] Allocated by task 1786:
     [ ]  kmem_cache_alloc+0xbf/0x220
     [ ]  skb_clone+0x10a/0x300
     [ ]  macvlan_broadcast+0x2f6/0x590 [macvlan]
     [ ]  macvlan_process_broadcast+0x37c/0x516 [macvlan]
     [ ]  process_one_work+0x66a/0x1060
     [ ]  worker_thread+0x87/0xb10
     [ ]
     [ ] Freed by task 3253:
     [ ]  kmem_cache_free+0x82/0x2a0
     [ ]  skb_release_data+0x2c3/0x6e0
     [ ]  kfree_skb+0x78/0x1d0
     [ ]  tipc_recvmsg+0x3be/0xa40 [tipc]
    
    So fix it by using skb_unshare() instead, which would create a new
    skb for the cloned frag and it'll be safe to change its frag_list.
    The similar things were also done in sctp_make_reassembled_event(),
    which is using skb_copy().
    
    Reported-by: Shuang Li <shuali@redhat.com>
    Fixes: 37e22164a8a3 ("tipc: rename and move message reassembly function")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit bb3a420d47ab00d7e1e5083286cab15235a96680
Author: Peilin Ye <yepeilin.cs@gmail.com>
Date:   Sun Sep 13 04:06:05 2020 -0400

    tipc: Fix memory leak in tipc_group_create_member()
    
    tipc_group_add_to_tree() returns silently if `key` matches `nkey` of an
    existing node, causing tipc_group_create_member() to leak memory. Let
    tipc_group_add_to_tree() return an error in such a case, so that
    tipc_group_create_member() can handle it properly.
    
    Fixes: 75da2163dbb6 ("tipc: introduce communication groups")
    Reported-and-tested-by: syzbot+f95d90c454864b3b5bc9@syzkaller.appspotmail.com
    Cc: Hillf Danton <hdanton@sina.com>
    Link: https://syzkaller.appspot.com/bug?id=048390604fe1b60df34150265479202f10e13aff
    Signed-off-by: Peilin Ye <yepeilin.cs@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6f0e276cda3e452d634b05070fd23a5ef7e6d0a4
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Sun Aug 30 02:37:55 2020 +0700

    tipc: fix using smp_processor_id() in preemptible
    
    [ Upstream commit bb8872a1e6bc911869a729240781076ed950764b ]
    
    The 'this_cpu_ptr()' is used to obtain the AEAD key' TFM on the current
    CPU for encryption, however the execution can be preemptible since it's
    actually user-space context, so the 'using smp_processor_id() in
    preemptible' has been observed.
    
    We fix the issue by using the 'get/put_cpu_ptr()' API which consists of
    a 'preempt_disable()' instead.
    
    Fixes: fc1b6d6de220 ("tipc: introduce TIPC encryption & authentication")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aae250a268933d6eb4a7454e96abeb9c9a85fc04
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Wed Sep 2 22:44:16 2020 +0900

    tipc: fix shutdown() of connectionless socket
    
    [ Upstream commit 2a63866c8b51a3f72cea388dfac259d0e14c4ba6 ]
    
    syzbot is reporting hung task at nbd_ioctl() [1], for there are two
    problems regarding TIPC's connectionless socket's shutdown() operation.
    
    ----------
    #include <fcntl.h>
    #include <sys/socket.h>
    #include <sys/ioctl.h>
    #include <linux/nbd.h>
    #include <unistd.h>
    
    int main(int argc, char *argv[])
    {
            const int fd = open("/dev/nbd0", 3);
            alarm(5);
            ioctl(fd, NBD_SET_SOCK, socket(PF_TIPC, SOCK_DGRAM, 0));
            ioctl(fd, NBD_DO_IT, 0); /* To be interrupted by SIGALRM. */
            return 0;
    }
    ----------
    
    One problem is that wait_for_completion() from flush_workqueue() from
    nbd_start_device_ioctl() from nbd_ioctl() cannot be completed when
    nbd_start_device_ioctl() received a signal at wait_event_interruptible(),
    for tipc_shutdown() from kernel_sock_shutdown(SHUT_RDWR) from
    nbd_mark_nsock_dead() from sock_shutdown() from nbd_start_device_ioctl()
    is failing to wake up a WQ thread sleeping at wait_woken() from
    tipc_wait_for_rcvmsg() from sock_recvmsg() from sock_xmit() from
    nbd_read_stat() from recv_work() scheduled by nbd_start_device() from
    nbd_start_device_ioctl(). Fix this problem by always invoking
    sk->sk_state_change() (like inet_shutdown() does) when tipc_shutdown() is
    called.
    
    The other problem is that tipc_wait_for_rcvmsg() cannot return when
    tipc_shutdown() is called, for tipc_shutdown() sets sk->sk_shutdown to
    SEND_SHUTDOWN (despite "how" is SHUT_RDWR) while tipc_wait_for_rcvmsg()
    needs sk->sk_shutdown set to RCV_SHUTDOWN or SHUTDOWN_MASK. Fix this
    problem by setting sk->sk_shutdown to SHUTDOWN_MASK (like inet_shutdown()
    does) when the socket is connectionless.
    
    [1] https://syzkaller.appspot.com/bug?id=3fe51d307c1f0a845485cf1798aa059d12bf18b2
    
    Reported-by: syzbot <syzbot+e36f41d207137b5d12f7@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 09c45065257b5b194e08a1b4749daeebb961675e
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Wed Sep 2 22:44:16 2020 +0900

    tipc: fix shutdown() of connectionless socket
    
    [ Upstream commit 2a63866c8b51a3f72cea388dfac259d0e14c4ba6 ]
    
    syzbot is reporting hung task at nbd_ioctl() [1], for there are two
    problems regarding TIPC's connectionless socket's shutdown() operation.
    
    ----------
    #include <fcntl.h>
    #include <sys/socket.h>
    #include <sys/ioctl.h>
    #include <linux/nbd.h>
    #include <unistd.h>
    
    int main(int argc, char *argv[])
    {
            const int fd = open("/dev/nbd0", 3);
            alarm(5);
            ioctl(fd, NBD_SET_SOCK, socket(PF_TIPC, SOCK_DGRAM, 0));
            ioctl(fd, NBD_DO_IT, 0); /* To be interrupted by SIGALRM. */
            return 0;
    }
    ----------
    
    One problem is that wait_for_completion() from flush_workqueue() from
    nbd_start_device_ioctl() from nbd_ioctl() cannot be completed when
    nbd_start_device_ioctl() received a signal at wait_event_interruptible(),
    for tipc_shutdown() from kernel_sock_shutdown(SHUT_RDWR) from
    nbd_mark_nsock_dead() from sock_shutdown() from nbd_start_device_ioctl()
    is failing to wake up a WQ thread sleeping at wait_woken() from
    tipc_wait_for_rcvmsg() from sock_recvmsg() from sock_xmit() from
    nbd_read_stat() from recv_work() scheduled by nbd_start_device() from
    nbd_start_device_ioctl(). Fix this problem by always invoking
    sk->sk_state_change() (like inet_shutdown() does) when tipc_shutdown() is
    called.
    
    The other problem is that tipc_wait_for_rcvmsg() cannot return when
    tipc_shutdown() is called, for tipc_shutdown() sets sk->sk_shutdown to
    SEND_SHUTDOWN (despite "how" is SHUT_RDWR) while tipc_wait_for_rcvmsg()
    needs sk->sk_shutdown set to RCV_SHUTDOWN or SHUTDOWN_MASK. Fix this
    problem by setting sk->sk_shutdown to SHUTDOWN_MASK (like inet_shutdown()
    does) when the socket is connectionless.
    
    [1] https://syzkaller.appspot.com/bug?id=3fe51d307c1f0a845485cf1798aa059d12bf18b2
    
    Reported-by: syzbot <syzbot+e36f41d207137b5d12f7@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 553d1bb7f4d1d2b86b7527c10be31b2f5f78bd8c
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Wed Sep 2 22:44:16 2020 +0900

    tipc: fix shutdown() of connectionless socket
    
    [ Upstream commit 2a63866c8b51a3f72cea388dfac259d0e14c4ba6 ]
    
    syzbot is reporting hung task at nbd_ioctl() [1], for there are two
    problems regarding TIPC's connectionless socket's shutdown() operation.
    
    ----------
    #include <fcntl.h>
    #include <sys/socket.h>
    #include <sys/ioctl.h>
    #include <linux/nbd.h>
    #include <unistd.h>
    
    int main(int argc, char *argv[])
    {
            const int fd = open("/dev/nbd0", 3);
            alarm(5);
            ioctl(fd, NBD_SET_SOCK, socket(PF_TIPC, SOCK_DGRAM, 0));
            ioctl(fd, NBD_DO_IT, 0); /* To be interrupted by SIGALRM. */
            return 0;
    }
    ----------
    
    One problem is that wait_for_completion() from flush_workqueue() from
    nbd_start_device_ioctl() from nbd_ioctl() cannot be completed when
    nbd_start_device_ioctl() received a signal at wait_event_interruptible(),
    for tipc_shutdown() from kernel_sock_shutdown(SHUT_RDWR) from
    nbd_mark_nsock_dead() from sock_shutdown() from nbd_start_device_ioctl()
    is failing to wake up a WQ thread sleeping at wait_woken() from
    tipc_wait_for_rcvmsg() from sock_recvmsg() from sock_xmit() from
    nbd_read_stat() from recv_work() scheduled by nbd_start_device() from
    nbd_start_device_ioctl(). Fix this problem by always invoking
    sk->sk_state_change() (like inet_shutdown() does) when tipc_shutdown() is
    called.
    
    The other problem is that tipc_wait_for_rcvmsg() cannot return when
    tipc_shutdown() is called, for tipc_shutdown() sets sk->sk_shutdown to
    SEND_SHUTDOWN (despite "how" is SHUT_RDWR) while tipc_wait_for_rcvmsg()
    needs sk->sk_shutdown set to RCV_SHUTDOWN or SHUTDOWN_MASK. Fix this
    problem by setting sk->sk_shutdown to SHUTDOWN_MASK (like inet_shutdown()
    does) when the socket is connectionless.
    
    [1] https://syzkaller.appspot.com/bug?id=3fe51d307c1f0a845485cf1798aa059d12bf18b2
    
    Reported-by: syzbot <syzbot+e36f41d207137b5d12f7@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b5782c68d954896ca2e783fc8c7d7f4501b1aed3
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Wed Sep 2 22:44:16 2020 +0900

    tipc: fix shutdown() of connectionless socket
    
    [ Upstream commit 2a63866c8b51a3f72cea388dfac259d0e14c4ba6 ]
    
    syzbot is reporting hung task at nbd_ioctl() [1], for there are two
    problems regarding TIPC's connectionless socket's shutdown() operation.
    
    ----------
    #include <fcntl.h>
    #include <sys/socket.h>
    #include <sys/ioctl.h>
    #include <linux/nbd.h>
    #include <unistd.h>
    
    int main(int argc, char *argv[])
    {
            const int fd = open("/dev/nbd0", 3);
            alarm(5);
            ioctl(fd, NBD_SET_SOCK, socket(PF_TIPC, SOCK_DGRAM, 0));
            ioctl(fd, NBD_DO_IT, 0); /* To be interrupted by SIGALRM. */
            return 0;
    }
    ----------
    
    One problem is that wait_for_completion() from flush_workqueue() from
    nbd_start_device_ioctl() from nbd_ioctl() cannot be completed when
    nbd_start_device_ioctl() received a signal at wait_event_interruptible(),
    for tipc_shutdown() from kernel_sock_shutdown(SHUT_RDWR) from
    nbd_mark_nsock_dead() from sock_shutdown() from nbd_start_device_ioctl()
    is failing to wake up a WQ thread sleeping at wait_woken() from
    tipc_wait_for_rcvmsg() from sock_recvmsg() from sock_xmit() from
    nbd_read_stat() from recv_work() scheduled by nbd_start_device() from
    nbd_start_device_ioctl(). Fix this problem by always invoking
    sk->sk_state_change() (like inet_shutdown() does) when tipc_shutdown() is
    called.
    
    The other problem is that tipc_wait_for_rcvmsg() cannot return when
    tipc_shutdown() is called, for tipc_shutdown() sets sk->sk_shutdown to
    SEND_SHUTDOWN (despite "how" is SHUT_RDWR) while tipc_wait_for_rcvmsg()
    needs sk->sk_shutdown set to RCV_SHUTDOWN or SHUTDOWN_MASK. Fix this
    problem by setting sk->sk_shutdown to SHUTDOWN_MASK (like inet_shutdown()
    does) when the socket is connectionless.
    
    [1] https://syzkaller.appspot.com/bug?id=3fe51d307c1f0a845485cf1798aa059d12bf18b2
    
    Reported-by: syzbot <syzbot+e36f41d207137b5d12f7@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a4b5cc9e10803ecba64a7d54c0f47e4564b4a980
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Sat Sep 5 15:14:47 2020 +0900

    tipc: fix shutdown() of connection oriented socket
    
    I confirmed that the problem fixed by commit 2a63866c8b51a3f7 ("tipc: fix
    shutdown() of connectionless socket") also applies to stream socket.
    
    ----------
    #include <sys/socket.h>
    #include <unistd.h>
    #include <sys/wait.h>
    
    int main(int argc, char *argv[])
    {
            int fds[2] = { -1, -1 };
            socketpair(PF_TIPC, SOCK_STREAM /* or SOCK_DGRAM */, 0, fds);
            if (fork() == 0)
                    _exit(read(fds[0], NULL, 1));
            shutdown(fds[0], SHUT_RDWR); /* This must make read() return. */
            wait(NULL); /* To be woken up by _exit(). */
            return 0;
    }
    ----------
    
    Since shutdown(SHUT_RDWR) should affect all processes sharing that socket,
    unconditionally setting sk->sk_shutdown to SHUTDOWN_MASK will be the right
    behavior.
    
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d966ddcc38217a6110a6a0ff37ad2dee7d42e23e
Author: Hoang Huu Le <hoang.h.le@dektech.com.au>
Date:   Mon Sep 7 13:17:25 2020 +0700

    tipc: fix a deadlock when flushing scheduled work
    
    In the commit fdeba99b1e58
    ("tipc: fix use-after-free in tipc_bcast_get_mode"), we're trying
    to make sure the tipc_net_finalize_work work item finished if it
    enqueued. But calling flush_scheduled_work() is not just affecting
    above work item but either any scheduled work. This has turned out
    to be overkill and caused to deadlock as syzbot reported:
    
    ======================================================
    WARNING: possible circular locking dependency detected
    5.9.0-rc2-next-20200828-syzkaller #0 Not tainted
    ------------------------------------------------------
    kworker/u4:6/349 is trying to acquire lock:
    ffff8880aa063d38 ((wq_completion)events){+.+.}-{0:0}, at: flush_workqueue+0xe1/0x13e0 kernel/workqueue.c:2777
    
    but task is already holding lock:
    ffffffff8a879430 (pernet_ops_rwsem){++++}-{3:3}, at: cleanup_net+0x9b/0xb10 net/core/net_namespace.c:565
    
    [...]
     Possible unsafe locking scenario:
    
           CPU0                    CPU1
           ----                    ----
      lock(pernet_ops_rwsem);
                                   lock(&sb->s_type->i_mutex_key#13);
                                   lock(pernet_ops_rwsem);
      lock((wq_completion)events);
    
     *** DEADLOCK ***
    [...]
    
    v1:
    To fix the original issue, we replace above calling by introducing
    a bit flag. When a namespace cleaned-up, bit flag is set to zero and:
    - tipc_net_finalize functionial just does return immediately.
    - tipc_net_finalize_work does not enqueue into the scheduled work queue.
    
    v2:
    Use cancel_work_sync() helper to make sure ONLY the
    tipc_net_finalize_work() stopped before releasing bcbase object.
    
    Reported-by: syzbot+d5aa7e0385f6a5d0f4fd@syzkaller.appspotmail.com
    Fixes: fdeba99b1e58 ("tipc: fix use-after-free in tipc_bcast_get_mode")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Huu Le <hoang.h.le@dektech.com.au>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 3e8d3bdc2a757cc6be5470297947799a7df445cc
Merge: 8381979dfa05 b61ac5bb420a
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Sep 3 18:50:48 2020 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from David Miller:
    
     1) Use netif_rx_ni() when necessary in batman-adv stack, from Jussi
        Kivilinna.
    
     2) Fix loss of RTT samples in rxrpc, from David Howells.
    
     3) Memory leak in hns_nic_dev_probe(), from Dignhao Liu.
    
     4) ravb module cannot be unloaded, fix from Yuusuke Ashizuka.
    
     5) We disable BH for too lokng in sctp_get_port_local(), add a
        cond_resched() here as well, from Xin Long.
    
     6) Fix memory leak in st95hf_in_send_cmd, from Dinghao Liu.
    
     7) Out of bound access in bpf_raw_tp_link_fill_link_info(), from
        Yonghong Song.
    
     8) Missing of_node_put() in mt7530 DSA driver, from Sumera
        Priyadarsini.
    
     9) Fix crash in bnxt_fw_reset_task(), from Michael Chan.
    
    10) Fix geneve tunnel checksumming bug in hns3, from Yi Li.
    
    11) Memory leak in rxkad_verify_response, from Dinghao Liu.
    
    12) In tipc, don't use smp_processor_id() in preemptible context. From
        Tuong Lien.
    
    13) Fix signedness issue in mlx4 memory allocation, from Shung-Hsi Yu.
    
    14) Missing clk_disable_prepare() in gemini driver, from Dan Carpenter.
    
    15) Fix ABI mismatch between driver and firmware in nfp, from Louis
        Peens.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (110 commits)
      net/smc: fix sock refcounting in case of termination
      net/smc: reset sndbuf_desc if freed
      net/smc: set rx_off for SMCR explicitly
      net/smc: fix toleration of fake add_link messages
      tg3: Fix soft lockup when tg3_reset_task() fails.
      doc: net: dsa: Fix typo in config code sample
      net: dp83867: Fix WoL SecureOn password
      nfp: flower: fix ABI mismatch between driver and firmware
      tipc: fix shutdown() of connectionless socket
      ipv6: Fix sysctl max for fib_multipath_hash_policy
      drivers/net/wan/hdlc: Change the default of hard_header_len to 0
      net: gemini: Fix another missing clk_disable_unprepare() in probe
      net: bcmgenet: fix mask check in bcmgenet_validate_flow()
      amd-xgbe: Add support for new port mode
      net: usb: dm9601: Add USB ID of Keenetic Plus DSL
      vhost: fix typo in error message
      net: ethernet: mlx4: Fix memory allocation in mlx4_buddy_init()
      pktgen: fix error message with wrong function name
      net: ethernet: ti: am65-cpsw: fix rmii 100Mbit link mode
      cxgb4: fix thermal zone device registration
      ...

commit 6c2e795f95cddd4a4e4f74a6aa7412a3ccf9fc01
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Sat Aug 15 16:29:15 2020 -0700

    tipc: fix uninit skb->data in tipc_nl_compat_dumpit()
    
    [ Upstream commit 47733f9daf4fe4f7e0eb9e273f21ad3a19130487 ]
    
    __tipc_nl_compat_dumpit() has two callers, and it expects them to
    pass a valid nlmsghdr via arg->data. This header is artificial and
    crafted just for __tipc_nl_compat_dumpit().
    
    tipc_nl_compat_publ_dump() does so by putting a genlmsghdr as well
    as some nested attribute, TIPC_NLA_SOCK. But the other caller
    tipc_nl_compat_dumpit() does not, this leaves arg->data uninitialized
    on this call path.
    
    Fix this by just adding a similar nlmsghdr without any payload in
    tipc_nl_compat_dumpit().
    
    This bug exists since day 1, but the recent commit 6ea67769ff33
    ("net: tipc: prepare attrs in __tipc_nl_compat_dumpit()") makes it
    easier to appear.
    
    Reported-and-tested-by: syzbot+0e7181deafa7e0b79923@syzkaller.appspotmail.com
    Fixes: d0796d1ef63d ("tipc: convert legacy nl bearer dump to nl compat")
    Cc: Jon Maloy <jmaloy@redhat.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Richard Alpe <richard.alpe@ericsson.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d43753b0273731997a180f11d426d22f61bbb7d
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Sat Aug 15 16:29:15 2020 -0700

    tipc: fix uninit skb->data in tipc_nl_compat_dumpit()
    
    [ Upstream commit 47733f9daf4fe4f7e0eb9e273f21ad3a19130487 ]
    
    __tipc_nl_compat_dumpit() has two callers, and it expects them to
    pass a valid nlmsghdr via arg->data. This header is artificial and
    crafted just for __tipc_nl_compat_dumpit().
    
    tipc_nl_compat_publ_dump() does so by putting a genlmsghdr as well
    as some nested attribute, TIPC_NLA_SOCK. But the other caller
    tipc_nl_compat_dumpit() does not, this leaves arg->data uninitialized
    on this call path.
    
    Fix this by just adding a similar nlmsghdr without any payload in
    tipc_nl_compat_dumpit().
    
    This bug exists since day 1, but the recent commit 6ea67769ff33
    ("net: tipc: prepare attrs in __tipc_nl_compat_dumpit()") makes it
    easier to appear.
    
    Reported-and-tested-by: syzbot+0e7181deafa7e0b79923@syzkaller.appspotmail.com
    Fixes: d0796d1ef63d ("tipc: convert legacy nl bearer dump to nl compat")
    Cc: Jon Maloy <jmaloy@redhat.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Richard Alpe <richard.alpe@ericsson.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e7addd2057cda5800021c47c790f82bb62454fb5
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Sat Aug 15 16:29:15 2020 -0700

    tipc: fix uninit skb->data in tipc_nl_compat_dumpit()
    
    [ Upstream commit 47733f9daf4fe4f7e0eb9e273f21ad3a19130487 ]
    
    __tipc_nl_compat_dumpit() has two callers, and it expects them to
    pass a valid nlmsghdr via arg->data. This header is artificial and
    crafted just for __tipc_nl_compat_dumpit().
    
    tipc_nl_compat_publ_dump() does so by putting a genlmsghdr as well
    as some nested attribute, TIPC_NLA_SOCK. But the other caller
    tipc_nl_compat_dumpit() does not, this leaves arg->data uninitialized
    on this call path.
    
    Fix this by just adding a similar nlmsghdr without any payload in
    tipc_nl_compat_dumpit().
    
    This bug exists since day 1, but the recent commit 6ea67769ff33
    ("net: tipc: prepare attrs in __tipc_nl_compat_dumpit()") makes it
    easier to appear.
    
    Reported-and-tested-by: syzbot+0e7181deafa7e0b79923@syzkaller.appspotmail.com
    Fixes: d0796d1ef63d ("tipc: convert legacy nl bearer dump to nl compat")
    Cc: Jon Maloy <jmaloy@redhat.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Richard Alpe <richard.alpe@ericsson.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a8098e1b10f85f6dfd39f89cf8bc6cbafd3b487
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Sat Aug 15 16:29:15 2020 -0700

    tipc: fix uninit skb->data in tipc_nl_compat_dumpit()
    
    [ Upstream commit 47733f9daf4fe4f7e0eb9e273f21ad3a19130487 ]
    
    __tipc_nl_compat_dumpit() has two callers, and it expects them to
    pass a valid nlmsghdr via arg->data. This header is artificial and
    crafted just for __tipc_nl_compat_dumpit().
    
    tipc_nl_compat_publ_dump() does so by putting a genlmsghdr as well
    as some nested attribute, TIPC_NLA_SOCK. But the other caller
    tipc_nl_compat_dumpit() does not, this leaves arg->data uninitialized
    on this call path.
    
    Fix this by just adding a similar nlmsghdr without any payload in
    tipc_nl_compat_dumpit().
    
    This bug exists since day 1, but the recent commit 6ea67769ff33
    ("net: tipc: prepare attrs in __tipc_nl_compat_dumpit()") makes it
    easier to appear.
    
    Reported-and-tested-by: syzbot+0e7181deafa7e0b79923@syzkaller.appspotmail.com
    Fixes: d0796d1ef63d ("tipc: convert legacy nl bearer dump to nl compat")
    Cc: Jon Maloy <jmaloy@redhat.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Richard Alpe <richard.alpe@ericsson.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a0953a565fb04d45fd8f8326f8ed0fb175e4698c
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Sat Aug 15 16:29:15 2020 -0700

    tipc: fix uninit skb->data in tipc_nl_compat_dumpit()
    
    [ Upstream commit 47733f9daf4fe4f7e0eb9e273f21ad3a19130487 ]
    
    __tipc_nl_compat_dumpit() has two callers, and it expects them to
    pass a valid nlmsghdr via arg->data. This header is artificial and
    crafted just for __tipc_nl_compat_dumpit().
    
    tipc_nl_compat_publ_dump() does so by putting a genlmsghdr as well
    as some nested attribute, TIPC_NLA_SOCK. But the other caller
    tipc_nl_compat_dumpit() does not, this leaves arg->data uninitialized
    on this call path.
    
    Fix this by just adding a similar nlmsghdr without any payload in
    tipc_nl_compat_dumpit().
    
    This bug exists since day 1, but the recent commit 6ea67769ff33
    ("net: tipc: prepare attrs in __tipc_nl_compat_dumpit()") makes it
    easier to appear.
    
    Reported-and-tested-by: syzbot+0e7181deafa7e0b79923@syzkaller.appspotmail.com
    Fixes: d0796d1ef63d ("tipc: convert legacy nl bearer dump to nl compat")
    Cc: Jon Maloy <jmaloy@redhat.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Richard Alpe <richard.alpe@ericsson.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2a63866c8b51a3f72cea388dfac259d0e14c4ba6
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Wed Sep 2 22:44:16 2020 +0900

    tipc: fix shutdown() of connectionless socket
    
    syzbot is reporting hung task at nbd_ioctl() [1], for there are two
    problems regarding TIPC's connectionless socket's shutdown() operation.
    
    ----------
    #include <fcntl.h>
    #include <sys/socket.h>
    #include <sys/ioctl.h>
    #include <linux/nbd.h>
    #include <unistd.h>
    
    int main(int argc, char *argv[])
    {
            const int fd = open("/dev/nbd0", 3);
            alarm(5);
            ioctl(fd, NBD_SET_SOCK, socket(PF_TIPC, SOCK_DGRAM, 0));
            ioctl(fd, NBD_DO_IT, 0); /* To be interrupted by SIGALRM. */
            return 0;
    }
    ----------
    
    One problem is that wait_for_completion() from flush_workqueue() from
    nbd_start_device_ioctl() from nbd_ioctl() cannot be completed when
    nbd_start_device_ioctl() received a signal at wait_event_interruptible(),
    for tipc_shutdown() from kernel_sock_shutdown(SHUT_RDWR) from
    nbd_mark_nsock_dead() from sock_shutdown() from nbd_start_device_ioctl()
    is failing to wake up a WQ thread sleeping at wait_woken() from
    tipc_wait_for_rcvmsg() from sock_recvmsg() from sock_xmit() from
    nbd_read_stat() from recv_work() scheduled by nbd_start_device() from
    nbd_start_device_ioctl(). Fix this problem by always invoking
    sk->sk_state_change() (like inet_shutdown() does) when tipc_shutdown() is
    called.
    
    The other problem is that tipc_wait_for_rcvmsg() cannot return when
    tipc_shutdown() is called, for tipc_shutdown() sets sk->sk_shutdown to
    SEND_SHUTDOWN (despite "how" is SHUT_RDWR) while tipc_wait_for_rcvmsg()
    needs sk->sk_shutdown set to RCV_SHUTDOWN or SHUTDOWN_MASK. Fix this
    problem by setting sk->sk_shutdown to SHUTDOWN_MASK (like inet_shutdown()
    does) when the socket is connectionless.
    
    [1] https://syzkaller.appspot.com/bug?id=3fe51d307c1f0a845485cf1798aa059d12bf18b2
    
    Reported-by: syzbot <syzbot+e36f41d207137b5d12f7@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 622a63f6f3240ab716dc3018baa2cbbb75b2bc2a
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Sat Aug 29 19:52:14 2020 +0800

    tipc: Remove unused macro TIPC_NACK_INTV
    
    There is no caller in tree any more.
    
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ff007a9ba2a6ce5bcc42733239283befbdde1bb7
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Sat Aug 29 19:50:26 2020 +0800

    tipc: Remove unused macro TIPC_FWD_MSG
    
    There is no caller in tree any more.
    
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit bb8872a1e6bc911869a729240781076ed950764b
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Sun Aug 30 02:37:55 2020 +0700

    tipc: fix using smp_processor_id() in preemptible
    
    The 'this_cpu_ptr()' is used to obtain the AEAD key' TFM on the current
    CPU for encryption, however the execution can be preemptible since it's
    actually user-space context, so the 'using smp_processor_id() in
    preemptible' has been observed.
    
    We fix the issue by using the 'get/put_cpu_ptr()' API which consists of
    a 'preempt_disable()' instead.
    
    Fixes: fc1b6d6de220 ("tipc: introduce TIPC encryption & authentication")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit fdeba99b1e58ecd18c2940c453e19e4ef20ff591
Author: Hoang Huu Le <hoang.h.le@dektech.com.au>
Date:   Thu Aug 27 09:56:51 2020 +0700

    tipc: fix use-after-free in tipc_bcast_get_mode
    
    Syzbot has reported those issues as:
    
    ==================================================================
    BUG: KASAN: use-after-free in tipc_bcast_get_mode+0x3ab/0x400 net/tipc/bcast.c:759
    Read of size 1 at addr ffff88805e6b3571 by task kworker/0:6/3850
    
    CPU: 0 PID: 3850 Comm: kworker/0:6 Not tainted 5.8.0-rc7-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: events tipc_net_finalize_work
    
    Thread 1's call trace:
    [...]
      kfree+0x103/0x2c0 mm/slab.c:3757 <- bcbase releasing
      tipc_bcast_stop+0x1b0/0x2f0 net/tipc/bcast.c:721
      tipc_exit_net+0x24/0x270 net/tipc/core.c:112
    [...]
    
    Thread 2's call trace:
    [...]
      tipc_bcast_get_mode+0x3ab/0x400 net/tipc/bcast.c:759 <- bcbase
    has already been freed by Thread 1
    
      tipc_node_broadcast+0x9e/0xcc0 net/tipc/node.c:1744
      tipc_nametbl_publish+0x60b/0x970 net/tipc/name_table.c:752
      tipc_net_finalize net/tipc/net.c:141 [inline]
      tipc_net_finalize+0x1fa/0x310 net/tipc/net.c:131
      tipc_net_finalize_work+0x55/0x80 net/tipc/net.c:150
    [...]
    
    ==================================================================
    BUG: KASAN: use-after-free in tipc_named_reinit+0xef/0x290 net/tipc/name_distr.c:344
    Read of size 8 at addr ffff888052ab2000 by task kworker/0:13/30628
    CPU: 0 PID: 30628 Comm: kworker/0:13 Not tainted 5.8.0-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: events tipc_net_finalize_work
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1f0/0x31e lib/dump_stack.c:118
     print_address_description+0x66/0x5a0 mm/kasan/report.c:383
     __kasan_report mm/kasan/report.c:513 [inline]
     kasan_report+0x132/0x1d0 mm/kasan/report.c:530
     tipc_named_reinit+0xef/0x290 net/tipc/name_distr.c:344
     tipc_net_finalize+0x85/0xe0 net/tipc/net.c:138
     tipc_net_finalize_work+0x50/0x70 net/tipc/net.c:150
     process_one_work+0x789/0xfc0 kernel/workqueue.c:2269
     worker_thread+0xaa4/0x1460 kernel/workqueue.c:2415
     kthread+0x37e/0x3a0 drivers/block/aoe/aoecmd.c:1234
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:293
    [...]
    Freed by task 14058:
     save_stack mm/kasan/common.c:48 [inline]
     set_track mm/kasan/common.c:56 [inline]
     kasan_set_free_info mm/kasan/common.c:316 [inline]
     __kasan_slab_free+0x114/0x170 mm/kasan/common.c:455
     __cache_free mm/slab.c:3426 [inline]
     kfree+0x10a/0x220 mm/slab.c:3757
     tipc_exit_net+0x29/0x50 net/tipc/core.c:113
     ops_exit_list net/core/net_namespace.c:186 [inline]
     cleanup_net+0x708/0xba0 net/core/net_namespace.c:603
     process_one_work+0x789/0xfc0 kernel/workqueue.c:2269
     worker_thread+0xaa4/0x1460 kernel/workqueue.c:2415
     kthread+0x37e/0x3a0 drivers/block/aoe/aoecmd.c:1234
     ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:293
    
    Fix it by calling flush_scheduled_work() to make sure the
    tipc_net_finalize_work() stopped before releasing bcbase object.
    
    Reported-by: syzbot+6ea1f7a8df64596ef4d7@syzkaller.appspotmail.com
    Reported-by: syzbot+e9cc557752ab126c1b99@syzkaller.appspotmail.com
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Huu Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3942262b7499405223dcc219bc58cc540eb7651b
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Sat Aug 15 16:29:15 2020 -0700

    tipc: fix uninit skb->data in tipc_nl_compat_dumpit()
    
    [ Upstream commit 47733f9daf4fe4f7e0eb9e273f21ad3a19130487 ]
    
    __tipc_nl_compat_dumpit() has two callers, and it expects them to
    pass a valid nlmsghdr via arg->data. This header is artificial and
    crafted just for __tipc_nl_compat_dumpit().
    
    tipc_nl_compat_publ_dump() does so by putting a genlmsghdr as well
    as some nested attribute, TIPC_NLA_SOCK. But the other caller
    tipc_nl_compat_dumpit() does not, this leaves arg->data uninitialized
    on this call path.
    
    Fix this by just adding a similar nlmsghdr without any payload in
    tipc_nl_compat_dumpit().
    
    This bug exists since day 1, but the recent commit 6ea67769ff33
    ("net: tipc: prepare attrs in __tipc_nl_compat_dumpit()") makes it
    easier to appear.
    
    Reported-and-tested-by: syzbot+0e7181deafa7e0b79923@syzkaller.appspotmail.com
    Fixes: d0796d1ef63d ("tipc: convert legacy nl bearer dump to nl compat")
    Cc: Jon Maloy <jmaloy@redhat.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Richard Alpe <richard.alpe@ericsson.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 828fd2e892b03d05e9f573839e7b2d27835703bd
Author: Xin Long <lucien.xin@gmail.com>
Date:   Thu Aug 20 15:34:47 2020 +0800

    tipc: call rcu_read_lock() in tipc_aead_encrypt_done()
    
    [ Upstream commit f6db9096416209474090d64d8284e7c16c3d8873 ]
    
    b->media->send_msg() requires rcu_read_lock(), as we can see
    elsewhere in tipc,  tipc_bearer_xmit, tipc_bearer_xmit_skb
    and tipc_bearer_bc_xmit().
    
    Syzbot has reported this issue as:
    
      net/tipc/bearer.c:466 suspicious rcu_dereference_check() usage!
      Workqueue: cryptd cryptd_queue_worker
      Call Trace:
       tipc_l2_send_msg+0x354/0x420 net/tipc/bearer.c:466
       tipc_aead_encrypt_done+0x204/0x3a0 net/tipc/crypto.c:761
       cryptd_aead_crypt+0xe8/0x1d0 crypto/cryptd.c:739
       cryptd_queue_worker+0x118/0x1b0 crypto/cryptd.c:181
       process_one_work+0x94c/0x1670 kernel/workqueue.c:2269
       worker_thread+0x64c/0x1120 kernel/workqueue.c:2415
       kthread+0x3b5/0x4a0 kernel/kthread.c:291
       ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:293
    
    So fix it by calling rcu_read_lock() in tipc_aead_encrypt_done()
    for b->media->send_msg().
    
    Fixes: fc1b6d6de220 ("tipc: introduce TIPC encryption & authentication")
    Reported-by: syzbot+47bbc6b678d317cccbe0@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 31ee37fc7fb6a5b0bc6a752c048486cb40eebf47
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Sat Aug 15 16:29:15 2020 -0700

    tipc: fix uninit skb->data in tipc_nl_compat_dumpit()
    
    [ Upstream commit 47733f9daf4fe4f7e0eb9e273f21ad3a19130487 ]
    
    __tipc_nl_compat_dumpit() has two callers, and it expects them to
    pass a valid nlmsghdr via arg->data. This header is artificial and
    crafted just for __tipc_nl_compat_dumpit().
    
    tipc_nl_compat_publ_dump() does so by putting a genlmsghdr as well
    as some nested attribute, TIPC_NLA_SOCK. But the other caller
    tipc_nl_compat_dumpit() does not, this leaves arg->data uninitialized
    on this call path.
    
    Fix this by just adding a similar nlmsghdr without any payload in
    tipc_nl_compat_dumpit().
    
    This bug exists since day 1, but the recent commit 6ea67769ff33
    ("net: tipc: prepare attrs in __tipc_nl_compat_dumpit()") makes it
    easier to appear.
    
    Reported-and-tested-by: syzbot+0e7181deafa7e0b79923@syzkaller.appspotmail.com
    Fixes: d0796d1ef63d ("tipc: convert legacy nl bearer dump to nl compat")
    Cc: Jon Maloy <jmaloy@redhat.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Richard Alpe <richard.alpe@ericsson.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e6165e8e3bde6869f2711b326316b8e769ac721
Author: Xin Long <lucien.xin@gmail.com>
Date:   Thu Aug 20 15:34:47 2020 +0800

    tipc: call rcu_read_lock() in tipc_aead_encrypt_done()
    
    [ Upstream commit f6db9096416209474090d64d8284e7c16c3d8873 ]
    
    b->media->send_msg() requires rcu_read_lock(), as we can see
    elsewhere in tipc,  tipc_bearer_xmit, tipc_bearer_xmit_skb
    and tipc_bearer_bc_xmit().
    
    Syzbot has reported this issue as:
    
      net/tipc/bearer.c:466 suspicious rcu_dereference_check() usage!
      Workqueue: cryptd cryptd_queue_worker
      Call Trace:
       tipc_l2_send_msg+0x354/0x420 net/tipc/bearer.c:466
       tipc_aead_encrypt_done+0x204/0x3a0 net/tipc/crypto.c:761
       cryptd_aead_crypt+0xe8/0x1d0 crypto/cryptd.c:739
       cryptd_queue_worker+0x118/0x1b0 crypto/cryptd.c:181
       process_one_work+0x94c/0x1670 kernel/workqueue.c:2269
       worker_thread+0x64c/0x1120 kernel/workqueue.c:2415
       kthread+0x3b5/0x4a0 kernel/kthread.c:291
       ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:293
    
    So fix it by calling rcu_read_lock() in tipc_aead_encrypt_done()
    for b->media->send_msg().
    
    Fixes: fc1b6d6de220 ("tipc: introduce TIPC encryption & authentication")
    Reported-by: syzbot+47bbc6b678d317cccbe0@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9d045ed1ebe1a6115d3fa9930c5371defb31d95a
Merge: f320ac6e1316 eeaac3634ee0
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Aug 23 10:52:33 2020 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from David Miller:
     "Nothing earth shattering here, lots of small fixes (f.e. missing RCU
      protection, bad ref counting, missing memset(), etc.) all over the
      place:
    
       1) Use get_file_rcu() in task_file iterator, from Yonghong Song.
    
       2) There are two ways to set remote source MAC addresses in macvlan
          driver, but only one of which validates things properly. Fix this.
          From Alvin Šipraga.
    
       3) Missing of_node_put() in gianfar probing, from Sumera
          Priyadarsini.
    
       4) Preserve device wanted feature bits across multiple netlink
          ethtool requests, from Maxim Mikityanskiy.
    
       5) Fix rcu_sched stall in task and task_file bpf iterators, from
          Yonghong Song.
    
       6) Avoid reset after device destroy in ena driver, from Shay
          Agroskin.
    
       7) Missing memset() in netlink policy export reallocation path, from
          Johannes Berg.
    
       8) Fix info leak in __smc_diag_dump(), from Peilin Ye.
    
       9) Decapsulate ECN properly for ipv6 in ipv4 tunnels, from Mark
          Tomlinson.
    
      10) Fix number of data stream negotiation in SCTP, from David Laight.
    
      11) Fix double free in connection tracker action module, from Alaa
          Hleihel.
    
      12) Don't allow empty NHA_GROUP attributes, from Nikolay Aleksandrov"
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (46 commits)
      net: nexthop: don't allow empty NHA_GROUP
      bpf: Fix two typos in uapi/linux/bpf.h
      net: dsa: b53: check for timeout
      tipc: call rcu_read_lock() in tipc_aead_encrypt_done()
      net/sched: act_ct: Fix skb double-free in tcf_ct_handle_fragments() error flow
      net: sctp: Fix negotiation of the number of data streams.
      dt-bindings: net: renesas, ether: Improve schema validation
      gre6: Fix reception with IP6_TNL_F_RCV_DSCP_COPY
      hv_netvsc: Fix the queue_mapping in netvsc_vf_xmit()
      hv_netvsc: Remove "unlikely" from netvsc_select_queue
      bpf: selftests: global_funcs: Check err_str before strstr
      bpf: xdp: Fix XDP mode when no mode flags specified
      selftests/bpf: Remove test_align leftovers
      tools/resolve_btfids: Fix sections with wrong alignment
      net/smc: Prevent kernel-infoleak in __smc_diag_dump()
      sfc: fix build warnings on 32-bit
      net: phy: mscc: Fix a couple of spelling mistakes "spcified" -> "specified"
      libbpf: Fix map index used in error message
      net: gemini: Fix missing free_netdev() in error path of gemini_ethernet_port_probe()
      net: atlantic: Use readx_poll_timeout() for large timeout
      ...

commit f6db9096416209474090d64d8284e7c16c3d8873
Author: Xin Long <lucien.xin@gmail.com>
Date:   Thu Aug 20 15:34:47 2020 +0800

    tipc: call rcu_read_lock() in tipc_aead_encrypt_done()
    
    b->media->send_msg() requires rcu_read_lock(), as we can see
    elsewhere in tipc,  tipc_bearer_xmit, tipc_bearer_xmit_skb
    and tipc_bearer_bc_xmit().
    
    Syzbot has reported this issue as:
    
      net/tipc/bearer.c:466 suspicious rcu_dereference_check() usage!
      Workqueue: cryptd cryptd_queue_worker
      Call Trace:
       tipc_l2_send_msg+0x354/0x420 net/tipc/bearer.c:466
       tipc_aead_encrypt_done+0x204/0x3a0 net/tipc/crypto.c:761
       cryptd_aead_crypt+0xe8/0x1d0 crypto/cryptd.c:739
       cryptd_queue_worker+0x118/0x1b0 crypto/cryptd.c:181
       process_one_work+0x94c/0x1670 kernel/workqueue.c:2269
       worker_thread+0x64c/0x1120 kernel/workqueue.c:2415
       kthread+0x3b5/0x4a0 kernel/kthread.c:291
       ret_from_fork+0x1f/0x30 arch/x86/entry/entry_64.S:293
    
    So fix it by calling rcu_read_lock() in tipc_aead_encrypt_done()
    for b->media->send_msg().
    
    Fixes: fc1b6d6de220 ("tipc: introduce TIPC encryption & authentication")
    Reported-by: syzbot+47bbc6b678d317cccbe0@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7f8901b74bf25429023a3d5685cb3fe4f2292e12
Author: Miaohe Lin <linmiaohe@huawei.com>
Date:   Tue Aug 18 08:07:13 2020 -0400

    net: tipc: Convert to use the preferred fallthrough macro
    
    Convert the uses of fallthrough comments to fallthrough macro.
    
    Signed-off-by: Miaohe Lin <linmiaohe@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4cf7562190c795f1f95be6ee0d161107d0dc5d49
Merge: 29e44f4535fa bf2bcd6f1a88
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Aug 17 17:09:50 2020 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from David Miller:
     "Another batch of fixes:
    
      1) Remove nft_compat counter flush optimization, it generates warnings
         from the refcount infrastructure. From Florian Westphal.
    
      2) Fix BPF to search for build id more robustly, from Jiri Olsa.
    
      3) Handle bogus getopt lengths in ebtables, from Florian Westphal.
    
      4) Infoleak and other fixes to j1939 CAN driver, from Eric Dumazet and
         Oleksij Rempel.
    
      5) Reset iter properly on mptcp sendmsg() error, from Florian
         Westphal.
    
      6) Show a saner speed in bonding broadcast mode, from Jarod Wilson.
    
      7) Various kerneldoc fixes in bonding and elsewhere, from Lee Jones.
    
      8) Fix double unregister in bonding during namespace tear down, from
         Cong Wang.
    
      9) Disable RP filter during icmp_redirect selftest, from David Ahern"
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (75 commits)
      otx2_common: Use devm_kcalloc() in otx2_config_npa()
      net: qrtr: fix usage of idr in port assignment to socket
      selftests: disable rp_filter for icmp_redirect.sh
      Revert "net: xdp: pull ethernet header off packet after computing skb->protocol"
      phylink: <linux/phylink.h>: fix function prototype kernel-doc warning
      mptcp: sendmsg: reset iter on error redux
      net: devlink: Remove overzealous WARN_ON with snapshots
      tipc: not enable tipc when ipv6 works as a module
      tipc: fix uninit skb->data in tipc_nl_compat_dumpit()
      net: Fix potential wrong skb->protocol in skb_vlan_untag()
      net: xdp: pull ethernet header off packet after computing skb->protocol
      ipvlan: fix device features
      bonding: fix a potential double-unregister
      can: j1939: add rxtimer for multipacket broadcast session
      can: j1939: abort multipacket broadcast session when timeout occurs
      can: j1939: cancel rxtimer on multipacket broadcast session complete
      can: j1939: fix support for multipacket broadcast message
      net: fddi: skfp: cfm: Remove seemingly unused variable 'ID_sccs'
      net: fddi: skfp: cfm: Remove set but unused variable 'oldstate'
      net: fddi: skfp: smt: Remove seemingly unused variable 'ID_sccs'
      ...

commit c530189905efe91b6a464db4ec1b56b4c069609f
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Aug 16 17:32:03 2020 +0800

    tipc: not enable tipc when ipv6 works as a module
    
    When using ipv6_dev_find() in one module, it requires ipv6 not to
    work as a module. Otherwise, this error occurs in build:
    
      undefined reference to `ipv6_dev_find'.
    
    So fix it by adding "depends on IPV6 || IPV6=n" to tipc/Kconfig,
    as it does in sctp/Kconfig.
    
    Fixes: 5a6f6f579178 ("tipc: set ub->ifindex for local ipv6 address")
    Reported-by: kernel test robot <lkp@intel.com>
    Acked-by: Randy Dunlap <rdunlap@infradead.org>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 47733f9daf4fe4f7e0eb9e273f21ad3a19130487
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Sat Aug 15 16:29:15 2020 -0700

    tipc: fix uninit skb->data in tipc_nl_compat_dumpit()
    
    __tipc_nl_compat_dumpit() has two callers, and it expects them to
    pass a valid nlmsghdr via arg->data. This header is artificial and
    crafted just for __tipc_nl_compat_dumpit().
    
    tipc_nl_compat_publ_dump() does so by putting a genlmsghdr as well
    as some nested attribute, TIPC_NLA_SOCK. But the other caller
    tipc_nl_compat_dumpit() does not, this leaves arg->data uninitialized
    on this call path.
    
    Fix this by just adding a similar nlmsghdr without any payload in
    tipc_nl_compat_dumpit().
    
    This bug exists since day 1, but the recent commit 6ea67769ff33
    ("net: tipc: prepare attrs in __tipc_nl_compat_dumpit()") makes it
    easier to appear.
    
    Reported-and-tested-by: syzbot+0e7181deafa7e0b79923@syzkaller.appspotmail.com
    Fixes: d0796d1ef63d ("tipc: convert legacy nl bearer dump to nl compat")
    Cc: Jon Maloy <jmaloy@redhat.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Richard Alpe <richard.alpe@ericsson.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 47ec5303d73ea344e84f46660fff693c57641386
Merge: 8186749621ed c1055b76ad00
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Aug 5 20:13:21 2020 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net-next
    
    Pull networking updates from David Miller:
    
     1) Support 6Ghz band in ath11k driver, from Rajkumar Manoharan.
    
     2) Support UDP segmentation in code TSO code, from Eric Dumazet.
    
     3) Allow flashing different flash images in cxgb4 driver, from Vishal
        Kulkarni.
    
     4) Add drop frames counter and flow status to tc flower offloading,
        from Po Liu.
    
     5) Support n-tuple filters in cxgb4, from Vishal Kulkarni.
    
     6) Various new indirect call avoidance, from Eric Dumazet and Brian
        Vazquez.
    
     7) Fix BPF verifier failures on 32-bit pointer arithmetic, from
        Yonghong Song.
    
     8) Support querying and setting hardware address of a port function via
        devlink, use this in mlx5, from Parav Pandit.
    
     9) Support hw ipsec offload on bonding slaves, from Jarod Wilson.
    
    10) Switch qca8k driver over to phylink, from Jonathan McDowell.
    
    11) In bpftool, show list of processes holding BPF FD references to
        maps, programs, links, and btf objects. From Andrii Nakryiko.
    
    12) Several conversions over to generic power management, from Vaibhav
        Gupta.
    
    13) Add support for SO_KEEPALIVE et al. to bpf_setsockopt(), from Dmitry
        Yakunin.
    
    14) Various https url conversions, from Alexander A. Klimov.
    
    15) Timestamping and PHC support for mscc PHY driver, from Antoine
        Tenart.
    
    16) Support bpf iterating over tcp and udp sockets, from Yonghong Song.
    
    17) Support 5GBASE-T i40e NICs, from Aleksandr Loktionov.
    
    18) Add kTLS RX HW offload support to mlx5e, from Tariq Toukan.
    
    19) Fix the ->ndo_start_xmit() return type to be netdev_tx_t in several
        drivers. From Luc Van Oostenryck.
    
    20) XDP support for xen-netfront, from Denis Kirjanov.
    
    21) Support receive buffer autotuning in MPTCP, from Florian Westphal.
    
    22) Support EF100 chip in sfc driver, from Edward Cree.
    
    23) Add XDP support to mvpp2 driver, from Matteo Croce.
    
    24) Support MPTCP in sock_diag, from Paolo Abeni.
    
    25) Commonize UDP tunnel offloading code by creating udp_tunnel_nic
        infrastructure, from Jakub Kicinski.
    
    26) Several pci_ --> dma_ API conversions, from Christophe JAILLET.
    
    27) Add FLOW_ACTION_POLICE support to mlxsw, from Ido Schimmel.
    
    28) Add SK_LOOKUP bpf program type, from Jakub Sitnicki.
    
    29) Refactor a lot of networking socket option handling code in order to
        avoid set_fs() calls, from Christoph Hellwig.
    
    30) Add rfc4884 support to icmp code, from Willem de Bruijn.
    
    31) Support TBF offload in dpaa2-eth driver, from Ioana Ciornei.
    
    32) Support XDP_REDIRECT in qede driver, from Alexander Lobakin.
    
    33) Support PCI relaxed ordering in mlx5 driver, from Aya Levin.
    
    34) Support TCP syncookies in MPTCP, from Flowian Westphal.
    
    35) Fix several tricky cases of PMTU handling wrt. briding, from Stefano
        Brivio.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net-next: (2056 commits)
      net: thunderx: initialize VF's mailbox mutex before first usage
      usb: hso: remove bogus check for EINPROGRESS
      usb: hso: no complaint about kmalloc failure
      hso: fix bailout in error case of probe
      ip_tunnel_core: Fix build for archs without _HAVE_ARCH_IPV6_CSUM
      selftests/net: relax cpu affinity requirement in msg_zerocopy test
      mptcp: be careful on subflow creation
      selftests: rtnetlink: make kci_test_encap() return sub-test result
      selftests: rtnetlink: correct the final return value for the test
      net: dsa: sja1105: use detected device id instead of DT one on mismatch
      tipc: set ub->ifindex for local ipv6 address
      ipv6: add ipv6_dev_find()
      net: openvswitch: silence suspicious RCU usage warning
      Revert "vxlan: fix tos value before xmit"
      ptp: only allow phase values lower than 1 period
      farsync: switch from 'pci_' to 'dma_' API
      wan: wanxl: switch from 'pci_' to 'dma_' API
      hv_netvsc: do not use VF device if link is down
      dpaa2-eth: Fix passing zero to 'PTR_ERR' warning
      net: macb: Properly handle phylink on at91sam9x
      ...

commit 273d405b4d5657dd2ad9aa6381e94ef63bb71423
Merge: 5845589ed652 5a6f6f579178
Author: David S. Miller <davem@davemloft.net>
Date:   Wed Aug 5 12:19:52 2020 -0700

    Merge branch 'net-fix-a-mcast-issue-for-tipc-udp-media'
    
    Xin Long says:
    
    ====================
    net: fix a mcast issue for tipc udp media
    
    Patch 1 is to add a function to get the dev by source address,
    which will be used by Patch 2.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5a6f6f579178dbeb33002d93b4f646c31348fac9
Author: Xin Long <lucien.xin@gmail.com>
Date:   Mon Aug 3 23:34:47 2020 +0800

    tipc: set ub->ifindex for local ipv6 address
    
    Without ub->ifindex set for ipv6 address in tipc_udp_enable(),
    ipv6_sock_mc_join() may make the wrong dev join the multicast
    address in enable_mcast(). This causes that tipc links would
    never be created.
    
    So fix it by getting the right netdev and setting ub->ifindex,
    as it does for ipv4 address.
    
    Reported-by: Shuang Li <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit fbc97de84ef88bc38874c41be151cf220c72a865
Author: Huang Guobin <huangguobin4@huawei.com>
Date:   Sun Aug 2 22:00:55 2020 -0400

    tipc: Use is_broadcast_ether_addr() instead of memcmp()
    
    Using is_broadcast_ether_addr() instead of directly use
    memcmp() to determine if the ethernet address is broadcast
    address.
    
    spatch with a semantic match is used to found this problem.
    (http://coccinelle.lip6.fr/)
    
    Signed-off-by: Huang Guobin <huangguobin4@huawei.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit aac87e7ce02c19250c55e2d6d3559f3d01634e80
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Tue Jul 21 08:57:05 2020 +0700

    tipc: allow to build NACK message in link timeout function
    
    [ Upstream commit 6ef9dcb78046b346b5508ca1659848b136a343c2 ]
    
    Commit 02288248b051 ("tipc: eliminate gap indicator from ACK messages")
    eliminated sending of the 'gap' indicator in regular ACK messages and
    only allowed to build NACK message with enabled probe/probe_reply.
    However, necessary correction for building NACK message was missed
    in tipc_link_timeout() function. This leads to significant delay and
    link reset (due to retransmission failure) in lossy environment.
    
    This commit fixes it by setting the 'probe' flag to 'true' when
    the receive deferred queue is not empty. As a result, NACK message
    will be built to send back to another peer.
    
    Fixes: 02288248b051 ("tipc: eliminate gap indicator from ACK messages")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 675f4bbcd68330d2d0c96e1f716886727ad7dd1a
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Aug 15 16:42:50 2019 +0200

    tipc: clean up skb list lock handling on send path
    
    commit e654f9f53b45fde3fcc8051830b212c7a8f36148 upstream.
    
    The policy for handling the skb list locks on the send and receive paths
    is simple.
    
    - On the send path we never need to grab the lock on the 'xmitq' list
      when the destination is an exernal node.
    
    - On the receive path we always need to grab the lock on the 'inputq'
      list, irrespective of source node.
    
    However, when transmitting node local messages those will eventually
    end up on the receive path of a local socket, meaning that the argument
    'xmitq' in tipc_node_xmit() will become the 'ínputq' argument in  the
    function tipc_sk_rcv(). This has been handled by always initializing
    the spinlock of the 'xmitq' list at message creation, just in case it
    may end up on the receive path later, and despite knowing that the lock
    in most cases never will be used.
    
    This approach is inaccurate and confusing, and has also concealed the
    fact that the stated 'no lock grabbing' policy for the send path is
    violated in some cases.
    
    We now clean up this by never initializing the lock at message creation,
    instead doing this at the moment we find that the message actually will
    enter the receive path. At the same time we fix the four locations
    where we incorrectly access the spinlock on the send/error path.
    
    This patch also reverts commit d12cffe9329f ("tipc: ensure head->lock
    is initialised") which has now become redundant.
    
    CC: Eric Dumazet <edumazet@google.com>
    Reported-by: Chris Packham <chris.packham@alliedtelesis.co.nz>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [acj: backport v4.19 -stable
    - adjust context
    - skipped the hunk modifying non-existent function tipc_mcast_send_sync
    - additional comment ]
    Signed-off-by: Aviraj CJ <acj@cisco.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 54e5e458698fa3cc736627a8219a4d3c436a0418
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Sat Jun 27 00:12:24 2020 -0700

    genetlink: get rid of family->attrbuf
    
    [ Upstream commit bf64ff4c2aac65d680dc639a511c781cf6b6ec08 ]
    
    genl_family_rcv_msg_attrs_parse() reuses the global family->attrbuf
    when family->parallel_ops is false. However, family->attrbuf is not
    protected by any lock on the genl_family_rcv_msg_doit() code path.
    
    This leads to several different consequences, one of them is UAF,
    like the following:
    
    genl_family_rcv_msg_doit():             genl_start():
                                              genl_family_rcv_msg_attrs_parse()
                                                attrbuf = family->attrbuf
                                                __nlmsg_parse(attrbuf);
      genl_family_rcv_msg_attrs_parse()
        attrbuf = family->attrbuf
        __nlmsg_parse(attrbuf);
                                              info->attrs = attrs;
                                              cb->data = info;
    
    netlink_unicast_kernel():
     consume_skb()
                                            genl_lock_dumpit():
                                              genl_dumpit_info(cb)->attrs
    
    Note family->attrbuf is an array of pointers to the skb data, once
    the skb is freed, any dereference of family->attrbuf will be a UAF.
    
    Maybe we could serialize the family->attrbuf with genl_mutex too, but
    that would make the locking more complicated. Instead, we can just get
    rid of family->attrbuf and always allocate attrbuf from heap like the
    family->parallel_ops==true code path. This may add some performance
    overhead but comparing with taking the global genl_mutex, it still
    looks better.
    
    Fixes: 75cdbdd08900 ("net: ieee802154: have genetlink code to parse the attrs during dumpit")
    Fixes: 057af7071344 ("net: tipc: have genetlink code to parse the attrs during dumpit")
    Reported-and-tested-by: syzbot+3039ddf6d7b13daf3787@syzkaller.appspotmail.com
    Reported-and-tested-by: syzbot+80cad1e3cb4c41cde6ff@syzkaller.appspotmail.com
    Reported-and-tested-by: syzbot+736bcbcb11b60d0c0792@syzkaller.appspotmail.com
    Reported-and-tested-by: syzbot+520f8704db2b68091d44@syzkaller.appspotmail.com
    Reported-and-tested-by: syzbot+c96e4dfb32f8987fdeed@syzkaller.appspotmail.com
    Cc: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ef9dcb78046b346b5508ca1659848b136a343c2
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Tue Jul 21 08:57:05 2020 +0700

    tipc: allow to build NACK message in link timeout function
    
    Commit 02288248b051 ("tipc: eliminate gap indicator from ACK messages")
    eliminated sending of the 'gap' indicator in regular ACK messages and
    only allowed to build NACK message with enabled probe/probe_reply.
    However, necessary correction for building NACK message was missed
    in tipc_link_timeout() function. This leads to significant delay and
    link reset (due to retransmission failure) in lossy environment.
    
    This commit fixes it by setting the 'probe' flag to 'true' when
    the receive deferred queue is not empty. As a result, NACK message
    will be built to send back to another peer.
    
    Fixes: 02288248b051 ("tipc: eliminate gap indicator from ACK messages")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d8141208b032eaee0efeacaadf1734f65db73ac5
Author: Andrew Lunn <andrew@lunn.ch>
Date:   Mon Jul 13 01:15:14 2020 +0200

    net: tipc: kerneldoc fixes
    
    Simple fixes which require no deep knowledge of the code.
    
    Cc: Jon Maloy <jmaloy@redhat.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Andrew Lunn <andrew@lunn.ch>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9c4c314991db8b585fdd2a9f3cbf5b9a0fd226c2
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Thu May 28 22:34:07 2020 +0800

    tipc: Fix NULL pointer dereference in __tipc_sendstream()
    
    [ Upstream commit 4c21daae3dbc9f8536cc18e6e53627821fa2c90c ]
    
    tipc_sendstream() may send zero length packet, then tipc_msg_append()
    do not alloc skb, skb_peek_tail() will get NULL, msg_set_ack_required
    will trigger NULL pointer dereference.
    
    Reported-by: syzbot+8eac6d030e7807c21d32@syzkaller.appspotmail.com
    Fixes: 0a3e060f340d ("tipc: add test for Nagle algorithm effectiveness")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ab4e655368f93c8da9d7dcf3e4361254a2095b6f
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Thu Jun 11 17:07:35 2020 +0700

    tipc: fix kernel WARNING in tipc_msg_append()
    
    [ Upstream commit c9aa81faf19115fc2e732e7f210b37bb316987ff ]
    
    syzbot found the following issue:
    
    WARNING: CPU: 0 PID: 6808 at include/linux/thread_info.h:150 check_copy_size include/linux/thread_info.h:150 [inline]
    WARNING: CPU: 0 PID: 6808 at include/linux/thread_info.h:150 copy_from_iter include/linux/uio.h:144 [inline]
    WARNING: CPU: 0 PID: 6808 at include/linux/thread_info.h:150 tipc_msg_append+0x49a/0x5e0 net/tipc/msg.c:242
    Kernel panic - not syncing: panic_on_warn set ...
    
    This happens after commit 5e9eeccc58f3 ("tipc: fix NULL pointer
    dereference in streaming") that tried to build at least one buffer even
    when the message data length is zero... However, it now exposes another
    bug that the 'mss' can be zero and the 'cpy' will be negative, thus the
    above kernel WARNING will appear!
    The zero value of 'mss' is never expected because it means Nagle is not
    enabled for the socket (actually the socket type was 'SOCK_SEQPACKET'),
    so the function 'tipc_msg_append()' must not be called at all. But that
    was in this particular case since the message data length was zero, and
    the 'send <= maxnagle' check became true.
    
    We resolve the issue by explicitly checking if Nagle is enabled for the
    socket, i.e. 'maxnagle != 0' before calling the 'tipc_msg_append()'. We
    also reinforce the function to against such a negative values if any.
    
    Reported-by: syzbot+75139a7d2605236b0b7f@syzkaller.appspotmail.com
    Fixes: c0bceb97db9e ("tipc: add smart nagle feature")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6a54c217231f5c8339a90ac91d44b3d410b57ec1
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Tue May 26 16:38:38 2020 +0700

    tipc: add test for Nagle algorithm effectiveness
    
    [ Upstream commit 0a3e060f340dbe232ffa290c40f879b7f7db595b ]
    
    When streaming in Nagle mode, we try to bundle small messages from user
    as many as possible if there is one outstanding buffer, i.e. not ACK-ed
    by the receiving side, which helps boost up the overall throughput. So,
    the algorithm's effectiveness really depends on when Nagle ACK comes or
    what the specific network latency (RTT) is, compared to the user's
    message sending rate.
    
    In a bad case, the user's sending rate is low or the network latency is
    small, there will not be many bundles, so making a Nagle ACK or waiting
    for it is not meaningful.
    For example: a user sends its messages every 100ms and the RTT is 50ms,
    then for each messages, we require one Nagle ACK but then there is only
    one user message sent without any bundles.
    
    In a better case, even if we have a few bundles (e.g. the RTT = 300ms),
    but now the user sends messages in medium size, then there will not be
    any difference at all, that says 3 x 1000-byte data messages if bundled
    will still result in 3 bundles with MTU = 1500.
    
    When Nagle is ineffective, the delay in user message sending is clearly
    wasted instead of sending directly.
    
    Besides, adding Nagle ACKs will consume some processor load on both the
    sending and receiving sides.
    
    This commit adds a test on the effectiveness of the Nagle algorithm for
    an individual connection in the network on which it actually runs.
    Particularly, upon receipt of a Nagle ACK we will compare the number of
    bundles in the backlog queue to the number of user messages which would
    be sent directly without Nagle. If the ratio is good (e.g. >= 2), Nagle
    mode will be kept for further message sending. Otherwise, we will leave
    Nagle and put a 'penalty' on the connection, so it will have to spend
    more 'one-way' messages before being able to re-enter Nagle.
    
    In addition, the 'ack-required' bit is only set when really needed that
    the number of Nagle ACKs will be reduced during Nagle mode.
    
    Testing with benchmark showed that with the patch, there was not much
    difference in throughput for small messages since the tool continuously
    sends messages without a break, so Nagle would still take in effect.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a34f829164f3c70d7f53bb532ddcc39fa890b722
Author: Hamish Martin <hamish.martin@alliedtelesis.co.nz>
Date:   Thu Jul 9 09:06:44 2020 +1200

    tipc: fix retransmission on unicast links
    
    A scenario has been observed where a 'bc_init' message for a link is not
    retransmitted if it fails to be received by the peer. This leads to the
    peer never establishing the link fully and it discarding all other data
    received on the link. In this scenario the message is lost in transit to
    the peer.
    
    The issue is traced to the 'nxt_retr' field of the skb not being
    initialised for links that aren't a bc_sndlink. This leads to the
    comparison in tipc_link_advance_transmq() that gates whether to attempt
    retransmission of a message performing in an undesirable way.
    Depending on the relative value of 'jiffies', this comparison:
        time_before(jiffies, TIPC_SKB_CB(skb)->nxt_retr)
    may return true or false given that 'nxt_retr' remains at the
    uninitialised value of 0 for non bc_sndlinks.
    
    This is most noticeable shortly after boot when jiffies is initialised
    to a high value (to flush out rollover bugs) and we compare a jiffies of,
    say, 4294940189 to zero. In that case time_before returns 'true' leading
    to the skb not being retransmitted.
    
    The fix is to ensure that all skbs have a valid 'nxt_retr' time set for
    them and this is achieved by refactoring the setting of this value into
    a central function.
    With this fix, transmission losses of 'bc_init' messages do not stall
    the link establishment forever because the 'bc_init' message is
    retransmitted and the link eventually establishes correctly.
    
    Fixes: 382f598fb66b ("tipc: reduce duplicate packets for unicast traffic")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hamish Martin <hamish.martin@alliedtelesis.co.nz>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit bf64ff4c2aac65d680dc639a511c781cf6b6ec08
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Sat Jun 27 00:12:24 2020 -0700

    genetlink: get rid of family->attrbuf
    
    genl_family_rcv_msg_attrs_parse() reuses the global family->attrbuf
    when family->parallel_ops is false. However, family->attrbuf is not
    protected by any lock on the genl_family_rcv_msg_doit() code path.
    
    This leads to several different consequences, one of them is UAF,
    like the following:
    
    genl_family_rcv_msg_doit():             genl_start():
                                              genl_family_rcv_msg_attrs_parse()
                                                attrbuf = family->attrbuf
                                                __nlmsg_parse(attrbuf);
      genl_family_rcv_msg_attrs_parse()
        attrbuf = family->attrbuf
        __nlmsg_parse(attrbuf);
                                              info->attrs = attrs;
                                              cb->data = info;
    
    netlink_unicast_kernel():
     consume_skb()
                                            genl_lock_dumpit():
                                              genl_dumpit_info(cb)->attrs
    
    Note family->attrbuf is an array of pointers to the skb data, once
    the skb is freed, any dereference of family->attrbuf will be a UAF.
    
    Maybe we could serialize the family->attrbuf with genl_mutex too, but
    that would make the locking more complicated. Instead, we can just get
    rid of family->attrbuf and always allocate attrbuf from heap like the
    family->parallel_ops==true code path. This may add some performance
    overhead but comparing with taking the global genl_mutex, it still
    looks better.
    
    Fixes: 75cdbdd08900 ("net: ieee802154: have genetlink code to parse the attrs during dumpit")
    Fixes: 057af7071344 ("net: tipc: have genetlink code to parse the attrs during dumpit")
    Reported-and-tested-by: syzbot+3039ddf6d7b13daf3787@syzkaller.appspotmail.com
    Reported-and-tested-by: syzbot+80cad1e3cb4c41cde6ff@syzkaller.appspotmail.com
    Reported-and-tested-by: syzbot+736bcbcb11b60d0c0792@syzkaller.appspotmail.com
    Reported-and-tested-by: syzbot+520f8704db2b68091d44@syzkaller.appspotmail.com
    Reported-and-tested-by: syzbot+c96e4dfb32f8987fdeed@syzkaller.appspotmail.com
    Cc: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e034c6d23bc43266af1fa983212218f4aa38f995
Author: Gustavo A. R. Silva <gustavoars@kernel.org>
Date:   Thu Jun 18 08:35:00 2020 -0500

    tipc: Use struct_size() helper
    
    Make use of the struct_size() helper instead of an open-coded version
    in order to avoid any potential type mistakes.
    
    This code was detected with the help of Coccinelle and, audited and
    fixed manually.
    
    Signed-off-by: Gustavo A. R. Silva <gustavoars@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit cad2929dc4321b1f237767e9bd271b61a2eaa752
Author: Hoang Huu Le <hoang.h.le@dektech.com.au>
Date:   Wed Jun 17 13:56:05 2020 +0700

    tipc: update a binding service via broadcast
    
    Currently, updating binding table (add service binding to
    name table/withdraw a service binding) is being sent over replicast.
    However, if we are scaling up clusters to > 100 nodes/containers this
    method is less affection because of looping through nodes in a cluster one
    by one.
    
    It is worth to use broadcast to update a binding service. This way, the
    binding table can be updated on all peer nodes in one shot.
    
    Broadcast is used when all peer nodes, as indicated by a new capability
    flag TIPC_NAMED_BCAST, support reception of this message type.
    
    Four problems need to be considered when introducing this feature.
    1) When establishing a link to a new peer node we still update this by a
    unicast 'bulk' update. This may lead to race conditions, where a later
    broadcast publication/withdrawal bypass the 'bulk', resulting in
    disordered publications, or even that a withdrawal may arrive before the
    corresponding publication. We solve this by adding an 'is_last_bulk' bit
    in the last bulk messages so that it can be distinguished from all other
    messages. Only when this message has arrived do we open up for reception
    of broadcast publications/withdrawals.
    
    2) When a first legacy node is added to the cluster all distribution
    will switch over to use the legacy 'replicast' method, while the
    opposite happens when the last legacy node leaves the cluster. This
    entails another risk of message disordering that has to be handled. We
    solve this by adding a sequence number to the broadcast/replicast
    messages, so that disordering can be discovered and corrected. Note
    however that we don't need to consider potential message loss or
    duplication at this protocol level.
    
    3) Bulk messages don't contain any sequence numbers, and will always
    arrive in order. Hence we must exempt those from the sequence number
    control and deliver them unconditionally. We solve this by adding a new
    'is_bulk' bit in those messages so that they can be recognized.
    
    4) Legacy messages, which don't contain any new bits or sequence
    numbers, but neither can arrive out of order, also need to be exempt
    from the initial synchronization and sequence number check, and
    delivered unconditionally. Therefore, we add another 'is_not_legacy' bit
    to all new messages so that those can be distinguished from legacy
    messages and the latter delivered directly.
    
    v1->v2:
     - fix warning issue reported by kbuild test robot <lkp@intel.com>
     - add santiy check to drop the publication message with a sequence
    number that is lower than the agreed synch point
    
    Signed-off-by: kernel test robot <lkp@intel.com>
    Signed-off-by: Hoang Huu Le <hoang.h.le@dektech.com.au>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 379efd7d060a5222fd437446b788a51d68cc86e2
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Wed Jun 3 12:06:01 2020 +0700

    tipc: fix NULL pointer dereference in streaming
    
    [ Upstream commit 5e9eeccc58f3e6bcc99b929670665d2ce047e9c9 ]
    
    syzbot found the following crash:
    
    general protection fault, probably for non-canonical address 0xdffffc0000000019: 0000 [#1] PREEMPT SMP KASAN
    KASAN: null-ptr-deref in range [0x00000000000000c8-0x00000000000000cf]
    CPU: 1 PID: 7060 Comm: syz-executor394 Not tainted 5.7.0-rc6-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:__tipc_sendstream+0xbde/0x11f0 net/tipc/socket.c:1591
    Code: 00 00 00 00 48 39 5c 24 28 48 0f 44 d8 e8 fa 3e db f9 48 b8 00 00 00 00 00 fc ff df 48 8d bb c8 00 00 00 48 89 fa 48 c1 ea 03 <80> 3c 02 00 0f 85 e2 04 00 00 48 8b 9b c8 00 00 00 48 b8 00 00 00
    RSP: 0018:ffffc90003ef7818 EFLAGS: 00010202
    RAX: dffffc0000000000 RBX: 0000000000000000 RCX: ffffffff8797fd9d
    RDX: 0000000000000019 RSI: ffffffff8797fde6 RDI: 00000000000000c8
    RBP: ffff888099848040 R08: ffff88809a5f6440 R09: fffffbfff1860b4c
    R10: ffffffff8c305a5f R11: fffffbfff1860b4b R12: ffff88809984857e
    R13: 0000000000000000 R14: ffff888086aa4000 R15: 0000000000000000
    FS:  00000000009b4880(0000) GS:ffff8880ae700000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000000020000140 CR3: 00000000a7fdf000 CR4: 00000000001406e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     tipc_sendstream+0x4c/0x70 net/tipc/socket.c:1533
     sock_sendmsg_nosec net/socket.c:652 [inline]
     sock_sendmsg+0xcf/0x120 net/socket.c:672
     ____sys_sendmsg+0x32f/0x810 net/socket.c:2352
     ___sys_sendmsg+0x100/0x170 net/socket.c:2406
     __sys_sendmmsg+0x195/0x480 net/socket.c:2496
     __do_sys_sendmmsg net/socket.c:2525 [inline]
     __se_sys_sendmmsg net/socket.c:2522 [inline]
     __x64_sys_sendmmsg+0x99/0x100 net/socket.c:2522
     do_syscall_64+0xf6/0x7d0 arch/x86/entry/common.c:295
     entry_SYSCALL_64_after_hwframe+0x49/0xb3
    RIP: 0033:0x440199
    ...
    
    This bug was bisected to commit 0a3e060f340d ("tipc: add test for Nagle
    algorithm effectiveness"). However, it is not the case, the trouble was
    from the base in the case of zero data length message sending, we would
    unexpectedly make an empty 'txq' queue after the 'tipc_msg_append()' in
    Nagle mode.
    
    A similar crash can be generated even without the bisected patch but at
    the link layer when it accesses the empty queue.
    
    We solve the issues by building at least one buffer to go with socket's
    header and an optional data section that may be empty like what we had
    with the 'tipc_msg_build()'.
    
    Note: the previous commit 4c21daae3dbc ("tipc: Fix NULL pointer
    dereference in __tipc_sendstream()") is obsoleted by this one since the
    'txq' will be never empty and the check of 'skb != NULL' is unnecessary
    but it is safe anyway.
    
    Reported-by: syzbot+8eac6d030e7807c21d32@syzkaller.appspotmail.com
    Fixes: c0bceb97db9e ("tipc: add smart nagle feature")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e372b9d87587e5a3e2529965dae725c84fa58a49
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Wed Jun 3 12:06:01 2020 +0700

    tipc: fix NULL pointer dereference in streaming
    
    [ Upstream commit 5e9eeccc58f3e6bcc99b929670665d2ce047e9c9 ]
    
    syzbot found the following crash:
    
    general protection fault, probably for non-canonical address 0xdffffc0000000019: 0000 [#1] PREEMPT SMP KASAN
    KASAN: null-ptr-deref in range [0x00000000000000c8-0x00000000000000cf]
    CPU: 1 PID: 7060 Comm: syz-executor394 Not tainted 5.7.0-rc6-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:__tipc_sendstream+0xbde/0x11f0 net/tipc/socket.c:1591
    Code: 00 00 00 00 48 39 5c 24 28 48 0f 44 d8 e8 fa 3e db f9 48 b8 00 00 00 00 00 fc ff df 48 8d bb c8 00 00 00 48 89 fa 48 c1 ea 03 <80> 3c 02 00 0f 85 e2 04 00 00 48 8b 9b c8 00 00 00 48 b8 00 00 00
    RSP: 0018:ffffc90003ef7818 EFLAGS: 00010202
    RAX: dffffc0000000000 RBX: 0000000000000000 RCX: ffffffff8797fd9d
    RDX: 0000000000000019 RSI: ffffffff8797fde6 RDI: 00000000000000c8
    RBP: ffff888099848040 R08: ffff88809a5f6440 R09: fffffbfff1860b4c
    R10: ffffffff8c305a5f R11: fffffbfff1860b4b R12: ffff88809984857e
    R13: 0000000000000000 R14: ffff888086aa4000 R15: 0000000000000000
    FS:  00000000009b4880(0000) GS:ffff8880ae700000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000000020000140 CR3: 00000000a7fdf000 CR4: 00000000001406e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     tipc_sendstream+0x4c/0x70 net/tipc/socket.c:1533
     sock_sendmsg_nosec net/socket.c:652 [inline]
     sock_sendmsg+0xcf/0x120 net/socket.c:672
     ____sys_sendmsg+0x32f/0x810 net/socket.c:2352
     ___sys_sendmsg+0x100/0x170 net/socket.c:2406
     __sys_sendmmsg+0x195/0x480 net/socket.c:2496
     __do_sys_sendmmsg net/socket.c:2525 [inline]
     __se_sys_sendmmsg net/socket.c:2522 [inline]
     __x64_sys_sendmmsg+0x99/0x100 net/socket.c:2522
     do_syscall_64+0xf6/0x7d0 arch/x86/entry/common.c:295
     entry_SYSCALL_64_after_hwframe+0x49/0xb3
    RIP: 0033:0x440199
    ...
    
    This bug was bisected to commit 0a3e060f340d ("tipc: add test for Nagle
    algorithm effectiveness"). However, it is not the case, the trouble was
    from the base in the case of zero data length message sending, we would
    unexpectedly make an empty 'txq' queue after the 'tipc_msg_append()' in
    Nagle mode.
    
    A similar crash can be generated even without the bisected patch but at
    the link layer when it accesses the empty queue.
    
    We solve the issues by building at least one buffer to go with socket's
    header and an optional data section that may be empty like what we had
    with the 'tipc_msg_build()'.
    
    Note: the previous commit 4c21daae3dbc ("tipc: Fix NULL pointer
    dereference in __tipc_sendstream()") is obsoleted by this one since the
    'txq' will be never empty and the check of 'skb != NULL' is unnecessary
    but it is safe anyway.
    
    Reported-by: syzbot+8eac6d030e7807c21d32@syzkaller.appspotmail.com
    Fixes: c0bceb97db9e ("tipc: add smart nagle feature")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 96144c58abe7ff767e754b5b80995f7b8846d49b
Merge: f82e7b57b5fc bc139119a170
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Jun 13 16:27:13 2020 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from David Miller:
    
     1) Fix cfg80211 deadlock, from Johannes Berg.
    
     2) RXRPC fails to send norigications, from David Howells.
    
     3) MPTCP RM_ADDR parsing has an off by one pointer error, fix from
        Geliang Tang.
    
     4) Fix crash when using MSG_PEEK with sockmap, from Anny Hu.
    
     5) The ucc_geth driver needs __netdev_watchdog_up exported, from
        Valentin Longchamp.
    
     6) Fix hashtable memory leak in dccp, from Wang Hai.
    
     7) Fix how nexthops are marked as FDB nexthops, from David Ahern.
    
     8) Fix mptcp races between shutdown and recvmsg, from Paolo Abeni.
    
     9) Fix crashes in tipc_disc_rcv(), from Tuong Lien.
    
    10) Fix link speed reporting in iavf driver, from Brett Creeley.
    
    11) When a channel is used for XSK and then reused again later for XSK,
        we forget to clear out the relevant data structures in mlx5 which
        causes all kinds of problems. Fix from Maxim Mikityanskiy.
    
    12) Fix memory leak in genetlink, from Cong Wang.
    
    13) Disallow sockmap attachments to UDP sockets, it simply won't work.
        From Lorenz Bauer.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (83 commits)
      net: ethernet: ti: ale: fix allmulti for nu type ale
      net: ethernet: ti: am65-cpsw-nuss: fix ale parameters init
      net: atm: Remove the error message according to the atomic context
      bpf: Undo internal BPF_PROBE_MEM in BPF insns dump
      libbpf: Support pre-initializing .bss global variables
      tools/bpftool: Fix skeleton codegen
      bpf: Fix memlock accounting for sock_hash
      bpf: sockmap: Don't attach programs to UDP sockets
      bpf: tcp: Recv() should return 0 when the peer socket is closed
      ibmvnic: Flush existing work items before device removal
      genetlink: clean up family attributes allocations
      net: ipa: header pad field only valid for AP->modem endpoint
      net: ipa: program upper nibbles of sequencer type
      net: ipa: fix modem LAN RX endpoint id
      net: ipa: program metadata mask differently
      ionic: add pcie_print_link_status
      rxrpc: Fix race between incoming ACK parser and retransmitter
      net/mlx5: E-Switch, Fix some error pointer dereferences
      net/mlx5: Don't fail driver on failure to create debugfs
      net/mlx5e: CT: Fix ipv6 nat header rewrite actions
      ...

commit 9798278260e8f61d04415342544a8f701bc5ace7
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Thu Jun 11 17:08:08 2020 +0700

    tipc: fix NULL pointer dereference in tipc_disc_rcv()
    
    When a bearer is enabled, we create a 'tipc_discoverer' object to store
    the bearer related data along with a timer and a preformatted discovery
    message buffer for later probing... However, this is only carried after
    the bearer was set 'up', that left a race condition resulting in kernel
    panic.
    
    It occurs when a discovery message from a peer node is received and
    processed in bottom half (since the bearer is 'up' already) just before
    the discoverer object is created but is now accessed in order to update
    the preformatted buffer (with a new trial address, ...) so leads to the
    NULL pointer dereference.
    
    We solve the problem by simply moving the bearer 'up' setting to later,
    so make sure everything is ready prior to any message receiving.
    
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c9aa81faf19115fc2e732e7f210b37bb316987ff
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Thu Jun 11 17:07:35 2020 +0700

    tipc: fix kernel WARNING in tipc_msg_append()
    
    syzbot found the following issue:
    
    WARNING: CPU: 0 PID: 6808 at include/linux/thread_info.h:150 check_copy_size include/linux/thread_info.h:150 [inline]
    WARNING: CPU: 0 PID: 6808 at include/linux/thread_info.h:150 copy_from_iter include/linux/uio.h:144 [inline]
    WARNING: CPU: 0 PID: 6808 at include/linux/thread_info.h:150 tipc_msg_append+0x49a/0x5e0 net/tipc/msg.c:242
    Kernel panic - not syncing: panic_on_warn set ...
    
    This happens after commit 5e9eeccc58f3 ("tipc: fix NULL pointer
    dereference in streaming") that tried to build at least one buffer even
    when the message data length is zero... However, it now exposes another
    bug that the 'mss' can be zero and the 'cpy' will be negative, thus the
    above kernel WARNING will appear!
    The zero value of 'mss' is never expected because it means Nagle is not
    enabled for the socket (actually the socket type was 'SOCK_SEQPACKET'),
    so the function 'tipc_msg_append()' must not be called at all. But that
    was in this particular case since the message data length was zero, and
    the 'send <= maxnagle' check became true.
    
    We resolve the issue by explicitly checking if Nagle is enabled for the
    socket, i.e. 'maxnagle != 0' before calling the 'tipc_msg_append()'. We
    also reinforce the function to against such a negative values if any.
    
    Reported-by: syzbot+75139a7d2605236b0b7f@syzkaller.appspotmail.com
    Fixes: c0bceb97db9e ("tipc: add smart nagle feature")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5e9eeccc58f3e6bcc99b929670665d2ce047e9c9
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Wed Jun 3 12:06:01 2020 +0700

    tipc: fix NULL pointer dereference in streaming
    
    syzbot found the following crash:
    
    general protection fault, probably for non-canonical address 0xdffffc0000000019: 0000 [#1] PREEMPT SMP KASAN
    KASAN: null-ptr-deref in range [0x00000000000000c8-0x00000000000000cf]
    CPU: 1 PID: 7060 Comm: syz-executor394 Not tainted 5.7.0-rc6-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    RIP: 0010:__tipc_sendstream+0xbde/0x11f0 net/tipc/socket.c:1591
    Code: 00 00 00 00 48 39 5c 24 28 48 0f 44 d8 e8 fa 3e db f9 48 b8 00 00 00 00 00 fc ff df 48 8d bb c8 00 00 00 48 89 fa 48 c1 ea 03 <80> 3c 02 00 0f 85 e2 04 00 00 48 8b 9b c8 00 00 00 48 b8 00 00 00
    RSP: 0018:ffffc90003ef7818 EFLAGS: 00010202
    RAX: dffffc0000000000 RBX: 0000000000000000 RCX: ffffffff8797fd9d
    RDX: 0000000000000019 RSI: ffffffff8797fde6 RDI: 00000000000000c8
    RBP: ffff888099848040 R08: ffff88809a5f6440 R09: fffffbfff1860b4c
    R10: ffffffff8c305a5f R11: fffffbfff1860b4b R12: ffff88809984857e
    R13: 0000000000000000 R14: ffff888086aa4000 R15: 0000000000000000
    FS:  00000000009b4880(0000) GS:ffff8880ae700000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000000020000140 CR3: 00000000a7fdf000 CR4: 00000000001406e0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     tipc_sendstream+0x4c/0x70 net/tipc/socket.c:1533
     sock_sendmsg_nosec net/socket.c:652 [inline]
     sock_sendmsg+0xcf/0x120 net/socket.c:672
     ____sys_sendmsg+0x32f/0x810 net/socket.c:2352
     ___sys_sendmsg+0x100/0x170 net/socket.c:2406
     __sys_sendmmsg+0x195/0x480 net/socket.c:2496
     __do_sys_sendmmsg net/socket.c:2525 [inline]
     __se_sys_sendmmsg net/socket.c:2522 [inline]
     __x64_sys_sendmmsg+0x99/0x100 net/socket.c:2522
     do_syscall_64+0xf6/0x7d0 arch/x86/entry/common.c:295
     entry_SYSCALL_64_after_hwframe+0x49/0xb3
    RIP: 0033:0x440199
    ...
    
    This bug was bisected to commit 0a3e060f340d ("tipc: add test for Nagle
    algorithm effectiveness"). However, it is not the case, the trouble was
    from the base in the case of zero data length message sending, we would
    unexpectedly make an empty 'txq' queue after the 'tipc_msg_append()' in
    Nagle mode.
    
    A similar crash can be generated even without the bisected patch but at
    the link layer when it accesses the empty queue.
    
    We solve the issues by building at least one buffer to go with socket's
    header and an optional data section that may be empty like what we had
    with the 'tipc_msg_build()'.
    
    Note: the previous commit 4c21daae3dbc ("tipc: Fix NULL pointer
    dereference in __tipc_sendstream()") is obsoleted by this one since the
    'txq' will be never empty and the check of 'skb != NULL' is unnecessary
    but it is safe anyway.
    
    Reported-by: syzbot+8eac6d030e7807c21d32@syzkaller.appspotmail.com
    Fixes: c0bceb97db9e ("tipc: add smart nagle feature")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit cb8e59cc87201af93dfbb6c3dccc8fcad72a09c2
Merge: 2e63f6ce7ed2 065fcfd49763
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Jun 3 16:27:18 2020 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net-next
    
    Pull networking updates from David Miller:
    
     1) Allow setting bluetooth L2CAP modes via socket option, from Luiz
        Augusto von Dentz.
    
     2) Add GSO partial support to igc, from Sasha Neftin.
    
     3) Several cleanups and improvements to r8169 from Heiner Kallweit.
    
     4) Add IF_OPER_TESTING link state and use it when ethtool triggers a
        device self-test. From Andrew Lunn.
    
     5) Start moving away from custom driver versions, use the globally
        defined kernel version instead, from Leon Romanovsky.
    
     6) Support GRO vis gro_cells in DSA layer, from Alexander Lobakin.
    
     7) Allow hard IRQ deferral during NAPI, from Eric Dumazet.
    
     8) Add sriov and vf support to hinic, from Luo bin.
    
     9) Support Media Redundancy Protocol (MRP) in the bridging code, from
        Horatiu Vultur.
    
    10) Support netmap in the nft_nat code, from Pablo Neira Ayuso.
    
    11) Allow UDPv6 encapsulation of ESP in the ipsec code, from Sabrina
        Dubroca. Also add ipv6 support for espintcp.
    
    12) Lots of ReST conversions of the networking documentation, from Mauro
        Carvalho Chehab.
    
    13) Support configuration of ethtool rxnfc flows in bcmgenet driver,
        from Doug Berger.
    
    14) Allow to dump cgroup id and filter by it in inet_diag code, from
        Dmitry Yakunin.
    
    15) Add infrastructure to export netlink attribute policies to
        userspace, from Johannes Berg.
    
    16) Several optimizations to sch_fq scheduler, from Eric Dumazet.
    
    17) Fallback to the default qdisc if qdisc init fails because otherwise
        a packet scheduler init failure will make a device inoperative. From
        Jesper Dangaard Brouer.
    
    18) Several RISCV bpf jit optimizations, from Luke Nelson.
    
    19) Correct the return type of the ->ndo_start_xmit() method in several
        drivers, it's netdev_tx_t but many drivers were using
        'int'. From Yunjian Wang.
    
    20) Add an ethtool interface for PHY master/slave config, from Oleksij
        Rempel.
    
    21) Add BPF iterators, from Yonghang Song.
    
    22) Add cable test infrastructure, including ethool interfaces, from
        Andrew Lunn. Marvell PHY driver is the first to support this
        facility.
    
    23) Remove zero-length arrays all over, from Gustavo A. R. Silva.
    
    24) Calculate and maintain an explicit frame size in XDP, from Jesper
        Dangaard Brouer.
    
    25) Add CAP_BPF, from Alexei Starovoitov.
    
    26) Support terse dumps in the packet scheduler, from Vlad Buslov.
    
    27) Support XDP_TX bulking in dpaa2 driver, from Ioana Ciornei.
    
    28) Add devm_register_netdev(), from Bartosz Golaszewski.
    
    29) Minimize qdisc resets, from Cong Wang.
    
    30) Get rid of kernel_getsockopt and kernel_setsockopt in order to
        eliminate set_fs/get_fs calls. From Christoph Hellwig.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net-next: (2517 commits)
      selftests: net: ip_defrag: ignore EPERM
      net_failover: fixed rollback in net_failover_open()
      Revert "tipc: Fix potential tipc_aead refcnt leak in tipc_crypto_rcv"
      Revert "tipc: Fix potential tipc_node refcnt leak in tipc_rcv"
      vmxnet3: allow rx flow hash ops only when rss is enabled
      hinic: add set_channels ethtool_ops support
      selftests/bpf: Add a default $(CXX) value
      tools/bpf: Don't use $(COMPILE.c)
      bpf, selftests: Use bpf_probe_read_kernel
      s390/bpf: Use bcr 0,%0 as tail call nop filler
      s390/bpf: Maintain 8-byte stack alignment
      selftests/bpf: Fix verifier test
      selftests/bpf: Fix sample_cnt shared between two threads
      bpf, selftests: Adapt cls_redirect to call csum_level helper
      bpf: Add csum_level helper for fixing up csum levels
      bpf: Fix up bpf_skb_adjust_room helper's skb csum setting
      sfc: add missing annotation for efx_ef10_try_update_nic_stats_vf()
      crypto/chtls: IPv6 support for inline TLS
      Crypto/chcr: Fixes a coccinile check error
      Crypto/chcr: Fixes compilations warnings
      ...

commit 740b06ed3821074030c6fb992262c140511b15ff
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu May 21 11:29:58 2020 -0700

    tipc: block BH before using dst_cache
    
    [ Upstream commit 1378817486d6860f6a927f573491afe65287abf1 ]
    
    dst_cache_get() documents it must be used with BH disabled.
    
    sysbot reported :
    
    BUG: using smp_processor_id() in preemptible [00000000] code: /21697
    caller is dst_cache_get+0x3a/0xb0 net/core/dst_cache.c:68
    CPU: 0 PID: 21697 Comm:  Not tainted 5.7.0-rc6-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x188/0x20d lib/dump_stack.c:118
     check_preemption_disabled lib/smp_processor_id.c:47 [inline]
     debug_smp_processor_id.cold+0x88/0x9b lib/smp_processor_id.c:57
     dst_cache_get+0x3a/0xb0 net/core/dst_cache.c:68
     tipc_udp_xmit.isra.0+0xb9/0xad0 net/tipc/udp_media.c:164
     tipc_udp_send_msg+0x3e6/0x490 net/tipc/udp_media.c:244
     tipc_bearer_xmit_skb+0x1de/0x3f0 net/tipc/bearer.c:526
     tipc_enable_bearer+0xb2f/0xd60 net/tipc/bearer.c:331
     __tipc_nl_bearer_enable+0x2bf/0x390 net/tipc/bearer.c:995
     tipc_nl_bearer_enable+0x1e/0x30 net/tipc/bearer.c:1003
     genl_family_rcv_msg_doit net/netlink/genetlink.c:673 [inline]
     genl_family_rcv_msg net/netlink/genetlink.c:718 [inline]
     genl_rcv_msg+0x627/0xdf0 net/netlink/genetlink.c:735
     netlink_rcv_skb+0x15a/0x410 net/netlink/af_netlink.c:2469
     genl_rcv+0x24/0x40 net/netlink/genetlink.c:746
     netlink_unicast_kernel net/netlink/af_netlink.c:1303 [inline]
     netlink_unicast+0x537/0x740 net/netlink/af_netlink.c:1329
     netlink_sendmsg+0x882/0xe10 net/netlink/af_netlink.c:1918
     sock_sendmsg_nosec net/socket.c:652 [inline]
     sock_sendmsg+0xcf/0x120 net/socket.c:672
     ____sys_sendmsg+0x6bf/0x7e0 net/socket.c:2362
     ___sys_sendmsg+0x100/0x170 net/socket.c:2416
     __sys_sendmsg+0xec/0x1b0 net/socket.c:2449
     do_syscall_64+0xf6/0x7d0 arch/x86/entry/common.c:295
     entry_SYSCALL_64_after_hwframe+0x49/0xb3
    RIP: 0033:0x45ca29
    
    Fixes: e9c1a793210f ("tipc: add dst_cache support for udp media")
    Cc: Xin Long <lucien.xin@gmail.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c9df6ced1f95970254d2e912dc7c678c2d9de02
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu May 21 11:29:58 2020 -0700

    tipc: block BH before using dst_cache
    
    [ Upstream commit 1378817486d6860f6a927f573491afe65287abf1 ]
    
    dst_cache_get() documents it must be used with BH disabled.
    
    sysbot reported :
    
    BUG: using smp_processor_id() in preemptible [00000000] code: /21697
    caller is dst_cache_get+0x3a/0xb0 net/core/dst_cache.c:68
    CPU: 0 PID: 21697 Comm:  Not tainted 5.7.0-rc6-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x188/0x20d lib/dump_stack.c:118
     check_preemption_disabled lib/smp_processor_id.c:47 [inline]
     debug_smp_processor_id.cold+0x88/0x9b lib/smp_processor_id.c:57
     dst_cache_get+0x3a/0xb0 net/core/dst_cache.c:68
     tipc_udp_xmit.isra.0+0xb9/0xad0 net/tipc/udp_media.c:164
     tipc_udp_send_msg+0x3e6/0x490 net/tipc/udp_media.c:244
     tipc_bearer_xmit_skb+0x1de/0x3f0 net/tipc/bearer.c:526
     tipc_enable_bearer+0xb2f/0xd60 net/tipc/bearer.c:331
     __tipc_nl_bearer_enable+0x2bf/0x390 net/tipc/bearer.c:995
     tipc_nl_bearer_enable+0x1e/0x30 net/tipc/bearer.c:1003
     genl_family_rcv_msg_doit net/netlink/genetlink.c:673 [inline]
     genl_family_rcv_msg net/netlink/genetlink.c:718 [inline]
     genl_rcv_msg+0x627/0xdf0 net/netlink/genetlink.c:735
     netlink_rcv_skb+0x15a/0x410 net/netlink/af_netlink.c:2469
     genl_rcv+0x24/0x40 net/netlink/genetlink.c:746
     netlink_unicast_kernel net/netlink/af_netlink.c:1303 [inline]
     netlink_unicast+0x537/0x740 net/netlink/af_netlink.c:1329
     netlink_sendmsg+0x882/0xe10 net/netlink/af_netlink.c:1918
     sock_sendmsg_nosec net/socket.c:652 [inline]
     sock_sendmsg+0xcf/0x120 net/socket.c:672
     ____sys_sendmsg+0x6bf/0x7e0 net/socket.c:2362
     ___sys_sendmsg+0x100/0x170 net/socket.c:2416
     __sys_sendmsg+0xec/0x1b0 net/socket.c:2449
     do_syscall_64+0xf6/0x7d0 arch/x86/entry/common.c:295
     entry_SYSCALL_64_after_hwframe+0x49/0xb3
    RIP: 0033:0x45ca29
    
    Fixes: e9c1a793210f ("tipc: add dst_cache support for udp media")
    Cc: Xin Long <lucien.xin@gmail.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 241d46dce9f4ee64e742e12568034b9ba4762961
Merge: 11e877b2a8cf a275727b1899
Author: David S. Miller <davem@davemloft.net>
Date:   Tue Jun 2 15:13:47 2020 -0700

    Merge branch 'tipc-revert-two-patches'
    
    Tuong Lien says:
    
    ====================
    tipc: revert two patches
    
    We revert two patches:
    
    tipc: Fix potential tipc_node refcnt leak in tipc_rcv
    tipc: Fix potential tipc_aead refcnt leak in tipc_crypto_rcv
    
    which prevented TIPC encryption from working properly and caused kernel
    panic.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a275727b1899d14d33d6c8c70f303b73f01cdbc6
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Tue Jun 2 11:46:41 2020 +0700

    Revert "tipc: Fix potential tipc_aead refcnt leak in tipc_crypto_rcv"
    
    This reverts commit 441870ee4240cf67b5d3ab8e16216a9ff42eb5d6.
    
    Like the previous patch in this series, we revert the above commit that
    causes similar issues with the 'aead' object.
    
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 049fa17f7ae6b0971ad41b761479962facafea4b
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Tue Jun 2 11:46:40 2020 +0700

    Revert "tipc: Fix potential tipc_node refcnt leak in tipc_rcv"
    
    This reverts commit de058420767df21e2b6b0f3bb36d1616fb962032.
    
    There is no actual tipc_node refcnt leak as stated in the above commit.
    The refcnt is hold carefully for the case of an asynchronous decryption
    (i.e. -EINPROGRESS/-EBUSY and skb = NULL is returned), so that the node
    object cannot be freed in the meantime. The counter will be re-balanced
    when the operation's callback arrives with the decrypted buffer if any.
    In other cases, e.g. a synchronous crypto the counter will be decreased
    immediately when it is done.
    
    Now with that commit, a kernel panic will occur when there is no node
    found (i.e. n = NULL) in the 'tipc_rcv()' or a premature release of the
    node object.
    
    This commit solves the issues by reverting the said commit, but keeping
    one valid case that the 'skb_linearize()' is failed.
    
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Tested-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4c21daae3dbc9f8536cc18e6e53627821fa2c90c
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Thu May 28 22:34:07 2020 +0800

    tipc: Fix NULL pointer dereference in __tipc_sendstream()
    
    tipc_sendstream() may send zero length packet, then tipc_msg_append()
    do not alloc skb, skb_peek_tail() will get NULL, msg_set_ack_required
    will trigger NULL pointer dereference.
    
    Reported-by: syzbot+8eac6d030e7807c21d32@syzkaller.appspotmail.com
    Fixes: 0a3e060f340d ("tipc: add test for Nagle algorithm effectiveness")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8298a419a0064c6cd6c84a4a45de294a3eff0832
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Thu May 28 07:43:59 2020 +0000

    tipc: remove set but not used variable 'prev'
    
    Fixes gcc '-Wunused-but-set-variable' warning:
    
    net/tipc/msg.c: In function 'tipc_msg_append':
    net/tipc/msg.c:215:24: warning:
     variable 'prev' set but not used [-Wunused-but-set-variable]
    
    commit 0a3e060f340d ("tipc: add test for Nagle algorithm effectiveness")
    left behind this, remove it.
    
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 095ae612530c9465df6d372d688cb30c6abfc5f5
Author: Christoph Hellwig <hch@lst.de>
Date:   Thu May 28 07:12:36 2020 +0200

    tipc: call tsk_set_importance from tipc_topsrv_create_listener
    
    Avoid using kernel_setsockopt for the TIPC_IMPORTANCE option when we can
    just use the internal helper.  The only change needed is to pass a struct
    sock instead of tipc_sock, which is private to socket.c
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6a862a44fd0c963f1bcb2ac9299609e1d8c011c2
Merge: ff937b916eb6 0a3e060f340d
Author: David S. Miller <davem@davemloft.net>
Date:   Tue May 26 15:16:52 2020 -0700

    Merge branch 'tipc-add-some-improvements'
    
    Tuong Lien says:
    
    ====================
    tipc: add some improvements
    
    This series adds some improvements to TIPC.
    
    The first patch improves the TIPC broadcast's performance with the 'Gap
    ACK blocks' mechanism similar to unicast before, while the others give
    support on tracing & statistics for broadcast links, and an alternative
    to carry broadcast retransmissions via unicast which might be useful in
    some cases.
    
    Besides, the Nagle algorithm can now automatically 'adjust' itself
    depending on the specific network condition a stream connection runs by
    the last patch.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0a3e060f340dbe232ffa290c40f879b7f7db595b
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Tue May 26 16:38:38 2020 +0700

    tipc: add test for Nagle algorithm effectiveness
    
    When streaming in Nagle mode, we try to bundle small messages from user
    as many as possible if there is one outstanding buffer, i.e. not ACK-ed
    by the receiving side, which helps boost up the overall throughput. So,
    the algorithm's effectiveness really depends on when Nagle ACK comes or
    what the specific network latency (RTT) is, compared to the user's
    message sending rate.
    
    In a bad case, the user's sending rate is low or the network latency is
    small, there will not be many bundles, so making a Nagle ACK or waiting
    for it is not meaningful.
    For example: a user sends its messages every 100ms and the RTT is 50ms,
    then for each messages, we require one Nagle ACK but then there is only
    one user message sent without any bundles.
    
    In a better case, even if we have a few bundles (e.g. the RTT = 300ms),
    but now the user sends messages in medium size, then there will not be
    any difference at all, that says 3 x 1000-byte data messages if bundled
    will still result in 3 bundles with MTU = 1500.
    
    When Nagle is ineffective, the delay in user message sending is clearly
    wasted instead of sending directly.
    
    Besides, adding Nagle ACKs will consume some processor load on both the
    sending and receiving sides.
    
    This commit adds a test on the effectiveness of the Nagle algorithm for
    an individual connection in the network on which it actually runs.
    Particularly, upon receipt of a Nagle ACK we will compare the number of
    bundles in the backlog queue to the number of user messages which would
    be sent directly without Nagle. If the ratio is good (e.g. >= 2), Nagle
    mode will be kept for further message sending. Otherwise, we will leave
    Nagle and put a 'penalty' on the connection, so it will have to spend
    more 'one-way' messages before being able to re-enter Nagle.
    
    In addition, the 'ack-required' bit is only set when really needed that
    the number of Nagle ACKs will be reduced during Nagle mode.
    
    Testing with benchmark showed that with the patch, there was not much
    difference in throughput for small messages since the tool continuously
    sends messages without a break, so Nagle would still take in effect.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 03b6fefd9bb4844c75faeb10df8496794e2fd5da
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Tue May 26 16:38:37 2020 +0700

    tipc: add support for broadcast rcv stats dumping
    
    This commit enables dumping the statistics of a broadcast-receiver link
    like the traditional 'broadcast-link' one (which is for broadcast-
    sender). The link dumping can be triggered via netlink (e.g. the
    iproute2/tipc tool) by the link flag - 'TIPC_NLA_LINK_BROADCAST' as the
    indicator.
    
    The name of a broadcast-receiver link of a specific peer will be in the
    format: 'broadcast-link:<peer-id>'.
    
    For example:
    
    Link <broadcast-link:1001002>
      Window:50 packets
      RX packets:7841 fragments:2408/440 bundles:0/0
      TX packets:0 fragments:0/0 bundles:0/0
      RX naks:0 defs:124 dups:0
      TX naks:21 acks:0 retrans:0
      Congestion link:0  Send queue max:0 avg:0
    
    In addition, the broadcast-receiver link statistics can be reset in the
    usual way via netlink by specifying that link name in command.
    
    Note: the 'tipc_link_name_ext()' is removed because the link name can
    now be retrieved simply via the 'l->name'.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a91d55d162b86fb983b88f44296149752db7efbd
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Tue May 26 16:38:36 2020 +0700

    tipc: enable broadcast retrans via unicast
    
    In some environment, broadcast traffic is suppressed at high rate (i.e.
    a kind of bandwidth limit setting). When it is applied, TIPC broadcast
    can still run successfully. However, when it comes to a high load, some
    packets will be dropped first and TIPC tries to retransmit them but the
    packet retransmission is intentionally broadcast too, so making things
    worse and not helpful at all.
    
    This commit enables the broadcast retransmission via unicast which only
    retransmits packets to the specific peer that has really reported a gap
    i.e. not broadcasting to all nodes in the cluster, so will prevent from
    being suppressed, and also reduce some overheads on the other peers due
    to duplicates, finally improve the overall TIPC broadcast performance.
    
    Note: the functionality can be turned on/off via the sysctl file:
    
    echo 1 > /proc/sys/net/tipc/bc_retruni
    echo 0 > /proc/sys/net/tipc/bc_retruni
    
    Default is '0', i.e. the broadcast retransmission still works as usual.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c6ed7a5cc2d68c36287c09260dc211173e0447d7
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Tue May 26 16:38:35 2020 +0700

    tipc: add back link trace events
    
    In the previous commit ("tipc: add Gap ACK blocks support for broadcast
    link"), we have removed the following link trace events due to the code
    changes:
    
    - tipc_link_bc_ack
    - tipc_link_retrans
    
    This commit adds them back along with some minor changes to adapt to
    the new code.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d7626b5acff9227e2a65da636a53e09bdafdc0aa
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Tue May 26 16:38:34 2020 +0700

    tipc: introduce Gap ACK blocks for broadcast link
    
    As achieved through commit 9195948fbf34 ("tipc: improve TIPC throughput
    by Gap ACK blocks"), we apply the same mechanism for the broadcast link
    as well. The 'Gap ACK blocks' data field in a 'PROTOCOL/STATE_MSG' will
    consist of two parts built for both the broadcast and unicast types:
    
     31                       16 15                        0
    +-------------+-------------+-------------+-------------+
    |  bgack_cnt  |  ugack_cnt  |            len            |
    +-------------+-------------+-------------+-------------+  -
    |            gap            |            ack            |   |
    +-------------+-------------+-------------+-------------+    > bc gacks
    :                           :                           :   |
    +-------------+-------------+-------------+-------------+  -
    |            gap            |            ack            |   |
    +-------------+-------------+-------------+-------------+    > uc gacks
    :                           :                           :   |
    +-------------+-------------+-------------+-------------+  -
    
    which is "automatically" backward-compatible.
    
    We also increase the max number of Gap ACK blocks to 128, allowing upto
    64 blocks per type (total buffer size = 516 bytes).
    
    Besides, the 'tipc_link_advance_transmq()' function is refactored which
    is applicable for both the unicast and broadcast cases now, so some old
    functions can be removed and the code is optimized.
    
    With the patch, TIPC broadcast is more robust regardless of packet loss
    or disorder, latency, ... in the underlying network. Its performance is
    boost up significantly.
    For example, experiment with a 5% packet loss rate results:
    
    $ time tipc-pipe --mc --rdm --data_size 123 --data_num 1500000
    real    0m 42.46s
    user    0m 1.16s
    sys     0m 17.67s
    
    Without the patch:
    
    $ time tipc-pipe --mc --rdm --data_size 123 --data_num 1500000
    real    8m 27.94s
    user    0m 0.55s
    sys     0m 2.38s
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit caffb99b6929f41a69edbb5aef3a359bf45f3315
Merge: 0cfc8a8d70dc 539d39ad0c61
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat May 23 17:16:18 2020 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from David Miller:
    
     1) Fix RCU warnings in ipv6 multicast router code, from Madhuparna
        Bhowmik.
    
     2) Nexthop attributes aren't being checked properly because of
        mis-initialized iterator, from David Ahern.
    
     3) Revert iop_idents_reserve() change as it caused performance
        regressions and was just working around what is really a UBSAN bug
        in the compiler. From Yuqi Jin.
    
     4) Read MAC address properly from ROM in bmac driver (double iteration
        proceeds past end of address array), from Jeremy Kerr.
    
     5) Add Microsoft Surface device IDs to r8152, from Marc Payne.
    
     6) Prevent reference to freed SKB in __netif_receive_skb_core(), from
        Boris Sukholitko.
    
     7) Fix ACK discard behavior in rxrpc, from David Howells.
    
     8) Preserve flow hash across packet scrubbing in wireguard, from Jason
        A. Donenfeld.
    
     9) Cap option length properly for SO_BINDTODEVICE in AX25, from Eric
        Dumazet.
    
    10) Fix encryption error checking in kTLS code, from Vadim Fedorenko.
    
    11) Missing BPF prog ref release in flow dissector, from Jakub Sitnicki.
    
    12) dst_cache must be used with BH disabled in tipc, from Eric Dumazet.
    
    13) Fix use after free in mlxsw driver, from Jiri Pirko.
    
    14) Order kTLS key destruction properly in mlx5 driver, from Tariq
        Toukan.
    
    15) Check devm_platform_ioremap_resource() return value properly in
        several drivers, from Tiezhu Yang.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (71 commits)
      net: smsc911x: Fix runtime PM imbalance on error
      net/mlx4_core: fix a memory leak bug.
      net: ethernet: ti: cpsw: fix ASSERT_RTNL() warning during suspend
      net: phy: mscc: fix initialization of the MACsec protocol mode
      net: stmmac: don't attach interface until resume finishes
      net: Fix return value about devm_platform_ioremap_resource()
      net/mlx5: Fix error flow in case of function_setup failure
      net/mlx5e: CT: Correctly get flow rule
      net/mlx5e: Update netdev txq on completions during closure
      net/mlx5: Annotate mutex destroy for root ns
      net/mlx5: Don't maintain a case of del_sw_func being null
      net/mlx5: Fix cleaning unmanaged flow tables
      net/mlx5: Fix memory leak in mlx5_events_init
      net/mlx5e: Fix inner tirs handling
      net/mlx5e: kTLS, Destroy key object after destroying the TIS
      net/mlx5e: Fix allowed tc redirect merged eswitch offload cases
      net/mlx5: Avoid processing commands before cmdif is ready
      net/mlx5: Fix a race when moving command interface to events mode
      net/mlx5: Add command entry handling completion
      rxrpc: Fix a memory leak in rxkad_verify_response()
      ...

commit 1378817486d6860f6a927f573491afe65287abf1
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu May 21 11:29:58 2020 -0700

    tipc: block BH before using dst_cache
    
    dst_cache_get() documents it must be used with BH disabled.
    
    sysbot reported :
    
    BUG: using smp_processor_id() in preemptible [00000000] code: /21697
    caller is dst_cache_get+0x3a/0xb0 net/core/dst_cache.c:68
    CPU: 0 PID: 21697 Comm:  Not tainted 5.7.0-rc6-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x188/0x20d lib/dump_stack.c:118
     check_preemption_disabled lib/smp_processor_id.c:47 [inline]
     debug_smp_processor_id.cold+0x88/0x9b lib/smp_processor_id.c:57
     dst_cache_get+0x3a/0xb0 net/core/dst_cache.c:68
     tipc_udp_xmit.isra.0+0xb9/0xad0 net/tipc/udp_media.c:164
     tipc_udp_send_msg+0x3e6/0x490 net/tipc/udp_media.c:244
     tipc_bearer_xmit_skb+0x1de/0x3f0 net/tipc/bearer.c:526
     tipc_enable_bearer+0xb2f/0xd60 net/tipc/bearer.c:331
     __tipc_nl_bearer_enable+0x2bf/0x390 net/tipc/bearer.c:995
     tipc_nl_bearer_enable+0x1e/0x30 net/tipc/bearer.c:1003
     genl_family_rcv_msg_doit net/netlink/genetlink.c:673 [inline]
     genl_family_rcv_msg net/netlink/genetlink.c:718 [inline]
     genl_rcv_msg+0x627/0xdf0 net/netlink/genetlink.c:735
     netlink_rcv_skb+0x15a/0x410 net/netlink/af_netlink.c:2469
     genl_rcv+0x24/0x40 net/netlink/genetlink.c:746
     netlink_unicast_kernel net/netlink/af_netlink.c:1303 [inline]
     netlink_unicast+0x537/0x740 net/netlink/af_netlink.c:1329
     netlink_sendmsg+0x882/0xe10 net/netlink/af_netlink.c:1918
     sock_sendmsg_nosec net/socket.c:652 [inline]
     sock_sendmsg+0xcf/0x120 net/socket.c:672
     ____sys_sendmsg+0x6bf/0x7e0 net/socket.c:2362
     ___sys_sendmsg+0x100/0x170 net/socket.c:2416
     __sys_sendmsg+0xec/0x1b0 net/socket.c:2449
     do_syscall_64+0xf6/0x7d0 arch/x86/entry/common.c:295
     entry_SYSCALL_64_after_hwframe+0x49/0xb3
    RIP: 0033:0x45ca29
    
    Fixes: e9c1a793210f ("tipc: add dst_cache support for udp media")
    Cc: Xin Long <lucien.xin@gmail.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5b0cef8193e433946e854a5c19e82a382f07185b
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Mon May 4 11:15:54 2020 +0700

    tipc: fix partial topology connection closure
    
    [ Upstream commit 980d69276f3048af43a045be2925dacfb898a7be ]
    
    When an application connects to the TIPC topology server and subscribes
    to some services, a new connection is created along with some objects -
    'tipc_subscription' to store related data correspondingly...
    However, there is one omission in the connection handling that when the
    connection or application is orderly shutdown (e.g. via SIGQUIT, etc.),
    the connection is not closed in kernel, the 'tipc_subscription' objects
    are not freed too.
    This results in:
    - The maximum number of subscriptions (65535) will be reached soon, new
    subscriptions will be rejected;
    - TIPC module cannot be removed (unless the objects  are somehow forced
    to release first);
    
    The commit fixes the issue by closing the connection if the 'recvmsg()'
    returns '0' i.e. when the peer is shutdown gracefully. It also includes
    the other unexpected cases.
    
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e9edd5a0f5f5e586d5f451b54d060efb51196be7
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Mon May 4 11:15:54 2020 +0700

    tipc: fix partial topology connection closure
    
    [ Upstream commit 980d69276f3048af43a045be2925dacfb898a7be ]
    
    When an application connects to the TIPC topology server and subscribes
    to some services, a new connection is created along with some objects -
    'tipc_subscription' to store related data correspondingly...
    However, there is one omission in the connection handling that when the
    connection or application is orderly shutdown (e.g. via SIGQUIT, etc.),
    the connection is not closed in kernel, the 'tipc_subscription' objects
    are not freed too.
    This results in:
    - The maximum number of subscriptions (65535) will be reached soon, new
    subscriptions will be rejected;
    - TIPC module cannot be removed (unless the objects  are somehow forced
    to release first);
    
    The commit fixes the issue by closing the connection if the 'recvmsg()'
    returns '0' i.e. when the peer is shutdown gracefully. It also includes
    the other unexpected cases.
    
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6233f3119c2bad7697938ee345ead8f321839009
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Mon May 4 11:15:54 2020 +0700

    tipc: fix partial topology connection closure
    
    [ Upstream commit 980d69276f3048af43a045be2925dacfb898a7be ]
    
    When an application connects to the TIPC topology server and subscribes
    to some services, a new connection is created along with some objects -
    'tipc_subscription' to store related data correspondingly...
    However, there is one omission in the connection handling that when the
    connection or application is orderly shutdown (e.g. via SIGQUIT, etc.),
    the connection is not closed in kernel, the 'tipc_subscription' objects
    are not freed too.
    This results in:
    - The maximum number of subscriptions (65535) will be reached soon, new
    subscriptions will be rejected;
    - TIPC module cannot be removed (unless the objects  are somehow forced
    to release first);
    
    The commit fixes the issue by closing the connection if the 'recvmsg()'
    returns '0' i.e. when the peer is shutdown gracefully. It also includes
    the other unexpected cases.
    
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 69cad59d8af660998829eed4b4b0344dc5673c57
Merge: f3fbc5a38021 88690b1079d4
Author: David S. Miller <davem@davemloft.net>
Date:   Wed May 13 12:33:19 2020 -0700

    Merge branch 'tipc-fixes'
    
    Tuong Lien says:
    
    ====================
    tipc: add some patches
    
    This series adds patches to fix some issues in TIPC streaming & service
    subscription.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 88690b1079d473a44bf4183dfee9b03d4afae866
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Wed May 13 19:33:18 2020 +0700

    tipc: fix failed service subscription deletion
    
    When a service subscription is expired or canceled by user, it needs to
    be deleted from the subscription list, so that new subscriptions can be
    registered (max = 65535 per net). However, there are two issues in code
    that can cause such an unused subscription to persist:
    
    1) The 'tipc_conn_delete_sub()' has a loop on the subscription list but
    it makes a break shortly when the 1st subscription differs from the one
    specified, so the subscription will not be deleted.
    
    2) In case a subscription is canceled, the code to remove the
    'TIPC_SUB_CANCEL' flag from the subscription filter does not work if it
    is a local subscription (i.e. the little endian isn't involved). So, it
    will be no matches when looking for the subscription to delete later.
    
    The subscription(s) will be removed eventually when the user terminates
    its topology connection but that could be a long time later. Meanwhile,
    the number of available subscriptions may be exhausted.
    
    This commit fixes the two issues above, so as needed a subscription can
    be deleted correctly.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0771d7df819284d46cf5cfb57698621b503ec17f
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Wed May 13 19:33:17 2020 +0700

    tipc: fix memory leak in service subscripting
    
    Upon receipt of a service subscription request from user via a topology
    connection, one 'sub' object will be allocated in kernel, so it will be
    able to send an event of the service if any to the user correspondingly
    then. Also, in case of any failure, the connection will be shutdown and
    all the pertaining 'sub' objects will be freed.
    
    However, there is a race condition as follows resulting in memory leak:
    
           receive-work       connection        send-work
                  |                |                |
            sub-1 |<------//-------|                |
            sub-2 |<------//-------|                |
                  |                |<---------------| evt for sub-x
            sub-3 |<------//-------|                |
                  :                :                :
                  :                :                :
                  |       /--------|                |
                  |       |        * peer closed    |
                  |       |        |                |
                  |       |        |<-------X-------| evt for sub-y
                  |       |        |<===============|
            sub-n |<------/        X    shutdown    |
        -> orphan |                                 |
    
    That is, the 'receive-work' may get the last subscription request while
    the 'send-work' is shutting down the connection due to peer close.
    
    We had a 'lock' on the connection, so the two actions cannot be carried
    out simultaneously. If the last subscription is allocated e.g. 'sub-n',
    before the 'send-work' closes the connection, there will be no issue at
    all, the 'sub' objects will be freed. In contrast the last subscription
    will become orphan since the connection was closed, and we released all
    references.
    
    This commit fixes the issue by simply adding one test if the connection
    remains in 'connected' state right after we obtain the connection lock,
    then a subscription object can be created as usual, otherwise we ignore
    it.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Reported-by: Thang Ngo <thang.h.ngo@dektech.com.au>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c72685894506a3fec5978b9b11b94069a7d1c995
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Wed May 13 19:33:16 2020 +0700

    tipc: fix large latency in smart Nagle streaming
    
    Currently when a connection is in Nagle mode, we set the 'ack_required'
    bit in the last sending buffer and wait for the corresponding ACK prior
    to pushing more data. However, on the receiving side, the ACK is issued
    only when application really  reads the whole data. Even if part of the
    last buffer is received, we will not do the ACK as required. This might
    cause an unnecessary delay since the receiver does not always fetch the
    message as fast as the sender, resulting in a large latency in the user
    message sending, which is: [one RTT + the receiver processing time].
    
    The commit makes Nagle ACK as soon as possible i.e. when a message with
    the 'ack_required' arrives in the receiving side's stack even before it
    is processed or put in the socket receive queue...
    This way, we can limit the streaming latency to one RTT as committed in
    Nagle mode.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 720ef97e3c7fa7c7fa2333fb1d1503bc2920a3ef
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Wed Aug 24 13:32:19 2016 +0000

    tipc: fix the error handling in tipc_udp_enable()
    
    commit a5de125dd46c851fc962806135953c1bd0a0f0df upstream.
    
    Fix to return a negative error code in enable_mcast() error handling
    case, and release udp socket when necessary.
    
    Fixes: d0f91938bede ("tipc: add ip/udp media type")
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 980d69276f3048af43a045be2925dacfb898a7be
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Mon May 4 11:15:54 2020 +0700

    tipc: fix partial topology connection closure
    
    When an application connects to the TIPC topology server and subscribes
    to some services, a new connection is created along with some objects -
    'tipc_subscription' to store related data correspondingly...
    However, there is one omission in the connection handling that when the
    connection or application is orderly shutdown (e.g. via SIGQUIT, etc.),
    the connection is not closed in kernel, the 'tipc_subscription' objects
    are not freed too.
    This results in:
    - The maximum number of subscriptions (65535) will be reached soon, new
    subscriptions will be rejected;
    - TIPC module cannot be removed (unless the objects  are somehow forced
    to release first);
    
    The commit fixes the issue by closing the connection if the 'recvmsg()'
    returns '0' i.e. when the peer is shutdown gracefully. It also includes
    the other unexpected cases.
    
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit cb07b0e9289dee3a8acb3beccc6068a4dd4e8205
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Mar 26 09:50:29 2020 +0700

    tipc: Add a missing case of TIPC_DIRECT_MSG type
    
    commit 8b1e5b0a99f04bda2d6c85ecfe5e68a356c10914 upstream.
    
    In the commit f73b12812a3d
    ("tipc: improve throughput between nodes in netns"), we're missing a check
    to handle TIPC_DIRECT_MSG type, it's still using old sending mechanism for
    this message type. So, throughput improvement is not significant as
    expected.
    
    Besides that, when sending a large message with that type, we're also
    handle wrong receiving queue, it should be enqueued in socket receiving
    instead of multicast messages.
    
    Fix this by adding the missing case for TIPC_DIRECT_MSG.
    
    Fixes: f73b12812a3d ("tipc: improve throughput between nodes in netns")
    Reported-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit acd9fe793f814b7450efc0bfc07aead684b40044
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Wed Apr 15 18:34:49 2020 +0700

    tipc: fix incorrect increasing of link window
    
    commit edadedf1c5b4e4404192a0a4c3c0c05e3b7672ab upstream.
    
    In commit 16ad3f4022bb ("tipc: introduce variable window congestion
    control"), we allow link window to change with the congestion avoidance
    algorithm. However, there is a bug that during the slow-start if packet
    retransmission occurs, the link will enter the fast-recovery phase, set
    its window to the 'ssthresh' which is never less than 300, so the link
    window suddenly increases to that limit instead of decreasing.
    
    Consequently, two issues have been observed:
    
    - For broadcast-link: it can leave a gap between the link queues that a
    new packet will be inserted and sent before the previous ones, i.e. not
    in-order.
    
    - For unicast: the algorithm does not work as expected, the link window
    jumps to the slow-start threshold whereas packet retransmission occurs.
    
    This commit fixes the issues by avoiding such the link window increase,
    but still decreasing if the 'ssthresh' is lowered.
    
    Fixes: 16ad3f4022bb ("tipc: introduce variable window congestion control")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b98430f641bbd5916f9db82977e234672e1b6d51
Author: Xiyu Yang <xiyuyang19@fudan.edu.cn>
Date:   Wed Apr 15 16:40:28 2020 +0800

    tipc: Fix potential tipc_node refcnt leak in tipc_rcv
    
    [ Upstream commit de058420767df21e2b6b0f3bb36d1616fb962032 ]
    
    tipc_rcv() invokes tipc_node_find() twice, which returns a reference of
    the specified tipc_node object to "n" with increased refcnt.
    
    When tipc_rcv() returns or a new object is assigned to "n", the original
    local reference of "n" becomes invalid, so the refcount should be
    decreased to keep refcount balanced.
    
    The issue happens in some paths of tipc_rcv(), which forget to decrease
    the refcnt increased by tipc_node_find() and will cause a refcnt leak.
    
    Fix this issue by calling tipc_node_put() before the original object
    pointed by "n" becomes invalid.
    
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f19b022e6bb71c177710985471403c6374f7ab8f
Author: Xiyu Yang <xiyuyang19@fudan.edu.cn>
Date:   Wed Apr 15 16:39:56 2020 +0800

    tipc: Fix potential tipc_aead refcnt leak in tipc_crypto_rcv
    
    [ Upstream commit 441870ee4240cf67b5d3ab8e16216a9ff42eb5d6 ]
    
    tipc_crypto_rcv() invokes tipc_aead_get(), which returns a reference of
    the tipc_aead object to "aead" with increased refcnt.
    
    When tipc_crypto_rcv() returns, the original local reference of "aead"
    becomes invalid, so the refcount should be decreased to keep refcount
    balanced.
    
    The issue happens in one error path of tipc_crypto_rcv(). When TIPC
    message decryption status is EINPROGRESS or EBUSY, the function forgets
    to decrease the refcnt increased by tipc_aead_get() and causes a refcnt
    leak.
    
    Fix this issue by calling tipc_aead_put() on the error path when TIPC
    message decryption status is EINPROGRESS or EBUSY.
    
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab51cac00ef2859f20a73d33a53f3a8987b65e11
Merge: 5ef58e290782 167ff131cb3d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Apr 24 19:17:30 2020 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from David Miller:
    
     1) Fix memory leak in netfilter flowtable, from Roi Dayan.
    
     2) Ref-count leaks in netrom and tipc, from Xiyu Yang.
    
     3) Fix warning when mptcp socket is never accepted before close, from
        Florian Westphal.
    
     4) Missed locking in ovs_ct_exit(), from Tonghao Zhang.
    
     5) Fix large delays during PTP synchornization in cxgb4, from Rahul
        Lakkireddy.
    
     6) team_mode_get() can hang, from Taehee Yoo.
    
     7) Need to use kvzalloc() when allocating fw tracer in mlx5 driver,
        from Niklas Schnelle.
    
     8) Fix handling of bpf XADD on BTF memory, from Jann Horn.
    
     9) Fix BPF_STX/BPF_B encoding in x86 bpf jit, from Luke Nelson.
    
    10) Missing queue memory release in iwlwifi pcie code, from Johannes
        Berg.
    
    11) Fix NULL deref in macvlan device event, from Taehee Yoo.
    
    12) Initialize lan87xx phy correctly, from Yuiko Oshino.
    
    13) Fix looping between VRF and XFRM lookups, from David Ahern.
    
    14) etf packet scheduler assumes all sockets are full sockets, which is
        not necessarily true. From Eric Dumazet.
    
    15) Fix mptcp data_fin handling in RX path, from Paolo Abeni.
    
    16) fib_select_default() needs to handle nexthop objects, from David
        Ahern.
    
    17) Use GFP_ATOMIC under spinlock in mac80211_hwsim, from Wei Yongjun.
    
    18) vxlan and geneve use wrong nlattr array, from Sabrina Dubroca.
    
    19) Correct rx/tx stats in bcmgenet driver, from Doug Berger.
    
    20) BPF_LDX zero-extension is encoded improperly in x86_32 bpf jit, fix
        from Luke Nelson.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (100 commits)
      selftests/bpf: Fix a couple of broken test_btf cases
      tools/runqslower: Ensure own vmlinux.h is picked up first
      bpf: Make bpf_link_fops static
      bpftool: Respect the -d option in struct_ops cmd
      selftests/bpf: Add test for freplace program with expected_attach_type
      bpf: Propagate expected_attach_type when verifying freplace programs
      bpf: Fix leak in LINK_UPDATE and enforce empty old_prog_fd
      bpf, x86_32: Fix logic error in BPF_LDX zero-extension
      bpf, x86_32: Fix clobbering of dst for BPF_JSET
      bpf, x86_32: Fix incorrect encoding in BPF_LDX zero-extension
      bpf: Fix reStructuredText markup
      net: systemport: suppress warnings on failed Rx SKB allocations
      net: bcmgenet: suppress warnings on failed Rx SKB allocations
      macsec: avoid to set wrong mtu
      mac80211: sta_info: Add lockdep condition for RCU list usage
      mac80211: populate debugfs only after cfg80211 init
      net: bcmgenet: correct per TX/RX ring statistics
      net: meth: remove spurious copyright text
      net: phy: bcm84881: clear settings on link down
      chcr: Fix CPU hard lockup
      ...

commit de058420767df21e2b6b0f3bb36d1616fb962032
Author: Xiyu Yang <xiyuyang19@fudan.edu.cn>
Date:   Wed Apr 15 16:40:28 2020 +0800

    tipc: Fix potential tipc_node refcnt leak in tipc_rcv
    
    tipc_rcv() invokes tipc_node_find() twice, which returns a reference of
    the specified tipc_node object to "n" with increased refcnt.
    
    When tipc_rcv() returns or a new object is assigned to "n", the original
    local reference of "n" becomes invalid, so the refcount should be
    decreased to keep refcount balanced.
    
    The issue happens in some paths of tipc_rcv(), which forget to decrease
    the refcnt increased by tipc_node_find() and will cause a refcnt leak.
    
    Fix this issue by calling tipc_node_put() before the original object
    pointed by "n" becomes invalid.
    
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 441870ee4240cf67b5d3ab8e16216a9ff42eb5d6
Author: Xiyu Yang <xiyuyang19@fudan.edu.cn>
Date:   Wed Apr 15 16:39:56 2020 +0800

    tipc: Fix potential tipc_aead refcnt leak in tipc_crypto_rcv
    
    tipc_crypto_rcv() invokes tipc_aead_get(), which returns a reference of
    the tipc_aead object to "aead" with increased refcnt.
    
    When tipc_crypto_rcv() returns, the original local reference of "aead"
    becomes invalid, so the refcount should be decreased to keep refcount
    balanced.
    
    The issue happens in one error path of tipc_crypto_rcv(). When TIPC
    message decryption status is EINPROGRESS or EBUSY, the function forgets
    to decrease the refcnt increased by tipc_aead_get() and causes a refcnt
    leak.
    
    Fix this issue by calling tipc_aead_put() on the error path when TIPC
    message decryption status is EINPROGRESS or EBUSY.
    
    Signed-off-by: Xiyu Yang <xiyuyang19@fudan.edu.cn>
    Signed-off-by: Xin Tan <tanxin.ctf@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c8372665b4b96d6a818b2693dd49236d5f9c8bc2
Merge: 9786cab67457 d518691cbd3b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 16 14:52:29 2020 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from David Miller:
    
     1) Disable RISCV BPF JIT builds when !MMU, from Björn Töpel.
    
     2) nf_tables leaves dangling pointer after free, fix from Eric Dumazet.
    
     3) Out of boundary write in __xsk_rcv_memcpy(), fix from Li RongQing.
    
     4) Adjust icmp6 message source address selection when routes have a
        preferred source address set, from Tim Stallard.
    
     5) Be sure to validate HSR protocol version when creating new links,
        from Taehee Yoo.
    
     6) CAP_NET_ADMIN should be sufficient to manage l2tp tunnels even in
        non-initial namespaces, from Michael Weiß.
    
     7) Missing release firmware call in mlx5, from Eran Ben Elisha.
    
     8) Fix variable type in macsec_changelink(), caught by KASAN. Fix from
        Taehee Yoo.
    
     9) Fix pause frame negotiation in marvell phy driver, from Clemens
        Gruber.
    
    10) Record RX queue early enough in tun packet paths such that XDP
        programs will see the correct RX queue index, from Gilberto Bertin.
    
    11) Fix double unlock in mptcp, from Florian Westphal.
    
    12) Fix offset overflow in ARM bpf JIT, from Luke Nelson.
    
    13) marvell10g needs to soft reset PHY when coming out of low power
        mode, from Russell King.
    
    14) Fix MTU setting regression in stmmac for some chip types, from
        Florian Fainelli.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (101 commits)
      amd-xgbe: Use __napi_schedule() in BH context
      mISDN: make dmril and dmrim static
      net: stmmac: dwmac-sunxi: Provide TX and RX fifo sizes
      net: dsa: mt7530: fix tagged frames pass-through in VLAN-unaware mode
      tipc: fix incorrect increasing of link window
      Documentation: Fix tcp_challenge_ack_limit default value
      net: tulip: make early_486_chipsets static
      dt-bindings: net: ethernet-phy: add desciption for ethernet-phy-id1234.d400
      ipv6: remove redundant assignment to variable err
      net/rds: Use ERR_PTR for rds_message_alloc_sgs()
      net: mscc: ocelot: fix untagged packet drops when enslaving to vlan aware bridge
      selftests/bpf: Check for correct program attach/detach in xdp_attach test
      libbpf: Fix type of old_fd in bpf_xdp_set_link_opts
      libbpf: Always specify expected_attach_type on program load if supported
      xsk: Add missing check on user supplied headroom size
      mac80211: fix channel switch trigger from unknown mesh peer
      mac80211: fix race in ieee80211_register_hw()
      net: marvell10g: soft-reset the PHY when coming out of low power
      net: marvell10g: report firmware version
      net/cxgb4: Check the return from t4_query_params properly
      ...

commit edadedf1c5b4e4404192a0a4c3c0c05e3b7672ab
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Wed Apr 15 18:34:49 2020 +0700

    tipc: fix incorrect increasing of link window
    
    In commit 16ad3f4022bb ("tipc: introduce variable window congestion
    control"), we allow link window to change with the congestion avoidance
    algorithm. However, there is a bug that during the slow-start if packet
    retransmission occurs, the link will enter the fast-recovery phase, set
    its window to the 'ssthresh' which is never less than 300, so the link
    window suddenly increases to that limit instead of decreasing.
    
    Consequently, two issues have been observed:
    
    - For broadcast-link: it can leave a gap between the link queues that a
    new packet will be inserted and sent before the previous ones, i.e. not
    in-order.
    
    - For unicast: the algorithm does not work as expected, the link window
    jumps to the slow-start threshold whereas packet retransmission occurs.
    
    This commit fixes the issues by avoiding such the link window increase,
    but still decreasing if the 'ssthresh' is lowered.
    
    Fixes: 16ad3f4022bb ("tipc: introduce variable window congestion control")
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8b1e5b0a99f04bda2d6c85ecfe5e68a356c10914
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Mar 26 09:50:29 2020 +0700

    tipc: Add a missing case of TIPC_DIRECT_MSG type
    
    In the commit f73b12812a3d
    ("tipc: improve throughput between nodes in netns"), we're missing a check
    to handle TIPC_DIRECT_MSG type, it's still using old sending mechanism for
    this message type. So, throughput improvement is not significant as
    expected.
    
    Besides that, when sending a large message with that type, we're also
    handle wrong receiving queue, it should be enqueued in socket receiving
    instead of multicast messages.
    
    Fix this by adding the missing case for TIPC_DIRECT_MSG.
    
    Fixes: f73b12812a3d ("tipc: improve throughput between nodes in netns")
    Reported-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e6b521aa8a4792bc622a19a4fe5d54eda6282b9a
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Mar 2 21:05:23 2020 -0800

    tipc: add missing attribute validation for MTU property
    
    [ Upstream commit 213320a67962ff6e7b83b704d55cbebc341426db ]
    
    Add missing attribute validation for TIPC_NLA_PROP_MTU
    to the netlink policy.
    
    Fixes: 901271e0403a ("tipc: implement configuration of UDP media MTU")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c16ef8ee16ced7585b1ec3fc8df35cd4c3b385c
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Mar 2 21:05:23 2020 -0800

    tipc: add missing attribute validation for MTU property
    
    [ Upstream commit 213320a67962ff6e7b83b704d55cbebc341426db ]
    
    Add missing attribute validation for TIPC_NLA_PROP_MTU
    to the netlink policy.
    
    Fixes: 901271e0403a ("tipc: implement configuration of UDP media MTU")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3c2893a77cef0b05127c2d5c21cf08e19904b092
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Mar 2 21:05:23 2020 -0800

    tipc: add missing attribute validation for MTU property
    
    [ Upstream commit 213320a67962ff6e7b83b704d55cbebc341426db ]
    
    Add missing attribute validation for TIPC_NLA_PROP_MTU
    to the netlink policy.
    
    Fixes: 901271e0403a ("tipc: implement configuration of UDP media MTU")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 746a1eda682cb7b5cd22f1b437da2121af64fbfe
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Fri Mar 13 10:18:03 2020 +0700

    tipc: add NULL pointer check to prevent kernel oops
    
    Calling:
    tipc_node_link_down()->
       - tipc_node_write_unlock()->tipc_mon_peer_down()
       - tipc_mon_peer_down()
      just after disabling bearer could be caused kernel oops.
    
    Fix this by adding a sanity check to make sure valid memory
    access.
    
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e228c5c0882e809e4fb3eafd07ec25ff50f65ac5
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Fri Mar 13 10:18:02 2020 +0700

    tipc: simplify trivial boolean return
    
    Checking and returning 'true' boolean is useless as it will be
    returning at end of function
    
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9184d43bf6c9dfa337e1e7290ca89f894aa462ff
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Mon Feb 10 15:35:44 2020 +0700

    tipc: fix successful connect() but timed out
    
    commit 5391a87751a164b3194864126f3b016038abc9fe upstream.
    
    In commit 9546a0b7ce00 ("tipc: fix wrong connect() return code"), we
    fixed the issue with the 'connect()' that returns zero even though the
    connecting has failed by waiting for the connection to be 'ESTABLISHED'
    really. However, the approach has one drawback in conjunction with our
    'lightweight' connection setup mechanism that the following scenario
    can happen:
    
              (server)                        (client)
    
       +- accept()|                      |             wait_for_conn()
       |          |                      |connect() -------+
       |          |<-------[SYN]---------|                 > sleeping
       |          |                      *CONNECTING       |
       |--------->*ESTABLISHED           |                 |
                  |--------[ACK]-------->*ESTABLISHED      > wakeup()
            send()|--------[DATA]------->|\                > wakeup()
            send()|--------[DATA]------->| |               > wakeup()
              .   .          .           . |-> recvq       .
              .   .          .           . |               .
            send()|--------[DATA]------->|/                > wakeup()
           close()|--------[FIN]-------->*DISCONNECTING    |
                  *DISCONNECTING         |                 |
                  |                      ~~~~~~~~~~~~~~~~~~> schedule()
                                                           | wait again
                                                           .
                                                           .
                                                           | ETIMEDOUT
    
    Upon the receipt of the server 'ACK', the client becomes 'ESTABLISHED'
    and the 'wait_for_conn()' process is woken up but not run. Meanwhile,
    the server starts to send a number of data following by a 'close()'
    shortly without waiting any response from the client, which then forces
    the client socket to be 'DISCONNECTING' immediately. When the wait
    process is switched to be running, it continues to wait until the timer
    expires because of the unexpected socket state. The client 'connect()'
    will finally get ‘-ETIMEDOUT’ and force to release the socket whereas
    there remains the messages in its receive queue.
    
    Obviously the issue would not happen if the server had some delay prior
    to its 'close()' (or the number of 'DATA' messages is large enough),
    but any kind of delay would make the connection setup/shutdown "heavy".
    We solve this by simply allowing the 'connect()' returns zero in this
    particular case. The socket is already 'DISCONNECTING', so any further
    write will get '-EPIPE' but the socket is still able to read the
    messages existing in its receive queue.
    
    Note: This solution doesn't break the previous one as it deals with a
    different situation that the socket state is 'DISCONNECTING' but has no
    error (i.e. sk->sk_err = 0).
    
    Fixes: 9546a0b7ce00 ("tipc: fix wrong connect() return code")
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 213320a67962ff6e7b83b704d55cbebc341426db
Author: Jakub Kicinski <kuba@kernel.org>
Date:   Mon Mar 2 21:05:23 2020 -0800

    tipc: add missing attribute validation for MTU property
    
    Add missing attribute validation for TIPC_NLA_PROP_MTU
    to the netlink policy.
    
    Fixes: 901271e0403a ("tipc: implement configuration of UDP media MTU")
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5391a87751a164b3194864126f3b016038abc9fe
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Mon Feb 10 15:35:44 2020 +0700

    tipc: fix successful connect() but timed out
    
    In commit 9546a0b7ce00 ("tipc: fix wrong connect() return code"), we
    fixed the issue with the 'connect()' that returns zero even though the
    connecting has failed by waiting for the connection to be 'ESTABLISHED'
    really. However, the approach has one drawback in conjunction with our
    'lightweight' connection setup mechanism that the following scenario
    can happen:
    
              (server)                        (client)
    
       +- accept()|                      |             wait_for_conn()
       |          |                      |connect() -------+
       |          |<-------[SYN]---------|                 > sleeping
       |          |                      *CONNECTING       |
       |--------->*ESTABLISHED           |                 |
                  |--------[ACK]-------->*ESTABLISHED      > wakeup()
            send()|--------[DATA]------->|\                > wakeup()
            send()|--------[DATA]------->| |               > wakeup()
              .   .          .           . |-> recvq       .
              .   .          .           . |               .
            send()|--------[DATA]------->|/                > wakeup()
           close()|--------[FIN]-------->*DISCONNECTING    |
                  *DISCONNECTING         |                 |
                  |                      ~~~~~~~~~~~~~~~~~~> schedule()
                                                           | wait again
                                                           .
                                                           .
                                                           | ETIMEDOUT
    
    Upon the receipt of the server 'ACK', the client becomes 'ESTABLISHED'
    and the 'wait_for_conn()' process is woken up but not run. Meanwhile,
    the server starts to send a number of data following by a 'close()'
    shortly without waiting any response from the client, which then forces
    the client socket to be 'DISCONNECTING' immediately. When the wait
    process is switched to be running, it continues to wait until the timer
    expires because of the unexpected socket state. The client 'connect()'
    will finally get ‘-ETIMEDOUT’ and force to release the socket whereas
    there remains the messages in its receive queue.
    
    Obviously the issue would not happen if the server had some delay prior
    to its 'close()' (or the number of 'DATA' messages is large enough),
    but any kind of delay would make the connection setup/shutdown "heavy".
    We solve this by simply allowing the 'connect()' returns zero in this
    particular case. The socket is already 'DISCONNECTING', so any further
    write will get '-EPIPE' but the socket is still able to read the
    messages existing in its receive queue.
    
    Note: This solution doesn't break the previous one as it deals with a
    different situation that the socket state is 'DISCONNECTING' but has no
    error (i.e. sk->sk_err = 0).
    
    Fixes: 9546a0b7ce00 ("tipc: fix wrong connect() return code")
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2437fd7baf299c7b8a39fa3e727755e84ee7c4ea
Author: Chen Wandun <chenwandun@huawei.com>
Date:   Mon Feb 10 16:11:09 2020 +0800

    tipc: make three functions static
    
    Fix the following sparse warning:
    
    net/tipc/node.c:281:6: warning: symbol 'tipc_node_free' was not declared. Should it be static?
    net/tipc/node.c:2801:5: warning: symbol '__tipc_nl_node_set_key' was not declared. Should it be static?
    net/tipc/node.c:2878:5: warning: symbol '__tipc_nl_node_flush_key' was not declared. Should it be static?
    
    Fixes: fc1b6d6de220 ("tipc: introduce TIPC encryption & authentication")
    Fixes: e1f32190cf7d ("tipc: add support for AEAD key setting via netlink")
    
    Signed-off-by: Chen Wandun <chenwandun@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3b3b51893b038bb2505ad1b4380408fa37884e5a
Author: Jie Liu <liujie165@huawei.com>
Date:   Tue Apr 16 13:10:09 2019 +0800

    tipc: set sysctl_tipc_rmem and named_timeout right range
    
    [ Upstream commit 4bcd4ec1017205644a2697bccbc3b5143f522f5f ]
    
    We find that sysctl_tipc_rmem and named_timeout do not have the right minimum
    setting. sysctl_tipc_rmem should be larger than zero, like sysctl_tcp_rmem.
    And named_timeout as a timeout setting should be not less than zero.
    
    Fixes: cc79dd1ba9c10 ("tipc: change socket buffer overflow control to respect sk_rcvbuf")
    Fixes: a5325ae5b8bff ("tipc: add name distributor resiliency queue")
    Signed-off-by: Jie Liu <liujie165@huawei.com>
    Reported-by: Qiang Ning <ningqiang1@huawei.com>
    Reviewed-by: Zhiqiang Liu <liuzhiqiang26@huawei.com>
    Reviewed-by: Miaohe Lin <linmiaohe@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f1c179e1fb782bcdf3bad705d72bc02f13d5fd72
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Mar 22 15:03:51 2019 +0100

    tipc: tipc clang warning
    
    [ Upstream commit 737889efe9713a0f20a75fd0de952841d9275e6b ]
    
    When checking the code with clang -Wsometimes-uninitialized we get the
    following warning:
    
    if (!tipc_link_is_establishing(l)) {
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    net/tipc/node.c:847:46: note: uninitialized use occurs here
          tipc_bearer_xmit(n->net, bearer_id, &xmitq, maddr);
    
    net/tipc/node.c:831:2: note: remove the 'if' if its condition is always
    true
    if (!tipc_link_is_establishing(l)) {
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    net/tipc/node.c:821:31: note: initialize the variable 'maddr' to silence
    this warning
    struct tipc_media_addr *maddr;
    
    We fix this by initializing 'maddr' to NULL. For the matter of clarity,
    we also test if 'xmitq' is non-empty before we use it and 'maddr'
    further down in the  function. It will never happen that 'xmitq' is non-
    empty at the same time as 'maddr' is NULL, so this is a sufficient test.
    
    Fixes: 598411d70f85 ("tipc: make resetting of links non-atomic")
    Reported-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ab6276c251b5c5d8ef194d67445936e4f83be818
Author: Jie Liu <liujie165@huawei.com>
Date:   Tue Apr 16 13:10:09 2019 +0800

    tipc: set sysctl_tipc_rmem and named_timeout right range
    
    [ Upstream commit 4bcd4ec1017205644a2697bccbc3b5143f522f5f ]
    
    We find that sysctl_tipc_rmem and named_timeout do not have the right minimum
    setting. sysctl_tipc_rmem should be larger than zero, like sysctl_tcp_rmem.
    And named_timeout as a timeout setting should be not less than zero.
    
    Fixes: cc79dd1ba9c10 ("tipc: change socket buffer overflow control to respect sk_rcvbuf")
    Fixes: a5325ae5b8bff ("tipc: add name distributor resiliency queue")
    Signed-off-by: Jie Liu <liujie165@huawei.com>
    Reported-by: Qiang Ning <ningqiang1@huawei.com>
    Reviewed-by: Zhiqiang Liu <liuzhiqiang26@huawei.com>
    Reviewed-by: Miaohe Lin <linmiaohe@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 523834b0ac46c79b635b5a112745bee874f7393c
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Tue Jul 30 16:23:18 2019 +0200

    tipc: reduce risk of wakeup queue starvation
    
    [ Upstream commit 7c5b42055964f587e55bd87ef334c3a27e95d144 ]
    
    In commit 365ad353c256 ("tipc: reduce risk of user starvation during
    link congestion") we allowed senders to add exactly one list of extra
    buffers to the link backlog queues during link congestion (aka
    "oversubscription"). However, the criteria for when to stop adding
    wakeup messages to the input queue when the overload abates is
    inaccurate, and may cause starvation problems during very high load.
    
    Currently, we stop adding wakeup messages after 10 total failed attempts
    where we find that there is no space left in the backlog queue for a
    certain importance level. The counter for this is accumulated across all
    levels, which may lead the algorithm to leave the loop prematurely,
    although there may still be plenty of space available at some levels.
    The result is sometimes that messages near the wakeup queue tail are not
    added to the input queue as they should be.
    
    We now introduce a more exact algorithm, where we keep adding wakeup
    messages to a level as long as the backlog queue has free slots for
    the corresponding level, and stop at the moment there are no more such
    slots or when there are no more wakeup messages to dequeue.
    
    Fixes: 365ad35 ("tipc: reduce risk of user starvation during link congestion")
    Reported-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f4e55515d1cf8c47519ef1b1ca7bb9dddbb7b6e1
Author: Jie Liu <liujie165@huawei.com>
Date:   Tue Apr 16 13:10:09 2019 +0800

    tipc: set sysctl_tipc_rmem and named_timeout right range
    
    [ Upstream commit 4bcd4ec1017205644a2697bccbc3b5143f522f5f ]
    
    We find that sysctl_tipc_rmem and named_timeout do not have the right minimum
    setting. sysctl_tipc_rmem should be larger than zero, like sysctl_tcp_rmem.
    And named_timeout as a timeout setting should be not less than zero.
    
    Fixes: cc79dd1ba9c10 ("tipc: change socket buffer overflow control to respect sk_rcvbuf")
    Fixes: a5325ae5b8bff ("tipc: add name distributor resiliency queue")
    Signed-off-by: Jie Liu <liujie165@huawei.com>
    Reported-by: Qiang Ning <ningqiang1@huawei.com>
    Reviewed-by: Zhiqiang Liu <liuzhiqiang26@huawei.com>
    Reviewed-by: Miaohe Lin <linmiaohe@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e317b36324b0184ca3063675a3b4f18a0c206c76
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Mar 22 15:03:51 2019 +0100

    tipc: tipc clang warning
    
    [ Upstream commit 737889efe9713a0f20a75fd0de952841d9275e6b ]
    
    When checking the code with clang -Wsometimes-uninitialized we get the
    following warning:
    
    if (!tipc_link_is_establishing(l)) {
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    net/tipc/node.c:847:46: note: uninitialized use occurs here
          tipc_bearer_xmit(n->net, bearer_id, &xmitq, maddr);
    
    net/tipc/node.c:831:2: note: remove the 'if' if its condition is always
    true
    if (!tipc_link_is_establishing(l)) {
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    net/tipc/node.c:821:31: note: initialize the variable 'maddr' to silence
    this warning
    struct tipc_media_addr *maddr;
    
    We fix this by initializing 'maddr' to NULL. For the matter of clarity,
    we also test if 'xmitq' is non-empty before we use it and 'maddr'
    further down in the  function. It will never happen that 'xmitq' is non-
    empty at the same time as 'maddr' is NULL, so this is a sufficient test.
    
    Fixes: 598411d70f85 ("tipc: make resetting of links non-atomic")
    Reported-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5d070b430a9a7f50e26dcc9a952eb1b38467f8be
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Oct 19 19:55:40 2018 +0200

    tipc: eliminate message disordering during binding table update
    
    [ Upstream commit 988f3f1603d4650409db5334355cbf7b13ef50c3 ]
    
    We have seen the following race scenario:
    1) named_distribute() builds a "bulk" message, containing a PUBLISH
       item for a certain publication. This is based on the contents of
       the binding tables's 'cluster_scope' list.
    2) tipc_named_withdraw() removes the same publication from the list,
       bulds a WITHDRAW message and distributes it to all cluster nodes.
    3) tipc_named_node_up(), which was calling named_distribute(), sends
       out the bulk message built under 1)
    4) The WITHDRAW message arrives at the just detected node, finds
       no corresponding publication, and is dropped.
    5) The PUBLISH item arrives at the same node, is added to its binding
       table, and remains there forever.
    
    This arrival disordering was earlier taken care of by the backlog queue,
    originally added for a different purpose, which was removed in the
    commit referred to below, but we now need a different solution.
    In this commit, we replace the rcu lock protecting the 'cluster_scope'
    list with a regular RW lock which comprises even the sending of the
    bulk message. This both guarantees both the list integrity and the
    message sending order. We will later add a commit which cleans up
    this code further.
    
    Note that this commit needs recently added commit d3092b2efca1 ("tipc:
    fix unsafe rcu locking when accessing publication list") to apply
    cleanly.
    
    Fixes: 37922ea4a310 ("tipc: permit overlapping service ranges in name table")
    Reported-by: Tuong Lien Tong <tuong.t.lien@dektech.com.au>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b8f60290aecef29c9e96cdfeaa5de7835ec12af6
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Thu Nov 28 10:10:07 2019 +0700

    tipc: fix wrong timeout input for tipc_wait_for_cond()
    
    commit 12db3c8083fcab4270866a88191933f2d9f24f89 upstream.
    
    In function __tipc_shutdown(), the timeout value passed to
    tipc_wait_for_cond() is not jiffies.
    
    This commit fixes it by converting that value from milliseconds
    to jiffies.
    
    Fixes: 365ad353c256 ("tipc: reduce risk of user starvation during link congestion")
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 295c9b554f6dfcd2d368fae6e6fa22ee5b79c123
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Tue Nov 12 07:40:04 2019 +0700

    tipc: update mon's self addr when node addr generated
    
    commit 46cb01eeeb86fca6afe24dda1167b0cb95424e29 upstream.
    
    In commit 25b0b9c4e835 ("tipc: handle collisions of 32-bit node address
    hash values"), the 32-bit node address only generated after one second
    trial period expired. However the self's addr in struct tipc_monitor do
    not update according to node address generated. This lead to it is
    always zero as initial value. As result, sorting algorithm using this
    value does not work as expected, neither neighbor monitoring framework.
    
    In this commit, we add a fix to update self's addr when 32-bit node
    address generated.
    
    Fixes: 25b0b9c4e835 ("tipc: handle collisions of 32-bit node address hash values")
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 801dafc3218c23ba1ea39f409b962113604f64bc
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Tue Jul 30 16:23:18 2019 +0200

    tipc: reduce risk of wakeup queue starvation
    
    [ Upstream commit 7c5b42055964f587e55bd87ef334c3a27e95d144 ]
    
    In commit 365ad353c256 ("tipc: reduce risk of user starvation during
    link congestion") we allowed senders to add exactly one list of extra
    buffers to the link backlog queues during link congestion (aka
    "oversubscription"). However, the criteria for when to stop adding
    wakeup messages to the input queue when the overload abates is
    inaccurate, and may cause starvation problems during very high load.
    
    Currently, we stop adding wakeup messages after 10 total failed attempts
    where we find that there is no space left in the backlog queue for a
    certain importance level. The counter for this is accumulated across all
    levels, which may lead the algorithm to leave the loop prematurely,
    although there may still be plenty of space available at some levels.
    The result is sometimes that messages near the wakeup queue tail are not
    added to the input queue as they should be.
    
    We now introduce a more exact algorithm, where we keep adding wakeup
    messages to a level as long as the backlog queue has free slots for
    the corresponding level, and stop at the moment there are no more such
    slots or when there are no more wakeup messages to dequeue.
    
    Fixes: 365ad35 ("tipc: reduce risk of user starvation during link congestion")
    Reported-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit edefec3a6d59fad0902d8d2209442a593a6af6e6
Author: Jie Liu <liujie165@huawei.com>
Date:   Tue Apr 16 13:10:09 2019 +0800

    tipc: set sysctl_tipc_rmem and named_timeout right range
    
    [ Upstream commit 4bcd4ec1017205644a2697bccbc3b5143f522f5f ]
    
    We find that sysctl_tipc_rmem and named_timeout do not have the right minimum
    setting. sysctl_tipc_rmem should be larger than zero, like sysctl_tcp_rmem.
    And named_timeout as a timeout setting should be not less than zero.
    
    Fixes: cc79dd1ba9c10 ("tipc: change socket buffer overflow control to respect sk_rcvbuf")
    Fixes: a5325ae5b8bff ("tipc: add name distributor resiliency queue")
    Signed-off-by: Jie Liu <liujie165@huawei.com>
    Reported-by: Qiang Ning <ningqiang1@huawei.com>
    Reviewed-by: Zhiqiang Liu <liuzhiqiang26@huawei.com>
    Reviewed-by: Miaohe Lin <linmiaohe@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 34bb4eab1942bc1d54e4d14a8ddfc3be7904fe6e
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Mar 22 15:03:51 2019 +0100

    tipc: tipc clang warning
    
    [ Upstream commit 737889efe9713a0f20a75fd0de952841d9275e6b ]
    
    When checking the code with clang -Wsometimes-uninitialized we get the
    following warning:
    
    if (!tipc_link_is_establishing(l)) {
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    net/tipc/node.c:847:46: note: uninitialized use occurs here
          tipc_bearer_xmit(n->net, bearer_id, &xmitq, maddr);
    
    net/tipc/node.c:831:2: note: remove the 'if' if its condition is always
    true
    if (!tipc_link_is_establishing(l)) {
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    net/tipc/node.c:821:31: note: initialize the variable 'maddr' to silence
    this warning
    struct tipc_media_addr *maddr;
    
    We fix this by initializing 'maddr' to NULL. For the matter of clarity,
    we also test if 'xmitq' is non-empty before we use it and 'maddr'
    further down in the  function. It will never happen that 'xmitq' is non-
    empty at the same time as 'maddr' is NULL, so this is a sufficient test.
    
    Fixes: 598411d70f85 ("tipc: make resetting of links non-atomic")
    Reported-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3d6331c0f5b4b2b40e109ab6df11c3a880eda3be
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Thu Nov 28 10:10:07 2019 +0700

    tipc: fix wrong timeout input for tipc_wait_for_cond()
    
    commit 12db3c8083fcab4270866a88191933f2d9f24f89 upstream.
    
    In function __tipc_shutdown(), the timeout value passed to
    tipc_wait_for_cond() is not jiffies.
    
    This commit fixes it by converting that value from milliseconds
    to jiffies.
    
    Fixes: 365ad353c256 ("tipc: reduce risk of user starvation during link congestion")
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9bc7663b711a6f3c46f35f6b7e1d53449f451b2f
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Thu Nov 28 10:10:07 2019 +0700

    tipc: fix wrong timeout input for tipc_wait_for_cond()
    
    commit 12db3c8083fcab4270866a88191933f2d9f24f89 upstream.
    
    In function __tipc_shutdown(), the timeout value passed to
    tipc_wait_for_cond() is not jiffies.
    
    This commit fixes it by converting that value from milliseconds
    to jiffies.
    
    Fixes: 365ad353c256 ("tipc: reduce risk of user starvation during link congestion")
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 58e007884a7bf7ad34552f266e7bb51cc9a7273b
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Thu Nov 28 10:10:06 2019 +0700

    tipc: fix wrong socket reference counter after tipc_sk_timeout() returns
    
    commit 91a4a3eb433e4d786420c41f3c08d1d16c605962 upstream.
    
    When tipc_sk_timeout() is executed but user space is grabbing
    ownership, this function rearms itself and returns. However, the
    socket reference counter is not reduced. This causes potential
    unexpected behavior.
    
    This commit fixes it by calling sock_put() before tipc_sk_timeout()
    returns in the above-mentioned case.
    
    Fixes: afe8792fec69 ("tipc: refactor function tipc_sk_timeout()")
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 55a0b2c95fd47db2adfeae50840c4b3a87c56179
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Thu Nov 28 10:10:05 2019 +0700

    tipc: fix potential memory leak in __tipc_sendmsg()
    
    commit 2fe97a578d7bad3116a89dc8a6692a51e6fc1d9c upstream.
    
    When initiating a connection message to a server side, the connection
    message is cloned and added to the socket write queue. However, if the
    cloning is failed, only the socket write queue is purged. It causes
    memory leak because the original connection message is not freed.
    
    This commit fixes it by purging the list of connection message when
    it cannot be cloned.
    
    Fixes: 6787927475e5 ("tipc: buffer overflow handling in listener socket")
    Reported-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 28845c28f842e9e55e75b2c116bff714bb039055
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Tue Nov 12 07:40:04 2019 +0700

    tipc: update mon's self addr when node addr generated
    
    commit 46cb01eeeb86fca6afe24dda1167b0cb95424e29 upstream.
    
    In commit 25b0b9c4e835 ("tipc: handle collisions of 32-bit node address
    hash values"), the 32-bit node address only generated after one second
    trial period expired. However the self's addr in struct tipc_monitor do
    not update according to node address generated. This lead to it is
    always zero as initial value. As result, sorting algorithm using this
    value does not work as expected, neither neighbor monitoring framework.
    
    In this commit, we add a fix to update self's addr when 32-bit node
    address generated.
    
    Fixes: 25b0b9c4e835 ("tipc: handle collisions of 32-bit node address hash values")
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b3182a666aea23ef14cc7e1df5baa712b02f87bd
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Wed Nov 6 13:26:10 2019 +0700

    tipc: reduce sensitive to retransmit failures
    
    commit 426071f1f3995d7e9603246bffdcbf344cd31719 upstream.
    
    With huge cluster (e.g >200nodes), the amount of that flow:
    gap -> retransmit packet -> acked will take time in case of STATE_MSG
    dropped/delayed because a lot of traffic. This lead to 1.5 sec tolerance
    value criteria made link easy failure around 2nd, 3rd of failed
    retransmission attempts.
    
    Instead of re-introduced criteria of 99 faled retransmissions to fix the
    issue, we increase failure detection timer to ten times tolerance value.
    
    Fixes: 77cf8edbc0e7 ("tipc: simplify stale link failure criteria")
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Acked-by: Jon
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 84809aaf78b5b4c2e6478dc6121a1c8fb439a024
Merge: f041eadad750 fa865ba183d6
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Jan 25 14:19:32 2020 -0800

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from David Miller:
    
     1) Off by one in mt76 airtime calculation, from Dan Carpenter.
    
     2) Fix TLV fragment allocation loop condition in iwlwifi, from Luca
        Coelho.
    
     3) Don't confirm neigh entries when doing ipsec pmtu updates, from Xu
        Wang.
    
     4) More checks to make sure we only send TSO packets to lan78xx chips
        that they can actually handle. From James Hughes.
    
     5) Fix ip_tunnel namespace move, from William Dauchy.
    
     6) Fix unintended packet reordering due to cooperation between
        listification done by GRO and non-GRO paths. From Maxim
        Mikityanskiy.
    
     7) Add Jakub Kicincki formally as networking co-maintainer.
    
     8) Info leak in airo ioctls, from Michael Ellerman.
    
     9) IFLA_MTU attribute needs validation during rtnl_create_link(), from
        Eric Dumazet.
    
    10) Use after free during reload in mlxsw, from Ido Schimmel.
    
    11) Dangling pointers are possible in tp->highest_sack, fix from Eric
        Dumazet.
    
    12) Missing *pos++ in various networking seq_next handlers, from Vasily
        Averin.
    
    13) CHELSIO_GET_MEM operation neds CAP_NET_ADMIN check, from Michael
        Ellerman.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (109 commits)
      firestream: fix memory leaks
      net: cxgb3_main: Add CAP_NET_ADMIN check to CHELSIO_GET_MEM
      net: bcmgenet: Use netif_tx_napi_add() for TX NAPI
      tipc: change maintainer email address
      net: stmmac: platform: fix probe for ACPI devices
      net/mlx5e: kTLS, Do not send decrypted-marked SKBs via non-accel path
      net/mlx5e: kTLS, Remove redundant posts in TX resync flow
      net/mlx5e: kTLS, Fix corner-case checks in TX resync flow
      net/mlx5e: Clear VF config when switching modes
      net/mlx5: DR, use non preemptible call to get the current cpu number
      net/mlx5: E-Switch, Prevent ingress rate configuration of uplink rep
      net/mlx5: DR, Enable counter on non-fwd-dest objects
      net/mlx5: Update the list of the PCI supported devices
      net/mlx5: Fix lowest FDB pool size
      net: Fix skb->csum update in inet_proto_csum_replace16().
      netfilter: nf_tables: autoload modules from the abort path
      netfilter: nf_tables: add __nft_chain_type_get()
      netfilter: nf_tables_offload: fix check the chain offload flag
      netfilter: conntrack: sctp: use distinct states for new SCTP connections
      ipv6_route_seq_next should increase position index
      ...

commit 61b1f2aff41141cd39686285c9b290a07e1e3051
Author: Jon Maloy <jmaloy@redhat.com>
Date:   Thu Jan 23 10:09:39 2020 -0500

    tipc: change maintainer email address
    
    Reflecting new realities.
    
    Signed-off-by: Jon Maloy <jmaloy@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4e7c55aabfd567e60542f7a2d09419226653ff72
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Tue Dec 10 15:21:04 2019 +0700

    tipc: fix retrans failure due to wrong destination
    
    commit abc9b4e0549b93fdaff56e9532bc49a2d7b04955 upstream.
    
    When a user message is sent, TIPC will check if the socket has faced a
    congestion at link layer. If that happens, it will make a sleep to wait
    for the congestion to disappear. This leaves a gap for other users to
    take over the socket (e.g. multi threads) since the socket is released
    as well. Also, in case of connectionless (e.g. SOCK_RDM), user is free
    to send messages to various destinations (e.g. via 'sendto()'), then
    the socket's preformatted header has to be updated correspondingly
    prior to the actual payload message building.
    
    Unfortunately, the latter action is done before the first action which
    causes a condition issue that the destination of a certain message can
    be modified incorrectly in the middle, leading to wrong destination
    when that message is built. Consequently, when the message is sent to
    the link layer, it gets stuck there forever because the peer node will
    simply reject it. After a number of retransmission attempts, the link
    is eventually taken down and the retransmission failure is reported.
    
    This commit fixes the problem by rearranging the order of actions to
    prevent the race condition from occurring, so the message building is
    'atomic' and its header will not be modified by anyone.
    
    Fixes: 365ad353c256 ("tipc: reduce risk of user starvation during link congestion")
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f83b9570297cf92d225fe193f5f2ad68a59dab3b
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Tue Dec 10 15:21:03 2019 +0700

    tipc: fix potential hanging after b/rcast changing
    
    commit dca4a17d24ee9d878836ce5eb8dc25be1ffa5729 upstream.
    
    In commit c55c8edafa91 ("tipc: smooth change between replicast and
    broadcast"), we allow instant switching between replicast and broadcast
    by sending a dummy 'SYN' packet on the last used link to synchronize
    packets on the links. The 'SYN' message is an object of link congestion
    also, so if that happens, a 'SOCK_WAKEUP' will be scheduled to be sent
    back to the socket...
    However, in that commit, we simply use the same socket 'cong_link_cnt'
    counter for both the 'SYN' & normal payload message sending. Therefore,
    if both the replicast & broadcast links are congested, the counter will
    be not updated correctly but overwritten by the latter congestion.
    Later on, when the 'SOCK_WAKEUP' messages are processed, the counter is
    reduced one by one and eventually overflowed. Consequently, further
    activities on the socket will only wait for the false congestion signal
    to disappear but never been met.
    
    Because sending the 'SYN' message is vital for the mechanism, it should
    be done anyway. This commit fixes the issue by marking the message with
    an error code e.g. 'TIPC_ERR_NO_PORT', so its sending should not face a
    link congestion, there is no need to touch the socket 'cong_link_cnt'
    either. In addition, in the event of any error (e.g. -ENOBUFS), we will
    purge the entire payload message queue and make a return immediately.
    
    Fixes: c55c8edafa91 ("tipc: smooth change between replicast and broadcast")
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a5f48c7878d2365f6ff7008e9317abbc16f68847
Merge: b07f636fca1c 9546a0b7ce00
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Jan 9 10:34:07 2020 -0800

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from David Miller:
    
     1) Missing netns pointer init in arp_tables, from Florian Westphal.
    
     2) Fix normal tcp SACK being treated as D-SACK, from Pengcheng Yang.
    
     3) Fix divide by zero in sch_cake, from Wen Yang.
    
     4) Len passed to skb_put_padto() is wrong in qrtr code, from Carl
        Huang.
    
     5) cmd->obj.chunk is leaked in sctp code error paths, from Xin Long.
    
     6) cgroup bpf programs can be released out of order, fix from Roman
        Gushchin.
    
     7) Make sure stmmac debugfs entry name is changed when device name
        changes, from Jiping Ma.
    
     8) Fix memory leak in vlan_dev_set_egress_priority(), from Eric
        Dumazet.
    
     9) SKB leak in lan78xx usb driver, also from Eric Dumazet.
    
    10) Ridiculous TCA_FQ_QUANTUM values configured can cause loops in fq
        packet scheduler, reject them. From Eric Dumazet.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (69 commits)
      tipc: fix wrong connect() return code
      tipc: fix link overflow issue at socket shutdown
      netfilter: ipset: avoid null deref when IPSET_ATTR_LINENO is present
      netfilter: conntrack: dccp, sctp: handle null timeout argument
      atm: eni: fix uninitialized variable warning
      macvlan: do not assume mac_header is set in macvlan_broadcast()
      net: sch_prio: When ungrafting, replace with FIFO
      mlxsw: spectrum_qdisc: Ignore grafting of invisible FIFO
      MAINTAINERS: Remove myself as co-maintainer for qcom-ethqos
      gtp: fix bad unlock balance in gtp_encap_enable_socket
      pkt_sched: fq: do not accept silly TCA_FQ_QUANTUM
      tipc: remove meaningless assignment in Makefile
      tipc: do not add socket.o to tipc-y twice
      net: stmmac: dwmac-sun8i: Allow all RGMII modes
      net: stmmac: dwmac-sunxi: Allow all RGMII modes
      net: usb: lan78xx: fix possible skb leak
      net: stmmac: Fixed link does not need MDIO Bus
      vlan: vlan_changelink() should propagate errors
      vlan: fix memory leak in vlan_dev_set_egress_priority
      stmmac: debugfs entry name is not be changed when udev rename device name.
      ...

commit 9546a0b7ce0077d827470f603f2522b845ce5954
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Wed Jan 8 09:19:00 2020 +0700

    tipc: fix wrong connect() return code
    
    The current 'tipc_wait_for_connect()' function does a wait-loop for the
    condition 'sk->sk_state != TIPC_CONNECTING' to conclude if the socket
    connecting has done. However, when the condition is met, it returns '0'
    even in the case the connecting is actually failed, the socket state is
    set to 'TIPC_DISCONNECTING' (e.g. when the server socket has closed..).
    This results in a wrong return code for the 'connect()' call from user,
    making it believe that the connection is established and go ahead with
    building, sending a message, etc. but finally failed e.g. '-EPIPE'.
    
    This commit fixes the issue by changing the wait condition to the
    'tipc_sk_connected(sk)', so the function will return '0' only when the
    connection is really established. Otherwise, either the socket 'sk_err'
    if any or '-ETIMEDOUT'/'-EINTR' will be returned correspondingly.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 49afb806cb650dd1f06f191994f3aa657d264009
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Wed Jan 8 09:18:15 2020 +0700

    tipc: fix link overflow issue at socket shutdown
    
    When a socket is suddenly shutdown or released, it will reject all the
    unreceived messages in its receive queue. This applies to a connected
    socket too, whereas there is only one 'FIN' message required to be sent
    back to its peer in this case.
    
    In case there are many messages in the queue and/or some connections
    with such messages are shutdown at the same time, the link layer will
    easily get overflowed at the 'TIPC_SYSTEM_IMPORTANCE' backlog level
    because of the message rejections. As a result, the link will be taken
    down. Moreover, immediately when the link is re-established, the socket
    layer can continue to reject the messages and the same issue happens...
    
    The commit refactors the '__tipc_shutdown()' function to only send one
    'FIN' in the situation mentioned above. For the connectionless case, it
    is unavoidable but usually there is no rejections for such socket
    messages because they are 'dest-droppable' by default.
    
    In addition, the new code makes the other socket states clear
    (e.g.'TIPC_LISTEN') and treats as a separate case to avoid misbehaving.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b969fee12b6330fd6a0b15337a314d5b5ee56916
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Mon Jan 6 16:35:27 2020 +0900

    tipc: remove meaningless assignment in Makefile
    
    There is no module named tipc_diag.
    
    The assignment to tipc_diag-y has no effect.
    
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ea04b445a266cddd5d5c653690d9676df020302f
Author: Masahiro Yamada <masahiroy@kernel.org>
Date:   Mon Jan 6 16:35:26 2020 +0900

    tipc: do not add socket.o to tipc-y twice
    
    net/tipc/Makefile adds socket.o twice.
    
    tipc-y  += addr.o bcast.o bearer.o \
               core.o link.o discover.o msg.o  \
               name_distr.o  subscr.o monitor.o name_table.o net.o  \
               netlink.o netlink_compat.o node.o socket.o eth_media.o \
                                                 ^^^^^^^^
               topsrv.o socket.o group.o trace.o
                        ^^^^^^^^
    
    Signed-off-by: Masahiro Yamada <masahiroy@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a7869e5f9174f246b662b2db6390bc128a351388
Author: Ying Xue <ying.xue@windriver.com>
Date:   Sat Jan 4 10:48:36 2020 +0800

    tipc: eliminate KMSAN: uninit-value in __tipc_nl_compat_dumpit error
    
    syzbot found the following crash on:
    =====================================================
    BUG: KMSAN: uninit-value in __nlmsg_parse include/net/netlink.h:661 [inline]
    BUG: KMSAN: uninit-value in nlmsg_parse_deprecated
    include/net/netlink.h:706 [inline]
    BUG: KMSAN: uninit-value in __tipc_nl_compat_dumpit+0x553/0x11e0
    net/tipc/netlink_compat.c:215
    CPU: 0 PID: 12425 Comm: syz-executor062 Not tainted 5.5.0-rc1-syzkaller #0
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
    Google 01/01/2011
    Call Trace:
      __dump_stack lib/dump_stack.c:77 [inline]
      dump_stack+0x1c9/0x220 lib/dump_stack.c:118
      kmsan_report+0x128/0x220 mm/kmsan/kmsan_report.c:108
      __msan_warning+0x57/0xa0 mm/kmsan/kmsan_instr.c:245
      __nlmsg_parse include/net/netlink.h:661 [inline]
      nlmsg_parse_deprecated include/net/netlink.h:706 [inline]
      __tipc_nl_compat_dumpit+0x553/0x11e0 net/tipc/netlink_compat.c:215
      tipc_nl_compat_dumpit+0x761/0x910 net/tipc/netlink_compat.c:308
      tipc_nl_compat_handle net/tipc/netlink_compat.c:1252 [inline]
      tipc_nl_compat_recv+0x12e9/0x2870 net/tipc/netlink_compat.c:1311
      genl_family_rcv_msg_doit net/netlink/genetlink.c:672 [inline]
      genl_family_rcv_msg net/netlink/genetlink.c:717 [inline]
      genl_rcv_msg+0x1dd0/0x23a0 net/netlink/genetlink.c:734
      netlink_rcv_skb+0x431/0x620 net/netlink/af_netlink.c:2477
      genl_rcv+0x63/0x80 net/netlink/genetlink.c:745
      netlink_unicast_kernel net/netlink/af_netlink.c:1302 [inline]
      netlink_unicast+0xfa0/0x1100 net/netlink/af_netlink.c:1328
      netlink_sendmsg+0x11f0/0x1480 net/netlink/af_netlink.c:1917
      sock_sendmsg_nosec net/socket.c:639 [inline]
      sock_sendmsg net/socket.c:659 [inline]
      ____sys_sendmsg+0x1362/0x13f0 net/socket.c:2330
      ___sys_sendmsg net/socket.c:2384 [inline]
      __sys_sendmsg+0x4f0/0x5e0 net/socket.c:2417
      __do_sys_sendmsg net/socket.c:2426 [inline]
      __se_sys_sendmsg+0x97/0xb0 net/socket.c:2424
      __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2424
      do_syscall_64+0xb6/0x160 arch/x86/entry/common.c:295
      entry_SYSCALL_64_after_hwframe+0x44/0xa9
    RIP: 0033:0x444179
    Code: 18 89 d0 c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 00 48 89 f8 48 89 f7
    48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff
    ff 0f 83 1b d8 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007ffd2d6409c8 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00000000004002e0 RCX: 0000000000444179
    RDX: 0000000000000000 RSI: 0000000020000140 RDI: 0000000000000003
    RBP: 00000000006ce018 R08: 0000000000000000 R09: 00000000004002e0
    R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000401e20
    R13: 0000000000401eb0 R14: 0000000000000000 R15: 0000000000000000
    
    Uninit was created at:
      kmsan_save_stack_with_flags mm/kmsan/kmsan.c:149 [inline]
      kmsan_internal_poison_shadow+0x5c/0x110 mm/kmsan/kmsan.c:132
      kmsan_slab_alloc+0x8a/0xe0 mm/kmsan/kmsan_hooks.c:86
      slab_alloc_node mm/slub.c:2774 [inline]
      __kmalloc_node_track_caller+0xe47/0x11f0 mm/slub.c:4382
      __kmalloc_reserve net/core/skbuff.c:141 [inline]
      __alloc_skb+0x309/0xa50 net/core/skbuff.c:209
      alloc_skb include/linux/skbuff.h:1049 [inline]
      nlmsg_new include/net/netlink.h:888 [inline]
      tipc_nl_compat_dumpit+0x6e4/0x910 net/tipc/netlink_compat.c:301
      tipc_nl_compat_handle net/tipc/netlink_compat.c:1252 [inline]
      tipc_nl_compat_recv+0x12e9/0x2870 net/tipc/netlink_compat.c:1311
      genl_family_rcv_msg_doit net/netlink/genetlink.c:672 [inline]
      genl_family_rcv_msg net/netlink/genetlink.c:717 [inline]
      genl_rcv_msg+0x1dd0/0x23a0 net/netlink/genetlink.c:734
      netlink_rcv_skb+0x431/0x620 net/netlink/af_netlink.c:2477
      genl_rcv+0x63/0x80 net/netlink/genetlink.c:745
      netlink_unicast_kernel net/netlink/af_netlink.c:1302 [inline]
      netlink_unicast+0xfa0/0x1100 net/netlink/af_netlink.c:1328
      netlink_sendmsg+0x11f0/0x1480 net/netlink/af_netlink.c:1917
      sock_sendmsg_nosec net/socket.c:639 [inline]
      sock_sendmsg net/socket.c:659 [inline]
      ____sys_sendmsg+0x1362/0x13f0 net/socket.c:2330
      ___sys_sendmsg net/socket.c:2384 [inline]
      __sys_sendmsg+0x4f0/0x5e0 net/socket.c:2417
      __do_sys_sendmsg net/socket.c:2426 [inline]
      __se_sys_sendmsg+0x97/0xb0 net/socket.c:2424
      __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2424
      do_syscall_64+0xb6/0x160 arch/x86/entry/common.c:295
      entry_SYSCALL_64_after_hwframe+0x44/0xa9
    =====================================================
    
    The complaint above occurred because the memory region pointed by attrbuf
    variable was not initialized. To eliminate this warning, we use kcalloc()
    rather than kmalloc_array() to allocate memory for attrbuf.
    
    Reported-by: syzbot+b1fd2bf2c89d8407e15f@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 78bac77b521b032f96077c21241cc5d5668482c5
Merge: 0dd1e3773ae8 4bfeadfc0712
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Dec 22 09:54:33 2019 -0800

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from David Miller:
    
     1) Several nf_flow_table_offload fixes from Pablo Neira Ayuso,
        including adding a missing ipv6 match description.
    
     2) Several heap overflow fixes in mwifiex from qize wang and Ganapathi
        Bhat.
    
     3) Fix uninit value in bond_neigh_init(), from Eric Dumazet.
    
     4) Fix non-ACPI probing of nxp-nci, from Stephan Gerhold.
    
     5) Fix use after free in tipc_disc_rcv(), from Tuong Lien.
    
     6) Enforce limit of 33 tail calls in mips and riscv JIT, from Paul
        Chaignon.
    
     7) Multicast MAC limit test is off by one in qede, from Manish Chopra.
    
     8) Fix established socket lookup race when socket goes from
        TCP_ESTABLISHED to TCP_LISTEN, because there lacks an intervening
        RCU grace period. From Eric Dumazet.
    
     9) Don't send empty SKBs from tcp_write_xmit(), also from Eric Dumazet.
    
    10) Fix active backup transition after link failure in bonding, from
        Mahesh Bandewar.
    
    11) Avoid zero sized hash table in gtp driver, from Taehee Yoo.
    
    12) Fix wrong interface passed to ->mac_link_up(), from Russell King.
    
    13) Fix DSA egress flooding settings in b53, from Florian Fainelli.
    
    14) Memory leak in gmac_setup_txqs(), from Navid Emamdoost.
    
    15) Fix double free in dpaa2-ptp code, from Ioana Ciornei.
    
    16) Reject invalid MTU values in stmmac, from Jose Abreu.
    
    17) Fix refcount leak in error path of u32 classifier, from Davide
        Caratti.
    
    18) Fix regression causing iwlwifi firmware crashes on boot, from Anders
        Kaseorg.
    
    19) Fix inverted return value logic in llc2 code, from Chan Shu Tak.
    
    20) Disable hardware GRO when XDP is attached to qede, frm Manish
        Chopra.
    
    21) Since we encode state in the low pointer bits, dst metrics must be
        at least 4 byte aligned, which is not necessarily true on m68k. Add
        annotations to fix this, from Geert Uytterhoeven.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (160 commits)
      sfc: Include XDP packet headroom in buffer step size.
      sfc: fix channel allocation with brute force
      net: dst: Force 4-byte alignment of dst_metrics
      selftests: pmtu: fix init mtu value in description
      hv_netvsc: Fix unwanted rx_table reset
      net: phy: ensure that phy IDs are correctly typed
      mod_devicetable: fix PHY module format
      qede: Disable hardware gro when xdp prog is installed
      net: ena: fix issues in setting interrupt moderation params in ethtool
      net: ena: fix default tx interrupt moderation interval
      net/smc: unregister ib devices in reboot_event
      net: stmmac: platform: Fix MDIO init for platforms without PHY
      llc2: Fix return statement of llc_stat_ev_rx_null_dsap_xid_c (and _test_c)
      net: hisilicon: Fix a BUG trigered by wrong bytes_compl
      net: dsa: ksz: use common define for tag len
      s390/qeth: don't return -ENOTSUPP to userspace
      s390/qeth: fix promiscuous mode after reset
      s390/qeth: handle error due to unsupported transport mode
      cxgb4: fix refcount init for TC-MQPRIO offload
      tc-testing: initial tdc selftests for cls_u32
      ...

commit 9430afbc29b5fcdd37541d35747e6684d3709bee
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Fri Dec 6 05:25:48 2019 +0000

    tipc: fix ordering of tipc module init and exit routine
    
    [ Upstream commit 9cf1cd8ee3ee09ef2859017df2058e2f53c5347f ]
    
    In order to set/get/dump, the tipc uses the generic netlink
    infrastructure. So, when tipc module is inserted, init function
    calls genl_register_family().
    After genl_register_family(), set/get/dump commands are immediately
    allowed and these callbacks internally use the net_generic.
    net_generic is allocated by register_pernet_device() but this
    is called after genl_register_family() in the __init function.
    So, these callbacks would use un-initialized net_generic.
    
    Test commands:
        #SHELL1
        while :
        do
            modprobe tipc
            modprobe -rv tipc
        done
    
        #SHELL2
        while :
        do
            tipc link list
        done
    
    Splat looks like:
    [   59.616322][ T2788] kasan: CONFIG_KASAN_INLINE enabled
    [   59.617234][ T2788] kasan: GPF could be caused by NULL-ptr deref or user memory access
    [   59.618398][ T2788] general protection fault: 0000 [#1] SMP DEBUG_PAGEALLOC KASAN PTI
    [   59.619389][ T2788] CPU: 3 PID: 2788 Comm: tipc Not tainted 5.4.0+ #194
    [   59.620231][ T2788] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    [   59.621428][ T2788] RIP: 0010:tipc_bcast_get_broadcast_mode+0x131/0x310 [tipc]
    [   59.622379][ T2788] Code: c7 c6 ef 8b 38 c0 65 ff 0d 84 83 c9 3f e8 d7 a5 f2 e3 48 8d bb 38 11 00 00 48 b8 00 00 00 00
    [   59.622550][ T2780] NET: Registered protocol family 30
    [   59.624627][ T2788] RSP: 0018:ffff88804b09f578 EFLAGS: 00010202
    [   59.624630][ T2788] RAX: dffffc0000000000 RBX: 0000000000000011 RCX: 000000008bc66907
    [   59.624631][ T2788] RDX: 0000000000000229 RSI: 000000004b3cf4cc RDI: 0000000000001149
    [   59.624633][ T2788] RBP: ffff88804b09f588 R08: 0000000000000003 R09: fffffbfff4fb3df1
    [   59.624635][ T2788] R10: fffffbfff50318f8 R11: ffff888066cadc18 R12: ffffffffa6cc2f40
    [   59.624637][ T2788] R13: 1ffff11009613eba R14: ffff8880662e9328 R15: ffff8880662e9328
    [   59.624639][ T2788] FS:  00007f57d8f7b740(0000) GS:ffff88806cc00000(0000) knlGS:0000000000000000
    [   59.624645][ T2788] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   59.625875][ T2780] tipc: Started in single node mode
    [   59.626128][ T2788] CR2: 00007f57d887a8c0 CR3: 000000004b140002 CR4: 00000000000606e0
    [   59.633991][ T2788] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [   59.635195][ T2788] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [   59.636478][ T2788] Call Trace:
    [   59.637025][ T2788]  tipc_nl_add_bc_link+0x179/0x1470 [tipc]
    [   59.638219][ T2788]  ? lock_downgrade+0x6e0/0x6e0
    [   59.638923][ T2788]  ? __tipc_nl_add_link+0xf90/0xf90 [tipc]
    [   59.639533][ T2788]  ? tipc_nl_node_dump_link+0x318/0xa50 [tipc]
    [   59.640160][ T2788]  ? mutex_lock_io_nested+0x1380/0x1380
    [   59.640746][ T2788]  tipc_nl_node_dump_link+0x4fd/0xa50 [tipc]
    [   59.641356][ T2788]  ? tipc_nl_node_reset_link_stats+0x340/0x340 [tipc]
    [   59.642088][ T2788]  ? __skb_ext_del+0x270/0x270
    [   59.642594][ T2788]  genl_lock_dumpit+0x85/0xb0
    [   59.643050][ T2788]  netlink_dump+0x49c/0xed0
    [   59.643529][ T2788]  ? __netlink_sendskb+0xc0/0xc0
    [   59.644044][ T2788]  ? __netlink_dump_start+0x190/0x800
    [   59.644617][ T2788]  ? __mutex_unlock_slowpath+0xd0/0x670
    [   59.645177][ T2788]  __netlink_dump_start+0x5a0/0x800
    [   59.645692][ T2788]  genl_rcv_msg+0xa75/0xe90
    [   59.646144][ T2788]  ? __lock_acquire+0xdfe/0x3de0
    [   59.646692][ T2788]  ? genl_family_rcv_msg_attrs_parse+0x320/0x320
    [   59.647340][ T2788]  ? genl_lock_dumpit+0xb0/0xb0
    [   59.647821][ T2788]  ? genl_unlock+0x20/0x20
    [   59.648290][ T2788]  ? genl_parallel_done+0xe0/0xe0
    [   59.648787][ T2788]  ? find_held_lock+0x39/0x1d0
    [   59.649276][ T2788]  ? genl_rcv+0x15/0x40
    [   59.649722][ T2788]  ? lock_contended+0xcd0/0xcd0
    [   59.650296][ T2788]  netlink_rcv_skb+0x121/0x350
    [   59.650828][ T2788]  ? genl_family_rcv_msg_attrs_parse+0x320/0x320
    [   59.651491][ T2788]  ? netlink_ack+0x940/0x940
    [   59.651953][ T2788]  ? lock_acquire+0x164/0x3b0
    [   59.652449][ T2788]  genl_rcv+0x24/0x40
    [   59.652841][ T2788]  netlink_unicast+0x421/0x600
    [ ... ]
    
    Fixes: 7e4369057806 ("tipc: fix a slab object leak")
    Fixes: a62fbccecd62 ("tipc: make subscriber server support net namespace")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9fe54cf41836fe761cbc5d154dda0d45d98d784c
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Fri Dec 6 05:25:48 2019 +0000

    tipc: fix ordering of tipc module init and exit routine
    
    [ Upstream commit 9cf1cd8ee3ee09ef2859017df2058e2f53c5347f ]
    
    In order to set/get/dump, the tipc uses the generic netlink
    infrastructure. So, when tipc module is inserted, init function
    calls genl_register_family().
    After genl_register_family(), set/get/dump commands are immediately
    allowed and these callbacks internally use the net_generic.
    net_generic is allocated by register_pernet_device() but this
    is called after genl_register_family() in the __init function.
    So, these callbacks would use un-initialized net_generic.
    
    Test commands:
        #SHELL1
        while :
        do
            modprobe tipc
            modprobe -rv tipc
        done
    
        #SHELL2
        while :
        do
            tipc link list
        done
    
    Splat looks like:
    [   59.616322][ T2788] kasan: CONFIG_KASAN_INLINE enabled
    [   59.617234][ T2788] kasan: GPF could be caused by NULL-ptr deref or user memory access
    [   59.618398][ T2788] general protection fault: 0000 [#1] SMP DEBUG_PAGEALLOC KASAN PTI
    [   59.619389][ T2788] CPU: 3 PID: 2788 Comm: tipc Not tainted 5.4.0+ #194
    [   59.620231][ T2788] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    [   59.621428][ T2788] RIP: 0010:tipc_bcast_get_broadcast_mode+0x131/0x310 [tipc]
    [   59.622379][ T2788] Code: c7 c6 ef 8b 38 c0 65 ff 0d 84 83 c9 3f e8 d7 a5 f2 e3 48 8d bb 38 11 00 00 48 b8 00 00 00 00
    [   59.622550][ T2780] NET: Registered protocol family 30
    [   59.624627][ T2788] RSP: 0018:ffff88804b09f578 EFLAGS: 00010202
    [   59.624630][ T2788] RAX: dffffc0000000000 RBX: 0000000000000011 RCX: 000000008bc66907
    [   59.624631][ T2788] RDX: 0000000000000229 RSI: 000000004b3cf4cc RDI: 0000000000001149
    [   59.624633][ T2788] RBP: ffff88804b09f588 R08: 0000000000000003 R09: fffffbfff4fb3df1
    [   59.624635][ T2788] R10: fffffbfff50318f8 R11: ffff888066cadc18 R12: ffffffffa6cc2f40
    [   59.624637][ T2788] R13: 1ffff11009613eba R14: ffff8880662e9328 R15: ffff8880662e9328
    [   59.624639][ T2788] FS:  00007f57d8f7b740(0000) GS:ffff88806cc00000(0000) knlGS:0000000000000000
    [   59.624645][ T2788] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   59.625875][ T2780] tipc: Started in single node mode
    [   59.626128][ T2788] CR2: 00007f57d887a8c0 CR3: 000000004b140002 CR4: 00000000000606e0
    [   59.633991][ T2788] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [   59.635195][ T2788] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [   59.636478][ T2788] Call Trace:
    [   59.637025][ T2788]  tipc_nl_add_bc_link+0x179/0x1470 [tipc]
    [   59.638219][ T2788]  ? lock_downgrade+0x6e0/0x6e0
    [   59.638923][ T2788]  ? __tipc_nl_add_link+0xf90/0xf90 [tipc]
    [   59.639533][ T2788]  ? tipc_nl_node_dump_link+0x318/0xa50 [tipc]
    [   59.640160][ T2788]  ? mutex_lock_io_nested+0x1380/0x1380
    [   59.640746][ T2788]  tipc_nl_node_dump_link+0x4fd/0xa50 [tipc]
    [   59.641356][ T2788]  ? tipc_nl_node_reset_link_stats+0x340/0x340 [tipc]
    [   59.642088][ T2788]  ? __skb_ext_del+0x270/0x270
    [   59.642594][ T2788]  genl_lock_dumpit+0x85/0xb0
    [   59.643050][ T2788]  netlink_dump+0x49c/0xed0
    [   59.643529][ T2788]  ? __netlink_sendskb+0xc0/0xc0
    [   59.644044][ T2788]  ? __netlink_dump_start+0x190/0x800
    [   59.644617][ T2788]  ? __mutex_unlock_slowpath+0xd0/0x670
    [   59.645177][ T2788]  __netlink_dump_start+0x5a0/0x800
    [   59.645692][ T2788]  genl_rcv_msg+0xa75/0xe90
    [   59.646144][ T2788]  ? __lock_acquire+0xdfe/0x3de0
    [   59.646692][ T2788]  ? genl_family_rcv_msg_attrs_parse+0x320/0x320
    [   59.647340][ T2788]  ? genl_lock_dumpit+0xb0/0xb0
    [   59.647821][ T2788]  ? genl_unlock+0x20/0x20
    [   59.648290][ T2788]  ? genl_parallel_done+0xe0/0xe0
    [   59.648787][ T2788]  ? find_held_lock+0x39/0x1d0
    [   59.649276][ T2788]  ? genl_rcv+0x15/0x40
    [   59.649722][ T2788]  ? lock_contended+0xcd0/0xcd0
    [   59.650296][ T2788]  netlink_rcv_skb+0x121/0x350
    [   59.650828][ T2788]  ? genl_family_rcv_msg_attrs_parse+0x320/0x320
    [   59.651491][ T2788]  ? netlink_ack+0x940/0x940
    [   59.651953][ T2788]  ? lock_acquire+0x164/0x3b0
    [   59.652449][ T2788]  genl_rcv+0x24/0x40
    [   59.652841][ T2788]  netlink_unicast+0x421/0x600
    [ ... ]
    
    Fixes: 7e4369057806 ("tipc: fix a slab object leak")
    Fixes: a62fbccecd62 ("tipc: make subscriber server support net namespace")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dddfb252f6c0ba4c357f0f3ffb098ad255019e47
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Fri Dec 6 05:25:48 2019 +0000

    tipc: fix ordering of tipc module init and exit routine
    
    [ Upstream commit 9cf1cd8ee3ee09ef2859017df2058e2f53c5347f ]
    
    In order to set/get/dump, the tipc uses the generic netlink
    infrastructure. So, when tipc module is inserted, init function
    calls genl_register_family().
    After genl_register_family(), set/get/dump commands are immediately
    allowed and these callbacks internally use the net_generic.
    net_generic is allocated by register_pernet_device() but this
    is called after genl_register_family() in the __init function.
    So, these callbacks would use un-initialized net_generic.
    
    Test commands:
        #SHELL1
        while :
        do
            modprobe tipc
            modprobe -rv tipc
        done
    
        #SHELL2
        while :
        do
            tipc link list
        done
    
    Splat looks like:
    [   59.616322][ T2788] kasan: CONFIG_KASAN_INLINE enabled
    [   59.617234][ T2788] kasan: GPF could be caused by NULL-ptr deref or user memory access
    [   59.618398][ T2788] general protection fault: 0000 [#1] SMP DEBUG_PAGEALLOC KASAN PTI
    [   59.619389][ T2788] CPU: 3 PID: 2788 Comm: tipc Not tainted 5.4.0+ #194
    [   59.620231][ T2788] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    [   59.621428][ T2788] RIP: 0010:tipc_bcast_get_broadcast_mode+0x131/0x310 [tipc]
    [   59.622379][ T2788] Code: c7 c6 ef 8b 38 c0 65 ff 0d 84 83 c9 3f e8 d7 a5 f2 e3 48 8d bb 38 11 00 00 48 b8 00 00 00 00
    [   59.622550][ T2780] NET: Registered protocol family 30
    [   59.624627][ T2788] RSP: 0018:ffff88804b09f578 EFLAGS: 00010202
    [   59.624630][ T2788] RAX: dffffc0000000000 RBX: 0000000000000011 RCX: 000000008bc66907
    [   59.624631][ T2788] RDX: 0000000000000229 RSI: 000000004b3cf4cc RDI: 0000000000001149
    [   59.624633][ T2788] RBP: ffff88804b09f588 R08: 0000000000000003 R09: fffffbfff4fb3df1
    [   59.624635][ T2788] R10: fffffbfff50318f8 R11: ffff888066cadc18 R12: ffffffffa6cc2f40
    [   59.624637][ T2788] R13: 1ffff11009613eba R14: ffff8880662e9328 R15: ffff8880662e9328
    [   59.624639][ T2788] FS:  00007f57d8f7b740(0000) GS:ffff88806cc00000(0000) knlGS:0000000000000000
    [   59.624645][ T2788] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   59.625875][ T2780] tipc: Started in single node mode
    [   59.626128][ T2788] CR2: 00007f57d887a8c0 CR3: 000000004b140002 CR4: 00000000000606e0
    [   59.633991][ T2788] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [   59.635195][ T2788] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [   59.636478][ T2788] Call Trace:
    [   59.637025][ T2788]  tipc_nl_add_bc_link+0x179/0x1470 [tipc]
    [   59.638219][ T2788]  ? lock_downgrade+0x6e0/0x6e0
    [   59.638923][ T2788]  ? __tipc_nl_add_link+0xf90/0xf90 [tipc]
    [   59.639533][ T2788]  ? tipc_nl_node_dump_link+0x318/0xa50 [tipc]
    [   59.640160][ T2788]  ? mutex_lock_io_nested+0x1380/0x1380
    [   59.640746][ T2788]  tipc_nl_node_dump_link+0x4fd/0xa50 [tipc]
    [   59.641356][ T2788]  ? tipc_nl_node_reset_link_stats+0x340/0x340 [tipc]
    [   59.642088][ T2788]  ? __skb_ext_del+0x270/0x270
    [   59.642594][ T2788]  genl_lock_dumpit+0x85/0xb0
    [   59.643050][ T2788]  netlink_dump+0x49c/0xed0
    [   59.643529][ T2788]  ? __netlink_sendskb+0xc0/0xc0
    [   59.644044][ T2788]  ? __netlink_dump_start+0x190/0x800
    [   59.644617][ T2788]  ? __mutex_unlock_slowpath+0xd0/0x670
    [   59.645177][ T2788]  __netlink_dump_start+0x5a0/0x800
    [   59.645692][ T2788]  genl_rcv_msg+0xa75/0xe90
    [   59.646144][ T2788]  ? __lock_acquire+0xdfe/0x3de0
    [   59.646692][ T2788]  ? genl_family_rcv_msg_attrs_parse+0x320/0x320
    [   59.647340][ T2788]  ? genl_lock_dumpit+0xb0/0xb0
    [   59.647821][ T2788]  ? genl_unlock+0x20/0x20
    [   59.648290][ T2788]  ? genl_parallel_done+0xe0/0xe0
    [   59.648787][ T2788]  ? find_held_lock+0x39/0x1d0
    [   59.649276][ T2788]  ? genl_rcv+0x15/0x40
    [   59.649722][ T2788]  ? lock_contended+0xcd0/0xcd0
    [   59.650296][ T2788]  netlink_rcv_skb+0x121/0x350
    [   59.650828][ T2788]  ? genl_family_rcv_msg_attrs_parse+0x320/0x320
    [   59.651491][ T2788]  ? netlink_ack+0x940/0x940
    [   59.651953][ T2788]  ? lock_acquire+0x164/0x3b0
    [   59.652449][ T2788]  genl_rcv+0x24/0x40
    [   59.652841][ T2788]  netlink_unicast+0x421/0x600
    [ ... ]
    
    Fixes: 7e4369057806 ("tipc: fix a slab object leak")
    Fixes: a62fbccecd62 ("tipc: make subscriber server support net namespace")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a8a7be3f379aa125d5d4fdc47db37cf33a3c48a0
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Fri Dec 6 05:25:48 2019 +0000

    tipc: fix ordering of tipc module init and exit routine
    
    [ Upstream commit 9cf1cd8ee3ee09ef2859017df2058e2f53c5347f ]
    
    In order to set/get/dump, the tipc uses the generic netlink
    infrastructure. So, when tipc module is inserted, init function
    calls genl_register_family().
    After genl_register_family(), set/get/dump commands are immediately
    allowed and these callbacks internally use the net_generic.
    net_generic is allocated by register_pernet_device() but this
    is called after genl_register_family() in the __init function.
    So, these callbacks would use un-initialized net_generic.
    
    Test commands:
        #SHELL1
        while :
        do
            modprobe tipc
            modprobe -rv tipc
        done
    
        #SHELL2
        while :
        do
            tipc link list
        done
    
    Splat looks like:
    [   59.616322][ T2788] kasan: CONFIG_KASAN_INLINE enabled
    [   59.617234][ T2788] kasan: GPF could be caused by NULL-ptr deref or user memory access
    [   59.618398][ T2788] general protection fault: 0000 [#1] SMP DEBUG_PAGEALLOC KASAN PTI
    [   59.619389][ T2788] CPU: 3 PID: 2788 Comm: tipc Not tainted 5.4.0+ #194
    [   59.620231][ T2788] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    [   59.621428][ T2788] RIP: 0010:tipc_bcast_get_broadcast_mode+0x131/0x310 [tipc]
    [   59.622379][ T2788] Code: c7 c6 ef 8b 38 c0 65 ff 0d 84 83 c9 3f e8 d7 a5 f2 e3 48 8d bb 38 11 00 00 48 b8 00 00 00 00
    [   59.622550][ T2780] NET: Registered protocol family 30
    [   59.624627][ T2788] RSP: 0018:ffff88804b09f578 EFLAGS: 00010202
    [   59.624630][ T2788] RAX: dffffc0000000000 RBX: 0000000000000011 RCX: 000000008bc66907
    [   59.624631][ T2788] RDX: 0000000000000229 RSI: 000000004b3cf4cc RDI: 0000000000001149
    [   59.624633][ T2788] RBP: ffff88804b09f588 R08: 0000000000000003 R09: fffffbfff4fb3df1
    [   59.624635][ T2788] R10: fffffbfff50318f8 R11: ffff888066cadc18 R12: ffffffffa6cc2f40
    [   59.624637][ T2788] R13: 1ffff11009613eba R14: ffff8880662e9328 R15: ffff8880662e9328
    [   59.624639][ T2788] FS:  00007f57d8f7b740(0000) GS:ffff88806cc00000(0000) knlGS:0000000000000000
    [   59.624645][ T2788] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   59.625875][ T2780] tipc: Started in single node mode
    [   59.626128][ T2788] CR2: 00007f57d887a8c0 CR3: 000000004b140002 CR4: 00000000000606e0
    [   59.633991][ T2788] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [   59.635195][ T2788] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [   59.636478][ T2788] Call Trace:
    [   59.637025][ T2788]  tipc_nl_add_bc_link+0x179/0x1470 [tipc]
    [   59.638219][ T2788]  ? lock_downgrade+0x6e0/0x6e0
    [   59.638923][ T2788]  ? __tipc_nl_add_link+0xf90/0xf90 [tipc]
    [   59.639533][ T2788]  ? tipc_nl_node_dump_link+0x318/0xa50 [tipc]
    [   59.640160][ T2788]  ? mutex_lock_io_nested+0x1380/0x1380
    [   59.640746][ T2788]  tipc_nl_node_dump_link+0x4fd/0xa50 [tipc]
    [   59.641356][ T2788]  ? tipc_nl_node_reset_link_stats+0x340/0x340 [tipc]
    [   59.642088][ T2788]  ? __skb_ext_del+0x270/0x270
    [   59.642594][ T2788]  genl_lock_dumpit+0x85/0xb0
    [   59.643050][ T2788]  netlink_dump+0x49c/0xed0
    [   59.643529][ T2788]  ? __netlink_sendskb+0xc0/0xc0
    [   59.644044][ T2788]  ? __netlink_dump_start+0x190/0x800
    [   59.644617][ T2788]  ? __mutex_unlock_slowpath+0xd0/0x670
    [   59.645177][ T2788]  __netlink_dump_start+0x5a0/0x800
    [   59.645692][ T2788]  genl_rcv_msg+0xa75/0xe90
    [   59.646144][ T2788]  ? __lock_acquire+0xdfe/0x3de0
    [   59.646692][ T2788]  ? genl_family_rcv_msg_attrs_parse+0x320/0x320
    [   59.647340][ T2788]  ? genl_lock_dumpit+0xb0/0xb0
    [   59.647821][ T2788]  ? genl_unlock+0x20/0x20
    [   59.648290][ T2788]  ? genl_parallel_done+0xe0/0xe0
    [   59.648787][ T2788]  ? find_held_lock+0x39/0x1d0
    [   59.649276][ T2788]  ? genl_rcv+0x15/0x40
    [   59.649722][ T2788]  ? lock_contended+0xcd0/0xcd0
    [   59.650296][ T2788]  netlink_rcv_skb+0x121/0x350
    [   59.650828][ T2788]  ? genl_family_rcv_msg_attrs_parse+0x320/0x320
    [   59.651491][ T2788]  ? netlink_ack+0x940/0x940
    [   59.651953][ T2788]  ? lock_acquire+0x164/0x3b0
    [   59.652449][ T2788]  genl_rcv+0x24/0x40
    [   59.652841][ T2788]  netlink_unicast+0x421/0x600
    [ ... ]
    
    Fixes: 7e4369057806 ("tipc: fix a slab object leak")
    Fixes: a62fbccecd62 ("tipc: make subscriber server support net namespace")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e1b5e598e5a51b453328879682b178b4acc15105
Author: John Rutherford <john.rutherford@dektech.com.au>
Date:   Thu Dec 19 16:03:57 2019 +1100

    tipc: make legacy address flag readable over netlink
    
    To enable iproute2/tipc to generate backwards compatible
    printouts and validate command parameters for nodes using a
    <z.c.n> node address, it needs to be able to read the legacy
    address flag from the kernel.  The legacy address flag records
    the way in which the node identity was originally specified.
    
    The legacy address flag is requested by the netlink message
    TIPC_NL_ADDR_LEGACY_GET.  If the flag is set the attribute
    TIPC_NLA_NET_ADDR_LEGACY is set in the return message.
    
    Signed-off-by: John Rutherford <john.rutherford@dektech.com.au>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0703996ff4a1344e7bab4f35d933c1ee75d78a79
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Fri Dec 6 05:25:48 2019 +0000

    tipc: fix ordering of tipc module init and exit routine
    
    [ Upstream commit 9cf1cd8ee3ee09ef2859017df2058e2f53c5347f ]
    
    In order to set/get/dump, the tipc uses the generic netlink
    infrastructure. So, when tipc module is inserted, init function
    calls genl_register_family().
    After genl_register_family(), set/get/dump commands are immediately
    allowed and these callbacks internally use the net_generic.
    net_generic is allocated by register_pernet_device() but this
    is called after genl_register_family() in the __init function.
    So, these callbacks would use un-initialized net_generic.
    
    Test commands:
        #SHELL1
        while :
        do
            modprobe tipc
            modprobe -rv tipc
        done
    
        #SHELL2
        while :
        do
            tipc link list
        done
    
    Splat looks like:
    [   59.616322][ T2788] kasan: CONFIG_KASAN_INLINE enabled
    [   59.617234][ T2788] kasan: GPF could be caused by NULL-ptr deref or user memory access
    [   59.618398][ T2788] general protection fault: 0000 [#1] SMP DEBUG_PAGEALLOC KASAN PTI
    [   59.619389][ T2788] CPU: 3 PID: 2788 Comm: tipc Not tainted 5.4.0+ #194
    [   59.620231][ T2788] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    [   59.621428][ T2788] RIP: 0010:tipc_bcast_get_broadcast_mode+0x131/0x310 [tipc]
    [   59.622379][ T2788] Code: c7 c6 ef 8b 38 c0 65 ff 0d 84 83 c9 3f e8 d7 a5 f2 e3 48 8d bb 38 11 00 00 48 b8 00 00 00 00
    [   59.622550][ T2780] NET: Registered protocol family 30
    [   59.624627][ T2788] RSP: 0018:ffff88804b09f578 EFLAGS: 00010202
    [   59.624630][ T2788] RAX: dffffc0000000000 RBX: 0000000000000011 RCX: 000000008bc66907
    [   59.624631][ T2788] RDX: 0000000000000229 RSI: 000000004b3cf4cc RDI: 0000000000001149
    [   59.624633][ T2788] RBP: ffff88804b09f588 R08: 0000000000000003 R09: fffffbfff4fb3df1
    [   59.624635][ T2788] R10: fffffbfff50318f8 R11: ffff888066cadc18 R12: ffffffffa6cc2f40
    [   59.624637][ T2788] R13: 1ffff11009613eba R14: ffff8880662e9328 R15: ffff8880662e9328
    [   59.624639][ T2788] FS:  00007f57d8f7b740(0000) GS:ffff88806cc00000(0000) knlGS:0000000000000000
    [   59.624645][ T2788] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   59.625875][ T2780] tipc: Started in single node mode
    [   59.626128][ T2788] CR2: 00007f57d887a8c0 CR3: 000000004b140002 CR4: 00000000000606e0
    [   59.633991][ T2788] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [   59.635195][ T2788] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [   59.636478][ T2788] Call Trace:
    [   59.637025][ T2788]  tipc_nl_add_bc_link+0x179/0x1470 [tipc]
    [   59.638219][ T2788]  ? lock_downgrade+0x6e0/0x6e0
    [   59.638923][ T2788]  ? __tipc_nl_add_link+0xf90/0xf90 [tipc]
    [   59.639533][ T2788]  ? tipc_nl_node_dump_link+0x318/0xa50 [tipc]
    [   59.640160][ T2788]  ? mutex_lock_io_nested+0x1380/0x1380
    [   59.640746][ T2788]  tipc_nl_node_dump_link+0x4fd/0xa50 [tipc]
    [   59.641356][ T2788]  ? tipc_nl_node_reset_link_stats+0x340/0x340 [tipc]
    [   59.642088][ T2788]  ? __skb_ext_del+0x270/0x270
    [   59.642594][ T2788]  genl_lock_dumpit+0x85/0xb0
    [   59.643050][ T2788]  netlink_dump+0x49c/0xed0
    [   59.643529][ T2788]  ? __netlink_sendskb+0xc0/0xc0
    [   59.644044][ T2788]  ? __netlink_dump_start+0x190/0x800
    [   59.644617][ T2788]  ? __mutex_unlock_slowpath+0xd0/0x670
    [   59.645177][ T2788]  __netlink_dump_start+0x5a0/0x800
    [   59.645692][ T2788]  genl_rcv_msg+0xa75/0xe90
    [   59.646144][ T2788]  ? __lock_acquire+0xdfe/0x3de0
    [   59.646692][ T2788]  ? genl_family_rcv_msg_attrs_parse+0x320/0x320
    [   59.647340][ T2788]  ? genl_lock_dumpit+0xb0/0xb0
    [   59.647821][ T2788]  ? genl_unlock+0x20/0x20
    [   59.648290][ T2788]  ? genl_parallel_done+0xe0/0xe0
    [   59.648787][ T2788]  ? find_held_lock+0x39/0x1d0
    [   59.649276][ T2788]  ? genl_rcv+0x15/0x40
    [   59.649722][ T2788]  ? lock_contended+0xcd0/0xcd0
    [   59.650296][ T2788]  netlink_rcv_skb+0x121/0x350
    [   59.650828][ T2788]  ? genl_family_rcv_msg_attrs_parse+0x320/0x320
    [   59.651491][ T2788]  ? netlink_ack+0x940/0x940
    [   59.651953][ T2788]  ? lock_acquire+0x164/0x3b0
    [   59.652449][ T2788]  genl_rcv+0x24/0x40
    [   59.652841][ T2788]  netlink_unicast+0x421/0x600
    [ ... ]
    
    Fixes: 7e4369057806 ("tipc: fix a slab object leak")
    Fixes: a62fbccecd62 ("tipc: make subscriber server support net namespace")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a3873b4c8a62b2621ed9e8eded198bfeef3023e8
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Fri Dec 6 05:25:48 2019 +0000

    tipc: fix ordering of tipc module init and exit routine
    
    [ Upstream commit 9cf1cd8ee3ee09ef2859017df2058e2f53c5347f ]
    
    In order to set/get/dump, the tipc uses the generic netlink
    infrastructure. So, when tipc module is inserted, init function
    calls genl_register_family().
    After genl_register_family(), set/get/dump commands are immediately
    allowed and these callbacks internally use the net_generic.
    net_generic is allocated by register_pernet_device() but this
    is called after genl_register_family() in the __init function.
    So, these callbacks would use un-initialized net_generic.
    
    Test commands:
        #SHELL1
        while :
        do
            modprobe tipc
            modprobe -rv tipc
        done
    
        #SHELL2
        while :
        do
            tipc link list
        done
    
    Splat looks like:
    [   59.616322][ T2788] kasan: CONFIG_KASAN_INLINE enabled
    [   59.617234][ T2788] kasan: GPF could be caused by NULL-ptr deref or user memory access
    [   59.618398][ T2788] general protection fault: 0000 [#1] SMP DEBUG_PAGEALLOC KASAN PTI
    [   59.619389][ T2788] CPU: 3 PID: 2788 Comm: tipc Not tainted 5.4.0+ #194
    [   59.620231][ T2788] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    [   59.621428][ T2788] RIP: 0010:tipc_bcast_get_broadcast_mode+0x131/0x310 [tipc]
    [   59.622379][ T2788] Code: c7 c6 ef 8b 38 c0 65 ff 0d 84 83 c9 3f e8 d7 a5 f2 e3 48 8d bb 38 11 00 00 48 b8 00 00 00 00
    [   59.622550][ T2780] NET: Registered protocol family 30
    [   59.624627][ T2788] RSP: 0018:ffff88804b09f578 EFLAGS: 00010202
    [   59.624630][ T2788] RAX: dffffc0000000000 RBX: 0000000000000011 RCX: 000000008bc66907
    [   59.624631][ T2788] RDX: 0000000000000229 RSI: 000000004b3cf4cc RDI: 0000000000001149
    [   59.624633][ T2788] RBP: ffff88804b09f588 R08: 0000000000000003 R09: fffffbfff4fb3df1
    [   59.624635][ T2788] R10: fffffbfff50318f8 R11: ffff888066cadc18 R12: ffffffffa6cc2f40
    [   59.624637][ T2788] R13: 1ffff11009613eba R14: ffff8880662e9328 R15: ffff8880662e9328
    [   59.624639][ T2788] FS:  00007f57d8f7b740(0000) GS:ffff88806cc00000(0000) knlGS:0000000000000000
    [   59.624645][ T2788] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   59.625875][ T2780] tipc: Started in single node mode
    [   59.626128][ T2788] CR2: 00007f57d887a8c0 CR3: 000000004b140002 CR4: 00000000000606e0
    [   59.633991][ T2788] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [   59.635195][ T2788] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [   59.636478][ T2788] Call Trace:
    [   59.637025][ T2788]  tipc_nl_add_bc_link+0x179/0x1470 [tipc]
    [   59.638219][ T2788]  ? lock_downgrade+0x6e0/0x6e0
    [   59.638923][ T2788]  ? __tipc_nl_add_link+0xf90/0xf90 [tipc]
    [   59.639533][ T2788]  ? tipc_nl_node_dump_link+0x318/0xa50 [tipc]
    [   59.640160][ T2788]  ? mutex_lock_io_nested+0x1380/0x1380
    [   59.640746][ T2788]  tipc_nl_node_dump_link+0x4fd/0xa50 [tipc]
    [   59.641356][ T2788]  ? tipc_nl_node_reset_link_stats+0x340/0x340 [tipc]
    [   59.642088][ T2788]  ? __skb_ext_del+0x270/0x270
    [   59.642594][ T2788]  genl_lock_dumpit+0x85/0xb0
    [   59.643050][ T2788]  netlink_dump+0x49c/0xed0
    [   59.643529][ T2788]  ? __netlink_sendskb+0xc0/0xc0
    [   59.644044][ T2788]  ? __netlink_dump_start+0x190/0x800
    [   59.644617][ T2788]  ? __mutex_unlock_slowpath+0xd0/0x670
    [   59.645177][ T2788]  __netlink_dump_start+0x5a0/0x800
    [   59.645692][ T2788]  genl_rcv_msg+0xa75/0xe90
    [   59.646144][ T2788]  ? __lock_acquire+0xdfe/0x3de0
    [   59.646692][ T2788]  ? genl_family_rcv_msg_attrs_parse+0x320/0x320
    [   59.647340][ T2788]  ? genl_lock_dumpit+0xb0/0xb0
    [   59.647821][ T2788]  ? genl_unlock+0x20/0x20
    [   59.648290][ T2788]  ? genl_parallel_done+0xe0/0xe0
    [   59.648787][ T2788]  ? find_held_lock+0x39/0x1d0
    [   59.649276][ T2788]  ? genl_rcv+0x15/0x40
    [   59.649722][ T2788]  ? lock_contended+0xcd0/0xcd0
    [   59.650296][ T2788]  netlink_rcv_skb+0x121/0x350
    [   59.650828][ T2788]  ? genl_family_rcv_msg_attrs_parse+0x320/0x320
    [   59.651491][ T2788]  ? netlink_ack+0x940/0x940
    [   59.651953][ T2788]  ? lock_acquire+0x164/0x3b0
    [   59.652449][ T2788]  genl_rcv+0x24/0x40
    [   59.652841][ T2788]  netlink_unicast+0x421/0x600
    [ ... ]
    
    Fixes: 7e4369057806 ("tipc: fix a slab object leak")
    Fixes: a62fbccecd62 ("tipc: make subscriber server support net namespace")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b7ffa045e7000d5410bf206454e0cb8de0428ed5
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Mon Dec 16 19:21:02 2019 +0100

    tipc: don't send gap blocks in ACK messages
    
    In the commit referred to below we eliminated sending of the 'gap'
    indicator in regular ACK messages, reserving this to explicit NACK
    ditto.
    
    Unfortunately we missed to also eliminate building of the 'gap block'
    area in ACK messages. This area is meant to report gaps in the
    received packet sequence following the initial gap, so that lost
    packets can be retransmitted earlier and received out-of-sequence
    packets can be released earlier. However, the interpretation of those
    blocks is dependent on a complete and correct sequence of gaps and
    acks. Hence, when the initial gap indicator is missing a single gap
    block will be interpreted as an acknowledgment of all preceding
    packets. This may lead to packets being released prematurely from the
    sender's transmit queue, with easily predicatble consequences.
    
    We now fix this by not building any gap block area if there is no
    initial gap to report.
    
    Fixes: commit 02288248b051 ("tipc: eliminate gap indicator from ACK messages")
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1a271ebbfe33a44f61e02d35a2950ab00b32850b
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Mon Dec 9 19:13:45 2019 -0800

    net/tipc: Replace rcu_swap_protected() with rcu_replace_pointer()
    
    This commit replaces the use of rcu_swap_protected() with the more
    intuitively appealing rcu_replace_pointer() as a step towards removing
    rcu_swap_protected().
    
    Link: https://lore.kernel.org/lkml/CAHk-=wiAsJLw1egFEE=Z7-GGtM6wcvtyytXZA1+BHqta4gg6Hw@mail.gmail.com/
    Reported-by: Linus Torvalds <torvalds@linux-foundation.org>
    Reported-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>
    [ paulmck: Updated based on Ying Xue and Tuong Lien Tong feedback. ]
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: <netdev@vger.kernel.org>
    Cc: <tipc-discussion@lists.sourceforge.net>

commit f1ce0a155723cc41d814b350b0e01998f82f7ec1
Merge: ac397934b39f 31e4ccc99eda
Author: David S. Miller <davem@davemloft.net>
Date:   Tue Dec 10 17:45:04 2019 -0800

    Merge branch 'tipc-fix-some-issues'
    
    Tuong Lien says:
    
    ====================
    tipc: fix some issues
    
    This series consists of some bug-fixes for TIPC.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 31e4ccc99eda8a5a7e6902c98bee6e78ffd3edb9
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Tue Dec 10 15:21:05 2019 +0700

    tipc: fix use-after-free in tipc_disc_rcv()
    
    In the function 'tipc_disc_rcv()', the 'msg_peer_net_hash()' is called
    to read the header data field but after the message skb has been freed,
    that might result in a garbage value...
    
    This commit fixes it by defining a new local variable to store the data
    first, just like the other header fields' handling.
    
    Fixes: f73b12812a3d ("tipc: improve throughput between nodes in netns")
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit abc9b4e0549b93fdaff56e9532bc49a2d7b04955
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Tue Dec 10 15:21:04 2019 +0700

    tipc: fix retrans failure due to wrong destination
    
    When a user message is sent, TIPC will check if the socket has faced a
    congestion at link layer. If that happens, it will make a sleep to wait
    for the congestion to disappear. This leaves a gap for other users to
    take over the socket (e.g. multi threads) since the socket is released
    as well. Also, in case of connectionless (e.g. SOCK_RDM), user is free
    to send messages to various destinations (e.g. via 'sendto()'), then
    the socket's preformatted header has to be updated correspondingly
    prior to the actual payload message building.
    
    Unfortunately, the latter action is done before the first action which
    causes a condition issue that the destination of a certain message can
    be modified incorrectly in the middle, leading to wrong destination
    when that message is built. Consequently, when the message is sent to
    the link layer, it gets stuck there forever because the peer node will
    simply reject it. After a number of retransmission attempts, the link
    is eventually taken down and the retransmission failure is reported.
    
    This commit fixes the problem by rearranging the order of actions to
    prevent the race condition from occurring, so the message building is
    'atomic' and its header will not be modified by anyone.
    
    Fixes: 365ad353c256 ("tipc: reduce risk of user starvation during link congestion")
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit dca4a17d24ee9d878836ce5eb8dc25be1ffa5729
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Tue Dec 10 15:21:03 2019 +0700

    tipc: fix potential hanging after b/rcast changing
    
    In commit c55c8edafa91 ("tipc: smooth change between replicast and
    broadcast"), we allow instant switching between replicast and broadcast
    by sending a dummy 'SYN' packet on the last used link to synchronize
    packets on the links. The 'SYN' message is an object of link congestion
    also, so if that happens, a 'SOCK_WAKEUP' will be scheduled to be sent
    back to the socket...
    However, in that commit, we simply use the same socket 'cong_link_cnt'
    counter for both the 'SYN' & normal payload message sending. Therefore,
    if both the replicast & broadcast links are congested, the counter will
    be not updated correctly but overwritten by the latter congestion.
    Later on, when the 'SOCK_WAKEUP' messages are processed, the counter is
    reduced one by one and eventually overflowed. Consequently, further
    activities on the socket will only wait for the false congestion signal
    to disappear but never been met.
    
    Because sending the 'SYN' message is vital for the mechanism, it should
    be done anyway. This commit fixes the issue by marking the message with
    an error code e.g. 'TIPC_ERR_NO_PORT', so its sending should not face a
    link congestion, there is no need to touch the socket 'cong_link_cnt'
    either. In addition, in the event of any error (e.g. -ENOBUFS), we will
    purge the entire payload message queue and make a return immediately.
    
    Fixes: c55c8edafa91 ("tipc: smooth change between replicast and broadcast")
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d5162f341e9625d00a275d5cbe55432e6627c3bf
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Tue Dec 10 15:21:02 2019 +0700

    tipc: fix name table rbtree issues
    
    The current rbtree for service ranges in the name table is built based
    on the 'lower' & 'upper' range values resulting in a flaw in the rbtree
    searching. Some issues have been observed in case of range overlapping:
    
    Case #1: unable to withdraw a name entry:
    After some name services are bound, all of them are withdrawn by user
    but one remains in the name table forever. This corrupts the table and
    that service becomes dummy i.e. no real port.
    E.g.
    
                    /
               {22, 22}
                  /
                 /
       --->  {10, 50}
               /  \
              /    \
        {10, 30}  {20, 60}
    
    The node {10, 30} cannot be removed since the rbtree searching stops at
    the node's ancestor i.e. {10, 50}, so starting from it will never reach
    the finding node.
    
    Case #2: failed to send data in some cases:
    E.g. Two service ranges: {20, 60}, {10, 50} are bound. The rbtree for
    this service will be one of the two cases below depending on the order
    of the bindings:
    
            {20, 60}             {10, 50} <--
              /  \                 /  \
             /    \               /    \
        {10, 50}  NIL <--       NIL  {20, 60}
    
              (a)                    (b)
    
    Now, try to send some data to service {30}, there will be two results:
    (a): Failed, no route to host.
    (b): Ok.
    
    The reason is that the rbtree searching will stop at the pointing node
    as shown above.
    
    Case #3: Same as case #2b above but if the data sending's scope is
    local and the {10, 50} is published by a peer node, then it will result
    in 'no route to host' even though the other {20, 60} is for example on
    the local node which should be able to get the data.
    
    The issues are actually due to the way we built the rbtree. This commit
    fixes it by introducing an additional field to each node - named 'max',
    which is the largest 'upper' of that node subtree. The 'max' value for
    each subtrees will be propagated correctly whenever a node is inserted/
    removed or the tree is rebalanced by the augmented rbtree callbacks.
    
    By this way, we can change the rbtree searching appoarch to solve the
    issues above. Another benefit from this is that we can now improve the
    searching for a next range matching e.g. in case of multicast, so get
    rid of the unneeded looping over all nodes in the tree.
    
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit bb9d8454bb0fed028558d1e66b12d50db5e43e06
Merge: 08cbc75f9602 16ad3f4022bb
Author: David S. Miller <davem@davemloft.net>
Date:   Tue Dec 10 17:31:15 2019 -0800

    Merge branch 'tipc-introduce-variable-window-congestion-control'
    
    Jon Maloy says:
    
    ====================
    tipc: introduce variable window congestion control
    
    We improve thoughput greatly by introducing a variety of the Reno
    congestion control algorithm at the link level.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 16ad3f4022bb53c7541a0bf0410b32d0231ebef9
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Tue Dec 10 00:52:46 2019 +0100

    tipc: introduce variable window congestion control
    
    We introduce a simple variable window congestion control for links.
    The algorithm is inspired by the Reno algorithm, covering both 'slow
    start', 'congestion avoidance', and 'fast recovery' modes.
    
    - We introduce hard lower and upper window limits per link, still
      different and configurable per bearer type.
    
    - We introduce a 'slow start theshold' variable, initially set to
      the maximum window size.
    
    - We let a link start at the minimum congestion window, i.e. in slow
      start mode, and then let is grow rapidly (+1 per rceived ACK) until
      it reaches the slow start threshold and enters congestion avoidance
      mode.
    
    - In congestion avoidance mode we increment the congestion window for
      each window-size number of acked packets, up to a possible maximum
      equal to the configured maximum window.
    
    - For each non-duplicate NACK received, we drop back to fast recovery
      mode, by setting the both the slow start threshold to and the
      congestion window to (current_congestion_window / 2).
    
    - If the timeout handler finds that the transmit queue has not moved
      since the previous timeout, it drops the link back to slow start
      and forces a probe containing the last sent sequence number to the
      sent to the peer, so that this can discover the stale situation.
    
    This change does in reality have effect only on unicast ethernet
    transport, as we have seen that there is no room whatsoever for
    increasing the window max size for the UDP bearer.
    For now, we also choose to keep the limits for the broadcast link
    unchanged and equal.
    
    This algorithm seems to give a 50-100% throughput improvement for
    messages larger than MTU.
    
    Suggested-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d3b09995ab930df225929b4153b7187f1bb8a396
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Tue Dec 10 00:52:45 2019 +0100

    tipc: eliminate more unnecessary nacks and retransmissions
    
    When we increase the link tranmsit window we often observe the following
    scenario:
    
    1) A STATE message bypasses a sequence of traffic packets and arrives
       far ahead of those to the receiver. STATE messages contain a
       'peers_nxt_snt' field to indicate which was the last packet sent
       from the peer. This mechanism is intended as a last resort for the
       receiver to detect missing packets, e.g., during very low traffic
       when there is no packet flow to help early loss detection.
    3) The receiving link compares the 'peer_nxt_snt' field to its own
       'rcv_nxt', finds that there is a gap, and immediately sends a
       NACK message back to the peer.
    4) When this NACKs arrives at the sender, all the requested
       retransmissions are performed, since it is a first-time request.
    
    Just like in the scenario described in the previous commit this leads
    to many redundant retransmissions, with decreased throughput as a
    consequence.
    
    We fix this by adding two more conditions before we send a NACK in
    this sitution. First, the deferred queue must be empty, so we cannot
    assume that the potential packet loss has already been detected by
    other means. Second, we check the 'peers_snd_nxt' field only in probe/
    probe_reply messages, thus turning this into a true mechanism of last
    resort as it was really meant to be.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 02288248b051ae9a9438278148f44bdfb0a4068b
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Tue Dec 10 00:52:44 2019 +0100

    tipc: eliminate gap indicator from ACK messages
    
    When we increase the link send window we sometimes observe the
    following scenario:
    
    1) A packet #N arrives out of order far ahead of a sequence of older
       packets which are still under way. The packet is added to the
       deferred queue.
    2) The missing packets arrive in sequence, and for each 16th of them
       an ACK is sent back to the receiver, as it should be.
    3) When building those ACK messages, it is checked if there is a gap
       between the link's 'rcv_nxt' and the first packet in the deferred
       queue. This is always the case until packet number #N-1 arrives, and
       a 'gap' indicator is added, effectively turning them into NACK
       messages.
    4) When those NACKs arrive at the sender, all the requested
       retransmissions are done, since it is a first-time request.
    
    This sometimes leads to a huge amount of redundant retransmissions,
    causing a drop in max throughput. This problem gets worse when we
    in a later commit introduce variable window congestion control,
    since it drops the link back to 'fast recovery' much more often
    than necessary.
    
    We now fix this by not sending any 'gap' indicator in regular ACK
    messages. We already have a mechanism for sending explicit NACKs
    in place, and this is sufficient to keep up the packet flow.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9cf1cd8ee3ee09ef2859017df2058e2f53c5347f
Author: Taehee Yoo <ap420073@gmail.com>
Date:   Fri Dec 6 05:25:48 2019 +0000

    tipc: fix ordering of tipc module init and exit routine
    
    In order to set/get/dump, the tipc uses the generic netlink
    infrastructure. So, when tipc module is inserted, init function
    calls genl_register_family().
    After genl_register_family(), set/get/dump commands are immediately
    allowed and these callbacks internally use the net_generic.
    net_generic is allocated by register_pernet_device() but this
    is called after genl_register_family() in the __init function.
    So, these callbacks would use un-initialized net_generic.
    
    Test commands:
        #SHELL1
        while :
        do
            modprobe tipc
            modprobe -rv tipc
        done
    
        #SHELL2
        while :
        do
            tipc link list
        done
    
    Splat looks like:
    [   59.616322][ T2788] kasan: CONFIG_KASAN_INLINE enabled
    [   59.617234][ T2788] kasan: GPF could be caused by NULL-ptr deref or user memory access
    [   59.618398][ T2788] general protection fault: 0000 [#1] SMP DEBUG_PAGEALLOC KASAN PTI
    [   59.619389][ T2788] CPU: 3 PID: 2788 Comm: tipc Not tainted 5.4.0+ #194
    [   59.620231][ T2788] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006
    [   59.621428][ T2788] RIP: 0010:tipc_bcast_get_broadcast_mode+0x131/0x310 [tipc]
    [   59.622379][ T2788] Code: c7 c6 ef 8b 38 c0 65 ff 0d 84 83 c9 3f e8 d7 a5 f2 e3 48 8d bb 38 11 00 00 48 b8 00 00 00 00
    [   59.622550][ T2780] NET: Registered protocol family 30
    [   59.624627][ T2788] RSP: 0018:ffff88804b09f578 EFLAGS: 00010202
    [   59.624630][ T2788] RAX: dffffc0000000000 RBX: 0000000000000011 RCX: 000000008bc66907
    [   59.624631][ T2788] RDX: 0000000000000229 RSI: 000000004b3cf4cc RDI: 0000000000001149
    [   59.624633][ T2788] RBP: ffff88804b09f588 R08: 0000000000000003 R09: fffffbfff4fb3df1
    [   59.624635][ T2788] R10: fffffbfff50318f8 R11: ffff888066cadc18 R12: ffffffffa6cc2f40
    [   59.624637][ T2788] R13: 1ffff11009613eba R14: ffff8880662e9328 R15: ffff8880662e9328
    [   59.624639][ T2788] FS:  00007f57d8f7b740(0000) GS:ffff88806cc00000(0000) knlGS:0000000000000000
    [   59.624645][ T2788] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   59.625875][ T2780] tipc: Started in single node mode
    [   59.626128][ T2788] CR2: 00007f57d887a8c0 CR3: 000000004b140002 CR4: 00000000000606e0
    [   59.633991][ T2788] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [   59.635195][ T2788] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [   59.636478][ T2788] Call Trace:
    [   59.637025][ T2788]  tipc_nl_add_bc_link+0x179/0x1470 [tipc]
    [   59.638219][ T2788]  ? lock_downgrade+0x6e0/0x6e0
    [   59.638923][ T2788]  ? __tipc_nl_add_link+0xf90/0xf90 [tipc]
    [   59.639533][ T2788]  ? tipc_nl_node_dump_link+0x318/0xa50 [tipc]
    [   59.640160][ T2788]  ? mutex_lock_io_nested+0x1380/0x1380
    [   59.640746][ T2788]  tipc_nl_node_dump_link+0x4fd/0xa50 [tipc]
    [   59.641356][ T2788]  ? tipc_nl_node_reset_link_stats+0x340/0x340 [tipc]
    [   59.642088][ T2788]  ? __skb_ext_del+0x270/0x270
    [   59.642594][ T2788]  genl_lock_dumpit+0x85/0xb0
    [   59.643050][ T2788]  netlink_dump+0x49c/0xed0
    [   59.643529][ T2788]  ? __netlink_sendskb+0xc0/0xc0
    [   59.644044][ T2788]  ? __netlink_dump_start+0x190/0x800
    [   59.644617][ T2788]  ? __mutex_unlock_slowpath+0xd0/0x670
    [   59.645177][ T2788]  __netlink_dump_start+0x5a0/0x800
    [   59.645692][ T2788]  genl_rcv_msg+0xa75/0xe90
    [   59.646144][ T2788]  ? __lock_acquire+0xdfe/0x3de0
    [   59.646692][ T2788]  ? genl_family_rcv_msg_attrs_parse+0x320/0x320
    [   59.647340][ T2788]  ? genl_lock_dumpit+0xb0/0xb0
    [   59.647821][ T2788]  ? genl_unlock+0x20/0x20
    [   59.648290][ T2788]  ? genl_parallel_done+0xe0/0xe0
    [   59.648787][ T2788]  ? find_held_lock+0x39/0x1d0
    [   59.649276][ T2788]  ? genl_rcv+0x15/0x40
    [   59.649722][ T2788]  ? lock_contended+0xcd0/0xcd0
    [   59.650296][ T2788]  netlink_rcv_skb+0x121/0x350
    [   59.650828][ T2788]  ? genl_family_rcv_msg_attrs_parse+0x320/0x320
    [   59.651491][ T2788]  ? netlink_ack+0x940/0x940
    [   59.651953][ T2788]  ? lock_acquire+0x164/0x3b0
    [   59.652449][ T2788]  genl_rcv+0x24/0x40
    [   59.652841][ T2788]  netlink_unicast+0x421/0x600
    [ ... ]
    
    Fixes: 7e4369057806 ("tipc: fix a slab object leak")
    Fixes: a62fbccecd62 ("tipc: make subscriber server support net namespace")
    Signed-off-by: Taehee Yoo <ap420073@gmail.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4d75732b5f0cf60154a78d5710821cb3063e6578
Author: John Rutherford <john.rutherford@dektech.com.au>
Date:   Tue Nov 26 13:52:55 2019 +1100

    tipc: fix link name length check
    
    [ Upstream commit fd567ac20cb0377ff466d3337e6e9ac5d0cb15e4 ]
    
    In commit 4f07b80c9733 ("tipc: check msg->req data len in
    tipc_nl_compat_bearer_disable") the same patch code was copied into
    routines: tipc_nl_compat_bearer_disable(),
    tipc_nl_compat_link_stat_dump() and tipc_nl_compat_link_reset_stats().
    The two link routine occurrences should have been modified to check
    the maximum link name length and not bearer name length.
    
    Fixes: 4f07b80c9733 ("tipc: check msg->reg data len in tipc_nl_compat_bearer_disable")
    Signed-off-by: John Rutherford <john.rutherford@dektech.com.au>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c5924bac0cf78e60d74d0b3185b033fdefde7acf
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Mon Feb 11 09:18:28 2019 +0700

    tipc: fix skb may be leaky in tipc_link_input
    
    [ Upstream commit 7384b538d3aed2ed49d3575483d17aeee790fb06 ]
    
    When we free skb at tipc_data_input, we return a 'false' boolean.
    Then, skb passed to subcalling tipc_link_input in tipc_link_rcv,
    
    <snip>
    1303 int tipc_link_rcv:
    ...
    1354    if (!tipc_data_input(l, skb, l->inputq))
    1355        rc |= tipc_link_input(l, skb, l->inputq);
    </snip>
    
    Fix it by simple changing to a 'true' boolean when skb is being free-ed.
    Then, tipc_link_rcv will bypassed to subcalling tipc_link_input as above
    condition.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <maloy@donjonn.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8d0a31370a92aa6e1bd12b00b2f4dd0a0183672d
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Sat Jan 5 10:52:23 2019 -0600

    tipc: fix memory leak in tipc_nl_compat_publ_dump
    
    [ Upstream commit f87d8ad9233f115db92c6c087d58403b0009ed36 ]
    
    There is a memory leak in case genlmsg_put fails.
    
    Fix this by freeing *args* before return.
    
    Addresses-Coverity-ID: 1476406 ("Resource leak")
    Fixes: 46273cf7e009 ("tipc: fix a missing check of genlmsg_put")
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 709f50b180528ad1e89d9a8ad59cc81a85937bb8
Author: Kangjie Lu <kjlu@umn.edu>
Date:   Wed Dec 26 00:09:04 2018 -0600

    tipc: fix a missing check of genlmsg_put
    
    [ Upstream commit 46273cf7e009231d2b6bc10a926e82b8928a9fb2 ]
    
    genlmsg_put could fail. The fix inserts a check of its return value, and
    if it fails, returns -EMSGSIZE.
    
    Signed-off-by: Kangjie Lu <kjlu@umn.edu>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ffe6754349892403d348eb5793aaf278a12aa414
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sun Dec 23 18:54:53 2018 -0600

    net/netlink_compat: Fix a missing check of nla_parse_nested
    
    [ Upstream commit 89dfd0083751d00d5d7ead36f6d8b045bf89c5e1 ]
    
    In tipc_nl_compat_sk_dump(), if nla_parse_nested() fails, it could return
    an error. To be consistent with other invocations of the function call,
    on error, the fix passes the return value upstream.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 38e88175da938db263f732af222d2a2b2781f8bf
Author: John Rutherford <john.rutherford@dektech.com.au>
Date:   Tue Nov 26 13:52:55 2019 +1100

    tipc: fix link name length check
    
    [ Upstream commit fd567ac20cb0377ff466d3337e6e9ac5d0cb15e4 ]
    
    In commit 4f07b80c9733 ("tipc: check msg->req data len in
    tipc_nl_compat_bearer_disable") the same patch code was copied into
    routines: tipc_nl_compat_bearer_disable(),
    tipc_nl_compat_link_stat_dump() and tipc_nl_compat_link_reset_stats().
    The two link routine occurrences should have been modified to check
    the maximum link name length and not bearer name length.
    
    Fixes: 4f07b80c9733 ("tipc: check msg->reg data len in tipc_nl_compat_bearer_disable")
    Signed-off-by: John Rutherford <john.rutherford@dektech.com.au>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b42feca0dcaadaafb2a425ea76efa3422687c91
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Mon Feb 11 09:18:28 2019 +0700

    tipc: fix skb may be leaky in tipc_link_input
    
    [ Upstream commit 7384b538d3aed2ed49d3575483d17aeee790fb06 ]
    
    When we free skb at tipc_data_input, we return a 'false' boolean.
    Then, skb passed to subcalling tipc_link_input in tipc_link_rcv,
    
    <snip>
    1303 int tipc_link_rcv:
    ...
    1354    if (!tipc_data_input(l, skb, l->inputq))
    1355        rc |= tipc_link_input(l, skb, l->inputq);
    </snip>
    
    Fix it by simple changing to a 'true' boolean when skb is being free-ed.
    Then, tipc_link_rcv will bypassed to subcalling tipc_link_input as above
    condition.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <maloy@donjonn.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec5676b5fec3a8940bb694b5dd1ba666f4258cd3
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Sat Jan 5 10:52:23 2019 -0600

    tipc: fix memory leak in tipc_nl_compat_publ_dump
    
    [ Upstream commit f87d8ad9233f115db92c6c087d58403b0009ed36 ]
    
    There is a memory leak in case genlmsg_put fails.
    
    Fix this by freeing *args* before return.
    
    Addresses-Coverity-ID: 1476406 ("Resource leak")
    Fixes: 46273cf7e009 ("tipc: fix a missing check of genlmsg_put")
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 10a0e00c095fcfd6b6bc7305341f20519d6b882a
Author: Kangjie Lu <kjlu@umn.edu>
Date:   Wed Dec 26 00:09:04 2018 -0600

    tipc: fix a missing check of genlmsg_put
    
    [ Upstream commit 46273cf7e009231d2b6bc10a926e82b8928a9fb2 ]
    
    genlmsg_put could fail. The fix inserts a check of its return value, and
    if it fails, returns -EMSGSIZE.
    
    Signed-off-by: Kangjie Lu <kjlu@umn.edu>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 03725d91a8c949540209de629e64e3dbf65fe3f7
Author: John Rutherford <john.rutherford@dektech.com.au>
Date:   Tue Nov 26 13:52:55 2019 +1100

    tipc: fix link name length check
    
    [ Upstream commit fd567ac20cb0377ff466d3337e6e9ac5d0cb15e4 ]
    
    In commit 4f07b80c9733 ("tipc: check msg->req data len in
    tipc_nl_compat_bearer_disable") the same patch code was copied into
    routines: tipc_nl_compat_bearer_disable(),
    tipc_nl_compat_link_stat_dump() and tipc_nl_compat_link_reset_stats().
    The two link routine occurrences should have been modified to check
    the maximum link name length and not bearer name length.
    
    Fixes: 4f07b80c9733 ("tipc: check msg->reg data len in tipc_nl_compat_bearer_disable")
    Signed-off-by: John Rutherford <john.rutherford@dektech.com.au>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 287558db942427d2565e571641075cad1f91b0d3
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Mon Feb 11 09:18:28 2019 +0700

    tipc: fix skb may be leaky in tipc_link_input
    
    [ Upstream commit 7384b538d3aed2ed49d3575483d17aeee790fb06 ]
    
    When we free skb at tipc_data_input, we return a 'false' boolean.
    Then, skb passed to subcalling tipc_link_input in tipc_link_rcv,
    
    <snip>
    1303 int tipc_link_rcv:
    ...
    1354    if (!tipc_data_input(l, skb, l->inputq))
    1355        rc |= tipc_link_input(l, skb, l->inputq);
    </snip>
    
    Fix it by simple changing to a 'true' boolean when skb is being free-ed.
    Then, tipc_link_rcv will bypassed to subcalling tipc_link_input as above
    condition.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <maloy@donjonn.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 95b414b81bca2c2786f84cc8f3b39197e77f8204
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Sat Jan 5 10:52:23 2019 -0600

    tipc: fix memory leak in tipc_nl_compat_publ_dump
    
    [ Upstream commit f87d8ad9233f115db92c6c087d58403b0009ed36 ]
    
    There is a memory leak in case genlmsg_put fails.
    
    Fix this by freeing *args* before return.
    
    Addresses-Coverity-ID: 1476406 ("Resource leak")
    Fixes: 46273cf7e009 ("tipc: fix a missing check of genlmsg_put")
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 84ae6096e925cc894c0b11f21bf5817f6cd3fd09
Author: Kangjie Lu <kjlu@umn.edu>
Date:   Wed Dec 26 00:09:04 2018 -0600

    tipc: fix a missing check of genlmsg_put
    
    [ Upstream commit 46273cf7e009231d2b6bc10a926e82b8928a9fb2 ]
    
    genlmsg_put could fail. The fix inserts a check of its return value, and
    if it fails, returns -EMSGSIZE.
    
    Signed-off-by: Kangjie Lu <kjlu@umn.edu>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2e849d71df3a589a5676dffc2f835f250c774b79
Author: John Rutherford <john.rutherford@dektech.com.au>
Date:   Tue Nov 26 13:52:55 2019 +1100

    tipc: fix link name length check
    
    [ Upstream commit fd567ac20cb0377ff466d3337e6e9ac5d0cb15e4 ]
    
    In commit 4f07b80c9733 ("tipc: check msg->req data len in
    tipc_nl_compat_bearer_disable") the same patch code was copied into
    routines: tipc_nl_compat_bearer_disable(),
    tipc_nl_compat_link_stat_dump() and tipc_nl_compat_link_reset_stats().
    The two link routine occurrences should have been modified to check
    the maximum link name length and not bearer name length.
    
    Fixes: 4f07b80c9733 ("tipc: check msg->reg data len in tipc_nl_compat_bearer_disable")
    Signed-off-by: John Rutherford <john.rutherford@dektech.com.au>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 66bccc6afb826bb3835aae9a7f28aed22fe8165e
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Mon Feb 11 09:18:28 2019 +0700

    tipc: fix skb may be leaky in tipc_link_input
    
    [ Upstream commit 7384b538d3aed2ed49d3575483d17aeee790fb06 ]
    
    When we free skb at tipc_data_input, we return a 'false' boolean.
    Then, skb passed to subcalling tipc_link_input in tipc_link_rcv,
    
    <snip>
    1303 int tipc_link_rcv:
    ...
    1354    if (!tipc_data_input(l, skb, l->inputq))
    1355        rc |= tipc_link_input(l, skb, l->inputq);
    </snip>
    
    Fix it by simple changing to a 'true' boolean when skb is being free-ed.
    Then, tipc_link_rcv will bypassed to subcalling tipc_link_input as above
    condition.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <maloy@donjonn.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7717d9830b5600830f881f300e9e51887f64724c
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Sat Jan 5 10:52:23 2019 -0600

    tipc: fix memory leak in tipc_nl_compat_publ_dump
    
    [ Upstream commit f87d8ad9233f115db92c6c087d58403b0009ed36 ]
    
    There is a memory leak in case genlmsg_put fails.
    
    Fix this by freeing *args* before return.
    
    Addresses-Coverity-ID: 1476406 ("Resource leak")
    Fixes: 46273cf7e009 ("tipc: fix a missing check of genlmsg_put")
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6d98c426e5f3f4430fc31d85cda5f4110e5f3e9f
Author: Kangjie Lu <kjlu@umn.edu>
Date:   Wed Dec 26 00:09:04 2018 -0600

    tipc: fix a missing check of genlmsg_put
    
    [ Upstream commit 46273cf7e009231d2b6bc10a926e82b8928a9fb2 ]
    
    genlmsg_put could fail. The fix inserts a check of its return value, and
    if it fails, returns -EMSGSIZE.
    
    Signed-off-by: Kangjie Lu <kjlu@umn.edu>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ef354c629ce73d0ca8e445efc947eefe4a26f622
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sun Dec 23 18:54:53 2018 -0600

    net/netlink_compat: Fix a missing check of nla_parse_nested
    
    [ Upstream commit 89dfd0083751d00d5d7ead36f6d8b045bf89c5e1 ]
    
    In tipc_nl_compat_sk_dump(), if nla_parse_nested() fails, it could return
    an error. To be consistent with other invocations of the function call,
    on error, the fix passes the return value upstream.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8fc720c8cb0e782f26a89f8241a12e0e04256c89
Author: John Rutherford <john.rutherford@dektech.com.au>
Date:   Tue Nov 26 13:52:55 2019 +1100

    tipc: fix link name length check
    
    [ Upstream commit fd567ac20cb0377ff466d3337e6e9ac5d0cb15e4 ]
    
    In commit 4f07b80c9733 ("tipc: check msg->req data len in
    tipc_nl_compat_bearer_disable") the same patch code was copied into
    routines: tipc_nl_compat_bearer_disable(),
    tipc_nl_compat_link_stat_dump() and tipc_nl_compat_link_reset_stats().
    The two link routine occurrences should have been modified to check
    the maximum link name length and not bearer name length.
    
    Fixes: 4f07b80c9733 ("tipc: check msg->reg data len in tipc_nl_compat_bearer_disable")
    Signed-off-by: John Rutherford <john.rutherford@dektech.com.au>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b5c36e7734b8b288bf851ddc159d8efeded1edc1
Author: John Rutherford <john.rutherford@dektech.com.au>
Date:   Tue Nov 26 13:52:55 2019 +1100

    tipc: fix link name length check
    
    [ Upstream commit fd567ac20cb0377ff466d3337e6e9ac5d0cb15e4 ]
    
    In commit 4f07b80c9733 ("tipc: check msg->req data len in
    tipc_nl_compat_bearer_disable") the same patch code was copied into
    routines: tipc_nl_compat_bearer_disable(),
    tipc_nl_compat_link_stat_dump() and tipc_nl_compat_link_reset_stats().
    The two link routine occurrences should have been modified to check
    the maximum link name length and not bearer name length.
    
    Fixes: 4f07b80c9733 ("tipc: check msg->reg data len in tipc_nl_compat_bearer_disable")
    Signed-off-by: John Rutherford <john.rutherford@dektech.com.au>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c3bfc5dd73c6f519ff0636d4e709515f06edef78
Merge: e5b3fc125d76 c5d728113532
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Dec 1 20:35:03 2019 -0800

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from David Miller:
    
     1) Fix several scatter gather list issues in kTLS code, from Jakub
        Kicinski.
    
     2) macb driver device remove has to kill the hresp_err_tasklet. From
        Chuhong Yuan.
    
     3) Several memory leak and reference count bug fixes in tipc, from Tung
        Nguyen.
    
     4) Fix mlx5 build error w/o ipv6, from Yue Haibing.
    
     5) Fix jumbo frame and other regressions in r8169, from Heiner
        Kallweit.
    
     6) Undo some BUG_ON()'s and replace them with WARN_ON_ONCE and proper
        error propagation/handling. From Paolo Abeni.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (24 commits)
      openvswitch: remove another BUG_ON()
      openvswitch: drop unneeded BUG_ON() in ovs_flow_cmd_build_info()
      net: phy: realtek: fix using paged operations with RTL8105e / RTL8208
      r8169: fix resume on cable plug-in
      r8169: fix jumbo configuration for RTL8168evl
      net: emulex: benet: indent a Kconfig depends continuation line
      selftests: forwarding: fix race between packet receive and tc check
      net: sched: fix `tc -s class show` no bstats on class with nolock subqueues
      net: ethernet: ti: ale: ensure vlan/mdb deleted when no members
      net/mlx5e: Fix build error without IPV6
      selftests: pmtu: use -oneline for ip route list cache
      tipc: fix duplicate SYN messages under link congestion
      tipc: fix wrong timeout input for tipc_wait_for_cond()
      tipc: fix wrong socket reference counter after tipc_sk_timeout() returns
      tipc: fix potential memory leak in __tipc_sendmsg()
      net: macb: add missed tasklet_kill
      selftests: bpf: correct perror strings
      selftests: bpf: test_sockmap: handle file creation failures gracefully
      net/tls: use sg_next() to walk sg entries
      net/tls: remove the dead inplace_crypto code
      ...

commit aaa34256284c8fffddfda88078d5dda2a380cd94
Merge: 61183b056b49 d34910e1751b
Author: David S. Miller <davem@davemloft.net>
Date:   Thu Nov 28 23:09:15 2019 -0800

    Merge branch 'tipc-Fix-some-bugs-at-socket-layer'
    
    Tung Nguyen says:
    
    ====================
    tipc: Fix some bugs at socket layer
    
    This series fixes some bugs at socket layer.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d34910e1751be79672db9cc61ca8892fbb4763f2
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Thu Nov 28 10:10:08 2019 +0700

    tipc: fix duplicate SYN messages under link congestion
    
    Scenario:
    1. A client socket initiates a SYN message to a listening socket.
    2. The send link is congested, the SYN message is put in the
    send link and a wakeup message is put in wakeup queue.
    3. The congestion situation is abated, the wakeup message is
    pulled out of the wakeup queue. Function tipc_sk_push_backlog()
    is called to send out delayed messages by Nagle. However,
    the client socket is still in CONNECTING state. So, it sends
    the SYN message in the socket write queue to the listening socket
    again.
    4. The listening socket receives the first SYN message and creates
    first server socket. The client socket receives ACK- and establishes
    a connection to the first server socket. The client socket closes
    its connection with the first server socket.
    5. The listening socket receives the second SYN message and creates
    second server socket. The second server socket sends ACK- to the
    client socket, but it has been closed. It results in connection
    reset error when reading from the server socket in user space.
    
    Solution: return from function tipc_sk_push_backlog() immediately
    if there is pending SYN message in the socket write queue.
    
    Fixes: c0bceb97db9e ("tipc: add smart nagle feature")
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 12db3c8083fcab4270866a88191933f2d9f24f89
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Thu Nov 28 10:10:07 2019 +0700

    tipc: fix wrong timeout input for tipc_wait_for_cond()
    
    In function __tipc_shutdown(), the timeout value passed to
    tipc_wait_for_cond() is not jiffies.
    
    This commit fixes it by converting that value from milliseconds
    to jiffies.
    
    Fixes: 365ad353c256 ("tipc: reduce risk of user starvation during link congestion")
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 91a4a3eb433e4d786420c41f3c08d1d16c605962
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Thu Nov 28 10:10:06 2019 +0700

    tipc: fix wrong socket reference counter after tipc_sk_timeout() returns
    
    When tipc_sk_timeout() is executed but user space is grabbing
    ownership, this function rearms itself and returns. However, the
    socket reference counter is not reduced. This causes potential
    unexpected behavior.
    
    This commit fixes it by calling sock_put() before tipc_sk_timeout()
    returns in the above-mentioned case.
    
    Fixes: afe8792fec69 ("tipc: refactor function tipc_sk_timeout()")
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2fe97a578d7bad3116a89dc8a6692a51e6fc1d9c
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Thu Nov 28 10:10:05 2019 +0700

    tipc: fix potential memory leak in __tipc_sendmsg()
    
    When initiating a connection message to a server side, the connection
    message is cloned and added to the socket write queue. However, if the
    cloning is failed, only the socket write queue is purged. It causes
    memory leak because the original connection message is not freed.
    
    This commit fixes it by purging the list of connection message when
    it cannot be cloned.
    
    Fixes: 6787927475e5 ("tipc: buffer overflow handling in listener socket")
    Reported-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8c39f71ee2019e77ee14f88b1321b2348db51820
Merge: 95f1fa9e3418 bac139a84669
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Nov 27 17:17:40 2019 -0800

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from David Miller:
     "This is mostly to fix the iwlwifi regression:
    
      1) Flush GRO state properly in iwlwifi driver, from Alexander Lobakin.
    
      2) Validate TIPC link name with properly length macro, from John
         Rutherford.
    
      3) Fix completion init and device query timeouts in ibmvnic, from
         Thomas Falcon.
    
      4) Fix SKB size calculation for netlink messages in psample, from
         Nikolay Aleksandrov.
    
      5) Similar kind of fix for OVS flow dumps, from Paolo Abeni.
    
      6) Handle queue allocation failure unwind properly in gve driver, we
         could try to release pages we didn't allocate. From Jeroen de
         Borst.
    
      7) Serialize TX queue SKB list accesses properly in mscc ocelot
         driver. From Yangbo Lu"
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net:
      net: usb: aqc111: Use the correct style for SPDX License Identifier
      net: phy: Use the correct style for SPDX License Identifier
      net: wireless: intel: iwlwifi: fix GRO_NORMAL packet stalling
      net: mscc: ocelot: use skb queue instead of skbs list
      net: mscc: ocelot: avoid incorrect consuming in skbs list
      gve: Fix the queue page list allocated pages count
      net: inet_is_local_reserved_port() port arg should be unsigned short
      openvswitch: fix flow command message size
      net: phy: dp83869: Fix return paths to return proper values
      net: psample: fix skb_over_panic
      net: usbnet: Fix -Wcast-function-type
      net: hso: Fix -Wcast-function-type
      net: port < inet_prot_sock(net) --> inet_port_requires_bind_service(net, port)
      ibmvnic: Serialize device queries
      ibmvnic: Bound waits for device queries
      ibmvnic: Terminate waiting device threads after loss of service
      ibmvnic: Fix completion structure initialization
      net-sctp: replace some sock_net(sk) with just 'net'
      net: Fix a documentation bug wrt. ip_unprivileged_port_start
      tipc: fix link name length check

commit fd567ac20cb0377ff466d3337e6e9ac5d0cb15e4
Author: John Rutherford <john.rutherford@dektech.com.au>
Date:   Tue Nov 26 13:52:55 2019 +1100

    tipc: fix link name length check
    
    In commit 4f07b80c9733 ("tipc: check msg->req data len in
    tipc_nl_compat_bearer_disable") the same patch code was copied into
    routines: tipc_nl_compat_bearer_disable(),
    tipc_nl_compat_link_stat_dump() and tipc_nl_compat_link_reset_stats().
    The two link routine occurrences should have been modified to check
    the maximum link name length and not bearer name length.
    
    Fixes: 4f07b80c9733 ("tipc: check msg->reg data len in tipc_nl_compat_bearer_disable")
    Signed-off-by: John Rutherford <john.rutherford@dektech.com.au>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 386403a115f95997c2715691226e11a7b5cffcfd
Merge: 642356cb5f4a 622dc5ad8052
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Nov 25 20:02:57 2019 -0800

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net-next
    
    Pull networking updates from David Miller:
     "Another merge window, another pull full of stuff:
    
       1) Support alternative names for network devices, from Jiri Pirko.
    
       2) Introduce per-netns netdev notifiers, also from Jiri Pirko.
    
       3) Support MSG_PEEK in vsock/virtio, from Matias Ezequiel Vara
          Larsen.
    
       4) Allow compiling out the TLS TOE code, from Jakub Kicinski.
    
       5) Add several new tracepoints to the kTLS code, also from Jakub.
    
       6) Support set channels ethtool callback in ena driver, from Sameeh
          Jubran.
    
       7) New SCTP events SCTP_ADDR_ADDED, SCTP_ADDR_REMOVED,
          SCTP_ADDR_MADE_PRIM, and SCTP_SEND_FAILED_EVENT. From Xin Long.
    
       8) Add XDP support to mvneta driver, from Lorenzo Bianconi.
    
       9) Lots of netfilter hw offload fixes, cleanups and enhancements,
          from Pablo Neira Ayuso.
    
      10) PTP support for aquantia chips, from Egor Pomozov.
    
      11) Add UDP segmentation offload support to igb, ixgbe, and i40e. From
          Josh Hunt.
    
      12) Add smart nagle to tipc, from Jon Maloy.
    
      13) Support L2 field rewrite by TC offloads in bnxt_en, from Venkat
          Duvvuru.
    
      14) Add a flow mask cache to OVS, from Tonghao Zhang.
    
      15) Add XDP support to ice driver, from Maciej Fijalkowski.
    
      16) Add AF_XDP support to ice driver, from Krzysztof Kazimierczak.
    
      17) Support UDP GSO offload in atlantic driver, from Igor Russkikh.
    
      18) Support it in stmmac driver too, from Jose Abreu.
    
      19) Support TIPC encryption and auth, from Tuong Lien.
    
      20) Introduce BPF trampolines, from Alexei Starovoitov.
    
      21) Make page_pool API more numa friendly, from Saeed Mahameed.
    
      22) Introduce route hints to ipv4 and ipv6, from Paolo Abeni.
    
      23) Add UDP segmentation offload to cxgb4, Rahul Lakkireddy"
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net-next: (1857 commits)
      libbpf: Fix usage of u32 in userspace code
      mm: Implement no-MMU variant of vmalloc_user_node_flags
      slip: Fix use-after-free Read in slip_open
      net: dsa: sja1105: fix sja1105_parse_rgmii_delays()
      macvlan: schedule bc_work even if error
      enetc: add support Credit Based Shaper(CBS) for hardware offload
      net: phy: add helpers phy_(un)lock_mdio_bus
      mdio_bus: don't use managed reset-controller
      ax88179_178a: add ethtool_op_get_ts_info()
      mlxsw: spectrum_router: Fix use of uninitialized adjacency index
      mlxsw: spectrum_router: After underlay moves, demote conflicting tunnels
      bpf: Simplify __bpf_arch_text_poke poke type handling
      bpf: Introduce BPF_TRACE_x helper for the tracing tests
      bpf: Add bpf_jit_blinding_enabled for !CONFIG_BPF_JIT
      bpf, testing: Add various tail call test cases
      bpf, x86: Emit patchable direct jump as tail call
      bpf: Constant map key tracking for prog array pokes
      bpf: Add poke dependency tracking for prog array maps
      bpf: Add initial poke descriptor table for jit images
      bpf: Move owner type, jited info into array auxiliary data
      ...

commit 1c374c2c1a1a52cab1c1cd4260af0d77ffdc81f2
Author: John Johansen <john.johansen@canonical.com>
Date:   Sun Jun 8 11:20:54 2014 -0700

    apparmor: fix uninitialized lsm_audit member
    
    commit b6b1b81b3afba922505b57f4c812bba022f7c4a9 upstream.
    
    BugLink: http://bugs.launchpad.net/bugs/1268727
    
    The task field in the lsm_audit struct needs to be initialized if
    a change_hat fails, otherwise the following oops will occur
    
    BUG: unable to handle kernel paging request at 0000002fbead7d08
    IP: [<ffffffff8171153e>] _raw_spin_lock+0xe/0x50
    PGD 1e3f35067 PUD 0
    Oops: 0002 [#1] SMP
    Modules linked in: pppox crc_ccitt p8023 p8022 psnap llc ax25 btrfs raid6_pq xor xfs libcrc32c dm_multipath scsi_dh kvm_amd dcdbas kvm microcode amd64_edac_mod joydev edac_core psmouse edac_mce_amd serio_raw k10temp sp5100_tco i2c_piix4 ipmi_si ipmi_msghandler acpi_power_meter mac_hid lp parport hid_generic usbhid hid pata_acpi mpt2sas ahci raid_class pata_atiixp bnx2 libahci scsi_transport_sas [last unloaded: tipc]
    CPU: 2 PID: 699 Comm: changehat_twice Tainted: GF          O 3.13.0-7-generic #25-Ubuntu
    Hardware name: Dell Inc. PowerEdge R415/08WNM9, BIOS 1.8.6 12/06/2011
    task: ffff8802135c6000 ti: ffff880212986000 task.ti: ffff880212986000
    RIP: 0010:[<ffffffff8171153e>]  [<ffffffff8171153e>] _raw_spin_lock+0xe/0x50
    RSP: 0018:ffff880212987b68  EFLAGS: 00010006
    RAX: 0000000000020000 RBX: 0000002fbead7500 RCX: 0000000000000000
    RDX: 0000000000000292 RSI: ffff880212987ba8 RDI: 0000002fbead7d08
    RBP: ffff880212987b68 R08: 0000000000000246 R09: ffff880216e572a0
    R10: ffffffff815fd677 R11: ffffea0008469580 R12: ffffffff8130966f
    R13: ffff880212987ba8 R14: 0000002fbead7d08 R15: ffff8800d8c6b830
    FS:  00002b5e6c84e7c0(0000) GS:ffff880216e40000(0000) knlGS:0000000055731700
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000002fbead7d08 CR3: 000000021270f000 CR4: 00000000000006e0
    Stack:
     ffff880212987b98 ffffffff81075f17 ffffffff8130966f 0000000000000009
     0000000000000000 0000000000000000 ffff880212987bd0 ffffffff81075f7c
     0000000000000292 ffff880212987c08 ffff8800d8c6b800 0000000000000026
    Call Trace:
     [<ffffffff81075f17>] __lock_task_sighand+0x47/0x80
     [<ffffffff8130966f>] ? apparmor_cred_prepare+0x2f/0x50
     [<ffffffff81075f7c>] do_send_sig_info+0x2c/0x80
     [<ffffffff81075fee>] send_sig_info+0x1e/0x30
     [<ffffffff8130242d>] aa_audit+0x13d/0x190
     [<ffffffff8130c1dc>] aa_audit_file+0xbc/0x130
     [<ffffffff8130966f>] ? apparmor_cred_prepare+0x2f/0x50
     [<ffffffff81304cc2>] aa_change_hat+0x202/0x530
     [<ffffffff81308fc6>] aa_setprocattr_changehat+0x116/0x1d0
     [<ffffffff8130a11d>] apparmor_setprocattr+0x25d/0x300
     [<ffffffff812cee56>] security_setprocattr+0x16/0x20
     [<ffffffff8121fc87>] proc_pid_attr_write+0x107/0x130
     [<ffffffff811b7604>] vfs_write+0xb4/0x1f0
     [<ffffffff811b8039>] SyS_write+0x49/0xa0
     [<ffffffff8171a1bf>] tracesys+0xe1/0xe6
    
    Signed-off-by: John Johansen <john.johansen@canonical.com>
    Acked-by: Seth Arnold <seth.arnold@canonical.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41b416f1fc4c7074e1801fc20f1c7fda94459487
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Thu Nov 21 15:34:58 2019 +0700

    tipc: support in-order name publication events
    
    It is observed that TIPC service binding order will not be kept in the
    publication event report to user if the service is subscribed after the
    bindings.
    
    For example, services are bound by application in the following order:
    
    Server: bound port A to {18888,66,66} scope 2
    Server: bound port A to {18888,33,33} scope 2
    
    Now, if a client subscribes to the service range (e.g. {18888, 0-100}),
    it will get the 'TIPC_PUBLISHED' events in that binding order only when
    the subscription is started before the bindings.
    Otherwise, if started after the bindings, the events will arrive in the
    opposite order:
    
    Client: received event for published {18888,33,33}
    Client: received event for published {18888,66,66}
    
    For the latter case, it is clear that the bindings have existed in the
    name table already, so when reported, the events' order will follow the
    order of the rbtree binding nodes (- a node with lesser 'lower'/'upper'
    range value will be first).
    
    This is correct as we provide the tracking on a specific service status
    (available or not), not the relationship between multiple services.
    However, some users expect to see the same order of arriving events
    irrespective of when the subscription is issued. This turns out to be
    easy to fix. We now add functionality to ensure that publication events
    always are issued in the same temporal order as the corresponding
    bindings were performed.
    
    v2: replace the unnecessary macro - 'publication_after()' with inline
    function.
    v3: reuse 'time_after32()' instead of reinventing the same exact code.
    
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ba5f6a8617f4cd8e77da0a190b9647065014eade
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Nov 21 10:01:09 2019 +0700

    tipc: update replicast capability for broadcast send link
    
    When setting up a cluster with non-replicast/replicast capability
    supported. This capability will be disabled for broadcast send link
    in order to be backwards compatible.
    
    However, when these non-support nodes left and be removed out the cluster.
    We don't update this capability on broadcast send link. Then, some of
    features that based on this capability will also disabling as unexpected.
    
    In this commit, we make sure the broadcast send link capabilities will
    be re-calculated as soon as a node removed/rejoined a cluster.
    
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d7f9f47d4d1243cf960725a755123cfae13a3e51
Author: Matt Bennett <matt.bennett@alliedtelesis.co.nz>
Date:   Thu Nov 14 12:20:03 2019 +1300

    tipc: add back tipc prefix to log messages
    
    The tipc prefix for log messages generated by tipc was
    removed in commit 07f6c4bc048a ("tipc: convert tipc reference
    table to use generic rhashtable").
    
    This is still a useful prefix so add it back.
    
    Signed-off-by: Matt Bennett <matt.bennett@alliedtelesis.co.nz>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 46cb01eeeb86fca6afe24dda1167b0cb95424e29
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Tue Nov 12 07:40:04 2019 +0700

    tipc: update mon's self addr when node addr generated
    
    In commit 25b0b9c4e835 ("tipc: handle collisions of 32-bit node address
    hash values"), the 32-bit node address only generated after one second
    trial period expired. However the self's addr in struct tipc_monitor do
    not update according to node address generated. This lead to it is
    always zero as initial value. As result, sorting algorithm using this
    value does not work as expected, neither neighbor monitoring framework.
    
    In this commit, we add a fix to update self's addr when 32-bit node
    address generated.
    
    Fixes: 25b0b9c4e835 ("tipc: handle collisions of 32-bit node address hash values")
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c33fdc3453313137f8740a227525ed518bc68e28
Author: Colin Ian King <colin.king@canonical.com>
Date:   Mon Nov 11 12:33:34 2019 +0000

    tipc: fix update of the uninitialized variable err
    
    Variable err is not uninitialized and hence can potentially contain
    any garbage value.  This may cause an error when logical or'ing the
    return values from the calls to functions crypto_aead_setauthsize or
    crypto_aead_setkey.  Fix this by setting err to the return of
    crypto_aead_setauthsize rather than or'ing in the return into the
    uninitialized variable
    
    Addresses-Coverity: ("Uninitialized scalar variable")
    Fixes: fc1b6d6de220 ("tipc: introduce TIPC encryption & authentication")
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1c8f11d057d61d9039a55545124ecb4248c6e625
Merge: f1ff4e80f848 e1f32190cf7d
Author: David S. Miller <davem@davemloft.net>
Date:   Fri Nov 8 14:01:59 2019 -0800

    Merge branch 'TIPC-Encryption'
    
    Tuong Lien says:
    
    ====================
    TIPC Encryption
    
    This series provides TIPC encryption feature, kernel part. There will be
    another one in the 'iproute2/tipc' for user space to set key.
    
    v2: add select crypto 'aes(gcm)' for TIPC_CRYPTO in Kconfig
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e1f32190cf7ddd55778b460e7d44af3f76529698
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Fri Nov 8 12:05:12 2019 +0700

    tipc: add support for AEAD key setting via netlink
    
    This commit adds two netlink commands to TIPC in order for user to be
    able to set or remove AEAD keys:
    - TIPC_NL_KEY_SET
    - TIPC_NL_KEY_FLUSH
    
    When the 'KEY_SET' is given along with the key data, the key will be
    initiated and attached to TIPC crypto. On the other hand, the
    'KEY_FLUSH' command will remove all existing keys if any.
    
    Acked-by: Ying Xue <ying.xue@windreiver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit fc1b6d6de2208774efd2a20bf0daddb02d18b1e0
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Fri Nov 8 12:05:11 2019 +0700

    tipc: introduce TIPC encryption & authentication
    
    This commit offers an option to encrypt and authenticate all messaging,
    including the neighbor discovery messages. The currently most advanced
    algorithm supported is the AEAD AES-GCM (like IPSec or TLS). All
    encryption/decryption is done at the bearer layer, just before leaving
    or after entering TIPC.
    
    Supported features:
    - Encryption & authentication of all TIPC messages (header + data);
    - Two symmetric-key modes: Cluster and Per-node;
    - Automatic key switching;
    - Key-expired revoking (sequence number wrapped);
    - Lock-free encryption/decryption (RCU);
    - Asynchronous crypto, Intel AES-NI supported;
    - Multiple cipher transforms;
    - Logs & statistics;
    
    Two key modes:
    - Cluster key mode: One single key is used for both TX & RX in all
    nodes in the cluster.
    - Per-node key mode: Each nodes in the cluster has one specific TX key.
    For RX, a node requires its peers' TX key to be able to decrypt the
    messages from those peers.
    
    Key setting from user-space is performed via netlink by a user program
    (e.g. the iproute2 'tipc' tool).
    
    Internal key state machine:
    
                                     Attach    Align(RX)
                                         +-+   +-+
                                         | V   | V
            +---------+      Attach     +---------+
            |  IDLE   |---------------->| PENDING |(user = 0)
            +---------+                 +---------+
               A   A                   Switch|  A
               |   |                         |  |
               |   | Free(switch/revoked)    |  |
         (Free)|   +----------------------+  |  |Timeout
               |              (TX)        |  |  |(RX)
               |                          |  |  |
               |                          |  v  |
            +---------+      Switch     +---------+
            | PASSIVE |<----------------| ACTIVE  |
            +---------+       (RX)      +---------+
            (user = 1)                  (user >= 1)
    
    The number of TFMs is 10 by default and can be changed via the procfs
    'net/tipc/max_tfms'. At this moment, as for simplicity, this file is
    also used to print the crypto statistics at runtime:
    
    echo 0xfff1 > /proc/sys/net/tipc/max_tfms
    
    The patch defines a new TIPC version (v7) for the encryption message (-
    backward compatibility as well). The message is basically encapsulated
    as follows:
    
       +----------------------------------------------------------+
       | TIPCv7 encryption  | Original TIPCv2    | Authentication |
       | header             | packet (encrypted) | Tag            |
       +----------------------------------------------------------+
    
    The throughput is about ~40% for small messages (compared with non-
    encryption) and ~9% for large messages. With the support from hardware
    crypto i.e. the Intel AES-NI CPU instructions, the throughput increases
    upto ~85% for small messages and ~55% for large messages.
    
    By default, the new feature is inactive (i.e. no encryption) until user
    sets a key for TIPC. There is however also a new option - "TIPC_CRYPTO"
    in the kernel configuration to enable/disable the new code when needed.
    
    MAINTAINERS | add two new files 'crypto.h' & 'crypto.c' in tipc
    
    Acked-by: Ying Xue <ying.xue@windreiver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 134bdac397661a5841d9f27f508190c68b26232b
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Fri Nov 8 12:05:10 2019 +0700

    tipc: add new AEAD key structure for user API
    
    The new structure 'tipc_aead_key' is added to the 'tipc.h' for user to
    be able to transfer a key to TIPC in kernel. Netlink will be used for
    this purpose in the later commits.
    
    Acked-by: Ying Xue <ying.xue@windreiver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4cbf8ac2fe5a0846508fe02b95a5de1a90fa73f4
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Fri Nov 8 12:05:09 2019 +0700

    tipc: enable creating a "preliminary" node
    
    When user sets RX key for a peer not existing on the own node, a new
    node entry is needed to which the RX key will be attached. However,
    since the peer node address (& capabilities) is unknown at that moment,
    only the node-ID is provided, this commit allows the creation of a node
    with only the data that we call as “preliminary”.
    
    A preliminary node is not the object of the “tipc_node_find()” but the
    “tipc_node_find_by_id()”. Once the first message i.e. LINK_CONFIG comes
    from that peer, and is successfully decrypted by the own node, the
    actual peer node data will be properly updated and the node will
    function as usual.
    
    In addition, the node timer always starts when a node object is created
    so if a preliminary node is not used, it will be cleaned up.
    
    The later encryption functions will also use the node timer and be able
    to create a preliminary node automatically when needed.
    
    Acked-by: Ying Xue <ying.xue@windreiver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2a7ee696f7b000a970dcce0cb06fdcd0a9e6ee76
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Fri Nov 8 12:05:08 2019 +0700

    tipc: add reference counter to bearer
    
    As a need to support the crypto asynchronous operations in the later
    commits, apart from the current RCU mechanism for bearer pointer, we
    add a 'refcnt' to the bearer object as well.
    
    So, a bearer can be hold via 'tipc_bearer_hold()' without being freed
    even though the bearer or interface can be disabled in the meanwhile.
    If that happens, the bearer will be released then when the crypto
    operation is completed and 'tipc_bearer_put()' is called.
    
    Acked-by: Ying Xue <ying.xue@windreiver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d408bef4bfa60bac665b6e7239269570039a968b
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Fri Nov 8 10:02:37 2019 +0700

    tipc: eliminate checking netns if node established
    
    Currently, we scan over all network namespaces at each received
    discovery message in order to check if the sending peer might be
    present in a host local namespaces.
    
    This is unnecessary since we can assume that a peer will not change its
    location during an established session.
    
    We now improve the condition for this testing so that we don't perform
    any redundant scans.
    
    Fixes: f73b12812a3d ("tipc: improve throughput between nodes in netns")
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d0d605c5e10af0714b7b7ed5e4d3918b308c28c0
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Wed Nov 6 18:12:17 2019 +0700

    tipc: eliminate the dummy packet in link synching
    
    When preparing tunnel packets for the link failover or synchronization,
    as for the safe algorithm, we added a dummy packet on the pair link but
    never sent it out. In the case of failover, the pair link will be reset
    anyway. But for link synching, it will always result in retransmission
    of the dummy packet after that.
    We have also observed that such the retransmission at the early stage
    when a new node comes in a large cluster will take some time and hard
    to be done, leading to the repeated retransmit failures and the link is
    reset.
    
    Since in commit 4929a932be33 ("tipc: optimize link synching mechanism")
    we have already built a dummy 'TUNNEL_PROTOCOL' message on the new link
    for the synchronization, there's no need for the dummy on the pair one,
    this commit will skip it when the new mechanism takes in place. In case
    nothing exists in the pair link's transmq, the link synching will just
    start and stop shortly on the peer side.
    
    The patch is backward compatible.
    
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Tested-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 426071f1f3995d7e9603246bffdcbf344cd31719
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Wed Nov 6 13:26:10 2019 +0700

    tipc: reduce sensitive to retransmit failures
    
    With huge cluster (e.g >200nodes), the amount of that flow:
    gap -> retransmit packet -> acked will take time in case of STATE_MSG
    dropped/delayed because a lot of traffic. This lead to 1.5 sec tolerance
    value criteria made link easy failure around 2nd, 3rd of failed
    retransmission attempts.
    
    Instead of re-introduced criteria of 99 faled retransmissions to fix the
    issue, we increase failure detection timer to ten times tolerance value.
    
    Fixes: 77cf8edbc0e7 ("tipc: simplify stale link failure criteria")
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Acked-by: Jon
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6708ef779249b3d8a7a1b7a52ae0b5e7d5a0a9b2
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Wed Nov 6 13:26:09 2019 +0700

    tipc: update cluster capabilities if node deleted
    
    There are two improvements when re-calculate cluster capabilities:
    
    - When deleting a specific down node, need to re-calculate.
    - In tipc_node_cleanup(), do not need to re-calculate if node
    is still existing in cluster.
    
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Acked-by: Jon
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 06e7c70c6e8903da57982ab3bdc81e01a8ba941d
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Fri Nov 1 09:58:57 2019 +0700

    tipc: improve message bundling algorithm
    
    As mentioned in commit e95584a889e1 ("tipc: fix unlimited bundling of
    small messages"), the current message bundling algorithm is inefficient
    that can generate bundles of only one payload message, that causes
    unnecessary overheads for both the sender and receiver.
    
    This commit re-designs the 'tipc_msg_make_bundle()' function (now named
    as 'tipc_msg_try_bundle()'), so that when a message comes at the first
    place, we will just check & keep a reference to it if the message is
    suitable for bundling. The message buffer will be put into the link
    backlog queue and processed as normal. Later on, when another one comes
    we will make a bundle with the first message if possible and so on...
    This way, a bundle if really needed will always consist of at least two
    payload messages. Otherwise, we let the first buffer go its way without
    any need of bundling, so reduce the overheads to zero.
    
    Moreover, since now we have both the messages in hand, we can even
    optimize the 'tipc_msg_bundle()' function, make bundle of a very large
    (size ~ MSS) and small messages which is not with the current algorithm
    e.g. [1400-byte message] + [10-byte message] (MTU = 1500).
    
    Acked-by: Ying Xue <ying.xue@windreiver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c0bceb97db9efc72629dd00cd0d9812f24d4ba2d
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Wed Oct 30 14:00:41 2019 +0100

    tipc: add smart nagle feature
    
    We introduce a feature that works like a combination of TCP_NAGLE and
    TCP_CORK, but without some of the weaknesses of those. In particular,
    we will not observe long delivery delays because of delayed acks, since
    the algorithm itself decides if and when acks are to be sent from the
    receiving peer.
    
    - The nagle property as such is determined by manipulating a new
      'maxnagle' field in struct tipc_sock. If certain conditions are met,
      'maxnagle' will define max size of the messages which can be bundled.
      If it is set to zero no messages are ever bundled, implying that the
      nagle property is disabled.
    - A socket with the nagle property enabled enters nagle mode when more
      than 4 messages have been sent out without receiving any data message
      from the peer.
    - A socket leaves nagle mode whenever it receives a data message from
      the peer.
    
    In nagle mode, messages smaller than 'maxnagle' are accumulated in the
    socket write queue. The last buffer in the queue is marked with a new
    'ack_required' bit, which forces the receiving peer to send a CONN_ACK
    message back to the sender upon reception.
    
    The accumulated contents of the write queue is transmitted when one of
    the following events or conditions occur.
    
    - A CONN_ACK message is received from the peer.
    - A data message is received from the peer.
    - A SOCK_WAKEUP pseudo message is received from the link level.
    - The write queue contains more than 64 1k blocks of data.
    - The connection is being shut down.
    - There is no CONN_ACK message to expect. I.e., there is currently
      no outstanding message where the 'ack_required' bit was set. As a
      consequence, the first message added after we enter nagle mode
      is always sent directly with this bit set.
    
    This new feature gives a 50-100% improvement of throughput for small
    (i.e., less than MTU size) messages, while it might add up to one RTT
    to latency time when the socket is in nagle mode.
    
    Acked-by: Ying Xue <ying.xue@windreiver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f73b12812a3d1d798b7517547ccdcf864844d2cd
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Tue Oct 29 07:51:21 2019 +0700

    tipc: improve throughput between nodes in netns
    
    Currently, TIPC transports intra-node user data messages directly
    socket to socket, hence shortcutting all the lower layers of the
    communication stack. This gives TIPC very good intra node performance,
    both regarding throughput and latency.
    
    We now introduce a similar mechanism for TIPC data traffic across
    network namespaces located in the same kernel. On the send path, the
    call chain is as always accompanied by the sending node's network name
    space pointer. However, once we have reliably established that the
    receiving node is represented by a namespace on the same host, we just
    replace the namespace pointer with the receiving node/namespace's
    ditto, and follow the regular socket receive patch though the receiving
    node. This technique gives us a throughput similar to the node internal
    throughput, several times larger than if we let the traffic go though
    the full network stacks. As a comparison, max throughput for 64k
    messages is four times larger than TCP throughput for the same type of
    traffic.
    
    To meet any security concerns, the following should be noted.
    
    - All nodes joining a cluster are supposed to have been be certified
    and authenticated by mechanisms outside TIPC. This is no different for
    nodes/namespaces on the same host; they have to auto discover each
    other using the attached interfaces, and establish links which are
    supervised via the regular link monitoring mechanism. Hence, a kernel
    local node has no other way to join a cluster than any other node, and
    have to obey to policies set in the IP or device layers of the stack.
    
    - Only when a sender has established with 100% certainty that the peer
    node is located in a kernel local namespace does it choose to let user
    data messages, and only those, take the crossover path to the receiving
    node/namespace.
    
    - If the receiving node/namespace is removed, its namespace pointer
    is invalidated at all peer nodes, and their neighbor link monitoring
    will eventually note that this node is gone.
    
    - To ensure the "100% certainty" criteria, and prevent any possible
    spoofing, received discovery messages must contain a proof that the
    sender knows a common secret. We use the hash mix of the sending
    node/namespace for this purpose, since it can be accessed directly by
    all other namespaces in the kernel. Upon reception of a discovery
    message, the receiver checks this proof against all the local
    namespaces'hash_mix:es. If it finds a match, that, along with a
    matching node id and cluster id, this is deemed sufficient proof that
    the peer node in question is in a local namespace, and a wormhole can
    be opened.
    
    - We should also consider that TIPC is intended to be a cluster local
    IPC mechanism (just like e.g. UNIX sockets) rather than a network
    protocol, and hence we think it can justified to allow it to shortcut the
    lower protocol layers.
    
    Regarding traceability, we should notice that since commit 6c9081a3915d
    ("tipc: add loopback device tracking") it is possible to follow the node
    internal packet flow by just activating tcpdump on the loopback
    interface. This will be true even for this mechanism; by activating
    tcpdump on the involved nodes' loopback interfaces their inter-name
    space messaging can easily be tracked.
    
    v2:
    - update 'net' pointer when node left/rejoined
    v3:
    - grab read/write lock when using node ref obj
    v4:
    - clone traffics between netns to loopback
    
    Suggested-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8ebed8ae49df685b558615a8b026159d3a398463
Author: Geert Uytterhoeven <geert+renesas@glider.be>
Date:   Thu Oct 24 17:30:43 2019 +0200

    tipc: Spelling s/enpoint/endpoint/
    
    Fix misspelling of "endpoint".
    
    Signed-off-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6ea67769ff33018195e3ec2a610b8ecc03efe504
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Tue Oct 8 13:01:51 2019 +0200

    net: tipc: prepare attrs in __tipc_nl_compat_dumpit()
    
    __tipc_nl_compat_dumpit() calls tipc_nl_publ_dump() which expects
    the attrs to be available by genl_dumpit_info(cb)->attrs. Add info
    struct and attr parsing in compat dumpit function.
    
    Reported-by: syzbot+8d37c50ffb0f52941a5e@syzkaller.appspotmail.com
    Fixes: 057af7071344 ("net: tipc: have genetlink code to parse the attrs during dumpit")
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>

commit f19de0253a0d5d3e64ec46d4d5e50efc39fa9663
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Wed Oct 2 18:49:43 2019 +0700

    tipc: fix unlimited bundling of small messages
    
    [ Upstream commit e95584a889e1902fdf1ded9712e2c3c3083baf96 ]
    
    We have identified a problem with the "oversubscription" policy in the
    link transmission code.
    
    When small messages are transmitted, and the sending link has reached
    the transmit window limit, those messages will be bundled and put into
    the link backlog queue. However, bundles of data messages are counted
    at the 'CRITICAL' level, so that the counter for that level, instead of
    the counter for the real, bundled message's level is the one being
    increased.
    Subsequent, to-be-bundled data messages at non-CRITICAL levels continue
    to be tested against the unchanged counter for their own level, while
    contributing to an unrestrained increase at the CRITICAL backlog level.
    
    This leaves a gap in congestion control algorithm for small messages
    that can result in starvation for other users or a "real" CRITICAL
    user. Even that eventually can lead to buffer exhaustion & link reset.
    
    We fix this by keeping a 'target_bskb' buffer pointer at each levels,
    then when bundling, we only bundle messages at the same importance
    level only. This way, we know exactly how many slots a certain level
    have occupied in the queue, so can manage level congestion accurately.
    
    By bundling messages at the same level, we even have more benefits. Let
    consider this:
    - One socket sends 64-byte messages at the 'CRITICAL' level;
    - Another sends 4096-byte messages at the 'LOW' level;
    
    When a 64-byte message comes and is bundled the first time, we put the
    overhead of message bundle to it (+ 40-byte header, data copy, etc.)
    for later use, but the next message can be a 4096-byte one that cannot
    be bundled to the previous one. This means the last bundle carries only
    one payload message which is totally inefficient, as for the receiver
    also! Later on, another 64-byte message comes, now we make a new bundle
    and the same story repeats...
    
    With the new bundling algorithm, this will not happen, the 64-byte
    messages will be bundled together even when the 4096-byte message(s)
    comes in between. However, if the 4096-byte messages are sent at the
    same level i.e. 'CRITICAL', the bundling algorithm will again cause the
    same overhead.
    
    Also, the same will happen even with only one socket sending small
    messages at a rate close to the link transmit's one, so that, when one
    message is bundled, it's transmitted shortly. Then, another message
    comes, a new bundle is created and so on...
    
    We will solve this issue radically by another patch.
    
    Fixes: 365ad353c256 ("tipc: reduce risk of user starvation during link congestion")
    Reported-by: Hoang Le <hoang.h.le@dektech.com.au>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9af774bcc46059b235bb9a25332d151b22c3fbda
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Wed Oct 2 18:49:43 2019 +0700

    tipc: fix unlimited bundling of small messages
    
    [ Upstream commit e95584a889e1902fdf1ded9712e2c3c3083baf96 ]
    
    We have identified a problem with the "oversubscription" policy in the
    link transmission code.
    
    When small messages are transmitted, and the sending link has reached
    the transmit window limit, those messages will be bundled and put into
    the link backlog queue. However, bundles of data messages are counted
    at the 'CRITICAL' level, so that the counter for that level, instead of
    the counter for the real, bundled message's level is the one being
    increased.
    Subsequent, to-be-bundled data messages at non-CRITICAL levels continue
    to be tested against the unchanged counter for their own level, while
    contributing to an unrestrained increase at the CRITICAL backlog level.
    
    This leaves a gap in congestion control algorithm for small messages
    that can result in starvation for other users or a "real" CRITICAL
    user. Even that eventually can lead to buffer exhaustion & link reset.
    
    We fix this by keeping a 'target_bskb' buffer pointer at each levels,
    then when bundling, we only bundle messages at the same importance
    level only. This way, we know exactly how many slots a certain level
    have occupied in the queue, so can manage level congestion accurately.
    
    By bundling messages at the same level, we even have more benefits. Let
    consider this:
    - One socket sends 64-byte messages at the 'CRITICAL' level;
    - Another sends 4096-byte messages at the 'LOW' level;
    
    When a 64-byte message comes and is bundled the first time, we put the
    overhead of message bundle to it (+ 40-byte header, data copy, etc.)
    for later use, but the next message can be a 4096-byte one that cannot
    be bundled to the previous one. This means the last bundle carries only
    one payload message which is totally inefficient, as for the receiver
    also! Later on, another 64-byte message comes, now we make a new bundle
    and the same story repeats...
    
    With the new bundling algorithm, this will not happen, the 64-byte
    messages will be bundled together even when the 4096-byte message(s)
    comes in between. However, if the 4096-byte messages are sent at the
    same level i.e. 'CRITICAL', the bundling algorithm will again cause the
    same overhead.
    
    Also, the same will happen even with only one socket sending small
    messages at a rate close to the link transmit's one, so that, when one
    message is bundled, it's transmitted shortly. Then, another message
    comes, a new bundle is created and so on...
    
    We will solve this issue radically by another patch.
    
    Fixes: 365ad353c256 ("tipc: reduce risk of user starvation during link congestion")
    Reported-by: Hoang Le <hoang.h.le@dektech.com.au>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ed9420ddce8711999f1446cd0e05594b54cbdd58
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Wed Oct 2 18:49:43 2019 +0700

    tipc: fix unlimited bundling of small messages
    
    [ Upstream commit e95584a889e1902fdf1ded9712e2c3c3083baf96 ]
    
    We have identified a problem with the "oversubscription" policy in the
    link transmission code.
    
    When small messages are transmitted, and the sending link has reached
    the transmit window limit, those messages will be bundled and put into
    the link backlog queue. However, bundles of data messages are counted
    at the 'CRITICAL' level, so that the counter for that level, instead of
    the counter for the real, bundled message's level is the one being
    increased.
    Subsequent, to-be-bundled data messages at non-CRITICAL levels continue
    to be tested against the unchanged counter for their own level, while
    contributing to an unrestrained increase at the CRITICAL backlog level.
    
    This leaves a gap in congestion control algorithm for small messages
    that can result in starvation for other users or a "real" CRITICAL
    user. Even that eventually can lead to buffer exhaustion & link reset.
    
    We fix this by keeping a 'target_bskb' buffer pointer at each levels,
    then when bundling, we only bundle messages at the same importance
    level only. This way, we know exactly how many slots a certain level
    have occupied in the queue, so can manage level congestion accurately.
    
    By bundling messages at the same level, we even have more benefits. Let
    consider this:
    - One socket sends 64-byte messages at the 'CRITICAL' level;
    - Another sends 4096-byte messages at the 'LOW' level;
    
    When a 64-byte message comes and is bundled the first time, we put the
    overhead of message bundle to it (+ 40-byte header, data copy, etc.)
    for later use, but the next message can be a 4096-byte one that cannot
    be bundled to the previous one. This means the last bundle carries only
    one payload message which is totally inefficient, as for the receiver
    also! Later on, another 64-byte message comes, now we make a new bundle
    and the same story repeats...
    
    With the new bundling algorithm, this will not happen, the 64-byte
    messages will be bundled together even when the 4096-byte message(s)
    comes in between. However, if the 4096-byte messages are sent at the
    same level i.e. 'CRITICAL', the bundling algorithm will again cause the
    same overhead.
    
    Also, the same will happen even with only one socket sending small
    messages at a rate close to the link transmit's one, so that, when one
    message is bundled, it's transmitted shortly. Then, another message
    comes, a new bundle is created and so on...
    
    We will solve this issue radically by another patch.
    
    Fixes: 365ad353c256 ("tipc: reduce risk of user starvation during link congestion")
    Reported-by: Hoang Le <hoang.h.le@dektech.com.au>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 227db8e4c34674124ee6e4a9d534f3a0cc22304c
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Wed Oct 2 18:49:43 2019 +0700

    tipc: fix unlimited bundling of small messages
    
    [ Upstream commit e95584a889e1902fdf1ded9712e2c3c3083baf96 ]
    
    We have identified a problem with the "oversubscription" policy in the
    link transmission code.
    
    When small messages are transmitted, and the sending link has reached
    the transmit window limit, those messages will be bundled and put into
    the link backlog queue. However, bundles of data messages are counted
    at the 'CRITICAL' level, so that the counter for that level, instead of
    the counter for the real, bundled message's level is the one being
    increased.
    Subsequent, to-be-bundled data messages at non-CRITICAL levels continue
    to be tested against the unchanged counter for their own level, while
    contributing to an unrestrained increase at the CRITICAL backlog level.
    
    This leaves a gap in congestion control algorithm for small messages
    that can result in starvation for other users or a "real" CRITICAL
    user. Even that eventually can lead to buffer exhaustion & link reset.
    
    We fix this by keeping a 'target_bskb' buffer pointer at each levels,
    then when bundling, we only bundle messages at the same importance
    level only. This way, we know exactly how many slots a certain level
    have occupied in the queue, so can manage level congestion accurately.
    
    By bundling messages at the same level, we even have more benefits. Let
    consider this:
    - One socket sends 64-byte messages at the 'CRITICAL' level;
    - Another sends 4096-byte messages at the 'LOW' level;
    
    When a 64-byte message comes and is bundled the first time, we put the
    overhead of message bundle to it (+ 40-byte header, data copy, etc.)
    for later use, but the next message can be a 4096-byte one that cannot
    be bundled to the previous one. This means the last bundle carries only
    one payload message which is totally inefficient, as for the receiver
    also! Later on, another 64-byte message comes, now we make a new bundle
    and the same story repeats...
    
    With the new bundling algorithm, this will not happen, the 64-byte
    messages will be bundled together even when the 4096-byte message(s)
    comes in between. However, if the 4096-byte messages are sent at the
    same level i.e. 'CRITICAL', the bundling algorithm will again cause the
    same overhead.
    
    Also, the same will happen even with only one socket sending small
    messages at a rate close to the link transmit's one, so that, when one
    message is bundled, it's transmitted shortly. Then, another message
    comes, a new bundle is created and so on...
    
    We will solve this issue radically by another patch.
    
    Fixes: 365ad353c256 ("tipc: reduce risk of user starvation during link congestion")
    Reported-by: Hoang Le <hoang.h.le@dektech.com.au>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c6c08614eb32d250612c9d2940e48951fb4ba325
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Sat Oct 5 20:04:40 2019 +0200

    net: tipc: allocate attrs locally instead of using genl_family_attrbuf in compat_dumpit()
    
    As this is the last user of genl_family_attrbuf, convert to allocate
    attrs locally and do it in a similar way this is done in compat_doit().
    
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 057af70713445fad2459aa348c9c2c4ecf7db938
Author: Jiri Pirko <jiri@mellanox.com>
Date:   Sat Oct 5 20:04:39 2019 +0200

    net: tipc: have genetlink code to parse the attrs during dumpit
    
    Benefit from the fact that the generic netlink code can parse the attrs
    for dumpit op and avoid need to parse it in the op callback.
    
    Signed-off-by: Jiri Pirko <jiri@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d6547f2a2cfc8b145b59291d3e4b072891f34882
Author: Alexey Dobriyan <adobriyan@gmail.com>
Date:   Thu Oct 3 23:29:24 2019 +0300

    net, uapi: fix -Wpointer-arith warnings
    
    Add casts to fix these warnings:
    
    ./usr/include/linux/netfilter_arp/arp_tables.h:200:19: error: pointer of type 'void *' used in arithmetic [-Werror=pointer-arith]
    ./usr/include/linux/netfilter_bridge/ebtables.h:197:19: error: pointer of type 'void *' used in arithmetic [-Werror=pointer-arith]
    ./usr/include/linux/netfilter_ipv4/ip_tables.h:223:19: error: pointer of type 'void *' used in arithmetic [-Werror=pointer-arith]
    ./usr/include/linux/netfilter_ipv6/ip6_tables.h:263:19: error: pointer of type 'void *' used in arithmetic [-Werror=pointer-arith]
    ./usr/include/linux/tipc_config.h:310:28: error: pointer of type 'void *' used in arithmetic [-Werror=pointer-arith]
    ./usr/include/linux/tipc_config.h:410:24: error: pointer of type 'void *' used in arithmetic [-Werror=pointer-arith]
    ./usr/include/linux/virtio_ring.h:170:16: error: pointer of type 'void *' used in arithmetic [-Werror=pointer-arith]
    
    Those are theoretical probably but kernel doesn't control compiler flags
    in userspace.
    
    Signed-off-by: Alexey Dobriyan <adobriyan@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e95584a889e1902fdf1ded9712e2c3c3083baf96
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Wed Oct 2 18:49:43 2019 +0700

    tipc: fix unlimited bundling of small messages
    
    We have identified a problem with the "oversubscription" policy in the
    link transmission code.
    
    When small messages are transmitted, and the sending link has reached
    the transmit window limit, those messages will be bundled and put into
    the link backlog queue. However, bundles of data messages are counted
    at the 'CRITICAL' level, so that the counter for that level, instead of
    the counter for the real, bundled message's level is the one being
    increased.
    Subsequent, to-be-bundled data messages at non-CRITICAL levels continue
    to be tested against the unchanged counter for their own level, while
    contributing to an unrestrained increase at the CRITICAL backlog level.
    
    This leaves a gap in congestion control algorithm for small messages
    that can result in starvation for other users or a "real" CRITICAL
    user. Even that eventually can lead to buffer exhaustion & link reset.
    
    We fix this by keeping a 'target_bskb' buffer pointer at each levels,
    then when bundling, we only bundle messages at the same importance
    level only. This way, we know exactly how many slots a certain level
    have occupied in the queue, so can manage level congestion accurately.
    
    By bundling messages at the same level, we even have more benefits. Let
    consider this:
    - One socket sends 64-byte messages at the 'CRITICAL' level;
    - Another sends 4096-byte messages at the 'LOW' level;
    
    When a 64-byte message comes and is bundled the first time, we put the
    overhead of message bundle to it (+ 40-byte header, data copy, etc.)
    for later use, but the next message can be a 4096-byte one that cannot
    be bundled to the previous one. This means the last bundle carries only
    one payload message which is totally inefficient, as for the receiver
    also! Later on, another 64-byte message comes, now we make a new bundle
    and the same story repeats...
    
    With the new bundling algorithm, this will not happen, the 64-byte
    messages will be bundled together even when the 4096-byte message(s)
    comes in between. However, if the 4096-byte messages are sent at the
    same level i.e. 'CRITICAL', the bundling algorithm will again cause the
    same overhead.
    
    Also, the same will happen even with only one socket sending small
    messages at a rate close to the link transmit's one, so that, when one
    message is bundled, it's transmitted shortly. Then, another message
    comes, a new bundle is created and so on...
    
    We will solve this issue radically by another patch.
    
    Fixes: 365ad353c256 ("tipc: reduce risk of user starvation during link congestion")
    Reported-by: Hoang Le <hoang.h.le@dektech.com.au>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 06a80feb3f20cbaaf087dca14580a346b3fd11a1
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Sep 3 17:53:12 2019 +0800

    tipc: add NULL pointer check before calling kfree_rcu
    
    [ Upstream commit 42dec1dbe38239cf91cc1f4df7830c66276ced37 ]
    
    Unlike kfree(p), kfree_rcu(p, rcu) won't do NULL pointer check. When
    tipc_nametbl_remove_publ returns NULL, the panic below happens:
    
       BUG: unable to handle kernel NULL pointer dereference at 0000000000000068
       RIP: 0010:__call_rcu+0x1d/0x290
       Call Trace:
        <IRQ>
        tipc_publ_notify+0xa9/0x170 [tipc]
        tipc_node_write_unlock+0x8d/0x100 [tipc]
        tipc_node_link_down+0xae/0x1d0 [tipc]
        tipc_node_check_dest+0x3ea/0x8f0 [tipc]
        ? tipc_disc_rcv+0x2c7/0x430 [tipc]
        tipc_disc_rcv+0x2c7/0x430 [tipc]
        ? tipc_rcv+0x6bb/0xf20 [tipc]
        tipc_rcv+0x6bb/0xf20 [tipc]
        ? ip_route_input_slow+0x9cf/0xb10
        tipc_udp_recv+0x195/0x1e0 [tipc]
        ? tipc_udp_is_known_peer+0x80/0x80 [tipc]
        udp_queue_rcv_skb+0x180/0x460
        udp_unicast_rcv_skb.isra.56+0x75/0x90
        __udp4_lib_rcv+0x4ce/0xb90
        ip_local_deliver_finish+0x11c/0x210
        ip_local_deliver+0x6b/0xe0
        ? ip_rcv_finish+0xa9/0x410
        ip_rcv+0x273/0x362
    
    Fixes: 97ede29e80ee ("tipc: convert name table read-write lock to RCU")
    Reported-by: Li Shuang <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b9eeaa30e4ea12c416f9d085a597adcbb7b28239
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Sep 3 17:53:12 2019 +0800

    tipc: add NULL pointer check before calling kfree_rcu
    
    [ Upstream commit 42dec1dbe38239cf91cc1f4df7830c66276ced37 ]
    
    Unlike kfree(p), kfree_rcu(p, rcu) won't do NULL pointer check. When
    tipc_nametbl_remove_publ returns NULL, the panic below happens:
    
       BUG: unable to handle kernel NULL pointer dereference at 0000000000000068
       RIP: 0010:__call_rcu+0x1d/0x290
       Call Trace:
        <IRQ>
        tipc_publ_notify+0xa9/0x170 [tipc]
        tipc_node_write_unlock+0x8d/0x100 [tipc]
        tipc_node_link_down+0xae/0x1d0 [tipc]
        tipc_node_check_dest+0x3ea/0x8f0 [tipc]
        ? tipc_disc_rcv+0x2c7/0x430 [tipc]
        tipc_disc_rcv+0x2c7/0x430 [tipc]
        ? tipc_rcv+0x6bb/0xf20 [tipc]
        tipc_rcv+0x6bb/0xf20 [tipc]
        ? ip_route_input_slow+0x9cf/0xb10
        tipc_udp_recv+0x195/0x1e0 [tipc]
        ? tipc_udp_is_known_peer+0x80/0x80 [tipc]
        udp_queue_rcv_skb+0x180/0x460
        udp_unicast_rcv_skb.isra.56+0x75/0x90
        __udp4_lib_rcv+0x4ce/0xb90
        ip_local_deliver_finish+0x11c/0x210
        ip_local_deliver+0x6b/0xe0
        ? ip_rcv_finish+0xa9/0x410
        ip_rcv+0x273/0x362
    
    Fixes: 97ede29e80ee ("tipc: convert name table read-write lock to RCU")
    Reported-by: Li Shuang <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 48da78093aa1b697029c9a7736366fcf1f1b8586
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Sep 3 17:53:12 2019 +0800

    tipc: add NULL pointer check before calling kfree_rcu
    
    [ Upstream commit 42dec1dbe38239cf91cc1f4df7830c66276ced37 ]
    
    Unlike kfree(p), kfree_rcu(p, rcu) won't do NULL pointer check. When
    tipc_nametbl_remove_publ returns NULL, the panic below happens:
    
       BUG: unable to handle kernel NULL pointer dereference at 0000000000000068
       RIP: 0010:__call_rcu+0x1d/0x290
       Call Trace:
        <IRQ>
        tipc_publ_notify+0xa9/0x170 [tipc]
        tipc_node_write_unlock+0x8d/0x100 [tipc]
        tipc_node_link_down+0xae/0x1d0 [tipc]
        tipc_node_check_dest+0x3ea/0x8f0 [tipc]
        ? tipc_disc_rcv+0x2c7/0x430 [tipc]
        tipc_disc_rcv+0x2c7/0x430 [tipc]
        ? tipc_rcv+0x6bb/0xf20 [tipc]
        tipc_rcv+0x6bb/0xf20 [tipc]
        ? ip_route_input_slow+0x9cf/0xb10
        tipc_udp_recv+0x195/0x1e0 [tipc]
        ? tipc_udp_is_known_peer+0x80/0x80 [tipc]
        udp_queue_rcv_skb+0x180/0x460
        udp_unicast_rcv_skb.isra.56+0x75/0x90
        __udp4_lib_rcv+0x4ce/0xb90
        ip_local_deliver_finish+0x11c/0x210
        ip_local_deliver+0x6b/0xe0
        ? ip_rcv_finish+0xa9/0x410
        ip_rcv+0x273/0x362
    
    Fixes: 97ede29e80ee ("tipc: convert name table read-write lock to RCU")
    Reported-by: Li Shuang <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a4598424e99feda9c6592230a0d020869f776f1
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Sep 3 17:53:12 2019 +0800

    tipc: add NULL pointer check before calling kfree_rcu
    
    [ Upstream commit 42dec1dbe38239cf91cc1f4df7830c66276ced37 ]
    
    Unlike kfree(p), kfree_rcu(p, rcu) won't do NULL pointer check. When
    tipc_nametbl_remove_publ returns NULL, the panic below happens:
    
       BUG: unable to handle kernel NULL pointer dereference at 0000000000000068
       RIP: 0010:__call_rcu+0x1d/0x290
       Call Trace:
        <IRQ>
        tipc_publ_notify+0xa9/0x170 [tipc]
        tipc_node_write_unlock+0x8d/0x100 [tipc]
        tipc_node_link_down+0xae/0x1d0 [tipc]
        tipc_node_check_dest+0x3ea/0x8f0 [tipc]
        ? tipc_disc_rcv+0x2c7/0x430 [tipc]
        tipc_disc_rcv+0x2c7/0x430 [tipc]
        ? tipc_rcv+0x6bb/0xf20 [tipc]
        tipc_rcv+0x6bb/0xf20 [tipc]
        ? ip_route_input_slow+0x9cf/0xb10
        tipc_udp_recv+0x195/0x1e0 [tipc]
        ? tipc_udp_is_known_peer+0x80/0x80 [tipc]
        udp_queue_rcv_skb+0x180/0x460
        udp_unicast_rcv_skb.isra.56+0x75/0x90
        __udp4_lib_rcv+0x4ce/0xb90
        ip_local_deliver_finish+0x11c/0x210
        ip_local_deliver+0x6b/0xe0
        ? ip_rcv_finish+0xa9/0x410
        ip_rcv+0x273/0x362
    
    Fixes: 97ede29e80ee ("tipc: convert name table read-write lock to RCU")
    Reported-by: Li Shuang <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7de5d0c7e7b86141824cb01824fb47999dd803d5
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Sep 3 17:53:12 2019 +0800

    tipc: add NULL pointer check before calling kfree_rcu
    
    [ Upstream commit 42dec1dbe38239cf91cc1f4df7830c66276ced37 ]
    
    Unlike kfree(p), kfree_rcu(p, rcu) won't do NULL pointer check. When
    tipc_nametbl_remove_publ returns NULL, the panic below happens:
    
       BUG: unable to handle kernel NULL pointer dereference at 0000000000000068
       RIP: 0010:__call_rcu+0x1d/0x290
       Call Trace:
        <IRQ>
        tipc_publ_notify+0xa9/0x170 [tipc]
        tipc_node_write_unlock+0x8d/0x100 [tipc]
        tipc_node_link_down+0xae/0x1d0 [tipc]
        tipc_node_check_dest+0x3ea/0x8f0 [tipc]
        ? tipc_disc_rcv+0x2c7/0x430 [tipc]
        tipc_disc_rcv+0x2c7/0x430 [tipc]
        ? tipc_rcv+0x6bb/0xf20 [tipc]
        tipc_rcv+0x6bb/0xf20 [tipc]
        ? ip_route_input_slow+0x9cf/0xb10
        tipc_udp_recv+0x195/0x1e0 [tipc]
        ? tipc_udp_is_known_peer+0x80/0x80 [tipc]
        udp_queue_rcv_skb+0x180/0x460
        udp_unicast_rcv_skb.isra.56+0x75/0x90
        __udp4_lib_rcv+0x4ce/0xb90
        ip_local_deliver_finish+0x11c/0x210
        ip_local_deliver+0x6b/0xe0
        ? ip_rcv_finish+0xa9/0x410
        ip_rcv+0x273/0x362
    
    Fixes: 97ede29e80ee ("tipc: convert name table read-write lock to RCU")
    Reported-by: Li Shuang <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 42dec1dbe38239cf91cc1f4df7830c66276ced37
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Sep 3 17:53:12 2019 +0800

    tipc: add NULL pointer check before calling kfree_rcu
    
    Unlike kfree(p), kfree_rcu(p, rcu) won't do NULL pointer check. When
    tipc_nametbl_remove_publ returns NULL, the panic below happens:
    
       BUG: unable to handle kernel NULL pointer dereference at 0000000000000068
       RIP: 0010:__call_rcu+0x1d/0x290
       Call Trace:
        <IRQ>
        tipc_publ_notify+0xa9/0x170 [tipc]
        tipc_node_write_unlock+0x8d/0x100 [tipc]
        tipc_node_link_down+0xae/0x1d0 [tipc]
        tipc_node_check_dest+0x3ea/0x8f0 [tipc]
        ? tipc_disc_rcv+0x2c7/0x430 [tipc]
        tipc_disc_rcv+0x2c7/0x430 [tipc]
        ? tipc_rcv+0x6bb/0xf20 [tipc]
        tipc_rcv+0x6bb/0xf20 [tipc]
        ? ip_route_input_slow+0x9cf/0xb10
        tipc_udp_recv+0x195/0x1e0 [tipc]
        ? tipc_udp_is_known_peer+0x80/0x80 [tipc]
        udp_queue_rcv_skb+0x180/0x460
        udp_unicast_rcv_skb.isra.56+0x75/0x90
        __udp4_lib_rcv+0x4ce/0xb90
        ip_local_deliver_finish+0x11c/0x210
        ip_local_deliver+0x6b/0xe0
        ? ip_rcv_finish+0xa9/0x410
        ip_rcv+0x273/0x362
    
    Fixes: 97ede29e80ee ("tipc: convert name table read-write lock to RCU")
    Reported-by: Li Shuang <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e5cdd65c1534e6aab6c2378b0605298c7cd60b67
Author: Chris Packham <chris.packham@alliedtelesis.co.nz>
Date:   Mon Aug 12 08:18:25 2019 +1200

    tipc: initialise addr_trail_end when setting node addresses
    
    [ Upstream commit 8874ecae2977e5a2d4f0ba301364435b81c05938 ]
    
    We set the field 'addr_trial_end' to 'jiffies', instead of the current
    value 0, at the moment the node address is initialized. This guarantees
    we don't inadvertently enter an address trial period when the node
    address is explicitly set by the user.
    
    Signed-off-by: Chris Packham <chris.packham@alliedtelesis.co.nz>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc4ff0f4f564a4e88bb88507b6b333eced41b4bb
Author: Chris Packham <chris.packham@alliedtelesis.co.nz>
Date:   Mon Aug 12 08:18:25 2019 +1200

    tipc: initialise addr_trail_end when setting node addresses
    
    [ Upstream commit 8874ecae2977e5a2d4f0ba301364435b81c05938 ]
    
    We set the field 'addr_trial_end' to 'jiffies', instead of the current
    value 0, at the moment the node address is initialized. This guarantees
    we don't inadvertently enter an address trial period when the node
    address is explicitly set by the user.
    
    Signed-off-by: Chris Packham <chris.packham@alliedtelesis.co.nz>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 06821504fd47a5e5b641aeeb638a0ae10a216ef8
Merge: 555df336c754 cfef46d692ef
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Aug 19 10:00:01 2019 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net
    
    Pull networking fixes from David Miller:
    
      1) Fix jmp to 1st instruction in x64 JIT, from Alexei Starovoitov.
    
      2) Severl kTLS fixes in mlx5 driver, from Tariq Toukan.
    
      3) Fix severe performance regression due to lack of SKB coalescing of
         fragments during local delivery, from Guillaume Nault.
    
      4) Error path memory leak in sch_taprio, from Ivan Khoronzhuk.
    
      5) Fix batched events in skbedit packet action, from Roman Mashak.
    
      6) Propagate VLAN TX offload to hw_enc_features in bond and team
         drivers, from Yue Haibing.
    
      7) RXRPC local endpoint refcounting fix and read after free in
         rxrpc_queue_local(), from David Howells.
    
      8) Fix endian bug in ibmveth multicast list handling, from Thomas
         Falcon.
    
      9) Oops, make nlmsg_parse() wrap around the correct function,
         __nlmsg_parse not __nla_parse(). Fix from David Ahern.
    
     10) Memleak in sctp_scend_reset_streams(), fro Zheng Bin.
    
     11) Fix memory leak in cxgb4, from Wenwen Wang.
    
     12) Yet another race in AF_PACKET, from Eric Dumazet.
    
     13) Fix false detection of retransmit failures in tipc, from Tuong
         Lien.
    
     14) Use after free in ravb_tstamp_skb, from Tho Vu.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/netdev/net: (101 commits)
      ravb: Fix use-after-free ravb_tstamp_skb
      netfilter: nf_tables: map basechain priority to hardware priority
      net: sched: use major priority number as hardware priority
      wimax/i2400m: fix a memory leak bug
      net: cavium: fix driver name
      ibmvnic: Unmap DMA address of TX descriptor buffers after use
      bnxt_en: Fix to include flow direction in L2 key
      bnxt_en: Use correct src_fid to determine direction of the flow
      bnxt_en: Suppress HWRM errors for HWRM_NVM_GET_VARIABLE command
      bnxt_en: Fix handling FRAG_ERR when NVM_INSTALL_UPDATE cmd fails
      bnxt_en: Improve RX doorbell sequence.
      bnxt_en: Fix VNIC clearing logic for 57500 chips.
      net: kalmia: fix memory leaks
      cx82310_eth: fix a memory leak bug
      bnx2x: Fix VF's VLAN reconfiguration in reload.
      Bluetooth: Add debug setting for changing minimum encryption key size
      tipc: fix false detection of retransmit failures
      lan78xx: Fix memory leaks
      MAINTAINERS: r8169: Update path to the driver
      MAINTAINERS: PHY LIBRARY: Update files in the record
      ...

commit e654f9f53b45fde3fcc8051830b212c7a8f36148
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Aug 15 16:42:50 2019 +0200

    tipc: clean up skb list lock handling on send path
    
    The policy for handling the skb list locks on the send and receive paths
    is simple.
    
    - On the send path we never need to grab the lock on the 'xmitq' list
      when the destination is an exernal node.
    
    - On the receive path we always need to grab the lock on the 'inputq'
      list, irrespective of source node.
    
    However, when transmitting node local messages those will eventually
    end up on the receive path of a local socket, meaning that the argument
    'xmitq' in tipc_node_xmit() will become the 'ínputq' argument in  the
    function tipc_sk_rcv(). This has been handled by always initializing
    the spinlock of the 'xmitq' list at message creation, just in case it
    may end up on the receive path later, and despite knowing that the lock
    in most cases never will be used.
    
    This approach is inaccurate and confusing, and has also concealed the
    fact that the stated 'no lock grabbing' policy for the send path is
    violated in some cases.
    
    We now clean up this by never initializing the lock at message creation,
    instead doing this at the moment we find that the message actually will
    enter the receive path. At the same time we fix the four locations
    where we incorrectly access the spinlock on the send/error path.
    
    This patch also reverts commit d12cffe9329f ("tipc: ensure head->lock
    is initialised") which has now become redundant.
    
    CC: Eric Dumazet <edumazet@google.com>
    Reported-by: Chris Packham <chris.packham@alliedtelesis.co.nz>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 712042313b23b5df7451faf4b279beb3025e990c
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Thu Aug 15 10:24:08 2019 +0700

    tipc: fix false detection of retransmit failures
    
    This commit eliminates the use of the link 'stale_limit' & 'prev_from'
    (besides the already removed - 'stale_cnt') variables in the detection
    of repeated retransmit failures as there is no proper way to initialize
    them to avoid a false detection, i.e. it is not really a retransmission
    failure but due to a garbage values in the variables.
    
    Instead, a jiffies variable will be added to individual skbs (like the
    way we restrict the skb retransmissions) in order to mark the first skb
    retransmit time. Later on, at the next retransmissions, the timestamp
    will be checked to see if the skb in the link transmq is "too stale",
    that is, the link tolerance time has passed, so that a link reset will
    be ordered. Note, just checking on the first skb in the queue is fine
    enough since it must be the oldest one.
    A counter is also added to keep track the actual skb retransmissions'
    number for later checking when the failure happens.
    
    The downside of this approach is that the skb->cb[] buffer is about to
    be exhausted, however it is always able to allocate another memory area
    and keep a reference to it when needed.
    
    Fixes: 77cf8edbc0e7 ("tipc: simplify stale link failure criteria")
    Reported-by: Hoang Le <hoang.h.le@dektech.com.au>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f96f1647cf6b35c0e13b3f6e0df9585cf88e6d2f
Author: Jie Liu <liujie165@huawei.com>
Date:   Tue Apr 16 13:10:09 2019 +0800

    tipc: set sysctl_tipc_rmem and named_timeout right range
    
    commit 4bcd4ec1017205644a2697bccbc3b5143f522f5f upstream.
    
    We find that sysctl_tipc_rmem and named_timeout do not have the right minimum
    setting. sysctl_tipc_rmem should be larger than zero, like sysctl_tcp_rmem.
    And named_timeout as a timeout setting should be not less than zero.
    
    Fixes: cc79dd1ba9c10 ("tipc: change socket buffer overflow control to respect sk_rcvbuf")
    Fixes: a5325ae5b8bff ("tipc: add name distributor resiliency queue")
    Signed-off-by: Jie Liu <liujie165@huawei.com>
    Reported-by: Qiang Ning <ningqiang1@huawei.com>
    Reviewed-by: Zhiqiang Liu <liuzhiqiang26@huawei.com>
    Reviewed-by: Miaohe Lin <linmiaohe@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [bwh: Backported to 3.16: only the tipc_rmem sysctl exists here]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 8874ecae2977e5a2d4f0ba301364435b81c05938
Author: Chris Packham <chris.packham@alliedtelesis.co.nz>
Date:   Mon Aug 12 08:18:25 2019 +1200

    tipc: initialise addr_trail_end when setting node addresses
    
    We set the field 'addr_trial_end' to 'jiffies', instead of the current
    value 0, at the moment the node address is initialized. This guarantees
    we don't inadvertently enter an address trial period when the node
    address is explicitly set by the user.
    
    Signed-off-by: Chris Packham <chris.packham@alliedtelesis.co.nz>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 695074c7f4d4270867be2fc31f31db2021877542
Author: Taras Kondratiuk <takondra@cisco.com>
Date:   Mon Jul 29 22:15:07 2019 +0000

    tipc: compat: allow tipc commands without arguments
    
    [ Upstream commit 4da5f0018eef4c0de31675b670c80e82e13e99d1 ]
    
    Commit 2753ca5d9009 ("tipc: fix uninit-value in tipc_nl_compat_doit")
    broke older tipc tools that use compat interface (e.g. tipc-config from
    tipcutils package):
    
    % tipc-config -p
    operation not supported
    
    The commit started to reject TIPC netlink compat messages that do not
    have attributes. It is too restrictive because some of such messages are
    valid (they don't need any arguments):
    
    % grep 'tx none' include/uapi/linux/tipc_config.h
    #define  TIPC_CMD_NOOP              0x0000    /* tx none, rx none */
    #define  TIPC_CMD_GET_MEDIA_NAMES   0x0002    /* tx none, rx media_name(s) */
    #define  TIPC_CMD_GET_BEARER_NAMES  0x0003    /* tx none, rx bearer_name(s) */
    #define  TIPC_CMD_SHOW_PORTS        0x0006    /* tx none, rx ultra_string */
    #define  TIPC_CMD_GET_REMOTE_MNG    0x4003    /* tx none, rx unsigned */
    #define  TIPC_CMD_GET_MAX_PORTS     0x4004    /* tx none, rx unsigned */
    #define  TIPC_CMD_GET_NETID         0x400B    /* tx none, rx unsigned */
    #define  TIPC_CMD_NOT_NET_ADMIN     0xC001    /* tx none, rx none */
    
    This patch relaxes the original fix and rejects messages without
    arguments only if such arguments are expected by a command (reg_type is
    non zero).
    
    Fixes: 2753ca5d9009 ("tipc: fix uninit-value in tipc_nl_compat_doit")
    Cc: stable@vger.kernel.org
    Signed-off-by: Taras Kondratiuk <takondra@cisco.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6eded45da9faabd59ef3f4fff5ea61f6d2c7cea2
Author: Taras Kondratiuk <takondra@cisco.com>
Date:   Mon Jul 29 22:15:07 2019 +0000

    tipc: compat: allow tipc commands without arguments
    
    [ Upstream commit 4da5f0018eef4c0de31675b670c80e82e13e99d1 ]
    
    Commit 2753ca5d9009 ("tipc: fix uninit-value in tipc_nl_compat_doit")
    broke older tipc tools that use compat interface (e.g. tipc-config from
    tipcutils package):
    
    % tipc-config -p
    operation not supported
    
    The commit started to reject TIPC netlink compat messages that do not
    have attributes. It is too restrictive because some of such messages are
    valid (they don't need any arguments):
    
    % grep 'tx none' include/uapi/linux/tipc_config.h
    #define  TIPC_CMD_NOOP              0x0000    /* tx none, rx none */
    #define  TIPC_CMD_GET_MEDIA_NAMES   0x0002    /* tx none, rx media_name(s) */
    #define  TIPC_CMD_GET_BEARER_NAMES  0x0003    /* tx none, rx bearer_name(s) */
    #define  TIPC_CMD_SHOW_PORTS        0x0006    /* tx none, rx ultra_string */
    #define  TIPC_CMD_GET_REMOTE_MNG    0x4003    /* tx none, rx unsigned */
    #define  TIPC_CMD_GET_MAX_PORTS     0x4004    /* tx none, rx unsigned */
    #define  TIPC_CMD_GET_NETID         0x400B    /* tx none, rx unsigned */
    #define  TIPC_CMD_NOT_NET_ADMIN     0xC001    /* tx none, rx none */
    
    This patch relaxes the original fix and rejects messages without
    arguments only if such arguments are expected by a command (reg_type is
    non zero).
    
    Fixes: 2753ca5d9009 ("tipc: fix uninit-value in tipc_nl_compat_doit")
    Cc: stable@vger.kernel.org
    Signed-off-by: Taras Kondratiuk <takondra@cisco.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 13e82540b7c28cb73437b51a7a0b5d6504f914c4
Author: Taras Kondratiuk <takondra@cisco.com>
Date:   Mon Jul 29 22:15:07 2019 +0000

    tipc: compat: allow tipc commands without arguments
    
    [ Upstream commit 4da5f0018eef4c0de31675b670c80e82e13e99d1 ]
    
    Commit 2753ca5d9009 ("tipc: fix uninit-value in tipc_nl_compat_doit")
    broke older tipc tools that use compat interface (e.g. tipc-config from
    tipcutils package):
    
    % tipc-config -p
    operation not supported
    
    The commit started to reject TIPC netlink compat messages that do not
    have attributes. It is too restrictive because some of such messages are
    valid (they don't need any arguments):
    
    % grep 'tx none' include/uapi/linux/tipc_config.h
    #define  TIPC_CMD_NOOP              0x0000    /* tx none, rx none */
    #define  TIPC_CMD_GET_MEDIA_NAMES   0x0002    /* tx none, rx media_name(s) */
    #define  TIPC_CMD_GET_BEARER_NAMES  0x0003    /* tx none, rx bearer_name(s) */
    #define  TIPC_CMD_SHOW_PORTS        0x0006    /* tx none, rx ultra_string */
    #define  TIPC_CMD_GET_REMOTE_MNG    0x4003    /* tx none, rx unsigned */
    #define  TIPC_CMD_GET_MAX_PORTS     0x4004    /* tx none, rx unsigned */
    #define  TIPC_CMD_GET_NETID         0x400B    /* tx none, rx unsigned */
    #define  TIPC_CMD_NOT_NET_ADMIN     0xC001    /* tx none, rx none */
    
    This patch relaxes the original fix and rejects messages without
    arguments only if such arguments are expected by a command (reg_type is
    non zero).
    
    Fixes: 2753ca5d9009 ("tipc: fix uninit-value in tipc_nl_compat_doit")
    Cc: stable@vger.kernel.org
    Signed-off-by: Taras Kondratiuk <takondra@cisco.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5295d651548559e90245a5d744566af98d951df1
Author: Taras Kondratiuk <takondra@cisco.com>
Date:   Mon Jul 29 22:15:07 2019 +0000

    tipc: compat: allow tipc commands without arguments
    
    [ Upstream commit 4da5f0018eef4c0de31675b670c80e82e13e99d1 ]
    
    Commit 2753ca5d9009 ("tipc: fix uninit-value in tipc_nl_compat_doit")
    broke older tipc tools that use compat interface (e.g. tipc-config from
    tipcutils package):
    
    % tipc-config -p
    operation not supported
    
    The commit started to reject TIPC netlink compat messages that do not
    have attributes. It is too restrictive because some of such messages are
    valid (they don't need any arguments):
    
    % grep 'tx none' include/uapi/linux/tipc_config.h
    #define  TIPC_CMD_NOOP              0x0000    /* tx none, rx none */
    #define  TIPC_CMD_GET_MEDIA_NAMES   0x0002    /* tx none, rx media_name(s) */
    #define  TIPC_CMD_GET_BEARER_NAMES  0x0003    /* tx none, rx bearer_name(s) */
    #define  TIPC_CMD_SHOW_PORTS        0x0006    /* tx none, rx ultra_string */
    #define  TIPC_CMD_GET_REMOTE_MNG    0x4003    /* tx none, rx unsigned */
    #define  TIPC_CMD_GET_MAX_PORTS     0x4004    /* tx none, rx unsigned */
    #define  TIPC_CMD_GET_NETID         0x400B    /* tx none, rx unsigned */
    #define  TIPC_CMD_NOT_NET_ADMIN     0xC001    /* tx none, rx none */
    
    This patch relaxes the original fix and rejects messages without
    arguments only if such arguments are expected by a command (reg_type is
    non zero).
    
    Fixes: 2753ca5d9009 ("tipc: fix uninit-value in tipc_nl_compat_doit")
    Cc: stable@vger.kernel.org
    Signed-off-by: Taras Kondratiuk <takondra@cisco.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a5a0a7f99a948327eedad8f5e307d8566e581751
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Tue Jul 30 20:19:10 2019 +0200

    tipc: fix unitilized skb list crash
    
    [ Upstream commit 2948a1fcd77a8bb11604387e3fc52f0ebf5729e9 ]
    
    Our test suite somtimes provokes the following crash:
    
    Description of problem:
    [ 1092.597234] BUG: unable to handle kernel NULL pointer dereference at 00000000000000e8
    [ 1092.605072] PGD 0 P4D 0
    [ 1092.607620] Oops: 0000 [#1] SMP PTI
    [ 1092.611118] CPU: 37 PID: 0 Comm: swapper/37 Kdump: loaded Not tainted 4.18.0-122.el8.x86_64 #1
    [ 1092.619724] Hardware name: Dell Inc. PowerEdge R740/08D89F, BIOS 1.3.7 02/08/2018
    [ 1092.627215] RIP: 0010:tipc_mcast_filter_msg+0x93/0x2d0 [tipc]
    [ 1092.632955] Code: 0f 84 aa 01 00 00 89 cf 4d 01 ca 4c 8b 26 c1 ef 19 83 e7 0f 83 ff 0c 4d 0f 45 d1 41 8b 6a 10 0f cd 4c 39 e6 0f 84 81 01 00 00 <4d> 8b 9c 24 e8 00 00 00 45 8b 13 41 0f ca 44 89 d7 c1 ef 13 83 e7
    [ 1092.651703] RSP: 0018:ffff929e5fa83a18 EFLAGS: 00010282
    [ 1092.656927] RAX: ffff929e3fb38100 RBX: 00000000069f29ee RCX: 00000000416c0045
    [ 1092.664058] RDX: ffff929e5fa83a88 RSI: ffff929e31a28420 RDI: 0000000000000000
    [ 1092.671209] RBP: 0000000029b11821 R08: 0000000000000000 R09: ffff929e39b4407a
    [ 1092.678343] R10: ffff929e39b4407a R11: 0000000000000007 R12: 0000000000000000
    [ 1092.685475] R13: 0000000000000001 R14: ffff929e3fb38100 R15: ffff929e39b4407a
    [ 1092.692614] FS:  0000000000000000(0000) GS:ffff929e5fa80000(0000) knlGS:0000000000000000
    [ 1092.700702] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [ 1092.706447] CR2: 00000000000000e8 CR3: 000000031300a004 CR4: 00000000007606e0
    [ 1092.713579] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [ 1092.720712] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [ 1092.727843] PKRU: 55555554
    [ 1092.730556] Call Trace:
    [ 1092.733010]  <IRQ>
    [ 1092.735034]  tipc_sk_filter_rcv+0x7ca/0xb80 [tipc]
    [ 1092.739828]  ? __kmalloc_node_track_caller+0x1cb/0x290
    [ 1092.744974]  ? dev_hard_start_xmit+0xa5/0x210
    [ 1092.749332]  tipc_sk_rcv+0x389/0x640 [tipc]
    [ 1092.753519]  tipc_sk_mcast_rcv+0x23c/0x3a0 [tipc]
    [ 1092.758224]  tipc_rcv+0x57a/0xf20 [tipc]
    [ 1092.762154]  ? ktime_get_real_ts64+0x40/0xe0
    [ 1092.766432]  ? tpacket_rcv+0x50/0x9f0
    [ 1092.770098]  tipc_l2_rcv_msg+0x4a/0x70 [tipc]
    [ 1092.774452]  __netif_receive_skb_core+0xb62/0xbd0
    [ 1092.779164]  ? enqueue_entity+0xf6/0x630
    [ 1092.783084]  ? kmem_cache_alloc+0x158/0x1c0
    [ 1092.787272]  ? __build_skb+0x25/0xd0
    [ 1092.790849]  netif_receive_skb_internal+0x42/0xf0
    [ 1092.795557]  napi_gro_receive+0xba/0xe0
    [ 1092.799417]  mlx5e_handle_rx_cqe+0x83/0xd0 [mlx5_core]
    [ 1092.804564]  mlx5e_poll_rx_cq+0xd5/0x920 [mlx5_core]
    [ 1092.809536]  mlx5e_napi_poll+0xb2/0xce0 [mlx5_core]
    [ 1092.814415]  ? __wake_up_common_lock+0x89/0xc0
    [ 1092.818861]  net_rx_action+0x149/0x3b0
    [ 1092.822616]  __do_softirq+0xe3/0x30a
    [ 1092.826193]  irq_exit+0x100/0x110
    [ 1092.829512]  do_IRQ+0x85/0xd0
    [ 1092.832483]  common_interrupt+0xf/0xf
    [ 1092.836147]  </IRQ>
    [ 1092.838255] RIP: 0010:cpuidle_enter_state+0xb7/0x2a0
    [ 1092.843221] Code: e8 3e 79 a5 ff 80 7c 24 03 00 74 17 9c 58 0f 1f 44 00 00 f6 c4 02 0f 85 d7 01 00 00 31 ff e8 a0 6b ab ff fb 66 0f 1f 44 00 00 <48> b8 ff ff ff ff f3 01 00 00 4c 29 f3 ba ff ff ff 7f 48 39 c3 7f
    [ 1092.861967] RSP: 0018:ffffaa5ec6533e98 EFLAGS: 00000246 ORIG_RAX: ffffffffffffffdd
    [ 1092.869530] RAX: ffff929e5faa3100 RBX: 000000fe63dd2092 RCX: 000000000000001f
    [ 1092.876665] RDX: 000000fe63dd2092 RSI: 000000003a518aaa RDI: 0000000000000000
    [ 1092.883795] RBP: 0000000000000003 R08: 0000000000000004 R09: 0000000000022940
    [ 1092.890929] R10: 0000040cb0666b56 R11: ffff929e5faa20a8 R12: ffff929e5faade78
    [ 1092.898060] R13: ffffffffb59258f8 R14: 000000fe60f3228d R15: 0000000000000000
    [ 1092.905196]  ? cpuidle_enter_state+0x92/0x2a0
    [ 1092.909555]  do_idle+0x236/0x280
    [ 1092.912785]  cpu_startup_entry+0x6f/0x80
    [ 1092.916715]  start_secondary+0x1a7/0x200
    [ 1092.920642]  secondary_startup_64+0xb7/0xc0
    [...]
    
    The reason is that the skb list tipc_socket::mc_method.deferredq only
    is initialized for connectionless sockets, while nothing stops arriving
    multicast messages from being filtered by connection oriented sockets,
    with subsequent access to the said list.
    
    We fix this by initializing the list unconditionally at socket creation.
    This eliminates the crash, while the message still is dropped further
    down in tipc_sk_filter_rcv() as it should be.
    
    Reported-by: Li Shuang <shuali@redhat.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit afbd10a472fac1aa46ac1ed536cd195961478f02
Author: Taras Kondratiuk <takondra@cisco.com>
Date:   Mon Jul 29 22:15:07 2019 +0000

    tipc: compat: allow tipc commands without arguments
    
    [ Upstream commit 4da5f0018eef4c0de31675b670c80e82e13e99d1 ]
    
    Commit 2753ca5d9009 ("tipc: fix uninit-value in tipc_nl_compat_doit")
    broke older tipc tools that use compat interface (e.g. tipc-config from
    tipcutils package):
    
    % tipc-config -p
    operation not supported
    
    The commit started to reject TIPC netlink compat messages that do not
    have attributes. It is too restrictive because some of such messages are
    valid (they don't need any arguments):
    
    % grep 'tx none' include/uapi/linux/tipc_config.h
    #define  TIPC_CMD_NOOP              0x0000    /* tx none, rx none */
    #define  TIPC_CMD_GET_MEDIA_NAMES   0x0002    /* tx none, rx media_name(s) */
    #define  TIPC_CMD_GET_BEARER_NAMES  0x0003    /* tx none, rx bearer_name(s) */
    #define  TIPC_CMD_SHOW_PORTS        0x0006    /* tx none, rx ultra_string */
    #define  TIPC_CMD_GET_REMOTE_MNG    0x4003    /* tx none, rx unsigned */
    #define  TIPC_CMD_GET_MAX_PORTS     0x4004    /* tx none, rx unsigned */
    #define  TIPC_CMD_GET_NETID         0x400B    /* tx none, rx unsigned */
    #define  TIPC_CMD_NOT_NET_ADMIN     0xC001    /* tx none, rx none */
    
    This patch relaxes the original fix and rejects messages without
    arguments only if such arguments are expected by a command (reg_type is
    non zero).
    
    Fixes: 2753ca5d9009 ("tipc: fix uninit-value in tipc_nl_compat_doit")
    Cc: stable@vger.kernel.org
    Signed-off-by: Taras Kondratiuk <takondra@cisco.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6c9081a3915dc0782a8f1424343b794f2cf53d9c
Author: John Rutherford <john.rutherford@dektech.com.au>
Date:   Wed Aug 7 12:52:29 2019 +1000

    tipc: add loopback device tracking
    
    Since node internal messages are passed directly to the socket, it is not
    possible to observe those messages via tcpdump or wireshark.
    
    We now remedy this by making it possible to clone such messages and send
    the clones to the loopback interface.  The clones are dropped at reception
    and have no functional role except making the traffic visible.
    
    The feature is enabled if network taps are active for the loopback device.
    pcap filtering restrictions require the messages to be presented to the
    receiving side of the loopback device.
    
    v3 - Function dev_nit_active used to check for network taps.
       - Procedure netif_rx_ni used to send cloned messages to loopback device.
    
    Signed-off-by: John Rutherford <john.rutherford@dektech.com.au>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7c5b42055964f587e55bd87ef334c3a27e95d144
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Tue Jul 30 16:23:18 2019 +0200

    tipc: reduce risk of wakeup queue starvation
    
    In commit 365ad353c256 ("tipc: reduce risk of user starvation during
    link congestion") we allowed senders to add exactly one list of extra
    buffers to the link backlog queues during link congestion (aka
    "oversubscription"). However, the criteria for when to stop adding
    wakeup messages to the input queue when the overload abates is
    inaccurate, and may cause starvation problems during very high load.
    
    Currently, we stop adding wakeup messages after 10 total failed attempts
    where we find that there is no space left in the backlog queue for a
    certain importance level. The counter for this is accumulated across all
    levels, which may lead the algorithm to leave the loop prematurely,
    although there may still be plenty of space available at some levels.
    The result is sometimes that messages near the wakeup queue tail are not
    added to the input queue as they should be.
    
    We now introduce a more exact algorithm, where we keep adding wakeup
    messages to a level as long as the backlog queue has free slots for
    the corresponding level, and stop at the moment there are no more such
    slots or when there are no more wakeup messages to dequeue.
    
    Fixes: 365ad35 ("tipc: reduce risk of user starvation during link congestion")
    Reported-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4da5f0018eef4c0de31675b670c80e82e13e99d1
Author: Taras Kondratiuk <takondra@cisco.com>
Date:   Mon Jul 29 22:15:07 2019 +0000

    tipc: compat: allow tipc commands without arguments
    
    Commit 2753ca5d9009 ("tipc: fix uninit-value in tipc_nl_compat_doit")
    broke older tipc tools that use compat interface (e.g. tipc-config from
    tipcutils package):
    
    % tipc-config -p
    operation not supported
    
    The commit started to reject TIPC netlink compat messages that do not
    have attributes. It is too restrictive because some of such messages are
    valid (they don't need any arguments):
    
    % grep 'tx none' include/uapi/linux/tipc_config.h
    #define  TIPC_CMD_NOOP              0x0000    /* tx none, rx none */
    #define  TIPC_CMD_GET_MEDIA_NAMES   0x0002    /* tx none, rx media_name(s) */
    #define  TIPC_CMD_GET_BEARER_NAMES  0x0003    /* tx none, rx bearer_name(s) */
    #define  TIPC_CMD_SHOW_PORTS        0x0006    /* tx none, rx ultra_string */
    #define  TIPC_CMD_GET_REMOTE_MNG    0x4003    /* tx none, rx unsigned */
    #define  TIPC_CMD_GET_MAX_PORTS     0x4004    /* tx none, rx unsigned */
    #define  TIPC_CMD_GET_NETID         0x400B    /* tx none, rx unsigned */
    #define  TIPC_CMD_NOT_NET_ADMIN     0xC001    /* tx none, rx none */
    
    This patch relaxes the original fix and rejects messages without
    arguments only if such arguments are expected by a command (reg_type is
    non zero).
    
    Fixes: 2753ca5d9009 ("tipc: fix uninit-value in tipc_nl_compat_doit")
    Cc: stable@vger.kernel.org
    Signed-off-by: Taras Kondratiuk <takondra@cisco.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2948a1fcd77a8bb11604387e3fc52f0ebf5729e9
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Tue Jul 30 20:19:10 2019 +0200

    tipc: fix unitilized skb list crash
    
    Our test suite somtimes provokes the following crash:
    
    Description of problem:
    [ 1092.597234] BUG: unable to handle kernel NULL pointer dereference at 00000000000000e8
    [ 1092.605072] PGD 0 P4D 0
    [ 1092.607620] Oops: 0000 [#1] SMP PTI
    [ 1092.611118] CPU: 37 PID: 0 Comm: swapper/37 Kdump: loaded Not tainted 4.18.0-122.el8.x86_64 #1
    [ 1092.619724] Hardware name: Dell Inc. PowerEdge R740/08D89F, BIOS 1.3.7 02/08/2018
    [ 1092.627215] RIP: 0010:tipc_mcast_filter_msg+0x93/0x2d0 [tipc]
    [ 1092.632955] Code: 0f 84 aa 01 00 00 89 cf 4d 01 ca 4c 8b 26 c1 ef 19 83 e7 0f 83 ff 0c 4d 0f 45 d1 41 8b 6a 10 0f cd 4c 39 e6 0f 84 81 01 00 00 <4d> 8b 9c 24 e8 00 00 00 45 8b 13 41 0f ca 44 89 d7 c1 ef 13 83 e7
    [ 1092.651703] RSP: 0018:ffff929e5fa83a18 EFLAGS: 00010282
    [ 1092.656927] RAX: ffff929e3fb38100 RBX: 00000000069f29ee RCX: 00000000416c0045
    [ 1092.664058] RDX: ffff929e5fa83a88 RSI: ffff929e31a28420 RDI: 0000000000000000
    [ 1092.671209] RBP: 0000000029b11821 R08: 0000000000000000 R09: ffff929e39b4407a
    [ 1092.678343] R10: ffff929e39b4407a R11: 0000000000000007 R12: 0000000000000000
    [ 1092.685475] R13: 0000000000000001 R14: ffff929e3fb38100 R15: ffff929e39b4407a
    [ 1092.692614] FS:  0000000000000000(0000) GS:ffff929e5fa80000(0000) knlGS:0000000000000000
    [ 1092.700702] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [ 1092.706447] CR2: 00000000000000e8 CR3: 000000031300a004 CR4: 00000000007606e0
    [ 1092.713579] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [ 1092.720712] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [ 1092.727843] PKRU: 55555554
    [ 1092.730556] Call Trace:
    [ 1092.733010]  <IRQ>
    [ 1092.735034]  tipc_sk_filter_rcv+0x7ca/0xb80 [tipc]
    [ 1092.739828]  ? __kmalloc_node_track_caller+0x1cb/0x290
    [ 1092.744974]  ? dev_hard_start_xmit+0xa5/0x210
    [ 1092.749332]  tipc_sk_rcv+0x389/0x640 [tipc]
    [ 1092.753519]  tipc_sk_mcast_rcv+0x23c/0x3a0 [tipc]
    [ 1092.758224]  tipc_rcv+0x57a/0xf20 [tipc]
    [ 1092.762154]  ? ktime_get_real_ts64+0x40/0xe0
    [ 1092.766432]  ? tpacket_rcv+0x50/0x9f0
    [ 1092.770098]  tipc_l2_rcv_msg+0x4a/0x70 [tipc]
    [ 1092.774452]  __netif_receive_skb_core+0xb62/0xbd0
    [ 1092.779164]  ? enqueue_entity+0xf6/0x630
    [ 1092.783084]  ? kmem_cache_alloc+0x158/0x1c0
    [ 1092.787272]  ? __build_skb+0x25/0xd0
    [ 1092.790849]  netif_receive_skb_internal+0x42/0xf0
    [ 1092.795557]  napi_gro_receive+0xba/0xe0
    [ 1092.799417]  mlx5e_handle_rx_cqe+0x83/0xd0 [mlx5_core]
    [ 1092.804564]  mlx5e_poll_rx_cq+0xd5/0x920 [mlx5_core]
    [ 1092.809536]  mlx5e_napi_poll+0xb2/0xce0 [mlx5_core]
    [ 1092.814415]  ? __wake_up_common_lock+0x89/0xc0
    [ 1092.818861]  net_rx_action+0x149/0x3b0
    [ 1092.822616]  __do_softirq+0xe3/0x30a
    [ 1092.826193]  irq_exit+0x100/0x110
    [ 1092.829512]  do_IRQ+0x85/0xd0
    [ 1092.832483]  common_interrupt+0xf/0xf
    [ 1092.836147]  </IRQ>
    [ 1092.838255] RIP: 0010:cpuidle_enter_state+0xb7/0x2a0
    [ 1092.843221] Code: e8 3e 79 a5 ff 80 7c 24 03 00 74 17 9c 58 0f 1f 44 00 00 f6 c4 02 0f 85 d7 01 00 00 31 ff e8 a0 6b ab ff fb 66 0f 1f 44 00 00 <48> b8 ff ff ff ff f3 01 00 00 4c 29 f3 ba ff ff ff 7f 48 39 c3 7f
    [ 1092.861967] RSP: 0018:ffffaa5ec6533e98 EFLAGS: 00000246 ORIG_RAX: ffffffffffffffdd
    [ 1092.869530] RAX: ffff929e5faa3100 RBX: 000000fe63dd2092 RCX: 000000000000001f
    [ 1092.876665] RDX: 000000fe63dd2092 RSI: 000000003a518aaa RDI: 0000000000000000
    [ 1092.883795] RBP: 0000000000000003 R08: 0000000000000004 R09: 0000000000022940
    [ 1092.890929] R10: 0000040cb0666b56 R11: ffff929e5faa20a8 R12: ffff929e5faade78
    [ 1092.898060] R13: ffffffffb59258f8 R14: 000000fe60f3228d R15: 0000000000000000
    [ 1092.905196]  ? cpuidle_enter_state+0x92/0x2a0
    [ 1092.909555]  do_idle+0x236/0x280
    [ 1092.912785]  cpu_startup_entry+0x6f/0x80
    [ 1092.916715]  start_secondary+0x1a7/0x200
    [ 1092.920642]  secondary_startup_64+0xb7/0xc0
    [...]
    
    The reason is that the skb list tipc_socket::mc_method.deferredq only
    is initialized for connectionless sockets, while nothing stops arriving
    multicast messages from being filtered by connection oriented sockets,
    with subsequent access to the said list.
    
    We fix this by initializing the list unconditionally at socket creation.
    This eliminates the crash, while the message still is dropped further
    down in tipc_sk_filter_rcv() as it should be.
    
    Reported-by: Li Shuang <shuali@redhat.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b591c6f620ac0c969fda538108a21f44f08d9aac
Merge: 37f7c66f4560 2320bcdae628
Author: David S. Miller <davem@davemloft.net>
Date:   Thu Jul 25 15:55:47 2019 -0700

    Merge branch 'tipc-link-changeover-issues'
    
    Tuong Lien says:
    
    ====================
    tipc: link changeover issues
    
    This patch series is to resolve some issues found with the current link
    changeover mechanism, it also includes an optimization for the link
    synching.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2320bcdae62887555701ea78a46b640ff6b63868
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Wed Jul 24 08:56:12 2019 +0700

    tipc: fix changeover issues due to large packet
    
    In conjunction with changing the interfaces' MTU (e.g. especially in
    the case of a bonding) where the TIPC links are brought up and down
    in a short time, a couple of issues were detected with the current link
    changeover mechanism:
    
    1) When one link is up but immediately forced down again, the failover
    procedure will be carried out in order to failover all the messages in
    the link's transmq queue onto the other working link. The link and node
    state is also set to FAILINGOVER as part of the process. The message
    will be transmited in form of a FAILOVER_MSG, so its size is plus of 40
    bytes (= the message header size). There is no problem if the original
    message size is not larger than the link's MTU - 40, and indeed this is
    the max size of a normal payload messages. However, in the situation
    above, because the link has just been up, the messages in the link's
    transmq are almost SYNCH_MSGs which had been generated by the link
    synching procedure, then their size might reach the max value already!
    When the FAILOVER_MSG is built on the top of such a SYNCH_MSG, its size
    will exceed the link's MTU. As a result, the messages are dropped
    silently and the failover procedure will never end up, the link will
    not be able to exit the FAILINGOVER state, so cannot be re-established.
    
    2) The same scenario above can happen more easily in case the MTU of
    the links is set differently or when changing. In that case, as long as
    a large message in the failure link's transmq queue was built and
    fragmented with its link's MTU > the other link's one, the issue will
    happen (there is no need of a link synching in advance).
    
    3) The link synching procedure also faces with the same issue but since
    the link synching is only started upon receipt of a SYNCH_MSG, dropping
    the message will not result in a state deadlock, but it is not expected
    as design.
    
    The 1) & 3) issues are resolved by the last commit that only a dummy
    SYNCH_MSG (i.e. without data) is generated at the link synching, so the
    size of a FAILOVER_MSG if any then will never exceed the link's MTU.
    
    For the 2) issue, the only solution is trying to fragment the messages
    in the failure link's transmq queue according to the working link's MTU
    so they can be failovered then. A new function is made to accomplish
    this, it will still be a TUNNEL PROTOCOL/FAILOVER MSG but if the
    original message size is too large, it will be fragmented & reassembled
    at the receiving side.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4929a932be334d68d333089872bc67e4f1d97475
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Wed Jul 24 08:56:11 2019 +0700

    tipc: optimize link synching mechanism
    
    This commit along with the next one are to resolve the issues with the
    link changeover mechanism. See that commit for details.
    
    Basically, for the link synching, from now on, we will send only one
    single ("dummy") SYNCH message to peer. The SYNCH message does not
    contain any data, just a header conveying the synch point to the peer.
    
    A new node capability flag ("TIPC_TUNNEL_ENHANCED") is introduced for
    backward compatible!
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Suggested-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 83768245a3b158b96d33012b22ab01d193afb2da
Merge: 5f9e832c1370 b617158dc096
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jul 22 08:49:22 2019 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Several netfilter fixes including a nfnetlink deadlock fix from
        Florian Westphal and fix for dropping VRF packets from Miaohe Lin.
    
     2) Flow offload fixes from Pablo Neira Ayuso including a fix to restore
        proper block sharing.
    
     3) Fix r8169 PHY init from Thomas Voegtle.
    
     4) Fix memory leak in mac80211, from Lorenzo Bianconi.
    
     5) Missing NULL check on object allocation in cxgb4, from Navid
        Emamdoost.
    
     6) Fix scaling of RX power in sfp phy driver, from Andrew Lunn.
    
     7) Check that there is actually an ip header to access in skb->data in
        VRF, from Peter Kosyh.
    
     8) Remove spurious rcu unlock in hv_netvsc, from Haiyang Zhang.
    
     9) One more tweak the the TCP fragmentation memory limit changes, to be
        less harmful to applications setting small SO_SNDBUF values. From
        Eric Dumazet.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (40 commits)
      tcp: be more careful in tcp_fragment()
      hv_netvsc: Fix extra rcu_read_unlock in netvsc_recv_callback()
      vrf: make sure skb->data contains ip header to make routing
      connector: remove redundant input callback from cn_dev
      qed: Prefer pcie_capability_read_word()
      igc: Prefer pcie_capability_read_word()
      cxgb4: Prefer pcie_capability_read_word()
      be2net: Synchronize be_update_queues with dev_watchdog
      bnx2x: Prevent load reordering in tx completion processing
      net: phy: sfp: hwmon: Fix scaling of RX power
      net: sched: verify that q!=NULL before setting q->flags
      chelsio: Fix a typo in a function name
      allocate_flower_entry: should check for null deref
      net: hns3: typo in the name of a constant
      kbuild: add net/netfilter/nf_tables_offload.h to header-test blacklist.
      tipc: Fix a typo
      mac80211: don't warn about CW params when not using them
      mac80211: fix possible memory leak in ieee80211_assign_beacon
      nl80211: fix NL80211_HE_MAX_CAPABILITY_LEN
      nl80211: fix VENDOR_CMD_RAW_DATA
      ...

commit bad7f869d864b5c5139b4cc6579f927d780467b5
Author: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
Date:   Sun Jul 21 12:38:11 2019 +0200

    tipc: Fix a typo
    
    s/tipc_toprsv_listener_data_ready/tipc_topsrv_listener_data_ready/
    (r and s switched in topsrv)
    
    Signed-off-by: Christophe JAILLET <christophe.jaillet@wanadoo.fr>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5f4fc6d440d77a2cf74fe4ea56955674ac7e35e7
Merge: 249be8511b26 8d650cdedaab
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Jul 19 10:06:06 2019 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Fix AF_XDP cq entry leak, from Ilya Maximets.
    
     2) Fix handling of PHY power-down on RTL8411B, from Heiner Kallweit.
    
     3) Add some new PCI IDs to iwlwifi, from Ihab Zhaika.
    
     4) Fix handling of neigh timers wrt. entries added by userspace, from
        Lorenzo Bianconi.
    
     5) Various cases of missing of_node_put(), from Nishka Dasgupta.
    
     6) The new NET_ACT_CT needs to depend upon NF_NAT, from Yue Haibing.
    
     7) Various RDS layer fixes, from Gerd Rausch.
    
     8) Fix some more fallout from TCQ_F_CAN_BYPASS generalization, from
        Cong Wang.
    
     9) Fix FIB source validation checks over loopback, also from Cong Wang.
    
    10) Use promisc for unsupported number of filters, from Justin Chen.
    
    11) Missing sibling route unlink on failure in ipv6, from Ido Schimmel.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (90 commits)
      tcp: fix tcp_set_congestion_control() use from bpf hook
      ag71xx: fix return value check in ag71xx_probe()
      ag71xx: fix error return code in ag71xx_probe()
      usb: qmi_wwan: add D-Link DWM-222 A2 device ID
      bnxt_en: Fix VNIC accounting when enabling aRFS on 57500 chips.
      net: dsa: sja1105: Fix missing unlock on error in sk_buff()
      gve: replace kfree with kvfree
      selftests/bpf: fix test_xdp_noinline on s390
      selftests/bpf: fix "valid read map access into a read-only array 1" on s390
      net/mlx5: Replace kfree with kvfree
      MAINTAINERS: update netsec driver
      ipv6: Unlink sibling route in case of failure
      liquidio: Replace vmalloc + memset with vzalloc
      udp: Fix typo in net/ipv4/udp.c
      net: bcmgenet: use promisc for unsupported filters
      ipv6: rt6_check should return NULL if 'from' is NULL
      tipc: initialize 'validated' field of received packets
      selftests: add a test case for rp_filter
      fib: relax source validation check for loopback packets
      mlxsw: spectrum: Do not process learned records with a dummy FID
      ...

commit eec4844fae7c033a0c1fc1eb3b8517aeb8b6cc49
Author: Matteo Croce <mcroce@redhat.com>
Date:   Thu Jul 18 15:58:50 2019 -0700

    proc/sysctl: add shared variables for range check
    
    In the sysctl code the proc_dointvec_minmax() function is often used to
    validate the user supplied value between an allowed range.  This
    function uses the extra1 and extra2 members from struct ctl_table as
    minimum and maximum allowed value.
    
    On sysctl handler declaration, in every source file there are some
    readonly variables containing just an integer which address is assigned
    to the extra1 and extra2 members, so the sysctl range is enforced.
    
    The special values 0, 1 and INT_MAX are very often used as range
    boundary, leading duplication of variables like zero=0, one=1,
    int_max=INT_MAX in different source files:
    
        $ git grep -E '\.extra[12].*&(zero|one|int_max)' |wc -l
        248
    
    Add a const int array containing the most commonly used values, some
    macros to refer more easily to the correct array member, and use them
    instead of creating a local one for every object file.
    
    This is the bloat-o-meter output comparing the old and new binary
    compiled with the default Fedora config:
    
        # scripts/bloat-o-meter -d vmlinux.o.old vmlinux.o
        add/remove: 2/2 grow/shrink: 0/2 up/down: 24/-188 (-164)
        Data                                         old     new   delta
        sysctl_vals                                    -      12     +12
        __kstrtab_sysctl_vals                          -      12     +12
        max                                           14      10      -4
        int_max                                       16       -     -16
        one                                           68       -     -68
        zero                                         128      28    -100
        Total: Before=20583249, After=20583085, chg -0.00%
    
    [mcroce@redhat.com: tipc: remove two unused variables]
      Link: http://lkml.kernel.org/r/20190530091952.4108-1-mcroce@redhat.com
    [akpm@linux-foundation.org: fix net/ipv6/sysctl_net_ipv6.c]
    [arnd@arndb.de: proc/sysctl: make firmware loader table conditional]
      Link: http://lkml.kernel.org/r/20190617130014.1713870-1-arnd@arndb.de
    [akpm@linux-foundation.org: fix fs/eventpoll.c]
    Link: http://lkml.kernel.org/r/20190430180111.10688-1-mcroce@redhat.com
    Signed-off-by: Matteo Croce <mcroce@redhat.com>
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: Aaron Tomlin <atomlin@redhat.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 866e5fd8a7123444d865340ff21c1673f74cdecd
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Wed Jul 17 23:43:44 2019 +0200

    tipc: initialize 'validated' field of received packets
    
    The tipc_msg_validate() function leaves a boolean flag 'validated' in
    the validated buffer's control block, to avoid performing this action
    more than once. However, at reception of new packets, the position of
    this field may already have been set by lower layer protocols, so
    that the packet is erroneously perceived as already validated by TIPC.
    
    We fix this by initializing the said field to 'false' before performing
    the initial validation.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d12109291ccbef7e879cc0d0733f31685cd80854
Merge: 1fa91854dcdf 25a09ce79639
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Jul 13 15:57:37 2019 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Fix excessive stack usage in cxgb4, from Arnd Bergmann.
    
     2) Missing skb queue lock init in tipc, from Chris Packham.
    
     3) Fix some regressions in ipv6 flow label handling, from Eric Dumazet.
    
     4) Elide flow dissection of local packets in FIB rules, from Petar
        Penkov.
    
     5) Fix TLS support build failure in mlx5, from Tariq Toukab.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (36 commits)
      ppp: mppe: Revert "ppp: mppe: Add softdep to arc4"
      net: dsa: qca8k: replace legacy gpio include
      net: hisilicon: Use devm_platform_ioremap_resource
      cxgb4: reduce kernel stack usage in cudbg_collect_mem_region()
      tipc: ensure head->lock is initialised
      tc-tests: updated skbedit tests
      nfp: flower: ensure ip protocol is specified for L4 matches
      nfp: flower: fix ethernet check on match fields
      net/mlx5e: Provide cb_list pointer when setting up tc block on rep
      net: phy: make exported variables non-static
      net: sched: Fix NULL-pointer dereference in tc_indr_block_ing_cmd()
      davinci_cpdma: don't cast dma_addr_t to pointer
      net: openvswitch: do not update max_headroom if new headroom is equal to old headroom
      net/mlx5e: Convert single case statement switch statements into if statements
      net/mlx5: E-Switch, Reduce ingress acl modify metadata stack usage
      net/mlx5e: Fix unused variable warning when CONFIG_MLX5_ESWITCH is off
      net/mlx5e: Fix compilation error in TLS code
      ipv6: fix static key imbalance in fl_create()
      ipv6: fix potential crash in ip6_datagram_dst_update()
      ipv6: tcp: fix flowlabels reflection for RST packets
      ...

commit d12cffe9329fd278555d0f9bb89af1259a2fd933
Author: Chris Packham <chris.packham@alliedtelesis.co.nz>
Date:   Fri Jul 12 10:41:15 2019 +1200

    tipc: ensure head->lock is initialised
    
    tipc_named_node_up() creates a skb list. It passes the list to
    tipc_node_xmit() which has some code paths that can call
    skb_queue_purge() which relies on the list->lock being initialised.
    
    The spin_lock is only needed if the messages end up on the receive path
    but when the list is created in tipc_named_node_up() we don't
    necessarily know if it is going to end up there.
    
    Once all the skb list users are updated in tipc it will then be possible
    to update them to use the unlocked variants of the skb list functions
    and initialise the lock when we know the message will follow the receive
    path.
    
    Signed-off-by: Chris Packham <chris.packham@alliedtelesis.co.nz>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 36ad5e8b3833de6cd41520e1f2cc1d0ae019a005
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Jun 25 00:28:19 2019 +0800

    tipc: check msg->req data len in tipc_nl_compat_bearer_disable
    
    [ Upstream commit 4f07b80c973348a99b5d2a32476a2e7877e94a05 ]
    
    This patch is to fix an uninit-value issue, reported by syzbot:
    
      BUG: KMSAN: uninit-value in memchr+0xce/0x110 lib/string.c:981
      Call Trace:
        __dump_stack lib/dump_stack.c:77 [inline]
        dump_stack+0x191/0x1f0 lib/dump_stack.c:113
        kmsan_report+0x130/0x2a0 mm/kmsan/kmsan.c:622
        __msan_warning+0x75/0xe0 mm/kmsan/kmsan_instr.c:310
        memchr+0xce/0x110 lib/string.c:981
        string_is_valid net/tipc/netlink_compat.c:176 [inline]
        tipc_nl_compat_bearer_disable+0x2a1/0x480 net/tipc/netlink_compat.c:449
        __tipc_nl_compat_doit net/tipc/netlink_compat.c:327 [inline]
        tipc_nl_compat_doit+0x3ac/0xb00 net/tipc/netlink_compat.c:360
        tipc_nl_compat_handle net/tipc/netlink_compat.c:1178 [inline]
        tipc_nl_compat_recv+0x1b1b/0x27b0 net/tipc/netlink_compat.c:1281
    
    TLV_GET_DATA_LEN() may return a negtive int value, which will be
    used as size_t (becoming a big unsigned long) passed into memchr,
    cause this issue.
    
    Similar to what it does in tipc_nl_compat_bearer_enable(), this
    fix is to return -EINVAL when TLV_GET_DATA_LEN() is negtive in
    tipc_nl_compat_bearer_disable(), as well as in
    tipc_nl_compat_link_stat_dump() and tipc_nl_compat_link_reset_stats().
    
    v1->v2:
      - add the missing Fixes tags per Eric's request.
    
    Fixes: 0762216c0ad2 ("tipc: fix uninit-value in tipc_nl_compat_bearer_enable")
    Fixes: 8b66fee7f8ee ("tipc: fix uninit-value in tipc_nl_compat_link_reset_stats")
    Reported-by: syzbot+30eaa8bf392f7fafffaf@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 253c7176af9f978b7fe0ea850f4f6ce30546b7f1
Author: Xin Long <lucien.xin@gmail.com>
Date:   Thu Jun 20 18:39:28 2019 +0800

    tipc: change to use register_pernet_device
    
    [ Upstream commit c492d4c74dd3f87559883ffa0f94a8f1ae3fe5f5 ]
    
    This patch is to fix a dst defcnt leak, which can be reproduced by doing:
    
      # ip net a c; ip net a s; modprobe tipc
      # ip net e s ip l a n eth1 type veth peer n eth1 netns c
      # ip net e c ip l s lo up; ip net e c ip l s eth1 up
      # ip net e s ip l s lo up; ip net e s ip l s eth1 up
      # ip net e c ip a a 1.1.1.2/8 dev eth1
      # ip net e s ip a a 1.1.1.1/8 dev eth1
      # ip net e c tipc b e m udp n u1 localip 1.1.1.2
      # ip net e s tipc b e m udp n u1 localip 1.1.1.1
      # ip net d c; ip net d s; rmmod tipc
    
    and it will get stuck and keep logging the error:
    
      unregister_netdevice: waiting for lo to become free. Usage count = 1
    
    The cause is that a dst is held by the udp sock's sk_rx_dst set on udp rx
    path with udp_early_demux == 1, and this dst (eventually holding lo dev)
    can't be released as bearer's removal in tipc pernet .exit happens after
    lo dev's removal, default_device pernet .exit.
    
     "There are two distinct types of pernet_operations recognized: subsys and
      device.  At creation all subsys init functions are called before device
      init functions, and at destruction all device exit functions are called
      before subsys exit function."
    
    So by calling register_pernet_device instead to register tipc_net_ops, the
    pernet .exit() will be invoked earlier than loopback dev's removal when a
    netns is being destroyed, as fou/gue does.
    
    Note that vxlan and geneve udp tunnels don't have this issue, as the udp
    sock is released in their device ndo_stop().
    
    This fix is also necessary for tipc dst_cache, which will hold dsts on tx
    path and I will introduce in my next patch.
    
    Reported-by: Li Shuang <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2f973fe470fb3cd31636afc133d42019d6108ff1
Author: Xin Long <lucien.xin@gmail.com>
Date:   Mon Jun 17 21:34:15 2019 +0800

    tipc: pass tunnel dev as NULL to udp_tunnel(6)_xmit_skb
    
    commit c3bcde026684c62d7a2b6f626dc7cf763833875c upstream.
    
    udp_tunnel(6)_xmit_skb() called by tipc_udp_xmit() expects a tunnel device
    to count packets on dev->tstats, a perpcu variable. However, TIPC is using
    udp tunnel with no tunnel device, and pass the lower dev, like veth device
    that only initializes dev->lstats(a perpcu variable) when creating it.
    
    Later iptunnel_xmit_stats() called by ip(6)tunnel_xmit() thinks the dev as
    a tunnel device, and uses dev->tstats instead of dev->lstats. tstats' each
    pointer points to a bigger struct than lstats, so when tstats->tx_bytes is
    increased, other percpu variable's members could be overwritten.
    
    syzbot has reported quite a few crashes due to fib_nh_common percpu member
    'nhc_pcpu_rth_output' overwritten, call traces are like:
    
      BUG: KASAN: slab-out-of-bounds in rt_cache_valid+0x158/0x190
      net/ipv4/route.c:1556
        rt_cache_valid+0x158/0x190 net/ipv4/route.c:1556
        __mkroute_output net/ipv4/route.c:2332 [inline]
        ip_route_output_key_hash_rcu+0x819/0x2d50 net/ipv4/route.c:2564
        ip_route_output_key_hash+0x1ef/0x360 net/ipv4/route.c:2393
        __ip_route_output_key include/net/route.h:125 [inline]
        ip_route_output_flow+0x28/0xc0 net/ipv4/route.c:2651
        ip_route_output_key include/net/route.h:135 [inline]
      ...
    
    or:
    
      kasan: GPF could be caused by NULL-ptr deref or user memory access
      RIP: 0010:dst_dev_put+0x24/0x290 net/core/dst.c:168
        <IRQ>
        rt_fibinfo_free_cpus net/ipv4/fib_semantics.c:200 [inline]
        free_fib_info_rcu+0x2e1/0x490 net/ipv4/fib_semantics.c:217
        __rcu_reclaim kernel/rcu/rcu.h:240 [inline]
        rcu_do_batch kernel/rcu/tree.c:2437 [inline]
        invoke_rcu_callbacks kernel/rcu/tree.c:2716 [inline]
        rcu_process_callbacks+0x100a/0x1ac0 kernel/rcu/tree.c:2697
      ...
    
    The issue exists since tunnel stats update is moved to iptunnel_xmit by
    Commit 039f50629b7f ("ip_tunnel: Move stats update to iptunnel_xmit()"),
    and here to fix it by passing a NULL tunnel dev to udp_tunnel(6)_xmit_skb
    so that the packets counting won't happen on dev->tstats.
    
    Reported-by: syzbot+9d4c12bfd45a58738d0a@syzkaller.appspotmail.com
    Reported-by: syzbot+a9e23ea2aa21044c2798@syzkaller.appspotmail.com
    Reported-by: syzbot+c4c4b2bb358bb936ad7e@syzkaller.appspotmail.com
    Reported-by: syzbot+0290d2290a607e035ba1@syzkaller.appspotmail.com
    Reported-by: syzbot+a43d8d4e7e8a7a9e149e@syzkaller.appspotmail.com
    Reported-by: syzbot+a47c5f4c6c00fc1ed16e@syzkaller.appspotmail.com
    Fixes: 039f50629b7f ("ip_tunnel: Move stats update to iptunnel_xmit()")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c09cff8979696c8b515267ef77cc9a404feab804
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Jun 25 00:28:19 2019 +0800

    tipc: check msg->req data len in tipc_nl_compat_bearer_disable
    
    [ Upstream commit 4f07b80c973348a99b5d2a32476a2e7877e94a05 ]
    
    This patch is to fix an uninit-value issue, reported by syzbot:
    
      BUG: KMSAN: uninit-value in memchr+0xce/0x110 lib/string.c:981
      Call Trace:
        __dump_stack lib/dump_stack.c:77 [inline]
        dump_stack+0x191/0x1f0 lib/dump_stack.c:113
        kmsan_report+0x130/0x2a0 mm/kmsan/kmsan.c:622
        __msan_warning+0x75/0xe0 mm/kmsan/kmsan_instr.c:310
        memchr+0xce/0x110 lib/string.c:981
        string_is_valid net/tipc/netlink_compat.c:176 [inline]
        tipc_nl_compat_bearer_disable+0x2a1/0x480 net/tipc/netlink_compat.c:449
        __tipc_nl_compat_doit net/tipc/netlink_compat.c:327 [inline]
        tipc_nl_compat_doit+0x3ac/0xb00 net/tipc/netlink_compat.c:360
        tipc_nl_compat_handle net/tipc/netlink_compat.c:1178 [inline]
        tipc_nl_compat_recv+0x1b1b/0x27b0 net/tipc/netlink_compat.c:1281
    
    TLV_GET_DATA_LEN() may return a negtive int value, which will be
    used as size_t (becoming a big unsigned long) passed into memchr,
    cause this issue.
    
    Similar to what it does in tipc_nl_compat_bearer_enable(), this
    fix is to return -EINVAL when TLV_GET_DATA_LEN() is negtive in
    tipc_nl_compat_bearer_disable(), as well as in
    tipc_nl_compat_link_stat_dump() and tipc_nl_compat_link_reset_stats().
    
    v1->v2:
      - add the missing Fixes tags per Eric's request.
    
    Fixes: 0762216c0ad2 ("tipc: fix uninit-value in tipc_nl_compat_bearer_enable")
    Fixes: 8b66fee7f8ee ("tipc: fix uninit-value in tipc_nl_compat_link_reset_stats")
    Reported-by: syzbot+30eaa8bf392f7fafffaf@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 00bdf8d549416d003f322f573499bc37d67cb016
Author: Xin Long <lucien.xin@gmail.com>
Date:   Thu Jun 20 18:39:28 2019 +0800

    tipc: change to use register_pernet_device
    
    [ Upstream commit c492d4c74dd3f87559883ffa0f94a8f1ae3fe5f5 ]
    
    This patch is to fix a dst defcnt leak, which can be reproduced by doing:
    
      # ip net a c; ip net a s; modprobe tipc
      # ip net e s ip l a n eth1 type veth peer n eth1 netns c
      # ip net e c ip l s lo up; ip net e c ip l s eth1 up
      # ip net e s ip l s lo up; ip net e s ip l s eth1 up
      # ip net e c ip a a 1.1.1.2/8 dev eth1
      # ip net e s ip a a 1.1.1.1/8 dev eth1
      # ip net e c tipc b e m udp n u1 localip 1.1.1.2
      # ip net e s tipc b e m udp n u1 localip 1.1.1.1
      # ip net d c; ip net d s; rmmod tipc
    
    and it will get stuck and keep logging the error:
    
      unregister_netdevice: waiting for lo to become free. Usage count = 1
    
    The cause is that a dst is held by the udp sock's sk_rx_dst set on udp rx
    path with udp_early_demux == 1, and this dst (eventually holding lo dev)
    can't be released as bearer's removal in tipc pernet .exit happens after
    lo dev's removal, default_device pernet .exit.
    
     "There are two distinct types of pernet_operations recognized: subsys and
      device.  At creation all subsys init functions are called before device
      init functions, and at destruction all device exit functions are called
      before subsys exit function."
    
    So by calling register_pernet_device instead to register tipc_net_ops, the
    pernet .exit() will be invoked earlier than loopback dev's removal when a
    netns is being destroyed, as fou/gue does.
    
    Note that vxlan and geneve udp tunnels don't have this issue, as the udp
    sock is released in their device ndo_stop().
    
    This fix is also necessary for tipc dst_cache, which will hold dsts on tx
    path and I will introduce in my next patch.
    
    Reported-by: Li Shuang <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 30a4616c1bfd121ecd7e4325aebd6621e0af719f
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Jul 2 00:54:55 2019 +0800

    tipc: use rcu dereference functions properly
    
    For these places are protected by rcu_read_lock, we change from
    rcu_dereference_rtnl to rcu_dereference, as there is no need to
    check if rtnl lock is held.
    
    For these places are protected by rtnl_lock, we change from
    rcu_dereference_rtnl to rtnl_dereference/rcu_dereference_protected,
    as no extra memory barriers are needed under rtnl_lock() which also
    protects tn->bearer_list[] and dev->tipc_ptr/b->media_ptr updating.
    
    rcu_dereference_rtnl will be only used in the places where it could
    be under rcu_read_lock or rtnl_lock.
    
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1688b6aef2eb83dbfe6f9e5b0cb491535255a158
Author: Xin Long <lucien.xin@gmail.com>
Date:   Mon Jun 17 21:34:15 2019 +0800

    tipc: pass tunnel dev as NULL to udp_tunnel(6)_xmit_skb
    
    commit c3bcde026684c62d7a2b6f626dc7cf763833875c upstream.
    
    udp_tunnel(6)_xmit_skb() called by tipc_udp_xmit() expects a tunnel device
    to count packets on dev->tstats, a perpcu variable. However, TIPC is using
    udp tunnel with no tunnel device, and pass the lower dev, like veth device
    that only initializes dev->lstats(a perpcu variable) when creating it.
    
    Later iptunnel_xmit_stats() called by ip(6)tunnel_xmit() thinks the dev as
    a tunnel device, and uses dev->tstats instead of dev->lstats. tstats' each
    pointer points to a bigger struct than lstats, so when tstats->tx_bytes is
    increased, other percpu variable's members could be overwritten.
    
    syzbot has reported quite a few crashes due to fib_nh_common percpu member
    'nhc_pcpu_rth_output' overwritten, call traces are like:
    
      BUG: KASAN: slab-out-of-bounds in rt_cache_valid+0x158/0x190
      net/ipv4/route.c:1556
        rt_cache_valid+0x158/0x190 net/ipv4/route.c:1556
        __mkroute_output net/ipv4/route.c:2332 [inline]
        ip_route_output_key_hash_rcu+0x819/0x2d50 net/ipv4/route.c:2564
        ip_route_output_key_hash+0x1ef/0x360 net/ipv4/route.c:2393
        __ip_route_output_key include/net/route.h:125 [inline]
        ip_route_output_flow+0x28/0xc0 net/ipv4/route.c:2651
        ip_route_output_key include/net/route.h:135 [inline]
      ...
    
    or:
    
      kasan: GPF could be caused by NULL-ptr deref or user memory access
      RIP: 0010:dst_dev_put+0x24/0x290 net/core/dst.c:168
        <IRQ>
        rt_fibinfo_free_cpus net/ipv4/fib_semantics.c:200 [inline]
        free_fib_info_rcu+0x2e1/0x490 net/ipv4/fib_semantics.c:217
        __rcu_reclaim kernel/rcu/rcu.h:240 [inline]
        rcu_do_batch kernel/rcu/tree.c:2437 [inline]
        invoke_rcu_callbacks kernel/rcu/tree.c:2716 [inline]
        rcu_process_callbacks+0x100a/0x1ac0 kernel/rcu/tree.c:2697
      ...
    
    The issue exists since tunnel stats update is moved to iptunnel_xmit by
    Commit 039f50629b7f ("ip_tunnel: Move stats update to iptunnel_xmit()"),
    and here to fix it by passing a NULL tunnel dev to udp_tunnel(6)_xmit_skb
    so that the packets counting won't happen on dev->tstats.
    
    Reported-by: syzbot+9d4c12bfd45a58738d0a@syzkaller.appspotmail.com
    Reported-by: syzbot+a9e23ea2aa21044c2798@syzkaller.appspotmail.com
    Reported-by: syzbot+c4c4b2bb358bb936ad7e@syzkaller.appspotmail.com
    Reported-by: syzbot+0290d2290a607e035ba1@syzkaller.appspotmail.com
    Reported-by: syzbot+a43d8d4e7e8a7a9e149e@syzkaller.appspotmail.com
    Reported-by: syzbot+a47c5f4c6c00fc1ed16e@syzkaller.appspotmail.com
    Fixes: 039f50629b7f ("ip_tunnel: Move stats update to iptunnel_xmit()")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 03fc5cd78eb6f97a60a2aa7958c0d2f170554728
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Jun 25 00:28:19 2019 +0800

    tipc: check msg->req data len in tipc_nl_compat_bearer_disable
    
    [ Upstream commit 4f07b80c973348a99b5d2a32476a2e7877e94a05 ]
    
    This patch is to fix an uninit-value issue, reported by syzbot:
    
      BUG: KMSAN: uninit-value in memchr+0xce/0x110 lib/string.c:981
      Call Trace:
        __dump_stack lib/dump_stack.c:77 [inline]
        dump_stack+0x191/0x1f0 lib/dump_stack.c:113
        kmsan_report+0x130/0x2a0 mm/kmsan/kmsan.c:622
        __msan_warning+0x75/0xe0 mm/kmsan/kmsan_instr.c:310
        memchr+0xce/0x110 lib/string.c:981
        string_is_valid net/tipc/netlink_compat.c:176 [inline]
        tipc_nl_compat_bearer_disable+0x2a1/0x480 net/tipc/netlink_compat.c:449
        __tipc_nl_compat_doit net/tipc/netlink_compat.c:327 [inline]
        tipc_nl_compat_doit+0x3ac/0xb00 net/tipc/netlink_compat.c:360
        tipc_nl_compat_handle net/tipc/netlink_compat.c:1178 [inline]
        tipc_nl_compat_recv+0x1b1b/0x27b0 net/tipc/netlink_compat.c:1281
    
    TLV_GET_DATA_LEN() may return a negtive int value, which will be
    used as size_t (becoming a big unsigned long) passed into memchr,
    cause this issue.
    
    Similar to what it does in tipc_nl_compat_bearer_enable(), this
    fix is to return -EINVAL when TLV_GET_DATA_LEN() is negtive in
    tipc_nl_compat_bearer_disable(), as well as in
    tipc_nl_compat_link_stat_dump() and tipc_nl_compat_link_reset_stats().
    
    v1->v2:
      - add the missing Fixes tags per Eric's request.
    
    Fixes: 0762216c0ad2 ("tipc: fix uninit-value in tipc_nl_compat_bearer_enable")
    Fixes: 8b66fee7f8ee ("tipc: fix uninit-value in tipc_nl_compat_link_reset_stats")
    Reported-by: syzbot+30eaa8bf392f7fafffaf@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a412c725c6ee9000a999d052138531920aca0046
Author: Xin Long <lucien.xin@gmail.com>
Date:   Thu Jun 20 18:39:28 2019 +0800

    tipc: change to use register_pernet_device
    
    [ Upstream commit c492d4c74dd3f87559883ffa0f94a8f1ae3fe5f5 ]
    
    This patch is to fix a dst defcnt leak, which can be reproduced by doing:
    
      # ip net a c; ip net a s; modprobe tipc
      # ip net e s ip l a n eth1 type veth peer n eth1 netns c
      # ip net e c ip l s lo up; ip net e c ip l s eth1 up
      # ip net e s ip l s lo up; ip net e s ip l s eth1 up
      # ip net e c ip a a 1.1.1.2/8 dev eth1
      # ip net e s ip a a 1.1.1.1/8 dev eth1
      # ip net e c tipc b e m udp n u1 localip 1.1.1.2
      # ip net e s tipc b e m udp n u1 localip 1.1.1.1
      # ip net d c; ip net d s; rmmod tipc
    
    and it will get stuck and keep logging the error:
    
      unregister_netdevice: waiting for lo to become free. Usage count = 1
    
    The cause is that a dst is held by the udp sock's sk_rx_dst set on udp rx
    path with udp_early_demux == 1, and this dst (eventually holding lo dev)
    can't be released as bearer's removal in tipc pernet .exit happens after
    lo dev's removal, default_device pernet .exit.
    
     "There are two distinct types of pernet_operations recognized: subsys and
      device.  At creation all subsys init functions are called before device
      init functions, and at destruction all device exit functions are called
      before subsys exit function."
    
    So by calling register_pernet_device instead to register tipc_net_ops, the
    pernet .exit() will be invoked earlier than loopback dev's removal when a
    netns is being destroyed, as fou/gue does.
    
    Note that vxlan and geneve udp tunnels don't have this issue, as the udp
    sock is released in their device ndo_stop().
    
    This fix is also necessary for tipc dst_cache, which will hold dsts on tx
    path and I will introduce in my next patch.
    
    Reported-by: Li Shuang <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2bbb6b547fbe43cf6cbfdbb9e964c4ca51fed8eb
Author: Xin Long <lucien.xin@gmail.com>
Date:   Mon Jun 17 21:34:15 2019 +0800

    tipc: pass tunnel dev as NULL to udp_tunnel(6)_xmit_skb
    
    commit c3bcde026684c62d7a2b6f626dc7cf763833875c upstream.
    
    udp_tunnel(6)_xmit_skb() called by tipc_udp_xmit() expects a tunnel device
    to count packets on dev->tstats, a perpcu variable. However, TIPC is using
    udp tunnel with no tunnel device, and pass the lower dev, like veth device
    that only initializes dev->lstats(a perpcu variable) when creating it.
    
    Later iptunnel_xmit_stats() called by ip(6)tunnel_xmit() thinks the dev as
    a tunnel device, and uses dev->tstats instead of dev->lstats. tstats' each
    pointer points to a bigger struct than lstats, so when tstats->tx_bytes is
    increased, other percpu variable's members could be overwritten.
    
    syzbot has reported quite a few crashes due to fib_nh_common percpu member
    'nhc_pcpu_rth_output' overwritten, call traces are like:
    
      BUG: KASAN: slab-out-of-bounds in rt_cache_valid+0x158/0x190
      net/ipv4/route.c:1556
        rt_cache_valid+0x158/0x190 net/ipv4/route.c:1556
        __mkroute_output net/ipv4/route.c:2332 [inline]
        ip_route_output_key_hash_rcu+0x819/0x2d50 net/ipv4/route.c:2564
        ip_route_output_key_hash+0x1ef/0x360 net/ipv4/route.c:2393
        __ip_route_output_key include/net/route.h:125 [inline]
        ip_route_output_flow+0x28/0xc0 net/ipv4/route.c:2651
        ip_route_output_key include/net/route.h:135 [inline]
      ...
    
    or:
    
      kasan: GPF could be caused by NULL-ptr deref or user memory access
      RIP: 0010:dst_dev_put+0x24/0x290 net/core/dst.c:168
        <IRQ>
        rt_fibinfo_free_cpus net/ipv4/fib_semantics.c:200 [inline]
        free_fib_info_rcu+0x2e1/0x490 net/ipv4/fib_semantics.c:217
        __rcu_reclaim kernel/rcu/rcu.h:240 [inline]
        rcu_do_batch kernel/rcu/tree.c:2437 [inline]
        invoke_rcu_callbacks kernel/rcu/tree.c:2716 [inline]
        rcu_process_callbacks+0x100a/0x1ac0 kernel/rcu/tree.c:2697
      ...
    
    The issue exists since tunnel stats update is moved to iptunnel_xmit by
    Commit 039f50629b7f ("ip_tunnel: Move stats update to iptunnel_xmit()"),
    and here to fix it by passing a NULL tunnel dev to udp_tunnel(6)_xmit_skb
    so that the packets counting won't happen on dev->tstats.
    
    Reported-by: syzbot+9d4c12bfd45a58738d0a@syzkaller.appspotmail.com
    Reported-by: syzbot+a9e23ea2aa21044c2798@syzkaller.appspotmail.com
    Reported-by: syzbot+c4c4b2bb358bb936ad7e@syzkaller.appspotmail.com
    Reported-by: syzbot+0290d2290a607e035ba1@syzkaller.appspotmail.com
    Reported-by: syzbot+a43d8d4e7e8a7a9e149e@syzkaller.appspotmail.com
    Reported-by: syzbot+a47c5f4c6c00fc1ed16e@syzkaller.appspotmail.com
    Fixes: 039f50629b7f ("ip_tunnel: Move stats update to iptunnel_xmit()")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a08b915457d6d4d771a466d81e9da9c2acab7459
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Jun 25 00:28:19 2019 +0800

    tipc: check msg->req data len in tipc_nl_compat_bearer_disable
    
    [ Upstream commit 4f07b80c973348a99b5d2a32476a2e7877e94a05 ]
    
    This patch is to fix an uninit-value issue, reported by syzbot:
    
      BUG: KMSAN: uninit-value in memchr+0xce/0x110 lib/string.c:981
      Call Trace:
        __dump_stack lib/dump_stack.c:77 [inline]
        dump_stack+0x191/0x1f0 lib/dump_stack.c:113
        kmsan_report+0x130/0x2a0 mm/kmsan/kmsan.c:622
        __msan_warning+0x75/0xe0 mm/kmsan/kmsan_instr.c:310
        memchr+0xce/0x110 lib/string.c:981
        string_is_valid net/tipc/netlink_compat.c:176 [inline]
        tipc_nl_compat_bearer_disable+0x2a1/0x480 net/tipc/netlink_compat.c:449
        __tipc_nl_compat_doit net/tipc/netlink_compat.c:327 [inline]
        tipc_nl_compat_doit+0x3ac/0xb00 net/tipc/netlink_compat.c:360
        tipc_nl_compat_handle net/tipc/netlink_compat.c:1178 [inline]
        tipc_nl_compat_recv+0x1b1b/0x27b0 net/tipc/netlink_compat.c:1281
    
    TLV_GET_DATA_LEN() may return a negtive int value, which will be
    used as size_t (becoming a big unsigned long) passed into memchr,
    cause this issue.
    
    Similar to what it does in tipc_nl_compat_bearer_enable(), this
    fix is to return -EINVAL when TLV_GET_DATA_LEN() is negtive in
    tipc_nl_compat_bearer_disable(), as well as in
    tipc_nl_compat_link_stat_dump() and tipc_nl_compat_link_reset_stats().
    
    v1->v2:
      - add the missing Fixes tags per Eric's request.
    
    Fixes: 0762216c0ad2 ("tipc: fix uninit-value in tipc_nl_compat_bearer_enable")
    Fixes: 8b66fee7f8ee ("tipc: fix uninit-value in tipc_nl_compat_link_reset_stats")
    Reported-by: syzbot+30eaa8bf392f7fafffaf@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fdf3e98e1fd9da1215c8c871c90b38d0d0503302
Author: Xin Long <lucien.xin@gmail.com>
Date:   Thu Jun 20 18:39:28 2019 +0800

    tipc: change to use register_pernet_device
    
    [ Upstream commit c492d4c74dd3f87559883ffa0f94a8f1ae3fe5f5 ]
    
    This patch is to fix a dst defcnt leak, which can be reproduced by doing:
    
      # ip net a c; ip net a s; modprobe tipc
      # ip net e s ip l a n eth1 type veth peer n eth1 netns c
      # ip net e c ip l s lo up; ip net e c ip l s eth1 up
      # ip net e s ip l s lo up; ip net e s ip l s eth1 up
      # ip net e c ip a a 1.1.1.2/8 dev eth1
      # ip net e s ip a a 1.1.1.1/8 dev eth1
      # ip net e c tipc b e m udp n u1 localip 1.1.1.2
      # ip net e s tipc b e m udp n u1 localip 1.1.1.1
      # ip net d c; ip net d s; rmmod tipc
    
    and it will get stuck and keep logging the error:
    
      unregister_netdevice: waiting for lo to become free. Usage count = 1
    
    The cause is that a dst is held by the udp sock's sk_rx_dst set on udp rx
    path with udp_early_demux == 1, and this dst (eventually holding lo dev)
    can't be released as bearer's removal in tipc pernet .exit happens after
    lo dev's removal, default_device pernet .exit.
    
     "There are two distinct types of pernet_operations recognized: subsys and
      device.  At creation all subsys init functions are called before device
      init functions, and at destruction all device exit functions are called
      before subsys exit function."
    
    So by calling register_pernet_device instead to register tipc_net_ops, the
    pernet .exit() will be invoked earlier than loopback dev's removal when a
    netns is being destroyed, as fou/gue does.
    
    Note that vxlan and geneve udp tunnels don't have this issue, as the udp
    sock is released in their device ndo_stop().
    
    This fix is also necessary for tipc dst_cache, which will hold dsts on tx
    path and I will introduce in my next patch.
    
    Reported-by: Li Shuang <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf9513b45f6408f12e84fca6a7bf83f62ac9d1bc
Author: Xin Long <lucien.xin@gmail.com>
Date:   Mon Jun 17 21:34:15 2019 +0800

    tipc: pass tunnel dev as NULL to udp_tunnel(6)_xmit_skb
    
    commit c3bcde026684c62d7a2b6f626dc7cf763833875c upstream.
    
    udp_tunnel(6)_xmit_skb() called by tipc_udp_xmit() expects a tunnel device
    to count packets on dev->tstats, a perpcu variable. However, TIPC is using
    udp tunnel with no tunnel device, and pass the lower dev, like veth device
    that only initializes dev->lstats(a perpcu variable) when creating it.
    
    Later iptunnel_xmit_stats() called by ip(6)tunnel_xmit() thinks the dev as
    a tunnel device, and uses dev->tstats instead of dev->lstats. tstats' each
    pointer points to a bigger struct than lstats, so when tstats->tx_bytes is
    increased, other percpu variable's members could be overwritten.
    
    syzbot has reported quite a few crashes due to fib_nh_common percpu member
    'nhc_pcpu_rth_output' overwritten, call traces are like:
    
      BUG: KASAN: slab-out-of-bounds in rt_cache_valid+0x158/0x190
      net/ipv4/route.c:1556
        rt_cache_valid+0x158/0x190 net/ipv4/route.c:1556
        __mkroute_output net/ipv4/route.c:2332 [inline]
        ip_route_output_key_hash_rcu+0x819/0x2d50 net/ipv4/route.c:2564
        ip_route_output_key_hash+0x1ef/0x360 net/ipv4/route.c:2393
        __ip_route_output_key include/net/route.h:125 [inline]
        ip_route_output_flow+0x28/0xc0 net/ipv4/route.c:2651
        ip_route_output_key include/net/route.h:135 [inline]
      ...
    
    or:
    
      kasan: GPF could be caused by NULL-ptr deref or user memory access
      RIP: 0010:dst_dev_put+0x24/0x290 net/core/dst.c:168
        <IRQ>
        rt_fibinfo_free_cpus net/ipv4/fib_semantics.c:200 [inline]
        free_fib_info_rcu+0x2e1/0x490 net/ipv4/fib_semantics.c:217
        __rcu_reclaim kernel/rcu/rcu.h:240 [inline]
        rcu_do_batch kernel/rcu/tree.c:2437 [inline]
        invoke_rcu_callbacks kernel/rcu/tree.c:2716 [inline]
        rcu_process_callbacks+0x100a/0x1ac0 kernel/rcu/tree.c:2697
      ...
    
    The issue exists since tunnel stats update is moved to iptunnel_xmit by
    Commit 039f50629b7f ("ip_tunnel: Move stats update to iptunnel_xmit()"),
    and here to fix it by passing a NULL tunnel dev to udp_tunnel(6)_xmit_skb
    so that the packets counting won't happen on dev->tstats.
    
    Reported-by: syzbot+9d4c12bfd45a58738d0a@syzkaller.appspotmail.com
    Reported-by: syzbot+a9e23ea2aa21044c2798@syzkaller.appspotmail.com
    Reported-by: syzbot+c4c4b2bb358bb936ad7e@syzkaller.appspotmail.com
    Reported-by: syzbot+0290d2290a607e035ba1@syzkaller.appspotmail.com
    Reported-by: syzbot+a43d8d4e7e8a7a9e149e@syzkaller.appspotmail.com
    Reported-by: syzbot+a47c5f4c6c00fc1ed16e@syzkaller.appspotmail.com
    Fixes: 039f50629b7f ("ip_tunnel: Move stats update to iptunnel_xmit()")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a54c0c1d392138f2012c1f644c434cbeed4cac77
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Jun 25 00:28:19 2019 +0800

    tipc: check msg->req data len in tipc_nl_compat_bearer_disable
    
    [ Upstream commit 4f07b80c973348a99b5d2a32476a2e7877e94a05 ]
    
    This patch is to fix an uninit-value issue, reported by syzbot:
    
      BUG: KMSAN: uninit-value in memchr+0xce/0x110 lib/string.c:981
      Call Trace:
        __dump_stack lib/dump_stack.c:77 [inline]
        dump_stack+0x191/0x1f0 lib/dump_stack.c:113
        kmsan_report+0x130/0x2a0 mm/kmsan/kmsan.c:622
        __msan_warning+0x75/0xe0 mm/kmsan/kmsan_instr.c:310
        memchr+0xce/0x110 lib/string.c:981
        string_is_valid net/tipc/netlink_compat.c:176 [inline]
        tipc_nl_compat_bearer_disable+0x2a1/0x480 net/tipc/netlink_compat.c:449
        __tipc_nl_compat_doit net/tipc/netlink_compat.c:327 [inline]
        tipc_nl_compat_doit+0x3ac/0xb00 net/tipc/netlink_compat.c:360
        tipc_nl_compat_handle net/tipc/netlink_compat.c:1178 [inline]
        tipc_nl_compat_recv+0x1b1b/0x27b0 net/tipc/netlink_compat.c:1281
    
    TLV_GET_DATA_LEN() may return a negtive int value, which will be
    used as size_t (becoming a big unsigned long) passed into memchr,
    cause this issue.
    
    Similar to what it does in tipc_nl_compat_bearer_enable(), this
    fix is to return -EINVAL when TLV_GET_DATA_LEN() is negtive in
    tipc_nl_compat_bearer_disable(), as well as in
    tipc_nl_compat_link_stat_dump() and tipc_nl_compat_link_reset_stats().
    
    v1->v2:
      - add the missing Fixes tags per Eric's request.
    
    Fixes: 0762216c0ad2 ("tipc: fix uninit-value in tipc_nl_compat_bearer_enable")
    Fixes: 8b66fee7f8ee ("tipc: fix uninit-value in tipc_nl_compat_link_reset_stats")
    Reported-by: syzbot+30eaa8bf392f7fafffaf@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec7fafa68f287c290c08a07765cbb0772e3d7229
Author: Xin Long <lucien.xin@gmail.com>
Date:   Thu Jun 20 18:39:28 2019 +0800

    tipc: change to use register_pernet_device
    
    [ Upstream commit c492d4c74dd3f87559883ffa0f94a8f1ae3fe5f5 ]
    
    This patch is to fix a dst defcnt leak, which can be reproduced by doing:
    
      # ip net a c; ip net a s; modprobe tipc
      # ip net e s ip l a n eth1 type veth peer n eth1 netns c
      # ip net e c ip l s lo up; ip net e c ip l s eth1 up
      # ip net e s ip l s lo up; ip net e s ip l s eth1 up
      # ip net e c ip a a 1.1.1.2/8 dev eth1
      # ip net e s ip a a 1.1.1.1/8 dev eth1
      # ip net e c tipc b e m udp n u1 localip 1.1.1.2
      # ip net e s tipc b e m udp n u1 localip 1.1.1.1
      # ip net d c; ip net d s; rmmod tipc
    
    and it will get stuck and keep logging the error:
    
      unregister_netdevice: waiting for lo to become free. Usage count = 1
    
    The cause is that a dst is held by the udp sock's sk_rx_dst set on udp rx
    path with udp_early_demux == 1, and this dst (eventually holding lo dev)
    can't be released as bearer's removal in tipc pernet .exit happens after
    lo dev's removal, default_device pernet .exit.
    
     "There are two distinct types of pernet_operations recognized: subsys and
      device.  At creation all subsys init functions are called before device
      init functions, and at destruction all device exit functions are called
      before subsys exit function."
    
    So by calling register_pernet_device instead to register tipc_net_ops, the
    pernet .exit() will be invoked earlier than loopback dev's removal when a
    netns is being destroyed, as fou/gue does.
    
    Note that vxlan and geneve udp tunnels don't have this issue, as the udp
    sock is released in their device ndo_stop().
    
    This fix is also necessary for tipc dst_cache, which will hold dsts on tx
    path and I will introduce in my next patch.
    
    Reported-by: Li Shuang <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d2c3a4ba25fbfb6b2c7b5fe423be1b287954cd4c
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Jul 2 00:57:19 2019 +0800

    tipc: remove ub->ubsock checks
    
    Both tipc_udp_enable and tipc_udp_disable are called under rtnl_lock,
    ub->ubsock could never be NULL in tipc_udp_disable and cleanup_bearer,
    so remove the check.
    
    Also remove the one in tipc_udp_enable by adding "free" label.
    
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 53962bcea9975a33669ba03e06111df636048bb1
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Jun 28 17:06:20 2019 +0200

    tipc: embed jiffies in macro TIPC_BC_RETR_LIM
    
    The macro TIPC_BC_RETR_LIM is always used in combination with 'jiffies',
    so we can just as well perform the addition in the macro itself. This
    way, we get a few shorter code lines and one less line break.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e9c1a793210f29f32ee4cf048e04d7d9bb3221cc
Author: Xin Long <lucien.xin@gmail.com>
Date:   Thu Jun 20 19:03:41 2019 +0800

    tipc: add dst_cache support for udp media
    
    As other udp/ip tunnels do, tipc udp media should also have a
    lockless dst_cache supported on its tx path.
    
    Here we add dst_cache into udp_replicast to support dst cache
    for both rmcast and rcast, and rmcast uses ub->rcast and each
    rcast uses its own node in ub->rcast.list.
    
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c84afab02c311b08b5cb8ea758cc177f81c95d11
Merge: 249155c20f9b 89ed5b519004
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Jun 28 08:24:37 2019 +0800

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Fix ppp_mppe crypto soft dependencies, from Takashi Iawi.
    
     2) Fix TX completion to be finite, from Sergej Benilov.
    
     3) Use register_pernet_device to avoid a dst leak in tipc, from Xin
        Long.
    
     4) Double free of TX cleanup in Dirk van der Merwe.
    
     5) Memory leak in packet_set_ring(), from Eric Dumazet.
    
     6) Out of bounds read in qmi_wwan, from Bjørn Mork.
    
     7) Fix iif used in mcast/bcast looped back packets, from Stephen
        Suryaputra.
    
     8) Fix neighbour resolution on raw ipv6 sockets, from Nicolas Dichtel.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (25 commits)
      af_packet: Block execution of tasks waiting for transmit to complete in AF_PACKET
      sctp: change to hold sk after auth shkey is created successfully
      ipv6: fix neighbour resolution with raw socket
      ipv6: constify rt6_nexthop()
      net: dsa: microchip: Use gpiod_set_value_cansleep()
      net: aquantia: fix vlans not working over bridged network
      ipv4: reset rt_iif for recirculated mcast/bcast out pkts
      team: Always enable vlan tx offload
      net/smc: Fix error path in smc_init
      net/smc: hold conns_lock before calling smc_lgr_register_conn()
      bonding: Always enable vlan tx offload
      net/ipv6: Fix misuse of proc_dointvec "skip_notify_on_dev_down"
      ipv4: Use return value of inet_iif() for __raw_v4_lookup in the while loop
      qmi_wwan: Fix out-of-bounds read
      tipc: check msg->req data len in tipc_nl_compat_bearer_disable
      net: macb: do not copy the mac address if NULL
      net/packet: fix memory leak in packet_set_ring()
      net/tls: fix page double free on TX cleanup
      net/sched: cbs: Fix error path of cbs_module_init
      tipc: change to use register_pernet_device
      ...

commit a7dc51adcafe00406d0fb6cc5be3b65b8fc52004
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Tue Jun 25 19:37:00 2019 +0200

    tipc: rename function msg_get_wrapped() to msg_inner_hdr()
    
    We rename the inline function msg_get_wrapped() to the more
    comprehensible msg_inner_hdr().
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 20c67312946dd0e152f6c65d6fa93c1b0eedcd80
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Tue Jun 25 18:08:13 2019 +0200

    tipc: eliminate unnecessary skb expansion during retransmission
    
    We increase the allocated headroom for the buffer copies to be
    retransmitted. This eliminates the need for the lower stack levels
    (UDP/IP/L2) to expand the headroom in order to add their own headers.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 77cf8edbc0e7db6d68d1a49cf954849fb92cfa7c
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Tue Jun 25 17:36:43 2019 +0200

    tipc: simplify stale link failure criteria
    
    In commit a4dc70d46cf1 ("tipc: extend link reset criteria for stale
    packet retransmission") we made link retransmission failure events
    dependent on the link tolerance, and not only of the number of failed
    retransmission attempts, as we did earlier. This works well. However,
    keeping the original, additional criteria of 99 failed retransmissions
    is now redundant, and may in some cases lead to failure detection
    times in the order of minutes instead of the expected 1.5 sec link
    tolerance value.
    
    We now remove this criteria altogether.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4f07b80c973348a99b5d2a32476a2e7877e94a05
Author: Xin Long <lucien.xin@gmail.com>
Date:   Tue Jun 25 00:28:19 2019 +0800

    tipc: check msg->req data len in tipc_nl_compat_bearer_disable
    
    This patch is to fix an uninit-value issue, reported by syzbot:
    
      BUG: KMSAN: uninit-value in memchr+0xce/0x110 lib/string.c:981
      Call Trace:
        __dump_stack lib/dump_stack.c:77 [inline]
        dump_stack+0x191/0x1f0 lib/dump_stack.c:113
        kmsan_report+0x130/0x2a0 mm/kmsan/kmsan.c:622
        __msan_warning+0x75/0xe0 mm/kmsan/kmsan_instr.c:310
        memchr+0xce/0x110 lib/string.c:981
        string_is_valid net/tipc/netlink_compat.c:176 [inline]
        tipc_nl_compat_bearer_disable+0x2a1/0x480 net/tipc/netlink_compat.c:449
        __tipc_nl_compat_doit net/tipc/netlink_compat.c:327 [inline]
        tipc_nl_compat_doit+0x3ac/0xb00 net/tipc/netlink_compat.c:360
        tipc_nl_compat_handle net/tipc/netlink_compat.c:1178 [inline]
        tipc_nl_compat_recv+0x1b1b/0x27b0 net/tipc/netlink_compat.c:1281
    
    TLV_GET_DATA_LEN() may return a negtive int value, which will be
    used as size_t (becoming a big unsigned long) passed into memchr,
    cause this issue.
    
    Similar to what it does in tipc_nl_compat_bearer_enable(), this
    fix is to return -EINVAL when TLV_GET_DATA_LEN() is negtive in
    tipc_nl_compat_bearer_disable(), as well as in
    tipc_nl_compat_link_stat_dump() and tipc_nl_compat_link_reset_stats().
    
    v1->v2:
      - add the missing Fixes tags per Eric's request.
    
    Fixes: 0762216c0ad2 ("tipc: fix uninit-value in tipc_nl_compat_bearer_enable")
    Fixes: 8b66fee7f8ee ("tipc: fix uninit-value in tipc_nl_compat_link_reset_stats")
    Reported-by: syzbot+30eaa8bf392f7fafffaf@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8bc81c570831f5b739a1c8dfe547b828ef398dfb
Author: Xin Long <lucien.xin@gmail.com>
Date:   Mon Jun 24 16:02:42 2019 +0800

    tipc: remove the unnecessary msg->req check from tipc_nl_compat_bearer_set
    
    tipc_nl_compat_bearer_set() is only called by tipc_nl_compat_link_set()
    which already does the check for msg->req check, so remove it from
    tipc_nl_compat_bearer_set(), and do the same in tipc_nl_compat_media_set().
    
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c04b6ea4e6097dbe35f50d4302bbcbab5310df31
Author: john.rutherford@dektech.com.au <john.rutherford@dektech.com.au>
Date:   Mon Jun 24 16:45:16 2019 +1000

    tipc: fix missing indentation in source code
    
    Fix misalignment of policy statement in netlink.c due to automatic
    spatch code transformation.
    
    Fixes: 3b0f31f2b8c9 ("genetlink: make policy common to family")
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: John Rutherford <john.rutherford@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c492d4c74dd3f87559883ffa0f94a8f1ae3fe5f5
Author: Xin Long <lucien.xin@gmail.com>
Date:   Thu Jun 20 18:39:28 2019 +0800

    tipc: change to use register_pernet_device
    
    This patch is to fix a dst defcnt leak, which can be reproduced by doing:
    
      # ip net a c; ip net a s; modprobe tipc
      # ip net e s ip l a n eth1 type veth peer n eth1 netns c
      # ip net e c ip l s lo up; ip net e c ip l s eth1 up
      # ip net e s ip l s lo up; ip net e s ip l s eth1 up
      # ip net e c ip a a 1.1.1.2/8 dev eth1
      # ip net e s ip a a 1.1.1.1/8 dev eth1
      # ip net e c tipc b e m udp n u1 localip 1.1.1.2
      # ip net e s tipc b e m udp n u1 localip 1.1.1.1
      # ip net d c; ip net d s; rmmod tipc
    
    and it will get stuck and keep logging the error:
    
      unregister_netdevice: waiting for lo to become free. Usage count = 1
    
    The cause is that a dst is held by the udp sock's sk_rx_dst set on udp rx
    path with udp_early_demux == 1, and this dst (eventually holding lo dev)
    can't be released as bearer's removal in tipc pernet .exit happens after
    lo dev's removal, default_device pernet .exit.
    
     "There are two distinct types of pernet_operations recognized: subsys and
      device.  At creation all subsys init functions are called before device
      init functions, and at destruction all device exit functions are called
      before subsys exit function."
    
    So by calling register_pernet_device instead to register tipc_net_ops, the
    pernet .exit() will be invoked earlier than loopback dev's removal when a
    netns is being destroyed, as fou/gue does.
    
    Note that vxlan and geneve udp tunnels don't have this issue, as the udp
    sock is released in their device ndo_stop().
    
    This fix is also necessary for tipc dst_cache, which will hold dsts on tx
    path and I will introduce in my next patch.
    
    Reported-by: Li Shuang <shuali@redhat.com>
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b86a5ccda5c305dcbb75b7dcb2249b1234832466
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Jun 16 17:24:07 2019 +0800

    tipc: purge deferredq list for each grp member in tipc_group_delete
    
    [ Upstream commit 5cf02612b33f104fe1015b2dfaf1758ad3675588 ]
    
    Syzbot reported a memleak caused by grp members' deferredq list not
    purged when the grp is be deleted.
    
    The issue occurs when more(msg_grp_bc_seqno(hdr), m->bc_rcv_nxt) in
    tipc_group_filter_msg() and the skb will stay in deferredq.
    
    So fix it by calling __skb_queue_purge for each member's deferredq
    in tipc_group_delete() when a tipc sk leaves the grp.
    
    Fixes: b87a5ea31c93 ("tipc: guarantee group unicast doesn't bypass group broadcast")
    Reported-by: syzbot+78fbe679c8ca8d264a8d@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 72788b8541deaab1fe13a95c958aa3da98618633
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Jun 16 17:24:07 2019 +0800

    tipc: purge deferredq list for each grp member in tipc_group_delete
    
    [ Upstream commit 5cf02612b33f104fe1015b2dfaf1758ad3675588 ]
    
    Syzbot reported a memleak caused by grp members' deferredq list not
    purged when the grp is be deleted.
    
    The issue occurs when more(msg_grp_bc_seqno(hdr), m->bc_rcv_nxt) in
    tipc_group_filter_msg() and the skb will stay in deferredq.
    
    So fix it by calling __skb_queue_purge for each member's deferredq
    in tipc_group_delete() when a tipc sk leaves the grp.
    
    Fixes: b87a5ea31c93 ("tipc: guarantee group unicast doesn't bypass group broadcast")
    Reported-by: syzbot+78fbe679c8ca8d264a8d@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c356dc4b540edd6c02b409dd8cf3208ba2804c38
Merge: 121bddf39a8e b6653b3629e5
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Jun 21 22:23:35 2019 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Fix leak of unqueued fragments in ipv6 nf_defrag, from Guillaume
        Nault.
    
     2) Don't access the DDM interface unless the transceiver implements it
        in bnx2x, from Mauro S. M. Rodrigues.
    
     3) Don't double fetch 'len' from userspace in sock_getsockopt(), from
        JingYi Hou.
    
     4) Sign extension overflow in lio_core, from Colin Ian King.
    
     5) Various netem bug fixes wrt. corrupted packets from Jakub Kicinski.
    
     6) Fix epollout hang in hvsock, from Sunil Muthuswamy.
    
     7) Fix regression in default fib6_type, from David Ahern.
    
     8) Handle memory limits in tcp_fragment more appropriately, from Eric
        Dumazet.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (24 commits)
      tcp: refine memory limit test in tcp_fragment()
      inet: clear num_timeout reqsk_alloc()
      net: mvpp2: debugfs: Add pmap to fs dump
      ipv6: Default fib6_type to RTN_UNICAST when not set
      net: hns3: Fix inconsistent indenting
      net/af_iucv: always register net_device notifier
      net/af_iucv: build proper skbs for HiperTransport
      net/af_iucv: remove GFP_DMA restriction for HiperTransport
      net: dsa: mv88e6xxx: fix shift of FID bits in mv88e6185_g1_vtu_loadpurge()
      hvsock: fix epollout hang from race condition
      net/udp_gso: Allow TX timestamp with UDP GSO
      net: netem: fix use after free and double free with packet corruption
      net: netem: fix backlog accounting for corrupted GSO frames
      net: lio_core: fix potential sign-extension overflow on large shift
      tipc: pass tunnel dev as NULL to udp_tunnel(6)_xmit_skb
      ip6_tunnel: allow not to count pkts on tstats by passing dev as NULL
      ip_tunnel: allow not to count pkts on tstats by setting skb's dev to NULL
      tun: wake up waitqueues after IFF_UP is set
      net: remove duplicate fetch in sock_getsockopt
      tipc: fix issues with early FAILOVER_MSG from peer
      ...

commit 55458d2f4074307c2aa787300c9272ff668a3ac3
Merge: 72b319dc08b4 c3bcde026684
Author: David S. Miller <davem@davemloft.net>
Date:   Tue Jun 18 20:48:45 2019 -0400

    Merge branch 'net-fix-quite-a-few-dst_cache-crashes-reported-by-syzbot'
    
    Xin Long says:
    
    ====================
    net: fix quite a few dst_cache crashes reported by syzbot
    
    There are two kinds of crashes reported many times by syzbot with no
    reproducer. Call Traces are like:
    
         BUG: KASAN: slab-out-of-bounds in rt_cache_valid+0x158/0x190
         net/ipv4/route.c:1556
           rt_cache_valid+0x158/0x190 net/ipv4/route.c:1556
           __mkroute_output net/ipv4/route.c:2332 [inline]
           ip_route_output_key_hash_rcu+0x819/0x2d50 net/ipv4/route.c:2564
           ip_route_output_key_hash+0x1ef/0x360 net/ipv4/route.c:2393
           __ip_route_output_key include/net/route.h:125 [inline]
           ip_route_output_flow+0x28/0xc0 net/ipv4/route.c:2651
           ip_route_output_key include/net/route.h:135 [inline]
         ...
    
       or:
    
         kasan: GPF could be caused by NULL-ptr deref or user memory access
         RIP: 0010:dst_dev_put+0x24/0x290 net/core/dst.c:168
           <IRQ>
           rt_fibinfo_free_cpus net/ipv4/fib_semantics.c:200 [inline]
           free_fib_info_rcu+0x2e1/0x490 net/ipv4/fib_semantics.c:217
           __rcu_reclaim kernel/rcu/rcu.h:240 [inline]
           rcu_do_batch kernel/rcu/tree.c:2437 [inline]
           invoke_rcu_callbacks kernel/rcu/tree.c:2716 [inline]
           rcu_process_callbacks+0x100a/0x1ac0 kernel/rcu/tree.c:2697
         ...
    
    They were caused by the fib_nh_common percpu member 'nhc_pcpu_rth_output'
    overwritten by another percpu variable 'dev->tstats' access overflow in
    tipc udp media xmit path when counting packets on a non tunnel device.
    
    The fix is to make udp tunnel work with no tunnel device by allowing not
    to count packets on the tstats when the tunnel dev is NULL in Patches 1/3
    and 2/3, then pass a NULL tunnel dev in tipc_udp_tunnel() in Patch 3/3.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c3bcde026684c62d7a2b6f626dc7cf763833875c
Author: Xin Long <lucien.xin@gmail.com>
Date:   Mon Jun 17 21:34:15 2019 +0800

    tipc: pass tunnel dev as NULL to udp_tunnel(6)_xmit_skb
    
    udp_tunnel(6)_xmit_skb() called by tipc_udp_xmit() expects a tunnel device
    to count packets on dev->tstats, a perpcu variable. However, TIPC is using
    udp tunnel with no tunnel device, and pass the lower dev, like veth device
    that only initializes dev->lstats(a perpcu variable) when creating it.
    
    Later iptunnel_xmit_stats() called by ip(6)tunnel_xmit() thinks the dev as
    a tunnel device, and uses dev->tstats instead of dev->lstats. tstats' each
    pointer points to a bigger struct than lstats, so when tstats->tx_bytes is
    increased, other percpu variable's members could be overwritten.
    
    syzbot has reported quite a few crashes due to fib_nh_common percpu member
    'nhc_pcpu_rth_output' overwritten, call traces are like:
    
      BUG: KASAN: slab-out-of-bounds in rt_cache_valid+0x158/0x190
      net/ipv4/route.c:1556
        rt_cache_valid+0x158/0x190 net/ipv4/route.c:1556
        __mkroute_output net/ipv4/route.c:2332 [inline]
        ip_route_output_key_hash_rcu+0x819/0x2d50 net/ipv4/route.c:2564
        ip_route_output_key_hash+0x1ef/0x360 net/ipv4/route.c:2393
        __ip_route_output_key include/net/route.h:125 [inline]
        ip_route_output_flow+0x28/0xc0 net/ipv4/route.c:2651
        ip_route_output_key include/net/route.h:135 [inline]
      ...
    
    or:
    
      kasan: GPF could be caused by NULL-ptr deref or user memory access
      RIP: 0010:dst_dev_put+0x24/0x290 net/core/dst.c:168
        <IRQ>
        rt_fibinfo_free_cpus net/ipv4/fib_semantics.c:200 [inline]
        free_fib_info_rcu+0x2e1/0x490 net/ipv4/fib_semantics.c:217
        __rcu_reclaim kernel/rcu/rcu.h:240 [inline]
        rcu_do_batch kernel/rcu/tree.c:2437 [inline]
        invoke_rcu_callbacks kernel/rcu/tree.c:2716 [inline]
        rcu_process_callbacks+0x100a/0x1ac0 kernel/rcu/tree.c:2697
      ...
    
    The issue exists since tunnel stats update is moved to iptunnel_xmit by
    Commit 039f50629b7f ("ip_tunnel: Move stats update to iptunnel_xmit()"),
    and here to fix it by passing a NULL tunnel dev to udp_tunnel(6)_xmit_skb
    so that the packets counting won't happen on dev->tstats.
    
    Reported-by: syzbot+9d4c12bfd45a58738d0a@syzkaller.appspotmail.com
    Reported-by: syzbot+a9e23ea2aa21044c2798@syzkaller.appspotmail.com
    Reported-by: syzbot+c4c4b2bb358bb936ad7e@syzkaller.appspotmail.com
    Reported-by: syzbot+0290d2290a607e035ba1@syzkaller.appspotmail.com
    Reported-by: syzbot+a43d8d4e7e8a7a9e149e@syzkaller.appspotmail.com
    Reported-by: syzbot+a47c5f4c6c00fc1ed16e@syzkaller.appspotmail.com
    Fixes: 039f50629b7f ("ip_tunnel: Move stats update to iptunnel_xmit()")
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d0f84d0856c11fbafadae3d580f6a9c98d818ccd
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Mon Jun 17 11:56:12 2019 +0700

    tipc: fix issues with early FAILOVER_MSG from peer
    
    It appears that a FAILOVER_MSG can come from peer even when the failure
    link is resetting (i.e. just after the 'node_write_unlock()'...). This
    means the failover procedure on the node has not been started yet.
    The situation is as follows:
    
             node1                                node2
      linkb          linka                  linka        linkb
        |              |                      |            |
        |              |                      x failure    |
        |              |                  RESETTING        |
        |              |                      |            |
        |              x failure            RESET          |
        |          RESETTING             FAILINGOVER       |
        |              |   (FAILOVER_MSG)     |            |
        |<-------------------------------------------------|
        | *FAILINGOVER |                      |            |
        |              | (dummy FAILOVER_MSG) |            |
        |------------------------------------------------->|
        |            RESET                    |            | FAILOVER_END
        |         FAILINGOVER               RESET          |
        .              .                      .            .
        .              .                      .            .
        .              .                      .            .
    
    Once this happens, the link failover procedure will be triggered
    wrongly on the receiving node since the node isn't in FAILINGOVER state
    but then another link failover will be carried out.
    The consequences are:
    
    1) A peer might get stuck in FAILINGOVER state because the 'sync_point'
    was set, reset and set incorrectly, the criteria to end the failover
    would not be met, it could keep waiting for a message that has already
    received.
    
    2) The early FAILOVER_MSG(s) could be queued in the link failover
    deferdq but would be purged or not pulled out because the 'drop_point'
    was not set correctly.
    
    3) The early FAILOVER_MSG(s) could be dropped too.
    
    4) The dummy FAILOVER_MSG could make the peer leaving FAILINGOVER state
    shortly, but later on it would be restarted.
    
    The same situation can also happen when the link is in PEER_RESET state
    and a FAILOVER_MSG arrives.
    
    The commit resolves the issues by forcing the link down immediately, so
    the failover procedure will be started normally (which is the same as
    when receiving a FAILOVER_MSG and the link is in up state).
    
    Also, the function "tipc_node_link_failover()" is toughen to avoid such
    a situation from happening.
    
    Acked-by: Jon Maloy <jon.maloy@ericsson.se>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit da0f382029868806e88c046eb2560fdee7a9457c
Merge: eb7c825bf747 4fddbf8a99ee
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jun 17 15:55:34 2019 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
     "Lots of bug fixes here:
    
       1) Out of bounds access in __bpf_skc_lookup, from Lorenz Bauer.
    
       2) Fix rate reporting in cfg80211_calculate_bitrate_he(), from John
          Crispin.
    
       3) Use after free in psock backlog workqueue, from John Fastabend.
    
       4) Fix source port matching in fdb peer flow rule of mlx5, from Raed
          Salem.
    
       5) Use atomic_inc_not_zero() in fl6_sock_lookup(), from Eric Dumazet.
    
       6) Network header needs to be set for packet redirect in nfp, from
          John Hurley.
    
       7) Fix udp zerocopy refcnt, from Willem de Bruijn.
    
       8) Don't assume linear buffers in vxlan and geneve error handlers,
          from Stefano Brivio.
    
       9) Fix TOS matching in mlxsw, from Jiri Pirko.
    
      10) More SCTP cookie memory leak fixes, from Neil Horman.
    
      11) Fix VLAN filtering in rtl8366, from Linus Walluij.
    
      12) Various TCP SACK payload size and fragmentation memory limit fixes
          from Eric Dumazet.
    
      13) Use after free in pneigh_get_next(), also from Eric Dumazet.
    
      14) LAPB control block leak fix from Jeremy Sowden"
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (145 commits)
      lapb: fixed leak of control-blocks.
      tipc: purge deferredq list for each grp member in tipc_group_delete
      ax25: fix inconsistent lock state in ax25_destroy_timer
      neigh: fix use-after-free read in pneigh_get_next
      tcp: fix compile error if !CONFIG_SYSCTL
      hv_sock: Suppress bogus "may be used uninitialized" warnings
      be2net: Fix number of Rx queues used for flow hashing
      net: handle 802.1P vlan 0 packets properly
      tcp: enforce tcp_min_snd_mss in tcp_mtu_probing()
      tcp: add tcp_min_snd_mss sysctl
      tcp: tcp_fragment() should apply sane memory limits
      tcp: limit payload size of sacked skbs
      Revert "net: phylink: set the autoneg state in phylink_phy_change"
      bpf: fix nested bpf tracepoints with per-cpu data
      bpf: Fix out of bounds memory access in bpf_sk_storage
      vsock/virtio: set SOCK_DONE on peer shutdown
      net: dsa: rtl8366: Fix up VLAN filtering
      net: phylink: set the autoneg state in phylink_phy_change
      net: add high_order_alloc_disable sysctl/static key
      tcp: add tcp_tx_skb_cache sysctl
      ...

commit 6a6b5c8bff89c76b09a921ef05b042fdee940f2a
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Mon Jun 17 12:15:42 2019 +0700

    tipc: include retrans failure detection for unicast
    
    In patch series, commit 9195948fbf34 ("tipc: improve TIPC throughput by
    Gap ACK blocks"), as for simplicity, the repeated retransmit failures'
    detection in the function - "tipc_link_retrans()" was kept there for
    broadcast retransmissions only.
    
    This commit now reapplies this feature for link unicast retransmissions
    that has been done via the function - "tipc_link_advance_transmq()".
    
    Also, the "tipc_link_retrans()" is renamed to "tipc_link_bc_retrans()"
    as it is used only for broadcast.
    
    Acked-by: Jon Maloy <jon.maloy@ericsson.se>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5cf02612b33f104fe1015b2dfaf1758ad3675588
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Jun 16 17:24:07 2019 +0800

    tipc: purge deferredq list for each grp member in tipc_group_delete
    
    Syzbot reported a memleak caused by grp members' deferredq list not
    purged when the grp is be deleted.
    
    The issue occurs when more(msg_grp_bc_seqno(hdr), m->bc_rcv_nxt) in
    tipc_group_filter_msg() and the skb will stay in deferredq.
    
    So fix it by calling __skb_queue_purge for each member's deferredq
    in tipc_group_delete() when a tipc sk leaves the grp.
    
    Fixes: b87a5ea31c93 ("tipc: guarantee group unicast doesn't bypass group broadcast")
    Reported-by: syzbot+78fbe679c8ca8d264a8d@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5bce46edeb723f7e731aa57ca18a723f2adf63f5
Author: Junwei Hu <hujunwei4@huawei.com>
Date:   Mon May 20 14:43:59 2019 +0800

    tipc: fix modprobe tipc failed after switch order of device registration -v2
    
    commit 526f5b851a96566803ee4bee60d0a34df56c77f8 upstream.
    
    Error message printed:
    modprobe: ERROR: could not insert 'tipc': Address family not
    supported by protocol.
    when modprobe tipc after the following patch: switch order of
    device registration, commit 7e27e8d6130c
    ("tipc: switch order of device registration to fix a crash")
    
    Because sock_create_kern(net, AF_TIPC, ...) called by
    tipc_topsrv_create_listener() in the initialization process
    of tipc_init_net(), so tipc_socket_init() must be execute before that.
    Meanwhile, tipc_net_id need to be initialized when sock_create()
    called, and tipc_socket_init() is no need to be called for each namespace.
    
    I add a variable tipc_topsrv_net_ops, and split the
    register_pernet_subsys() of tipc into two parts, and split
    tipc_socket_init() with initialization of pernet params.
    
    By the way, I fixed resources rollback error when tipc_bcast_init()
    failed in tipc_init_net().
    
    Fixes: 7e27e8d6130c ("tipc: switch order of device registration to fix a crash")
    Signed-off-by: Junwei Hu <hujunwei4@huawei.com>
    Reported-by: Wang Wang <wangwang2@huawei.com>
    Reported-by: syzbot+1e8114b61079bfe9cbc5@syzkaller.appspotmail.com
    Reviewed-by: Kang Zhou <zhoukang7@huawei.com>
    Reviewed-by: Suanming Mou <mousuanming@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 416d252ba926e6d4691d90402cd8cf5043236809
Author: David S. Miller <davem@davemloft.net>
Date:   Fri May 17 12:15:05 2019 -0700

    Revert "tipc: fix modprobe tipc failed after switch order of device registration"
    
    commit 5593530e56943182ebb6d81eca8a3be6db6dbba4 upstream.
    
    This reverts commit 532b0f7ece4cb2ffd24dc723ddf55242d1188e5e.
    
    More revisions coming up.
    
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7d423301240b3621200a4517be4e4073cf3528cf
Author: Chris Packham <chris.packham@alliedtelesis.co.nz>
Date:   Mon May 20 15:45:36 2019 +1200

    tipc: Avoid copying bytes beyond the supplied data
    
    TLV_SET is called with a data pointer and a len parameter that tells us
    how many bytes are pointed to by data. When invoking memcpy() we need
    to careful to only copy len bytes.
    
    Previously we would copy TLV_LENGTH(len) bytes which would copy an extra
    4 bytes past the end of the data pointer which newer GCC versions
    complain about.
    
     In file included from test.c:17:
     In function 'TLV_SET',
         inlined from 'test' at test.c:186:5:
     /usr/include/linux/tipc_config.h:317:3:
     warning: 'memcpy' forming offset [33, 36] is out of the bounds [0, 32]
     of object 'bearer_name' with type 'char[32]' [-Warray-bounds]
         memcpy(TLV_DATA(tlv_ptr), data, tlv_len);
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     test.c: In function 'test':
     test.c::161:10: note:
     'bearer_name' declared here
         char bearer_name[TIPC_MAX_BEARER_NAME];
              ^~~~~~~~~~~
    
    We still want to ensure any padding bytes at the end are initialised, do
    this with a explicit memset() rather than copy bytes past the end of
    data. Apply the same logic to TCM_SET.
    
    Signed-off-by: Chris Packham <chris.packham@alliedtelesis.co.nz>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f5e4337e4a9c816bbceda5b25af11ecb72ef494f
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Wed Mar 6 19:56:58 2019 +0800

    ssb: Fix possible NULL pointer dereference in ssb_host_pcmcia_exit
    
    commit b2c01aab9646ed8ffb7c549afe55d5349c482425 upstream.
    
    Syzkaller report this:
    
    kasan: GPF could be caused by NULL-ptr deref or user memory access
    general protection fault: 0000 [#1] SMP KASAN PTI
    CPU: 0 PID: 4492 Comm: syz-executor.0 Not tainted 5.0.0-rc7+ #45
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
    RIP: 0010:sysfs_remove_file_ns+0x27/0x70 fs/sysfs/file.c:468
    Code: 00 00 00 41 54 55 48 89 fd 53 49 89 d4 48 89 f3 e8 ee 76 9c ff 48 8d 7d 30 48 b8 00 00 00 00 00 fc ff df 48 89 fa 48 c1 ea 03 <80> 3c 02 00 75 2d 48 89 da 48 b8 00 00 00 00 00 fc ff df 48 8b 6d
    RSP: 0018:ffff8881e9d9fc00 EFLAGS: 00010206
    RAX: dffffc0000000000 RBX: ffffffff900367e0 RCX: ffffffff81a95952
    RDX: 0000000000000006 RSI: ffffc90001405000 RDI: 0000000000000030
    RBP: 0000000000000000 R08: fffffbfff1fa22ed R09: fffffbfff1fa22ed
    R10: 0000000000000001 R11: fffffbfff1fa22ec R12: 0000000000000000
    R13: ffffffffc1abdac0 R14: 1ffff1103d3b3f8b R15: 0000000000000000
    FS:  00007fe409dc1700(0000) GS:ffff8881f1200000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000001b2d721000 CR3: 00000001e98b6005 CR4: 00000000007606f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    PKRU: 55555554
    Call Trace:
     sysfs_remove_file include/linux/sysfs.h:519 [inline]
     driver_remove_file+0x40/0x50 drivers/base/driver.c:122
     pcmcia_remove_newid_file drivers/pcmcia/ds.c:163 [inline]
     pcmcia_unregister_driver+0x7d/0x2b0 drivers/pcmcia/ds.c:209
     ssb_modexit+0xa/0x1b [ssb]
     __do_sys_delete_module kernel/module.c:1018 [inline]
     __se_sys_delete_module kernel/module.c:961 [inline]
     __x64_sys_delete_module+0x3dc/0x5e0 kernel/module.c:961
     do_syscall_64+0x147/0x600 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x462e99
    Code: f7 d8 64 89 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007fe409dc0c58 EFLAGS: 00000246 ORIG_RAX: 00000000000000b0
    RAX: ffffffffffffffda RBX: 000000000073bf00 RCX: 0000000000462e99
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: 00000000200000c0
    RBP: 0000000000000002 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007fe409dc16bc
    R13: 00000000004bccaa R14: 00000000006f6bc8 R15: 00000000ffffffff
    Modules linked in: ssb(-) 3c59x nvme_core macvlan tap pata_hpt3x3 rt2x00pci null_blk tsc40 pm_notifier_error_inject notifier_error_inject mdio cdc_wdm nf_reject_ipv4 ath9k_common ath9k_hw ath pppox ppp_generic slhc ehci_platform wl12xx wlcore tps6507x_ts ioc4 nf_synproxy_core ide_gd_mod ax25 can_dev iwlwifi can_raw atm tm2_touchkey can_gw can sundance adp5588_keys rt2800mmio rt2800lib rt2x00mmio rt2x00lib eeprom_93cx6 pn533 lru_cache elants_i2c ip_set nfnetlink gameport tipc hampshire nhc_ipv6 nhc_hop nhc_udp nhc_fragment nhc_routing nhc_mobility nhc_dest 6lowpan silead brcmutil nfc mt76_usb mt76 mac80211 iptable_security iptable_raw iptable_mangle iptable_nat nf_nat_ipv4 nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 iptable_filter bpfilter ip6_vti ip_gre sit hsr veth vxcan batman_adv cfg80211 rfkill chnl_net caif nlmon vcan bridge stp llc ip6_gre ip6_tunnel tunnel6 tun joydev mousedev serio_raw ide_pci_generic piix floppy ide_core sch_fq_codel ip_tables x_tables ipv6
     [last unloaded: 3c59x]
    Dumping ftrace buffer:
       (ftrace buffer empty)
    ---[ end trace 3913cbf8011e1c05 ]---
    
    In ssb_modinit, it does not fail SSB init when ssb_host_pcmcia_init failed,
    however in ssb_modexit, ssb_host_pcmcia_exit calls pcmcia_unregister_driver
    unconditionally, which may tigger a NULL pointer dereference issue as above.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Fixes: 399500da18f7 ("ssb: pick PCMCIA host code support from b43 driver")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 65d14634b6942b4ee1bb58677e32e54920dab1aa
Author: Junwei Hu <hujunwei4@huawei.com>
Date:   Fri May 17 19:27:34 2019 +0800

    tipc: fix modprobe tipc failed after switch order of device registration
    
    [ Upstream commit 532b0f7ece4cb2ffd24dc723ddf55242d1188e5e ]
    
    Error message printed:
    modprobe: ERROR: could not insert 'tipc': Address family not
    supported by protocol.
    when modprobe tipc after the following patch: switch order of
    device registration, commit 7e27e8d6130c
    ("tipc: switch order of device registration to fix a crash")
    
    Because sock_create_kern(net, AF_TIPC, ...) is called by
    tipc_topsrv_create_listener() in the initialization process
    of tipc_net_ops, tipc_socket_init() must be execute before that.
    
    I move tipc_socket_init() into function tipc_init_net().
    
    Fixes: 7e27e8d6130c
    ("tipc: switch order of device registration to fix a crash")
    Signed-off-by: Junwei Hu <hujunwei4@huawei.com>
    Reported-by: Wang Wang <wangwang2@huawei.com>
    Reviewed-by: Kang Zhou <zhoukang7@huawei.com>
    Reviewed-by: Suanming Mou <mousuanming@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff69bb4be64398adf129b8d5dce1c93de58bfa49
Author: Junwei Hu <hujunwei4@huawei.com>
Date:   Thu May 16 10:51:15 2019 +0800

    tipc: switch order of device registration to fix a crash
    
    [ Upstream commit 7e27e8d6130c5e88fac9ddec4249f7f2337fe7f8 ]
    
    When tipc is loaded while many processes try to create a TIPC socket,
    a crash occurs:
     PANIC: Unable to handle kernel paging request at virtual
     address "dfff20000000021d"
     pc : tipc_sk_create+0x374/0x1180 [tipc]
     lr : tipc_sk_create+0x374/0x1180 [tipc]
       Exception class = DABT (current EL), IL = 32 bits
     Call trace:
      tipc_sk_create+0x374/0x1180 [tipc]
      __sock_create+0x1cc/0x408
      __sys_socket+0xec/0x1f0
      __arm64_sys_socket+0x74/0xa8
     ...
    
    This is due to race between sock_create and unfinished
    register_pernet_device. tipc_sk_insert tries to do
    "net_generic(net, tipc_net_id)".
    but tipc_net_id is not initialized yet.
    
    So switch the order of the two to close the race.
    
    This can be reproduced with multiple processes doing socket(AF_TIPC, ...)
    and one process doing module removal.
    
    Fixes: a62fbccecd62 ("tipc: make subscriber server support net namespace")
    Signed-off-by: Junwei Hu <hujunwei4@huawei.com>
    Reported-by: Wang Wang <wangwang2@huawei.com>
    Reviewed-by: Xiaogang Wang <wangxiaogang3@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f7afb6e4f76524e255e52efbf517e6fdd6016557
Author: Junwei Hu <hujunwei4@huawei.com>
Date:   Mon May 20 14:43:59 2019 +0800

    tipc: fix modprobe tipc failed after switch order of device registration
    
    commit 526f5b851a96566803ee4bee60d0a34df56c77f8 upstream.
    
    Error message printed:
    modprobe: ERROR: could not insert 'tipc': Address family not
    supported by protocol.
    when modprobe tipc after the following patch: switch order of
    device registration, commit 7e27e8d6130c
    ("tipc: switch order of device registration to fix a crash")
    
    Because sock_create_kern(net, AF_TIPC, ...) called by
    tipc_topsrv_create_listener() in the initialization process
    of tipc_init_net(), so tipc_socket_init() must be execute before that.
    Meanwhile, tipc_net_id need to be initialized when sock_create()
    called, and tipc_socket_init() is no need to be called for each namespace.
    
    I add a variable tipc_topsrv_net_ops, and split the
    register_pernet_subsys() of tipc into two parts, and split
    tipc_socket_init() with initialization of pernet params.
    
    By the way, I fixed resources rollback error when tipc_bcast_init()
    failed in tipc_init_net().
    
    Fixes: 7e27e8d6130c ("tipc: switch order of device registration to fix a crash")
    Signed-off-by: Junwei Hu <hujunwei4@huawei.com>
    Reported-by: Wang Wang <wangwang2@huawei.com>
    Reported-by: syzbot+1e8114b61079bfe9cbc5@syzkaller.appspotmail.com
    Reviewed-by: Kang Zhou <zhoukang7@huawei.com>
    Reviewed-by: Suanming Mou <mousuanming@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit db7c56ed057093942802041e1e43ab37c54d94bc
Author: David S. Miller <davem@davemloft.net>
Date:   Fri May 17 12:15:05 2019 -0700

    Revert "tipc: fix modprobe tipc failed after switch order of device registration"
    
    commit 5593530e56943182ebb6d81eca8a3be6db6dbba4 upstream.
    
    This reverts commit 532b0f7ece4cb2ffd24dc723ddf55242d1188e5e.
    
    More revisions coming up.
    
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f02d577c6f0288f3685c31d8c06b948b09834d23
Author: Chris Packham <chris.packham@alliedtelesis.co.nz>
Date:   Mon May 20 15:45:36 2019 +1200

    tipc: Avoid copying bytes beyond the supplied data
    
    TLV_SET is called with a data pointer and a len parameter that tells us
    how many bytes are pointed to by data. When invoking memcpy() we need
    to careful to only copy len bytes.
    
    Previously we would copy TLV_LENGTH(len) bytes which would copy an extra
    4 bytes past the end of the data pointer which newer GCC versions
    complain about.
    
     In file included from test.c:17:
     In function 'TLV_SET',
         inlined from 'test' at test.c:186:5:
     /usr/include/linux/tipc_config.h:317:3:
     warning: 'memcpy' forming offset [33, 36] is out of the bounds [0, 32]
     of object 'bearer_name' with type 'char[32]' [-Warray-bounds]
         memcpy(TLV_DATA(tlv_ptr), data, tlv_len);
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     test.c: In function 'test':
     test.c::161:10: note:
     'bearer_name' declared here
         char bearer_name[TIPC_MAX_BEARER_NAME];
              ^~~~~~~~~~~
    
    We still want to ensure any padding bytes at the end are initialised, do
    this with a explicit memset() rather than copy bytes past the end of
    data. Apply the same logic to TCM_SET.
    
    Signed-off-by: Chris Packham <chris.packham@alliedtelesis.co.nz>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d93fb604c0798538b86e10e2509ff5abb144b203
Author: Junwei Hu <hujunwei4@huawei.com>
Date:   Mon May 20 14:43:59 2019 +0800

    tipc: fix modprobe tipc failed after switch order of device registration
    
    commit 526f5b851a96566803ee4bee60d0a34df56c77f8 upstream.
    
    Error message printed:
    modprobe: ERROR: could not insert 'tipc': Address family not
    supported by protocol.
    when modprobe tipc after the following patch: switch order of
    device registration, commit 7e27e8d6130c
    ("tipc: switch order of device registration to fix a crash")
    
    Because sock_create_kern(net, AF_TIPC, ...) called by
    tipc_topsrv_create_listener() in the initialization process
    of tipc_init_net(), so tipc_socket_init() must be execute before that.
    Meanwhile, tipc_net_id need to be initialized when sock_create()
    called, and tipc_socket_init() is no need to be called for each namespace.
    
    I add a variable tipc_topsrv_net_ops, and split the
    register_pernet_subsys() of tipc into two parts, and split
    tipc_socket_init() with initialization of pernet params.
    
    By the way, I fixed resources rollback error when tipc_bcast_init()
    failed in tipc_init_net().
    
    Fixes: 7e27e8d6130c ("tipc: switch order of device registration to fix a crash")
    Signed-off-by: Junwei Hu <hujunwei4@huawei.com>
    Reported-by: Wang Wang <wangwang2@huawei.com>
    Reported-by: syzbot+1e8114b61079bfe9cbc5@syzkaller.appspotmail.com
    Reviewed-by: Kang Zhou <zhoukang7@huawei.com>
    Reviewed-by: Suanming Mou <mousuanming@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f61e651e39b3e5d06405514353862f060d452905
Author: David S. Miller <davem@davemloft.net>
Date:   Fri May 17 12:15:05 2019 -0700

    Revert "tipc: fix modprobe tipc failed after switch order of device registration"
    
    commit 5593530e56943182ebb6d81eca8a3be6db6dbba4 upstream.
    
    This reverts commit 532b0f7ece4cb2ffd24dc723ddf55242d1188e5e.
    
    More revisions coming up.
    
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 39c2bc5a9d9eef2f3d807707ae8f14907d5d9b8d
Author: Chris Packham <chris.packham@alliedtelesis.co.nz>
Date:   Mon May 20 15:45:36 2019 +1200

    tipc: Avoid copying bytes beyond the supplied data
    
    TLV_SET is called with a data pointer and a len parameter that tells us
    how many bytes are pointed to by data. When invoking memcpy() we need
    to careful to only copy len bytes.
    
    Previously we would copy TLV_LENGTH(len) bytes which would copy an extra
    4 bytes past the end of the data pointer which newer GCC versions
    complain about.
    
     In file included from test.c:17:
     In function 'TLV_SET',
         inlined from 'test' at test.c:186:5:
     /usr/include/linux/tipc_config.h:317:3:
     warning: 'memcpy' forming offset [33, 36] is out of the bounds [0, 32]
     of object 'bearer_name' with type 'char[32]' [-Warray-bounds]
         memcpy(TLV_DATA(tlv_ptr), data, tlv_len);
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     test.c: In function 'test':
     test.c::161:10: note:
     'bearer_name' declared here
         char bearer_name[TIPC_MAX_BEARER_NAME];
              ^~~~~~~~~~~
    
    We still want to ensure any padding bytes at the end are initialised, do
    this with a explicit memset() rather than copy bytes past the end of
    data. Apply the same logic to TCM_SET.
    
    Signed-off-by: Chris Packham <chris.packham@alliedtelesis.co.nz>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ca75a9fc5ba4e33b0170c395f9c70451ebfbbb56
Author: Junwei Hu <hujunwei4@huawei.com>
Date:   Mon May 20 14:43:59 2019 +0800

    tipc: fix modprobe tipc failed after switch order of device registration
    
    commit 526f5b851a96566803ee4bee60d0a34df56c77f8 upstream.
    
    Error message printed:
    modprobe: ERROR: could not insert 'tipc': Address family not
    supported by protocol.
    when modprobe tipc after the following patch: switch order of
    device registration, commit 7e27e8d6130c
    ("tipc: switch order of device registration to fix a crash")
    
    Because sock_create_kern(net, AF_TIPC, ...) called by
    tipc_topsrv_create_listener() in the initialization process
    of tipc_init_net(), so tipc_socket_init() must be execute before that.
    Meanwhile, tipc_net_id need to be initialized when sock_create()
    called, and tipc_socket_init() is no need to be called for each namespace.
    
    I add a variable tipc_topsrv_net_ops, and split the
    register_pernet_subsys() of tipc into two parts, and split
    tipc_socket_init() with initialization of pernet params.
    
    By the way, I fixed resources rollback error when tipc_bcast_init()
    failed in tipc_init_net().
    
    Fixes: 7e27e8d6130c ("tipc: switch order of device registration to fix a crash")
    Signed-off-by: Junwei Hu <hujunwei4@huawei.com>
    Reported-by: Wang Wang <wangwang2@huawei.com>
    Reported-by: syzbot+1e8114b61079bfe9cbc5@syzkaller.appspotmail.com
    Reviewed-by: Kang Zhou <zhoukang7@huawei.com>
    Reviewed-by: Suanming Mou <mousuanming@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab69a230421065b48ef93d3e6daf332e71c931dc
Author: David S. Miller <davem@davemloft.net>
Date:   Fri May 17 12:15:05 2019 -0700

    Revert "tipc: fix modprobe tipc failed after switch order of device registration"
    
    commit 5593530e56943182ebb6d81eca8a3be6db6dbba4 upstream.
    
    This reverts commit 532b0f7ece4cb2ffd24dc723ddf55242d1188e5e.
    
    More revisions coming up.
    
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4421d31753ecb45321be2341380e47c93d678ec5
Author: Chris Packham <chris.packham@alliedtelesis.co.nz>
Date:   Mon May 20 15:45:36 2019 +1200

    tipc: Avoid copying bytes beyond the supplied data
    
    TLV_SET is called with a data pointer and a len parameter that tells us
    how many bytes are pointed to by data. When invoking memcpy() we need
    to careful to only copy len bytes.
    
    Previously we would copy TLV_LENGTH(len) bytes which would copy an extra
    4 bytes past the end of the data pointer which newer GCC versions
    complain about.
    
     In file included from test.c:17:
     In function 'TLV_SET',
         inlined from 'test' at test.c:186:5:
     /usr/include/linux/tipc_config.h:317:3:
     warning: 'memcpy' forming offset [33, 36] is out of the bounds [0, 32]
     of object 'bearer_name' with type 'char[32]' [-Warray-bounds]
         memcpy(TLV_DATA(tlv_ptr), data, tlv_len);
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     test.c: In function 'test':
     test.c::161:10: note:
     'bearer_name' declared here
         char bearer_name[TIPC_MAX_BEARER_NAME];
              ^~~~~~~~~~~
    
    We still want to ensure any padding bytes at the end are initialised, do
    this with a explicit memset() rather than copy bytes past the end of
    data. Apply the same logic to TCM_SET.
    
    Signed-off-by: Chris Packham <chris.packham@alliedtelesis.co.nz>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b2265ad7ba8955233936bdfdb49046ce0dcf8ea
Author: Junwei Hu <hujunwei4@huawei.com>
Date:   Mon May 20 14:43:59 2019 +0800

    tipc: fix modprobe tipc failed after switch order of device registration
    
    commit 526f5b851a96566803ee4bee60d0a34df56c77f8 upstream.
    
    Error message printed:
    modprobe: ERROR: could not insert 'tipc': Address family not
    supported by protocol.
    when modprobe tipc after the following patch: switch order of
    device registration, commit 7e27e8d6130c
    ("tipc: switch order of device registration to fix a crash")
    
    Because sock_create_kern(net, AF_TIPC, ...) called by
    tipc_topsrv_create_listener() in the initialization process
    of tipc_init_net(), so tipc_socket_init() must be execute before that.
    Meanwhile, tipc_net_id need to be initialized when sock_create()
    called, and tipc_socket_init() is no need to be called for each namespace.
    
    I add a variable tipc_topsrv_net_ops, and split the
    register_pernet_subsys() of tipc into two parts, and split
    tipc_socket_init() with initialization of pernet params.
    
    By the way, I fixed resources rollback error when tipc_bcast_init()
    failed in tipc_init_net().
    
    Fixes: 7e27e8d6130c ("tipc: switch order of device registration to fix a crash")
    Signed-off-by: Junwei Hu <hujunwei4@huawei.com>
    Reported-by: Wang Wang <wangwang2@huawei.com>
    Reported-by: syzbot+1e8114b61079bfe9cbc5@syzkaller.appspotmail.com
    Reviewed-by: Kang Zhou <zhoukang7@huawei.com>
    Reviewed-by: Suanming Mou <mousuanming@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9d39b8878fe5079f44e12c9f4c7c7a4fc804d5c4
Author: David S. Miller <davem@davemloft.net>
Date:   Fri May 17 12:15:05 2019 -0700

    Revert "tipc: fix modprobe tipc failed after switch order of device registration"
    
    commit 5593530e56943182ebb6d81eca8a3be6db6dbba4 upstream.
    
    This reverts commit 532b0f7ece4cb2ffd24dc723ddf55242d1188e5e.
    
    More revisions coming up.
    
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 92c0f89774e0c6c82378e7cffd83751233559685
Author: Chris Packham <chris.packham@alliedtelesis.co.nz>
Date:   Mon May 20 15:45:36 2019 +1200

    tipc: Avoid copying bytes beyond the supplied data
    
    TLV_SET is called with a data pointer and a len parameter that tells us
    how many bytes are pointed to by data. When invoking memcpy() we need
    to careful to only copy len bytes.
    
    Previously we would copy TLV_LENGTH(len) bytes which would copy an extra
    4 bytes past the end of the data pointer which newer GCC versions
    complain about.
    
     In file included from test.c:17:
     In function 'TLV_SET',
         inlined from 'test' at test.c:186:5:
     /usr/include/linux/tipc_config.h:317:3:
     warning: 'memcpy' forming offset [33, 36] is out of the bounds [0, 32]
     of object 'bearer_name' with type 'char[32]' [-Warray-bounds]
         memcpy(TLV_DATA(tlv_ptr), data, tlv_len);
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     test.c: In function 'test':
     test.c::161:10: note:
     'bearer_name' declared here
         char bearer_name[TIPC_MAX_BEARER_NAME];
              ^~~~~~~~~~~
    
    We still want to ensure any padding bytes at the end are initialised, do
    this with a explicit memset() rather than copy bytes past the end of
    data. Apply the same logic to TCM_SET.
    
    Signed-off-by: Chris Packham <chris.packham@alliedtelesis.co.nz>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d5b7f971896bf338a9a630b5358e11e67b73e074
Author: Junwei Hu <hujunwei4@huawei.com>
Date:   Mon May 20 14:43:59 2019 +0800

    tipc: fix modprobe tipc failed after switch order of device registration
    
    commit 526f5b851a96566803ee4bee60d0a34df56c77f8 upstream.
    
    Error message printed:
    modprobe: ERROR: could not insert 'tipc': Address family not
    supported by protocol.
    when modprobe tipc after the following patch: switch order of
    device registration, commit 7e27e8d6130c
    ("tipc: switch order of device registration to fix a crash")
    
    Because sock_create_kern(net, AF_TIPC, ...) called by
    tipc_topsrv_create_listener() in the initialization process
    of tipc_init_net(), so tipc_socket_init() must be execute before that.
    Meanwhile, tipc_net_id need to be initialized when sock_create()
    called, and tipc_socket_init() is no need to be called for each namespace.
    
    I add a variable tipc_topsrv_net_ops, and split the
    register_pernet_subsys() of tipc into two parts, and split
    tipc_socket_init() with initialization of pernet params.
    
    By the way, I fixed resources rollback error when tipc_bcast_init()
    failed in tipc_init_net().
    
    Fixes: 7e27e8d6130c ("tipc: switch order of device registration to fix a crash")
    Signed-off-by: Junwei Hu <hujunwei4@huawei.com>
    Reported-by: Wang Wang <wangwang2@huawei.com>
    Reported-by: syzbot+1e8114b61079bfe9cbc5@syzkaller.appspotmail.com
    Reviewed-by: Kang Zhou <zhoukang7@huawei.com>
    Reviewed-by: Suanming Mou <mousuanming@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eb806aeff7ab0706d1921626879835b08d4560e7
Author: David S. Miller <davem@davemloft.net>
Date:   Fri May 17 12:15:05 2019 -0700

    Revert "tipc: fix modprobe tipc failed after switch order of device registration"
    
    commit 5593530e56943182ebb6d81eca8a3be6db6dbba4 upstream.
    
    This reverts commit 532b0f7ece4cb2ffd24dc723ddf55242d1188e5e.
    
    More revisions coming up.
    
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b78931285473f7258ce7657b4feeff6ff6397b83
Author: Chris Packham <chris.packham@alliedtelesis.co.nz>
Date:   Mon May 20 15:45:36 2019 +1200

    tipc: Avoid copying bytes beyond the supplied data
    
    TLV_SET is called with a data pointer and a len parameter that tells us
    how many bytes are pointed to by data. When invoking memcpy() we need
    to careful to only copy len bytes.
    
    Previously we would copy TLV_LENGTH(len) bytes which would copy an extra
    4 bytes past the end of the data pointer which newer GCC versions
    complain about.
    
     In file included from test.c:17:
     In function 'TLV_SET',
         inlined from 'test' at test.c:186:5:
     /usr/include/linux/tipc_config.h:317:3:
     warning: 'memcpy' forming offset [33, 36] is out of the bounds [0, 32]
     of object 'bearer_name' with type 'char[32]' [-Warray-bounds]
         memcpy(TLV_DATA(tlv_ptr), data, tlv_len);
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     test.c: In function 'test':
     test.c::161:10: note:
     'bearer_name' declared here
         char bearer_name[TIPC_MAX_BEARER_NAME];
              ^~~~~~~~~~~
    
    We still want to ensure any padding bytes at the end are initialised, do
    this with a explicit memset() rather than copy bytes past the end of
    data. Apply the same logic to TCM_SET.
    
    Signed-off-by: Chris Packham <chris.packham@alliedtelesis.co.nz>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c815115b5116132f58ee7967d753fba8bdab7cd
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Wed Mar 6 19:56:58 2019 +0800

    ssb: Fix possible NULL pointer dereference in ssb_host_pcmcia_exit
    
    commit b2c01aab9646ed8ffb7c549afe55d5349c482425 upstream.
    
    Syzkaller report this:
    
    kasan: GPF could be caused by NULL-ptr deref or user memory access
    general protection fault: 0000 [#1] SMP KASAN PTI
    CPU: 0 PID: 4492 Comm: syz-executor.0 Not tainted 5.0.0-rc7+ #45
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
    RIP: 0010:sysfs_remove_file_ns+0x27/0x70 fs/sysfs/file.c:468
    Code: 00 00 00 41 54 55 48 89 fd 53 49 89 d4 48 89 f3 e8 ee 76 9c ff 48 8d 7d 30 48 b8 00 00 00 00 00 fc ff df 48 89 fa 48 c1 ea 03 <80> 3c 02 00 75 2d 48 89 da 48 b8 00 00 00 00 00 fc ff df 48 8b 6d
    RSP: 0018:ffff8881e9d9fc00 EFLAGS: 00010206
    RAX: dffffc0000000000 RBX: ffffffff900367e0 RCX: ffffffff81a95952
    RDX: 0000000000000006 RSI: ffffc90001405000 RDI: 0000000000000030
    RBP: 0000000000000000 R08: fffffbfff1fa22ed R09: fffffbfff1fa22ed
    R10: 0000000000000001 R11: fffffbfff1fa22ec R12: 0000000000000000
    R13: ffffffffc1abdac0 R14: 1ffff1103d3b3f8b R15: 0000000000000000
    FS:  00007fe409dc1700(0000) GS:ffff8881f1200000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000001b2d721000 CR3: 00000001e98b6005 CR4: 00000000007606f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    PKRU: 55555554
    Call Trace:
     sysfs_remove_file include/linux/sysfs.h:519 [inline]
     driver_remove_file+0x40/0x50 drivers/base/driver.c:122
     pcmcia_remove_newid_file drivers/pcmcia/ds.c:163 [inline]
     pcmcia_unregister_driver+0x7d/0x2b0 drivers/pcmcia/ds.c:209
     ssb_modexit+0xa/0x1b [ssb]
     __do_sys_delete_module kernel/module.c:1018 [inline]
     __se_sys_delete_module kernel/module.c:961 [inline]
     __x64_sys_delete_module+0x3dc/0x5e0 kernel/module.c:961
     do_syscall_64+0x147/0x600 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x462e99
    Code: f7 d8 64 89 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007fe409dc0c58 EFLAGS: 00000246 ORIG_RAX: 00000000000000b0
    RAX: ffffffffffffffda RBX: 000000000073bf00 RCX: 0000000000462e99
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: 00000000200000c0
    RBP: 0000000000000002 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007fe409dc16bc
    R13: 00000000004bccaa R14: 00000000006f6bc8 R15: 00000000ffffffff
    Modules linked in: ssb(-) 3c59x nvme_core macvlan tap pata_hpt3x3 rt2x00pci null_blk tsc40 pm_notifier_error_inject notifier_error_inject mdio cdc_wdm nf_reject_ipv4 ath9k_common ath9k_hw ath pppox ppp_generic slhc ehci_platform wl12xx wlcore tps6507x_ts ioc4 nf_synproxy_core ide_gd_mod ax25 can_dev iwlwifi can_raw atm tm2_touchkey can_gw can sundance adp5588_keys rt2800mmio rt2800lib rt2x00mmio rt2x00lib eeprom_93cx6 pn533 lru_cache elants_i2c ip_set nfnetlink gameport tipc hampshire nhc_ipv6 nhc_hop nhc_udp nhc_fragment nhc_routing nhc_mobility nhc_dest 6lowpan silead brcmutil nfc mt76_usb mt76 mac80211 iptable_security iptable_raw iptable_mangle iptable_nat nf_nat_ipv4 nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 iptable_filter bpfilter ip6_vti ip_gre sit hsr veth vxcan batman_adv cfg80211 rfkill chnl_net caif nlmon vcan bridge stp llc ip6_gre ip6_tunnel tunnel6 tun joydev mousedev serio_raw ide_pci_generic piix floppy ide_core sch_fq_codel ip_tables x_tables ipv6
     [last unloaded: 3c59x]
    Dumping ftrace buffer:
       (ftrace buffer empty)
    ---[ end trace 3913cbf8011e1c05 ]---
    
    In ssb_modinit, it does not fail SSB init when ssb_host_pcmcia_init failed,
    however in ssb_modexit, ssb_host_pcmcia_exit calls pcmcia_unregister_driver
    unconditionally, which may tigger a NULL pointer dereference issue as above.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Fixes: 399500da18f7 ("ssb: pick PCMCIA host code support from b43 driver")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d29746eb91311c6c4b8e38f70b5287ae0fd4a4de
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Wed Mar 6 19:56:58 2019 +0800

    ssb: Fix possible NULL pointer dereference in ssb_host_pcmcia_exit
    
    commit b2c01aab9646ed8ffb7c549afe55d5349c482425 upstream.
    
    Syzkaller report this:
    
    kasan: GPF could be caused by NULL-ptr deref or user memory access
    general protection fault: 0000 [#1] SMP KASAN PTI
    CPU: 0 PID: 4492 Comm: syz-executor.0 Not tainted 5.0.0-rc7+ #45
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
    RIP: 0010:sysfs_remove_file_ns+0x27/0x70 fs/sysfs/file.c:468
    Code: 00 00 00 41 54 55 48 89 fd 53 49 89 d4 48 89 f3 e8 ee 76 9c ff 48 8d 7d 30 48 b8 00 00 00 00 00 fc ff df 48 89 fa 48 c1 ea 03 <80> 3c 02 00 75 2d 48 89 da 48 b8 00 00 00 00 00 fc ff df 48 8b 6d
    RSP: 0018:ffff8881e9d9fc00 EFLAGS: 00010206
    RAX: dffffc0000000000 RBX: ffffffff900367e0 RCX: ffffffff81a95952
    RDX: 0000000000000006 RSI: ffffc90001405000 RDI: 0000000000000030
    RBP: 0000000000000000 R08: fffffbfff1fa22ed R09: fffffbfff1fa22ed
    R10: 0000000000000001 R11: fffffbfff1fa22ec R12: 0000000000000000
    R13: ffffffffc1abdac0 R14: 1ffff1103d3b3f8b R15: 0000000000000000
    FS:  00007fe409dc1700(0000) GS:ffff8881f1200000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000001b2d721000 CR3: 00000001e98b6005 CR4: 00000000007606f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    PKRU: 55555554
    Call Trace:
     sysfs_remove_file include/linux/sysfs.h:519 [inline]
     driver_remove_file+0x40/0x50 drivers/base/driver.c:122
     pcmcia_remove_newid_file drivers/pcmcia/ds.c:163 [inline]
     pcmcia_unregister_driver+0x7d/0x2b0 drivers/pcmcia/ds.c:209
     ssb_modexit+0xa/0x1b [ssb]
     __do_sys_delete_module kernel/module.c:1018 [inline]
     __se_sys_delete_module kernel/module.c:961 [inline]
     __x64_sys_delete_module+0x3dc/0x5e0 kernel/module.c:961
     do_syscall_64+0x147/0x600 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x462e99
    Code: f7 d8 64 89 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007fe409dc0c58 EFLAGS: 00000246 ORIG_RAX: 00000000000000b0
    RAX: ffffffffffffffda RBX: 000000000073bf00 RCX: 0000000000462e99
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: 00000000200000c0
    RBP: 0000000000000002 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007fe409dc16bc
    R13: 00000000004bccaa R14: 00000000006f6bc8 R15: 00000000ffffffff
    Modules linked in: ssb(-) 3c59x nvme_core macvlan tap pata_hpt3x3 rt2x00pci null_blk tsc40 pm_notifier_error_inject notifier_error_inject mdio cdc_wdm nf_reject_ipv4 ath9k_common ath9k_hw ath pppox ppp_generic slhc ehci_platform wl12xx wlcore tps6507x_ts ioc4 nf_synproxy_core ide_gd_mod ax25 can_dev iwlwifi can_raw atm tm2_touchkey can_gw can sundance adp5588_keys rt2800mmio rt2800lib rt2x00mmio rt2x00lib eeprom_93cx6 pn533 lru_cache elants_i2c ip_set nfnetlink gameport tipc hampshire nhc_ipv6 nhc_hop nhc_udp nhc_fragment nhc_routing nhc_mobility nhc_dest 6lowpan silead brcmutil nfc mt76_usb mt76 mac80211 iptable_security iptable_raw iptable_mangle iptable_nat nf_nat_ipv4 nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 iptable_filter bpfilter ip6_vti ip_gre sit hsr veth vxcan batman_adv cfg80211 rfkill chnl_net caif nlmon vcan bridge stp llc ip6_gre ip6_tunnel tunnel6 tun joydev mousedev serio_raw ide_pci_generic piix floppy ide_core sch_fq_codel ip_tables x_tables ipv6
     [last unloaded: 3c59x]
    Dumping ftrace buffer:
       (ftrace buffer empty)
    ---[ end trace 3913cbf8011e1c05 ]---
    
    In ssb_modinit, it does not fail SSB init when ssb_host_pcmcia_init failed,
    however in ssb_modexit, ssb_host_pcmcia_exit calls pcmcia_unregister_driver
    unconditionally, which may tigger a NULL pointer dereference issue as above.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Fixes: 399500da18f7 ("ssb: pick PCMCIA host code support from b43 driver")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3de79cb0ceb2cf6c3beed0dcd340c3a11bd75655
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Wed Mar 6 19:56:58 2019 +0800

    ssb: Fix possible NULL pointer dereference in ssb_host_pcmcia_exit
    
    commit b2c01aab9646ed8ffb7c549afe55d5349c482425 upstream.
    
    Syzkaller report this:
    
    kasan: GPF could be caused by NULL-ptr deref or user memory access
    general protection fault: 0000 [#1] SMP KASAN PTI
    CPU: 0 PID: 4492 Comm: syz-executor.0 Not tainted 5.0.0-rc7+ #45
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
    RIP: 0010:sysfs_remove_file_ns+0x27/0x70 fs/sysfs/file.c:468
    Code: 00 00 00 41 54 55 48 89 fd 53 49 89 d4 48 89 f3 e8 ee 76 9c ff 48 8d 7d 30 48 b8 00 00 00 00 00 fc ff df 48 89 fa 48 c1 ea 03 <80> 3c 02 00 75 2d 48 89 da 48 b8 00 00 00 00 00 fc ff df 48 8b 6d
    RSP: 0018:ffff8881e9d9fc00 EFLAGS: 00010206
    RAX: dffffc0000000000 RBX: ffffffff900367e0 RCX: ffffffff81a95952
    RDX: 0000000000000006 RSI: ffffc90001405000 RDI: 0000000000000030
    RBP: 0000000000000000 R08: fffffbfff1fa22ed R09: fffffbfff1fa22ed
    R10: 0000000000000001 R11: fffffbfff1fa22ec R12: 0000000000000000
    R13: ffffffffc1abdac0 R14: 1ffff1103d3b3f8b R15: 0000000000000000
    FS:  00007fe409dc1700(0000) GS:ffff8881f1200000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000001b2d721000 CR3: 00000001e98b6005 CR4: 00000000007606f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    PKRU: 55555554
    Call Trace:
     sysfs_remove_file include/linux/sysfs.h:519 [inline]
     driver_remove_file+0x40/0x50 drivers/base/driver.c:122
     pcmcia_remove_newid_file drivers/pcmcia/ds.c:163 [inline]
     pcmcia_unregister_driver+0x7d/0x2b0 drivers/pcmcia/ds.c:209
     ssb_modexit+0xa/0x1b [ssb]
     __do_sys_delete_module kernel/module.c:1018 [inline]
     __se_sys_delete_module kernel/module.c:961 [inline]
     __x64_sys_delete_module+0x3dc/0x5e0 kernel/module.c:961
     do_syscall_64+0x147/0x600 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x462e99
    Code: f7 d8 64 89 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007fe409dc0c58 EFLAGS: 00000246 ORIG_RAX: 00000000000000b0
    RAX: ffffffffffffffda RBX: 000000000073bf00 RCX: 0000000000462e99
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: 00000000200000c0
    RBP: 0000000000000002 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007fe409dc16bc
    R13: 00000000004bccaa R14: 00000000006f6bc8 R15: 00000000ffffffff
    Modules linked in: ssb(-) 3c59x nvme_core macvlan tap pata_hpt3x3 rt2x00pci null_blk tsc40 pm_notifier_error_inject notifier_error_inject mdio cdc_wdm nf_reject_ipv4 ath9k_common ath9k_hw ath pppox ppp_generic slhc ehci_platform wl12xx wlcore tps6507x_ts ioc4 nf_synproxy_core ide_gd_mod ax25 can_dev iwlwifi can_raw atm tm2_touchkey can_gw can sundance adp5588_keys rt2800mmio rt2800lib rt2x00mmio rt2x00lib eeprom_93cx6 pn533 lru_cache elants_i2c ip_set nfnetlink gameport tipc hampshire nhc_ipv6 nhc_hop nhc_udp nhc_fragment nhc_routing nhc_mobility nhc_dest 6lowpan silead brcmutil nfc mt76_usb mt76 mac80211 iptable_security iptable_raw iptable_mangle iptable_nat nf_nat_ipv4 nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 iptable_filter bpfilter ip6_vti ip_gre sit hsr veth vxcan batman_adv cfg80211 rfkill chnl_net caif nlmon vcan bridge stp llc ip6_gre ip6_tunnel tunnel6 tun joydev mousedev serio_raw ide_pci_generic piix floppy ide_core sch_fq_codel ip_tables x_tables ipv6
     [last unloaded: 3c59x]
    Dumping ftrace buffer:
       (ftrace buffer empty)
    ---[ end trace 3913cbf8011e1c05 ]---
    
    In ssb_modinit, it does not fail SSB init when ssb_host_pcmcia_init failed,
    however in ssb_modexit, ssb_host_pcmcia_exit calls pcmcia_unregister_driver
    unconditionally, which may tigger a NULL pointer dereference issue as above.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Fixes: 399500da18f7 ("ssb: pick PCMCIA host code support from b43 driver")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8a456be68b18137a7cda0e85c4088e3b6883f32f
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Wed Mar 6 19:56:58 2019 +0800

    ssb: Fix possible NULL pointer dereference in ssb_host_pcmcia_exit
    
    commit b2c01aab9646ed8ffb7c549afe55d5349c482425 upstream.
    
    Syzkaller report this:
    
    kasan: GPF could be caused by NULL-ptr deref or user memory access
    general protection fault: 0000 [#1] SMP KASAN PTI
    CPU: 0 PID: 4492 Comm: syz-executor.0 Not tainted 5.0.0-rc7+ #45
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
    RIP: 0010:sysfs_remove_file_ns+0x27/0x70 fs/sysfs/file.c:468
    Code: 00 00 00 41 54 55 48 89 fd 53 49 89 d4 48 89 f3 e8 ee 76 9c ff 48 8d 7d 30 48 b8 00 00 00 00 00 fc ff df 48 89 fa 48 c1 ea 03 <80> 3c 02 00 75 2d 48 89 da 48 b8 00 00 00 00 00 fc ff df 48 8b 6d
    RSP: 0018:ffff8881e9d9fc00 EFLAGS: 00010206
    RAX: dffffc0000000000 RBX: ffffffff900367e0 RCX: ffffffff81a95952
    RDX: 0000000000000006 RSI: ffffc90001405000 RDI: 0000000000000030
    RBP: 0000000000000000 R08: fffffbfff1fa22ed R09: fffffbfff1fa22ed
    R10: 0000000000000001 R11: fffffbfff1fa22ec R12: 0000000000000000
    R13: ffffffffc1abdac0 R14: 1ffff1103d3b3f8b R15: 0000000000000000
    FS:  00007fe409dc1700(0000) GS:ffff8881f1200000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000001b2d721000 CR3: 00000001e98b6005 CR4: 00000000007606f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    PKRU: 55555554
    Call Trace:
     sysfs_remove_file include/linux/sysfs.h:519 [inline]
     driver_remove_file+0x40/0x50 drivers/base/driver.c:122
     pcmcia_remove_newid_file drivers/pcmcia/ds.c:163 [inline]
     pcmcia_unregister_driver+0x7d/0x2b0 drivers/pcmcia/ds.c:209
     ssb_modexit+0xa/0x1b [ssb]
     __do_sys_delete_module kernel/module.c:1018 [inline]
     __se_sys_delete_module kernel/module.c:961 [inline]
     __x64_sys_delete_module+0x3dc/0x5e0 kernel/module.c:961
     do_syscall_64+0x147/0x600 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x462e99
    Code: f7 d8 64 89 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007fe409dc0c58 EFLAGS: 00000246 ORIG_RAX: 00000000000000b0
    RAX: ffffffffffffffda RBX: 000000000073bf00 RCX: 0000000000462e99
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: 00000000200000c0
    RBP: 0000000000000002 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007fe409dc16bc
    R13: 00000000004bccaa R14: 00000000006f6bc8 R15: 00000000ffffffff
    Modules linked in: ssb(-) 3c59x nvme_core macvlan tap pata_hpt3x3 rt2x00pci null_blk tsc40 pm_notifier_error_inject notifier_error_inject mdio cdc_wdm nf_reject_ipv4 ath9k_common ath9k_hw ath pppox ppp_generic slhc ehci_platform wl12xx wlcore tps6507x_ts ioc4 nf_synproxy_core ide_gd_mod ax25 can_dev iwlwifi can_raw atm tm2_touchkey can_gw can sundance adp5588_keys rt2800mmio rt2800lib rt2x00mmio rt2x00lib eeprom_93cx6 pn533 lru_cache elants_i2c ip_set nfnetlink gameport tipc hampshire nhc_ipv6 nhc_hop nhc_udp nhc_fragment nhc_routing nhc_mobility nhc_dest 6lowpan silead brcmutil nfc mt76_usb mt76 mac80211 iptable_security iptable_raw iptable_mangle iptable_nat nf_nat_ipv4 nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 iptable_filter bpfilter ip6_vti ip_gre sit hsr veth vxcan batman_adv cfg80211 rfkill chnl_net caif nlmon vcan bridge stp llc ip6_gre ip6_tunnel tunnel6 tun joydev mousedev serio_raw ide_pci_generic piix floppy ide_core sch_fq_codel ip_tables x_tables ipv6
     [last unloaded: 3c59x]
    Dumping ftrace buffer:
       (ftrace buffer empty)
    ---[ end trace 3913cbf8011e1c05 ]---
    
    In ssb_modinit, it does not fail SSB init when ssb_host_pcmcia_init failed,
    however in ssb_modexit, ssb_host_pcmcia_exit calls pcmcia_unregister_driver
    unconditionally, which may tigger a NULL pointer dereference issue as above.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Fixes: 399500da18f7 ("ssb: pick PCMCIA host code support from b43 driver")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3b924789e9f88e4f748aabb701216966eb836967
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Wed Mar 6 19:56:58 2019 +0800

    ssb: Fix possible NULL pointer dereference in ssb_host_pcmcia_exit
    
    commit b2c01aab9646ed8ffb7c549afe55d5349c482425 upstream.
    
    Syzkaller report this:
    
    kasan: GPF could be caused by NULL-ptr deref or user memory access
    general protection fault: 0000 [#1] SMP KASAN PTI
    CPU: 0 PID: 4492 Comm: syz-executor.0 Not tainted 5.0.0-rc7+ #45
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
    RIP: 0010:sysfs_remove_file_ns+0x27/0x70 fs/sysfs/file.c:468
    Code: 00 00 00 41 54 55 48 89 fd 53 49 89 d4 48 89 f3 e8 ee 76 9c ff 48 8d 7d 30 48 b8 00 00 00 00 00 fc ff df 48 89 fa 48 c1 ea 03 <80> 3c 02 00 75 2d 48 89 da 48 b8 00 00 00 00 00 fc ff df 48 8b 6d
    RSP: 0018:ffff8881e9d9fc00 EFLAGS: 00010206
    RAX: dffffc0000000000 RBX: ffffffff900367e0 RCX: ffffffff81a95952
    RDX: 0000000000000006 RSI: ffffc90001405000 RDI: 0000000000000030
    RBP: 0000000000000000 R08: fffffbfff1fa22ed R09: fffffbfff1fa22ed
    R10: 0000000000000001 R11: fffffbfff1fa22ec R12: 0000000000000000
    R13: ffffffffc1abdac0 R14: 1ffff1103d3b3f8b R15: 0000000000000000
    FS:  00007fe409dc1700(0000) GS:ffff8881f1200000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000001b2d721000 CR3: 00000001e98b6005 CR4: 00000000007606f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    PKRU: 55555554
    Call Trace:
     sysfs_remove_file include/linux/sysfs.h:519 [inline]
     driver_remove_file+0x40/0x50 drivers/base/driver.c:122
     pcmcia_remove_newid_file drivers/pcmcia/ds.c:163 [inline]
     pcmcia_unregister_driver+0x7d/0x2b0 drivers/pcmcia/ds.c:209
     ssb_modexit+0xa/0x1b [ssb]
     __do_sys_delete_module kernel/module.c:1018 [inline]
     __se_sys_delete_module kernel/module.c:961 [inline]
     __x64_sys_delete_module+0x3dc/0x5e0 kernel/module.c:961
     do_syscall_64+0x147/0x600 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x462e99
    Code: f7 d8 64 89 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007fe409dc0c58 EFLAGS: 00000246 ORIG_RAX: 00000000000000b0
    RAX: ffffffffffffffda RBX: 000000000073bf00 RCX: 0000000000462e99
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: 00000000200000c0
    RBP: 0000000000000002 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007fe409dc16bc
    R13: 00000000004bccaa R14: 00000000006f6bc8 R15: 00000000ffffffff
    Modules linked in: ssb(-) 3c59x nvme_core macvlan tap pata_hpt3x3 rt2x00pci null_blk tsc40 pm_notifier_error_inject notifier_error_inject mdio cdc_wdm nf_reject_ipv4 ath9k_common ath9k_hw ath pppox ppp_generic slhc ehci_platform wl12xx wlcore tps6507x_ts ioc4 nf_synproxy_core ide_gd_mod ax25 can_dev iwlwifi can_raw atm tm2_touchkey can_gw can sundance adp5588_keys rt2800mmio rt2800lib rt2x00mmio rt2x00lib eeprom_93cx6 pn533 lru_cache elants_i2c ip_set nfnetlink gameport tipc hampshire nhc_ipv6 nhc_hop nhc_udp nhc_fragment nhc_routing nhc_mobility nhc_dest 6lowpan silead brcmutil nfc mt76_usb mt76 mac80211 iptable_security iptable_raw iptable_mangle iptable_nat nf_nat_ipv4 nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 iptable_filter bpfilter ip6_vti ip_gre sit hsr veth vxcan batman_adv cfg80211 rfkill chnl_net caif nlmon vcan bridge stp llc ip6_gre ip6_tunnel tunnel6 tun joydev mousedev serio_raw ide_pci_generic piix floppy ide_core sch_fq_codel ip_tables x_tables ipv6
     [last unloaded: 3c59x]
    Dumping ftrace buffer:
       (ftrace buffer empty)
    ---[ end trace 3913cbf8011e1c05 ]---
    
    In ssb_modinit, it does not fail SSB init when ssb_host_pcmcia_init failed,
    however in ssb_modexit, ssb_host_pcmcia_exit calls pcmcia_unregister_driver
    unconditionally, which may tigger a NULL pointer dereference issue as above.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Fixes: 399500da18f7 ("ssb: pick PCMCIA host code support from b43 driver")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 03baf38f7840f72e5761e0de0ab7773f34fb8329
Author: Junwei Hu <hujunwei4@huawei.com>
Date:   Fri May 17 19:27:34 2019 +0800

    tipc: fix modprobe tipc failed after switch order of device registration
    
    [ Upstream commit 532b0f7ece4cb2ffd24dc723ddf55242d1188e5e ]
    
    Error message printed:
    modprobe: ERROR: could not insert 'tipc': Address family not
    supported by protocol.
    when modprobe tipc after the following patch: switch order of
    device registration, commit 7e27e8d6130c
    ("tipc: switch order of device registration to fix a crash")
    
    Because sock_create_kern(net, AF_TIPC, ...) is called by
    tipc_topsrv_create_listener() in the initialization process
    of tipc_net_ops, tipc_socket_init() must be execute before that.
    
    I move tipc_socket_init() into function tipc_init_net().
    
    Fixes: 7e27e8d6130c
    ("tipc: switch order of device registration to fix a crash")
    Signed-off-by: Junwei Hu <hujunwei4@huawei.com>
    Reported-by: Wang Wang <wangwang2@huawei.com>
    Reviewed-by: Kang Zhou <zhoukang7@huawei.com>
    Reviewed-by: Suanming Mou <mousuanming@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a336df52d00791b90970a419c5458068ff4e3c26
Author: Junwei Hu <hujunwei4@huawei.com>
Date:   Thu May 16 10:51:15 2019 +0800

    tipc: switch order of device registration to fix a crash
    
    [ Upstream commit 7e27e8d6130c5e88fac9ddec4249f7f2337fe7f8 ]
    
    When tipc is loaded while many processes try to create a TIPC socket,
    a crash occurs:
     PANIC: Unable to handle kernel paging request at virtual
     address "dfff20000000021d"
     pc : tipc_sk_create+0x374/0x1180 [tipc]
     lr : tipc_sk_create+0x374/0x1180 [tipc]
       Exception class = DABT (current EL), IL = 32 bits
     Call trace:
      tipc_sk_create+0x374/0x1180 [tipc]
      __sock_create+0x1cc/0x408
      __sys_socket+0xec/0x1f0
      __arm64_sys_socket+0x74/0xa8
     ...
    
    This is due to race between sock_create and unfinished
    register_pernet_device. tipc_sk_insert tries to do
    "net_generic(net, tipc_net_id)".
    but tipc_net_id is not initialized yet.
    
    So switch the order of the two to close the race.
    
    This can be reproduced with multiple processes doing socket(AF_TIPC, ...)
    and one process doing module removal.
    
    Fixes: a62fbccecd62 ("tipc: make subscriber server support net namespace")
    Signed-off-by: Junwei Hu <hujunwei4@huawei.com>
    Reported-by: Wang Wang <wangwang2@huawei.com>
    Reviewed-by: Xiaogang Wang <wangxiaogang3@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 403eac979a5b455e7a155e6a833c6c72bafba1b7
Author: Junwei Hu <hujunwei4@huawei.com>
Date:   Fri May 17 19:27:34 2019 +0800

    tipc: fix modprobe tipc failed after switch order of device registration
    
    [ Upstream commit 532b0f7ece4cb2ffd24dc723ddf55242d1188e5e ]
    
    Error message printed:
    modprobe: ERROR: could not insert 'tipc': Address family not
    supported by protocol.
    when modprobe tipc after the following patch: switch order of
    device registration, commit 7e27e8d6130c
    ("tipc: switch order of device registration to fix a crash")
    
    Because sock_create_kern(net, AF_TIPC, ...) is called by
    tipc_topsrv_create_listener() in the initialization process
    of tipc_net_ops, tipc_socket_init() must be execute before that.
    
    I move tipc_socket_init() into function tipc_init_net().
    
    Fixes: 7e27e8d6130c
    ("tipc: switch order of device registration to fix a crash")
    Signed-off-by: Junwei Hu <hujunwei4@huawei.com>
    Reported-by: Wang Wang <wangwang2@huawei.com>
    Reviewed-by: Kang Zhou <zhoukang7@huawei.com>
    Reviewed-by: Suanming Mou <mousuanming@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit af4af68df3e48f49a03c2213b8e438ac47143135
Author: Junwei Hu <hujunwei4@huawei.com>
Date:   Thu May 16 10:51:15 2019 +0800

    tipc: switch order of device registration to fix a crash
    
    [ Upstream commit 7e27e8d6130c5e88fac9ddec4249f7f2337fe7f8 ]
    
    When tipc is loaded while many processes try to create a TIPC socket,
    a crash occurs:
     PANIC: Unable to handle kernel paging request at virtual
     address "dfff20000000021d"
     pc : tipc_sk_create+0x374/0x1180 [tipc]
     lr : tipc_sk_create+0x374/0x1180 [tipc]
       Exception class = DABT (current EL), IL = 32 bits
     Call trace:
      tipc_sk_create+0x374/0x1180 [tipc]
      __sock_create+0x1cc/0x408
      __sys_socket+0xec/0x1f0
      __arm64_sys_socket+0x74/0xa8
     ...
    
    This is due to race between sock_create and unfinished
    register_pernet_device. tipc_sk_insert tries to do
    "net_generic(net, tipc_net_id)".
    but tipc_net_id is not initialized yet.
    
    So switch the order of the two to close the race.
    
    This can be reproduced with multiple processes doing socket(AF_TIPC, ...)
    and one process doing module removal.
    
    Fixes: a62fbccecd62 ("tipc: make subscriber server support net namespace")
    Signed-off-by: Junwei Hu <hujunwei4@huawei.com>
    Reported-by: Wang Wang <wangwang2@huawei.com>
    Reviewed-by: Xiaogang Wang <wangxiaogang3@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4b900077784f8480e530f5136f28bd18817e0180
Author: Junwei Hu <hujunwei4@huawei.com>
Date:   Fri May 17 19:27:34 2019 +0800

    tipc: fix modprobe tipc failed after switch order of device registration
    
    [ Upstream commit 532b0f7ece4cb2ffd24dc723ddf55242d1188e5e ]
    
    Error message printed:
    modprobe: ERROR: could not insert 'tipc': Address family not
    supported by protocol.
    when modprobe tipc after the following patch: switch order of
    device registration, commit 7e27e8d6130c
    ("tipc: switch order of device registration to fix a crash")
    
    Because sock_create_kern(net, AF_TIPC, ...) is called by
    tipc_topsrv_create_listener() in the initialization process
    of tipc_net_ops, tipc_socket_init() must be execute before that.
    
    I move tipc_socket_init() into function tipc_init_net().
    
    Fixes: 7e27e8d6130c
    ("tipc: switch order of device registration to fix a crash")
    Signed-off-by: Junwei Hu <hujunwei4@huawei.com>
    Reported-by: Wang Wang <wangwang2@huawei.com>
    Reviewed-by: Kang Zhou <zhoukang7@huawei.com>
    Reviewed-by: Suanming Mou <mousuanming@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2f7025b0a3b3fdc1a0b69b4a48bc1831991234a5
Author: Junwei Hu <hujunwei4@huawei.com>
Date:   Thu May 16 10:51:15 2019 +0800

    tipc: switch order of device registration to fix a crash
    
    [ Upstream commit 7e27e8d6130c5e88fac9ddec4249f7f2337fe7f8 ]
    
    When tipc is loaded while many processes try to create a TIPC socket,
    a crash occurs:
     PANIC: Unable to handle kernel paging request at virtual
     address "dfff20000000021d"
     pc : tipc_sk_create+0x374/0x1180 [tipc]
     lr : tipc_sk_create+0x374/0x1180 [tipc]
       Exception class = DABT (current EL), IL = 32 bits
     Call trace:
      tipc_sk_create+0x374/0x1180 [tipc]
      __sock_create+0x1cc/0x408
      __sys_socket+0xec/0x1f0
      __arm64_sys_socket+0x74/0xa8
     ...
    
    This is due to race between sock_create and unfinished
    register_pernet_device. tipc_sk_insert tries to do
    "net_generic(net, tipc_net_id)".
    but tipc_net_id is not initialized yet.
    
    So switch the order of the two to close the race.
    
    This can be reproduced with multiple processes doing socket(AF_TIPC, ...)
    and one process doing module removal.
    
    Fixes: a62fbccecd62 ("tipc: make subscriber server support net namespace")
    Signed-off-by: Junwei Hu <hujunwei4@huawei.com>
    Reported-by: Wang Wang <wangwang2@huawei.com>
    Reviewed-by: Xiaogang Wang <wangxiaogang3@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac01b87ed3ec104e6bb413d7654e164044def2df
Author: Junwei Hu <hujunwei4@huawei.com>
Date:   Fri May 17 19:27:34 2019 +0800

    tipc: fix modprobe tipc failed after switch order of device registration
    
    [ Upstream commit 532b0f7ece4cb2ffd24dc723ddf55242d1188e5e ]
    
    Error message printed:
    modprobe: ERROR: could not insert 'tipc': Address family not
    supported by protocol.
    when modprobe tipc after the following patch: switch order of
    device registration, commit 7e27e8d6130c
    ("tipc: switch order of device registration to fix a crash")
    
    Because sock_create_kern(net, AF_TIPC, ...) is called by
    tipc_topsrv_create_listener() in the initialization process
    of tipc_net_ops, tipc_socket_init() must be execute before that.
    
    I move tipc_socket_init() into function tipc_init_net().
    
    Fixes: 7e27e8d6130c
    ("tipc: switch order of device registration to fix a crash")
    Signed-off-by: Junwei Hu <hujunwei4@huawei.com>
    Reported-by: Wang Wang <wangwang2@huawei.com>
    Reviewed-by: Kang Zhou <zhoukang7@huawei.com>
    Reviewed-by: Suanming Mou <mousuanming@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3f48a2fa3d79c6d1d114098a2fb4468695af1bd1
Author: Junwei Hu <hujunwei4@huawei.com>
Date:   Thu May 16 10:51:15 2019 +0800

    tipc: switch order of device registration to fix a crash
    
    [ Upstream commit 7e27e8d6130c5e88fac9ddec4249f7f2337fe7f8 ]
    
    When tipc is loaded while many processes try to create a TIPC socket,
    a crash occurs:
     PANIC: Unable to handle kernel paging request at virtual
     address "dfff20000000021d"
     pc : tipc_sk_create+0x374/0x1180 [tipc]
     lr : tipc_sk_create+0x374/0x1180 [tipc]
       Exception class = DABT (current EL), IL = 32 bits
     Call trace:
      tipc_sk_create+0x374/0x1180 [tipc]
      __sock_create+0x1cc/0x408
      __sys_socket+0xec/0x1f0
      __arm64_sys_socket+0x74/0xa8
     ...
    
    This is due to race between sock_create and unfinished
    register_pernet_device. tipc_sk_insert tries to do
    "net_generic(net, tipc_net_id)".
    but tipc_net_id is not initialized yet.
    
    So switch the order of the two to close the race.
    
    This can be reproduced with multiple processes doing socket(AF_TIPC, ...)
    and one process doing module removal.
    
    Fixes: a62fbccecd62 ("tipc: make subscriber server support net namespace")
    Signed-off-by: Junwei Hu <hujunwei4@huawei.com>
    Reported-by: Wang Wang <wangwang2@huawei.com>
    Reviewed-by: Xiaogang Wang <wangxiaogang3@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2d08f204328acaf85ac2c6fe5d5d9d4760f12e13
Author: Junwei Hu <hujunwei4@huawei.com>
Date:   Fri May 17 19:27:34 2019 +0800

    tipc: fix modprobe tipc failed after switch order of device registration
    
    [ Upstream commit 532b0f7ece4cb2ffd24dc723ddf55242d1188e5e ]
    
    Error message printed:
    modprobe: ERROR: could not insert 'tipc': Address family not
    supported by protocol.
    when modprobe tipc after the following patch: switch order of
    device registration, commit 7e27e8d6130c
    ("tipc: switch order of device registration to fix a crash")
    
    Because sock_create_kern(net, AF_TIPC, ...) is called by
    tipc_topsrv_create_listener() in the initialization process
    of tipc_net_ops, tipc_socket_init() must be execute before that.
    
    I move tipc_socket_init() into function tipc_init_net().
    
    Fixes: 7e27e8d6130c
    ("tipc: switch order of device registration to fix a crash")
    Signed-off-by: Junwei Hu <hujunwei4@huawei.com>
    Reported-by: Wang Wang <wangwang2@huawei.com>
    Reviewed-by: Kang Zhou <zhoukang7@huawei.com>
    Reviewed-by: Suanming Mou <mousuanming@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f747a79d52821fc8b0602ee5bdf380fab978e20
Author: Junwei Hu <hujunwei4@huawei.com>
Date:   Thu May 16 10:51:15 2019 +0800

    tipc: switch order of device registration to fix a crash
    
    [ Upstream commit 7e27e8d6130c5e88fac9ddec4249f7f2337fe7f8 ]
    
    When tipc is loaded while many processes try to create a TIPC socket,
    a crash occurs:
     PANIC: Unable to handle kernel paging request at virtual
     address "dfff20000000021d"
     pc : tipc_sk_create+0x374/0x1180 [tipc]
     lr : tipc_sk_create+0x374/0x1180 [tipc]
       Exception class = DABT (current EL), IL = 32 bits
     Call trace:
      tipc_sk_create+0x374/0x1180 [tipc]
      __sock_create+0x1cc/0x408
      __sys_socket+0xec/0x1f0
      __arm64_sys_socket+0x74/0xa8
     ...
    
    This is due to race between sock_create and unfinished
    register_pernet_device. tipc_sk_insert tries to do
    "net_generic(net, tipc_net_id)".
    but tipc_net_id is not initialized yet.
    
    So switch the order of the two to close the race.
    
    This can be reproduced with multiple processes doing socket(AF_TIPC, ...)
    and one process doing module removal.
    
    Fixes: a62fbccecd62 ("tipc: make subscriber server support net namespace")
    Signed-off-by: Junwei Hu <hujunwei4@huawei.com>
    Reported-by: Wang Wang <wangwang2@huawei.com>
    Reviewed-by: Xiaogang Wang <wangxiaogang3@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f75b6f303bd80249a56cce9028954b4f731270e3
Merge: 86f9e56d0885 ad70411a978d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed May 22 08:28:16 2019 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Clear up some recent tipc regressions because of registration
        ordering. Fix from Junwei Hu.
    
     2) tipc's TLV_SET() can read past the end of the supplied buffer during
        the copy. From Chris Packham.
    
     3) ptp example program doesn't match the kernel, from Richard Cochran.
    
     4) Outgoing message type fix in qrtr, from Bjorn Andersson.
    
     5) Flow control regression in stmmac, from Tan Tee Min.
    
     6) Fix inband autonegotiation in phylink, from Russell King.
    
     7) Fix sk_bound_dev_if handling in rawv6_bind(), from Mike Manning.
    
     8) Fix usbnet crash after disconnect, from Kloetzke Jan.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (21 commits)
      usbnet: fix kernel crash after disconnect
      selftests: fib_rule_tests: use pre-defined DEV_ADDR
      net-next: net: Fix typos in ip-sysctl.txt
      ipv6: Consider sk_bound_dev_if when binding a raw socket to an address
      net: phylink: ensure inband AN works correctly
      usbnet: ipheth: fix racing condition
      net: stmmac: dma channel control register need to be init first
      net: stmmac: fix ethtool flow control not able to get/set
      net: qrtr: Fix message type of outgoing packets
      networking: : fix typos in code comments
      ptp: Fix example program to match kernel.
      fddi: fix typos in code comments
      selftests: fib_rule_tests: enable forwarding before ipv4 from/iif test
      selftests: fib_rule_tests: fix local IPv4 address typo
      tipc: Avoid copying bytes beyond the supplied data
      2/2] net: xilinx_emaclite: use readx_poll_timeout() in mdio wait function
      1/2] net: axienet: use readx_poll_timeout() in mdio wait function
      vlan: Mark expected switch fall-through
      macvlan: Mark expected switch fall-through
      net/mlx4_en: ethtool, Remove unsupported SFP EEPROM high pages query
      ...

commit 9bbcdb07a53549ed072f03a88a5012e939a64c01
Author: Chris Packham <chris.packham@alliedtelesis.co.nz>
Date:   Mon May 20 15:45:36 2019 +1200

    tipc: Avoid copying bytes beyond the supplied data
    
    TLV_SET is called with a data pointer and a len parameter that tells us
    how many bytes are pointed to by data. When invoking memcpy() we need
    to careful to only copy len bytes.
    
    Previously we would copy TLV_LENGTH(len) bytes which would copy an extra
    4 bytes past the end of the data pointer which newer GCC versions
    complain about.
    
     In file included from test.c:17:
     In function 'TLV_SET',
         inlined from 'test' at test.c:186:5:
     /usr/include/linux/tipc_config.h:317:3:
     warning: 'memcpy' forming offset [33, 36] is out of the bounds [0, 32]
     of object 'bearer_name' with type 'char[32]' [-Warray-bounds]
         memcpy(TLV_DATA(tlv_ptr), data, tlv_len);
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     test.c: In function 'test':
     test.c::161:10: note:
     'bearer_name' declared here
         char bearer_name[TIPC_MAX_BEARER_NAME];
              ^~~~~~~~~~~
    
    We still want to ensure any padding bytes at the end are initialised, do
    this with a explicit memset() rather than copy bytes past the end of
    data. Apply the same logic to TCM_SET.
    
    Signed-off-by: Chris Packham <chris.packham@alliedtelesis.co.nz>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 526f5b851a96566803ee4bee60d0a34df56c77f8
Author: Junwei Hu <hujunwei4@huawei.com>
Date:   Mon May 20 14:43:59 2019 +0800

    tipc: fix modprobe tipc failed after switch order of device registration
    
    Error message printed:
    modprobe: ERROR: could not insert 'tipc': Address family not
    supported by protocol.
    when modprobe tipc after the following patch: switch order of
    device registration, commit 7e27e8d6130c
    ("tipc: switch order of device registration to fix a crash")
    
    Because sock_create_kern(net, AF_TIPC, ...) called by
    tipc_topsrv_create_listener() in the initialization process
    of tipc_init_net(), so tipc_socket_init() must be execute before that.
    Meanwhile, tipc_net_id need to be initialized when sock_create()
    called, and tipc_socket_init() is no need to be called for each namespace.
    
    I add a variable tipc_topsrv_net_ops, and split the
    register_pernet_subsys() of tipc into two parts, and split
    tipc_socket_init() with initialization of pernet params.
    
    By the way, I fixed resources rollback error when tipc_bcast_init()
    failed in tipc_init_net().
    
    Fixes: 7e27e8d6130c ("tipc: switch order of device registration to fix a crash")
    Signed-off-by: Junwei Hu <hujunwei4@huawei.com>
    Reported-by: Wang Wang <wangwang2@huawei.com>
    Reported-by: syzbot+1e8114b61079bfe9cbc5@syzkaller.appspotmail.com
    Reviewed-by: Kang Zhou <zhoukang7@huawei.com>
    Reviewed-by: Suanming Mou <mousuanming@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 78e03651849fd3e8aa9ab3288bc1d3726c4c6129
Merge: a188339ca5a3 6a0a923dfa14
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon May 20 08:21:07 2019 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:1) Use after free in __dev_map_entry_free(), from Eric Dumazet.
    
     1) Use after free in __dev_map_entry_free(), from Eric Dumazet.
    
     2) Fix TCP retransmission timestamps on passive Fast Open, from Yuchung
        Cheng.
    
     3) Orphan NFC, we'll take the patches directly into my tree. From
        Johannes Berg.
    
     4) We can't recycle cloned TCP skbs, from Eric Dumazet.
    
     5) Some flow dissector bpf test fixes, from Stanislav Fomichev.
    
     6) Fix RCU marking and warnings in rhashtable, from Herbert Xu.
    
     7) Fix some potential fib6 leaks, from Eric Dumazet.
    
     8) Fix a _decode_session4 uninitialized memory read bug fix that got
        lost in a merge. From Florian Westphal.
    
     9) Fix ipv6 source address routing wrt. exception route entries, from
        Wei Wang.
    
    10) The netdev_xmit_more() conversion was not done %100 properly in mlx5
        driver, fix from Tariq Toukan.
    
    11) Clean up botched merge on netfilter kselftest, from Florian
        Westphal.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (74 commits)
      of_net: fix of_get_mac_address retval if compiled without CONFIG_OF
      net: fix kernel-doc warnings for socket.c
      net: Treat sock->sk_drops as an unsigned int when printing
      kselftests: netfilter: fix leftover net/net-next merge conflict
      mlxsw: core: Prevent reading unsupported slave address from SFP EEPROM
      mlxsw: core: Prevent QSFP module initialization for old hardware
      vsock/virtio: Initialize core virtio vsock before registering the driver
      net/mlx5e: Fix possible modify header actions memory leak
      net/mlx5e: Fix no rewrite fields with the same match
      net/mlx5e: Additional check for flow destination comparison
      net/mlx5e: Add missing ethtool driver info for representors
      net/mlx5e: Fix number of vports for ingress ACL configuration
      net/mlx5e: Fix ethtool rxfh commands when CONFIG_MLX5_EN_RXNFC is disabled
      net/mlx5e: Fix wrong xmit_more application
      net/mlx5: Fix peer pf disable hca command
      net/mlx5: E-Switch, Correct type to u16 for vport_num and int for vport_index
      net/mlx5: Add meaningful return codes to status_to_err function
      net/mlx5: Imply MLXFW in mlx5_core
      Revert "tipc: fix modprobe tipc failed after switch order of device registration"
      vsock/virtio: free packets during the socket release
      ...

commit 5593530e56943182ebb6d81eca8a3be6db6dbba4
Author: David S. Miller <davem@davemloft.net>
Date:   Fri May 17 12:15:05 2019 -0700

    Revert "tipc: fix modprobe tipc failed after switch order of device registration"
    
    This reverts commit 532b0f7ece4cb2ffd24dc723ddf55242d1188e5e.
    
    More revisions coming up.
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 532b0f7ece4cb2ffd24dc723ddf55242d1188e5e
Author: Junwei Hu <hujunwei4@huawei.com>
Date:   Fri May 17 19:27:34 2019 +0800

    tipc: fix modprobe tipc failed after switch order of device registration
    
    Error message printed:
    modprobe: ERROR: could not insert 'tipc': Address family not
    supported by protocol.
    when modprobe tipc after the following patch: switch order of
    device registration, commit 7e27e8d6130c
    ("tipc: switch order of device registration to fix a crash")
    
    Because sock_create_kern(net, AF_TIPC, ...) is called by
    tipc_topsrv_create_listener() in the initialization process
    of tipc_net_ops, tipc_socket_init() must be execute before that.
    
    I move tipc_socket_init() into function tipc_init_net().
    
    Fixes: 7e27e8d6130c
    ("tipc: switch order of device registration to fix a crash")
    Signed-off-by: Junwei Hu <hujunwei4@huawei.com>
    Reported-by: Wang Wang <wangwang2@huawei.com>
    Reviewed-by: Kang Zhou <zhoukang7@huawei.com>
    Reviewed-by: Suanming Mou <mousuanming@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7e27e8d6130c5e88fac9ddec4249f7f2337fe7f8
Author: Junwei Hu <hujunwei4@huawei.com>
Date:   Thu May 16 10:51:15 2019 +0800

    tipc: switch order of device registration to fix a crash
    
    When tipc is loaded while many processes try to create a TIPC socket,
    a crash occurs:
     PANIC: Unable to handle kernel paging request at virtual
     address "dfff20000000021d"
     pc : tipc_sk_create+0x374/0x1180 [tipc]
     lr : tipc_sk_create+0x374/0x1180 [tipc]
       Exception class = DABT (current EL), IL = 32 bits
     Call trace:
      tipc_sk_create+0x374/0x1180 [tipc]
      __sock_create+0x1cc/0x408
      __sys_socket+0xec/0x1f0
      __arm64_sys_socket+0x74/0xa8
     ...
    
    This is due to race between sock_create and unfinished
    register_pernet_device. tipc_sk_insert tries to do
    "net_generic(net, tipc_net_id)".
    but tipc_net_id is not initialized yet.
    
    So switch the order of the two to close the race.
    
    This can be reproduced with multiple processes doing socket(AF_TIPC, ...)
    and one process doing module removal.
    
    Fixes: a62fbccecd62 ("tipc: make subscriber server support net namespace")
    Signed-off-by: Junwei Hu <hujunwei4@huawei.com>
    Reported-by: Wang Wang <wangwang2@huawei.com>
    Reviewed-by: Xiaogang Wang <wangxiaogang3@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0b7d9b8571ad1542034db38911418697005a3225
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Mar 31 22:50:09 2019 +0800

    tipc: check link name with right length in tipc_nl_compat_link_set
    
    commit 8c63bf9ab4be8b83bd8c34aacfd2f1d2c8901c8a upstream.
    
    A similar issue as fixed by Patch "tipc: check bearer name with right
    length in tipc_nl_compat_bearer_enable" was also found by syzbot in
    tipc_nl_compat_link_set().
    
    The length to check with should be 'TLV_GET_DATA_LEN(msg->req) -
    offsetof(struct tipc_link_config, name)'.
    
    Reported-by: syzbot+de00a87b8644a582ae79@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 625634be3b8bf7d194d7a3a5155beb0041de5853
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Mar 31 22:50:08 2019 +0800

    tipc: check bearer name with right length in tipc_nl_compat_bearer_enable
    
    commit 6f07e5f06c8712acc423485f657799fc8e11e56c upstream.
    
    Syzbot reported the following crash:
    
    BUG: KMSAN: uninit-value in memchr+0xce/0x110 lib/string.c:961
      memchr+0xce/0x110 lib/string.c:961
      string_is_valid net/tipc/netlink_compat.c:176 [inline]
      tipc_nl_compat_bearer_enable+0x2c4/0x910 net/tipc/netlink_compat.c:401
      __tipc_nl_compat_doit net/tipc/netlink_compat.c:321 [inline]
      tipc_nl_compat_doit+0x3aa/0xaf0 net/tipc/netlink_compat.c:354
      tipc_nl_compat_handle net/tipc/netlink_compat.c:1162 [inline]
      tipc_nl_compat_recv+0x1ae7/0x2750 net/tipc/netlink_compat.c:1265
      genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
      genl_rcv_msg+0x185f/0x1a60 net/netlink/genetlink.c:626
      netlink_rcv_skb+0x431/0x620 net/netlink/af_netlink.c:2477
      genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
      netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]
      netlink_unicast+0xf3e/0x1020 net/netlink/af_netlink.c:1336
      netlink_sendmsg+0x127f/0x1300 net/netlink/af_netlink.c:1917
      sock_sendmsg_nosec net/socket.c:622 [inline]
      sock_sendmsg net/socket.c:632 [inline]
    
    Uninit was created at:
      __alloc_skb+0x309/0xa20 net/core/skbuff.c:208
      alloc_skb include/linux/skbuff.h:1012 [inline]
      netlink_alloc_large_skb net/netlink/af_netlink.c:1182 [inline]
      netlink_sendmsg+0xb82/0x1300 net/netlink/af_netlink.c:1892
      sock_sendmsg_nosec net/socket.c:622 [inline]
      sock_sendmsg net/socket.c:632 [inline]
    
    It was triggered when the bearer name size < TIPC_MAX_BEARER_NAME,
    it would check with a wrong len/TLV_GET_DATA_LEN(msg->req), which
    also includes priority and disc_domain length.
    
    This patch is to fix it by checking it with a right length:
    'TLV_GET_DATA_LEN(msg->req) - offsetof(struct tipc_bearer_config, name)'.
    
    Reported-by: syzbot+8b707430713eb46e1e45@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2996e89c2d6247980cf3b6a15fe48dbf42ae226b
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Mar 31 22:50:10 2019 +0800

    tipc: handle the err returned from cmd header function
    
    commit 2ac695d1d602ce00b12170242f58c3d3a8e36d04 upstream.
    
    Syzbot found a crash:
    
      BUG: KMSAN: uninit-value in tipc_nl_compat_name_table_dump+0x54f/0xcd0 net/tipc/netlink_compat.c:872
      Call Trace:
        tipc_nl_compat_name_table_dump+0x54f/0xcd0 net/tipc/netlink_compat.c:872
        __tipc_nl_compat_dumpit+0x59e/0xda0 net/tipc/netlink_compat.c:215
        tipc_nl_compat_dumpit+0x63a/0x820 net/tipc/netlink_compat.c:280
        tipc_nl_compat_handle net/tipc/netlink_compat.c:1226 [inline]
        tipc_nl_compat_recv+0x1b5f/0x2750 net/tipc/netlink_compat.c:1265
        genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
        genl_rcv_msg+0x185f/0x1a60 net/netlink/genetlink.c:626
        netlink_rcv_skb+0x431/0x620 net/netlink/af_netlink.c:2477
        genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
        netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]
        netlink_unicast+0xf3e/0x1020 net/netlink/af_netlink.c:1336
        netlink_sendmsg+0x127f/0x1300 net/netlink/af_netlink.c:1917
        sock_sendmsg_nosec net/socket.c:622 [inline]
        sock_sendmsg net/socket.c:632 [inline]
    
      Uninit was created at:
        __alloc_skb+0x309/0xa20 net/core/skbuff.c:208
        alloc_skb include/linux/skbuff.h:1012 [inline]
        netlink_alloc_large_skb net/netlink/af_netlink.c:1182 [inline]
        netlink_sendmsg+0xb82/0x1300 net/netlink/af_netlink.c:1892
        sock_sendmsg_nosec net/socket.c:622 [inline]
        sock_sendmsg net/socket.c:632 [inline]
    
    It was supposed to be fixed on commit 974cb0e3e7c9 ("tipc: fix uninit-value
    in tipc_nl_compat_name_table_dump") by checking TLV_GET_DATA_LEN(msg->req)
    in cmd->header()/tipc_nl_compat_name_table_dump_header(), which is called
    ahead of tipc_nl_compat_name_table_dump().
    
    However, tipc_nl_compat_dumpit() doesn't handle the error returned from cmd
    header function. It means even when the check added in that fix fails, it
    won't stop calling tipc_nl_compat_name_table_dump(), and the issue will be
    triggered again.
    
    So this patch is to add the process for the err returned from cmd header
    function in tipc_nl_compat_dumpit().
    
    Reported-by: syzbot+3ce8520484b0d4e260a5@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8cb80eb1896aea2b7531a6de15954a2df4b821a6
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@gmail.com>
Date:   Thu May 9 07:13:42 2019 +0200

    tipc: fix hanging clients using poll with EPOLLOUT flag
    
    [ Upstream commit ff946833b70e0c7f93de9a3f5b329b5ae2287b38 ]
    
    commit 517d7c79bdb398 ("tipc: fix hanging poll() for stream sockets")
    introduced a regression for clients using non-blocking sockets.
    After the commit, we send EPOLLOUT event to the client even in
    TIPC_CONNECTING state. This causes the subsequent send() to fail
    with ENOTCONN, as the socket is still not in TIPC_ESTABLISHED state.
    
    In this commit, we:
    - improve the fix for hanging poll() by replacing sk_data_ready()
      with sk_state_change() to wake up all clients.
    - revert the faulty updates introduced by commit 517d7c79bdb398
      ("tipc: fix hanging poll() for stream sockets").
    
    Fixes: 517d7c79bdb398 ("tipc: fix hanging poll() for stream sockets")
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@gmail.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.se>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit afa485dc6f17dcfff2e8179cb67f1939660b3bed
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@gmail.com>
Date:   Thu May 9 07:13:42 2019 +0200

    tipc: fix hanging clients using poll with EPOLLOUT flag
    
    [ Upstream commit ff946833b70e0c7f93de9a3f5b329b5ae2287b38 ]
    
    commit 517d7c79bdb398 ("tipc: fix hanging poll() for stream sockets")
    introduced a regression for clients using non-blocking sockets.
    After the commit, we send EPOLLOUT event to the client even in
    TIPC_CONNECTING state. This causes the subsequent send() to fail
    with ENOTCONN, as the socket is still not in TIPC_ESTABLISHED state.
    
    In this commit, we:
    - improve the fix for hanging poll() by replacing sk_data_ready()
      with sk_state_change() to wake up all clients.
    - revert the faulty updates introduced by commit 517d7c79bdb398
      ("tipc: fix hanging poll() for stream sockets").
    
    Fixes: 517d7c79bdb398 ("tipc: fix hanging poll() for stream sockets")
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@gmail.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.se>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 83c25477e944b9f87ce0d32646ab131fd2139540
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@gmail.com>
Date:   Thu May 9 07:13:42 2019 +0200

    tipc: fix hanging clients using poll with EPOLLOUT flag
    
    [ Upstream commit ff946833b70e0c7f93de9a3f5b329b5ae2287b38 ]
    
    commit 517d7c79bdb398 ("tipc: fix hanging poll() for stream sockets")
    introduced a regression for clients using non-blocking sockets.
    After the commit, we send EPOLLOUT event to the client even in
    TIPC_CONNECTING state. This causes the subsequent send() to fail
    with ENOTCONN, as the socket is still not in TIPC_ESTABLISHED state.
    
    In this commit, we:
    - improve the fix for hanging poll() by replacing sk_data_ready()
      with sk_state_change() to wake up all clients.
    - revert the faulty updates introduced by commit 517d7c79bdb398
      ("tipc: fix hanging poll() for stream sockets").
    
    Fixes: 517d7c79bdb398 ("tipc: fix hanging poll() for stream sockets")
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@gmail.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.se>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5338e8ff22f3180cfafa74b3f9aa92c03c39cc1e
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@gmail.com>
Date:   Thu May 9 07:13:42 2019 +0200

    tipc: fix hanging clients using poll with EPOLLOUT flag
    
    [ Upstream commit ff946833b70e0c7f93de9a3f5b329b5ae2287b38 ]
    
    commit 517d7c79bdb398 ("tipc: fix hanging poll() for stream sockets")
    introduced a regression for clients using non-blocking sockets.
    After the commit, we send EPOLLOUT event to the client even in
    TIPC_CONNECTING state. This causes the subsequent send() to fail
    with ENOTCONN, as the socket is still not in TIPC_ESTABLISHED state.
    
    In this commit, we:
    - improve the fix for hanging poll() by replacing sk_data_ready()
      with sk_state_change() to wake up all clients.
    - revert the faulty updates introduced by commit 517d7c79bdb398
      ("tipc: fix hanging poll() for stream sockets").
    
    Fixes: 517d7c79bdb398 ("tipc: fix hanging poll() for stream sockets")
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@gmail.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.se>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 601e6bcc4ef02bda2831d5ac8133947b5edf597b
Merge: 9b6c9e96f941 6c9f05441477
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu May 9 17:00:51 2019 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
     "Several bug fixes, many are quick merge-window regression cures:
    
       - When NLM_F_EXCL is not set, allow same fib rule insertion. From
         Hangbin Liu.
    
       - Several cures in sja1105 DSA driver (while loop exit condition fix,
         return of negative u8, etc.) from Vladimir Oltean.
    
       - Handle tx/rx delays in realtek PHY driver properly, from Serge
         Semin.
    
       - Double free in cls_matchall, from Pieter Jansen van Vuuren.
    
       - Disable SIOCSHWTSTAMP in macvlan/vlan containers, from Hangbin Liu.
    
       - Endainness fixes in aqc111, from Oliver Neukum.
    
       - Handle errors in packet_init properly, from Haibing Yue.
    
       - Various W=1 warning fixes in kTLS, from Jakub Kicinski"
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (34 commits)
      nfp: add missing kdoc
      net/tls: handle errors from padding_length()
      net/tls: remove set but not used variables
      docs/btf: fix the missing section marks
      nfp: bpf: fix static check error through tightening shift amount adjustment
      selftests: bpf: initialize bpf_object pointers where needed
      packet: Fix error path in packet_init
      net/tcp: use deferred jump label for TCP acked data hook
      net: aquantia: fix undefined devm_hwmon_device_register_with_info reference
      aqc111: fix double endianness swap on BE
      aqc111: fix writing to the phy on BE
      aqc111: fix endianness issue in aqc111_change_mtu
      vlan: disable SIOCSHWTSTAMP in container
      macvlan: disable SIOCSHWTSTAMP in container
      tipc: fix hanging clients using poll with EPOLLOUT flag
      tuntap: synchronize through tfiles array instead of tun->numqueues
      tuntap: fix dividing by zero in ebpf queue selection
      dwmac4_prog_mtl_tx_algorithms() missing write operation
      ptp_qoriq: fix NULL access if ptp dt node missing
      net/sched: avoid double free on matchall reoffload
      ...

commit ff946833b70e0c7f93de9a3f5b329b5ae2287b38
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@gmail.com>
Date:   Thu May 9 07:13:42 2019 +0200

    tipc: fix hanging clients using poll with EPOLLOUT flag
    
    commit 517d7c79bdb398 ("tipc: fix hanging poll() for stream sockets")
    introduced a regression for clients using non-blocking sockets.
    After the commit, we send EPOLLOUT event to the client even in
    TIPC_CONNECTING state. This causes the subsequent send() to fail
    with ENOTCONN, as the socket is still not in TIPC_ESTABLISHED state.
    
    In this commit, we:
    - improve the fix for hanging poll() by replacing sk_data_ready()
      with sk_state_change() to wake up all clients.
    - revert the faulty updates introduced by commit 517d7c79bdb398
      ("tipc: fix hanging poll() for stream sockets").
    
    Fixes: 517d7c79bdb398 ("tipc: fix hanging poll() for stream sockets")
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@gmail.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.se>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c0b14a0854fab0a0164aabfe49a76aae9216fe97
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Thu May 2 17:23:23 2019 +0700

    tipc: fix missing Name entries due to half-failover
    
    TIPC link can temporarily fall into "half-establish" that only one of
    the link endpoints is ESTABLISHED and starts to send traffic, PROTOCOL
    messages, whereas the other link endpoint is not up (e.g. immediately
    when the endpoint receives ACTIVATE_MSG, the network interface goes
    down...).
    
    This is a normal situation and will be settled because the link
    endpoint will be eventually brought down after the link tolerance time.
    
    However, the situation will become worse when the second link is
    established before the first link endpoint goes down,
    For example:
    
       1. Both links <1A-2A>, <1B-2B> down
       2. Link endpoint 2A up, but 1A still down (e.g. due to network
          disturbance, wrong session, etc.)
       3. Link <1B-2B> up
       4. Link endpoint 2A down (e.g. due to link tolerance timeout)
       5. Node B starts failover onto link <1B-2B>
    
       ==> Node A does never start link failover.
    
    When the "half-failover" situation happens, two consequences have been
    observed:
    
    a) Peer link/node gets stuck in FAILINGOVER state;
    b) Traffic or user messages that peer node is trying to failover onto
    the second link can be partially or completely dropped by this node.
    
    The consequence a) was actually solved by commit c140eb166d68 ("tipc:
    fix failover problem"), but that commit didn't cover the b). It's due
    to the fact that the tunnel link endpoint has never been prepared for a
    failover, so the 'l->drop_point' (and the other data...) is not set
    correctly. When a TUNNEL_MSG from peer node arrives on the link,
    depending on the inner message's seqno and the current 'l->drop_point'
    value, the message can be dropped (- treated as a duplicate message) or
    processed.
    At this early stage, the traffic messages from peer are likely to be
    NAME_DISTRIBUTORs, this means some name table entries will be missed on
    the node forever!
    
    The commit resolves the issue by starting the FAILOVER process on this
    node as well. Another benefit from this solution is that we ensure the
    link will not be re-established until the failover ends.
    
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d0cf85f49505796b28e03926b0ce0e17d34461f5
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Mar 31 22:50:09 2019 +0800

    tipc: check link name with right length in tipc_nl_compat_link_set
    
    commit 8c63bf9ab4be8b83bd8c34aacfd2f1d2c8901c8a upstream.
    
    A similar issue as fixed by Patch "tipc: check bearer name with right
    length in tipc_nl_compat_bearer_enable" was also found by syzbot in
    tipc_nl_compat_link_set().
    
    The length to check with should be 'TLV_GET_DATA_LEN(msg->req) -
    offsetof(struct tipc_link_config, name)'.
    
    Reported-by: syzbot+de00a87b8644a582ae79@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ee29a10021fdfaf02d22b82c1f7fcc605d365f3
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Mar 31 22:50:08 2019 +0800

    tipc: check bearer name with right length in tipc_nl_compat_bearer_enable
    
    commit 6f07e5f06c8712acc423485f657799fc8e11e56c upstream.
    
    Syzbot reported the following crash:
    
    BUG: KMSAN: uninit-value in memchr+0xce/0x110 lib/string.c:961
      memchr+0xce/0x110 lib/string.c:961
      string_is_valid net/tipc/netlink_compat.c:176 [inline]
      tipc_nl_compat_bearer_enable+0x2c4/0x910 net/tipc/netlink_compat.c:401
      __tipc_nl_compat_doit net/tipc/netlink_compat.c:321 [inline]
      tipc_nl_compat_doit+0x3aa/0xaf0 net/tipc/netlink_compat.c:354
      tipc_nl_compat_handle net/tipc/netlink_compat.c:1162 [inline]
      tipc_nl_compat_recv+0x1ae7/0x2750 net/tipc/netlink_compat.c:1265
      genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
      genl_rcv_msg+0x185f/0x1a60 net/netlink/genetlink.c:626
      netlink_rcv_skb+0x431/0x620 net/netlink/af_netlink.c:2477
      genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
      netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]
      netlink_unicast+0xf3e/0x1020 net/netlink/af_netlink.c:1336
      netlink_sendmsg+0x127f/0x1300 net/netlink/af_netlink.c:1917
      sock_sendmsg_nosec net/socket.c:622 [inline]
      sock_sendmsg net/socket.c:632 [inline]
    
    Uninit was created at:
      __alloc_skb+0x309/0xa20 net/core/skbuff.c:208
      alloc_skb include/linux/skbuff.h:1012 [inline]
      netlink_alloc_large_skb net/netlink/af_netlink.c:1182 [inline]
      netlink_sendmsg+0xb82/0x1300 net/netlink/af_netlink.c:1892
      sock_sendmsg_nosec net/socket.c:622 [inline]
      sock_sendmsg net/socket.c:632 [inline]
    
    It was triggered when the bearer name size < TIPC_MAX_BEARER_NAME,
    it would check with a wrong len/TLV_GET_DATA_LEN(msg->req), which
    also includes priority and disc_domain length.
    
    This patch is to fix it by checking it with a right length:
    'TLV_GET_DATA_LEN(msg->req) - offsetof(struct tipc_bearer_config, name)'.
    
    Reported-by: syzbot+8b707430713eb46e1e45@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba965c2c980872cf2dbbf61136fd6eeedc839c47
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Mar 31 22:50:10 2019 +0800

    tipc: handle the err returned from cmd header function
    
    commit 2ac695d1d602ce00b12170242f58c3d3a8e36d04 upstream.
    
    Syzbot found a crash:
    
      BUG: KMSAN: uninit-value in tipc_nl_compat_name_table_dump+0x54f/0xcd0 net/tipc/netlink_compat.c:872
      Call Trace:
        tipc_nl_compat_name_table_dump+0x54f/0xcd0 net/tipc/netlink_compat.c:872
        __tipc_nl_compat_dumpit+0x59e/0xda0 net/tipc/netlink_compat.c:215
        tipc_nl_compat_dumpit+0x63a/0x820 net/tipc/netlink_compat.c:280
        tipc_nl_compat_handle net/tipc/netlink_compat.c:1226 [inline]
        tipc_nl_compat_recv+0x1b5f/0x2750 net/tipc/netlink_compat.c:1265
        genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
        genl_rcv_msg+0x185f/0x1a60 net/netlink/genetlink.c:626
        netlink_rcv_skb+0x431/0x620 net/netlink/af_netlink.c:2477
        genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
        netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]
        netlink_unicast+0xf3e/0x1020 net/netlink/af_netlink.c:1336
        netlink_sendmsg+0x127f/0x1300 net/netlink/af_netlink.c:1917
        sock_sendmsg_nosec net/socket.c:622 [inline]
        sock_sendmsg net/socket.c:632 [inline]
    
      Uninit was created at:
        __alloc_skb+0x309/0xa20 net/core/skbuff.c:208
        alloc_skb include/linux/skbuff.h:1012 [inline]
        netlink_alloc_large_skb net/netlink/af_netlink.c:1182 [inline]
        netlink_sendmsg+0xb82/0x1300 net/netlink/af_netlink.c:1892
        sock_sendmsg_nosec net/socket.c:622 [inline]
        sock_sendmsg net/socket.c:632 [inline]
    
    It was supposed to be fixed on commit 974cb0e3e7c9 ("tipc: fix uninit-value
    in tipc_nl_compat_name_table_dump") by checking TLV_GET_DATA_LEN(msg->req)
    in cmd->header()/tipc_nl_compat_name_table_dump_header(), which is called
    ahead of tipc_nl_compat_name_table_dump().
    
    However, tipc_nl_compat_dumpit() doesn't handle the error returned from cmd
    header function. It means even when the check added in that fix fails, it
    won't stop calling tipc_nl_compat_name_table_dump(), and the issue will be
    triggered again.
    
    So this patch is to add the process for the err returned from cmd header
    function in tipc_nl_compat_dumpit().
    
    Reported-by: syzbot+3ce8520484b0d4e260a5@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a0cb0faa15f3174ac0d1c5ca401ca80b4494b21d
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Mar 31 22:50:09 2019 +0800

    tipc: check link name with right length in tipc_nl_compat_link_set
    
    commit 8c63bf9ab4be8b83bd8c34aacfd2f1d2c8901c8a upstream.
    
    A similar issue as fixed by Patch "tipc: check bearer name with right
    length in tipc_nl_compat_bearer_enable" was also found by syzbot in
    tipc_nl_compat_link_set().
    
    The length to check with should be 'TLV_GET_DATA_LEN(msg->req) -
    offsetof(struct tipc_link_config, name)'.
    
    Reported-by: syzbot+de00a87b8644a582ae79@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f21fae8049cd50d3873db21762f75a7bf950f7d2
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Mar 31 22:50:08 2019 +0800

    tipc: check bearer name with right length in tipc_nl_compat_bearer_enable
    
    commit 6f07e5f06c8712acc423485f657799fc8e11e56c upstream.
    
    Syzbot reported the following crash:
    
    BUG: KMSAN: uninit-value in memchr+0xce/0x110 lib/string.c:961
      memchr+0xce/0x110 lib/string.c:961
      string_is_valid net/tipc/netlink_compat.c:176 [inline]
      tipc_nl_compat_bearer_enable+0x2c4/0x910 net/tipc/netlink_compat.c:401
      __tipc_nl_compat_doit net/tipc/netlink_compat.c:321 [inline]
      tipc_nl_compat_doit+0x3aa/0xaf0 net/tipc/netlink_compat.c:354
      tipc_nl_compat_handle net/tipc/netlink_compat.c:1162 [inline]
      tipc_nl_compat_recv+0x1ae7/0x2750 net/tipc/netlink_compat.c:1265
      genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
      genl_rcv_msg+0x185f/0x1a60 net/netlink/genetlink.c:626
      netlink_rcv_skb+0x431/0x620 net/netlink/af_netlink.c:2477
      genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
      netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]
      netlink_unicast+0xf3e/0x1020 net/netlink/af_netlink.c:1336
      netlink_sendmsg+0x127f/0x1300 net/netlink/af_netlink.c:1917
      sock_sendmsg_nosec net/socket.c:622 [inline]
      sock_sendmsg net/socket.c:632 [inline]
    
    Uninit was created at:
      __alloc_skb+0x309/0xa20 net/core/skbuff.c:208
      alloc_skb include/linux/skbuff.h:1012 [inline]
      netlink_alloc_large_skb net/netlink/af_netlink.c:1182 [inline]
      netlink_sendmsg+0xb82/0x1300 net/netlink/af_netlink.c:1892
      sock_sendmsg_nosec net/socket.c:622 [inline]
      sock_sendmsg net/socket.c:632 [inline]
    
    It was triggered when the bearer name size < TIPC_MAX_BEARER_NAME,
    it would check with a wrong len/TLV_GET_DATA_LEN(msg->req), which
    also includes priority and disc_domain length.
    
    This patch is to fix it by checking it with a right length:
    'TLV_GET_DATA_LEN(msg->req) - offsetof(struct tipc_bearer_config, name)'.
    
    Reported-by: syzbot+8b707430713eb46e1e45@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 070e34b627f428a4efac2c948cd38272b036a1b7
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Mar 31 22:50:10 2019 +0800

    tipc: handle the err returned from cmd header function
    
    [ Upstream commit 2ac695d1d602ce00b12170242f58c3d3a8e36d04 ]
    
    Syzbot found a crash:
    
      BUG: KMSAN: uninit-value in tipc_nl_compat_name_table_dump+0x54f/0xcd0 net/tipc/netlink_compat.c:872
      Call Trace:
        tipc_nl_compat_name_table_dump+0x54f/0xcd0 net/tipc/netlink_compat.c:872
        __tipc_nl_compat_dumpit+0x59e/0xda0 net/tipc/netlink_compat.c:215
        tipc_nl_compat_dumpit+0x63a/0x820 net/tipc/netlink_compat.c:280
        tipc_nl_compat_handle net/tipc/netlink_compat.c:1226 [inline]
        tipc_nl_compat_recv+0x1b5f/0x2750 net/tipc/netlink_compat.c:1265
        genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
        genl_rcv_msg+0x185f/0x1a60 net/netlink/genetlink.c:626
        netlink_rcv_skb+0x431/0x620 net/netlink/af_netlink.c:2477
        genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
        netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]
        netlink_unicast+0xf3e/0x1020 net/netlink/af_netlink.c:1336
        netlink_sendmsg+0x127f/0x1300 net/netlink/af_netlink.c:1917
        sock_sendmsg_nosec net/socket.c:622 [inline]
        sock_sendmsg net/socket.c:632 [inline]
    
      Uninit was created at:
        __alloc_skb+0x309/0xa20 net/core/skbuff.c:208
        alloc_skb include/linux/skbuff.h:1012 [inline]
        netlink_alloc_large_skb net/netlink/af_netlink.c:1182 [inline]
        netlink_sendmsg+0xb82/0x1300 net/netlink/af_netlink.c:1892
        sock_sendmsg_nosec net/socket.c:622 [inline]
        sock_sendmsg net/socket.c:632 [inline]
    
    It was supposed to be fixed on commit 974cb0e3e7c9 ("tipc: fix uninit-value
    in tipc_nl_compat_name_table_dump") by checking TLV_GET_DATA_LEN(msg->req)
    in cmd->header()/tipc_nl_compat_name_table_dump_header(), which is called
    ahead of tipc_nl_compat_name_table_dump().
    
    However, tipc_nl_compat_dumpit() doesn't handle the error returned from cmd
    header function. It means even when the check added in that fix fails, it
    won't stop calling tipc_nl_compat_name_table_dump(), and the issue will be
    triggered again.
    
    So this patch is to add the process for the err returned from cmd header
    function in tipc_nl_compat_dumpit().
    
    Reported-by: syzbot+3ce8520484b0d4e260a5@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 87e87b655801993eb9cd1aba7418bd2a0a152bd1
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Mar 31 22:50:09 2019 +0800

    tipc: check link name with right length in tipc_nl_compat_link_set
    
    commit 8c63bf9ab4be8b83bd8c34aacfd2f1d2c8901c8a upstream.
    
    A similar issue as fixed by Patch "tipc: check bearer name with right
    length in tipc_nl_compat_bearer_enable" was also found by syzbot in
    tipc_nl_compat_link_set().
    
    The length to check with should be 'TLV_GET_DATA_LEN(msg->req) -
    offsetof(struct tipc_link_config, name)'.
    
    Reported-by: syzbot+de00a87b8644a582ae79@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 13af7118da01f6daf6a1aa4cdddc4836952472c3
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Mar 31 22:50:08 2019 +0800

    tipc: check bearer name with right length in tipc_nl_compat_bearer_enable
    
    commit 6f07e5f06c8712acc423485f657799fc8e11e56c upstream.
    
    Syzbot reported the following crash:
    
    BUG: KMSAN: uninit-value in memchr+0xce/0x110 lib/string.c:961
      memchr+0xce/0x110 lib/string.c:961
      string_is_valid net/tipc/netlink_compat.c:176 [inline]
      tipc_nl_compat_bearer_enable+0x2c4/0x910 net/tipc/netlink_compat.c:401
      __tipc_nl_compat_doit net/tipc/netlink_compat.c:321 [inline]
      tipc_nl_compat_doit+0x3aa/0xaf0 net/tipc/netlink_compat.c:354
      tipc_nl_compat_handle net/tipc/netlink_compat.c:1162 [inline]
      tipc_nl_compat_recv+0x1ae7/0x2750 net/tipc/netlink_compat.c:1265
      genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
      genl_rcv_msg+0x185f/0x1a60 net/netlink/genetlink.c:626
      netlink_rcv_skb+0x431/0x620 net/netlink/af_netlink.c:2477
      genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
      netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]
      netlink_unicast+0xf3e/0x1020 net/netlink/af_netlink.c:1336
      netlink_sendmsg+0x127f/0x1300 net/netlink/af_netlink.c:1917
      sock_sendmsg_nosec net/socket.c:622 [inline]
      sock_sendmsg net/socket.c:632 [inline]
    
    Uninit was created at:
      __alloc_skb+0x309/0xa20 net/core/skbuff.c:208
      alloc_skb include/linux/skbuff.h:1012 [inline]
      netlink_alloc_large_skb net/netlink/af_netlink.c:1182 [inline]
      netlink_sendmsg+0xb82/0x1300 net/netlink/af_netlink.c:1892
      sock_sendmsg_nosec net/socket.c:622 [inline]
      sock_sendmsg net/socket.c:632 [inline]
    
    It was triggered when the bearer name size < TIPC_MAX_BEARER_NAME,
    it would check with a wrong len/TLV_GET_DATA_LEN(msg->req), which
    also includes priority and disc_domain length.
    
    This patch is to fix it by checking it with a right length:
    'TLV_GET_DATA_LEN(msg->req) - offsetof(struct tipc_bearer_config, name)'.
    
    Reported-by: syzbot+8b707430713eb46e1e45@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7dabc887d133afce32a58c022cb114c53d156e21
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Mar 31 22:50:10 2019 +0800

    tipc: handle the err returned from cmd header function
    
    commit 2ac695d1d602ce00b12170242f58c3d3a8e36d04 upstream.
    
    Syzbot found a crash:
    
      BUG: KMSAN: uninit-value in tipc_nl_compat_name_table_dump+0x54f/0xcd0 net/tipc/netlink_compat.c:872
      Call Trace:
        tipc_nl_compat_name_table_dump+0x54f/0xcd0 net/tipc/netlink_compat.c:872
        __tipc_nl_compat_dumpit+0x59e/0xda0 net/tipc/netlink_compat.c:215
        tipc_nl_compat_dumpit+0x63a/0x820 net/tipc/netlink_compat.c:280
        tipc_nl_compat_handle net/tipc/netlink_compat.c:1226 [inline]
        tipc_nl_compat_recv+0x1b5f/0x2750 net/tipc/netlink_compat.c:1265
        genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
        genl_rcv_msg+0x185f/0x1a60 net/netlink/genetlink.c:626
        netlink_rcv_skb+0x431/0x620 net/netlink/af_netlink.c:2477
        genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
        netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]
        netlink_unicast+0xf3e/0x1020 net/netlink/af_netlink.c:1336
        netlink_sendmsg+0x127f/0x1300 net/netlink/af_netlink.c:1917
        sock_sendmsg_nosec net/socket.c:622 [inline]
        sock_sendmsg net/socket.c:632 [inline]
    
      Uninit was created at:
        __alloc_skb+0x309/0xa20 net/core/skbuff.c:208
        alloc_skb include/linux/skbuff.h:1012 [inline]
        netlink_alloc_large_skb net/netlink/af_netlink.c:1182 [inline]
        netlink_sendmsg+0xb82/0x1300 net/netlink/af_netlink.c:1892
        sock_sendmsg_nosec net/socket.c:622 [inline]
        sock_sendmsg net/socket.c:632 [inline]
    
    It was supposed to be fixed on commit 974cb0e3e7c9 ("tipc: fix uninit-value
    in tipc_nl_compat_name_table_dump") by checking TLV_GET_DATA_LEN(msg->req)
    in cmd->header()/tipc_nl_compat_name_table_dump_header(), which is called
    ahead of tipc_nl_compat_name_table_dump().
    
    However, tipc_nl_compat_dumpit() doesn't handle the error returned from cmd
    header function. It means even when the check added in that fix fails, it
    won't stop calling tipc_nl_compat_name_table_dump(), and the issue will be
    triggered again.
    
    So this patch is to add the process for the err returned from cmd header
    function in tipc_nl_compat_dumpit().
    
    Reported-by: syzbot+3ce8520484b0d4e260a5@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7b7e51ff358daa32f6d962c69623bb90db02e6fa
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Mar 31 22:50:09 2019 +0800

    tipc: check link name with right length in tipc_nl_compat_link_set
    
    commit 8c63bf9ab4be8b83bd8c34aacfd2f1d2c8901c8a upstream.
    
    A similar issue as fixed by Patch "tipc: check bearer name with right
    length in tipc_nl_compat_bearer_enable" was also found by syzbot in
    tipc_nl_compat_link_set().
    
    The length to check with should be 'TLV_GET_DATA_LEN(msg->req) -
    offsetof(struct tipc_link_config, name)'.
    
    Reported-by: syzbot+de00a87b8644a582ae79@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a37917288a431732de560e6ba165cff866e89a16
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Mar 31 22:50:08 2019 +0800

    tipc: check bearer name with right length in tipc_nl_compat_bearer_enable
    
    commit 6f07e5f06c8712acc423485f657799fc8e11e56c upstream.
    
    Syzbot reported the following crash:
    
    BUG: KMSAN: uninit-value in memchr+0xce/0x110 lib/string.c:961
      memchr+0xce/0x110 lib/string.c:961
      string_is_valid net/tipc/netlink_compat.c:176 [inline]
      tipc_nl_compat_bearer_enable+0x2c4/0x910 net/tipc/netlink_compat.c:401
      __tipc_nl_compat_doit net/tipc/netlink_compat.c:321 [inline]
      tipc_nl_compat_doit+0x3aa/0xaf0 net/tipc/netlink_compat.c:354
      tipc_nl_compat_handle net/tipc/netlink_compat.c:1162 [inline]
      tipc_nl_compat_recv+0x1ae7/0x2750 net/tipc/netlink_compat.c:1265
      genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
      genl_rcv_msg+0x185f/0x1a60 net/netlink/genetlink.c:626
      netlink_rcv_skb+0x431/0x620 net/netlink/af_netlink.c:2477
      genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
      netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]
      netlink_unicast+0xf3e/0x1020 net/netlink/af_netlink.c:1336
      netlink_sendmsg+0x127f/0x1300 net/netlink/af_netlink.c:1917
      sock_sendmsg_nosec net/socket.c:622 [inline]
      sock_sendmsg net/socket.c:632 [inline]
    
    Uninit was created at:
      __alloc_skb+0x309/0xa20 net/core/skbuff.c:208
      alloc_skb include/linux/skbuff.h:1012 [inline]
      netlink_alloc_large_skb net/netlink/af_netlink.c:1182 [inline]
      netlink_sendmsg+0xb82/0x1300 net/netlink/af_netlink.c:1892
      sock_sendmsg_nosec net/socket.c:622 [inline]
      sock_sendmsg net/socket.c:632 [inline]
    
    It was triggered when the bearer name size < TIPC_MAX_BEARER_NAME,
    it would check with a wrong len/TLV_GET_DATA_LEN(msg->req), which
    also includes priority and disc_domain length.
    
    This patch is to fix it by checking it with a right length:
    'TLV_GET_DATA_LEN(msg->req) - offsetof(struct tipc_bearer_config, name)'.
    
    Reported-by: syzbot+8b707430713eb46e1e45@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d2618e32d7b47007ea55caa949b5681d88175d73
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Mar 31 22:50:10 2019 +0800

    tipc: handle the err returned from cmd header function
    
    commit 2ac695d1d602ce00b12170242f58c3d3a8e36d04 upstream.
    
    Syzbot found a crash:
    
      BUG: KMSAN: uninit-value in tipc_nl_compat_name_table_dump+0x54f/0xcd0 net/tipc/netlink_compat.c:872
      Call Trace:
        tipc_nl_compat_name_table_dump+0x54f/0xcd0 net/tipc/netlink_compat.c:872
        __tipc_nl_compat_dumpit+0x59e/0xda0 net/tipc/netlink_compat.c:215
        tipc_nl_compat_dumpit+0x63a/0x820 net/tipc/netlink_compat.c:280
        tipc_nl_compat_handle net/tipc/netlink_compat.c:1226 [inline]
        tipc_nl_compat_recv+0x1b5f/0x2750 net/tipc/netlink_compat.c:1265
        genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
        genl_rcv_msg+0x185f/0x1a60 net/netlink/genetlink.c:626
        netlink_rcv_skb+0x431/0x620 net/netlink/af_netlink.c:2477
        genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
        netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]
        netlink_unicast+0xf3e/0x1020 net/netlink/af_netlink.c:1336
        netlink_sendmsg+0x127f/0x1300 net/netlink/af_netlink.c:1917
        sock_sendmsg_nosec net/socket.c:622 [inline]
        sock_sendmsg net/socket.c:632 [inline]
    
      Uninit was created at:
        __alloc_skb+0x309/0xa20 net/core/skbuff.c:208
        alloc_skb include/linux/skbuff.h:1012 [inline]
        netlink_alloc_large_skb net/netlink/af_netlink.c:1182 [inline]
        netlink_sendmsg+0xb82/0x1300 net/netlink/af_netlink.c:1892
        sock_sendmsg_nosec net/socket.c:622 [inline]
        sock_sendmsg net/socket.c:632 [inline]
    
    It was supposed to be fixed on commit 974cb0e3e7c9 ("tipc: fix uninit-value
    in tipc_nl_compat_name_table_dump") by checking TLV_GET_DATA_LEN(msg->req)
    in cmd->header()/tipc_nl_compat_name_table_dump_header(), which is called
    ahead of tipc_nl_compat_name_table_dump().
    
    However, tipc_nl_compat_dumpit() doesn't handle the error returned from cmd
    header function. It means even when the check added in that fix fails, it
    won't stop calling tipc_nl_compat_name_table_dump(), and the issue will be
    triggered again.
    
    So this patch is to add the process for the err returned from cmd header
    function in tipc_nl_compat_dumpit().
    
    Reported-by: syzbot+3ce8520484b0d4e260a5@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e35fa001678806e1424c7469bebeced5c6c96478
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Tue Apr 9 14:59:24 2019 +0700

    tipc: missing entries in name table of publications
    
    [ Upstream commit d1841533e54876f152a30ac398a34f47ad6590b1 ]
    
    When binding multiple services with specific type 1Ki, 2Ki..,
    this leads to some entries in the name table of publications
    missing when listed out via 'tipc name show'.
    
    The problem is at identify zero last_type conditional provided
    via netlink. The first is initial 'type' when starting name table
    dummping. The second is continuously with zero type (node state
    service type). Then, lookup function failure to finding node state
    service type in next iteration.
    
    To solve this, adding more conditional to marked as dirty type and
    lookup correct service type for the next iteration instead of select
    the first service as initial 'type' zero.
    
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 242e5746cb477bdb4c59d0f2d3c5a3e1c0a10629
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Tue Apr 9 14:59:24 2019 +0700

    tipc: missing entries in name table of publications
    
    [ Upstream commit d1841533e54876f152a30ac398a34f47ad6590b1 ]
    
    When binding multiple services with specific type 1Ki, 2Ki..,
    this leads to some entries in the name table of publications
    missing when listed out via 'tipc name show'.
    
    The problem is at identify zero last_type conditional provided
    via netlink. The first is initial 'type' when starting name table
    dummping. The second is continuously with zero type (node state
    service type). Then, lookup function failure to finding node state
    service type in next iteration.
    
    To solve this, adding more conditional to marked as dirty type and
    lookup correct service type for the next iteration instead of select
    the first service as initial 'type' zero.
    
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e58156d700ac45fd5f0f90698a13233b1fe4c44
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Apr 24 17:21:40 2019 -0700

    tipc: remove rcu_read_unlock() left in tipc_udp_recv()
    
    I forgot to remove one rcu_read_unlock() before a return statement.
    
    Joy of mixing goto and return styles in a function :)
    
    Fixes: 4109a2c3b91e ("tipc: tipc_udp_recv() cleanup vs rcu verbs")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b2c01aab9646ed8ffb7c549afe55d5349c482425
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Wed Mar 6 19:56:58 2019 +0800

    ssb: Fix possible NULL pointer dereference in ssb_host_pcmcia_exit
    
    Syzkaller report this:
    
    kasan: GPF could be caused by NULL-ptr deref or user memory access
    general protection fault: 0000 [#1] SMP KASAN PTI
    CPU: 0 PID: 4492 Comm: syz-executor.0 Not tainted 5.0.0-rc7+ #45
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014
    RIP: 0010:sysfs_remove_file_ns+0x27/0x70 fs/sysfs/file.c:468
    Code: 00 00 00 41 54 55 48 89 fd 53 49 89 d4 48 89 f3 e8 ee 76 9c ff 48 8d 7d 30 48 b8 00 00 00 00 00 fc ff df 48 89 fa 48 c1 ea 03 <80> 3c 02 00 75 2d 48 89 da 48 b8 00 00 00 00 00 fc ff df 48 8b 6d
    RSP: 0018:ffff8881e9d9fc00 EFLAGS: 00010206
    RAX: dffffc0000000000 RBX: ffffffff900367e0 RCX: ffffffff81a95952
    RDX: 0000000000000006 RSI: ffffc90001405000 RDI: 0000000000000030
    RBP: 0000000000000000 R08: fffffbfff1fa22ed R09: fffffbfff1fa22ed
    R10: 0000000000000001 R11: fffffbfff1fa22ec R12: 0000000000000000
    R13: ffffffffc1abdac0 R14: 1ffff1103d3b3f8b R15: 0000000000000000
    FS:  00007fe409dc1700(0000) GS:ffff8881f1200000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000001b2d721000 CR3: 00000001e98b6005 CR4: 00000000007606f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    PKRU: 55555554
    Call Trace:
     sysfs_remove_file include/linux/sysfs.h:519 [inline]
     driver_remove_file+0x40/0x50 drivers/base/driver.c:122
     pcmcia_remove_newid_file drivers/pcmcia/ds.c:163 [inline]
     pcmcia_unregister_driver+0x7d/0x2b0 drivers/pcmcia/ds.c:209
     ssb_modexit+0xa/0x1b [ssb]
     __do_sys_delete_module kernel/module.c:1018 [inline]
     __se_sys_delete_module kernel/module.c:961 [inline]
     __x64_sys_delete_module+0x3dc/0x5e0 kernel/module.c:961
     do_syscall_64+0x147/0x600 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x462e99
    Code: f7 d8 64 89 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48
    RSP: 002b:00007fe409dc0c58 EFLAGS: 00000246 ORIG_RAX: 00000000000000b0
    RAX: ffffffffffffffda RBX: 000000000073bf00 RCX: 0000000000462e99
    RDX: 0000000000000000 RSI: 0000000000000000 RDI: 00000000200000c0
    RBP: 0000000000000002 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007fe409dc16bc
    R13: 00000000004bccaa R14: 00000000006f6bc8 R15: 00000000ffffffff
    Modules linked in: ssb(-) 3c59x nvme_core macvlan tap pata_hpt3x3 rt2x00pci null_blk tsc40 pm_notifier_error_inject notifier_error_inject mdio cdc_wdm nf_reject_ipv4 ath9k_common ath9k_hw ath pppox ppp_generic slhc ehci_platform wl12xx wlcore tps6507x_ts ioc4 nf_synproxy_core ide_gd_mod ax25 can_dev iwlwifi can_raw atm tm2_touchkey can_gw can sundance adp5588_keys rt2800mmio rt2800lib rt2x00mmio rt2x00lib eeprom_93cx6 pn533 lru_cache elants_i2c ip_set nfnetlink gameport tipc hampshire nhc_ipv6 nhc_hop nhc_udp nhc_fragment nhc_routing nhc_mobility nhc_dest 6lowpan silead brcmutil nfc mt76_usb mt76 mac80211 iptable_security iptable_raw iptable_mangle iptable_nat nf_nat_ipv4 nf_nat nf_conntrack nf_defrag_ipv6 nf_defrag_ipv4 iptable_filter bpfilter ip6_vti ip_gre sit hsr veth vxcan batman_adv cfg80211 rfkill chnl_net caif nlmon vcan bridge stp llc ip6_gre ip6_tunnel tunnel6 tun joydev mousedev serio_raw ide_pci_generic piix floppy ide_core sch_fq_codel ip_tables x_tables ipv6
     [last unloaded: 3c59x]
    Dumping ftrace buffer:
       (ftrace buffer empty)
    ---[ end trace 3913cbf8011e1c05 ]---
    
    In ssb_modinit, it does not fail SSB init when ssb_host_pcmcia_init failed,
    however in ssb_modexit, ssb_host_pcmcia_exit calls pcmcia_unregister_driver
    unconditionally, which may tigger a NULL pointer dereference issue as above.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Fixes: 399500da18f7 ("ssb: pick PCMCIA host code support from b43 driver")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit 4109a2c3b91e5f38e401fc4ea56848e65e429785
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Apr 23 09:24:46 2019 -0700

    tipc: tipc_udp_recv() cleanup vs rcu verbs
    
    First thing tipc_udp_recv() does is to use rcu_dereference_sk_user_data(),
    and this is really hinting we already own rcu_read_lock() from the caller
    (UDP stack).
    
    No need to add another rcu_read_lock()/rcu_read_unlock() pair.
    
    Also use rcu_dereference() instead of rcu_dereference_rtnl()
    in the data path.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 42e5425aa0dfd8a6cdd7e177cfd9703df05c7411
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Thu Apr 18 21:02:19 2019 +0700

    tipc: introduce new socket option TIPC_SOCK_RECVQ_USED
    
    When using TIPC_SOCK_RECVQ_DEPTH for getsockopt(), it returns the
    number of buffers in receive socket buffer which is not so helpful
    for user space applications.
    
    This commit introduces the new option TIPC_SOCK_RECVQ_USED which
    returns the current allocated bytes of the receive socket buffer.
    This helps user space applications dimension its buffer usage to
    avoid buffer overload issue.
    
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2a3a028fc61d03e80ac57091330eb514280bd5be
Merge: 444fe9913539 e6986423d283
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Apr 17 09:57:45 2019 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Handle init flow failures properly in iwlwifi driver, from Shahar S
        Matityahu.
    
     2) mac80211 TXQs need to be unscheduled on powersave start, from Felix
        Fietkau.
    
     3) SKB memory accounting fix in A-MDSU aggregation, from Felix Fietkau.
    
     4) Increase RCU lock hold time in mlx5 FPGA code, from Saeed Mahameed.
    
     5) Avoid checksum complete with XDP in mlx5, also from Saeed.
    
     6) Fix netdev feature clobbering in ibmvnic driver, from Thomas Falcon.
    
     7) Partial sent TLS record leak fix from Jakub Kicinski.
    
     8) Reject zero size iova range in vhost, from Jason Wang.
    
     9) Allow pending work to complete before clcsock release from Karsten
        Graul.
    
    10) Fix XDP handling max MTU in thunderx, from Matteo Croce.
    
    11) A lot of protocols look at the sa_family field of a sockaddr before
        validating it's length is large enough, from Tetsuo Handa.
    
    12) Don't write to free'd pointer in qede ptp error path, from Colin Ian
        King.
    
    13) Have to recompile IP options in ipv4_link_failure because it can be
        invoked from ARP, from Stephen Suryaputra.
    
    14) Doorbell handling fixes in qed from Denis Bolotin.
    
    15) Revert net-sysfs kobject register leak fix, it causes new problems.
        From Wang Hai.
    
    16) Spectre v1 fix in ATM code, from Gustavo A. R. Silva.
    
    17) Fix put of BROPT_VLAN_STATS_PER_PORT in bridging code, from Nikolay
        Aleksandrov.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (111 commits)
      socket: fix compat SO_RCVTIMEO_NEW/SO_SNDTIMEO_NEW
      tcp: tcp_grow_window() needs to respect tcp_space()
      ocelot: Clean up stats update deferred work
      ocelot: Don't sleep in atomic context (irqs_disabled())
      net: bridge: fix netlink export of vlan_stats_per_port option
      qed: fix spelling mistake "faspath" -> "fastpath"
      tipc: set sysctl_tipc_rmem and named_timeout right range
      tipc: fix link established but not in session
      net: Fix missing meta data in skb with vlan packet
      net: atm: Fix potential Spectre v1 vulnerabilities
      net/core: work around section mismatch warning for ptp_classifier
      net: bridge: fix per-port af_packet sockets
      bnx2x: fix spelling mistake "dicline" -> "decline"
      route: Avoid crash from dereferencing NULL rt->from
      MAINTAINERS: normalize Woojung Huh's email address
      bonding: fix event handling for stacked bonds
      Revert "net-sysfs: Fix memory leak in netdev_register_kobject"
      rtnetlink: fix rtnl_valid_stats_req() nlmsg_len check
      qed: Fix the DORQ's attentions handling
      qed: Fix missing DORQ attentions
      ...

commit 4bcd4ec1017205644a2697bccbc3b5143f522f5f
Author: Jie Liu <liujie165@huawei.com>
Date:   Tue Apr 16 13:10:09 2019 +0800

    tipc: set sysctl_tipc_rmem and named_timeout right range
    
    We find that sysctl_tipc_rmem and named_timeout do not have the right minimum
    setting. sysctl_tipc_rmem should be larger than zero, like sysctl_tcp_rmem.
    And named_timeout as a timeout setting should be not less than zero.
    
    Fixes: cc79dd1ba9c10 ("tipc: change socket buffer overflow control to respect sk_rcvbuf")
    Fixes: a5325ae5b8bff ("tipc: add name distributor resiliency queue")
    Signed-off-by: Jie Liu <liujie165@huawei.com>
    Reported-by: Qiang Ning <ningqiang1@huawei.com>
    Reviewed-by: Zhiqiang Liu <liuzhiqiang26@huawei.com>
    Reviewed-by: Miaohe Lin <linmiaohe@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f7a937801b9f8788519a23b12cb4d6c2c84d84be
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Tue Apr 16 10:48:07 2019 +0700

    tipc: fix link established but not in session
    
    According to the link FSM, when a link endpoint got RESET_MSG (- a
    traditional one without the stopping bit) from its peer, it moves to
    PEER_RESET state and raises a LINK_DOWN event which then resets the
    link itself. Its state will become ESTABLISHING after the reset event
    and the link will be re-established soon after this endpoint starts to
    send ACTIVATE_MSG to the peer.
    
    There is no problem with this mechanism, however the link resetting has
    cleared the link 'in_session' flag (along with the other important link
    data such as: the link 'mtu') that was correctly set up at the 1st step
    (i.e. when this endpoint received the peer RESET_MSG). As a result, the
    link will become ESTABLISHED, but the 'in_session' flag is not set, and
    all STATE_MSG from its peer will be dropped at the link_validate_msg().
    It means the link not synced and will sooner or later face a failure.
    
    Since the link reset action is obviously needed for a new link session
    (this is also true in the other situations), the problem here is that
    the link is re-established a bit too early when the link endpoints are
    not really in-sync yet. The commit forces a resync as already done in
    the previous commit 91986ee166cf ("tipc: fix link session and
    re-establish issues") by simply varying the link 'peer_session' value
    at the link_reset().
    
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 909620ff72c8fcf95b6ef1dca850b24bf016dd27
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Apr 11 21:56:28 2019 +0200

    tipc: use standard write_lock & unlock functions when creating node
    
    In the function tipc_node_create() we protect the peer capability field
    by using the node rw_lock. However, we access the lock directly instead
    of using the dedicated functions for this, as we do everywhere else in
    node.c. This cosmetic spot is fixed here.
    
    Fixes: 40999f11ce67 ("tipc: make link capability update thread safe")
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d1841533e54876f152a30ac398a34f47ad6590b1
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Tue Apr 9 14:59:24 2019 +0700

    tipc: missing entries in name table of publications
    
    When binding multiple services with specific type 1Ki, 2Ki..,
    this leads to some entries in the name table of publications
    missing when listed out via 'tipc name show'.
    
    The problem is at identify zero last_type conditional provided
    via netlink. The first is initial 'type' when starting name table
    dummping. The second is continuously with zero type (node state
    service type). Then, lookup function failure to finding node state
    service type in next iteration.
    
    To solve this, adding more conditional to marked as dirty type and
    lookup correct service type for the next iteration instead of select
    the first service as initial 'type' zero.
    
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8f4043f1253292495dbf9c8be0c1b07b4b9902b7
Merge: 29502bb127b1 58ee86b8c775
Author: David S. Miller <davem@davemloft.net>
Date:   Thu Apr 4 18:29:25 2019 -0700

    Merge branch 'tipc-improve-TIPC-unicast-link-throughput'
    
    Tuong Lien says:
    
    ====================
    tipc: improve TIPC unicast link throughput
    
    The series introduces an algorithm to improve TIPC throughput especially
    in terms of packet loss, also tries to reduce packet duplication due to
    overactive NACK sending mechanism.
    
    The link failover situation is also covered by the patches.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 58ee86b8c7750a6b67d665a031aa3ff13a9b6863
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Thu Apr 4 11:09:53 2019 +0700

    tipc: adapt link failover for new Gap-ACK algorithm
    
    In commit 0ae955e2656d ("tipc: improve TIPC throughput by Gap ACK
    blocks"), we enhance the link transmq by releasing as many packets as
    possible with the multi-ACKs from peer node. This also means the queue
    is now non-linear and the peer link deferdq becomes vital.
    
    Whereas, in the case of link failover, all messages in the link transmq
    need to be transmitted as tunnel messages in such a way that message
    sequentiality and cardinality per sender is preserved. This requires us
    to maintain the link deferdq somehow, so that when the tunnel messages
    arrive, the inner user messages along with the ones in the deferdq will
    be delivered to upper layer correctly.
    
    The commit accomplishes this by defining a new queue in the TIPC link
    structure to hold the old link deferdq when link failover happens and
    process it upon receipt of tunnel messages.
    
    Also, in the case of link syncing, the link deferdq will not be purged
    to avoid unnecessary retransmissions that in the worst case will fail
    because the packets might have been freed on the sending side.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 382f598fb66b14a8451f2794abf70ea7b5826c96
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Thu Apr 4 11:09:52 2019 +0700

    tipc: reduce duplicate packets for unicast traffic
    
    For unicast transmission, the current NACK sending althorithm is over-
    active that forces the sending side to retransmit a packet that is not
    really lost but just arrived at the receiving side with some delay, or
    even retransmit same packets that have already been retransmitted
    before. As a result, many duplicates are observed also under normal
    condition, ie. without packet loss.
    
    One example case is: node1 transmits 1 2 3 4 10 5 6 7 8 9, when node2
    receives packet #10, it puts into the deferdq. When the packet #5 comes
    it sends NACK with gap [6 - 9]. However, shortly after that, when
    packet #6 arrives, it pulls out packet #10 from the deferfq, but it is
    still out of order, so it makes another NACK with gap [7 - 9] and so on
    ... Finally, node1 has to retransmit the packets 5 6 7 8 9 a number of
    times, but in fact all the packets are not lost at all, so duplicates!
    
    This commit reduces duplicates by changing the condition to send NACK,
    also restricting the retransmissions on individual packets via a timer
    of about 1ms. However, it also needs to say that too tricky condition
    for NACKs or too long timeout value for retransmissions will result in
    performance reducing! The criterias in this commit are found to be
    effective for both the requirements to reduce duplicates but not affect
    performance.
    
    The tipc_link_rcv() is also improved to only dequeue skb from the link
    deferdq if it is expected (ie. its seqno <= rcv_nxt).
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9195948fbf3406f75b1f133ddb57304169c44341
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Thu Apr 4 11:09:51 2019 +0700

    tipc: improve TIPC throughput by Gap ACK blocks
    
    During unicast link transmission, it's observed very often that because
    of one or a few lost/dis-ordered packets, the sending side will fastly
    reach the send window limit and must wait for the packets to be arrived
    at the receiving side or in the worst case, a retransmission must be
    done first. The sending side cannot release a lot of subsequent packets
    in its transmq even though all of them might have already been received
    by the receiving side.
    That is, one or two packets dis-ordered/lost and dozens of packets have
    to wait, this obviously reduces the overall throughput!
    
    This commit introduces an algorithm to overcome this by using "Gap ACK
    blocks". Basically, a Gap ACK block will consist of <ack, gap> numbers
    that describes the link deferdq where packets have been got by the
    receiving side but with gaps, for example:
    
          link deferdq: [1 2 3 4      10 11      13 14 15       20]
    --> Gap ACK blocks:       <4, 5>,   <11, 1>,      <15, 4>, <20, 0>
    
    The Gap ACK blocks will be sent to the sending side along with the
    traditional ACK or NACK message. Immediately when receiving the message
    the sending side will now not only release from its transmq the packets
    ack-ed by the ACK but also by the Gap ACK blocks! So, more packets can
    be enqueued and transmitted.
    In addition, the sending side can now do "multi-retransmissions"
    according to the Gaps reported in the Gap ACK blocks.
    
    The new algorithm as verified helps greatly improve the TIPC throughput
    especially under packet loss condition.
    
    So far, a maximum of 32 blocks is quite enough without any "Too few Gap
    ACK blocks" reports with a 5.0% packet loss rate, however this number
    can be increased in the furture if needed.
    
    Also, the patch is backward compatible.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e1279ff7aec19d7154da30bf5b83e797a13fbced
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Wed Apr 3 13:05:04 2019 +0700

    tipc: add NULL pointer check
    
    skb somehow dequeued out of inputq before processing, it causes to
    NULL pointer and kernel crashed.
    
    Add checking skb valid before using.
    
    Fixes: c55c8edafa9 ("tipc: smooth change between replicast and broadcast")
    Reported-by: Tuong Lien Tong <tuong.t.lien@dektech.com.au>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9868ffd44b2554253c1377a0577aea67ea8b7ca4
Author: Erik Hugne <erik.hugne@gmail.com>
Date:   Thu Mar 21 09:11:59 2019 +0100

    tipc: fix cancellation of topology subscriptions
    
    [ Upstream commit 33872d79f5d1cbedaaab79669cc38f16097a9450 ]
    
    When cancelling a subscription, we have to clear the cancel bit in the
    request before iterating over any established subscriptions with memcmp.
    Otherwise no subscription will ever be found, and it will not be
    possible to explicitly unsubscribe individual subscriptions.
    
    Fixes: 8985ecc7c1e0 ("tipc: simplify endianness handling in topology subscriber")
    Signed-off-by: Erik Hugne <erik.hugne@gmail.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e13fbdf6e872a3bbd4c2d727e746a5f83b793b28
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Mar 24 00:48:22 2019 +0800

    tipc: change to check tipc_own_id to return in tipc_net_stop
    
    [ Upstream commit 9926cb5f8b0f0aea535735185600d74db7608550 ]
    
    When running a syz script, a panic occurred:
    
    [  156.088228] BUG: KASAN: use-after-free in tipc_disc_timeout+0x9c9/0xb20 [tipc]
    [  156.094315] Call Trace:
    [  156.094844]  <IRQ>
    [  156.095306]  dump_stack+0x7c/0xc0
    [  156.097346]  print_address_description+0x65/0x22e
    [  156.100445]  kasan_report.cold.3+0x37/0x7a
    [  156.102402]  tipc_disc_timeout+0x9c9/0xb20 [tipc]
    [  156.106517]  call_timer_fn+0x19a/0x610
    [  156.112749]  run_timer_softirq+0xb51/0x1090
    
    It was caused by the netns freed without deleting the discoverer timer,
    while later on the netns would be accessed in the timer handler.
    
    The timer should have been deleted by tipc_net_stop() when cleaning up a
    netns. However, tipc has been able to enable a bearer and start d->timer
    without the local node_addr set since Commit 52dfae5c85a4 ("tipc: obtain
    node identity from interface by default"), which caused the timer not to
    be deleted in tipc_net_stop() then.
    
    So fix it in tipc_net_stop() by changing to check local node_id instead
    of local node_addr, as Jon suggested.
    
    While at it, remove the calling of tipc_nametbl_withdraw() there, since
    tipc_nametbl_stop() will take of the nametbl's freeing after.
    
    Fixes: 52dfae5c85a4 ("tipc: obtain node identity from interface by default")
    Reported-by: syzbot+a25307ad099309f1c2b9@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 30e2a9a38d0c07af07eddc0db2a685a9e2b89af6
Author: Erik Hugne <erik.hugne@gmail.com>
Date:   Sun Mar 17 18:46:42 2019 +0100

    tipc: allow service ranges to be connect()'ed on RDM/DGRAM
    
    [ Upstream commit ea239314fe42ace880bdd834256834679346c80e ]
    
    We move the check that prevents connecting service ranges to after
    the RDM/DGRAM check, and move address sanity control to a separate
    function that also validates the service range.
    
    Fixes: 23998835be98 ("tipc: improve address sanity check in tipc_connect()")
    Signed-off-by: Erik Hugne <erik.hugne@gmail.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 52a7505c91a19d3a2a1047225701a57728a83875
Author: Erik Hugne <erik.hugne@gmail.com>
Date:   Thu Mar 21 09:11:59 2019 +0100

    tipc: fix cancellation of topology subscriptions
    
    [ Upstream commit 33872d79f5d1cbedaaab79669cc38f16097a9450 ]
    
    When cancelling a subscription, we have to clear the cancel bit in the
    request before iterating over any established subscriptions with memcmp.
    Otherwise no subscription will ever be found, and it will not be
    possible to explicitly unsubscribe individual subscriptions.
    
    Fixes: 8985ecc7c1e0 ("tipc: simplify endianness handling in topology subscriber")
    Signed-off-by: Erik Hugne <erik.hugne@gmail.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1be6c0c737e402958283a0941b92c2204bb96a04
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Mar 24 00:48:22 2019 +0800

    tipc: change to check tipc_own_id to return in tipc_net_stop
    
    [ Upstream commit 9926cb5f8b0f0aea535735185600d74db7608550 ]
    
    When running a syz script, a panic occurred:
    
    [  156.088228] BUG: KASAN: use-after-free in tipc_disc_timeout+0x9c9/0xb20 [tipc]
    [  156.094315] Call Trace:
    [  156.094844]  <IRQ>
    [  156.095306]  dump_stack+0x7c/0xc0
    [  156.097346]  print_address_description+0x65/0x22e
    [  156.100445]  kasan_report.cold.3+0x37/0x7a
    [  156.102402]  tipc_disc_timeout+0x9c9/0xb20 [tipc]
    [  156.106517]  call_timer_fn+0x19a/0x610
    [  156.112749]  run_timer_softirq+0xb51/0x1090
    
    It was caused by the netns freed without deleting the discoverer timer,
    while later on the netns would be accessed in the timer handler.
    
    The timer should have been deleted by tipc_net_stop() when cleaning up a
    netns. However, tipc has been able to enable a bearer and start d->timer
    without the local node_addr set since Commit 52dfae5c85a4 ("tipc: obtain
    node identity from interface by default"), which caused the timer not to
    be deleted in tipc_net_stop() then.
    
    So fix it in tipc_net_stop() by changing to check local node_id instead
    of local node_addr, as Jon suggested.
    
    While at it, remove the calling of tipc_nametbl_withdraw() there, since
    tipc_nametbl_stop() will take of the nametbl's freeing after.
    
    Fixes: 52dfae5c85a4 ("tipc: obtain node identity from interface by default")
    Reported-by: syzbot+a25307ad099309f1c2b9@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24d1a6259706f03aa2057359685ef8ea77f69e38
Author: Erik Hugne <erik.hugne@gmail.com>
Date:   Sun Mar 17 18:46:42 2019 +0100

    tipc: allow service ranges to be connect()'ed on RDM/DGRAM
    
    [ Upstream commit ea239314fe42ace880bdd834256834679346c80e ]
    
    We move the check that prevents connecting service ranges to after
    the RDM/DGRAM check, and move address sanity control to a separate
    function that also validates the service range.
    
    Fixes: 23998835be98 ("tipc: improve address sanity check in tipc_connect()")
    Signed-off-by: Erik Hugne <erik.hugne@gmail.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7ff0b608984b9589b5374aaa26ffd1621d8601f5
Merge: d3de85a51a4b 2ac695d1d602
Author: David S. Miller <davem@davemloft.net>
Date:   Sun Mar 31 16:45:57 2019 -0700

    Merge branch 'tipc-a-batch-of-uninit-value-fixes-for-netlink_compat'
    
    Xin Long says:
    
    ====================
    tipc: a batch of uninit-value fixes for netlink_compat
    
    These issues were all reported by syzbot, and exist since very beginning.
    See the details on each patch.
    ====================
    
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2ac695d1d602ce00b12170242f58c3d3a8e36d04
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Mar 31 22:50:10 2019 +0800

    tipc: handle the err returned from cmd header function
    
    Syzbot found a crash:
    
      BUG: KMSAN: uninit-value in tipc_nl_compat_name_table_dump+0x54f/0xcd0 net/tipc/netlink_compat.c:872
      Call Trace:
        tipc_nl_compat_name_table_dump+0x54f/0xcd0 net/tipc/netlink_compat.c:872
        __tipc_nl_compat_dumpit+0x59e/0xda0 net/tipc/netlink_compat.c:215
        tipc_nl_compat_dumpit+0x63a/0x820 net/tipc/netlink_compat.c:280
        tipc_nl_compat_handle net/tipc/netlink_compat.c:1226 [inline]
        tipc_nl_compat_recv+0x1b5f/0x2750 net/tipc/netlink_compat.c:1265
        genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
        genl_rcv_msg+0x185f/0x1a60 net/netlink/genetlink.c:626
        netlink_rcv_skb+0x431/0x620 net/netlink/af_netlink.c:2477
        genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
        netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]
        netlink_unicast+0xf3e/0x1020 net/netlink/af_netlink.c:1336
        netlink_sendmsg+0x127f/0x1300 net/netlink/af_netlink.c:1917
        sock_sendmsg_nosec net/socket.c:622 [inline]
        sock_sendmsg net/socket.c:632 [inline]
    
      Uninit was created at:
        __alloc_skb+0x309/0xa20 net/core/skbuff.c:208
        alloc_skb include/linux/skbuff.h:1012 [inline]
        netlink_alloc_large_skb net/netlink/af_netlink.c:1182 [inline]
        netlink_sendmsg+0xb82/0x1300 net/netlink/af_netlink.c:1892
        sock_sendmsg_nosec net/socket.c:622 [inline]
        sock_sendmsg net/socket.c:632 [inline]
    
    It was supposed to be fixed on commit 974cb0e3e7c9 ("tipc: fix uninit-value
    in tipc_nl_compat_name_table_dump") by checking TLV_GET_DATA_LEN(msg->req)
    in cmd->header()/tipc_nl_compat_name_table_dump_header(), which is called
    ahead of tipc_nl_compat_name_table_dump().
    
    However, tipc_nl_compat_dumpit() doesn't handle the error returned from cmd
    header function. It means even when the check added in that fix fails, it
    won't stop calling tipc_nl_compat_name_table_dump(), and the issue will be
    triggered again.
    
    So this patch is to add the process for the err returned from cmd header
    function in tipc_nl_compat_dumpit().
    
    Reported-by: syzbot+3ce8520484b0d4e260a5@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8c63bf9ab4be8b83bd8c34aacfd2f1d2c8901c8a
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Mar 31 22:50:09 2019 +0800

    tipc: check link name with right length in tipc_nl_compat_link_set
    
    A similar issue as fixed by Patch "tipc: check bearer name with right
    length in tipc_nl_compat_bearer_enable" was also found by syzbot in
    tipc_nl_compat_link_set().
    
    The length to check with should be 'TLV_GET_DATA_LEN(msg->req) -
    offsetof(struct tipc_link_config, name)'.
    
    Reported-by: syzbot+de00a87b8644a582ae79@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6f07e5f06c8712acc423485f657799fc8e11e56c
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Mar 31 22:50:08 2019 +0800

    tipc: check bearer name with right length in tipc_nl_compat_bearer_enable
    
    Syzbot reported the following crash:
    
    BUG: KMSAN: uninit-value in memchr+0xce/0x110 lib/string.c:961
      memchr+0xce/0x110 lib/string.c:961
      string_is_valid net/tipc/netlink_compat.c:176 [inline]
      tipc_nl_compat_bearer_enable+0x2c4/0x910 net/tipc/netlink_compat.c:401
      __tipc_nl_compat_doit net/tipc/netlink_compat.c:321 [inline]
      tipc_nl_compat_doit+0x3aa/0xaf0 net/tipc/netlink_compat.c:354
      tipc_nl_compat_handle net/tipc/netlink_compat.c:1162 [inline]
      tipc_nl_compat_recv+0x1ae7/0x2750 net/tipc/netlink_compat.c:1265
      genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
      genl_rcv_msg+0x185f/0x1a60 net/netlink/genetlink.c:626
      netlink_rcv_skb+0x431/0x620 net/netlink/af_netlink.c:2477
      genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
      netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]
      netlink_unicast+0xf3e/0x1020 net/netlink/af_netlink.c:1336
      netlink_sendmsg+0x127f/0x1300 net/netlink/af_netlink.c:1917
      sock_sendmsg_nosec net/socket.c:622 [inline]
      sock_sendmsg net/socket.c:632 [inline]
    
    Uninit was created at:
      __alloc_skb+0x309/0xa20 net/core/skbuff.c:208
      alloc_skb include/linux/skbuff.h:1012 [inline]
      netlink_alloc_large_skb net/netlink/af_netlink.c:1182 [inline]
      netlink_sendmsg+0xb82/0x1300 net/netlink/af_netlink.c:1892
      sock_sendmsg_nosec net/socket.c:622 [inline]
      sock_sendmsg net/socket.c:632 [inline]
    
    It was triggered when the bearer name size < TIPC_MAX_BEARER_NAME,
    it would check with a wrong len/TLV_GET_DATA_LEN(msg->req), which
    also includes priority and disc_domain length.
    
    This patch is to fix it by checking it with a right length:
    'TLV_GET_DATA_LEN(msg->req) - offsetof(struct tipc_bearer_config, name)'.
    
    Reported-by: syzbot+8b707430713eb46e1e45@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1a9df9e29c2afecf6e3089442d429b377279ca3c
Merge: 14c741de9386 8c838f53e149
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Mar 27 12:22:57 2019 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
     "Fixes here and there, a couple new device IDs, as usual:
    
       1) Fix BQL race in dpaa2-eth driver, from Ioana Ciornei.
    
       2) Fix 64-bit division in iwlwifi, from Arnd Bergmann.
    
       3) Fix documentation for some eBPF helpers, from Quentin Monnet.
    
       4) Some UAPI bpf header sync with tools, also from Quentin Monnet.
    
       5) Set descriptor ownership bit at the right time for jumbo frames in
          stmmac driver, from Aaro Koskinen.
    
       6) Set IFF_UP properly in tun driver, from Eric Dumazet.
    
       7) Fix load/store doubleword instruction generation in powerpc eBPF
          JIT, from Naveen N. Rao.
    
       8) nla_nest_start() return value checks all over, from Kangjie Lu.
    
       9) Fix asoc_id handling in SCTP after the SCTP_*_ASSOC changes this
          merge window. From Marcelo Ricardo Leitner and Xin Long.
    
      10) Fix memory corruption with large MTUs in stmmac, from Aaro
          Koskinen.
    
      11) Do not use ipv4 header for ipv6 flows in TCP and DCCP, from Eric
          Dumazet.
    
      12) Fix topology subscription cancellation in tipc, from Erik Hugne.
    
      13) Memory leak in genetlink error path, from Yue Haibing.
    
      14) Valid control actions properly in packet scheduler, from Davide
          Caratti.
    
      15) Even if we get EEXIST, we still need to rehash if a shrink was
          delayed. From Herbert Xu.
    
      16) Fix interrupt mask handling in interrupt handler of r8169, from
          Heiner Kallweit.
    
      17) Fix leak in ehea driver, from Wen Yang"
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (168 commits)
      dpaa2-eth: fix race condition with bql frame accounting
      chelsio: use BUG() instead of BUG_ON(1)
      net: devlink: skip info_get op call if it is not defined in dumpit
      net: phy: bcm54xx: Encode link speed and activity into LEDs
      tipc: change to check tipc_own_id to return in tipc_net_stop
      net: usb: aqc111: Extend HWID table by QNAP device
      net: sched: Kconfig: update reference link for PIE
      net: dsa: qca8k: extend slave-bus implementations
      net: dsa: qca8k: remove leftover phy accessors
      dt-bindings: net: dsa: qca8k: support internal mdio-bus
      dt-bindings: net: dsa: qca8k: fix example
      net: phy: don't clear BMCR in genphy_soft_reset
      bpf, libbpf: clarify bump in libbpf version info
      bpf, libbpf: fix version info and add it to shared object
      rxrpc: avoid clang -Wuninitialized warning
      tipc: tipc clang warning
      net: sched: fix cleanup NULL pointer exception in act_mirr
      r8169: fix cable re-plugging issue
      net: ethernet: ti: fix possible object reference leak
      net: ibm: fix possible object reference leak
      ...

commit 6da88a82df758de32c2346084b08c18b692481b0
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Mon Mar 25 06:31:09 2019 +0000

    tipc: fix return value check in tipc_mcast_send_sync()
    
    Fix the return value check which testing the wrong variable
    in tipc_mcast_send_sync().
    
    Fixes: c55c8edafa91 ("tipc: smooth change between replicast and broadcast")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9926cb5f8b0f0aea535735185600d74db7608550
Author: Xin Long <lucien.xin@gmail.com>
Date:   Sun Mar 24 00:48:22 2019 +0800

    tipc: change to check tipc_own_id to return in tipc_net_stop
    
    When running a syz script, a panic occurred:
    
    [  156.088228] BUG: KASAN: use-after-free in tipc_disc_timeout+0x9c9/0xb20 [tipc]
    [  156.094315] Call Trace:
    [  156.094844]  <IRQ>
    [  156.095306]  dump_stack+0x7c/0xc0
    [  156.097346]  print_address_description+0x65/0x22e
    [  156.100445]  kasan_report.cold.3+0x37/0x7a
    [  156.102402]  tipc_disc_timeout+0x9c9/0xb20 [tipc]
    [  156.106517]  call_timer_fn+0x19a/0x610
    [  156.112749]  run_timer_softirq+0xb51/0x1090
    
    It was caused by the netns freed without deleting the discoverer timer,
    while later on the netns would be accessed in the timer handler.
    
    The timer should have been deleted by tipc_net_stop() when cleaning up a
    netns. However, tipc has been able to enable a bearer and start d->timer
    without the local node_addr set since Commit 52dfae5c85a4 ("tipc: obtain
    node identity from interface by default"), which caused the timer not to
    be deleted in tipc_net_stop() then.
    
    So fix it in tipc_net_stop() by changing to check local node_id instead
    of local node_addr, as Jon suggested.
    
    While at it, remove the calling of tipc_nametbl_withdraw() there, since
    tipc_nametbl_stop() will take of the nametbl's freeing after.
    
    Fixes: 52dfae5c85a4 ("tipc: obtain node identity from interface by default")
    Reported-by: syzbot+a25307ad099309f1c2b9@syzkaller.appspotmail.com
    Signed-off-by: Xin Long <lucien.xin@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 737889efe9713a0f20a75fd0de952841d9275e6b
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Mar 22 15:03:51 2019 +0100

    tipc: tipc clang warning
    
    When checking the code with clang -Wsometimes-uninitialized we get the
    following warning:
    
    if (!tipc_link_is_establishing(l)) {
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    net/tipc/node.c:847:46: note: uninitialized use occurs here
          tipc_bearer_xmit(n->net, bearer_id, &xmitq, maddr);
    
    net/tipc/node.c:831:2: note: remove the 'if' if its condition is always
    true
    if (!tipc_link_is_establishing(l)) {
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    net/tipc/node.c:821:31: note: initialize the variable 'maddr' to silence
    this warning
    struct tipc_media_addr *maddr;
    
    We fix this by initializing 'maddr' to NULL. For the matter of clarity,
    we also test if 'xmitq' is non-empty before we use it and 'maddr'
    further down in the  function. It will never happen that 'xmitq' is non-
    empty at the same time as 'maddr' is NULL, so this is a sufficient test.
    
    Fixes: 598411d70f85 ("tipc: make resetting of links non-atomic")
    Reported-by: Nathan Chancellor <natechancellor@gmail.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 08e046c8966a872a4fb047aa940b5c991ee5635d
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Mar 21 17:25:18 2019 +0700

    tipc: fix a null pointer deref
    
    In commit c55c8edafa91 ("tipc: smooth change between replicast and
    broadcast") we introduced new method to eliminate the risk of message
    reordering that happen in between different nodes.
    Unfortunately, we forgot checking at receiving side to ignore intra node.
    
    We fix this by checking and returning if arrived message from intra node.
    
    syzbot report:
    
    ==================================================================
    kasan: CONFIG_KASAN_INLINE enabled
    kasan: GPF could be caused by NULL-ptr deref or user memory access
    general protection fault: 0000 [#1] PREEMPT SMP KASAN
    CPU: 0 PID: 7820 Comm: syz-executor418 Not tainted 5.0.0+ #61
    Hardware name: Google Google Compute Engine/Google Compute Engine,
    BIOS Google 01/01/2011
    RIP: 0010:tipc_mcast_filter_msg+0x21b/0x13d0 net/tipc/bcast.c:782
    Code: 45 c0 0f 84 39 06 00 00 48 89 5d 98 e8 ce ab a5 fa 49 8d bc
     24 c8 00 00 00 48 b9 00 00 00 00 00 fc ff df 48 89 f8 48 c1 e8 03
     <80> 3c 08 00 0f 85 9a 0e 00 00 49 8b 9c 24 c8 00 00 00 48 be 00 00
    RSP: 0018:ffff8880959defc8 EFLAGS: 00010202
    RAX: 0000000000000019 RBX: ffff888081258a48 RCX: dffffc0000000000
    RDX: 0000000000000000 RSI: ffffffff86cab862 RDI: 00000000000000c8
    RBP: ffff8880959df030 R08: ffff8880813d0200 R09: ffffed1015d05bc8
    R10: ffffed1015d05bc7 R11: ffff8880ae82de3b R12: 0000000000000000
    R13: 000000000000002c R14: 0000000000000000 R15: ffff888081258a48
    FS:  000000000106a880(0000) GS:ffff8880ae800000(0000)
     knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000000020001cc0 CR3: 0000000094a20000 CR4: 00000000001406f0
    DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    Call Trace:
     tipc_sk_filter_rcv+0x182d/0x34f0 net/tipc/socket.c:2168
     tipc_sk_enqueue net/tipc/socket.c:2254 [inline]
     tipc_sk_rcv+0xc45/0x25a0 net/tipc/socket.c:2305
     tipc_sk_mcast_rcv+0x724/0x1020 net/tipc/socket.c:1209
     tipc_mcast_xmit+0x7fe/0x1200 net/tipc/bcast.c:410
     tipc_sendmcast+0xb36/0xfc0 net/tipc/socket.c:820
     __tipc_sendmsg+0x10df/0x18d0 net/tipc/socket.c:1358
     tipc_sendmsg+0x53/0x80 net/tipc/socket.c:1291
     sock_sendmsg_nosec net/socket.c:651 [inline]
     sock_sendmsg+0xdd/0x130 net/socket.c:661
     ___sys_sendmsg+0x806/0x930 net/socket.c:2260
     __sys_sendmsg+0x105/0x1d0 net/socket.c:2298
     __do_sys_sendmsg net/socket.c:2307 [inline]
     __se_sys_sendmsg net/socket.c:2305 [inline]
     __x64_sys_sendmsg+0x78/0xb0 net/socket.c:2305
     do_syscall_64+0x103/0x610 arch/x86/entry/common.c:290
     entry_SYSCALL_64_after_hwframe+0x49/0xbe
    RIP: 0033:0x4401c9
    Code: 18 89 d0 c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 00 48 89 f8
     48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05
     <48> 3d 01 f0 ff ff 0f 83 fb 13 fc ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007ffd887fa9d8 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00000000004002c8 RCX: 00000000004401c9
    RDX: 0000000000000000 RSI: 0000000020002140 RDI: 0000000000000003
    RBP: 00000000006ca018 R08: 0000000000000000 R09: 00000000004002c8
    R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000401a50
    R13: 0000000000401ae0 R14: 0000000000000000 R15: 0000000000000000
    Modules linked in:
    ---[ end trace ba79875754e1708f ]---
    
    Reported-by: syzbot+be4bdf2cc3e85e952c50@syzkaller.appspotmail.com
    Fixes: c55c8eda ("tipc: smooth change between replicast and broadcast")
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 77d5ad4048fba5bd6e16f78498d4b41e5534b8f5
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Mar 21 17:25:17 2019 +0700

    tipc: fix use-after-free in tipc_sk_filter_rcv
    
    skb free-ed in:
      1/ condition 1: tipc_sk_filter_rcv -> tipc_sk_proto_rcv
      2/ condition 2: tipc_sk_filter_rcv -> tipc_group_filter_msg
    This leads to a "use-after-free" access in the next condition.
    
    We fix this by intializing the variable at declaration, then it is safe
    to check this variable to continue processing if condition matches.
    
    syzbot report:
    
    ==================================================================
    BUG: KASAN: use-after-free in tipc_sk_filter_rcv+0x2166/0x34f0
     net/tipc/socket.c:2167
    Read of size 4 at addr ffff88808ea58534 by task kworker/u4:0/7
    
    CPU: 0 PID: 7 Comm: kworker/u4:0 Not tainted 5.0.0+ #61
    Hardware name: Google Google Compute Engine/Google Compute Engine,
     BIOS Google 01/01/2011
    Workqueue: tipc_send tipc_conn_send_work
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x172/0x1f0 lib/dump_stack.c:113
     print_address_description.cold+0x7c/0x20d mm/kasan/report.c:187
     kasan_report.cold+0x1b/0x40 mm/kasan/report.c:317
     __asan_report_load4_noabort+0x14/0x20 mm/kasan/generic_report.c:131
     tipc_sk_filter_rcv+0x2166/0x34f0 net/tipc/socket.c:2167
     tipc_sk_enqueue net/tipc/socket.c:2254 [inline]
     tipc_sk_rcv+0xc45/0x25a0 net/tipc/socket.c:2305
     tipc_topsrv_kern_evt+0x3b7/0x580 net/tipc/topsrv.c:610
     tipc_conn_send_to_sock+0x43e/0x5f0 net/tipc/topsrv.c:283
     tipc_conn_send_work+0x65/0x80 net/tipc/topsrv.c:303
     process_one_work+0x98e/0x1790 kernel/workqueue.c:2269
     worker_thread+0x98/0xe40 kernel/workqueue.c:2415
     kthread+0x357/0x430 kernel/kthread.c:253
     ret_from_fork+0x3a/0x50 arch/x86/entry/entry_64.S:352
    
    Reported-by: syzbot+e863893591cc7a622e40@syzkaller.appspotmail.com
    Fixes: c55c8eda ("tipc: smooth change between replicast and broadcast")
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 33872d79f5d1cbedaaab79669cc38f16097a9450
Author: Erik Hugne <erik.hugne@gmail.com>
Date:   Thu Mar 21 09:11:59 2019 +0100

    tipc: fix cancellation of topology subscriptions
    
    When cancelling a subscription, we have to clear the cancel bit in the
    request before iterating over any established subscriptions with memcmp.
    Otherwise no subscription will ever be found, and it will not be
    possible to explicitly unsubscribe individual subscriptions.
    
    Fixes: 8985ecc7c1e0 ("tipc: simplify endianness handling in topology subscriber")
    Signed-off-by: Erik Hugne <erik.hugne@gmail.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c55c8edafa91139419ed011f7d036274ce96be0b
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Tue Mar 19 18:49:50 2019 +0700

    tipc: smooth change between replicast and broadcast
    
    Currently, a multicast stream may start out using replicast, because
    there are few destinations, and then it should ideally switch to
    L2/broadcast IGMP/multicast when the number of destinations grows beyond
    a certain limit. The opposite should happen when the number decreases
    below the limit.
    
    To eliminate the risk of message reordering caused by method change,
    a sending socket must stick to a previously selected method until it
    enters an idle period of 5 seconds. Means there is a 5 seconds pause
    in the traffic from the sender socket.
    
    If the sender never makes such a pause, the method will never change,
    and transmission may become very inefficient as the cluster grows.
    
    With this commit, we allow such a switch between replicast and
    broadcast without any need for a traffic pause.
    
    Solution is to send a dummy message with only the header, also with
    the SYN bit set, via broadcast or replicast. For the data message,
    the SYN bit is set and sending via replicast or broadcast (inverse
    method with dummy).
    
    Then, at receiving side any messages follow first SYN bit message
    (data or dummy message), they will be held in deferred queue until
    another pair (dummy or data message) arrived in other link.
    
    v2: reverse christmas tree declaration
    
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ff2ebbfba6186adf3964eb816f8f255c6e664dc4
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Tue Mar 19 18:49:49 2019 +0700

    tipc: introduce new capability flag for cluster
    
    As a preparation for introducing a smooth switching between replicast
    and broadcast method for multicast message, We have to introduce a new
    capability flag TIPC_MCAST_RBCTL to handle this new feature.
    
    During a cluster upgrade a node can come back with this new capabilities
    which also must be reflected in the cluster capabilities field.
    The new feature is only applicable if all node in the cluster supports
    this new capability.
    
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 02ec6cafd78c2052283516afc74c309745d20271
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Tue Mar 19 18:49:48 2019 +0700

    tipc: support broadcast/replicast configurable for bc-link
    
    Currently, a multicast stream uses either broadcast or replicast as
    transmission method, based on the ratio between number of actual
    destinations nodes and cluster size.
    
    However, when an L2 interface (e.g., VXLAN) provides pseudo
    broadcast support, this becomes very inefficient, as it blindly
    replicates multicast packets to all cluster/subnet nodes,
    irrespective of whether they host actual target sockets or not.
    
    The TIPC multicast algorithm is able to distinguish real destination
    nodes from other nodes, and hence provides a smarter and more
    efficient method for transferring multicast messages than
    pseudo broadcast can do.
    
    Because of this, we now make it possible for users to force
    the broadcast link to permanently switch to using replicast,
    irrespective of which capabilities the bearer provides,
    or pretend to provide.
    Conversely, we also make it possible to force the broadcast link
    to always use true broadcast. While maybe less useful in
    deployed systems, this may at least be useful for testing the
    broadcast algorithm in small clusters.
    
    We retain the current AUTOSELECT ability, i.e., to let the broadcast link
    automatically select which algorithm to use, and to switch back and forth
    between broadcast and replicast as the ratio between destination
    node number and cluster size changes. This remains the default method.
    
    Furthermore, we make it possible to configure the threshold ratio for
    such switches. The default ratio is now set to 10%, down from 25% in the
    earlier implementation.
    
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ea239314fe42ace880bdd834256834679346c80e
Author: Erik Hugne <erik.hugne@gmail.com>
Date:   Sun Mar 17 18:46:42 2019 +0100

    tipc: allow service ranges to be connect()'ed on RDM/DGRAM
    
    We move the check that prevents connecting service ranges to after
    the RDM/DGRAM check, and move address sanity control to a separate
    function that also validates the service range.
    
    Fixes: 23998835be98 ("tipc: improve address sanity check in tipc_connect()")
    Signed-off-by: Erik Hugne <erik.hugne@gmail.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 517ccc2aa50dbd7767a9eb8e1d9987a3ed7ced3e
Author: Kangjie Lu <kjlu@umn.edu>
Date:   Sat Mar 16 16:46:05 2019 -0500

    net: tipc: fix a missing check for nla_nest_start
    
    nla_nest_start may fail. The fix check its status and returns
    -EMSGSIZE in case it fails.
    
    Signed-off-by: Kangjie Lu <kjlu@umn.edu>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4589e28db46ee4961edfd794c5bb43887d38c8e5
Author: Kangjie Lu <kjlu@umn.edu>
Date:   Fri Mar 15 12:11:59 2019 -0500

    net: tipc: fix a missing check of nla_nest_start
    
    nla_nest_start could fail and requires a check. The fix returns
    -EMSGSIZE if it fails.
    
    Signed-off-by: Kangjie Lu <kjlu@umn.edu>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 71d1e057fe117c23688a8b08bec410265954008a
Author: Erik Hugne <erik.hugne@gmail.com>
Date:   Mon Mar 4 23:26:10 2019 +0100

    tipc: fix RDM/DGRAM connect() regression
    
    [ Upstream commit 0e63208915a8d7590d0a6218dadb2a6a00ac705a ]
    
    Fix regression bug introduced in
    commit 365ad353c256 ("tipc: reduce risk of user starvation during link
    congestion")
    
    Only signal -EDESTADDRREQ for RDM/DGRAM if we don't have a cached
    sockaddr.
    
    Fixes: 365ad353c256 ("tipc: reduce risk of user starvation during link congestion")
    Signed-off-by: Erik Hugne <erik.hugne@gmail.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ab04570d82b164daca4917c459c152dfb3839448
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Mon Feb 25 10:57:20 2019 +0700

    tipc: fix race condition causing hung sendto
    
    [ Upstream commit bfd07f3dd4f111b884d7922b37eb239280f83d8c ]
    
    When sending multicast messages via blocking socket,
    if sending link is congested (tsk->cong_link_cnt is set to 1),
    the sending thread will be put into sleeping state. However,
    tipc_sk_filter_rcv() is called under socket spin lock but
    tipc_wait_for_cond() is not. So, there is no guarantee that
    the setting of tsk->cong_link_cnt to 0 in tipc_sk_proto_rcv() in
    CPU-1 will be perceived by CPU-0. If that is the case, the sending
    thread in CPU-0 after being waken up, will continue to see
    tsk->cong_link_cnt as 1 and put the sending thread into sleeping
    state again. The sending thread will sleep forever.
    
    CPU-0                                | CPU-1
    tipc_wait_for_cond()                 |
    {                                    |
     // condition_ = !tsk->cong_link_cnt |
     while ((rc_ = !(condition_))) {     |
      ...                                |
      release_sock(sk_);                 |
      wait_woken();                      |
                                         | if (!sock_owned_by_user(sk))
                                         |  tipc_sk_filter_rcv()
                                         |  {
                                         |   ...
                                         |   tipc_sk_proto_rcv()
                                         |   {
                                         |    ...
                                         |    tsk->cong_link_cnt--;
                                         |    ...
                                         |    sk->sk_write_space(sk);
                                         |    ...
                                         |   }
                                         |   ...
                                         |  }
      sched_annotate_sleep();            |
      lock_sock(sk_);                    |
      remove_wait_queue();               |
     }                                   |
    }                                    |
    
    This commit fixes it by adding memory barrier to tipc_sk_proto_rcv()
    and tipc_wait_for_cond().
    
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8d1b9800c1ea9f3c27a2a724e0024a30784b39a9
Author: Erik Hugne <erik.hugne@gmail.com>
Date:   Mon Mar 4 23:26:10 2019 +0100

    tipc: fix RDM/DGRAM connect() regression
    
    [ Upstream commit 0e63208915a8d7590d0a6218dadb2a6a00ac705a ]
    
    Fix regression bug introduced in
    commit 365ad353c256 ("tipc: reduce risk of user starvation during link
    congestion")
    
    Only signal -EDESTADDRREQ for RDM/DGRAM if we don't have a cached
    sockaddr.
    
    Fixes: 365ad353c256 ("tipc: reduce risk of user starvation during link congestion")
    Signed-off-by: Erik Hugne <erik.hugne@gmail.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 72628839600e835e3d8fe920009cbeb4d486d297
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Mon Feb 25 10:57:20 2019 +0700

    tipc: fix race condition causing hung sendto
    
    [ Upstream commit bfd07f3dd4f111b884d7922b37eb239280f83d8c ]
    
    When sending multicast messages via blocking socket,
    if sending link is congested (tsk->cong_link_cnt is set to 1),
    the sending thread will be put into sleeping state. However,
    tipc_sk_filter_rcv() is called under socket spin lock but
    tipc_wait_for_cond() is not. So, there is no guarantee that
    the setting of tsk->cong_link_cnt to 0 in tipc_sk_proto_rcv() in
    CPU-1 will be perceived by CPU-0. If that is the case, the sending
    thread in CPU-0 after being waken up, will continue to see
    tsk->cong_link_cnt as 1 and put the sending thread into sleeping
    state again. The sending thread will sleep forever.
    
    CPU-0                                | CPU-1
    tipc_wait_for_cond()                 |
    {                                    |
     // condition_ = !tsk->cong_link_cnt |
     while ((rc_ = !(condition_))) {     |
      ...                                |
      release_sock(sk_);                 |
      wait_woken();                      |
                                         | if (!sock_owned_by_user(sk))
                                         |  tipc_sk_filter_rcv()
                                         |  {
                                         |   ...
                                         |   tipc_sk_proto_rcv()
                                         |   {
                                         |    ...
                                         |    tsk->cong_link_cnt--;
                                         |    ...
                                         |    sk->sk_write_space(sk);
                                         |    ...
                                         |   }
                                         |   ...
                                         |  }
      sched_annotate_sleep();            |
      lock_sock(sk_);                    |
      remove_wait_queue();               |
     }                                   |
    }                                    |
    
    This commit fixes it by adding memory barrier to tipc_sk_proto_rcv()
    and tipc_wait_for_cond().
    
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ad80dc7748e78abd218ae342d38ade2fc9c9525c
Author: Erik Hugne <erik.hugne@gmail.com>
Date:   Mon Mar 4 23:26:10 2019 +0100

    tipc: fix RDM/DGRAM connect() regression
    
    [ Upstream commit 0e63208915a8d7590d0a6218dadb2a6a00ac705a ]
    
    Fix regression bug introduced in
    commit 365ad353c256 ("tipc: reduce risk of user starvation during link
    congestion")
    
    Only signal -EDESTADDRREQ for RDM/DGRAM if we don't have a cached
    sockaddr.
    
    Fixes: 365ad353c256 ("tipc: reduce risk of user starvation during link congestion")
    Signed-off-by: Erik Hugne <erik.hugne@gmail.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 258c4bfcea44f0729187c05185a99bfc3ccc77e1
Author: Erik Hugne <erik.hugne@gmail.com>
Date:   Mon Mar 4 23:26:10 2019 +0100

    tipc: fix RDM/DGRAM connect() regression
    
    [ Upstream commit 0e63208915a8d7590d0a6218dadb2a6a00ac705a ]
    
    Fix regression bug introduced in
    commit 365ad353c256 ("tipc: reduce risk of user starvation during link
    congestion")
    
    Only signal -EDESTADDRREQ for RDM/DGRAM if we don't have a cached
    sockaddr.
    
    Fixes: 365ad353c256 ("tipc: reduce risk of user starvation during link congestion")
    Signed-off-by: Erik Hugne <erik.hugne@gmail.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e63208915a8d7590d0a6218dadb2a6a00ac705a
Author: Erik Hugne <erik.hugne@gmail.com>
Date:   Mon Mar 4 23:26:10 2019 +0100

    tipc: fix RDM/DGRAM connect() regression
    
    Fix regression bug introduced in
    commit 365ad353c256 ("tipc: reduce risk of user starvation during link
    congestion")
    
    Only signal -EDESTADDRREQ for RDM/DGRAM if we don't have a cached
    sockaddr.
    
    Fixes: 365ad353c256 ("tipc: reduce risk of user starvation during link congestion")
    Signed-off-by: Erik Hugne <erik.hugne@gmail.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c93d9218ea561d6a91b23449cfd637ddec91dc23
Merge: fa3294c58c58 07f12b26e21a
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Mar 2 08:46:34 2019 -0800

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Fix refcount leak in act_ipt during replace, from Davide Caratti.
    
     2) Set task state properly in tun during blocking reads, from Timur
        Celik.
    
     3) Leaked reference in DSA, from Wen Yang.
    
     4) NULL deref in act_tunnel_key, from Vlad Buslov.
    
     5) cipso_v4_erro can reference the skb IPCB in inappropriate contexts
        thus referencing garbage, from Nazarov Sergey.
    
     6) Don't accept RTA_VIA and RTA_GATEWAY in contexts where those
        attributes make no sense.
    
     7) Fix hung sendto in tipc, from Tung Nguyen.
    
     8) Out-of-bounds access in netlabel, from Paul Moore.
    
     9) Grant reference leak in xen-netback, from Igor Druzhinin.
    
    10) Fix tx stalls with lan743x, from Bryan Whitehead.
    
    11) Fix interrupt storm with mv88e6xxx, from Hein Kallweit.
    
    12) Memory leak in sit on device registry failure, from Mao Wenan.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (44 commits)
      net: sit: fix memory leak in sit_init_net()
      net: dsa: mv88e6xxx: Fix statistics on mv88e6161
      geneve: correctly handle ipv6.disable module parameter
      net: dsa: mv88e6xxx: prevent interrupt storm caused by mv88e6390x_port_set_cmode
      bpf: fix sanitation rewrite in case of non-pointers
      ipv4: Add ICMPv6 support when parse route ipproto
      MIPS: eBPF: Fix icache flush end address
      lan743x: Fix TX Stall Issue
      net: phy: phylink: fix uninitialized variable in phylink_get_mac_state
      net: aquantia: regression on cpus with high cores: set mode with 8 queues
      selftests: fixes for UDP GRO
      bpf: drop refcount if bpf_map_new_fd() fails in map_create()
      net: dsa: mv88e6xxx: power serdes on/off for 10G interfaces on 6390X
      net: dsa: mv88e6xxx: Fix u64 statistics
      xen-netback: don't populate the hash cache on XenBus disconnect
      xen-netback: fix occasional leak of grant ref mappings under memory pressure
      sctp: chunk.c: correct format string for size_t in printk
      net: netem: fix skb length BUG_ON in __skb_to_sgvec
      netlabel: fix out-of-bounds memory accesses
      ipv4: Pass original device to ip_rcv_finish_core
      ...

commit bfd07f3dd4f111b884d7922b37eb239280f83d8c
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Mon Feb 25 10:57:20 2019 +0700

    tipc: fix race condition causing hung sendto
    
    When sending multicast messages via blocking socket,
    if sending link is congested (tsk->cong_link_cnt is set to 1),
    the sending thread will be put into sleeping state. However,
    tipc_sk_filter_rcv() is called under socket spin lock but
    tipc_wait_for_cond() is not. So, there is no guarantee that
    the setting of tsk->cong_link_cnt to 0 in tipc_sk_proto_rcv() in
    CPU-1 will be perceived by CPU-0. If that is the case, the sending
    thread in CPU-0 after being waken up, will continue to see
    tsk->cong_link_cnt as 1 and put the sending thread into sleeping
    state again. The sending thread will sleep forever.
    
    CPU-0                                | CPU-1
    tipc_wait_for_cond()                 |
    {                                    |
     // condition_ = !tsk->cong_link_cnt |
     while ((rc_ = !(condition_))) {     |
      ...                                |
      release_sock(sk_);                 |
      wait_woken();                      |
                                         | if (!sock_owned_by_user(sk))
                                         |  tipc_sk_filter_rcv()
                                         |  {
                                         |   ...
                                         |   tipc_sk_proto_rcv()
                                         |   {
                                         |    ...
                                         |    tsk->cong_link_cnt--;
                                         |    ...
                                         |    sk->sk_write_space(sk);
                                         |    ...
                                         |   }
                                         |   ...
                                         |  }
      sched_annotate_sleep();            |
      lock_sock(sk_);                    |
      remove_wait_queue();               |
     }                                   |
    }                                    |
    
    This commit fixes it by adding memory barrier to tipc_sk_proto_rcv()
    and tipc_wait_for_cond().
    
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 06cd1702eeb0a79de03f3088ccf4c65f6dfeeaf5
Merge: 3c963a3306ea 48766a583c79
Author: David S. Miller <davem@davemloft.net>
Date:   Thu Feb 21 13:58:05 2019 -0800

    Merge branch 'tipc-improvement-for-wait-and-wakeup'
    
    Tung Nguyen says:
    
    ====================
    tipc: improvement for wait and wakeup
    
    Some improvements for tipc_wait_for_xzy().
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 48766a583c7961af080de2df692f476624a9a21a
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Tue Feb 19 11:20:48 2019 +0700

    tipc: improve function tipc_wait_for_rcvmsg()
    
    This commit replaces schedule_timeout() with wait_woken()
    in function tipc_wait_for_rcvmsg(). wait_woken() uses
    memory barriers in its implementation to avoid potential
    race condition when putting a process into sleeping state
    and then waking it up.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 223b7329ec6a0dae1b7f7db7b770e93f4a069ef9
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Tue Feb 19 11:20:47 2019 +0700

    tipc: improve function tipc_wait_for_cond()
    
    Commit 844cf763fba6 ("tipc: make macro tipc_wait_for_cond() smp safe")
    replaced finish_wait() with remove_wait_queue() but still used
    prepare_to_wait(). This causes unnecessary conditional
    checking  before adding to wait queue in prepare_to_wait().
    
    This commit replaces prepare_to_wait() with add_wait_queue()
    as the pair function with remove_wait_queue().
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ae46de2430b7bfd5971de37589d565fdfc6463b3
Author: Guoqing Jiang <gqjiang@suse.com>
Date:   Fri Oct 19 12:08:22 2018 +0800

    tipc: use destination length for copy string
    
    commit 29e270fc32192e7729057963ae7120663856c93e upstream.
    
    Got below warning with gcc 8.2 compiler.
    
    net/tipc/topsrv.c: In function ‘tipc_topsrv_start’:
    net/tipc/topsrv.c:660:2: warning: ‘strncpy’ specified bound depends on the length of the source argument [-Wstringop-overflow=]
      strncpy(srv->name, name, strlen(name) + 1);
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    net/tipc/topsrv.c:660:27: note: length computed here
      strncpy(srv->name, name, strlen(name) + 1);
                               ^~~~~~~~~~~~
    So change it to correct length and use strscpy.
    
    Signed-off-by: Guoqing Jiang <gqjiang@suse.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6e7bd3b5494620265d39463b9289b7ba872f6df1
Merge: 02d75040897f f9bcc9f3ee4f
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Feb 15 08:00:11 2019 -0800

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Fix MAC address setting in mac80211 pmsr code, from Johannes Berg.
    
     2) Probe SFP modules after being attached, from Russell King.
    
     3) Byte ordering bug in SMC rx_curs_confirmed code, from Ursula Braun.
    
     4) Revert some r8169 changes that are causing regressions, from Heiner
        Kallweit.
    
     5) Fix spurious connection timeouts in netfilter nat code, from Florian
        Westphal.
    
     6) SKB leak in tipc, from Hoang Le.
    
     7) Short packet checkum issue in mlx4, similar to a previous mlx5
        change, from Saeed Mahameed. The issue is that whilst padding bytes
        are usually zero, it is not guarateed and the hardware doesn't take
        the padding bytes into consideration when generating the checksum.
    
     8) Fix various races in cls_tcindex, from Cong Wang.
    
     9) Need to set stream ext to NULL before freeing in SCTP code, from Xin
        Long.
    
    10) Fix locking in phy_is_started, from Heiner Kallweit.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (54 commits)
      net: ethernet: freescale: set FEC ethtool regs version
      net: hns: Fix object reference leaks in hns_dsaf_roce_reset()
      mm: page_alloc: fix ref bias in page_frag_alloc() for 1-byte allocs
      net: phy: fix potential race in the phylib state machine
      net: phy: don't use locking in phy_is_started
      selftests: fix timestamping Makefile
      net: dsa: bcm_sf2: potential array overflow in bcm_sf2_sw_suspend()
      net: fix possible overflow in __sk_mem_raise_allocated()
      dsa: mv88e6xxx: Ensure all pending interrupts are handled prior to exit
      net: phy: fix interrupt handling in non-started states
      sctp: set stream ext to NULL after freeing it in sctp_stream_outq_migrate
      sctp: call gso_reset_checksum when computing checksum in sctp_gso_segment
      net/mlx5e: XDP, fix redirect resources availability check
      net/mlx5: Fix a compilation warning in events.c
      net/mlx5: No command allowed when command interface is not ready
      net/mlx5e: Fix NULL pointer derefernce in set channels error flow
      netfilter: nft_compat: use-after-free when deleting targets
      team: avoid complex list operations in team_nl_cmd_options_set()
      net_sched: fix two more memory leaks in cls_tcindex
      net_sched: fix a memory leak in cls_tcindex
      ...

commit afe10edd0a962200ef095fcc20ba02090249b931
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Dec 6 09:00:09 2018 +0700

    tipc: fix node keep alive interval calculation
    
    [ Upstream commit f5d6c3e5a359c0507800e7ac68d565c21de9b5a1 ]
    
    When setting LINK tolerance, node timer interval will be calculated
    base on the LINK with lowest tolerance.
    
    But when calculated, the old node timer interval only updated if current
    setting value (tolerance/4) less than old ones regardless of number of
    links as well as links' lowest tolerance value.
    
    This caused to two cases missing if tolerance changed as following:
    Case 1:
    1.1/ There is one link (L1) available in the system
    1.2/ Set L1's tolerance from 1500ms => lower (i.e 500ms)
    1.3/ Then, fallback to default (1500ms) or higher (i.e 2000ms)
    
    Expected:
        node timer interval is 1500/4=375ms after 1.3
    
    Result:
    node timer interval will not being updated after changing tolerance at 1.3
    since its value 1500/4=375ms is not less than 500/4=125ms at 1.2.
    
    Case 2:
    2.1/ There are two links (L1, L2) available in the system
    2.2/ L1 and L2 tolerance value are 2000ms as initial
    2.3/ Set L2's tolerance from 2000ms => lower 1500ms
    2.4/ Disable link L2 (bring down its bearer)
    
    Expected:
        node timer interval is 2000ms/4=500ms after 2.4
    
    Result:
    node timer interval will not being updated after disabling L2 since
    its value 2000ms/4=500ms is still not less than 1500/4=375ms at 2.3
    although L2 is already not available in the system.
    
    To fix this, we start the node interval calculation by initializing it to
    a value larger than any conceivable calculated value. This way, the link
    with the lowest tolerance will always determine the calculated value.
    
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1de47c06b3a3bf48d9b55199bda5c5112829db9f
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Dec 6 09:00:09 2018 +0700

    tipc: fix node keep alive interval calculation
    
    [ Upstream commit f5d6c3e5a359c0507800e7ac68d565c21de9b5a1 ]
    
    When setting LINK tolerance, node timer interval will be calculated
    base on the LINK with lowest tolerance.
    
    But when calculated, the old node timer interval only updated if current
    setting value (tolerance/4) less than old ones regardless of number of
    links as well as links' lowest tolerance value.
    
    This caused to two cases missing if tolerance changed as following:
    Case 1:
    1.1/ There is one link (L1) available in the system
    1.2/ Set L1's tolerance from 1500ms => lower (i.e 500ms)
    1.3/ Then, fallback to default (1500ms) or higher (i.e 2000ms)
    
    Expected:
        node timer interval is 1500/4=375ms after 1.3
    
    Result:
    node timer interval will not being updated after changing tolerance at 1.3
    since its value 1500/4=375ms is not less than 500/4=125ms at 1.2.
    
    Case 2:
    2.1/ There are two links (L1, L2) available in the system
    2.2/ L1 and L2 tolerance value are 2000ms as initial
    2.3/ Set L2's tolerance from 2000ms => lower 1500ms
    2.4/ Disable link L2 (bring down its bearer)
    
    Expected:
        node timer interval is 2000ms/4=500ms after 2.4
    
    Result:
    node timer interval will not being updated after disabling L2 since
    its value 2000ms/4=500ms is still not less than 1500/4=375ms at 2.3
    although L2 is already not available in the system.
    
    To fix this, we start the node interval calculation by initializing it to
    a value larger than any conceivable calculated value. This way, the link
    with the lowest tolerance will always determine the calculated value.
    
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 91986ee166cf0816ae92668476ea7872d51b0c6e
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Mon Feb 11 13:29:43 2019 +0700

    tipc: fix link session and re-establish issues
    
    When a link endpoint is re-created (e.g. after a node reboot or
    interface reset), the link session number is varied by random, the peer
    endpoint will be synced with this new session number before the link is
    re-established.
    
    However, there is a shortcoming in this mechanism that can lead to the
    link never re-established or faced with a failure then. It happens when
    the peer endpoint is ready in ESTABLISHING state, the 'peer_session' as
    well as the 'in_session' flag have been set, but suddenly this link
    endpoint leaves. When it comes back with a random session number, there
    are two situations possible:
    
    1/ If the random session number is larger than (or equal to) the
    previous one, the peer endpoint will be updated with this new session
    upon receipt of a RESET_MSG from this endpoint, and the link can be re-
    established as normal. Otherwise, all the RESET_MSGs from this endpoint
    will be rejected by the peer. In turn, when this link endpoint receives
    one ACTIVATE_MSG from the peer, it will move to ESTABLISHED and start
    to send STATE_MSGs, but again these messages will be dropped by the
    peer due to wrong session.
    The peer link endpoint can still become ESTABLISHED after receiving a
    traffic message from this endpoint (e.g. a BCAST_PROTOCOL or
    NAME_DISTRIBUTOR), but since all the STATE_MSGs are invalid, the link
    will be forced down sooner or later!
    
    Even in case the random session number is larger than the previous one,
    it can be that the ACTIVATE_MSG from the peer arrives first, and this
    link endpoint moves quickly to ESTABLISHED without sending out any
    RESET_MSG yet. Consequently, the peer link will not be updated with the
    new session number, and the same link failure scenario as above will
    happen.
    
    2/ Another situation can be that, the peer link endpoint was reset due
    to any reasons in the meantime, its link state was set to RESET from
    ESTABLISHING but still in session, i.e. the 'in_session' flag is not
    reset...
    Now, if the random session number from this endpoint is less than the
    previous one, all the RESET_MSGs from this endpoint will be rejected by
    the peer. In the other direction, when this link endpoint receives a
    RESET_MSG from the peer, it moves to ESTABLISHING and starts to send
    ACTIVATE_MSGs, but all these messages will be rejected by the peer too.
    As a result, the link cannot be re-established but gets stuck with this
    link endpoint in state ESTABLISHING and the peer in RESET!
    
    Solution:
    
    ===========
    
    This link endpoint should not go directly to ESTABLISHED when getting
    ACTIVATE_MSG from the peer which may belong to the old session if the
    link was re-created. To ensure the session to be correct before the
    link is re-established, the peer endpoint in ESTABLISHING state will
    send back the last session number in ACTIVATE_MSG for a verification at
    this endpoint. Then, if needed, a new and more appropriate session
    number will be regenerated to force a re-synch first.
    
    In addition, when a link in ESTABLISHING state is reset, its state will
    move to RESET according to the link FSM, along with resetting the
    'in_session' flag (and the other data) as a normal link reset, it will
    also be deleted if requested.
    
    The solution is backward compatible.
    
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7384b538d3aed2ed49d3575483d17aeee790fb06
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Mon Feb 11 09:18:28 2019 +0700

    tipc: fix skb may be leaky in tipc_link_input
    
    When we free skb at tipc_data_input, we return a 'false' boolean.
    Then, skb passed to subcalling tipc_link_input in tipc_link_rcv,
    
    <snip>
    1303 int tipc_link_rcv:
    ...
    1354    if (!tipc_data_input(l, skb, l->inputq))
    1355        rc |= tipc_link_input(l, skb, l->inputq);
    </snip>
    
    Fix it by simple changing to a 'true' boolean when skb is being free-ed.
    Then, tipc_link_rcv will bypassed to subcalling tipc_link_input as above
    condition.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <maloy@donjonn.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 02035bea64b7e4f74937e0f8e63e5c7a7cc4982d
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:29 2019 +0800

    tipc: fix uninit-value in tipc_nl_compat_doit
    
    commit 2753ca5d9009c180dbfd4c802c80983b4b6108d1 upstream.
    
    BUG: KMSAN: uninit-value in tipc_nl_compat_doit+0x404/0xa10 net/tipc/netlink_compat.c:335
    CPU: 0 PID: 4514 Comm: syz-executor485 Not tainted 4.16.0+ #87
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:17 [inline]
     dump_stack+0x185/0x1d0 lib/dump_stack.c:53
     kmsan_report+0x142/0x240 mm/kmsan/kmsan.c:1067
     __msan_warning_32+0x6c/0xb0 mm/kmsan/kmsan_instr.c:683
     tipc_nl_compat_doit+0x404/0xa10 net/tipc/netlink_compat.c:335
     tipc_nl_compat_recv+0x164b/0x2700 net/tipc/netlink_compat.c:1153
     genl_family_rcv_msg net/netlink/genetlink.c:599 [inline]
     genl_rcv_msg+0x1686/0x1810 net/netlink/genetlink.c:624
     netlink_rcv_skb+0x378/0x600 net/netlink/af_netlink.c:2447
     genl_rcv+0x63/0x80 net/netlink/genetlink.c:635
     netlink_unicast_kernel net/netlink/af_netlink.c:1311 [inline]
     netlink_unicast+0x166b/0x1740 net/netlink/af_netlink.c:1337
     netlink_sendmsg+0x1048/0x1310 net/netlink/af_netlink.c:1900
     sock_sendmsg_nosec net/socket.c:630 [inline]
     sock_sendmsg net/socket.c:640 [inline]
     ___sys_sendmsg+0xec0/0x1310 net/socket.c:2046
     __sys_sendmsg net/socket.c:2080 [inline]
     SYSC_sendmsg+0x2a3/0x3d0 net/socket.c:2091
     SyS_sendmsg+0x54/0x80 net/socket.c:2087
     do_syscall_64+0x309/0x430 arch/x86/entry/common.c:287
     entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    RIP: 0033:0x43fda9
    RSP: 002b:00007ffd0c184ba8 EFLAGS: 00000213 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00000000004002c8 RCX: 000000000043fda9
    RDX: 0000000000000000 RSI: 0000000020023000 RDI: 0000000000000003
    RBP: 00000000006ca018 R08: 00000000004002c8 R09: 00000000004002c8
    R10: 00000000004002c8 R11: 0000000000000213 R12: 00000000004016d0
    R13: 0000000000401760 R14: 0000000000000000 R15: 0000000000000000
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:278 [inline]
     kmsan_internal_poison_shadow+0xb8/0x1b0 mm/kmsan/kmsan.c:188
     kmsan_kmalloc+0x94/0x100 mm/kmsan/kmsan.c:314
     kmsan_slab_alloc+0x11/0x20 mm/kmsan/kmsan.c:321
     slab_post_alloc_hook mm/slab.h:445 [inline]
     slab_alloc_node mm/slub.c:2737 [inline]
     __kmalloc_node_track_caller+0xaed/0x11c0 mm/slub.c:4369
     __kmalloc_reserve net/core/skbuff.c:138 [inline]
     __alloc_skb+0x2cf/0x9f0 net/core/skbuff.c:206
     alloc_skb include/linux/skbuff.h:984 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1183 [inline]
     netlink_sendmsg+0x9a6/0x1310 net/netlink/af_netlink.c:1875
     sock_sendmsg_nosec net/socket.c:630 [inline]
     sock_sendmsg net/socket.c:640 [inline]
     ___sys_sendmsg+0xec0/0x1310 net/socket.c:2046
     __sys_sendmsg net/socket.c:2080 [inline]
     SYSC_sendmsg+0x2a3/0x3d0 net/socket.c:2091
     SyS_sendmsg+0x54/0x80 net/socket.c:2087
     do_syscall_64+0x309/0x430 arch/x86/entry/common.c:287
     entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    
    In tipc_nl_compat_recv(), when the len variable returned by
    nlmsg_attrlen() is 0, the message is still treated as a valid one,
    which is obviously unresonable. When len is zero, it means the
    message not only doesn't contain any valid TLV payload, but also
    TLV header is not included. Under this stituation, tlv_type field
    in TLV header is still accessed in tipc_nl_compat_dumpit() or
    tipc_nl_compat_doit(), but the field space is obviously illegal.
    Of course, it is not initialized.
    
    Reported-by: syzbot+bca0dc46634781f08b38@syzkaller.appspotmail.com
    Reported-by: syzbot+6bdb590321a7ae40c1a6@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c25352f9ad5dffb4de95069e67891e2aa2e99e50
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:28 2019 +0800

    tipc: fix uninit-value in tipc_nl_compat_name_table_dump
    
    commit 974cb0e3e7c963ced06c4e32c5b2884173fa5e01 upstream.
    
    syzbot reported:
    
    BUG: KMSAN: uninit-value in __arch_swab32 arch/x86/include/uapi/asm/swab.h:10 [inline]
    BUG: KMSAN: uninit-value in __fswab32 include/uapi/linux/swab.h:59 [inline]
    BUG: KMSAN: uninit-value in tipc_nl_compat_name_table_dump+0x4a8/0xba0 net/tipc/netlink_compat.c:826
    CPU: 0 PID: 6290 Comm: syz-executor848 Not tainted 4.19.0-rc8+ #70
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x306/0x460 lib/dump_stack.c:113
     kmsan_report+0x1a2/0x2e0 mm/kmsan/kmsan.c:917
     __msan_warning+0x7c/0xe0 mm/kmsan/kmsan_instr.c:500
     __arch_swab32 arch/x86/include/uapi/asm/swab.h:10 [inline]
     __fswab32 include/uapi/linux/swab.h:59 [inline]
     tipc_nl_compat_name_table_dump+0x4a8/0xba0 net/tipc/netlink_compat.c:826
     __tipc_nl_compat_dumpit+0x59e/0xdb0 net/tipc/netlink_compat.c:205
     tipc_nl_compat_dumpit+0x63a/0x820 net/tipc/netlink_compat.c:270
     tipc_nl_compat_handle net/tipc/netlink_compat.c:1151 [inline]
     tipc_nl_compat_recv+0x1402/0x2760 net/tipc/netlink_compat.c:1210
     genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
     genl_rcv_msg+0x185c/0x1a20 net/netlink/genetlink.c:626
     netlink_rcv_skb+0x394/0x640 net/netlink/af_netlink.c:2454
     genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
     netlink_unicast_kernel net/netlink/af_netlink.c:1317 [inline]
     netlink_unicast+0x166d/0x1720 net/netlink/af_netlink.c:1343
     netlink_sendmsg+0x1391/0x1420 net/netlink/af_netlink.c:1908
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xe47/0x1200 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x307/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbe/0x100 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    RIP: 0033:0x440179
    Code: 18 89 d0 c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 fb 13 fc ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007ffecec49318 EFLAGS: 00000213 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00000000004002c8 RCX: 0000000000440179
    RDX: 0000000000000000 RSI: 0000000020000100 RDI: 0000000000000003
    RBP: 00000000006ca018 R08: 0000000000000000 R09: 00000000004002c8
    R10: 0000000000000000 R11: 0000000000000213 R12: 0000000000401a00
    R13: 0000000000401a90 R14: 0000000000000000 R15: 0000000000000000
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:255 [inline]
     kmsan_internal_poison_shadow+0xc8/0x1d0 mm/kmsan/kmsan.c:180
     kmsan_kmalloc+0xa4/0x120 mm/kmsan/kmsan_hooks.c:104
     kmsan_slab_alloc+0x10/0x20 mm/kmsan/kmsan_hooks.c:113
     slab_post_alloc_hook mm/slab.h:446 [inline]
     slab_alloc_node mm/slub.c:2727 [inline]
     __kmalloc_node_track_caller+0xb43/0x1400 mm/slub.c:4360
     __kmalloc_reserve net/core/skbuff.c:138 [inline]
     __alloc_skb+0x422/0xe90 net/core/skbuff.c:206
     alloc_skb include/linux/skbuff.h:996 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1189 [inline]
     netlink_sendmsg+0xcaf/0x1420 net/netlink/af_netlink.c:1883
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xe47/0x1200 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x307/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbe/0x100 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    
    We cannot take for granted the thing that the length of data contained
    in TLV is longer than the size of struct tipc_name_table_query in
    tipc_nl_compat_name_table_dump().
    
    Reported-by: syzbot+06e771a754829716a327@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0ff9dec295ef19448cffee478c4703969e484791
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:27 2019 +0800

    tipc: fix uninit-value in tipc_nl_compat_link_set
    
    commit edf5ff04a45750ac8ce2435974f001dc9cfbf055 upstream.
    
    syzbot reports following splat:
    
    BUG: KMSAN: uninit-value in strlen+0x3b/0xa0 lib/string.c:486
    CPU: 1 PID: 9306 Comm: syz-executor172 Not tainted 4.20.0-rc7+ #2
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
    Google 01/01/2011
    Call Trace:
      __dump_stack lib/dump_stack.c:77 [inline]
      dump_stack+0x173/0x1d0 lib/dump_stack.c:113
      kmsan_report+0x12e/0x2a0 mm/kmsan/kmsan.c:613
      __msan_warning+0x82/0xf0 mm/kmsan/kmsan_instr.c:313
      strlen+0x3b/0xa0 lib/string.c:486
      nla_put_string include/net/netlink.h:1154 [inline]
      __tipc_nl_compat_link_set net/tipc/netlink_compat.c:708 [inline]
      tipc_nl_compat_link_set+0x929/0x1220 net/tipc/netlink_compat.c:744
      __tipc_nl_compat_doit net/tipc/netlink_compat.c:311 [inline]
      tipc_nl_compat_doit+0x3aa/0xaf0 net/tipc/netlink_compat.c:344
      tipc_nl_compat_handle net/tipc/netlink_compat.c:1107 [inline]
      tipc_nl_compat_recv+0x14d7/0x2760 net/tipc/netlink_compat.c:1210
      genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
      genl_rcv_msg+0x185f/0x1a60 net/netlink/genetlink.c:626
      netlink_rcv_skb+0x444/0x640 net/netlink/af_netlink.c:2477
      genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
      netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]
      netlink_unicast+0xf40/0x1020 net/netlink/af_netlink.c:1336
      netlink_sendmsg+0x127f/0x1300 net/netlink/af_netlink.c:1917
      sock_sendmsg_nosec net/socket.c:621 [inline]
      sock_sendmsg net/socket.c:631 [inline]
      ___sys_sendmsg+0xdb9/0x11b0 net/socket.c:2116
      __sys_sendmsg net/socket.c:2154 [inline]
      __do_sys_sendmsg net/socket.c:2163 [inline]
      __se_sys_sendmsg+0x305/0x460 net/socket.c:2161
      __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
      do_syscall_64+0xbc/0xf0 arch/x86/entry/common.c:291
      entry_SYSCALL_64_after_hwframe+0x63/0xe7
    
    The uninitialised access happened in
        nla_put_string(skb, TIPC_NLA_LINK_NAME, lc->name)
    
    This is because lc->name string is not validated before it's used.
    
    Reported-by: syzbot+d78b8a29241a195aefb8@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0ae6754379be24c7eb2c73bf6823072f05283791
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:26 2019 +0800

    tipc: fix uninit-value in tipc_nl_compat_bearer_enable
    
    commit 0762216c0ad2a2fccd63890648eca491f2c83d9a upstream.
    
    syzbot reported:
    
    BUG: KMSAN: uninit-value in strlen+0x3b/0xa0 lib/string.c:484
    CPU: 1 PID: 6371 Comm: syz-executor652 Not tainted 4.19.0-rc8+ #70
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x306/0x460 lib/dump_stack.c:113
     kmsan_report+0x1a2/0x2e0 mm/kmsan/kmsan.c:917
     __msan_warning+0x7c/0xe0 mm/kmsan/kmsan_instr.c:500
     strlen+0x3b/0xa0 lib/string.c:484
     nla_put_string include/net/netlink.h:1011 [inline]
     tipc_nl_compat_bearer_enable+0x238/0x7b0 net/tipc/netlink_compat.c:389
     __tipc_nl_compat_doit net/tipc/netlink_compat.c:311 [inline]
     tipc_nl_compat_doit+0x39f/0xae0 net/tipc/netlink_compat.c:344
     tipc_nl_compat_recv+0x147c/0x2760 net/tipc/netlink_compat.c:1107
     genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
     genl_rcv_msg+0x185c/0x1a20 net/netlink/genetlink.c:626
     netlink_rcv_skb+0x394/0x640 net/netlink/af_netlink.c:2454
     genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
     netlink_unicast_kernel net/netlink/af_netlink.c:1317 [inline]
     netlink_unicast+0x166d/0x1720 net/netlink/af_netlink.c:1343
     netlink_sendmsg+0x1391/0x1420 net/netlink/af_netlink.c:1908
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xe47/0x1200 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x307/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbe/0x100 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    RIP: 0033:0x440179
    Code: 18 89 d0 c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 fb 13 fc ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007fffef7beee8 EFLAGS: 00000213 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00000000004002c8 RCX: 0000000000440179
    RDX: 0000000000000000 RSI: 0000000020000100 RDI: 0000000000000003
    RBP: 00000000006ca018 R08: 0000000000000000 R09: 00000000004002c8
    R10: 0000000000000000 R11: 0000000000000213 R12: 0000000000401a00
    R13: 0000000000401a90 R14: 0000000000000000 R15: 0000000000000000
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:255 [inline]
     kmsan_internal_poison_shadow+0xc8/0x1d0 mm/kmsan/kmsan.c:180
     kmsan_kmalloc+0xa4/0x120 mm/kmsan/kmsan_hooks.c:104
     kmsan_slab_alloc+0x10/0x20 mm/kmsan/kmsan_hooks.c:113
     slab_post_alloc_hook mm/slab.h:446 [inline]
     slab_alloc_node mm/slub.c:2727 [inline]
     __kmalloc_node_track_caller+0xb43/0x1400 mm/slub.c:4360
     __kmalloc_reserve net/core/skbuff.c:138 [inline]
     __alloc_skb+0x422/0xe90 net/core/skbuff.c:206
     alloc_skb include/linux/skbuff.h:996 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1189 [inline]
     netlink_sendmsg+0xcaf/0x1420 net/netlink/af_netlink.c:1883
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xe47/0x1200 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x307/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbe/0x100 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    
    The root cause is that we don't validate whether bear name is a valid
    string in tipc_nl_compat_bearer_enable().
    
    Meanwhile, we also fix the same issue in the following functions:
    tipc_nl_compat_bearer_disable()
    tipc_nl_compat_link_stat_dump()
    tipc_nl_compat_media_set()
    tipc_nl_compat_bearer_set()
    
    Reported-by: syzbot+b33d5cae0efd35dbfe77@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 93ece9285ec6cbcc610b3fff5ab0a04cd8153790
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:25 2019 +0800

    tipc: fix uninit-value in tipc_nl_compat_link_reset_stats
    
    commit 8b66fee7f8ee18f9c51260e7a43ab37db5177a05 upstream.
    
    syzbot reports following splat:
    
    BUG: KMSAN: uninit-value in strlen+0x3b/0xa0 lib/string.c:486
    CPU: 1 PID: 11057 Comm: syz-executor0 Not tainted 4.20.0-rc7+ #2
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x173/0x1d0 lib/dump_stack.c:113
     kmsan_report+0x12e/0x2a0 mm/kmsan/kmsan.c:613
     __msan_warning+0x82/0xf0 mm/kmsan/kmsan_instr.c:295
     strlen+0x3b/0xa0 lib/string.c:486
     nla_put_string include/net/netlink.h:1154 [inline]
     tipc_nl_compat_link_reset_stats+0x1f0/0x360 net/tipc/netlink_compat.c:760
     __tipc_nl_compat_doit net/tipc/netlink_compat.c:311 [inline]
     tipc_nl_compat_doit+0x3aa/0xaf0 net/tipc/netlink_compat.c:344
     tipc_nl_compat_handle net/tipc/netlink_compat.c:1107 [inline]
     tipc_nl_compat_recv+0x14d7/0x2760 net/tipc/netlink_compat.c:1210
     genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
     genl_rcv_msg+0x185f/0x1a60 net/netlink/genetlink.c:626
     netlink_rcv_skb+0x444/0x640 net/netlink/af_netlink.c:2477
     genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
     netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]
     netlink_unicast+0xf40/0x1020 net/netlink/af_netlink.c:1336
     netlink_sendmsg+0x127f/0x1300 net/netlink/af_netlink.c:1917
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xdb9/0x11b0 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x305/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbc/0xf0 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    RIP: 0033:0x457ec9
    Code: 6d b7 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 3b b7 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007f2557338c78 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 0000000000457ec9
    RDX: 0000000000000000 RSI: 00000000200001c0 RDI: 0000000000000003
    RBP: 000000000073bf00 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007f25573396d4
    R13: 00000000004cb478 R14: 00000000004d86c8 R15: 00000000ffffffff
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:204 [inline]
     kmsan_internal_poison_shadow+0x92/0x150 mm/kmsan/kmsan.c:158
     kmsan_kmalloc+0xa6/0x130 mm/kmsan/kmsan_hooks.c:176
     kmsan_slab_alloc+0xe/0x10 mm/kmsan/kmsan_hooks.c:185
     slab_post_alloc_hook mm/slab.h:446 [inline]
     slab_alloc_node mm/slub.c:2759 [inline]
     __kmalloc_node_track_caller+0xe18/0x1030 mm/slub.c:4383
     __kmalloc_reserve net/core/skbuff.c:137 [inline]
     __alloc_skb+0x309/0xa20 net/core/skbuff.c:205
     alloc_skb include/linux/skbuff.h:998 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1182 [inline]
     netlink_sendmsg+0xb82/0x1300 net/netlink/af_netlink.c:1892
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xdb9/0x11b0 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x305/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbc/0xf0 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    
    The uninitialised access happened in tipc_nl_compat_link_reset_stats:
        nla_put_string(skb, TIPC_NLA_LINK_NAME, name)
    
    This is because name string is not validated before it's used.
    
    Reported-by: syzbot+e01d94b5a4c266be6e4c@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8eab6dac8d9704666f93aef12e534202a66b928d
Author: Zhaolong Zhang <zhangzl2013@126.com>
Date:   Thu Jan 24 10:06:41 2019 +0800

    tipc: remove dead code in struct tipc_topsrv
    
    max_rcvbuf_size is no longer used since commit "414574a0af36".
    
    Signed-off-by: Zhaolong Zhang <zhangzl2013@126.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f79e3365bc1faeda0e8e1c8e7e332631a43ebdba
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Wed Jan 23 01:09:31 2019 -0600

    tipc: mark expected switch fall-throughs
    
    In preparation to enabling -Wimplicit-fallthrough, mark switch cases
    where we are expecting to fall through.
    
    This patch fixes the following warnings:
    
    net/tipc/link.c:1125:6: warning: this statement may fall through [-Wimplicit-fallthrough=]
    net/tipc/socket.c:736:6: warning: this statement may fall through [-Wimplicit-fallthrough=]
    net/tipc/socket.c:2418:7: warning: this statement may fall through [-Wimplicit-fallthrough=]
    
    Warning level 3 was used: -Wimplicit-fallthrough=3
    
    This patch is part of the ongoing efforts to enabling
    -Wimplicit-fallthrough.
    
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 02862eb9171c0fc51dac60ce29725599ac61e1fc
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:29 2019 +0800

    tipc: fix uninit-value in tipc_nl_compat_doit
    
    commit 2753ca5d9009c180dbfd4c802c80983b4b6108d1 upstream.
    
    BUG: KMSAN: uninit-value in tipc_nl_compat_doit+0x404/0xa10 net/tipc/netlink_compat.c:335
    CPU: 0 PID: 4514 Comm: syz-executor485 Not tainted 4.16.0+ #87
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:17 [inline]
     dump_stack+0x185/0x1d0 lib/dump_stack.c:53
     kmsan_report+0x142/0x240 mm/kmsan/kmsan.c:1067
     __msan_warning_32+0x6c/0xb0 mm/kmsan/kmsan_instr.c:683
     tipc_nl_compat_doit+0x404/0xa10 net/tipc/netlink_compat.c:335
     tipc_nl_compat_recv+0x164b/0x2700 net/tipc/netlink_compat.c:1153
     genl_family_rcv_msg net/netlink/genetlink.c:599 [inline]
     genl_rcv_msg+0x1686/0x1810 net/netlink/genetlink.c:624
     netlink_rcv_skb+0x378/0x600 net/netlink/af_netlink.c:2447
     genl_rcv+0x63/0x80 net/netlink/genetlink.c:635
     netlink_unicast_kernel net/netlink/af_netlink.c:1311 [inline]
     netlink_unicast+0x166b/0x1740 net/netlink/af_netlink.c:1337
     netlink_sendmsg+0x1048/0x1310 net/netlink/af_netlink.c:1900
     sock_sendmsg_nosec net/socket.c:630 [inline]
     sock_sendmsg net/socket.c:640 [inline]
     ___sys_sendmsg+0xec0/0x1310 net/socket.c:2046
     __sys_sendmsg net/socket.c:2080 [inline]
     SYSC_sendmsg+0x2a3/0x3d0 net/socket.c:2091
     SyS_sendmsg+0x54/0x80 net/socket.c:2087
     do_syscall_64+0x309/0x430 arch/x86/entry/common.c:287
     entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    RIP: 0033:0x43fda9
    RSP: 002b:00007ffd0c184ba8 EFLAGS: 00000213 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00000000004002c8 RCX: 000000000043fda9
    RDX: 0000000000000000 RSI: 0000000020023000 RDI: 0000000000000003
    RBP: 00000000006ca018 R08: 00000000004002c8 R09: 00000000004002c8
    R10: 00000000004002c8 R11: 0000000000000213 R12: 00000000004016d0
    R13: 0000000000401760 R14: 0000000000000000 R15: 0000000000000000
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:278 [inline]
     kmsan_internal_poison_shadow+0xb8/0x1b0 mm/kmsan/kmsan.c:188
     kmsan_kmalloc+0x94/0x100 mm/kmsan/kmsan.c:314
     kmsan_slab_alloc+0x11/0x20 mm/kmsan/kmsan.c:321
     slab_post_alloc_hook mm/slab.h:445 [inline]
     slab_alloc_node mm/slub.c:2737 [inline]
     __kmalloc_node_track_caller+0xaed/0x11c0 mm/slub.c:4369
     __kmalloc_reserve net/core/skbuff.c:138 [inline]
     __alloc_skb+0x2cf/0x9f0 net/core/skbuff.c:206
     alloc_skb include/linux/skbuff.h:984 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1183 [inline]
     netlink_sendmsg+0x9a6/0x1310 net/netlink/af_netlink.c:1875
     sock_sendmsg_nosec net/socket.c:630 [inline]
     sock_sendmsg net/socket.c:640 [inline]
     ___sys_sendmsg+0xec0/0x1310 net/socket.c:2046
     __sys_sendmsg net/socket.c:2080 [inline]
     SYSC_sendmsg+0x2a3/0x3d0 net/socket.c:2091
     SyS_sendmsg+0x54/0x80 net/socket.c:2087
     do_syscall_64+0x309/0x430 arch/x86/entry/common.c:287
     entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    
    In tipc_nl_compat_recv(), when the len variable returned by
    nlmsg_attrlen() is 0, the message is still treated as a valid one,
    which is obviously unresonable. When len is zero, it means the
    message not only doesn't contain any valid TLV payload, but also
    TLV header is not included. Under this stituation, tlv_type field
    in TLV header is still accessed in tipc_nl_compat_dumpit() or
    tipc_nl_compat_doit(), but the field space is obviously illegal.
    Of course, it is not initialized.
    
    Reported-by: syzbot+bca0dc46634781f08b38@syzkaller.appspotmail.com
    Reported-by: syzbot+6bdb590321a7ae40c1a6@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4c559fb7e111077b56f62ccf833a52d8169cde19
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:28 2019 +0800

    tipc: fix uninit-value in tipc_nl_compat_name_table_dump
    
    commit 974cb0e3e7c963ced06c4e32c5b2884173fa5e01 upstream.
    
    syzbot reported:
    
    BUG: KMSAN: uninit-value in __arch_swab32 arch/x86/include/uapi/asm/swab.h:10 [inline]
    BUG: KMSAN: uninit-value in __fswab32 include/uapi/linux/swab.h:59 [inline]
    BUG: KMSAN: uninit-value in tipc_nl_compat_name_table_dump+0x4a8/0xba0 net/tipc/netlink_compat.c:826
    CPU: 0 PID: 6290 Comm: syz-executor848 Not tainted 4.19.0-rc8+ #70
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x306/0x460 lib/dump_stack.c:113
     kmsan_report+0x1a2/0x2e0 mm/kmsan/kmsan.c:917
     __msan_warning+0x7c/0xe0 mm/kmsan/kmsan_instr.c:500
     __arch_swab32 arch/x86/include/uapi/asm/swab.h:10 [inline]
     __fswab32 include/uapi/linux/swab.h:59 [inline]
     tipc_nl_compat_name_table_dump+0x4a8/0xba0 net/tipc/netlink_compat.c:826
     __tipc_nl_compat_dumpit+0x59e/0xdb0 net/tipc/netlink_compat.c:205
     tipc_nl_compat_dumpit+0x63a/0x820 net/tipc/netlink_compat.c:270
     tipc_nl_compat_handle net/tipc/netlink_compat.c:1151 [inline]
     tipc_nl_compat_recv+0x1402/0x2760 net/tipc/netlink_compat.c:1210
     genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
     genl_rcv_msg+0x185c/0x1a20 net/netlink/genetlink.c:626
     netlink_rcv_skb+0x394/0x640 net/netlink/af_netlink.c:2454
     genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
     netlink_unicast_kernel net/netlink/af_netlink.c:1317 [inline]
     netlink_unicast+0x166d/0x1720 net/netlink/af_netlink.c:1343
     netlink_sendmsg+0x1391/0x1420 net/netlink/af_netlink.c:1908
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xe47/0x1200 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x307/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbe/0x100 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    RIP: 0033:0x440179
    Code: 18 89 d0 c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 fb 13 fc ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007ffecec49318 EFLAGS: 00000213 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00000000004002c8 RCX: 0000000000440179
    RDX: 0000000000000000 RSI: 0000000020000100 RDI: 0000000000000003
    RBP: 00000000006ca018 R08: 0000000000000000 R09: 00000000004002c8
    R10: 0000000000000000 R11: 0000000000000213 R12: 0000000000401a00
    R13: 0000000000401a90 R14: 0000000000000000 R15: 0000000000000000
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:255 [inline]
     kmsan_internal_poison_shadow+0xc8/0x1d0 mm/kmsan/kmsan.c:180
     kmsan_kmalloc+0xa4/0x120 mm/kmsan/kmsan_hooks.c:104
     kmsan_slab_alloc+0x10/0x20 mm/kmsan/kmsan_hooks.c:113
     slab_post_alloc_hook mm/slab.h:446 [inline]
     slab_alloc_node mm/slub.c:2727 [inline]
     __kmalloc_node_track_caller+0xb43/0x1400 mm/slub.c:4360
     __kmalloc_reserve net/core/skbuff.c:138 [inline]
     __alloc_skb+0x422/0xe90 net/core/skbuff.c:206
     alloc_skb include/linux/skbuff.h:996 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1189 [inline]
     netlink_sendmsg+0xcaf/0x1420 net/netlink/af_netlink.c:1883
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xe47/0x1200 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x307/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbe/0x100 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    
    We cannot take for granted the thing that the length of data contained
    in TLV is longer than the size of struct tipc_name_table_query in
    tipc_nl_compat_name_table_dump().
    
    Reported-by: syzbot+06e771a754829716a327@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3644c53015fbbc7a08f2d41af9b870266e46ed5d
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:27 2019 +0800

    tipc: fix uninit-value in tipc_nl_compat_link_set
    
    commit edf5ff04a45750ac8ce2435974f001dc9cfbf055 upstream.
    
    syzbot reports following splat:
    
    BUG: KMSAN: uninit-value in strlen+0x3b/0xa0 lib/string.c:486
    CPU: 1 PID: 9306 Comm: syz-executor172 Not tainted 4.20.0-rc7+ #2
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
    Google 01/01/2011
    Call Trace:
      __dump_stack lib/dump_stack.c:77 [inline]
      dump_stack+0x173/0x1d0 lib/dump_stack.c:113
      kmsan_report+0x12e/0x2a0 mm/kmsan/kmsan.c:613
      __msan_warning+0x82/0xf0 mm/kmsan/kmsan_instr.c:313
      strlen+0x3b/0xa0 lib/string.c:486
      nla_put_string include/net/netlink.h:1154 [inline]
      __tipc_nl_compat_link_set net/tipc/netlink_compat.c:708 [inline]
      tipc_nl_compat_link_set+0x929/0x1220 net/tipc/netlink_compat.c:744
      __tipc_nl_compat_doit net/tipc/netlink_compat.c:311 [inline]
      tipc_nl_compat_doit+0x3aa/0xaf0 net/tipc/netlink_compat.c:344
      tipc_nl_compat_handle net/tipc/netlink_compat.c:1107 [inline]
      tipc_nl_compat_recv+0x14d7/0x2760 net/tipc/netlink_compat.c:1210
      genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
      genl_rcv_msg+0x185f/0x1a60 net/netlink/genetlink.c:626
      netlink_rcv_skb+0x444/0x640 net/netlink/af_netlink.c:2477
      genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
      netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]
      netlink_unicast+0xf40/0x1020 net/netlink/af_netlink.c:1336
      netlink_sendmsg+0x127f/0x1300 net/netlink/af_netlink.c:1917
      sock_sendmsg_nosec net/socket.c:621 [inline]
      sock_sendmsg net/socket.c:631 [inline]
      ___sys_sendmsg+0xdb9/0x11b0 net/socket.c:2116
      __sys_sendmsg net/socket.c:2154 [inline]
      __do_sys_sendmsg net/socket.c:2163 [inline]
      __se_sys_sendmsg+0x305/0x460 net/socket.c:2161
      __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
      do_syscall_64+0xbc/0xf0 arch/x86/entry/common.c:291
      entry_SYSCALL_64_after_hwframe+0x63/0xe7
    
    The uninitialised access happened in
        nla_put_string(skb, TIPC_NLA_LINK_NAME, lc->name)
    
    This is because lc->name string is not validated before it's used.
    
    Reported-by: syzbot+d78b8a29241a195aefb8@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7d0cb25a8189d1212b1cb92f7f21728c514d2ffe
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:26 2019 +0800

    tipc: fix uninit-value in tipc_nl_compat_bearer_enable
    
    commit 0762216c0ad2a2fccd63890648eca491f2c83d9a upstream.
    
    syzbot reported:
    
    BUG: KMSAN: uninit-value in strlen+0x3b/0xa0 lib/string.c:484
    CPU: 1 PID: 6371 Comm: syz-executor652 Not tainted 4.19.0-rc8+ #70
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x306/0x460 lib/dump_stack.c:113
     kmsan_report+0x1a2/0x2e0 mm/kmsan/kmsan.c:917
     __msan_warning+0x7c/0xe0 mm/kmsan/kmsan_instr.c:500
     strlen+0x3b/0xa0 lib/string.c:484
     nla_put_string include/net/netlink.h:1011 [inline]
     tipc_nl_compat_bearer_enable+0x238/0x7b0 net/tipc/netlink_compat.c:389
     __tipc_nl_compat_doit net/tipc/netlink_compat.c:311 [inline]
     tipc_nl_compat_doit+0x39f/0xae0 net/tipc/netlink_compat.c:344
     tipc_nl_compat_recv+0x147c/0x2760 net/tipc/netlink_compat.c:1107
     genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
     genl_rcv_msg+0x185c/0x1a20 net/netlink/genetlink.c:626
     netlink_rcv_skb+0x394/0x640 net/netlink/af_netlink.c:2454
     genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
     netlink_unicast_kernel net/netlink/af_netlink.c:1317 [inline]
     netlink_unicast+0x166d/0x1720 net/netlink/af_netlink.c:1343
     netlink_sendmsg+0x1391/0x1420 net/netlink/af_netlink.c:1908
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xe47/0x1200 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x307/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbe/0x100 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    RIP: 0033:0x440179
    Code: 18 89 d0 c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 fb 13 fc ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007fffef7beee8 EFLAGS: 00000213 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00000000004002c8 RCX: 0000000000440179
    RDX: 0000000000000000 RSI: 0000000020000100 RDI: 0000000000000003
    RBP: 00000000006ca018 R08: 0000000000000000 R09: 00000000004002c8
    R10: 0000000000000000 R11: 0000000000000213 R12: 0000000000401a00
    R13: 0000000000401a90 R14: 0000000000000000 R15: 0000000000000000
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:255 [inline]
     kmsan_internal_poison_shadow+0xc8/0x1d0 mm/kmsan/kmsan.c:180
     kmsan_kmalloc+0xa4/0x120 mm/kmsan/kmsan_hooks.c:104
     kmsan_slab_alloc+0x10/0x20 mm/kmsan/kmsan_hooks.c:113
     slab_post_alloc_hook mm/slab.h:446 [inline]
     slab_alloc_node mm/slub.c:2727 [inline]
     __kmalloc_node_track_caller+0xb43/0x1400 mm/slub.c:4360
     __kmalloc_reserve net/core/skbuff.c:138 [inline]
     __alloc_skb+0x422/0xe90 net/core/skbuff.c:206
     alloc_skb include/linux/skbuff.h:996 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1189 [inline]
     netlink_sendmsg+0xcaf/0x1420 net/netlink/af_netlink.c:1883
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xe47/0x1200 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x307/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbe/0x100 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    
    The root cause is that we don't validate whether bear name is a valid
    string in tipc_nl_compat_bearer_enable().
    
    Meanwhile, we also fix the same issue in the following functions:
    tipc_nl_compat_bearer_disable()
    tipc_nl_compat_link_stat_dump()
    tipc_nl_compat_media_set()
    tipc_nl_compat_bearer_set()
    
    Reported-by: syzbot+b33d5cae0efd35dbfe77@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4cd995a95bd70fcf22c6ad67bb07d19374fb33c6
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:25 2019 +0800

    tipc: fix uninit-value in tipc_nl_compat_link_reset_stats
    
    commit 8b66fee7f8ee18f9c51260e7a43ab37db5177a05 upstream.
    
    syzbot reports following splat:
    
    BUG: KMSAN: uninit-value in strlen+0x3b/0xa0 lib/string.c:486
    CPU: 1 PID: 11057 Comm: syz-executor0 Not tainted 4.20.0-rc7+ #2
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x173/0x1d0 lib/dump_stack.c:113
     kmsan_report+0x12e/0x2a0 mm/kmsan/kmsan.c:613
     __msan_warning+0x82/0xf0 mm/kmsan/kmsan_instr.c:295
     strlen+0x3b/0xa0 lib/string.c:486
     nla_put_string include/net/netlink.h:1154 [inline]
     tipc_nl_compat_link_reset_stats+0x1f0/0x360 net/tipc/netlink_compat.c:760
     __tipc_nl_compat_doit net/tipc/netlink_compat.c:311 [inline]
     tipc_nl_compat_doit+0x3aa/0xaf0 net/tipc/netlink_compat.c:344
     tipc_nl_compat_handle net/tipc/netlink_compat.c:1107 [inline]
     tipc_nl_compat_recv+0x14d7/0x2760 net/tipc/netlink_compat.c:1210
     genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
     genl_rcv_msg+0x185f/0x1a60 net/netlink/genetlink.c:626
     netlink_rcv_skb+0x444/0x640 net/netlink/af_netlink.c:2477
     genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
     netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]
     netlink_unicast+0xf40/0x1020 net/netlink/af_netlink.c:1336
     netlink_sendmsg+0x127f/0x1300 net/netlink/af_netlink.c:1917
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xdb9/0x11b0 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x305/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbc/0xf0 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    RIP: 0033:0x457ec9
    Code: 6d b7 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 3b b7 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007f2557338c78 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 0000000000457ec9
    RDX: 0000000000000000 RSI: 00000000200001c0 RDI: 0000000000000003
    RBP: 000000000073bf00 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007f25573396d4
    R13: 00000000004cb478 R14: 00000000004d86c8 R15: 00000000ffffffff
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:204 [inline]
     kmsan_internal_poison_shadow+0x92/0x150 mm/kmsan/kmsan.c:158
     kmsan_kmalloc+0xa6/0x130 mm/kmsan/kmsan_hooks.c:176
     kmsan_slab_alloc+0xe/0x10 mm/kmsan/kmsan_hooks.c:185
     slab_post_alloc_hook mm/slab.h:446 [inline]
     slab_alloc_node mm/slub.c:2759 [inline]
     __kmalloc_node_track_caller+0xe18/0x1030 mm/slub.c:4383
     __kmalloc_reserve net/core/skbuff.c:137 [inline]
     __alloc_skb+0x309/0xa20 net/core/skbuff.c:205
     alloc_skb include/linux/skbuff.h:998 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1182 [inline]
     netlink_sendmsg+0xb82/0x1300 net/netlink/af_netlink.c:1892
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xdb9/0x11b0 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x305/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbc/0xf0 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    
    The uninitialised access happened in tipc_nl_compat_link_reset_stats:
        nla_put_string(skb, TIPC_NLA_LINK_NAME, name)
    
    This is because name string is not validated before it's used.
    
    Reported-by: syzbot+e01d94b5a4c266be6e4c@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f3dd37ef84bd0a07d14d260ec16e166a470c065
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:29 2019 +0800

    tipc: fix uninit-value in tipc_nl_compat_doit
    
    commit 2753ca5d9009c180dbfd4c802c80983b4b6108d1 upstream.
    
    BUG: KMSAN: uninit-value in tipc_nl_compat_doit+0x404/0xa10 net/tipc/netlink_compat.c:335
    CPU: 0 PID: 4514 Comm: syz-executor485 Not tainted 4.16.0+ #87
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:17 [inline]
     dump_stack+0x185/0x1d0 lib/dump_stack.c:53
     kmsan_report+0x142/0x240 mm/kmsan/kmsan.c:1067
     __msan_warning_32+0x6c/0xb0 mm/kmsan/kmsan_instr.c:683
     tipc_nl_compat_doit+0x404/0xa10 net/tipc/netlink_compat.c:335
     tipc_nl_compat_recv+0x164b/0x2700 net/tipc/netlink_compat.c:1153
     genl_family_rcv_msg net/netlink/genetlink.c:599 [inline]
     genl_rcv_msg+0x1686/0x1810 net/netlink/genetlink.c:624
     netlink_rcv_skb+0x378/0x600 net/netlink/af_netlink.c:2447
     genl_rcv+0x63/0x80 net/netlink/genetlink.c:635
     netlink_unicast_kernel net/netlink/af_netlink.c:1311 [inline]
     netlink_unicast+0x166b/0x1740 net/netlink/af_netlink.c:1337
     netlink_sendmsg+0x1048/0x1310 net/netlink/af_netlink.c:1900
     sock_sendmsg_nosec net/socket.c:630 [inline]
     sock_sendmsg net/socket.c:640 [inline]
     ___sys_sendmsg+0xec0/0x1310 net/socket.c:2046
     __sys_sendmsg net/socket.c:2080 [inline]
     SYSC_sendmsg+0x2a3/0x3d0 net/socket.c:2091
     SyS_sendmsg+0x54/0x80 net/socket.c:2087
     do_syscall_64+0x309/0x430 arch/x86/entry/common.c:287
     entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    RIP: 0033:0x43fda9
    RSP: 002b:00007ffd0c184ba8 EFLAGS: 00000213 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00000000004002c8 RCX: 000000000043fda9
    RDX: 0000000000000000 RSI: 0000000020023000 RDI: 0000000000000003
    RBP: 00000000006ca018 R08: 00000000004002c8 R09: 00000000004002c8
    R10: 00000000004002c8 R11: 0000000000000213 R12: 00000000004016d0
    R13: 0000000000401760 R14: 0000000000000000 R15: 0000000000000000
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:278 [inline]
     kmsan_internal_poison_shadow+0xb8/0x1b0 mm/kmsan/kmsan.c:188
     kmsan_kmalloc+0x94/0x100 mm/kmsan/kmsan.c:314
     kmsan_slab_alloc+0x11/0x20 mm/kmsan/kmsan.c:321
     slab_post_alloc_hook mm/slab.h:445 [inline]
     slab_alloc_node mm/slub.c:2737 [inline]
     __kmalloc_node_track_caller+0xaed/0x11c0 mm/slub.c:4369
     __kmalloc_reserve net/core/skbuff.c:138 [inline]
     __alloc_skb+0x2cf/0x9f0 net/core/skbuff.c:206
     alloc_skb include/linux/skbuff.h:984 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1183 [inline]
     netlink_sendmsg+0x9a6/0x1310 net/netlink/af_netlink.c:1875
     sock_sendmsg_nosec net/socket.c:630 [inline]
     sock_sendmsg net/socket.c:640 [inline]
     ___sys_sendmsg+0xec0/0x1310 net/socket.c:2046
     __sys_sendmsg net/socket.c:2080 [inline]
     SYSC_sendmsg+0x2a3/0x3d0 net/socket.c:2091
     SyS_sendmsg+0x54/0x80 net/socket.c:2087
     do_syscall_64+0x309/0x430 arch/x86/entry/common.c:287
     entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    
    In tipc_nl_compat_recv(), when the len variable returned by
    nlmsg_attrlen() is 0, the message is still treated as a valid one,
    which is obviously unresonable. When len is zero, it means the
    message not only doesn't contain any valid TLV payload, but also
    TLV header is not included. Under this stituation, tlv_type field
    in TLV header is still accessed in tipc_nl_compat_dumpit() or
    tipc_nl_compat_doit(), but the field space is obviously illegal.
    Of course, it is not initialized.
    
    Reported-by: syzbot+bca0dc46634781f08b38@syzkaller.appspotmail.com
    Reported-by: syzbot+6bdb590321a7ae40c1a6@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2aae1723dea1235ffef183daf0694805297424f6
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:28 2019 +0800

    tipc: fix uninit-value in tipc_nl_compat_name_table_dump
    
    commit 974cb0e3e7c963ced06c4e32c5b2884173fa5e01 upstream.
    
    syzbot reported:
    
    BUG: KMSAN: uninit-value in __arch_swab32 arch/x86/include/uapi/asm/swab.h:10 [inline]
    BUG: KMSAN: uninit-value in __fswab32 include/uapi/linux/swab.h:59 [inline]
    BUG: KMSAN: uninit-value in tipc_nl_compat_name_table_dump+0x4a8/0xba0 net/tipc/netlink_compat.c:826
    CPU: 0 PID: 6290 Comm: syz-executor848 Not tainted 4.19.0-rc8+ #70
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x306/0x460 lib/dump_stack.c:113
     kmsan_report+0x1a2/0x2e0 mm/kmsan/kmsan.c:917
     __msan_warning+0x7c/0xe0 mm/kmsan/kmsan_instr.c:500
     __arch_swab32 arch/x86/include/uapi/asm/swab.h:10 [inline]
     __fswab32 include/uapi/linux/swab.h:59 [inline]
     tipc_nl_compat_name_table_dump+0x4a8/0xba0 net/tipc/netlink_compat.c:826
     __tipc_nl_compat_dumpit+0x59e/0xdb0 net/tipc/netlink_compat.c:205
     tipc_nl_compat_dumpit+0x63a/0x820 net/tipc/netlink_compat.c:270
     tipc_nl_compat_handle net/tipc/netlink_compat.c:1151 [inline]
     tipc_nl_compat_recv+0x1402/0x2760 net/tipc/netlink_compat.c:1210
     genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
     genl_rcv_msg+0x185c/0x1a20 net/netlink/genetlink.c:626
     netlink_rcv_skb+0x394/0x640 net/netlink/af_netlink.c:2454
     genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
     netlink_unicast_kernel net/netlink/af_netlink.c:1317 [inline]
     netlink_unicast+0x166d/0x1720 net/netlink/af_netlink.c:1343
     netlink_sendmsg+0x1391/0x1420 net/netlink/af_netlink.c:1908
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xe47/0x1200 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x307/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbe/0x100 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    RIP: 0033:0x440179
    Code: 18 89 d0 c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 fb 13 fc ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007ffecec49318 EFLAGS: 00000213 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00000000004002c8 RCX: 0000000000440179
    RDX: 0000000000000000 RSI: 0000000020000100 RDI: 0000000000000003
    RBP: 00000000006ca018 R08: 0000000000000000 R09: 00000000004002c8
    R10: 0000000000000000 R11: 0000000000000213 R12: 0000000000401a00
    R13: 0000000000401a90 R14: 0000000000000000 R15: 0000000000000000
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:255 [inline]
     kmsan_internal_poison_shadow+0xc8/0x1d0 mm/kmsan/kmsan.c:180
     kmsan_kmalloc+0xa4/0x120 mm/kmsan/kmsan_hooks.c:104
     kmsan_slab_alloc+0x10/0x20 mm/kmsan/kmsan_hooks.c:113
     slab_post_alloc_hook mm/slab.h:446 [inline]
     slab_alloc_node mm/slub.c:2727 [inline]
     __kmalloc_node_track_caller+0xb43/0x1400 mm/slub.c:4360
     __kmalloc_reserve net/core/skbuff.c:138 [inline]
     __alloc_skb+0x422/0xe90 net/core/skbuff.c:206
     alloc_skb include/linux/skbuff.h:996 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1189 [inline]
     netlink_sendmsg+0xcaf/0x1420 net/netlink/af_netlink.c:1883
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xe47/0x1200 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x307/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbe/0x100 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    
    We cannot take for granted the thing that the length of data contained
    in TLV is longer than the size of struct tipc_name_table_query in
    tipc_nl_compat_name_table_dump().
    
    Reported-by: syzbot+06e771a754829716a327@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8123f1b363e44da4607aafa4de92e86a71ca1f82
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:27 2019 +0800

    tipc: fix uninit-value in tipc_nl_compat_link_set
    
    commit edf5ff04a45750ac8ce2435974f001dc9cfbf055 upstream.
    
    syzbot reports following splat:
    
    BUG: KMSAN: uninit-value in strlen+0x3b/0xa0 lib/string.c:486
    CPU: 1 PID: 9306 Comm: syz-executor172 Not tainted 4.20.0-rc7+ #2
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
    Google 01/01/2011
    Call Trace:
      __dump_stack lib/dump_stack.c:77 [inline]
      dump_stack+0x173/0x1d0 lib/dump_stack.c:113
      kmsan_report+0x12e/0x2a0 mm/kmsan/kmsan.c:613
      __msan_warning+0x82/0xf0 mm/kmsan/kmsan_instr.c:313
      strlen+0x3b/0xa0 lib/string.c:486
      nla_put_string include/net/netlink.h:1154 [inline]
      __tipc_nl_compat_link_set net/tipc/netlink_compat.c:708 [inline]
      tipc_nl_compat_link_set+0x929/0x1220 net/tipc/netlink_compat.c:744
      __tipc_nl_compat_doit net/tipc/netlink_compat.c:311 [inline]
      tipc_nl_compat_doit+0x3aa/0xaf0 net/tipc/netlink_compat.c:344
      tipc_nl_compat_handle net/tipc/netlink_compat.c:1107 [inline]
      tipc_nl_compat_recv+0x14d7/0x2760 net/tipc/netlink_compat.c:1210
      genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
      genl_rcv_msg+0x185f/0x1a60 net/netlink/genetlink.c:626
      netlink_rcv_skb+0x444/0x640 net/netlink/af_netlink.c:2477
      genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
      netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]
      netlink_unicast+0xf40/0x1020 net/netlink/af_netlink.c:1336
      netlink_sendmsg+0x127f/0x1300 net/netlink/af_netlink.c:1917
      sock_sendmsg_nosec net/socket.c:621 [inline]
      sock_sendmsg net/socket.c:631 [inline]
      ___sys_sendmsg+0xdb9/0x11b0 net/socket.c:2116
      __sys_sendmsg net/socket.c:2154 [inline]
      __do_sys_sendmsg net/socket.c:2163 [inline]
      __se_sys_sendmsg+0x305/0x460 net/socket.c:2161
      __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
      do_syscall_64+0xbc/0xf0 arch/x86/entry/common.c:291
      entry_SYSCALL_64_after_hwframe+0x63/0xe7
    
    The uninitialised access happened in
        nla_put_string(skb, TIPC_NLA_LINK_NAME, lc->name)
    
    This is because lc->name string is not validated before it's used.
    
    Reported-by: syzbot+d78b8a29241a195aefb8@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6129b69a0a9db48a82cb207f96cde1f0f1b39dec
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:26 2019 +0800

    tipc: fix uninit-value in tipc_nl_compat_bearer_enable
    
    commit 0762216c0ad2a2fccd63890648eca491f2c83d9a upstream.
    
    syzbot reported:
    
    BUG: KMSAN: uninit-value in strlen+0x3b/0xa0 lib/string.c:484
    CPU: 1 PID: 6371 Comm: syz-executor652 Not tainted 4.19.0-rc8+ #70
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x306/0x460 lib/dump_stack.c:113
     kmsan_report+0x1a2/0x2e0 mm/kmsan/kmsan.c:917
     __msan_warning+0x7c/0xe0 mm/kmsan/kmsan_instr.c:500
     strlen+0x3b/0xa0 lib/string.c:484
     nla_put_string include/net/netlink.h:1011 [inline]
     tipc_nl_compat_bearer_enable+0x238/0x7b0 net/tipc/netlink_compat.c:389
     __tipc_nl_compat_doit net/tipc/netlink_compat.c:311 [inline]
     tipc_nl_compat_doit+0x39f/0xae0 net/tipc/netlink_compat.c:344
     tipc_nl_compat_recv+0x147c/0x2760 net/tipc/netlink_compat.c:1107
     genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
     genl_rcv_msg+0x185c/0x1a20 net/netlink/genetlink.c:626
     netlink_rcv_skb+0x394/0x640 net/netlink/af_netlink.c:2454
     genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
     netlink_unicast_kernel net/netlink/af_netlink.c:1317 [inline]
     netlink_unicast+0x166d/0x1720 net/netlink/af_netlink.c:1343
     netlink_sendmsg+0x1391/0x1420 net/netlink/af_netlink.c:1908
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xe47/0x1200 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x307/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbe/0x100 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    RIP: 0033:0x440179
    Code: 18 89 d0 c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 fb 13 fc ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007fffef7beee8 EFLAGS: 00000213 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00000000004002c8 RCX: 0000000000440179
    RDX: 0000000000000000 RSI: 0000000020000100 RDI: 0000000000000003
    RBP: 00000000006ca018 R08: 0000000000000000 R09: 00000000004002c8
    R10: 0000000000000000 R11: 0000000000000213 R12: 0000000000401a00
    R13: 0000000000401a90 R14: 0000000000000000 R15: 0000000000000000
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:255 [inline]
     kmsan_internal_poison_shadow+0xc8/0x1d0 mm/kmsan/kmsan.c:180
     kmsan_kmalloc+0xa4/0x120 mm/kmsan/kmsan_hooks.c:104
     kmsan_slab_alloc+0x10/0x20 mm/kmsan/kmsan_hooks.c:113
     slab_post_alloc_hook mm/slab.h:446 [inline]
     slab_alloc_node mm/slub.c:2727 [inline]
     __kmalloc_node_track_caller+0xb43/0x1400 mm/slub.c:4360
     __kmalloc_reserve net/core/skbuff.c:138 [inline]
     __alloc_skb+0x422/0xe90 net/core/skbuff.c:206
     alloc_skb include/linux/skbuff.h:996 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1189 [inline]
     netlink_sendmsg+0xcaf/0x1420 net/netlink/af_netlink.c:1883
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xe47/0x1200 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x307/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbe/0x100 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    
    The root cause is that we don't validate whether bear name is a valid
    string in tipc_nl_compat_bearer_enable().
    
    Meanwhile, we also fix the same issue in the following functions:
    tipc_nl_compat_bearer_disable()
    tipc_nl_compat_link_stat_dump()
    tipc_nl_compat_media_set()
    tipc_nl_compat_bearer_set()
    
    Reported-by: syzbot+b33d5cae0efd35dbfe77@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2ad734a2b3ce31199c34910fa61718d367a6e909
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:25 2019 +0800

    tipc: fix uninit-value in tipc_nl_compat_link_reset_stats
    
    commit 8b66fee7f8ee18f9c51260e7a43ab37db5177a05 upstream.
    
    syzbot reports following splat:
    
    BUG: KMSAN: uninit-value in strlen+0x3b/0xa0 lib/string.c:486
    CPU: 1 PID: 11057 Comm: syz-executor0 Not tainted 4.20.0-rc7+ #2
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x173/0x1d0 lib/dump_stack.c:113
     kmsan_report+0x12e/0x2a0 mm/kmsan/kmsan.c:613
     __msan_warning+0x82/0xf0 mm/kmsan/kmsan_instr.c:295
     strlen+0x3b/0xa0 lib/string.c:486
     nla_put_string include/net/netlink.h:1154 [inline]
     tipc_nl_compat_link_reset_stats+0x1f0/0x360 net/tipc/netlink_compat.c:760
     __tipc_nl_compat_doit net/tipc/netlink_compat.c:311 [inline]
     tipc_nl_compat_doit+0x3aa/0xaf0 net/tipc/netlink_compat.c:344
     tipc_nl_compat_handle net/tipc/netlink_compat.c:1107 [inline]
     tipc_nl_compat_recv+0x14d7/0x2760 net/tipc/netlink_compat.c:1210
     genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
     genl_rcv_msg+0x185f/0x1a60 net/netlink/genetlink.c:626
     netlink_rcv_skb+0x444/0x640 net/netlink/af_netlink.c:2477
     genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
     netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]
     netlink_unicast+0xf40/0x1020 net/netlink/af_netlink.c:1336
     netlink_sendmsg+0x127f/0x1300 net/netlink/af_netlink.c:1917
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xdb9/0x11b0 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x305/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbc/0xf0 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    RIP: 0033:0x457ec9
    Code: 6d b7 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 3b b7 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007f2557338c78 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 0000000000457ec9
    RDX: 0000000000000000 RSI: 00000000200001c0 RDI: 0000000000000003
    RBP: 000000000073bf00 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007f25573396d4
    R13: 00000000004cb478 R14: 00000000004d86c8 R15: 00000000ffffffff
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:204 [inline]
     kmsan_internal_poison_shadow+0x92/0x150 mm/kmsan/kmsan.c:158
     kmsan_kmalloc+0xa6/0x130 mm/kmsan/kmsan_hooks.c:176
     kmsan_slab_alloc+0xe/0x10 mm/kmsan/kmsan_hooks.c:185
     slab_post_alloc_hook mm/slab.h:446 [inline]
     slab_alloc_node mm/slub.c:2759 [inline]
     __kmalloc_node_track_caller+0xe18/0x1030 mm/slub.c:4383
     __kmalloc_reserve net/core/skbuff.c:137 [inline]
     __alloc_skb+0x309/0xa20 net/core/skbuff.c:205
     alloc_skb include/linux/skbuff.h:998 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1182 [inline]
     netlink_sendmsg+0xb82/0x1300 net/netlink/af_netlink.c:1892
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xdb9/0x11b0 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x305/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbc/0xf0 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    
    The uninitialised access happened in tipc_nl_compat_link_reset_stats:
        nla_put_string(skb, TIPC_NLA_LINK_NAME, name)
    
    This is because name string is not validated before it's used.
    
    Reported-by: syzbot+e01d94b5a4c266be6e4c@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 21172412a727d37b4a28e367f5a68fdc1af36b11
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:29 2019 +0800

    tipc: fix uninit-value in tipc_nl_compat_doit
    
    commit 2753ca5d9009c180dbfd4c802c80983b4b6108d1 upstream.
    
    BUG: KMSAN: uninit-value in tipc_nl_compat_doit+0x404/0xa10 net/tipc/netlink_compat.c:335
    CPU: 0 PID: 4514 Comm: syz-executor485 Not tainted 4.16.0+ #87
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:17 [inline]
     dump_stack+0x185/0x1d0 lib/dump_stack.c:53
     kmsan_report+0x142/0x240 mm/kmsan/kmsan.c:1067
     __msan_warning_32+0x6c/0xb0 mm/kmsan/kmsan_instr.c:683
     tipc_nl_compat_doit+0x404/0xa10 net/tipc/netlink_compat.c:335
     tipc_nl_compat_recv+0x164b/0x2700 net/tipc/netlink_compat.c:1153
     genl_family_rcv_msg net/netlink/genetlink.c:599 [inline]
     genl_rcv_msg+0x1686/0x1810 net/netlink/genetlink.c:624
     netlink_rcv_skb+0x378/0x600 net/netlink/af_netlink.c:2447
     genl_rcv+0x63/0x80 net/netlink/genetlink.c:635
     netlink_unicast_kernel net/netlink/af_netlink.c:1311 [inline]
     netlink_unicast+0x166b/0x1740 net/netlink/af_netlink.c:1337
     netlink_sendmsg+0x1048/0x1310 net/netlink/af_netlink.c:1900
     sock_sendmsg_nosec net/socket.c:630 [inline]
     sock_sendmsg net/socket.c:640 [inline]
     ___sys_sendmsg+0xec0/0x1310 net/socket.c:2046
     __sys_sendmsg net/socket.c:2080 [inline]
     SYSC_sendmsg+0x2a3/0x3d0 net/socket.c:2091
     SyS_sendmsg+0x54/0x80 net/socket.c:2087
     do_syscall_64+0x309/0x430 arch/x86/entry/common.c:287
     entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    RIP: 0033:0x43fda9
    RSP: 002b:00007ffd0c184ba8 EFLAGS: 00000213 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00000000004002c8 RCX: 000000000043fda9
    RDX: 0000000000000000 RSI: 0000000020023000 RDI: 0000000000000003
    RBP: 00000000006ca018 R08: 00000000004002c8 R09: 00000000004002c8
    R10: 00000000004002c8 R11: 0000000000000213 R12: 00000000004016d0
    R13: 0000000000401760 R14: 0000000000000000 R15: 0000000000000000
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:278 [inline]
     kmsan_internal_poison_shadow+0xb8/0x1b0 mm/kmsan/kmsan.c:188
     kmsan_kmalloc+0x94/0x100 mm/kmsan/kmsan.c:314
     kmsan_slab_alloc+0x11/0x20 mm/kmsan/kmsan.c:321
     slab_post_alloc_hook mm/slab.h:445 [inline]
     slab_alloc_node mm/slub.c:2737 [inline]
     __kmalloc_node_track_caller+0xaed/0x11c0 mm/slub.c:4369
     __kmalloc_reserve net/core/skbuff.c:138 [inline]
     __alloc_skb+0x2cf/0x9f0 net/core/skbuff.c:206
     alloc_skb include/linux/skbuff.h:984 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1183 [inline]
     netlink_sendmsg+0x9a6/0x1310 net/netlink/af_netlink.c:1875
     sock_sendmsg_nosec net/socket.c:630 [inline]
     sock_sendmsg net/socket.c:640 [inline]
     ___sys_sendmsg+0xec0/0x1310 net/socket.c:2046
     __sys_sendmsg net/socket.c:2080 [inline]
     SYSC_sendmsg+0x2a3/0x3d0 net/socket.c:2091
     SyS_sendmsg+0x54/0x80 net/socket.c:2087
     do_syscall_64+0x309/0x430 arch/x86/entry/common.c:287
     entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    
    In tipc_nl_compat_recv(), when the len variable returned by
    nlmsg_attrlen() is 0, the message is still treated as a valid one,
    which is obviously unresonable. When len is zero, it means the
    message not only doesn't contain any valid TLV payload, but also
    TLV header is not included. Under this stituation, tlv_type field
    in TLV header is still accessed in tipc_nl_compat_dumpit() or
    tipc_nl_compat_doit(), but the field space is obviously illegal.
    Of course, it is not initialized.
    
    Reported-by: syzbot+bca0dc46634781f08b38@syzkaller.appspotmail.com
    Reported-by: syzbot+6bdb590321a7ae40c1a6@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2d5fc1d492d194aa2986c5a9d8a48a60e9143a72
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:28 2019 +0800

    tipc: fix uninit-value in tipc_nl_compat_name_table_dump
    
    commit 974cb0e3e7c963ced06c4e32c5b2884173fa5e01 upstream.
    
    syzbot reported:
    
    BUG: KMSAN: uninit-value in __arch_swab32 arch/x86/include/uapi/asm/swab.h:10 [inline]
    BUG: KMSAN: uninit-value in __fswab32 include/uapi/linux/swab.h:59 [inline]
    BUG: KMSAN: uninit-value in tipc_nl_compat_name_table_dump+0x4a8/0xba0 net/tipc/netlink_compat.c:826
    CPU: 0 PID: 6290 Comm: syz-executor848 Not tainted 4.19.0-rc8+ #70
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x306/0x460 lib/dump_stack.c:113
     kmsan_report+0x1a2/0x2e0 mm/kmsan/kmsan.c:917
     __msan_warning+0x7c/0xe0 mm/kmsan/kmsan_instr.c:500
     __arch_swab32 arch/x86/include/uapi/asm/swab.h:10 [inline]
     __fswab32 include/uapi/linux/swab.h:59 [inline]
     tipc_nl_compat_name_table_dump+0x4a8/0xba0 net/tipc/netlink_compat.c:826
     __tipc_nl_compat_dumpit+0x59e/0xdb0 net/tipc/netlink_compat.c:205
     tipc_nl_compat_dumpit+0x63a/0x820 net/tipc/netlink_compat.c:270
     tipc_nl_compat_handle net/tipc/netlink_compat.c:1151 [inline]
     tipc_nl_compat_recv+0x1402/0x2760 net/tipc/netlink_compat.c:1210
     genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
     genl_rcv_msg+0x185c/0x1a20 net/netlink/genetlink.c:626
     netlink_rcv_skb+0x394/0x640 net/netlink/af_netlink.c:2454
     genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
     netlink_unicast_kernel net/netlink/af_netlink.c:1317 [inline]
     netlink_unicast+0x166d/0x1720 net/netlink/af_netlink.c:1343
     netlink_sendmsg+0x1391/0x1420 net/netlink/af_netlink.c:1908
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xe47/0x1200 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x307/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbe/0x100 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    RIP: 0033:0x440179
    Code: 18 89 d0 c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 fb 13 fc ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007ffecec49318 EFLAGS: 00000213 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00000000004002c8 RCX: 0000000000440179
    RDX: 0000000000000000 RSI: 0000000020000100 RDI: 0000000000000003
    RBP: 00000000006ca018 R08: 0000000000000000 R09: 00000000004002c8
    R10: 0000000000000000 R11: 0000000000000213 R12: 0000000000401a00
    R13: 0000000000401a90 R14: 0000000000000000 R15: 0000000000000000
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:255 [inline]
     kmsan_internal_poison_shadow+0xc8/0x1d0 mm/kmsan/kmsan.c:180
     kmsan_kmalloc+0xa4/0x120 mm/kmsan/kmsan_hooks.c:104
     kmsan_slab_alloc+0x10/0x20 mm/kmsan/kmsan_hooks.c:113
     slab_post_alloc_hook mm/slab.h:446 [inline]
     slab_alloc_node mm/slub.c:2727 [inline]
     __kmalloc_node_track_caller+0xb43/0x1400 mm/slub.c:4360
     __kmalloc_reserve net/core/skbuff.c:138 [inline]
     __alloc_skb+0x422/0xe90 net/core/skbuff.c:206
     alloc_skb include/linux/skbuff.h:996 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1189 [inline]
     netlink_sendmsg+0xcaf/0x1420 net/netlink/af_netlink.c:1883
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xe47/0x1200 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x307/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbe/0x100 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    
    We cannot take for granted the thing that the length of data contained
    in TLV is longer than the size of struct tipc_name_table_query in
    tipc_nl_compat_name_table_dump().
    
    Reported-by: syzbot+06e771a754829716a327@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 04d87429738a20e6443fdbaa25b97d79cc7dc0ce
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:27 2019 +0800

    tipc: fix uninit-value in tipc_nl_compat_link_set
    
    commit edf5ff04a45750ac8ce2435974f001dc9cfbf055 upstream.
    
    syzbot reports following splat:
    
    BUG: KMSAN: uninit-value in strlen+0x3b/0xa0 lib/string.c:486
    CPU: 1 PID: 9306 Comm: syz-executor172 Not tainted 4.20.0-rc7+ #2
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
    Google 01/01/2011
    Call Trace:
      __dump_stack lib/dump_stack.c:77 [inline]
      dump_stack+0x173/0x1d0 lib/dump_stack.c:113
      kmsan_report+0x12e/0x2a0 mm/kmsan/kmsan.c:613
      __msan_warning+0x82/0xf0 mm/kmsan/kmsan_instr.c:313
      strlen+0x3b/0xa0 lib/string.c:486
      nla_put_string include/net/netlink.h:1154 [inline]
      __tipc_nl_compat_link_set net/tipc/netlink_compat.c:708 [inline]
      tipc_nl_compat_link_set+0x929/0x1220 net/tipc/netlink_compat.c:744
      __tipc_nl_compat_doit net/tipc/netlink_compat.c:311 [inline]
      tipc_nl_compat_doit+0x3aa/0xaf0 net/tipc/netlink_compat.c:344
      tipc_nl_compat_handle net/tipc/netlink_compat.c:1107 [inline]
      tipc_nl_compat_recv+0x14d7/0x2760 net/tipc/netlink_compat.c:1210
      genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
      genl_rcv_msg+0x185f/0x1a60 net/netlink/genetlink.c:626
      netlink_rcv_skb+0x444/0x640 net/netlink/af_netlink.c:2477
      genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
      netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]
      netlink_unicast+0xf40/0x1020 net/netlink/af_netlink.c:1336
      netlink_sendmsg+0x127f/0x1300 net/netlink/af_netlink.c:1917
      sock_sendmsg_nosec net/socket.c:621 [inline]
      sock_sendmsg net/socket.c:631 [inline]
      ___sys_sendmsg+0xdb9/0x11b0 net/socket.c:2116
      __sys_sendmsg net/socket.c:2154 [inline]
      __do_sys_sendmsg net/socket.c:2163 [inline]
      __se_sys_sendmsg+0x305/0x460 net/socket.c:2161
      __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
      do_syscall_64+0xbc/0xf0 arch/x86/entry/common.c:291
      entry_SYSCALL_64_after_hwframe+0x63/0xe7
    
    The uninitialised access happened in
        nla_put_string(skb, TIPC_NLA_LINK_NAME, lc->name)
    
    This is because lc->name string is not validated before it's used.
    
    Reported-by: syzbot+d78b8a29241a195aefb8@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7960fb71aad9c346685ae2fc91e9b08b17cf2969
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:26 2019 +0800

    tipc: fix uninit-value in tipc_nl_compat_bearer_enable
    
    commit 0762216c0ad2a2fccd63890648eca491f2c83d9a upstream.
    
    syzbot reported:
    
    BUG: KMSAN: uninit-value in strlen+0x3b/0xa0 lib/string.c:484
    CPU: 1 PID: 6371 Comm: syz-executor652 Not tainted 4.19.0-rc8+ #70
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x306/0x460 lib/dump_stack.c:113
     kmsan_report+0x1a2/0x2e0 mm/kmsan/kmsan.c:917
     __msan_warning+0x7c/0xe0 mm/kmsan/kmsan_instr.c:500
     strlen+0x3b/0xa0 lib/string.c:484
     nla_put_string include/net/netlink.h:1011 [inline]
     tipc_nl_compat_bearer_enable+0x238/0x7b0 net/tipc/netlink_compat.c:389
     __tipc_nl_compat_doit net/tipc/netlink_compat.c:311 [inline]
     tipc_nl_compat_doit+0x39f/0xae0 net/tipc/netlink_compat.c:344
     tipc_nl_compat_recv+0x147c/0x2760 net/tipc/netlink_compat.c:1107
     genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
     genl_rcv_msg+0x185c/0x1a20 net/netlink/genetlink.c:626
     netlink_rcv_skb+0x394/0x640 net/netlink/af_netlink.c:2454
     genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
     netlink_unicast_kernel net/netlink/af_netlink.c:1317 [inline]
     netlink_unicast+0x166d/0x1720 net/netlink/af_netlink.c:1343
     netlink_sendmsg+0x1391/0x1420 net/netlink/af_netlink.c:1908
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xe47/0x1200 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x307/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbe/0x100 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    RIP: 0033:0x440179
    Code: 18 89 d0 c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 fb 13 fc ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007fffef7beee8 EFLAGS: 00000213 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00000000004002c8 RCX: 0000000000440179
    RDX: 0000000000000000 RSI: 0000000020000100 RDI: 0000000000000003
    RBP: 00000000006ca018 R08: 0000000000000000 R09: 00000000004002c8
    R10: 0000000000000000 R11: 0000000000000213 R12: 0000000000401a00
    R13: 0000000000401a90 R14: 0000000000000000 R15: 0000000000000000
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:255 [inline]
     kmsan_internal_poison_shadow+0xc8/0x1d0 mm/kmsan/kmsan.c:180
     kmsan_kmalloc+0xa4/0x120 mm/kmsan/kmsan_hooks.c:104
     kmsan_slab_alloc+0x10/0x20 mm/kmsan/kmsan_hooks.c:113
     slab_post_alloc_hook mm/slab.h:446 [inline]
     slab_alloc_node mm/slub.c:2727 [inline]
     __kmalloc_node_track_caller+0xb43/0x1400 mm/slub.c:4360
     __kmalloc_reserve net/core/skbuff.c:138 [inline]
     __alloc_skb+0x422/0xe90 net/core/skbuff.c:206
     alloc_skb include/linux/skbuff.h:996 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1189 [inline]
     netlink_sendmsg+0xcaf/0x1420 net/netlink/af_netlink.c:1883
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xe47/0x1200 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x307/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbe/0x100 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    
    The root cause is that we don't validate whether bear name is a valid
    string in tipc_nl_compat_bearer_enable().
    
    Meanwhile, we also fix the same issue in the following functions:
    tipc_nl_compat_bearer_disable()
    tipc_nl_compat_link_stat_dump()
    tipc_nl_compat_media_set()
    tipc_nl_compat_bearer_set()
    
    Reported-by: syzbot+b33d5cae0efd35dbfe77@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1d61caf05721bbf570efaef3dcd3fbf61c724c7f
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:25 2019 +0800

    tipc: fix uninit-value in tipc_nl_compat_link_reset_stats
    
    commit 8b66fee7f8ee18f9c51260e7a43ab37db5177a05 upstream.
    
    syzbot reports following splat:
    
    BUG: KMSAN: uninit-value in strlen+0x3b/0xa0 lib/string.c:486
    CPU: 1 PID: 11057 Comm: syz-executor0 Not tainted 4.20.0-rc7+ #2
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x173/0x1d0 lib/dump_stack.c:113
     kmsan_report+0x12e/0x2a0 mm/kmsan/kmsan.c:613
     __msan_warning+0x82/0xf0 mm/kmsan/kmsan_instr.c:295
     strlen+0x3b/0xa0 lib/string.c:486
     nla_put_string include/net/netlink.h:1154 [inline]
     tipc_nl_compat_link_reset_stats+0x1f0/0x360 net/tipc/netlink_compat.c:760
     __tipc_nl_compat_doit net/tipc/netlink_compat.c:311 [inline]
     tipc_nl_compat_doit+0x3aa/0xaf0 net/tipc/netlink_compat.c:344
     tipc_nl_compat_handle net/tipc/netlink_compat.c:1107 [inline]
     tipc_nl_compat_recv+0x14d7/0x2760 net/tipc/netlink_compat.c:1210
     genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
     genl_rcv_msg+0x185f/0x1a60 net/netlink/genetlink.c:626
     netlink_rcv_skb+0x444/0x640 net/netlink/af_netlink.c:2477
     genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
     netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]
     netlink_unicast+0xf40/0x1020 net/netlink/af_netlink.c:1336
     netlink_sendmsg+0x127f/0x1300 net/netlink/af_netlink.c:1917
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xdb9/0x11b0 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x305/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbc/0xf0 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    RIP: 0033:0x457ec9
    Code: 6d b7 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 3b b7 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007f2557338c78 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 0000000000457ec9
    RDX: 0000000000000000 RSI: 00000000200001c0 RDI: 0000000000000003
    RBP: 000000000073bf00 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007f25573396d4
    R13: 00000000004cb478 R14: 00000000004d86c8 R15: 00000000ffffffff
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:204 [inline]
     kmsan_internal_poison_shadow+0x92/0x150 mm/kmsan/kmsan.c:158
     kmsan_kmalloc+0xa6/0x130 mm/kmsan/kmsan_hooks.c:176
     kmsan_slab_alloc+0xe/0x10 mm/kmsan/kmsan_hooks.c:185
     slab_post_alloc_hook mm/slab.h:446 [inline]
     slab_alloc_node mm/slub.c:2759 [inline]
     __kmalloc_node_track_caller+0xe18/0x1030 mm/slub.c:4383
     __kmalloc_reserve net/core/skbuff.c:137 [inline]
     __alloc_skb+0x309/0xa20 net/core/skbuff.c:205
     alloc_skb include/linux/skbuff.h:998 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1182 [inline]
     netlink_sendmsg+0xb82/0x1300 net/netlink/af_netlink.c:1892
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xdb9/0x11b0 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x305/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbc/0xf0 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    
    The uninitialised access happened in tipc_nl_compat_link_reset_stats:
        nla_put_string(skb, TIPC_NLA_LINK_NAME, name)
    
    This is because name string is not validated before it's used.
    
    Reported-by: syzbot+e01d94b5a4c266be6e4c@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9277333652145159098d44a05bb67e9b9cbdfb12
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:24 2019 +0800

    tipc: fix uninit-value in in tipc_conn_rcv_sub
    
    commit a88289f4ddee4165d5f796bd99e09eec3133c16b upstream.
    
    syzbot reported:
    
    BUG: KMSAN: uninit-value in tipc_conn_rcv_sub+0x184/0x950 net/tipc/topsrv.c:373
    CPU: 0 PID: 66 Comm: kworker/u4:4 Not tainted 4.17.0-rc3+ #88
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: tipc_rcv tipc_conn_recv_work
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x185/0x1d0 lib/dump_stack.c:113
     kmsan_report+0x142/0x240 mm/kmsan/kmsan.c:1067
     __msan_warning_32+0x6c/0xb0 mm/kmsan/kmsan_instr.c:683
     tipc_conn_rcv_sub+0x184/0x950 net/tipc/topsrv.c:373
     tipc_conn_rcv_from_sock net/tipc/topsrv.c:409 [inline]
     tipc_conn_recv_work+0x3cd/0x560 net/tipc/topsrv.c:424
     process_one_work+0x12c6/0x1f60 kernel/workqueue.c:2145
     worker_thread+0x113c/0x24f0 kernel/workqueue.c:2279
     kthread+0x539/0x720 kernel/kthread.c:239
     ret_from_fork+0x35/0x40 arch/x86/entry/entry_64.S:412
    
    Local variable description: ----s.i@tipc_conn_recv_work
    Variable was created at:
     tipc_conn_recv_work+0x65/0x560 net/tipc/topsrv.c:419
     process_one_work+0x12c6/0x1f60 kernel/workqueue.c:2145
    
    In tipc_conn_rcv_from_sock(), it always supposes the length of message
    received from sock_recvmsg() is not smaller than the size of struct
    tipc_subscr. However, this assumption is false. Especially when the
    length of received message is shorter than struct tipc_subscr size,
    we will end up touching uninitialized fields in tipc_conn_rcv_sub().
    
    Reported-by: syzbot+8951a3065ee7fd6d6e23@syzkaller.appspotmail.com
    Reported-by: syzbot+75e6e042c5bbf691fc82@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a5fe02be40a8681905efb94ebdc7d05af1d9b3f4
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:29 2019 +0800

    tipc: fix uninit-value in tipc_nl_compat_doit
    
    commit 2753ca5d9009c180dbfd4c802c80983b4b6108d1 upstream.
    
    BUG: KMSAN: uninit-value in tipc_nl_compat_doit+0x404/0xa10 net/tipc/netlink_compat.c:335
    CPU: 0 PID: 4514 Comm: syz-executor485 Not tainted 4.16.0+ #87
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:17 [inline]
     dump_stack+0x185/0x1d0 lib/dump_stack.c:53
     kmsan_report+0x142/0x240 mm/kmsan/kmsan.c:1067
     __msan_warning_32+0x6c/0xb0 mm/kmsan/kmsan_instr.c:683
     tipc_nl_compat_doit+0x404/0xa10 net/tipc/netlink_compat.c:335
     tipc_nl_compat_recv+0x164b/0x2700 net/tipc/netlink_compat.c:1153
     genl_family_rcv_msg net/netlink/genetlink.c:599 [inline]
     genl_rcv_msg+0x1686/0x1810 net/netlink/genetlink.c:624
     netlink_rcv_skb+0x378/0x600 net/netlink/af_netlink.c:2447
     genl_rcv+0x63/0x80 net/netlink/genetlink.c:635
     netlink_unicast_kernel net/netlink/af_netlink.c:1311 [inline]
     netlink_unicast+0x166b/0x1740 net/netlink/af_netlink.c:1337
     netlink_sendmsg+0x1048/0x1310 net/netlink/af_netlink.c:1900
     sock_sendmsg_nosec net/socket.c:630 [inline]
     sock_sendmsg net/socket.c:640 [inline]
     ___sys_sendmsg+0xec0/0x1310 net/socket.c:2046
     __sys_sendmsg net/socket.c:2080 [inline]
     SYSC_sendmsg+0x2a3/0x3d0 net/socket.c:2091
     SyS_sendmsg+0x54/0x80 net/socket.c:2087
     do_syscall_64+0x309/0x430 arch/x86/entry/common.c:287
     entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    RIP: 0033:0x43fda9
    RSP: 002b:00007ffd0c184ba8 EFLAGS: 00000213 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00000000004002c8 RCX: 000000000043fda9
    RDX: 0000000000000000 RSI: 0000000020023000 RDI: 0000000000000003
    RBP: 00000000006ca018 R08: 00000000004002c8 R09: 00000000004002c8
    R10: 00000000004002c8 R11: 0000000000000213 R12: 00000000004016d0
    R13: 0000000000401760 R14: 0000000000000000 R15: 0000000000000000
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:278 [inline]
     kmsan_internal_poison_shadow+0xb8/0x1b0 mm/kmsan/kmsan.c:188
     kmsan_kmalloc+0x94/0x100 mm/kmsan/kmsan.c:314
     kmsan_slab_alloc+0x11/0x20 mm/kmsan/kmsan.c:321
     slab_post_alloc_hook mm/slab.h:445 [inline]
     slab_alloc_node mm/slub.c:2737 [inline]
     __kmalloc_node_track_caller+0xaed/0x11c0 mm/slub.c:4369
     __kmalloc_reserve net/core/skbuff.c:138 [inline]
     __alloc_skb+0x2cf/0x9f0 net/core/skbuff.c:206
     alloc_skb include/linux/skbuff.h:984 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1183 [inline]
     netlink_sendmsg+0x9a6/0x1310 net/netlink/af_netlink.c:1875
     sock_sendmsg_nosec net/socket.c:630 [inline]
     sock_sendmsg net/socket.c:640 [inline]
     ___sys_sendmsg+0xec0/0x1310 net/socket.c:2046
     __sys_sendmsg net/socket.c:2080 [inline]
     SYSC_sendmsg+0x2a3/0x3d0 net/socket.c:2091
     SyS_sendmsg+0x54/0x80 net/socket.c:2087
     do_syscall_64+0x309/0x430 arch/x86/entry/common.c:287
     entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    
    In tipc_nl_compat_recv(), when the len variable returned by
    nlmsg_attrlen() is 0, the message is still treated as a valid one,
    which is obviously unresonable. When len is zero, it means the
    message not only doesn't contain any valid TLV payload, but also
    TLV header is not included. Under this stituation, tlv_type field
    in TLV header is still accessed in tipc_nl_compat_dumpit() or
    tipc_nl_compat_doit(), but the field space is obviously illegal.
    Of course, it is not initialized.
    
    Reported-by: syzbot+bca0dc46634781f08b38@syzkaller.appspotmail.com
    Reported-by: syzbot+6bdb590321a7ae40c1a6@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5486e8d46560ca2b4d86cbd7d3a66d9913b2ac65
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:28 2019 +0800

    tipc: fix uninit-value in tipc_nl_compat_name_table_dump
    
    commit 974cb0e3e7c963ced06c4e32c5b2884173fa5e01 upstream.
    
    syzbot reported:
    
    BUG: KMSAN: uninit-value in __arch_swab32 arch/x86/include/uapi/asm/swab.h:10 [inline]
    BUG: KMSAN: uninit-value in __fswab32 include/uapi/linux/swab.h:59 [inline]
    BUG: KMSAN: uninit-value in tipc_nl_compat_name_table_dump+0x4a8/0xba0 net/tipc/netlink_compat.c:826
    CPU: 0 PID: 6290 Comm: syz-executor848 Not tainted 4.19.0-rc8+ #70
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x306/0x460 lib/dump_stack.c:113
     kmsan_report+0x1a2/0x2e0 mm/kmsan/kmsan.c:917
     __msan_warning+0x7c/0xe0 mm/kmsan/kmsan_instr.c:500
     __arch_swab32 arch/x86/include/uapi/asm/swab.h:10 [inline]
     __fswab32 include/uapi/linux/swab.h:59 [inline]
     tipc_nl_compat_name_table_dump+0x4a8/0xba0 net/tipc/netlink_compat.c:826
     __tipc_nl_compat_dumpit+0x59e/0xdb0 net/tipc/netlink_compat.c:205
     tipc_nl_compat_dumpit+0x63a/0x820 net/tipc/netlink_compat.c:270
     tipc_nl_compat_handle net/tipc/netlink_compat.c:1151 [inline]
     tipc_nl_compat_recv+0x1402/0x2760 net/tipc/netlink_compat.c:1210
     genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
     genl_rcv_msg+0x185c/0x1a20 net/netlink/genetlink.c:626
     netlink_rcv_skb+0x394/0x640 net/netlink/af_netlink.c:2454
     genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
     netlink_unicast_kernel net/netlink/af_netlink.c:1317 [inline]
     netlink_unicast+0x166d/0x1720 net/netlink/af_netlink.c:1343
     netlink_sendmsg+0x1391/0x1420 net/netlink/af_netlink.c:1908
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xe47/0x1200 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x307/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbe/0x100 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    RIP: 0033:0x440179
    Code: 18 89 d0 c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 fb 13 fc ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007ffecec49318 EFLAGS: 00000213 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00000000004002c8 RCX: 0000000000440179
    RDX: 0000000000000000 RSI: 0000000020000100 RDI: 0000000000000003
    RBP: 00000000006ca018 R08: 0000000000000000 R09: 00000000004002c8
    R10: 0000000000000000 R11: 0000000000000213 R12: 0000000000401a00
    R13: 0000000000401a90 R14: 0000000000000000 R15: 0000000000000000
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:255 [inline]
     kmsan_internal_poison_shadow+0xc8/0x1d0 mm/kmsan/kmsan.c:180
     kmsan_kmalloc+0xa4/0x120 mm/kmsan/kmsan_hooks.c:104
     kmsan_slab_alloc+0x10/0x20 mm/kmsan/kmsan_hooks.c:113
     slab_post_alloc_hook mm/slab.h:446 [inline]
     slab_alloc_node mm/slub.c:2727 [inline]
     __kmalloc_node_track_caller+0xb43/0x1400 mm/slub.c:4360
     __kmalloc_reserve net/core/skbuff.c:138 [inline]
     __alloc_skb+0x422/0xe90 net/core/skbuff.c:206
     alloc_skb include/linux/skbuff.h:996 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1189 [inline]
     netlink_sendmsg+0xcaf/0x1420 net/netlink/af_netlink.c:1883
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xe47/0x1200 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x307/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbe/0x100 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    
    We cannot take for granted the thing that the length of data contained
    in TLV is longer than the size of struct tipc_name_table_query in
    tipc_nl_compat_name_table_dump().
    
    Reported-by: syzbot+06e771a754829716a327@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c9d3883792bf57479d13160cd6e3e0a999d5e269
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:27 2019 +0800

    tipc: fix uninit-value in tipc_nl_compat_link_set
    
    commit edf5ff04a45750ac8ce2435974f001dc9cfbf055 upstream.
    
    syzbot reports following splat:
    
    BUG: KMSAN: uninit-value in strlen+0x3b/0xa0 lib/string.c:486
    CPU: 1 PID: 9306 Comm: syz-executor172 Not tainted 4.20.0-rc7+ #2
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
    Google 01/01/2011
    Call Trace:
      __dump_stack lib/dump_stack.c:77 [inline]
      dump_stack+0x173/0x1d0 lib/dump_stack.c:113
      kmsan_report+0x12e/0x2a0 mm/kmsan/kmsan.c:613
      __msan_warning+0x82/0xf0 mm/kmsan/kmsan_instr.c:313
      strlen+0x3b/0xa0 lib/string.c:486
      nla_put_string include/net/netlink.h:1154 [inline]
      __tipc_nl_compat_link_set net/tipc/netlink_compat.c:708 [inline]
      tipc_nl_compat_link_set+0x929/0x1220 net/tipc/netlink_compat.c:744
      __tipc_nl_compat_doit net/tipc/netlink_compat.c:311 [inline]
      tipc_nl_compat_doit+0x3aa/0xaf0 net/tipc/netlink_compat.c:344
      tipc_nl_compat_handle net/tipc/netlink_compat.c:1107 [inline]
      tipc_nl_compat_recv+0x14d7/0x2760 net/tipc/netlink_compat.c:1210
      genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
      genl_rcv_msg+0x185f/0x1a60 net/netlink/genetlink.c:626
      netlink_rcv_skb+0x444/0x640 net/netlink/af_netlink.c:2477
      genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
      netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]
      netlink_unicast+0xf40/0x1020 net/netlink/af_netlink.c:1336
      netlink_sendmsg+0x127f/0x1300 net/netlink/af_netlink.c:1917
      sock_sendmsg_nosec net/socket.c:621 [inline]
      sock_sendmsg net/socket.c:631 [inline]
      ___sys_sendmsg+0xdb9/0x11b0 net/socket.c:2116
      __sys_sendmsg net/socket.c:2154 [inline]
      __do_sys_sendmsg net/socket.c:2163 [inline]
      __se_sys_sendmsg+0x305/0x460 net/socket.c:2161
      __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
      do_syscall_64+0xbc/0xf0 arch/x86/entry/common.c:291
      entry_SYSCALL_64_after_hwframe+0x63/0xe7
    
    The uninitialised access happened in
        nla_put_string(skb, TIPC_NLA_LINK_NAME, lc->name)
    
    This is because lc->name string is not validated before it's used.
    
    Reported-by: syzbot+d78b8a29241a195aefb8@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 86a25533a1bab939597d0df4e9c1ea84e93494c3
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:26 2019 +0800

    tipc: fix uninit-value in tipc_nl_compat_bearer_enable
    
    commit 0762216c0ad2a2fccd63890648eca491f2c83d9a upstream.
    
    syzbot reported:
    
    BUG: KMSAN: uninit-value in strlen+0x3b/0xa0 lib/string.c:484
    CPU: 1 PID: 6371 Comm: syz-executor652 Not tainted 4.19.0-rc8+ #70
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x306/0x460 lib/dump_stack.c:113
     kmsan_report+0x1a2/0x2e0 mm/kmsan/kmsan.c:917
     __msan_warning+0x7c/0xe0 mm/kmsan/kmsan_instr.c:500
     strlen+0x3b/0xa0 lib/string.c:484
     nla_put_string include/net/netlink.h:1011 [inline]
     tipc_nl_compat_bearer_enable+0x238/0x7b0 net/tipc/netlink_compat.c:389
     __tipc_nl_compat_doit net/tipc/netlink_compat.c:311 [inline]
     tipc_nl_compat_doit+0x39f/0xae0 net/tipc/netlink_compat.c:344
     tipc_nl_compat_recv+0x147c/0x2760 net/tipc/netlink_compat.c:1107
     genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
     genl_rcv_msg+0x185c/0x1a20 net/netlink/genetlink.c:626
     netlink_rcv_skb+0x394/0x640 net/netlink/af_netlink.c:2454
     genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
     netlink_unicast_kernel net/netlink/af_netlink.c:1317 [inline]
     netlink_unicast+0x166d/0x1720 net/netlink/af_netlink.c:1343
     netlink_sendmsg+0x1391/0x1420 net/netlink/af_netlink.c:1908
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xe47/0x1200 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x307/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbe/0x100 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    RIP: 0033:0x440179
    Code: 18 89 d0 c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 fb 13 fc ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007fffef7beee8 EFLAGS: 00000213 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00000000004002c8 RCX: 0000000000440179
    RDX: 0000000000000000 RSI: 0000000020000100 RDI: 0000000000000003
    RBP: 00000000006ca018 R08: 0000000000000000 R09: 00000000004002c8
    R10: 0000000000000000 R11: 0000000000000213 R12: 0000000000401a00
    R13: 0000000000401a90 R14: 0000000000000000 R15: 0000000000000000
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:255 [inline]
     kmsan_internal_poison_shadow+0xc8/0x1d0 mm/kmsan/kmsan.c:180
     kmsan_kmalloc+0xa4/0x120 mm/kmsan/kmsan_hooks.c:104
     kmsan_slab_alloc+0x10/0x20 mm/kmsan/kmsan_hooks.c:113
     slab_post_alloc_hook mm/slab.h:446 [inline]
     slab_alloc_node mm/slub.c:2727 [inline]
     __kmalloc_node_track_caller+0xb43/0x1400 mm/slub.c:4360
     __kmalloc_reserve net/core/skbuff.c:138 [inline]
     __alloc_skb+0x422/0xe90 net/core/skbuff.c:206
     alloc_skb include/linux/skbuff.h:996 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1189 [inline]
     netlink_sendmsg+0xcaf/0x1420 net/netlink/af_netlink.c:1883
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xe47/0x1200 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x307/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbe/0x100 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    
    The root cause is that we don't validate whether bear name is a valid
    string in tipc_nl_compat_bearer_enable().
    
    Meanwhile, we also fix the same issue in the following functions:
    tipc_nl_compat_bearer_disable()
    tipc_nl_compat_link_stat_dump()
    tipc_nl_compat_media_set()
    tipc_nl_compat_bearer_set()
    
    Reported-by: syzbot+b33d5cae0efd35dbfe77@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0d32cdd25dba44ecba47e923cdd7bef64b938d72
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:25 2019 +0800

    tipc: fix uninit-value in tipc_nl_compat_link_reset_stats
    
    commit 8b66fee7f8ee18f9c51260e7a43ab37db5177a05 upstream.
    
    syzbot reports following splat:
    
    BUG: KMSAN: uninit-value in strlen+0x3b/0xa0 lib/string.c:486
    CPU: 1 PID: 11057 Comm: syz-executor0 Not tainted 4.20.0-rc7+ #2
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x173/0x1d0 lib/dump_stack.c:113
     kmsan_report+0x12e/0x2a0 mm/kmsan/kmsan.c:613
     __msan_warning+0x82/0xf0 mm/kmsan/kmsan_instr.c:295
     strlen+0x3b/0xa0 lib/string.c:486
     nla_put_string include/net/netlink.h:1154 [inline]
     tipc_nl_compat_link_reset_stats+0x1f0/0x360 net/tipc/netlink_compat.c:760
     __tipc_nl_compat_doit net/tipc/netlink_compat.c:311 [inline]
     tipc_nl_compat_doit+0x3aa/0xaf0 net/tipc/netlink_compat.c:344
     tipc_nl_compat_handle net/tipc/netlink_compat.c:1107 [inline]
     tipc_nl_compat_recv+0x14d7/0x2760 net/tipc/netlink_compat.c:1210
     genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
     genl_rcv_msg+0x185f/0x1a60 net/netlink/genetlink.c:626
     netlink_rcv_skb+0x444/0x640 net/netlink/af_netlink.c:2477
     genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
     netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]
     netlink_unicast+0xf40/0x1020 net/netlink/af_netlink.c:1336
     netlink_sendmsg+0x127f/0x1300 net/netlink/af_netlink.c:1917
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xdb9/0x11b0 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x305/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbc/0xf0 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    RIP: 0033:0x457ec9
    Code: 6d b7 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 3b b7 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007f2557338c78 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 0000000000457ec9
    RDX: 0000000000000000 RSI: 00000000200001c0 RDI: 0000000000000003
    RBP: 000000000073bf00 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007f25573396d4
    R13: 00000000004cb478 R14: 00000000004d86c8 R15: 00000000ffffffff
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:204 [inline]
     kmsan_internal_poison_shadow+0x92/0x150 mm/kmsan/kmsan.c:158
     kmsan_kmalloc+0xa6/0x130 mm/kmsan/kmsan_hooks.c:176
     kmsan_slab_alloc+0xe/0x10 mm/kmsan/kmsan_hooks.c:185
     slab_post_alloc_hook mm/slab.h:446 [inline]
     slab_alloc_node mm/slub.c:2759 [inline]
     __kmalloc_node_track_caller+0xe18/0x1030 mm/slub.c:4383
     __kmalloc_reserve net/core/skbuff.c:137 [inline]
     __alloc_skb+0x309/0xa20 net/core/skbuff.c:205
     alloc_skb include/linux/skbuff.h:998 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1182 [inline]
     netlink_sendmsg+0xb82/0x1300 net/netlink/af_netlink.c:1892
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xdb9/0x11b0 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x305/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbc/0xf0 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    
    The uninitialised access happened in tipc_nl_compat_link_reset_stats:
        nla_put_string(skb, TIPC_NLA_LINK_NAME, name)
    
    This is because name string is not validated before it's used.
    
    Reported-by: syzbot+e01d94b5a4c266be6e4c@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e4ce0e2d2d74194741e8ca523a51942275758a9c
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:24 2019 +0800

    tipc: fix uninit-value in in tipc_conn_rcv_sub
    
    commit a88289f4ddee4165d5f796bd99e09eec3133c16b upstream.
    
    syzbot reported:
    
    BUG: KMSAN: uninit-value in tipc_conn_rcv_sub+0x184/0x950 net/tipc/topsrv.c:373
    CPU: 0 PID: 66 Comm: kworker/u4:4 Not tainted 4.17.0-rc3+ #88
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: tipc_rcv tipc_conn_recv_work
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x185/0x1d0 lib/dump_stack.c:113
     kmsan_report+0x142/0x240 mm/kmsan/kmsan.c:1067
     __msan_warning_32+0x6c/0xb0 mm/kmsan/kmsan_instr.c:683
     tipc_conn_rcv_sub+0x184/0x950 net/tipc/topsrv.c:373
     tipc_conn_rcv_from_sock net/tipc/topsrv.c:409 [inline]
     tipc_conn_recv_work+0x3cd/0x560 net/tipc/topsrv.c:424
     process_one_work+0x12c6/0x1f60 kernel/workqueue.c:2145
     worker_thread+0x113c/0x24f0 kernel/workqueue.c:2279
     kthread+0x539/0x720 kernel/kthread.c:239
     ret_from_fork+0x35/0x40 arch/x86/entry/entry_64.S:412
    
    Local variable description: ----s.i@tipc_conn_recv_work
    Variable was created at:
     tipc_conn_recv_work+0x65/0x560 net/tipc/topsrv.c:419
     process_one_work+0x12c6/0x1f60 kernel/workqueue.c:2145
    
    In tipc_conn_rcv_from_sock(), it always supposes the length of message
    received from sock_recvmsg() is not smaller than the size of struct
    tipc_subscr. However, this assumption is false. Especially when the
    length of received message is shorter than struct tipc_subscr size,
    we will end up touching uninitialized fields in tipc_conn_rcv_sub().
    
    Reported-by: syzbot+8951a3065ee7fd6d6e23@syzkaller.appspotmail.com
    Reported-by: syzbot+75e6e042c5bbf691fc82@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7d0ae236ed13d7645fb73b85e7c95deee46c4656
Merge: bb617b9b4519 6436408e814b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jan 21 12:52:31 2019 +1300

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Fix endless loop in nf_tables, from Phil Sutter.
    
     2) Fix cross namespace ip6_gre tunnel hash list corruption, from
        Olivier Matz.
    
     3) Don't be too strict in phy_start_aneg() otherwise we might not allow
        restarting auto negotiation. From Heiner Kallweit.
    
     4) Fix various KMSAN uninitialized value cases in tipc, from Ying Xue.
    
     5) Memory leak in act_tunnel_key, from Davide Caratti.
    
     6) Handle chip errata of mv88e6390 PHY, from Andrew Lunn.
    
     7) Remove linear SKB assumption in fou/fou6, from Eric Dumazet.
    
     8) Missing udplite rehash callbacks, from Alexey Kodanev.
    
     9) Log dirty pages properly in vhost, from Jason Wang.
    
    10) Use consume_skb() in neigh_probe() as this is a normal free not a
        drop, from Yang Wei. Likewise in macvlan_process_broadcast().
    
    11) Missing device_del() in mdiobus_register() error paths, from Thomas
        Petazzoni.
    
    12) Fix checksum handling of short packets in mlx5, from Cong Wang.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (96 commits)
      bpf: in __bpf_redirect_no_mac pull mac only if present
      virtio_net: bulk free tx skbs
      net: phy: phy driver features are mandatory
      isdn: avm: Fix string plus integer warning from Clang
      net/mlx5e: Fix cb_ident duplicate in indirect block register
      net/mlx5e: Fix wrong (zero) TX drop counter indication for representor
      net/mlx5e: Fix wrong error code return on FEC query failure
      net/mlx5e: Force CHECKSUM_UNNECESSARY for short ethernet frames
      tools: bpftool: Cleanup license mess
      bpf: fix inner map masking to prevent oob under speculation
      bpf: pull in pkt_sched.h header for tooling to fix bpftool build
      selftests: forwarding: Add a test case for externally learned FDB entries
      selftests: mlxsw: Test FDB offload indication
      mlxsw: spectrum_switchdev: Do not treat static FDB entries as sticky
      net: bridge: Mark FDB entries that were added by user as such
      mlxsw: spectrum_fid: Update dummy FID index
      mlxsw: pci: Return error on PCI reset timeout
      mlxsw: pci: Increase PCI SW reset timeout
      mlxsw: pci: Ring CQ's doorbell before RDQ's
      MAINTAINERS: update email addresses of liquidio driver maintainers
      ...

commit d4fb30f6f1b1822629508e562e3228f2a44cf620
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Thu Jan 17 20:57:08 2019 +0800

    tipc: remove unneeded semicolon in trace.c
    
    Remove unneeded semicolon
    
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 70a44f9f6e4297e013de29088608ab2c6fb642f7
Merge: d62f38c295e5 2753ca5d9009
Author: David S. Miller <davem@davemloft.net>
Date:   Tue Jan 15 20:29:21 2019 -0800

    Merge branch 'tipc-uninit-values'
    
    Ying Xue says:
    
    ====================
    tipc: fix uninit-value issues reported by syzbot
    
    Recently, syzbot complained that TIPC module exits several issues
    associated with uninit-value type. So, in this series, we try to
    fix them as many as possible.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2753ca5d9009c180dbfd4c802c80983b4b6108d1
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:29 2019 +0800

    tipc: fix uninit-value in tipc_nl_compat_doit
    
    BUG: KMSAN: uninit-value in tipc_nl_compat_doit+0x404/0xa10 net/tipc/netlink_compat.c:335
    CPU: 0 PID: 4514 Comm: syz-executor485 Not tainted 4.16.0+ #87
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:17 [inline]
     dump_stack+0x185/0x1d0 lib/dump_stack.c:53
     kmsan_report+0x142/0x240 mm/kmsan/kmsan.c:1067
     __msan_warning_32+0x6c/0xb0 mm/kmsan/kmsan_instr.c:683
     tipc_nl_compat_doit+0x404/0xa10 net/tipc/netlink_compat.c:335
     tipc_nl_compat_recv+0x164b/0x2700 net/tipc/netlink_compat.c:1153
     genl_family_rcv_msg net/netlink/genetlink.c:599 [inline]
     genl_rcv_msg+0x1686/0x1810 net/netlink/genetlink.c:624
     netlink_rcv_skb+0x378/0x600 net/netlink/af_netlink.c:2447
     genl_rcv+0x63/0x80 net/netlink/genetlink.c:635
     netlink_unicast_kernel net/netlink/af_netlink.c:1311 [inline]
     netlink_unicast+0x166b/0x1740 net/netlink/af_netlink.c:1337
     netlink_sendmsg+0x1048/0x1310 net/netlink/af_netlink.c:1900
     sock_sendmsg_nosec net/socket.c:630 [inline]
     sock_sendmsg net/socket.c:640 [inline]
     ___sys_sendmsg+0xec0/0x1310 net/socket.c:2046
     __sys_sendmsg net/socket.c:2080 [inline]
     SYSC_sendmsg+0x2a3/0x3d0 net/socket.c:2091
     SyS_sendmsg+0x54/0x80 net/socket.c:2087
     do_syscall_64+0x309/0x430 arch/x86/entry/common.c:287
     entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    RIP: 0033:0x43fda9
    RSP: 002b:00007ffd0c184ba8 EFLAGS: 00000213 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00000000004002c8 RCX: 000000000043fda9
    RDX: 0000000000000000 RSI: 0000000020023000 RDI: 0000000000000003
    RBP: 00000000006ca018 R08: 00000000004002c8 R09: 00000000004002c8
    R10: 00000000004002c8 R11: 0000000000000213 R12: 00000000004016d0
    R13: 0000000000401760 R14: 0000000000000000 R15: 0000000000000000
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:278 [inline]
     kmsan_internal_poison_shadow+0xb8/0x1b0 mm/kmsan/kmsan.c:188
     kmsan_kmalloc+0x94/0x100 mm/kmsan/kmsan.c:314
     kmsan_slab_alloc+0x11/0x20 mm/kmsan/kmsan.c:321
     slab_post_alloc_hook mm/slab.h:445 [inline]
     slab_alloc_node mm/slub.c:2737 [inline]
     __kmalloc_node_track_caller+0xaed/0x11c0 mm/slub.c:4369
     __kmalloc_reserve net/core/skbuff.c:138 [inline]
     __alloc_skb+0x2cf/0x9f0 net/core/skbuff.c:206
     alloc_skb include/linux/skbuff.h:984 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1183 [inline]
     netlink_sendmsg+0x9a6/0x1310 net/netlink/af_netlink.c:1875
     sock_sendmsg_nosec net/socket.c:630 [inline]
     sock_sendmsg net/socket.c:640 [inline]
     ___sys_sendmsg+0xec0/0x1310 net/socket.c:2046
     __sys_sendmsg net/socket.c:2080 [inline]
     SYSC_sendmsg+0x2a3/0x3d0 net/socket.c:2091
     SyS_sendmsg+0x54/0x80 net/socket.c:2087
     do_syscall_64+0x309/0x430 arch/x86/entry/common.c:287
     entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    
    In tipc_nl_compat_recv(), when the len variable returned by
    nlmsg_attrlen() is 0, the message is still treated as a valid one,
    which is obviously unresonable. When len is zero, it means the
    message not only doesn't contain any valid TLV payload, but also
    TLV header is not included. Under this stituation, tlv_type field
    in TLV header is still accessed in tipc_nl_compat_dumpit() or
    tipc_nl_compat_doit(), but the field space is obviously illegal.
    Of course, it is not initialized.
    
    Reported-by: syzbot+bca0dc46634781f08b38@syzkaller.appspotmail.com
    Reported-by: syzbot+6bdb590321a7ae40c1a6@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 974cb0e3e7c963ced06c4e32c5b2884173fa5e01
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:28 2019 +0800

    tipc: fix uninit-value in tipc_nl_compat_name_table_dump
    
    syzbot reported:
    
    BUG: KMSAN: uninit-value in __arch_swab32 arch/x86/include/uapi/asm/swab.h:10 [inline]
    BUG: KMSAN: uninit-value in __fswab32 include/uapi/linux/swab.h:59 [inline]
    BUG: KMSAN: uninit-value in tipc_nl_compat_name_table_dump+0x4a8/0xba0 net/tipc/netlink_compat.c:826
    CPU: 0 PID: 6290 Comm: syz-executor848 Not tainted 4.19.0-rc8+ #70
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x306/0x460 lib/dump_stack.c:113
     kmsan_report+0x1a2/0x2e0 mm/kmsan/kmsan.c:917
     __msan_warning+0x7c/0xe0 mm/kmsan/kmsan_instr.c:500
     __arch_swab32 arch/x86/include/uapi/asm/swab.h:10 [inline]
     __fswab32 include/uapi/linux/swab.h:59 [inline]
     tipc_nl_compat_name_table_dump+0x4a8/0xba0 net/tipc/netlink_compat.c:826
     __tipc_nl_compat_dumpit+0x59e/0xdb0 net/tipc/netlink_compat.c:205
     tipc_nl_compat_dumpit+0x63a/0x820 net/tipc/netlink_compat.c:270
     tipc_nl_compat_handle net/tipc/netlink_compat.c:1151 [inline]
     tipc_nl_compat_recv+0x1402/0x2760 net/tipc/netlink_compat.c:1210
     genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
     genl_rcv_msg+0x185c/0x1a20 net/netlink/genetlink.c:626
     netlink_rcv_skb+0x394/0x640 net/netlink/af_netlink.c:2454
     genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
     netlink_unicast_kernel net/netlink/af_netlink.c:1317 [inline]
     netlink_unicast+0x166d/0x1720 net/netlink/af_netlink.c:1343
     netlink_sendmsg+0x1391/0x1420 net/netlink/af_netlink.c:1908
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xe47/0x1200 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x307/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbe/0x100 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    RIP: 0033:0x440179
    Code: 18 89 d0 c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 fb 13 fc ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007ffecec49318 EFLAGS: 00000213 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00000000004002c8 RCX: 0000000000440179
    RDX: 0000000000000000 RSI: 0000000020000100 RDI: 0000000000000003
    RBP: 00000000006ca018 R08: 0000000000000000 R09: 00000000004002c8
    R10: 0000000000000000 R11: 0000000000000213 R12: 0000000000401a00
    R13: 0000000000401a90 R14: 0000000000000000 R15: 0000000000000000
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:255 [inline]
     kmsan_internal_poison_shadow+0xc8/0x1d0 mm/kmsan/kmsan.c:180
     kmsan_kmalloc+0xa4/0x120 mm/kmsan/kmsan_hooks.c:104
     kmsan_slab_alloc+0x10/0x20 mm/kmsan/kmsan_hooks.c:113
     slab_post_alloc_hook mm/slab.h:446 [inline]
     slab_alloc_node mm/slub.c:2727 [inline]
     __kmalloc_node_track_caller+0xb43/0x1400 mm/slub.c:4360
     __kmalloc_reserve net/core/skbuff.c:138 [inline]
     __alloc_skb+0x422/0xe90 net/core/skbuff.c:206
     alloc_skb include/linux/skbuff.h:996 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1189 [inline]
     netlink_sendmsg+0xcaf/0x1420 net/netlink/af_netlink.c:1883
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xe47/0x1200 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x307/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbe/0x100 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    
    We cannot take for granted the thing that the length of data contained
    in TLV is longer than the size of struct tipc_name_table_query in
    tipc_nl_compat_name_table_dump().
    
    Reported-by: syzbot+06e771a754829716a327@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit edf5ff04a45750ac8ce2435974f001dc9cfbf055
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:27 2019 +0800

    tipc: fix uninit-value in tipc_nl_compat_link_set
    
    syzbot reports following splat:
    
    BUG: KMSAN: uninit-value in strlen+0x3b/0xa0 lib/string.c:486
    CPU: 1 PID: 9306 Comm: syz-executor172 Not tainted 4.20.0-rc7+ #2
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
    Google 01/01/2011
    Call Trace:
      __dump_stack lib/dump_stack.c:77 [inline]
      dump_stack+0x173/0x1d0 lib/dump_stack.c:113
      kmsan_report+0x12e/0x2a0 mm/kmsan/kmsan.c:613
      __msan_warning+0x82/0xf0 mm/kmsan/kmsan_instr.c:313
      strlen+0x3b/0xa0 lib/string.c:486
      nla_put_string include/net/netlink.h:1154 [inline]
      __tipc_nl_compat_link_set net/tipc/netlink_compat.c:708 [inline]
      tipc_nl_compat_link_set+0x929/0x1220 net/tipc/netlink_compat.c:744
      __tipc_nl_compat_doit net/tipc/netlink_compat.c:311 [inline]
      tipc_nl_compat_doit+0x3aa/0xaf0 net/tipc/netlink_compat.c:344
      tipc_nl_compat_handle net/tipc/netlink_compat.c:1107 [inline]
      tipc_nl_compat_recv+0x14d7/0x2760 net/tipc/netlink_compat.c:1210
      genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
      genl_rcv_msg+0x185f/0x1a60 net/netlink/genetlink.c:626
      netlink_rcv_skb+0x444/0x640 net/netlink/af_netlink.c:2477
      genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
      netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]
      netlink_unicast+0xf40/0x1020 net/netlink/af_netlink.c:1336
      netlink_sendmsg+0x127f/0x1300 net/netlink/af_netlink.c:1917
      sock_sendmsg_nosec net/socket.c:621 [inline]
      sock_sendmsg net/socket.c:631 [inline]
      ___sys_sendmsg+0xdb9/0x11b0 net/socket.c:2116
      __sys_sendmsg net/socket.c:2154 [inline]
      __do_sys_sendmsg net/socket.c:2163 [inline]
      __se_sys_sendmsg+0x305/0x460 net/socket.c:2161
      __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
      do_syscall_64+0xbc/0xf0 arch/x86/entry/common.c:291
      entry_SYSCALL_64_after_hwframe+0x63/0xe7
    
    The uninitialised access happened in
        nla_put_string(skb, TIPC_NLA_LINK_NAME, lc->name)
    
    This is because lc->name string is not validated before it's used.
    
    Reported-by: syzbot+d78b8a29241a195aefb8@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0762216c0ad2a2fccd63890648eca491f2c83d9a
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:26 2019 +0800

    tipc: fix uninit-value in tipc_nl_compat_bearer_enable
    
    syzbot reported:
    
    BUG: KMSAN: uninit-value in strlen+0x3b/0xa0 lib/string.c:484
    CPU: 1 PID: 6371 Comm: syz-executor652 Not tainted 4.19.0-rc8+ #70
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x306/0x460 lib/dump_stack.c:113
     kmsan_report+0x1a2/0x2e0 mm/kmsan/kmsan.c:917
     __msan_warning+0x7c/0xe0 mm/kmsan/kmsan_instr.c:500
     strlen+0x3b/0xa0 lib/string.c:484
     nla_put_string include/net/netlink.h:1011 [inline]
     tipc_nl_compat_bearer_enable+0x238/0x7b0 net/tipc/netlink_compat.c:389
     __tipc_nl_compat_doit net/tipc/netlink_compat.c:311 [inline]
     tipc_nl_compat_doit+0x39f/0xae0 net/tipc/netlink_compat.c:344
     tipc_nl_compat_recv+0x147c/0x2760 net/tipc/netlink_compat.c:1107
     genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
     genl_rcv_msg+0x185c/0x1a20 net/netlink/genetlink.c:626
     netlink_rcv_skb+0x394/0x640 net/netlink/af_netlink.c:2454
     genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
     netlink_unicast_kernel net/netlink/af_netlink.c:1317 [inline]
     netlink_unicast+0x166d/0x1720 net/netlink/af_netlink.c:1343
     netlink_sendmsg+0x1391/0x1420 net/netlink/af_netlink.c:1908
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xe47/0x1200 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x307/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbe/0x100 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    RIP: 0033:0x440179
    Code: 18 89 d0 c3 66 2e 0f 1f 84 00 00 00 00 00 0f 1f 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 fb 13 fc ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007fffef7beee8 EFLAGS: 00000213 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00000000004002c8 RCX: 0000000000440179
    RDX: 0000000000000000 RSI: 0000000020000100 RDI: 0000000000000003
    RBP: 00000000006ca018 R08: 0000000000000000 R09: 00000000004002c8
    R10: 0000000000000000 R11: 0000000000000213 R12: 0000000000401a00
    R13: 0000000000401a90 R14: 0000000000000000 R15: 0000000000000000
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:255 [inline]
     kmsan_internal_poison_shadow+0xc8/0x1d0 mm/kmsan/kmsan.c:180
     kmsan_kmalloc+0xa4/0x120 mm/kmsan/kmsan_hooks.c:104
     kmsan_slab_alloc+0x10/0x20 mm/kmsan/kmsan_hooks.c:113
     slab_post_alloc_hook mm/slab.h:446 [inline]
     slab_alloc_node mm/slub.c:2727 [inline]
     __kmalloc_node_track_caller+0xb43/0x1400 mm/slub.c:4360
     __kmalloc_reserve net/core/skbuff.c:138 [inline]
     __alloc_skb+0x422/0xe90 net/core/skbuff.c:206
     alloc_skb include/linux/skbuff.h:996 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1189 [inline]
     netlink_sendmsg+0xcaf/0x1420 net/netlink/af_netlink.c:1883
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xe47/0x1200 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x307/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbe/0x100 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    
    The root cause is that we don't validate whether bear name is a valid
    string in tipc_nl_compat_bearer_enable().
    
    Meanwhile, we also fix the same issue in the following functions:
    tipc_nl_compat_bearer_disable()
    tipc_nl_compat_link_stat_dump()
    tipc_nl_compat_media_set()
    tipc_nl_compat_bearer_set()
    
    Reported-by: syzbot+b33d5cae0efd35dbfe77@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8b66fee7f8ee18f9c51260e7a43ab37db5177a05
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:25 2019 +0800

    tipc: fix uninit-value in tipc_nl_compat_link_reset_stats
    
    syzbot reports following splat:
    
    BUG: KMSAN: uninit-value in strlen+0x3b/0xa0 lib/string.c:486
    CPU: 1 PID: 11057 Comm: syz-executor0 Not tainted 4.20.0-rc7+ #2
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x173/0x1d0 lib/dump_stack.c:113
     kmsan_report+0x12e/0x2a0 mm/kmsan/kmsan.c:613
     __msan_warning+0x82/0xf0 mm/kmsan/kmsan_instr.c:295
     strlen+0x3b/0xa0 lib/string.c:486
     nla_put_string include/net/netlink.h:1154 [inline]
     tipc_nl_compat_link_reset_stats+0x1f0/0x360 net/tipc/netlink_compat.c:760
     __tipc_nl_compat_doit net/tipc/netlink_compat.c:311 [inline]
     tipc_nl_compat_doit+0x3aa/0xaf0 net/tipc/netlink_compat.c:344
     tipc_nl_compat_handle net/tipc/netlink_compat.c:1107 [inline]
     tipc_nl_compat_recv+0x14d7/0x2760 net/tipc/netlink_compat.c:1210
     genl_family_rcv_msg net/netlink/genetlink.c:601 [inline]
     genl_rcv_msg+0x185f/0x1a60 net/netlink/genetlink.c:626
     netlink_rcv_skb+0x444/0x640 net/netlink/af_netlink.c:2477
     genl_rcv+0x63/0x80 net/netlink/genetlink.c:637
     netlink_unicast_kernel net/netlink/af_netlink.c:1310 [inline]
     netlink_unicast+0xf40/0x1020 net/netlink/af_netlink.c:1336
     netlink_sendmsg+0x127f/0x1300 net/netlink/af_netlink.c:1917
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xdb9/0x11b0 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x305/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbc/0xf0 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    RIP: 0033:0x457ec9
    Code: 6d b7 fb ff c3 66 2e 0f 1f 84 00 00 00 00 00 66 90 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 0f 83 3b b7 fb ff c3 66 2e 0f 1f 84 00 00 00 00
    RSP: 002b:00007f2557338c78 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 0000000000000003 RCX: 0000000000457ec9
    RDX: 0000000000000000 RSI: 00000000200001c0 RDI: 0000000000000003
    RBP: 000000000073bf00 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 00007f25573396d4
    R13: 00000000004cb478 R14: 00000000004d86c8 R15: 00000000ffffffff
    
    Uninit was created at:
     kmsan_save_stack_with_flags mm/kmsan/kmsan.c:204 [inline]
     kmsan_internal_poison_shadow+0x92/0x150 mm/kmsan/kmsan.c:158
     kmsan_kmalloc+0xa6/0x130 mm/kmsan/kmsan_hooks.c:176
     kmsan_slab_alloc+0xe/0x10 mm/kmsan/kmsan_hooks.c:185
     slab_post_alloc_hook mm/slab.h:446 [inline]
     slab_alloc_node mm/slub.c:2759 [inline]
     __kmalloc_node_track_caller+0xe18/0x1030 mm/slub.c:4383
     __kmalloc_reserve net/core/skbuff.c:137 [inline]
     __alloc_skb+0x309/0xa20 net/core/skbuff.c:205
     alloc_skb include/linux/skbuff.h:998 [inline]
     netlink_alloc_large_skb net/netlink/af_netlink.c:1182 [inline]
     netlink_sendmsg+0xb82/0x1300 net/netlink/af_netlink.c:1892
     sock_sendmsg_nosec net/socket.c:621 [inline]
     sock_sendmsg net/socket.c:631 [inline]
     ___sys_sendmsg+0xdb9/0x11b0 net/socket.c:2116
     __sys_sendmsg net/socket.c:2154 [inline]
     __do_sys_sendmsg net/socket.c:2163 [inline]
     __se_sys_sendmsg+0x305/0x460 net/socket.c:2161
     __x64_sys_sendmsg+0x4a/0x70 net/socket.c:2161
     do_syscall_64+0xbc/0xf0 arch/x86/entry/common.c:291
     entry_SYSCALL_64_after_hwframe+0x63/0xe7
    
    The uninitialised access happened in tipc_nl_compat_link_reset_stats:
        nla_put_string(skb, TIPC_NLA_LINK_NAME, name)
    
    This is because name string is not validated before it's used.
    
    Reported-by: syzbot+e01d94b5a4c266be6e4c@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a88289f4ddee4165d5f796bd99e09eec3133c16b
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jan 14 17:22:24 2019 +0800

    tipc: fix uninit-value in in tipc_conn_rcv_sub
    
    syzbot reported:
    
    BUG: KMSAN: uninit-value in tipc_conn_rcv_sub+0x184/0x950 net/tipc/topsrv.c:373
    CPU: 0 PID: 66 Comm: kworker/u4:4 Not tainted 4.17.0-rc3+ #88
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Workqueue: tipc_rcv tipc_conn_recv_work
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x185/0x1d0 lib/dump_stack.c:113
     kmsan_report+0x142/0x240 mm/kmsan/kmsan.c:1067
     __msan_warning_32+0x6c/0xb0 mm/kmsan/kmsan_instr.c:683
     tipc_conn_rcv_sub+0x184/0x950 net/tipc/topsrv.c:373
     tipc_conn_rcv_from_sock net/tipc/topsrv.c:409 [inline]
     tipc_conn_recv_work+0x3cd/0x560 net/tipc/topsrv.c:424
     process_one_work+0x12c6/0x1f60 kernel/workqueue.c:2145
     worker_thread+0x113c/0x24f0 kernel/workqueue.c:2279
     kthread+0x539/0x720 kernel/kthread.c:239
     ret_from_fork+0x35/0x40 arch/x86/entry/entry_64.S:412
    
    Local variable description: ----s.i@tipc_conn_recv_work
    Variable was created at:
     tipc_conn_recv_work+0x65/0x560 net/tipc/topsrv.c:419
     process_one_work+0x12c6/0x1f60 kernel/workqueue.c:2145
    
    In tipc_conn_rcv_from_sock(), it always supposes the length of message
    received from sock_recvmsg() is not smaller than the size of struct
    tipc_subscr. However, this assumption is false. Especially when the
    length of received message is shorter than struct tipc_subscr size,
    we will end up touching uninitialized fields in tipc_conn_rcv_sub().
    
    Reported-by: syzbot+8951a3065ee7fd6d6e23@syzkaller.appspotmail.com
    Reported-by: syzbot+75e6e042c5bbf691fc82@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e8746440bf68212f19688f1454dad593c74abee1
Merge: fe76fc6aaf53 2f960bd05640
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Jan 16 05:13:36 2019 +1200

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Fix regression in multi-SKB responses to RTM_GETADDR, from Arthur
        Gautier.
    
     2) Fix ipv6 frag parsing in openvswitch, from Yi-Hung Wei.
    
     3) Unbounded recursion in ipv4 and ipv6 GUE tunnels, from Stefano
        Brivio.
    
     4) Use after free in hns driver, from Yonglong Liu.
    
     5) icmp6_send() needs to handle the case of NULL skb, from Eric
        Dumazet.
    
     6) Missing rcu read lock in __inet6_bind() when operating on mapped
        addresses, from David Ahern.
    
     7) Memory leak in tipc-nl_compat_publ_dump(), from Gustavo A. R. Silva.
    
     8) Fix PHY vs r8169 module loading ordering issues, from Heiner
        Kallweit.
    
     9) Fix bridge vlan memory leak, from Ido Schimmel.
    
    10) Dev refcount leak in AF_PACKET, from Jason Gunthorpe.
    
    11) Infoleak in ipv6_local_error(), flow label isn't completely
        initialized. From Eric Dumazet.
    
    12) Handle mv88e6390 errata, from Andrew Lunn.
    
    13) Making vhost/vsock CID hashing consistent, from Zha Bin.
    
    14) Fix lack of UMH cleanup when it unexpectedly exits, from Taehee Yoo.
    
    15) Bridge forwarding must clear skb->tstamp, from Paolo Abeni.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (87 commits)
      bnxt_en: Fix context memory allocation.
      bnxt_en: Fix ring checking logic on 57500 chips.
      mISDN: hfcsusb: Use struct_size() in kzalloc()
      net: clear skb->tstamp in bridge forwarding path
      net: bpfilter: disallow to remove bpfilter module while being used
      net: bpfilter: restart bpfilter_umh when error occurred
      net: bpfilter: use cleanup callback to release umh_info
      umh: add exit routine for UMH process
      isdn: i4l: isdn_tty: Fix some concurrency double-free bugs
      vhost/vsock: fix vhost vsock cid hashing inconsistent
      net: stmmac: Prevent RX starvation in stmmac_napi_poll()
      net: stmmac: Fix the logic of checking if RX Watchdog must be enabled
      net: stmmac: Check if CBS is supported before configuring
      net: stmmac: dwxgmac2: Only clear interrupts that are active
      net: stmmac: Fix PCI module removal leak
      tools/bpf: fix bpftool map dump with bitfields
      tools/bpf: test btf bitfield with >=256 struct member offset
      bpf: fix bpffs bitfield pretty print
      net: ethernet: mediatek: fix warning in phy_start_aneg
      tcp: change txhash on SYN-data timeout
      ...

commit c96ca4e2064e542940f496696a4e3ec5c81fca92
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Sun Dec 23 21:45:56 2018 -0800

    tipc: fix a double free in tipc_enable_bearer()
    
    [ Upstream commit dc4501ff287547dea7ca10f1c580c741291a8760 ]
    
    bearer_disable() already calls kfree_rcu() to free struct tipc_bearer,
    we don't need to call kfree() again.
    
    Fixes: cb30a63384bc ("tipc: refactor function tipc_enable_bearer()")
    Reported-by: syzbot+b981acf1fb240c0c128b@syzkaller.appspotmail.com
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7942d5be49224bbd7cc8b5c589e1e670651021d1
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Sun Dec 16 23:25:12 2018 -0800

    tipc: check group dests after tipc_wait_for_cond()
    
    [ Upstream commit 3c6306d44082ef007a258ae1b86ea58e6974ee3f ]
    
    Similar to commit 143ece654f9f ("tipc: check tsk->group in tipc_wait_for_cond()")
    we have to reload grp->dests too after we re-take the sock lock.
    This means we need to move the dsts check after tipc_wait_for_cond()
    too.
    
    Fixes: 75da2163dbb6 ("tipc: introduce communication groups")
    Reported-and-tested-by: syzbot+99f20222fc5018d2b97a@syzkaller.appspotmail.com
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2ce6d5aeafba9066eec0f93e85f463549f362dae
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Mon Dec 10 11:49:55 2018 -0800

    tipc: use lock_sock() in tipc_sk_reinit()
    
    [ Upstream commit 15ef70e286176165d28b0b8a969b422561a68dfc ]
    
    lock_sock() must be used in process context to be race-free with
    other lock_sock() callers, for example, tipc_release(). Otherwise
    using the spinlock directly can't serialize a parallel tipc_release().
    
    As it is blocking, we have to hold the sock refcnt before
    rhashtable_walk_stop() and release it after rhashtable_walk_start().
    
    Fixes: 07f6c4bc048a ("tipc: convert tipc reference table to use generic rhashtable")
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b66ecc4f0b36597ee993b93f3a3a161f8309bab4
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Mon Dec 10 12:45:45 2018 -0800

    tipc: fix a double kfree_skb()
    
    [ Upstream commit acb4a33e9856d5fa3384b87d3d8369229be06d31 ]
    
    tipc_udp_xmit() drops the packet on error, there is no
    need to drop it again.
    
    Fixes: ef20cd4dd163 ("tipc: introduce UDP replicast")
    Reported-and-tested-by: syzbot+eae585ba2cc2752d3704@syzkaller.appspotmail.com
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f404723deb695a00ea2cb7800b2c2135260dfcf8
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Sun Dec 23 21:45:56 2018 -0800

    tipc: fix a double free in tipc_enable_bearer()
    
    [ Upstream commit dc4501ff287547dea7ca10f1c580c741291a8760 ]
    
    bearer_disable() already calls kfree_rcu() to free struct tipc_bearer,
    we don't need to call kfree() again.
    
    Fixes: cb30a63384bc ("tipc: refactor function tipc_enable_bearer()")
    Reported-by: syzbot+b981acf1fb240c0c128b@syzkaller.appspotmail.com
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a2ee6fb9c675125f2f29cc95aae95b4489880f57
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Mon Dec 10 15:23:30 2018 -0800

    tipc: compare remote and local protocols in tipc_udp_enable()
    
    [ Upstream commit fb83ed496b9a654f60cd1d58a0e1e79ec5694808 ]
    
    When TIPC_NLA_UDP_REMOTE is an IPv6 mcast address but
    TIPC_NLA_UDP_LOCAL is an IPv4 address, a NULL-ptr deref is triggered
    as the UDP tunnel sock is initialized to IPv4 or IPv6 sock merely
    based on the protocol in local address.
    
    We should just error out when the remote address and local address
    have different protocols.
    
    Reported-by: syzbot+eb4da3a20fad2e52555d@syzkaller.appspotmail.com
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dc6c13d5d5b47c8a1c0570176a3ad5887dc63b00
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Tue Dec 11 21:43:51 2018 -0800

    tipc: check tsk->group in tipc_wait_for_cond()
    
    [ Upstream commit 143ece654f9f5b37bedea252a990be37e48ae3a5 ]
    
    tipc_wait_for_cond() drops socket lock before going to sleep,
    but tsk->group could be freed right after that release_sock().
    So we have to re-check and reload tsk->group after it wakes up.
    
    After this patch, tipc_wait_for_cond() returns -ERESTARTSYS when
    tsk->group is NULL, instead of continuing with the assumption of
    a non-NULL tsk->group.
    
    (It looks like 'dsts' should be re-checked and reloaded too, but
    it is a different bug.)
    
    Similar for tipc_send_group_unicast() and tipc_send_group_anycast().
    
    Reported-by: syzbot+10a9db47c3a0e13eb31c@syzkaller.appspotmail.com
    Fixes: b7d42635517f ("tipc: introduce flow control for group broadcast messages")
    Fixes: ee106d7f942d ("tipc: introduce group anycast messaging")
    Fixes: 27bd9ec027f3 ("tipc: introduce group unicast messaging")
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 417483631811b7d642523f51e1b9d522edf897ad
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Mon Dec 10 15:23:30 2018 -0800

    tipc: compare remote and local protocols in tipc_udp_enable()
    
    [ Upstream commit fb83ed496b9a654f60cd1d58a0e1e79ec5694808 ]
    
    When TIPC_NLA_UDP_REMOTE is an IPv6 mcast address but
    TIPC_NLA_UDP_LOCAL is an IPv4 address, a NULL-ptr deref is triggered
    as the UDP tunnel sock is initialized to IPv4 or IPv6 sock merely
    based on the protocol in local address.
    
    We should just error out when the remote address and local address
    have different protocols.
    
    Reported-by: syzbot+eb4da3a20fad2e52555d@syzkaller.appspotmail.com
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f943aeb0a7d429ed4a6acf28b910e8955371e4e8
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Mon Dec 10 11:49:55 2018 -0800

    tipc: use lock_sock() in tipc_sk_reinit()
    
    [ Upstream commit 15ef70e286176165d28b0b8a969b422561a68dfc ]
    
    lock_sock() must be used in process context to be race-free with
    other lock_sock() callers, for example, tipc_release(). Otherwise
    using the spinlock directly can't serialize a parallel tipc_release().
    
    As it is blocking, we have to hold the sock refcnt before
    rhashtable_walk_stop() and release it after rhashtable_walk_start().
    
    Fixes: 07f6c4bc048a ("tipc: convert tipc reference table to use generic rhashtable")
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3009452fb260459deff51533f284dd0d004cbbac
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Mon Dec 10 12:45:45 2018 -0800

    tipc: fix a double kfree_skb()
    
    [ Upstream commit acb4a33e9856d5fa3384b87d3d8369229be06d31 ]
    
    tipc_udp_xmit() drops the packet on error, there is no
    need to drop it again.
    
    Fixes: ef20cd4dd163 ("tipc: introduce UDP replicast")
    Reported-and-tested-by: syzbot+eae585ba2cc2752d3704@syzkaller.appspotmail.com
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 60216788e4e38030bc18eaba8fd4547011cdc5df
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Mon Dec 10 15:23:30 2018 -0800

    tipc: compare remote and local protocols in tipc_udp_enable()
    
    [ Upstream commit fb83ed496b9a654f60cd1d58a0e1e79ec5694808 ]
    
    When TIPC_NLA_UDP_REMOTE is an IPv6 mcast address but
    TIPC_NLA_UDP_LOCAL is an IPv4 address, a NULL-ptr deref is triggered
    as the UDP tunnel sock is initialized to IPv4 or IPv6 sock merely
    based on the protocol in local address.
    
    We should just error out when the remote address and local address
    have different protocols.
    
    Reported-by: syzbot+eb4da3a20fad2e52555d@syzkaller.appspotmail.com
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8dd36f18decc0c08f0a20494dbfcbe8f04d44f5a
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Mon Dec 10 11:49:55 2018 -0800

    tipc: use lock_sock() in tipc_sk_reinit()
    
    [ Upstream commit 15ef70e286176165d28b0b8a969b422561a68dfc ]
    
    lock_sock() must be used in process context to be race-free with
    other lock_sock() callers, for example, tipc_release(). Otherwise
    using the spinlock directly can't serialize a parallel tipc_release().
    
    As it is blocking, we have to hold the sock refcnt before
    rhashtable_walk_stop() and release it after rhashtable_walk_start().
    
    Fixes: 07f6c4bc048a ("tipc: convert tipc reference table to use generic rhashtable")
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 336e822a0d48a65cd1d8ab6b5671ec737fb65c56
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Mon Dec 10 12:45:45 2018 -0800

    tipc: fix a double kfree_skb()
    
    [ Upstream commit acb4a33e9856d5fa3384b87d3d8369229be06d31 ]
    
    tipc_udp_xmit() drops the packet on error, there is no
    need to drop it again.
    
    Fixes: ef20cd4dd163 ("tipc: introduce UDP replicast")
    Reported-and-tested-by: syzbot+eae585ba2cc2752d3704@syzkaller.appspotmail.com
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f87d8ad9233f115db92c6c087d58403b0009ed36
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Sat Jan 5 10:52:23 2019 -0600

    tipc: fix memory leak in tipc_nl_compat_publ_dump
    
    There is a memory leak in case genlmsg_put fails.
    
    Fix this by freeing *args* before return.
    
    Addresses-Coverity-ID: 1476406 ("Resource leak")
    Fixes: 46273cf7e009 ("tipc: fix a missing check of genlmsg_put")
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 43d86ee8c639df750529b4d8f062b328b61c423e
Merge: 645ff1e8e704 c5ee066333eb
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Jan 3 12:53:47 2019 -0800

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
     "Several fixes here. Basically split down the line between newly
      introduced regressions and long existing problems:
    
       1) Double free in tipc_enable_bearer(), from Cong Wang.
    
       2) Many fixes to nf_conncount, from Florian Westphal.
    
       3) op->get_regs_len() can throw an error, check it, from Yunsheng
          Lin.
    
       4) Need to use GFP_ATOMIC in *_add_hash_mac_address() of fsl/fman
          driver, from Scott Wood.
    
       5) Inifnite loop in fib_empty_table(), from Yue Haibing.
    
       6) Use after free in ax25_fillin_cb(), from Cong Wang.
    
       7) Fix socket locking in nr_find_socket(), also from Cong Wang.
    
       8) Fix WoL wakeup enable in r8169, from Heiner Kallweit.
    
       9) On 32-bit sock->sk_stamp is not thread-safe, from Deepa Dinamani.
    
      10) Fix ptr_ring wrap during queue swap, from Cong Wang.
    
      11) Missing shutdown callback in hinic driver, from Xue Chaojing.
    
      12) Need to return NULL on error from ip6_neigh_lookup(), from Stefano
          Brivio.
    
      13) BPF out of bounds speculation fixes from Daniel Borkmann"
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (57 commits)
      ipv6: Consider sk_bound_dev_if when binding a socket to an address
      ipv6: Fix dump of specific table with strict checking
      bpf: add various test cases to selftests
      bpf: prevent out of bounds speculation on pointer arithmetic
      bpf: fix check_map_access smin_value test when pointer contains offset
      bpf: restrict unknown scalars of mixed signed bounds for unprivileged
      bpf: restrict stack pointer arithmetic for unprivileged
      bpf: restrict map value pointer arithmetic for unprivileged
      bpf: enable access to ax register also from verifier rewrite
      bpf: move tmp variable into ax register in interpreter
      bpf: move {prev_,}insn_idx into verifier env
      isdn: fix kernel-infoleak in capi_unlocked_ioctl
      ipv6: route: Fix return value of ip6_neigh_lookup() on neigh_create() error
      net/hamradio/6pack: use mod_timer() to rearm timers
      net-next/hinic:add shutdown callback
      net: hns3: call hns3_nic_net_open() while doing HNAE3_UP_CLIENT
      ip: validate header length on virtual device xmit
      tap: call skb_probe_transport_header after setting skb->dev
      ptr_ring: wrap back ->producer in __ptr_ring_swap_queue()
      net: rds: remove unnecessary NULL check
      ...

commit 46273cf7e009231d2b6bc10a926e82b8928a9fb2
Author: Kangjie Lu <kjlu@umn.edu>
Date:   Wed Dec 26 00:09:04 2018 -0600

    tipc: fix a missing check of genlmsg_put
    
    genlmsg_put could fail. The fix inserts a check of its return value, and
    if it fails, returns -EMSGSIZE.
    
    Signed-off-by: Kangjie Lu <kjlu@umn.edu>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit dc4501ff287547dea7ca10f1c580c741291a8760
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Sun Dec 23 21:45:56 2018 -0800

    tipc: fix a double free in tipc_enable_bearer()
    
    bearer_disable() already calls kfree_rcu() to free struct tipc_bearer,
    we don't need to call kfree() again.
    
    Fixes: cb30a63384bc ("tipc: refactor function tipc_enable_bearer()")
    Reported-by: syzbot+b981acf1fb240c0c128b@syzkaller.appspotmail.com
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 89dfd0083751d00d5d7ead36f6d8b045bf89c5e1
Author: Aditya Pakki <pakki001@umn.edu>
Date:   Sun Dec 23 18:54:53 2018 -0600

    net/netlink_compat: Fix a missing check of nla_parse_nested
    
    In tipc_nl_compat_sk_dump(), if nla_parse_nested() fails, it could return
    an error. To be consistent with other invocations of the function call,
    on error, the fix passes the return value upstream.
    
    Signed-off-by: Aditya Pakki <pakki001@umn.edu>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 055722716c396ac1c7fd36a828250a78db1f22bc
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Wed Dec 19 11:42:19 2018 +0700

    tipc: fix uninitialized value for broadcast retransmission
    
    When sending broadcast message on high load system, there are a lot of
    unnecessary packets restranmission. That issue was caused by missing in
    initial criteria for retransmission.
    
    To prevent this happen, just initialize this criteria for retransmission
    in next 10 milliseconds.
    
    Fixes: 31c4f4cc32f7 ("tipc: improve broadcast retransmission algorithm")
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 013dc9d55c2ee47bb4a509e10c5cad404059b686
Merge: 4a54877ee767 cf5f55f7f013
Author: David S. Miller <davem@davemloft.net>
Date:   Wed Dec 19 11:49:25 2018 -0800

    Merge branch 'tipc-tracepoints'
    
    Tuong Lien says:
    
    ====================
    tipc: tracepoints and trace_events in TIPC
    
    The patch series is the first step of introducing a tracing framework in
    TIPC, which will assist in collecting complete & plentiful data for post
    analysis, even in the case of a single failure occurrence e.g. when the
    failure is unreproducible.
    
    The tracing code in TIPC utilizes the powerful kernel tracepoints, trace
    events features along with particular dump functions to trace the TIPC
    object data and events (incl. bearer, link, socket, node, etc.).
    
    The tracing code should generate zero-load to TIPC when the trace events
    are not enabled.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit cf5f55f7f01397015dfa390256f2c20ceaabfcfb
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Wed Dec 19 09:18:00 2018 +0700

    tipc: add trace_events for tipc bearer
    
    The commit adds the new trace_event for TIPC bearer, L2 device event:
    
    trace_tipc_l2_device_event()
    
    Also, it puts the trace at the tipc_l2_device_event() function, then
    the device/bearer events and related info can be traced out during
    runtime when needed.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Tested-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit eb18a510b5cd4daeb9736ad8db57a9fc49db185b
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Wed Dec 19 09:17:59 2018 +0700

    tipc: add trace_events for tipc node
    
    The commit adds the new trace_events for TIPC node object:
    
    trace_tipc_node_create()
    trace_tipc_node_delete()
    trace_tipc_node_lost_contact()
    trace_tipc_node_timeout()
    trace_tipc_node_link_up()
    trace_tipc_node_link_down()
    trace_tipc_node_reset_links()
    trace_tipc_node_fsm_evt()
    trace_tipc_node_check_state()
    
    Also, enables the traces for the following cases:
    - When a node is created/deleted;
    - When a node contact is lost;
    - When a node timer is timed out;
    - When a node link is up/down;
    - When all node links are reset;
    - When node state is changed;
    - When a skb comes and node state needs to be checked/updated.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Tested-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 01e661ebfbad40e6280fb8ec25f2861d39ba4387
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Wed Dec 19 09:17:58 2018 +0700

    tipc: add trace_events for tipc socket
    
    The commit adds the new trace_events for TIPC socket object:
    
    trace_tipc_sk_create()
    trace_tipc_sk_poll()
    trace_tipc_sk_sendmsg()
    trace_tipc_sk_sendmcast()
    trace_tipc_sk_sendstream()
    trace_tipc_sk_filter_rcv()
    trace_tipc_sk_advance_rx()
    trace_tipc_sk_rej_msg()
    trace_tipc_sk_drop_msg()
    trace_tipc_sk_release()
    trace_tipc_sk_shutdown()
    trace_tipc_sk_overlimit1()
    trace_tipc_sk_overlimit2()
    
    Also, enables the traces for the following cases:
    - When user creates a TIPC socket;
    - When user calls poll() on TIPC socket;
    - When user sends a dgram/mcast/stream message.
    - When a message is put into the socket 'sk_receive_queue';
    - When a message is released from the socket 'sk_receive_queue';
    - When a message is rejected (e.g. due to no port, invalid, etc.);
    - When a message is dropped (e.g. due to wrong message type);
    - When socket is released;
    - When socket is shutdown;
    - When socket rcvq's allocation is overlimit (> 90%);
    - When socket rcvq + bklq's allocation is overlimit (> 90%);
    - When the 'TIPC_ERR_OVERLOAD/2' issue happens;
    
    Note:
    a) All the socket traces are designed to be able to trace on a specific
    socket by either using the 'event filtering' feature on a known socket
    'portid' value or the sysctl file:
    
    /proc/sys/net/tipc/sk_filter
    
    The file determines a 'tuple' for what socket should be traced:
    
    (portid, sock type, name type, name lower, name upper)
    
    where:
    + 'portid' is the socket portid generated at socket creating, can be
    found in the trace outputs or the 'tipc socket list' command printouts;
    + 'sock type' is the socket type (1 = SOCK_TREAM, ...);
    + 'name type', 'name lower' and 'name upper' are the service name being
    connected to or published by the socket.
    
    Value '0' means 'ANY', the default tuple value is (0, 0, 0, 0, 0) i.e.
    the traces happen for every sockets with no filter.
    
    b) The 'tipc_sk_overlimit1/2' event is also a conditional trace_event
    which happens when the socket receive queue (and backlog queue) is
    about to be overloaded, when the queue allocation is > 90%. Then, when
    the trace is enabled, the last skbs leading to the TIPC_ERR_OVERLOAD/2
    issue can be traced.
    
    The trace event is designed as an 'upper watermark' notification that
    the other traces (e.g. 'tipc_sk_advance_rx' vs 'tipc_sk_filter_rcv') or
    actions can be triggerred in the meanwhile to see what is going on with
    the socket queue.
    
    In addition, the 'trace_tipc_sk_dump()' is also placed at the
    'TIPC_ERR_OVERLOAD/2' case, so the socket and last skb can be dumped
    for post-analysis.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Tested-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 26574db0c17fb29fac8b57f94ed1dfd46cc89887
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Wed Dec 19 09:17:57 2018 +0700

    tipc: add trace_events for tipc link
    
    The commit adds the new trace_events for TIPC link object:
    
    trace_tipc_link_timeout()
    trace_tipc_link_fsm()
    trace_tipc_link_reset()
    trace_tipc_link_too_silent()
    trace_tipc_link_retrans()
    trace_tipc_link_bc_ack()
    trace_tipc_link_conges()
    
    And the traces for PROTOCOL messages at building and receiving:
    
    trace_tipc_proto_build()
    trace_tipc_proto_rcv()
    
    Note:
    a) The 'tipc_link_too_silent' event will only happen when the
    'silent_intv_cnt' is about to reach the 'abort_limit' value (and the
    event is enabled). The benefit for this kind of event is that we can
    get an early indication about TIPC link loss issue due to timeout, then
    can do some necessary actions for troubleshooting.
    
    For example: To trigger the 'tipc_proto_rcv' when the 'too_silent'
    event occurs:
    
    echo 'enable_event:tipc:tipc_proto_rcv' > \
          events/tipc/tipc_link_too_silent/trigger
    
    And disable it when TIPC link is reset:
    
    echo 'disable_event:tipc:tipc_proto_rcv' > \
          events/tipc/tipc_link_reset/trigger
    
    b) The 'tipc_link_retrans' or 'tipc_link_bc_ack' event is useful to
    trace TIPC retransmission issues.
    
    In addition, the commit adds the 'trace_tipc_list/link_dump()' at the
    'retransmission failure' case. Then, if the issue occurs, the link
    'transmq' along with the link data can be dumped for post-analysis.
    These dump events should be enabled by default since it will only take
    effect when the failure happens.
    
    The same approach is also applied for the faulty case that the
    validation of protocol message is failed.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Tested-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b4b9771bcbbd5839b0f77aba55e2f85989ed6779
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Wed Dec 19 09:17:56 2018 +0700

    tipc: enable tracepoints in tipc
    
    As for the sake of debugging/tracing, the commit enables tracepoints in
    TIPC along with some general trace_events as shown below. It also
    defines some 'tipc_*_dump()' functions that allow to dump TIPC object
    data whenever needed, that is, for general debug purposes, ie. not just
    for the trace_events.
    
    The following trace_events are now available:
    
    - trace_tipc_skb_dump(): allows to trace and dump TIPC msg & skb data,
      e.g. message type, user, droppable, skb truesize, cloned skb, etc.
    
    - trace_tipc_list_dump(): allows to trace and dump any TIPC buffers or
      queues, e.g. TIPC link transmq, socket receive queue, etc.
    
    - trace_tipc_sk_dump(): allows to trace and dump TIPC socket data, e.g.
      sk state, sk type, connection type, rmem_alloc, socket queues, etc.
    
    - trace_tipc_link_dump(): allows to trace and dump TIPC link data, e.g.
      link state, silent_intv_cnt, gap, bc_gap, link queues, etc.
    
    - trace_tipc_node_dump(): allows to trace and dump TIPC node data, e.g.
      node state, active links, capabilities, link entries, etc.
    
    How to use:
    Put the trace functions at any places where we want to dump TIPC data
    or events.
    
    Note:
    a) The dump functions will generate raw data only, that is, to offload
    the trace event's processing, it can require a tool or script to parse
    the data but this should be simple.
    
    b) The trace_tipc_*_dump() should be reserved for a failure cases only
    (e.g. the retransmission failure case) or where we do not expect to
    happen too often, then we can consider enabling these events by default
    since they will almost not take any effects under normal conditions,
    but once the rare condition or failure occurs, we get the dumped data
    fully for post-analysis.
    
    For other trace purposes, we can reuse these trace classes as template
    but different events.
    
    c) A trace_event is only effective when we enable it. To enable the
    TIPC trace_events, echo 1 to 'enable' files in the events/tipc/
    directory in the 'debugfs' file system. Normally, they are located at:
    
    /sys/kernel/debug/tracing/events/tipc/
    
    For example:
    
    To enable the tipc_link_dump event:
    
    echo 1 > /sys/kernel/debug/tracing/events/tipc/tipc_link_dump/enable
    
    To enable all the TIPC trace_events:
    
    echo 1 > /sys/kernel/debug/tracing/events/tipc/enable
    
    To collect the trace data:
    
    cat trace
    
    or
    
    cat trace_pipe > /trace.out &
    
    To disable all the TIPC trace_events:
    
    echo 0 > /sys/kernel/debug/tracing/events/tipc/enable
    
    To clear the trace buffer:
    
    echo > trace
    
    d) Like the other trace_events, the feature like 'filter' or 'trigger'
    is also usable for the tipc trace_events.
    For more details, have a look at:
    
    Documentation/trace/ftrace.txt
    
    MAINTAINERS | add two new files 'trace.h' & 'trace.c' in tipc
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Tested-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5679ee784c89793537d233022b55a331a64aed9d
Author: Zhenbo Gao <zhenbo.gao@windriver.com>
Date:   Tue Dec 18 17:43:52 2018 +0800

    tipc: handle broadcast NAME_DISTRIBUTOR packet when receiving it
    
    NAME_DISTRIBUTOR messages are transmitted through unicast link on TIPC
    2.0, by contrast, the messages are delivered through broadcast link on
    TIPC 1.7. But at present, NAME_DISTRIBUTOR messages received by
    broadcast link cannot be handled in tipc_rcv() until an unicast message
    arrives, which may lead to a significant delay to update name table.
    
    To avoid this delay, we will also deal with broadcast NAME_DISTRIBUTOR
    message on broadcast receive path.
    
    Signed-off-by: Zhenbo Gao <zhenbo.gao@windriver.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3c6306d44082ef007a258ae1b86ea58e6974ee3f
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Sun Dec 16 23:25:12 2018 -0800

    tipc: check group dests after tipc_wait_for_cond()
    
    Similar to commit 143ece654f9f ("tipc: check tsk->group in tipc_wait_for_cond()")
    we have to reload grp->dests too after we re-take the sock lock.
    This means we need to move the dsts check after tipc_wait_for_cond()
    too.
    
    Fixes: 75da2163dbb6 ("tipc: introduce communication groups")
    Reported-and-tested-by: syzbot+99f20222fc5018d2b97a@syzkaller.appspotmail.com
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 143ece654f9f5b37bedea252a990be37e48ae3a5
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Tue Dec 11 21:43:51 2018 -0800

    tipc: check tsk->group in tipc_wait_for_cond()
    
    tipc_wait_for_cond() drops socket lock before going to sleep,
    but tsk->group could be freed right after that release_sock().
    So we have to re-check and reload tsk->group after it wakes up.
    
    After this patch, tipc_wait_for_cond() returns -ERESTARTSYS when
    tsk->group is NULL, instead of continuing with the assumption of
    a non-NULL tsk->group.
    
    (It looks like 'dsts' should be re-checked and reloaded too, but
    it is a different bug.)
    
    Similar for tipc_send_group_unicast() and tipc_send_group_anycast().
    
    Reported-by: syzbot+10a9db47c3a0e13eb31c@syzkaller.appspotmail.com
    Fixes: b7d42635517f ("tipc: introduce flow control for group broadcast messages")
    Fixes: ee106d7f942d ("tipc: introduce group anycast messaging")
    Fixes: 27bd9ec027f3 ("tipc: introduce group unicast messaging")
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit fb83ed496b9a654f60cd1d58a0e1e79ec5694808
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Mon Dec 10 15:23:30 2018 -0800

    tipc: compare remote and local protocols in tipc_udp_enable()
    
    When TIPC_NLA_UDP_REMOTE is an IPv6 mcast address but
    TIPC_NLA_UDP_LOCAL is an IPv4 address, a NULL-ptr deref is triggered
    as the UDP tunnel sock is initialized to IPv4 or IPv6 sock merely
    based on the protocol in local address.
    
    We should just error out when the remote address and local address
    have different protocols.
    
    Reported-by: syzbot+eb4da3a20fad2e52555d@syzkaller.appspotmail.com
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit acb4a33e9856d5fa3384b87d3d8369229be06d31
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Mon Dec 10 12:45:45 2018 -0800

    tipc: fix a double kfree_skb()
    
    tipc_udp_xmit() drops the packet on error, there is no
    need to drop it again.
    
    Fixes: ef20cd4dd163 ("tipc: introduce UDP replicast")
    Reported-and-tested-by: syzbot+eae585ba2cc2752d3704@syzkaller.appspotmail.com
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 15ef70e286176165d28b0b8a969b422561a68dfc
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Mon Dec 10 11:49:55 2018 -0800

    tipc: use lock_sock() in tipc_sk_reinit()
    
    lock_sock() must be used in process context to be race-free with
    other lock_sock() callers, for example, tipc_release(). Otherwise
    using the spinlock directly can't serialize a parallel tipc_release().
    
    As it is blocking, we have to hold the sock refcnt before
    rhashtable_walk_stop() and release it after rhashtable_walk_start().
    
    Fixes: 07f6c4bc048a ("tipc: convert tipc reference table to use generic rhashtable")
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5acc58cd99489cf3b511741078802cccd2eb8ca6
Author: Guoqing Jiang <gqjiang@suse.com>
Date:   Fri Oct 19 12:08:22 2018 +0800

    tipc: use destination length for copy string
    
    commit 29e270fc32192e7729057963ae7120663856c93e upstream.
    
    Got below warning with gcc 8.2 compiler.
    
    net/tipc/topsrv.c: In function ‘tipc_topsrv_start’:
    net/tipc/topsrv.c:660:2: warning: ‘strncpy’ specified bound depends on the length of the source argument [-Wstringop-overflow=]
      strncpy(srv->name, name, strlen(name) + 1);
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    net/tipc/topsrv.c:660:27: note: length computed here
      strncpy(srv->name, name, strlen(name) + 1);
                               ^~~~~~~~~~~~
    So change it to correct length and use strscpy.
    
    Signed-off-by: Guoqing Jiang <gqjiang@suse.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 88b58409f82e98d28f90328fa9ab98e0de479a0c
Author: Guoqing Jiang <gqjiang@suse.com>
Date:   Fri Oct 19 12:08:22 2018 +0800

    tipc: use destination length for copy string
    
    commit 29e270fc32192e7729057963ae7120663856c93e upstream.
    
    Got below warning with gcc 8.2 compiler.
    
    net/tipc/topsrv.c: In function ‘tipc_topsrv_start’:
    net/tipc/topsrv.c:660:2: warning: ‘strncpy’ specified bound depends on the length of the source argument [-Wstringop-overflow=]
      strncpy(srv->name, name, strlen(name) + 1);
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    net/tipc/topsrv.c:660:27: note: length computed here
      strncpy(srv->name, name, strlen(name) + 1);
                               ^~~~~~~~~~~~
    So change it to correct length and use strscpy.
    
    Signed-off-by: Guoqing Jiang <gqjiang@suse.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6235c229fea4e5c5fb35002a5ee1ae2dc65d3198
Author: Guoqing Jiang <gqjiang@suse.com>
Date:   Fri Oct 19 12:08:22 2018 +0800

    tipc: use destination length for copy string
    
    commit 29e270fc32192e7729057963ae7120663856c93e upstream.
    
    Got below warning with gcc 8.2 compiler.
    
    net/tipc/topsrv.c: In function ‘tipc_topsrv_start’:
    net/tipc/topsrv.c:660:2: warning: ‘strncpy’ specified bound depends on the length of the source argument [-Wstringop-overflow=]
      strncpy(srv->name, name, strlen(name) + 1);
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    net/tipc/topsrv.c:660:27: note: length computed here
      strncpy(srv->name, name, strlen(name) + 1);
                               ^~~~~~~~~~~~
    So change it to correct length and use strscpy.
    
    Signed-off-by: Guoqing Jiang <gqjiang@suse.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f5d6c3e5a359c0507800e7ac68d565c21de9b5a1
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Dec 6 09:00:09 2018 +0700

    tipc: fix node keep alive interval calculation
    
    When setting LINK tolerance, node timer interval will be calculated
    base on the LINK with lowest tolerance.
    
    But when calculated, the old node timer interval only updated if current
    setting value (tolerance/4) less than old ones regardless of number of
    links as well as links' lowest tolerance value.
    
    This caused to two cases missing if tolerance changed as following:
    Case 1:
    1.1/ There is one link (L1) available in the system
    1.2/ Set L1's tolerance from 1500ms => lower (i.e 500ms)
    1.3/ Then, fallback to default (1500ms) or higher (i.e 2000ms)
    
    Expected:
        node timer interval is 1500/4=375ms after 1.3
    
    Result:
    node timer interval will not being updated after changing tolerance at 1.3
    since its value 1500/4=375ms is not less than 500/4=125ms at 1.2.
    
    Case 2:
    2.1/ There are two links (L1, L2) available in the system
    2.2/ L1 and L2 tolerance value are 2000ms as initial
    2.3/ Set L2's tolerance from 2000ms => lower 1500ms
    2.4/ Disable link L2 (bring down its bearer)
    
    Expected:
        node timer interval is 2000ms/4=500ms after 2.4
    
    Result:
    node timer interval will not being updated after disabling L2 since
    its value 2000ms/4=500ms is still not less than 1500/4=375ms at 2.3
    although L2 is already not available in the system.
    
    To fix this, we start the node interval calculation by initializing it to
    a value larger than any conceivable calculated value. This way, the link
    with the lowest tolerance will always determine the calculated value.
    
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4e3fbd7433d7bbeca4db70ae9ecae9bfa688e2a4
Author: Jon Maloy <donmalo99@gmail.com>
Date:   Mon Nov 26 12:26:14 2018 -0500

    tipc: fix lockdep warning during node delete
    
    [ Upstream commit ec835f891232d7763dea9da0358f31e24ca6dfb7 ]
    
    We see the following lockdep warning:
    
    [ 2284.078521] ======================================================
    [ 2284.078604] WARNING: possible circular locking dependency detected
    [ 2284.078604] 4.19.0+ #42 Tainted: G            E
    [ 2284.078604] ------------------------------------------------------
    [ 2284.078604] rmmod/254 is trying to acquire lock:
    [ 2284.078604] 00000000acd94e28 ((&n->timer)#2){+.-.}, at: del_timer_sync+0x5/0xa0
    [ 2284.078604]
    [ 2284.078604] but task is already holding lock:
    [ 2284.078604] 00000000f997afc0 (&(&tn->node_list_lock)->rlock){+.-.}, at: tipc_node_stop+0xac/0x190 [tipc]
    [ 2284.078604]
    [ 2284.078604] which lock already depends on the new lock.
    [ 2284.078604]
    [ 2284.078604]
    [ 2284.078604] the existing dependency chain (in reverse order) is:
    [ 2284.078604]
    [ 2284.078604] -> #1 (&(&tn->node_list_lock)->rlock){+.-.}:
    [ 2284.078604]        tipc_node_timeout+0x20a/0x330 [tipc]
    [ 2284.078604]        call_timer_fn+0xa1/0x280
    [ 2284.078604]        run_timer_softirq+0x1f2/0x4d0
    [ 2284.078604]        __do_softirq+0xfc/0x413
    [ 2284.078604]        irq_exit+0xb5/0xc0
    [ 2284.078604]        smp_apic_timer_interrupt+0xac/0x210
    [ 2284.078604]        apic_timer_interrupt+0xf/0x20
    [ 2284.078604]        default_idle+0x1c/0x140
    [ 2284.078604]        do_idle+0x1bc/0x280
    [ 2284.078604]        cpu_startup_entry+0x19/0x20
    [ 2284.078604]        start_secondary+0x187/0x1c0
    [ 2284.078604]        secondary_startup_64+0xa4/0xb0
    [ 2284.078604]
    [ 2284.078604] -> #0 ((&n->timer)#2){+.-.}:
    [ 2284.078604]        del_timer_sync+0x34/0xa0
    [ 2284.078604]        tipc_node_delete+0x1a/0x40 [tipc]
    [ 2284.078604]        tipc_node_stop+0xcb/0x190 [tipc]
    [ 2284.078604]        tipc_net_stop+0x154/0x170 [tipc]
    [ 2284.078604]        tipc_exit_net+0x16/0x30 [tipc]
    [ 2284.078604]        ops_exit_list.isra.8+0x36/0x70
    [ 2284.078604]        unregister_pernet_operations+0x87/0xd0
    [ 2284.078604]        unregister_pernet_subsys+0x1d/0x30
    [ 2284.078604]        tipc_exit+0x11/0x6f2 [tipc]
    [ 2284.078604]        __x64_sys_delete_module+0x1df/0x240
    [ 2284.078604]        do_syscall_64+0x66/0x460
    [ 2284.078604]        entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [ 2284.078604]
    [ 2284.078604] other info that might help us debug this:
    [ 2284.078604]
    [ 2284.078604]  Possible unsafe locking scenario:
    [ 2284.078604]
    [ 2284.078604]        CPU0                    CPU1
    [ 2284.078604]        ----                    ----
    [ 2284.078604]   lock(&(&tn->node_list_lock)->rlock);
    [ 2284.078604]                                lock((&n->timer)#2);
    [ 2284.078604]                                lock(&(&tn->node_list_lock)->rlock);
    [ 2284.078604]   lock((&n->timer)#2);
    [ 2284.078604]
    [ 2284.078604]  *** DEADLOCK ***
    [ 2284.078604]
    [ 2284.078604] 3 locks held by rmmod/254:
    [ 2284.078604]  #0: 000000003368be9b (pernet_ops_rwsem){+.+.}, at: unregister_pernet_subsys+0x15/0x30
    [ 2284.078604]  #1: 0000000046ed9c86 (rtnl_mutex){+.+.}, at: tipc_net_stop+0x144/0x170 [tipc]
    [ 2284.078604]  #2: 00000000f997afc0 (&(&tn->node_list_lock)->rlock){+.-.}, at: tipc_node_stop+0xac/0x19
    [...}
    
    The reason is that the node timer handler sometimes needs to delete a
    node which has been disconnected for too long. To do this, it grabs
    the lock 'node_list_lock', which may at the same time be held by the
    generic node cleanup function, tipc_node_stop(), during module removal.
    Since the latter is calling del_timer_sync() inside the same lock, we
    have a potential deadlock.
    
    We fix this letting the timer cleanup function use spin_trylock()
    instead of just spin_lock(), and when it fails to grab the lock it
    just returns so that the timer handler can terminate its execution.
    This is safe to do, since tipc_node_stop() anyway is about to
    delete both the timer and the node instance.
    
    Fixes: 6a939f365bdb ("tipc: Auto removal of peer down node instance")
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 60b548237fed4b4164bab13c994dd9615f6c4323
Merge: b26b2b24b1d8 d78a5ebd8b18
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Nov 28 12:53:48 2018 -0800

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) ARM64 JIT fixes for subprog handling from Daniel Borkmann.
    
     2) Various sparc64 JIT bug fixes (fused branch convergance, frame
        pointer usage detection logic, PSEODU call argument handling).
    
     3) Fix to use BH locking in nf_conncount, from Taehee Yoo.
    
     4) Fix race of TX skb freeing in ipheth driver, from Bernd Eckstein.
    
     5) Handle return value of TX NAPI completion properly in lan743x
        driver, from Bryan Whitehead.
    
     6) MAC filter deletion in i40e driver clears wrong state bit, from
        Lihong Yang.
    
     7) Fix use after free in rionet driver, from Pan Bian.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (53 commits)
      s390/qeth: fix length check in SNMP processing
      net: hisilicon: remove unexpected free_netdev
      rapidio/rionet: do not free skb before reading its length
      i40e: fix kerneldoc for xsk methods
      ixgbe: recognize 1000BaseLX SFP modules as 1Gbps
      i40e: Fix deletion of MAC filters
      igb: fix uninitialized variables
      netfilter: nf_tables: deactivate expressions in rule replecement routine
      lan743x: Enable driver to work with LAN7431
      tipc: fix lockdep warning during node delete
      lan743x: fix return value for lan743x_tx_napi_poll
      net: via: via-velocity: fix spelling mistake "alignement" -> "alignment"
      qed: fix spelling mistake "attnetion" -> "attention"
      net: thunderx: fix NULL pointer dereference in nic_remove
      sctp: increase sk_wmem_alloc when head->truesize is increased
      firestream: fix spelling mistake: "Inititing" -> "Initializing"
      net: phy: add workaround for issue where PHY driver doesn't bind to the device
      usbnet: ipheth: fix potential recvmsg bug and recvmsg bug 2
      sparc: Adjust bpf JIT prologue for PSEUDO calls.
      bpf, doc: add entries of who looks over which jits
      ...

commit ec835f891232d7763dea9da0358f31e24ca6dfb7
Author: Jon Maloy <donmalo99@gmail.com>
Date:   Mon Nov 26 12:26:14 2018 -0500

    tipc: fix lockdep warning during node delete
    
    We see the following lockdep warning:
    
    [ 2284.078521] ======================================================
    [ 2284.078604] WARNING: possible circular locking dependency detected
    [ 2284.078604] 4.19.0+ #42 Tainted: G            E
    [ 2284.078604] ------------------------------------------------------
    [ 2284.078604] rmmod/254 is trying to acquire lock:
    [ 2284.078604] 00000000acd94e28 ((&n->timer)#2){+.-.}, at: del_timer_sync+0x5/0xa0
    [ 2284.078604]
    [ 2284.078604] but task is already holding lock:
    [ 2284.078604] 00000000f997afc0 (&(&tn->node_list_lock)->rlock){+.-.}, at: tipc_node_stop+0xac/0x190 [tipc]
    [ 2284.078604]
    [ 2284.078604] which lock already depends on the new lock.
    [ 2284.078604]
    [ 2284.078604]
    [ 2284.078604] the existing dependency chain (in reverse order) is:
    [ 2284.078604]
    [ 2284.078604] -> #1 (&(&tn->node_list_lock)->rlock){+.-.}:
    [ 2284.078604]        tipc_node_timeout+0x20a/0x330 [tipc]
    [ 2284.078604]        call_timer_fn+0xa1/0x280
    [ 2284.078604]        run_timer_softirq+0x1f2/0x4d0
    [ 2284.078604]        __do_softirq+0xfc/0x413
    [ 2284.078604]        irq_exit+0xb5/0xc0
    [ 2284.078604]        smp_apic_timer_interrupt+0xac/0x210
    [ 2284.078604]        apic_timer_interrupt+0xf/0x20
    [ 2284.078604]        default_idle+0x1c/0x140
    [ 2284.078604]        do_idle+0x1bc/0x280
    [ 2284.078604]        cpu_startup_entry+0x19/0x20
    [ 2284.078604]        start_secondary+0x187/0x1c0
    [ 2284.078604]        secondary_startup_64+0xa4/0xb0
    [ 2284.078604]
    [ 2284.078604] -> #0 ((&n->timer)#2){+.-.}:
    [ 2284.078604]        del_timer_sync+0x34/0xa0
    [ 2284.078604]        tipc_node_delete+0x1a/0x40 [tipc]
    [ 2284.078604]        tipc_node_stop+0xcb/0x190 [tipc]
    [ 2284.078604]        tipc_net_stop+0x154/0x170 [tipc]
    [ 2284.078604]        tipc_exit_net+0x16/0x30 [tipc]
    [ 2284.078604]        ops_exit_list.isra.8+0x36/0x70
    [ 2284.078604]        unregister_pernet_operations+0x87/0xd0
    [ 2284.078604]        unregister_pernet_subsys+0x1d/0x30
    [ 2284.078604]        tipc_exit+0x11/0x6f2 [tipc]
    [ 2284.078604]        __x64_sys_delete_module+0x1df/0x240
    [ 2284.078604]        do_syscall_64+0x66/0x460
    [ 2284.078604]        entry_SYSCALL_64_after_hwframe+0x49/0xbe
    [ 2284.078604]
    [ 2284.078604] other info that might help us debug this:
    [ 2284.078604]
    [ 2284.078604]  Possible unsafe locking scenario:
    [ 2284.078604]
    [ 2284.078604]        CPU0                    CPU1
    [ 2284.078604]        ----                    ----
    [ 2284.078604]   lock(&(&tn->node_list_lock)->rlock);
    [ 2284.078604]                                lock((&n->timer)#2);
    [ 2284.078604]                                lock(&(&tn->node_list_lock)->rlock);
    [ 2284.078604]   lock((&n->timer)#2);
    [ 2284.078604]
    [ 2284.078604]  *** DEADLOCK ***
    [ 2284.078604]
    [ 2284.078604] 3 locks held by rmmod/254:
    [ 2284.078604]  #0: 000000003368be9b (pernet_ops_rwsem){+.+.}, at: unregister_pernet_subsys+0x15/0x30
    [ 2284.078604]  #1: 0000000046ed9c86 (rtnl_mutex){+.+.}, at: tipc_net_stop+0x144/0x170 [tipc]
    [ 2284.078604]  #2: 00000000f997afc0 (&(&tn->node_list_lock)->rlock){+.-.}, at: tipc_node_stop+0xac/0x19
    [...}
    
    The reason is that the node timer handler sometimes needs to delete a
    node which has been disconnected for too long. To do this, it grabs
    the lock 'node_list_lock', which may at the same time be held by the
    generic node cleanup function, tipc_node_stop(), during module removal.
    Since the latter is calling del_timer_sync() inside the same lock, we
    have a potential deadlock.
    
    We fix this letting the timer cleanup function use spin_trylock()
    instead of just spin_lock(), and when it fails to grab the lock it
    just returns so that the timer handler can terminate its execution.
    This is safe to do, since tipc_node_stop() anyway is about to
    delete both the timer and the node instance.
    
    Fixes: 6a939f365bdb ("tipc: Auto removal of peer down node instance")
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 961842dcc1fd7523acc8a4b2db5e9cacaa703af3
Author: Jon Maloy <donmalo99@gmail.com>
Date:   Sat Nov 10 17:30:24 2018 -0500

    tipc: fix link re-establish failure
    
    [ Upstream commit 7ab412d33b4c7ff3e0148d3db25dd861edd1283d ]
    
    When a link failure is detected locally, the link is reset, the flag
    link->in_session is set to false, and a RESET_MSG with the 'stopping'
    bit set is sent to the peer.
    
    The purpose of this bit is to inform the peer that this endpoint just
    is going down, and that the peer should handle the reception of this
    particular RESET message as a local failure. This forces the peer to
    accept another RESET or ACTIVATE message from this endpoint before it
    can re-establish the link. This again is necessary to ensure that
    link session numbers are properly exchanged before the link comes up
    again.
    
    If a failure is detected locally at the same time at the peer endpoint
    this will do the same, which is also a correct behavior.
    
    However, when receiving such messages, the endpoints will not
    distinguish between 'stopping' RESETs and ordinary ones when it comes
    to updating session numbers. Both endpoints will copy the received
    session number and set their 'in_session' flags to true at the
    reception, while they are still expecting another RESET from the
    peer before they can go ahead and re-establish. This is contradictory,
    since, after applying the validation check referred to below, the
    'in_session' flag will cause rejection of all such messages, and the
    link will never come up again.
    
    We now fix this by not only handling received RESET/STOPPING messages
    as a local failure, but also by omitting to set a new session number
    and the 'in_session' flag in such cases.
    
    Fixes: 7ea817f4e832 ("tipc: check session number before accepting link protocol messages")
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce209966357de80d4f391c975f5c84bd82fa326e
Author: Jon Maloy <donmalo99@gmail.com>
Date:   Fri Nov 16 16:55:04 2018 -0500

    tipc: fix lockdep warning when reinitilaizing sockets
    
    [ Upstream commit adba75be0d23cca92a028749d92c60c8909bbdb3 ]
    
    We get the following warning:
    
    [   47.926140] 32-bit node address hash set to 2010a0a
    [   47.927202]
    [   47.927433] ================================
    [   47.928050] WARNING: inconsistent lock state
    [   47.928661] 4.19.0+ #37 Tainted: G            E
    [   47.929346] --------------------------------
    [   47.929954] inconsistent {SOFTIRQ-ON-W} -> {IN-SOFTIRQ-W} usage.
    [   47.930116] swapper/3/0 [HC0[0]:SC1[3]:HE1:SE0] takes:
    [   47.930116] 00000000af8bc31e (&(&ht->lock)->rlock){+.?.}, at: rhashtable_walk_enter+0x36/0xb0
    [   47.930116] {SOFTIRQ-ON-W} state was registered at:
    [   47.930116]   _raw_spin_lock+0x29/0x60
    [   47.930116]   rht_deferred_worker+0x556/0x810
    [   47.930116]   process_one_work+0x1f5/0x540
    [   47.930116]   worker_thread+0x64/0x3e0
    [   47.930116]   kthread+0x112/0x150
    [   47.930116]   ret_from_fork+0x3a/0x50
    [   47.930116] irq event stamp: 14044
    [   47.930116] hardirqs last  enabled at (14044): [<ffffffff9a07fbba>] __local_bh_enable_ip+0x7a/0xf0
    [   47.938117] hardirqs last disabled at (14043): [<ffffffff9a07fb81>] __local_bh_enable_ip+0x41/0xf0
    [   47.938117] softirqs last  enabled at (14028): [<ffffffff9a0803ee>] irq_enter+0x5e/0x60
    [   47.938117] softirqs last disabled at (14029): [<ffffffff9a0804a5>] irq_exit+0xb5/0xc0
    [   47.938117]
    [   47.938117] other info that might help us debug this:
    [   47.938117]  Possible unsafe locking scenario:
    [   47.938117]
    [   47.938117]        CPU0
    [   47.938117]        ----
    [   47.938117]   lock(&(&ht->lock)->rlock);
    [   47.938117]   <Interrupt>
    [   47.938117]     lock(&(&ht->lock)->rlock);
    [   47.938117]
    [   47.938117]  *** DEADLOCK ***
    [   47.938117]
    [   47.938117] 2 locks held by swapper/3/0:
    [   47.938117]  #0: 0000000062c64f90 ((&d->timer)){+.-.}, at: call_timer_fn+0x5/0x280
    [   47.938117]  #1: 00000000ee39619c (&(&d->lock)->rlock){+.-.}, at: tipc_disc_timeout+0xc8/0x540 [tipc]
    [   47.938117]
    [   47.938117] stack backtrace:
    [   47.938117] CPU: 3 PID: 0 Comm: swapper/3 Tainted: G            E     4.19.0+ #37
    [   47.938117] Hardware name: Bochs Bochs, BIOS Bochs 01/01/2011
    [   47.938117] Call Trace:
    [   47.938117]  <IRQ>
    [   47.938117]  dump_stack+0x5e/0x8b
    [   47.938117]  print_usage_bug+0x1ed/0x1ff
    [   47.938117]  mark_lock+0x5b5/0x630
    [   47.938117]  __lock_acquire+0x4c0/0x18f0
    [   47.938117]  ? lock_acquire+0xa6/0x180
    [   47.938117]  lock_acquire+0xa6/0x180
    [   47.938117]  ? rhashtable_walk_enter+0x36/0xb0
    [   47.938117]  _raw_spin_lock+0x29/0x60
    [   47.938117]  ? rhashtable_walk_enter+0x36/0xb0
    [   47.938117]  rhashtable_walk_enter+0x36/0xb0
    [   47.938117]  tipc_sk_reinit+0xb0/0x410 [tipc]
    [   47.938117]  ? mark_held_locks+0x6f/0x90
    [   47.938117]  ? __local_bh_enable_ip+0x7a/0xf0
    [   47.938117]  ? lockdep_hardirqs_on+0x20/0x1a0
    [   47.938117]  tipc_net_finalize+0xbf/0x180 [tipc]
    [   47.938117]  tipc_disc_timeout+0x509/0x540 [tipc]
    [   47.938117]  ? call_timer_fn+0x5/0x280
    [   47.938117]  ? tipc_disc_msg_xmit.isra.19+0xa0/0xa0 [tipc]
    [   47.938117]  ? tipc_disc_msg_xmit.isra.19+0xa0/0xa0 [tipc]
    [   47.938117]  call_timer_fn+0xa1/0x280
    [   47.938117]  ? tipc_disc_msg_xmit.isra.19+0xa0/0xa0 [tipc]
    [   47.938117]  run_timer_softirq+0x1f2/0x4d0
    [   47.938117]  __do_softirq+0xfc/0x413
    [   47.938117]  irq_exit+0xb5/0xc0
    [   47.938117]  smp_apic_timer_interrupt+0xac/0x210
    [   47.938117]  apic_timer_interrupt+0xf/0x20
    [   47.938117]  </IRQ>
    [   47.938117] RIP: 0010:default_idle+0x1c/0x140
    [   47.938117] Code: 90 90 90 90 90 90 90 90 90 90 90 90 90 90 0f 1f 44 00 00 41 54 55 53 65 8b 2d d8 2b 74 65 0f 1f 44 00 00 e8 c6 2c 8b ff fb f4 <65> 8b 2d c5 2b 74 65 0f 1f 44 00 00 5b 5d 41 5c c3 65 8b 05 b4 2b
    [   47.938117] RSP: 0018:ffffaf6ac0207ec8 EFLAGS: 00000206 ORIG_RAX: ffffffffffffff13
    [   47.938117] RAX: ffff8f5b3735e200 RBX: 0000000000000003 RCX: 0000000000000001
    [   47.938117] RDX: 0000000000000001 RSI: 0000000000000001 RDI: ffff8f5b3735e200
    [   47.938117] RBP: 0000000000000003 R08: 0000000000000001 R09: 0000000000000000
    [   47.938117] R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000000
    [   47.938117] R13: 0000000000000000 R14: ffff8f5b3735e200 R15: ffff8f5b3735e200
    [   47.938117]  ? default_idle+0x1a/0x140
    [   47.938117]  do_idle+0x1bc/0x280
    [   47.938117]  cpu_startup_entry+0x19/0x20
    [   47.938117]  start_secondary+0x187/0x1c0
    [   47.938117]  secondary_startup_64+0xa4/0xb0
    
    The reason seems to be that tipc_net_finalize()->tipc_sk_reinit() is
    calling the function rhashtable_walk_enter() within a timer interrupt.
    We fix this by executing tipc_net_finalize() in work queue context.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aaf1377231081b41a6761695fb410884e3426635
Author: Jon Maloy <donmalo99@gmail.com>
Date:   Sat Nov 17 12:17:06 2018 -0500

    tipc: don't assume linear buffer when reading ancillary data
    
    [ Upstream commit 1c1274a56999fbdf9cf84e332b28448bb2d55221 ]
    
    The code for reading ancillary data from a received buffer is assuming
    the buffer is linear. To make this assumption true we have to linearize
    the buffer before message data is read.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f2ce1065e767fc7da106a5f5381d1e8f842dc6f4
Merge: 9ff01193a20d 8ebebcba559a
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Nov 19 09:24:04 2018 -0800

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Fix some potentially uninitialized variables and use-after-free in
        kvaser_usb can drier, from Jimmy Assarsson.
    
     2) Fix leaks in qed driver, from Denis Bolotin.
    
     3) Socket leak in l2tp, from Xin Long.
    
     4) RSS context allocation fix in bnxt_en from Michael Chan.
    
     5) Fix cxgb4 build errors, from Ganesh Goudar.
    
     6) Route leaks in ipv6 when removing exceptions, from Xin Long.
    
     7) Memory leak in IDR allocation handling of act_pedit, from Davide
        Caratti.
    
     8) Use-after-free of bridge vlan stats, from Nikolay Aleksandrov.
    
     9) When MTU is locked, do not force DF bit on ipv4 tunnels. From
        Sabrina Dubroca.
    
    10) When NAPI cached skb is reused, we must set it to the proper initial
        state which includes skb->pkt_type. From Eric Dumazet.
    
    11) Lockdep and non-linear SKB handling fix in tipc from Jon Maloy.
    
    12) Set RX queue properly in various tuntap receive paths, from Matthew
        Cover.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (61 commits)
      tuntap: fix multiqueue rx
      ipv6: Fix PMTU updates for UDP/raw sockets in presence of VRF
      tipc: don't assume linear buffer when reading ancillary data
      tipc: fix lockdep warning when reinitilaizing sockets
      net-gro: reset skb->pkt_type in napi_reuse_skb()
      tc-testing: tdc.py: Guard against lack of returncode in executed command
      tc-testing: tdc.py: ignore errors when decoding stdout/stderr
      ip_tunnel: don't force DF when MTU is locked
      MAINTAINERS: Add entry for CAKE qdisc
      net: bridge: fix vlan stats use-after-free on destruction
      socket: do a generic_file_splice_read when proto_ops has no splice_read
      net: phy: mdio-gpio: Fix working over slow can_sleep GPIOs
      Revert "net: phy: mdio-gpio: Fix working over slow can_sleep GPIOs"
      net: phy: mdio-gpio: Fix working over slow can_sleep GPIOs
      net/sched: act_pedit: fix memory leak when IDR allocation fails
      net: lantiq: Fix returned value in case of error in 'xrx200_probe()'
      ipv6: fix a dst leak when removing its exception
      net: mvneta: Don't advertise 2.5G modes
      drivers/net/ethernet/qlogic/qed/qed_rdma.h: fix typo
      net/mlx4: Fix UBSAN warning of signed integer overflow
      ...

commit 1c1274a56999fbdf9cf84e332b28448bb2d55221
Author: Jon Maloy <donmalo99@gmail.com>
Date:   Sat Nov 17 12:17:06 2018 -0500

    tipc: don't assume linear buffer when reading ancillary data
    
    The code for reading ancillary data from a received buffer is assuming
    the buffer is linear. To make this assumption true we have to linearize
    the buffer before message data is read.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit adba75be0d23cca92a028749d92c60c8909bbdb3
Author: Jon Maloy <donmalo99@gmail.com>
Date:   Fri Nov 16 16:55:04 2018 -0500

    tipc: fix lockdep warning when reinitilaizing sockets
    
    We get the following warning:
    
    [   47.926140] 32-bit node address hash set to 2010a0a
    [   47.927202]
    [   47.927433] ================================
    [   47.928050] WARNING: inconsistent lock state
    [   47.928661] 4.19.0+ #37 Tainted: G            E
    [   47.929346] --------------------------------
    [   47.929954] inconsistent {SOFTIRQ-ON-W} -> {IN-SOFTIRQ-W} usage.
    [   47.930116] swapper/3/0 [HC0[0]:SC1[3]:HE1:SE0] takes:
    [   47.930116] 00000000af8bc31e (&(&ht->lock)->rlock){+.?.}, at: rhashtable_walk_enter+0x36/0xb0
    [   47.930116] {SOFTIRQ-ON-W} state was registered at:
    [   47.930116]   _raw_spin_lock+0x29/0x60
    [   47.930116]   rht_deferred_worker+0x556/0x810
    [   47.930116]   process_one_work+0x1f5/0x540
    [   47.930116]   worker_thread+0x64/0x3e0
    [   47.930116]   kthread+0x112/0x150
    [   47.930116]   ret_from_fork+0x3a/0x50
    [   47.930116] irq event stamp: 14044
    [   47.930116] hardirqs last  enabled at (14044): [<ffffffff9a07fbba>] __local_bh_enable_ip+0x7a/0xf0
    [   47.938117] hardirqs last disabled at (14043): [<ffffffff9a07fb81>] __local_bh_enable_ip+0x41/0xf0
    [   47.938117] softirqs last  enabled at (14028): [<ffffffff9a0803ee>] irq_enter+0x5e/0x60
    [   47.938117] softirqs last disabled at (14029): [<ffffffff9a0804a5>] irq_exit+0xb5/0xc0
    [   47.938117]
    [   47.938117] other info that might help us debug this:
    [   47.938117]  Possible unsafe locking scenario:
    [   47.938117]
    [   47.938117]        CPU0
    [   47.938117]        ----
    [   47.938117]   lock(&(&ht->lock)->rlock);
    [   47.938117]   <Interrupt>
    [   47.938117]     lock(&(&ht->lock)->rlock);
    [   47.938117]
    [   47.938117]  *** DEADLOCK ***
    [   47.938117]
    [   47.938117] 2 locks held by swapper/3/0:
    [   47.938117]  #0: 0000000062c64f90 ((&d->timer)){+.-.}, at: call_timer_fn+0x5/0x280
    [   47.938117]  #1: 00000000ee39619c (&(&d->lock)->rlock){+.-.}, at: tipc_disc_timeout+0xc8/0x540 [tipc]
    [   47.938117]
    [   47.938117] stack backtrace:
    [   47.938117] CPU: 3 PID: 0 Comm: swapper/3 Tainted: G            E     4.19.0+ #37
    [   47.938117] Hardware name: Bochs Bochs, BIOS Bochs 01/01/2011
    [   47.938117] Call Trace:
    [   47.938117]  <IRQ>
    [   47.938117]  dump_stack+0x5e/0x8b
    [   47.938117]  print_usage_bug+0x1ed/0x1ff
    [   47.938117]  mark_lock+0x5b5/0x630
    [   47.938117]  __lock_acquire+0x4c0/0x18f0
    [   47.938117]  ? lock_acquire+0xa6/0x180
    [   47.938117]  lock_acquire+0xa6/0x180
    [   47.938117]  ? rhashtable_walk_enter+0x36/0xb0
    [   47.938117]  _raw_spin_lock+0x29/0x60
    [   47.938117]  ? rhashtable_walk_enter+0x36/0xb0
    [   47.938117]  rhashtable_walk_enter+0x36/0xb0
    [   47.938117]  tipc_sk_reinit+0xb0/0x410 [tipc]
    [   47.938117]  ? mark_held_locks+0x6f/0x90
    [   47.938117]  ? __local_bh_enable_ip+0x7a/0xf0
    [   47.938117]  ? lockdep_hardirqs_on+0x20/0x1a0
    [   47.938117]  tipc_net_finalize+0xbf/0x180 [tipc]
    [   47.938117]  tipc_disc_timeout+0x509/0x540 [tipc]
    [   47.938117]  ? call_timer_fn+0x5/0x280
    [   47.938117]  ? tipc_disc_msg_xmit.isra.19+0xa0/0xa0 [tipc]
    [   47.938117]  ? tipc_disc_msg_xmit.isra.19+0xa0/0xa0 [tipc]
    [   47.938117]  call_timer_fn+0xa1/0x280
    [   47.938117]  ? tipc_disc_msg_xmit.isra.19+0xa0/0xa0 [tipc]
    [   47.938117]  run_timer_softirq+0x1f2/0x4d0
    [   47.938117]  __do_softirq+0xfc/0x413
    [   47.938117]  irq_exit+0xb5/0xc0
    [   47.938117]  smp_apic_timer_interrupt+0xac/0x210
    [   47.938117]  apic_timer_interrupt+0xf/0x20
    [   47.938117]  </IRQ>
    [   47.938117] RIP: 0010:default_idle+0x1c/0x140
    [   47.938117] Code: 90 90 90 90 90 90 90 90 90 90 90 90 90 90 0f 1f 44 00 00 41 54 55 53 65 8b 2d d8 2b 74 65 0f 1f 44 00 00 e8 c6 2c 8b ff fb f4 <65> 8b 2d c5 2b 74 65 0f 1f 44 00 00 5b 5d 41 5c c3 65 8b 05 b4 2b
    [   47.938117] RSP: 0018:ffffaf6ac0207ec8 EFLAGS: 00000206 ORIG_RAX: ffffffffffffff13
    [   47.938117] RAX: ffff8f5b3735e200 RBX: 0000000000000003 RCX: 0000000000000001
    [   47.938117] RDX: 0000000000000001 RSI: 0000000000000001 RDI: ffff8f5b3735e200
    [   47.938117] RBP: 0000000000000003 R08: 0000000000000001 R09: 0000000000000000
    [   47.938117] R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000000
    [   47.938117] R13: 0000000000000000 R14: ffff8f5b3735e200 R15: ffff8f5b3735e200
    [   47.938117]  ? default_idle+0x1a/0x140
    [   47.938117]  do_idle+0x1bc/0x280
    [   47.938117]  cpu_startup_entry+0x19/0x20
    [   47.938117]  start_secondary+0x187/0x1c0
    [   47.938117]  secondary_startup_64+0xa4/0xb0
    
    The reason seems to be that tipc_net_finalize()->tipc_sk_reinit() is
    calling the function rhashtable_walk_enter() within a timer interrupt.
    We fix this by executing tipc_net_finalize() in work queue context.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7a3765ed66d187071bbf56a8212f5d2bc2d2e2cc
Merge: e12e00e388de 7236ead1b149
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Nov 11 17:09:48 2018 -0600

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
     "One last pull request before heading to Vancouver for LPC, here we have:
    
       1) Don't forget to free VSI contexts during ice driver unload, from
          Victor Raj.
    
       2) Don't forget napi delete calls during device remove in ice driver,
          from Dave Ertman.
    
       3) Don't request VLAN tag insertion of ibmvnic device when SKB
          doesn't have VLAN tags at all.
    
       4) IPV4 frag handling code has to accomodate the situation where two
          threads try to insert the same fragment into the hash table at the
          same time. From Eric Dumazet.
    
       5) Relatedly, don't flow separate on protocol ports for fragmented
          frames, also from Eric Dumazet.
    
       6) Memory leaks in qed driver, from Denis Bolotin.
    
       7) Correct valid MTU range in smsc95xx driver, from Stefan Wahren.
    
       8) Validate cls_flower nested policies properly, from Jakub Kicinski.
    
       9) Clearing of stats counters in mc88e6xxx driver doesn't retain
          important bits in the G1_STATS_OP register causing the chip to
          hang. Fix from Andrew Lunn"
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (41 commits)
      act_mirred: clear skb->tstamp on redirect
      net: dsa: mv88e6xxx: Fix clearing of stats counters
      tipc: fix link re-establish failure
      net: sched: cls_flower: validate nested enc_opts_policy to avoid warning
      net: mvneta: correct typo
      flow_dissector: do not dissect l4 ports for fragments
      net: qualcomm: rmnet: Fix incorrect assignment of real_dev
      net: aquantia: allow rx checksum offload configuration
      net: aquantia: invalid checksumm offload implementation
      net: aquantia: fixed enable unicast on 32 macvlan
      net: aquantia: fix potential IOMMU fault after driver unbind
      net: aquantia: synchronized flow control between mac/phy
      net: smsc95xx: Fix MTU range
      net: stmmac: Fix RX packet size > 8191
      qed: Fix potential memory corruption
      qed: Fix SPQ entries not returned to pool in error flows
      qed: Fix blocking/unlimited SPQ entries leak
      qed: Fix memory/entry leak in qed_init_sp_request()
      inet: frags: better deal with smp races
      net: hns3: bugfix for not checking return value
      ...

commit 7ab412d33b4c7ff3e0148d3db25dd861edd1283d
Author: Jon Maloy <donmalo99@gmail.com>
Date:   Sat Nov 10 17:30:24 2018 -0500

    tipc: fix link re-establish failure
    
    When a link failure is detected locally, the link is reset, the flag
    link->in_session is set to false, and a RESET_MSG with the 'stopping'
    bit set is sent to the peer.
    
    The purpose of this bit is to inform the peer that this endpoint just
    is going down, and that the peer should handle the reception of this
    particular RESET message as a local failure. This forces the peer to
    accept another RESET or ACTIVATE message from this endpoint before it
    can re-establish the link. This again is necessary to ensure that
    link session numbers are properly exchanged before the link comes up
    again.
    
    If a failure is detected locally at the same time at the peer endpoint
    this will do the same, which is also a correct behavior.
    
    However, when receiving such messages, the endpoints will not
    distinguish between 'stopping' RESETs and ordinary ones when it comes
    to updating session numbers. Both endpoints will copy the received
    session number and set their 'in_session' flags to true at the
    reception, while they are still expecting another RESET from the
    peer before they can go ahead and re-establish. This is contradictory,
    since, after applying the validation check referred to below, the
    'in_session' flag will cause rejection of all such messages, and the
    link will never come up again.
    
    We now fix this by not only handling received RESET/STOPPING messages
    as a local failure, but also by omitting to set a new session number
    and the 'in_session' flag in such cases.
    
    Fixes: 7ea817f4e832 ("tipc: check session number before accepting link protocol messages")
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 31c4f4cc32f7ba956dbeb0eb2208f1bda2468704
Author: LUU Duc Canh <canh.d.luu@dektech.com.au>
Date:   Sat Nov 10 14:23:50 2018 -0500

    tipc: improve broadcast retransmission algorithm
    
    Currently, the broadcast retransmission algorithm is using the
    'prev_retr' field in struct tipc_link to time stamp the latest broadcast
    retransmission occasion. This helps to restrict retransmission of
    individual broadcast packets to max once per 10 milliseconds, even
    though all other criteria for retransmission are met.
    
    We now move this time stamp to the control block of each individual
    packet, and remove other limiting criteria. This simplifies the
    retransmission algorithm, and eliminates any risk of logical errors
    in selecting which packets can be retransmitted.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: LUU Duc Canh <canh.d.luu@dektech.com.au>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2f48581af308e6007e306b5b97744cbc7250e42a
Author: Ying Xue <ying.xue@windriver.com>
Date:   Tue Aug 22 12:28:41 2017 +0200

    tipc: fix a race condition of releasing subscriber object
    
    [ Upstream commit fd849b7c41f0fabfe783d0691a63c5518e8ebc99 ]
    
    No matter whether a request is inserted into workqueue as a work item
    to cancel a subscription or to delete a subscription's subscriber
    asynchronously, the work items may be executed in different workers.
    As a result, it doesn't mean that one request which is raised prior to
    another request is definitely handled before the latter. By contrast,
    if the latter request is executed before the former request, below
    error may happen:
    
    [  656.183644] BUG: spinlock bad magic on CPU#0, kworker/u8:0/12117
    [  656.184487] general protection fault: 0000 [#1] SMP
    [  656.185160] Modules linked in: tipc ip6_udp_tunnel udp_tunnel 9pnet_virtio 9p 9pnet virtio_net virtio_pci virtio_ring virtio [last unloaded: ip6_udp_tunnel]
    [  656.187003] CPU: 0 PID: 12117 Comm: kworker/u8:0 Not tainted 4.11.0-rc7+ #6
    [  656.187920] Hardware name: Bochs Bochs, BIOS Bochs 01/01/2011
    [  656.188690] Workqueue: tipc_rcv tipc_recv_work [tipc]
    [  656.189371] task: ffff88003f5cec40 task.stack: ffffc90004448000
    [  656.190157] RIP: 0010:spin_bug+0xdd/0xf0
    [  656.190678] RSP: 0018:ffffc9000444bcb8 EFLAGS: 00010202
    [  656.191375] RAX: 0000000000000034 RBX: ffff88003f8d1388 RCX: 0000000000000000
    [  656.192321] RDX: ffff88003ba13708 RSI: ffff88003ba0cd08 RDI: ffff88003ba0cd08
    [  656.193265] RBP: ffffc9000444bcd0 R08: 0000000000000030 R09: 000000006b6b6b6b
    [  656.194208] R10: ffff8800bde3e000 R11: 00000000000001b4 R12: 6b6b6b6b6b6b6b6b
    [  656.195157] R13: ffffffff81a3ca64 R14: ffff88003f8d1388 R15: ffff88003f8d13a0
    [  656.196101] FS:  0000000000000000(0000) GS:ffff88003ba00000(0000) knlGS:0000000000000000
    [  656.197172] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  656.197935] CR2: 00007f0b3d2e6000 CR3: 000000003ef9e000 CR4: 00000000000006f0
    [  656.198873] Call Trace:
    [  656.199210]  do_raw_spin_lock+0x66/0xa0
    [  656.199735]  _raw_spin_lock_bh+0x19/0x20
    [  656.200258]  tipc_subscrb_subscrp_delete+0x28/0xf0 [tipc]
    [  656.200990]  tipc_subscrb_rcv_cb+0x45/0x260 [tipc]
    [  656.201632]  tipc_receive_from_sock+0xaf/0x100 [tipc]
    [  656.202299]  tipc_recv_work+0x2b/0x60 [tipc]
    [  656.202872]  process_one_work+0x157/0x420
    [  656.203404]  worker_thread+0x69/0x4c0
    [  656.203898]  kthread+0x138/0x170
    [  656.204328]  ? process_one_work+0x420/0x420
    [  656.204889]  ? kthread_create_on_node+0x40/0x40
    [  656.205527]  ret_from_fork+0x29/0x40
    [  656.206012] Code: 48 8b 0c 25 00 c5 00 00 48 c7 c7 f0 24 a3 81 48 81 c1 f0 05 00 00 65 8b 15 61 ef f5 7e e8 9a 4c 09 00 4d 85 e4 44 8b 4b 08 74 92 <45> 8b 84 24 40 04 00 00 49 8d 8c 24 f0 05 00 00 eb 8d 90 0f 1f
    [  656.208504] RIP: spin_bug+0xdd/0xf0 RSP: ffffc9000444bcb8
    [  656.209798] ---[ end trace e2a800e6eb0770be ]---
    
    In above scenario, the request of deleting subscriber was performed
    earlier than the request of canceling a subscription although the
    latter was issued before the former, which means tipc_subscrb_delete()
    was called before tipc_subscrp_cancel(). As a result, when
    tipc_subscrb_subscrp_delete() called by tipc_subscrp_cancel() was
    executed to cancel a subscription, the subscription's subscriber
    refcnt had been decreased to 1. After tipc_subscrp_delete() where
    the subscriber was freed because its refcnt was decremented to zero,
    but the subscriber's lock had to be released, as a consequence, panic
    happened.
    
    By contrast, if we increase subscriber's refcnt before
    tipc_subscrb_subscrp_delete() is called in tipc_subscrp_cancel(),
    the panic issue can be avoided.
    
    Fixes: d094c4d5f5c7 ("tipc: add subscription refcount to avoid invalid delete")
    Reported-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2185dbac9e81c1b757bc41bb77e7dd97edbf78e1
Author: Bob Peterson <rpeterso@redhat.com>
Date:   Wed Aug 23 10:43:02 2017 -0400

    tipc: Fix tipc_sk_reinit handling of -EAGAIN
    
    [ Upstream commit 6c7e983b220f89e03286dc70a41c7ef3a8b409df ]
    
    In 9dbbfb0ab6680c6a85609041011484e6658e7d3c function tipc_sk_reinit
    had additional logic added to loop in the event that function
    rhashtable_walk_next() returned -EAGAIN. No worries.
    
    However, if rhashtable_walk_start returns -EAGAIN, it does "continue",
    and therefore skips the call to rhashtable_walk_stop(). That has
    the effect of calling rcu_read_lock() without its paired call to
    rcu_read_unlock(). Since rcu_read_lock() may be nested, the problem
    may not be apparent for a while, especially since resize events may
    be rare. But the comments to rhashtable_walk_start() state:
    
     * ...Note that we take the RCU lock in all
     * cases including when we return an error.  So you must always call
     * rhashtable_walk_stop to clean up.
    
    This patch replaces the continue with a goto and label to ensure a
    matching call to rhashtable_walk_stop().
    
    Signed-off-by: Bob Peterson <rpeterso@redhat.com>
    Acked-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b3c2e8e106df1d271fb7f4e3d3def7f13a47ac74
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Fri Oct 12 22:46:55 2018 +0200

    tipc: fix unsafe rcu locking when accessing publication list
    
    [ Upstream commit d3092b2efca1cd1d492d0b08499a2066c5ca8cec ]
    
    The binding table's 'cluster_scope' list is rcu protected to handle
    races between threads changing the list and those traversing the list at
    the same moment. We have now found that the function named_distribute()
    uses the regular list_for_each() macro to traverse the said list.
    Likewise, the function tipc_named_withdraw() is removing items from the
    same list using the regular list_del() call. When these two functions
    execute in parallel we see occasional crashes.
    
    This commit fixes this by adding the missing _rcu() suffixes.
    
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 988f3f1603d4650409db5334355cbf7b13ef50c3
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Oct 19 19:55:40 2018 +0200

    tipc: eliminate message disordering during binding table update
    
    We have seen the following race scenario:
    1) named_distribute() builds a "bulk" message, containing a PUBLISH
       item for a certain publication. This is based on the contents of
       the binding tables's 'cluster_scope' list.
    2) tipc_named_withdraw() removes the same publication from the list,
       bulds a WITHDRAW message and distributes it to all cluster nodes.
    3) tipc_named_node_up(), which was calling named_distribute(), sends
       out the bulk message built under 1)
    4) The WITHDRAW message arrives at the just detected node, finds
       no corresponding publication, and is dropped.
    5) The PUBLISH item arrives at the same node, is added to its binding
       table, and remains there forever.
    
    This arrival disordering was earlier taken care of by the backlog queue,
    originally added for a different purpose, which was removed in the
    commit referred to below, but we now need a different solution.
    In this commit, we replace the rcu lock protecting the 'cluster_scope'
    list with a regular RW lock which comprises even the sending of the
    bulk message. This both guarantees both the list integrity and the
    message sending order. We will later add a commit which cleans up
    this code further.
    
    Note that this commit needs recently added commit d3092b2efca1 ("tipc:
    fix unsafe rcu locking when accessing publication list") to apply
    cleanly.
    
    Fixes: 37922ea4a310 ("tipc: permit overlapping service ranges in name table")
    Reported-by: Tuong Lien Tong <tuong.t.lien@dektech.com.au>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 29e270fc32192e7729057963ae7120663856c93e
Author: Guoqing Jiang <gqjiang@suse.com>
Date:   Fri Oct 19 12:08:22 2018 +0800

    tipc: use destination length for copy string
    
    Got below warning with gcc 8.2 compiler.
    
    net/tipc/topsrv.c: In function ‘tipc_topsrv_start’:
    net/tipc/topsrv.c:660:2: warning: ‘strncpy’ specified bound depends on the length of the source argument [-Wstringop-overflow=]
      strncpy(srv->name, name, strlen(name) + 1);
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    net/tipc/topsrv.c:660:27: note: length computed here
      strncpy(srv->name, name, strlen(name) + 1);
                               ^~~~~~~~~~~~
    So change it to correct length and use strscpy.
    
    Signed-off-by: Guoqing Jiang <gqjiang@suse.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 91b15613ce7fb3e724ca0d433eef8e6bf15322af
Merge: 2a9666105445 d4d576f5ab7e
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Oct 19 09:16:20 2018 +0200

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    David writes:
      "Networking
    
       1) Fix gro_cells leak in xfrm layer, from Li RongQing.
    
       2) BPF selftests change RLIMIT_MEMLOCK blindly, don't do that.  From
          Eric Dumazet.
    
       3) AF_XDP calls synchronize_net() under RCU lock, fix from Björn
          Töpel.
    
       4) Out of bounds packet access in _decode_session6(), from Alexei
          Starovoitov.
    
       5) Several ethtool bugs, where we copy a struct into the kernel twice
          and our validations of the values in the first copy can be
          invalidated by the second copy due to asynchronous updates to the
          memory by the user.  From Wenwen Wang.
    
       6) Missing netlink attribute validation in cls_api, from Davide
          Caratti.
    
       7) LLC SAP sockets neet to be SOCK_RCU FREE, from Cong Wang.
    
       8) rxrpc operates on wrong kvec, from Yue Haibing.
    
       9) A regression was introduced by the disassosciation of route
          neighbour references in rt6_probe(), causing probe for
          neighbourless routes to not be properly rate limited.  Fix from
          Sabrina Dubroca.
    
       10) Unsafe RCU locking in tipc, from Tung Nguyen.
    
       11) Use after free in inet6_mc_check(), from Eric Dumazet.
    
       12) PMTU from icmp packets should update the SCTP transport pathmtu,
           from Xin Long.
    
       13) Missing peer put on error in rxrpc, from David Howells.
    
       14) Fix pedit in nfp driver, from Pieter Jansen van Vuuren.
    
       15) Fix overflowing shift statement in qla3xxx driver, from Nathan
           Chancellor.
    
       16) Fix Spectre v1 in ptp code, from Gustavo A. R. Silva.
    
       17) udp6_unicast_rcv_skb() interprets udpv6_queue_rcv_skb() return
           value in an inverted manner, fix from Paolo Abeni.
    
       18) Fix missed unresolved entries in ipmr dumps, from Nikolay
           Aleksandrov.
    
       19) Fix NAPI handling under high load, we can completely miss events
           when NAPI has to loop more than one time in a cycle.  From Heiner
           Kallweit."
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (49 commits)
      ip6_tunnel: Fix encapsulation layout
      tipc: fix info leak from kernel tipc_event
      net: socket: fix a missing-check bug
      net: sched: Fix for duplicate class dump
      r8169: fix NAPI handling under high load
      net: ipmr: fix unresolved entry dumps
      net: mscc: ocelot: Fix comment in ocelot_vlant_wait_for_completion()
      sctp: fix the data size calculation in sctp_data_size
      virtio_net: avoid using netif_tx_disable() for serializing tx routine
      udp6: fix encap return code for resubmitting
      mlxsw: core: Fix use-after-free when flashing firmware during init
      sctp: not free the new asoc when sctp_wait_for_connect returns err
      sctp: fix race on sctp_id2asoc
      r8169: re-enable MSI-X on RTL8168g
      net: bpfilter: use get_pid_task instead of pid_task
      ptp: fix Spectre v1 vulnerability
      net: qla3xxx: Remove overflowing shift statement
      geneve, vxlan: Don't set exceptions if skb->len < mtu
      geneve, vxlan: Don't check skb_dst() twice
      sctp: get pr_assoc and pr_stream all status with SCTP_PR_SCTP_ALL instead
      ...

commit b06f9d9f1a907dd03f203e2ce9e27e318c22ba01
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Oct 18 17:38:29 2018 +0200

    tipc: fix info leak from kernel tipc_event
    
    We initialize a struct tipc_event allocated on the kernel stack to
    zero to avert info leak to user space.
    
    Reported-by: syzbot+057458894bc8cada4dee@syzkaller.appspotmail.com
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4f6017d6ef53b05afa2f3e1323855e09a94c5c6b
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Sep 25 18:21:58 2018 +0200

    tipc: fix flow control accounting for implicit connect
    
    [ Upstream commit 92ef12b32feab8f277b69e9fb89ede2796777f4d ]
    
    In the case of implicit connect message with data > 1K, the flow
    control accounting is incorrect. At this state, the socket does not
    know the peer nodes capability and falls back to legacy flow control
    by return 1, however the receiver of this message will perform the
    new block accounting. This leads to a slack and eventually traffic
    disturbance.
    
    In this commit, we perform tipc_node_get_capabilities() at implicit
    connect and perform accounting based on the peer's capability.
    
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 49984ca4e60ef5a707fd73b9e4bf34c539bbe2bf
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Sep 25 18:21:58 2018 +0200

    tipc: fix flow control accounting for implicit connect
    
    [ Upstream commit 92ef12b32feab8f277b69e9fb89ede2796777f4d ]
    
    In the case of implicit connect message with data > 1K, the flow
    control accounting is incorrect. At this state, the socket does not
    know the peer nodes capability and falls back to legacy flow control
    by return 1, however the receiver of this message will perform the
    new block accounting. This leads to a slack and eventually traffic
    disturbance.
    
    In this commit, we perform tipc_node_get_capabilities() at implicit
    connect and perform accounting based on the peer's capability.
    
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d3092b2efca1cd1d492d0b08499a2066c5ca8cec
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Fri Oct 12 22:46:55 2018 +0200

    tipc: fix unsafe rcu locking when accessing publication list
    
    The binding table's 'cluster_scope' list is rcu protected to handle
    races between threads changing the list and those traversing the list at
    the same moment. We have now found that the function named_distribute()
    uses the regular list_for_each() macro to traverse the said list.
    Likewise, the function tipc_named_withdraw() is removing items from the
    same list using the regular list_del() call. When these two functions
    execute in parallel we see occasional crashes.
    
    This commit fixes this by adding the missing _rcu() suffixes.
    
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4af00f4cc1ba34da4654ac31830843cae871642d
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Oct 11 22:02:29 2018 +0200

    tipc: initialize broadcast link stale counter correctly
    
    In the commit referred to below we added link tolerance as an additional
    criteria for declaring broadcast transmission "stale" and resetting the
    unicast links to the affected node.
    
    Unfortunately, this 'improvement' introduced two bugs, which each and
    one alone cause only limited problems, but combined lead to seemingly
    stochastic unicast link resets, depending on the amount of broadcast
    traffic transmitted.
    
    The first issue, a missing initialization of the 'tolerance' field of
    the receiver broadcast link, was recently fixed by commit 047491ea334a
    ("tipc: set link tolerance correctly in broadcast link").
    
    Ths second issue, where we omit to reset the 'stale_cnt' field of
    the same link after a 'stale' period is over, leads to this counter
    accumulating over time, and in the absence of the 'tolerance' criteria
    leads to the above described symptoms. This commit adds the missing
    initialization.
    
    Fixes: a4dc70d46cf1 ("tipc: extend link reset criteria for stale packet retransmission")
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit acad76a5f6165dc451c5f35edb35d77def1f2e15
Author: Hoang Le <hoang.h.le@dektech.com.au>
Date:   Thu Oct 11 08:43:08 2018 +0700

    tipc: support binding to specific ip address when activating UDP bearer
    
    INADDR_ANY is hard-coded when activating UDP bearer. So, we could not
    bind to a specific IP address even with replicast mode using - given
    remote ip address instead of using multicast ip address.
    
    In this commit, we fixed it by checking and switch to use appropriate
    local ip address.
    
    before:
    $netstat -plu
    Active Internet connections (only servers)
    Proto Recv-Q Send-Q Local Address           Foreign Address
    udp        0      0 **0.0.0.0:6118**            0.0.0.0:*
    
    after:
    $netstat -plu
    Active Internet connections (only servers)
    Proto Recv-Q Send-Q Local Address           Foreign Address
    udp        0      0 **10.0.0.2:6118**           0.0.0.0:*
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Hoang Le <hoang.h.le@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9753a6f7497d9a42f710869b10961db92f94b30f
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Tue Sep 4 14:54:55 2018 -0700

    tipc: call start and done ops directly in __tipc_nl_compat_dumpit()
    
    commit 8f5c5fcf353302374b36232d6885c1a3b579e5ca upstream.
    
    __tipc_nl_compat_dumpit() uses a netlink_callback on stack,
    so the only way to align it with other ->dumpit() call path
    is calling tipc_dump_start() and tipc_dump_done() directly
    inside it. Otherwise ->dumpit() would always get NULL from
    cb->args[].
    
    But tipc_dump_start() uses sock_net(cb->skb->sk) to retrieve
    net pointer, the cb->skb here doesn't set skb->sk, the net pointer
    is saved in msg->net instead, so introduce a helper function
    __tipc_dump_start() to pass in msg->net.
    
    Ying pointed out cb->args[0...3] are already used by other
    callbacks on this call path, so we can't use cb->args[0] any
    more, use cb->args[4] instead.
    
    Fixes: 9a07efa9aea2 ("tipc: switch to rhashtable iterator")
    Reported-and-tested-by: syzbot+e93a2c41f91b8e2c7d9b@syzkaller.appspotmail.com
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 90ad18418c2d3db23ee827cdd74fed2ca9b70a18
Merge: 0778a9f2dd92 6b9bab550cac
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Fri Oct 12 09:01:59 2018 +0200

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    David writes:
      "Networking
    
       1) RXRPC receive path fixes from David Howells.
    
       2) Re-export __skb_recv_udp(), from Jiri Kosina.
    
       3) Fix refcounting in u32 classificer, from Al Viro.
    
       4) Userspace netlink ABI fixes from Eugene Syromiatnikov.
    
       5) Don't double iounmap on rmmod in ena driver, from Arthur
          Kiyanovski.
    
       6) Fix devlink string attribute handling, we must pull a copy into a
          kernel buffer if the lifetime extends past the netlink request.
          From Moshe Shemesh.
    
       7) Fix hangs in RDS, from Ka-Cheong Poon.
    
       8) Fix recursive locking lockdep warnings in tipc, from Ying Xue.
    
       9) Clear RX irq correctly in socionext, from Ilias Apalodimas.
    
       10) bcm_sf2 fixes from Florian Fainelli."
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (38 commits)
      net: dsa: bcm_sf2: Call setup during switch resume
      net: dsa: bcm_sf2: Fix unbind ordering
      net: phy: sfp: remove sfp_mutex's definition
      r8169: set RX_MULTI_EN bit in RxConfig for 8168F-family chips
      net: socionext: clear rx irq correctly
      net/mlx4_core: Fix warnings during boot on driverinit param set failures
      tipc: eliminate possible recursive locking detected by LOCKDEP
      selftests: udpgso_bench.sh explicitly requires bash
      selftests: rtnetlink.sh explicitly requires bash.
      qmi_wwan: Added support for Gemalto's Cinterion ALASxx WWAN interface
      tipc: queue socket protocol error messages into socket receive buffer
      tipc: set link tolerance correctly in broadcast link
      net: ipv4: don't let PMTU updates increase route MTU
      net: ipv4: update fnhe_pmtu when first hop's MTU changes
      net/ipv6: stop leaking percpu memory in fib6 info
      rds: RDS (tcp) hangs on sendto() to unresponding address
      net: make skb_partial_csum_set() more robust against overflows
      devlink: Add helper function for safely copy string param
      devlink: Fix param cmode driverinit for string type
      devlink: Fix param set handling for string type
      ...

commit a1f8dd34e64af689e95122921fb2ca83dedd4c4e
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Oct 11 19:57:56 2018 +0800

    tipc: eliminate possible recursive locking detected by LOCKDEP
    
    When booting kernel with LOCKDEP option, below warning info was found:
    
    WARNING: possible recursive locking detected
    4.19.0-rc7+ #14 Not tainted
    --------------------------------------------
    swapper/0/1 is trying to acquire lock:
    00000000dcfc0fc8 (&(&list->lock)->rlock#4){+...}, at: spin_lock_bh
    include/linux/spinlock.h:334 [inline]
    00000000dcfc0fc8 (&(&list->lock)->rlock#4){+...}, at:
    tipc_link_reset+0x125/0xdf0 net/tipc/link.c:850
    
    but task is already holding lock:
    00000000cbb9b036 (&(&list->lock)->rlock#4){+...}, at: spin_lock_bh
    include/linux/spinlock.h:334 [inline]
    00000000cbb9b036 (&(&list->lock)->rlock#4){+...}, at:
    tipc_link_reset+0xfa/0xdf0 net/tipc/link.c:849
    
    other info that might help us debug this:
     Possible unsafe locking scenario:
    
           CPU0
           ----
      lock(&(&list->lock)->rlock#4);
      lock(&(&list->lock)->rlock#4);
    
     *** DEADLOCK ***
    
     May be due to missing lock nesting notation
    
    2 locks held by swapper/0/1:
     #0: 00000000f7539d34 (pernet_ops_rwsem){+.+.}, at:
    register_pernet_subsys+0x19/0x40 net/core/net_namespace.c:1051
     #1: 00000000cbb9b036 (&(&list->lock)->rlock#4){+...}, at:
    spin_lock_bh include/linux/spinlock.h:334 [inline]
     #1: 00000000cbb9b036 (&(&list->lock)->rlock#4){+...}, at:
    tipc_link_reset+0xfa/0xdf0 net/tipc/link.c:849
    
    stack backtrace:
    CPU: 0 PID: 1 Comm: swapper/0 Not tainted 4.19.0-rc7+ #14
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1 04/01/2014
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x1af/0x295 lib/dump_stack.c:113
     print_deadlock_bug kernel/locking/lockdep.c:1759 [inline]
     check_deadlock kernel/locking/lockdep.c:1803 [inline]
     validate_chain kernel/locking/lockdep.c:2399 [inline]
     __lock_acquire+0xf1e/0x3c60 kernel/locking/lockdep.c:3411
     lock_acquire+0x1db/0x520 kernel/locking/lockdep.c:3900
     __raw_spin_lock_bh include/linux/spinlock_api_smp.h:135 [inline]
     _raw_spin_lock_bh+0x31/0x40 kernel/locking/spinlock.c:168
     spin_lock_bh include/linux/spinlock.h:334 [inline]
     tipc_link_reset+0x125/0xdf0 net/tipc/link.c:850
     tipc_link_bc_create+0xb5/0x1f0 net/tipc/link.c:526
     tipc_bcast_init+0x59b/0xab0 net/tipc/bcast.c:521
     tipc_init_net+0x472/0x610 net/tipc/core.c:82
     ops_init+0xf7/0x520 net/core/net_namespace.c:129
     __register_pernet_operations net/core/net_namespace.c:940 [inline]
     register_pernet_operations+0x453/0xac0 net/core/net_namespace.c:1011
     register_pernet_subsys+0x28/0x40 net/core/net_namespace.c:1052
     tipc_init+0x83/0x104 net/tipc/core.c:140
     do_one_initcall+0x109/0x70a init/main.c:885
     do_initcall_level init/main.c:953 [inline]
     do_initcalls init/main.c:961 [inline]
     do_basic_setup init/main.c:979 [inline]
     kernel_init_freeable+0x4bd/0x57f init/main.c:1144
     kernel_init+0x13/0x180 init/main.c:1063
     ret_from_fork+0x3a/0x50 arch/x86/entry/entry_64.S:413
    
    The reason why the noise above was complained by LOCKDEP is because we
    nested to hold l->wakeupq.lock and l->inputq->lock in tipc_link_reset
    function. In fact it's unnecessary to move skb buffer from l->wakeupq
    queue to l->inputq queue while holding the two locks at the same time.
    Instead, we can move skb buffers in l->wakeupq queue to a temporary
    list first and then move the buffers of the temporary list to l->inputq
    queue, which is also safe for us.
    
    Fixes: 3f32d0be6c16 ("tipc: lock wakeup & inputq at tipc_link_reset()")
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e7eb05823806502747eadc31039cecfd7836ddeb
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Wed Oct 10 17:50:23 2018 +0200

    tipc: queue socket protocol error messages into socket receive buffer
    
    In tipc_sk_filter_rcv(), when we detect protocol messages with error we
    call tipc_sk_conn_proto_rcv() and let it reset the connection and notify
    the socket by calling sk->sk_state_change().
    
    However, tipc_sk_filter_rcv() may have been called from the function
    tipc_backlog_rcv(), in which case the socket lock is held and the socket
    already awake. This means that the sk_state_change() call is ignored and
    the error notification lost. Now the receive queue will remain empty and
    the socket sleeps forever.
    
    In this commit, we convert the protocol message into a connection abort
    message and enqueue it into the socket's receive queue. By this addition
    to the above state change we cover all conditions.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 047491ea334a454fa0647ec99dadcc6dd38417e0
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Wed Oct 10 17:34:01 2018 +0200

    tipc: set link tolerance correctly in broadcast link
    
    In the patch referred to below we added link tolerance as an additional
    criteria for declaring broadcast transmission "stale" and resetting the
    affected links.
    
    However, the 'tolerance' field of the broadcast link is never set, and
    remains at zero. This renders the whole commit without the intended
    improving effect, but luckily also with no negative effect.
    
    In this commit we add the missing initialization.
    
    Fixes: a4dc70d46cf1 ("tipc: extend link reset criteria for stale packet retransmission")
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7d3acb1372f6a5ccadcf1d3e0e309a3ef6e54493
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Fri Aug 24 12:28:06 2018 -0700

    tipc: switch to rhashtable iterator
    
    [ Upstream commit 9a07efa9aea2f4a59f35da0785a4e6a6b5a96192 ]
    
    syzbot reported a use-after-free in tipc_group_fill_sock_diag(),
    where tipc_group_fill_sock_diag() still reads tsk->group meanwhile
    tipc_group_delete() just deletes it in tipc_release().
    
    tipc_nl_sk_walk() aims to lock this sock when walking each sock
    in the hash table to close race conditions with sock changes like
    this one, by acquiring tsk->sk.sk_lock.slock spinlock, unfortunately
    this doesn't work at all. All non-BH call path should take
    lock_sock() instead to make it work.
    
    tipc_nl_sk_walk() brutally iterates with raw rht_for_each_entry_rcu()
    where RCU read lock is required, this is the reason why lock_sock()
    can't be taken on this path. This could be resolved by switching to
    rhashtable iterator API's, where taking a sleepable lock is possible.
    Also, the iterator API's are friendly for restartable calls like
    diag dump, the last position is remembered behind the scence,
    all we need to do here is saving the iterator into cb->args[].
    
    I tested this with parallel tipc diag dump and thousands of tipc
    socket creation and release, no crash or memory leak.
    
    Reported-by: syzbot+b9c8f3ab2994b7cd1625@syzkaller.appspotmail.com
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d949cfedbcbab4e91590576cbace2671924ad69c
Author: LUU Duc Canh <canh.d.luu@dektech.com.au>
Date:   Wed Sep 26 22:28:52 2018 +0200

    tipc: ignore STATE_MSG on wrong link session
    
    The initial session number when a link is created is based on a random
    value, taken from struct tipc_net->random. It is then incremented for
    each link reset to avoid mixing protocol messages from different link
    sessions.
    
    However, when a bearer is reset all its links are deleted, and will
    later be re-created using the same random value as the first time.
    This means that if the link never went down between creation and
    deletion we will still sometimes have two subsequent sessions with
    the same session number. In virtual environments with potentially
    long transmission times this has turned out to be a real problem.
    
    We now fix this by randomizing the session number each time a link
    is created.
    
    With a session number size of 16 bits this gives a risk of session
    collision of 1/64k. To reduce this further, we also introduce a sanity
    check on the very first STATE message arriving at a link. If this has
    an acknowledge value differing from 0, which is logically impossible,
    we ignore the message. The final risk for session collision is hence
    reduced to 1/4G, which should be sufficient.
    
    Signed-off-by: LUU Duc Canh <canh.d.luu@dektech.com.au>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c140eb166d681f66bd7e99fb121357db1a503e7f
Author: LUU Duc Canh <canh.d.luu@dektech.com.au>
Date:   Wed Sep 26 21:00:54 2018 +0200

    tipc: fix failover problem
    
    We see the following scenario:
    1) Link endpoint B on node 1 discovers that its peer endpoint is gone.
       Since there is a second working link, failover procedure is started.
    2) Link endpoint A on node 1 sends a FAILOVER message to peer endpoint
       A on node 2. The node item 1->2 goes to state FAILINGOVER.
    3) Linke endpoint A/2 receives the failover, and is supposed to take
       down its parallell link endpoint B/2, while producing a FAILOVER
       message to send back to A/1.
    4) However, B/2 has already been deleted, so no FAILOVER message can
       created.
    5) Node 1->2 remains in state FAILINGOVER forever, refusing to receive
       any messages that can bring B/1 up again. We are left with a non-
       redundant link between node 1 and 2.
    
    We fix this with letting endpoint A/2 build a dummy FAILOVER message
    to send to back to A/1, so that the situation can be resolved.
    
    Signed-off-by: LUU Duc Canh <canh.d.luu@dektech.com.au>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6e9feb33911f59e03684941f089115b58429fe79
Merge: a337531b942b 6787927475e5
Author: David S. Miller <davem@davemloft.net>
Date:   Sat Sep 29 11:24:22 2018 -0700

    Merge branch 'tipc-next'
    
    Jon Maloy says:
    
    ====================
    tipc: make connection setup more robust
    
    In this series we make a few improvements to the connection setup and
    probing mechanism, culminating in the last commit where we make it
    possible for a client socket to make multiple setup attempts in case
    it encounters receive buffer overflow at the listener socket.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6787927475e52f6933e3affce365dabb2aa2fadf
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Fri Sep 28 20:23:22 2018 +0200

    tipc: buffer overflow handling in listener socket
    
    Default socket receive buffer size for a listener socket is 2Mb. For
    each arriving empty SYN, the linux kernel allocates a 768 bytes buffer.
    This means that a listener socket can serve maximum 2700 simultaneous
    empty connection setup requests before it hits a receive buffer
    overflow, and much fewer if the SYN is carrying any significant
    amount of data.
    
    When this happens the setup request is rejected, and the client
    receives an ECONNREFUSED error.
    
    This commit mitigates this problem by letting the client socket try to
    retransmit the SYN message multiple times when it sees it rejected with
    the code TIPC_ERR_OVERLOAD. Retransmission is done at random intervals
    in the range of [100 ms, setup_timeout / 4], as many times as there is
    room for within the setup timeout limit.
    
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 25b9221b959483f17c2964d0922869e16caa86b5
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Sep 28 20:23:21 2018 +0200

    tipc: add SYN bit to connection setup messages
    
    Messages intended for intitating a connection are currently
    indistinguishable from regular datagram messages. The TIPC
    protocol specification defines bit 17 in word 0 as a SYN bit
    to allow sanity check of such messages in the listening socket,
    but this has so far never been implemented.
    
    We do that in this commit.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 39fdc9c71f652cdf056ec3341581bde805444b57
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Sep 28 20:23:20 2018 +0200

    tipc: refactor function tipc_sk_filter_connect()
    
    We refactor the function tipc_sk_filter_connect(), both to make it
    more readable and as a preparation for the next commit.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit afe8792fec69c693060c0db43ed4bf05d92ce45b
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Sep 28 20:23:19 2018 +0200

    tipc: refactor function tipc_sk_timeout()
    
    We refactor this function as a preparation for the coming commits in
    the same series.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5cbdbd1a1f30a083aada44595ca42952fc31e866
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Sep 28 20:23:18 2018 +0200

    tipc: refactor function tipc_msg_reverse()
    
    The function tipc_msg_reverse() is reversing the header of a message
    while reusing the original buffer. We have seen at several occasions
    that this may have unfortunate side effects when the buffer to be
    reversed is a clone.
    
    In one of the following commits we will again need to reverse cloned
    buffers, so this is the right time to permanently eliminate this
    problem. In this commit we let the said function always consume the
    original buffer and replace it with a new one when applicable.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 73da60476f94492ef330351cbe04a6685861cd20
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Mon Sep 3 19:12:41 2018 -0700

    tipc: orphan sock in tipc_release()
    
    [ Upstream commit 0a3b8b2b215f9e84b82ae97df71292ccfd92b1e7 ]
    
    Before we unlock the sock in tipc_release(), we have to
    detach sk->sk_socket from sk, otherwise a parallel
    tipc_sk_fill_sock_diag() could stil read it after we
    free this socket.
    
    Fixes: c30b70deb5f4 ("tipc: implement socket diagnostics for AF_TIPC")
    Reported-and-tested-by: syzbot+48804b87c16588ad491d@syzkaller.appspotmail.com
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3f32d0be6c16b902b687453c962d17eea5b8ea19
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Sep 25 22:09:10 2018 +0200

    tipc: lock wakeup & inputq at tipc_link_reset()
    
    In tipc_link_reset() we copy the wakeup queue to input queue using
    skb_queue_splice_init(link->wakeupq, link->inputq).
    This is performed without holding any locks. The lists might be
    simultaneously be accessed by other cpu threads in tipc_sk_rcv(),
    something leading to to random missing packets.
    
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 94b6ddce71780575fbbf9d2c36afc8440e61a281
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Sep 25 21:56:57 2018 +0200

    tipc: reset bearer if device carrier not ok
    
    If we detect that under lying carrier detects errors and goes down,
    we reset the bearer.
    
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 92ef12b32feab8f277b69e9fb89ede2796777f4d
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Sep 25 18:21:58 2018 +0200

    tipc: fix flow control accounting for implicit connect
    
    In the case of implicit connect message with data > 1K, the flow
    control accounting is incorrect. At this state, the socket does not
    know the peer nodes capability and falls back to legacy flow control
    by return 1, however the receiver of this message will perform the
    new block accounting. This leads to a slack and eventually traffic
    disturbance.
    
    In this commit, we perform tipc_node_get_capabilities() at implicit
    connect and perform accounting based on the peer's capability.
    
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b68d53c36108a66ad8602f22abd76c9bab42562b
Author: Haiqing Bai <Haiqing.Bai@windriver.com>
Date:   Mon Aug 27 09:32:26 2018 +0800

    tipc: fix the big/little endian issue in tipc_dest
    
    [ Upstream commit 30935198b7d0be12b1c45c328b66a7fdefb16256 ]
    
    In function tipc_dest_push, the 32bit variables 'node' and 'port'
    are stored separately in uppper and lower part of 64bit 'value'.
    Then this value is assigned to dst->value which is a union like:
    union
    {
      struct {
        u32 port;
        u32 node;
      };
      u64 value;
    }
    This works on little-endian machines like x86 but fails on big-endian
    machines.
    
    The fix remove the 'value' stack parameter and even the 'value'
    member of the union in tipc_dest, assign the 'node' and 'port' member
    directly with the input parameter to avoid the endian issue.
    
    Fixes: a80ae5306a73 ("tipc: improve destination linked list")
    Signed-off-by: Zhenbo Gao <zhenbo.gao@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Haiqing Bai <Haiqing.Bai@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 36b59c8e48e44b34c0929c8de269b186f3b2dadc
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Thu Aug 23 16:19:44 2018 -0700

    tipc: fix a missing rhashtable_walk_exit()
    
    [ Upstream commit bd583fe30427500a2d0abe25724025b1cb5e2636 ]
    
    rhashtable_walk_exit() must be paired with rhashtable_walk_enter().
    
    Fixes: 40f9f4397060 ("tipc: Fix tipc_sk_reinit race conditions")
    Cc: Herbert Xu <herbert@gondor.apana.org.au>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8fed734df37511ecfb522adb7dfe8541de362349
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Thu Aug 23 16:19:44 2018 -0700

    tipc: fix a missing rhashtable_walk_exit()
    
    [ Upstream commit bd583fe30427500a2d0abe25724025b1cb5e2636 ]
    
    rhashtable_walk_exit() must be paired with rhashtable_walk_enter().
    
    Fixes: 40f9f4397060 ("tipc: Fix tipc_sk_reinit race conditions")
    Cc: Herbert Xu <herbert@gondor.apana.org.au>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 67b076095dd7a13ff24e9b5f830fcb1291ae0678
Merge: 96eddb810b14 4851bfd64d42
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Sep 12 17:32:50 2018 -1000

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Fix up several Kconfig dependencies in netfilter, from Martin Willi
        and Florian Westphal.
    
     2) Memory leak in be2net driver, from Petr Oros.
    
     3) Memory leak in E-Switch handling of mlx5 driver, from Raed Salem.
    
     4) mlx5_attach_interface needs to check for errors, from Huy Nguyen.
    
     5) tipc_release() needs to orphan the sock, from Cong Wang.
    
     6) Need to program TxConfig register after TX/RX is enabled in r8169
        driver, not beforehand, from Maciej S. Szmigiero.
    
     7) Handle 64K PAGE_SIZE properly in ena driver, from Netanel Belgazal.
    
     8) Fix crash regression in ip_do_fragment(), from Taehee Yoo.
    
     9) syzbot can create conditions where kernel log is flooded with
        synflood warnings due to creation of many listening sockets, fix
        that. From Willem de Bruijn.
    
    10) Fix RCU issues in rds socket layer, from Cong Wang.
    
    11) Fix vlan matching in nfp driver, from Pieter Jansen van Vuuren.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (59 commits)
      nfp: flower: reject tunnel encap with ipv6 outer headers for offloading
      nfp: flower: fix vlan match by checking both vlan id and vlan pcp
      tipc: check return value of __tipc_dump_start()
      s390/qeth: don't dump past end of unknown HW header
      s390/qeth: use vzalloc for QUERY OAT buffer
      s390/qeth: switch on SG by default for IQD devices
      s390/qeth: indicate error when netdev allocation fails
      rds: fix two RCU related problems
      r8169: Clear RTL_FLAG_TASK_*_PENDING when clearing RTL_FLAG_TASK_ENABLED
      erspan: fix error handling for erspan tunnel
      erspan: return PACKET_REJECT when the appropriate tunnel is not found
      tcp: rate limit synflood warnings further
      MIPS: lantiq: dma: add dev pointer
      netfilter: xt_hashlimit: use s->file instead of s->private
      netfilter: nfnetlink_queue: Solve the NFQUEUE/conntrack clash for NF_REPEAT
      netfilter: cttimeout: ctnl_timeout_find_get() returns incorrect pointer to type
      netfilter: conntrack: timeout interface depend on CONFIG_NF_CONNTRACK_TIMEOUT
      netfilter: conntrack: reset tcp maxwin on re-register
      qmi_wwan: Support dynamic config on Quectel EP06
      ethernet: renesas: convert to SPDX identifiers
      ...

commit 12a78b026f870c575d3a98998b25084aac5b3c61
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Tue Sep 11 15:12:17 2018 -0700

    tipc: check return value of __tipc_dump_start()
    
    When __tipc_dump_start() fails with running out of memory,
    we have no reason to continue, especially we should avoid
    calling tipc_dump_done().
    
    Fixes: 8f5c5fcf3533 ("tipc: call start and done ops directly in __tipc_nl_compat_dumpit()")
    Reported-and-tested-by: syzbot+3f8324abccfbf8c74a9f@syzkaller.appspotmail.com
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8f5c5fcf353302374b36232d6885c1a3b579e5ca
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Tue Sep 4 14:54:55 2018 -0700

    tipc: call start and done ops directly in __tipc_nl_compat_dumpit()
    
    __tipc_nl_compat_dumpit() uses a netlink_callback on stack,
    so the only way to align it with other ->dumpit() call path
    is calling tipc_dump_start() and tipc_dump_done() directly
    inside it. Otherwise ->dumpit() would always get NULL from
    cb->args[].
    
    But tipc_dump_start() uses sock_net(cb->skb->sk) to retrieve
    net pointer, the cb->skb here doesn't set skb->sk, the net pointer
    is saved in msg->net instead, so introduce a helper function
    __tipc_dump_start() to pass in msg->net.
    
    Ying pointed out cb->args[0...3] are already used by other
    callbacks on this call path, so we can't use cb->args[0] any
    more, use cb->args[4] instead.
    
    Fixes: 9a07efa9aea2 ("tipc: switch to rhashtable iterator")
    Reported-and-tested-by: syzbot+e93a2c41f91b8e2c7d9b@syzkaller.appspotmail.com
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0a3b8b2b215f9e84b82ae97df71292ccfd92b1e7
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Mon Sep 3 19:12:41 2018 -0700

    tipc: orphan sock in tipc_release()
    
    Before we unlock the sock in tipc_release(), we have to
    detach sk->sk_socket from sk, otherwise a parallel
    tipc_sk_fill_sock_diag() could stil read it after we
    free this socket.
    
    Fixes: c30b70deb5f4 ("tipc: implement socket diagnostics for AF_TIPC")
    Reported-and-tested-by: syzbot+48804b87c16588ad491d@syzkaller.appspotmail.com
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 28619527b8a712590c93d0a9e24b4425b9376a8c
Merge: 60c1f89241d4 a33710bdb6b2
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Sep 4 12:45:11 2018 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Must perform TXQ teardown before unregistering interfaces in
        mac80211, from Toke Høiland-Jørgensen.
    
     2) Don't allow creating mac80211_hwsim with less than one channel, from
        Johannes Berg.
    
     3) Division by zero in cfg80211, fix from Johannes Berg.
    
     4) Fix endian issue in tipc, from Haiqing Bai.
    
     5) BPF sockmap use-after-free fixes from Daniel Borkmann.
    
     6) Spectre-v1 in mac80211_hwsim, from Jinbum Park.
    
     7) Missing rhashtable_walk_exit() in tipc, from Cong Wang.
    
     8) Revert kvzalloc() conversion of AF_PACKET, it breaks mmap() when
        kvzalloc() tries to use kmalloc() pages. From Eric Dumazet.
    
     9) Fix deadlock in hv_netvsc, from Dexuan Cui.
    
    10) Do not restart timewait timer on RST, from Florian Westphal.
    
    11) Fix double lwstate refcount grab in ipv6, from Alexey Kodanev.
    
    12) Unsolicit report count handling is off-by-one, fix from Hangbin Liu.
    
    13) Sleep-in-atomic in cadence driver, from Jia-Ju Bai.
    
    14) Respect ttl-inherit in ip6 tunnel driver, from Hangbin Liu.
    
    15) Use-after-free in act_ife, fix from Cong Wang.
    
    16) Missing hold to meta module in act_ife, from Vlad Buslov.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (91 commits)
      net: phy: sfp: Handle unimplemented hwmon limits and alarms
      net: sched: action_ife: take reference to meta module
      act_ife: fix a potential use-after-free
      net/mlx5: Fix SQ offset in QPs with small RQ
      tipc: correct spelling errors for tipc_topsrv_queue_evt() comments
      tipc: correct spelling errors for struct tipc_bc_base's comment
      bnxt_en: Do not adjust max_cp_rings by the ones used by RDMA.
      bnxt_en: Clean up unused functions.
      bnxt_en: Fix firmware signaled resource change logic in open.
      sctp: not traverse asoc trans list if non-ipv6 trans exists for ipv6_flowlabel
      sctp: fix invalid reference to the index variable of the iterator
      net/ibm/emac: wrong emac_calc_base call was used by typo
      net: sched: null actions array pointer before releasing action
      vhost: fix VHOST_GET_BACKEND_FEATURES ioctl request definition
      r8169: add support for NCube 8168 network card
      ip6_tunnel: respect ttl inherit for ip6tnl
      mac80211: shorten the IBSS debug messages
      mac80211: don't Tx a deauth frame if the AP forbade Tx
      mac80211: Fix station bandwidth setting after channel switch
      mac80211: fix a race between restart and CSA flows
      ...

commit a484ef3442d2f05fa59edf4f6d14a8169d1b94a6
Author: Zhenbo Gao <zhenbo.gao@windriver.com>
Date:   Mon Sep 3 16:36:46 2018 +0800

    tipc: correct spelling errors for tipc_topsrv_queue_evt() comments
    
    tipc_conn_queue_evt -> tipc_topsrv_queue_evt
    tipc_send_work -> tipc_conn_send_work
    tipc_send_to_sock -> tipc_conn_send_to_sock
    
    Signed-off-by: Zhenbo Gao <zhenbo.gao@windriver.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9cc1bf3928b31e515ed15477b3c7eb653d0b3b42
Author: Zhenbo Gao <zhenbo.gao@windriver.com>
Date:   Mon Sep 3 16:36:45 2018 +0800

    tipc: correct spelling errors for struct tipc_bc_base's comment
    
    Trivial fix for two spelling mistakes.
    
    Signed-off-by: Zhenbo Gao <zhenbo.gao@windriver.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 05a6843c9281807c51e44d76e2b8bf3e3a678a1c
Author: Zhenbo Gao <zhenbo.gao@windriver.com>
Date:   Mon Sep 3 14:08:40 2018 +0800

    tipc: correct structure parameter comments for topsrv
    
    Remove the following obsolete parameter comments of tipc_topsrv struct:
      @rcvbuf_cache
      @tipc_conn_new
      @tipc_conn_release
      @tipc_conn_recvmsg
      @imp
      @type
    
    Add the comments for the missing parameters below of tipc_topsrv struct:
      @awork
      @listener
    
    Remove the unused or duplicated parameter comments of tipc_conn struct:
      @outqueue_lock
      @rx_action
    
    Signed-off-by: Zhenbo Gao <zhenbo.gao@windriver.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9a07efa9aea2f4a59f35da0785a4e6a6b5a96192
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Fri Aug 24 12:28:06 2018 -0700

    tipc: switch to rhashtable iterator
    
    syzbot reported a use-after-free in tipc_group_fill_sock_diag(),
    where tipc_group_fill_sock_diag() still reads tsk->group meanwhile
    tipc_group_delete() just deletes it in tipc_release().
    
    tipc_nl_sk_walk() aims to lock this sock when walking each sock
    in the hash table to close race conditions with sock changes like
    this one, by acquiring tsk->sk.sk_lock.slock spinlock, unfortunately
    this doesn't work at all. All non-BH call path should take
    lock_sock() instead to make it work.
    
    tipc_nl_sk_walk() brutally iterates with raw rht_for_each_entry_rcu()
    where RCU read lock is required, this is the reason why lock_sock()
    can't be taken on this path. This could be resolved by switching to
    rhashtable iterator API's, where taking a sleepable lock is possible.
    Also, the iterator API's are friendly for restartable calls like
    diag dump, the last position is remembered behind the scence,
    all we need to do here is saving the iterator into cb->args[].
    
    I tested this with parallel tipc diag dump and thousands of tipc
    socket creation and release, no crash or memory leak.
    
    Reported-by: syzbot+b9c8f3ab2994b7cd1625@syzkaller.appspotmail.com
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit bd583fe30427500a2d0abe25724025b1cb5e2636
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Thu Aug 23 16:19:44 2018 -0700

    tipc: fix a missing rhashtable_walk_exit()
    
    rhashtable_walk_exit() must be paired with rhashtable_walk_enter().
    
    Fixes: 40f9f4397060 ("tipc: Fix tipc_sk_reinit race conditions")
    Cc: Herbert Xu <herbert@gondor.apana.org.au>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 30935198b7d0be12b1c45c328b66a7fdefb16256
Author: Haiqing Bai <Haiqing.Bai@windriver.com>
Date:   Mon Aug 27 09:32:26 2018 +0800

    tipc: fix the big/little endian issue in tipc_dest
    
    In function tipc_dest_push, the 32bit variables 'node' and 'port'
    are stored separately in uppper and lower part of 64bit 'value'.
    Then this value is assigned to dst->value which is a union like:
    union
    {
      struct {
        u32 port;
        u32 node;
      };
      u64 value;
    }
    This works on little-endian machines like x86 but fails on big-endian
    machines.
    
    The fix remove the 'value' stack parameter and even the 'value'
    member of the union in tipc_dest, assign the 'node' and 'port' member
    directly with the input parameter to avoid the endian issue.
    
    Fixes: a80ae5306a73 ("tipc: improve destination linked list")
    Signed-off-by: Zhenbo Gao <zhenbo.gao@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Haiqing Bai <Haiqing.Bai@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 91df8f524275477b0212f6ea539cd2aba9695f31
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Jul 6 20:10:06 2018 +0200

    tipc: make function tipc_net_finalize() thread safe
    
    [ Upstream commit 9faa89d4ed9d7d326f4763d262842270450f9b1f ]
    
    The setting of the node address is not thread safe, meaning that
    two discoverers may decide to set it simultanously, with a duplicate
    entry in the name table as result. We fix that with this commit.
    
    Fixes: 25b0b9c4e835 ("tipc: handle collisions of 32-bit node address hash values")
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a4100054e307ad6aae0ed4c46262d059a7239e4a
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Jul 6 20:10:05 2018 +0200

    tipc: fix correct setting of message type in second discoverer
    
    [ Upstream commit 92018c7ca959ccd346d6235dac03cf7fc1ba51f7 ]
    
    The duplicate address discovery protocol is not safe against two
    discoverers running in parallel. The one executing first after the
    trial period is over will set the node address and change its own
    message type to DSC_REQ_MSG. The one executing last may find that the
    node address is already set, and never change message type, with the
    result that its links may never be established.
    
    In this commmit we ensure that the message type always is set correctly
    after the trial period is over.
    
    Fixes: 25b0b9c4e835 ("tipc: handle collisions of 32-bit node address hash values")
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 871d366d7ad327e83538655a46bee1b5f4a4c1c3
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Jul 6 20:10:04 2018 +0200

    tipc: correct discovery message handling during address trial period
    
    [ Upstream commit e415577f57f4452150642500364cbe5fa6112813 ]
    
    With the duplicate address discovery protocol for tipc nodes addresses
    we introduced a one second trial period before a node is allocated a
    hash number to use as address.
    
    Unfortunately, we miss to handle the case when a regular LINK REQUEST/
    RESPONSE arrives from a cluster node during the trial period. Such
    messages are not ignored as they should be, leading to links setup
    attempts while the node still has no address.
    
    Fixes: 25b0b9c4e835 ("tipc: handle collisions of 32-bit node address hash values")
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit aa01f1bfd6e05b81b21ebf08032e7d5cb7391a9a
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Jul 6 20:10:03 2018 +0200

    tipc: fix wrong return value from function tipc_node_try_addr()
    
    [ Upstream commit 2a57f182420174c7fd4b19db979a2d135231a963 ]
    
    The function for checking if there is an node address conflict is
    supposed to return a suggestion for a new address if it finds a
    conflict, and zero otherwise. But in case the peer being checked
    is previously unknown it does instead return a "suggestion" for
    the checked address itself. This results in a DSC_TRIAL_FAIL_MSG
    being sent unecessarily to the peer, and sometimes makes the trial
    period starting over again.
    
    Fixes: 25b0b9c4e835 ("tipc: handle collisions of 32-bit node address hash values")
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6395ad8559f3a8f4299c027175db00cde67849f7
Merge: fedb8da96355 1be52e97ed3e
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Aug 9 09:57:13 2018 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) The real fix for the ipv6 route metric leak Sabrina was seeing, from
        Cong Wang.
    
     2) Fix syzbot triggers AF_PACKET v3 ring buffer insufficient room
        conditions, from Willem de Bruijn.
    
     3) vsock can reinitialize active work struct, fix from Cong Wang.
    
     4) RXRPC keepalive generator can wedge a cpu, fix from David Howells.
    
     5) Fix locking in AF_SMC ioctl, from Ursula Braun.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net:
      dsa: slave: eee: Allow ports to use phylink
      net/smc: move sock lock in smc_ioctl()
      net/smc: allow sysctl rmem and wmem defaults for servers
      net/smc: no shutdown in state SMC_LISTEN
      net: aquantia: Fix IFF_ALLMULTI flag functionality
      rxrpc: Fix the keepalive generator [ver #2]
      net/mlx5e: Cleanup of dcbnl related fields
      net/mlx5e: Properly check if hairpin is possible between two functions
      vhost: reset metadata cache when initializing new IOTLB
      llc: use refcount_inc_not_zero() for llc_sap_find()
      dccp: fix undefined behavior with 'cwnd' shift in ccid2_cwnd_restart()
      tipc: fix an interrupt unsafe locking scenario
      vsock: split dwork to avoid reinitializations
      net: thunderx: check for failed allocation lmac->dmacs
      cxgb4: mk_act_open_req() buggers ->{local, peer}_ip on big-endian hosts
      packet: refine ring v3 block size test to hold one frame
      ip6_tunnel: use the right value for ipv4 min mtu check in ip6_tnl_xmit
      ipv6: fix double refcount of fib6_metrics

commit 37436d9c0e8f62c3eebe204ff5776ff31fd64658
Author: Ying Xue <ying.xue@windriver.com>
Date:   Tue Aug 7 15:52:32 2018 +0800

    tipc: fix an interrupt unsafe locking scenario
    
    Commit 9faa89d4ed9d ("tipc: make function tipc_net_finalize() thread
    safe") tries to make it thread safe to set node address, so it uses
    node_list_lock lock to serialize the whole process of setting node
    address in tipc_net_finalize(). But it causes the following interrupt
    unsafe locking scenario:
    
           CPU0                    CPU1
           ----                    ----
      rht_deferred_worker()
      rhashtable_rehash_table()
      lock(&(&ht->lock)->rlock)
                                   tipc_nl_compat_doit()
                                   tipc_net_finalize()
                                   local_irq_disable();
                                   lock(&(&tn->node_list_lock)->rlock);
                                   tipc_sk_reinit()
                                   rhashtable_walk_enter()
                                   lock(&(&ht->lock)->rlock);
      <Interrupt>
      tipc_disc_rcv()
      tipc_node_check_dest()
      tipc_node_create()
      lock(&(&tn->node_list_lock)->rlock);
    
     *** DEADLOCK ***
    
    When rhashtable_rehash_table() holds ht->lock on CPU0, it doesn't
    disable BH. So if an interrupt happens after the lock, it can create
    an inverse lock ordering between ht->lock and tn->node_list_lock. As
    a consequence, deadlock might happen.
    
    The reason causing the inverse lock ordering scenario above is because
    the initial purpose of node_list_lock is not designed to do the
    serialization of node address setting.
    
    As cmpxchg() can guarantee CAS (compare-and-swap) process is atomic,
    we use it to replace node_list_lock to ensure setting node address can
    be atomically finished. It turns out the potential deadlock can be
    avoided as well.
    
    Fixes: 9faa89d4ed9d ("tipc: make function tipc_net_finalize() thread safe")
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <maloy@donjonn.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b053fcc4a1c3c8f9080e2904acee73481fb58c44
Author: Colin Ian King <colin.king@canonical.com>
Date:   Tue Jul 31 17:01:37 2018 +0100

    net/tipc: remove redundant variables 'tn' and 'oport'
    
    Variables 'tn' and 'oport'  are being assigned but are never used hence
    they are redundant and can be removed.
    
    Cleans up clang warnings:
    warning: variable 'oport' set but not used [-Wunused-but-set-variable]
    warning: variable 'tn' set but not used [-Wunused-but-set-variable]
    
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a0732548ba03c27fb42da4cf8e1eecc205760f12
Author: Jia-Ju Bai <baijiaju1990@gmail.com>
Date:   Fri Jul 27 17:31:35 2018 +0800

    net: tipc: bcast: Replace GFP_ATOMIC with GFP_KERNEL in tipc_bcast_init()
    
    tipc_bcast_init() is never called in atomic context.
    It calls kzalloc() with GFP_ATOMIC, which is not necessary.
    GFP_ATOMIC can be replaced with GFP_KERNEL.
    
    This is found by a static analysis tool named DCNS written by myself.
    
    Signed-off-by: Jia-Ju Bai <baijiaju1990@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 04b9ce48ef19e09d8c65eb506b7982e99db212d7
Author: Jia-Ju Bai <baijiaju1990@gmail.com>
Date:   Fri Jul 27 17:28:25 2018 +0800

    net: tipc: name_table: Replace GFP_ATOMIC with GFP_KERNEL in tipc_nametbl_init()
    
    tipc_nametbl_init() is never called in atomic context.
    It calls kzalloc() with GFP_ATOMIC, which is not necessary.
    GFP_ATOMIC can be replaced with GFP_KERNEL.
    
    This is found by a static analysis tool named DCNS written by myself.
    
    Signed-off-by: Jia-Ju Bai <baijiaju1990@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 63135ee0a6e5f5a5ad1345e48099e62d3d617a81
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Wed Jul 25 18:00:49 2018 +0800

    tipc: add missing dev_put() on error in tipc_enable_l2_media
    
    when tipc_own_id failed to obtain node identity,dev_put should
    be call before return -EINVAL.
    
    Fixes: 682cd3cf946b ("tipc: confgiure and apply UDP bearer MTU on running links")
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e064cce130497023806e2ae6a4114f1fed28eacd
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Thu Jul 19 17:16:59 2018 +0800

    tipc: make some functions static
    
    Fixes the following sparse warnings:
    
    net/tipc/link.c:376:5: warning: symbol 'link_bc_rcv_gap' was not declared. Should it be static?
    net/tipc/link.c:823:6: warning: symbol 'link_prepare_wakeup' was not declared. Should it be static?
    net/tipc/link.c:959:6: warning: symbol 'tipc_link_advance_backlog' was not declared. Should it be static?
    net/tipc/link.c:1009:5: warning: symbol 'tipc_link_retrans' was not declared. Should it be static?
    net/tipc/monitor.c:687:5: warning: symbol '__tipc_nl_add_monitor_peer' was not declared. Should it be static?
    net/tipc/group.c:230:20: warning: symbol 'tipc_group_find_member' was not declared. Should it be static?
    
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 40999f11ce677ce3c5d0e8f5f76c40192a26b479
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Wed Jul 18 19:50:06 2018 +0200

    tipc: make link capability update thread safe
    
    The commit referred to below introduced an update of the link
    capabilities field that is not safe. Given the recently added
    feature to remove idle node and link items after 5 minutes, there
    is a small risk that the update will happen at the very moment the
    targeted link is being removed. To avoid this we have to perform
    the update inside the node item's write lock protection.
    
    Fixes: 9012de508956 ("tipc: add sequence number check for link STATE messages")
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d81d25e66a0f218e7d6b6d81b2d57dacf8924195
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Tue Jul 17 22:11:23 2018 +0800

    tipc: remove unused tipc_group_size
    
    After commit eb929a91b213 ("tipc: improve poll() for group member socket"),
    it is no longer used.
    
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c94b1ac73244ff7eafb1a5df0b1e9c64f1b46113
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Tue Jul 17 21:58:46 2018 +0800

    tipc: remove unused tipc_link_is_active
    
    tipc_link_is_active is no longer used and can be removed.
    
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0e97c4fb180ce90406e597a0a3f882c99ee55785
Merge: e32f55f37321 7ea817f4e832
Author: David S. Miller <davem@davemloft.net>
Date:   Wed Jul 11 23:06:14 2018 -0700

    Merge branch 'tipc-make-link-protocol-more-resilient'
    
    Jon Maloy says:
    
    ====================
    tipc: make link protocol more resilient
    
    These two commits make the link ptotocol more resilient to
    infrastructures with frequent packet duplication and long delays.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7ea817f4e8322fa27fb860d15025bf72f68b179f
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Tue Jul 10 01:07:36 2018 +0200

    tipc: check session number before accepting link protocol messages
    
    In some virtual environments we observe a significant higher number of
    packet reordering and delays than we have been used to traditionally.
    
    This makes it necessary with stricter checks on incoming link protocol
    messages' session number, which until now only has been validated for
    RESET messages.
    
    Since the other two message types, ACTIVATE and STATE messages also
    carry this number, it is easy to extend the validation check to those
    messages.
    
    We also introduce a flag indicating if a link has a valid peer session
    number or not. This eliminates the mixing of 32- and 16-bit arithmethics
    we are currently using to achieve this.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9012de5089560136b849b920ad038b96160ed8f6
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Tue Jul 10 01:07:35 2018 +0200

    tipc: add sequence number check for link STATE messages
    
    Some switch infrastructures produce huge amounts of packet duplicates.
    This becomes a problem if those messages are STATE/NACK protocol
    messages, causing unnecessary retransmissions of already accepted
    packets.
    
    We now introduce a unique sequence number per STATE protocol message
    so that duplicates can be identified and ignored. This will also be
    useful when tracing such cases, and to avert replay attacks when TIPC
    is encrypted.
    
    For compatibility reasons we have to introduce a new capability flag
    TIPC_LINK_PROTO_SEQNO to handle this new feature.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a4dc70d46cf1a05b244a06d3d8c0c09908ea13b9
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Jul 6 15:22:36 2018 +0200

    tipc: extend link reset criteria for stale packet retransmission
    
    Currently a link is declared stale and reset if there has been 100
    repeated attempts to retransmit the same packet. However, in certain
    infrastructures we see that packet (NACK) duplicates and delays may
    cause such retransmit attempts to occur at a high rate, so that the
    peer doesn't have a reasonable chance to acknowledge the reception
    before the 100-limit is hit. This may take much less than the
    stipulated link tolerance time, and despite that probe/probe replies
    otherwise go through as normal.
    
    We now extend the criteria for link reset to also being time based.
    I.e., we don't reset the link until the link tolerance time is passed
    AND we have made 100 retransmissions attempts.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7f978e859f41e4d95a3ea14794d2577f755d7924
Merge: 0f62aeec0f05 9faa89d4ed9d
Author: David S. Miller <davem@davemloft.net>
Date:   Sat Jul 7 19:49:02 2018 +0900

    Merge branch 'tipc-dad-fixes'
    
    Jon Maloy says:
    
    ====================
    tipc: fixes in duplicate address discovery function
    
    commit 25b0b9c4e835 ("tipc: handle collisions of 32-bit node address
    hash values") introduced new functionality that has turned out to
    contain several bugs and weaknesses.
    
    We address those in this series.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9faa89d4ed9d7d326f4763d262842270450f9b1f
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Jul 6 20:10:06 2018 +0200

    tipc: make function tipc_net_finalize() thread safe
    
    The setting of the node address is not thread safe, meaning that
    two discoverers may decide to set it simultanously, with a duplicate
    entry in the name table as result. We fix that with this commit.
    
    Fixes: 25b0b9c4e835 ("tipc: handle collisions of 32-bit node address hash values")
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 92018c7ca959ccd346d6235dac03cf7fc1ba51f7
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Jul 6 20:10:05 2018 +0200

    tipc: fix correct setting of message type in second discoverer
    
    The duplicate address discovery protocol is not safe against two
    discoverers running in parallel. The one executing first after the
    trial period is over will set the node address and change its own
    message type to DSC_REQ_MSG. The one executing last may find that the
    node address is already set, and never change message type, with the
    result that its links may never be established.
    
    In this commmit we ensure that the message type always is set correctly
    after the trial period is over.
    
    Fixes: 25b0b9c4e835 ("tipc: handle collisions of 32-bit node address hash values")
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e415577f57f4452150642500364cbe5fa6112813
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Jul 6 20:10:04 2018 +0200

    tipc: correct discovery message handling during address trial period
    
    With the duplicate address discovery protocol for tipc nodes addresses
    we introduced a one second trial period before a node is allocated a
    hash number to use as address.
    
    Unfortunately, we miss to handle the case when a regular LINK REQUEST/
    RESPONSE arrives from a cluster node during the trial period. Such
    messages are not ignored as they should be, leading to links setup
    attempts while the node still has no address.
    
    Fixes: 25b0b9c4e835 ("tipc: handle collisions of 32-bit node address hash values")
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2a57f182420174c7fd4b19db979a2d135231a963
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Jul 6 20:10:03 2018 +0200

    tipc: fix wrong return value from function tipc_node_try_addr()
    
    The function for checking if there is an node address conflict is
    supposed to return a suggestion for a new address if it finds a
    conflict, and zero otherwise. But in case the peer being checked
    is previously unknown it does instead return a "suggestion" for
    the checked address itself. This results in a DSC_TRIAL_FAIL_MSG
    being sent unecessarily to the peer, and sometimes makes the trial
    period starting over again.
    
    Fixes: 25b0b9c4e835 ("tipc: handle collisions of 32-bit node address hash values")
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c53e0c787e672b4edbf719b7c1ec5833db3af2da
Author: Gustavo A. R. Silva <gustavo@embeddedor.com>
Date:   Wed Jul 4 16:13:59 2018 -0500

    tipc: mark expected switch fall-throughs
    
    In preparation to enabling -Wimplicit-fallthrough, mark switch cases
    where we are expecting to fall through.
    
    Warning level 2 was used: -Wimplicit-fallthrough=2
    
    Signed-off-by: Gustavo A. R. Silva <gustavo@embeddedor.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a1be5a20f137bdf436bab86c18998229908ce951
Author: GhantaKrishnamurthy MohanKrishna <mohan.krishna.ghanta.krishnamurthy@ericsson.com>
Date:   Fri Jun 29 13:26:18 2018 +0200

    tipc: extend sock diag for group communication
    
    This commit extends the existing TIPC socket diagnostics framework
    for information related to TIPC group communication.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: GhantaKrishnamurthy MohanKrishna <mohan.krishna.ghanta.krishnamurthy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6a939f365bdb03a74b4617bdb4402fc08da088b9
Author: GhantaKrishnamurthy MohanKrishna <mohan.krishna.ghanta.krishnamurthy@ericsson.com>
Date:   Fri Jun 29 13:23:41 2018 +0200

    tipc: Auto removal of peer down node instance
    
    A peer node is considered down if there are no
    active links (or) lost contact to the node. In current implementation,
    a peer node instance is deleted either if
    
    a) TIPC module is removed (or)
    b) Application can use a netlink/iproute2 interface to delete a
    specific down node.
    
    Thus, a down node instance lives in the system forever, unless the
    application explicitly removes it.
    
    We fix this by deleting the nodes which are down for
    a specified amount of time (5 minutes).
    Existing node supervision timer is used to achieve this.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: GhantaKrishnamurthy MohanKrishna <mohan.krishna.ghanta.krishnamurthy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 759f29b62fb9af5274e7f761f9f4cdfa7bb5a1f2
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Thu Jun 28 22:39:25 2018 +0200

    tipc: optimize function tipc_node_timeout()
    
    In single-link usage, the function tipc_node_timeout() still iterates
    over the whole link array to handle each link. Given that the maximum
    number of bearers are 3, there are 2 redundant iterations with lock
    grab/release. Since this function is executing very frequently it makes
    sense to optimize it.
    
    This commit adds conditional checking to exit from the loop if the
    known number of configured links has already been accessed.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ef9be755697f1b841c2a219a05df1a72ccd6f471
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Thu Jun 28 22:25:04 2018 +0200

    tipc: eliminate buffer cloning in function tipc_msg_extract()
    
    The function tipc_msg_extract() is using skb_clone() to clone inner
    messages from a message bundle buffer. Although this method is safe,
    it has an undesired effect that each buffer clone inherits the
    true-size of the bundling buffer. As a result, the buffer clone
    almost always ends up with being copied anyway by the message
    validation function. This makes the cloning into a sub-optimization.
    
    In this commit we take the consequence of this realization, and copy
    each inner message to a separately allocated buffer up front in the
    extraction function.
    
    As a bonus we can now eliminate the two cases where we had to copy
    re-routed packets that may potentially go out on the wire again.
    
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit dc5af7b0de98ce376fb7d34035749e71c081a7ff
Author: Ying Xue <ying.xue@windriver.com>
Date:   Tue May 8 21:44:06 2018 +0800

    tipc: eliminate KMSAN uninit-value in strcmp complaint
    
    [ Upstream commit 94f6a80c0c11828cb7b3d79294459dd8d761ca89 ]
    
    When we get link properties through netlink interface with
    tipc_nl_node_get_link(), we don't validate TIPC_NLA_LINK_NAME
    attribute at all, instead we directly use it. As a consequence,
    KMSAN detected the TIPC_NLA_LINK_NAME attribute was an uninitialized
    value, and then posted the following complaint:
    
    ==================================================================
    BUG: KMSAN: uninit-value in strcmp+0xf7/0x160 lib/string.c:329
    CPU: 1 PID: 4527 Comm: syz-executor655 Not tainted 4.16.0+ #87
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
    Google 01/01/2011
    Call Trace:
      __dump_stack lib/dump_stack.c:17 [inline]
      dump_stack+0x185/0x1d0 lib/dump_stack.c:53
      kmsan_report+0x142/0x240 mm/kmsan/kmsan.c:1067
      __msan_warning_32+0x6c/0xb0 mm/kmsan/kmsan_instr.c:683
      strcmp+0xf7/0x160 lib/string.c:329
      tipc_nl_node_get_link+0x220/0x6f0 net/tipc/node.c:1881
      genl_family_rcv_msg net/netlink/genetlink.c:599 [inline]
      genl_rcv_msg+0x1686/0x1810 net/netlink/genetlink.c:624
      netlink_rcv_skb+0x378/0x600 net/netlink/af_netlink.c:2447
      genl_rcv+0x63/0x80 net/netlink/genetlink.c:635
      netlink_unicast_kernel net/netlink/af_netlink.c:1311 [inline]
      netlink_unicast+0x166b/0x1740 net/netlink/af_netlink.c:1337
      netlink_sendmsg+0x1048/0x1310 net/netlink/af_netlink.c:1900
      sock_sendmsg_nosec net/socket.c:630 [inline]
      sock_sendmsg net/socket.c:640 [inline]
      ___sys_sendmsg+0xec0/0x1310 net/socket.c:2046
      __sys_sendmsg net/socket.c:2080 [inline]
      SYSC_sendmsg+0x2a3/0x3d0 net/socket.c:2091
      SyS_sendmsg+0x54/0x80 net/socket.c:2087
      do_syscall_64+0x309/0x430 arch/x86/entry/common.c:287
      entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    RIP: 0033:0x445589
    RSP: 002b:00007fb7ee66cdb8 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00000000006dac24 RCX: 0000000000445589
    RDX: 0000000000000000 RSI: 0000000020023000 RDI: 0000000000000003
    RBP: 00000000006dac20 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000000
    R13: 00007fffa2bf3f3f R14: 00007fb7ee66d9c0 R15: 0000000000000001
    
    Uninit was created at:
      kmsan_save_stack_with_flags mm/kmsan/kmsan.c:278 [inline]
      kmsan_internal_poison_shadow+0xb8/0x1b0 mm/kmsan/kmsan.c:188
      kmsan_kmalloc+0x94/0x100 mm/kmsan/kmsan.c:314
      kmsan_slab_alloc+0x11/0x20 mm/kmsan/kmsan.c:321
      slab_post_alloc_hook mm/slab.h:445 [inline]
      slab_alloc_node mm/slub.c:2737 [inline]
      __kmalloc_node_track_caller+0xaed/0x11c0 mm/slub.c:4369
      __kmalloc_reserve net/core/skbuff.c:138 [inline]
      __alloc_skb+0x2cf/0x9f0 net/core/skbuff.c:206
      alloc_skb include/linux/skbuff.h:984 [inline]
      netlink_alloc_large_skb net/netlink/af_netlink.c:1183 [inline]
      netlink_sendmsg+0x9a6/0x1310 net/netlink/af_netlink.c:1875
      sock_sendmsg_nosec net/socket.c:630 [inline]
      sock_sendmsg net/socket.c:640 [inline]
      ___sys_sendmsg+0xec0/0x1310 net/socket.c:2046
      __sys_sendmsg net/socket.c:2080 [inline]
      SYSC_sendmsg+0x2a3/0x3d0 net/socket.c:2091
      SyS_sendmsg+0x54/0x80 net/socket.c:2087
      do_syscall_64+0x309/0x430 arch/x86/entry/common.c:287
      entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    ==================================================================
    
    To quiet the complaint, TIPC_NLA_LINK_NAME attribute has been
    validated in tipc_nl_node_get_link() before it's used.
    
    Reported-by: syzbot+df0257c92ffd4fcc58cd@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5d33c9d0fbd8a5a5f2dfc4affb7f9f97cb86afd0
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Wed Apr 25 18:29:25 2018 +0200

    tipc: fix bug in function tipc_nl_node_dump_monitor
    
    [ Upstream commit 7dbc73e6124ce4d0cfbdd6166de388e9367c47ad ]
    
    Commit 36a50a989ee8 ("tipc: fix infinite loop when dumping link monitor
    summary") intended to fix a problem with user tool looping when max
    number of bearers are enabled.
    
    Unfortunately, the wrong version of the commit was posted, so the
    problem was not solved at all.
    
    This commit adds the missing part.
    
    Fixes: 36a50a989ee8 ("tipc: fix infinite loop when dumping link monitor summary")
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3f64c0c502ef050846c6dc1b56a9510afee53328
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Tue Apr 17 21:58:27 2018 +0200

    tipc: fix infinite loop when dumping link monitor summary
    
    [ Upstream commit 36a50a989ee8267588de520b8704b85f045a3220 ]
    
    When configuring the number of used bearers to MAX_BEARER and issuing
    command "tipc link monitor summary", the command enters infinite loop
    in user space.
    
    This issue happens because function tipc_nl_node_dump_monitor() returns
    the wrong 'prev_bearer' value when all potential monitors have been
    scanned.
    
    The correct behavior is to always try to scan all monitors until either
    the netlink message is full, in which case we return the bearer identity
    of the affected monitor, or we continue through the whole bearer array
    until we can return MAX_BEARERS. This solution also caters for the case
    where there may be gaps in the bearer array.
    
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 16489f2c87caa2b2e799972f661f603b1646aed0
Author: Ying Xue <ying.xue@windriver.com>
Date:   Tue May 8 21:44:06 2018 +0800

    tipc: eliminate KMSAN uninit-value in strcmp complaint
    
    [ Upstream commit 94f6a80c0c11828cb7b3d79294459dd8d761ca89 ]
    
    When we get link properties through netlink interface with
    tipc_nl_node_get_link(), we don't validate TIPC_NLA_LINK_NAME
    attribute at all, instead we directly use it. As a consequence,
    KMSAN detected the TIPC_NLA_LINK_NAME attribute was an uninitialized
    value, and then posted the following complaint:
    
    ==================================================================
    BUG: KMSAN: uninit-value in strcmp+0xf7/0x160 lib/string.c:329
    CPU: 1 PID: 4527 Comm: syz-executor655 Not tainted 4.16.0+ #87
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
    Google 01/01/2011
    Call Trace:
      __dump_stack lib/dump_stack.c:17 [inline]
      dump_stack+0x185/0x1d0 lib/dump_stack.c:53
      kmsan_report+0x142/0x240 mm/kmsan/kmsan.c:1067
      __msan_warning_32+0x6c/0xb0 mm/kmsan/kmsan_instr.c:683
      strcmp+0xf7/0x160 lib/string.c:329
      tipc_nl_node_get_link+0x220/0x6f0 net/tipc/node.c:1881
      genl_family_rcv_msg net/netlink/genetlink.c:599 [inline]
      genl_rcv_msg+0x1686/0x1810 net/netlink/genetlink.c:624
      netlink_rcv_skb+0x378/0x600 net/netlink/af_netlink.c:2447
      genl_rcv+0x63/0x80 net/netlink/genetlink.c:635
      netlink_unicast_kernel net/netlink/af_netlink.c:1311 [inline]
      netlink_unicast+0x166b/0x1740 net/netlink/af_netlink.c:1337
      netlink_sendmsg+0x1048/0x1310 net/netlink/af_netlink.c:1900
      sock_sendmsg_nosec net/socket.c:630 [inline]
      sock_sendmsg net/socket.c:640 [inline]
      ___sys_sendmsg+0xec0/0x1310 net/socket.c:2046
      __sys_sendmsg net/socket.c:2080 [inline]
      SYSC_sendmsg+0x2a3/0x3d0 net/socket.c:2091
      SyS_sendmsg+0x54/0x80 net/socket.c:2087
      do_syscall_64+0x309/0x430 arch/x86/entry/common.c:287
      entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    RIP: 0033:0x445589
    RSP: 002b:00007fb7ee66cdb8 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00000000006dac24 RCX: 0000000000445589
    RDX: 0000000000000000 RSI: 0000000020023000 RDI: 0000000000000003
    RBP: 00000000006dac20 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000000
    R13: 00007fffa2bf3f3f R14: 00007fb7ee66d9c0 R15: 0000000000000001
    
    Uninit was created at:
      kmsan_save_stack_with_flags mm/kmsan/kmsan.c:278 [inline]
      kmsan_internal_poison_shadow+0xb8/0x1b0 mm/kmsan/kmsan.c:188
      kmsan_kmalloc+0x94/0x100 mm/kmsan/kmsan.c:314
      kmsan_slab_alloc+0x11/0x20 mm/kmsan/kmsan.c:321
      slab_post_alloc_hook mm/slab.h:445 [inline]
      slab_alloc_node mm/slub.c:2737 [inline]
      __kmalloc_node_track_caller+0xaed/0x11c0 mm/slub.c:4369
      __kmalloc_reserve net/core/skbuff.c:138 [inline]
      __alloc_skb+0x2cf/0x9f0 net/core/skbuff.c:206
      alloc_skb include/linux/skbuff.h:984 [inline]
      netlink_alloc_large_skb net/netlink/af_netlink.c:1183 [inline]
      netlink_sendmsg+0x9a6/0x1310 net/netlink/af_netlink.c:1875
      sock_sendmsg_nosec net/socket.c:630 [inline]
      sock_sendmsg net/socket.c:640 [inline]
      ___sys_sendmsg+0xec0/0x1310 net/socket.c:2046
      __sys_sendmsg net/socket.c:2080 [inline]
      SYSC_sendmsg+0x2a3/0x3d0 net/socket.c:2091
      SyS_sendmsg+0x54/0x80 net/socket.c:2087
      do_syscall_64+0x309/0x430 arch/x86/entry/common.c:287
      entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    ==================================================================
    
    To quiet the complaint, TIPC_NLA_LINK_NAME attribute has been
    validated in tipc_nl_node_get_link() before it's used.
    
    Reported-by: syzbot+df0257c92ffd4fcc58cd@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d7ca5f59e5c1e90430d4b39ccb10b5b153e3a160
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Wed Apr 25 18:29:25 2018 +0200

    tipc: fix bug in function tipc_nl_node_dump_monitor
    
    [ Upstream commit 7dbc73e6124ce4d0cfbdd6166de388e9367c47ad ]
    
    Commit 36a50a989ee8 ("tipc: fix infinite loop when dumping link monitor
    summary") intended to fix a problem with user tool looping when max
    number of bearers are enabled.
    
    Unfortunately, the wrong version of the commit was posted, so the
    problem was not solved at all.
    
    This commit adds the missing part.
    
    Fixes: 36a50a989ee8 ("tipc: fix infinite loop when dumping link monitor summary")
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dd574712bccc23c8f3f2d0815988f191459bdeae
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Tue Apr 17 21:58:27 2018 +0200

    tipc: fix infinite loop when dumping link monitor summary
    
    [ Upstream commit 36a50a989ee8267588de520b8704b85f045a3220 ]
    
    When configuring the number of used bearers to MAX_BEARER and issuing
    command "tipc link monitor summary", the command enters infinite loop
    in user space.
    
    This issue happens because function tipc_nl_node_dump_monitor() returns
    the wrong 'prev_bearer' value when all potential monitors have been
    scanned.
    
    The correct behavior is to always try to scan all monitors until either
    the netlink message is full, in which case we return the bearer identity
    of the affected monitor, or we continue through the whole bearer array
    until we can return MAX_BEARERS. This solution also caters for the case
    where there may be gaps in the bearer array.
    
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 408afb8d7847faea115508ba154346e33edfc7d5
Merge: b058efc1acfd 1da92779e2e8
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jun 4 13:57:43 2018 -0700

    Merge branch 'work.aio-1' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs
    
    Pull aio updates from Al Viro:
     "Majority of AIO stuff this cycle. aio-fsync and aio-poll, mostly.
    
      The only thing I'm holding back for a day or so is Adam's aio ioprio -
      his last-minute fixup is trivial (missing stub in !CONFIG_BLOCK case),
      but let it sit in -next for decency sake..."
    
    * 'work.aio-1' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs: (46 commits)
      aio: sanitize the limit checking in io_submit(2)
      aio: fold do_io_submit() into callers
      aio: shift copyin of iocb into io_submit_one()
      aio_read_events_ring(): make a bit more readable
      aio: all callers of aio_{read,write,fsync,poll} treat 0 and -EIOCBQUEUED the same way
      aio: take list removal to (some) callers of aio_complete()
      aio: add missing break for the IOCB_CMD_FDSYNC case
      random: convert to ->poll_mask
      timerfd: convert to ->poll_mask
      eventfd: switch to ->poll_mask
      pipe: convert to ->poll_mask
      crypto: af_alg: convert to ->poll_mask
      net/rxrpc: convert to ->poll_mask
      net/iucv: convert to ->poll_mask
      net/phonet: convert to ->poll_mask
      net/nfc: convert to ->poll_mask
      net/caif: convert to ->poll_mask
      net/bluetooth: convert to ->poll_mask
      net/sctp: convert to ->poll_mask
      net/tipc: convert to ->poll_mask
      ...

commit 4df7338f6f4a3519f38ce523000f79e74ec25fe4
Author: Christoph Hellwig <hch@lst.de>
Date:   Sun Dec 31 16:36:32 2017 +0100

    net/tipc: convert to ->poll_mask
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>

commit 46948044f3cfaba9a978c599c6522123a07d591b
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Apr 16 08:29:42 2018 -0700

    tipc: add policy for TIPC_NLA_NET_ADDR
    
    [ Upstream commit ec518f21cb1a1b1f8a516499ea05c60299e04963 ]
    
    Before syzbot/KMSAN bites, add the missing policy for TIPC_NLA_NET_ADDR
    
    Fixes: 27c21416727a ("tipc: add net set to new netlink api")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>

commit b9634c2ee667de7e872b893b3a467672690db995
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed May 9 09:50:22 2018 -0700

    tipc: fix one byte leak in tipc_sk_set_orig_addr()
    
    [ Upstream commit 09c8b9718a7af674036643fa2e0dbb2f09aba75e ]
    
    sysbot/KMSAN reported an uninit-value in recvmsg() that
    I tracked down to tipc_sk_set_orig_addr(), missing
    srcaddr->member.scope initialization.
    
    This patches moves srcaddr->sock.scope init to follow
    fields order and ease future verifications.
    
    BUG: KMSAN: uninit-value in copy_to_user include/linux/uaccess.h:184 [inline]
    BUG: KMSAN: uninit-value in move_addr_to_user+0x32e/0x530 net/socket.c:226
    CPU: 0 PID: 4549 Comm: syz-executor287 Not tainted 4.17.0-rc3+ #88
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x185/0x1d0 lib/dump_stack.c:113
     kmsan_report+0x142/0x240 mm/kmsan/kmsan.c:1067
     kmsan_internal_check_memory+0x135/0x1e0 mm/kmsan/kmsan.c:1157
     kmsan_copy_to_user+0x69/0x160 mm/kmsan/kmsan.c:1199
     copy_to_user include/linux/uaccess.h:184 [inline]
     move_addr_to_user+0x32e/0x530 net/socket.c:226
     ___sys_recvmsg+0x4e2/0x810 net/socket.c:2285
     __sys_recvmsg net/socket.c:2328 [inline]
     __do_sys_recvmsg net/socket.c:2338 [inline]
     __se_sys_recvmsg net/socket.c:2335 [inline]
     __x64_sys_recvmsg+0x325/0x460 net/socket.c:2335
     do_syscall_64+0x154/0x220 arch/x86/entry/common.c:287
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    RIP: 0033:0x4455e9
    RSP: 002b:00007fe3bd36ddb8 EFLAGS: 00000246 ORIG_RAX: 000000000000002f
    RAX: ffffffffffffffda RBX: 00000000006dac24 RCX: 00000000004455e9
    RDX: 0000000000002002 RSI: 0000000020000400 RDI: 0000000000000003
    RBP: 00000000006dac20 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000000
    R13: 00007fff98ce4b6f R14: 00007fe3bd36e9c0 R15: 0000000000000003
    
    Local variable description: ----addr@___sys_recvmsg
    Variable was created at:
     ___sys_recvmsg+0xd5/0x810 net/socket.c:2246
     __sys_recvmsg net/socket.c:2328 [inline]
     __do_sys_recvmsg net/socket.c:2338 [inline]
     __se_sys_recvmsg net/socket.c:2335 [inline]
     __x64_sys_recvmsg+0x325/0x460 net/socket.c:2335
    
    Byte 19 of 32 is uninitialized
    
    Fixes: 31c82a2d9d51 ("tipc: add second source address to recvmsg()/recvfrom()")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 09c8b9718a7af674036643fa2e0dbb2f09aba75e
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed May 9 09:50:22 2018 -0700

    tipc: fix one byte leak in tipc_sk_set_orig_addr()
    
    sysbot/KMSAN reported an uninit-value in recvmsg() that
    I tracked down to tipc_sk_set_orig_addr(), missing
    srcaddr->member.scope initialization.
    
    This patches moves srcaddr->sock.scope init to follow
    fields order and ease future verifications.
    
    BUG: KMSAN: uninit-value in copy_to_user include/linux/uaccess.h:184 [inline]
    BUG: KMSAN: uninit-value in move_addr_to_user+0x32e/0x530 net/socket.c:226
    CPU: 0 PID: 4549 Comm: syz-executor287 Not tainted 4.17.0-rc3+ #88
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:77 [inline]
     dump_stack+0x185/0x1d0 lib/dump_stack.c:113
     kmsan_report+0x142/0x240 mm/kmsan/kmsan.c:1067
     kmsan_internal_check_memory+0x135/0x1e0 mm/kmsan/kmsan.c:1157
     kmsan_copy_to_user+0x69/0x160 mm/kmsan/kmsan.c:1199
     copy_to_user include/linux/uaccess.h:184 [inline]
     move_addr_to_user+0x32e/0x530 net/socket.c:226
     ___sys_recvmsg+0x4e2/0x810 net/socket.c:2285
     __sys_recvmsg net/socket.c:2328 [inline]
     __do_sys_recvmsg net/socket.c:2338 [inline]
     __se_sys_recvmsg net/socket.c:2335 [inline]
     __x64_sys_recvmsg+0x325/0x460 net/socket.c:2335
     do_syscall_64+0x154/0x220 arch/x86/entry/common.c:287
     entry_SYSCALL_64_after_hwframe+0x44/0xa9
    RIP: 0033:0x4455e9
    RSP: 002b:00007fe3bd36ddb8 EFLAGS: 00000246 ORIG_RAX: 000000000000002f
    RAX: ffffffffffffffda RBX: 00000000006dac24 RCX: 00000000004455e9
    RDX: 0000000000002002 RSI: 0000000020000400 RDI: 0000000000000003
    RBP: 00000000006dac20 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000000
    R13: 00007fff98ce4b6f R14: 00007fe3bd36e9c0 R15: 0000000000000003
    
    Local variable description: ----addr@___sys_recvmsg
    Variable was created at:
     ___sys_recvmsg+0xd5/0x810 net/socket.c:2246
     __sys_recvmsg net/socket.c:2328 [inline]
     __do_sys_recvmsg net/socket.c:2338 [inline]
     __se_sys_recvmsg net/socket.c:2335 [inline]
     __x64_sys_recvmsg+0x325/0x460 net/socket.c:2335
    
    Byte 19 of 32 is uninitialized
    
    Fixes: 31c82a2d9d51 ("tipc: add second source address to recvmsg()/recvfrom()")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5f30721c517a9c8512da3bc8d909ff5e810c2b44
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Wed May 9 02:59:41 2018 +0200

    tipc: clean up removal of binding table items
    
    In commit be47e41d77fb ("tipc: fix use-after-free in tipc_nametbl_stop")
    we fixed a problem caused by premature release of service range items.
    
    That fix is correct, and solved the problem. However, it doesn't address
    the root of the problem, which is that we don't lookup the tipc_service
     -> service_range -> publication items in the correct hierarchical
    order.
    
    In this commit we try to make this right, and as a side effect obtain
    some code simplification.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 94f6a80c0c11828cb7b3d79294459dd8d761ca89
Author: Ying Xue <ying.xue@windriver.com>
Date:   Tue May 8 21:44:06 2018 +0800

    tipc: eliminate KMSAN uninit-value in strcmp complaint
    
    When we get link properties through netlink interface with
    tipc_nl_node_get_link(), we don't validate TIPC_NLA_LINK_NAME
    attribute at all, instead we directly use it. As a consequence,
    KMSAN detected the TIPC_NLA_LINK_NAME attribute was an uninitialized
    value, and then posted the following complaint:
    
    ==================================================================
    BUG: KMSAN: uninit-value in strcmp+0xf7/0x160 lib/string.c:329
    CPU: 1 PID: 4527 Comm: syz-executor655 Not tainted 4.16.0+ #87
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
    Google 01/01/2011
    Call Trace:
      __dump_stack lib/dump_stack.c:17 [inline]
      dump_stack+0x185/0x1d0 lib/dump_stack.c:53
      kmsan_report+0x142/0x240 mm/kmsan/kmsan.c:1067
      __msan_warning_32+0x6c/0xb0 mm/kmsan/kmsan_instr.c:683
      strcmp+0xf7/0x160 lib/string.c:329
      tipc_nl_node_get_link+0x220/0x6f0 net/tipc/node.c:1881
      genl_family_rcv_msg net/netlink/genetlink.c:599 [inline]
      genl_rcv_msg+0x1686/0x1810 net/netlink/genetlink.c:624
      netlink_rcv_skb+0x378/0x600 net/netlink/af_netlink.c:2447
      genl_rcv+0x63/0x80 net/netlink/genetlink.c:635
      netlink_unicast_kernel net/netlink/af_netlink.c:1311 [inline]
      netlink_unicast+0x166b/0x1740 net/netlink/af_netlink.c:1337
      netlink_sendmsg+0x1048/0x1310 net/netlink/af_netlink.c:1900
      sock_sendmsg_nosec net/socket.c:630 [inline]
      sock_sendmsg net/socket.c:640 [inline]
      ___sys_sendmsg+0xec0/0x1310 net/socket.c:2046
      __sys_sendmsg net/socket.c:2080 [inline]
      SYSC_sendmsg+0x2a3/0x3d0 net/socket.c:2091
      SyS_sendmsg+0x54/0x80 net/socket.c:2087
      do_syscall_64+0x309/0x430 arch/x86/entry/common.c:287
      entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    RIP: 0033:0x445589
    RSP: 002b:00007fb7ee66cdb8 EFLAGS: 00000246 ORIG_RAX: 000000000000002e
    RAX: ffffffffffffffda RBX: 00000000006dac24 RCX: 0000000000445589
    RDX: 0000000000000000 RSI: 0000000020023000 RDI: 0000000000000003
    RBP: 00000000006dac20 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000000
    R13: 00007fffa2bf3f3f R14: 00007fb7ee66d9c0 R15: 0000000000000001
    
    Uninit was created at:
      kmsan_save_stack_with_flags mm/kmsan/kmsan.c:278 [inline]
      kmsan_internal_poison_shadow+0xb8/0x1b0 mm/kmsan/kmsan.c:188
      kmsan_kmalloc+0x94/0x100 mm/kmsan/kmsan.c:314
      kmsan_slab_alloc+0x11/0x20 mm/kmsan/kmsan.c:321
      slab_post_alloc_hook mm/slab.h:445 [inline]
      slab_alloc_node mm/slub.c:2737 [inline]
      __kmalloc_node_track_caller+0xaed/0x11c0 mm/slub.c:4369
      __kmalloc_reserve net/core/skbuff.c:138 [inline]
      __alloc_skb+0x2cf/0x9f0 net/core/skbuff.c:206
      alloc_skb include/linux/skbuff.h:984 [inline]
      netlink_alloc_large_skb net/netlink/af_netlink.c:1183 [inline]
      netlink_sendmsg+0x9a6/0x1310 net/netlink/af_netlink.c:1875
      sock_sendmsg_nosec net/socket.c:630 [inline]
      sock_sendmsg net/socket.c:640 [inline]
      ___sys_sendmsg+0xec0/0x1310 net/socket.c:2046
      __sys_sendmsg net/socket.c:2080 [inline]
      SYSC_sendmsg+0x2a3/0x3d0 net/socket.c:2091
      SyS_sendmsg+0x54/0x80 net/socket.c:2087
      do_syscall_64+0x309/0x430 arch/x86/entry/common.c:287
      entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    ==================================================================
    
    To quiet the complaint, TIPC_NLA_LINK_NAME attribute has been
    validated in tipc_nl_node_get_link() before it's used.
    
    Reported-by: syzbot+df0257c92ffd4fcc58cd@syzkaller.appspotmail.com
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit cebbeb6240580fa47c009071056262063d59c1fc
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Apr 16 08:29:42 2018 -0700

    tipc: add policy for TIPC_NLA_NET_ADDR
    
    
    [ Upstream commit ec518f21cb1a1b1f8a516499ea05c60299e04963 ]
    
    Before syzbot/KMSAN bites, add the missing policy for TIPC_NLA_NET_ADDR
    
    Fixes: 27c21416727a ("tipc: add net set to new netlink api")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ed2ba25f6d509431103ea3916f6db34595d62406
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Apr 16 08:29:42 2018 -0700

    tipc: add policy for TIPC_NLA_NET_ADDR
    
    
    [ Upstream commit ec518f21cb1a1b1f8a516499ea05c60299e04963 ]
    
    Before syzbot/KMSAN bites, add the missing policy for TIPC_NLA_NET_ADDR
    
    Fixes: 27c21416727a ("tipc: add net set to new netlink api")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b6693b49e4d36846ab0d638ff062920d0ec10e7
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Apr 16 08:29:42 2018 -0700

    tipc: add policy for TIPC_NLA_NET_ADDR
    
    [ Upstream commit ec518f21cb1a1b1f8a516499ea05c60299e04963 ]
    
    Before syzbot/KMSAN bites, add the missing policy for TIPC_NLA_NET_ADDR
    
    Fixes: 27c21416727a ("tipc: add net set to new netlink api")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 761b54e09947ac15b0d688ab3ecf430c890b6bfe
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Apr 16 08:29:42 2018 -0700

    tipc: add policy for TIPC_NLA_NET_ADDR
    
    
    [ Upstream commit ec518f21cb1a1b1f8a516499ea05c60299e04963 ]
    
    Before syzbot/KMSAN bites, add the missing policy for TIPC_NLA_NET_ADDR
    
    Fixes: 27c21416727a ("tipc: add net set to new netlink api")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e5cf362c34b14c8d01d19d4b821fb35e1779862
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Wed Apr 25 19:29:36 2018 +0200

    tipc: introduce ioctl for fetching node identity
    
    After the introduction of a 128-bit node identity it may be difficult
    for a user to correlate between this identity and the generated node
    hash address.
    
    We now try to make this easier by introducing a new ioctl() call for
    fetching a node identity by using the hash value as key. This will
    be particularly useful when we extend some of the commands in the
    'tipc' tool, but we also expect regular user applications to need
    this feature.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7dbc73e6124ce4d0cfbdd6166de388e9367c47ad
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Wed Apr 25 18:29:25 2018 +0200

    tipc: fix bug in function tipc_nl_node_dump_monitor
    
    Commit 36a50a989ee8 ("tipc: fix infinite loop when dumping link monitor
    summary") intended to fix a problem with user tool looping when max
    number of bearers are enabled.
    
    Unfortunately, the wrong version of the commit was posted, so the
    problem was not solved at all.
    
    This commit adds the missing part.
    
    Fixes: 36a50a989ee8 ("tipc: fix infinite loop when dumping link monitor summary")
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a72db42cee37a43f8a40e1f47358ac86921ad8e4
Merge: b9abdcfd10f1 1255fcb2a655
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Apr 20 09:34:39 2018 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Unbalanced refcounting in TIPC, from Jon Maloy.
    
     2) Only allow TCP_MD5SIG to be set on sockets in close or listen state.
        Once the connection is established it makes no sense to change this.
        From Eric Dumazet.
    
     3) Missing attribute validation in neigh_dump_table(), also from Eric
        Dumazet.
    
     4) Fix address comparisons in SCTP, from Xin Long.
    
     5) Neigh proxy table clearing can deadlock, from Wolfgang Bumiller.
    
     6) Fix tunnel refcounting in l2tp, from Guillaume Nault.
    
     7) Fix double list insert in team driver, from Paolo Abeni.
    
     8) af_vsock.ko module was accidently made unremovable, from Stefan
        Hajnoczi.
    
     9) Fix reference to freed llc_sap object in llc stack, from Cong Wang.
    
    10) Don't assume netdevice struct is DMA'able memory in virtio_net
        driver, from Michael S. Tsirkin.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (62 commits)
      net/smc: fix shutdown in state SMC_LISTEN
      bnxt_en: Fix memory fault in bnxt_ethtool_init()
      virtio_net: sparse annotation fix
      virtio_net: fix adding vids on big-endian
      virtio_net: split out ctrl buffer
      net: hns: Avoid action name truncation
      docs: ip-sysctl.txt: fix name of some ipv6 variables
      vmxnet3: fix incorrect dereference when rxvlan is disabled
      llc: hold llc_sap before release_sock()
      MAINTAINERS: Direct networking documentation changes to netdev
      atm: iphase: fix spelling mistake: "Tansmit" -> "Transmit"
      net: qmi_wwan: add Wistron Neweb D19Q1
      net: caif: fix spelling mistake "UKNOWN" -> "UNKNOWN"
      net: stmmac: Disable ACS Feature for GMAC >= 4
      net: mvpp2: Fix DMA address mask size
      net: change the comment of dev_mc_init
      net: qualcomm: rmnet: Fix warning seen with fill_info
      tun: fix vlan packet truncation
      tipc: fix infinite loop when dumping link monitor summary
      tipc: fix use-after-free in tipc_nametbl_stop
      ...

commit ddf967bb6bf26b869339101005880dcfd2363ada
Merge: cea395ac868d 682cd3cf946b
Author: David S. Miller <davem@davemloft.net>
Date:   Fri Apr 20 11:04:06 2018 -0400

    Merge branch 'tipc-Confgiuration-of-MTU-for-media-UDP'
    
    GhantaKrishnamurthy MohanKrishna says:
    
    ====================
    tipc: Confgiuration of MTU for media UDP
    
    Systematic measurements have shown that an emulated MTU of 14k for
    UDP bearers is the optimal value for maximal throughput. Accordingly,
    the default MTU of UDP bearers is changed to 14k.
    
    We also provide users with a fallback option from this value,
    by providing support to configure MTU for UDP bearers. The following
    options are introduced which are symmetrical to the design of
    confguring link tolerance.
    
    - Configure media with new MTU value, which will take effect on
    links going up after the moment it was configured. Alternatively,
    the bearer has to be disabled and re-enabled, for existing links to
    reflect the configured value.
    
    - Configure bearer with new MTU value, which take effect on
    running links dynamically.
    
    Please note:
    - User has to change MTU at both endpoints, otherwise the link
    will fall back to smallest MTU after a reset.
    - Failover from a link with higher MTU to a link with lower MTU
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 682cd3cf946b66bace4aa1037f49f0093ff182ce
Author: GhantaKrishnamurthy MohanKrishna <mohan.krishna.ghanta.krishnamurthy@ericsson.com>
Date:   Thu Apr 19 11:06:20 2018 +0200

    tipc: confgiure and apply UDP bearer MTU on running links
    
    Currently, we have option to configure MTU of UDP media. The configured
    MTU takes effect on the links going up after that moment. I.e, a user
    has to reset bearer to have new value applied across its links. This is
    confusing and disturbing on a running cluster.
    
    We now introduce the functionality to change the default UDP bearer MTU
    in struct tipc_bearer. Additionally, the links are updated dynamically,
    without any need for a reset, when bearer value is changed. We leverage
    the existing per-link functionality and the design being symetrical to
    the confguration of link tolerance.
    
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: GhantaKrishnamurthy MohanKrishna <mohan.krishna.ghanta.krishnamurthy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 901271e0403af638c224987c2a4e55cebade7e91
Author: GhantaKrishnamurthy MohanKrishna <mohan.krishna.ghanta.krishnamurthy@ericsson.com>
Date:   Thu Apr 19 11:06:19 2018 +0200

    tipc: implement configuration of UDP media MTU
    
    In previous commit, we changed the default emulated MTU for UDP bearers
    to 14k.
    
    This commit adds the functionality to set/change the default value
    by configuring new MTU for UDP media. UDP bearer(s) have to be disabled
    and enabled back for the new MTU to take effect.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: GhantaKrishnamurthy MohanKrishna <mohan.krishna.ghanta.krishnamurthy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a4dfa72d0acd1c99a160e25c099849ae37ad13fd
Author: GhantaKrishnamurthy MohanKrishna <mohan.krishna.ghanta.krishnamurthy@ericsson.com>
Date:   Thu Apr 19 11:06:18 2018 +0200

    tipc: set default MTU for UDP media
    
    Currently, all bearers are configured with MTU value same as the
    underlying L2 device. However, in case of bearers with media type
    UDP, higher throughput is possible with a fixed and higher emulated
    MTU value than adapting to the underlying L2 MTU.
    
    In this commit, we introduce a parameter mtu in struct tipc_media
    and a default value is set for UDP. A default value of 14k
    was determined by experimentation and found to have a higher throughput
    than 16k. MTU for UDP bearers are assigned the above set value of
    media MTU.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: GhantaKrishnamurthy MohanKrishna <mohan.krishna.ghanta.krishnamurthy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 36a50a989ee8267588de520b8704b85f045a3220
Author: Tung Nguyen <tung.q.nguyen@dektech.com.au>
Date:   Tue Apr 17 21:58:27 2018 +0200

    tipc: fix infinite loop when dumping link monitor summary
    
    When configuring the number of used bearers to MAX_BEARER and issuing
    command "tipc link monitor summary", the command enters infinite loop
    in user space.
    
    This issue happens because function tipc_nl_node_dump_monitor() returns
    the wrong 'prev_bearer' value when all potential monitors have been
    scanned.
    
    The correct behavior is to always try to scan all monitors until either
    the netlink message is full, in which case we return the bearer identity
    of the affected monitor, or we continue through the whole bearer array
    until we can return MAX_BEARERS. This solution also caters for the case
    where there may be gaps in the bearer array.
    
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit be47e41d77fba5bc17e9fb5f1c99217bb6691989
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Tue Apr 17 21:25:42 2018 +0200

    tipc: fix use-after-free in tipc_nametbl_stop
    
    When we delete a service item in tipc_nametbl_stop() we loop over
    all service ranges in the service's RB tree, and for each service
    range we loop over its pertaining publications while calling
    tipc_service_remove_publ() for each of them.
    
    However, tipc_service_remove_publ() has the side effect that it also
    removes the comprising service range item when there are no publications
    left. This leads to a "use-after-free" access when the inner loop
    continues to the next iteration, since the range item holding the list
    we are looping no longer exists.
    
    We fix this by moving the delete of the service range item outside
    the said function. Instead, we now let the two functions calling it
    test if the list is empty and perform the removal when that is the
    case.
    
    Reported-by: syzbot+d64b64afc55660106556@syzkaller.appspotmail.com
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1c9f0a946d5c6d3d6a83cfee0e8bb4e886559a67
Merge: 9783ccd0f250 c6404122cb18
Author: David S. Miller <davem@davemloft.net>
Date:   Mon Apr 16 18:08:18 2018 -0400

    Merge branch 'tipc-Better-check-user-provided-attributes'
    
    Eric Dumazet says:
    
    ====================
    tipc: Better check user provided attributes
    
    syzbot reported a crash in __tipc_nl_net_set()
    
    While fixing it, I also had to fix an old bug involving TIPC_NLA_NET_ADDR
    ====================
    
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c6404122cb18f1fbd2a6dc85ab687f6fa2e454cf
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Apr 16 08:29:43 2018 -0700

    tipc: fix possible crash in __tipc_nl_net_set()
    
    syzbot reported a crash in __tipc_nl_net_set() caused by NULL dereference.
    
    We need to check that both TIPC_NLA_NET_NODEID and TIPC_NLA_NET_NODEID_W1
    are present.
    
    We also need to make sure userland provided u64 attributes.
    
    Fixes: d50ccc2d3909 ("tipc: add 128-bit node identifier")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ec518f21cb1a1b1f8a516499ea05c60299e04963
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Apr 16 08:29:42 2018 -0700

    tipc: add policy for TIPC_NLA_NET_ADDR
    
    Before syzbot/KMSAN bites, add the missing policy for TIPC_NLA_NET_ADDR
    
    Fixes: 27c21416727a ("tipc: add net set to new netlink api")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 335b929b28aeb5bfc0698adb21deaf685b2982d1
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Apr 12 01:15:48 2018 +0200

    tipc: fix missing initializer in tipc_sendmsg()
    
    The stack variable 'dnode' in __tipc_sendmsg() may theoretically
    end up tipc_node_get_mtu() as an unitilalized variable.
    
    We fix this by intializing the variable at declaration. We also add
    a default else clause to the two conditional ones already there, so
    that we never end up in the named function if the given address
    type is illegal.
    
    Reported-by: syzbot+b0975ce9355b347c1546@syzkaller.appspotmail.com
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c3317f4db831b7564ff8d1670326456a7fbbbcb3
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Wed Apr 11 22:52:09 2018 +0200

    tipc: fix unbalanced reference counter
    
    When a topology subscription is created, we may encounter (or KASAN
    may provoke) a failure to create a corresponding service instance in
    the binding table. Instead of letting the tipc_nametbl_subscribe()
    report the failure back to the caller, the function just makes a warning
    printout and returns, without incrementing the subscription reference
    counter as expected by the caller.
    
    This makes the caller believe that the subscription was successful, so
    it will at a later moment try to unsubscribe the item. This involves
    a sub_put() call. Since the reference counter never was incremented
    in the first place, we get a premature delete of the subscription item,
    followed by a "use-after-free" warning.
    
    We fix this by adding a return value to tipc_nametbl_subscribe() and
    make the caller aware of the failure to subscribe.
    
    This bug seems to always have been around, but this fix only applies
    back to the commit shown below. Given the low risk of this happening
    we believe this to be sufficient.
    
    Fixes: commit 218527fe27ad ("tipc: replace name table service range
    array with rb tree")
    Reported-by: syzbot+aa245f26d42b8305d157@syzkaller.appspotmail.com
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c18bb396d3d261ebbb4efbc05129c5d354c541e4
Merge: fd3b36d27566 a2ac99905f1e
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 9 17:04:10 2018 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) The sockmap code has to free socket memory on close if there is
        corked data, from John Fastabend.
    
     2) Tunnel names coming from userspace need to be length validated. From
        Eric Dumazet.
    
     3) arp_filter() has to take VRFs properly into account, from Miguel
        Fadon Perlines.
    
     4) Fix oops in error path of tcf_bpf_init(), from Davide Caratti.
    
     5) Missing idr_remove() in u32_delete_key(), from Cong Wang.
    
     6) More syzbot stuff. Several use of uninitialized value fixes all
        over, from Eric Dumazet.
    
     7) Do not leak kernel memory to userspace in sctp, also from Eric
        Dumazet.
    
     8) Discard frames from unused ports in DSA, from Andrew Lunn.
    
     9) Fix DMA mapping and reset/failover problems in ibmvnic, from Thomas
        Falcon.
    
    10) Do not access dp83640 PHY registers prematurely after reset, from
        Esben Haabendal.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (46 commits)
      vhost-net: set packet weight of tx polling to 2 * vq size
      net: thunderx: rework mac addresses list to u64 array
      inetpeer: fix uninit-value in inet_getpeer
      dp83640: Ensure against premature access to PHY registers after reset
      devlink: convert occ_get op to separate registration
      ARM: dts: ls1021a: Specify TBIPA register address
      net/fsl_pq_mdio: Allow explicit speficition of TBIPA address
      ibmvnic: Do not reset CRQ for Mobility driver resets
      ibmvnic: Fix failover case for non-redundant configuration
      ibmvnic: Fix reset scheduler error handling
      ibmvnic: Zero used TX descriptor counter on reset
      ibmvnic: Fix DMA mapping mistakes
      tipc: use the right skb in tipc_sk_fill_sock_diag()
      sctp: sctp_sockaddr_af must check minimal addr length for AF_INET6
      net: dsa: Discard frames from unused ports
      sctp: do not leak kernel memory to user space
      soreuseport: initialise timewait reuseport field
      ipv4: fix uninit-value in ip_route_output_key_hash_rcu()
      dccp: initialize ireq->ir_mark
      net: fix uninit-value in __hw_addr_add_ex()
      ...

commit e41f0548473eb7b6499bd8482474e30ae6d31220
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Fri Apr 6 18:54:52 2018 -0700

    tipc: use the right skb in tipc_sk_fill_sock_diag()
    
    Commit 4b2e6877b879 ("tipc: Fix namespace violation in tipc_sk_fill_sock_diag")
    tried to fix the crash but failed, the crash is still 100% reproducible
    with it.
    
    In tipc_sk_fill_sock_diag(), skb is the diag dump we are filling, it is not
    correct to retrieve its NETLINK_CB(), instead, like other protocol diag,
    we should use NETLINK_CB(cb->skb).sk here.
    
    Reported-by: <syzbot+326e587eff1074657718@syzkaller.appspotmail.com>
    Fixes: 4b2e6877b879 ("tipc: Fix namespace violation in tipc_sk_fill_sock_diag")
    Fixes: c30b70deb5f4 (tipc: implement socket diagnostics for AF_TIPC)
    Cc: GhantaKrishnamurthy MohanKrishna <mohan.krishna.ghanta.krishnamurthy@ericsson.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f9ca6a561d40115696a54f16085c4edb17effc74
Merge: 9eb31227cbcc 87248d31d105
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Apr 4 17:42:38 2018 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
     "This fixes some fallout from the net-next merge the other day, plus
      some non-merge-window-related bug fixes:
    
      1) Fix sparse warnings in bcmgenet, systemport, b53, and mt7530
         (Florian Fainelli)
    
      2) pptp does a bogus dst_release() on a route we have a single
         refcount on, and attached to a socket, which needs that refcount
         (Eric Dumazet)
    
      3) UDP connected sockets on ipv6 can race with route update handling,
         resulting in a pre-PMTU update route still stuck on the socket and
         thus continuing to get ICMPV6_PKT_TOOBIG errors. We end up never
         seeing the updated route. (Alexey Kodanev)
    
      4) Missing list initializer(s) in TIPC (Jon Maloy)
    
      5) Connect phy early to prevent crashes in lan78xx driver (Alexander
         Graf)
    
      6) Fix build with modular NVMEM (Arnd Bergmann)
    
      7) netdevsim canot mark nsim_devlink_net_ops and nsim_fib_net_ops as
         __net_initdata, as these are references from module unload
         unconditionally (Arnd Bergmann)"
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (23 commits)
      netdevsim: remove incorrect __net_initdata annotations
      sfc: remove ctpio_dmabuf_start from stats
      inet: frags: fix ip6frag_low_thresh boundary
      tipc: Fix namespace violation in tipc_sk_fill_sock_diag
      net: avoid unneeded atomic operation in ip*_append_data()
      nvmem: disallow modular CONFIG_NVMEM
      net: hns3: fix length overflow when CONFIG_ARM64_64K_PAGES
      nfp: use full 40 bits of the NSP buffer address
      lan78xx: Connect phy early
      nfp: add a separate counter for packets with CHECKSUM_COMPLETE
      tipc: Fix missing list initializations in struct tipc_subscription
      ipv6: udp: set dst cache for a connected sk if current not valid
      ipv6: udp: convert 'connected' to bool type in udpv6_sendmsg()
      ipv6: allow to cache dst for a connected sk in ip6_sk_dst_lookup_flow()
      ipv6: add a wrapper for ip6_dst_store() with flowi6 checks
      net: phy: marvell10g: add thermal hwmon device
      pptp: remove a buggy dst release in pptp_connect()
      net: dsa: mt7530: Use NULL instead of plain integer
      net: dsa: b53: Fix sparse warnings in b53_mmap.c
      af_unix: remove redundant lockdep class
      ...

commit 4b2e6877b8793b60abb75c15abaaa4377807a358
Author: GhantaKrishnamurthy MohanKrishna <mohan.krishna.ghanta.krishnamurthy@ericsson.com>
Date:   Wed Apr 4 14:49:47 2018 +0200

    tipc: Fix namespace violation in tipc_sk_fill_sock_diag
    
    To fetch UID info for socket diagnostics, we determine the
    namespace of user context using tipc socket instance. This
    may cause namespace violation, as the kernel will remap based
    on UID.
    
    We fix this by fetching namespace info using the calling userspace
    netlink socket.
    
    Fixes: c30b70deb5f4 (tipc: implement socket diagnostics for AF_TIPC)
    Reported-by: syzbot+326e587eff1074657718@syzkaller.appspotmail.com
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: GhantaKrishnamurthy MohanKrishna <mohan.krishna.ghanta.krishnamurthy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b714295abc59cfa2fe46f9341503d9a7eb790503
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Tue Apr 3 19:11:19 2018 +0200

    tipc: Fix missing list initializations in struct tipc_subscription
    
    When an item of struct tipc_subscription is created, we fail to
    initialize the two lists aggregated into the struct. This has so far
    never been a problem, since the items are just added to a root
    object by list_add(), which does not require the addee list to be
    pre-initialized. However, syzbot is provoking situations where this
    addition fails, whereupon the attempted removal if the item from
    the list causes a crash.
    
    This problem seems to always have been around, despite that the code
    for creating this object was rewritten in commit 242e82cc95f6 ("tipc:
    collapse subscription creation functions"), which is still in net-next.
    
    We fix this for that commit by initializing the two lists properly.
    
    Fixes: 242e82cc95f6 ("tipc: collapse subscription creation functions")
    Reported-by: syzbot+0bb443b74ce09197e970@syzkaller.appspotmail.com
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6851cf28db1c4becc25a2906ecd080c0022a9f11
Merge: 24197ee21023 7494cfa6d36d
Author: David S. Miller <davem@davemloft.net>
Date:   Sat Mar 31 22:19:59 2018 -0400

    Merge branch 'tipc-slim-down-name-table'
    
    Jon Maloy says:
    
    ====================
    tipc: slim down name table
    
    We clean up and improve the name binding table:
    
     - Replace the memory consuming 'sub_sequence/service range' array with
       an RB tree.
     - Introduce support for overlapping service sequences/ranges
    
     v2: #1: Fixed a missing initialization reported by David Miller
         #4: Obsoleted and replaced a few more macros to get a consistent
             terminology in the API.
         #5: Added new commit to fix a potential string overflow bug (it
             is still only in net-next) reported by Arnd Bergmann
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7494cfa6d36d1556f17baa012dd93833620783db
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Mar 29 23:20:45 2018 +0200

    tipc: avoid possible string overflow
    
    gcc points out that the combined length of the fixed-length inputs to
    l->name is larger than the destination buffer size:
    
    net/tipc/link.c: In function 'tipc_link_create':
    net/tipc/link.c:465:26: error: '%s' directive writing up to 32 bytes
    into a region of size between 26 and 58 [-Werror=format-overflow=]
    sprintf(l->name, "%s:%s-%s:unknown", self_str, if_name, peer_str);
    
    net/tipc/link.c:465:2: note: 'sprintf' output 11 or more bytes
    (assuming 75) into a destination of size 60
    sprintf(l->name, "%s:%s-%s:unknown", self_str, if_name, peer_str);
    
    A detailed analysis reveals that the theoretical maximum length of
    a link name is:
    max self_str + 1 + max if_name + 1 + max peer_str + 1 + max if_name =
    16 + 1 + 15 + 1 + 16 + 1 + 15 = 65
    Since we also need space for a trailing zero we now set MAX_LINK_NAME
    to 68.
    
    Just to be on the safe side we also replace the sprintf() call with
    snprintf().
    
    Fixes: 25b0b9c4e835 ("tipc: handle collisions of 32-bit node address
    hash values")
    Reported-by: Arnd Bergmann <arnd@arndb.de>
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7a74d39cc2927302bc236397c1fdb1fe5be209ce
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Mar 29 23:20:44 2018 +0200

    tipc: tipc: rename address types in user api
    
    The three address type structs in the user API have names that in
    reality reflect the specific, non-Linux environment where they were
    originally created.
    
    We now give them more intuitive names, in accordance with how TIPC is
    described in the current documentation.
    
    struct tipc_portid   -> struct tipc_socket_addr
    struct tipc_name     -> struct tipc_service_addr
    struct tipc_name_seq -> struct tipc_service_range
    
    To avoid confusion, we also update some commmets and macro names to
     match the new terminology.
    
    For compatibility, we add macros that map all old names to the new ones.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 37922ea4a3105176357c8d565a9d982c4a08714a
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Mar 29 23:20:43 2018 +0200

    tipc: permit overlapping service ranges in name table
    
    With the new RB tree structure for service ranges it becomes possible to
    solve an old problem; - we can now allow overlapping service ranges in
    the table.
    
    When inserting a new service range to the tree, we use 'lower' as primary
    key, and when necessary 'upper' as secondary key.
    
    Since there may now be multiple service ranges matching an indicated
    'lower' value, we must also add the 'upper' value to the functions
    used for removing publications, so that the correct, corresponding
    range item can be found.
    
    These changes guarantee that a well-formed publication/withdrawal item
    from a peer node never will be rejected, and make it possible to
    eliminate the problematic backlog functionality we currently have for
    handling such cases.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f20889f72bd531cad88fbb571755a52cabf43424
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Mar 29 23:20:42 2018 +0200

    tipc: refactor name table translate function
    
    The function tipc_nametbl_translate() function is ugly and hard to
    follow. This can be improved somewhat by introducing a stack variable
    for holding the publication list to be used and re-ordering the if-
    clauses for selection of algorithm.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 218527fe27adaebeb81eb770459eb335517e90ee
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Mar 29 23:20:41 2018 +0200

    tipc: replace name table service range array with rb tree
    
    The current design of the binding table has an unnecessary memory
    consuming and complex data structure. It aggregates the service range
    items into an array, which is expanded by a factor two every time it
    becomes too small to hold a new item. Furthermore, the arrays never
    shrink when the number of ranges diminishes.
    
    We now replace this array with an RB tree that is holding the range
    items as tree nodes, each range directly holding a list of bindings.
    
    This, along with a few name changes, improves both readability and
    volume of the code, as well as reducing memory consumption and hopefully
    improving cache hit rate.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e1a22d13eb1f302afd692583777e27828d375a39
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Mon Mar 26 14:33:13 2018 +0000

    tipc: tipc_node_create() can be static
    
    Fixes the following sparse warning:
    
    net/tipc/node.c:336:18: warning:
     symbol 'tipc_node_create' was not declared. Should it be static?
    
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c76f2481b60a62814f4cb1678e48efa3385895aa
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Mon Mar 26 14:32:44 2018 +0000

    tipc: fix error handling in tipc_udp_enable()
    
    Release alloced resource before return from the error handling
    case in tipc_udp_enable(), otherwise will cause memory leak.
    
    Fixes: 52dfae5c85a4 ("tipc: obtain node identity from interface by default")
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit da18ab32d78b6414267d3e5c8c9b5ab34a6d3321
Author: kbuild test robot <fengguang.wu@intel.com>
Date:   Sat Mar 24 03:47:42 2018 +0800

    tipc: tipc_disc_addr_trial_msg() can be static
    
    Fixes: 25b0b9c4e835 ("tipc: handle collisions of 32-bit node address hash values")
    Signed-off-by: Fengguang Wu <fengguang.wu@intel.com>
    Acked-by: Jon Maloy jon.maloy@ericsson.com
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 185c88b1ef47f9b0a35b92e7a66d51b4acce2136
Author: Pan Bian <bianpan2016@163.com>
Date:   Sun Apr 23 15:09:19 2017 +0800

    tipc: check return value of nlmsg_new
    
    
    [ Upstream commit 78302fd405769c9a9379e9adda119d533dce2eed ]
    
    Function nlmsg_new() will return a NULL pointer if there is no enough
    memory, and its return value should be checked before it is used.
    However, in function tipc_nl_node_get_monitor(), the validation of the
    return value of function nlmsg_new() is missed. This patch fixes the
    bug.
    
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19415dbf3097d3eace4fc756cdf49cad0e697134
Merge: 594619497f3d 52dfae5c85a4
Author: David S. Miller <davem@davemloft.net>
Date:   Fri Mar 23 13:12:19 2018 -0400

    Merge branch 'tipc-introduce-128-bit-auto-configurable-node-id'
    
    Jon Maloy says:
    
    ====================
    tipc: introduce 128-bit auto-configurable node id
    
    We introduce a 128-bit free-format node identity as an alternative to
    the legacy <Zone.Cluster.Node> structured 32-bit node address.
    
    We also make configuration of this identity optional; if a bearer is
    enabled without a pre-configured node id it will be set automatically
    based on the used interface's MAC or IP address.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 52dfae5c85a4c1078e9f1d5e8947d4a25f73dd81
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Mar 22 20:42:52 2018 +0100

    tipc: obtain node identity from interface by default
    
    Selecting and explicitly configuring a TIPC node identity may be
    unwanted in some cases.
    
    In this commit we introduce a default setting if the identity has not
    been set at the moment the first bearer is enabled. We do this by
    using a raw copy of a unique identifier from the used interface: MAC
    address in the case of an L2 bearer, IPv4/IPv6 address in the case
    of a UDP bearer.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 25b0b9c4e835ffaa65b61c3efe2e28acf84d0259
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Mar 22 20:42:51 2018 +0100

    tipc: handle collisions of 32-bit node address hash values
    
    When a 32-bit node address is generated from a 128-bit identifier,
    there is a risk of collisions which must be discovered and handled.
    
    We do this as follows:
    - We don't apply the generated address immediately to the node, but do
      instead initiate a 1 sec trial period to allow other cluster members
      to discover and handle such collisions.
    
    - During the trial period the node periodically sends out a new type
      of message, DSC_TRIAL_MSG, using broadcast or emulated broadcast,
      to all the other nodes in the cluster.
    
    - When a node is receiving such a message, it must check that the
      presented 32-bit identifier either is unused, or was used by the very
      same peer in a previous session. In both cases it accepts the request
      by not responding to it.
    
    - If it finds that the same node has been up before using a different
      address, it responds with a DSC_TRIAL_FAIL_MSG containing that
      address.
    
    - If it finds that the address has already been taken by some other
      node, it generates a new, unused address and returns it to the
      requester.
    
    - During the trial period the requesting node must always be prepared
      to accept a failure message, i.e., a message where a peer suggests a
      different (or equal)  address to the one tried. In those cases it
      must apply the suggested value as trial address and restart the trial
      period.
    
    This algorithm ensures that in the vast majority of cases a node will
    have the same address before and after a reboot. If a legacy user
    configures the address explicitly, there will be no trial period and
    messages, so this protocol addition is completely backwards compatible.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d50ccc2d3909fc1b4d40e4af16b026f05dc68707
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Mar 22 20:42:50 2018 +0100

    tipc: add 128-bit node identifier
    
    We add a 128-bit node identity, as an alternative to the currently used
    32-bit node address.
    
    For the sake of compatibility and to minimize message header changes
    we retain the existing 32-bit address field. When not set explicitly by
    the user, this field will be filled with a hash value generated from the
    much longer node identity, and be used as a shorthand value for the
    latter.
    
    We permit either the address or the identity to be set by configuration,
    but not both, so when the address value is set by a legacy user the
    corresponding 128-bit node identity is generated based on the that value.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 23fd3eace088ab1872ee59c19191a119ec779ac9
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Mar 22 20:42:49 2018 +0100

    tipc: remove direct accesses to own_addr field in struct tipc_net
    
    As a preparation to changing the addressing structure of TIPC we replace
    all direct accesses to the tipc_net::own_addr field with the function
    dedicated for this, tipc_own_addr().
    
    There are no changes to program logics in this commit.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b89afb116ca2830cc982624f93e888860868a84b
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Mar 22 20:42:48 2018 +0100

    tipc: allow closest-first lookup algorithm when legacy address is configured
    
    The removal of an internal structure of the node address has an unwanted
    side effect.
    - Currently, if a user is sending an anycast message with destination
      domain 0, the tipc_namebl_translate() function will use the 'closest-
      first' algorithm to first look for a node local destination, and only
      when no such is found, will it resort to the cluster global 'round-
      robin' lookup algorithm.
    - Current users can get around this, and enforce unconditional use of
      global round-robin by indicating a destination as Z.0.0 or Z.C.0.
    - This option disappears when we make the node address flat, since the
      lookup algorithm has no way of recognizing this case. So, as long as
      there are node local destinations, the algorithm will always select
      one of those, and there is nothing the sender can do to change this.
    
    We solve this by eliminating the 'closest-first' option, which was never
    a good idea anyway, for non-legacy users, but only for those. To
    distinguish between legacy users and non-legacy users we introduce a new
    flag 'legacy_addr_format' in struct tipc_core, to be set when the user
    configures a legacy-style Z.C.N node address. Hence, when a legacy user
    indicates a zero lookup domain 'closest-first' is selected, and in all
    other cases we use 'round-robin'.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2026364149db36c6a2c0c8cae8362fe9a7f954dd
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Mar 22 20:42:47 2018 +0100

    tipc: remove restrictions on node address values
    
    Nominally, TIPC organizes network nodes into a three-level network
    hierarchy consisting of the levels 'zone', 'cluster' and 'node'. This
    hierarchy is reflected in the node address format, - it is sub-divided
    into an 8-bit zone id, and 12 bit cluster id, and a 12-bit node id.
    
    However, the 'zone' and 'cluster' levels have in reality never been
    fully implemented,and never will be. The result of this has been
    that the first 20 bits the node identity structure have been wasted,
    and the usable node identity range within a cluster has been limited
    to 12 bits. This is starting to become a problem.
    
    In the following commits, we will need to be able to connect between
    nodes which are using the whole 32-bit value space of the node address.
    We therefore remove the restrictions on which values can be assigned
    to node identity, -it is from now on only a 32-bit integer with no
    assumed internal structure.
    
    Isolation between clusters is now achieved only by setting different
    values for the 'network id' field used during neighbor discovery, in
    practice leading to the latter becoming the new cluster identity.
    
    The rules for accepting discovery requests/responses from neighboring
    nodes now become:
    
    - If the user is using legacy address format on both peers, reception
      of discovery messages is subject to the legacy lookup domain check
      in addition to the cluster id check.
    
    - Otherwise, the discovery request/response is always accepted, provided
      both peers have the same network id.
    
    This secures backwards compatibility for users who have been using zone
    or cluster identities as cluster separators, instead of the intended
    'network id'.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b39e465e56ec38ca64b4c0affeb6411eb0ed7267
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Mar 22 20:42:46 2018 +0100

    tipc: some cleanups in the file discover.c
    
    To facilitate the coming changes in the neighbor discovery functionality
    we make some renaming and refactoring of that code. The functional changes
    in this commit are trivial, e.g., that we move the message sending call in
    tipc_disc_timeout() outside the spinlock protected region.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit cb30a63384bc91d5da06e1cede1115f666a29271
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Mar 22 20:42:45 2018 +0100

    tipc: refactor function tipc_enable_bearer()
    
    As a preparation for the next commits we try to reduce the footprint of
    the function tipc_enable_bearer(), while hopefully making is simpler to
    follow.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f5b5a3b7879d5ed5fcbf51aba4e8eed1232077de
Merge: 334e76782563 872619d8cf81
Author: David S. Miller <davem@davemloft.net>
Date:   Thu Mar 22 14:44:11 2018 -0400

    Merge branch 'tipc-diag'
    
    GhantaKrishnamurthy MohanKrishna says:
    
    ====================
    tipc: socket diagnostics additions for AF_TIPC
    
    The following patchsets add socket diagnostics support for AF_TIPC by
    using the sock diag framework. The patchset was created on top of
    commit id: fb66cb0.
    
    New iproute2 package is needed to use this functionality which will
    be sent for review in a seperate mail.
    
    The commit series improves diagnosis of tipc sockets by exporting the
    configuration, states and statistics of sockets.
    
    The series has been co-authored by Parthasarathy Bhuvaragan and
    consist of two parts:
    
    1-2:  Adaptations of existing code to support sock_diag framework.
    We modify existing functions to support socket diagnostics. Required
    information about the sockets are exported.
    
    3:  Step sk_drops during packet drop.
    This occurs if the packet cannot be queued due to queue length exceeding
    configured thresholds.
    
    The diag module is optional, and if enabled it will be loaded on demand
    when needed.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 872619d8cf810c17279335ef531a2a34f3b4e589
Author: GhantaKrishnamurthy MohanKrishna <mohan.krishna.ghanta.krishnamurthy@ericsson.com>
Date:   Wed Mar 21 14:37:45 2018 +0100

    tipc: step sk->sk_drops when rcv buffer is full
    
    Currently when tipc is unable to queue a received message on a
    socket, the message is rejected back to the sender with error
    TIPC_ERR_OVERLOAD. However, the application on this socket
    has no knowledge about these discards.
    
    In this commit, we try to step the sk_drops counter when tipc
    is unable to queue a received message. Export sk_drops
    using tipc socket diagnostics.
    
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: GhantaKrishnamurthy MohanKrishna <mohan.krishna.ghanta.krishnamurthy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c30b70deb5f4861f590031c33fd3ec6cc63f1df1
Author: GhantaKrishnamurthy MohanKrishna <mohan.krishna.ghanta.krishnamurthy@ericsson.com>
Date:   Wed Mar 21 14:37:44 2018 +0100

    tipc: implement socket diagnostics for AF_TIPC
    
    This commit adds socket diagnostics capability for AF_TIPC in netlink
    family NETLINK_SOCK_DIAG in a new kernel module (diag.ko).
    
    The following are key design considerations:
    - config TIPC_DIAG has default y, like INET_DIAG.
    - only requests with flag NLM_F_DUMP is supported (dump all).
    - tipc_sock_diag_req message is introduced to send filter parameters.
    - the response attributes are of TLV, some nested.
    
    To avoid exposing data structures between diag and tipc modules and
    avoid code duplication, the following additions are required:
    - export tipc_nl_sk_walk function to reuse socket iterator.
    - export tipc_sk_fill_sock_diag to fill the tipc diag attributes.
    - create a sock_diag response message in __tipc_add_sock_diag defined
      in diag.c and use the above exported tipc_sk_fill_sock_diag
      to fill response.
    
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: GhantaKrishnamurthy MohanKrishna <mohan.krishna.ghanta.krishnamurthy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit dfde331e757fd792e1c9579b72a8370ca665e5ed
Author: GhantaKrishnamurthy MohanKrishna <mohan.krishna.ghanta.krishnamurthy@ericsson.com>
Date:   Wed Mar 21 14:37:43 2018 +0100

    tipc: modify socket iterator for sock_diag
    
    The current socket iterator function tipc_nl_sk_dump, handles socket
    locks and calls __tipc_nl_add_sk for each socket.
    To reuse this logic in sock_diag implementation, we do minor
    modifications to make these functions generic as described below.
    
    In this commit, we add a two new functions __tipc_nl_sk_walk,
    __tipc_nl_add_sk_info and modify tipc_nl_sk_dump, __tipc_nl_add_sk
    accordingly.
    
    In __tipc_nl_sk_walk we:
    1. acquire and release socket locks
    2. for each socket, execute the specified callback function
    
    In __tipc_nl_add_sk we:
    - Move the netlink attribute insertion to __tipc_nl_add_sk_info.
    
    tipc_nl_sk_dump calls tipc_nl_sk_walk with __tipc_nl_add_sk as argument.
    
    sock_diag will use these generic functions in a later commit.
    
    There is no functional change in this commit.
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: GhantaKrishnamurthy MohanKrishna <mohan.krishna.ghanta.krishnamurthy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3008ba5faa7a63bac2227c56b533c08fa6d54a0b
Merge: 4f1aec01fcb8 e50e73e10757
Author: David S. Miller <davem@davemloft.net>
Date:   Sat Mar 17 17:11:47 2018 -0400

    Merge branch 'tipc-obsolete-zone-concept'
    
    Jon Maloy says:
    
    ====================
    tipc: obsolete zone concept
    
    Functionality related to the 'zone' concept was never implemented in
    TIPC. In this series we eliminate the remaining traces of it in the
    code, and can hence take a first step in reducing the footprint and
    complexity of the binding table.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e50e73e10757ac86fcb1aaa986055049e060727a
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Mar 15 16:48:55 2018 +0100

    tipc: some name changes
    
    We rename some lists and fields in struct publication both to make
    the naming more consistent and to better reflect their roles. We
    also update the descriptions of those lists.
    
    node_list -> local_publ
    cluster_list -> all_publ
    pport_list -> binding_sock
    ref -> port
    
    There are no functional changes in this commit.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 935439cc48ef24f0e50396be3684a0f27e609363
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Mar 15 16:48:54 2018 +0100

    tipc: merge two lists in struct publication
    
    The size of struct publication can be reduced further. Membership in
    lists 'nodesub_list' and 'local_list' is mutually exlusive, in that
    remote publications use the former and local publications the latter.
    We replace the two lists with one single, named 'binding_node' which
    reflects what it really is.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ba765ec63786583e210b55073a908a9d7ea284fa
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Mar 15 16:48:53 2018 +0100

    tipc: remove zone_list member in struct publication
    
    As a further consequence of the previous commits, we can also remove
    the member 'zone_list 'in struct name_info and struct publication.
    Instead, we now let the member cluster_list take over the role a
    container of all publications of a given <type,lower, upper>.
    We also remove the counters for the size of those lists, since
    they don't serve any purpose.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 64a52b26d5633d6efc35cdf1e0c627cc4189e55a
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Mar 15 16:48:52 2018 +0100

    tipc: remove zone publication list in name table
    
    As a consequence of the previous commit we nan now eliminate zone scope
    related lists in the name table. We start with name_table::publ_list[3],
    which can now be replaced with two lists, one for node scope publications
    and one for cluster scope publications.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 928df1880e24bcd47d6359ff86df24db3dfba3c3
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Mar 15 16:48:51 2018 +0100

    tipc: obsolete TIPC_ZONE_SCOPE
    
    Publications for TIPC_CLUSTER_SCOPE and TIPC_ZONE_SCOPE are in all
    aspects handled the same way, both on the publishing node and on the
    receiving nodes.
    
    Despite previous ambitions to the contrary, this is never going to change,
    so we take the conseqeunce of this and obsolete TIPC_ZONE_SCOPE and related
    macros/functions. Whenever a user is doing a bind() or a sendmsg() attempt
    using ZONE_SCOPE we translate this internally to CLUSTER_SCOPE, while we
    remain compatible with users and remote nodes still using ZONE_SCOPE.
    
    Furthermore, the non-formalized scope value 0 has always been permitted
    for use during lookup, with the same meaning as ZONE_SCOPE/CLUSTER_SCOPE.
    We now permit it even as binding scope, but for compatibility reasons we
    choose to not change the value of TIPC_CLUSTER_SCOPE.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 56974a6fcfef69ee0825bd66ed13e92070ac5224
Author: John Johansen <john.johansen@canonical.com>
Date:   Tue Jul 18 23:18:33 2017 -0700

    apparmor: add base infastructure for socket mediation
    
    version 2 - Force an abi break. Network mediation will only be
                available in v8 abi complaint policy.
    
    Provide a basic mediation of sockets. This is not a full net mediation
    but just whether a spcific family of socket can be used by an
    application, along with setting up some basic infrastructure for
    network mediation to follow.
    
    the user space rule hav the basic form of
      NETWORK RULE = [ QUALIFIERS ] 'network' [ DOMAIN ]
                     [ TYPE | PROTOCOL ]
    
      DOMAIN = ( 'inet' | 'ax25' | 'ipx' | 'appletalk' | 'netrom' |
                 'bridge' | 'atmpvc' | 'x25' | 'inet6' | 'rose' |
                 'netbeui' | 'security' | 'key' | 'packet' | 'ash' |
                 'econet' | 'atmsvc' | 'sna' | 'irda' | 'pppox' |
                 'wanpipe' | 'bluetooth' | 'netlink' | 'unix' | 'rds' |
                 'llc' | 'can' | 'tipc' | 'iucv' | 'rxrpc' | 'isdn' |
                 'phonet' | 'ieee802154' | 'caif' | 'alg' | 'nfc' |
                 'vsock' | 'mpls' | 'ib' | 'kcm' ) ','
    
      TYPE = ( 'stream' | 'dgram' | 'seqpacket' |  'rdm' | 'raw' |
               'packet' )
    
      PROTOCOL = ( 'tcp' | 'udp' | 'icmp' )
    
    eg.
      network,
      network inet,
    
    Signed-off-by: John Johansen <john.johansen@canonical.com>
    Acked-by: Seth Arnold <seth.arnold@canonical.com>

commit 74b8da705caff32d599474b3c49fd6a5c65fe03e
Merge: d98985dd6c2d c939a5e4d597
Author: David S. Miller <davem@davemloft.net>
Date:   Tue Mar 13 11:24:57 2018 -0400

    Merge branch 'pernet-convert-part6'
    
    Kirill Tkhai says:
    
    ====================
    Converting pernet_operations (part #6)
    
    this series continues to review and to convert pernet_operations
    to make them possible to be executed in parallel for several
    net namespaces in the same time. There are sctp, tipc and rds
    in this series.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit afbbc374ab1281f2e5c18278a62a47fb906f0fa4
Author: Kirill Tkhai <ktkhai@virtuozzo.com>
Date:   Tue Mar 13 13:37:11 2018 +0300

    net: Convert tipc_net_ops
    
    TIPC looks concentrated in itself, and other pernet_operations
    seem not touching its entities.
    
    tipc_net_ops look pernet-divided, and they should be safe to
    be executed in parallel for several net the same time.
    
    Signed-off-by: Kirill Tkhai <ktkhai@virtuozzo.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c9efb15a9981400c797665dc4844ab562ed3c424
Author: Gustavo A. R. Silva <garsilva@embeddedor.com>
Date:   Mon Mar 5 15:56:14 2018 -0600

    tipc: bcast: use true and false for boolean values
    
    Assign true or false to boolean variables instead of an integer value.
    
    This issue was detected with the help of Coccinelle.
    
    Signed-off-by: Gustavo A. R. Silva <garsilva@embeddedor.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 575650b6566b3e4795e19f3f3f8abb88dca0c12e
Author: Tommi Rantala <tommi.t.rantala@nokia.com>
Date:   Fri Dec 22 09:35:17 2017 +0200

    tipc: fix tipc_mon_delete() oops in tipc_enable_bearer() error path
    
    
    [ Upstream commit 642a8439ddd8423b92f2e71960afe21ee1f66bb6 ]
    
    Calling tipc_mon_delete() before the monitor has been created will oops.
    This can happen in tipc_enable_bearer() error path if tipc_disc_create()
    fails.
    
    [   48.589074] BUG: unable to handle kernel paging request at 0000000000001008
    [   48.590266] IP: tipc_mon_delete+0xea/0x270 [tipc]
    [   48.591223] PGD 1e60c5067 P4D 1e60c5067 PUD 1eb0cf067 PMD 0
    [   48.592230] Oops: 0000 [#1] SMP KASAN
    [   48.595610] CPU: 5 PID: 1199 Comm: tipc Tainted: G    B            4.15.0-rc4-pc64-dirty #5
    [   48.597176] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-2.fc27 04/01/2014
    [   48.598489] RIP: 0010:tipc_mon_delete+0xea/0x270 [tipc]
    [   48.599347] RSP: 0018:ffff8801d827f668 EFLAGS: 00010282
    [   48.600705] RAX: ffff8801ee813f00 RBX: 0000000000000204 RCX: 0000000000000000
    [   48.602183] RDX: 1ffffffff1de6a75 RSI: 0000000000000297 RDI: 0000000000000297
    [   48.604373] RBP: 0000000000000000 R08: 0000000000000000 R09: fffffbfff1dd1533
    [   48.605607] R10: ffffffff8eafbb05 R11: fffffbfff1dd1534 R12: 0000000000000050
    [   48.607082] R13: dead000000000200 R14: ffffffff8e73f310 R15: 0000000000001020
    [   48.608228] FS:  00007fc686484800(0000) GS:ffff8801f5540000(0000) knlGS:0000000000000000
    [   48.610189] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   48.611459] CR2: 0000000000001008 CR3: 00000001dda70002 CR4: 00000000003606e0
    [   48.612759] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [   48.613831] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [   48.615038] Call Trace:
    [   48.615635]  tipc_enable_bearer+0x415/0x5e0 [tipc]
    [   48.620623]  tipc_nl_bearer_enable+0x1ab/0x200 [tipc]
    [   48.625118]  genl_family_rcv_msg+0x36b/0x570
    [   48.631233]  genl_rcv_msg+0x5a/0xa0
    [   48.631867]  netlink_rcv_skb+0x1cc/0x220
    [   48.636373]  genl_rcv+0x24/0x40
    [   48.637306]  netlink_unicast+0x29c/0x350
    [   48.639664]  netlink_sendmsg+0x439/0x590
    [   48.642014]  SYSC_sendto+0x199/0x250
    [   48.649912]  do_syscall_64+0xfd/0x2c0
    [   48.650651]  entry_SYSCALL64_slow_path+0x25/0x25
    [   48.651843] RIP: 0033:0x7fc6859848e3
    [   48.652539] RSP: 002b:00007ffd25dff938 EFLAGS: 00000246 ORIG_RAX: 000000000000002c
    [   48.654003] RAX: ffffffffffffffda RBX: 00007ffd25dff990 RCX: 00007fc6859848e3
    [   48.655303] RDX: 0000000000000054 RSI: 00007ffd25dff990 RDI: 0000000000000003
    [   48.656512] RBP: 00007ffd25dff980 R08: 00007fc685c35fc0 R09: 000000000000000c
    [   48.657697] R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000d13010
    [   48.658840] R13: 00007ffd25e009c0 R14: 0000000000000000 R15: 0000000000000000
    [   48.662972] RIP: tipc_mon_delete+0xea/0x270 [tipc] RSP: ffff8801d827f668
    [   48.664073] CR2: 0000000000001008
    [   48.664576] ---[ end trace e811818d54d5ce88 ]---
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tommi Rantala <tommi.t.rantala@nokia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 831923622a595a047573c7ca38cb5d851fd1a87d
Author: Tommi Rantala <tommi.t.rantala@nokia.com>
Date:   Fri Dec 22 09:35:16 2017 +0200

    tipc: error path leak fixes in tipc_enable_bearer()
    
    
    [ Upstream commit 19142551b2be4a9e13838099fde1351386e5e007 ]
    
    Fix memory leak in tipc_enable_bearer() if enable_media() fails, and
    cleanup with bearer_disable() if tipc_mon_create() fails.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tommi Rantala <tommi.t.rantala@nokia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit edaf4ff0a2552da4d811fa82ec4cfc7fd4480871
Author: Tommi Rantala <tommi.t.rantala@nokia.com>
Date:   Fri Dec 22 09:35:17 2017 +0200

    tipc: fix tipc_mon_delete() oops in tipc_enable_bearer() error path
    
    
    [ Upstream commit 642a8439ddd8423b92f2e71960afe21ee1f66bb6 ]
    
    Calling tipc_mon_delete() before the monitor has been created will oops.
    This can happen in tipc_enable_bearer() error path if tipc_disc_create()
    fails.
    
    [   48.589074] BUG: unable to handle kernel paging request at 0000000000001008
    [   48.590266] IP: tipc_mon_delete+0xea/0x270 [tipc]
    [   48.591223] PGD 1e60c5067 P4D 1e60c5067 PUD 1eb0cf067 PMD 0
    [   48.592230] Oops: 0000 [#1] SMP KASAN
    [   48.595610] CPU: 5 PID: 1199 Comm: tipc Tainted: G    B            4.15.0-rc4-pc64-dirty #5
    [   48.597176] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-2.fc27 04/01/2014
    [   48.598489] RIP: 0010:tipc_mon_delete+0xea/0x270 [tipc]
    [   48.599347] RSP: 0018:ffff8801d827f668 EFLAGS: 00010282
    [   48.600705] RAX: ffff8801ee813f00 RBX: 0000000000000204 RCX: 0000000000000000
    [   48.602183] RDX: 1ffffffff1de6a75 RSI: 0000000000000297 RDI: 0000000000000297
    [   48.604373] RBP: 0000000000000000 R08: 0000000000000000 R09: fffffbfff1dd1533
    [   48.605607] R10: ffffffff8eafbb05 R11: fffffbfff1dd1534 R12: 0000000000000050
    [   48.607082] R13: dead000000000200 R14: ffffffff8e73f310 R15: 0000000000001020
    [   48.608228] FS:  00007fc686484800(0000) GS:ffff8801f5540000(0000) knlGS:0000000000000000
    [   48.610189] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   48.611459] CR2: 0000000000001008 CR3: 00000001dda70002 CR4: 00000000003606e0
    [   48.612759] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [   48.613831] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [   48.615038] Call Trace:
    [   48.615635]  tipc_enable_bearer+0x415/0x5e0 [tipc]
    [   48.620623]  tipc_nl_bearer_enable+0x1ab/0x200 [tipc]
    [   48.625118]  genl_family_rcv_msg+0x36b/0x570
    [   48.631233]  genl_rcv_msg+0x5a/0xa0
    [   48.631867]  netlink_rcv_skb+0x1cc/0x220
    [   48.636373]  genl_rcv+0x24/0x40
    [   48.637306]  netlink_unicast+0x29c/0x350
    [   48.639664]  netlink_sendmsg+0x439/0x590
    [   48.642014]  SYSC_sendto+0x199/0x250
    [   48.649912]  do_syscall_64+0xfd/0x2c0
    [   48.650651]  entry_SYSCALL64_slow_path+0x25/0x25
    [   48.651843] RIP: 0033:0x7fc6859848e3
    [   48.652539] RSP: 002b:00007ffd25dff938 EFLAGS: 00000246 ORIG_RAX: 000000000000002c
    [   48.654003] RAX: ffffffffffffffda RBX: 00007ffd25dff990 RCX: 00007fc6859848e3
    [   48.655303] RDX: 0000000000000054 RSI: 00007ffd25dff990 RDI: 0000000000000003
    [   48.656512] RBP: 00007ffd25dff980 R08: 00007fc685c35fc0 R09: 000000000000000c
    [   48.657697] R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000d13010
    [   48.658840] R13: 00007ffd25e009c0 R14: 0000000000000000 R15: 0000000000000000
    [   48.662972] RIP: tipc_mon_delete+0xea/0x270 [tipc] RSP: ffff8801d827f668
    [   48.664073] CR2: 0000000000001008
    [   48.664576] ---[ end trace e811818d54d5ce88 ]---
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tommi Rantala <tommi.t.rantala@nokia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f60f577f18c23db299072682ead2f357b282d01c
Author: Tommi Rantala <tommi.t.rantala@nokia.com>
Date:   Fri Dec 22 09:35:16 2017 +0200

    tipc: error path leak fixes in tipc_enable_bearer()
    
    
    [ Upstream commit 19142551b2be4a9e13838099fde1351386e5e007 ]
    
    Fix memory leak in tipc_enable_bearer() if enable_media() fails, and
    cleanup with bearer_disable() if tipc_mon_create() fails.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tommi Rantala <tommi.t.rantala@nokia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1b22bcad7e397252ecc9a8c471334f70b46820fc
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Mon Feb 26 20:14:04 2018 +0100

    tipc: correct initial value for group congestion flag
    
    In commit 60c253069632 ("tipc: fix race between poll() and
    setsockopt()") we introduced a pointer from struct tipc_group to the
    'group_is_connected' flag in struct tipc_sock, so that this field can
    be checked without dereferencing the group pointer of the latter struct.
    
    The initial value for this flag is correctly set to 'false' when a
    group is created, but we miss the case when no group is created at
    all, in which case the initial value should be 'true'. This has the
    effect that SOCK_RDM/DGRAM sockets sending datagrams never receive
    POLLOUT if they request so.
    
    This commit corrects this bug.
    
    Fixes: 60c253069632 ("tipc: fix race between poll() and setsockopt()")
    Reported-by: Hoang Le <hoang.h.le@dektek.com.au>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 79c0ef3e85c015b0921a8fd5dd539d1480e9cd6c
Merge: 91ab883eb213 506b0a395f26
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Feb 19 11:58:19 2018 -0800

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Prevent index integer overflow in ptr_ring, from Jason Wang.
    
     2) Program mvpp2 multicast filter properly, from Mikulas Patocka.
    
     3) The bridge brport attribute file is write only and doesn't have a
        ->show() method, don't blindly invoke it. From Xin Long.
    
     4) Inverted mask used in genphy_setup_forced(), from Ingo van Lil.
    
     5) Fix multiple definition issue with if_ether.h UAPI header, from
        Hauke Mehrtens.
    
     6) Fix GFP_KERNEL usage in atomic in RDS protocol code, from Sowmini
        Varadhan.
    
     7) Revert XDP redirect support from thunderx driver, it is not
        implemented properly. From Jesper Dangaard Brouer.
    
     8) Fix missing RTNL protection across some tipc operations, from Ying
        Xue.
    
     9) Return the correct IV bytes in the TLS getsockopt code, from Boris
        Pismenny.
    
    10) Take tclassid into consideration properly when doing FIB rule
        matching. From Stefano Brivio.
    
    11) cxgb4 device needs more PCI VPD quirks, from Casey Leedom.
    
    12) TUN driver doesn't align frags properly, and we can end up doing
        unaligned atomics on misaligned metadata. From Eric Dumazet.
    
    13) Fix various crashes found using DEBUG_PREEMPT in rmnet driver, from
        Subash Abhinov Kasiviswanathan.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (56 commits)
      tg3: APE heartbeat changes
      mlxsw: spectrum_router: Do not unconditionally clear route offload indication
      net: qualcomm: rmnet: Fix possible null dereference in command processing
      net: qualcomm: rmnet: Fix warning seen with 64 bit stats
      net: qualcomm: rmnet: Fix crash on real dev unregistration
      sctp: remove the left unnecessary check for chunk in sctp_renege_events
      rxrpc: Work around usercopy check
      tun: fix tun_napi_alloc_frags() frag allocator
      udplite: fix partial checksum initialization
      skbuff: Fix comment mis-spelling.
      dn_getsockoptdecnet: move nf_{get/set}sockopt outside sock lock
      PCI/cxgb4: Extend T3 PCI quirk to T4+ devices
      cxgb4: fix trailing zero in CIM LA dump
      cxgb4: free up resources of pf 0-3
      fib_semantics: Don't match route with mismatching tclassid
      NFC: llcp: Limit size of SDP URI
      tls: getsockopt return record sequence number
      tls: reset the crypto info if copy_from_user fails
      tls: retrun the correct IV in getsockopt
      docs: segmentation-offloads.txt: add SCTP info
      ...

commit 26736a08ee0fb89a4f09bfb2c9f0805028ff63aa
Author: Paolo Abeni <pabeni@redhat.com>
Date:   Mon Feb 19 19:02:24 2018 +0100

    tipc: don't call sock_release() in atomic context
    
    syzbot reported a scheduling while atomic issue at netns
    destruction time:
    
    BUG: sleeping function called from invalid context at net/core/sock.c:2769
    in_atomic(): 1, irqs_disabled(): 0, pid: 85, name: kworker/u4:3
    5 locks held by kworker/u4:3/85:
      #0:  ((wq_completion)"%s""netns"){+.+.}, at: [<00000000c9792deb>]
    process_one_work+0xaaf/0x1af0 kernel/workqueue.c:2084
      #1:  (net_cleanup_work){+.+.}, at: [<00000000adc12e2a>]
    process_one_work+0xb01/0x1af0 kernel/workqueue.c:2088
      #2:  (net_sem){++++}, at: [<000000009ccb5669>] cleanup_net+0x23f/0xd20
    net/core/net_namespace.c:494
      #3:  (net_mutex){+.+.}, at: [<00000000a92767d9>] cleanup_net+0xa7d/0xd20
    net/core/net_namespace.c:496
      #4:  (&(&srv->idr_lock)->rlock){+...}, at: [<000000001343e568>]
    spin_lock_bh include/linux/spinlock.h:315 [inline]
      #4:  (&(&srv->idr_lock)->rlock){+...}, at: [<000000001343e568>]
    tipc_topsrv_stop+0x231/0x610 net/tipc/topsrv.c:685
    CPU: 0 PID: 85 Comm: kworker/u4:3 Not tainted 4.16.0-rc1+ #230
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
    Google 01/01/2011
    Workqueue: netns cleanup_net
    Call Trace:
      __dump_stack lib/dump_stack.c:17 [inline]
      dump_stack+0x194/0x257 lib/dump_stack.c:53
      ___might_sleep+0x2b2/0x470 kernel/sched/core.c:6128
      __might_sleep+0x95/0x190 kernel/sched/core.c:6081
      lock_sock_nested+0x37/0x110 net/core/sock.c:2769
      lock_sock include/net/sock.h:1463 [inline]
      tipc_release+0x103/0xff0 net/tipc/socket.c:572
      sock_release+0x8d/0x1e0 net/socket.c:594
      tipc_topsrv_stop+0x3c0/0x610 net/tipc/topsrv.c:696
      tipc_exit_net+0x15/0x40 net/tipc/core.c:96
      ops_exit_list.isra.6+0xae/0x150 net/core/net_namespace.c:148
      cleanup_net+0x6ba/0xd20 net/core/net_namespace.c:529
      process_one_work+0xbbf/0x1af0 kernel/workqueue.c:2113
      worker_thread+0x223/0x1990 kernel/workqueue.c:2247
      kthread+0x33c/0x400 kernel/kthread.c:238
      ret_from_fork+0x3a/0x50 arch/x86/entry/entry_64.S:429
    
    This is caused by tipc_topsrv_stop() releasing the listener socket
    with the idr lock held. This changeset addresses the issue moving
    the release operation outside such lock.
    
    Reported-and-tested-by: syzbot+749d9d87c294c00ca856@syzkaller.appspotmail.com
    Fixes: 0ef897be12b8 ("tipc: separate topology server listener socket from subcsriber sockets")
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Acked-by:  ///jon
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 96c252bf1c5c6d7e2dac3dea42f3f0a9c939d20e
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Mon Feb 19 12:48:21 2018 +0100

    tipc: fix bug on error path in tipc_topsrv_kern_subscr()
    
    In commit cc1ea9ffadf7 ("tipc: eliminate struct tipc_subscriber") we
    re-introduced an old bug on the error path in the function
    tipc_topsrv_kern_subscr(). We now re-introduce the correction too.
    
    Reported-by: syzbot+f62e0f2a0ef578703946@syzkaller.appspotmail.com
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 65bd449c32c2745df61913ab54087e77f9d9b70d
Merge: 35ed663f5f4f 026321c6d056
Author: David S. Miller <davem@davemloft.net>
Date:   Fri Feb 16 15:26:35 2018 -0500

    Merge branch 'tipc-de-generealize-topology-server'
    
    Jon Maloy says:
    
    ====================
    tipc: de-generealize topology server
    
    The topology server is partially based on a template that is much
    more generic than what we need. This results in a code that is
    unnecessarily hard to follow and keeping bug free.
    
    We now take the consequence of the fact that we only have one such
    server in TIPC, - with no prospects for introducing any more, and
    adapt the code to the specialized task is really is doing.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 026321c6d056a54b4145522492245d2b5913ee1d
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Feb 15 10:40:51 2018 +0100

    tipc: rename tipc_server to tipc_topsrv
    
    We rename struct tipc_server to struct tipc_topsrv. This reflect its now
    specialized role as topology server. Accoringly, we change or add function
    prefixes to make it clearer which functionality those belong to.
    
    There are no functional changes in this commit.
    
    Acked-by: Ying.Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0ef897be12b8b4cf297b6016e79ec97ec90f2cf6
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Feb 15 10:40:50 2018 +0100

    tipc: separate topology server listener socket from subcsriber sockets
    
    We move the listener socket to struct tipc_server and give it its own
    work item. This makes it easier to follow the code, and entails some
    simplifications in the reception code in subscriber sockets.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5c45ab24ac77ea32eae7d3576cf37c3ddb259f80
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Feb 15 10:40:49 2018 +0100

    tipc: make struct tipc_server private for server.c
    
    In order to narrow the interface and dependencies between the topology
    server and the subscription/binding table functionality we move struct
    tipc_server inside the file server.c. This requires some code
    adaptations in other files, but those are mostly minor.
    
    The most important change is that we have to move the start/stop
    functions for the topology server to server.c, where they logically
    belong anyway.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit da0a75e86ae230f92743c073843d3ea35bd061af
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Feb 15 10:40:48 2018 +0100

    tipc: some prefix changes
    
    Since we now have removed struct tipc_subscriber from the code, and
    only struct tipc_subscription remains, there is no longer need for long
    and awkward prefixes to distinguish between their pertaining functions.
    
    We now change all tipc_subscrp_* prefixes to tipc_sub_*. This is
    a purely cosmetic change.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 242e82cc95f6b4e83e1771f9915edcb2a63708e1
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Feb 15 10:40:47 2018 +0100

    tipc: collapse subscription creation functions
    
    After the previous changes it becomes logical to collapse the two-level
    creation of subscription instances into one. We do that here.
    
    We also rename the creation and deletion functions for more consistency.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8985ecc7c1e07c42acc1e44ac56fa224f8a5c62f
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Feb 15 10:40:46 2018 +0100

    tipc: simplify endianness handling in topology subscriber
    
    Because of the requirement for total distribution transparency, users
    send subscriptions and receive topology events in their own host format.
    It is up to the topology server to determine this format and do the
    correct conversions to and from its own host format when needed.
    
    Until now, this has been handled in a rather non-transparent way inside
    the topology server and subscriber code, leading to unnecessary
    complexity when creating subscriptions and issuing events.
    
    We now improve this situation by adding two new macros, tipc_sub_read()
    and tipc_evt_write(). Both those functions calculate the need for
    conversion internally before performing their respective operations.
    Hence, all handling of such conversions become transparent to the rest
    of the code.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 414574a0af36d329f560f542e650cc4a81cc1d69
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Feb 15 10:40:45 2018 +0100

    tipc: simplify interaction between subscription and topology connection
    
    The message transmission and reception in the topology server is more
    generic than is currently necessary. By basing the funtionality on the
    fact that we only send items of type struct tipc_event and always
    receive items of struct tipc_subcr we can make several simplifications,
    and also get rid of some unnecessary dynamic memory allocations.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit df79d040dcd7d7e580c50edf40b82e677fe84801
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Feb 15 10:40:44 2018 +0100

    tipc: eliminate struct tipc_subscriber
    
    It is unnecessary to keep two structures, struct tipc_conn and struct
    tipc_subscriber, with a one-to-one relationship and still with different
    life cycles. The fact that the two often run in different contexts, and
    still may access each other via direct pointers constitutes an additional
    hazard, something we have experienced at several occasions, and still
    see happening.
    
    We have identified at least two remaining problems that are easier to
    fix if we simplify the topology server data structure somewhat.
    
    - When there is a race between a subscription up/down event and a
      timeout event, it is fully possible that the former might be delivered
      after the latter, leading to confusion for the receiver.
    
    - The function tipc_subcrp_timeout() is executing in interrupt context,
      while the following call chain is at least theoretically possible:
      tipc_subscrp_timeout()
        tipc_subscrp_send_event()
          tipc_conn_sendmsg()
            conn_put()
              tipc_conn_kref_release()
                sock_release(sock)
    
    I.e., we end up calling a function that might try to sleep in
    interrupt context. To eliminate this, we need to ensure that the
    tipc_conn structure and the socket, as well as the subscription
    instances, only are deleted in work queue context, i.e., after the
    timeout event really has been sent out.
    
    We now remove this unnecessary complexity, by merging data and
    functionality of the subscriber structure into struct tipc_conn
    and the associated file server.c. We thereafter add a spinlock and
    a new 'inactive' state to the subscription structure. Using those,
    both problems described above can be easily solved.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c901d26d4a8137f3ad0e5865d331f7c63c42d9f9
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Feb 15 10:40:43 2018 +0100

    tipc: remove unnecessary function pointers
    
    Interaction between the functionality in server.c and subscr.c is
    done via function pointers installed in struct server. This makes
    the code harder to follow, and doesn't serve any obvious purpose.
    
    Here, we replace the function pointers with direct function calls.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 27469b7352b5197cffa0e3dadb5f1127f055da27
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Feb 15 10:40:42 2018 +0100

    tipc: remove redundant code in topology server
    
    The socket handling in the topology server is unnecessarily generic.
    It is prepared to handle both SOCK_RDM, SOCK_DGRAM and SOCK_STREAM
    type sockets, as well as the only socket type which is really used,
    SOCK_SEQPACKET.
    
    We now remove this redundant code to make the code more readable.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 37c64cf63ba1f9c071b37a2129ae9860fd423d6c
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Wed Feb 14 13:34:39 2018 +0100

    tipc: apply bearer link tolerance on running links
    
    Currently, the default link tolerance set in struct tipc_bearer only
    has effect on links going up after that moment. I.e., a user has to
    reset all the node's links across that bearer to have the new value
    applied. This is too limiting and disturbing on a running cluster to
    be useful.
    
    We now change this so that also already existing links are updated
    dynamically, without any need for a reset, when the bearer value is
    changed. We leverage the already existing per-link functionality
    for this to achieve the wanted effect.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 080fe7aa18a29781c4db1d77ca5cb1dd4f68fb44
Merge: 361b12318019 ed4ffdfec26d
Author: David S. Miller <davem@davemloft.net>
Date:   Wed Feb 14 14:46:33 2018 -0500

    Merge branch 'tipc-locking-fixes'
    
    Ying Xue says:
    
    ====================
    tipc: Fix missing RTNL lock protection during setting link properties
    
    At present it's unsafe to configure link properties through netlink
    as the entire setting process is not under RTNL lock protection. Now
    TIPC supports two different sets of netlink APIs at the same time, and
    they share the same set of backend functions to configure bearer,
    media and net properties. In order to solve the missing RTNL issue,
    we have to make the whole __tipc_nl_compat_doit() protected by RTNL,
    which means any function called within it cannot take RTNL any more.
    So in the series we first introduce the following new functions which
    doesn't hold RTNl lock:
    
     - __tipc_nl_bearer_disable()
     - __tipc_nl_bearer_enable()
     - __tipc_nl_bearer_set()
     - __tipc_nl_media_set()
     - __tipc_nl_net_set()
    
    Meanwhile, __tipc_nl_compat_doit() has been reconstructed to minimize
    the time of holding RTNL lock.
    
    Changes in v4:
     - Per suggestion of Kirill Tkhai, divided original big one patch into
       seven small ones so that they can be easily reviewed.
    
    Changes in v3:
     - Optimized return method of __tipc_nl_bearer_enable() regarding
       the comments from David M and Kirill Tkhai
     - Moved the allocations of memory in __tipc_nl_compat_doit() out
       of RTNL lock to minimize the time of holding RTNL lock according
       to the suggestion of Kirill Tkhai.
    
    Changes in v2:
     - The whole operation of setting bearer/media properties has been
       protected under RTNL, as per feedback from David M.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ed4ffdfec26dfe1bb02435afd1e01f61426f7212
Author: Ying Xue <ying.xue@windriver.com>
Date:   Wed Feb 14 13:38:04 2018 +0800

    tipc: Fix missing RTNL lock protection during setting link properties
    
    Currently when user changes link properties, TIPC first checks if
    user's command message contains media name or bearer name through
    tipc_media_find() or tipc_bearer_find() which is protected by RTNL
    lock. But when tipc_nl_compat_link_set() conducts the checking with
    the two functions, it doesn't hold RTNL lock at all, as a result,
    the following complaints were reported:
    
    audit: type=1400 audit(1514679888.244:9): avc:  denied  { write } for
    pid=3194 comm="syzkaller021477" path="socket:[11143]" dev="sockfs"
    ino=11143 scontext=unconfined_u:system_r:insmod_t:s0-s0:c0.c1023
    tcontext=unconfined_u:system_r:insmod_t:s0-s0:c0.c1023
    tclass=netlink_generic_socket permissive=1
    Reviewed-by: Kirill Tkhai <ktkhai@virtuozzo.com>
    
    =============================
    WARNING: suspicious RCU usage
    4.15.0-rc5+ #152 Not tainted
    -----------------------------
    net/tipc/bearer.c:177 suspicious rcu_dereference_protected() usage!
    
    other info that might help us debug this:
    
    rcu_scheduler_active = 2, debug_locks = 1
    2 locks held by syzkaller021477/3194:
      #0:  (cb_lock){++++}, at: [<00000000d20133ea>] genl_rcv+0x19/0x40
    net/netlink/genetlink.c:634
      #1:  (genl_mutex){+.+.}, at: [<00000000fcc5d1bc>] genl_lock
    net/netlink/genetlink.c:33 [inline]
      #1:  (genl_mutex){+.+.}, at: [<00000000fcc5d1bc>] genl_rcv_msg+0x115/0x140
    net/netlink/genetlink.c:622
    
    stack backtrace:
    CPU: 1 PID: 3194 Comm: syzkaller021477 Not tainted 4.15.0-rc5+ #152
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS
    Google 01/01/2011
    Call Trace:
      __dump_stack lib/dump_stack.c:17 [inline]
      dump_stack+0x194/0x257 lib/dump_stack.c:53
      lockdep_rcu_suspicious+0x123/0x170 kernel/locking/lockdep.c:4585
      tipc_bearer_find+0x2b4/0x3b0 net/tipc/bearer.c:177
      tipc_nl_compat_link_set+0x329/0x9f0 net/tipc/netlink_compat.c:729
      __tipc_nl_compat_doit net/tipc/netlink_compat.c:288 [inline]
      tipc_nl_compat_doit+0x15b/0x660 net/tipc/netlink_compat.c:335
      tipc_nl_compat_handle net/tipc/netlink_compat.c:1119 [inline]
      tipc_nl_compat_recv+0x112f/0x18f0 net/tipc/netlink_compat.c:1201
      genl_family_rcv_msg+0x7b7/0xfb0 net/netlink/genetlink.c:599
      genl_rcv_msg+0xb2/0x140 net/netlink/genetlink.c:624
      netlink_rcv_skb+0x21e/0x460 net/netlink/af_netlink.c:2408
      genl_rcv+0x28/0x40 net/netlink/genetlink.c:635
      netlink_unicast_kernel net/netlink/af_netlink.c:1275 [inline]
      netlink_unicast+0x4e8/0x6f0 net/netlink/af_netlink.c:1301
      netlink_sendmsg+0xa4a/0xe60 net/netlink/af_netlink.c:1864
      sock_sendmsg_nosec net/socket.c:636 [inline]
      sock_sendmsg+0xca/0x110 net/socket.c:646
      sock_write_iter+0x31a/0x5d0 net/socket.c:915
      call_write_iter include/linux/fs.h:1772 [inline]
      new_sync_write fs/read_write.c:469 [inline]
      __vfs_write+0x684/0x970 fs/read_write.c:482
      vfs_write+0x189/0x510 fs/read_write.c:544
      SYSC_write fs/read_write.c:589 [inline]
      SyS_write+0xef/0x220 fs/read_write.c:581
      do_syscall_32_irqs_on arch/x86/entry/common.c:327 [inline]
      do_fast_syscall_32+0x3ee/0xf9d arch/x86/entry/common.c:389
      entry_SYSENTER_compat+0x54/0x63 arch/x86/entry/entry_64_compat.S:129
    
    In order to correct the mistake, __tipc_nl_compat_doit() has been
    protected by RTNL lock, which means the whole operation of setting
    bearer/media properties is under RTNL protection.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reported-by: syzbot <syzbot+6345fd433db009b29413@syzkaller.appspotmail.com>
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5631f65decf390ae480d157838c0c393a991328e
Author: Ying Xue <ying.xue@windriver.com>
Date:   Wed Feb 14 13:38:03 2018 +0800

    tipc: Introduce __tipc_nl_net_set
    
    Introduce __tipc_nl_net_set() which doesn't hold RTNL lock.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 07ffb22357323c7189921935b24d68018e1a2b68
Author: Ying Xue <ying.xue@windriver.com>
Date:   Wed Feb 14 13:38:02 2018 +0800

    tipc: Introduce __tipc_nl_media_set
    
    Introduce __tipc_nl_media_set() which doesn't hold RTNL lock.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 93532bb1d436984dac60c92d1a93eecda4fecb29
Author: Ying Xue <ying.xue@windriver.com>
Date:   Wed Feb 14 13:38:01 2018 +0800

    tipc: Introduce __tipc_nl_bearer_set
    
    Introduce __tipc_nl_bearer_set() which doesn't holding RTNL lock.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 45cf7edfbc07b2208d7b4a79d4a36aeddf16aefd
Author: Ying Xue <ying.xue@windriver.com>
Date:   Wed Feb 14 13:38:00 2018 +0800

    tipc: Introduce __tipc_nl_bearer_enable
    
    Introduce __tipc_nl_bearer_enable() which doesn't hold RTNL lock.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d59d8b77abf4308e9c6809298341e275eac38404
Author: Ying Xue <ying.xue@windriver.com>
Date:   Wed Feb 14 13:37:59 2018 +0800

    tipc: Introduce __tipc_nl_bearer_disable
    
    Introduce __tipc_nl_bearer_disable() which doesn't hold RTNL lock.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e5d1a1eec0f4b51d0a7a6457d0b1b99b34f3e901
Author: Ying Xue <ying.xue@windriver.com>
Date:   Wed Feb 14 13:37:58 2018 +0800

    tipc: Refactor __tipc_nl_compat_doit
    
    As preparation for adding RTNL to make (*cmd->transcode)() and
    (*cmd->transcode)() constantly protected by RTNL lock, we move out of
    memory allocations existing between them as many as possible so that
    the time of holding RTNL can be minimized in __tipc_nl_compat_doit().
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c839682c719f0e3dc851951c9e2eeb8a41cd9609
Merge: 82f0a41e1980 2fa56a494484
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Feb 9 15:34:18 2018 -0800

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Make allocations less aggressive in x_tables, from Minchal Hocko.
    
     2) Fix netfilter flowtable Kconfig deps, from Pablo Neira Ayuso.
    
     3) Fix connection loss problems in rtlwifi, from Larry Finger.
    
     4) Correct DRAM dump length for some chips in ath10k driver, from Yu
        Wang.
    
     5) Fix ABORT handling in rxrpc, from David Howells.
    
     6) Add SPDX tags to Sun networking drivers, from Shannon Nelson.
    
     7) Some ipv6 onlink handling fixes, from David Ahern.
    
     8) Netem packet scheduler interval calcualtion fix from Md. Islam.
    
     9) Don't put crypto buffers on-stack in rxrpc, from David Howells.
    
    10) Fix handling of error non-delivery status in netlink multicast
        delivery over multiple namespaces, from Nicolas Dichtel.
    
    11) Missing xdp flush in tuntap driver, from Jason Wang.
    
    12) Synchonize RDS protocol netns/module teardown with rds object
        management, from Sowini Varadhan.
    
    13) Add nospec annotations to mpls, from Dan Williams.
    
    14) Fix SKB truesize handling in TIPC, from Hoang Le.
    
    15) Interrupt masking fixes in stammc from Niklas Cassel.
    
    16) Don't allow ptr_ring objects to be sized outside of kmalloc's
        limits, from Jason Wang.
    
    17) Don't allow SCTP chunks to be built which will have a length
        exceeding the chunk header's 16-bit length field, from Alexey
        Kodanev.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (82 commits)
      ibmvnic: Remove skb->protocol checks in ibmvnic_xmit
      bpf: fix rlimit in reuseport net selftest
      sctp: verify size of a new chunk in _sctp_make_chunk()
      s390/qeth: fix SETIP command handling
      s390/qeth: fix underestimated count of buffer elements
      ptr_ring: try vmalloc() when kmalloc() fails
      ptr_ring: fail early if queue occupies more than KMALLOC_MAX_SIZE
      net: stmmac: remove redundant enable of PMT irq
      net: stmmac: rename GMAC_INT_DEFAULT_MASK for dwmac4
      net: stmmac: discard disabled flags in interrupt status register
      ibmvnic: Reset long term map ID counter
      tools/libbpf: handle issues with bpf ELF objects containing .eh_frames
      selftests/bpf: add selftest that use test_libbpf_open
      selftests/bpf: add test program for loading BPF ELF files
      tools/libbpf: improve the pr_debug statements to contain section numbers
      bpf: Sync kernel ABI header with tooling header for bpf_common.h
      net: phy: fix phy_start to consider PHY_IGNORE_INTERRUPT
      net: thunder: change q_len's type to handle max ring size
      tipc: fix skb truesize/datasize ratio control
      net/sched: cls_u32: fix cls_u32 on filter replace
      ...

commit 55b3280d1e471795c08dbbe17325720a843e104c
Author: Hoang Le <hoang.h.le@dektek.com.au>
Date:   Thu Feb 8 17:16:25 2018 +0100

    tipc: fix skb truesize/datasize ratio control
    
    In commit d618d09a68e4 ("tipc: enforce valid ratio between skb truesize
    and contents") we introduced a test for ensuring that the condition
    truesize/datasize <= 4 is true for a received buffer. Unfortunately this
    test has two problems.
    
    - Because of the integer arithmetics the test
      if (skb->truesize / buf_roundup_len(skb) > 4) will miss all
      ratios [4 < ratio < 5], which was not the intention.
    - The buffer returned by skb_copy() inherits skb->truesize of the
      original buffer, which doesn't help the situation at all.
    
    In this commit, we change the ratio condition and replace skb_copy()
    with a call to skb_copy_expand() to finally get this right.
    
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8de7fb3dfb0d381358fbfc8632d0818d8a1fec7e
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Wed Jan 10 12:50:25 2018 -0800

    tipc: fix a memory leak in tipc_nl_node_get_link()
    
    
    [ Upstream commit 59b36613e85fb16ebf9feaf914570879cd5c2a21 ]
    
    When tipc_node_find_by_name() fails, the nlmsg is not
    freed.
    
    While on it, switch to a goto label to properly
    free it.
    
    Fixes: be9c086715c ("tipc: narrow down exposure of struct tipc_node")
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e52703d0746ee35326623c5442e9eec0139ffeb
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Wed Jan 10 12:50:25 2018 -0800

    tipc: fix a memory leak in tipc_nl_node_get_link()
    
    
    [ Upstream commit 59b36613e85fb16ebf9feaf914570879cd5c2a21 ]
    
    When tipc_node_find_by_name() fails, the nlmsg is not
    freed.
    
    While on it, switch to a goto label to properly
    free it.
    
    Fixes: be9c086715c ("tipc: narrow down exposure of struct tipc_node")
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1ed2d76e0213751c82e3a242b61b0883daf330df
Merge: 8b0fdf631cf6 bc4802736d8b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Jan 30 18:59:03 2018 -0800

    Merge branch 'work.sock_recvmsg' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs
    
    Pull kern_recvmsg reduction from Al Viro:
     "kernel_recvmsg() is a set_fs()-using wrapper for sock_recvmsg(). In
      all but one case that is not needed - use of ITER_KVEC for ->msg_iter
      takes care of the data and does not care about set_fs(). The only
      exception is svc_udp_recvfrom() where we want cmsg to be store into
      kernel object; everything else can just use sock_recvmsg() and be done
      with that.
    
      A followup converting svc_udp_recvfrom() away from set_fs() (and
      killing kernel_recvmsg() off) is *NOT* in here - I'd like to hear what
      netdev folks think of the approach proposed in that followup)"
    
    * 'work.sock_recvmsg' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs:
      tipc: switch to sock_recvmsg()
      smc: switch to sock_recvmsg()
      ipvs: switch to sock_recvmsg()
      mISDN: switch to sock_recvmsg()
      drbd: switch to sock_recvmsg()
      lustre lnet_sock_read(): switch to sock_recvmsg()
      cfs2: switch to sock_recvmsg()
      ncpfs: switch to sock_recvmsg()
      dlm: switch to sock_recvmsg()
      svc_recvfrom(): switch to sock_recvmsg()

commit 60c2530696320ee6ffe4491c17079fa403790c98
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Wed Jan 17 16:42:46 2018 +0100

    tipc: fix race between poll() and setsockopt()
    
    Letting tipc_poll() dereference a socket's pointer to struct tipc_group
    entails a race risk, as the group item may be deleted in a concurrent
    tipc_sk_join() or tipc_sk_leave() thread.
    
    We now move the 'open' flag in struct tipc_group to struct tipc_sock,
    and let the former retain only a pointer to the moved field. This will
    eliminate the race risk.
    
    Reported-by: syzbot+799dafde0286795858ac@syzkaller.appspotmail.com
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b40bf0f48cb0b58ba64b924545c8cbfce5d48e25
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Jan 24 13:00:48 2017 +0100

    tipc: fix cleanup at module unload
    
    [ Upstream commit 35e22e49a5d6a741ebe7f2dd280b2052c3003ef7 ]
    
    In tipc_server_stop(), we iterate over the connections with limiting
    factor as server's idr_in_use. We ignore the fact that this variable
    is decremented in tipc_close_conn(), leading to premature exit.
    
    In this commit, we iterate until the we have no connections left.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Tested-by: John Thompson <thompa.atl@gmail.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>

commit b45a53be53d660c4b8fa4d1ef852439607611424
Merge: 41aa5e5d712b 81d947e2b8dd
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Jan 16 12:45:30 2018 -0800

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Two read past end of buffer fixes in AF_KEY, from Eric Biggers.
    
     2) Memory leak in key_notify_policy(), from Steffen Klassert.
    
     3) Fix overflow with bpf arrays, from Daniel Borkmann.
    
     4) Fix RDMA regression with mlx5 due to mlx5 no longer using
        pci_irq_get_affinity(), from Saeed Mahameed.
    
     5) Missing RCU read locking in nl80211_send_iface() when it calls
        ieee80211_bss_get_ie(), from Dominik Brodowski.
    
     6) cfg80211 should check dev_set_name()'s return value, from Johannes
        Berg.
    
     7) Missing module license tag in 9p protocol, from Stephen Hemminger.
    
     8) Fix crash due to too small MTU in udp ipv6 sendmsg, from Mike
        Maloney.
    
     9) Fix endless loop in netlink extack code, from David Ahern.
    
    10) TLS socket layer sets inverted error codes, resulting in an endless
        loop. From Robert Hering.
    
    11) Revert openvswitch erspan tunnel support, it's mis-designed and we
        need to kill it before it goes into a real release. From William Tu.
    
    12) Fix lan78xx failures in full speed USB mode, from Yuiko Oshino.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (54 commits)
      net, sched: fix panic when updating miniq {b,q}stats
      qed: Fix potential use-after-free in qed_spq_post()
      nfp: use the correct index for link speed table
      lan78xx: Fix failure in USB Full Speed
      sctp: do not allow the v4 socket to bind a v4mapped v6 address
      sctp: return error if the asoc has been peeled off in sctp_wait_for_sndbuf
      sctp: reinit stream if stream outcnt has been change by sinit in sendmsg
      ibmvnic: Fix pending MAC address changes
      netlink: extack: avoid parenthesized string constant warning
      ipv4: Make neigh lookup keys for loopback/point-to-point devices be INADDR_ANY
      net: Allow neigh contructor functions ability to modify the primary_key
      sh_eth: fix dumping ARSTR
      Revert "openvswitch: Add erspan tunnel support."
      net/tls: Fix inverted error codes to avoid endless loop
      ipv6: ip6_make_skb() needs to clear cork.base.dst
      sctp: avoid compiler warning on implicit fallthru
      net: ipv4: Make "ip route get" match iif lo rules again.
      netlink: extack needs to be reset each time through loop
      tipc: fix a memory leak in tipc_nl_node_get_link()
      ipv6: fix udpv6 sendmsg crash caused by too small MTU
      ...

commit e88f2be83282d5ffc8f5ffe4c22606bf62eb1ac7
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Mon Jan 15 17:56:28 2018 +0100

    tipc: fix race condition at topology server receive
    
    We have identified a race condition during reception of socket
    events and messages in the topology server.
    
    - The function tipc_close_conn() is releasing the corresponding
      struct tipc_subscriber instance without considering that there
      may still be items in the receive work queue. When those are
      scheduled, in the function tipc_receive_from_work(), they are
      using the subscriber pointer stored in struct tipc_conn, without
      first checking if this is valid or not. This will sometimes
      lead to crashes, as the next call of tipc_conn_recvmsg() will
      access the now deleted item.
      We fix this by making the usage of this pointer conditional on
      whether the connection is active or not. I.e., we check the condition
      test_bit(CF_CONNECTED) before making the call tipc_conn_recvmsg().
    
    - Since the two functions may be running on different cores, the
      condition test described above is not enough. tipc_close_conn()
      may come in between and delete the subscriber item after the condition
      test is done, but before tipc_conn_recv_msg() is finished. This
      happens less frequently than the problem described above, but leads
      to the same symptoms.
    
      We fix this by using the existing sk_callback_lock for mutual
      exclusion in the two functions. In addition, we have to move
      a call to tipc_conn_terminate() outside the mentioned lock to
      avoid deadlock.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e9a034456a8cd766795610aa5065263147e35228
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Jan 12 20:56:50 2018 +0100

    tipc: fix bug during lookup of multicast destination nodes
    
    In commit 232d07b74a33 ("tipc: improve groupcast scope handling") we
    inadvertently broke non-group multicast transmission when changing the
    parameter 'domain' to 'scope' in the function
    tipc_nametbl_lookup_dst_nodes(). We missed to make the corresponding
    change in the calling function, with the result that the lookup always
    fails.
    
    A closer anaysis reveals that this parameter is not needed at all.
    Non-group multicast is hard coded to use CLUSTER_SCOPE, and in the
    current implementation this will be delivered to all matching
    destinations except those which are published with NODE_SCOPE on other
    nodes. Since such publications never will be visible on the sending node
    anyway, it makes no sense to discriminate by scope at all.
    
    We now remove this parameter altogether.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 59b36613e85fb16ebf9feaf914570879cd5c2a21
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Wed Jan 10 12:50:25 2018 -0800

    tipc: fix a memory leak in tipc_nl_node_get_link()
    
    When tipc_node_find_by_name() fails, the nlmsg is not
    freed.
    
    While on it, switch to a goto label to properly
    free it.
    
    Fixes: be9c086715c ("tipc: narrow down exposure of struct tipc_node")
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit febafc8455fdbb0ba53d596075068a683b75f355
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Wed Jan 10 21:08:50 2018 +0100

    tipc: fix a potental access after delete in tipc_sk_join()
    
    In commit d12d2e12cec2 "tipc: send out join messages as soon as new
    member is discovered") we added a call to the function tipc_group_join()
    without considering the case that the preceding tipc_sk_publish() might
    have failed, and the group item already deleted.
    
    We fix this by returning from tipc_sk_join() directly after the
    failed tipc_sk_publish.
    
    Reported-by: syzbot+e3eeae78ea88b8d6d858@syzkaller.appspotmail.com
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit fdb533c30496665775867fc9dabd83e8b0308822
Merge: a67c01e20935 eb929a91b213
Author: David S. Miller <davem@davemloft.net>
Date:   Tue Jan 9 12:35:59 2018 -0500

    Merge branch 'tipc-improvements-to-group-messaging'
    
    Jon Maloy says:
    
    ====================
    tipc: improvements to group messaging
    
    We make a number of simplifications and improvements to the group
    messaging service. They aim at readability/maintainability of the code
    as well as scalability.
    
    The series is based on commit f9c935db8086 ("tipc: fix problems with
    multipoint-to-point flow control) which has been applied to 'net' but
    not yet to 'net-next'.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit eb929a91b213d2a72c5a8b4af9a1acf63bfb8287
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Mon Jan 8 21:03:31 2018 +0100

    tipc: improve poll() for group member socket
    
    The current criteria for returning POLLOUT from a group member socket is
    too simplistic. It basically returns POLLOUT as soon as the group has
    external destinations, something obviously leading to a lot of spinning
    during destination congestion situations. At the same time, the internal
    congestion handling is unnecessarily complex.
    
    We now change this as follows.
    
    - We introduce an 'open' flag in  struct tipc_group. This flag is used
      only to help poll() get the setting of POLLOUT right, and *not* for
      congeston handling as such. This means that a user can choose to
      ignore an  EAGAIN for a destination and go on sending messages to
      other destinations in the group if he wants to.
    
    - The flag is set to false every time we return EAGAIN on a send call.
    
    - The flag is set to true every time any member, i.e., not necessarily
      the member that caused EAGAIN, is removed from the small_win list.
    
    - We remove the group member 'usr_pending' flag. The size of the send
      window and presence in the 'small_win' list is sufficient criteria
      for recognizing congestion.
    
    This solution seems to be a reasonable compromise between 'anycast',
    which is normally not waiting for POLLOUT for a specific destination,
    and the other three send modes, which are.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 232d07b74a33b9f5d48516dc1d8ce41723ada593
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Mon Jan 8 21:03:30 2018 +0100

    tipc: improve groupcast scope handling
    
    When a member joins a group, it also indicates a binding scope. This
    makes it possible to create both node local groups, invisible to other
    nodes, as well as cluster global groups, visible everywhere.
    
    In order to avoid that different members end up having permanently
    differing views of group size and memberhip, we must inhibit locally
    and globally bound members from joining the same group.
    
    We do this by using the binding scope as an additional separator between
    groups. I.e., a member must ignore all membership events from sockets
    using a different scope than itself, and all lookups for message
    destinations must require an exact match between the message's lookup
    scope and the potential target's binding scope.
    
    Apart from making it possible to create local groups using the same
    identity on different nodes, a side effect of this is that it now also
    becomes possible to create a cluster global group with the same identity
    across the same nodes, without interfering with the local groups.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8348500f80d5660af29c475e1f15d412d83564c9
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Mon Jan 8 21:03:29 2018 +0100

    tipc: add option to suppress PUBLISH events for pre-existing publications
    
    Currently, when a user is subscribing for binding table publications,
    he will receive a PUBLISH event for all already existing matching items
    in the binding table.
    
    However, a group socket making a subscriptions doesn't need this initial
    status update from the binding table, because it has already scanned it
    during the join operation. Worse, the multiplicatory effect of issuing
    mutual events for dozens or hundreds group members within a short time
    frame put a heavy load on the topology server, with the end result that
    scale out operations on a big group tend to take much longer than needed.
    
    We now add a new filter option, TIPC_SUB_NO_STATUS, for topology server
    subscriptions, so that this initial avalanche of events is suppressed.
    This change, along with the previous commit, significantly improves the
    range and speed of group scale out operations.
    
    We keep the new option internal for the tipc driver, at least for now.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d12d2e12cec2d66eab6cd58f592dad9fd386b97d
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Mon Jan 8 21:03:28 2018 +0100

    tipc: send out join messages as soon as new member is discovered
    
    When a socket is joining a group, we look up in the binding table to
    find if there are already other members of the group present. This is
    used for being able to return EAGAIN instead of EHOSTUNREACH if the
    user proceeds directly to a send attempt.
    
    However, the information in the binding table can be used to directly
    set the created member in state MBR_PUBLISHED and send a JOIN message
    to the peer, instead of waiting for a topology PUBLISH event to do this.
    When there are many members in a group, the propagation time for such
    events can be significant, and we can save time during the join
    operation if we use the initial lookup result fully.
    
    In this commit, we eliminate the member state MBR_DISCOVERED which has
    been the result of the initial lookup, and do instead go directly to
    MBR_PUBLISHED, which initiates the setup.
    
    After this change, the tipc_member FSM looks as follows:
    
         +-----------+
    ---->| PUBLISHED |-----------------------------------------------+
    PUB- +-----------+                                 LEAVE/WITHRAW |
    LISH       |JOIN                                                 |
               |     +-------------------------------------------+   |
               |     |                            LEAVE/WITHDRAW |   |
               |     |                +------------+             |   |
               |     |   +----------->|  PENDING   |---------+   |   |
               |     |   |msg/maxactv +-+---+------+  LEAVE/ |   |   |
               |     |   |              |   |       WITHDRAW |   |   |
               |     |   |   +----------+   |                |   |   |
               |     |   |   |revert/maxactv|                |   |   |
               |     |   |   V              V                V   V   V
               |   +----------+  msg  +------------+       +-----------+
               +-->|  JOINED  |------>|   ACTIVE   |------>|  LEAVING  |--->
               |   +----------+       +--- -+------+ LEAVE/+-----------+DOWN
               |        A   A               |      WITHDRAW A   A    A   EVT
               |        |   |               |RECLAIM        |   |    |
               |        |   |REMIT          V               |   |    |
               |        |   |== adv   +------------+        |   |    |
               |        |   +---------| RECLAIMING |--------+   |    |
               |        |             +-----+------+  LEAVE/    |    |
               |        |                   |REMIT   WITHDRAW   |    |
               |        |                   |< adv              |    |
               |        |msg/               V            LEAVE/ |    |
               |        |adv==ADV_IDLE+------------+   WITHDRAW |    |
               |        +-------------|  REMITTED  |------------+    |
               |                      +------------+                 |
               |PUBLISH                                              |
    JOIN +-----------+                                LEAVE/WITHDRAW |
    ---->|  JOINING  |-----------------------------------------------+
         +-----------+
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c2b22bcf2e18a279afd80a8c57e936014acf3348
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Mon Jan 8 21:03:27 2018 +0100

    tipc: simplify group LEAVE sequence
    
    After the changes in the previous commit the group LEAVE sequence
    can be simplified.
    
    We now let the arrival of a LEAVE message unconditionally issue a group
    DOWN event to the user. When a topology WITHDRAW event is received, the
    member, if it still there, is set to state LEAVING, but we only issue a
    group DOWN event when the link to the peer node is gone, so that no
    LEAVE message is to be expected.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7ad32bcb7855ae8a60a8cf98e1b9da77cfdba4d0
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Mon Jan 8 21:03:26 2018 +0100

    tipc: create group member event messages when they are needed
    
    In the current implementation, a group socket receiving topology
    events about other members just converts the topology event message
    into a group event message and stores it until it reaches the right
    state to issue it to the user. This complicates the code unnecessarily,
    and becomes impractical when we in the coming commits will need to
    create and issue membership events independently.
    
    In this commit, we change this so that we just notice the type and
    origin of the incoming topology event, and then drop the buffer. Only
    when it is time to actually send a group event to the user do we
    explicitly create a new message and send it upwards.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0233493a5fad227645f7f02539cb42db72e76030
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Mon Jan 8 21:03:25 2018 +0100

    tipc: adjustment to group member FSM
    
    Analysis reveals that the member state MBR_QURANTINED in reality is
    unnecessary, and can be replaced by the state MBR_JOINING at all
    occurrencs.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4ea5dab541717fc55cad609360b100857af770b0
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Mon Jan 8 21:03:24 2018 +0100

    tipc: let group member stay in JOINED mode if unable to reclaim
    
    We handle a corner case in the function tipc_group_update_rcv_win().
    During extreme pessure it might happen that a message receiver has all
    its active senders in RECLAIMING or REMITTED mode, meaning that there
    is nobody to reclaim advertisements from if an additional sender tries
    to go active.
    
    Currently we just set the new sender to ACTIVE anyway, hence at least
    theoretically opening up for a receiver queue overflow by exceeding the
    MAX_ACTIVE limit. The correct solution to this is to instead add the
    member to the pending queue, while letting the oldest member in that
    queue revert to JOINED state.
    
    In this commit we refactor the code for handling message arrival from
    a JOINED member, both to make it more comprehensible and to cover the
    case described above.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8d5dee21f6f01f4632c10b750709a1383eefc7aa
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Mon Jan 8 21:03:23 2018 +0100

    tipc: a couple of cleanups
    
    - We remove the 'reclaiming' member list in struct tipc_group, since
      it doesn't serve any purpose.
    
    - We simplify the GRP_REMIT_MSG branch of tipc_group_protocol_rcv().
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f4803f1b73f877a571be4c8e531dfcf190acc691
Author: Yang Shi <yang.s@alibaba-inc.com>
Date:   Tue Jan 9 03:52:54 2018 +0800

    net: tipc: remove unused hardirq.h
    
    Preempt counter APIs have been split out, currently, hardirq.h just
    includes irq_enter/exit APIs which are not used by TIPC at all.
    
    So, remove the unused hardirq.h.
    
    Signed-off-by: Yang Shi <yang.s@alibaba-inc.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Tested-by: Ying Xue <ying.xue@windriver.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: "David S. Miller" <davem@davemloft.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit eb9aa1bfbad8c9fc280adf43cb480911295cfa3f
Merge: a31e795a3b4d d84d1b3b6b8c
Author: David S. Miller <davem@davemloft.net>
Date:   Fri Jan 5 13:37:04 2018 -0500

    Merge branch 'tipc-two-small-cleanups'
    
    Jon Maloy says:
    
    ====================
    tipc: two small cleanups
    
    These two commits are based on commit f9c935db8086 ("tipc: fix
    problems with multipoint-to-point flow control") which has been
    applied to 'net' but not yet to 'net-next'.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d84d1b3b6b8c296de8d394002bc3a0ca910d7460
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Jan 4 15:20:45 2018 +0100

    tipc: simplify small window members' sorting algorithm
    
    We simplify the sorting algorithm in tipc_update_member(). We also make
    the remaining conditional call to this function unconditional, since the
    same condition now is tested for inside the said function.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 38266ca17c5f142a25d4563335e143cbd62e65a7
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Jan 4 15:20:44 2018 +0100

    tipc: some clarifying name changes
    
    We rename some functions and variables, to make their purpose clearer.
    
    - tipc_group::congested -> tipc_group::small_win. Members in this list
      are not necessarily (and typically) congested. Instead, they may
      *potentially* be subject to congestion because their send window is
      less than ADV_IDLE, and therefore need to be checked during message
      transmission.
    
    - tipc_group_is_receiver() -> tipc_group_is_sender(). This socket will
      accept messages coming from members fulfilling this condition, i.e.,
      they are senders from this member's viewpoint.
    
    - tipc_group_is_enabled() -> tipc_group_is_receiver(). Members
      fulfilling this condition will accept messages sent from the current
      socket, i.e., they are receivers from its viewpoint.
    
    There are no functional changes in this commit.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f9c935db8086231a35b7f5c2a53e3f1e10f388ee
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Dec 29 19:48:02 2017 +0100

    tipc: fix problems with multipoint-to-point flow control
    
    In commit 04d7b574b245 ("tipc: add multipoint-to-point flow control") we
    introduced a protocol for preventing buffer overflow when many group
    members try to simultaneously send messages to the same receiving member.
    
    Stress test of this mechanism has revealed a couple of related bugs:
    
    - When the receiving member receives an advertisement REMIT message from
      one of the senders, it will sometimes prematurely activate a pending
      member and send it the remitted advertisement, although the upper
      limit for active senders has been reached. This leads to accumulation
      of illegal advertisements, and eventually to messages being dropped
      because of receive buffer overflow.
    
    - When the receiving member leaves REMITTED state while a received
      message is being read, we miss to look at the pending queue, to
      activate the oldest pending peer. This leads to some pending senders
      being starved out, and never getting the opportunity to profit from
      the remitted advertisement.
    
    We fix the former in the function tipc_group_proto_rcv() by returning
    directly from the function once it becomes clear that the remitting
    peer cannot leave REMITTED state at that point.
    
    We fix the latter in the function tipc_group_update_rcv_win() by looking
    up and activate the longest pending peer when it becomes clear that the
    remitting peer now can leave REMITTED state.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 92ae8233467b3a19a50fb02a7ebe065c6de3df17
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@gmail.com>
Date:   Thu Dec 28 12:03:06 2017 +0100

    tipc: fix hanging poll() for stream sockets
    
    
    [ Upstream commit 517d7c79bdb39864e617960504bdc1aa560c75c6 ]
    
    In commit 42b531de17d2f6 ("tipc: Fix missing connection request
    handling"), we replaced unconditional wakeup() with condtional
    wakeup for clients with flags POLLIN | POLLRDNORM | POLLRDBAND.
    
    This breaks the applications which do a connect followed by poll
    with POLLOUT flag. These applications are not woken when the
    connection is ESTABLISHED and hence sleep forever.
    
    In this commit, we fix it by including the POLLOUT event for
    sockets in TIPC_CONNECTING state.
    
    Fixes: 42b531de17d2f6 ("tipc: Fix missing connection request handling")
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2758b3e3e630ba304fc4aca434d591e70e528298
Merge: fd84b751ddb7 d5902f6d1fbd
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Dec 28 23:20:21 2017 -0800

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) IPv6 gre tunnels end up with different default features enabled
        depending upon whether netlink or ioctls are used to bring them up.
        Fix from Alexey Kodanev.
    
     2) Fix read past end of user control message in RDS< from Avinash
        Repaka.
    
     3) Missing RCU barrier in mini qdisc code, from Cong Wang.
    
     4) Missing policy put when reusing per-cpu route entries, from Florian
        Westphal.
    
     5) Handle nested PCI errors properly in bnx2x driver, from Guilherme G.
        Piccoli.
    
     6) Run nested transport mode IPSEC packets via tasklet, from Herbert
        Xu.
    
     7) Fix handling poll() for stream sockets in tipc, from Parthasarathy
        Bhuvaragan.
    
     8) Fix two stack-out-of-bounds issues in IPSEC, from Steffen Klassert.
    
     9) Another zerocopy ubuf handling fix, from Willem de Bruijn.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (33 commits)
      strparser: Call sock_owned_by_user_nocheck
      sock: Add sock_owned_by_user_nocheck
      skbuff: in skb_copy_ubufs unclone before releasing zerocopy
      tipc: fix hanging poll() for stream sockets
      sctp: Replace use of sockets_allocated with specified macro.
      bnx2x: Improve reliability in case of nested PCI errors
      tg3: Enable PHY reset in MTU change path for 5720
      tg3: Add workaround to restrict 5762 MRRS to 2048
      tg3: Update copyright
      net: fec: unmap the xmit buffer that are not transferred by DMA
      tipc: fix tipc_mon_delete() oops in tipc_enable_bearer() error path
      tipc: error path leak fixes in tipc_enable_bearer()
      RDS: Check cmsg_len before dereferencing CMSG_DATA
      tcp: Avoid preprocessor directives in tracepoint macro args
      tipc: fix memory leak of group member when peer node is lost
      net: sched: fix possible null pointer deref in tcf_block_put
      tipc: base group replicast ack counter on number of actual receivers
      net_sched: fix a missing rcu barrier in mini_qdisc_pair_swap()
      net: phy: micrel: ksz9031: reconfigure autoneg after phy autoneg workaround
      ip6_gre: fix device features for ioctl setup
      ...

commit 517d7c79bdb39864e617960504bdc1aa560c75c6
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@gmail.com>
Date:   Thu Dec 28 12:03:06 2017 +0100

    tipc: fix hanging poll() for stream sockets
    
    In commit 42b531de17d2f6 ("tipc: Fix missing connection request
    handling"), we replaced unconditional wakeup() with condtional
    wakeup for clients with flags POLLIN | POLLRDNORM | POLLRDBAND.
    
    This breaks the applications which do a connect followed by poll
    with POLLOUT flag. These applications are not woken when the
    connection is ESTABLISHED and hence sleep forever.
    
    In this commit, we fix it by including the POLLOUT event for
    sockets in TIPC_CONNECTING state.
    
    Fixes: 42b531de17d2f6 ("tipc: Fix missing connection request handling")
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 642a8439ddd8423b92f2e71960afe21ee1f66bb6
Author: Tommi Rantala <tommi.t.rantala@nokia.com>
Date:   Fri Dec 22 09:35:17 2017 +0200

    tipc: fix tipc_mon_delete() oops in tipc_enable_bearer() error path
    
    Calling tipc_mon_delete() before the monitor has been created will oops.
    This can happen in tipc_enable_bearer() error path if tipc_disc_create()
    fails.
    
    [   48.589074] BUG: unable to handle kernel paging request at 0000000000001008
    [   48.590266] IP: tipc_mon_delete+0xea/0x270 [tipc]
    [   48.591223] PGD 1e60c5067 P4D 1e60c5067 PUD 1eb0cf067 PMD 0
    [   48.592230] Oops: 0000 [#1] SMP KASAN
    [   48.595610] CPU: 5 PID: 1199 Comm: tipc Tainted: G    B            4.15.0-rc4-pc64-dirty #5
    [   48.597176] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-2.fc27 04/01/2014
    [   48.598489] RIP: 0010:tipc_mon_delete+0xea/0x270 [tipc]
    [   48.599347] RSP: 0018:ffff8801d827f668 EFLAGS: 00010282
    [   48.600705] RAX: ffff8801ee813f00 RBX: 0000000000000204 RCX: 0000000000000000
    [   48.602183] RDX: 1ffffffff1de6a75 RSI: 0000000000000297 RDI: 0000000000000297
    [   48.604373] RBP: 0000000000000000 R08: 0000000000000000 R09: fffffbfff1dd1533
    [   48.605607] R10: ffffffff8eafbb05 R11: fffffbfff1dd1534 R12: 0000000000000050
    [   48.607082] R13: dead000000000200 R14: ffffffff8e73f310 R15: 0000000000001020
    [   48.608228] FS:  00007fc686484800(0000) GS:ffff8801f5540000(0000) knlGS:0000000000000000
    [   48.610189] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   48.611459] CR2: 0000000000001008 CR3: 00000001dda70002 CR4: 00000000003606e0
    [   48.612759] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [   48.613831] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [   48.615038] Call Trace:
    [   48.615635]  tipc_enable_bearer+0x415/0x5e0 [tipc]
    [   48.620623]  tipc_nl_bearer_enable+0x1ab/0x200 [tipc]
    [   48.625118]  genl_family_rcv_msg+0x36b/0x570
    [   48.631233]  genl_rcv_msg+0x5a/0xa0
    [   48.631867]  netlink_rcv_skb+0x1cc/0x220
    [   48.636373]  genl_rcv+0x24/0x40
    [   48.637306]  netlink_unicast+0x29c/0x350
    [   48.639664]  netlink_sendmsg+0x439/0x590
    [   48.642014]  SYSC_sendto+0x199/0x250
    [   48.649912]  do_syscall_64+0xfd/0x2c0
    [   48.650651]  entry_SYSCALL64_slow_path+0x25/0x25
    [   48.651843] RIP: 0033:0x7fc6859848e3
    [   48.652539] RSP: 002b:00007ffd25dff938 EFLAGS: 00000246 ORIG_RAX: 000000000000002c
    [   48.654003] RAX: ffffffffffffffda RBX: 00007ffd25dff990 RCX: 00007fc6859848e3
    [   48.655303] RDX: 0000000000000054 RSI: 00007ffd25dff990 RDI: 0000000000000003
    [   48.656512] RBP: 00007ffd25dff980 R08: 00007fc685c35fc0 R09: 000000000000000c
    [   48.657697] R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000d13010
    [   48.658840] R13: 00007ffd25e009c0 R14: 0000000000000000 R15: 0000000000000000
    [   48.662972] RIP: tipc_mon_delete+0xea/0x270 [tipc] RSP: ffff8801d827f668
    [   48.664073] CR2: 0000000000001008
    [   48.664576] ---[ end trace e811818d54d5ce88 ]---
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tommi Rantala <tommi.t.rantala@nokia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 19142551b2be4a9e13838099fde1351386e5e007
Author: Tommi Rantala <tommi.t.rantala@nokia.com>
Date:   Fri Dec 22 09:35:16 2017 +0200

    tipc: error path leak fixes in tipc_enable_bearer()
    
    Fix memory leak in tipc_enable_bearer() if enable_media() fails, and
    cleanup with bearer_disable() if tipc_mon_create() fails.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tommi Rantala <tommi.t.rantala@nokia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3a33a19bf88cdfc6d982972bc6ffcf7a62c1015e
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Dec 21 14:36:34 2017 +0100

    tipc: fix memory leak of group member when peer node is lost
    
    When a group member receives a member WITHDRAW event, this might have
    two reasons: either the peer member is leaving the group, or the link
    to the member's node has been lost.
    
    In the latter case we need to issue a DOWN event to the user right away,
    and let function tipc_group_filter_msg() perform delete of the member
    item. However, in this case we miss to change the state of the member
    item to MBR_LEAVING, so the member item is not deleted, and we have a
    memory leak.
    
    We now separate better between the four sub-cases of a WITHRAW event
    and make sure that each case is handled correctly.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0a3d805c9c503e05d6e5d3868c53e92a06589dcf
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Dec 21 13:07:11 2017 +0100

    tipc: base group replicast ack counter on number of actual receivers
    
    In commit 2f487712b893 ("tipc: guarantee that group broadcast doesn't
    bypass group unicast") we introduced a mechanism that requires the first
    (replicated) broadcast sent after a unicast to be acknowledged by all
    receivers before permitting sending of the next (true) broadcast.
    
    The counter for keeping track of the number of acknowledges to expect
    is based on the tipc_group::member_cnt variable. But this misses that
    some of the known members may not be ready for reception, and will never
    acknowledge the message, either because they haven't fully joined the
    group or because they are leaving the group. Such members are identified
    by not fulfilling the condition tested for in the function
    tipc_group_is_enabled().
    
    We now set the counter for the actual number of acks to receive at the
    moment the message is sent, by just counting the number of recipients
    satisfying the tipc_group_is_enabled() test.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e6e8067ec34ad422125a54f88a0884dbb296009f
Author: Ying Xue <ying.xue@windriver.com>
Date:   Tue Mar 21 10:47:49 2017 +0100

    tipc: fix nametbl deadlock at tipc_nametbl_unsubscribe
    
    
    [ Upstream commit 557d054c01da0337ca81de9e9d9206d57245b57e ]
    
    Until now, tipc_nametbl_unsubscribe() is called at subscriptions
    reference count cleanup. Usually the subscriptions cleanup is
    called at subscription timeout or at subscription cancel or at
    subscriber delete.
    
    We have ignored the possibility of this being called from other
    locations, which causes deadlock as we try to grab the
    tn->nametbl_lock while holding it already.
    
       CPU1:                             CPU2:
    ----------                     ----------------
    tipc_nametbl_publish
    spin_lock_bh(&tn->nametbl_lock)
    tipc_nametbl_insert_publ
    tipc_nameseq_insert_publ
    tipc_subscrp_report_overlap
    tipc_subscrp_get
    tipc_subscrp_send_event
                                 tipc_close_conn
                                 tipc_subscrb_release_cb
                                 tipc_subscrb_delete
                                 tipc_subscrp_put
    tipc_subscrp_put
    tipc_subscrp_kref_release
    tipc_nametbl_unsubscribe
    spin_lock_bh(&tn->nametbl_lock)
    <<grab nametbl_lock again>>
    
       CPU1:                              CPU2:
    ----------                     ----------------
    tipc_nametbl_stop
    spin_lock_bh(&tn->nametbl_lock)
    tipc_purge_publications
    tipc_nameseq_remove_publ
    tipc_subscrp_report_overlap
    tipc_subscrp_get
    tipc_subscrp_send_event
                                 tipc_close_conn
                                 tipc_subscrb_release_cb
                                 tipc_subscrb_delete
                                 tipc_subscrp_put
    tipc_subscrp_put
    tipc_subscrp_kref_release
    tipc_nametbl_unsubscribe
    spin_lock_bh(&tn->nametbl_lock)
    <<grab nametbl_lock again>>
    
    In this commit, we advance the calling of tipc_nametbl_unsubscribe()
    from the refcount cleanup to the intended callers.
    
    Fixes: d094c4d5f5c7 ("tipc: add subscription refcount to avoid invalid delete")
    Reported-by: John Thompson <thompa.atl@gmail.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ead68f216110170ec729e2c4dec0aad6d38259d7
Merge: 9035a8961b50 c50b7c473f60
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Dec 21 15:57:30 2017 -0800

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller"
     "What's a holiday weekend without some networking bug fixes? [1]
    
       1) Fix some eBPF JIT bugs wrt. SKB pointers across helper function
          calls, from Daniel Borkmann.
    
       2) Fix regression from errata limiting change to marvell PHY driver,
          from Zhao Qiang.
    
       3) Fix u16 overflow in SCTP, from Xin Long.
    
       4) Fix potential memory leak during bridge newlink, from Nikolay
          Aleksandrov.
    
       5) Fix BPF selftest build on s390, from Hendrik Brueckner.
    
       6) Don't append to cfg80211 automatically generated certs file,
          always write new ones from scratch. From Thierry Reding.
    
       7) Fix sleep in atomic in mac80211 hwsim, from Jia-Ju Bai.
    
       8) Fix hang on tg3 MTU change with certain chips, from Brian King.
    
       9) Add stall detection to arc emac driver and reset chip when this
          happens, from Alexander Kochetkov.
    
      10) Fix MTU limitng in GRE tunnel drivers, from Xin Long.
    
      11) Fix stmmac timestamping bug due to mis-shifting of field. From
          Fredrik Hallenberg.
    
      12) Fix metrics match when deleting an ipv4 route. The kernel sets
          some internal metrics bits which the user isn't going to set when
          it makes the delete request. From Phil Sutter.
    
      13) mvneta driver loop over RX queues limits on "txq_number" :-) Fix
          from Yelena Krivosheev.
    
      14) Fix double free and memory corruption in get_net_ns_by_id, from
          Eric W. Biederman.
    
      15) Flush ipv4 FIB tables in the reverse order. Some tables can share
          their actual backing data, in particular this happens for the MAIN
          and LOCAL tables. We have to kill the LOCAL table first, because
          it uses MAIN's backing memory. Fix from Ido Schimmel.
    
      16) Several eBPF verifier value tracking fixes, from Edward Cree, Jann
          Horn, and Alexei Starovoitov.
    
      17) Make changes to ipv6 autoflowlabel sysctl really propagate to
          sockets, unless the socket has set the per-socket value
          explicitly. From Shaohua Li.
    
      18) Fix leaks and double callback invocations of zerocopy SKBs, from
          Willem de Bruijn"
    
    [1] Is this a trick question? "Relaxing"? "Quiet"? "Fine"? - Linus.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (77 commits)
      skbuff: skb_copy_ubufs must release uarg even without user frags
      skbuff: orphan frags before zerocopy clone
      net: reevalulate autoflowlabel setting after sysctl setting
      openvswitch: Fix pop_vlan action for double tagged frames
      ipv6: Honor specified parameters in fibmatch lookup
      bpf: do not allow root to mangle valid pointers
      selftests/bpf: add tests for recent bugfixes
      bpf: fix integer overflows
      bpf: don't prune branches when a scalar is replaced with a pointer
      bpf: force strict alignment checks for stack pointers
      bpf: fix missing error return in check_stack_boundary()
      bpf: fix 32-bit ALU op verification
      bpf: fix incorrect tracking of register size truncation
      bpf: fix incorrect sign extension in check_alu_op()
      bpf/verifier: fix bounds calculation on BPF_RSH
      ipv4: Fix use-after-free when flushing FIB tables
      s390/qeth: fix error handling in checksum cmd callback
      tipc: remove joining group member from congested list
      selftests: net: Adding config fragment CONFIG_NUMA=y
      nfp: bpf: keep track of the offloaded program
      ...

commit bb25c3855a12cc58e33cd7ee9b69943790fe35f7
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Wed Dec 20 11:03:15 2017 +0100

    tipc: remove joining group member from congested list
    
    When we receive a JOIN message from a peer member, the message may
    contain an advertised window value ADV_IDLE that permits removing the
    member in question from the tipc_group::congested list. However, since
    the removal has been made conditional on that the advertised window is
    *not* ADV_IDLE, we miss this case. This has the effect that a sender
    sometimes may enter a state of permanent, false, broadcast congestion.
    
    We fix this by unconditinally removing the member from the congested
    list before calling tipc_member_update(), which might potentially sort
    it into the list again.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3db096011722fd8717e57687ae94b6917a11c9cc
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Mon Dec 18 20:03:05 2017 +0100

    tipc: fix list sorting bug in function tipc_group_update_member()
    
    When, during a join operation, or during message transmission, a group
    member needs to be added to the group's 'congested' list, we sort it
    into the list in ascending order, according to its current advertised
    window size. However, we miss the case when the member is already on
    that list. This will have the result that the member, after the window
    size has been decremented, might be at the wrong position in that list.
    This again may have the effect that we during broadcast and multicast
    transmissions miss the fact that a destination is not yet ready for
    reception, and we end up sending anyway. From this point on, the
    behavior during the remaining session is unpredictable, e.g., with
    underflowing window sizes.
    
    We now correct this bug by unconditionally removing the member from
    the list before (re-)sorting it in.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3f42f5fe31c8715a34064bfd7b788488d1ea2f7c
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Mon Dec 18 18:13:34 2017 +0100

    tipc: remove leaving group member from all lists
    
    A group member going into state LEAVING should never go back to any
    other state before it is finally deleted. However, this might happen
    if the socket needs to send out a RECLAIM message during this interval.
    Since we forget to remove the leaving member from the group's 'active'
    or 'pending' list, the member might be selected for reclaiming, change
    state to RECLAIMING, and get stuck in this state instead of being
    deleted. This might lead to suppression of the expected 'member down'
    event to the receiver.
    
    We fix this by removing the member from all lists, except the RB tree,
    at the moment it goes into state LEAVING.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 234833991e14681f61cbfd93e65a5c976089cf11
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Mon Dec 18 17:34:16 2017 +0100

    tipc: fix lost member events bug
    
    Group messages are not supposed to be returned to sender when the
    destination socket disappears. This is done correctly for regular
    traffic messages, by setting the 'dest_droppable' bit in the header.
    But we forget to do that in group protocol messages. This has the effect
    that such messages may sometimes bounce back to the sender, be perceived
    as a legitimate peer message, and wreak general havoc for the rest of
    the session. In particular, we have seen that a member in state LEAVING
    may go back to state RECLAIMED or REMITTED, hence causing suppression
    of an otherwise expected 'member down' event to the user.
    
    We fix this by setting the 'dest_droppable' bit even in group protocol
    messages.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit de514e0609ea1fcf1f70faf427ec9b693d007f8b
Author: Tommi Rantala <tommi.t.rantala@nokia.com>
Date:   Wed Nov 29 12:48:42 2017 +0200

    tipc: call tipc_rcv() only if bearer is up in tipc_udp_recv()
    
    
    [ Upstream commit c7799c067c2ae33e348508c8afec354f3257ff25 ]
    
    Remove the second tipc_rcv() call in tipc_udp_recv(). We have just
    checked that the bearer is not up, and calling tipc_rcv() with a bearer
    that is not up leads to a TIPC div-by-zero crash in
    tipc_node_calculate_timer(). The crash is rare in practice, but can
    happen like this:
    
      We're enabling a bearer, but it's not yet up and fully initialized.
      At the same time we receive a discovery packet, and in tipc_udp_recv()
      we end up calling tipc_rcv() with the not-yet-initialized bearer,
      causing later the div-by-zero crash in tipc_node_calculate_timer().
    
    Jon Maloy explains the impact of removing the second tipc_rcv() call:
      "link setup in the worst case will be delayed until the next arriving
       discovery messages, 1 sec later, and this is an acceptable delay."
    
    As the tipc_rcv() call is removed, just leave the function via the
    rcu_out label, so that we will kfree_skb().
    
    [   12.590450] Own node address <1.1.1>, network identity 1
    [   12.668088] divide error: 0000 [#1] SMP
    [   12.676952] CPU: 2 PID: 0 Comm: swapper/2 Not tainted 4.14.2-dirty #1
    [   12.679225] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-2.fc27 04/01/2014
    [   12.682095] task: ffff8c2a761edb80 task.stack: ffffa41cc0cac000
    [   12.684087] RIP: 0010:tipc_node_calculate_timer.isra.12+0x45/0x60 [tipc]
    [   12.686486] RSP: 0018:ffff8c2a7fc838a0 EFLAGS: 00010246
    [   12.688451] RAX: 0000000000000000 RBX: ffff8c2a5b382600 RCX: 0000000000000000
    [   12.691197] RDX: 0000000000000000 RSI: ffff8c2a5b382600 RDI: ffff8c2a5b382600
    [   12.693945] RBP: ffff8c2a7fc838b0 R08: 0000000000000001 R09: 0000000000000001
    [   12.696632] R10: 0000000000000000 R11: 0000000000000000 R12: ffff8c2a5d8949d8
    [   12.699491] R13: ffffffff95ede400 R14: 0000000000000000 R15: ffff8c2a5d894800
    [   12.702338] FS:  0000000000000000(0000) GS:ffff8c2a7fc80000(0000) knlGS:0000000000000000
    [   12.705099] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   12.706776] CR2: 0000000001bb9440 CR3: 00000000bd009001 CR4: 00000000003606e0
    [   12.708847] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [   12.711016] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [   12.712627] Call Trace:
    [   12.713390]  <IRQ>
    [   12.714011]  tipc_node_check_dest+0x2e8/0x350 [tipc]
    [   12.715286]  tipc_disc_rcv+0x14d/0x1d0 [tipc]
    [   12.716370]  tipc_rcv+0x8b0/0xd40 [tipc]
    [   12.717396]  ? minmax_running_min+0x2f/0x60
    [   12.718248]  ? dst_alloc+0x4c/0xa0
    [   12.718964]  ? tcp_ack+0xaf1/0x10b0
    [   12.719658]  ? tipc_udp_is_known_peer+0xa0/0xa0 [tipc]
    [   12.720634]  tipc_udp_recv+0x71/0x1d0 [tipc]
    [   12.721459]  ? dst_alloc+0x4c/0xa0
    [   12.722130]  udp_queue_rcv_skb+0x264/0x490
    [   12.722924]  __udp4_lib_rcv+0x21e/0x990
    [   12.723670]  ? ip_route_input_rcu+0x2dd/0xbf0
    [   12.724442]  ? tcp_v4_rcv+0x958/0xa40
    [   12.725039]  udp_rcv+0x1a/0x20
    [   12.725587]  ip_local_deliver_finish+0x97/0x1d0
    [   12.726323]  ip_local_deliver+0xaf/0xc0
    [   12.726959]  ? ip_route_input_noref+0x19/0x20
    [   12.727689]  ip_rcv_finish+0xdd/0x3b0
    [   12.728307]  ip_rcv+0x2ac/0x360
    [   12.728839]  __netif_receive_skb_core+0x6fb/0xa90
    [   12.729580]  ? udp4_gro_receive+0x1a7/0x2c0
    [   12.730274]  __netif_receive_skb+0x1d/0x60
    [   12.730953]  ? __netif_receive_skb+0x1d/0x60
    [   12.731637]  netif_receive_skb_internal+0x37/0xd0
    [   12.732371]  napi_gro_receive+0xc7/0xf0
    [   12.732920]  receive_buf+0x3c3/0xd40
    [   12.733441]  virtnet_poll+0xb1/0x250
    [   12.733944]  net_rx_action+0x23e/0x370
    [   12.734476]  __do_softirq+0xc5/0x2f8
    [   12.734922]  irq_exit+0xfa/0x100
    [   12.735315]  do_IRQ+0x4f/0xd0
    [   12.735680]  common_interrupt+0xa2/0xa2
    [   12.736126]  </IRQ>
    [   12.736416] RIP: 0010:native_safe_halt+0x6/0x10
    [   12.736925] RSP: 0018:ffffa41cc0cafe90 EFLAGS: 00000246 ORIG_RAX: ffffffffffffff4d
    [   12.737756] RAX: 0000000000000000 RBX: ffff8c2a761edb80 RCX: 0000000000000000
    [   12.738504] RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000000
    [   12.739258] RBP: ffffa41cc0cafe90 R08: 0000014b5b9795e5 R09: ffffa41cc12c7e88
    [   12.740118] R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000002
    [   12.740964] R13: ffff8c2a761edb80 R14: 0000000000000000 R15: 0000000000000000
    [   12.741831]  default_idle+0x2a/0x100
    [   12.742323]  arch_cpu_idle+0xf/0x20
    [   12.742796]  default_idle_call+0x28/0x40
    [   12.743312]  do_idle+0x179/0x1f0
    [   12.743761]  cpu_startup_entry+0x1d/0x20
    [   12.744291]  start_secondary+0x112/0x120
    [   12.744816]  secondary_startup_64+0xa5/0xa5
    [   12.745367] Code: b9 f4 01 00 00 48 89 c2 48 c1 ea 02 48 3d d3 07 00
    00 48 0f 47 d1 49 8b 0c 24 48 39 d1 76 07 49 89 14 24 48 89 d1 31 d2 48
    89 df <48> f7 f1 89 c6 e8 81 6e ff ff 5b 41 5c 5d c3 66 90 66 2e 0f 1f
    [   12.747527] RIP: tipc_node_calculate_timer.isra.12+0x45/0x60 [tipc] RSP: ffff8c2a7fc838a0
    [   12.748555] ---[ end trace 1399ab83390650fd ]---
    [   12.749296] Kernel panic - not syncing: Fatal exception in interrupt
    [   12.750123] Kernel Offset: 0x13200000 from 0xffffffff82000000
    (relocation range: 0xffffffff80000000-0xffffffffbfffffff)
    [   12.751215] Rebooting in 60 seconds..
    
    Fixes: c9b64d492b1f ("tipc: add replicast peer discovery")
    Signed-off-by: Tommi Rantala <tommi.t.rantala@nokia.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1933fa485194e697b4d90853f338029ab19e4a72
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Mon Dec 4 22:00:20 2017 +0100

    tipc: fix memory leak in tipc_accept_from_sock()
    
    
    [ Upstream commit a7d5f107b4978e08eeab599ee7449af34d034053 ]
    
    When the function tipc_accept_from_sock() fails to create an instance of
    struct tipc_subscriber it omits to free the already created instance of
    struct tipc_conn instance before it returns.
    
    We fix that with this commit.
    
    Reported-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf00fd3d526cdabaf558e911d71d0a2c303cf0e7
Author: Tommi Rantala <tommi.t.rantala@nokia.com>
Date:   Wed Nov 29 12:48:42 2017 +0200

    tipc: call tipc_rcv() only if bearer is up in tipc_udp_recv()
    
    
    [ Upstream commit c7799c067c2ae33e348508c8afec354f3257ff25 ]
    
    Remove the second tipc_rcv() call in tipc_udp_recv(). We have just
    checked that the bearer is not up, and calling tipc_rcv() with a bearer
    that is not up leads to a TIPC div-by-zero crash in
    tipc_node_calculate_timer(). The crash is rare in practice, but can
    happen like this:
    
      We're enabling a bearer, but it's not yet up and fully initialized.
      At the same time we receive a discovery packet, and in tipc_udp_recv()
      we end up calling tipc_rcv() with the not-yet-initialized bearer,
      causing later the div-by-zero crash in tipc_node_calculate_timer().
    
    Jon Maloy explains the impact of removing the second tipc_rcv() call:
      "link setup in the worst case will be delayed until the next arriving
       discovery messages, 1 sec later, and this is an acceptable delay."
    
    As the tipc_rcv() call is removed, just leave the function via the
    rcu_out label, so that we will kfree_skb().
    
    [   12.590450] Own node address <1.1.1>, network identity 1
    [   12.668088] divide error: 0000 [#1] SMP
    [   12.676952] CPU: 2 PID: 0 Comm: swapper/2 Not tainted 4.14.2-dirty #1
    [   12.679225] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-2.fc27 04/01/2014
    [   12.682095] task: ffff8c2a761edb80 task.stack: ffffa41cc0cac000
    [   12.684087] RIP: 0010:tipc_node_calculate_timer.isra.12+0x45/0x60 [tipc]
    [   12.686486] RSP: 0018:ffff8c2a7fc838a0 EFLAGS: 00010246
    [   12.688451] RAX: 0000000000000000 RBX: ffff8c2a5b382600 RCX: 0000000000000000
    [   12.691197] RDX: 0000000000000000 RSI: ffff8c2a5b382600 RDI: ffff8c2a5b382600
    [   12.693945] RBP: ffff8c2a7fc838b0 R08: 0000000000000001 R09: 0000000000000001
    [   12.696632] R10: 0000000000000000 R11: 0000000000000000 R12: ffff8c2a5d8949d8
    [   12.699491] R13: ffffffff95ede400 R14: 0000000000000000 R15: ffff8c2a5d894800
    [   12.702338] FS:  0000000000000000(0000) GS:ffff8c2a7fc80000(0000) knlGS:0000000000000000
    [   12.705099] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   12.706776] CR2: 0000000001bb9440 CR3: 00000000bd009001 CR4: 00000000003606e0
    [   12.708847] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [   12.711016] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [   12.712627] Call Trace:
    [   12.713390]  <IRQ>
    [   12.714011]  tipc_node_check_dest+0x2e8/0x350 [tipc]
    [   12.715286]  tipc_disc_rcv+0x14d/0x1d0 [tipc]
    [   12.716370]  tipc_rcv+0x8b0/0xd40 [tipc]
    [   12.717396]  ? minmax_running_min+0x2f/0x60
    [   12.718248]  ? dst_alloc+0x4c/0xa0
    [   12.718964]  ? tcp_ack+0xaf1/0x10b0
    [   12.719658]  ? tipc_udp_is_known_peer+0xa0/0xa0 [tipc]
    [   12.720634]  tipc_udp_recv+0x71/0x1d0 [tipc]
    [   12.721459]  ? dst_alloc+0x4c/0xa0
    [   12.722130]  udp_queue_rcv_skb+0x264/0x490
    [   12.722924]  __udp4_lib_rcv+0x21e/0x990
    [   12.723670]  ? ip_route_input_rcu+0x2dd/0xbf0
    [   12.724442]  ? tcp_v4_rcv+0x958/0xa40
    [   12.725039]  udp_rcv+0x1a/0x20
    [   12.725587]  ip_local_deliver_finish+0x97/0x1d0
    [   12.726323]  ip_local_deliver+0xaf/0xc0
    [   12.726959]  ? ip_route_input_noref+0x19/0x20
    [   12.727689]  ip_rcv_finish+0xdd/0x3b0
    [   12.728307]  ip_rcv+0x2ac/0x360
    [   12.728839]  __netif_receive_skb_core+0x6fb/0xa90
    [   12.729580]  ? udp4_gro_receive+0x1a7/0x2c0
    [   12.730274]  __netif_receive_skb+0x1d/0x60
    [   12.730953]  ? __netif_receive_skb+0x1d/0x60
    [   12.731637]  netif_receive_skb_internal+0x37/0xd0
    [   12.732371]  napi_gro_receive+0xc7/0xf0
    [   12.732920]  receive_buf+0x3c3/0xd40
    [   12.733441]  virtnet_poll+0xb1/0x250
    [   12.733944]  net_rx_action+0x23e/0x370
    [   12.734476]  __do_softirq+0xc5/0x2f8
    [   12.734922]  irq_exit+0xfa/0x100
    [   12.735315]  do_IRQ+0x4f/0xd0
    [   12.735680]  common_interrupt+0xa2/0xa2
    [   12.736126]  </IRQ>
    [   12.736416] RIP: 0010:native_safe_halt+0x6/0x10
    [   12.736925] RSP: 0018:ffffa41cc0cafe90 EFLAGS: 00000246 ORIG_RAX: ffffffffffffff4d
    [   12.737756] RAX: 0000000000000000 RBX: ffff8c2a761edb80 RCX: 0000000000000000
    [   12.738504] RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000000
    [   12.739258] RBP: ffffa41cc0cafe90 R08: 0000014b5b9795e5 R09: ffffa41cc12c7e88
    [   12.740118] R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000002
    [   12.740964] R13: ffff8c2a761edb80 R14: 0000000000000000 R15: 0000000000000000
    [   12.741831]  default_idle+0x2a/0x100
    [   12.742323]  arch_cpu_idle+0xf/0x20
    [   12.742796]  default_idle_call+0x28/0x40
    [   12.743312]  do_idle+0x179/0x1f0
    [   12.743761]  cpu_startup_entry+0x1d/0x20
    [   12.744291]  start_secondary+0x112/0x120
    [   12.744816]  secondary_startup_64+0xa5/0xa5
    [   12.745367] Code: b9 f4 01 00 00 48 89 c2 48 c1 ea 02 48 3d d3 07 00
    00 48 0f 47 d1 49 8b 0c 24 48 39 d1 76 07 49 89 14 24 48 89 d1 31 d2 48
    89 df <48> f7 f1 89 c6 e8 81 6e ff ff 5b 41 5c 5d c3 66 90 66 2e 0f 1f
    [   12.747527] RIP: tipc_node_calculate_timer.isra.12+0x45/0x60 [tipc] RSP: ffff8c2a7fc838a0
    [   12.748555] ---[ end trace 1399ab83390650fd ]---
    [   12.749296] Kernel panic - not syncing: Fatal exception in interrupt
    [   12.750123] Kernel Offset: 0x13200000 from 0xffffffff82000000
    (relocation range: 0xffffffff80000000-0xffffffffbfffffff)
    [   12.751215] Rebooting in 60 seconds..
    
    Fixes: c9b64d492b1f ("tipc: add replicast peer discovery")
    Signed-off-by: Tommi Rantala <tommi.t.rantala@nokia.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 96b4a8ac9a55dcfd97b03a71776a3ec2b731a8bd
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Mon Dec 4 22:00:20 2017 +0100

    tipc: fix memory leak in tipc_accept_from_sock()
    
    
    [ Upstream commit a7d5f107b4978e08eeab599ee7449af34d034053 ]
    
    When the function tipc_accept_from_sock() fails to create an instance of
    struct tipc_subscriber it omits to free the already created instance of
    struct tipc_conn instance before it returns.
    
    We fix that with this commit.
    
    Reported-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 827fd89bc552a7ac916707225ca3de1f516d3b9c
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Mon Dec 4 22:00:20 2017 +0100

    tipc: fix memory leak in tipc_accept_from_sock()
    
    
    [ Upstream commit a7d5f107b4978e08eeab599ee7449af34d034053 ]
    
    When the function tipc_accept_from_sock() fails to create an instance of
    struct tipc_subscriber it omits to free the already created instance of
    struct tipc_conn instance before it returns.
    
    We fix that with this commit.
    
    Reported-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7a3c296ae08f9b51e399074d8ef6867d65fbd22b
Merge: c36c7a7c4034 043ee1debd0b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Dec 15 13:08:37 2017 -0800

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Clamp timeouts to INT_MAX in conntrack, from Jay Elliot.
    
     2) Fix broken UAPI for BPF_PROG_TYPE_PERF_EVENT, from Hendrik
        Brueckner.
    
     3) Fix locking in ieee80211_sta_tear_down_BA_sessions, from Johannes
        Berg.
    
     4) Add missing barriers to ptr_ring, from Michael S. Tsirkin.
    
     5) Don't advertise gigabit in sh_eth when not available, from Thomas
        Petazzoni.
    
     6) Check network namespace when delivering to netlink taps, from Kevin
        Cernekee.
    
     7) Kill a race in raw_sendmsg(), from Mohamed Ghannam.
    
     8) Use correct address in TCP md5 lookups when replying to an incoming
        segment, from Christoph Paasch.
    
     9) Add schedule points to BPF map alloc/free, from Eric Dumazet.
    
    10) Don't allow silly mtu values to be used in ipv4/ipv6 multicast, also
        from Eric Dumazet.
    
    11) Fix SKB leak in tipc, from Jon Maloy.
    
    12) Disable MAC learning on OVS ports of mlxsw, from Yuval Mintz.
    
    13) SKB leak fix in skB_complete_tx_timestamp(), from Willem de Bruijn.
    
    14) Add some new qmi_wwan device IDs, from Daniele Palmas.
    
    15) Fix static key imbalance in ingress qdisc, from Jiri Pirko.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (76 commits)
      net: qcom/emac: Reduce timeout for mdio read/write
      net: sched: fix static key imbalance in case of ingress/clsact_init error
      net: sched: fix clsact init error path
      ip_gre: fix wrong return value of erspan_rcv
      net: usb: qmi_wwan: add Telit ME910 PID 0x1101 support
      pkt_sched: Remove TC_RED_OFFLOADED from uapi
      net: sched: Move to new offload indication in RED
      net: sched: Add TCA_HW_OFFLOAD
      net: aquantia: Increment driver version
      net: aquantia: Fix typo in ethtool statistics names
      net: aquantia: Update hw counters on hw init
      net: aquantia: Improve link state and statistics check interval callback
      net: aquantia: Fill in multicast counter in ndev stats from hardware
      net: aquantia: Fill ndev stat couters from hardware
      net: aquantia: Extend stat counters to 64bit values
      net: aquantia: Fix hardware DMA stream overload on large MRRS
      net: aquantia: Fix actual speed capabilities reporting
      sock: free skb in skb_complete_tx_timestamp on error
      s390/qeth: update takeover IPs after configuration change
      s390/qeth: lock IP table while applying takeover changes
      ...

commit c545a945d0d9ea2ea2c7d23d43cf0d86e32cd7cf
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Mon Dec 11 19:11:55 2017 +0100

    tipc: eliminate potential memory leak
    
    In the function tipc_sk_mcast_rcv() we call refcount_dec(&skb->users)
    on received sk_buffers. Since the reference counter might hit zero at
    this point, we have a potential memory leak.
    
    We fix this by replacing refcount_dec() with kfree_skb().
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit aad54ba21dd8742810f195527e62f99ee0a1cee1
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Jan 24 13:00:48 2017 +0100

    tipc: fix cleanup at module unload
    
    
    [ Upstream commit 35e22e49a5d6a741ebe7f2dd280b2052c3003ef7 ]
    
    In tipc_server_stop(), we iterate over the connections with limiting
    factor as server's idr_in_use. We ignore the fact that this variable
    is decremented in tipc_close_conn(), leading to premature exit.
    
    In this commit, we iterate until the we have no connections left.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Tested-by: John Thompson <thompa.atl@gmail.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6313adb8de021b841184115ca0e232cb0d533634
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Jan 24 13:00:46 2017 +0100

    tipc: fix nametbl_lock soft lockup at module exit
    
    
    [ Upstream commit 9dc3abdd1f7ea524e8552e0a3ef01219892ed1f4 ]
    
    Commit 333f796235a527 ("tipc: fix a race condition leading to
    subscriber refcnt bug") reveals a soft lockup while acquiring
    nametbl_lock.
    
    Before commit 333f796235a527, we call tipc_conn_shutdown() from
    tipc_close_conn() in the context of tipc_topsrv_stop(). In that
    context, we are allowed to grab the nametbl_lock.
    
    Commit 333f796235a527, moved tipc_conn_release (renamed from
    tipc_conn_shutdown) to the connection refcount cleanup. This allows
    either tipc_nametbl_withdraw() or tipc_topsrv_stop() to the cleanup.
    
    Since tipc_exit_net() first calls tipc_topsrv_stop() and then
    tipc_nametble_withdraw() increases the chances for the later to
    perform the connection cleanup.
    
    The soft lockup occurs in the call chain of tipc_nametbl_withdraw(),
    when it performs the tipc_conn_kref_release() as it tries to grab
    nametbl_lock again while holding it already.
    tipc_nametbl_withdraw() grabs nametbl_lock
      tipc_nametbl_remove_publ()
        tipc_subscrp_report_overlap()
          tipc_subscrp_send_event()
            tipc_conn_sendmsg()
              << if (con->flags != CF_CONNECTED) we do conn_put(),
                 triggering the cleanup as refcount=0. >>
              tipc_conn_kref_release
                tipc_sock_release
                  tipc_conn_release
                    tipc_subscrb_delete
                      tipc_subscrp_delete
                        tipc_nametbl_unsubscribe << Soft Lockup >>
    
    The previous changes in this series fixes the race conditions fixed
    by commit 333f796235a527. Hence we can now revert the commit.
    
    Fixes: 333f796235a52727 ("tipc: fix a race condition leading to subscriber refcnt bug")
    Reported-and-Tested-by: John Thompson <thompa.atl@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ca083606101930bf1bc1f539fec73f3dff869895
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Jan 24 13:00:48 2017 +0100

    tipc: fix cleanup at module unload
    
    
    [ Upstream commit 35e22e49a5d6a741ebe7f2dd280b2052c3003ef7 ]
    
    In tipc_server_stop(), we iterate over the connections with limiting
    factor as server's idr_in_use. We ignore the fact that this variable
    is decremented in tipc_close_conn(), leading to premature exit.
    
    In this commit, we iterate until the we have no connections left.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Tested-by: John Thompson <thompa.atl@gmail.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 42c53dc2ca8ca6c9d7f8f2092bfdbed0e129806a
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Jan 24 13:00:48 2017 +0100

    tipc: fix cleanup at module unload
    
    
    [ Upstream commit 35e22e49a5d6a741ebe7f2dd280b2052c3003ef7 ]
    
    In tipc_server_stop(), we iterate over the connections with limiting
    factor as server's idr_in_use. We ignore the fact that this variable
    is decremented in tipc_close_conn(), leading to premature exit.
    
    In this commit, we iterate until the we have no connections left.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Tested-by: John Thompson <thompa.atl@gmail.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a7d5f107b4978e08eeab599ee7449af34d034053
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Mon Dec 4 22:00:20 2017 +0100

    tipc: fix memory leak in tipc_accept_from_sock()
    
    When the function tipc_accept_from_sock() fails to create an instance of
    struct tipc_subscriber it omits to free the already created instance of
    struct tipc_conn instance before it returns.
    
    We fix that with this commit.
    
    Reported-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 672ecbe1c977616aa720c9397589665b33e72610
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Mon Dec 4 10:31:43 2017 -0800

    tipc: fix a null pointer deref on error path
    
    In tipc_topsrv_kern_subscr() when s->tipc_conn_new() fails
    we call tipc_close_conn() to clean up, but in this case
    calling conn_put() is just enough.
    
    This fixes the folllowing crash:
    
     kasan: GPF could be caused by NULL-ptr deref or user memory access
     general protection fault: 0000 [#1] SMP KASAN
     Dumping ftrace buffer:
        (ftrace buffer empty)
     Modules linked in:
     CPU: 0 PID: 3085 Comm: syzkaller064164 Not tainted 4.15.0-rc1+ #137
     Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
     task: 00000000c24413a5 task.stack: 000000005e8160b5
     RIP: 0010:__lock_acquire+0xd55/0x47f0 kernel/locking/lockdep.c:3378
     RSP: 0018:ffff8801cb5474a8 EFLAGS: 00010002
     RAX: dffffc0000000000 RBX: 0000000000000000 RCX: 0000000000000000
     RDX: 0000000000000004 RSI: 0000000000000000 RDI: ffffffff85ecb400
     RBP: ffff8801cb547830 R08: 0000000000000001 R09: 0000000000000000
     R10: 0000000000000000 R11: ffffffff87489d60 R12: ffff8801cd2980c0
     R13: 0000000000000000 R14: 0000000000000001 R15: 0000000000000020
     FS:  00000000014ee880(0000) GS:ffff8801db400000(0000) knlGS:0000000000000000
     CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
     CR2: 00007ffee2426e40 CR3: 00000001cb85a000 CR4: 00000000001406f0
     DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
     DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
     Call Trace:
      lock_acquire+0x1d5/0x580 kernel/locking/lockdep.c:4004
      __raw_spin_lock_bh include/linux/spinlock_api_smp.h:135 [inline]
      _raw_spin_lock_bh+0x31/0x40 kernel/locking/spinlock.c:175
      spin_lock_bh include/linux/spinlock.h:320 [inline]
      tipc_subscrb_subscrp_delete+0x8f/0x470 net/tipc/subscr.c:201
      tipc_subscrb_delete net/tipc/subscr.c:238 [inline]
      tipc_subscrb_release_cb+0x17/0x30 net/tipc/subscr.c:316
      tipc_close_conn+0x171/0x270 net/tipc/server.c:204
      tipc_topsrv_kern_subscr+0x724/0x810 net/tipc/server.c:514
      tipc_group_create+0x702/0x9c0 net/tipc/group.c:184
      tipc_sk_join net/tipc/socket.c:2747 [inline]
      tipc_setsockopt+0x249/0xc10 net/tipc/socket.c:2861
      SYSC_setsockopt net/socket.c:1851 [inline]
      SyS_setsockopt+0x189/0x360 net/socket.c:1830
      entry_SYSCALL_64_fastpath+0x1f/0x96
    
    Fixes: 14c04493cb77 ("tipc: add ability to order and receive topology events in driver")
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit bc4802736d8b17eddde52e00838c348770f67c19
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Wed Sep 20 22:08:04 2017 -0400

    tipc: switch to sock_recvmsg()
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit 4c94cc2d3d57a2e843ab10887f67faa82c2337f9
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Nov 30 16:47:25 2017 +0100

    tipc: fall back to smaller MTU if allocation of local send skb fails
    
    When sending node local messages the code is using an 'mtu' of 66060
    bytes to avoid unnecessary fragmentation. During situations of low
    memory tipc_msg_build() may sometimes fail to allocate such large
    buffers, resulting in unnecessary send failures. This can easily be
    remedied by falling back to a smaller MTU, and then reassemble the
    buffer chain as if the message were arriving from a remote node.
    
    At the same time, we change the initial MTU setting of the broadcast
    link to a lower value, so that large messages always are fragmented
    into smaller buffers even when we run in single node mode. Apart from
    obtaining the same advantage as for the 'fallback' solution above, this
    turns out to give a significant performance improvement. This can
    probably be explained with the __pskb_copy() operation performed on the
    buffer for each recipient during reception. We found the optimal value
    for this, considering the most relevant skb pool, to be 3744 bytes.
    
    Acked-by: Ying Xue <ying.xue@ericsson.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c7799c067c2ae33e348508c8afec354f3257ff25
Author: Tommi Rantala <tommi.t.rantala@nokia.com>
Date:   Wed Nov 29 12:48:42 2017 +0200

    tipc: call tipc_rcv() only if bearer is up in tipc_udp_recv()
    
    Remove the second tipc_rcv() call in tipc_udp_recv(). We have just
    checked that the bearer is not up, and calling tipc_rcv() with a bearer
    that is not up leads to a TIPC div-by-zero crash in
    tipc_node_calculate_timer(). The crash is rare in practice, but can
    happen like this:
    
      We're enabling a bearer, but it's not yet up and fully initialized.
      At the same time we receive a discovery packet, and in tipc_udp_recv()
      we end up calling tipc_rcv() with the not-yet-initialized bearer,
      causing later the div-by-zero crash in tipc_node_calculate_timer().
    
    Jon Maloy explains the impact of removing the second tipc_rcv() call:
      "link setup in the worst case will be delayed until the next arriving
       discovery messages, 1 sec later, and this is an acceptable delay."
    
    As the tipc_rcv() call is removed, just leave the function via the
    rcu_out label, so that we will kfree_skb().
    
    [   12.590450] Own node address <1.1.1>, network identity 1
    [   12.668088] divide error: 0000 [#1] SMP
    [   12.676952] CPU: 2 PID: 0 Comm: swapper/2 Not tainted 4.14.2-dirty #1
    [   12.679225] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-2.fc27 04/01/2014
    [   12.682095] task: ffff8c2a761edb80 task.stack: ffffa41cc0cac000
    [   12.684087] RIP: 0010:tipc_node_calculate_timer.isra.12+0x45/0x60 [tipc]
    [   12.686486] RSP: 0018:ffff8c2a7fc838a0 EFLAGS: 00010246
    [   12.688451] RAX: 0000000000000000 RBX: ffff8c2a5b382600 RCX: 0000000000000000
    [   12.691197] RDX: 0000000000000000 RSI: ffff8c2a5b382600 RDI: ffff8c2a5b382600
    [   12.693945] RBP: ffff8c2a7fc838b0 R08: 0000000000000001 R09: 0000000000000001
    [   12.696632] R10: 0000000000000000 R11: 0000000000000000 R12: ffff8c2a5d8949d8
    [   12.699491] R13: ffffffff95ede400 R14: 0000000000000000 R15: ffff8c2a5d894800
    [   12.702338] FS:  0000000000000000(0000) GS:ffff8c2a7fc80000(0000) knlGS:0000000000000000
    [   12.705099] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [   12.706776] CR2: 0000000001bb9440 CR3: 00000000bd009001 CR4: 00000000003606e0
    [   12.708847] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [   12.711016] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
    [   12.712627] Call Trace:
    [   12.713390]  <IRQ>
    [   12.714011]  tipc_node_check_dest+0x2e8/0x350 [tipc]
    [   12.715286]  tipc_disc_rcv+0x14d/0x1d0 [tipc]
    [   12.716370]  tipc_rcv+0x8b0/0xd40 [tipc]
    [   12.717396]  ? minmax_running_min+0x2f/0x60
    [   12.718248]  ? dst_alloc+0x4c/0xa0
    [   12.718964]  ? tcp_ack+0xaf1/0x10b0
    [   12.719658]  ? tipc_udp_is_known_peer+0xa0/0xa0 [tipc]
    [   12.720634]  tipc_udp_recv+0x71/0x1d0 [tipc]
    [   12.721459]  ? dst_alloc+0x4c/0xa0
    [   12.722130]  udp_queue_rcv_skb+0x264/0x490
    [   12.722924]  __udp4_lib_rcv+0x21e/0x990
    [   12.723670]  ? ip_route_input_rcu+0x2dd/0xbf0
    [   12.724442]  ? tcp_v4_rcv+0x958/0xa40
    [   12.725039]  udp_rcv+0x1a/0x20
    [   12.725587]  ip_local_deliver_finish+0x97/0x1d0
    [   12.726323]  ip_local_deliver+0xaf/0xc0
    [   12.726959]  ? ip_route_input_noref+0x19/0x20
    [   12.727689]  ip_rcv_finish+0xdd/0x3b0
    [   12.728307]  ip_rcv+0x2ac/0x360
    [   12.728839]  __netif_receive_skb_core+0x6fb/0xa90
    [   12.729580]  ? udp4_gro_receive+0x1a7/0x2c0
    [   12.730274]  __netif_receive_skb+0x1d/0x60
    [   12.730953]  ? __netif_receive_skb+0x1d/0x60
    [   12.731637]  netif_receive_skb_internal+0x37/0xd0
    [   12.732371]  napi_gro_receive+0xc7/0xf0
    [   12.732920]  receive_buf+0x3c3/0xd40
    [   12.733441]  virtnet_poll+0xb1/0x250
    [   12.733944]  net_rx_action+0x23e/0x370
    [   12.734476]  __do_softirq+0xc5/0x2f8
    [   12.734922]  irq_exit+0xfa/0x100
    [   12.735315]  do_IRQ+0x4f/0xd0
    [   12.735680]  common_interrupt+0xa2/0xa2
    [   12.736126]  </IRQ>
    [   12.736416] RIP: 0010:native_safe_halt+0x6/0x10
    [   12.736925] RSP: 0018:ffffa41cc0cafe90 EFLAGS: 00000246 ORIG_RAX: ffffffffffffff4d
    [   12.737756] RAX: 0000000000000000 RBX: ffff8c2a761edb80 RCX: 0000000000000000
    [   12.738504] RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000000
    [   12.739258] RBP: ffffa41cc0cafe90 R08: 0000014b5b9795e5 R09: ffffa41cc12c7e88
    [   12.740118] R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000002
    [   12.740964] R13: ffff8c2a761edb80 R14: 0000000000000000 R15: 0000000000000000
    [   12.741831]  default_idle+0x2a/0x100
    [   12.742323]  arch_cpu_idle+0xf/0x20
    [   12.742796]  default_idle_call+0x28/0x40
    [   12.743312]  do_idle+0x179/0x1f0
    [   12.743761]  cpu_startup_entry+0x1d/0x20
    [   12.744291]  start_secondary+0x112/0x120
    [   12.744816]  secondary_startup_64+0xa5/0xa5
    [   12.745367] Code: b9 f4 01 00 00 48 89 c2 48 c1 ea 02 48 3d d3 07 00
    00 48 0f 47 d1 49 8b 0c 24 48 39 d1 76 07 49 89 14 24 48 89 d1 31 d2 48
    89 df <48> f7 f1 89 c6 e8 81 6e ff ff 5b 41 5c 5d c3 66 90 66 2e 0f 1f
    [   12.747527] RIP: tipc_node_calculate_timer.isra.12+0x45/0x60 [tipc] RSP: ffff8c2a7fc838a0
    [   12.748555] ---[ end trace 1399ab83390650fd ]---
    [   12.749296] Kernel panic - not syncing: Fatal exception in interrupt
    [   12.750123] Kernel Offset: 0x13200000 from 0xffffffff82000000
    (relocation range: 0xffffffff80000000-0xffffffffbfffffff)
    [   12.751215] Rebooting in 60 seconds..
    
    Fixes: c9b64d492b1f ("tipc: add replicast peer discovery")
    Signed-off-by: Tommi Rantala <tommi.t.rantala@nokia.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2e724dca7749223204bbae21745c0e3fc932700a
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Mon Nov 27 20:13:39 2017 +0100

    tipc: eliminate access after delete in group_filter_msg()
    
    KASAN revealed another access after delete in group.c. This time
    it found that we read the header of a received message after the
    buffer has been released.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0c86a6bd85ff0629cd2c5141027fc1c8bb6cde9c
Merge: b620fd2df20d a13e8d418f3c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Nov 21 05:56:12 2017 -1000

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Fix a reference to a module parameter which was lost during the
        GREv6 receive path rewrite, from Alexey Kodanev.
    
     2) Fix deref before NULL check in ipheth, from Gustavo A. R. Silva.
    
     3) RCU read lock imbalance in tun_build_skb(), from Xin Long.
    
     4) Some stragglers from the mac80211 folks:
    
          a) Timer conversions from Kees Cook
    
          b) Fix some sequencing issue when cfg80211 is built statically,
             from Johannes Berg
    
          c) Memory leak in mac80211_hwsim, from Ben Hutchings.
    
     5) Add new qmi_wwan device ID, from Sebastian Sjoholm.
    
     6) Fix use after free in tipc, from Jon Maloy.
    
     7) Missing kdoc in nfp driver, from Jakub Kicinski.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net:
      nfp: flower: add missing kdoc
      tipc: fix access of released memory
      net: qmi_wwan: add Quectel BG96 2c7c:0296
      mlxsw: spectrum: Do not try to create non-existing ports during unsplit
      mac80211: properly free requested-but-not-started TX agg sessions
      mac80211_hwsim: Fix memory leak in hwsim_new_radio_nl()
      cfg80211: initialize regulatory keys/database later
      mac80211: aggregation: Convert timers to use timer_setup()
      nl80211: don't expose wdev->ssid for most interfaces
      mac80211: Convert timers to use timer_setup()
      net: vxge: Fix some indentation issues
      net: ena: fix race condition between device reset and link up setup
      r8169: use same RTL8111EVL green settings as in vendor driver
      r8169: fix RTL8111EVL EEE and green settings
      tun: fix rcu_read_lock imbalance in tun_build_skb
      tcp: when scheduling TLP, time of RTO should account for current ACK
      usbnet: ipheth: fix potential null pointer dereference in ipheth_carrier_set
      gre6: use log_ecn_error module parameter in ip6_tnl_rcv()

commit e0e853ac036f76fcad3995554b8b6cef555b010f
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Mon Nov 20 21:43:03 2017 +0100

    tipc: fix access of released memory
    
    When the function tipc_group_filter_msg() finds that a member event
    indicates that the member is leaving the group, it first deletes the
    member instance, and then purges the message queue being handled
    by the call. But the message queue is an aggregated field in the
    just deleted item, leading the purge call to access freed memory.
    
    We fix this by swapping the order of the two actions.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d27383faf14469c5ec600a3d92aa4f1d81282472
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Mon Feb 1 08:19:56 2016 +0100

    tipc: fix link attribute propagation bug
    
    commit d01332f1acacc0cb43a61f4244dd2b846d4cd585 upstream.
    
    Changing certain link attributes (link tolerance and link priority)
    from the TIPC management tool is supposed to automatically take
    effect at both endpoints of the affected link.
    
    Currently the media address is not instantiated for the link and is
    used uninstantiated when crafting protocol messages designated for the
    peer endpoint. This means that changing a link property currently
    results in the property being changed on the local machine but the
    protocol message designated for the peer gets lost. Resulting in
    property discrepancy between the endpoints.
    
    In this patch we resolve this by using the media address from the
    link entry and using the bearer transmit function to send it. Hence,
    we can now eliminate the redundant function tipc_link_prot_xmit() and
    the redundant field tipc_link::media_addr.
    
    Fixes: 2af5ae372a4b (tipc: clean up unused code and structures)
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Reported-by: Jason Hu <huzhijiang@gmail.com>
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [backported to 4.4 by Tommi Rantala]
    Signed-off-by: Tommi Rantala <tommi.t.rantala@nokia.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d618d09a68e4eed7a435beb2e355250f6f40664a
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Wed Nov 15 21:23:56 2017 +0100

    tipc: enforce valid ratio between skb truesize and contents
    
    The socket level flow control is based on the assumption that incoming
    buffers meet the condition (skb->truesize / roundup(skb->len) <= 4),
    where the latter value is rounded off upwards to the nearest 1k number.
    This does empirically hold true for the device drivers we know, but we
    cannot trust that it will always be so, e.g., in a system with jumbo
    frames and very small packets.
    
    We now introduce a check for this condition at packet arrival, and if
    we find it to be false, we copy the packet to a new, smaller buffer,
    where the condition will be true. We expect this to affect only a small
    fraction of all incoming packets, if at all.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8d6e79d3ce13e34957de87f7584cbf1bcde74c57
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Wed Nov 8 09:59:26 2017 +0100

    tipc: improve link resiliency when rps is activated
    
    Currently, the TIPC RPS dissector is based only on the incoming packets'
    source node address, hence steering all traffic from a node to the same
    core. We have seen that this makes the links vulnerable to starvation
    and unnecessary resets when we turn down the link tolerance to very low
    values.
    
    To reduce the risk of this happening, we exempt probe and probe replies
    packets from the convergence to one core per source node. Instead, we do
    the opposite, - we try to diverge those packets across as many cores as
    possible, by randomizing the flow selector key.
    
    To make such packets identifiable to the dissector, we add a new
    'is_keepalive' bit to word 0 of the LINK_PROTOCOL header. This bit is
    set both for PROBE and PROBE_REPLY messages, and only for those.
    
    It should be noted that these packets are not part of any flow anyway,
    and only constitute a minuscule fraction of all packets sent across a
    link. Hence, there is no risk that this will affect overall performance.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 698985d877503316bd91c9beca6c6d80d3a717ef
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Fri Sep 29 10:02:54 2017 +0200

    tipc: use only positive error codes in messages
    
    [ Upstream commit aad06212d36cf34859428a0a279e5c14ee5c9e26 ]
    
    In commit e3a77561e7d32 ("tipc: split up function tipc_msg_eval()"),
    we have updated the function tipc_msg_lookup_dest() to set the error
    codes to negative values at destination lookup failures. Thus when
    the function sets the error code to -TIPC_ERR_NO_NAME, its inserted
    into the 4 bit error field of the message header as 0xf instead of
    TIPC_ERR_NO_NAME (1). The value 0xf is an unknown error code.
    
    In this commit, we set only positive error code.
    
    Fixes: e3a77561e7d32 ("tipc: split up function tipc_msg_eval()")
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>

commit fa36882682db0692ecbea20f859180f978923d72
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Nov 2 15:44:15 2017 +0100

    tipc: eliminate unnecessary probing
    
    The neighbor monitor employs a threshold, default set to 32 peer nodes,
    where it activates the "Overlapping Neighbor Monitoring" algorithm.
    Below that threshold, monitoring is full-mesh, and no "domain records"
    are passed between the nodes.
    
    Because of this, a node never received a peer's ack that it has received
    the most recent update of the own domain. Hence, the field 'acked_gen'
    in struct tipc_monitor_state remains permamently at zero, whereas the
    own domain generation is incremented for each added or removed peer.
    
    This has the effect that the function tipc_mon_get_state() always sets
    the field 'probing' in struct tipc_monitor_state true, again leading the
    tipc_link_timeout() of the link in question to always send out a probe,
    even when link->silent_intv_count is zero.
    
    This is functionally harmless, but leads to some unncessary probing,
    which can easily be eliminated by setting the 'probing' field of the
    said struct correctly in such cases.
    
    At the same time, we explictly invalidate the sent domain records when
    the algorithm is not activated. This will eliminate any risk that an
    invalid domain record might be inadverently accepted by the peer.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 31b102bb501bea50ebc10f4aecf9d788305b8b87
Author: Kees Cook <keescook@chromium.org>
Date:   Mon Oct 30 14:06:45 2017 -0700

    net: tipc: Convert timers to use timer_setup()
    
    In preparation for unconditionally passing the struct timer_list pointer to
    all timer callbacks, switch to using the new timer_setup() and from_timer()
    to pass the timer pointer explicitly.
    
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: netdev@vger.kernel.org
    Cc: tipc-discussion@lists.sourceforge.net
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e233df01576bba9f5bafacccd571353b72152bd5
Author: Cong Wang <xiyou.wangcong@gmail.com>
Date:   Tue Oct 24 15:44:49 2017 -0700

    tipc: fix a dangling pointer
    
    tsk->group is set to grp earlier, but we forget to unset it
    after grp is freed.
    
    Fixes: 75da2163dbb6 ("tipc: introduce communication groups")
    Reported-by: syzkaller bot
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f65163fed0e7dc3c79be4f96a8fe97fc89328b93
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Wed Oct 25 16:19:52 2017 +0200

    tipc: eliminate KASAN warning
    
    The following warning was reported by syzbot on Oct 24. 2017:
    KASAN: slab-out-of-bounds Read in tipc_nametbl_lookup_dst_nodes
    
    This is a harmless bug, but we still want to get rid of the warning,
    so we swap the two conditions in question.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0d5fcebf3c370eb27f9a0e8db454625e73cd1cb4
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Oct 20 11:21:32 2017 +0200

    tipc: refactor tipc_sk_timeout() function
    
    The function tipc_sk_timeout() is more complex than necessary, and
    even seems to contain an undetected bug. At one of the occurences
    where we renew the timer we just order it with (HZ / 20), instead
    of (jiffies + HZ / 20);
    
    In this commit we clean up the function.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 01e3e6315171641d040cdaf1818b7ec10fc8dd72
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Fri Sep 29 10:02:54 2017 +0200

    tipc: use only positive error codes in messages
    
    
    [ Upstream commit aad06212d36cf34859428a0a279e5c14ee5c9e26 ]
    
    In commit e3a77561e7d32 ("tipc: split up function tipc_msg_eval()"),
    we have updated the function tipc_msg_lookup_dest() to set the error
    codes to negative values at destination lookup failures. Thus when
    the function sets the error code to -TIPC_ERR_NO_NAME, its inserted
    into the 4 bit error field of the message header as 0xf instead of
    TIPC_ERR_NO_NAME (1). The value 0xf is an unknown error code.
    
    In this commit, we set only positive error code.
    
    Fixes: e3a77561e7d32 ("tipc: split up function tipc_msg_eval()")
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cb4dc41eaad0cb336bb5ddd379ae0d2cc89cb62b
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Thu Oct 19 16:42:04 2017 +0200

    tipc: fix broken tipc_poll() function
    
    In commit ae236fb208a6 ("tipc: receive group membership events via
    member socket") we broke the tipc_poll() function by checking the
    state of the receive queue before the call to poll_sock_wait(), while
    relying that state afterwards, when it might have changed.
    
    We restore this in this commit.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c75e427d9349ec3e0059752cc784e1c301474c2d
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Oct 18 10:48:25 2017 +0300

    tipc: checking for NULL instead of IS_ERR()
    
    The tipc_alloc_conn() function never returns NULL, it returns error
    pointers, so I have fixed the check.
    
    Fixes: 14c04493cb77 ("tipc: add ability to order and receive topology events in driver")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 36c0a9dfc6613242ba1de012e2d15145cdaae805
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Mon Oct 16 16:04:51 2017 +0200

    tipc: fix rebasing error
    
    In commit 2f487712b893 ("tipc: guarantee that group broadcast doesn't
    bypass group unicast") there was introduced a last-minute rebasing
    error that broke non-group communication.
    
    We fix this here.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a00344bd1bbea2ba40719ae0eb3b6da7fae08cf2
Merge: 2d0d21c12dfa 04d7b574b245
Author: David S. Miller <davem@davemloft.net>
Date:   Fri Oct 13 08:46:01 2017 -0700

    Merge branch 'tipc-comm-groups'
    
    Jon Maloy says:
    
    ====================
    tipc: Introduce Communcation Group feature
    
    With this commit series we introduce a 'Group Communication' feature in
    order to resolve the datagram and multicast flow control problem. This
    new feature makes it possible for a user to instantiate multiple private
    virtual brokerless message buses by just creating and joining member
    sockets.
    
    The main features are as follows:
    ---------------------------------
    - Sockets can join a group via a new setsockopt() call TIPC_GROUP_JOIN.
      If it is the first socket of the group this implies creation of the
      group. This call takes four parameters: 'type' serves as group
      identifier, 'instance' serves as member identifier, and 'scope'
      indicates the visibility of the group (node/cluster/zone). Finally,
      'flags' indicates different options for the socket joining the group.
      For the time being, there are only two such flags: 1) 'LOOPBACK'
      indicates if the creator of the socket wants to receive a copy of
      broadcast or multicast messages it sends to the group, 2) EVENTS
      indicates if it wants to receive membership (JOINED/LEFT) events for
      the other members of the group.
    
    - Groups are closed, i.e., sockets which have not joined a group will
      not be able to send messages to or receive messages from members of
      the group, and vice versa. A socket can only be member of one group
      at a time.
    
    - There are four transmission modes.
      1: Unicast. The sender transmits a message using the port identity
         (node:port tuple) of the receiving socket.
      2: Anycast. The sender transmits a message using a port name (type:
         instance:scope) of one of the receiving sockets. If more than
         one member socket matches the given address a destination is
         selected according to a round-robin algorithm, but also considering
         the destination load (advertised window size) as an additional
         criteria.
      3: Multicast. The sender transmits a message using a port name
         (type:instance:scope) of one or more of the receiving sockets.
         All sockets in the group matching the given address will receive
         a copy of the message.
      4: Broadcast. The sender transmits a message using the primtive
         send(). All members of the group, irrespective of their member
         identity (instance) number receive a copy of the message.
    
    - TIPC broadcast is used for carrying messages in mode 3 or 4 when
      this is deemed more efficient, i.e., depending on number of actual
      destinations.
    
    - All transmission modes are flow controlled, so that messages never
      are dropped or rejected, just like we are used to from connection
      oriented communication. A special algorithm guarantees that this is
      true even for multipoint-to-point communication, i.e., at occasions
      where many source sockets may decide to send simultaneously towards
      the same  destination socket.
    
    - Sequence order is always guaranteed, even between the different
      transmission modes.
    
    - Member join/leave events are received in all other member sockets
      in guaranteed order. I.e., a 'JOINED' (an empty message with the OOB
      bit set) will always be received before the first data message from
      a new member, and a 'LEAVE' (like 'JOINED', but with EOR bit set) will
      always arrive after the last data message from a leaving member.
    
    -----
    v2: Reordered variable declarations in descending length order, as per
        feedback from David Miller. This was done as far as permitted by the
        the initialization order.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 04d7b574b245c66001a33cb9da2c0311063af73f
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Oct 13 11:04:34 2017 +0200

    tipc: add multipoint-to-point flow control
    
    We already have point-to-multipoint flow control within a group. But
    we even need the opposite; -a scheme which can handle that potentially
    hundreds of sources may try to send messages to the same destination
    simultaneously without causing buffer overflow at the recipient. This
    commit adds such a mechanism.
    
    The algorithm works as follows:
    
    - When a member detects a new, joining member, it initially set its
      state to JOINED and advertises a minimum window to the new member.
      This window is chosen so that the new member can send exactly one
      maximum sized message, or several smaller ones, to the recipient
      before it must stop and wait for an additional advertisement. This
      minimum window ADV_IDLE is set to 65 1kB blocks.
    
    - When a member receives the first data message from a JOINED member,
      it changes the state of the latter to ACTIVE, and advertises a larger
      window ADV_ACTIVE = 12 x ADV_IDLE blocks to the sender, so it can
      continue sending with minimal disturbances to the data flow.
    
    - The active members are kept in a dedicated linked list. Each time a
      message is received from an active member, it will be moved to the
      tail of that list. This way, we keep a record of which members have
      been most (tail) and least (head) recently active.
    
    - There is a maximum number (16) of permitted simultaneous active
      senders per receiver. When this limit is reached, the receiver will
      not advertise anything immediately to a new sender, but instead put
      it in a PENDING state, and add it to a corresponding queue. At the
      same time, it will pick the least recently active member, send it an
      advertisement RECLAIM message, and set this member to state
      RECLAIMING.
    
    - The reclaimee member has to respond with a REMIT message, meaning that
      it goes back to a send window of ADV_IDLE, and returns its unused
      advertised blocks beyond that value to the reclaiming member.
    
    - When the reclaiming member receives the REMIT message, it unlinks
      the reclaimee from its active list, resets its state to JOINED, and
      notes that it is now back at ADV_IDLE advertised blocks to that
      member. If there are still unread data messages sent out by
      reclaimee before the REMIT, the member goes into an intermediate
      state REMITTED, where it stays until the said messages have been
      consumed.
    
    - The returned advertised blocks can now be re-advertised to the
      pending member, which is now set to state ACTIVE and added to
      the active member list.
    
    - To be proactive, i.e., to minimize the risk that any member will
      end up in the pending queue, we start reclaiming resources already
      when the number of active members exceeds 3/4 of the permitted
      maximum.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a3bada70660fb020430135ec8a774ae1ea6bc9a9
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Oct 13 11:04:33 2017 +0200

    tipc: guarantee delivery of last broadcast before DOWN event
    
    The following scenario is possible:
    - A user sends a broadcast message, and thereafter immediately leaves
      the group.
    - The LEAVE message, following a different path than the broadcast,
      arrives ahead of the broadcast, and the sending member is removed
      from the receiver's list.
    - The broadcast message arrives, but is dropped because the sender
      now is unknown to the receipient.
    
    We fix this by sequence numbering membership events, just like ordinary
    unicast messages. Currently, when a JOIN is sent to a peer, it contains
    a synchronization point, - the sequence number of the next sent
    broadcast, in order to give the receiver a start synchronization point.
    We now let even LEAVE messages contain such an "end synchronization"
    point, so that the recipient can delay the removal of the sending member
    until it knows that all messages have been received.
    
    The received synchronization points are added as sequence numbers to the
    generated membership events, making it possible to handle them almost
    the same way as regular unicasts in the receiving filter function. In
    particular, a DOWN event with a too high sequence number will be kept
    in the reordering queue until the missing broadcast(s) arrive and have
    been delivered.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 399574d41963285e72ba28dd46783c96316a81d1
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Oct 13 11:04:32 2017 +0200

    tipc: guarantee delivery of UP event before first broadcast
    
    The following scenario is possible:
    - A user joins a group, and immediately sends out a broadcast message
      to its members.
    - The broadcast message, following a different data path than the
      initial JOIN message sent out during the joining procedure, arrives
      to a receiver before the latter..
    - The receiver drops the message, since it is not ready to accept any
      messages until the JOIN has arrived.
    
    We avoid this by treating group protocol JOIN messages like unicast
    messages.
    - We let them pass through the recipient's multicast input queue, just
      like ordinary unicasts.
    - We force the first following broadacst to be sent as replicated
      unicast and being acknowledged by the recipient before accepting
      any more broadcast transmissions.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2f487712b89376fce267223bbb0db93d393d4b09
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Oct 13 11:04:31 2017 +0200

    tipc: guarantee that group broadcast doesn't bypass group unicast
    
    We need a mechanism guaranteeing that group unicasts sent out from a
    socket are not bypassed by later sent broadcasts from the same socket.
    We do this as follows:
    
    - Each time a unicast is sent, we set a the broadcast method for the
      socket to "replicast" and "mandatory". This forces the first
      subsequent broadcast message to follow the same network and data path
      as the preceding unicast to a destination, hence preventing it from
      overtaking the latter.
    
    - In order to make the 'same data path' statement above true, we let
      group unicasts pass through the multicast link input queue, instead
      of as previously through the unicast link input queue.
    
    - In the first broadcast following a unicast, we set a new header flag,
      requiring all recipients to immediately acknowledge its reception.
    
    - During the period before all the expected acknowledges are received,
      the socket refuses to accept any more broadcast attempts, i.e., by
      blocking or returning EAGAIN. This period should typically not be
      longer than a few microseconds.
    
    - When all acknowledges have been received, the sending socket will
      open up for subsequent broadcasts, this time giving the link layer
      freedom to itself select the best transmission method.
    
    - The forced and/or abrupt transmission method changes described above
      may lead to broadcasts arriving out of order to the recipients. We
      remedy this by introducing code that checks and if necessary
      re-orders such messages at the receiving end.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b87a5ea31c935a7f7e11ca85df2ec7917921e96d
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Oct 13 11:04:30 2017 +0200

    tipc: guarantee group unicast doesn't bypass group broadcast
    
    Group unicast messages don't follow the same path as broadcast messages,
    and there is a high risk that unicasts sent from a socket might bypass
    previously sent broadcasts from the same socket.
    
    We fix this by letting all unicast messages carry the sequence number of
    the next sent broadcast from the same node, but without updating this
    number at the receiver. This way, a receiver can check and if necessary
    re-order such messages before they are added to the socket receive buffer.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5b8dddb63769587badc50725ec9857caaeba4de0
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Oct 13 11:04:29 2017 +0200

    tipc: introduce group multicast messaging
    
    The previously introduced message transport to all group members is
    based on the tipc multicast service, but is logically a broadcast
    service within the group, and that is what we call it.
    
    We now add functionality for sending messages to all group members
    having a certain identity. Correspondingly, we call this feature 'group
    multicast'. The service is using unicast when only one destination is
    found, otherwise it will use the bearer broadcast service to transfer
    the messages. In the latter case, the receiving members filter arriving
    messages by looking at the intended destination instance. If there is
    no match, the message will be dropped, while still being considered
    received and read as seen by the flow control mechanism.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ee106d7f942dabce1352e01c6fe9ca4a720c2331
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Oct 13 11:04:28 2017 +0200

    tipc: introduce group anycast messaging
    
    In this commit, we make it possible to send connectionless unicast
    messages to any member corresponding to the given member identity,
    when there is more than one such member. The sender must use a
    TIPC_ADDR_NAME address to achieve this effect.
    
    We also perform load balancing between the destinations, i.e., we
    primarily select one which has advertised sufficient send window
    to not cause a block/EAGAIN delay, if any. This mechanism is
    overlayed on the always present round-robin selection.
    
    Anycast messages are subject to the same start synchronization
    and flow control mechanism as group broadcast messages.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 27bd9ec027f396457d1a147043c92ff22fc4c71e
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Oct 13 11:04:27 2017 +0200

    tipc: introduce group unicast messaging
    
    We now make it possible to send connectionless unicast messages
    within a communication group. To send a message, the sender can use
    either a direct port address, aka port identity, or an indirect port
    name to be looked up.
    
    This type of messages are subject to the same start synchronization
    and flow control mechanism as group broadcast messages.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b7d42635517fde2b095deddd0fba37be2302a285
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Oct 13 11:04:26 2017 +0200

    tipc: introduce flow control for group broadcast messages
    
    We introduce an end-to-end flow control mechanism for group broadcast
    messages. This ensures that no messages are ever lost because of
    destination receive buffer overflow, with minimal impact on performance.
    For now, the algorithm is based on the assumption that there is only one
    active transmitter at any moment in time.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ae236fb208a6fbbd2e7a6913385e8fb78ac807f8
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Oct 13 11:04:25 2017 +0200

    tipc: receive group membership events via member socket
    
    Like with any other service, group members' availability can be
    subscribed for by connecting to be topology server. However, because
    the events arrive via a different socket than the member socket, there
    is a real risk that membership events my arrive out of synch with the
    actual JOIN/LEAVE action. I.e., it is possible to receive the first
    messages from a new member before the corresponding JOIN event arrives,
    just as it is possible to receive the last messages from a leaving
    member after the LEAVE event has already been received.
    
    Since each member socket is internally also subscribing for membership
    events, we now fix this problem by passing those events on to the user
    via the member socket. We leverage the already present member synch-
    ronization protocol to guarantee correct message/event order. An event
    is delivered to the user as an empty message where the two source
    addresses identify the new/lost member. Furthermore, we set the MSG_OOB
    bit in the message flags to mark it as an event. If the event is an
    indication about a member loss we also set the MSG_EOR bit, so it can
    be distinguished from a member addition event.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 31c82a2d9d51fccbb85cbd2be983eb115225301c
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Oct 13 11:04:24 2017 +0200

    tipc: add second source address to recvmsg()/recvfrom()
    
    With group communication, it becomes important for a message receiver to
    identify not only from which socket (identfied by a node:port tuple) the
    message was sent, but also the logical identity (type:instance) of the
    sending member.
    
    We fix this by adding a second instance of struct sockaddr_tipc to the
    source address area when a message is read. The extra address struct
    is filled in with data found in the received message header (type,) and
    in the local member representation struct (instance.)
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 75da2163dbb6af9f2dce1d80056d11d290dd19a5
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Oct 13 11:04:23 2017 +0200

    tipc: introduce communication groups
    
    As a preparation for introducing flow control for multicast and datagram
    messaging we need a more strictly defined framework than we have now. A
    socket must be able keep track of exactly how many and which other
    sockets it is allowed to communicate with at any moment, and keep the
    necessary state for those.
    
    We therefore introduce a new concept we have named Communication Group.
    Sockets can join a group via a new setsockopt() call TIPC_GROUP_JOIN.
    The call takes four parameters: 'type' serves as group identifier,
    'instance' serves as an logical member identifier, and 'scope' indicates
    the visibility of the group (node/cluster/zone). Finally, 'flags' makes
    it possible to set certain properties for the member. For now, there is
    only one flag, indicating if the creator of the socket wants to receive
    a copy of broadcast or multicast messages it is sending via the socket,
    and if wants to be eligible as destination for its own anycasts.
    
    A group is closed, i.e., sockets which have not joined a group will
    not be able to send messages to or receive messages from members of
    the group, and vice versa.
    
    Any member of a group can send multicast ('group broadcast') messages
    to all group members, optionally including itself, using the primitive
    send(). The messages are received via the recvmsg() primitive. A socket
    can only be member of one group at a time.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a80ae5306a7346d4e52f59462878beb8362f4bbd
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Oct 13 11:04:22 2017 +0200

    tipc: improve destination linked list
    
    We often see a need for a linked list of destination identities,
    sometimes containing a port number, sometimes a node identity, and
    sometimes both. The currently defined struct u32_list is not generic
    enough to cover all cases, so we extend it to contain two u32 integers
    and rename it to struct tipc_dest_list.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f70d37b796241f617107d5585ee96a7e1b660b63
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Oct 13 11:04:21 2017 +0200

    tipc: add new function for sending multiple small messages
    
    We see an increasing need to send multiple single-buffer messages
    of TIPC_SYSTEM_IMPORTANCE to different individual destination nodes.
    Instead of looping over the send queue and sending each buffer
    individually, as we do now, we add a new help function
    tipc_node_distr_xmit() to do this.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 64ac5f5977df5b276374fb2f051082129f5cdb22
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Oct 13 11:04:20 2017 +0200

    tipc: refactor function filter_rcv()
    
    In the following commits we will need to handle multiple incoming and
    rejected/returned buffers in the function socket.c::filter_rcv().
    As a preparation for this, we generalize the function by handling
    buffer queues instead of individual buffers. We also introduce a
    help function tipc_skb_reject(), and rename filter_rcv() to
    tipc_sk_filter_rcv() in line with other functions in socket.c.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 38077b8ef831daba55913f7e24732b062d0bdebb
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Oct 13 11:04:19 2017 +0200

    tipc: add ability to obtain node availability status from other files
    
    In the coming commits, functions at the socket level will need the
    ability to read the availability status of a given node. We therefore
    introduce a new function for this purpose, while renaming the existing
    static function currently having the wanted name.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 23998835be98a6842e5698fa1824f404c7de850d
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Oct 13 11:04:18 2017 +0200

    tipc: improve address sanity check in tipc_connect()
    
    The address given to tipc_connect() is not completely sanity checked,
    under the assumption that this will be done later in the function
    __tipc_sendmsg() when the address is used there.
    
    However, the latter functon will in the next commits serve as caller
    to several other send functions, so we want to move the corresponding
    sanity check there to the beginning of that function, before we possibly
    need to grab the address stored by tipc_connect(). We must therefore
    be able to trust that this address already has been thoroughly checked.
    
    We do this in this commit.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 14c04493cb77bc38404dbcb39d5ccbb667831ad7
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Oct 13 11:04:17 2017 +0200

    tipc: add ability to order and receive topology events in driver
    
    As preparation for introducing communication groups, we add the ability
    to issue topology subscriptions and receive topology events from kernel
    space. This will make it possible for group member sockets to keep track
    of other group members.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit cd6d6bd72cc19117c79a229a44094b007b0fd369
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Fri Sep 29 10:02:54 2017 +0200

    tipc: use only positive error codes in messages
    
    
    [ Upstream commit aad06212d36cf34859428a0a279e5c14ee5c9e26 ]
    
    In commit e3a77561e7d32 ("tipc: split up function tipc_msg_eval()"),
    we have updated the function tipc_msg_lookup_dest() to set the error
    codes to negative values at destination lookup failures. Thus when
    the function sets the error code to -TIPC_ERR_NO_NAME, its inserted
    into the 4 bit error field of the message header as 0xf instead of
    TIPC_ERR_NO_NAME (1). The value 0xf is an unknown error code.
    
    In this commit, we set only positive error code.
    
    Fixes: e3a77561e7d32 ("tipc: split up function tipc_msg_eval()")
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 58b1b8407a3121b7dc8b8612f7802647833b5069
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Fri Sep 29 10:02:54 2017 +0200

    tipc: use only positive error codes in messages
    
    
    [ Upstream commit aad06212d36cf34859428a0a279e5c14ee5c9e26 ]
    
    In commit e3a77561e7d32 ("tipc: split up function tipc_msg_eval()"),
    we have updated the function tipc_msg_lookup_dest() to set the error
    codes to negative values at destination lookup failures. Thus when
    the function sets the error code to -TIPC_ERR_NO_NAME, its inserted
    into the 4 bit error field of the message header as 0xf instead of
    TIPC_ERR_NO_NAME (1). The value 0xf is an unknown error code.
    
    In this commit, we set only positive error code.
    
    Fixes: e3a77561e7d32 ("tipc: split up function tipc_msg_eval()")
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff33952e4d235efa98ce8a43416c19ddc16fb4fa
Merge: 68ebe3cbe786 fdfbad325691
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Oct 9 16:25:00 2017 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Fix object leak on IPSEC offload failure, from Steffen Klassert.
    
     2) Fix range checks in ipset address range addition operations, from
        Jozsef Kadlecsik.
    
     3) Fix pernet ops unregistration order in ipset, from Florian Westphal.
    
     4) Add missing netlink attribute policy for nl80211 packet pattern
        attrs, from Peng Xu.
    
     5) Fix PPP device destruction race, from Guillaume Nault.
    
     6) Write marks get lost when BPF verifier processes R1=R2 register
        assignments, causing incorrect liveness information and less state
        pruning. Fix from Alexei Starovoitov.
    
     7) Fix blockhole routes so that they are marked dead and therefore not
        cached in sockets, otherwise IPSEC stops working. From Steffen
        Klassert.
    
     8) Fix broadcast handling of UDP socket early demux, from Paolo Abeni.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (37 commits)
      cdc_ether: flag the u-blox TOBY-L2 and SARA-U2 as wwan
      net: thunderx: mark expected switch fall-throughs in nicvf_main()
      udp: fix bcast packet reception
      netlink: do not set cb_running if dump's start() errs
      ipv4: Fix traffic triggered IPsec connections.
      ipv6: Fix traffic triggered IPsec connections.
      ixgbe: incorrect XDP ring accounting in ethtool tx_frame param
      net: ixgbe: Use new PCI_DEV_FLAGS_NO_RELAXED_ORDERING flag
      Revert commit 1a8b6d76dc5b ("net:add one common config...")
      ixgbe: fix masking of bits read from IXGBE_VXLANCTRL register
      ixgbe: Return error when getting PHY address if PHY access is not supported
      netfilter: xt_bpf: Fix XT_BPF_MODE_FD_PINNED mode of 'xt_bpf_info_v1'
      netfilter: SYNPROXY: skip non-tcp packet in {ipv4, ipv6}_synproxy_hook
      tipc: Unclone message at secondary destination lookup
      tipc: correct initialization of skb list
      gso: fix payload length when gso_size is zero
      mlxsw: spectrum_router: Avoid expensive lookup during route removal
      bpf: fix liveness marking
      doc: Fix typo "8023.ad" in bonding documentation
      ipv6: fix net.ipv6.conf.all.accept_dad behaviour for real
      ...

commit a9e2971b8cd3ef469de0112ba15778b5b98ad72e
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Sat Oct 7 15:07:20 2017 +0200

    tipc: Unclone message at secondary destination lookup
    
    When a bundling message is received, the function tipc_link_input()
    calls function tipc_msg_extract() to unbundle all inner messages of
    the bundling message before adding them to input queue.
    
    The function tipc_msg_extract() just clones all inner skb for all
    inner messagges from the bundling skb. This means that the skb
    headroom of an inner message overlaps with the data part of the
    preceding message in the bundle.
    
    If the message in question is a name addressed message, it may be
    subject to a secondary destination lookup, and eventually be sent out
    on one of the interfaces again. But, since what is perceived as headroom
    by the device driver in reality is the last bytes of the preceding
    message in the bundle, the latter will be overwritten by the MAC
    addresses of the L2 header. If the preceding message has not yet been
    consumed by the user, it will evenually be delivered with corrupted
    contents.
    
    This commit fixes this by uncloning all messages passing through the
    function tipc_msg_lookup_dest(), hence ensuring that the headroom
    is always valid when the message is passed on.
    
    Signed-off-by: Tung Nguyen <tung.q.nguyen@dektech.com.au>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3382605fd8db1ed1fb03f3f1529490133fe3ab08
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Sat Oct 7 14:32:49 2017 +0200

    tipc: correct initialization of skb list
    
    We change the initialization of the skb transmit buffer queues
    in the functions tipc_bcast_xmit() and tipc_rcast_xmit() to also
    initialize their spinlocks. This is needed because we may, during
    error conditions, need to call skb_queue_purge() on those queues
    further down the stack.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9a431ef9629fa6276aa8bd9ea87fb0728922bd6d
Merge: 42b76d0e6b1f e769fcec6bc4
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Oct 5 08:40:09 2017 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Check iwlwifi 9000 reorder buffer out-of-space condition properly,
        from Sara Sharon.
    
     2) Fix RCU splat in qualcomm rmnet driver, from Subash Abhinov
        Kasiviswanathan.
    
     3) Fix session and tunnel release races in l2tp, from Guillaume Nault
        and Sabrina Dubroca.
    
     4) Fix endian bug in sctp_diag_dump(), from Dan Carpenter.
    
     5) Several mlx5 driver fixes from the Mellanox folks (max flow counters
        cap check, invalid memory access in IPoIB support, etc.)
    
     6) tun_get_user() should bail if skb->len is zero, from Alexander
        Potapenko.
    
     7) Fix RCU lookups in inetpeer, from Eric Dumazet.
    
     8) Fix locking in packet_do_bund().
    
     9) Handle cb->start() error properly in netlink dump code, from Jason
        A. Donenfeld.
    
    10) Handle multicast properly in UDP socket early demux code. From Paolo
        Abeni.
    
    11) Several erspan bug fixes in ip_gre, from Xin Long.
    
    12) Fix use-after-free in socket filter code, in order to handle the
        fact that listener lock is no longer taken during the three-way TCP
        handshake. From Eric Dumazet.
    
    13) Fix infoleak in RTM_GETSTATS, from Nikolay Aleksandrov.
    
    14) Fix tail call generation in x86-64 BPF JIT, from Alexei Starovoitov.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (77 commits)
      net: 8021q: skip packets if the vlan is down
      bpf: fix bpf_tail_call() x64 JIT
      net: stmmac: dwmac-rk: Add RK3128 GMAC support
      rndis_host: support Novatel Verizon USB730L
      net: rtnetlink: fix info leak in RTM_GETSTATS call
      socket, bpf: fix possible use after free
      mlxsw: spectrum_router: Track RIF of IPIP next hops
      mlxsw: spectrum_router: Move VRF refcounting
      net: hns3: Fix an error handling path in 'hclge_rss_init_hw()'
      net: mvpp2: Fix clock resource by adding an optional bus clock
      r8152: add Linksys USB3GIGV1 id
      l2tp: fix l2tp_eth module loading
      ip_gre: erspan device should keep dst
      ip_gre: set tunnel hlen properly in erspan_tunnel_init
      ip_gre: check packet length and mtu correctly in erspan_xmit
      ip_gre: get key from session_id correctly in erspan_rcv
      tipc: use only positive error codes in messages
      ppp: fix __percpu annotation
      udp: perform source validation for mcast early demux
      IPv4: early demux can return an error code
      ...

commit 369e33e667211ccd9b50e7a188589303461de001
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Aug 16 09:41:54 2017 -0700

    tipc: fix use-after-free
    
    [ Upstream commit 5bfd37b4de5c98e86b12bd13be5aa46c7484a125 ]
    
    syszkaller reported use-after-free in tipc [1]
    
    When msg->rep skb is freed, set the pointer to NULL,
    so that caller does not free it again.
    
    [1]
    
    ==================================================================
    BUG: KASAN: use-after-free in skb_push+0xd4/0xe0 net/core/skbuff.c:1466
    Read of size 8 at addr ffff8801c6e71e90 by task syz-executor5/4115
    
    CPU: 1 PID: 4115 Comm: syz-executor5 Not tainted 4.13.0-rc4+ #32
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:16 [inline]
     dump_stack+0x194/0x257 lib/dump_stack.c:52
     print_address_description+0x73/0x250 mm/kasan/report.c:252
     kasan_report_error mm/kasan/report.c:351 [inline]
     kasan_report+0x24e/0x340 mm/kasan/report.c:409
     __asan_report_load8_noabort+0x14/0x20 mm/kasan/report.c:430
     skb_push+0xd4/0xe0 net/core/skbuff.c:1466
     tipc_nl_compat_recv+0x833/0x18f0 net/tipc/netlink_compat.c:1209
     genl_family_rcv_msg+0x7b7/0xfb0 net/netlink/genetlink.c:598
     genl_rcv_msg+0xb2/0x140 net/netlink/genetlink.c:623
     netlink_rcv_skb+0x216/0x440 net/netlink/af_netlink.c:2397
     genl_rcv+0x28/0x40 net/netlink/genetlink.c:634
     netlink_unicast_kernel net/netlink/af_netlink.c:1265 [inline]
     netlink_unicast+0x4e8/0x6f0 net/netlink/af_netlink.c:1291
     netlink_sendmsg+0xa4a/0xe60 net/netlink/af_netlink.c:1854
     sock_sendmsg_nosec net/socket.c:633 [inline]
     sock_sendmsg+0xca/0x110 net/socket.c:643
     sock_write_iter+0x31a/0x5d0 net/socket.c:898
     call_write_iter include/linux/fs.h:1743 [inline]
     new_sync_write fs/read_write.c:457 [inline]
     __vfs_write+0x684/0x970 fs/read_write.c:470
     vfs_write+0x189/0x510 fs/read_write.c:518
     SYSC_write fs/read_write.c:565 [inline]
     SyS_write+0xef/0x220 fs/read_write.c:557
     entry_SYSCALL_64_fastpath+0x1f/0xbe
    RIP: 0033:0x4512e9
    RSP: 002b:00007f3bc8184c08 EFLAGS: 00000216 ORIG_RAX: 0000000000000001
    RAX: ffffffffffffffda RBX: 0000000000718000 RCX: 00000000004512e9
    RDX: 0000000000000020 RSI: 0000000020fdb000 RDI: 0000000000000006
    RBP: 0000000000000086 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000216 R12: 00000000004b5e76
    R13: 00007f3bc8184b48 R14: 00000000004b5e86 R15: 0000000000000000
    
    Allocated by task 4115:
     save_stack_trace+0x16/0x20 arch/x86/kernel/stacktrace.c:59
     save_stack+0x43/0xd0 mm/kasan/kasan.c:447
     set_track mm/kasan/kasan.c:459 [inline]
     kasan_kmalloc+0xad/0xe0 mm/kasan/kasan.c:551
     kasan_slab_alloc+0x12/0x20 mm/kasan/kasan.c:489
     kmem_cache_alloc_node+0x13d/0x750 mm/slab.c:3651
     __alloc_skb+0xf1/0x740 net/core/skbuff.c:219
     alloc_skb include/linux/skbuff.h:903 [inline]
     tipc_tlv_alloc+0x26/0xb0 net/tipc/netlink_compat.c:148
     tipc_nl_compat_dumpit+0xf2/0x3c0 net/tipc/netlink_compat.c:248
     tipc_nl_compat_handle net/tipc/netlink_compat.c:1130 [inline]
     tipc_nl_compat_recv+0x756/0x18f0 net/tipc/netlink_compat.c:1199
     genl_family_rcv_msg+0x7b7/0xfb0 net/netlink/genetlink.c:598
     genl_rcv_msg+0xb2/0x140 net/netlink/genetlink.c:623
     netlink_rcv_skb+0x216/0x440 net/netlink/af_netlink.c:2397
     genl_rcv+0x28/0x40 net/netlink/genetlink.c:634
     netlink_unicast_kernel net/netlink/af_netlink.c:1265 [inline]
     netlink_unicast+0x4e8/0x6f0 net/netlink/af_netlink.c:1291
     netlink_sendmsg+0xa4a/0xe60 net/netlink/af_netlink.c:1854
     sock_sendmsg_nosec net/socket.c:633 [inline]
     sock_sendmsg+0xca/0x110 net/socket.c:643
     sock_write_iter+0x31a/0x5d0 net/socket.c:898
     call_write_iter include/linux/fs.h:1743 [inline]
     new_sync_write fs/read_write.c:457 [inline]
     __vfs_write+0x684/0x970 fs/read_write.c:470
     vfs_write+0x189/0x510 fs/read_write.c:518
     SYSC_write fs/read_write.c:565 [inline]
     SyS_write+0xef/0x220 fs/read_write.c:557
     entry_SYSCALL_64_fastpath+0x1f/0xbe
    
    Freed by task 4115:
     save_stack_trace+0x16/0x20 arch/x86/kernel/stacktrace.c:59
     save_stack+0x43/0xd0 mm/kasan/kasan.c:447
     set_track mm/kasan/kasan.c:459 [inline]
     kasan_slab_free+0x71/0xc0 mm/kasan/kasan.c:524
     __cache_free mm/slab.c:3503 [inline]
     kmem_cache_free+0x77/0x280 mm/slab.c:3763
     kfree_skbmem+0x1a1/0x1d0 net/core/skbuff.c:622
     __kfree_skb net/core/skbuff.c:682 [inline]
     kfree_skb+0x165/0x4c0 net/core/skbuff.c:699
     tipc_nl_compat_dumpit+0x36a/0x3c0 net/tipc/netlink_compat.c:260
     tipc_nl_compat_handle net/tipc/netlink_compat.c:1130 [inline]
     tipc_nl_compat_recv+0x756/0x18f0 net/tipc/netlink_compat.c:1199
     genl_family_rcv_msg+0x7b7/0xfb0 net/netlink/genetlink.c:598
     genl_rcv_msg+0xb2/0x140 net/netlink/genetlink.c:623
     netlink_rcv_skb+0x216/0x440 net/netlink/af_netlink.c:2397
     genl_rcv+0x28/0x40 net/netlink/genetlink.c:634
     netlink_unicast_kernel net/netlink/af_netlink.c:1265 [inline]
     netlink_unicast+0x4e8/0x6f0 net/netlink/af_netlink.c:1291
     netlink_sendmsg+0xa4a/0xe60 net/netlink/af_netlink.c:1854
     sock_sendmsg_nosec net/socket.c:633 [inline]
     sock_sendmsg+0xca/0x110 net/socket.c:643
     sock_write_iter+0x31a/0x5d0 net/socket.c:898
     call_write_iter include/linux/fs.h:1743 [inline]
     new_sync_write fs/read_write.c:457 [inline]
     __vfs_write+0x684/0x970 fs/read_write.c:470
     vfs_write+0x189/0x510 fs/read_write.c:518
     SYSC_write fs/read_write.c:565 [inline]
     SyS_write+0xef/0x220 fs/read_write.c:557
     entry_SYSCALL_64_fastpath+0x1f/0xbe
    
    The buggy address belongs to the object at ffff8801c6e71dc0
     which belongs to the cache skbuff_head_cache of size 224
    The buggy address is located 208 bytes inside of
     224-byte region [ffff8801c6e71dc0, ffff8801c6e71ea0)
    The buggy address belongs to the page:
    page:ffffea00071b9c40 count:1 mapcount:0 mapping:ffff8801c6e71000 index:0x0
    flags: 0x200000000000100(slab)
    raw: 0200000000000100 ffff8801c6e71000 0000000000000000 000000010000000c
    raw: ffffea0007224a20 ffff8801d98caf48 ffff8801d9e79040 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff8801c6e71d80: fc fc fc fc fc fc fc fc fb fb fb fb fb fb fb fb
     ffff8801c6e71e00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    >ffff8801c6e71e80: fb fb fb fb fc fc fc fc fc fc fc fc fc fc fc fc
                             ^
     ffff8801c6e71f00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
     ffff8801c6e71f80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    ==================================================================
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Dmitry Vyukov  <dvyukov@google.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>

commit aad06212d36cf34859428a0a279e5c14ee5c9e26
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Fri Sep 29 10:02:54 2017 +0200

    tipc: use only positive error codes in messages
    
    In commit e3a77561e7d32 ("tipc: split up function tipc_msg_eval()"),
    we have updated the function tipc_msg_lookup_dest() to set the error
    codes to negative values at destination lookup failures. Thus when
    the function sets the error code to -TIPC_ERR_NO_NAME, its inserted
    into the 4 bit error field of the message header as 0xf instead of
    TIPC_ERR_NO_NAME (1). The value 0xf is an unknown error code.
    
    In this commit, we set only positive error code.
    
    Fixes: e3a77561e7d32 ("tipc: split up function tipc_msg_eval()")
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 651e28c5537abb39076d3949fb7618536f1d242e
Author: John Johansen <john.johansen@canonical.com>
Date:   Tue Jul 18 23:18:33 2017 -0700

    apparmor: add base infastructure for socket mediation
    
    Provide a basic mediation of sockets. This is not a full net mediation
    but just whether a spcific family of socket can be used by an
    application, along with setting up some basic infrastructure for
    network mediation to follow.
    
    the user space rule hav the basic form of
      NETWORK RULE = [ QUALIFIERS ] 'network' [ DOMAIN ]
                     [ TYPE | PROTOCOL ]
    
      DOMAIN = ( 'inet' | 'ax25' | 'ipx' | 'appletalk' | 'netrom' |
                 'bridge' | 'atmpvc' | 'x25' | 'inet6' | 'rose' |
                 'netbeui' | 'security' | 'key' | 'packet' | 'ash' |
                 'econet' | 'atmsvc' | 'sna' | 'irda' | 'pppox' |
                 'wanpipe' | 'bluetooth' | 'netlink' | 'unix' | 'rds' |
                 'llc' | 'can' | 'tipc' | 'iucv' | 'rxrpc' | 'isdn' |
                 'phonet' | 'ieee802154' | 'caif' | 'alg' | 'nfc' |
                 'vsock' | 'mpls' | 'ib' | 'kcm' ) ','
    
      TYPE = ( 'stream' | 'dgram' | 'seqpacket' |  'rdm' | 'raw' |
               'packet' )
    
      PROTOCOL = ( 'tcp' | 'udp' | 'icmp' )
    
    eg.
      network,
      network inet,
    
    Signed-off-by: John Johansen <john.johansen@canonical.com>
    Acked-by: Seth Arnold <seth.arnold@canonical.com>

commit c86a65cf30ac5e8eaba4abe921b1b471d1fbe329
Author: Bob Peterson <rpeterso@redhat.com>
Date:   Wed Aug 23 10:43:02 2017 -0400

    tipc: Fix tipc_sk_reinit handling of -EAGAIN
    
    
    [ Upstream commit 6c7e983b220f89e03286dc70a41c7ef3a8b409df ]
    
    In 9dbbfb0ab6680c6a85609041011484e6658e7d3c function tipc_sk_reinit
    had additional logic added to loop in the event that function
    rhashtable_walk_next() returned -EAGAIN. No worries.
    
    However, if rhashtable_walk_start returns -EAGAIN, it does "continue",
    and therefore skips the call to rhashtable_walk_stop(). That has
    the effect of calling rcu_read_lock() without its paired call to
    rcu_read_unlock(). Since rcu_read_lock() may be nested, the problem
    may not be apparent for a while, especially since resize events may
    be rare. But the comments to rhashtable_walk_start() state:
    
     * ...Note that we take the RCU lock in all
     * cases including when we return an error.  So you must always call
     * rhashtable_walk_stop to clean up.
    
    This patch replaces the continue with a goto and label to ensure a
    matching call to rhashtable_walk_stop().
    
    Signed-off-by: Bob Peterson <rpeterso@redhat.com>
    Acked-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8e0deed92406d93ae0365cb8a6134db5721e7aca
Author: Kleber Sacilotto de Souza <kleber.souza@canonical.com>
Date:   Wed Sep 6 11:08:06 2017 +0200

    tipc: remove unnecessary call to dev_net()
    
    The net device is already stored in the 'net' variable, so no need to call
    dev_net() again.
    
    Signed-off-by: Kleber Sacilotto de Souza <kleber.souza@canonical.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8cf9f2a29ff1265a392e5b2461c69a9e53b4539f
Merge: b8a78bb4d103 e8a732d1bc3a
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Sep 1 12:49:03 2017 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Fix handling of pinned BPF map nodes in hash of maps, from Daniel
        Borkmann.
    
     2) IPSEC ESP error paths leak memory, from Steffen Klassert.
    
     3) We need an RCU grace period before freeing fib6_node objects, from
        Wei Wang.
    
     4) Must check skb_put_padto() return value in HSR driver, from FLorian
        Fainelli.
    
     5) Fix oops on PHY probe failure in ftgmac100 driver, from Andrew
        Jeffery.
    
     6) Fix infinite loop in UDP queue when using SO_PEEK_OFF, from Eric
        Dumazet.
    
     7) Use after free when tcf_chain_destroy() called multiple times, from
        Jiri Pirko.
    
     8) Fix KSZ DSA tag layer multiple free of SKBS, from Florian Fainelli.
    
     9) Fix leak of uninitialized memory in sctp_get_sctp_info(),
        inet_diag_msg_sctpladdrs_fill() and inet_diag_msg_sctpaddrs_fill().
        From Stefano Brivio.
    
    10) L2TP tunnel refcount fixes from Guillaume Nault.
    
    11) Don't leak UDP secpath in udp_set_dev_scratch(), from Yossi
        Kauperman.
    
    12) Revert a PHY layer change wrt. handling of PHY_HALTED state in
        phy_stop_machine(), it causes regressions for multiple people. From
        Florian Fainelli.
    
    13) When packets are sent out of br0 we have to clear the
        offload_fwdq_mark value.
    
    14) Several NULL pointer deref fixes in packet schedulers when their
        ->init() routine fails. From Nikolay Aleksandrov.
    
    15) Aquantium devices cannot checksum offload correctly when the packet
        is <= 60 bytes. From Pavel Belous.
    
    16) Fix vnet header access past end of buffer in AF_PACKET, from
        Benjamin Poirier.
    
    17) Double free in probe error paths of nfp driver, from Dan Carpenter.
    
    18) QOS capability not checked properly in DCB init paths of mlx5
        driver, from Huy Nguyen.
    
    19) Fix conflicts between firmware load failure and health_care timer in
        mlx5, also from Huy Nguyen.
    
    20) Fix dangling page pointer when DMA mapping errors occur in mlx5,
        from Eran Ben ELisha.
    
    21) ->ndo_setup_tc() in bnxt_en driver doesn't count rings properly,
        from Michael Chan.
    
    22) Missing MSIX vector free in bnxt_en, also from Michael Chan.
    
    23) Refcount leak in xfrm layer when using sk_policy, from Lorenzo
        Colitti.
    
    24) Fix copy of uninitialized data in qlge driver, from Arnd Bergmann.
    
    25) bpf_setsockopts() erroneously always returns -EINVAL even on
        success. Fix from Yuchung Cheng.
    
    26) tipc_rcv() needs to linearize the SKB before parsing the inner
        headers, from Parthasarathy Bhuvaragan.
    
    27) Fix deadlock between link status updates and link removal in netvsc
        driver, from Stephen Hemminger.
    
    28) Missed locking of page fragment handling in ESP output, from Steffen
        Klassert.
    
    29) Fix refcnt leak in ebpf congestion control code, from Sabrina
        Dubroca.
    
    30) sxgbe_probe_config_dt() doesn't check devm_kzalloc()'s return value,
        from Christophe Jaillet.
    
    31) Fix missing ipv6 rx_dst_cookie update when rx_dst is updated during
        early demux, from Paolo Abeni.
    
    32) Several info leaks in xfrm_user layer, from Mathias Krause.
    
    33) Fix out of bounds read in cxgb4 driver, from Stefano Brivio.
    
    34) Properly propagate obsolete state of route upwards in ipv6 so that
        upper holders like xfrm can see it. From Xin Long.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (118 commits)
      udp: fix secpath leak
      bridge: switchdev: Clear forward mark when transmitting packet
      mlxsw: spectrum: Forbid linking to devices that have uppers
      wl1251: add a missing spin_lock_init()
      Revert "net: phy: Correctly process PHY_HALTED in phy_stop_machine()"
      net: dsa: bcm_sf2: Fix number of CFP entries for BCM7278
      kcm: do not attach PF_KCM sockets to avoid deadlock
      sch_tbf: fix two null pointer dereferences on init failure
      sch_sfq: fix null pointer dereference on init failure
      sch_netem: avoid null pointer deref on init failure
      sch_fq_codel: avoid double free on init failure
      sch_cbq: fix null pointer dereferences on init failure
      sch_hfsc: fix null pointer deref and double free on init failure
      sch_hhf: fix null pointer dereference on init failure
      sch_multiq: fix double free on init failure
      sch_htb: fix crash on init failure
      net/mlx5e: Fix CQ moderation mode not set properly
      net/mlx5e: Fix inline header size for small packets
      net/mlx5: E-Switch, Unload the representors in the correct order
      net/mlx5e: Properly resolve TC offloaded ipv6 vxlan tunnel source address
      ...

commit c549de482f89043eddda3ea33075180e8c479e49
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Aug 16 09:41:54 2017 -0700

    tipc: fix use-after-free
    
    
    [ Upstream commit 5bfd37b4de5c98e86b12bd13be5aa46c7484a125 ]
    
    syszkaller reported use-after-free in tipc [1]
    
    When msg->rep skb is freed, set the pointer to NULL,
    so that caller does not free it again.
    
    [1]
    
    ==================================================================
    BUG: KASAN: use-after-free in skb_push+0xd4/0xe0 net/core/skbuff.c:1466
    Read of size 8 at addr ffff8801c6e71e90 by task syz-executor5/4115
    
    CPU: 1 PID: 4115 Comm: syz-executor5 Not tainted 4.13.0-rc4+ #32
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:16 [inline]
     dump_stack+0x194/0x257 lib/dump_stack.c:52
     print_address_description+0x73/0x250 mm/kasan/report.c:252
     kasan_report_error mm/kasan/report.c:351 [inline]
     kasan_report+0x24e/0x340 mm/kasan/report.c:409
     __asan_report_load8_noabort+0x14/0x20 mm/kasan/report.c:430
     skb_push+0xd4/0xe0 net/core/skbuff.c:1466
     tipc_nl_compat_recv+0x833/0x18f0 net/tipc/netlink_compat.c:1209
     genl_family_rcv_msg+0x7b7/0xfb0 net/netlink/genetlink.c:598
     genl_rcv_msg+0xb2/0x140 net/netlink/genetlink.c:623
     netlink_rcv_skb+0x216/0x440 net/netlink/af_netlink.c:2397
     genl_rcv+0x28/0x40 net/netlink/genetlink.c:634
     netlink_unicast_kernel net/netlink/af_netlink.c:1265 [inline]
     netlink_unicast+0x4e8/0x6f0 net/netlink/af_netlink.c:1291
     netlink_sendmsg+0xa4a/0xe60 net/netlink/af_netlink.c:1854
     sock_sendmsg_nosec net/socket.c:633 [inline]
     sock_sendmsg+0xca/0x110 net/socket.c:643
     sock_write_iter+0x31a/0x5d0 net/socket.c:898
     call_write_iter include/linux/fs.h:1743 [inline]
     new_sync_write fs/read_write.c:457 [inline]
     __vfs_write+0x684/0x970 fs/read_write.c:470
     vfs_write+0x189/0x510 fs/read_write.c:518
     SYSC_write fs/read_write.c:565 [inline]
     SyS_write+0xef/0x220 fs/read_write.c:557
     entry_SYSCALL_64_fastpath+0x1f/0xbe
    RIP: 0033:0x4512e9
    RSP: 002b:00007f3bc8184c08 EFLAGS: 00000216 ORIG_RAX: 0000000000000001
    RAX: ffffffffffffffda RBX: 0000000000718000 RCX: 00000000004512e9
    RDX: 0000000000000020 RSI: 0000000020fdb000 RDI: 0000000000000006
    RBP: 0000000000000086 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000216 R12: 00000000004b5e76
    R13: 00007f3bc8184b48 R14: 00000000004b5e86 R15: 0000000000000000
    
    Allocated by task 4115:
     save_stack_trace+0x16/0x20 arch/x86/kernel/stacktrace.c:59
     save_stack+0x43/0xd0 mm/kasan/kasan.c:447
     set_track mm/kasan/kasan.c:459 [inline]
     kasan_kmalloc+0xad/0xe0 mm/kasan/kasan.c:551
     kasan_slab_alloc+0x12/0x20 mm/kasan/kasan.c:489
     kmem_cache_alloc_node+0x13d/0x750 mm/slab.c:3651
     __alloc_skb+0xf1/0x740 net/core/skbuff.c:219
     alloc_skb include/linux/skbuff.h:903 [inline]
     tipc_tlv_alloc+0x26/0xb0 net/tipc/netlink_compat.c:148
     tipc_nl_compat_dumpit+0xf2/0x3c0 net/tipc/netlink_compat.c:248
     tipc_nl_compat_handle net/tipc/netlink_compat.c:1130 [inline]
     tipc_nl_compat_recv+0x756/0x18f0 net/tipc/netlink_compat.c:1199
     genl_family_rcv_msg+0x7b7/0xfb0 net/netlink/genetlink.c:598
     genl_rcv_msg+0xb2/0x140 net/netlink/genetlink.c:623
     netlink_rcv_skb+0x216/0x440 net/netlink/af_netlink.c:2397
     genl_rcv+0x28/0x40 net/netlink/genetlink.c:634
     netlink_unicast_kernel net/netlink/af_netlink.c:1265 [inline]
     netlink_unicast+0x4e8/0x6f0 net/netlink/af_netlink.c:1291
     netlink_sendmsg+0xa4a/0xe60 net/netlink/af_netlink.c:1854
     sock_sendmsg_nosec net/socket.c:633 [inline]
     sock_sendmsg+0xca/0x110 net/socket.c:643
     sock_write_iter+0x31a/0x5d0 net/socket.c:898
     call_write_iter include/linux/fs.h:1743 [inline]
     new_sync_write fs/read_write.c:457 [inline]
     __vfs_write+0x684/0x970 fs/read_write.c:470
     vfs_write+0x189/0x510 fs/read_write.c:518
     SYSC_write fs/read_write.c:565 [inline]
     SyS_write+0xef/0x220 fs/read_write.c:557
     entry_SYSCALL_64_fastpath+0x1f/0xbe
    
    Freed by task 4115:
     save_stack_trace+0x16/0x20 arch/x86/kernel/stacktrace.c:59
     save_stack+0x43/0xd0 mm/kasan/kasan.c:447
     set_track mm/kasan/kasan.c:459 [inline]
     kasan_slab_free+0x71/0xc0 mm/kasan/kasan.c:524
     __cache_free mm/slab.c:3503 [inline]
     kmem_cache_free+0x77/0x280 mm/slab.c:3763
     kfree_skbmem+0x1a1/0x1d0 net/core/skbuff.c:622
     __kfree_skb net/core/skbuff.c:682 [inline]
     kfree_skb+0x165/0x4c0 net/core/skbuff.c:699
     tipc_nl_compat_dumpit+0x36a/0x3c0 net/tipc/netlink_compat.c:260
     tipc_nl_compat_handle net/tipc/netlink_compat.c:1130 [inline]
     tipc_nl_compat_recv+0x756/0x18f0 net/tipc/netlink_compat.c:1199
     genl_family_rcv_msg+0x7b7/0xfb0 net/netlink/genetlink.c:598
     genl_rcv_msg+0xb2/0x140 net/netlink/genetlink.c:623
     netlink_rcv_skb+0x216/0x440 net/netlink/af_netlink.c:2397
     genl_rcv+0x28/0x40 net/netlink/genetlink.c:634
     netlink_unicast_kernel net/netlink/af_netlink.c:1265 [inline]
     netlink_unicast+0x4e8/0x6f0 net/netlink/af_netlink.c:1291
     netlink_sendmsg+0xa4a/0xe60 net/netlink/af_netlink.c:1854
     sock_sendmsg_nosec net/socket.c:633 [inline]
     sock_sendmsg+0xca/0x110 net/socket.c:643
     sock_write_iter+0x31a/0x5d0 net/socket.c:898
     call_write_iter include/linux/fs.h:1743 [inline]
     new_sync_write fs/read_write.c:457 [inline]
     __vfs_write+0x684/0x970 fs/read_write.c:470
     vfs_write+0x189/0x510 fs/read_write.c:518
     SYSC_write fs/read_write.c:565 [inline]
     SyS_write+0xef/0x220 fs/read_write.c:557
     entry_SYSCALL_64_fastpath+0x1f/0xbe
    
    The buggy address belongs to the object at ffff8801c6e71dc0
     which belongs to the cache skbuff_head_cache of size 224
    The buggy address is located 208 bytes inside of
     224-byte region [ffff8801c6e71dc0, ffff8801c6e71ea0)
    The buggy address belongs to the page:
    page:ffffea00071b9c40 count:1 mapcount:0 mapping:ffff8801c6e71000 index:0x0
    flags: 0x200000000000100(slab)
    raw: 0200000000000100 ffff8801c6e71000 0000000000000000 000000010000000c
    raw: ffffea0007224a20 ffff8801d98caf48 ffff8801d9e79040 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff8801c6e71d80: fc fc fc fc fc fc fc fc fb fb fb fb fb fb fb fb
     ffff8801c6e71e00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    >ffff8801c6e71e80: fb fb fb fb fc fc fc fc fc fc fc fc fc fc fc fc
                             ^
     ffff8801c6e71f00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
     ffff8801c6e71f80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    ==================================================================
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Dmitry Vyukov  <dvyukov@google.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7ad5fb9594ee3341ce4a01dc5dbe3a51932b8e8c
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Aug 16 09:41:54 2017 -0700

    tipc: fix use-after-free
    
    
    [ Upstream commit 5bfd37b4de5c98e86b12bd13be5aa46c7484a125 ]
    
    syszkaller reported use-after-free in tipc [1]
    
    When msg->rep skb is freed, set the pointer to NULL,
    so that caller does not free it again.
    
    [1]
    
    ==================================================================
    BUG: KASAN: use-after-free in skb_push+0xd4/0xe0 net/core/skbuff.c:1466
    Read of size 8 at addr ffff8801c6e71e90 by task syz-executor5/4115
    
    CPU: 1 PID: 4115 Comm: syz-executor5 Not tainted 4.13.0-rc4+ #32
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:16 [inline]
     dump_stack+0x194/0x257 lib/dump_stack.c:52
     print_address_description+0x73/0x250 mm/kasan/report.c:252
     kasan_report_error mm/kasan/report.c:351 [inline]
     kasan_report+0x24e/0x340 mm/kasan/report.c:409
     __asan_report_load8_noabort+0x14/0x20 mm/kasan/report.c:430
     skb_push+0xd4/0xe0 net/core/skbuff.c:1466
     tipc_nl_compat_recv+0x833/0x18f0 net/tipc/netlink_compat.c:1209
     genl_family_rcv_msg+0x7b7/0xfb0 net/netlink/genetlink.c:598
     genl_rcv_msg+0xb2/0x140 net/netlink/genetlink.c:623
     netlink_rcv_skb+0x216/0x440 net/netlink/af_netlink.c:2397
     genl_rcv+0x28/0x40 net/netlink/genetlink.c:634
     netlink_unicast_kernel net/netlink/af_netlink.c:1265 [inline]
     netlink_unicast+0x4e8/0x6f0 net/netlink/af_netlink.c:1291
     netlink_sendmsg+0xa4a/0xe60 net/netlink/af_netlink.c:1854
     sock_sendmsg_nosec net/socket.c:633 [inline]
     sock_sendmsg+0xca/0x110 net/socket.c:643
     sock_write_iter+0x31a/0x5d0 net/socket.c:898
     call_write_iter include/linux/fs.h:1743 [inline]
     new_sync_write fs/read_write.c:457 [inline]
     __vfs_write+0x684/0x970 fs/read_write.c:470
     vfs_write+0x189/0x510 fs/read_write.c:518
     SYSC_write fs/read_write.c:565 [inline]
     SyS_write+0xef/0x220 fs/read_write.c:557
     entry_SYSCALL_64_fastpath+0x1f/0xbe
    RIP: 0033:0x4512e9
    RSP: 002b:00007f3bc8184c08 EFLAGS: 00000216 ORIG_RAX: 0000000000000001
    RAX: ffffffffffffffda RBX: 0000000000718000 RCX: 00000000004512e9
    RDX: 0000000000000020 RSI: 0000000020fdb000 RDI: 0000000000000006
    RBP: 0000000000000086 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000216 R12: 00000000004b5e76
    R13: 00007f3bc8184b48 R14: 00000000004b5e86 R15: 0000000000000000
    
    Allocated by task 4115:
     save_stack_trace+0x16/0x20 arch/x86/kernel/stacktrace.c:59
     save_stack+0x43/0xd0 mm/kasan/kasan.c:447
     set_track mm/kasan/kasan.c:459 [inline]
     kasan_kmalloc+0xad/0xe0 mm/kasan/kasan.c:551
     kasan_slab_alloc+0x12/0x20 mm/kasan/kasan.c:489
     kmem_cache_alloc_node+0x13d/0x750 mm/slab.c:3651
     __alloc_skb+0xf1/0x740 net/core/skbuff.c:219
     alloc_skb include/linux/skbuff.h:903 [inline]
     tipc_tlv_alloc+0x26/0xb0 net/tipc/netlink_compat.c:148
     tipc_nl_compat_dumpit+0xf2/0x3c0 net/tipc/netlink_compat.c:248
     tipc_nl_compat_handle net/tipc/netlink_compat.c:1130 [inline]
     tipc_nl_compat_recv+0x756/0x18f0 net/tipc/netlink_compat.c:1199
     genl_family_rcv_msg+0x7b7/0xfb0 net/netlink/genetlink.c:598
     genl_rcv_msg+0xb2/0x140 net/netlink/genetlink.c:623
     netlink_rcv_skb+0x216/0x440 net/netlink/af_netlink.c:2397
     genl_rcv+0x28/0x40 net/netlink/genetlink.c:634
     netlink_unicast_kernel net/netlink/af_netlink.c:1265 [inline]
     netlink_unicast+0x4e8/0x6f0 net/netlink/af_netlink.c:1291
     netlink_sendmsg+0xa4a/0xe60 net/netlink/af_netlink.c:1854
     sock_sendmsg_nosec net/socket.c:633 [inline]
     sock_sendmsg+0xca/0x110 net/socket.c:643
     sock_write_iter+0x31a/0x5d0 net/socket.c:898
     call_write_iter include/linux/fs.h:1743 [inline]
     new_sync_write fs/read_write.c:457 [inline]
     __vfs_write+0x684/0x970 fs/read_write.c:470
     vfs_write+0x189/0x510 fs/read_write.c:518
     SYSC_write fs/read_write.c:565 [inline]
     SyS_write+0xef/0x220 fs/read_write.c:557
     entry_SYSCALL_64_fastpath+0x1f/0xbe
    
    Freed by task 4115:
     save_stack_trace+0x16/0x20 arch/x86/kernel/stacktrace.c:59
     save_stack+0x43/0xd0 mm/kasan/kasan.c:447
     set_track mm/kasan/kasan.c:459 [inline]
     kasan_slab_free+0x71/0xc0 mm/kasan/kasan.c:524
     __cache_free mm/slab.c:3503 [inline]
     kmem_cache_free+0x77/0x280 mm/slab.c:3763
     kfree_skbmem+0x1a1/0x1d0 net/core/skbuff.c:622
     __kfree_skb net/core/skbuff.c:682 [inline]
     kfree_skb+0x165/0x4c0 net/core/skbuff.c:699
     tipc_nl_compat_dumpit+0x36a/0x3c0 net/tipc/netlink_compat.c:260
     tipc_nl_compat_handle net/tipc/netlink_compat.c:1130 [inline]
     tipc_nl_compat_recv+0x756/0x18f0 net/tipc/netlink_compat.c:1199
     genl_family_rcv_msg+0x7b7/0xfb0 net/netlink/genetlink.c:598
     genl_rcv_msg+0xb2/0x140 net/netlink/genetlink.c:623
     netlink_rcv_skb+0x216/0x440 net/netlink/af_netlink.c:2397
     genl_rcv+0x28/0x40 net/netlink/genetlink.c:634
     netlink_unicast_kernel net/netlink/af_netlink.c:1265 [inline]
     netlink_unicast+0x4e8/0x6f0 net/netlink/af_netlink.c:1291
     netlink_sendmsg+0xa4a/0xe60 net/netlink/af_netlink.c:1854
     sock_sendmsg_nosec net/socket.c:633 [inline]
     sock_sendmsg+0xca/0x110 net/socket.c:643
     sock_write_iter+0x31a/0x5d0 net/socket.c:898
     call_write_iter include/linux/fs.h:1743 [inline]
     new_sync_write fs/read_write.c:457 [inline]
     __vfs_write+0x684/0x970 fs/read_write.c:470
     vfs_write+0x189/0x510 fs/read_write.c:518
     SYSC_write fs/read_write.c:565 [inline]
     SyS_write+0xef/0x220 fs/read_write.c:557
     entry_SYSCALL_64_fastpath+0x1f/0xbe
    
    The buggy address belongs to the object at ffff8801c6e71dc0
     which belongs to the cache skbuff_head_cache of size 224
    The buggy address is located 208 bytes inside of
     224-byte region [ffff8801c6e71dc0, ffff8801c6e71ea0)
    The buggy address belongs to the page:
    page:ffffea00071b9c40 count:1 mapcount:0 mapping:ffff8801c6e71000 index:0x0
    flags: 0x200000000000100(slab)
    raw: 0200000000000100 ffff8801c6e71000 0000000000000000 000000010000000c
    raw: ffffea0007224a20 ffff8801d98caf48 ffff8801d9e79040 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff8801c6e71d80: fc fc fc fc fc fc fc fc fb fb fb fb fb fb fb fb
     ffff8801c6e71e00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    >ffff8801c6e71e80: fb fb fb fb fc fc fc fc fc fc fc fc fc fc fc fc
                             ^
     ffff8801c6e71f00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
     ffff8801c6e71f80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    ==================================================================
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Dmitry Vyukov  <dvyukov@google.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 69827c395d25abc61023b96cbddaa3af1f3acea6
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Aug 16 09:41:54 2017 -0700

    tipc: fix use-after-free
    
    
    [ Upstream commit 5bfd37b4de5c98e86b12bd13be5aa46c7484a125 ]
    
    syszkaller reported use-after-free in tipc [1]
    
    When msg->rep skb is freed, set the pointer to NULL,
    so that caller does not free it again.
    
    [1]
    
    ==================================================================
    BUG: KASAN: use-after-free in skb_push+0xd4/0xe0 net/core/skbuff.c:1466
    Read of size 8 at addr ffff8801c6e71e90 by task syz-executor5/4115
    
    CPU: 1 PID: 4115 Comm: syz-executor5 Not tainted 4.13.0-rc4+ #32
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:16 [inline]
     dump_stack+0x194/0x257 lib/dump_stack.c:52
     print_address_description+0x73/0x250 mm/kasan/report.c:252
     kasan_report_error mm/kasan/report.c:351 [inline]
     kasan_report+0x24e/0x340 mm/kasan/report.c:409
     __asan_report_load8_noabort+0x14/0x20 mm/kasan/report.c:430
     skb_push+0xd4/0xe0 net/core/skbuff.c:1466
     tipc_nl_compat_recv+0x833/0x18f0 net/tipc/netlink_compat.c:1209
     genl_family_rcv_msg+0x7b7/0xfb0 net/netlink/genetlink.c:598
     genl_rcv_msg+0xb2/0x140 net/netlink/genetlink.c:623
     netlink_rcv_skb+0x216/0x440 net/netlink/af_netlink.c:2397
     genl_rcv+0x28/0x40 net/netlink/genetlink.c:634
     netlink_unicast_kernel net/netlink/af_netlink.c:1265 [inline]
     netlink_unicast+0x4e8/0x6f0 net/netlink/af_netlink.c:1291
     netlink_sendmsg+0xa4a/0xe60 net/netlink/af_netlink.c:1854
     sock_sendmsg_nosec net/socket.c:633 [inline]
     sock_sendmsg+0xca/0x110 net/socket.c:643
     sock_write_iter+0x31a/0x5d0 net/socket.c:898
     call_write_iter include/linux/fs.h:1743 [inline]
     new_sync_write fs/read_write.c:457 [inline]
     __vfs_write+0x684/0x970 fs/read_write.c:470
     vfs_write+0x189/0x510 fs/read_write.c:518
     SYSC_write fs/read_write.c:565 [inline]
     SyS_write+0xef/0x220 fs/read_write.c:557
     entry_SYSCALL_64_fastpath+0x1f/0xbe
    RIP: 0033:0x4512e9
    RSP: 002b:00007f3bc8184c08 EFLAGS: 00000216 ORIG_RAX: 0000000000000001
    RAX: ffffffffffffffda RBX: 0000000000718000 RCX: 00000000004512e9
    RDX: 0000000000000020 RSI: 0000000020fdb000 RDI: 0000000000000006
    RBP: 0000000000000086 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000216 R12: 00000000004b5e76
    R13: 00007f3bc8184b48 R14: 00000000004b5e86 R15: 0000000000000000
    
    Allocated by task 4115:
     save_stack_trace+0x16/0x20 arch/x86/kernel/stacktrace.c:59
     save_stack+0x43/0xd0 mm/kasan/kasan.c:447
     set_track mm/kasan/kasan.c:459 [inline]
     kasan_kmalloc+0xad/0xe0 mm/kasan/kasan.c:551
     kasan_slab_alloc+0x12/0x20 mm/kasan/kasan.c:489
     kmem_cache_alloc_node+0x13d/0x750 mm/slab.c:3651
     __alloc_skb+0xf1/0x740 net/core/skbuff.c:219
     alloc_skb include/linux/skbuff.h:903 [inline]
     tipc_tlv_alloc+0x26/0xb0 net/tipc/netlink_compat.c:148
     tipc_nl_compat_dumpit+0xf2/0x3c0 net/tipc/netlink_compat.c:248
     tipc_nl_compat_handle net/tipc/netlink_compat.c:1130 [inline]
     tipc_nl_compat_recv+0x756/0x18f0 net/tipc/netlink_compat.c:1199
     genl_family_rcv_msg+0x7b7/0xfb0 net/netlink/genetlink.c:598
     genl_rcv_msg+0xb2/0x140 net/netlink/genetlink.c:623
     netlink_rcv_skb+0x216/0x440 net/netlink/af_netlink.c:2397
     genl_rcv+0x28/0x40 net/netlink/genetlink.c:634
     netlink_unicast_kernel net/netlink/af_netlink.c:1265 [inline]
     netlink_unicast+0x4e8/0x6f0 net/netlink/af_netlink.c:1291
     netlink_sendmsg+0xa4a/0xe60 net/netlink/af_netlink.c:1854
     sock_sendmsg_nosec net/socket.c:633 [inline]
     sock_sendmsg+0xca/0x110 net/socket.c:643
     sock_write_iter+0x31a/0x5d0 net/socket.c:898
     call_write_iter include/linux/fs.h:1743 [inline]
     new_sync_write fs/read_write.c:457 [inline]
     __vfs_write+0x684/0x970 fs/read_write.c:470
     vfs_write+0x189/0x510 fs/read_write.c:518
     SYSC_write fs/read_write.c:565 [inline]
     SyS_write+0xef/0x220 fs/read_write.c:557
     entry_SYSCALL_64_fastpath+0x1f/0xbe
    
    Freed by task 4115:
     save_stack_trace+0x16/0x20 arch/x86/kernel/stacktrace.c:59
     save_stack+0x43/0xd0 mm/kasan/kasan.c:447
     set_track mm/kasan/kasan.c:459 [inline]
     kasan_slab_free+0x71/0xc0 mm/kasan/kasan.c:524
     __cache_free mm/slab.c:3503 [inline]
     kmem_cache_free+0x77/0x280 mm/slab.c:3763
     kfree_skbmem+0x1a1/0x1d0 net/core/skbuff.c:622
     __kfree_skb net/core/skbuff.c:682 [inline]
     kfree_skb+0x165/0x4c0 net/core/skbuff.c:699
     tipc_nl_compat_dumpit+0x36a/0x3c0 net/tipc/netlink_compat.c:260
     tipc_nl_compat_handle net/tipc/netlink_compat.c:1130 [inline]
     tipc_nl_compat_recv+0x756/0x18f0 net/tipc/netlink_compat.c:1199
     genl_family_rcv_msg+0x7b7/0xfb0 net/netlink/genetlink.c:598
     genl_rcv_msg+0xb2/0x140 net/netlink/genetlink.c:623
     netlink_rcv_skb+0x216/0x440 net/netlink/af_netlink.c:2397
     genl_rcv+0x28/0x40 net/netlink/genetlink.c:634
     netlink_unicast_kernel net/netlink/af_netlink.c:1265 [inline]
     netlink_unicast+0x4e8/0x6f0 net/netlink/af_netlink.c:1291
     netlink_sendmsg+0xa4a/0xe60 net/netlink/af_netlink.c:1854
     sock_sendmsg_nosec net/socket.c:633 [inline]
     sock_sendmsg+0xca/0x110 net/socket.c:643
     sock_write_iter+0x31a/0x5d0 net/socket.c:898
     call_write_iter include/linux/fs.h:1743 [inline]
     new_sync_write fs/read_write.c:457 [inline]
     __vfs_write+0x684/0x970 fs/read_write.c:470
     vfs_write+0x189/0x510 fs/read_write.c:518
     SYSC_write fs/read_write.c:565 [inline]
     SyS_write+0xef/0x220 fs/read_write.c:557
     entry_SYSCALL_64_fastpath+0x1f/0xbe
    
    The buggy address belongs to the object at ffff8801c6e71dc0
     which belongs to the cache skbuff_head_cache of size 224
    The buggy address is located 208 bytes inside of
     224-byte region [ffff8801c6e71dc0, ffff8801c6e71ea0)
    The buggy address belongs to the page:
    page:ffffea00071b9c40 count:1 mapcount:0 mapping:ffff8801c6e71000 index:0x0
    flags: 0x200000000000100(slab)
    raw: 0200000000000100 ffff8801c6e71000 0000000000000000 000000010000000c
    raw: ffffea0007224a20 ffff8801d98caf48 ffff8801d9e79040 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff8801c6e71d80: fc fc fc fc fc fc fc fc fb fb fb fb fb fb fb fb
     ffff8801c6e71e00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    >ffff8801c6e71e80: fb fb fb fb fc fc fc fc fc fc fc fc fc fc fc fc
                             ^
     ffff8801c6e71f00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
     ffff8801c6e71f80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    ==================================================================
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Dmitry Vyukov  <dvyukov@google.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d55c60eba0ef44ec21831ce26db300763eafd865
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Mon Aug 28 17:57:02 2017 +0200

    tipc: permit bond slave as bearer
    
    For a bond slave device as a tipc bearer, the dev represents the bond
    interface and orig_dev represents the slave in tipc_l2_rcv_msg().
    Since we decode the tipc_ptr from bonding device (dev), we fail to
    find the bearer and thus tipc links are not established.
    
    In this commit, we register the tipc protocol callback per device and
    look for tipc bearer from both the devices.
    
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c3d8d60e1efe5432dc4905646481f460795fac4e
Merge: 551143d8d954 991ca84daa00
Author: David S. Miller <davem@davemloft.net>
Date:   Thu Aug 24 21:54:35 2017 -0700

    Merge branch 'tipc-buffer-reassignment-fixes'
    
    Parthasarathy Bhuvaragan says:
    
    ====================
    tipc: buffer reassignment fixes
    
    This series contains fixes for buffer reassignments and a context imbalance.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 991ca84daa001193066554fa49f3a934746317d6
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Thu Aug 24 16:31:24 2017 +0200

    tipc: context imbalance at node read unlock
    
    If we fail to find a valid bearer in tipc_node_get_linkname(),
    node_read_unlock() is called without holding the node read lock.
    
    This commit fixes this error.
    
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 60d1d93664a0bb3d5af722ed38c57ee165a45bf7
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Thu Aug 24 16:31:23 2017 +0200

    tipc: reassign pointers after skb reallocation / linearization
    
    In tipc_msg_reverse(), we assign skb attributes to local pointers
    in stack at startup. This is followed by skb_linearize() and for
    cloned buffers we perform skb relocation using pskb_expand_head().
    Both these methods may update the skb attributes and thus making
    the pointers incorrect.
    
    In this commit, we fix this error by ensuring that the pointers
    are re-assigned after any of these skb operations.
    
    Fixes: 29042e19f2c60 ("tipc: let function tipc_msg_reverse() expand header
    when needed")
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 27163138b4d80e36f2006273d66b6c122d241f30
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Thu Aug 24 16:31:22 2017 +0200

    tipc: perform skb_linearize() before parsing the inner header
    
    In tipc_rcv(), we linearize only the header and usually the packets
    are consumed as the nodes permit direct reception. However, if the
    skb contains tunnelled message due to fail over or synchronization
    we parse it in tipc_node_check_state() without performing
    linearization. This will cause link disturbances if the skb was
    non linear.
    
    In this commit, we perform linearization for the above messages.
    
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6c7e983b220f89e03286dc70a41c7ef3a8b409df
Author: Bob Peterson <rpeterso@redhat.com>
Date:   Wed Aug 23 10:43:02 2017 -0400

    tipc: Fix tipc_sk_reinit handling of -EAGAIN
    
    In 9dbbfb0ab6680c6a85609041011484e6658e7d3c function tipc_sk_reinit
    had additional logic added to loop in the event that function
    rhashtable_walk_next() returned -EAGAIN. No worries.
    
    However, if rhashtable_walk_start returns -EAGAIN, it does "continue",
    and therefore skips the call to rhashtable_walk_stop(). That has
    the effect of calling rcu_read_lock() without its paired call to
    rcu_read_unlock(). Since rcu_read_lock() may be nested, the problem
    may not be apparent for a while, especially since resize events may
    be rare. But the comments to rhashtable_walk_start() state:
    
     * ...Note that we take the RCU lock in all
     * cases including when we return an error.  So you must always call
     * rhashtable_walk_stop to clean up.
    
    This patch replaces the continue with a goto and label to ensure a
    matching call to rhashtable_walk_stop().
    
    Signed-off-by: Bob Peterson <rpeterso@redhat.com>
    Acked-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 042a90106b09beff4fa9015d1940e45ce10297ab
Author: Arvind Yadav <arvind.yadav.cs@gmail.com>
Date:   Wed Aug 23 16:22:20 2017 +0530

    net: tipc: constify genl_ops
    
    genl_ops are not supposed to change at runtime. All functions
    working with genl_ops provided by <net/genetlink.h> work with
    const genl_ops. So mark the non-const structs as const.
    
    Signed-off-by: Arvind Yadav <arvind.yadav.cs@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit bfe9a6d76a15e1b1deb465d25876217d7ca35097
Merge: 4eb6a3bdb462 fd849b7c41f0
Author: David S. Miller <davem@davemloft.net>
Date:   Tue Aug 22 14:25:02 2017 -0700

    Merge branch 'tipc-topology-server-fixes'
    
    Parthasarathy Bhuvaragan says:
    
    ====================
    tipc: topology server fixes
    
    The following commits fixes two race conditions causing general
    protection faults.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit fd849b7c41f0fabfe783d0691a63c5518e8ebc99
Author: Ying Xue <ying.xue@windriver.com>
Date:   Tue Aug 22 12:28:41 2017 +0200

    tipc: fix a race condition of releasing subscriber object
    
    No matter whether a request is inserted into workqueue as a work item
    to cancel a subscription or to delete a subscription's subscriber
    asynchronously, the work items may be executed in different workers.
    As a result, it doesn't mean that one request which is raised prior to
    another request is definitely handled before the latter. By contrast,
    if the latter request is executed before the former request, below
    error may happen:
    
    [  656.183644] BUG: spinlock bad magic on CPU#0, kworker/u8:0/12117
    [  656.184487] general protection fault: 0000 [#1] SMP
    [  656.185160] Modules linked in: tipc ip6_udp_tunnel udp_tunnel 9pnet_virtio 9p 9pnet virtio_net virtio_pci virtio_ring virtio [last unloaded: ip6_udp_tunnel]
    [  656.187003] CPU: 0 PID: 12117 Comm: kworker/u8:0 Not tainted 4.11.0-rc7+ #6
    [  656.187920] Hardware name: Bochs Bochs, BIOS Bochs 01/01/2011
    [  656.188690] Workqueue: tipc_rcv tipc_recv_work [tipc]
    [  656.189371] task: ffff88003f5cec40 task.stack: ffffc90004448000
    [  656.190157] RIP: 0010:spin_bug+0xdd/0xf0
    [  656.190678] RSP: 0018:ffffc9000444bcb8 EFLAGS: 00010202
    [  656.191375] RAX: 0000000000000034 RBX: ffff88003f8d1388 RCX: 0000000000000000
    [  656.192321] RDX: ffff88003ba13708 RSI: ffff88003ba0cd08 RDI: ffff88003ba0cd08
    [  656.193265] RBP: ffffc9000444bcd0 R08: 0000000000000030 R09: 000000006b6b6b6b
    [  656.194208] R10: ffff8800bde3e000 R11: 00000000000001b4 R12: 6b6b6b6b6b6b6b6b
    [  656.195157] R13: ffffffff81a3ca64 R14: ffff88003f8d1388 R15: ffff88003f8d13a0
    [  656.196101] FS:  0000000000000000(0000) GS:ffff88003ba00000(0000) knlGS:0000000000000000
    [  656.197172] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  656.197935] CR2: 00007f0b3d2e6000 CR3: 000000003ef9e000 CR4: 00000000000006f0
    [  656.198873] Call Trace:
    [  656.199210]  do_raw_spin_lock+0x66/0xa0
    [  656.199735]  _raw_spin_lock_bh+0x19/0x20
    [  656.200258]  tipc_subscrb_subscrp_delete+0x28/0xf0 [tipc]
    [  656.200990]  tipc_subscrb_rcv_cb+0x45/0x260 [tipc]
    [  656.201632]  tipc_receive_from_sock+0xaf/0x100 [tipc]
    [  656.202299]  tipc_recv_work+0x2b/0x60 [tipc]
    [  656.202872]  process_one_work+0x157/0x420
    [  656.203404]  worker_thread+0x69/0x4c0
    [  656.203898]  kthread+0x138/0x170
    [  656.204328]  ? process_one_work+0x420/0x420
    [  656.204889]  ? kthread_create_on_node+0x40/0x40
    [  656.205527]  ret_from_fork+0x29/0x40
    [  656.206012] Code: 48 8b 0c 25 00 c5 00 00 48 c7 c7 f0 24 a3 81 48 81 c1 f0 05 00 00 65 8b 15 61 ef f5 7e e8 9a 4c 09 00 4d 85 e4 44 8b 4b 08 74 92 <45> 8b 84 24 40 04 00 00 49 8d 8c 24 f0 05 00 00 eb 8d 90 0f 1f
    [  656.208504] RIP: spin_bug+0xdd/0xf0 RSP: ffffc9000444bcb8
    [  656.209798] ---[ end trace e2a800e6eb0770be ]---
    
    In above scenario, the request of deleting subscriber was performed
    earlier than the request of canceling a subscription although the
    latter was issued before the former, which means tipc_subscrb_delete()
    was called before tipc_subscrp_cancel(). As a result, when
    tipc_subscrb_subscrp_delete() called by tipc_subscrp_cancel() was
    executed to cancel a subscription, the subscription's subscriber
    refcnt had been decreased to 1. After tipc_subscrp_delete() where
    the subscriber was freed because its refcnt was decremented to zero,
    but the subscriber's lock had to be released, as a consequence, panic
    happened.
    
    By contrast, if we increase subscriber's refcnt before
    tipc_subscrb_subscrp_delete() is called in tipc_subscrp_cancel(),
    the panic issue can be avoided.
    
    Fixes: d094c4d5f5c7 ("tipc: add subscription refcount to avoid invalid delete")
    Reported-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 458be024ef5f72f1697d5d55289c4ed45f8ee910
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Aug 22 12:28:40 2017 +0200

    tipc: remove subscription references only for pending timers
    
    In commit, 139bb36f754a ("tipc: advance the time of deleting
    subscription from subscriber->subscrp_list"), we delete the
    subscription from the subscribers list and from nametable
    unconditionally. This leads to the following bug if the timer
    running tipc_subscrp_timeout() in another CPU accesses the
    subscription list after the subscription delete request.
    
    [39.570] general protection fault: 0000 [#1] SMP
    ::
    [39.574] task: ffffffff81c10540 task.stack: ffffffff81c00000
    [39.575] RIP: 0010:tipc_subscrp_timeout+0x32/0x80 [tipc]
    [39.576] RSP: 0018:ffff88003ba03e90 EFLAGS: 00010282
    [39.576] RAX: dead000000000200 RBX: ffff88003f0f3600 RCX: 0000000000000101
    [39.577] RDX: dead000000000100 RSI: 0000000000000201 RDI: ffff88003f0d7948
    [39.578] RBP: ffff88003ba03ea0 R08: 0000000000000001 R09: ffff88003ba03ef8
    [39.579] R10: 000000000000014f R11: 0000000000000000 R12: ffff88003f0d7948
    [39.580] R13: ffff88003f0f3618 R14: ffffffffa006c250 R15: ffff88003f0f3600
    [39.581] FS:  0000000000000000(0000) GS:ffff88003ba00000(0000) knlGS:0000000000000000
    [39.582] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [39.583] CR2: 00007f831c6e0714 CR3: 000000003d3b0000 CR4: 00000000000006f0
    [39.584] Call Trace:
    [39.584]  <IRQ>
    [39.585]  call_timer_fn+0x3d/0x180
    [39.585]  ? tipc_subscrb_rcv_cb+0x260/0x260 [tipc]
    [39.586]  run_timer_softirq+0x168/0x1f0
    [39.586]  ? sched_clock_cpu+0x16/0xc0
    [39.587]  __do_softirq+0x9b/0x2de
    [39.587]  irq_exit+0x60/0x70
    [39.588]  smp_apic_timer_interrupt+0x3d/0x50
    [39.588]  apic_timer_interrupt+0x86/0x90
    [39.589] RIP: 0010:default_idle+0x20/0xf0
    [39.589] RSP: 0018:ffffffff81c03e58 EFLAGS: 00000246 ORIG_RAX: ffffffffffffff10
    [39.590] RAX: 0000000000000000 RBX: ffffffff81c10540 RCX: 0000000000000000
    [39.591] RDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000000000000
    [39.592] RBP: ffffffff81c03e68 R08: 0000000000000000 R09: 0000000000000000
    [39.593] R10: ffffc90001cbbe00 R11: 0000000000000000 R12: 0000000000000000
    [39.594] R13: ffffffff81c10540 R14: 0000000000000000 R15: 0000000000000000
    [39.595]  </IRQ>
    ::
    [39.603] RIP: tipc_subscrp_timeout+0x32/0x80 [tipc] RSP: ffff88003ba03e90
    [39.604] ---[ end trace 79ce94b7216cb459 ]---
    
    Fixes: 139bb36f754a ("tipc: advance the time of deleting subscription from subscriber->subscrp_list")
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 40501f90ed5d992176ba504910d512d9dd1b2668
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Mon Aug 21 17:59:30 2017 +0200

    tipc: don't reset stale broadcast send link
    
    When the broadcast send link after 100 attempts has failed to
    transfer a packet to all peers, we consider it stale, and reset
    it. Thereafter it needs to re-synchronize with the peers, something
    currently done by just resetting and re-establishing all links to
    all peers. This has turned out to be overkill, with potentially
    unwanted consequences for the remaining cluster.
    
    A closer analysis reveals that this can be done much simpler. When
    this kind of failure happens, for reasons that may lie outside the
    TIPC protocol, it is typically only one peer which is failing to
    receive and acknowledge packets. It is hence sufficient to identify
    and reset the links only to that peer to resolve the situation, without
    having to reset the broadcast link at all. This solution entails a much
    lower risk of negative consequences for the own node as well as for
    the overall cluster.
    
    We implement this change in this commit.
    
    Reviewed-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e3181f2c0c1bd1c066e9359998131eb524309a8e
Merge: dd1c1f2f2028 348a4002729c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Aug 21 13:16:27 2017 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Fix IGMP handling wrt VRF, from David Ahern.
    
     2) Fix timer access to freed object in dccp, from Eric Dumazet.
    
     3) Use kmalloc_array() in ptr_ring to avoid overflow cases which are
        triggerable by userspace. Also from Eric Dumazet.
    
     4) Fix infinite loop in unmapping cleanup of nfp driver, from Colin Ian
        King.
    
     5) Correct datagram peek handling of empty SKBs, from Matthew Dawson.
    
     6) Fix use after free in TIPC, from Eric Dumazet.
    
     7) When replacing a route in ipv6 we need to reset the round robin
        pointer, from Wei Wang.
    
     8) Fix bug in pci_find_pcie_root_port() which was unearthed by the
        relaxed ordering changes, from Thierry Redding. I made sure to get
        an explicit ACK from Bjorn this time around :-)
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (27 commits)
      ipv6: repair fib6 tree in failure case
      net_sched: fix order of queue length updates in qdisc_replace()
      tools lib bpf: improve warning
      switchdev: documentation: minor typo fixes
      bpf, doc: also add s390x as arch to sysctl description
      net: sched: fix NULL pointer dereference when action calls some targets
      rxrpc: Fix oops when discarding a preallocated service call
      irda: do not leak initialized list.dev to userspace
      net/mlx4_core: Enable 4K UAR if SRIOV module parameter is not enabled
      PCI: Allow PCI express root ports to find themselves
      tcp: when rearming RTO, if RTO time is in past then fire RTO ASAP
      net: check and errout if res->fi is NULL when RTM_F_FIB_MATCH is set
      ipv6: reset fn->rr_ptr when replacing route
      sctp: fully initialize the IPv6 address in sctp_v6_to_addr()
      tipc: fix use-after-free
      tun: handle register_netdevice() failures properly
      datagram: When peeking datagrams with offset < 0 don't skip empty skbs
      bpf, doc: improve sysctl knob description
      netxen: fix incorrect loop counter decrement
      nfp: fix infinite loop on umapping cleanup
      ...

commit 5bfd37b4de5c98e86b12bd13be5aa46c7484a125
Author: Eric Dumazet <edumazet@google.com>
Date:   Wed Aug 16 09:41:54 2017 -0700

    tipc: fix use-after-free
    
    syszkaller reported use-after-free in tipc [1]
    
    When msg->rep skb is freed, set the pointer to NULL,
    so that caller does not free it again.
    
    [1]
    
    ==================================================================
    BUG: KASAN: use-after-free in skb_push+0xd4/0xe0 net/core/skbuff.c:1466
    Read of size 8 at addr ffff8801c6e71e90 by task syz-executor5/4115
    
    CPU: 1 PID: 4115 Comm: syz-executor5 Not tainted 4.13.0-rc4+ #32
    Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
    Call Trace:
     __dump_stack lib/dump_stack.c:16 [inline]
     dump_stack+0x194/0x257 lib/dump_stack.c:52
     print_address_description+0x73/0x250 mm/kasan/report.c:252
     kasan_report_error mm/kasan/report.c:351 [inline]
     kasan_report+0x24e/0x340 mm/kasan/report.c:409
     __asan_report_load8_noabort+0x14/0x20 mm/kasan/report.c:430
     skb_push+0xd4/0xe0 net/core/skbuff.c:1466
     tipc_nl_compat_recv+0x833/0x18f0 net/tipc/netlink_compat.c:1209
     genl_family_rcv_msg+0x7b7/0xfb0 net/netlink/genetlink.c:598
     genl_rcv_msg+0xb2/0x140 net/netlink/genetlink.c:623
     netlink_rcv_skb+0x216/0x440 net/netlink/af_netlink.c:2397
     genl_rcv+0x28/0x40 net/netlink/genetlink.c:634
     netlink_unicast_kernel net/netlink/af_netlink.c:1265 [inline]
     netlink_unicast+0x4e8/0x6f0 net/netlink/af_netlink.c:1291
     netlink_sendmsg+0xa4a/0xe60 net/netlink/af_netlink.c:1854
     sock_sendmsg_nosec net/socket.c:633 [inline]
     sock_sendmsg+0xca/0x110 net/socket.c:643
     sock_write_iter+0x31a/0x5d0 net/socket.c:898
     call_write_iter include/linux/fs.h:1743 [inline]
     new_sync_write fs/read_write.c:457 [inline]
     __vfs_write+0x684/0x970 fs/read_write.c:470
     vfs_write+0x189/0x510 fs/read_write.c:518
     SYSC_write fs/read_write.c:565 [inline]
     SyS_write+0xef/0x220 fs/read_write.c:557
     entry_SYSCALL_64_fastpath+0x1f/0xbe
    RIP: 0033:0x4512e9
    RSP: 002b:00007f3bc8184c08 EFLAGS: 00000216 ORIG_RAX: 0000000000000001
    RAX: ffffffffffffffda RBX: 0000000000718000 RCX: 00000000004512e9
    RDX: 0000000000000020 RSI: 0000000020fdb000 RDI: 0000000000000006
    RBP: 0000000000000086 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000216 R12: 00000000004b5e76
    R13: 00007f3bc8184b48 R14: 00000000004b5e86 R15: 0000000000000000
    
    Allocated by task 4115:
     save_stack_trace+0x16/0x20 arch/x86/kernel/stacktrace.c:59
     save_stack+0x43/0xd0 mm/kasan/kasan.c:447
     set_track mm/kasan/kasan.c:459 [inline]
     kasan_kmalloc+0xad/0xe0 mm/kasan/kasan.c:551
     kasan_slab_alloc+0x12/0x20 mm/kasan/kasan.c:489
     kmem_cache_alloc_node+0x13d/0x750 mm/slab.c:3651
     __alloc_skb+0xf1/0x740 net/core/skbuff.c:219
     alloc_skb include/linux/skbuff.h:903 [inline]
     tipc_tlv_alloc+0x26/0xb0 net/tipc/netlink_compat.c:148
     tipc_nl_compat_dumpit+0xf2/0x3c0 net/tipc/netlink_compat.c:248
     tipc_nl_compat_handle net/tipc/netlink_compat.c:1130 [inline]
     tipc_nl_compat_recv+0x756/0x18f0 net/tipc/netlink_compat.c:1199
     genl_family_rcv_msg+0x7b7/0xfb0 net/netlink/genetlink.c:598
     genl_rcv_msg+0xb2/0x140 net/netlink/genetlink.c:623
     netlink_rcv_skb+0x216/0x440 net/netlink/af_netlink.c:2397
     genl_rcv+0x28/0x40 net/netlink/genetlink.c:634
     netlink_unicast_kernel net/netlink/af_netlink.c:1265 [inline]
     netlink_unicast+0x4e8/0x6f0 net/netlink/af_netlink.c:1291
     netlink_sendmsg+0xa4a/0xe60 net/netlink/af_netlink.c:1854
     sock_sendmsg_nosec net/socket.c:633 [inline]
     sock_sendmsg+0xca/0x110 net/socket.c:643
     sock_write_iter+0x31a/0x5d0 net/socket.c:898
     call_write_iter include/linux/fs.h:1743 [inline]
     new_sync_write fs/read_write.c:457 [inline]
     __vfs_write+0x684/0x970 fs/read_write.c:470
     vfs_write+0x189/0x510 fs/read_write.c:518
     SYSC_write fs/read_write.c:565 [inline]
     SyS_write+0xef/0x220 fs/read_write.c:557
     entry_SYSCALL_64_fastpath+0x1f/0xbe
    
    Freed by task 4115:
     save_stack_trace+0x16/0x20 arch/x86/kernel/stacktrace.c:59
     save_stack+0x43/0xd0 mm/kasan/kasan.c:447
     set_track mm/kasan/kasan.c:459 [inline]
     kasan_slab_free+0x71/0xc0 mm/kasan/kasan.c:524
     __cache_free mm/slab.c:3503 [inline]
     kmem_cache_free+0x77/0x280 mm/slab.c:3763
     kfree_skbmem+0x1a1/0x1d0 net/core/skbuff.c:622
     __kfree_skb net/core/skbuff.c:682 [inline]
     kfree_skb+0x165/0x4c0 net/core/skbuff.c:699
     tipc_nl_compat_dumpit+0x36a/0x3c0 net/tipc/netlink_compat.c:260
     tipc_nl_compat_handle net/tipc/netlink_compat.c:1130 [inline]
     tipc_nl_compat_recv+0x756/0x18f0 net/tipc/netlink_compat.c:1199
     genl_family_rcv_msg+0x7b7/0xfb0 net/netlink/genetlink.c:598
     genl_rcv_msg+0xb2/0x140 net/netlink/genetlink.c:623
     netlink_rcv_skb+0x216/0x440 net/netlink/af_netlink.c:2397
     genl_rcv+0x28/0x40 net/netlink/genetlink.c:634
     netlink_unicast_kernel net/netlink/af_netlink.c:1265 [inline]
     netlink_unicast+0x4e8/0x6f0 net/netlink/af_netlink.c:1291
     netlink_sendmsg+0xa4a/0xe60 net/netlink/af_netlink.c:1854
     sock_sendmsg_nosec net/socket.c:633 [inline]
     sock_sendmsg+0xca/0x110 net/socket.c:643
     sock_write_iter+0x31a/0x5d0 net/socket.c:898
     call_write_iter include/linux/fs.h:1743 [inline]
     new_sync_write fs/read_write.c:457 [inline]
     __vfs_write+0x684/0x970 fs/read_write.c:470
     vfs_write+0x189/0x510 fs/read_write.c:518
     SYSC_write fs/read_write.c:565 [inline]
     SyS_write+0xef/0x220 fs/read_write.c:557
     entry_SYSCALL_64_fastpath+0x1f/0xbe
    
    The buggy address belongs to the object at ffff8801c6e71dc0
     which belongs to the cache skbuff_head_cache of size 224
    The buggy address is located 208 bytes inside of
     224-byte region [ffff8801c6e71dc0, ffff8801c6e71ea0)
    The buggy address belongs to the page:
    page:ffffea00071b9c40 count:1 mapcount:0 mapping:ffff8801c6e71000 index:0x0
    flags: 0x200000000000100(slab)
    raw: 0200000000000100 ffff8801c6e71000 0000000000000000 000000010000000c
    raw: ffffea0007224a20 ffff8801d98caf48 ffff8801d9e79040 0000000000000000
    page dumped because: kasan: bad access detected
    
    Memory state around the buggy address:
     ffff8801c6e71d80: fc fc fc fc fc fc fc fc fb fb fb fb fb fb fb fb
     ffff8801c6e71e00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    >ffff8801c6e71e80: fb fb fb fb fc fc fc fc fc fc fc fc fc fc fc fc
                             ^
     ffff8801c6e71f00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
     ffff8801c6e71f80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
    ==================================================================
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: Dmitry Vyukov  <dvyukov@google.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 59a361bc6f6e91d57f25ff0aebb0e646beb3b41d
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Mon Aug 14 18:28:49 2017 +0200

    tipc: avoid inheriting msg_non_seq flag when message is returned
    
    In the function msg_reverse(), we reverse the header while trying to
    reuse the original buffer whenever possible. Those rejected/returned
    messages are always transmitted as unicast, but the msg_non_seq field
    is not explicitly set to zero as it should be.
    
    We have seen cases where multicast senders set the message type to
    "NOT dest_droppable", meaning that a multicast message shorter than
    one MTU will be returned, e.g., during receive buffer overflow, by
    reusing the original buffer. This has the effect that even the
    'msg_non_seq' field is inadvertently inherited by the rejected message,
    although it is now sent as a unicast message. This again leads the
    receiving unicast link endpoint to steer the packet toward the broadcast
    link receive function, where it is dropped. The affected unicast link is
    thereafter (after 100 failed retransmissions) declared 'stale' and
    reset.
    
    We fix this by unconditionally setting the 'msg_non_seq' flag to zero
    for all rejected/returned messages.
    
    Reported-by: Canh Duc Luu <canh.d.luu@dektech.com.au>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit fed5f5718c4989a03b1b4cdc0c7f273c3c74ee9e
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Mon Aug 14 17:55:56 2017 +0200

    tipc: accept PACKET_MULTICAST packets
    
    On L2 bearers, the TIPC broadcast function is sending out packets using
    the corresponding L2 broadcast address. At reception, we filter such
    packets under the assumption that they will also be delivered as
    broadcast packets.
    
    This assumption doesn't always hold true. Under high load, we have seen
    that a switch may convert the destination address and deliver the packet
    as a PACKET_MULTICAST, something leading to inadvertently dropped
    packets and a stale and reset broadcast link.
    
    We fix this by extending the reception filtering to accept packets of
    type PACKET_MULTICAST.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 26273939ace935dd7553b31d279eab30b40f7b9a
Merge: f213ad386bc5 c27927e372f0
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Aug 10 10:30:29 2017 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Fix handling of initial STATE message in TIPC, from Jon Paul Maloy.
    
     2) Fix stats handling in bcm_sysport_get_stats(), from Florian
        Fainelli.
    
     3) Reject 16777215 VNI value in geneve_validate(), from Girish
        Moodalbail.
    
     4) Fix initial IGMP sysctl setting regression, from Nikolay Borisov.
    
     5) Once a UFO fragmented frame is treated as UFO, we should continue
        doing so. Likewise once a frame has been segmented, we should
        continue doing that and not try to convert it to a UFO frame. From
        Willem de Bruijn.
    
     6) Test the AF_PACKET RX/TX ring pg_vec state under the socket lock to
        prevent races. From Willem de Bruijn.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net:
      packet: fix tp_reserve race in packet_set_ring
      udp: consistently apply ufo or fragmentation
      net: sched: set xt_tgchk_param par.nft_compat as 0 in ipt_init_target
      igmp: Fix regression caused by igmp sysctl namespace code.
      geneve: maximum value of VNI cannot be used
      net: systemport: Fix software statistics for SYSTEMPORT Lite
      tipc: remove premature ESTABLISH FSM event at link synchronization

commit ed43594aede9719e56eca72fc6a9a200c60b60e6
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Tue Aug 8 22:23:56 2017 +0200

    tipc: remove premature ESTABLISH FSM event at link synchronization
    
    When a link between two nodes come up, both endpoints will initially
    send out a STATE message to the peer, to increase the probability that
    the peer endpoint also is up when the first traffic message arrives.
    Thereafter, if the establishing link is the second link between two
    nodes, this first "traffic" message is a TUNNEL_PROTOCOL/SYNCH message,
    helping the peer to perform initial synchronization between the two
    links.
    
    However, the initial STATE message may be lost, in which case the SYNCH
    message will be the first one arriving at the peer. This should also
    work, as the SYNCH message itself will be used to take up the link
    endpoint before  initializing synchronization.
    
    Unfortunately the code for this case is broken. Currently, the link is
    brought up through a tipc_link_fsm_evt(ESTABLISHED) when a SYNCH
    arrives, whereupon __tipc_node_link_up() is called to distribute the
    link slots and take the link into traffic. But, __tipc_node_link_up() is
    itself starting with a test for whether the link is up, and if true,
    returns without action. Clearly, the tipc_link_fsm_evt(ESTABLISHED) call
    is unnecessary, since tipc_node_link_up() is itself issuing such an
    event, but also harmful, since it inhibits tipc_node_link_up() to
    perform the test of its tasks, and the link endpoint in question hence
    is never taken into traffic.
    
    This problem has been exposed when we set up dual links between pre-
    and post-4.4 kernels, because the former ones don't send out the
    initial STATE message described above.
    
    We fix this by removing the unnecessary event call.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e938c05e064c67d1de62d0886ffe6267c5085564
Author: Jia-Ju Bai <baijiaju1990@163.com>
Date:   Sat Jun 10 17:03:35 2017 +0800

    net: tipc: Fix a sleep-in-atomic bug in tipc_msg_reverse
    
    
    [ Upstream commit 343eba69c6968190d8654b857aea952fed9a6749 ]
    
    The kernel may sleep under a rcu read lock in tipc_msg_reverse, and the
    function call path is:
    tipc_l2_rcv_msg (acquire the lock by rcu_read_lock)
      tipc_rcv
        tipc_sk_rcv
          tipc_msg_reverse
            pskb_expand_head(GFP_KERNEL) --> may sleep
    tipc_node_broadcast
      tipc_node_xmit_skb
        tipc_node_xmit
          tipc_sk_rcv
            tipc_msg_reverse
              pskb_expand_head(GFP_KERNEL) --> may sleep
    
    To fix it, "GFP_KERNEL" is replaced with "GFP_ATOMIC".
    
    Signed-off-by: Jia-Ju Bai <baijiaju1990@163.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f8ffe4e09520e209f41d01c73a29598414123b1
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Fri Jan 13 15:46:25 2017 +0100

    tipc: allocate user memory with GFP_KERNEL flag
    
    
    [ Upstream commit 57d5f64d83ab5b5a5118b1597386dd76eaf4340d ]
    
    Until now, we allocate memory always with GFP_ATOMIC flag.
    When the system is under memory pressure and a user tries to send,
    the send fails due to low memory. However, the user application
    can wait for free memory if we allocate it using GFP_KERNEL flag.
    
    In this commit, we use allocate memory with GFP_KERNEL for all user
    allocation.
    
    Reported-by: Rune Torgersen <runet@innovsys.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 57360bc3c7a6fc9c7422e422508bf77166a05028
Author: Jia-Ju Bai <baijiaju1990@163.com>
Date:   Sat Jun 10 17:03:35 2017 +0800

    net: tipc: Fix a sleep-in-atomic bug in tipc_msg_reverse
    
    
    [ Upstream commit 343eba69c6968190d8654b857aea952fed9a6749 ]
    
    The kernel may sleep under a rcu read lock in tipc_msg_reverse, and the
    function call path is:
    tipc_l2_rcv_msg (acquire the lock by rcu_read_lock)
      tipc_rcv
        tipc_sk_rcv
          tipc_msg_reverse
            pskb_expand_head(GFP_KERNEL) --> may sleep
    tipc_node_broadcast
      tipc_node_xmit_skb
        tipc_node_xmit
          tipc_sk_rcv
            tipc_msg_reverse
              pskb_expand_head(GFP_KERNEL) --> may sleep
    
    To fix it, "GFP_KERNEL" is replaced with "GFP_ATOMIC".
    
    Signed-off-by: Jia-Ju Bai <baijiaju1990@163.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ddda59580e105f8886c17b20856cdeb53eb67e42
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Jan 24 13:00:47 2017 +0100

    tipc: ignore requests when the connection state is not CONNECTED
    
    [ Upstream commit 4c887aa65d38633885010277f3482400681be719 ]
    
    In tipc_conn_sendmsg(), we first queue the request to the outqueue
    followed by the connection state check. If the connection is not
    connected, we should not queue this message.
    
    In this commit, we reject the messages if the connection state is
    not CF_CONNECTED.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Tested-by: John Thompson <thompa.atl@gmail.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>

commit e41dd348186f9fbbf799a944697c64b01a03fb04
Author: John Johansen <john.johansen@canonical.com>
Date:   Sun Jun 8 11:20:54 2014 -0700

    apparmor: fix uninitialized lsm_audit member
    
    commit b6b1b81b3afba922505b57f4c812bba022f7c4a9 upstream.
    
    BugLink: http://bugs.launchpad.net/bugs/1268727
    
    The task field in the lsm_audit struct needs to be initialized if
    a change_hat fails, otherwise the following oops will occur
    
    BUG: unable to handle kernel paging request at 0000002fbead7d08
    IP: [<ffffffff8171153e>] _raw_spin_lock+0xe/0x50
    PGD 1e3f35067 PUD 0
    Oops: 0002 [#1] SMP
    Modules linked in: pppox crc_ccitt p8023 p8022 psnap llc ax25 btrfs raid6_pq xor xfs libcrc32c dm_multipath scsi_dh kvm_amd dcdbas kvm microcode amd64_edac_mod joydev edac_core psmouse edac_mce_amd serio_raw k10temp sp5100_tco i2c_piix4 ipmi_si ipmi_msghandler acpi_power_meter mac_hid lp parport hid_generic usbhid hid pata_acpi mpt2sas ahci raid_class pata_atiixp bnx2 libahci scsi_transport_sas [last unloaded: tipc]
    CPU: 2 PID: 699 Comm: changehat_twice Tainted: GF          O 3.13.0-7-generic #25-Ubuntu
    Hardware name: Dell Inc. PowerEdge R415/08WNM9, BIOS 1.8.6 12/06/2011
    task: ffff8802135c6000 ti: ffff880212986000 task.ti: ffff880212986000
    RIP: 0010:[<ffffffff8171153e>]  [<ffffffff8171153e>] _raw_spin_lock+0xe/0x50
    RSP: 0018:ffff880212987b68  EFLAGS: 00010006
    RAX: 0000000000020000 RBX: 0000002fbead7500 RCX: 0000000000000000
    RDX: 0000000000000292 RSI: ffff880212987ba8 RDI: 0000002fbead7d08
    RBP: ffff880212987b68 R08: 0000000000000246 R09: ffff880216e572a0
    R10: ffffffff815fd677 R11: ffffea0008469580 R12: ffffffff8130966f
    R13: ffff880212987ba8 R14: 0000002fbead7d08 R15: ffff8800d8c6b830
    FS:  00002b5e6c84e7c0(0000) GS:ffff880216e40000(0000) knlGS:0000000055731700
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000002fbead7d08 CR3: 000000021270f000 CR4: 00000000000006e0
    Stack:
     ffff880212987b98 ffffffff81075f17 ffffffff8130966f 0000000000000009
     0000000000000000 0000000000000000 ffff880212987bd0 ffffffff81075f7c
     0000000000000292 ffff880212987c08 ffff8800d8c6b800 0000000000000026
    Call Trace:
     [<ffffffff81075f17>] __lock_task_sighand+0x47/0x80
     [<ffffffff8130966f>] ? apparmor_cred_prepare+0x2f/0x50
     [<ffffffff81075f7c>] do_send_sig_info+0x2c/0x80
     [<ffffffff81075fee>] send_sig_info+0x1e/0x30
     [<ffffffff8130242d>] aa_audit+0x13d/0x190
     [<ffffffff8130c1dc>] aa_audit_file+0xbc/0x130
     [<ffffffff8130966f>] ? apparmor_cred_prepare+0x2f/0x50
     [<ffffffff81304cc2>] aa_change_hat+0x202/0x530
     [<ffffffff81308fc6>] aa_setprocattr_changehat+0x116/0x1d0
     [<ffffffff8130a11d>] apparmor_setprocattr+0x25d/0x300
     [<ffffffff812cee56>] security_setprocattr+0x16/0x20
     [<ffffffff8121fc87>] proc_pid_attr_write+0x107/0x130
     [<ffffffff811b7604>] vfs_write+0xb4/0x1f0
     [<ffffffff811b8039>] SyS_write+0x49/0xa0
     [<ffffffff8171a1bf>] tracesys+0xe1/0xe6
    
    Signed-off-by: John Johansen <john.johansen@canonical.com>
    Acked-by: Seth Arnold <seth.arnold@canonical.com>
    Acked-by: Jeff Mahoney <jeffm@suse.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit f68a45776a62fce560e4e28f89c5009895066ae1
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Jan 24 13:00:43 2017 +0100

    tipc: fix nametbl_lock soft lockup at node/link events
    
    
    [ Upstream commit 93f955aad4bacee5acebad141d1a03cd51f27b4e ]
    
    We trigger a soft lockup as we grab nametbl_lock twice if the node
    has a pending node up/down or link up/down event while:
    - we process an incoming named message in tipc_named_rcv() and
      perform an tipc_update_nametbl().
    - we have pending backlog items in the name distributor queue
      during a nametable update using tipc_nametbl_publish() or
      tipc_nametbl_withdraw().
    
    The following are the call chain associated:
    tipc_named_rcv() Grabs nametbl_lock
       tipc_update_nametbl() (publish/withdraw)
         tipc_node_subscribe()/unsubscribe()
           tipc_node_write_unlock()
              << lockup occurs if an outstanding node/link event
                 exits, as we grabs nametbl_lock again >>
    
    tipc_nametbl_withdraw() Grab nametbl_lock
      tipc_named_process_backlog()
        tipc_update_nametbl()
          << rest as above >>
    
    The function tipc_node_write_unlock(), in addition to releasing the
    lock processes the outstanding node/link up/down events. To do this,
    we need to grab the nametbl_lock again leading to the lockup.
    
    In this commit we fix the soft lockup by introducing a fast variant of
    node_unlock(), where we just release the lock. We adapt the
    node_subscribe()/node_unsubscribe() to use the fast variants.
    
    Reported-and-Tested-by: John Thompson <thompa.atl@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1d6e36d730ed6a328f793da1ac907c8d80ca2eb0
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Jan 24 13:00:44 2017 +0100

    tipc: add subscription refcount to avoid invalid delete
    
    
    [ Upstream commit d094c4d5f5c7e1b225e94227ca3f007be3adc4e8 ]
    
    Until now, the subscribers keep track of the subscriptions using
    reference count at subscriber level. At subscription cancel or
    subscriber delete, we delete the subscription only if the timer
    was pending for the subscription. This approach is incorrect as:
    1. del_timer() is not SMP safe, if on CPU0 the check for pending
       timer returns true but CPU1 might schedule the timer callback
       thereby deleting the subscription. Thus when CPU0 is scheduled,
       it deletes an invalid subscription.
    2. We export tipc_subscrp_report_overlap(), which accesses the
       subscription pointer multiple times. Meanwhile the subscription
       timer can expire thereby freeing the subscription and we might
       continue to access the subscription pointer leading to memory
       violations.
    
    In this commit, we introduce subscription refcount to avoid deleting
    an invalid subscription.
    
    Reported-and-Tested-by: John Thompson <thompa.atl@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f8df4f86a3fa3ca546955f696d7b602fc1eb3d6
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Jan 24 13:00:45 2017 +0100

    tipc: fix connection refcount error
    
    
    [ Upstream commit fc0adfc8fd18b61b6f7a3f28b429e134d6f3a008 ]
    
    Until now, the generic server framework maintains the connection
    id's per subscriber in server's conn_idr. At tipc_close_conn, we
    remove the connection id from the server list, but the connection is
    valid until we call the refcount cleanup. Hence we have a window
    where the server allocates the same connection to an new subscriber
    leading to inconsistent reference count. We have another refcount
    warning we grab the refcount in tipc_conn_lookup() for connections
    with flag with CF_CONNECTED not set. This usually occurs at shutdown
    when the we stop the topology server and withdraw TIPC_CFG_SRV
    publication thereby triggering a withdraw message to subscribers.
    
    In this commit, we:
    1. remove the connection from the server list at recount cleanup.
    2. grab the refcount for a connection only if CF_CONNECTED is set.
    
    Tested-by: John Thompson <thompa.atl@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c7a552e771cccacf4da117b93088e3cf25b1e038
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Jan 24 13:00:47 2017 +0100

    tipc: ignore requests when the connection state is not CONNECTED
    
    
    [ Upstream commit 4c887aa65d38633885010277f3482400681be719 ]
    
    In tipc_conn_sendmsg(), we first queue the request to the outqueue
    followed by the connection state check. If the connection is not
    connected, we should not queue this message.
    
    In this commit, we reject the messages if the connection state is
    not CF_CONNECTED.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Tested-by: John Thompson <thompa.atl@gmail.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 44bc7cae603167feb86b7f8f0684df62ffaac7f4
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Tue May 23 21:53:35 2017 -0400

    tipc: Fix tipc_sk_reinit race conditions
    
    
    [ Upstream commit 9dbbfb0ab6680c6a85609041011484e6658e7d3c ]
    
    There are two problems with the function tipc_sk_reinit.  Firstly
    it's doing a manual walk over an rhashtable.  This is broken as
    an rhashtable can be resized and if you manually walk over it
    during a resize then you may miss entries.
    
    Secondly it's missing memory barriers as previously the code used
    spinlocks which provide the barriers implicitly.
    
    This patch fixes both problems.
    
    Fixes: 07f6c4bc048a ("tipc: convert tipc reference table to...")
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b1aa267981223474cb5699b1c96eb7fa8eb08a8
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Jan 24 13:00:47 2017 +0100

    tipc: ignore requests when the connection state is not CONNECTED
    
    
    [ Upstream commit 4c887aa65d38633885010277f3482400681be719 ]
    
    In tipc_conn_sendmsg(), we first queue the request to the outqueue
    followed by the connection state check. If the connection is not
    connected, we should not queue this message.
    
    In this commit, we reject the messages if the connection state is
    not CF_CONNECTED.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Tested-by: John Thompson <thompa.atl@gmail.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c8580e3dcd00b4549f9ba81e7f39d1c6fe91164d
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Thu Sep 1 16:22:16 2016 +0200

    tipc: fix random link resets while adding a second bearer
    
    [ Upstream commit d2f394dc4816b7bd1b44981d83509f18f19c53f0 ]
    
    In a dual bearer configuration, if the second tipc link becomes
    active while the first link still has pending nametable "bulk"
    updates, it randomly leads to reset of the second link.
    
    When a link is established, the function named_distribute(),
    fills the skb based on node mtu (allows room for TUNNEL_PROTOCOL)
    with NAME_DISTRIBUTOR message for each PUBLICATION.
    However, the function named_distribute() allocates the buffer by
    increasing the node mtu by INT_H_SIZE (to insert NAME_DISTRIBUTOR).
    This consumes the space allocated for TUNNEL_PROTOCOL.
    
    When establishing the second link, the link shall tunnel all the
    messages in the first link queue including the "bulk" update.
    As size of the NAME_DISTRIBUTOR messages while tunnelling, exceeds
    the link mtu the transmission fails (-EMSGSIZE).
    
    Thus, the synch point based on the message count of the tunnel
    packets is never reached leading to link timeout.
    
    In this commit, we adjust the size of name distributor message so that
    they can be tunnelled.
    
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>

commit 39a978c3e19238fb276dd0516f7c35c29844a005
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Mon May 2 11:58:45 2016 -0400

    tipc: re-enable compensation for socket receive buffer double counting
    
    [ Upstream commit 7c8bcfb1255fe9d929c227d67bdcd84430fd200b ]
    
    In the refactoring commit d570d86497ee ("tipc: enqueue arrived buffers
    in socket in separate function") we did by accident replace the test
    
    if (sk->sk_backlog.len == 0)
         atomic_set(&tsk->dupl_rcvcnt, 0);
    
    with
    
    if (sk->sk_backlog.len)
         atomic_set(&tsk->dupl_rcvcnt, 0);
    
    This effectively disables the compensation we have for the double
    receive buffer accounting that occurs temporarily when buffers are
    moved from the backlog to the socket receive queue. Until now, this
    has gone unnoticed because of the large receive buffer limits we are
    applying, but becomes indispensable when we reduce this buffer limit
    later in this series.
    
    We now fix this by inverting the mentioned condition.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>

commit 343eba69c6968190d8654b857aea952fed9a6749
Author: Jia-Ju Bai <baijiaju1990@163.com>
Date:   Sat Jun 10 17:03:35 2017 +0800

    net: tipc: Fix a sleep-in-atomic bug in tipc_msg_reverse
    
    The kernel may sleep under a rcu read lock in tipc_msg_reverse, and the
    function call path is:
    tipc_l2_rcv_msg (acquire the lock by rcu_read_lock)
      tipc_rcv
        tipc_sk_rcv
          tipc_msg_reverse
            pskb_expand_head(GFP_KERNEL) --> may sleep
    tipc_node_broadcast
      tipc_node_xmit_skb
        tipc_node_xmit
          tipc_sk_rcv
            tipc_msg_reverse
              pskb_expand_head(GFP_KERNEL) --> may sleep
    
    To fix it, "GFP_KERNEL" is replaced with "GFP_ATOMIC".
    
    Signed-off-by: Jia-Ju Bai <baijiaju1990@163.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d9cb26d6a39f4d75dddf699033d5963b6633b98b
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu May 11 20:28:15 2017 +0200

    tipc: make macro tipc_wait_for_cond() smp safe
    
    
    [ Upstream commit 844cf763fba654436d3a4279b6a672c196cf1901 ]
    
    The macro tipc_wait_for_cond() is embedding the macro sk_wait_event()
    to fulfil its task. The latter, in turn, is evaluating the stated
    condition outside the socket lock context. This is problematic if
    the condition is accessing non-trivial data structures which may be
    altered by incoming interrupts, as is the case with the cong_links()
    linked list, used by socket to keep track of the current set of
    congested links. We sometimes see crashes when this list is accessed
    by a condition function at the same time as a SOCK_WAKEUP interrupt
    is removing an element from the list.
    
    We fix this by expanding selected parts of sk_wait_event() into the
    outer macro, while ensuring that all evaluations of a given condition
    are performed under socket lock protection.
    
    Fixes: commit 365ad353c256 ("tipc: reduce risk of user starvation during link congestion")
    Reviewed-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 844cf763fba654436d3a4279b6a672c196cf1901
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu May 11 20:28:15 2017 +0200

    tipc: make macro tipc_wait_for_cond() smp safe
    
    The macro tipc_wait_for_cond() is embedding the macro sk_wait_event()
    to fulfil its task. The latter, in turn, is evaluating the stated
    condition outside the socket lock context. This is problematic if
    the condition is accessing non-trivial data structures which may be
    altered by incoming interrupts, as is the case with the cong_links()
    linked list, used by socket to keep track of the current set of
    congested links. We sometimes see crashes when this list is accessed
    by a condition function at the same time as a SOCK_WAKEUP interrupt
    is removing an element from the list.
    
    We fix this by expanding selected parts of sk_wait_event() into the
    outer macro, while ensuring that all evaluations of a given condition
    are performed under socket lock protection.
    
    Fixes: commit 365ad353c256 ("tipc: reduce risk of user starvation during link congestion")
    Reviewed-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8d65b08debc7e62b2c6032d7fe7389d895b92cbc
Merge: 5a0387a8a8ef 5d15af6778b8
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue May 2 16:40:27 2017 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net-next
    
    Pull networking updates from David Millar:
     "Here are some highlights from the 2065 networking commits that
      happened this development cycle:
    
       1) XDP support for IXGBE (John Fastabend) and thunderx (Sunil Kowuri)
    
       2) Add a generic XDP driver, so that anyone can test XDP even if they
          lack a networking device whose driver has explicit XDP support
          (me).
    
       3) Sparc64 now has an eBPF JIT too (me)
    
       4) Add a BPF program testing framework via BPF_PROG_TEST_RUN (Alexei
          Starovoitov)
    
       5) Make netfitler network namespace teardown less expensive (Florian
          Westphal)
    
       6) Add symmetric hashing support to nft_hash (Laura Garcia Liebana)
    
       7) Implement NAPI and GRO in netvsc driver (Stephen Hemminger)
    
       8) Support TC flower offload statistics in mlxsw (Arkadi Sharshevsky)
    
       9) Multiqueue support in stmmac driver (Joao Pinto)
    
      10) Remove TCP timewait recycling, it never really could possibly work
          well in the real world and timestamp randomization really zaps any
          hint of usability this feature had (Soheil Hassas Yeganeh)
    
      11) Support level3 vs level4 ECMP route hashing in ipv4 (Nikolay
          Aleksandrov)
    
      12) Add socket busy poll support to epoll (Sridhar Samudrala)
    
      13) Netlink extended ACK support (Johannes Berg, Pablo Neira Ayuso,
          and several others)
    
      14) IPSEC hw offload infrastructure (Steffen Klassert)"
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net-next: (2065 commits)
      tipc: refactor function tipc_sk_recv_stream()
      tipc: refactor function tipc_sk_recvmsg()
      net: thunderx: Optimize page recycling for XDP
      net: thunderx: Support for XDP header adjustment
      net: thunderx: Add support for XDP_TX
      net: thunderx: Add support for XDP_DROP
      net: thunderx: Add basic XDP support
      net: thunderx: Cleanup receive buffer allocation
      net: thunderx: Optimize CQE_TX handling
      net: thunderx: Optimize RBDR descriptor handling
      net: thunderx: Support for page recycling
      ipx: call ipxitf_put() in ioctl error path
      net: sched: add helpers to handle extended actions
      qed*: Fix issues in the ptp filter config implementation.
      qede: Fix concurrency issue in PTP Tx path processing.
      stmmac: Add support for SIMATIC IOT2000 platform
      net: hns: fix ethtool_get_strings overflow in hns driver
      tcp: fix wraparound issue in tcp_lp
      bpf, arm64: fix jit branch offset related to ldimm64
      bpf, arm64: implement jiting of BPF_XADD
      ...

commit 5d15af6778b8e4ed1fd41b040283af278e7a9a72
Merge: b0e92279d3ec ec8a09fbbeff
Author: David S. Miller <davem@davemloft.net>
Date:   Tue May 2 15:56:54 2017 -0400

    Merge branch 'tipc-refactor-socket-receive-functions'
    
    Jon Maloy says:
    
    ====================
    tipc: refactor socket receive functions
    
    We try to make the functions tipc_sk_recvmsg() and
    tipc_sk_recvstream() more readable.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ec8a09fbbeff252c80daf62c7a78342003dddf9c
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Tue May 2 18:16:54 2017 +0200

    tipc: refactor function tipc_sk_recv_stream()
    
    We try to make this function more readable by improving variable names
    and comments, using more stack variables, and doing some smaller changes
    to the logics. We also rename the function to make it consistent with
    naming conventions used elsewhere in the code.
    
    Reviewed-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e9f8b10101c6da3ab000a2fb17162374c9bd2c69
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Tue May 2 18:16:53 2017 +0200

    tipc: refactor function tipc_sk_recvmsg()
    
    We try to make this function more readable by improving variable names
    and comments, plus some minor changes to the logics.
    
    Reviewed-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 65d30f7545ffdddcf10a59f3e54b032c5ade2e9d
Author: Michal Kubeček <mkubecek@suse.cz>
Date:   Fri Dec 2 09:33:41 2016 +0100

    tipc: check minimum bearer MTU
    
    commit 3de81b758853f0b29c61e246679d20b513c4cfec upstream.
    
    Qian Zhang (张谦) reported a potential socket buffer overflow in
    tipc_msg_build() which is also known as CVE-2016-8632: due to
    insufficient checks, a buffer overflow can occur if MTU is too short for
    even tipc headers. As anyone can set device MTU in a user/net namespace,
    this issue can be abused by a regular user.
    
    As agreed in the discussion on Ben Hutchings' original patch, we should
    check the MTU at the moment a bearer is attached rather than for each
    processed packet. We also need to repeat the check when bearer MTU is
    adjusted to new device MTU. UDP case also needs a check to avoid
    overflow when calculating bearer MTU.
    
    Fixes: b97bf3fd8f6a ("[TIPC] Initial merge")
    Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
    Reported-by: Qian Zhang (张谦) <zhangqian-c@360.cn>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [bwh: Backported to 4.4:
     - Adjust context
     - NETDEV_GOING_DOWN and NETDEV_CHANGEMTU cases in net notifier were combined]
    Signed-off-by: Ben Hutchings <ben.hutchings@codethink.co.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 59e0cd110fb9fb9aa97bb59c57789adb0e82da8d
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Jun 17 06:35:57 2016 -0400

    tipc: fix socket timer deadlock
    
    commit f1d048f24e66ba85d3dabf3d076cefa5f2b546b0 upstream.
    
    We sometimes observe a 'deadly embrace' type deadlock occurring
    between mutually connected sockets on the same node. This happens
    when the one-hour peer supervision timers happen to expire
    simultaneously in both sockets.
    
    The scenario is as follows:
    
    CPU 1:                          CPU 2:
    --------                        --------
    tipc_sk_timeout(sk1)            tipc_sk_timeout(sk2)
      lock(sk1.slock)                 lock(sk2.slock)
      msg_create(probe)               msg_create(probe)
      unlock(sk1.slock)               unlock(sk2.slock)
      tipc_node_xmit_skb()            tipc_node_xmit_skb()
        tipc_node_xmit()                tipc_node_xmit()
          tipc_sk_rcv(sk2)                tipc_sk_rcv(sk1)
            lock(sk2.slock)                 lock((sk1.slock)
            filter_rcv()                    filter_rcv()
              tipc_sk_proto_rcv()             tipc_sk_proto_rcv()
                msg_create(probe_rsp)           msg_create(probe_rsp)
                tipc_sk_respond()               tipc_sk_respond()
                  tipc_node_xmit_skb()            tipc_node_xmit_skb()
                    tipc_node_xmit()                tipc_node_xmit()
                      tipc_sk_rcv(sk1)                tipc_sk_rcv(sk2)
                        lock((sk1.slock)                lock((sk2.slock)
                        ===> DEADLOCK                   ===> DEADLOCK
    
    Further analysis reveals that there are three different locations in the
    socket code where tipc_sk_respond() is called within the context of the
    socket lock, with ensuing risk of similar deadlocks.
    
    We now solve this by passing a buffer queue along with all upcalls where
    sk_lock.slock may potentially be held. Response or rejected message
    buffers are accumulated into this queue instead of being sent out
    directly, and only sent once we know we are safely outside the slock
    context.
    
    Reported-by: GUNA <gbalasun@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit abc025d1e88a47c24a0f4411d851c1e9c3e0e87d
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Thu Sep 1 16:22:16 2016 +0200

    tipc: fix random link resets while adding a second bearer
    
    commit d2f394dc4816b7bd1b44981d83509f18f19c53f0 upstream.
    
    In a dual bearer configuration, if the second tipc link becomes
    active while the first link still has pending nametable "bulk"
    updates, it randomly leads to reset of the second link.
    
    When a link is established, the function named_distribute(),
    fills the skb based on node mtu (allows room for TUNNEL_PROTOCOL)
    with NAME_DISTRIBUTOR message for each PUBLICATION.
    However, the function named_distribute() allocates the buffer by
    increasing the node mtu by INT_H_SIZE (to insert NAME_DISTRIBUTOR).
    This consumes the space allocated for TUNNEL_PROTOCOL.
    
    When establishing the second link, the link shall tunnel all the
    messages in the first link queue including the "bulk" update.
    As size of the NAME_DISTRIBUTOR messages while tunnelling, exceeds
    the link mtu the transmission fails (-EMSGSIZE).
    
    Thus, the synch point based on the message count of the tunnel
    packets is never reached leading to link timeout.
    
    In this commit, we adjust the size of name distributor message so that
    they can be tunnelled.
    
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2847736f563d0ac1f84ddad1e4877c0856bc1adb
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Jun 8 12:00:04 2016 -0400

    tipc: correct error in node fsm
    
    commit c4282ca76c5b81ed73ef4c5eb5c07ee397e51642 upstream.
    
    commit 88e8ac7000dc ("tipc: reduce transmission rate of reset messages
    when link is down") revealed a flaw in the node FSM, as defined in
    the log of commit 66996b6c47ed ("tipc: extend node FSM").
    
    We see the following scenario:
    1: Node B receives a RESET message from node A before its link endpoint
       is fully up, i.e., the node FSM is in state SELF_UP_PEER_COMING. This
       event will not change the node FSM state, but the (distinct) link FSM
       will move to state RESETTING.
    2: As an effect of the previous event, the local endpoint on B will
       declare node A lost, and post the event SELF_DOWN to the its node
       FSM. This moves the FSM state to SELF_DOWN_PEER_LEAVING, meaning
       that no messages will be accepted from A until it receives another
       RESET message that confirms that A's endpoint has been reset. This
       is  wasteful, since we know this as a fact already from the first
       received RESET, but worse is that the link instance's FSM has not
       wasted this information, but instead moved on to state ESTABLISHING,
       meaning that it repeatedly sends out ACTIVATE messages to the reset
       peer A.
    3: Node A will receive one of the ACTIVATE messages, move its link FSM
       to state ESTABLISHED, and start repeatedly sending out STATE messages
       to node B.
    4: Node B will consistently drop these messages, since it can only accept
       accept a RESET according to its node FSM.
    5: After four lost STATE messages node A will reset its link and start
       repeatedly sending out RESET messages to B.
    6: Because of the reduced send rate for RESET messages, it is very
       likely that A will receive an ACTIVATE (which is sent out at a much
       higher frequency) before it gets the chance to send a RESET, and A
       may hence quickly move back to state ESTABLISHED and continue sending
       out STATE messages, which will again be dropped by B.
    7: GOTO 5.
    8: After having repeated the cycle 5-7 a number of times, node A will
       by chance get in between with sending a RESET, and the situation is
       resolved.
    
    Unfortunately, we have seen that it may take a substantial amount of
    time before this vicious loop is broken, sometimes in the order of
    minutes.
    
    We correct this by making a small correction to the node FSM: When a
    node in state SELF_UP_PEER_COMING receives a SELF_DOWN event, it now
    moves directly back to state SELF_DOWN_PEER_DOWN, instead of as now
    SELF_DOWN_PEER_LEAVING. This is logically consistent, since we don't
    need to wait for RESET confirmation from of an endpoint that we alread
    know has been reset. It also means that node B in the scenario above
    will not be dropping incoming STATE messages, and the link can come up
    immediately.
    
    Finally, a symmetry comparison reveals that the  FSM has a similar
    error when receiving the event PEER_DOWN in state PEER_UP_SELF_COMING.
    Instead of moving to PERR_DOWN_SELF_LEAVING, it should move directly
    to SELF_DOWN_PEER_DOWN. Although we have never seen any negative effect
    of this logical error, we choose fix this one, too.
    
    The node FSM looks as follows after those changes:
    
                               +----------------------------------------+
                               |                           PEER_DOWN_EVT|
                               |                                        |
      +------------------------+----------------+                       |
      |SELF_DOWN_EVT           |                |                       |
      |                        |                |                       |
      |              +-----------+          +-----------+               |
      |              |NODE_      |          |NODE_      |               |
      |   +----------|FAILINGOVER|<---------|SYNCHING   |-----------+   |
      |   |SELF_     +-----------+ FAILOVER_+-----------+   PEER_   |   |
      |   |DOWN_EVT   |          A BEGIN_EVT  A         |   DOWN_EVT|   |
      |   |           |          |            |         |           |   |
      |   |           |          |            |         |           |   |
      |   |           |FAILOVER_ |FAILOVER_   |SYNCH_   |SYNCH_     |   |
      |   |           |END_EVT   |BEGIN_EVT   |BEGIN_EVT|END_EVT    |   |
      |   |           |          |            |         |           |   |
      |   |           |          |            |         |           |   |
      |   |           |         +--------------+        |           |   |
      |   |           +-------->|   SELF_UP_   |<-------+           |   |
      |   |   +-----------------|   PEER_UP    |----------------+   |   |
      |   |   |SELF_DOWN_EVT    +--------------+   PEER_DOWN_EVT|   |   |
      |   |   |                    A        A                   |   |   |
      |   |   |                    |        |                   |   |   |
      |   |   |         PEER_UP_EVT|        |SELF_UP_EVT        |   |   |
      |   |   |                    |        |                   |   |   |
      V   V   V                    |        |                   V   V   V
    +------------+       +-----------+    +-----------+       +------------+
    |SELF_DOWN_  |       |SELF_UP_   |    |PEER_UP_   |       |PEER_DOWN   |
    |PEER_LEAVING|       |PEER_COMING|    |SELF_COMING|       |SELF_LEAVING|
    +------------+       +-----------+    +-----------+       +------------+
           |               |       A        A       |                |
           |               |       |        |       |                |
           |       SELF_   |       |SELF_   |PEER_  |PEER_           |
           |       DOWN_EVT|       |UP_EVT  |UP_EVT |DOWN_EVT        |
           |               |       |        |       |                |
           |               |       |        |       |                |
           |               |    +--------------+    |                |
           |PEER_DOWN_EVT  +--->|  SELF_DOWN_  |<---+   SELF_DOWN_EVT|
           +------------------->|  PEER_DOWN   |<--------------------+
                                +--------------+
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 76ca3053f32c997472c325176c235a25170fc98b
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Mon May 2 11:58:45 2016 -0400

    tipc: re-enable compensation for socket receive buffer double counting
    
    commit 7c8bcfb1255fe9d929c227d67bdcd84430fd200b upstream.
    
    In the refactoring commit d570d86497ee ("tipc: enqueue arrived buffers
    in socket in separate function") we did by accident replace the test
    
    if (sk->sk_backlog.len == 0)
         atomic_set(&tsk->dupl_rcvcnt, 0);
    
    with
    
    if (sk->sk_backlog.len)
         atomic_set(&tsk->dupl_rcvcnt, 0);
    
    This effectively disables the compensation we have for the double
    receive buffer accounting that occurs temporarily when buffers are
    moved from the backlog to the socket receive queue. Until now, this
    has gone unnoticed because of the large receive buffer limits we are
    applying, but becomes indispensable when we reduce this buffer limit
    later in this series.
    
    We now fix this by inverting the mentioned condition.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3f31559043087b9cd45582c2eb12d7900cedc4ed
Author: Erik Hugne <erik.hugne@gmail.com>
Date:   Thu Apr 7 10:40:43 2016 -0400

    tipc: make dist queue pernet
    
    commit 541726abe7daca64390c2ec34e6a203145f1686d upstream.
    
    Nametable updates received from the network that cannot be applied
    immediately are placed on a defer queue. This queue is global to the
    TIPC module, which might cause problems when using TIPC in containers.
    To prevent nametable updates from escaping into the wrong namespace,
    we make the queue pernet instead.
    
    Signed-off-by: Erik Hugne <erik.hugne@gmail.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 44b3b7e068874040ca511fcd2a812b5fbcf44616
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Mon Mar 14 09:43:52 2016 +0100

    tipc: make sure IPv6 header fits in skb headroom
    
    commit 9bd160bfa27fa41927dbbce7ee0ea779700e09ef upstream.
    
    Expand headroom further in order to be able to fit the larger IPv6
    header. Prior to this patch this caused a skb under panic for certain
    tipc packets when using IPv6 UDP bearer(s).
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e9117882da14e7914d05cf14781a7ac9c61c670
Merge: affb852d2fa2 4c761daf8bb9
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Apr 28 14:13:16 2017 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
     "Just a couple more stragglers, I really hope this is it.
    
      1) Don't let frags slip down into the GRO segmentation handlers, from
         Steffen Klassert.
    
      2) Truesize under-estimation triggers warnings in TCP over loopback
         with socket filters, 2 part fix from Eric Dumazet.
    
      3) Fix undesirable reset of bonding MTU to ETH_HLEN on slave removal,
         from Paolo Abeni.
    
      4) If we flush the XFRM policy after garbage collection, it doesn't
         work because stray entries can be created afterwards. Fix from Xin
         Long.
    
      5) Hung socket connection fixes in TIPC from Parthasarathy Bhuvaragan.
    
      6) Fix GRO regression with IPSEC when netfilter is disabled, from
         Sabrina Dubroca.
    
      7) Fix cpsw driver Kconfig dependency regression, from Arnd Bergmann"
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net:
      net: hso: register netdev later to avoid a race condition
      net: adjust skb->truesize in ___pskb_trim()
      tcp: do not underestimate skb->truesize in tcp_trim_head()
      bonding: avoid defaulting hard_header_len to ETH_HLEN on slave removal
      ipv4: Don't pass IP fragments to upper layer GRO handlers.
      cpsw/netcp: refine cpts dependency
      tipc: close the connection if protocol messages contain errors
      tipc: improve error validations for sockets in CONNECTING state
      tipc: Fix missing connection request handling
      xfrm: fix GRO for !CONFIG_NETFILTER
      xfrm: do the garbage collection after flushing policy

commit c51847171162212618b3227812f007a654de2f4b
Merge: f83246089ca0 c1be7756284b
Author: David S. Miller <davem@davemloft.net>
Date:   Fri Apr 28 12:20:43 2017 -0400

    Merge branch 'tipc-socket-connection-hangs'
    
    Parthasarathy Bhuvaragan says:
    
    ====================
    tipc: fix hanging socket connections
    
    This patch series contains fixes for the socket layer to
    prevent hanging / stale connections.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c1be7756284b0fdbfe8aea8da968ce054697e0c5
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Wed Apr 26 10:05:02 2017 +0200

    tipc: close the connection if protocol messages contain errors
    
    When a socket is shutting down, we notify the peer node about the
    connection termination by reusing an incoming message if possible.
    If the last received message was a connection acknowledgment
    message, we reverse this message and set the error code to
    TIPC_ERR_NO_PORT and send it to peer.
    
    In tipc_sk_proto_rcv(), we never check for message errors while
    processing the connection acknowledgment or probe messages. Thus
    this message performs the usual flow control accounting and leaves
    the session hanging.
    
    In this commit, we terminate the connection when we receive such
    error messages.
    
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4e0df4951e9ecb7ec026a1330ed59f12e8937a95
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Wed Apr 26 10:05:01 2017 +0200

    tipc: improve error validations for sockets in CONNECTING state
    
    Until now, the checks for sockets in CONNECTING state was based on
    the assumption that the incoming message was always from the
    peer's accepted data socket.
    
    However an application using a non-blocking socket sends an implicit
    connect, this socket which is in CONNECTING state can receive error
    messages from the peer's listening socket. As we discard these
    messages, the application socket hangs as there due to inactivity.
    In addition to this, there are other places where we process errors
    but do not notify the user.
    
    In this commit, we process such incoming error messages and notify
    our users about them using sk_state_change().
    
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 42b531de17d2f6bb9293f23398f6d9bb94635c3e
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Wed Apr 26 10:05:00 2017 +0200

    tipc: Fix missing connection request handling
    
    In filter_connect, we use waitqueue_active() to check for any
    connections to wakeup. But waitqueue_active() is missing memory
    barriers while accessing the critical sections, leading to
    inconsistent results.
    
    In this commit, we replace this with an SMP safe wq_has_sleeper()
    using the generic socket callback sk_data_ready().
    
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6862fa9077dea0ec2ba5e6ea7c7f90b786288596
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Feb 24 11:10:48 2016 -0500

    tipc: fix crash during node removal
    
    commit d25a01257e422a4bdeb426f69529d57c73b235fe upstream.
    
    When the TIPC module is unloaded, we have identified a race condition
    that allows a node reference counter to go to zero and the node instance
    being freed before the node timer is finished with accessing it. This
    leads to occasional crashes, especially in multi-namespace environments.
    
    The scenario goes as follows:
    
    CPU0:(node_stop)                       CPU1:(node_timeout)  // ref == 2
    
    1:                                          if(!mod_timer())
    2: if (del_timer())
    3:   tipc_node_put()                                        // ref -> 1
    4: tipc_node_put()                                          // ref -> 0
    5:   kfree_rcu(node);
    6:                                               tipc_node_get(node)
    7:                                               // BOOM!
    
    We now clean up this functionality as follows:
    
    1) We remove the node pointer from the node lookup table before we
       attempt deactivating the timer. This way, we reduce the risk that
       tipc_node_find() may obtain a valid pointer to an instance marked
       for deletion; a harmless but undesirable situation.
    
    2) We use del_timer_sync() instead of del_timer() to safely deactivate
       the node timer without any risk that it might be reactivated by the
       timeout handler. There is no risk of deadlock here, since the two
       functions never touch the same spinlocks.
    
    3: We remove a pointless tipc_node_get() + tipc_node_put() from the
       timeout handler.
    
    Reported-by: Zhijiang Hu <huzhijiang@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fc08b197bb8c3bebda27b9e9884aaf7557fab53f
Merge: ea3a8596a0b3 105f5528b9bb
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Apr 26 13:42:32 2017 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) MLX5 bug fixes from Saeed Mahameed et al:
         - released wrong resources when firmware timeout happens
         - fix wrong check for encapsulation size limits
         - UAR memory leak
         - ETHTOOL_GRXCLSRLALL failed to fill in info->data
    
     2) Don't cache l3mdev on mis-matches local route, causes net devices to
        leak refs. From Robert Shearman.
    
     3) Handle fragmented SKBs properly in macsec driver, the problem is
        that we were mis-sizing the sgvec table. From Jason A. Donenfeld.
    
     4) We cannot have checksum offload enabled for inner UDP tunneled
        packet during IPSEC, from Ansis Atteka.
    
     5) Fix double SKB free in ravb driver, from Dan Carpenter.
    
     6) Fix CPU port handling in b53 DSA driver, from Florian Dainelli.
    
     7) Don't use on-stack buffers for usb_control_msg() in CAN usb driver,
        from Maksim Salau.
    
     8) Fix device leak in macvlan driver, from Herbert Xu. We have to purge
        the broadcast queue properly on port destroy.
    
     9) Fix tx ring entry limit on EF10 devices in sfc driver. From Bert
        Kenward.
    
    10) Fix memory leaks in team driver, from Pan Bian.
    
    11) Don't setup ipv6_stub before it can be actually used, from Paolo
        Abeni.
    
    12) Fix tipc socket flow control accounting, from Parthasarathy
        Bhuvaragan.
    
    13) Fix crash on module unload in hso driver, from Andreas Kemnade.
    
    14) Fix purging of bridge multicast entries, the problem is that if we
        don't defer it to ndo_uninit it's possible for new entries to get
        added after we purge. Fix from Xin Long.
    
    15) Don't return garbage for PACKET_HDRLEN getsockopt, from Alexander
        Potapenko.
    
    16) Fix autoneg stall properly in PHY layer, and revert micrel driver
        change that was papering over it. From Alexander Kochetkov.
    
    17) Don't dereference an ipv4 route as an ipv6 one in the ip6_tunnnel
        code, from Cong Wang.
    
    18) Clear out the congestion control private of the TCP socket in all of
        the right places, from Wei Wang.
    
    19) rawv6_ioctl measures SKB length incorrectly, fix from Jamie
        Bainbridge.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (41 commits)
      ipv6: check raw payload size correctly in ioctl
      tcp: memset ca_priv data to 0 properly
      ipv6: check skb->protocol before lookup for nexthop
      net: core: Prevent from dereferencing null pointer when releasing SKB
      macsec: dynamically allocate space for sglist
      Revert "phy: micrel: Disable auto negotiation on startup"
      net: phy: fix auto-negotiation stall due to unavailable interrupt
      net/packet: check length in getsockopt() called with PACKET_HDRLEN
      net: ipv6: regenerate host route if moved to gc list
      bridge: move bridge multicast cleanup to ndo_uninit
      ipv6: fix source routing
      qed: Fix error in the dcbx app meta data initialization.
      netvsc: fix calculation of available send sections
      net: hso: fix module unloading
      tipc: fix socket flow control accounting error at tipc_recv_stream
      tipc: fix socket flow control accounting error at tipc_send_stream
      ipv6: move stub initialization after ipv6 setup completion
      team: fix memory leaks
      sfc: tx ring can only have 2048 entries for all EF10 NICs
      macvlan: Fix device ref leak when purging bc_queue
      ...

commit 05ff8378975a9d5fdde19104b62163d2902926fb
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Mon Apr 24 15:00:43 2017 +0200

    tipc: fix socket flow control accounting error at tipc_recv_stream
    
    Until now in tipc_recv_stream(), we update the received
    unacknowledged bytes based on a stack variable and not based on the
    actual message size.
    If the user buffer passed at tipc_recv_stream() is smaller than the
    received skb, the size variable in stack differs from the actual
    message size in the skb. This leads to a flow control accounting
    error causing permanent congestion.
    
    In this commit, we fix this accounting error by always using the
    size of the incoming message.
    
    Fixes: 10724cc7bb78 ("tipc: redesign connection-level flow control")
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3364d61c92ecca7a8da990659c4b0ae1fcf0fcfb
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Mon Apr 24 15:00:42 2017 +0200

    tipc: fix socket flow control accounting error at tipc_send_stream
    
    Until now in tipc_send_stream(), we return -1 when the socket
    encounters link congestion even if the socket had successfully
    sent partial data. This is incorrect as the application resends
    the same the partial data leading to data corruption at
    receiver's end.
    
    In this commit, we return the partially sent bytes as the return
    value at link congestion.
    
    Fixes: 10724cc7bb78 ("tipc: redesign connection-level flow control")
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 78302fd405769c9a9379e9adda119d533dce2eed
Author: Pan Bian <bianpan2016@163.com>
Date:   Sun Apr 23 15:09:19 2017 +0800

    tipc: check return value of nlmsg_new
    
    Function nlmsg_new() will return a NULL pointer if there is no enough
    memory, and its return value should be checked before it is used.
    However, in function tipc_nl_node_get_monitor(), the validation of the
    return value of function nlmsg_new() is missed. This patch fixes the
    bug.
    
    Signed-off-by: Pan Bian <bianpan2016@163.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 14a98e659c199edb51d3adc53228b632b5fadc9e
Merge: d6956ac87b5f 66bc1e8d5d1d
Author: David S. Miller <davem@davemloft.net>
Date:   Wed Mar 29 14:10:12 2017 -0700

    Merge branch 'tipc-socketpair'
    
    Parthasarathy Bhuvaragan says:
    
    ====================
    tipc: add socketpair support
    
    We add socketpair support for connection oriented sockets in
    the first patch and for connection less in the second.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 66bc1e8d5d1d156b1e85d8c6925225ad8cbdf523
Author: Erik Hugne <erik.hugne@gmail.com>
Date:   Wed Mar 29 11:22:17 2017 +0200

    tipc: allow rdm/dgram socketpairs
    
    for socketpairs using connectionless transport, we cache
    the respective node local TIPC portid to use in subsequent
    calls to send() in the socket's private data.
    
    Signed-off-by: Erik Hugne <erik.hugne@gmail.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 70b03759e9ecfae400605fa34f3d7154cccbbba3
Author: Erik Hugne <erik.hugne@gmail.com>
Date:   Wed Mar 29 11:22:16 2017 +0200

    tipc: add support for stream/seqpacket socketpairs
    
    sockets A and B are connected back-to-back, similar to what
    AF_UNIX does.
    
    Signed-off-by: Erik Hugne <erik.hugne@gmail.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 30b38236e1313e216a869d38cef867d327a0009b
Merge: 589a1a2e6316 7efea60dcffc
Author: David S. Miller <davem@davemloft.net>
Date:   Tue Mar 28 18:03:33 2017 -0700

    Merge branch 'tipc-subscription-refcount-simplifications'
    
    Parthasarathy Bhuvaragan says:
    
    ====================
    tipc: subscription refcount simplifications
    
    The first patch makes the subscription refcount cleanup lockless and
    the second updates the subscription refcount policy.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7efea60dcffc151870d1abbfccdb1f11cd4b7f21
Author: Ying Xue <ying.xue@windriver.com>
Date:   Tue Mar 28 12:28:28 2017 +0200

    tipc: adjust the policy of holding subscription kref
    
    When a new subscription object is inserted into name_seq->subscriptions
    list, it's under name_seq->lock protection; when a subscription is
    deleted from the list, it's also under the same lock protection;
    similarly, when accessing a subscription by going through subscriptions
    list, the entire process is also protected by the name_seq->lock.
    
    Therefore, if subscription refcount is increased before it's inserted
    into subscriptions list, and its refcount is decreased after it's
    deleted from the list, it will be unnecessary to hold refcount at all
    before accessing subscription object which is obtained by going through
    subscriptions list under name_seq->lock protection.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 139bb36f754adbf6d3c836db09d6459e25167b38
Author: Ying Xue <ying.xue@windriver.com>
Date:   Tue Mar 28 12:28:27 2017 +0200

    tipc: advance the time of deleting subscription from subscriber->subscrp_list
    
    After a subscription object is created, it's inserted into its
    subscriber subscrp_list list under subscriber lock protection,
    similarly, before it's destroyed, it should be first removed from
    its subscriber->subscrp_list. Since the subscription list is
    accessed with subscriber lock, all the subscriptions are valid
    during the lock duration. Hence in tipc_subscrb_subscrp_delete(), we
    remove subscription get/put and the extra subscriber unlock/lock.
    
    After this change, the subscriptions refcount cleanup is very simple
    and does not access any lock.
    
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f341d9f08ae01d90d8d0c135ae2edf4423e724c9
Merge: 093b995e3b55 68c386590375
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Mar 23 11:29:49 2017 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Several netfilter fixes from Pablo and the crew:
          - Handle fragmented packets properly in netfilter conntrack, from
            Florian Westphal.
          - Fix SCTP ICMP packet handling, from Ying Xue.
          - Fix big-endian bug in nftables, from Liping Zhang.
          - Fix alignment of fake conntrack entry, from Steven Rostedt.
    
     2) Fix feature flags setting in fjes driver, from Taku Izumi.
    
     3) Openvswitch ipv6 tunnel source address not set properly, from Or
        Gerlitz.
    
     4) Fix jumbo MTU handling in amd-xgbe driver, from Thomas Lendacky.
    
     5) sk->sk_frag.page not released properly in some cases, from Eric
        Dumazet.
    
     6) Fix RTNL deadlocks in nl80211, from Johannes Berg.
    
     7) Fix erroneous RTNL lockdep splat in crypto, from Herbert Xu.
    
     8) Cure improper inflight handling during AF_UNIX GC, from Andrey
        Ulanov.
    
     9) sch_dsmark doesn't write to packet headers properly, from Eric
        Dumazet.
    
    10) Fix SCM_TIMESTAMPING_OPT_STATS handling in TCP, from Soheil Hassas
        Yeganeh.
    
    11) Add some IDs for Motorola qmi_wwan chips, from Tony Lindgren.
    
    12) Fix nametbl deadlock in tipc, from Ying Xue.
    
    13) GRO and LRO packets not counted correctly in mlx5 driver, from Gal
        Pressman.
    
    14) Fix reset of internal PHYs in bcmgenet, from Doug Berger.
    
    15) Fix hashmap allocation handling, from Alexei Starovoitov.
    
    16) nl_fib_input() needs stronger netlink message length checking, from
        Eric Dumazet.
    
    17) Fix double-free of sk->sk_filter during sock clone, from Daniel
        Borkmann.
    
    18) Fix RX checksum offloading in aquantia driver, from Pavel Belous.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (85 commits)
      net:ethernet:aquantia: Fix for RX checksum offload.
      amd-xgbe: Fix the ECC-related bit position definitions
      sfc: cleanup a condition in efx_udp_tunnel_del()
      Bluetooth: btqcomsmd: fix compile-test dependency
      inet: frag: release spinlock before calling icmp_send()
      tcp: initialize icsk_ack.lrcvtime at session start time
      genetlink: fix counting regression on ctrl_dumpfamily()
      socket, bpf: fix sk_filter use after free in sk_clone_lock
      ipv4: provide stronger user input validation in nl_fib_input()
      bpf: fix hashmap extra_elems logic
      enic: update enic maintainers
      net: bcmgenet: remove bcmgenet_internal_phy_setup()
      ipv6: make sure to initialize sockc.tsflags before first use
      fjes: Do not load fjes driver if extended socket device is not power on.
      fjes: Do not load fjes driver if system does not have extended socket device.
      net/mlx5e: Count LRO packets correctly
      net/mlx5e: Count GSO packets correctly
      net/mlx5: Increase number of max QPs in default profile
      net/mlx5e: Avoid supporting udp tunnel port ndo for VF reps
      net/mlx5e: Use the proper UAPI values when offloading TC vlan actions
      ...

commit 557d054c01da0337ca81de9e9d9206d57245b57e
Author: Ying Xue <ying.xue@windriver.com>
Date:   Tue Mar 21 10:47:49 2017 +0100

    tipc: fix nametbl deadlock at tipc_nametbl_unsubscribe
    
    Until now, tipc_nametbl_unsubscribe() is called at subscriptions
    reference count cleanup. Usually the subscriptions cleanup is
    called at subscription timeout or at subscription cancel or at
    subscriber delete.
    
    We have ignored the possibility of this being called from other
    locations, which causes deadlock as we try to grab the
    tn->nametbl_lock while holding it already.
    
       CPU1:                             CPU2:
    ----------                     ----------------
    tipc_nametbl_publish
    spin_lock_bh(&tn->nametbl_lock)
    tipc_nametbl_insert_publ
    tipc_nameseq_insert_publ
    tipc_subscrp_report_overlap
    tipc_subscrp_get
    tipc_subscrp_send_event
                                 tipc_close_conn
                                 tipc_subscrb_release_cb
                                 tipc_subscrb_delete
                                 tipc_subscrp_put
    tipc_subscrp_put
    tipc_subscrp_kref_release
    tipc_nametbl_unsubscribe
    spin_lock_bh(&tn->nametbl_lock)
    <<grab nametbl_lock again>>
    
       CPU1:                              CPU2:
    ----------                     ----------------
    tipc_nametbl_stop
    spin_lock_bh(&tn->nametbl_lock)
    tipc_purge_publications
    tipc_nameseq_remove_publ
    tipc_subscrp_report_overlap
    tipc_subscrp_get
    tipc_subscrp_send_event
                                 tipc_close_conn
                                 tipc_subscrb_release_cb
                                 tipc_subscrb_delete
                                 tipc_subscrp_put
    tipc_subscrp_put
    tipc_subscrp_kref_release
    tipc_nametbl_unsubscribe
    spin_lock_bh(&tn->nametbl_lock)
    <<grab nametbl_lock again>>
    
    In this commit, we advance the calling of tipc_nametbl_unsubscribe()
    from the refcount cleanup to the intended callers.
    
    Fixes: d094c4d5f5c7 ("tipc: add subscription refcount to avoid invalid delete")
    Reported-by: John Thompson <thompa.atl@gmail.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 681a55d71799b575f46fe94121728cf67460d1c3
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Feb 23 11:10:31 2017 -0500

    tipc: move premature initilalization of stack variables
    
    In the function tipc_rcv() we initialize a couple of stack variables
    from the message header before that same header has been validated.
    In rare cases when the arriving header is non-linar, the validation
    function itself may linearize the buffer by calling skb_may_pull(),
    while the wrongly initialized stack fields are not updated accordingly.
    
    We fix this in this commit.
    
    Reported-by: Matthew Wong <mwong@sonusnet.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit cd53924265a9d328af37722c6b682e4ea793d04e
Author: Michal Kubeček <mkubecek@suse.cz>
Date:   Fri Dec 2 09:33:41 2016 +0100

    tipc: check minimum bearer MTU
    
    commit 3de81b758853f0b29c61e246679d20b513c4cfec upstream.
    
    Qian Zhang (张谦) reported a potential socket buffer overflow in
    tipc_msg_build() which is also known as CVE-2016-8632: due to
    insufficient checks, a buffer overflow can occur if MTU is too short for
    even tipc headers. As anyone can set device MTU in a user/net namespace,
    this issue can be abused by a regular user.
    
    As agreed in the discussion on Ben Hutchings' original patch, we should
    check the MTU at the moment a bearer is attached rather than for each
    processed packet. We also need to repeat the check when bearer MTU is
    adjusted to new device MTU. UDP case also needs a check to avoid
    overflow when calculating bearer MTU.
    
    Fixes: b97bf3fd8f6a ("[TIPC] Initial merge")
    Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
    Reported-by: Qian Zhang (张谦) <zhangqian-c@360.cn>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [bwh: Backported to 3.16:
     - Adjust context
     - Duplicate macro definitions in bearer.h to avoid mutual inclusion
     - NETDEV_DOWN and NETDEV_CHANGEMTU cases in net notifier were combined
     - Drop changes in udp_media.c]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 29273d459fb00a86bfb1ffed026033b152a99870
Author: Michal Kubeček <mkubecek@suse.cz>
Date:   Fri Dec 2 09:33:41 2016 +0100

    tipc: check minimum bearer MTU
    
    commit 3de81b758853f0b29c61e246679d20b513c4cfec upstream.
    
    Qian Zhang (张谦) reported a potential socket buffer overflow in
    tipc_msg_build() which is also known as CVE-2016-8632: due to
    insufficient checks, a buffer overflow can occur if MTU is too short for
    even tipc headers. As anyone can set device MTU in a user/net namespace,
    this issue can be abused by a regular user.
    
    As agreed in the discussion on Ben Hutchings' original patch, we should
    check the MTU at the moment a bearer is attached rather than for each
    processed packet. We also need to repeat the check when bearer MTU is
    adjusted to new device MTU. UDP case also needs a check to avoid
    overflow when calculating bearer MTU.
    
    Fixes: b97bf3fd8f6a ("[TIPC] Initial merge")
    Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
    Reported-by: Qian Zhang (张谦) <zhangqian-c@360.cn>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [bwh: Backported to 3.2:
     - Adjust filename, context
     - Duplicate macro definitions in bearer.h to avoid mutual inclusion
     - NETDEV_CHANGEMTU and NETDEV_CHANGEADDR cases in net notifier were combined
     - Drop changes in udp_media.c]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 40f9f439706073b4b0a654b3b99e18296b7990b3
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Sat Feb 11 19:26:46 2017 +0800

    tipc: Fix tipc_sk_reinit race conditions
    
    There are two problems with the function tipc_sk_reinit.  Firstly
    it's doing a manual walk over an rhashtable.  This is broken as
    an rhashtable can be resized and if you manually walk over it
    during a resize then you may miss entries.
    
    Secondly it's missing memory barriers as previously the code used
    spinlocks which provide the barriers implicitly.
    
    This patch fixes both problems.
    
    Fixes: 07f6c4bc048a ("tipc: convert tipc reference table to...")
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3c7a9f32f9392c9dfce24f33bdc6799852903e27
Merge: 747ae0a96f1a bf3f14d6342c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Feb 16 08:37:18 2017 -0800

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) In order to avoid problems in the future, make cgroup bpf overriding
        explicit using BPF_F_ALLOW_OVERRIDE. From Alexei Staovoitov.
    
     2) LLC sets skb->sk without proper skb->destructor and this explodes,
        fix from Eric Dumazet.
    
     3) Make sure when we have an ipv4 mapped source address, the
        destination is either also an ipv4 mapped address or
        ipv6_addr_any(). Fix from Jonathan T. Leighton.
    
     4) Avoid packet loss in fec driver by programming the multicast filter
        more intelligently. From Rui Sousa.
    
     5) Handle multiple threads invoking fanout_add(), fix from Eric
        Dumazet.
    
     6) Since we can invoke the TCP input path in process context, without
        BH being disabled, we have to accomodate that in the locking of the
        TCP probe. Also from Eric Dumazet.
    
     7) Fix erroneous emission of NETEVENT_DELAY_PROBE_TIME_UPDATE when we
        aren't even updating that sysctl value. From Marcus Huewe.
    
     8) Fix endian bugs in ibmvnic driver, from Thomas Falcon.
    
    [ This is the second version of the pull that reverts the nested
      rhashtable changes that looked a bit too scary for this late in the
      release  - Linus ]
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (27 commits)
      rhashtable: Revert nested table changes.
      ibmvnic: Fix endian errors in error reporting output
      ibmvnic: Fix endian error when requesting device capabilities
      net: neigh: Fix netevent NETEVENT_DELAY_PROBE_TIME_UPDATE notification
      net: xilinx_emaclite: fix freezes due to unordered I/O
      net: xilinx_emaclite: fix receive buffer overflow
      bpf: kernel header files need to be copied into the tools directory
      tcp: tcp_probe: use spin_lock_bh()
      uapi: fix linux/if_pppol2tp.h userspace compilation errors
      packet: fix races in fanout_add()
      ibmvnic: Fix initial MTU settings
      net: ethernet: ti: cpsw: fix cpsw assignment in resume
      kcm: fix a null pointer dereference in kcm_sendmsg()
      net: fec: fix multicast filtering hardware setup
      ipv6: Handle IPv4-mapped src to in6addr_any dst.
      ipv6: Inhibit IPv4-mapped src address on the wire.
      net/mlx5e: Disable preemption when doing TC statistics upcall
      rhashtable: Add nested tables
      tipc: Fix tipc_sk_reinit race conditions
      gfs2: Use rhashtable walk interface in glock_hash_walk
      ...

commit 9dbbfb0ab6680c6a85609041011484e6658e7d3c
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Sat Feb 11 19:26:46 2017 +0800

    tipc: Fix tipc_sk_reinit race conditions
    
    There are two problems with the function tipc_sk_reinit.  Firstly
    it's doing a manual walk over an rhashtable.  This is broken as
    an rhashtable can be resized and if you manually walk over it
    during a resize then you may miss entries.
    
    Secondly it's missing memory barriers as previously the code used
    spinlocks which provide the barriers implicitly.
    
    This patch fixes both problems.
    
    Fixes: 07f6c4bc048a ("tipc: convert tipc reference table to...")
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 087e1f324ea2685122c6c9267ffd9cf8b474ac23
Author: John Johansen <john.johansen@canonical.com>
Date:   Sun Jun 8 11:20:54 2014 -0700

    apparmor: fix uninitialized lsm_audit member
    
    commit b6b1b81b3afba922505b57f4c812bba022f7c4a9 upstream.
    
    BugLink: http://bugs.launchpad.net/bugs/1268727
    
    The task field in the lsm_audit struct needs to be initialized if
    a change_hat fails, otherwise the following oops will occur
    
    BUG: unable to handle kernel paging request at 0000002fbead7d08
    IP: [<ffffffff8171153e>] _raw_spin_lock+0xe/0x50
    PGD 1e3f35067 PUD 0
    Oops: 0002 [#1] SMP
    Modules linked in: pppox crc_ccitt p8023 p8022 psnap llc ax25 btrfs raid6_pq xor xfs libcrc32c dm_multipath scsi_dh kvm_amd dcdbas kvm microcode amd64_edac_mod joydev edac_core psmouse edac_mce_amd serio_raw k10temp sp5100_tco i2c_piix4 ipmi_si ipmi_msghandler acpi_power_meter mac_hid lp parport hid_generic usbhid hid pata_acpi mpt2sas ahci raid_class pata_atiixp bnx2 libahci scsi_transport_sas [last unloaded: tipc]
    CPU: 2 PID: 699 Comm: changehat_twice Tainted: GF          O 3.13.0-7-generic #25-Ubuntu
    Hardware name: Dell Inc. PowerEdge R415/08WNM9, BIOS 1.8.6 12/06/2011
    task: ffff8802135c6000 ti: ffff880212986000 task.ti: ffff880212986000
    RIP: 0010:[<ffffffff8171153e>]  [<ffffffff8171153e>] _raw_spin_lock+0xe/0x50
    RSP: 0018:ffff880212987b68  EFLAGS: 00010006
    RAX: 0000000000020000 RBX: 0000002fbead7500 RCX: 0000000000000000
    RDX: 0000000000000292 RSI: ffff880212987ba8 RDI: 0000002fbead7d08
    RBP: ffff880212987b68 R08: 0000000000000246 R09: ffff880216e572a0
    R10: ffffffff815fd677 R11: ffffea0008469580 R12: ffffffff8130966f
    R13: ffff880212987ba8 R14: 0000002fbead7d08 R15: ffff8800d8c6b830
    FS:  00002b5e6c84e7c0(0000) GS:ffff880216e40000(0000) knlGS:0000000055731700
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000002fbead7d08 CR3: 000000021270f000 CR4: 00000000000006e0
    Stack:
     ffff880212987b98 ffffffff81075f17 ffffffff8130966f 0000000000000009
     0000000000000000 0000000000000000 ffff880212987bd0 ffffffff81075f7c
     0000000000000292 ffff880212987c08 ffff8800d8c6b800 0000000000000026
    Call Trace:
     [<ffffffff81075f17>] __lock_task_sighand+0x47/0x80
     [<ffffffff8130966f>] ? apparmor_cred_prepare+0x2f/0x50
     [<ffffffff81075f7c>] do_send_sig_info+0x2c/0x80
     [<ffffffff81075fee>] send_sig_info+0x1e/0x30
     [<ffffffff8130242d>] aa_audit+0x13d/0x190
     [<ffffffff8130c1dc>] aa_audit_file+0xbc/0x130
     [<ffffffff8130966f>] ? apparmor_cred_prepare+0x2f/0x50
     [<ffffffff81304cc2>] aa_change_hat+0x202/0x530
     [<ffffffff81308fc6>] aa_setprocattr_changehat+0x116/0x1d0
     [<ffffffff8130a11d>] apparmor_setprocattr+0x25d/0x300
     [<ffffffff812cee56>] security_setprocattr+0x16/0x20
     [<ffffffff8121fc87>] proc_pid_attr_write+0x107/0x130
     [<ffffffff811b7604>] vfs_write+0xb4/0x1f0
     [<ffffffff811b8039>] SyS_write+0x49/0xa0
     [<ffffffff8171a1bf>] tracesys+0xe1/0xe6
    
    Signed-off-by: John Johansen <john.johansen@canonical.com>
    Acked-by: Seth Arnold <seth.arnold@canonical.com>
    Acked-by: Jeff Mahoney <jeffm@suse.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit a08ef4768f479a712f80426fba42d16253feb37c
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue Jan 24 12:49:35 2017 +0300

    tipc: uninitialized return code in tipc_setsockopt()
    
    We shuffled some code around and added some new case statements here and
    now "res" isn't initialized on all paths.
    
    Fixes: 01fd12bb189a ("tipc: make replicast a user selectable option")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 04d7f1fb7d25256d8c21b78c7d46193b4a7fabfe
Merge: 294628c1fe66 35e22e49a5d6
Author: David S. Miller <davem@davemloft.net>
Date:   Tue Jan 24 16:14:59 2017 -0500

    Merge branch 'tipc-topology-fixes'
    
    Parthasarathy Bhuvaragan says:
    
    ====================
    tipc: topology server fixes for nametable soft lockup
    
    In this series, we revert the commit 333f796235a527 ("tipc: fix a
    race condition leading to subscriber refcnt bug") and provide an
    alternate solution to fix the race conditions in commits 2-4.
    
    We have to do this as the above commit introduced a nametbl soft
    lockup at module exit as described by patch#4.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 35e22e49a5d6a741ebe7f2dd280b2052c3003ef7
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Jan 24 13:00:48 2017 +0100

    tipc: fix cleanup at module unload
    
    In tipc_server_stop(), we iterate over the connections with limiting
    factor as server's idr_in_use. We ignore the fact that this variable
    is decremented in tipc_close_conn(), leading to premature exit.
    
    In this commit, we iterate until the we have no connections left.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Tested-by: John Thompson <thompa.atl@gmail.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4c887aa65d38633885010277f3482400681be719
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Jan 24 13:00:47 2017 +0100

    tipc: ignore requests when the connection state is not CONNECTED
    
    In tipc_conn_sendmsg(), we first queue the request to the outqueue
    followed by the connection state check. If the connection is not
    connected, we should not queue this message.
    
    In this commit, we reject the messages if the connection state is
    not CF_CONNECTED.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Tested-by: John Thompson <thompa.atl@gmail.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9dc3abdd1f7ea524e8552e0a3ef01219892ed1f4
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Jan 24 13:00:46 2017 +0100

    tipc: fix nametbl_lock soft lockup at module exit
    
    Commit 333f796235a527 ("tipc: fix a race condition leading to
    subscriber refcnt bug") reveals a soft lockup while acquiring
    nametbl_lock.
    
    Before commit 333f796235a527, we call tipc_conn_shutdown() from
    tipc_close_conn() in the context of tipc_topsrv_stop(). In that
    context, we are allowed to grab the nametbl_lock.
    
    Commit 333f796235a527, moved tipc_conn_release (renamed from
    tipc_conn_shutdown) to the connection refcount cleanup. This allows
    either tipc_nametbl_withdraw() or tipc_topsrv_stop() to the cleanup.
    
    Since tipc_exit_net() first calls tipc_topsrv_stop() and then
    tipc_nametble_withdraw() increases the chances for the later to
    perform the connection cleanup.
    
    The soft lockup occurs in the call chain of tipc_nametbl_withdraw(),
    when it performs the tipc_conn_kref_release() as it tries to grab
    nametbl_lock again while holding it already.
    tipc_nametbl_withdraw() grabs nametbl_lock
      tipc_nametbl_remove_publ()
        tipc_subscrp_report_overlap()
          tipc_subscrp_send_event()
            tipc_conn_sendmsg()
              << if (con->flags != CF_CONNECTED) we do conn_put(),
                 triggering the cleanup as refcount=0. >>
              tipc_conn_kref_release
                tipc_sock_release
                  tipc_conn_release
                    tipc_subscrb_delete
                      tipc_subscrp_delete
                        tipc_nametbl_unsubscribe << Soft Lockup >>
    
    The previous changes in this series fixes the race conditions fixed
    by commit 333f796235a527. Hence we can now revert the commit.
    
    Fixes: 333f796235a52727 ("tipc: fix a race condition leading to subscriber refcnt bug")
    Reported-and-Tested-by: John Thompson <thompa.atl@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit fc0adfc8fd18b61b6f7a3f28b429e134d6f3a008
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Jan 24 13:00:45 2017 +0100

    tipc: fix connection refcount error
    
    Until now, the generic server framework maintains the connection
    id's per subscriber in server's conn_idr. At tipc_close_conn, we
    remove the connection id from the server list, but the connection is
    valid until we call the refcount cleanup. Hence we have a window
    where the server allocates the same connection to an new subscriber
    leading to inconsistent reference count. We have another refcount
    warning we grab the refcount in tipc_conn_lookup() for connections
    with flag with CF_CONNECTED not set. This usually occurs at shutdown
    when the we stop the topology server and withdraw TIPC_CFG_SRV
    publication thereby triggering a withdraw message to subscribers.
    
    In this commit, we:
    1. remove the connection from the server list at recount cleanup.
    2. grab the refcount for a connection only if CF_CONNECTED is set.
    
    Tested-by: John Thompson <thompa.atl@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d094c4d5f5c7e1b225e94227ca3f007be3adc4e8
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Jan 24 13:00:44 2017 +0100

    tipc: add subscription refcount to avoid invalid delete
    
    Until now, the subscribers keep track of the subscriptions using
    reference count at subscriber level. At subscription cancel or
    subscriber delete, we delete the subscription only if the timer
    was pending for the subscription. This approach is incorrect as:
    1. del_timer() is not SMP safe, if on CPU0 the check for pending
       timer returns true but CPU1 might schedule the timer callback
       thereby deleting the subscription. Thus when CPU0 is scheduled,
       it deletes an invalid subscription.
    2. We export tipc_subscrp_report_overlap(), which accesses the
       subscription pointer multiple times. Meanwhile the subscription
       timer can expire thereby freeing the subscription and we might
       continue to access the subscription pointer leading to memory
       violations.
    
    In this commit, we introduce subscription refcount to avoid deleting
    an invalid subscription.
    
    Reported-and-Tested-by: John Thompson <thompa.atl@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 93f955aad4bacee5acebad141d1a03cd51f27b4e
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Jan 24 13:00:43 2017 +0100

    tipc: fix nametbl_lock soft lockup at node/link events
    
    We trigger a soft lockup as we grab nametbl_lock twice if the node
    has a pending node up/down or link up/down event while:
    - we process an incoming named message in tipc_named_rcv() and
      perform an tipc_update_nametbl().
    - we have pending backlog items in the name distributor queue
      during a nametable update using tipc_nametbl_publish() or
      tipc_nametbl_withdraw().
    
    The following are the call chain associated:
    tipc_named_rcv() Grabs nametbl_lock
       tipc_update_nametbl() (publish/withdraw)
         tipc_node_subscribe()/unsubscribe()
           tipc_node_write_unlock()
              << lockup occurs if an outstanding node/link event
                 exits, as we grabs nametbl_lock again >>
    
    tipc_nametbl_withdraw() Grab nametbl_lock
      tipc_named_process_backlog()
        tipc_update_nametbl()
          << rest as above >>
    
    The function tipc_node_write_unlock(), in addition to releasing the
    lock processes the outstanding node/link up/down events. To do this,
    we need to grab the nametbl_lock again leading to the lockup.
    
    In this commit we fix the soft lockup by introducing a fast variant of
    node_unlock(), where we just release the lock. We adapt the
    node_subscribe()/node_unsubscribe() to use the fast variants.
    
    Reported-and-Tested-by: John Thompson <thompa.atl@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8d00e20221f5007cc48a45d9706622df03cf8844
Merge: a5e8c07059d0 01fd12bb189a
Author: David S. Miller <davem@davemloft.net>
Date:   Fri Jan 20 12:10:17 2017 -0500

    Merge branch 'tipc-multicast-through-replication'
    
    Jon Maloy says:
    
    ====================
    tipc: emulate multicast through replication
    
    TIPC multicast messages are currently distributed via L2 broadcast
    or IP multicast to all nodes in the cluster, irrespective of the
    number of real destinations of the message.
    
    In this series we introduce an option to transport messages via
    replication ("replicast") across a selected number of unicast links,
    instead of relying on the underlying media. This option is used when
    true broadcast/multicast is not supported by the media, or when the
    number of true destinations is much smaller than the cluster size.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 01fd12bb189a0772301dd37e9b31e53761269a1b
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Jan 18 13:50:53 2017 -0500

    tipc: make replicast a user selectable option
    
    If the bearer carrying multicast messages supports broadcast, those
    messages will be sent to all cluster nodes, irrespective of whether
    these nodes host any actual destinations socket or not. This is clearly
    wasteful if the cluster is large and there are only a few real
    destinations for the message being sent.
    
    In this commit we extend the eligibility of the newly introduced
    "replicast" transmit option. We now make it possible for a user to
    select which method he wants to be used, either as a mandatory setting
    via setsockopt(), or as a relative setting where we let the broadcast
    layer decide which method to use based on the ratio between cluster
    size and the message's actual number of destination nodes.
    
    In the latter case, a sending socket must stick to a previously
    selected method until it enters an idle period of at least 5 seconds.
    This eliminates the risk of message reordering caused by method change,
    i.e., when changes to cluster size or number of destinations would
    otherwise mandate a new method to be used.
    
    Reviewed-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a853e4c6d0843729e1f25a7a7beff168e1dd7420
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Jan 18 13:50:52 2017 -0500

    tipc: introduce replicast as transport option for multicast
    
    TIPC multicast messages are currently carried over a reliable
    'broadcast link', making use of the underlying media's ability to
    transport packets as L2 broadcast or IP multicast to all nodes in
    the cluster.
    
    When the used bearer is lacking that ability, we can instead emulate
    the broadcast service by replicating and sending the packets over as
    many unicast links as needed to reach all identified destinations.
    We now introduce a new TIPC link-level 'replicast' service that does
    this.
    
    Reviewed-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2ae0b8af1fe35ddaa2e46704ae31a2f9cac0349d
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Jan 18 13:50:51 2017 -0500

    tipc: add functionality to lookup multicast destination nodes
    
    As a further preparation for the upcoming 'replicast' functionality,
    we add some necessary structs and functions for looking up and returning
    a list of all nodes that host destinations for a given multicast message.
    
    Reviewed-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9999974a8318b605ebae08a87e86232659e56a52
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Jan 18 13:50:50 2017 -0500

    tipc: add function for checking broadcast support in bearer
    
    As a preparation for the 'replicast' functionality we are going to
    introduce in the next commits, we need the broadcast base structure to
    store whether bearer broadcast is available at all from the currently
    used bearer or bearers.
    
    We do this by adding a new function tipc_bearer_bcast_support() to
    the bearer layer, and letting the bearer selection function in
    bcast.c use this to give a new boolean field, 'bcast_support' the
    appropriate value.
    
    Reviewed-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4b19a9e20bf99d62e1c47554f8eb2d9f520642ba
Merge: 203f80f1c418 0faa9cb5b383
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Jan 17 09:33:10 2017 -0800

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Handle multicast packets properly in fast-RX path of mac80211, from
        Johannes Berg.
    
     2) Because of a logic bug, the user can't actually force SW
        checksumming on r8152 devices. This makes diagnosis of hw
        checksumming bugs really annoying. Fix from Hayes Wang.
    
     3) VXLAN route lookup does not take the source and destination ports
        into account, which means IPSEC policies cannot be matched properly.
        Fix from Martynas Pumputis.
    
     4) Do proper RCU locking in netvsc callbacks, from Stephen Hemminger.
    
     5) Fix SKB leaks in mlxsw driver, from Arkadi Sharshevsky.
    
     6) If lwtunnel_fill_encap() fails, we do not abort the netlink message
        construction properly in fib_dump_info(), from David Ahern.
    
     7) Do not use kernel stack for DMA buffers in atusb driver, from Stefan
        Schmidt.
    
     8) Openvswitch conntack actions need to maintain a correct checksum,
        fix from Lance Richardson.
    
     9) ax25_disconnect() is missing a check for ax25->sk being NULL, in
        fact it already checks this, but not in all of the necessary spots.
        Fix from Basil Gunn.
    
    10) Action GET operations in the packet scheduler can erroneously bump
        the reference count of the entry, making it unreleasable. Fix from
        Jamal Hadi Salim. Jamal gives a great set of example command lines
        that trigger this in the commit message.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (46 commits)
      net sched actions: fix refcnt when GETing of action after bind
      net/mlx4_core: Eliminate warning messages for SRQ_LIMIT under SRIOV
      net/mlx4_core: Fix when to save some qp context flags for dynamic VST to VGT transitions
      net/mlx4_core: Fix racy CQ (Completion Queue) free
      net: stmmac: don't use netdev_[dbg, info, ..] before net_device is registered
      net/mlx5e: Fix a -Wmaybe-uninitialized warning
      ax25: Fix segfault after sock connection timeout
      bpf: rework prog_digest into prog_tag
      tipc: allocate user memory with GFP_KERNEL flag
      net: phy: dp83867: allow RGMII_TXID/RGMII_RXID interface types
      ip6_tunnel: Account for tunnel header in tunnel MTU
      mld: do not remove mld souce list info when set link down
      be2net: fix MAC addr setting on privileged BE3 VFs
      be2net: don't delete MAC on close on unprivileged BE3 VFs
      be2net: fix status check in be_cmd_pmac_add()
      cpmac: remove hopeless #warning
      ravb: do not use zero-length alignment DMA descriptor
      mlx4: do not call napi_schedule() without care
      openvswitch: maintain correct checksum state in conntrack actions
      tcp: fix tcp_fastopen unaligned access complaints on sparc
      ...

commit 57d5f64d83ab5b5a5118b1597386dd76eaf4340d
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Fri Jan 13 15:46:25 2017 +0100

    tipc: allocate user memory with GFP_KERNEL flag
    
    Until now, we allocate memory always with GFP_ATOMIC flag.
    When the system is under memory pressure and a user tries to send,
    the send fails due to low memory. However, the user application
    can wait for free memory if we allocate it using GFP_KERNEL flag.
    
    In this commit, we use allocate memory with GFP_KERNEL for all user
    allocation.
    
    Reported-by: Rune Torgersen <runet@innovsys.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a88eb6becfa86fd0a05daed27957f5fcfff9f0e0
Merge: aa276dd7b3fc 365ad353c256
Author: David S. Miller <davem@davemloft.net>
Date:   Tue Jan 3 11:13:06 2017 -0500

    Merge branch 'tipc-link-starvation'
    
    Jon Maloy says:
    
    ====================
    tipc: improve interaction socket-link
    
    We fix a very real starvation problem that may occur when a link
    encounters send buffer congestion. At the same time we make the
    interaction between the socket and link layer simpler and more
    consistent.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 365ad353c2564bba8835290061308ba825166b3a
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Tue Jan 3 10:55:11 2017 -0500

    tipc: reduce risk of user starvation during link congestion
    
    The socket code currently handles link congestion by either blocking
    and trying to send again when the congestion has abated, or just
    returning to the user with -EAGAIN and let him re-try later.
    
    This mechanism is prone to starvation, because the wakeup algorithm is
    non-atomic. During the time the link issues a wakeup signal, until the
    socket wakes up and re-attempts sending, other senders may have come
    in between and occupied the free buffer space in the link. This in turn
    may lead to a socket having to make many send attempts before it is
    successful. In extremely loaded systems we have observed latency times
    of several seconds before a low-priority socket is able to send out a
    message.
    
    In this commit, we simplify this mechanism and reduce the risk of the
    described scenario happening. When a message is attempted sent via a
    congested link, we now let it be added to the link's backlog queue
    anyway, thus permitting an oversubscription of one message per source
    socket. We still create a wakeup item and return an error code, hence
    instructing the sender to block or stop sending. Only when enough space
    has been freed up in the link's backlog queue do we issue a wakeup event
    that allows the sender to continue with the next message, if any.
    
    The fact that a socket now can consider a message sent even when the
    link returns a congestion code means that the sending socket code can
    be simplified. Also, since this is a good opportunity to get rid of the
    obsolete 'mtu change' condition in the three socket send functions, we
    now choose to refactor those functions completely.
    
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4d8642d896c53966d32d5e343c3620813dd0e7c8
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Tue Jan 3 10:55:10 2017 -0500

    tipc: modify struct tipc_plist to be more versatile
    
    During multicast reception we currently use a simple linked list with
    push/pop semantics to store port numbers.
    
    We now see a need for a more generic list for storing values of type
    u32. We therefore make some modifications to this list, while replacing
    the prefix 'tipc_plist_' with 'u32_'. We also add a couple of new
    functions which will come to use in the next commits.
    
    Acked-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8c44e1af16b2983b3df93117cd0ca40638998ce3
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Tue Jan 3 10:55:09 2017 -0500

    tipc: unify tipc_wait_for_sndpkt() and tipc_wait_for_sndmsg() functions
    
    The functions tipc_wait_for_sndpkt() and tipc_wait_for_sndmsg() are very
    similar. The latter function is also called from two locations, and
    there will be more in the coming commits, which will all need to test on
    different conditions.
    
    Instead of making yet another duplicates of the function, we now
    introduce a new macro tipc_wait_for_cond() where the wakeup condition
    can be stated as an argument to the call. This macro replaces all
    current and future uses of the two functions, which can now be
    eliminated.
    
    Acked-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8f18e4d03ed8fa5e4a300c94550533bd8ce4ff9a
Merge: 0dad3a3014a0 5799fc905930
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Dec 27 16:04:37 2016 -0800

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Various ipvlan fixes from Eric Dumazet and Mahesh Bandewar.
    
        The most important is to not assume the packet is RX just because
        the destination address matches that of the device. Such an
        assumption causes problems when an interface is put into loopback
        mode.
    
     2) If we retry when creating a new tc entry (because we dropped the
        RTNL mutex in order to load a module, for example) we end up with
        -EAGAIN and then loop trying to replay the request. But we didn't
        reset some state when looping back to the top like this, and if
        another thread meanwhile inserted the same tc entry we were trying
        to, we re-link it creating an enless loop in the tc chain. Fix from
        Daniel Borkmann.
    
     3) There are two different WRITE bits in the MDIO address register for
        the stmmac chip, depending upon the chip variant. Due to a bug we
        could set them both, fix from Hock Leong Kweh.
    
     4) Fix mlx4 bug in XDP_TX handling, from Tariq Toukan.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net:
      net: stmmac: fix incorrect bit set in gmac4 mdio addr register
      r8169: add support for RTL8168 series add-on card.
      net: xdp: remove unused bfp_warn_invalid_xdp_buffer()
      openvswitch: upcall: Fix vlan handling.
      ipv4: Namespaceify tcp_tw_reuse knob
      net: korina: Fix NAPI versus resources freeing
      net, sched: fix soft lockup in tc_classify
      net/mlx4_en: Fix user prio field in XDP forward
      tipc: don't send FIN message from connectionless socket
      ipvlan: fix multicast processing
      ipvlan: fix various issues in ipvlan_process_multicast()

commit 693c56491fb720087437a635e6eaf440659b922f
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Dec 22 07:22:29 2016 -0500

    tipc: don't send FIN message from connectionless socket
    
    In commit 6f00089c7372 ("tipc: remove SS_DISCONNECTING state") the
    check for socket type is in the wrong place, causing a closing socket
    to always send out a FIN message even when the socket was never
    connected. This is normally harmless, since the destination node for
    such messages most often is zero, and the message will be dropped, but
    it is still a wrong and confusing behavior.
    
    We fix this in this commit.
    
    Reviewed-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 016d02981cceb7b0f3436278b71fe3ea87542e20
Author: Michal Kubeček <mkubecek@suse.cz>
Date:   Wed Dec 14 13:24:58 2016 +0100

    tipc: check minimum bearer MTU
    
    [ Upstream commit 3de81b758853f0b29c61e246679d20b513c4cfec ]
    
    Qian Zhang (张谦) reported a potential socket buffer overflow in
    tipc_msg_build() which is also known as CVE-2016-8632: due to
    insufficient checks, a buffer overflow can occur if MTU is too short for
    even tipc headers. As anyone can set device MTU in a user/net namespace,
    this issue can be abused by a regular user.
    
    As agreed in the discussion on Ben Hutchings' original patch, we should
    check the MTU at the moment a bearer is attached rather than for each
    processed packet. We also need to repeat the check when bearer MTU is
    adjusted to new device MTU. UDP case also needs a check to avoid
    overflow when calculating bearer MTU.
    
    References: CVE-2016-8632
    Fixes: b97bf3fd8f6a ("[TIPC] Initial merge")
    Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
    Reported-by: Qian Zhang (张谦) <zhangqian-c@360.cn>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    
    Conflicts:
            net/tipc/bearer.c
            net/tipc/bearer.h
    due to 1a90632da8c17a27e0c93538ee987764adee43a5: tipc: eliminate remnants of hungarian notation
    and b1c29f6b10d5981c89d3ea9b9991ca97141ed6d0 tipc: simplify resetting and disabling of bearers
    
    Signed-off-by: Philipp Hahn <hahn@univention.de>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>

commit 33844e665104b169a3a7732bdcddb40e4f82b335
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Wed Dec 21 21:55:02 2016 -0500

    [iov_iter] fix iterate_all_kinds() on empty iterators
    
    Problem similar to ones dealt with in "fold checks into iterate_and_advance()"
    and followups, except that in this case we really want to do nothing when
    asked for zero-length operation - unlike zero-length iterate_and_advance(),
    zero-length iterate_all_kinds() has no side effects, and callers are simpler
    that way.
    
    That got exposed when copy_from_iter_full() had been used by tipc, which
    builds an msghdr with zero payload and (now) feeds it to a primitive
    based on iterate_all_kinds() instead of iterate_and_advance().
    
    Reported-by: Jon Maloy <jon.maloy@ericsson.com>
    Tested-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit 4daa2c73eb05aaa93a4409823e2861beb3eb1ed9
Author: Michal Kubeček <mkubecek@suse.cz>
Date:   Fri Dec 2 09:33:41 2016 +0100

    tipc: check minimum bearer MTU
    
    [ Upstream commit 3de81b758853f0b29c61e246679d20b513c4cfec ]
    
    Qian Zhang (张谦) reported a potential socket buffer overflow in
    tipc_msg_build() which is also known as CVE-2016-8632: due to
    insufficient checks, a buffer overflow can occur if MTU is too short for
    even tipc headers. As anyone can set device MTU in a user/net namespace,
    this issue can be abused by a regular user.
    
    As agreed in the discussion on Ben Hutchings' original patch, we should
    check the MTU at the moment a bearer is attached rather than for each
    processed packet. We also need to repeat the check when bearer MTU is
    adjusted to new device MTU. UDP case also needs a check to avoid
    overflow when calculating bearer MTU.
    
    Fixes: b97bf3fd8f6a ("[TIPC] Initial merge")
    Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
    Reported-by: Qian Zhang (张谦) <zhangqian-c@360.cn>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6af2d5fff2fdcd481cb9a4f354a0880142b17c60
Author: Alexey Dobriyan <adobriyan@gmail.com>
Date:   Fri Dec 2 04:21:32 2016 +0300

    netns: fix net_generic() "id - 1" bloat
    
    net_generic() function is both a) inline and b) used ~600 times.
    
    It has the following code inside
    
                    ...
            ptr = ng->ptr[id - 1];
                    ...
    
    "id" is never compile time constant so compiler is forced to subtract 1.
    And those decrements or LEA [r32 - 1] instructions add up.
    
    We also start id'ing from 1 to catch bugs where pernet sybsystem id
    is not initialized and 0. This is quite pointless idea (nothing will
    work or immediate interference with first registered subsystem) in
    general but it hints what needs to be done for code size reduction.
    
    Namely, overlaying allocation of pointer array and fixed part of
    structure in the beginning and using usual base-0 addressing.
    
    Ids are just cookies, their exact values do not matter, so lets start
    with 3 on x86_64.
    
    Code size savings (oh boy): -4.2 KB
    
    As usual, ignore the initial compiler stupidity part of the table.
    
            add/remove: 0/0 grow/shrink: 12/670 up/down: 89/-4297 (-4208)
            function                                     old     new   delta
            tipc_nametbl_insert_publ                    1250    1270     +20
            nlmclnt_lookup_host                          686     703     +17
            nfsd4_encode_fattr                          5930    5941     +11
            nfs_get_client                              1050    1061     +11
            register_pernet_operations                   333     342      +9
            tcf_mirred_init                              843     849      +6
            tcf_bpf_init                                1143    1149      +6
            gss_setup_upcall                             990     994      +4
            idmap_name_to_id                             432     434      +2
            ops_init                                     274     275      +1
            nfsd_inject_forget_client                    259     260      +1
            nfs4_alloc_client                            612     613      +1
            tunnel_key_walker                            164     163      -1
    
                    ...
    
            tipc_bcbase_select_primary                   392     360     -32
            mac80211_hwsim_new_radio                    2808    2767     -41
            ipip6_tunnel_ioctl                          2228    2186     -42
            tipc_bcast_rcv                               715     672     -43
            tipc_link_build_proto_msg                   1140    1089     -51
            nfsd4_lock                                  3851    3796     -55
            tipc_mon_rcv                                1012     956     -56
            Total: Before=156643951, After=156639743, chg -0.00%
    
    Signed-off-by: Alexey Dobriyan <adobriyan@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8bca927f13bc1cebe23a3709af6ce3016400f7ac
Merge: ed8d747fd2b9 b98b0bc8c431
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Dec 2 11:45:27 2016 -0800

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Lots more phydev and probe error path leaks in various drivers by
        Johan Hovold.
    
     2) Fix race in packet_set_ring(), from Philip Pettersson.
    
     3) Use after free in dccp_invalid_packet(), from Eric Dumazet.
    
     4) Signnedness overflow in SO_{SND,RCV}BUFFORCE, also from Eric
        Dumazet.
    
     5) When tunneling between ipv4 and ipv6 we can be left with the wrong
        skb->protocol value as we enter the IPSEC engine and this causes all
        kinds of problems. Set it before the output path does any
        dst_output() calls, from Eli Cooper.
    
     6) bcmgenet uses wrong device struct pointer in DMA API calls, fix from
        Florian Fainelli.
    
     7) Various netfilter nat bug fixes from FLorian Westphal.
    
     8) Fix memory leak in ipvlan_link_new(), from Gao Feng.
    
     9) Locking fixes, particularly wrt. socket lookups, in l2tp from
        Guillaume Nault.
    
    10) Avoid invoking rhash teardowns in atomic context by moving netlink
        cb->done() dump completion from a worker thread. Fix from Herbert
        Xu.
    
    11) Buffer refcount problems in tun and macvtap on errors, from Jason
        Wang.
    
    12) We don't set Kconfig symbol DEFAULT_TCP_CONG properly when the user
        selects BBR. Fix from Julian Wollrath.
    
    13) Fix deadlock in transmit path on altera TSE driver, from Lino
        Sanfilippo.
    
    14) Fix unbalanced reference counting in dsa_switch_tree, from Nikita
        Yushchenko.
    
    15) tc_tunnel_key needs to be properly exported to userspace via uapi,
        fix from Roi Dayan.
    
    16) rds_tcp_init_net() doesn't unregister notifier in error path, fix
        from Sowmini Varadhan.
    
    17) Stale packet header pointer access after pskb_expand_head() in
        genenve driver, fix from Sabrina Dubroca.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (103 commits)
      net: avoid signed overflows for SO_{SND|RCV}BUFFORCE
      geneve: avoid use-after-free of skb->data
      tipc: check minimum bearer MTU
      net: renesas: ravb: unintialized return value
      sh_eth: remove unchecked interrupts for RZ/A1
      net: bcmgenet: Utilize correct struct device for all DMA operations
      NET: usb: qmi_wwan: add support for Telit LE922A PID 0x1040
      cdc_ether: Fix handling connection notification
      ip6_offload: check segs for NULL in ipv6_gso_segment.
      RDS: TCP: unregister_netdevice_notifier() in error path of rds_tcp_init_net
      Revert: "ip6_tunnel: Update skb->protocol to ETH_P_IPV6 in ip6_tnl_xmit()"
      ipv6: Set skb->protocol properly for local output
      ipv4: Set skb->protocol properly for local output
      packet: fix race condition in packet_set_ring
      net: ethernet: altera: TSE: do not use tx queue lock in tx completion handler
      net: ethernet: altera: TSE: Remove unneeded dma sync for tx buffers
      net: ethernet: stmmac: fix of-node and fixed-link-phydev leaks
      net: ethernet: stmmac: platform: fix outdated function header
      net: ethernet: stmmac: dwmac-meson8b: fix probe error path
      net: ethernet: stmmac: dwmac-generic: fix probe error path
      ...

commit 3de81b758853f0b29c61e246679d20b513c4cfec
Author: Michal Kubeček <mkubecek@suse.cz>
Date:   Fri Dec 2 09:33:41 2016 +0100

    tipc: check minimum bearer MTU
    
    Qian Zhang (张谦) reported a potential socket buffer overflow in
    tipc_msg_build() which is also known as CVE-2016-8632: due to
    insufficient checks, a buffer overflow can occur if MTU is too short for
    even tipc headers. As anyone can set device MTU in a user/net namespace,
    this issue can be abused by a regular user.
    
    As agreed in the discussion on Ben Hutchings' original patch, we should
    check the MTU at the moment a bearer is attached rather than for each
    processed packet. We also need to repeat the check when bearer MTU is
    adjusted to new device MTU. UDP case also needs a check to avoid
    overflow when calculating bearer MTU.
    
    Fixes: b97bf3fd8f6a ("[TIPC] Initial merge")
    Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
    Reported-by: Qian Zhang (张谦) <zhangqian-c@360.cn>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2fc8d112d73f604936712c02780b9a8fb402b67c
Merge: faa1fa54fd25 44b911e77793
Author: David S. Miller <davem@davemloft.net>
Date:   Mon Nov 28 15:33:47 2016 -0500

    Merge branch 'mlx4-fixes'
    
    Tariq Toukan says:
    
    ====================
    mlx4 bug fixes for 4.9
    
    This patchset includes 2 bug fixes:
    * In patch 1 we revert the commit that avoids invoking unregister_netdev
    in shutdown flow, as it introduces netdev presence issues where
    it can be accessed unsafely by ndo operations during the flow.
    * Patch 2 is a simple fix for a variable uninitialization issue.
    
    Series generated against net commit:
    6998cc6ec237 tipc: resolve connection flow control compatibility problem
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9590112241baff6f9d0e751f9c8ecacbe591417a
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Nov 25 10:35:02 2016 -0500

    tipc: fix link statistics counter errors
    
    In commit e4bf4f76962b ("tipc: simplify packet sequence number
    handling") we changed the internal representation of the packet
    sequence number counters from u32 to u16, reflecting what is really
    sent over the wire.
    
    Since then some link statistics counters have been displaying incorrect
    values, partially because the counters meant to be used as sequence
    number snapshots are now used as direct counters, stored as u32, and
    partially because some counter updates are just missing in the code.
    
    In this commit we correct this in two ways. First, we base the
    displayed packet sent/received values on direct counters instead
    of as previously a calculated difference between current sequence
    number and a snapshot. Second, we add the missing updates of the
    counters.
    
    This change is compatible with the current netlink API, and requires
    no changes to the user space tools.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a0d60e62ea5c88a9823410e9d0929a513e29dea2
Merge: 30e2b7cfc54c 6998cc6ec237
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Nov 26 13:05:05 2016 -0800

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Fix leak in fsl/fman driver, from Dan Carpenter.
    
     2) Call flow dissector initcall earlier than any networking driver can
        register and start to use it, from Eric Dumazet.
    
     3) Some dup header fixes from Geliang Tang.
    
     4) TIPC link monitoring compat fix from Jon Paul Maloy.
    
     5) Link changes require EEE re-negotiation in bcm_sf2 driver, from
        Florian Fainelli.
    
     6) Fix bogus handle ID passed into tfilter_notify_chain(), from Roman
        Mashak.
    
     7) Fix dump size calculation in rtnl_calcit(), from Zhang Shengju.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (26 commits)
      tipc: resolve connection flow control compatibility problem
      mvpp2: use correct size for memset
      net/mlx5: drop duplicate header delay.h
      net: ieee802154: drop duplicate header delay.h
      ibmvnic: drop duplicate header seq_file.h
      fsl/fman: fix a leak in tgec_free()
      net: ethtool: don't require CAP_NET_ADMIN for ETHTOOL_GLINKSETTINGS
      tipc: improve sanity check for received domain records
      tipc: fix compatibility bug in link monitoring
      net: ethernet: mvneta: Remove IFF_UNICAST_FLT which is not implemented
      dwc_eth_qos: drop duplicate headers
      net sched filters: fix filter handle ID in tfilter_notify_chain()
      net: dsa: bcm_sf2: Ensure we re-negotiate EEE during after link change
      bnxt: do not busy-poll when link is down
      udplite: call proper backlog handlers
      ipv6: bump genid when the IFA_F_TENTATIVE flag is clear
      net/mlx4_en: Free netdev resources under state lock
      net: revert "net: l2tp: Treat NET_XMIT_CN as success in l2tp_eth_dev_xmit"
      rtnetlink: fix the wrong minimal dump size getting from rtnl_calcit()
      bnxt_en: Fix a VXLAN vs GENEVE issue
      ...

commit 6998cc6ec23740347670da13186d2979c5401903
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Nov 24 18:47:07 2016 -0500

    tipc: resolve connection flow control compatibility problem
    
    In commit 10724cc7bb78 ("tipc: redesign connection-level flow control")
    we replaced the previous message based flow control with one based on
    1k blocks. In order to ensure backwards compatibility the mechanism
    falls back to using message as base unit when it senses that the peer
    doesn't support the new algorithm. The default flow control window,
    i.e., how many units can be sent before the sender blocks and waits
    for an acknowledge (aka advertisement) is 512. This was tested against
    the previous version, which uses an acknowledge frequency of on ack per
    256 received message, and found to work fine.
    
    However, we missed the fact that versions older than Linux 3.15 use an
    acknowledge frequency of 512, which is exactly the limit where a 4.6+
    sender will stop and wait for acknowledge. This would also work fine if
    it weren't for the fact that if the first sent message on a 4.6+ server
    side is an empty SYNACK, this one is also is counted as a sent message,
    while it is not counted as a received message on a legacy 3.15-receiver.
    This leads to the sender always being one step ahead of the receiver, a
    scenario causing the sender to block after 512 sent messages, while the
    receiver only has registered 511 read messages. Hence, the legacy
    receiver is not trigged to send an acknowledge, with a permanently
    blocked sender as result.
    
    We solve this deadlock by simply allowing the sender to send one more
    message before it blocks, i.e., by a making minimal change to the
    condition used for determining connection congestion.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d876a4d2afecacf4b4d8b11479e9f1ed0080bb2e
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Nov 23 23:46:09 2016 -0500

    tipc: improve sanity check for received domain records
    
    In commit 35c55c9877f8 ("tipc: add neighbor monitoring framework") we
    added a data area to the link monitor STATE messages under the
    assumption that previous versions did not use any such data area.
    
    For versions older than Linux 4.3 this assumption is not correct. In
    those version, all STATE messages sent out from a node inadvertently
    contain a 16 byte data area containing a string; -a leftover from
    previous RESET messages which were using this during the setup phase.
    This string serves no purpose in STATE messages, and should no be there.
    
    Unfortunately, this data area is delivered to the link monitor
    framework, where a sanity check catches that it is not a correct domain
    record, and drops it. It also issues a rate limited warning about the
    event.
    
    Since such events occur much more frequently than anticipated, we now
    choose to remove the warning in order to not fill the kernel log with
    useless contents. We also make the sanity check stricter, to further
    reduce the risk that such data is inavertently admitted.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f79675563a6bbfc2ff85684bbbaea9ef092664d2
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Nov 23 21:05:26 2016 -0500

    tipc: fix compatibility bug in link monitoring
    
    commit 817298102b0b ("tipc: fix link priority propagation") introduced a
    compatibility problem between TIPC versions newer than Linux 4.6 and
    those older than Linux 4.4. In versions later than 4.4, link STATE
    messages only contain a non-zero link priority value when the sender
    wants the receiver to change its priority. This has the effect that the
    receiver resets itself in order to apply the new priority. This works
    well, and is consistent with the said commit.
    
    However, in versions older than 4.4 a valid link priority is present in
    all sent link STATE messages, leading to cyclic link establishment and
    reset on the 4.6+ node.
    
    We fix this by adding a test that the received value should not only
    be valid, but also differ from the current value in order to cause the
    receiving link endpoint to reset.
    
    Reported-by: Amar Nv <amar.nv005@gmail.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 27e7ab99db51569886f52f9d025473e9f453a67b
Merge: 9c763584b7c8 7082c5c3f240
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Nov 21 13:26:28 2016 -0800

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Clear congestion control state when changing algorithms on an
        existing socket, from Florian Westphal.
    
     2) Fix register bit values in altr_tse_pcs portion of stmmac driver,
        from Jia Jie Ho.
    
     3) Fix PTP handling in stammc driver for GMAC4, from Giuseppe
        CAVALLARO.
    
     4) Fix udplite multicast delivery handling, it ignores the udp_table
        parameter passed into the lookups, from Pablo Neira Ayuso.
    
     5) Synchronize the space estimated by rtnl_vfinfo_size and the space
        actually used by rtnl_fill_vfinfo. From Sabrina Dubroca.
    
     6) Fix memory leak in fib_info when splitting nodes, from Alexander
        Duyck.
    
     7) If a driver does a napi_hash_del() explicitily and not via
        netif_napi_del(), it must perform RCU synchronization as needed. Fix
        this in virtio-net and bnxt drivers, from Eric Dumazet.
    
     8) Likewise, it is not necessary to invoke napi_hash_del() is we are
        also doing neif_napi_del() in the same code path. Remove such calls
        from be2net and cxgb4 drivers, also from Eric Dumazet.
    
     9) Don't allocate an ID in peernet2id_alloc() if the netns is dead,
        from WANG Cong.
    
    10) Fix OF node and device struct leaks in of_mdio, from Johan Hovold.
    
    11) We cannot cache routes in ip6_tunnel when using inherited traffic
        classes, from Paolo Abeni.
    
    12) Fix several crashes and leaks in cpsw driver, from Johan Hovold.
    
    13) Splice operations cannot use freezable blocking calls in AF_UNIX,
        from WANG Cong.
    
    14) Link dump filtering by master device and kind support added an error
        in loop index updates during the dump if we actually do filter, fix
        from Zhang Shengju.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (59 commits)
      tcp: zero ca_priv area when switching cc algorithms
      net: l2tp: Treat NET_XMIT_CN as success in l2tp_eth_dev_xmit
      ethernet: stmmac: make DWMAC_STM32 depend on it's associated SoC
      tipc: eliminate obsolete socket locking policy description
      rtnl: fix the loop index update error in rtnl_dump_ifinfo()
      l2tp: fix racy SOCK_ZAPPED flag check in l2tp_ip{,6}_bind()
      net: macb: add check for dma mapping error in start_xmit()
      rtnetlink: fix FDB size computation
      netns: fix get_net_ns_by_fd(int pid) typo
      af_unix: conditionally use freezable blocking calls in read
      net: ethernet: ti: cpsw: fix fixed-link phy probe deferral
      net: ethernet: ti: cpsw: add missing sanity check
      net: ethernet: ti: cpsw: fix secondary-emac probe error path
      net: ethernet: ti: cpsw: fix of_node and phydev leaks
      net: ethernet: ti: cpsw: fix deferred probe
      net: ethernet: ti: cpsw: fix mdio device reference leak
      net: ethernet: ti: cpsw: fix bad register access in probe error path
      net: sky2: Fix shutdown crash
      cfg80211: limit scan results cache size
      net sched filters: pass netlink message flags in event notification
      ...

commit 51b9a31c42edcd089f5b229633477ab5128faf03
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Sat Nov 19 14:47:07 2016 -0500

    tipc: eliminate obsolete socket locking policy description
    
    The comment block in socket.c describing the locking policy is
    obsolete, and does not reflect current reality. We remove it in this
    commit.
    
    Since the current locking policy is much simpler and follows a
    mainstream approach, we see no need to add a new description.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c7d03a00b56fc23c3a01a8353789ad257363e281
Author: Alexey Dobriyan <adobriyan@gmail.com>
Date:   Thu Nov 17 04:58:21 2016 +0300

    netns: make struct pernet_operations::id unsigned int
    
    Make struct pernet_operations::id unsigned.
    
    There are 2 reasons to do so:
    
    1)
    This field is really an index into an zero based array and
    thus is unsigned entity. Using negative value is out-of-bound
    access by definition.
    
    2)
    On x86_64 unsigned 32-bit data which are mixed with pointers
    via array indexing or offsets added or subtracted to pointers
    are preffered to signed 32-bit data.
    
    "int" being used as an array index needs to be sign-extended
    to 64-bit before being used.
    
            void f(long *p, int i)
            {
                    g(p[i]);
            }
    
      roughly translates to
    
            movsx   rsi, esi
            mov     rdi, [rsi+...]
            call    g
    
    MOVSX is 3 byte instruction which isn't necessary if the variable is
    unsigned because x86_64 is zero extending by default.
    
    Now, there is net_generic() function which, you guessed it right, uses
    "int" as an array index:
    
            static inline void *net_generic(const struct net *net, int id)
            {
                    ...
                    ptr = ng->ptr[id - 1];
                    ...
            }
    
    And this function is used a lot, so those sign extensions add up.
    
    Patch snipes ~1730 bytes on allyesconfig kernel (without all junk
    messing with code generation):
    
            add/remove: 0/0 grow/shrink: 70/598 up/down: 396/-2126 (-1730)
    
    Unfortunately some functions actually grow bigger.
    This is a semmingly random artefact of code generation with register
    allocator being used differently. gcc decides that some variable
    needs to live in new r8+ registers and every access now requires REX
    prefix. Or it is shifted into r12, so [r12+0] addressing mode has to be
    used which is longer than [r8]
    
    However, overall balance is in negative direction:
    
            add/remove: 0/0 grow/shrink: 70/598 up/down: 396/-2126 (-1730)
            function                                     old     new   delta
            nfsd4_lock                                  3886    3959     +73
            tipc_link_build_proto_msg                   1096    1140     +44
            mac80211_hwsim_new_radio                    2776    2808     +32
            tipc_mon_rcv                                1032    1058     +26
            svcauth_gss_legacy_init                     1413    1429     +16
            tipc_bcbase_select_primary                   379     392     +13
            nfsd4_exchange_id                           1247    1260     +13
            nfsd4_setclientid_confirm                    782     793     +11
                    ...
            put_client_renew_locked                      494     480     -14
            ip_set_sockfn_get                            730     716     -14
            geneve_sock_add                              829     813     -16
            nfsd4_sequence_done                          721     703     -18
            nlmclnt_lookup_host                          708     686     -22
            nfsd4_lockt                                 1085    1063     -22
            nfs_get_client                              1077    1050     -27
            tcf_bpf_init                                1106    1076     -30
            nfsd4_encode_fattr                          5997    5930     -67
            Total: Before=154856051, After=154854321, chg -0.00%
    
    Signed-off-by: Alexey Dobriyan <adobriyan@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1c851758edecd1ccbdfed7dcb0e5ee869e94615b
Merge: 169650d3eaf1 f40acbaf425e
Author: David S. Miller <davem@davemloft.net>
Date:   Tue Nov 1 11:53:26 2016 -0400

    Merge branch 'tipc-socket-layer-improvements'
    
    Parthasarathy Bhuvaragan says:
    
    ====================
    tipc: socket layer improvements
    
    The following issues with the current socket layer hinders socket diagnostics
    implementation, which led to this patch series.
    
    1. tipc socket state is derived from multiple variables like
       sock->state, tsk->probing_state and tsk->connected. This style forces
       us to export multiple attributes to the user space, which has to be
       backward compatible.
    
    2. Abuse of sock->state cannot be exported to user-space without
       requiring tipc specific hacks in the user-space.
       - For connection less (CL) sockets sock->state is overloaded to
         tipc state SS_READY.
       - For connection oriented (CO) listening socket sock->state is
         overloaded to tipc state SS_LISTEN.
    
    This series is split into four:
    1. Bug fixes in patch #1,2,3.
    2. Minor cleanups in patch#4-5.
    3. Express all tipc states using a single variable in patch#6-8.
    4. Migrate the new tipc states to sk->sk_state in patch#9-16.
    
    The figures below represents the FSM after this series:
    
    Stream Server Listening Socket:
    +-----------+       +-------------+
    | TIPC_OPEN |------>| TIPC_LISTEN |
    +-----------+       +-------------+
    
    Stream Server Data Socket:
    +-----------+       +------------------+
    | TIPC_OPEN |------>| TIPC_ESTABLISHED |
    +-----------+       +------------------+
                              ^   |
                              |   |
                              |   v
                        +--------------------+
                        | TIPC_DISCONNECTING |
                        +--------------------+
    
    Stream Socket Client:
    +-----------+       +-----------------+
    | TIPC_OPEN |------>| TIPC_CONNECTING |------+
    +-----------+       +-----------------+      |
                                |                |
                                |                |
                                v                |
                        +------------------+     |
                        | TIPC_ESTABLISHED |     |
                        +------------------+     |
                              ^   |              |
                              |   |              |
                              |   v              |
                        +--------------------+   |
                        | TIPC_DISCONNECTING |<--+
                        +--------------------+
    
    NOTE:
    This is just a base refractoring required for socket diagnostics.
    TIPC socket diagnostics support will be introduced in a later series.
    
    v2: - remove extra cast and parenthesis as suggested by David S. Miller in #4.
        - map new tipc state values to tcp states to address Eric Dumazet's concern,
          thus allow the usage of generic sk_* helpers. This is done in patch#10-15.
        - remove TIPC_PROBING state and replace it with probe_unacked flag in #11.
        - replace the TIPC_CLOSING state in v1 with sk_shutdown flag in #14.
        - introduce __tipc_shutdown() to avoid code duplication in #14.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f40acbaf425e88a992ff5d41f6237a8e465de8af
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Nov 1 14:02:49 2016 +0100

    tipc: remove SS_CONNECTED sock state
    
    In this commit, we replace references to sock->state SS_CONNECTE
    with sk_state TIPC_ESTABLISHED.
    
    Finally, the sock->state is no longer explicitly used by tipc.
    The FSM below is for various types of connection oriented sockets.
    
    Stream Server Listening Socket:
    +-----------+       +-------------+
    | TIPC_OPEN |------>| TIPC_LISTEN |
    +-----------+       +-------------+
    
    Stream Server Data Socket:
    +-----------+       +------------------+
    | TIPC_OPEN |------>| TIPC_ESTABLISHED |
    +-----------+       +------------------+
                              ^   |
                              |   |
                              |   v
                        +--------------------+
                        | TIPC_DISCONNECTING |
                        +--------------------+
    
    Stream Socket Client:
    +-----------+       +-----------------+
    | TIPC_OPEN |------>| TIPC_CONNECTING |------+
    +-----------+       +-----------------+      |
                                |                |
                                |                |
                                v                |
                        +------------------+     |
                        | TIPC_ESTABLISHED |     |
                        +------------------+     |
                              ^   |              |
                              |   |              |
                              |   v              |
                        +--------------------+   |
                        | TIPC_DISCONNECTING |<--+
                        +--------------------+
    
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 99a20889816a653e192db23701b0fda00399b91f
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Nov 1 14:02:48 2016 +0100

    tipc: create TIPC_CONNECTING as a new sk_state
    
    In this commit, we create a new tipc socket state TIPC_CONNECTING
    by primarily replacing the SS_CONNECTING with TIPC_CONNECTING.
    
    There is no functional change in this commit.
    
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6f00089c7372ba9732c046fe242301dfb0a13233
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Nov 1 14:02:47 2016 +0100

    tipc: remove SS_DISCONNECTING state
    
    In this commit, we replace the references to SS_DISCONNECTING with
    the combination of sk_state TIPC_DISCONNECTING and flags set in
    sk_shutdown.
    We introduce a new function _tipc_shutdown(), which provides
    the common code required by tipc_release() and tipc_shutdown().
    
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9fd4b070f6311faa7ba1ae746e955fedfbe3e045
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Nov 1 14:02:46 2016 +0100

    tipc: create TIPC_DISCONNECTING as a new sk_state
    
    In this commit, we create a new tipc socket state TIPC_DISCONNECTING in
    sk_state. TIPC_DISCONNECTING is replacing the socket connection status
    update using SS_DISCONNECTING.
    TIPC_DISCONNECTING is set for connection oriented sockets at:
    - tipc_shutdown()
    - connection probe timeout
    - when we receive an error message on the connection.
    
    There is no functional change in this commit.
    
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 438adcaf0df181fb6bf2afa917c741cc8c9241c3
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Nov 1 14:02:45 2016 +0100

    tipc: create TIPC_OPEN as a new sk_state
    
    In this commit, we create a new tipc socket state TIPC_OPEN in
    sk_state. We primarily replace the SS_UNCONNECTED sock->state with
    TIPC_OPEN.
    
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8ea642ee9a0dbcb25aace4cfd0ed41aeee893a7f
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Nov 1 14:02:44 2016 +0100

    tipc: create TIPC_ESTABLISHED as a new sk_state
    
    Until now, tipc maintains probing state for connected sockets in
    tsk->probing_state variable.
    
    In this commit, we express this information as socket states and
    this remove the variable. We set probe_unacked flag when a probe
    is sent out and reset it if we receive a reply. Instead of the
    probing state TIPC_CONN_OK, we create a new state TIPC_ESTABLISHED.
    
    There is no functional change in this commit.
    
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0c288c86928e50d6d8d2efa4ca23dca58d28543e
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Nov 1 14:02:43 2016 +0100

    tipc: create TIPC_LISTEN as a new sk_state
    
    Until now, tipc maintains the socket state in sock->state variable.
    This is used to maintain generic socket states, but in tipc
    we overload it and save tipc socket states like TIPC_LISTEN.
    Other protocols like TCP, UDP store protocol specific states
    in sk->sk_state instead.
    
    In this commit, we :
    - declare a new tipc state TIPC_LISTEN, that replaces SS_LISTEN
    - Create a new function tipc_set_state(), to update sk->sk_state.
    - TIPC_LISTEN state is maintained in sk->sk_state.
    - replace references to SS_LISTEN with TIPC_LISTEN.
    
    There is no functional change in this commit.
    
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c752023aab5856559a295d045530af89cc51df06
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Nov 1 14:02:42 2016 +0100

    tipc: remove socket state SS_READY
    
    Until now, tipc socket state SS_READY declares that the socket is a
    connectionless socket.
    
    In this commit, we remove the state SS_READY and replace it with a
    condition which returns true for datagram / connectionless sockets.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 360aab6b49b93937bafd45034d33e7d44148fe82
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Nov 1 14:02:41 2016 +0100

    tipc: remove probing_intv from tipc_sock
    
    Until now, probing_intv is a variable in struct tipc_sock but is
    always set to a constant CONN_PROBING_INTERVAL. The socket
    connection is probed based on this value.
    
    In this commit, we remove this variable and setup the socket
    timer based on the constant CONN_PROBING_INTERVAL.
    
    There is no functional change in this commit.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d6fb7e9c9946578667283805b9a73f318e3a0554
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Nov 1 14:02:40 2016 +0100

    tipc: remove tsk->connected from tipc_sock
    
    Until now, we determine if a socket is connected or not based on
    tsk->connected, which is set once when the probing state is set
    to TIPC_CONN_OK. It is unset when the sock->state is updated from
    SS_CONNECTED to any other state.
    
    In this commit, we remove connected variable from tipc_sock and
    derive socket connection status from the following condition:
    sock->state == SS_CONNECTED => tsk->connected
    
    There is no functional change in this commit.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 87227fe7e42060af9bc8977fc17427e7c9cadb5d
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Nov 1 14:02:39 2016 +0100

    tipc: remove tsk->connected for connectionless sockets
    
    Until now, for connectionless sockets the peer information during
    connect is stored in tsk->peer and a connection state is set in
    tsk->connected. This is redundant.
    
    In this commit, for connectionless sockets we update:
    - __tipc_sendmsg(), when the destination is NULL the peer existence
      is determined by tsk->peer.family, instead of tsk->connected.
    - tipc_connect(), remove set/unset of tsk->connected.
    Hence tsk->connected is no longer used for connectionless sockets.
    
    There is no functional change in this commit.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit aeda16b6aec88b8b0135d678281e2f20fc9258e6
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Nov 1 14:02:38 2016 +0100

    tipc: rename tsk->remote to tsk->peer for consistent naming
    
    Until now, the peer information for connect is stored in tsk->remote
    but the rest of code uses the name peer for peer/remote.
    
    In this commit, we rename tsk->remote to tsk->peer to align with
    naming convention followed in the rest of the code.
    
    There is no functional change in this commit.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ba8aebe9431a79c627214ddc782c3be9f2617e8d
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Nov 1 14:02:37 2016 +0100

    tipc: rename struct tipc_skb_cb member handle to bytes_read
    
    In this commit, we rename handle to bytes_read indicating the
    purpose of the member.
    
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit cb5da847af4418f91d0e83fc91c2fcb1def5537d
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Nov 1 14:02:36 2016 +0100

    tipc: set kern=0 in sk_alloc() during tipc_accept()
    
    Until now, tipc_accept() calls sk_alloc() with kern=1. This is
    incorrect as the data socket's owner is the user application.
    Thus for these accepted data sockets the network namespace
    refcount is skipped.
    
    In this commit, we fix this by setting kern=0.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4891d8fe16343660b4c1ddbcca4792300b5fd4f4
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Nov 1 14:02:35 2016 +0100

    tipc: wakeup sleeping users at disconnect
    
    Until now, in filter_connect() when we terminate a connection due to
    an error message from peer, we set the socket state to DISCONNECTING.
    
    The socket is notified about this broken connection using EPIPE when
    a user tries to send a message. However if a socket was waiting on a
    poll() while the connection is being terminated, we fail to wakeup
    that socket.
    
    In this commit, we wakeup sleeping sockets at connection termination.
    
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7cf87fa27873a954f2d665dfc61fc22227d96ad8
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Nov 1 14:02:34 2016 +0100

    tipc: return early for non-blocking sockets at link congestion
    
    Until now, in stream/mcast send() we pass the message to the link
    layer even when the link is congested and add the socket to the
    link's wakeup queue. This is unnecessary for non-blocking sockets.
    If a socket is set to non-blocking and sends multicast with zero
    back off time while receiving EAGAIN, we exhaust the memory.
    
    In this commit, we return immediately at stream/mcast send() for
    non-blocking sockets.
    
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2a26d99b251b8625d27aed14e97fc10707a3a81f
Merge: a909d3e63699 fceb9c3e3825
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Oct 29 20:33:20 2016 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
     "Lots of fixes, mostly drivers as is usually the case.
    
       1) Don't treat zero DMA address as invalid in vmxnet3, from Alexey
          Khoroshilov.
    
       2) Fix element timeouts in netfilter's nft_dynset, from Anders K.
          Pedersen.
    
       3) Don't put aead_req crypto struct on the stack in mac80211, from
          Ard Biesheuvel.
    
       4) Several uninitialized variable warning fixes from Arnd Bergmann.
    
       5) Fix memory leak in cxgb4, from Colin Ian King.
    
       6) Fix bpf handling of VLAN header push/pop, from Daniel Borkmann.
    
       7) Several VRF semantic fixes from David Ahern.
    
       8) Set skb->protocol properly in ip6_tnl_xmit(), from Eli Cooper.
    
       9) Socket needs to be locked in udp_disconnect(), from Eric Dumazet.
    
      10) Div-by-zero on 32-bit fix in mlx4 driver, from Eugenia Emantayev.
    
      11) Fix stale link state during failover in NCSCI driver, from Gavin
          Shan.
    
      12) Fix netdev lower adjacency list traversal, from Ido Schimmel.
    
      13) Propvide proper handle when emitting notifications of filter
          deletes, from Jamal Hadi Salim.
    
      14) Memory leaks and big-endian issues in rtl8xxxu, from Jes Sorensen.
    
      15) Fix DESYNC_FACTOR handling in ipv6, from Jiri Bohac.
    
      16) Several routing offload fixes in mlxsw driver, from Jiri Pirko.
    
      17) Fix broadcast sync problem in TIPC, from Jon Paul Maloy.
    
      18) Validate chunk len before using it in SCTP, from Marcelo Ricardo
          Leitner.
    
      19) Revert a netns locking change that causes regressions, from Paul
          Moore.
    
      20) Add recursion limit to GRO handling, from Sabrina Dubroca.
    
      21) GFP_KERNEL in irq context fix in ibmvnic, from Thomas Falcon.
    
      22) Avoid accessing stale vxlan/geneve socket in data path, from
          Pravin Shelar"
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (189 commits)
      geneve: avoid using stale geneve socket.
      vxlan: avoid using stale vxlan socket.
      qede: Fix out-of-bound fastpath memory access
      net: phy: dp83848: add dp83822 PHY support
      enic: fix rq disable
      tipc: fix broadcast link synchronization problem
      ibmvnic: Fix missing brackets in init_sub_crq_irqs
      ibmvnic: Fix releasing of sub-CRQ IRQs in interrupt context
      Revert "ibmvnic: Fix releasing of sub-CRQ IRQs in interrupt context"
      arch/powerpc: Update parameters for csum_tcpudp_magic & csum_tcpudp_nofold
      net/mlx4_en: Save slave ethtool stats command
      net/mlx4_en: Fix potential deadlock in port statistics flow
      net/mlx4: Fix firmware command timeout during interrupt test
      net/mlx4_core: Do not access comm channel if it has not yet been initialized
      net/mlx4_en: Fix panic during reboot
      net/mlx4_en: Process all completions in RX rings after port goes up
      net/mlx4_en: Resolve dividing by zero in 32-bit system
      net/mlx4_core: Change the default value of enable_qos
      net/mlx4_core: Avoid setting ports to auto when only one port type is supported
      net/mlx4_core: Fix the resource-type enum in res tracker to conform to FW spec
      ...

commit 06bd2b1ed04ca9fdbc767859885944a1e8b86b40
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Oct 27 18:51:55 2016 -0400

    tipc: fix broadcast link synchronization problem
    
    In commit 2d18ac4ba745 ("tipc: extend broadcast link initialization
    criteria") we tried to fix a problem with the initial synchronization
    of broadcast link acknowledge values. Unfortunately that solution is
    not sufficient to solve the issue.
    
    We have seen it happen that LINK_PROTOCOL/STATE packets with a valid
    non-zero unicast acknowledge number may bypass BCAST_PROTOCOL
    initialization, NAME_DISTRIBUTOR and other STATE packets with invalid
    broadcast acknowledge numbers, leading to premature opening of the
    broadcast link. When the bypassed packets finally arrive, they are
    inadvertently accepted, and the already correctly initialized
    acknowledge number in the broadcast receive link is overwritten by
    the invalid (zero) value of the said packets. After this the broadcast
    link goes stale.
    
    We now fix this by marking the packets where we know the acknowledge
    value is or may be invalid, and then ignoring the acks from those.
    
    To this purpose, we claim an unused bit in the header to indicate that
    the value is invalid. We set the bit to 1 in the initial BCAST_PROTOCOL
    synchronization packet and all initial ("bulk") NAME_DISTRIBUTOR
    packets, plus those LINK_PROTOCOL packets sent out before the broadcast
    links are fully synchronized.
    
    This minor protocol update is fully backwards compatible.
    
    Reported-by: John Thompson <thompa.atl@gmail.com>
    Tested-by: John Thompson <thompa.atl@gmail.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 29fbff8698fc0ac1a1d74584b258e0bf18b469f9
Merge: c4a86165d1ec 4eb6753c3324
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Oct 13 21:40:23 2016 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Fix various build warnings in tlan/qed/xen-netback drivers, from
        Arnd Bergmann.
    
     2) Propagate proper error code in strparser's strp_recv(), from Geert
        Uytterhoeven.
    
     3) Fix accidental broadcast of RTM_GETTFILTER responses, from Eric
        Dumazret.
    
     4) Need to use list_for_each_entry_safe() in qed driver, from Wei
        Yongjun.
    
     5) Openvswitch 802.1AD bug fixes from Jiri Benc.
    
     6) Cure BUILD_BUG_ON() in mlx5 driver, from Tom Herbert.
    
     7) Fix UDP ipv6 checksumming in netvsc driver, from Stephen Hemminger.
    
     8) stmmac driver fixes from Giuseppe CAVALLARO.
    
     9) Fix access to mangled IP6CB in tcp, from Eric Dumazet.
    
    10) Fix info leaks in tipc and rtnetlink, from Dan Carpenter.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (27 commits)
      net: bridge: add the multicast_flood flag attribute to brport_attrs
      net: axienet: Remove unused parameter from __axienet_device_reset
      liquidio: CN23XX: fix a loop timeout
      net: rtnl: info leak in rtnl_fill_vfinfo()
      tipc: info leak in __tipc_nl_add_udp_addr()
      net: ipv4: Do not drop to make_route if oif is l3mdev
      net: phy: Trigger state machine on state change and not polling.
      ipv6: tcp: restore IP6CB for pktoptions skbs
      netvsc: Remove mistaken udp.h inclusion.
      xen-netback: fix type mismatch warning
      stmmac: fix error check when init ptp
      stmmac: fix ptp init for gmac4
      qed: fix old-style function definition
      netvsc: fix checksum on UDP IPV6
      net_sched: reorder pernet ops and act ops registrations
      xen-netback: fix guest Rx stall detection (after guest Rx refactor)
      drivers/ptp: Fix kernel memory disclosure
      net/mlx5: Add MLX5_ARRAY_SET64 to fix BUILD_BUG_ON
      qmi_wwan: add support for Quectel EC21 and EC25
      openvswitch: add NETIF_F_HW_VLAN_STAG_TX to internal dev
      ...

commit 7307616245babb12c923151d8ef69af02e46c255
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Thu Oct 13 11:06:06 2016 +0300

    tipc: info leak in __tipc_nl_add_udp_addr()
    
    We should clear out the padding and unused struct members so that we
    don't expose stack information to userspace.
    
    Fixes: fdb3accc2c15 ('tipc: add the ability to get UDP options via netlink')
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4be4511af7966b7b0f93d9f129a876458794f2f3
Author: Vegard Nossum <vegard.nossum@oracle.com>
Date:   Sat Jul 23 08:15:04 2016 +0200

    tipc: fix NULL pointer dereference in shutdown()
    
    [ Upstream commit d2fbdf76b85bcdfe57b8ef2ba09d20e8ada79abd ]
    
    tipc_msg_create() can return a NULL skb and if so, we shouldn't try to
    call tipc_node_xmit_skb() on it.
    
        general protection fault: 0000 [#1] PREEMPT SMP KASAN
        CPU: 3 PID: 30298 Comm: trinity-c0 Not tainted 4.7.0-rc7+ #19
        Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Ubuntu-1.8.2-1ubuntu1 04/01/2014
        task: ffff8800baf09980 ti: ffff8800595b8000 task.ti: ffff8800595b8000
        RIP: 0010:[<ffffffff830bb46b>]  [<ffffffff830bb46b>] tipc_node_xmit_skb+0x6b/0x140
        RSP: 0018:ffff8800595bfce8  EFLAGS: 00010246
        RAX: 0000000000000000 RBX: 0000000000000000 RCX: 000000003023b0e0
        RDX: 0000000000000000 RSI: dffffc0000000000 RDI: ffffffff83d12580
        RBP: ffff8800595bfd78 R08: ffffed000b2b7f32 R09: 0000000000000000
        R10: fffffbfff0759725 R11: 0000000000000000 R12: 1ffff1000b2b7f9f
        R13: ffff8800595bfd58 R14: ffffffff83d12580 R15: dffffc0000000000
        FS:  00007fcdde242700(0000) GS:ffff88011af80000(0000) knlGS:0000000000000000
        CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
        CR2: 00007fcddde1db10 CR3: 000000006874b000 CR4: 00000000000006e0
        DR0: 00007fcdde248000 DR1: 00007fcddd73d000 DR2: 00007fcdde248000
        DR3: 0000000000000000 DR6: 00000000ffff0ff0 DR7: 0000000000090602
        Stack:
         0000000000000018 0000000000000018 0000000041b58ab3 ffffffff83954208
         ffffffff830bb400 ffff8800595bfd30 ffffffff8309d767 0000000000000018
         0000000000000018 ffff8800595bfd78 ffffffff8309da1a 00000000810ee611
        Call Trace:
         [<ffffffff830c84a3>] tipc_shutdown+0x553/0x880
         [<ffffffff825b4a3b>] SyS_shutdown+0x14b/0x170
         [<ffffffff8100334c>] do_syscall_64+0x19c/0x410
         [<ffffffff83295ca5>] entry_SYSCALL64_slow_path+0x25/0x25
        Code: 90 00 b4 0b 83 c7 00 f1 f1 f1 f1 4c 8d 6d e0 c7 40 04 00 00 00 f4 c7 40 08 f3 f3 f3 f3 48 89 d8 48 c1 e8 03 c7 45 b4 00 00 00 00 <80> 3c 30 00 75 78 48 8d 7b 08 49 8d 75 c0 48 b8 00 00 00 00 00
        RIP  [<ffffffff830bb46b>] tipc_node_xmit_skb+0x6b/0x140
         RSP <ffff8800595bfce8>
        ---[ end trace 57b0484e351e71f1 ]---
    
    I feel like we should maybe return -ENOMEM or -ENOBUFS, but I'm not sure
    userspace is equipped to handle that. Anyway, this is better than a GPF
    and looks somewhat consistent with other tipc_msg_create() callers.
    
    Signed-off-by: Vegard Nossum <vegard.nossum@oracle.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 03b4f8c15b291500d12fe968029414e6301688e3
Author: Vegard Nossum <vegard.nossum@oracle.com>
Date:   Sat Jul 23 08:15:04 2016 +0200

    tipc: fix NULL pointer dereference in shutdown()
    
    [ Upstream commit d2fbdf76b85bcdfe57b8ef2ba09d20e8ada79abd ]
    
    tipc_msg_create() can return a NULL skb and if so, we shouldn't try to
    call tipc_node_xmit_skb() on it.
    
        general protection fault: 0000 [#1] PREEMPT SMP KASAN
        CPU: 3 PID: 30298 Comm: trinity-c0 Not tainted 4.7.0-rc7+ #19
        Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Ubuntu-1.8.2-1ubuntu1 04/01/2014
        task: ffff8800baf09980 ti: ffff8800595b8000 task.ti: ffff8800595b8000
        RIP: 0010:[<ffffffff830bb46b>]  [<ffffffff830bb46b>] tipc_node_xmit_skb+0x6b/0x140
        RSP: 0018:ffff8800595bfce8  EFLAGS: 00010246
        RAX: 0000000000000000 RBX: 0000000000000000 RCX: 000000003023b0e0
        RDX: 0000000000000000 RSI: dffffc0000000000 RDI: ffffffff83d12580
        RBP: ffff8800595bfd78 R08: ffffed000b2b7f32 R09: 0000000000000000
        R10: fffffbfff0759725 R11: 0000000000000000 R12: 1ffff1000b2b7f9f
        R13: ffff8800595bfd58 R14: ffffffff83d12580 R15: dffffc0000000000
        FS:  00007fcdde242700(0000) GS:ffff88011af80000(0000) knlGS:0000000000000000
        CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
        CR2: 00007fcddde1db10 CR3: 000000006874b000 CR4: 00000000000006e0
        DR0: 00007fcdde248000 DR1: 00007fcddd73d000 DR2: 00007fcdde248000
        DR3: 0000000000000000 DR6: 00000000ffff0ff0 DR7: 0000000000090602
        Stack:
         0000000000000018 0000000000000018 0000000041b58ab3 ffffffff83954208
         ffffffff830bb400 ffff8800595bfd30 ffffffff8309d767 0000000000000018
         0000000000000018 ffff8800595bfd78 ffffffff8309da1a 00000000810ee611
        Call Trace:
         [<ffffffff830c84a3>] tipc_shutdown+0x553/0x880
         [<ffffffff825b4a3b>] SyS_shutdown+0x14b/0x170
         [<ffffffff8100334c>] do_syscall_64+0x19c/0x410
         [<ffffffff83295ca5>] entry_SYSCALL64_slow_path+0x25/0x25
        Code: 90 00 b4 0b 83 c7 00 f1 f1 f1 f1 4c 8d 6d e0 c7 40 04 00 00 00 f4 c7 40 08 f3 f3 f3 f3 48 89 d8 48 c1 e8 03 c7 45 b4 00 00 00 00 <80> 3c 30 00 75 78 48 8d 7b 08 49 8d 75 c0 48 b8 00 00 00 00 00
        RIP  [<ffffffff830bb46b>] tipc_node_xmit_skb+0x6b/0x140
         RSP <ffff8800595bfce8>
        ---[ end trace 57b0484e351e71f1 ]---
    
    I feel like we should maybe return -ENOMEM or -ENOBUFS, but I'm not sure
    userspace is equipped to handle that. Anyway, this is better than a GPF
    and looks somewhat consistent with other tipc_msg_create() callers.
    
    Signed-off-by: Vegard Nossum <vegard.nossum@oracle.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e70bb22b8fc502757332d06a484696ce3efa9d2a
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Sep 21 15:00:02 2016 +0200

    tipc: move linearization of buffers to generic code
    
    commit c7cad0d6f70cd4ce8644ffe528a4df1cdc2e77f5 upstream.
    
    In commit 5cbb28a4bf65c7e4 ("tipc: linearize arriving NAME_DISTR
    and LINK_PROTO buffers") we added linearization of NAME_DISTRIBUTOR,
    LINK_PROTOCOL/RESET and LINK_PROTOCOL/ACTIVATE to the function
    tipc_udp_recv(). The location of the change was selected in order
    to make the commit easily appliable to 'net' and 'stable'.
    
    We now move this linearization to where it should be done, in the
    functions tipc_named_rcv() and tipc_link_proto_rcv() respectively.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Juerg Haefliger <juerg.haefliger@hpe.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b2e345ed50bc140e2334e6b8fa9108ee66683cb
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Thu Jul 14 15:02:07 2016 +0100

    tipc: fix nl compat regression for link statistics
    
    [ Upstream commit 55e77a3e8297581c919b45adcc4d0815b69afa84 ]
    
    Fix incorrect use of nla_strlcpy() where the first NLA_HDRLEN bytes
    of the link name where left out.
    
    Making the output of tipc-config -ls look something like:
    Link statistics:
    dcast-link
    1:data0-1.1.2:data0
    1:data0-1.1.3:data0
    
    Also, for the record, the patch that introduce this regression
    claims "Sending the whole object out can cause a leak". Which isn't
    very likely as this is a compat layer, where the data we are parsing
    is generated by us and we know the string to be NULL terminated. But
    you can of course never be to secure.
    
    Fixes: 5d2be1422e02 (tipc: fix an infoleak in tipc_nl_compat_link_dump)
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5fb71611925f734f7fe03a45527e14b296fd5167
Author: Kangjie Lu <kangjielu@gmail.com>
Date:   Thu Jul 14 15:02:06 2016 +0100

    tipc: fix an infoleak in tipc_nl_compat_link_dump
    
    [ Upstream commit 5d2be1422e02ccd697ccfcd45c85b4a26e6178e2 ]
    
    link_info.str is a char array of size 60. Memory after the NULL
    byte is not initialized. Sending the whole object out can cause
    a leak.
    
    Signed-off-by: Kangjie Lu <kjlu@gatech.edu>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1b82da380dcfd030bd1ee32853b132659bb0ab4c
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Thu Mar 3 17:54:54 2016 +0100

    tipc: fix nullptr crash during subscription cancel
    
    [ Upstream commit 4de13d7ed6ffdcbb34317acaa9236f121176f5f8 ]
    
    commit 4d5cfcba2f6e ('tipc: fix connection abort during subscription
    cancel'), removes the check for a valid subscription before calling
    tipc_nametbl_subscribe().
    
    This will lead to a nullptr exception when we process a
    subscription cancel request. For a cancel request, a null
    subscription is passed to tipc_nametbl_subscribe() resulting
    in exception.
    
    In this commit, we call tipc_nametbl_subscribe() only for
    a valid subscription.
    
    Fixes: 4d5cfcba2f6e ('tipc: fix connection abort during subscription cancel')
    Reported-by: Anders Widell <anders.widell@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c20cb8119337052a84e40cba94af732d870e22e3
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Sat Sep 10 00:56:55 2016 +0000

    tipc: fix possible memory leak in tipc_udp_enable()
    
    'ub' is malloced in tipc_udp_enable() and should be freed before
    leaving from the error handling cases, otherwise it will cause
    memory leak.
    
    Fixes: ba5aa84a2d22 ("tipc: split UDP nl address parsing")
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0cc1f315287bdcc5e772cde1965c316959f57d67
Merge: 2c896fb02e7f e0a05ebe26c0
Author: David S. Miller <davem@davemloft.net>
Date:   Fri Sep 2 17:10:25 2016 -0700

    Merge branch 'tipc-scalable-broadcast-NACK'
    
    Jon Maloy says:
    
    ====================
    tipc: improve broadcast NACK mechanism
    
    The broadcast protocol has turned out to not scale well beyond 70-80
    nodes, while it is now possible to build TIPC clusters of at least ten
    times that size. This commit series improves the NACK/retransmission
    mechanism of the broadcast protocol to make is at scalable as the rest
    of TIPC.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e0a05ebe26c07c4f649a7f5c251a3d4d8bf0402d
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Sep 1 13:52:51 2016 -0400

    tipc: send broadcast nack directly upon sequence gap detection
    
    Because of the risk of an excessive number of NACK messages and
    retransissions, receivers have until now abstained from sending
    broadcast NACKS directly upon detection of a packet sequence number
    gap. We have instead relied on such gaps being detected by link
    protocol STATE message exchange, something that by necessity delays
    such detection and subsequent retransmissions.
    
    With the introduction of unicast NACK transmission and rate control
    of retransmissions we can now remove this limitation. We now allow
    receiving nodes to send NACKS immediately, while coordinating the
    permission to do so among the nodes in order to avoid NACK storms.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7c4a54b963b68eee5ef3bd7ca740630d965616e2
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Sep 1 13:52:50 2016 -0400

    tipc: rate limit broadcast retransmissions
    
    As cluster sizes grow, so does the amount of identical or overlapping
    broadcast NACKs generated by the packet receivers. This often leads to
    'NACK crunches' resulting in huge numbers of redundant retransmissions
    of the same packet ranges.
    
    In this commit, we introduce rate control of broadcast retransmissions,
    so that a retransmitted range cannot be retransmitted again until after
    at least 10 ms. This reduces the frequency of duplicate, redundant
    retransmissions by an order of magnitude, while having a significant
    positive impact on overall throughput and scalability.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 02d11ca20091fcef904f05defda80c53e5b4e793
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Sep 1 13:52:49 2016 -0400

    tipc: transfer broadcast nacks in link state messages
    
    When we send broadcasts in clusters of more 70-80 nodes, we sometimes
    see the broadcast link resetting because of an excessive number of
    retransmissions. This is caused by a combination of two factors:
    
    1) A 'NACK crunch", where loss of broadcast packets is discovered
       and NACK'ed by several nodes simultaneously, leading to multiple
       redundant broadcast retransmissions.
    
    2) The fact that the NACKS as such also are sent as broadcast, leading
       to excessive load and packet loss on the transmitting switch/bridge.
    
    This commit deals with the latter problem, by moving sending of
    broadcast nacks from the dedicated BCAST_PROTOCOL/NACK message type
    to regular unicast LINK_PROTOCOL/STATE messages. We allocate 10 unused
    bits in word 8 of the said message for this purpose, and introduce a
    new capability bit, TIPC_BCAST_STATE_NACK in order to keep the change
    backwards compatible.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d2f394dc4816b7bd1b44981d83509f18f19c53f0
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Thu Sep 1 16:22:16 2016 +0200

    tipc: fix random link resets while adding a second bearer
    
    In a dual bearer configuration, if the second tipc link becomes
    active while the first link still has pending nametable "bulk"
    updates, it randomly leads to reset of the second link.
    
    When a link is established, the function named_distribute(),
    fills the skb based on node mtu (allows room for TUNNEL_PROTOCOL)
    with NAME_DISTRIBUTOR message for each PUBLICATION.
    However, the function named_distribute() allocates the buffer by
    increasing the node mtu by INT_H_SIZE (to insert NAME_DISTRIBUTOR).
    This consumes the space allocated for TUNNEL_PROTOCOL.
    
    When establishing the second link, the link shall tunnel all the
    messages in the first link queue including the "bulk" update.
    As size of the NAME_DISTRIBUTOR messages while tunnelling, exceeds
    the link mtu the transmission fails (-EMSGSIZE).
    
    Thus, the synch point based on the message count of the tunnel
    packets is never reached leading to link timeout.
    
    In this commit, we adjust the size of name distributor message so that
    they can be tunnelled.
    
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5b79135af3b884c597d9bf3df404a397b5579c63
Merge: f01d5988639b 832629ca5c31
Author: David S. Miller <davem@davemloft.net>
Date:   Fri Aug 26 21:38:42 2016 -0700

    Merge branch 'tipc-udp-replicast'
    
    Richard Alpe says:
    
    ====================
    tipc: introduce UDP replicast
    
    This series introduces UDP replicast. A concept where we emulate multicast by
    sending multiple unicast messages to configured peers. This allows TIPC to be
    used in environments where IP multicast is disabled.
    
    There is a corresponding patch series for the tipc user space tool that
    allows a user to add remote addresses to the replicast list.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 832629ca5c313e122b22b8e73a6d80f111b1a1ae
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Fri Aug 26 10:52:56 2016 +0200

    tipc: add UDP remoteip dump to netlink API
    
    When using replicast a UDP bearer can have an arbitrary amount of
    remote ip addresses associated with it. This means we cannot simply
    add all remote ip addresses to an existing bearer data message as it
    might fill the message, leaving us with a truncated message that we
    can't safely resume. To handle this we introduce the new netlink
    command TIPC_NL_UDP_GET_REMOTEIP. This command is intended to be
    called when the bearer data message has the
    TIPC_NLA_UDP_MULTI_REMOTEIP flag set, indicating there are more than
    one remote ip (replicast).
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit fdb3accc2c15fabc2b687b2819da9167027c61b6
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Fri Aug 26 10:52:55 2016 +0200

    tipc: add the ability to get UDP options via netlink
    
    Add UDP bearer options to netlink bearer get message. This is used by
    the tipc user space tool to display UDP options.
    
    The UDP bearer information is passed using either a sockaddr_in or
    sockaddr_in6 structs. This means the user space receiver should
    intermediately store the retrieved data in a large enough struct
    (sockaddr_strage) before casting to the proper IP version type.
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c9b64d492b1fbc732e3a26b284060c949b737bce
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Fri Aug 26 10:52:54 2016 +0200

    tipc: add replicast peer discovery
    
    Automatically learn UDP remote IP addresses of communicating peers by
    looking at the source IP address of incoming TIPC link configuration
    messages (neighbor discovery).
    
    This makes configuration slightly easier and removes the problematic
    scenario where a node receives directly addressed neighbor discovery
    messages sent using replicast which the node cannot "reply" to using
    mutlicast, leaving the link FSM in a limbo state.
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ef20cd4dd1633987bcf46ac34ace2c8af212361f
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Fri Aug 26 10:52:53 2016 +0200

    tipc: introduce UDP replicast
    
    This patch introduces UDP replicast. A concept where we emulate
    multicast by sending multiple unicast messages to configured peers.
    
    The purpose of replicast is mainly to be able to use TIPC in cloud
    environments where IP multicast is disabled. Using replicas to unicast
    multicast messages is costly as we have to copy each skb and send the
    copies individually.
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1ca73e3fa12531bbbc854329cd02a887f986a02a
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Fri Aug 26 10:52:52 2016 +0200

    tipc: refactor multicast ip check
    
    Add a function to check if a tipc UDP media address is a multicast
    address or not. This is a purely cosmetic change.
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ce984da36e11c1e6db6002ea4f8a4b54e46f45c0
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Fri Aug 26 10:52:51 2016 +0200

    tipc: split UDP send function
    
    Split the UDP send function into two. One callback that prepares the
    skb and one transmit function that sends the skb. This will come in
    handy in later patches, when we introduce UDP replicast.
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ba5aa84a2d2243d56328e51497a6106dcdf67eef
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Fri Aug 26 10:52:50 2016 +0200

    tipc: split UDP nl address parsing
    
    Split the UDP netlink parse function so that it only parses one
    netlink attribute at the time. This makes the parse function more
    generic and allow future UDP API functions to use it for parsing.
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a5de125dd46c851fc962806135953c1bd0a0f0df
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Wed Aug 24 13:32:19 2016 +0000

    tipc: fix the error handling in tipc_udp_enable()
    
    Fix to return a negative error code in enable_mcast() error handling
    case, and release udp socket when necessary.
    
    Fixes: d0f91938bede ("tipc: add ip/udp media type")
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5128b18522e143e634712ceef6a007333b8c7439
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Tue Aug 23 23:01:02 2016 +0000

    tipc: use kfree_skb() instead of kfree()
    
    Use kfree_skb() instead of kfree() to free sk_buff.
    
    Fixes: 0d051bf93c06 ("tipc: make bearer packet filtering generic")
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3d4997da790d035dc4cc61f254d4de467a1bbf90
Author: Kangjie Lu <kangjielu@gmail.com>
Date:   Thu Jun 2 04:04:56 2016 -0400

    tipc: fix an infoleak in tipc_nl_compat_link_dump
    
    commit 5d2be1422e02ccd697ccfcd45c85b4a26e6178e2 upstream.
    
    link_info.str is a char array of size 60. Memory after the NULL
    byte is not initialized. Sending the whole object out can cause
    a leak.
    
    Signed-off-by: Kangjie Lu <kjlu@gatech.edu>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [carnil: Backported to 3.16 (same as bwh did for 3.2): the unpadded strcpy() is
    in tipc_node_get_links() and no nlattr is involved, so use strncpy()]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 9fa075340941fc16110bca226c50819b2453fa9b
Author: Kangjie Lu <kangjielu@gmail.com>
Date:   Thu Jun 2 04:04:56 2016 -0400

    tipc: fix an infoleak in tipc_nl_compat_link_dump
    
    commit 5d2be1422e02ccd697ccfcd45c85b4a26e6178e2 upstream.
    
    link_info.str is a char array of size 60. Memory after the NULL
    byte is not initialized. Sending the whole object out can cause
    a leak.
    
    Signed-off-by: Kangjie Lu <kjlu@gatech.edu>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [bwh: Backported to 3.2: the unpadded strcpy() is in tipc_node_get_links()
     and no nlattr is involved, so use strncpy()]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit b34040227be7da760cc72ef3c807e0985e7f0f16
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Thu Aug 18 10:33:52 2016 +0200

    tipc: add peer removal functionality
    
    Add TIPC_NL_PEER_REMOVE netlink command. This command can remove
    an offline peer node from the internal data structures.
    
    This will be supported by the tipc user space tool in iproute2.
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e951f145d1724769546efe2e04f6cb2b7037d7ea
Merge: 37bd91d1d9a9 5a0950c27236
Author: David S. Miller <davem@davemloft.net>
Date:   Thu Aug 18 21:14:37 2016 -0700

    Merge branch 'tipc-next'
    
    Jon Maloy says:
    
    ====================
    tipc: bearer and link improvements
    
    The first commit makes it possible to set and check the 'blocked' state
    of a bearer from the generic bearer layer. The second commit is a small
    improvement to the link congestion mechanism.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5a0950c27236dc6f6a3e9d13259c1a2e89fd1cf7
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Tue Aug 16 11:53:51 2016 -0400

    tipc: ensure that link congestion and wakeup use same criteria
    
    When a link is attempted woken up after congestion, it uses a different,
    more generous criteria than when it was originally declared congested.
    This has the effect that the link, and the sending process, sometimes
    will be woken up unnecessarily, just to immediately return to congestion
    when it turns out there is not not enough space in its send queue to
    host the pending message. This is a waste of CPU cycles.
    
    We now change the function link_prepare_wakeup() to use exactly the same
    criteria as tipc_link_xmit(). However, since we are now excluding the
    window limit from the wakeup calculation, and the current backlog limit
    for the lowest level is too small to house even a single maximum-size
    message, we have to expand this limit. We do this by evaluating an
    alternative, minimum value during the setting of the importance limits.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0d051bf93c0640483788db56dfc118d307f8893b
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Tue Aug 16 11:53:50 2016 -0400

    tipc: make bearer packet filtering generic
    
    In commit 5b7066c3dd24 ("tipc: stricter filtering of packets in bearer
    layer") we introduced a method of filtering out messages while a bearer
    is being reset, to avoid that links may be re-created and come back in
    working state while we are still in the process of shutting them down.
    
    This solution works well, but is limited to only work with L2 media, which
    is insufficient with the increasing use of UDP as carrier media.
    
    We now replace this solution with a more generic one, by introducing a
    new flag "up" in the generic struct tipc_bearer. This field will be set
    and reset at the same locations as with the previous solution, while
    the packet filtering is moved to the generic code for the sending side.
    On the receiving side, the filtering is still done in media specific
    code, but now including the UDP bearer.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d2fbdf76b85bcdfe57b8ef2ba09d20e8ada79abd
Author: Vegard Nossum <vegard.nossum@oracle.com>
Date:   Sat Jul 23 08:15:04 2016 +0200

    tipc: fix NULL pointer dereference in shutdown()
    
    tipc_msg_create() can return a NULL skb and if so, we shouldn't try to
    call tipc_node_xmit_skb() on it.
    
        general protection fault: 0000 [#1] PREEMPT SMP KASAN
        CPU: 3 PID: 30298 Comm: trinity-c0 Not tainted 4.7.0-rc7+ #19
        Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Ubuntu-1.8.2-1ubuntu1 04/01/2014
        task: ffff8800baf09980 ti: ffff8800595b8000 task.ti: ffff8800595b8000
        RIP: 0010:[<ffffffff830bb46b>]  [<ffffffff830bb46b>] tipc_node_xmit_skb+0x6b/0x140
        RSP: 0018:ffff8800595bfce8  EFLAGS: 00010246
        RAX: 0000000000000000 RBX: 0000000000000000 RCX: 000000003023b0e0
        RDX: 0000000000000000 RSI: dffffc0000000000 RDI: ffffffff83d12580
        RBP: ffff8800595bfd78 R08: ffffed000b2b7f32 R09: 0000000000000000
        R10: fffffbfff0759725 R11: 0000000000000000 R12: 1ffff1000b2b7f9f
        R13: ffff8800595bfd58 R14: ffffffff83d12580 R15: dffffc0000000000
        FS:  00007fcdde242700(0000) GS:ffff88011af80000(0000) knlGS:0000000000000000
        CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
        CR2: 00007fcddde1db10 CR3: 000000006874b000 CR4: 00000000000006e0
        DR0: 00007fcdde248000 DR1: 00007fcddd73d000 DR2: 00007fcdde248000
        DR3: 0000000000000000 DR6: 00000000ffff0ff0 DR7: 0000000000090602
        Stack:
         0000000000000018 0000000000000018 0000000041b58ab3 ffffffff83954208
         ffffffff830bb400 ffff8800595bfd30 ffffffff8309d767 0000000000000018
         0000000000000018 ffff8800595bfd78 ffffffff8309da1a 00000000810ee611
        Call Trace:
         [<ffffffff830c84a3>] tipc_shutdown+0x553/0x880
         [<ffffffff825b4a3b>] SyS_shutdown+0x14b/0x170
         [<ffffffff8100334c>] do_syscall_64+0x19c/0x410
         [<ffffffff83295ca5>] entry_SYSCALL64_slow_path+0x25/0x25
        Code: 90 00 b4 0b 83 c7 00 f1 f1 f1 f1 4c 8d 6d e0 c7 40 04 00 00 00 f4 c7 40 08 f3 f3 f3 f3 48 89 d8 48 c1 e8 03 c7 45 b4 00 00 00 00 <80> 3c 30 00 75 78 48 8d 7b 08 49 8d 75 c0 48 b8 00 00 00 00 00
        RIP  [<ffffffff830bb46b>] tipc_node_xmit_skb+0x6b/0x140
         RSP <ffff8800595bfce8>
        ---[ end trace 57b0484e351e71f1 ]---
    
    I feel like we should maybe return -ENOMEM or -ENOBUFS, but I'm not sure
    userspace is equipped to handle that. Anyway, this is better than a GPF
    and looks somewhat consistent with other tipc_msg_create() callers.
    
    Signed-off-by: Vegard Nossum <vegard.nossum@oracle.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 672ca65d9aa8578f382784fe73578cd499664828
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Wed Aug 10 14:07:34 2016 +0200

    tipc: fix variable dereference before NULL check
    
    In commit cf6f7e1d5109 ("tipc: dump monitor attributes"),
    I dereferenced a pointer before checking if its valid.
    This is reported by static check Smatch as:
    net/tipc/monitor.c:733 tipc_nl_add_monitor_peer()
         warn: variable dereferenced before check 'mon' (see line 731)
    
    In this commit, we check for a valid monitor before proceeding
    with any other operation.
    
    Fixes: cf6f7e1d5109 ("tipc: dump monitor attributes")
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6b65bc29721dee21e963cde3a83369bd09ba5358
Author: Wei Yongjun <weiyj.lk@gmail.com>
Date:   Thu Jul 28 02:07:49 2016 +0000

    tipc: fix imbalance read_unlock_bh in __tipc_nl_add_monitor()
    
    In the error handling case of nla_nest_start() failed read_unlock_bh()
    is called  to unlock a lock that had not been taken yet. sparse warns
    about the context imbalance as the following:
    
    net/tipc/monitor.c:799:23: warning:
     context imbalance in '__tipc_nl_add_monitor' - different lock contexts for basic block
    
    Fixes: cf6f7e1d5109 ('tipc: dump monitor attributes')
    Signed-off-by: Wei Yongjun <weiyj.lk@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 468fc7ed5537615efe671d94248446ac24679773
Merge: 08fd8c17686c 36232012344b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Jul 27 12:03:20 2016 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net-next
    
    Pull networking updates from David Miller:
    
     1) Unified UDP encapsulation offload methods for drivers, from
        Alexander Duyck.
    
     2) Make DSA binding more sane, from Andrew Lunn.
    
     3) Support QCA9888 chips in ath10k, from Anilkumar Kolli.
    
     4) Several workqueue usage cleanups, from Bhaktipriya Shridhar.
    
     5) Add XDP (eXpress Data Path), essentially running BPF programs on RX
        packets as soon as the device sees them, with the option to mirror
        the packet on TX via the same interface.  From Brenden Blanco and
        others.
    
     6) Allow qdisc/class stats dumps to run lockless, from Eric Dumazet.
    
     7) Add VLAN support to b53 and bcm_sf2, from Florian Fainelli.
    
     8) Simplify netlink conntrack entry layout, from Florian Westphal.
    
     9) Add ipv4 forwarding support to mlxsw spectrum driver, from Ido
        Schimmel, Yotam Gigi, and Jiri Pirko.
    
    10) Add SKB array infrastructure and convert tun and macvtap over to it.
        From Michael S Tsirkin and Jason Wang.
    
    11) Support qdisc packet injection in pktgen, from John Fastabend.
    
    12) Add neighbour monitoring framework to TIPC, from Jon Paul Maloy.
    
    13) Add NV congestion control support to TCP, from Lawrence Brakmo.
    
    14) Add GSO support to SCTP, from Marcelo Ricardo Leitner.
    
    15) Allow GRO and RPS to function on macsec devices, from Paolo Abeni.
    
    16) Support MPLS over IPV4, from Simon Horman.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net-next: (1622 commits)
      xgene: Fix build warning with ACPI disabled.
      be2net: perform temperature query in adapter regardless of its interface state
      l2tp: Correctly return -EBADF from pppol2tp_getname.
      net/mlx5_core/health: Remove deprecated create_singlethread_workqueue
      net: ipmr/ip6mr: update lastuse on entry change
      macsec: ensure rx_sa is set when validation is disabled
      tipc: dump monitor attributes
      tipc: add a function to get the bearer name
      tipc: get monitor threshold for the cluster
      tipc: make cluster size threshold for monitoring configurable
      tipc: introduce constants for tipc address validation
      net: neigh: disallow transition to NUD_STALE if lladdr is unchanged in neigh_update()
      MAINTAINERS: xgene: Add driver and documentation path
      Documentation: dtb: xgene: Add MDIO node
      dtb: xgene: Add MDIO node
      drivers: net: xgene: ethtool: Use phy_ethtool_gset and sset
      drivers: net: xgene: Use exported functions
      drivers: net: xgene: Enable MDIO driver
      drivers: net: xgene: Add backward compatibility
      drivers: net: phy: xgene: Add MDIO driver
      ...

commit 2a0b9d8a1402a14fff06ed306a566025c75b2b87
Merge: d1c2b5010d07 cf6f7e1d5109
Author: David S. Miller <davem@davemloft.net>
Date:   Tue Jul 26 14:26:43 2016 -0700

    Merge branch 'tipc-netlink-monitor-updates'
    
    Parthasarathy Bhuvaragan says:
    
    ====================
    tipc: netlink updates for neighbour monitor
    
    This series contains the updates to configure and read the attributes for
    neighbour monitor.
    
    v2: rebase on top of net-next
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit cf6f7e1d51090772d5ff7355aaf0fcff17f20d1a
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Jul 26 08:47:22 2016 +0200

    tipc: dump monitor attributes
    
    In this commit, we dump the monitor attributes when queried.
    The link monitor attributes are separated into two kinds:
    1. general attributes per bearer
    2. specific attributes per node/peer
    This style resembles the socket attributes and the nametable
    publications per socket.
    
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ff0d3e78a67a8edd09688f073361de9ed8abf9dc
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Jul 26 08:47:21 2016 +0200

    tipc: add a function to get the bearer name
    
    Introduce a new function to get the bearer name from
    its id. This is used in subsequent commit.
    
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit bf1035b2ff5296c7c49e262152253ce29d87e82d
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Jul 26 08:47:20 2016 +0200

    tipc: get monitor threshold for the cluster
    
    In this commit, we add support to fetch the configured
    cluster monitoring threshold.
    
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7b3f52296493656015f0c0deddb6e90e36b9cda2
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Jul 26 08:47:19 2016 +0200

    tipc: make cluster size threshold for monitoring configurable
    
    In this commit, we introduce support to configure the minimum
    threshold to activate the new link monitoring algorithm.
    
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9ff26e9fabaf52f28fb5e875c0b9ffc2d1512039
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Jul 26 08:47:18 2016 +0200

    tipc: introduce constants for tipc address validation
    
    In this commit, we introduce defines for tipc address size,
    offset and mask specification for Zone.Cluster.Node.
    There is no functional change in this commit.
    
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b6b1b81b3afba922505b57f4c812bba022f7c4a9
Author: John Johansen <john.johansen@canonical.com>
Date:   Sun Jun 8 11:20:54 2014 -0700

    apparmor: fix uninitialized lsm_audit member
    
    BugLink: http://bugs.launchpad.net/bugs/1268727
    
    The task field in the lsm_audit struct needs to be initialized if
    a change_hat fails, otherwise the following oops will occur
    
    BUG: unable to handle kernel paging request at 0000002fbead7d08
    IP: [<ffffffff8171153e>] _raw_spin_lock+0xe/0x50
    PGD 1e3f35067 PUD 0
    Oops: 0002 [#1] SMP
    Modules linked in: pppox crc_ccitt p8023 p8022 psnap llc ax25 btrfs raid6_pq xor xfs libcrc32c dm_multipath scsi_dh kvm_amd dcdbas kvm microcode amd64_edac_mod joydev edac_core psmouse edac_mce_amd serio_raw k10temp sp5100_tco i2c_piix4 ipmi_si ipmi_msghandler acpi_power_meter mac_hid lp parport hid_generic usbhid hid pata_acpi mpt2sas ahci raid_class pata_atiixp bnx2 libahci scsi_transport_sas [last unloaded: tipc]
    CPU: 2 PID: 699 Comm: changehat_twice Tainted: GF          O 3.13.0-7-generic #25-Ubuntu
    Hardware name: Dell Inc. PowerEdge R415/08WNM9, BIOS 1.8.6 12/06/2011
    task: ffff8802135c6000 ti: ffff880212986000 task.ti: ffff880212986000
    RIP: 0010:[<ffffffff8171153e>]  [<ffffffff8171153e>] _raw_spin_lock+0xe/0x50
    RSP: 0018:ffff880212987b68  EFLAGS: 00010006
    RAX: 0000000000020000 RBX: 0000002fbead7500 RCX: 0000000000000000
    RDX: 0000000000000292 RSI: ffff880212987ba8 RDI: 0000002fbead7d08
    RBP: ffff880212987b68 R08: 0000000000000246 R09: ffff880216e572a0
    R10: ffffffff815fd677 R11: ffffea0008469580 R12: ffffffff8130966f
    R13: ffff880212987ba8 R14: 0000002fbead7d08 R15: ffff8800d8c6b830
    FS:  00002b5e6c84e7c0(0000) GS:ffff880216e40000(0000) knlGS:0000000055731700
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000002fbead7d08 CR3: 000000021270f000 CR4: 00000000000006e0
    Stack:
     ffff880212987b98 ffffffff81075f17 ffffffff8130966f 0000000000000009
     0000000000000000 0000000000000000 ffff880212987bd0 ffffffff81075f7c
     0000000000000292 ffff880212987c08 ffff8800d8c6b800 0000000000000026
    Call Trace:
     [<ffffffff81075f17>] __lock_task_sighand+0x47/0x80
     [<ffffffff8130966f>] ? apparmor_cred_prepare+0x2f/0x50
     [<ffffffff81075f7c>] do_send_sig_info+0x2c/0x80
     [<ffffffff81075fee>] send_sig_info+0x1e/0x30
     [<ffffffff8130242d>] aa_audit+0x13d/0x190
     [<ffffffff8130c1dc>] aa_audit_file+0xbc/0x130
     [<ffffffff8130966f>] ? apparmor_cred_prepare+0x2f/0x50
     [<ffffffff81304cc2>] aa_change_hat+0x202/0x530
     [<ffffffff81308fc6>] aa_setprocattr_changehat+0x116/0x1d0
     [<ffffffff8130a11d>] apparmor_setprocattr+0x25d/0x300
     [<ffffffff812cee56>] security_setprocattr+0x16/0x20
     [<ffffffff8121fc87>] proc_pid_attr_write+0x107/0x130
     [<ffffffff811b7604>] vfs_write+0xb4/0x1f0
     [<ffffffff811b8039>] SyS_write+0x49/0xa0
     [<ffffffff8171a1bf>] tracesys+0xe1/0xe6
    
    Signed-off-by: John Johansen <john.johansen@canonical.com>
    Acked-by: Seth Arnold <seth.arnold@canonical.com>

commit ce9a4f316d1240158063c54ddea1628926cb4553
Merge: 34ee32c9a569 1fc07f3e1541
Author: David S. Miller <davem@davemloft.net>
Date:   Mon Jul 11 22:42:13 2016 -0700

    Merge branch 'tipc-fixes'
    
    Jon Maloy says:
    
    ====================
    tipc: three small fixes
    
    Fixes for some broadcast link problems that may occur in large systems.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1fc07f3e1541cc49cc159beb3fdefc5013570eda
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Mon Jul 11 16:08:37 2016 -0400

    tipc: reset all unicast links when broadcast send link fails
    
    In test situations with many nodes and a heavily stressed system we have
    observed that the transmission broadcast link may fail due to an
    excessive number of retransmissions of the same packet. In such
    situations we need to reset all unicast links to all peers, in order to
    reset and re-synchronize the broadcast link.
    
    In this commit, we add a new function tipc_bearer_reset_all() to be used
    in such situations. The function scans across all bearers and resets all
    their pertaining links.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a71eb720355c28eaeb2de0c4d960247c69bb2c6f
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Mon Jul 11 16:08:36 2016 -0400

    tipc: ensure correct broadcast send buffer release when peer is lost
    
    After a new receiver peer has been added to the broadcast transmission
    link, we allow immediate transmission of new broadcast packets, trusting
    that the new peer will not accept the packets until it has received the
    previously sent unicast broadcast initialiation message. In the same
    way, the sender must not accept any acknowledges until it has itself
    received the broadcast initialization from the peer, as well as
    confirmation of the reception of its own initialization message.
    
    Furthermore, when a receiver peer goes down, the sender has to produce
    the missing acknowledges from the lost peer locally, in order ensure
    correct release of the buffers that were expected to be acknowledged by
    the said peer.
    
    In a highly stressed system we have observed that contact with a peer
    may come up and be lost before the above mentioned broadcast initial-
    ization and confirmation have been received. This leads to the locally
    produced acknowledges being rejected, and the non-acknowledged buffers
    to linger in the broadcast link transmission queue until it fills up
    and the link goes into permanent congestion.
    
    In this commit, we remedy this by temporarily setting the corresponding
    broadcast receive link state to ESTABLISHED and the 'bc_peer_is_up'
    state to true before we issue the local acknowledges. This ensures that
    those acknowledges will always be accepted. The mentioned state values
    are restored immediately afterwards when the link is reset.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2d18ac4ba7454a4260473e68be7e485ae71e7948
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Mon Jul 11 16:08:35 2016 -0400

    tipc: extend broadcast link initialization criteria
    
    At first contact between two nodes, an endpoint might sometimes have
    time to send out a LINK_PROTOCOL/STATE packet before it has received
    the broadcast initialization packet from the peer, i.e., before it has
    received a valid broadcast packet number to add to the 'bc_ack' field
    of the protocol message.
    
    This means that the peer endpoint will receive a protocol packet with an
    invalid broadcast acknowledge value of 0. Under unlucky circumstances
    this may lead to the original, already received acknowledge value being
    overwritten, so that the whole broadcast link goes stale after a while.
    
    We fix this by delaying the setting of the link field 'bc_peer_is_up'
    until we know that the peer really has received our own broadcast
    initialization message. The latter is always sent out as the first
    unicast message on a link, and always with seqeunce number 1. Because
    of this, we only need to look for a non-zero unicast acknowledge value
    in the arriving STATE messages, and once that is confirmed we know we
    are safe and can set the mentioned field. Before this moment, we must
    ignore all broadcast acknowledges from the peer.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8454d6443c84ee3501de20b9ff2034ea4767a0da
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Tue May 17 16:57:37 2016 +0200

    tipc: fix nametable publication field in nl compat
    
    [ Upstream commit 03aaaa9b941e136757b55c4cf775aab6068dfd94 ]
    
    The publication field of the old netlink API should contain the
    publication key and not the publication reference.
    
    Fixes: 44a8ae94fd55 (tipc: convert legacy nl name table dump to nl compat)
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sasha.levin@oracle.com>

commit 49956430d3d55b47e4a2d2f5f777d641cae137d6
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Mon May 16 11:14:54 2016 +0200

    tipc: check nl sock before parsing nested attributes
    
    [ Upstream commit 45e093ae2830cd1264677d47ff9a95a71f5d9f9c ]
    
    Make sure the socket for which the user is listing publication exists
    before parsing the socket netlink attributes.
    
    Prior to this patch a call without any socket caused a NULL pointer
    dereference in tipc_nl_publ_dump().
    
    Tested-and-reported-by: Baozeng Ding <sploving1@gmail.com>
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.cm>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sasha.levin@oracle.com>

commit bc86765181aa26cc9afcb0a6f9f253cbb1186f26
Merge: 4cdbbbd11f53 903ce4abdf37
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Jul 6 09:42:43 2016 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) All users of AF_PACKET's fanout feature want a symmetric packet
        header hash for load balancing purposes, so give it to them.
    
     2) Fix vlan state synchronization in e1000e, from Jarod Wilson.
    
     3) Use correct socket pointer in ip_skb_dst_mtu(), from Shmulik
        Ladkani.
    
     4) mlx5 bug fixes from Mohamad Haj Yahia, Daniel Jurgens, Matthew
        Finlay, Rana Shahout, and Shaker Daibes.  Mostly to do with
        operation timeouts and PCI error handling.
    
     5) Fix checksum handling in mirred packet action, from WANG Cong.
    
     6) Set skb->dev correctly when transmitting in !protect_frames case of
        macsec driver, from Daniel Borkmann.
    
     7) Fix MTU calculation in geneve driver, from Haishuang Yan.
    
     8) Missing netif_napi_del() in unregister path of qeth driver, from
        Ursula Braun.
    
     9) Handle malformed route netlink messages in decnet properly, from
        Vergard Nossum.
    
    10) Memory leak of percpu data in ipv6 routing code, from Martin KaFai
        Lau.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (41 commits)
      ipv6: Fix mem leak in rt6i_pcpu
      net: fix decnet rtnexthop parsing
      cxgb4: update latest firmware version supported
      net/mlx5: Avoid setting unused var when modifying vport node GUID
      bonding: fix enslavement slave link notifications
      r8152: fix runtime function for RTL8152
      qeth: delete napi struct when removing a qeth device
      Revert "fsl/fman: fix error handling"
      fsl/fman: fix error handling
      cdc_ncm: workaround for EM7455 "silent" data interface
      RDS: fix rds_tcp_init() error path
      geneve: fix max_mtu setting
      net: phy: dp83867: Fix initialization of PHYCR register
      enc28j60: Fix race condition in enc28j60 driver
      net: stmmac: Fix null-function call in ISR on stmmac1000
      tipc: fix nl compat regression for link statistics
      net: bcmsysport: Device stats are unsigned long
      macsec: set actual real device for xmit when !protect_frames
      net_sched: fix mirrored packets checksum
      packet: Use symmetric hash for PACKET_FANOUT_HASH.
      ...

commit 55e77a3e8297581c919b45adcc4d0815b69afa84
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Fri Jul 1 11:11:21 2016 +0200

    tipc: fix nl compat regression for link statistics
    
    Fix incorrect use of nla_strlcpy() where the first NLA_HDRLEN bytes
    of the link name where left out.
    
    Making the output of tipc-config -ls look something like:
    Link statistics:
    dcast-link
    1:data0-1.1.2:data0
    1:data0-1.1.3:data0
    
    Also, for the record, the patch that introduce this regression
    claims "Sending the whole object out can cause a leak". Which isn't
    very likely as this is a compat layer, where the data we are parsing
    is generated by us and we know the string to be NULL terminated. But
    you can of course never be to secure.
    
    Fixes: 5d2be1422e02 (tipc: fix an infoleak in tipc_nl_compat_link_dump)
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit bc3a334cc2c49779c90d7057c42c4537cd36256f
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Mon Jun 27 13:34:07 2016 +0200

    tipc: rename udp_port in struct udp_media_addr
    
    Context implies that port in struct "udp_media_addr" is referring
    to a UDP port.
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e99429232e3622a7e390c3b540c4971b1ccf75c8
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Mon Jun 27 13:34:06 2016 +0200

    tipc: honor msg2addr return value
    
    The UDP msg2addr function tipc_udp_msg2addr() can return -EINVAL which
    prior to this patch was unhanded in the caller.
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 810bf11033637a2069952afb9c37f3afd3bbfe41
Author: Amitoj Kaur Chawla <amitoj1606@gmail.com>
Date:   Thu Jun 23 10:19:37 2016 +0530

    tipc: Use kmemdup instead of kmalloc and memcpy
    
    Replace calls to kmalloc followed by a memcpy with a direct call to
    kmemdup.
    
    The Coccinelle semantic patch used to make this change is as follows:
    @@
    expression from,to,size,flag;
    statement S;
    @@
    
    -  to = \(kmalloc\|kzalloc\)(size,flag);
    +  to = kmemdup(from,size,flag);
       if (to==NULL || ...) S
    -  memcpy(to, from, size);
    
    Signed-off-by: Amitoj Kaur Chawla <amitoj1606@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 988ae90abb5cb61c286c6f63a1d3b8a6955e4fd8
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Tue May 17 16:57:37 2016 +0200

    tipc: fix nametable publication field in nl compat
    
    [ Upstream commit 03aaaa9b941e136757b55c4cf775aab6068dfd94 ]
    
    The publication field of the old netlink API should contain the
    publication key and not the publication reference.
    
    Fixes: 44a8ae94fd55 (tipc: convert legacy nl name table dump to nl compat)
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ba7963c750122e13b9ba254afa95438126d7f460
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Mon May 16 11:14:54 2016 +0200

    tipc: check nl sock before parsing nested attributes
    
    [ Upstream commit 45e093ae2830cd1264677d47ff9a95a71f5d9f9c ]
    
    Make sure the socket for which the user is listing publication exists
    before parsing the socket netlink attributes.
    
    Prior to this patch a call without any socket caused a NULL pointer
    dereference in tipc_nl_publ_dump().
    
    Tested-and-reported-by: Baozeng Ding <sploving1@gmail.com>
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.cm>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6a58f3e12e8e5c330940b38cc8c98d52171aefa8
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Tue May 17 16:57:37 2016 +0200

    tipc: fix nametable publication field in nl compat
    
    [ Upstream commit 03aaaa9b941e136757b55c4cf775aab6068dfd94 ]
    
    The publication field of the old netlink API should contain the
    publication key and not the publication reference.
    
    Fixes: 44a8ae94fd55 (tipc: convert legacy nl name table dump to nl compat)
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 23cdd8c3cbe9d790f23d7f9ae14e9b828f56f69c
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Mon May 16 11:14:54 2016 +0200

    tipc: check nl sock before parsing nested attributes
    
    [ Upstream commit 45e093ae2830cd1264677d47ff9a95a71f5d9f9c ]
    
    Make sure the socket for which the user is listing publication exists
    before parsing the socket netlink attributes.
    
    Prior to this patch a call without any socket caused a NULL pointer
    dereference in tipc_nl_publ_dump().
    
    Tested-and-reported-by: Baozeng Ding <sploving1@gmail.com>
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.cm>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 27777daa8b6df0c19aaf591d1536a586b3eb5e36
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Mon Jun 20 09:20:46 2016 -0400

    tipc: unclone unbundled buffers before forwarding
    
    When extracting an individual message from a received "bundle" buffer,
    we just create a clone of the base buffer, and adjust it to point into
    the right position of the linearized data area of the latter. This works
    well for regular message reception, but during periods of extremely high
    load it may happen that an extracted buffer, e.g, a connection probe, is
    reversed and forwarded through an external interface while the preceding
    extracted message is still unhandled. When this happens, the header or
    data area of the preceding message will be partially overwritten by a
    MAC header, leading to unpredicatable consequences, such as a link
    reset.
    
    We now fix this by ensuring that the msg_reverse() function never
    returns a cloned buffer, and that the returned buffer always contains
    sufficient valid head and tail room to be forwarded.
    
    Reported-by: Erik Hugne <erik.hugne@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f1d048f24e66ba85d3dabf3d076cefa5f2b546b0
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Jun 17 06:35:57 2016 -0400

    tipc: fix socket timer deadlock
    
    We sometimes observe a 'deadly embrace' type deadlock occurring
    between mutually connected sockets on the same node. This happens
    when the one-hour peer supervision timers happen to expire
    simultaneously in both sockets.
    
    The scenario is as follows:
    
    CPU 1:                          CPU 2:
    --------                        --------
    tipc_sk_timeout(sk1)            tipc_sk_timeout(sk2)
      lock(sk1.slock)                 lock(sk2.slock)
      msg_create(probe)               msg_create(probe)
      unlock(sk1.slock)               unlock(sk2.slock)
      tipc_node_xmit_skb()            tipc_node_xmit_skb()
        tipc_node_xmit()                tipc_node_xmit()
          tipc_sk_rcv(sk2)                tipc_sk_rcv(sk1)
            lock(sk2.slock)                 lock((sk1.slock)
            filter_rcv()                    filter_rcv()
              tipc_sk_proto_rcv()             tipc_sk_proto_rcv()
                msg_create(probe_rsp)           msg_create(probe_rsp)
                tipc_sk_respond()               tipc_sk_respond()
                  tipc_node_xmit_skb()            tipc_node_xmit_skb()
                    tipc_node_xmit()                tipc_node_xmit()
                      tipc_sk_rcv(sk1)                tipc_sk_rcv(sk2)
                        lock((sk1.slock)                lock((sk2.slock)
                        ===> DEADLOCK                   ===> DEADLOCK
    
    Further analysis reveals that there are three different locations in the
    socket code where tipc_sk_respond() is called within the context of the
    socket lock, with ensuing risk of similar deadlocks.
    
    We now solve this by passing a buffer queue along with all upcalls where
    sk_lock.slock may potentially be held. Response or rejected message
    buffers are accumulated into this queue instead of being sent out
    directly, and only sent once we know we are safely outside the slock
    context.
    
    Reported-by: GUNA <gbalasun@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0350cb48fb94e168d8b4d3ff65adbdbc73759cbf
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Fri Jun 17 12:22:26 2016 +0300

    tipc: potential shift wrapping bug in map_set()
    
    "up_map" is a u64 type but we're not using the high 32 bits.
    
    Fixes: 35c55c9877f8 ('tipc: add neighbor monitoring framework')
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c91522f860bb9dd4178c8280bbebd4f4321b7199
Author: Ying Xue <ying.xue@windriver.com>
Date:   Wed Jun 15 14:11:31 2016 +0800

    tipc: eliminate uninitialized variable warning
    
    net/tipc/link.c: In function ‘tipc_link_timeout’:
    net/tipc/link.c:744:28: warning: ‘mtyp’ may be used uninitialized in this function [-Wuninitialized]
    
    Fixes: 42b18f605fea ("tipc: refactor function tipc_link_timeout()")
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 66d95b6705a6347f7b2645e042874ec0bb03b726
Author: Ying Xue <ying.xue@windriver.com>
Date:   Wed Jun 15 14:10:57 2016 +0800

    tipc: fix suspicious RCU usage
    
    When run tipcTS&tipcTC test suite, the following complaint appears:
    
    [   56.926168] ===============================
    [   56.926169] [ INFO: suspicious RCU usage. ]
    [   56.926171] 4.7.0-rc1+ #160 Not tainted
    [   56.926173] -------------------------------
    [   56.926174] net/tipc/bearer.c:408 suspicious rcu_dereference_protected() usage!
    [   56.926175]
    [   56.926175] other info that might help us debug this:
    [   56.926175]
    [   56.926177]
    [   56.926177] rcu_scheduler_active = 1, debug_locks = 1
    [   56.926179] 3 locks held by swapper/4/0:
    [   56.926180]  #0:  (((&req->timer))){+.-...}, at: [<ffffffff810e79b5>] call_timer_fn+0x5/0x340
    [   56.926203]  #1:  (&(&req->lock)->rlock){+.-...}, at: [<ffffffffa000c29b>] disc_timeout+0x1b/0xd0 [tipc]
    [   56.926212]  #2:  (rcu_read_lock){......}, at: [<ffffffffa00055e0>] tipc_bearer_xmit_skb+0xb0/0x2e0 [tipc]
    [   56.926218]
    [   56.926218] stack backtrace:
    [   56.926221] CPU: 4 PID: 0 Comm: swapper/4 Not tainted 4.7.0-rc1+ #160
    [   56.926222] Hardware name: Bochs Bochs, BIOS Bochs 01/01/2007
    [   56.926224]  0000000000000000 ffff880016803d28 ffffffff813c4423 ffff8800154252c0
    [   56.926227]  0000000000000001 ffff880016803d58 ffffffff810b7512 ffff8800124d8120
    [   56.926230]  ffff880013f8a160 ffff8800132b5ccc ffff8800124d8120 ffff880016803d88
    [   56.926234] Call Trace:
    [   56.926235]  <IRQ>  [<ffffffff813c4423>] dump_stack+0x67/0x94
    [   56.926250]  [<ffffffff810b7512>] lockdep_rcu_suspicious+0xe2/0x120
    [   56.926256]  [<ffffffffa00051f1>] tipc_l2_send_msg+0x131/0x1c0 [tipc]
    [   56.926261]  [<ffffffffa000567c>] tipc_bearer_xmit_skb+0x14c/0x2e0 [tipc]
    [   56.926266]  [<ffffffffa00055e0>] ? tipc_bearer_xmit_skb+0xb0/0x2e0 [tipc]
    [   56.926273]  [<ffffffffa000c280>] ? tipc_disc_init_msg+0x1f0/0x1f0 [tipc]
    [   56.926278]  [<ffffffffa000c280>] ? tipc_disc_init_msg+0x1f0/0x1f0 [tipc]
    [   56.926283]  [<ffffffffa000c2d6>] disc_timeout+0x56/0xd0 [tipc]
    [   56.926288]  [<ffffffff810e7a68>] call_timer_fn+0xb8/0x340
    [   56.926291]  [<ffffffff810e79b5>] ? call_timer_fn+0x5/0x340
    [   56.926296]  [<ffffffffa000c280>] ? tipc_disc_init_msg+0x1f0/0x1f0 [tipc]
    [   56.926300]  [<ffffffff810e8f4a>] run_timer_softirq+0x23a/0x390
    [   56.926306]  [<ffffffff810f89ff>] ? clockevents_program_event+0x7f/0x130
    [   56.926316]  [<ffffffff819727c3>] __do_softirq+0xc3/0x4a2
    [   56.926323]  [<ffffffff8106ba5a>] irq_exit+0x8a/0xb0
    [   56.926327]  [<ffffffff81972456>] smp_apic_timer_interrupt+0x46/0x60
    [   56.926331]  [<ffffffff81970a49>] apic_timer_interrupt+0x89/0x90
    [   56.926333]  <EOI>  [<ffffffff81027fda>] ? default_idle+0x2a/0x1a0
    [   56.926340]  [<ffffffff81027fd8>] ? default_idle+0x28/0x1a0
    [   56.926342]  [<ffffffff810289cf>] arch_cpu_idle+0xf/0x20
    [   56.926345]  [<ffffffff810adf0f>] default_idle_call+0x2f/0x50
    [   56.926347]  [<ffffffff810ae145>] cpu_startup_entry+0x215/0x3e0
    [   56.926353]  [<ffffffff81040ad9>] start_secondary+0xf9/0x100
    
    The warning appears as rtnl_dereference() is wrongly used in
    tipc_l2_send_msg() under RCU read lock protection. Instead the proper
    usage should be that rcu_dereference_rtnl() is called here.
    
    Fixes: 5b7066c3dd24 ("tipc: stricter filtering of packets in bearer layer")
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 35c55c9877f8de0ab129fa1a309271d0ecc868b9
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Mon Jun 13 20:46:22 2016 -0400

    tipc: add neighbor monitoring framework
    
    TIPC based clusters are by default set up with full-mesh link
    connectivity between all nodes. Those links are expected to provide
    a short failure detection time, by default set to 1500 ms. Because
    of this, the background load for neighbor monitoring in an N-node
    cluster increases with a factor N on each node, while the overall
    monitoring traffic through the network infrastructure increases at
    a ~(N * (N - 1)) rate. Experience has shown that such clusters don't
    scale well beyond ~100 nodes unless we significantly increase failure
    discovery tolerance.
    
    This commit introduces a framework and an algorithm that drastically
    reduces this background load, while basically maintaining the original
    failure detection times across the whole cluster. Using this algorithm,
    background load will now grow at a rate of ~(2 * sqrt(N)) per node, and
    at ~(2 * N * sqrt(N)) in traffic overhead. As an example, each node will
    now have to actively monitor 38 neighbors in a 400-node cluster, instead
    of as before 399.
    
    This "Overlapping Ring Supervision Algorithm" is completely distributed
    and employs no centralized or coordinated state. It goes as follows:
    
    - Each node makes up a linearly ascending, circular list of all its N
      known neighbors, based on their TIPC node identity. This algorithm
      must be the same on all nodes.
    
    - The node then selects the next M = sqrt(N) - 1 nodes downstream from
      itself in the list, and chooses to actively monitor those. This is
      called its "local monitoring domain".
    
    - It creates a domain record describing the monitoring domain, and
      piggy-backs this in the data area of all neighbor monitoring messages
      (LINK_PROTOCOL/STATE) leaving that node. This means that all nodes in
      the cluster eventually (default within 400 ms) will learn about
      its monitoring domain.
    
    - Whenever a node discovers a change in its local domain, e.g., a node
      has been added or has gone down, it creates and sends out a new
      version of its node record to inform all neighbors about the change.
    
    - A node receiving a domain record from anybody outside its local domain
      matches this against its own list (which may not look the same), and
      chooses to not actively monitor those members of the received domain
      record that are also present in its own list. Instead, it relies on
      indications from the direct monitoring nodes if an indirectly
      monitored node has gone up or down. If a node is indicated lost, the
      receiving node temporarily activates its own direct monitoring towards
      that node in order to confirm, or not, that it is actually gone.
    
    - Since each node is actively monitoring sqrt(N) downstream neighbors,
      each node is also actively monitored by the same number of upstream
      neighbors. This means that all non-direct monitoring nodes normally
      will receive sqrt(N) indications that a node is gone.
    
    - A major drawback with ring monitoring is how it handles failures that
      cause massive network partitionings. If both a lost node and all its
      direct monitoring neighbors are inside the lost partition, the nodes in
      the remaining partition will never receive indications about the loss.
      To overcome this, each node also chooses to actively monitor some
      nodes outside its local domain. Those nodes are called remote domain
      "heads", and are selected in such a way that no node in the cluster
      will be more than two direct monitoring hops away. Because of this,
      each node, apart from monitoring the member of its local domain, will
      also typically monitor sqrt(N) remote head nodes.
    
    - As an optimization, local list status, domain status and domain
      records are marked with a generation number. This saves senders from
      unnecessarily conveying  unaltered domain records, and receivers from
      performing unneeded re-adaptations of their node monitoring list, such
      as re-assigning domain heads.
    
    - As a measure of caution we have added the possibility to disable the
      new algorithm through configuration. We do this by keeping a threshold
      value for the cluster size; a cluster that grows beyond this value
      will switch from full-mesh to ring monitoring, and vice versa when
      it shrinks below the value. This means that if the threshold is set to
      a value larger than any anticipated cluster size (default size is 32)
      the new algorithm is effectively disabled. A patch set for altering the
      threshold value and for listing the table contents will follow shortly.
    
    - This change is fully backwards compatible.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6278e03dc667b611cc9ebbd8f455d859f18f8e11
Merge: 8fa956e32c99 5ca509fc0b6b
Author: David S. Miller <davem@davemloft.net>
Date:   Wed Jun 8 11:27:02 2016 -0700

    Merge branch 'tipc-small-fixes'
    
    Jon Maloy says:
    
    ====================
    tipc: two small fixes
    
    We fix a couple of rarely seen anomalies discovered during testing.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5ca509fc0b6bcfeccf03c8c4bb5e4d1a62720c03
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Jun 8 12:00:05 2016 -0400

    tipc: change node timer unit from jiffies to ms
    
    The node keepalive interval is recalculated at each timer expiration
    to catch any changes in the link tolerance, and stored in a field in
    struct tipc_node. We use jiffies as unit for the stored value.
    
    This is suboptimal, because it makes the calculation unnecessary
    complex, including two unit conversions. The conversions also lead to
    a rounding error that causes the link "abort limit" to be 3 in the
    normal case, instead of 4, as intended. This again leads to unnecessary
    link resets when the network is pushed close to its limit, e.g., in an
    environment with hundreds of nodes or namesapces.
    
    In this commit, we do instead let the keepalive value be calculated and
    stored in milliseconds, so that there is only one conversion and the
    rounding error is eliminated.
    
    We also remove a redundant "keepalive" field in struct tipc_link. This
    is remnant from the previous implementation.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c4282ca76c5b81ed73ef4c5eb5c07ee397e51642
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Jun 8 12:00:04 2016 -0400

    tipc: correct error in node fsm
    
    commit 88e8ac7000dc ("tipc: reduce transmission rate of reset messages
    when link is down") revealed a flaw in the node FSM, as defined in
    the log of commit 66996b6c47ed ("tipc: extend node FSM").
    
    We see the following scenario:
    1: Node B receives a RESET message from node A before its link endpoint
       is fully up, i.e., the node FSM is in state SELF_UP_PEER_COMING. This
       event will not change the node FSM state, but the (distinct) link FSM
       will move to state RESETTING.
    2: As an effect of the previous event, the local endpoint on B will
       declare node A lost, and post the event SELF_DOWN to the its node
       FSM. This moves the FSM state to SELF_DOWN_PEER_LEAVING, meaning
       that no messages will be accepted from A until it receives another
       RESET message that confirms that A's endpoint has been reset. This
       is  wasteful, since we know this as a fact already from the first
       received RESET, but worse is that the link instance's FSM has not
       wasted this information, but instead moved on to state ESTABLISHING,
       meaning that it repeatedly sends out ACTIVATE messages to the reset
       peer A.
    3: Node A will receive one of the ACTIVATE messages, move its link FSM
       to state ESTABLISHED, and start repeatedly sending out STATE messages
       to node B.
    4: Node B will consistently drop these messages, since it can only accept
       accept a RESET according to its node FSM.
    5: After four lost STATE messages node A will reset its link and start
       repeatedly sending out RESET messages to B.
    6: Because of the reduced send rate for RESET messages, it is very
       likely that A will receive an ACTIVATE (which is sent out at a much
       higher frequency) before it gets the chance to send a RESET, and A
       may hence quickly move back to state ESTABLISHED and continue sending
       out STATE messages, which will again be dropped by B.
    7: GOTO 5.
    8: After having repeated the cycle 5-7 a number of times, node A will
       by chance get in between with sending a RESET, and the situation is
       resolved.
    
    Unfortunately, we have seen that it may take a substantial amount of
    time before this vicious loop is broken, sometimes in the order of
    minutes.
    
    We correct this by making a small correction to the node FSM: When a
    node in state SELF_UP_PEER_COMING receives a SELF_DOWN event, it now
    moves directly back to state SELF_DOWN_PEER_DOWN, instead of as now
    SELF_DOWN_PEER_LEAVING. This is logically consistent, since we don't
    need to wait for RESET confirmation from of an endpoint that we alread
    know has been reset. It also means that node B in the scenario above
    will not be dropping incoming STATE messages, and the link can come up
    immediately.
    
    Finally, a symmetry comparison reveals that the  FSM has a similar
    error when receiving the event PEER_DOWN in state PEER_UP_SELF_COMING.
    Instead of moving to PERR_DOWN_SELF_LEAVING, it should move directly
    to SELF_DOWN_PEER_DOWN. Although we have never seen any negative effect
    of this logical error, we choose fix this one, too.
    
    The node FSM looks as follows after those changes:
    
                               +----------------------------------------+
                               |                           PEER_DOWN_EVT|
                               |                                        |
      +------------------------+----------------+                       |
      |SELF_DOWN_EVT           |                |                       |
      |                        |                |                       |
      |              +-----------+          +-----------+               |
      |              |NODE_      |          |NODE_      |               |
      |   +----------|FAILINGOVER|<---------|SYNCHING   |-----------+   |
      |   |SELF_     +-----------+ FAILOVER_+-----------+   PEER_   |   |
      |   |DOWN_EVT   |          A BEGIN_EVT  A         |   DOWN_EVT|   |
      |   |           |          |            |         |           |   |
      |   |           |          |            |         |           |   |
      |   |           |FAILOVER_ |FAILOVER_   |SYNCH_   |SYNCH_     |   |
      |   |           |END_EVT   |BEGIN_EVT   |BEGIN_EVT|END_EVT    |   |
      |   |           |          |            |         |           |   |
      |   |           |          |            |         |           |   |
      |   |           |         +--------------+        |           |   |
      |   |           +-------->|   SELF_UP_   |<-------+           |   |
      |   |   +-----------------|   PEER_UP    |----------------+   |   |
      |   |   |SELF_DOWN_EVT    +--------------+   PEER_DOWN_EVT|   |   |
      |   |   |                    A        A                   |   |   |
      |   |   |                    |        |                   |   |   |
      |   |   |         PEER_UP_EVT|        |SELF_UP_EVT        |   |   |
      |   |   |                    |        |                   |   |   |
      V   V   V                    |        |                   V   V   V
    +------------+       +-----------+    +-----------+       +------------+
    |SELF_DOWN_  |       |SELF_UP_   |    |PEER_UP_   |       |PEER_DOWN   |
    |PEER_LEAVING|       |PEER_COMING|    |SELF_COMING|       |SELF_LEAVING|
    +------------+       +-----------+    +-----------+       +------------+
           |               |       A        A       |                |
           |               |       |        |       |                |
           |       SELF_   |       |SELF_   |PEER_  |PEER_           |
           |       DOWN_EVT|       |UP_EVT  |UP_EVT |DOWN_EVT        |
           |               |       |        |       |                |
           |               |       |        |       |                |
           |               |    +--------------+    |                |
           |PEER_DOWN_EVT  +--->|  SELF_DOWN_  |<---+   SELF_DOWN_EVT|
           +------------------->|  PEER_DOWN   |<--------------------+
                                +--------------+
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5d2be1422e02ccd697ccfcd45c85b4a26e6178e2
Author: Kangjie Lu <kangjielu@gmail.com>
Date:   Thu Jun 2 04:04:56 2016 -0400

    tipc: fix an infoleak in tipc_nl_compat_link_dump
    
    link_info.str is a char array of size 60. Memory after the NULL
    byte is not initialized. Sending the whole object out can cause
    a leak.
    
    Signed-off-by: Kangjie Lu <kjlu@gatech.edu>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 297f7d2cce6a156c174334ee452f2f7a7ba405ca
Author: Baozeng Ding <sploving1@gmail.com>
Date:   Tue May 24 22:33:24 2016 +0800

    tipc: fix potential null pointer dereferences in some compat functions
    
    Before calling the nla_parse_nested function, make sure the pointer to the
    attribute is not null. This patch fixes several potential null pointer
    dereference vulnerabilities in the tipc netlink functions.
    
    Signed-off-by: Baozeng Ding <sploving1@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 087afe8aaf562dc7a53f2577049830d6a3245742
Merge: 54cf809b9512 95829b3a9c0b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri May 20 20:01:26 2016 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes and more updates from David Miller:
    
     1) Tunneling fixes from Tom Herbert and Alexander Duyck.
    
     2) AF_UNIX updates some struct sock bit fields with the socket lock,
        whereas setsockopt() sets overlapping ones with locking.  Seperate
        out the synchronized vs.  the AF_UNIX unsynchronized ones to avoid
        corruption.  From Andrey Ryabinin.
    
     3) Mount BPF filesystem with mount_nodev rather than mount_ns, from
        Eric Biederman.
    
     4) A couple kmemdup conversions, from Muhammad Falak R Wani.
    
     5) BPF verifier fixes from Alexei Starovoitov.
    
     6) Don't let tunneled UDP packets get stuck in socket queues, if
        something goes wrong during the encapsulation just drop the packet
        rather than signalling an error up the call stack.  From Hannes
        Frederic Sowa.
    
     7) SKB ref after free in batman-adv, from Florian Westphal.
    
     8) TCP iSCSI, ocfs2, rds, and tipc have to disable BH in it's TCP
        callbacks since the TCP stack runs pre-emptibly now.  From Eric
        Dumazet.
    
     9) Fix crash in fixed_phy_add, from Rabin Vincent.
    
    10) Fix length checks in xen-netback, from Paul Durrant.
    
    11) Fix mixup in KEY vs KEYID macsec attributes, from Sabrina Dubroca.
    
    12) RDS connection spamming bug fixes from Sowmini Varadhan
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (152 commits)
      net: suppress warnings on dev_alloc_skb
      uapi glibc compat: fix compilation when !__USE_MISC in glibc
      udp: prevent skbs lingering in tunnel socket queues
      bpf: teach verifier to recognize imm += ptr pattern
      bpf: support decreasing order in direct packet access
      net: usb: ch9200: use kmemdup
      ps3_gelic: use kmemdup
      net:liquidio: use kmemdup
      bpf: Use mount_nodev not mount_ns to mount the bpf filesystem
      net: cdc_ncm: update datagram size after changing mtu
      tuntap: correctly wake up process during uninit
      intel: Add support for IPv6 IP-in-IP offload
      ip6_gre: Do not allow segmentation offloads GRE_CSUM is enabled with FOU/GUE
      RDS: TCP: Avoid rds connection churn from rogue SYNs
      RDS: TCP: rds_tcp_accept_worker() must exit gracefully when terminating rds-tcp
      net: sock: move ->sk_shutdown out of bitfields.
      ipv6: Don't reset inner headers in ip6_tnl_xmit
      ip4ip6: Support for GSO/GRO
      ip6ip6: Support for GSO/GRO
      ipv6: Set features for IPv6 tunnels
      ...

commit b91083a45e4c41b8c952cf02ceb0ce16f0b1b9b1
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue May 17 17:44:09 2016 -0700

    tipc: block BH in TCP callbacks
    
    TCP stack can now run from process context.
    
    Use read_lock_bh(&sk->sk_callback_lock) variant to restore previous
    assumption.
    
    Fixes: 5413d1babe8f ("net: do not block BH while processing socket backlog")
    Fixes: d41a69f1d390 ("tcp: make tcp_sendmsg() aware of socket backlog")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a7fd20d1c476af4563e66865213474a2f9f473a4
Merge: b80fed959551 917fa5353da0
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue May 17 16:26:30 2016 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net-next
    
    Pull networking updates from David Miller:
     "Highlights:
    
       1) Support SPI based w5100 devices, from Akinobu Mita.
    
       2) Partial Segmentation Offload, from Alexander Duyck.
    
       3) Add GMAC4 support to stmmac driver, from Alexandre TORGUE.
    
       4) Allow cls_flower stats offload, from Amir Vadai.
    
       5) Implement bpf blinding, from Daniel Borkmann.
    
       6) Optimize _ASYNC_ bit twiddling on sockets, unless the socket is
          actually using FASYNC these atomics are superfluous.  From Eric
          Dumazet.
    
       7) Run TCP more preemptibly, also from Eric Dumazet.
    
       8) Support LED blinking, EEPROM dumps, and rxvlan offloading in mlx5e
          driver, from Gal Pressman.
    
       9) Allow creating ppp devices via rtnetlink, from Guillaume Nault.
    
      10) Improve BPF usage documentation, from Jesper Dangaard Brouer.
    
      11) Support tunneling offloads in qed, from Manish Chopra.
    
      12) aRFS offloading in mlx5e, from Maor Gottlieb.
    
      13) Add RFS and RPS support to SCTP protocol, from Marcelo Ricardo
          Leitner.
    
      14) Add MSG_EOR support to TCP, this allows controlling packet
          coalescing on application record boundaries for more accurate
          socket timestamp sampling.  From Martin KaFai Lau.
    
      15) Fix alignment of 64-bit netlink attributes across the board, from
          Nicolas Dichtel.
    
      16) Per-vlan stats in bridging, from Nikolay Aleksandrov.
    
      17) Several conversions of drivers to ethtool ksettings, from Philippe
          Reynes.
    
      18) Checksum neutral ILA in ipv6, from Tom Herbert.
    
      19) Factorize all of the various marvell dsa drivers into one, from
          Vivien Didelot
    
      20) Add VF support to qed driver, from Yuval Mintz"
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net-next: (1649 commits)
      Revert "phy dp83867: Fix compilation with CONFIG_OF_MDIO=m"
      Revert "phy dp83867: Make rgmii parameters optional"
      r8169: default to 64-bit DMA on recent PCIe chips
      phy dp83867: Make rgmii parameters optional
      phy dp83867: Fix compilation with CONFIG_OF_MDIO=m
      bpf: arm64: remove callee-save registers use for tmp registers
      asix: Fix offset calculation in asix_rx_fixup() causing slow transmissions
      switchdev: pass pointer to fib_info instead of copy
      net_sched: close another race condition in tcf_mirred_release()
      tipc: fix nametable publication field in nl compat
      drivers: net: Don't print unpopulated net_device name
      qed: add support for dcbx.
      ravb: Add missing free_irq() calls to ravb_close()
      qed: Remove a stray tab
      net: ethernet: fec-mpc52xx: use phy_ethtool_{get|set}_link_ksettings
      net: ethernet: fec-mpc52xx: use phydev from struct net_device
      bpf, doc: fix typo on bpf_asm descriptions
      stmmac: hardware TX COE doesn't work when force_thresh_dma_mode is set
      net: ethernet: fs-enet: use phy_ethtool_{get|set}_link_ksettings
      net: ethernet: fs-enet: use phydev from struct net_device
      ...

commit 03aaaa9b941e136757b55c4cf775aab6068dfd94
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Tue May 17 16:57:37 2016 +0200

    tipc: fix nametable publication field in nl compat
    
    The publication field of the old netlink API should contain the
    publication key and not the publication reference.
    
    Fixes: 44a8ae94fd55 (tipc: convert legacy nl name table dump to nl compat)
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 45e093ae2830cd1264677d47ff9a95a71f5d9f9c
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Mon May 16 11:14:54 2016 +0200

    tipc: check nl sock before parsing nested attributes
    
    Make sure the socket for which the user is listing publication exists
    before parsing the socket netlink attributes.
    
    Prior to this patch a call without any socket caused a NULL pointer
    dereference in tipc_nl_publ_dump().
    
    Tested-and-reported-by: Baozeng Ding <sploving1@gmail.com>
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.cm>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e7142c341c9ce3678f3533a2cfbf8477a09a95ad
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed May 11 19:15:45 2016 -0400

    tipc: eliminate risk of double link_up events
    
    When an ACTIVATE or data packet is received in a link in state
    ESTABLISHING, the link does not immediately change state to
    ESTABLISHED, but does instead return a LINK_UP event to the caller,
    which will execute the state change in a different lock context.
    
    This non-atomic approach incurs a low risk that we may have two
    LINK_UP events pending simultaneously for the same link, resulting
    in the final part of the setup procedure being executed twice. The
    only potential harm caused by this it that we may see two LINK_UP
    events issued to subsribers of the topology server, something that
    may cause confusion.
    
    This commit eliminates this risk by checking if the link is already
    up before proceeding with the second half of the setup.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e34b1638d02bef8c3278af30ee73077c5babc082
Merge: 2b84af94a393 10724cc7bb78
Author: David S. Miller <davem@davemloft.net>
Date:   Tue May 3 15:51:17 2016 -0400

    Merge branch 'tipc-next'
    
    Jon Maloy says:
    
    ====================
    tipc: redesign socket-level flow control
    
    The socket-level flow control in TIPC has long been due for a major
    overhaul. This series fixes this.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 10724cc7bb7832b482df049c20fd824d928c5eaa
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Mon May 2 11:58:47 2016 -0400

    tipc: redesign connection-level flow control
    
    There are two flow control mechanisms in TIPC; one at link level that
    handles network congestion, burst control, and retransmission, and one
    at connection level which' only remaining task is to prevent overflow
    in the receiving socket buffer. In TIPC, the latter task has to be
    solved end-to-end because messages can not be thrown away once they
    have been accepted and delivered upwards from the link layer, i.e, we
    can never permit the receive buffer to overflow.
    
    Currently, this algorithm is message based. A counter in the receiving
    socket keeps track of number of consumed messages, and sends a dedicated
    acknowledge message back to the sender for each 256 consumed message.
    A counter at the sending end keeps track of the sent, not yet
    acknowledged messages, and blocks the sender if this number ever reaches
    512 unacknowledged messages. When the missing acknowledge arrives, the
    socket is then woken up for renewed transmission. This works well for
    keeping the message flow running, as it almost never happens that a
    sender socket is blocked this way.
    
    A problem with the current mechanism is that it potentially is very
    memory consuming. Since we don't distinguish between small and large
    messages, we have to dimension the socket receive buffer according
    to a worst-case of both. I.e., the window size must be chosen large
    enough to sustain a reasonable throughput even for the smallest
    messages, while we must still consider a scenario where all messages
    are of maximum size. Hence, the current fix window size of 512 messages
    and a maximum message size of 66k results in a receive buffer of 66 MB
    when truesize(66k) = 131k is taken into account. It is possible to do
    much better.
    
    This commit introduces an algorithm where we instead use 1024-byte
    blocks as base unit. This unit, always rounded upwards from the
    actual message size, is used when we advertise windows as well as when
    we count and acknowledge transmitted data. The advertised window is
    based on the configured receive buffer size in such a way that even
    the worst-case truesize/msgsize ratio always is covered. Since the
    smallest possible message size (from a flow control viewpoint) now is
    1024 bytes, we can safely assume this ratio to be less than four, which
    is the value we are now using.
    
    This way, we have been able to reduce the default receive buffer size
    from 66 MB to 2 MB with maintained performance.
    
    In order to keep this solution backwards compatible, we introduce a
    new capability bit in the discovery protocol, and use this throughout
    the message sending/reception path to always select the right unit.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 60020e1857042387cdcd4cd6680a9e5496213379
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Mon May 2 11:58:46 2016 -0400

    tipc: propagate peer node capabilities to socket layer
    
    During neighbor discovery, nodes advertise their capabilities as a bit
    map in a dedicated 16-bit field in the discovery message header. This
    bit map has so far only be stored in the node structure on the peer
    nodes, but we now see the need to keep a copy even in the socket
    structure.
    
    This commit adds this functionality.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7c8bcfb1255fe9d929c227d67bdcd84430fd200b
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Mon May 2 11:58:45 2016 -0400

    tipc: re-enable compensation for socket receive buffer double counting
    
    In the refactoring commit d570d86497ee ("tipc: enqueue arrived buffers
    in socket in separate function") we did by accident replace the test
    
    if (sk->sk_backlog.len == 0)
         atomic_set(&tsk->dupl_rcvcnt, 0);
    
    with
    
    if (sk->sk_backlog.len)
         atomic_set(&tsk->dupl_rcvcnt, 0);
    
    This effectively disables the compensation we have for the double
    receive buffer accounting that occurs temporarily when buffers are
    moved from the backlog to the socket receive queue. Until now, this
    has gone unnoticed because of the large receive buffer limits we are
    applying, but becomes indispensable when we reduce this buffer limit
    later in this series.
    
    We now fix this by inverting the mentioned condition.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9c5d1bc2b73609ada2eaba75e9c8f4963e95b977
Merge: ba22906a9fdb b7f8fe251e46
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon May 2 09:40:42 2016 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) MODULE_FIRMWARE firmware string not correct for iwlwifi 8000 chips,
        from Sara Sharon.
    
     2) Fix SKB size checks in batman-adv stack on receive, from Sven
        Eckelmann.
    
     3) Leak fix on mac80211 interface add error paths, from Johannes Berg.
    
     4) Cannot invoke napi_disable() with BH disabled in myri10ge driver,
        fix from Stanislaw Gruszka.
    
     5) Fix sign extension problem when computing feature masks in
        net_gso_ok(), from Marcelo Ricardo Leitner.
    
     6) lan78xx driver doesn't count packets and packet lengths in its
        statistics properly, fix from Woojung Huh.
    
     7) Fix the buffer allocation sizes in pegasus USB driver, from Petko
        Manolov.
    
     8) Fix refcount overflows in bpf, from Alexei Starovoitov.
    
     9) Unified dst cache handling introduced a preempt warning in
        ip_tunnel, fix by resetting rather then setting the cached route.
        From Paolo Abeni.
    
    10) Listener hash collision test fix in soreuseport, from Craig Gallak
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (47 commits)
      gre: do not pull header in ICMP error processing
      net: Implement net_dbg_ratelimited() for CONFIG_DYNAMIC_DEBUG case
      tipc: only process unicast on intended node
      cxgb3: fix out of bounds read
      net/smscx5xx: use the device tree for mac address
      soreuseport: Fix TCP listener hash collision
      net: l2tp: fix reversed udp6 checksum flags
      ip_tunnel: fix preempt warning in ip tunnel creation/updating
      samples/bpf: fix trace_output example
      bpf: fix check_map_func_compatibility logic
      bpf: fix refcnt overflow
      drivers: net: cpsw: use of_phy_connect() in fixed-link case
      dt: cpsw: phy-handle, phy_id, and fixed-link are mutually exclusive
      drivers: net: cpsw: don't ignore phy-mode if phy-handle is used
      drivers: net: cpsw: fix segfault in case of bad phy-handle
      drivers: net: cpsw: fix parsing of phy-handle DT property in dual_emac config
      MAINTAINERS: net: Change maintainer for GRETH 10/100/1G Ethernet MAC device driver
      gre: reject GUE and FOU in collect metadata mode
      pegasus: fixes reported packet length
      pegasus: fixes URB buffer allocation size;
      ...

commit efe790502be85c60daa65c8aa51f05c333186e12
Author: Hamish Martin <hamish.martin@alliedtelesis.co.nz>
Date:   Fri Apr 29 10:40:24 2016 -0400

    tipc: only process unicast on intended node
    
    We have observed complete lock up of broadcast-link transmission due to
    unacknowledged packets never being removed from the 'transmq' queue. This
    is traced to nodes having their ack field set beyond the sequence number
    of packets that have actually been transmitted to them.
    Consider an example where node 1 has sent 10 packets to node 2 on a
    link and node 3 has sent 20 packets to node 2 on another link. We
    see examples of an ack from node 2 destined for node 3 being treated as
    an ack from node 2 at node 1. This leads to the ack on the node 1 to node
    2 link being increased to 20 even though we have only sent 10 packets.
    When node 1 does get around to sending further packets, none of the
    packets with sequence numbers less than 21 are actually removed from the
    transmq.
    To resolve this we reinstate some code lost in commit d999297c3dbb ("tipc:
    reduce locking scope during packet reception") which ensures that only
    messages destined for the receiving node are processed by that node. This
    prevents the sequence numbers from getting out of sync and resolves the
    packet leakage, thereby resolving the broadcast-link transmission
    lock-ups we observed.
    
    While we are aware that this change only patches over a root problem that
    we still haven't identified, this is a sanity test that it is always
    legitimate to do. It will remain in the code even after we identify and
    fix the real problem.
    
    Reviewed-by: Chris Packham <chris.packham@alliedtelesis.co.nz>
    Reviewed-by: John Thompson <john.thompson@alliedtelesis.co.nz>
    Signed-off-by: Hamish Martin <hamish.martin@alliedtelesis.co.nz>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit def22c47d749c5ff8011831a8232b951f223963e
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Apr 28 20:16:08 2016 -0400

    tipc: set 'active' state correctly for first established link
    
    When we are displaying statistics for the first link established between
    two peers, it will always be presented as STANDBY although it in reality
    is ACTIVE.
    
    This happens because we forget to set the 'active' flag in the link
    instance at the moment it is established. Although this is a bug, it only
    has impact on the presentation view of the link, not on its actual
    functionality.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b43586576e54609f7970096478cf4113de18a4db
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Apr 27 11:05:28 2016 +0300

    tipc: remove an unnecessary NULL check
    
    This is never called with a NULL "buf" and anyway, we dereference 's' on
    the lines before so it would Oops before we reach the check.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8cee83dd29dea4e7d27fda3b170381059f628868
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Thu Apr 21 15:51:13 2016 +0200

    tipc: fix stale links after re-enabling bearer
    
    Commit 42b18f605fea ("tipc: refactor function tipc_link_timeout()"),
    introduced a bug which prevents sending of probe messages during
    link synchronization phase. This leads to hanging links, if the
    bearer is disabled/enabled after links are up.
    
    In this commit, we send the probe messages correctly.
    
    Fixes: 42b18f605fea ("tipc: refactor function tipc_link_timeout()")
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7da899cee1f19bdaf2649e5e8c36c0e65ace5a5c
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Mar 1 11:07:09 2016 +0100

    tipc: Revert "tipc: use existing sk_write_queue for outgoing packet chain"
    
    [ Upstream commit f214fc402967e1bc94ad7f39faa03db5813d6849 ]
    
    reverts commit 94153e36e709e ("tipc: use existing sk_write_queue for
    outgoing packet chain")
    
    In Commit 94153e36e709e, we assume that we fill & empty the socket's
    sk_write_queue within the same lock_sock() session.
    
    This is not true if the link is congested. During congestion, the
    socket lock is released while we wait for the congestion to cease.
    This implementation causes a nullptr exception, if the user space
    program has several threads accessing the same socket descriptor.
    
    Consider two threads of the same program performing the following:
         Thread1                                  Thread2
    --------------------                    ----------------------
    Enter tipc_sendmsg()                    Enter tipc_sendmsg()
    lock_sock()                             lock_sock()
    Enter tipc_link_xmit(), ret=ELINKCONG   spin on socket lock..
    sk_wait_event()                             :
    release_sock()                          grab socket lock
        :                                   Enter tipc_link_xmit(), ret=0
        :                                   release_sock()
    Wakeup after congestion
    lock_sock()
    skb = skb_peek(pktchain);
    !! TIPC_SKB_CB(skb)->wakeup_pending = tsk->link_cong;
    
    In this case, the second thread transmits the buffers belonging to
    both thread1 and thread2 successfully. When the first thread wakeup
    after the congestion it assumes that the pktchain is intact and
    operates on the skb's in it, which leads to the following exception:
    
    [2102.439969] BUG: unable to handle kernel NULL pointer dereference at 00000000000000d0
    [2102.440074] IP: [<ffffffffa005f330>] __tipc_link_xmit+0x2b0/0x4d0 [tipc]
    [2102.440074] PGD 3fa3f067 PUD 3fa6b067 PMD 0
    [2102.440074] Oops: 0000 [#1] SMP
    [2102.440074] CPU: 2 PID: 244 Comm: sender Not tainted 3.12.28 #1
    [2102.440074] RIP: 0010:[<ffffffffa005f330>]  [<ffffffffa005f330>] __tipc_link_xmit+0x2b0/0x4d0 [tipc]
    [...]
    [2102.440074] Call Trace:
    [2102.440074]  [<ffffffff8163f0b9>] ? schedule+0x29/0x70
    [2102.440074]  [<ffffffffa006a756>] ? tipc_node_unlock+0x46/0x170 [tipc]
    [2102.440074]  [<ffffffffa005f761>] tipc_link_xmit+0x51/0xf0 [tipc]
    [2102.440074]  [<ffffffffa006d8ae>] tipc_send_stream+0x11e/0x4f0 [tipc]
    [2102.440074]  [<ffffffff8106b150>] ? __wake_up_sync+0x20/0x20
    [2102.440074]  [<ffffffffa006dc9c>] tipc_send_packet+0x1c/0x20 [tipc]
    [2102.440074]  [<ffffffff81502478>] sock_sendmsg+0xa8/0xd0
    [2102.440074]  [<ffffffff81507895>] ? release_sock+0x145/0x170
    [2102.440074]  [<ffffffff815030d8>] ___sys_sendmsg+0x3d8/0x3e0
    [2102.440074]  [<ffffffff816426ae>] ? _raw_spin_unlock+0xe/0x10
    [2102.440074]  [<ffffffff81115c2a>] ? handle_mm_fault+0x6ca/0x9d0
    [2102.440074]  [<ffffffff8107dd65>] ? set_next_entity+0x85/0xa0
    [2102.440074]  [<ffffffff816426de>] ? _raw_spin_unlock_irq+0xe/0x20
    [2102.440074]  [<ffffffff8107463c>] ? finish_task_switch+0x5c/0xc0
    [2102.440074]  [<ffffffff8163ea8c>] ? __schedule+0x34c/0x950
    [2102.440074]  [<ffffffff81504e12>] __sys_sendmsg+0x42/0x80
    [2102.440074]  [<ffffffff81504e62>] SyS_sendmsg+0x12/0x20
    [2102.440074]  [<ffffffff8164aed2>] system_call_fastpath+0x16/0x1b
    
    In this commit, we maintain the skb list always in the stack.
    
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0818556cd0afe4104139eb094f4112f9781c0f7e
Merge: 25fb0b6c7312 34b9cd64c889
Author: David S. Miller <davem@davemloft.net>
Date:   Fri Apr 15 16:09:07 2016 -0400

    Merge branch 'tipc-link-setup-improvements'
    
    Jon Maloy says:
    
    ====================
    tipc: improvements to the link setup algorithm
    
    This series addresses some smaller issues regarding the link setup
    algorithm. The first commit fixes a rare bug we have discovered during
    testing; the second one may have some future impact on cluster
    scalabilty, while remaining ones can be regarded as cosmetic in
    a wider sense of the word.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 34b9cd64c889d41eb990aec33fc185cab706c9b0
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Apr 15 13:33:07 2016 -0400

    tipc: let first message on link be a state message
    
    According to the link FSM, a received traffic packet can take a link
    from state ESTABLISHING to ESTABLISHED, but the link can still not be
    fully set up in one atomic operation. This means that even if the the
    very first packet on the link is a traffic packet with sequence number
    1 (one), it has to be dropped and retransmitted.
    
    This can be avoided if we let the mentioned packet be preceded by a
    LINK_PROTOCOL/STATE message, which takes up the endpoint before the
    arrival of the traffic.
    
    We add this small feature in this commit.
    
    This is a fully compatible change.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit de7e07f9ee14f47d05aa43046404c2904f0247dc
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Apr 15 13:33:06 2016 -0400

    tipc: ensure that first packets on link are sent in order
    
    In some link establishment scenarios we see that packet #2 may be sent
    out before packet #1, forcing the receiver to demand retransmission of
    the missing packet. This is harmless, but may cause confusion among
    people tracing the packet flow.
    
    Since this is extremely easy to fix, we do so by adding en extra send
    call to the bearer immediately after the link has come up.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 42b18f605feaf7aa1825b35656bb7d6fdc132b45
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Apr 15 13:33:05 2016 -0400

    tipc: refactor function tipc_link_timeout()
    
    The function tipc_link_timeout() is unnecessary complex, and can
    easily be made more readable.
    
    We do that with this commit. The only functional change is that we
    remove a redundant test for whether the broadcast link is up or not.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 88e8ac7000dc7ccf99975cc4070907e26a1027f9
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Apr 15 13:33:04 2016 -0400

    tipc: reduce transmission rate of reset messages when link is down
    
    When a link is down, it will continuously try to re-establish contact
    with the peer by sending out a RESET or an ACTIVATE message at each
    timeout interval. The default value for this interval is currently
    375 ms. This is wasteful, and may become a problem in very large
    clusters with dozens or hundreds of nodes being down simultaneously.
    
    We now introduce a simple backoff algorithm for these cases. The
    first five messages are sent at default rate; thereafter a message
    is sent only each 16th timer interval.
    
    This will cover the vast majority of link recycling cases, since the
    endpoint starting last will transmit at the higher speed, and the link
    should normally be established well be before the rate needs to be
    reduced.
    
    The only case where we will see a degradation of link re-establishment
    times is when the endpoints remain intact, and a glitch in the
    transmission media is causing the link reset. We will then experience
    a worst-case re-establishing time of 6 seconds, something we deem
    acceptable.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 634696b197411e7a95b346d6e5c21841f29fcedd
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Apr 15 13:33:03 2016 -0400

    tipc: guarantee peer bearer id exchange after reboot
    
    When a link endpoint is going down locally, e.g., because its interface
    is being stopped, it will spontaneously send out a RESET message to
    its peer, informing it about this fact. This saves the peer from
    detecting the failure via probing, and hence gives both speedier and
    less resource consuming failure detection on the peer side.
    
    According to the link FSM, a receiver of a RESET message, ignoring the
    reason for it, must now consider the sender ready to come back up, and
    starts periodically sending out ACTIVATE messages to the peer in order
    to re-establish the link. Also, according to the FSM, the receiver of
    an ACTIVATE message can now go directly to state ESTABLISHED and start
    sending regular traffic packets. This is a well-proven and robust FSM.
    
    However, in the case of a reboot, there is a small possibilty that link
    endpoint on the rebooted node may have been re-created with a new bearer
    identity between the moment it sent its (pre-boot) RESET and the moment
    it receives the ACTIVATE from the peer. The new bearer identity cannot
    be known by the peer according to this scenario, since traffic headers
    don't convey such information. This is a problem, because both endpoints
    need to know the correct value of the peer's bearer id at any moment in
    time in order to be able to produce correct link events for their users.
    
    The only way to guarantee this is to enforce a full setup message
    exchange (RESET + ACTIVATE) even after the reboot, since those messages
    carry the bearer idientity in their header.
    
    In this commit we do this by introducing and setting a "stopping" bit in
    the header of the spontaneously generated RESET messages, informing the
    peer that the sender will not be immediately ready to re-establish the
    link. A receiver seeing this bit must act as if this were a locally
    detected connectivity failure, and hence has to go through a full two-
    way setup message exchange before any link can be re-established.
    
    Although never reported, this problem seems to have always been around.
    
    This protocol addition is fully backwards compatible.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 333f796235a52727db7e0a13888045f3aa3d5335
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Apr 12 13:05:21 2016 +0200

    tipc: fix a race condition leading to subscriber refcnt bug
    
    Until now, the requests sent to topology server are queued
    to a workqueue by the generic server framework.
    These messages are processed by worker threads and trigger the
    registered callbacks.
    To reduce latency on uniprocessor systems, explicit rescheduling
    is performed using cond_resched() after MAX_RECV_MSG_COUNT(25)
    messages.
    
    This implementation on SMP systems leads to an subscriber refcnt
    error as described below:
    When a worker thread yields by calling cond_resched() in a SMP
    system, a new worker is created on another CPU to process the
    pending workitem. Sometimes the sleeping thread wakes up before
    the new thread finishes execution.
    This breaks the assumption on ordering and being single threaded.
    The fault is more frequent when MAX_RECV_MSG_COUNT is lowered.
    
    If the first thread was processing subscription create and the
    second thread processing close(), the close request will free
    the subscriber and the create request oops as follows:
    
    [31.224137] WARNING: CPU: 2 PID: 266 at include/linux/kref.h:46 tipc_subscrb_rcv_cb+0x317/0x380         [tipc]
    [31.228143] CPU: 2 PID: 266 Comm: kworker/u8:1 Not tainted 4.5.0+ #97
    [31.228377] Workqueue: tipc_rcv tipc_recv_work [tipc]
    [...]
    [31.228377] Call Trace:
    [31.228377]  [<ffffffff812fbb6b>] dump_stack+0x4d/0x72
    [31.228377]  [<ffffffff8105a311>] __warn+0xd1/0xf0
    [31.228377]  [<ffffffff8105a3fd>] warn_slowpath_null+0x1d/0x20
    [31.228377]  [<ffffffffa0098067>] tipc_subscrb_rcv_cb+0x317/0x380 [tipc]
    [31.228377]  [<ffffffffa00a4984>] tipc_receive_from_sock+0xd4/0x130 [tipc]
    [31.228377]  [<ffffffffa00a439b>] tipc_recv_work+0x2b/0x50 [tipc]
    [31.228377]  [<ffffffff81071925>] process_one_work+0x145/0x3d0
    [31.246554] ---[ end trace c3882c9baa05a4fd ]---
    [31.248327] BUG: spinlock bad magic on CPU#2, kworker/u8:1/266
    [31.249119] BUG: unable to handle kernel NULL pointer dereference at 0000000000000428
    [31.249323] IP: [<ffffffff81099d0c>] spin_dump+0x5c/0xe0
    [31.249323] PGD 0
    [31.249323] Oops: 0000 [#1] SMP
    
    In this commit, we
    - rename tipc_conn_shutdown() to tipc_conn_release().
    - move connection release callback execution from tipc_close_conn()
      to a new function tipc_sock_release(), which is executed before
      we free the connection.
    Thus we release the subscriber during connection release procedure
    rather than connection shutdown procedure.
    
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7d45a04cbc2683f9552572850f1c711d9b96dd26
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Apr 13 11:45:47 2016 -0400

    tipc: remove remnants of old broadcast code
    
    We remove a couple of leftover fields in struct tipc_bearer. Those
    were used by the old broadcast implementation, and are not needed
    any longer. There is no functional changes in this commit.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c64a73d584cc344915baee1183c791c0d0c42d79
Merge: a6db4494d218 4d0fc73ebe94
Author: David S. Miller <davem@davemloft.net>
Date:   Mon Apr 11 15:31:34 2016 -0400

    Merge branch 'udp-pull'
    
    Willem de Bruijn says:
    
    ====================
    net: fix udp pull header breakage
    
    Commit e6afc8ace6dd ("udp: remove headers from UDP packets before
    queueing") modified udp receive processing to pull headers before
    enqueue and to not expect them on dequeue.
    
    The patch missed protocols on top of udp with in-kernel
    implementations that have their own skb_recv_datagram calls and
    dequeue logic. Modify these datapaths to also no longer expect
    a udp header at skb->data.
    
    Sunrpc and rxrpc are the only two protocols that call this
    function and contain references to udphr (some others, like tipc,
    are based on encap_rcv, which acts before enqueue, before the
    the header pull).
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 10c3c02255124e28c8bb63a274a543ee7e77f223
Merge: ebf4dc2b1b2b ddb1d33969ef
Author: David S. Miller <davem@davemloft.net>
Date:   Mon Apr 11 15:22:21 2016 -0400

    Merge branch 'tipc-fixes'
    
    Jon Maloy says:
    
    ====================
    tipc: name distributor pernet queue
    
    Commit #1 fixes a potential issue with deferred binding table
    updates being pushed to the wrong namespace.
    
    Commit #2 solves a problem with deferred binding table updates
    remaining in the the defer queue after the issuing node has gone
    down.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ddb1d33969ef52687ad00f75eecf87029f62e382
Author: Erik Hugne <erik.hugne@gmail.com>
Date:   Thu Apr 7 10:40:44 2016 -0400

    tipc: purge deferred updates from dead nodes
    
    If a peer node becomes unavailable, in addition to removing the
    nametable entries from this node we also need to purge all deferred
    updates associated with this node.
    
    Signed-off-by: Erik Hugne <erik.hugne@gmail.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 541726abe7daca64390c2ec34e6a203145f1686d
Author: Erik Hugne <erik.hugne@gmail.com>
Date:   Thu Apr 7 10:40:43 2016 -0400

    tipc: make dist queue pernet
    
    Nametable updates received from the network that cannot be applied
    immediately are placed on a defer queue. This queue is global to the
    TIPC module, which might cause problems when using TIPC in containers.
    To prevent nametable updates from escaping into the wrong namespace,
    we make the queue pernet instead.
    
    Signed-off-by: Erik Hugne <erik.hugne@gmail.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 889750bd2e08a94d52a116056d462b3a8e5616a7
Merge: ba35855e24d1 5b7066c3dd24
Author: David S. Miller <davem@davemloft.net>
Date:   Thu Apr 7 17:00:14 2016 -0400

    Merge branch 'tipc-next'
    
    Jon Maloy says:
    
    ====================
    tipc: some small fixes
    
    When fix a minor buffer leak, and ensure that bearers filter packets
    correctly while they are being shut down.
    
    v2: Corrected typos in commit #3, as per feedback from S. Shtylyov
    v3: Removed commit #3 from the series. Improved version will be
        re-submitted later.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5b7066c3dd24c7d538e5ee402eb24bb182c16dab
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Apr 7 10:09:14 2016 -0400

    tipc: stricter filtering of packets in bearer layer
    
    Resetting a bearer/interface, with the consequence of resetting all its
    pertaining links, is not an atomic action. This becomes particularly
    evident in very large clusters, where a lot of traffic may happen on the
    remaining links while we are busy shutting them down. In extreme cases,
    we may even see links being re-created and re-established before we are
    finished with the job.
    
    To solve this, we now introduce a solution where we temporarily detach
    the bearer from the interface when the bearer is reset. This inhibits
    all packet reception, while sending still is possible. For the latter,
    we use the fact that the device's user pointer now is zero to filter out
    which packets can be sent during this situation; i.e., outgoing RESET
    messages only.  This filtering serves to speed up the neighbors'
    detection of the loss event, and saves us from unnecessary probing.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4e801fa14f68223d36480bced975ebf0c5f9a284
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Apr 7 10:09:13 2016 -0400

    tipc: eliminate buffer leak in bearer layer
    
    When enabling a bearer we create a 'neigbor discoverer' instance by
    calling the function tipc_disc_create() before the bearer is actually
    registered in the list of enabled bearers. Because of this, the very
    first discovery broadcast message, created by the mentioned function,
    is lost, since it cannot find any valid bearer to use. Furthermore,
    the used send function, tipc_bearer_xmit_skb() does not free the given
    buffer when it cannot find a  bearer, resulting in the leak of exactly
    one send buffer each time a bearer is enabled.
    
    This commit fixes this problem by introducing two changes:
    
    1) Instead of attemting to send the discovery message directly, we let
       tipc_disc_create() return the discovery buffer to the calling
       function, tipc_enable_bearer(), so that the latter can send it
       when the enabling sequence is finished.
    
    2) In tipc_bearer_xmit_skb(), as well as in the two other transmit
       functions at the bearer layer, we now free the indicated buffer or
       buffer chain when a valid bearer cannot be found.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9bd160bfa27fa41927dbbce7ee0ea779700e09ef
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Mon Mar 14 09:43:52 2016 +0100

    tipc: make sure IPv6 header fits in skb headroom
    
    Expand headroom further in order to be able to fit the larger IPv6
    header. Prior to this patch this caused a skb under panic for certain
    tipc packets when using IPv6 UDP bearer(s).
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e2857b8f11a289ed2b61d18d0665e05c1053c446
Merge: 01ffa3df223c 6faac63a6986
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Mar 7 15:41:10 2016 -0800

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Fix ordering of WEXT netlink messages so we don't see a newlink
        after a dellink, from Johannes Berg.
    
     2) Out of bounds access in minstrel_ht_set_best_prob_rage, from
        Konstantin Khlebnikov.
    
     3) Paging buffer memory leak in iwlwifi, from Matti Gottlieb.
    
     4) Wrong units used to set initial TCP rto from cached metrics, also
        from Konstantin Khlebnikov.
    
     5) Fix stale IP options data in the SKB control block from leaking
        through layers of encapsulation, from Bernie Harris.
    
     6) Zero padding len miscalculated in bnxt_en, from Michael Chan.
    
     7) Only CHECKSUM_PARTIAL packets should be passed down through GSO, fix
        from Hannes Frederic Sowa.
    
     8) Fix suspend/resume with JME networking devices, from Diego Violat
        and Guo-Fu Tseng.
    
     9) Checksums not validated properly in bridge multicast support due to
        the placement of the SKB header pointers at the time of the check,
        fix from Álvaro Fernández Rojas.
    
    10) Fix hang/tiemout with r8169 if a stats fetch is done while the
        device is runtime suspended.  From Chun-Hao Lin.
    
    11) The forwarding database netlink dump facilities don't track the
        state of the dump properly, resulting in skipped/missed entries.
        From Minoura Makoto.
    
    12) Fix regression from a recent 3c59x bug fix, from Neil Horman.
    
    13) Fix list corruption in bna driver, from Ivan Vecera.
    
    14) Big endian machines crash on vlan add in bnx2x, fix from Michal
        Schmidt.
    
    15) Ethtool RSS configuration not propagated properly in mlx5 driver,
        from Tariq Toukan.
    
    16) Fix regression in PHY probing in stmmac driver, from Gabriel
        Fernandez.
    
    17) Fix SKB tailroom calculation in igmp/mld code, from Benjamin
        Poirier.
    
    18) A past change to skip empty routing headers in ipv6 extention header
        parsing accidently caused fragment headers to not be matched any
        longer.  Fix from Florian Westphal.
    
    19) eTSEC-106 erratum needs to be applied to more gianfar chips, from
        Atsushi Nemoto.
    
    20) Fix netdev reference after free via workqueues in usb networking
        drivers, from Oliver Neukum and Bjørn Mork.
    
    21) mdio->irq is now an array rather than a pointer to dynamic memory,
        but several drivers were still trying to free it :-/ Fixes from
        Colin Ian King.
    
    22) act_ipt iptables action forgets to set the family field, thus LOG
        netfilter targets don't work with it.  Fix from Phil Sutter.
    
    23) SKB leak in ibmveth when skb_linearize() fails, from Thomas Falcon.
    
    24) pskb_may_pull() cannot be called with interrupts disabled, fix code
        that tries to do this in vmxnet3 driver, from Neil Horman.
    
    25) be2net driver leaks iomap'd memory on removal, fix from Douglas
        Miller.
    
    26) Forgotton RTNL mutex unlock in ppp_create_interface() error paths,
        from Guillaume Nault.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (97 commits)
      ppp: release rtnl mutex when interface creation fails
      cdc_ncm: do not call usbnet_link_change from cdc_ncm_bind
      tcp: fix tcpi_segs_in after connection establishment
      net: hns: fix the bug about loopback
      jme: Fix device PM wakeup API usage
      jme: Do not enable NIC WoL functions on S0
      udp6: fix UDP/IPv6 encap resubmit path
      be2net: Don't leak iomapped memory on removal.
      vmxnet3: avoid calling pskb_may_pull with interrupts disabled
      net: ethernet: Add missing MFD_SYSCON dependency on HAS_IOMEM
      ibmveth: check return of skb_linearize in ibmveth_start_xmit
      cdc_ncm: toggle altsetting to force reset before setup
      usbnet: cleanup after bind() in probe()
      mlxsw: pci: Correctly determine if descriptor queue is full
      mlxsw: spectrum: Always decrement bridge's ref count
      tipc: fix nullptr crash during subscription cancel
      net: eth: altera: do not free array priv->mdio->irq
      net/ethoc: do not free array priv->mdio->irq
      net: sched: fix act_ipt for LOG target
      asix: do not free array priv->mdio->irq
      ...

commit 49cc66eaee19e772997b63b057ea4b4bf7d48db0
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Fri Mar 4 17:04:42 2016 +0100

    tipc: move netlink policies to netlink.c
    
    Make the c files less cluttered and enable netlink attributes to be
    shared between files.
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e74a386d70c793ef44678b44b021c99094b28c47
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Mar 3 14:23:21 2016 -0500

    tipc: remove pre-allocated message header in link struct
    
    Until now, we have kept a pre-allocated protocol message header
    aggregated into struct tipc_link. Apart from adding unnecessary
    footprint to the link instances, this requires extra code both to
    initialize and re-initialize it.
    
    We now remove this sub-optimization. This change also makes it
    possible to clean up the function tipc_build_proto_msg() and remove
    a couple of small functions that were accessing the mentioned header.
    In particular, we can replace all occurrences of the local function
    call link_own_addr(link) with the generic tipc_own_addr(net).
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4de13d7ed6ffdcbb34317acaa9236f121176f5f8
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Thu Mar 3 17:54:54 2016 +0100

    tipc: fix nullptr crash during subscription cancel
    
    commit 4d5cfcba2f6e ('tipc: fix connection abort during subscription
    cancel'), removes the check for a valid subscription before calling
    tipc_nametbl_subscribe().
    
    This will lead to a nullptr exception when we process a
    subscription cancel request. For a cancel request, a null
    subscription is passed to tipc_nametbl_subscribe() resulting
    in exception.
    
    In this commit, we call tipc_nametbl_subscribe() only for
    a valid subscription.
    
    Fixes: 4d5cfcba2f6e ('tipc: fix connection abort during subscription cancel')
    Reported-by: Anders Widell <anders.widell@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 34f65dbb6c7572b826d836d62b99de32ecf2af48
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Thu Mar 3 14:20:43 2016 +0100

    tipc: make sure required IPv6 addresses are scoped
    
    Make sure the user has provided a scope for multicast and link local
    addresses used locally by a UDP bearer.
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ddb3712552c8807c75576fb4fbdbb16f0d48b161
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Thu Mar 3 14:20:42 2016 +0100

    tipc: safely copy UDP netlink data from user
    
    The netlink policy for TIPC_NLA_UDP_LOCAL and TIPC_NLA_UDP_REMOTE
    is of type binary with a defined length. This causes the policy
    framework to threat the defined length as maximum length.
    
    There is however no protection against a user sending a smaller
    amount of data. Prior to this patch this wasn't handled which could
    result in a partially incomplete sockaddr_storage struct containing
    uninitialized data.
    
    In this patch we use nla_memcpy() when copying the user data. This
    ensures a potential gap at the end is cleared out properly.
    
    This was found by Julia with Coccinelle tool.
    
    Reported-by: Daniel Borkmann <daniel@iogearbox.net>
    Reported-by: Julia Lawall <julia.lawall@lip6.fr>
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2837f39c7cdbd209ab04d1c1f4eca015a40d5cd6
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Thu Mar 3 14:20:41 2016 +0100

    tipc: don't check link reset on non existing link
    
    Make sure we have a link before checking if it has been reset or not.
    
    Prior to this patch tipc_link_is_reset() could be called with a non
    existing link, resulting in a null pointer dereference.
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9b3009604b8e305c32125530a3cbcc57d88f3bc1
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Thu Mar 3 14:20:40 2016 +0100

    tipc: add net device to skb before UDP xmit
    
    Prior to this patch enabling a IPv4 UDP bearer caused a null pointer
    dereference in iptunnel_xmit_stats(), when it tried to dereference the
    net device from the skb. To resolve this we now point the skb device
    to the net device resolved from the routing table.
    
    Fixes: 039f50629b7f (ip_tunnel: Move stats update to iptunnel_xmit())
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 257a04782588b4b97ac005a044f85947f792be44
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Wed Jan 27 11:35:59 2016 +0100

    tipc: fix connection abort during subscription cancel
    
    [ Upstream commit 4d5cfcba2f6ec494d8810b9e3c0a7b06255c8067 ]
    
    In 'commit 7fe8097cef5f ("tipc: fix nullpointer bug when subscribing
    to events")', we terminate the connection if the subscription
    creation fails.
    In the same commit, the subscription creation result was based on
    the value of the subscription pointer (set in the function) instead
    of the return code.
    
    Unfortunately, the same function tipc_subscrp_create() handles
    subscription cancel request. For a subscription cancellation request,
    the subscription pointer cannot be set. Thus if a subscriber has
    several subscriptions and cancels any of them, the connection is
    terminated.
    
    In this commit, we terminate the connection based on the return value
    of tipc_subscrp_create().
    Fixes: commit 7fe8097cef5f ("tipc: fix nullpointer bug when subscribing to events")
    
    Reviewed-by:  Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sasha.levin@oracle.com>

commit 4ac39c3e2c80000a40b11bde33f425a44f1ef55b
Author: Insu Yun <wuninsu@gmail.com>
Date:   Wed Feb 17 11:47:35 2016 -0500

    tipc: unlock in error path
    
    [ Upstream commit b53ce3e7d407aa4196877a48b8601181162ab158 ]
    
    tipc_bcast_unlock need to be unlocked in error path.
    
    Signed-off-by: Insu Yun <wuninsu@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 692925fe2d42092a99d3532cb03932c8fda57786
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Feb 10 16:14:57 2016 -0500

    tipc: fix premature addition of node to lookup table
    
    [ Upstream commit d5c91fb72f1652ea3026925240a0998a42ddb16b ]
    
    In commit 5266698661401a ("tipc: let broadcast packet reception
    use new link receive function") we introduced a new per-node
    broadcast reception link instance. This link is created at the
    moment the node itself is created. Unfortunately, the allocation
    is done after the node instance has already been added to the node
    lookup hash table. This creates a potential race condition, where
    arriving broadcast packets are able to find and access the node
    before it has been fully initialized, and before the above mentioned
    link has been created. The result is occasional crashes in the function
    tipc_bcast_rcv(), which is trying to access the not-yet existing link.
    
    We fix this by deferring the addition of the node instance until after
    it has been fully initialized in the function tipc_node_create().
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c57e51ffd1d910d595ccb3af3ae70eeeb6d423a2
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Wed Jan 27 11:35:59 2016 +0100

    tipc: fix connection abort during subscription cancel
    
    [ Upstream commit 4d5cfcba2f6ec494d8810b9e3c0a7b06255c8067 ]
    
    In 'commit 7fe8097cef5f ("tipc: fix nullpointer bug when subscribing
    to events")', we terminate the connection if the subscription
    creation fails.
    In the same commit, the subscription creation result was based on
    the value of the subscription pointer (set in the function) instead
    of the return code.
    
    Unfortunately, the same function tipc_subscrp_create() handles
    subscription cancel request. For a subscription cancellation request,
    the subscription pointer cannot be set. Thus if a subscriber has
    several subscriptions and cancels any of them, the connection is
    terminated.
    
    In this commit, we terminate the connection based on the return value
    of tipc_subscrp_create().
    Fixes: commit 7fe8097cef5f ("tipc: fix nullpointer bug when subscribing to events")
    
    Reviewed-by:  Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f214fc402967e1bc94ad7f39faa03db5813d6849
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Mar 1 11:07:09 2016 +0100

    tipc: Revert "tipc: use existing sk_write_queue for outgoing packet chain"
    
    reverts commit 94153e36e709e ("tipc: use existing sk_write_queue for
    outgoing packet chain")
    
    In Commit 94153e36e709e, we assume that we fill & empty the socket's
    sk_write_queue within the same lock_sock() session.
    
    This is not true if the link is congested. During congestion, the
    socket lock is released while we wait for the congestion to cease.
    This implementation causes a nullptr exception, if the user space
    program has several threads accessing the same socket descriptor.
    
    Consider two threads of the same program performing the following:
         Thread1                                  Thread2
    --------------------                    ----------------------
    Enter tipc_sendmsg()                    Enter tipc_sendmsg()
    lock_sock()                             lock_sock()
    Enter tipc_link_xmit(), ret=ELINKCONG   spin on socket lock..
    sk_wait_event()                             :
    release_sock()                          grab socket lock
        :                                   Enter tipc_link_xmit(), ret=0
        :                                   release_sock()
    Wakeup after congestion
    lock_sock()
    skb = skb_peek(pktchain);
    !! TIPC_SKB_CB(skb)->wakeup_pending = tsk->link_cong;
    
    In this case, the second thread transmits the buffers belonging to
    both thread1 and thread2 successfully. When the first thread wakeup
    after the congestion it assumes that the pktchain is intact and
    operates on the skb's in it, which leads to the following exception:
    
    [2102.439969] BUG: unable to handle kernel NULL pointer dereference at 00000000000000d0
    [2102.440074] IP: [<ffffffffa005f330>] __tipc_link_xmit+0x2b0/0x4d0 [tipc]
    [2102.440074] PGD 3fa3f067 PUD 3fa6b067 PMD 0
    [2102.440074] Oops: 0000 [#1] SMP
    [2102.440074] CPU: 2 PID: 244 Comm: sender Not tainted 3.12.28 #1
    [2102.440074] RIP: 0010:[<ffffffffa005f330>]  [<ffffffffa005f330>] __tipc_link_xmit+0x2b0/0x4d0 [tipc]
    [...]
    [2102.440074] Call Trace:
    [2102.440074]  [<ffffffff8163f0b9>] ? schedule+0x29/0x70
    [2102.440074]  [<ffffffffa006a756>] ? tipc_node_unlock+0x46/0x170 [tipc]
    [2102.440074]  [<ffffffffa005f761>] tipc_link_xmit+0x51/0xf0 [tipc]
    [2102.440074]  [<ffffffffa006d8ae>] tipc_send_stream+0x11e/0x4f0 [tipc]
    [2102.440074]  [<ffffffff8106b150>] ? __wake_up_sync+0x20/0x20
    [2102.440074]  [<ffffffffa006dc9c>] tipc_send_packet+0x1c/0x20 [tipc]
    [2102.440074]  [<ffffffff81502478>] sock_sendmsg+0xa8/0xd0
    [2102.440074]  [<ffffffff81507895>] ? release_sock+0x145/0x170
    [2102.440074]  [<ffffffff815030d8>] ___sys_sendmsg+0x3d8/0x3e0
    [2102.440074]  [<ffffffff816426ae>] ? _raw_spin_unlock+0xe/0x10
    [2102.440074]  [<ffffffff81115c2a>] ? handle_mm_fault+0x6ca/0x9d0
    [2102.440074]  [<ffffffff8107dd65>] ? set_next_entity+0x85/0xa0
    [2102.440074]  [<ffffffff816426de>] ? _raw_spin_unlock_irq+0xe/0x20
    [2102.440074]  [<ffffffff8107463c>] ? finish_task_switch+0x5c/0xc0
    [2102.440074]  [<ffffffff8163ea8c>] ? __schedule+0x34c/0x950
    [2102.440074]  [<ffffffff81504e12>] __sys_sendmsg+0x42/0x80
    [2102.440074]  [<ffffffff81504e62>] SyS_sendmsg+0x12/0x20
    [2102.440074]  [<ffffffff8164aed2>] system_call_fastpath+0x16/0x1b
    
    In this commit, we maintain the skb list always in the stack.
    
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 619b17452a388d6be69a7b28dc92310ea3f5aa65
Author: Florian Westphal <fw@strlen.de>
Date:   Wed Feb 24 17:20:17 2016 +0100

    tipc: fix null deref crash in compat config path
    
    msg.dst_sk needs to be set up with a valid socket because some callbacks
    later derive the netns from it.
    
    Fixes: 263ea09084d172d ("Revert "genl: Add genlmsg_new_unicast() for unicast message allocation")
    Reported-by: Jon Maloy <maloy@donjonn.com>
    Bisected-by: Jon Maloy <maloy@donjonn.com>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Acked-by Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d25a01257e422a4bdeb426f69529d57c73b235fe
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Feb 24 11:10:48 2016 -0500

    tipc: fix crash during node removal
    
    When the TIPC module is unloaded, we have identified a race condition
    that allows a node reference counter to go to zero and the node instance
    being freed before the node timer is finished with accessing it. This
    leads to occasional crashes, especially in multi-namespace environments.
    
    The scenario goes as follows:
    
    CPU0:(node_stop)                       CPU1:(node_timeout)  // ref == 2
    
    1:                                          if(!mod_timer())
    2: if (del_timer())
    3:   tipc_node_put()                                        // ref -> 1
    4: tipc_node_put()                                          // ref -> 0
    5:   kfree_rcu(node);
    6:                                               tipc_node_get(node)
    7:                                               // BOOM!
    
    We now clean up this functionality as follows:
    
    1) We remove the node pointer from the node lookup table before we
       attempt deactivating the timer. This way, we reduce the risk that
       tipc_node_find() may obtain a valid pointer to an instance marked
       for deletion; a harmless but undesirable situation.
    
    2) We use del_timer_sync() instead of del_timer() to safely deactivate
       the node timer without any risk that it might be reactivated by the
       timeout handler. There is no risk of deadlock here, since the two
       functions never touch the same spinlocks.
    
    3: We remove a pointless tipc_node_get() + tipc_node_put() from the
       timeout handler.
    
    Reported-by: Zhijiang Hu <huzhijiang@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b170997acedc6c11ed2ec07b8d415601e65bb452
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Feb 24 11:00:19 2016 -0500

    tipc: eliminate risk of finding to-be-deleted node instance
    
    Although we have never seen it happen, we have identified the
    following problematic scenario when nodes are stopped and deleted:
    
    CPU0:                            CPU1:
    
    tipc_node_xxx()                                   //ref == 1
       tipc_node_put()                                //ref -> 0
                                     tipc_node_find() // node still in table
           tipc_node_delete()
             list_del_rcu(n. list)
                                     tipc_node_get()  //ref -> 1, bad
             kfree_rcu()
    
                                     tipc_node_put() //ref to 0 again.
                                     kfree_rcu()     // BOOM!
    
    We fix this by introducing use of the conditional kref_get_if_not_zero()
    instead of kref_get() in the function tipc_node_find(). This eliminates
    any risk of post-mortem access.
    
    Reported-by: Zhijiang Hu <huzhijiang@gmail.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit dea08e604408d0303e2332896c5fdd8c1f7d79a2
Merge: 5c102d0eca3c d856626d3b05
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Feb 22 12:18:07 2016 -0800

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
     "Looks like a lot, but mostly driver fixes scattered all over as usual.
    
      Of note:
    
       1) Add conditional sched in nf conntrack in cleanup to avoid NMI
          watchdogs.  From Florian Westphal.
    
       2) Fix deadlock in nfnetlink cttimeout, also from Floarian.
    
       3) Fix handling of slaves in bonding ARP monitor validation, from Jay
          Vosburgh.
    
       4) Callers of ip_cmsg_send() are responsible for freeing IP options,
          some were not doing so.  Fix from Eric Dumazet.
    
       5) Fix per-cpu bugs in mvneta driver, from Gregory CLEMENT.
    
       6) Fix vlan handling in mv88e6xxx DSA driver, from Vivien Didelot.
    
       7) bcm7xxx PHY driver bug fixes from Florian Fainelli.
    
       8) Avoid unaligned accesses to protocol headers wrt.  GRE, from
          Alexander Duyck.
    
       9) SKB leaks and other problems in arc_emac driver, from Alexander
          Kochetkov.
    
      10) tcp_v4_inbound_md5_hash() releases listener socket instead of
          request socket on error path, oops.  Fix from Eric Dumazet.
    
      11) Missing socket release in pppoe_rcv_core() that seems to have
          existed basically forever.  From Guillaume Nault.
    
      12) Missing slave_dev unregister in dsa_slave_create() error path,
          from Florian Fainelli.
    
      13) crypto_alloc_hash() never returns NULL, fix return value check in
          __tcp_alloc_md5sig_pool.  From Insu Yun.
    
      14) Properly expire exception route entries in ipv4, from Xin Long.
    
      15) Fix races in tcp/dccp listener socket dismantle, from Eric
          Dumazet.
    
      16) Don't set IFF_TX_SKB_SHARING in vxlan, geneve, or GRE, it's not
          legal.  These drivers modify the SKB on transmit.  From Jiri Benc.
    
      17) Fix regression in the initialziation of netdev->tx_queue_len.
          From Phil Sutter.
    
      18) Missing unlock in tipc_nl_add_bc_link() error path, from Insu Yun.
    
      19) SCTP port hash sizing does not properly ensure that table is a
          power of two in size.  From Neil Horman.
    
      20) Fix initializing of software copy of MAC address in fmvj18x_cs
          driver, from Ken Kawasaki"
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (129 commits)
      bnx2x: Fix 84833 phy command handler
      bnx2x: Fix led setting for 84858 phy.
      bnx2x: Correct 84858 PHY fw version
      bnx2x: Fix 84833 RX CRC
      bnx2x: Fix link-forcing for KR2
      net: ethernet: davicom: fix devicetree irq resource
      fmvj18x_cs: fix incorrect indexing of dev->dev_addr[] when copying the MAC address
      Driver: Vmxnet3: Update Rx ring 2 max size
      net: netcp: rework the code for get/set sw_data in dma desc
      soc: ti: knav_dma: rename pad in struct knav_dma_desc to sw_data
      net: ti: netcp: restore get/set_pad_info() functionality
      MAINTAINERS: Drop myself as xen netback maintainer
      sctp: Fix port hash table size computation
      can: ems_usb: Fix possible tx overflow
      Bluetooth: hci_core: Avoid mixing up req_complete and req_complete_skb
      net: bcmgenet: Fix internal PHY link state
      af_unix: Don't use continue to re-execute unix_stream_read_generic loop
      unix_diag: fix incorrect sign extension in unix_lookup_by_ino
      bnxt_en: Failure to update PHY is not fatal condition.
      bnxt_en: Remove unnecessary call to update PHY settings.
      ...

commit b53ce3e7d407aa4196877a48b8601181162ab158
Author: Insu Yun <wuninsu@gmail.com>
Date:   Wed Feb 17 11:47:35 2016 -0500

    tipc: unlock in error path
    
    tipc_bcast_unlock need to be unlocked in error path.
    
    Signed-off-by: Insu Yun <wuninsu@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4952cd3e7b47dfe8f7d6c69973b13eb487eb2bd0
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Thu Feb 11 10:43:15 2016 +0100

    tipc: refactor node xmit and fix memory leaks
    
    Refactor tipc_node_xmit() to fail fast and fail early. Fix several
    potential memory leaks in unexpected error paths.
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d5c91fb72f1652ea3026925240a0998a42ddb16b
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Feb 10 16:14:57 2016 -0500

    tipc: fix premature addition of node to lookup table
    
    In commit 5266698661401a ("tipc: let broadcast packet reception
    use new link receive function") we introduced a new per-node
    broadcast reception link instance. This link is created at the
    moment the node itself is created. Unfortunately, the allocation
    is done after the node instance has already been added to the node
    lookup hash table. This creates a potential race condition, where
    arriving broadcast packets are able to find and access the node
    before it has been fully initialized, and before the above mentioned
    link has been created. The result is occasional crashes in the function
    tipc_bcast_rcv(), which is trying to access the not-yet existing link.
    
    We fix this by deferring the addition of the node instance until after
    it has been fully initialized in the function tipc_node_create().
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9a23ac475cd98a1155ce16a8fab4d28e171c0d9d
Merge: c6140a299bdf 06c8581f85e9
Author: David S. Miller <davem@davemloft.net>
Date:   Sat Feb 6 03:42:09 2016 -0500

    Merge branch 'tipc-topology-updates'
    
    Parthasarathy Bhuvaragan says:
    
    ====================
    tipc: cleanups, fixes & improvements for topology server
    
    This series contains topology server cleanups, fixes and improvements.
    
    Cleanups in #1-#4:
    We remove duplicate data structures and aligin the rest of the code accordingly.
    
    Fixes in #5-#8:
    The bugs occur either during configuration or while running on SMP targets,
    which are race conditions that pop up under different situations.
    
    Improvements in #9-#10:
    Updates to decrease timer usage and improve readability.
    
    v2: Updated commit message in patch 6 based on feedback from
        Sergei Shtylyov sergei.shtylyov@cogentembedded.com
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 06c8581f85e99bbf69723f76ad2a40fa8a8c8cdd
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Feb 2 10:52:17 2016 +0100

    tipc: use alloc_ordered_workqueue() instead of WQ_UNBOUND w/ max_active = 1
    
    Until now, tipc_rcv and tipc_send workqueues in server are allocated
    with parameters WQ_UNBOUND & max_active = 1.
    This parameters passed to this function makes it equivalent to
    alloc_ordered_workqueue(). The later form is more explicit and
    can inherit future ordered_workqueue changes.
    
    In this commit we replace alloc_workqueue() with more readable
    alloc_ordered_workqueue().
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ae245557f87fffe2e1c39ba07524024e650e822b
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Feb 2 10:52:16 2016 +0100

    tipc: donot create timers if subscription timeout = TIPC_WAIT_FOREVER
    
    Until now, we create timers even for the subscription requests
    with timeout = TIPC_WAIT_FOREVER.
    This can be improved by avoiding timer creation when the timeout
    is set to TIPC_WAIT_FOREVER.
    
    In this commit, we introduce a check to creates timers only
    when timeout != TIPC_WAIT_FOREVER.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f3ad288c56d21e3b8ec77e13ab9aa06dbbfa3577
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Feb 2 10:52:15 2016 +0100

    tipc: protect tipc_subscrb_get() with subscriber spin lock
    
    Until now, during subscription creation the mod_time() &
    tipc_subscrb_get() are called after releasing the subscriber
    spin lock.
    
    In a SMP system when performing a subscription creation, if the
    subscription timeout occurs simultaneously (the timer is
    scheduled to run on another CPU) then the timer thread
    might decrement the subscribers refcount before the create
    thread increments the refcount.
    
    This can be simulated by creating subscription with timeout=0 and
    sometimes the timeout occurs before the create request is complete.
    This leads to the following message:
    [30.702949] BUG: spinlock bad magic on CPU#1, kworker/u8:3/87
    [30.703834] general protection fault: 0000 [#1] SMP
    [30.704826] CPU: 1 PID: 87 Comm: kworker/u8:3 Not tainted 4.4.0-rc8+ #18
    [30.704826] Workqueue: tipc_rcv tipc_recv_work [tipc]
    [30.704826] task: ffff88003f878600 ti: ffff88003fae0000 task.ti: ffff88003fae0000
    [30.704826] RIP: 0010:[<ffffffff8109196c>]  [<ffffffff8109196c>] spin_dump+0x5c/0xe0
    [...]
    [30.704826] Call Trace:
    [30.704826]  [<ffffffff81091a16>] spin_bug+0x26/0x30
    [30.704826]  [<ffffffff81091b75>] do_raw_spin_lock+0xe5/0x120
    [30.704826]  [<ffffffff81684439>] _raw_spin_lock_bh+0x19/0x20
    [30.704826]  [<ffffffffa0096f10>] tipc_subscrb_rcv_cb+0x1d0/0x330 [tipc]
    [30.704826]  [<ffffffffa00a37b1>] tipc_receive_from_sock+0xc1/0x150 [tipc]
    [30.704826]  [<ffffffffa00a31df>] tipc_recv_work+0x3f/0x80 [tipc]
    [30.704826]  [<ffffffff8106a739>] process_one_work+0x149/0x3c0
    [30.704826]  [<ffffffff8106aa16>] worker_thread+0x66/0x460
    [30.704826]  [<ffffffff8106a9b0>] ? process_one_work+0x3c0/0x3c0
    [30.704826]  [<ffffffff8106a9b0>] ? process_one_work+0x3c0/0x3c0
    [30.704826]  [<ffffffff8107029d>] kthread+0xed/0x110
    [30.704826]  [<ffffffff810701b0>] ? kthread_create_on_node+0x190/0x190
    [30.704826]  [<ffffffff81684bdf>] ret_from_fork+0x3f/0x70
    
    In this commit,
    1. we remove the check for the return code for mod_timer()
    2. we protect tipc_subscrb_get() using the subscriber spin lock.
       We increment the subscriber's refcount as soon as we add the
       subscription to subscriber's subscription list.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d4091899c9bbfd6695449c6b09517ceb45bb379d
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Feb 2 10:52:14 2016 +0100

    tipc: hold subscriber->lock for tipc_nametbl_subscribe()
    
    Until now, while creating a subscription the subscriber lock
    protects only the subscribers subscription list and not the
    nametable. The call to tipc_nametbl_subscribe() is outside
    the lock. However, at subscription timeout and cancel both
    the subscribers subscription list and the nametable are
    protected by the subscriber lock.
    
    This asymmetric locking mechanism leads to the following problem:
    In a SMP system, the timer can be fire on another core before
    the create request is complete.
    When the timer thread calls tipc_nametbl_unsubscribe() before create
    thread calls tipc_nametbl_subscribe(), we get a nullptr exception.
    
    This can be simulated by creating subscription with timeout=0 and
    sometimes the timeout occurs before the create request is complete.
    
    The following is the oops:
    [57.569661] BUG: unable to handle kernel NULL pointer dereference at (null)
    [57.577498] IP: [<ffffffffa02135aa>] tipc_nametbl_unsubscribe+0x8a/0x120 [tipc]
    [57.584820] PGD 0
    [57.586834] Oops: 0002 [#1] SMP
    [57.685506] CPU: 14 PID: 10077 Comm: kworker/u40:1 Tainted: P OENX 3.12.48-52.27.1.     9688.1.PTF-default #1
    [57.703637] Workqueue: tipc_rcv tipc_recv_work [tipc]
    [57.708697] task: ffff88064c7f00c0 ti: ffff880629ef4000 task.ti: ffff880629ef4000
    [57.716181] RIP: 0010:[<ffffffffa02135aa>]  [<ffffffffa02135aa>] tipc_nametbl_unsubscribe+0x8a/   0x120 [tipc]
    [...]
    [57.812327] Call Trace:
    [57.814806]  [<ffffffffa0211c77>] tipc_subscrp_delete+0x37/0x90 [tipc]
    [57.821357]  [<ffffffffa0211e2f>] tipc_subscrp_timeout+0x3f/0x70 [tipc]
    [57.827982]  [<ffffffff810618c1>] call_timer_fn+0x31/0x100
    [57.833490]  [<ffffffff81062709>] run_timer_softirq+0x1f9/0x2b0
    [57.839414]  [<ffffffff8105a795>] __do_softirq+0xe5/0x230
    [57.844827]  [<ffffffff81520d1c>] call_softirq+0x1c/0x30
    [57.850150]  [<ffffffff81004665>] do_softirq+0x55/0x90
    [57.855285]  [<ffffffff8105aa35>] irq_exit+0x95/0xa0
    [57.860290]  [<ffffffff815215b5>] smp_apic_timer_interrupt+0x45/0x60
    [57.866644]  [<ffffffff8152005d>] apic_timer_interrupt+0x6d/0x80
    [57.872686]  [<ffffffffa02121c5>] tipc_subscrb_rcv_cb+0x2a5/0x3f0 [tipc]
    [57.879425]  [<ffffffffa021c65f>] tipc_receive_from_sock+0x9f/0x100 [tipc]
    [57.886324]  [<ffffffffa021c826>] tipc_recv_work+0x26/0x60 [tipc]
    [57.892463]  [<ffffffff8106fb22>] process_one_work+0x172/0x420
    [57.898309]  [<ffffffff8107079a>] worker_thread+0x11a/0x3c0
    [57.903871]  [<ffffffff81077114>] kthread+0xb4/0xc0
    [57.908751]  [<ffffffff8151f318>] ret_from_fork+0x58/0x90
    
    In this commit, we do the following at subscription creation:
    1. set the subscription's subscriber pointer before performing
       tipc_nametbl_subscribe(), as this value is required further in
       the call chain ex: by tipc_subscrp_send_event().
    2. move tipc_nametbl_subscribe() under the scope of subscriber lock
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit cb01c7c8701a35866479753fe78d04bd9826dd1b
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Feb 2 10:52:13 2016 +0100

    tipc: fix connection abort when receiving invalid cancel request
    
    Until now, the subscribers endianness for a subscription
    create/cancel request is determined as:
        swap = !(s->filter & (TIPC_SUB_PORTS | TIPC_SUB_SERVICE))
    The checks are performed only for port/service subscriptions.
    
    The swap calculation is incorrect if the filter in the subscription
    cancellation request is set to TIPC_SUB_CANCEL (it's a malformed
    cancel request, as the corresponding subscription create filter
    is missing).
    Thus, the check if the request is for cancellation fails and the
    request is treated as a subscription create request. The
    subscription creation fails as the request is illegal, which
    terminates this connection.
    
    In this commit we determine the endianness by including
    TIPC_SUB_CANCEL, which will set swap correctly and the
    request is processed as a cancellation request.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c8beccc67c833db4a01c621cbc6eb0a577286806
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Feb 2 10:52:12 2016 +0100

    tipc: fix connection abort during subscription cancellation
    
    In 'commit 7fe8097cef5f ("tipc: fix nullpointer bug when subscribing
    to events")', we terminate the connection if the subscription
    creation fails.
    In the same commit, the subscription creation result was based on
    the value of subscription pointer (set in the function) instead of
    the return code.
    
    Unfortunately, the same function also handles subscription
    cancellation request. For a subscription cancellation request,
    the subscription pointer cannot be set. Thus the connection is
    terminated during cancellation request.
    
    In this commit, we move the subcription cancel check outside
    of tipc_subscrp_create(). Hence,
    - tipc_subscrp_create() will create a subscripton
    - tipc_subscrb_rcv_cb() will subscribe or cancel a subscription.
    
    Fixes: 'commit 7fe8097cef5f ("tipc: fix nullpointer bug when subscribing to events")'
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7c13c6224123a6424bd3bc60ef982759754501e9
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Feb 2 10:52:11 2016 +0100

    tipc: introduce tipc_subscrb_subscribe() routine
    
    In this commit, we split tipc_subscrp_create() into two:
    1. tipc_subscrp_create() creates a subscription
    2. A new function tipc_subscrp_subscribe() adds the
       subscription to the subscriber subscription list,
       activates the subscription timer and subscribes to
       the nametable updates.
    
    In future commits, the purpose of tipc_subscrb_rcv_cb() will
    be to either subscribe or cancel a subscription.
    
    There is no functional change in this commit.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a4273c73ebf06515eab6b5a84817a175ad8acdc4
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Feb 2 10:52:10 2016 +0100

    tipc: remove struct tipc_name_seq from struct tipc_subscription
    
    Until now, struct tipc_subscriber has duplicate fields for
    type, upper and lower (as member of struct tipc_name_seq) at:
    1. as member seq in struct tipc_subscription
    2. as member seq in struct tipc_subscr, which is contained
       in struct tipc_event
    The former structure contains the type, upper and lower
    values in network byte order and the later contains the
    intact copy of the request.
    The struct tipc_subscription contains a field swap to
    determine if request needs network byte order conversion.
    Thus by using swap, we can convert the request when
    required instead of duplicating it.
    
    In this commit,
    1. we remove the references to these elements as members of
       struct tipc_subscription and replace them with elements
       from struct tipc_subscr.
    2. provide new functions to convert the user request into
       network byte order.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3086523149ef4c15f5e75bb2ed9f43a8f3f95015
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Feb 2 10:52:09 2016 +0100

    tipc: remove filter and timeout elements from struct tipc_subscription
    
    Until now, struct tipc_subscription has duplicate timeout and filter
    attributes present:
    1. directly as members of struct tipc_subscription
    2. in struct tipc_subscr, which is contained in struct tipc_event
    
    In this commit, we remove the references to these elements as
    members of struct tipc_subscription and replace them with elements
    from struct tipc_subscr.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4f61d4ef7088581997ad95ad37db2d8a459844e4
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Tue Feb 2 10:52:08 2016 +0100

    tipc: remove incorrect check for subscription timeout value
    
    Until now, during subscription creation we set sub->timeout by
    converting the timeout request value in milliseconds to jiffies.
    This is followed by setting the timeout value in the timer if
    sub->timeout != TIPC_WAIT_FOREVER.
    
    For a subscription create request with a timeout value of
    TIPC_WAIT_FOREVER, msecs_to_jiffies(TIPC_WAIT_FOREVER)
    returns MAX_JIFFY_OFFSET (0xfffffffe). This is not equal to
    TIPC_WAIT_FOREVER (0xffffffff).
    
    In this commit, we remove this check.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 817298102b0bc936b08dfcc5fbcc2213157050f2
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Mon Feb 1 08:19:57 2016 +0100

    tipc: fix link priority propagation
    
    Currently link priority changes isn't handled for active links. In
    this patch we resolve this by changing our priority if the peer passes
    a valid priority in a state message.
    
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d01332f1acacc0cb43a61f4244dd2b846d4cd585
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Mon Feb 1 08:19:56 2016 +0100

    tipc: fix link attribute propagation bug
    
    Changing certain link attributes (link tolerance and link priority)
    from the TIPC management tool is supposed to automatically take
    effect at both endpoints of the affected link.
    
    Currently the media address is not instantiated for the link and is
    used uninstantiated when crafting protocol messages designated for the
    peer endpoint. This means that changing a link property currently
    results in the property being changed on the local machine but the
    protocol message designated for the peer gets lost. Resulting in
    property discrepancy between the endpoints.
    
    In this patch we resolve this by using the media address from the
    link entry and using the bearer transmit function to send it. Hence,
    we can now eliminate the redundant function tipc_link_prot_xmit() and
    the redundant field tipc_link::media_addr.
    
    Fixes: 2af5ae372a4b (tipc: clean up unused code and structures)
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Reported-by: Jason Hu <huzhijiang@gmail.com>
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4d5cfcba2f6ec494d8810b9e3c0a7b06255c8067
Author: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
Date:   Wed Jan 27 11:35:59 2016 +0100

    tipc: fix connection abort during subscription cancel
    
    In 'commit 7fe8097cef5f ("tipc: fix nullpointer bug when subscribing
    to events")', we terminate the connection if the subscription
    creation fails.
    In the same commit, the subscription creation result was based on
    the value of the subscription pointer (set in the function) instead
    of the return code.
    
    Unfortunately, the same function tipc_subscrp_create() handles
    subscription cancel request. For a subscription cancellation request,
    the subscription pointer cannot be set. Thus if a subscriber has
    several subscriptions and cancels any of them, the connection is
    terminated.
    
    In this commit, we terminate the connection based on the return value
    of tipc_subscrp_create().
    Fixes: commit 7fe8097cef5f ("tipc: fix nullpointer bug when subscribing to events")
    
    Reviewed-by:  Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Parthasarathy Bhuvaragan <parthasarathy.bhuvaragan@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 45847f7580edd4f2d4a819116967517f77b47685
Author: Ben Hutchings <ben@decadent.org.uk>
Date:   Tue Dec 15 21:21:57 2015 +0000

    tipc: Fix kfree_skb() of uninitialised pointer
    
    Commit 7098356baca7 ("tipc: fix error handling of expanding buffer
    headroom") added a "goto tx_error".  This is fine upstream, but
    when backported to 4.3 it results in attempting to free the clone
    before it has been allocated.  In this early error case, no
    cleanup is needed.
    
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 126bb499631ca8c61db5628bdaaa7294ae73d04f
Author: Ying Xue <ying.xue@windriver.com>
Date:   Tue Nov 24 13:57:57 2015 +0800

    tipc: fix error handling of expanding buffer headroom
    
    [ Upstream commit 7098356baca723513e97ca0020df4e18bc353be3 ]
    
    Coverity says:
    *** CID 1338065:  Error handling issues  (CHECKED_RETURN)
    /net/tipc/udp_media.c: 162 in tipc_udp_send_msg()
    156             struct udp_media_addr *dst = (struct udp_media_addr *)&dest->value;
    157             struct udp_media_addr *src = (struct udp_media_addr *)&b->addr.value;
    158             struct sk_buff *clone;
    159             struct rtable *rt;
    160
    161             if (skb_headroom(skb) < UDP_MIN_HEADROOM)
    >>>     CID 1338065:  Error handling issues  (CHECKED_RETURN)
    >>>     Calling "pskb_expand_head" without checking return value (as is done elsewhere 51 out of 56
    +times).
    162                     pskb_expand_head(skb, UDP_MIN_HEADROOM, 0, GFP_ATOMIC);
    163
    164             clone = skb_clone(skb, GFP_ATOMIC);
    165             skb_set_inner_protocol(clone, htons(ETH_P_TIPC));
    166             ub = rcu_dereference_rtnl(b->media_ptr);
    167             if (!ub) {
    
    When expanding buffer headroom over udp tunnel with pskb_expand_head(),
    it's unfortunate that we don't check its return value. As a result, if
    the function returns an error code due to the lack of memory, it may
    cause unpredictable consequence as we unconditionally consider that
    it's always successful.
    
    Fixes: e53567948f82 ("tipc: conditionally expand buffer headroom over udp tunnel")
    Reported-by: <scan-admin@coverity.com>
    Cc: Stephen Hemminger <stephen@networkplumber.org>
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f9ba7bc8b7ede093b8083cbd4f9bf1ddc36f324
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Oct 28 13:09:53 2015 -0400

    tipc: linearize arriving NAME_DISTR and LINK_PROTO buffers
    
    [ Upstream commit 5cbb28a4bf65c7e4daa6c25b651fed8eb888c620 ]
    
    Testing of the new UDP bearer has revealed that reception of
    NAME_DISTRIBUTOR, LINK_PROTOCOL/RESET and LINK_PROTOCOL/ACTIVATE
    message buffers is not prepared for the case that those may be
    non-linear.
    
    We now linearize all such buffers before they are delivered up to the
    generic reception layer.
    
    In order for the commit to apply cleanly to 'net' and 'stable', we do
    the change in the function tipc_udp_recv() for now. Later, we will post
    a commit to 'net-next' moving the linearization to generic code, in
    tipc_named_rcv() and tipc_link_proto_rcv().
    
    Fixes: commit d0f91938bede ("tipc: add ip/udp media type")
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2d52c83a9f8c8eaef7e1f14b2c011d60339c8d03
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Oct 28 13:09:53 2015 -0400

    tipc: linearize arriving NAME_DISTR and LINK_PROTO buffers
    
    [ Upstream commit 5cbb28a4bf65c7e4daa6c25b651fed8eb888c620 ]
    
    Testing of the new UDP bearer has revealed that reception of
    NAME_DISTRIBUTOR, LINK_PROTOCOL/RESET and LINK_PROTOCOL/ACTIVATE
    message buffers is not prepared for the case that those may be
    non-linear.
    
    We now linearize all such buffers before they are delivered up to the
    generic reception layer.
    
    In order for the commit to apply cleanly to 'net' and 'stable', we do
    the change in the function tipc_udp_recv() for now. Later, we will post
    a commit to 'net-next' moving the linearization to generic code, in
    tipc_named_rcv() and tipc_link_proto_rcv().
    
    Fixes: commit d0f91938bede ("tipc: add ip/udp media type")
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c19282fd54a19e4651a4e67836cd842082546677
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Mon Oct 19 11:33:00 2015 -0400

    tipc: allow non-linear first fragment buffer
    
    [ Upstream commit 45c8b7b175ceb2d542e0fe15247377bf3bce29ec ]
    
    The current code for message reassembly is erroneously assuming that
    the the first arriving fragment buffer always is linear, and then goes
    ahead resetting the fragment list of that buffer in anticipation of
    more arriving fragments.
    
    However, if the buffer already happens to be non-linear, we will
    inadvertently drop the already attached fragment list, and later
    on trig a BUG() in __pskb_pull_tail().
    
    We see this happen when running fragmented TIPC multicast across UDP,
    something made possible since
    commit d0f91938bede ("tipc: add ip/udp media type")
    
    We fix this by not resetting the fragment list when the buffer is non-
    linear, and by initiatlizing our private fragment list tail pointer to
    the tail of the existing fragment list.
    
    Fixes: commit d0f91938bede ("tipc: add ip/udp media type")
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ef3ab7c8ef69a799b6c6156a2ae564b0114a76b9
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Oct 28 13:09:53 2015 -0400

    tipc: linearize arriving NAME_DISTR and LINK_PROTO buffers
    
    [ Upstream commit 5cbb28a4bf65c7e4daa6c25b651fed8eb888c620 ]
    
    Testing of the new UDP bearer has revealed that reception of
    NAME_DISTRIBUTOR, LINK_PROTOCOL/RESET and LINK_PROTOCOL/ACTIVATE
    message buffers is not prepared for the case that those may be
    non-linear.
    
    We now linearize all such buffers before they are delivered up to the
    generic reception layer.
    
    In order for the commit to apply cleanly to 'net' and 'stable', we do
    the change in the function tipc_udp_recv() for now. Later, we will post
    a commit to 'net-next' moving the linearization to generic code, in
    tipc_named_rcv() and tipc_link_proto_rcv().
    
    Fixes: commit d0f91938bede ("tipc: add ip/udp media type")
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d45ed6c1ff20d3640a31f03816ca2d48fb7d6f22
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Mon Oct 19 11:33:00 2015 -0400

    tipc: allow non-linear first fragment buffer
    
    [ Upstream commit 45c8b7b175ceb2d542e0fe15247377bf3bce29ec ]
    
    The current code for message reassembly is erroneously assuming that
    the the first arriving fragment buffer always is linear, and then goes
    ahead resetting the fragment list of that buffer in anticipation of
    more arriving fragments.
    
    However, if the buffer already happens to be non-linear, we will
    inadvertently drop the already attached fragment list, and later
    on trig a BUG() in __pskb_pull_tail().
    
    We see this happen when running fragmented TIPC multicast across UDP,
    something made possible since
    commit d0f91938bede ("tipc: add ip/udp media type")
    
    We fix this by not resetting the fragment list when the buffer is non-
    linear, and by initiatlizing our private fragment list tail pointer to
    the tail of the existing fragment list.
    
    Fixes: commit d0f91938bede ("tipc: add ip/udp media type")
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 071f5d105a0ae93aeb02197c4ee3557e8cc57a21
Merge: 2873d32ff493 e3c9b1ef78eb
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Dec 3 16:02:46 2015 -0800

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
     "A lot of Thanksgiving turkey leftovers accumulated, here goes:
    
       1) Fix bluetooth l2cap_chan object leak, from Johan Hedberg.
    
       2) IDs for some new iwlwifi chips, from Oren Givon.
    
       3) Fix rtlwifi lockups on boot, from Larry Finger.
    
       4) Fix memory leak in fm10k, from Stephen Hemminger.
    
       5) We have a route leak in the ipv6 tunnel infrastructure, fix from
          Paolo Abeni.
    
       6) Fix buffer pointer handling in arm64 bpf JIT,f rom Zi Shen Lim.
    
       7) Wrong lockdep annotations in tcp md5 support, fix from Eric
          Dumazet.
    
       8) Work around some middle boxes which prevent proper handling of TCP
          Fast Open, from Yuchung Cheng.
    
       9) TCP repair can do huge kmalloc() requests, build paged SKBs
          instead.  From Eric Dumazet.
    
      10) Fix msg_controllen overflow in scm_detach_fds, from Daniel
          Borkmann.
    
      11) Fix device leaks on ipmr table destruction in ipv4 and ipv6, from
          Nikolay Aleksandrov.
    
      12) Fix use after free in epoll with AF_UNIX sockets, from Rainer
          Weikusat.
    
      13) Fix double free in VRF code, from Nikolay Aleksandrov.
    
      14) Fix skb leaks on socket receive queue in tipc, from Ying Xue.
    
      15) Fix ifup/ifdown crach in xgene driver, from Iyappan Subramanian.
    
      16) Fix clearing of persistent array maps in bpf, from Daniel
          Borkmann.
    
      17) In TCP, for the cross-SYN case, we don't initialize tp->copied_seq
          early enough.  From Eric Dumazet.
    
      18) Fix out of bounds accesses in bpf array implementation when
          updating elements, from Daniel Borkmann.
    
      19) Fill gaps in RCU protection of np->opt in ipv6 stack, from Eric
          Dumazet.
    
      20) When dumping proxy neigh entries, we have to accomodate NULL
          device pointers properly, from Konstantin Khlebnikov.
    
      21) SCTP doesn't release all ipv6 socket resources properly, fix from
          Eric Dumazet.
    
      22) Prevent underflows of sch->q.qlen for multiqueue packet
          schedulers, also from Eric Dumazet.
    
      23) Fix MAC and unicast list handling in bnxt_en driver, from Jeffrey
          Huang and Michael Chan.
    
      24) Don't actively scan radar channels, from Antonio Quartulli"
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (110 commits)
      net: phy: reset only targeted phy
      bnxt_en: Setup uc_list mac filters after resetting the chip.
      bnxt_en: enforce proper storing of MAC address
      bnxt_en: Fixed incorrect implementation of ndo_set_mac_address
      net: lpc_eth: remove irq > NR_IRQS check from probe()
      net_sched: fix qdisc_tree_decrease_qlen() races
      openvswitch: fix hangup on vxlan/gre/geneve device deletion
      ipv4: igmp: Allow removing groups from a removed interface
      ipv6: sctp: implement sctp_v6_destroy_sock()
      arm64: bpf: add 'store immediate' instruction
      ipv6: kill sk_dst_lock
      ipv6: sctp: add rcu protection around np->opt
      net/neighbour: fix crash at dumping device-agnostic proxy entries
      sctp: use GFP_USER for user-controlled kmalloc
      sctp: convert sack_needed and sack_generation to bits
      ipv6: add complete rcu protection around np->opt
      bpf: fix allocation warnings in bpf maps and integer overflow
      mvebu: dts: enable IP checksum with jumbo frames for Armada 38x on Port0
      net: mvneta: enable setting custom TX IP checksum limit
      net: mvneta: fix error path for building skb
      ...

commit dc8d1eb305984b1182f5e85de3c3a1f8592b83af
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Dec 2 15:19:37 2015 -0500

    tipc: fix node reference count bug
    
    Commit 5405ff6e15f40f2f ("tipc: convert node lock to rwlock")
    introduced a bug to the node reference counter handling. When a
    message is successfully sent in the function tipc_node_xmit(),
    we return directly after releasing the node lock, instead of
    continuing and decrementing the node reference counter as we
    should do.
    
    This commit fixes this bug.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7098356baca723513e97ca0020df4e18bc353be3
Author: Ying Xue <ying.xue@windriver.com>
Date:   Tue Nov 24 13:57:57 2015 +0800

    tipc: fix error handling of expanding buffer headroom
    
    Coverity says:
    
    *** CID 1338065:  Error handling issues  (CHECKED_RETURN)
    /net/tipc/udp_media.c: 162 in tipc_udp_send_msg()
    156             struct udp_media_addr *dst = (struct udp_media_addr *)&dest->value;
    157             struct udp_media_addr *src = (struct udp_media_addr *)&b->addr.value;
    158             struct sk_buff *clone;
    159             struct rtable *rt;
    160
    161             if (skb_headroom(skb) < UDP_MIN_HEADROOM)
    >>>     CID 1338065:  Error handling issues  (CHECKED_RETURN)
    >>>     Calling "pskb_expand_head" without checking return value (as is done elsewhere 51 out of 56 times).
    162                     pskb_expand_head(skb, UDP_MIN_HEADROOM, 0, GFP_ATOMIC);
    163
    164             clone = skb_clone(skb, GFP_ATOMIC);
    165             skb_set_inner_protocol(clone, htons(ETH_P_TIPC));
    166             ub = rcu_dereference_rtnl(b->media_ptr);
    167             if (!ub) {
    
    When expanding buffer headroom over udp tunnel with pskb_expand_head(),
    it's unfortunate that we don't check its return value. As a result, if
    the function returns an error code due to the lack of memory, it may
    cause unpredictable consequence as we unconditionally consider that
    it's always successful.
    
    Fixes: e53567948f82 ("tipc: conditionally expand buffer headroom over udp tunnel")
    Reported-by: <scan-admin@coverity.com>
    Cc: Stephen Hemminger <stephen@networkplumber.org>
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f4195d1eac954a67adf112dd53404560cc55b942
Author: Ying Xue <ying.xue@windriver.com>
Date:   Sun Nov 22 15:46:05 2015 +0800

    tipc: avoid packets leaking on socket receive queue
    
    Even if we drain receive queue thoroughly in tipc_release() after tipc
    socket is removed from rhashtable, it is possible that some packets
    are in flight because some CPU runs receiver and did rhashtable lookup
    before we removed socket. They will achieve receive queue, but nobody
    delete them at all. To avoid this leak, we register a private socket
    destructor to purge receive queue, meaning releasing packets pending
    on receive queue will be delayed until the last reference of tipc
    socket will be released.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9a65083827da0da5fadf9dea5bca25192073b112
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Nov 19 14:12:50 2015 -0500

    tipc: correct settings of broadcast link state
    
    Since commit 5266698661401afc5e ("tipc: let broadcast packet
    reception use new link receive function") the broadcast send
    link state was meant to always be set to LINK_ESTABLISHED, since
    we don't need this link to follow the regular link FSM rules. It
    was also the intention that this state anyway shouldn't impact
    the run-time working state of the link, since the latter in
    reality is controlled by the number of registered peers.
    
    We have now discovered that this assumption is not quite correct.
    If the broadcast link is reset because of too many retransmissions,
    its state will inadvertently go to LINK_RESETTING, and never go
    back to LINK_ESTABLISHED, because the LINK_FAILURE event was not
    anticipated. This will work well once, but if it happens a second
    time, the reset on a link in LINK_RESETTING has has no effect, and
    neither the broadcast link nor the unicast links will go down as
    they should.
    
    Furthermore, it is confusing that the management tool shows that
    this link is in UP state when that obviously isn't the case.
    
    We now ensure that this state strictly follows the true working
    state of the link. The state is set to LINK_ESTABLISHED when
    the number of peers is non-zero, and to LINK_RESET otherwise.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6b99c6d558bbfaba0292db1996199325a74c7d02
Merge: 12ded5cae60f 1a90632da8c1
Author: David S. Miller <davem@davemloft.net>
Date:   Fri Nov 20 14:06:11 2015 -0500

    Merge branch 'tipc-cleanups-improvements'
    
    Jon Maloy says:
    
    ====================
    tipc: some cleanups and improvements
    
    This series mostly contains cleanups and cosmetic code changes.
    The only real functional change is in #4 and #5, where we change the
    locking structure for nodes and links in order to permit full
    concurrency between links working in parallel on different interfaces.
    Since the groundwork for this has been done in previous commit series,
    this change constitutes only the final, small step to achieve that goal.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1a90632da8c17a27e0c93538ee987764adee43a5
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Nov 19 14:30:47 2015 -0500

    tipc: eliminate remnants of hungarian notation
    
    The number of variables with Hungarian notation (l_ptr, n_ptr etc.)
    has been significantly reduced over the last couple of years.
    
    We now root out the last traces of this practice.
    There are no functional changes in this commit.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 38206d5939068415c413ac253be6f364d06e672f
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Nov 19 14:30:46 2015 -0500

    tipc: narrow down interface towards struct tipc_link
    
    We move the definition of struct tipc_link from link.h to link.c in
    order to minimize its exposure to the rest of the code.
    
    When needed, we define new functions to make it possible for external
    entities to access and set data in the link.
    
    Apart from the above, there are no functional changes.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5be9c086715c10fb9ae3ffc0ef580dc3a165f98a
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Nov 19 14:30:45 2015 -0500

    tipc: narrow down exposure of struct tipc_node
    
    In our effort to have less code and include dependencies between
    entities such as node, link and bearer, we try to narrow down
    the exposed interface towards the node as much as possible.
    
    In this commit, we move the definition of struct tipc_node, along
    with many of its associated function declarations, from node.h to
    node.c. We also move some function definitions from link.c and
    name_distr.c to node.c, since they access fields in struct tipc_node
    that should not be externally visible. The moved functions are renamed
    according to new location, and made static whenever possible.
    
    There are no functional changes in this commit.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5405ff6e15f40f2f53e37d2dcd7de521e2b7a96f
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Nov 19 14:30:44 2015 -0500

    tipc: convert node lock to rwlock
    
    According to the node FSM a node in state SELF_UP_PEER_UP cannot
    change state inside a lock context, except when a TUNNEL_PROTOCOL
    (SYNCH or FAILOVER) packet arrives. However, the node's individual
    links may still change state.
    
    Since each link now is protected by its own spinlock, we finally have
    the conditions in place to convert the node spinlock to an rwlock_t.
    If the node state and arriving packet type are rigth, we can let the
    link directly receive the packet under protection of its own spinlock
    and the node lock in read mode. In all other cases we use the node
    lock in write mode. This enables full concurrent execution between
    parallel links during steady-state traffic situations, i.e., 99+ %
    of the time.
    
    This commit implements this change.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2312bf61ae365fdd6b9bfb24558a417859759447
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Nov 19 14:30:43 2015 -0500

    tipc: introduce per-link spinlock
    
    As a preparation to allow parallel links to work more independently
    from each other we introduce a per-link spinlock, to be stored in the
    struct nodes's link entry area. Since the node lock still is a regular
    spinlock there is no increase in parallellism at this stage.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1d7e1c2595bd20c5274a8e49d89cf0cf483759de
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Nov 19 14:30:42 2015 -0500

    tipc: reduce code dependency between binding table and node layer
    
    The file name_distr.c currently contains three functions,
    named_cluster_distribute(), tipc_publ_subcscribe() and
    tipc_publ_unsubscribe() that all directly access fields in
    struct tipc_node. We want to eliminate such dependencies, so
    we move those functions to the file node.c and rename them to
    tipc_node_broadcast(), tipc_node_subscribe() and tipc_node_unsubscribe()
    respectively.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5c10e9794013143eec80d494603d46dcb219970a
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Nov 19 14:30:41 2015 -0500

    tipc: small cleanup of function tipc_node_check_state()
    
    The function tipc_node_check_state() contains the core logics
    for handling link synchronization and failover. For this reason,
    it is important to keep it as comprehensible as possible.
    
    In this commit, we make three small cleanups.
    
    1) If the node is in state SELF_DOWN_PEER_LEAVING and the received
       packet confirms that the peer has lost contact, there will be no
       further action in this function. To make this clearer, we return
       from the function directly after the state change.
    
    2) Since commit 0f8b8e28fb3241f9fd ("tipc: eliminate risk of stalled
       link synchronization") only the logically first TUNNEL_PROTO/SYNCH
       packet can alter the link state and set the synch point,
       independently of arrival order. Hence, there is not any longer any
       need to adjust the synch value in case such packets arrive in
       disorder. We remove this adjustment.
    
    3) It is the intention that any message arriving on any of the links
       may trig a check for and possible termination of a node SYNCH state.
       A redundant and unnoticed check for tipc_link_is_synching() obviously
       beats this purpose, with the effect that only packets arriving on the
       synching link may currently end the synch state. We remove this check.
       This change will further shorten the synchronization period between
       parallel links.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c7cad0d6f70cd4ce8644ffe528a4df1cdc2e77f5
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Nov 19 14:30:40 2015 -0500

    tipc: move linearization of buffers to generic code
    
    In commit 5cbb28a4bf65c7e4 ("tipc: linearize arriving NAME_DISTR
    and LINK_PROTO buffers") we added linearization of NAME_DISTRIBUTOR,
    LINK_PROTOCOL/RESET and LINK_PROTOCOL/ACTIVATE to the function
    tipc_udp_recv(). The location of the change was selected in order
    to make the commit easily appliable to 'net' and 'stable'.
    
    We now move this linearization to where it should be done, in the
    functions tipc_named_rcv() and tipc_link_proto_rcv() respectively.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5cbb28a4bf65c7e4daa6c25b651fed8eb888c620
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Oct 28 13:09:53 2015 -0400

    tipc: linearize arriving NAME_DISTR and LINK_PROTO buffers
    
    Testing of the new UDP bearer has revealed that reception of
    NAME_DISTRIBUTOR, LINK_PROTOCOL/RESET and LINK_PROTOCOL/ACTIVATE
    message buffers is not prepared for the case that those may be
    non-linear.
    
    We now linearize all such buffers before they are delivered up to the
    generic reception layer.
    
    In order for the commit to apply cleanly to 'net' and 'stable', we do
    the change in the function tipc_udp_recv() for now. Later, we will post
    a commit to 'net-next' moving the linearization to generic code, in
    tipc_named_rcv() and tipc_link_proto_rcv().
    
    Fixes: commit d0f91938bede ("tipc: add ip/udp media type")
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 31fb431dd2347b9e5b94927d39ad49853b559b71
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Oct 14 09:23:18 2015 -0400

    tipc: move fragment importance field to new header position
    
    [ Upstream commit dde4b5ae65de659b9ec64bafdde0430459fcb495 ]
    
    In commit e3eea1eb47a ("tipc: clean up handling of message priorities")
    we introduced a field in the packet header for keeping track of the
    priority of fragments, since this value is not present in the specified
    protocol header. Since the value so far only is used at the transmitting
    end of the link, we have not yet officially defined it as part of the
    protocol.
    
    Unfortunately, the field we use for keeping this value, bits 13-15 in
    in word 5, has turned out to be a poor choice; it is already used by the
    broadcast protocol for carrying the 'network id' field of the sending
    node. Since packet fragments also need to be transported across the
    broadcast protocol, the risk of conflict is obvious, and we see this
    happen when we use network identities larger than 2^13-1. This has
    escaped our testing because we have so far only been using small network
    id values.
    
    We now move this field to bits 0-2 in word 9, a field that is guaranteed
    to be unused by all involved protocols.
    
    Fixes: e3eea1eb47a ("tipc: clean up handling of message priorities")
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7b61554c25cbc110338d3191809daecd584682fa
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Oct 14 09:23:18 2015 -0400

    tipc: move fragment importance field to new header position
    
    [ Upstream commit dde4b5ae65de659b9ec64bafdde0430459fcb495 ]
    
    In commit e3eea1eb47a ("tipc: clean up handling of message priorities")
    we introduced a field in the packet header for keeping track of the
    priority of fragments, since this value is not present in the specified
    protocol header. Since the value so far only is used at the transmitting
    end of the link, we have not yet officially defined it as part of the
    protocol.
    
    Unfortunately, the field we use for keeping this value, bits 13-15 in
    in word 5, has turned out to be a poor choice; it is already used by the
    broadcast protocol for carrying the 'network id' field of the sending
    node. Since packet fragments also need to be transported across the
    broadcast protocol, the risk of conflict is obvious, and we see this
    happen when we use network identities larger than 2^13-1. This has
    escaped our testing because we have so far only been using small network
    id values.
    
    We now move this field to bits 0-2 in word 9, a field that is guaranteed
    to be unused by all involved protocols.
    
    Fixes: e3eea1eb47a ("tipc: clean up handling of message priorities")
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 742e038330a485350334ee5eb75dce4a9dff87cd
Author: Wu Fengguang <fengguang.wu@intel.com>
Date:   Sat Oct 24 22:56:01 2015 +0800

    tipc: link_is_bc_sndlink() can be static
    
    TO: "David S. Miller" <davem@davemloft.net>
    CC: netdev@vger.kernel.org
    CC: Jon Maloy <jon.maloy@ericsson.com>
    CC: Ying Xue <ying.xue@windriver.com>
    CC: tipc-discussion@lists.sourceforge.net
    CC: linux-kernel@vger.kernel.org
    
    Signed-off-by: Fengguang Wu <fengguang.wu@intel.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 687f079addba1ac7f97ce97080c2291bbe8c8dce
Merge: ba3e2084f268 2af5ae372a4b
Author: David S. Miller <davem@davemloft.net>
Date:   Sat Oct 24 06:56:54 2015 -0700

    Merge branch 'tipc-next'
    
    Jon Maloy says:
    
    ====================
    tipc: improve broadcast implementation
    
    The TIPC broadcast link implementation is currently complex and hard to
    follow. It also incurs some amount of code and structure duplication,
    something that can be reduced significantly with a little effort.
    
    This commit series introduces a number of improvements which address
    both the locking structure, the code/structure duplication issue, and
    the overall readbility of the code.
    
    The series consists of three main parts:
    
    1-7: Adaptation to the new link structure, and preparation for the next
         step. In particular, we want the broadcast transmission link to
         have a life cycle that is longer than any of its potential (unicast
         and broadcast receive links) users. This eliminates the need to
         always test for the presence of this link before accessing it.
    
    8-10: This is what is really new in this series. Commit #9 is by far
          the largest and most important one, because it moves most of
          the broadcast functionality into link.c, partially reusing the
          fields and functionality of the unicast link. The removal of
          the "node_map" infrastructure in commit #10 is also an important
          achievement.
    
    11-16: Some improvements leveraging the changes made in the previous
           commits.
    
    The series needs commit 53387c4e22ac ("tipc: extend broadcast link window size")
    and commit e53567948f82 ("tipc: conditionally expand buffer headroom over udp tunnel")
    which are both present in 'net' but not yet in 'net-next', to apply cleanly.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2af5ae372a4b6d6e2d3314af0e9c865d6d64f8d3
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Oct 22 08:51:48 2015 -0400

    tipc: clean up unused code and structures
    
    After the previous changes in this series, we can now remove some
    unused code and structures, both in the broadcast, link aggregation
    and link code.
    
    There are no functional changes in this commit.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c49a0a84391bcc313b3dc2a9ceee6de684e07655
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Oct 22 08:51:47 2015 -0400

    tipc: ensure binding table initial distribution is sent via first link
    
    Correct synchronization of the broadcast link at first contact between
    two nodes is dependent on the assumption that the binding table "bulk"
    update passes via the same link as the initial broadcast syncronization
    message, i.e., via the first link that is established.
    
    This is not guaranteed in the current implementation. If two link
    come up very close to each other in time, the "bulk" may quite well
    pass via the second link, and hence void the guarantee of a correct
    initial synchronization before the broadcast link is opened.
    
    This commit makes two small changes to strengthen this guarantee.
    
    1) We let the second established link occupy slot 1 of the
       "active_links" array, while the first link will retain slot 0.
       (This is in reality a cosmetic change, we could just as well keep
        the current, opposite order)
    
    2) We let the name distributor always use link selector/slot 0 when
       it sends it binding table updates.
    
    The extra traffic bias on the first link caused by this change should
    be negligible, since binding table updates constitutes a very small
    fraction of the total traffic.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c72fa872a23f03b2b9c17e88f3b0a8070924e5f1
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Oct 22 08:51:46 2015 -0400

    tipc: eliminate link's reference to owner node
    
    With the recent commit series, we have established a one-way dependency
    between the link aggregation (struct tipc_node) instances and their
    pertaining tipc_link instances. This has enabled quite significant code
    and structure simplifications.
    
    In this commit, we eliminate the field 'owner', which points to an
    instance of struct tipc_node, from struct tipc_link, and replace it with
    a pointer to struct net, which is the only external reference now needed
    by a link instance.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7214bcf8753109256d635ba079938fbd6fcf713b
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Oct 22 08:51:45 2015 -0400

    tipc: eliminate redundant buffer cloning at transmission
    
    Since all packet transmitters (link, bcast, discovery) are now sending
    consumable buffer clones to the bearer layer, we can remove the
    redundant buffer cloning that is perfomed in the lower level functions
    tipc_l2_send_msg() and tipc_udp_send_msg().
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 60852d679575b0d7ce62497938116f92654ae908
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Oct 22 08:51:44 2015 -0400

    tipc: let neighbor discoverer tranmsit consumable buffers
    
    The neighbor discovery function currently uses the function
    tipc_bearer_send() for transmitting packets, assuming that the
    sent buffers are not consumed by the called function.
    
    We want to change this, in order to avoid unnecessary buffer cloning
    elswhere in the code.
    
    This commit introduces a new function tipc_bearer_skb() which consumes
    the sent buffers, and let the discoverer functions use this new call
    instead. The discoverer does now itself perform the cloning when
    that is necessary.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 959e1781aa230aecc90e4deb80117fd9a53dede7
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Oct 22 08:51:43 2015 -0400

    tipc: introduce jumbo frame support for broadcast
    
    Until now, we have only been supporting a fix MTU size of 1500 bytes
    for all broadcast media, irrespective of their actual capability.
    
    We now make the broadcast MTU adaptable to the carrying media, i.e.,
    we use the smallest MTU supported by any of the interfaces attached
    to TIPC.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b06b281e79375fcbd9ffaec7c5fdc350b888d089
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Oct 22 08:51:42 2015 -0400

    tipc: simplify bearer level broadcast
    
    Until now, we have been keeping track of the exact set of broadcast
    destinations though the help structure tipc_node_map. This leads us to
    have to maintain a whole infrastructure for supporting this, including
    a pseudo-bearer and a number of functions to manipulate both the bearers
    and the node map correctly. Apart from the complexity, this approach is
    also limiting, as struct tipc_node_map only can support cluster local
    broadcast if we want to avoid it becoming excessively large. We want to
    eliminate this limitation, in order to enable introduction of scoped
    multicast in the future.
    
    A closer analysis reveals that it is unnecessary maintaining this "full
    set" overview; it is sufficient to keep a counter per bearer, indicating
    how many nodes can be reached via this bearer at the moment. The protocol
    is now robust enough to handle transitional discrepancies between the
    nominal number of reachable destinations, as expected by the broadcast
    protocol itself, and the number which is actually reachable at the
    moment. The initial broadcast synchronization, in conjunction with the
    retransmission mechanism, ensures that all packets will eventually be
    acknowledged by the correct set of destinations.
    
    This commit introduces these changes.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5266698661401afc5e4a1a521cf9ba10724d10dd
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Oct 22 08:51:41 2015 -0400

    tipc: let broadcast packet reception use new link receive function
    
    The code path for receiving broadcast packets is currently distinct
    from the unicast path. This leads to unnecessary code and data
    duplication, something that can be avoided with some effort.
    
    We now introduce separate per-peer tipc_link instances for handling
    broadcast packet reception. Each receive link keeps a pointer to the
    common, single, broadcast link instance, and can hence handle release
    and retransmission of send buffers as if they belonged to the own
    instance.
    
    Furthermore, we let each unicast link instance keep a reference to both
    the pertaining broadcast receive link, and to the common send link.
    This makes it possible for the unicast links to easily access data for
    broadcast link synchronization, as well as for carrying acknowledges for
    received broadcast packets.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit fd556f209af53b9cdc45df8c467feb235376c4df
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Oct 22 08:51:40 2015 -0400

    tipc: introduce capability bit for broadcast synchronization
    
    Until now, we have tried to support both the newer, dedicated broadcast
    synchronization mechanism along with the older, less safe, RESET_MSG/
    ACTIVATE_MSG based one. The latter method has turned out to be a hazard
    in a highly dynamic cluster, so we find it safer to disable it completely
    when we find that the former mechanism is supported by the peer node.
    
    For this purpose, we now introduce a new capabability bit,
    TIPC_BCAST_SYNCH, to inform any peer nodes that dedicated broadcast
    syncronization is supported by the present node. The new bit is conveyed
    between peers in the 'capabilities' field of neighbor discovery messages.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2f566124570625c29c3fd79bac4d9cd97c0c31a1
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Oct 22 08:51:39 2015 -0400

    tipc: let broadcast transmission use new link transmit function
    
    This commit simplifies the broadcast link transmission function, by
    leveraging previous changes to the link transmission function and the
    broadcast transmission link life cycle.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c1ab3f1dea3df566ad38caf98baf69c656679090
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Oct 22 08:51:38 2015 -0400

    tipc: make struct tipc_link generic to support broadcast
    
    Realizing that unicast is just a special case of broadcast, we also see
    that we can go in the other direction, i.e., that modest changes to the
    current unicast link can make it generic enough to support broadcast.
    
    The following changes are introduced here:
    
    - A new counter ("ackers") in struct tipc_link, to indicate how many
      peers need to ack a packet before it can be released.
    - A corresponding counter in the skb user area, to keep track of how
      many peers a are left to ack before a buffer can be released.
    - A new counter ("acked"), to keep persistent track of how far a peer
      has acked at the moment, i.e., where in the transmission queue to
      start updating buffers when the next ack arrives. This is to avoid
      double acknowledgements from a peer, with inadvertent relase of
      packets as a result.
    - A more generic tipc_link_retrans() function, where retransmit starts
      from a given sequence number, instead of the first packet in the
      transmision queue. This is to minimize the number of retransmitted
      packets on the broadcast media.
    
    When the new functionality is taken into use in the next commits,
    we expect it to have minimal effect on unicast mode performance.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 323019069e8d96d87e9dba51f897060f94999821
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Oct 22 08:51:37 2015 -0400

    tipc: use explicit allocation of broadcast send link
    
    The broadcast link instance (struct tipc_link) used for sending is
    currently aggregated into struct tipc_bclink. This means that we cannot
    use the regular tipc_link_create() function for initiating the link, but
    do instead have to initiate numerous fields directly from the
    bcast_init() function.
    
    We want to reduce dependencies between the broadcast functionality
    and the inner workings of tipc_link. In this commit, we introduce
    a new function tipc_bclink_create() to link.c, and allocate the
    instance of the link separately using this function.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0e05498e9eae16a6d8c86543e77930ec152e655e
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Oct 22 08:51:36 2015 -0400

    tipc: make link implementation independent from struct tipc_bearer
    
    In reality, the link implementation is already independent from
    struct tipc_bearer, in that it doesn't store any reference to it.
    However, we still pass on a pointer to a bearer instance in the
    function tipc_link_create(), just to have it extract some
    initialization information from it.
    
    I later commits, we need to create instances of tipc_link without
    having any associated struct tipc_bearer. To facilitate this, we
    want to extract the initialization data already in the creator
    function in node.c, before calling tipc_link_create(), and pass
    this info on as individual parameters in the call.
    
    This commit introduces this change.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5fd9fd635104f4816da158cdac6917e99e192eac
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Oct 22 08:51:35 2015 -0400

    tipc: create broadcast transmission link at namespace init
    
    The broadcast transmission link is currently instantiated when the
    network subsystem is started, i.e., on order from user space via netlink.
    
    This forces the broadcast transmission code to do unnecessary tests for
    the existence of the transmission link, as well in single mode node as
    in network mode.
    
    In this commit, we do instead create the link during initialization of
    the name space, and remove it when it is stopped. The fact that the
    transmission link now has a guaranteed longer life cycle than any of its
    potential clients paves the way for further code simplifcations
    and optimizations.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0043550b0a88b72216161d6f25eb0a2e0e78babf
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Oct 22 08:51:34 2015 -0400

    tipc: move broadcast link lock to struct tipc_net
    
    The broadcast lock will need to be acquired outside bcast.c in a later
    commit. For this reason, we move the lock to struct tipc_net. Consistent
    with the changes in the previous commit, we also introducee two new
    functions tipc_bcast_lock() and tipc_bcast_unlock(). The code that is
    currently using tipc_bclink_lock()/unlock() will be phased out during
    the coming commits in this series.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6beb19a62a87ef6f7107fcd43c2cc1ebad3edfb5
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Oct 22 08:51:33 2015 -0400

    tipc: move bcast definitions to bcast.c
    
    Currently, a number of structure and function definitions related
    to the broadcast functionality are unnecessarily exposed in the file
    bcast.h. This obscures the fact that the external interface towards
    the broadcast link in fact is very narrow, and causes unnecessary
    recompilations of other files when anything changes in those
    definitions.
    
    In this commit, we move as many of those definitions as is currently
    possible to the file bcast.c.
    
    We also rename the structure 'tipc_bclink' to 'tipc_bc_base', both
    since the name does not correctly describe the contents of this
    struct, and will do so even less in the future, and because we want
    to use the term 'link' more appropriately in the functionality
    introduced later in this series.
    
    Finally, we rename a couple of functions, such as tipc_bclink_xmit()
    and others that will be kept in the future, to include the term 'bcast'
    instead.
    
    There are no functional changes in this commit.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e53567948f82368247b4b1a63fcab4c76ef7d51c
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Mon Oct 19 11:43:11 2015 -0400

    tipc: conditionally expand buffer headroom over udp tunnel
    
    In commit d999297c3dbbe ("tipc: reduce locking scope during packet reception")
    we altered the packet retransmission function. Since then, when
    restransmitting packets, we create a clone of the original buffer
    using __pskb_copy(skb, MIN_H_SIZE), where MIN_H_SIZE is the size of
    the area we want to have copied, but also the smallest possible TIPC
    packet size. The value of MIN_H_SIZE is 24.
    
    Unfortunately, __pskb_copy() also has the effect that the headroom
    of the cloned buffer takes the size MIN_H_SIZE. This is too small
    for carrying the packet over the UDP tunnel bearer, which requires
    a minimum headroom of 28 bytes. A change to just use pskb_copy()
    lets the clone inherit the original headroom of 80 bytes, but also
    assumes that the copied data area is of at least that size, something
    that is not always the case. So that is not a viable solution.
    
    We now fix this by adding a check for sufficient headroom in the
    transmit function of udp_media.c, and expanding it when necessary.
    
    Fixes: commit d999297c3dbbe ("tipc: reduce locking scope during packet reception")
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 45c8b7b175ceb2d542e0fe15247377bf3bce29ec
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Mon Oct 19 11:33:00 2015 -0400

    tipc: allow non-linear first fragment buffer
    
    The current code for message reassembly is erroneously assuming that
    the the first arriving fragment buffer always is linear, and then goes
    ahead resetting the fragment list of that buffer in anticipation of
    more arriving fragments.
    
    However, if the buffer already happens to be non-linear, we will
    inadvertently drop the already attached fragment list, and later
    on trig a BUG() in __pskb_pull_tail().
    
    We see this happen when running fragmented TIPC multicast across UDP,
    something made possible since
    commit d0f91938bede ("tipc: add ip/udp media type")
    
    We fix this by not resetting the fragment list when the buffer is non-
    linear, and by initiatlizing our private fragment list tail pointer to
    the tail of the existing fragment list.
    
    Fixes: commit d0f91938bede ("tipc: add ip/udp media type")
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 53387c4e22ac33d27a552b3d56bad932bd32531b
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Mon Oct 19 09:21:37 2015 -0400

    tipc: extend broadcast link window size
    
    The default fix broadcast window size is currently set to 20 packets.
    This is a very low value, set at a time when we were still testing on
    10 Mb/s hubs, and a change to it is long overdue.
    
    Commit 7845989cb4b3da1db ("net: tipc: fix stall during bclink wakeup procedure")
    revealed a problem with this low value. For messages of importance LOW,
    the backlog queue limit will be  calculated to 30 packets, while a
    single, maximum sized message of 66000 bytes, carried across a 1500 MTU
    network consists of 46 packets.
    
    This leads to the following scenario (among others leading to the same
    situation):
    
    1: Msg 1 of 46 packets is sent. 20 packets go to the transmit queue, 26
       packets to the backlog queue.
    2: Msg 2 of 46 packets is attempted sent, but rejected because there is
       no more space in the backlog queue at this level. The sender is added
       to the wakeup queue with a "pending packets chain size" number of 46.
    3: Some packets in the transmit queue are acked and released. We try to
       wake up the sender, but the pending size of 46 is bigger than the LOW
       wakeup limit of 30, so this doesn't happen.
    5: Subsequent acks releases all the remaining buffers. Each time we test
       for the wakeup criteria and find that 46 still is larger than 30,
       even after both the transmit and the backlog queues are empty.
    6: The sender is never woken up and given a chance to send its message.
       He is stuck.
    
    We could now loosen the wakeup criteria (used by link_prepare_wakeup())
    to become equal to the send criteria (used by tipc_link_xmit()), i.e.,
    by ignoring the "pending packets chain size" value altogether, or we can
    just increase the queue limits so that the criteria can be satisfied
    anyway. There are good reasons (potentially multiple waiting senders) to
    not opt for the former solution, so we choose the latter one.
    
    This commit fixes the problem by giving the broadcast link window a
    default value of 50 packets. We also introduce a new minimum link
    window size BCLINK_MIN_WIN of 32, which is enough to always avoid the
    described situation. Finally, in order to not break any existing users
    which may set the window explicitly, we enforce that the window is set
    to the new minimum value in case the user is trying to set it to
    anything lower.
    
    Fixes: 7845989cb4b3da1db ("net: tipc: fix stall during bclink wakeup procedure")
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1099f86044111e9a7807f09523e42d4c9d0fb781
Merge: 7379047d5585 37850e37fcfb
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Oct 19 09:55:40 2015 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Account for extra headroom in ath9k driver, from Felix Fietkau.
    
     2) Fix OOPS in pppoe driver due to incorrect socket state transition,
        from Guillaume Nault.
    
     3) Kill memory leak in amd-xgbe debugfx, from Geliang Tang.
    
     4) Power management fixes for iwlwifi, from Johannes Berg.
    
     5) Fix races in reqsk_queue_unlink(), from Eric Dumazet.
    
     6) Fix dst_entry usage in ARP replies, from Jiri Benc.
    
     7) Cure OOPSes with SO_GET_FILTER, from Daniel Borkmann.
    
     8) Missing allocation failure check in amd-xgbe, from Tom Lendacky.
    
     9) Various resource allocation/freeing cures in DSA< from Neil
        Armstrong.
    
    10) A series of bug fixes in the openvswitch conntrack support, from
        Joe Stringer.
    
    11) Fix two cases (BPF and act_mirred) where we have to clean the sender
        cpu stored in the SKB before transmitting.  From WANG Cong and
        Alexei Starovoitov.
    
    12) Disable VLAN filtering in promiscuous mode in mlx5 driver, from
        Achiad Shochat.
    
    13) Older bnx2x chips cannot do 4-tuple UDP hashing, so prevent this
        configuration via ethtool.  From Yuval Mintz.
    
    14) Don't call rt6_uncached_list_flush_dev() from rt6_ifdown() when
        'dev' is NULL, from Eric Biederman.
    
    15) Prevent stalled link synchronization in tipc, from Jon Paul Maloy.
    
    16) kcalloc() gstrings ethtool buffer before having driver fill it in,
        in order to prevent kernel memory leaking.  From Joe Perches.
    
    17) Fix mixxing rt6_info initialization for blackhole routes, from
        Martin KaFai Lau.
    
    18) Kill VLAN regression in via-rhine, from Andrej Ota.
    
    19) Missing pfmemalloc check in sk_add_backlog(), from Eric Dumazet.
    
    20) Fix spurious MSG_TRUNC signalling in netlink dumps, from Ronen Arad.
    
    21) Scrube SKBs when pushing them between namespaces in openvswitch,
        from Joe Stringer.
    
    22) bcmgenet enables link interrupts too early, fix from Florian
        Fainelli.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (92 commits)
      net: bcmgenet: Fix early link interrupt enabling
      tunnels: Don't require remote endpoint or ID during creation.
      openvswitch: Scrub skb between namespaces
      xen-netback: correctly check failed allocation
      net: asix: add support for the Billionton GUSB2AM-1G-B USB adapter
      netlink: Trim skb to alloc size to avoid MSG_TRUNC
      net: add pfmemalloc check in sk_add_backlog()
      via-rhine: fix VLAN receive handling regression.
      ipv6: Initialize rt6_info properly in ip6_blackhole_route()
      ipv6: Move common init code for rt6_info to a new function rt6_info_init()
      Bluetooth: Fix initializing conn_params in scan phase
      Bluetooth: Fix conn_params list update in hci_connect_le_scan_cleanup
      Bluetooth: Fix remove_device behavior for explicit connects
      Bluetooth: Fix LE reconnection logic
      Bluetooth: Fix reference counting for LE-scan based connections
      Bluetooth: Fix double scan updates
      mlxsw: core: Fix race condition in __mlxsw_emad_transmit
      tipc: move fragment importance field to new header position
      ethtool: Use kcalloc instead of kmalloc for ethtool_get_strings
      tipc: eliminate risk of stalled link synchronization
      ...

commit ae23051820461bdc960b76d766e7c1e92dee2ee1
Merge: 175f8d6746aa c819930090fe
Author: David S. Miller <davem@davemloft.net>
Date:   Thu Oct 15 23:55:33 2015 -0700

    Merge branch 'tipc-link-improvements'
    
    Jon Maloy says:
    
    ====================
    tipc: some link level code improvements
    
    Extensive testing has revealed some weaknesses and non-optimal solutions
    in the link level code.
    
    This commit series addresses those issues.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c819930090fe3f74c822be765c185b3431360193
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Oct 15 14:52:46 2015 -0400

    tipc: update node FSM when peer RESET message is received
    
    The change made in the previous commit revealed a small flaw in the way
    the node FSM is updated. When the function tipc_node_link_down() is
    called for the last link to a node, we should check whether this was
    caused by a local reset or by a received RESET message from the peer.
    In the latter case, we can directly issue a PEER_LOST_CONTACT_EVT to
    the node FSM, so that it is ready to re-establish contact. If this is
    not done, the peer node will sometimes have to go through a second
    establish cycle before the link becomes stable.
    
    We fix this in this commit by conditionally issuing the mentioned
    event in the function tipc_node_link_down(). We also move LINK_RESET
    FSM even away from the link_reset() function and into the caller
    function, partially because it is easier to follow the code when state
    changes are gathered at a limited number of locations, partially
    because there will be cases in future commits where we don't want the
    link to go RESET mode when link_reset() is called.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 282b3a056225b35024246f63feb91d769d714dad
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Oct 15 14:52:45 2015 -0400

    tipc: send out RESET immediately when link goes down
    
    When a link is taken down because of a node local event, such as
    disabling of a bearer or an interface, we currently leave it to the
    peer node to discover the broken communication. The default time for
    such failure discovery is 1.5-2 seconds.
    
    If we instead allow the terminating link endpoint to send out a RESET
    message at the moment it is reset, we can achieve the impression that
    both endpoints are going down instantly. Since this is a very common
    scenario, we find it worthwhile to make this small modification.
    
    Apart from letting the link produce the said message, we also have to
    ensure that the interface is able to transmit it before TIPC is
    detached. We do this by performing the disabling of a bearer in three
    steps:
    
    1) Disable reception of TIPC packets from the interface in question.
    2) Take down the links, while allowing them so send out a RESET message.
    3) Disable transmission of TIPC packets on the interface.
    
    Apart from this, we now have to react on the NETDEV_GOING_DOWN event,
    instead of as currently the NEDEV_DOWN event, to ensure that such
    transmission is possible during the teardown phase.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 73f646cec35477b5099d7e952297cb9e1855be45
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Oct 15 14:52:44 2015 -0400

    tipc: delay ESTABLISH state event when link is established
    
    Link establishing, just like link teardown, is a non-atomic action, in
    the sense that discovering that conditions are right to establish a link,
    and the actual adding of the link to one of the node's send slots is done
    in two different lock contexts. The link FSM is designed to help bridging
    the gap between the two contexts in a safe manner.
    
    We have now discovered a weakness in the implementaton of this FSM.
    Because we directly let the link go from state LINK_ESTABLISHING to
    state LINK_ESTABLISHED already in the first lock context, we are unable
    to distinguish between a fully established link, i.e., a link that has
    been added to its slot, and a link that has not yet reached the second
    lock context. It may hence happen that a manual intervention, e.g., when
    disabling an interface, causes the function tipc_node_link_down() to try
    removing the link from the node slots, decrementing its active link
    counter etc, although the link was never added there in the first place.
    
    We solve this by delaying the actual state change until we reach the
    second lock context, inside the function tipc_node_link_up(). This
    makes it possible for potentail callers of __tipc_node_link_down() to
    know if they should proceed or not, and the problem is solved.
    
    Unforunately, the situation described above also has a second problem.
    Since there by necessity is a tipc_node_link_up() call pending once
    the node lock has been released, we must defuse that call by setting
    the link back from LINK_ESTABLISHING to LINK_RESET state. This forces
    us to make a slight modification to the link FSM, which will now look
    as follows.
    
     +------------------------------------+
     |RESET_EVT                           |
     |                                    |
     |                             +--------------+
     |           +-----------------|   SYNCHING   |-----------------+
     |           |FAILURE_EVT      +--------------+   PEER_RESET_EVT|
     |           |                  A            |                  |
     |           |                  |            |                  |
     |           |                  |            |                  |
     |           |                  |SYNCH_      |SYNCH_            |
     |           |                  |BEGIN_EVT   |END_EVT           |
     |           |                  |            |                  |
     |           V                  |            V                  V
     |    +-------------+          +--------------+          +------------+
     |    |  RESETTING  |<---------|  ESTABLISHED |--------->| PEER_RESET |
     |    +-------------+ FAILURE_ +--------------+ PEER_    +------------+
     |           |        EVT        |    A         RESET_EVT       |
     |           |                   |    |                         |
     |           |  +----------------+    |                         |
     |  RESET_EVT|  |RESET_EVT            |                         |
     |           |  |                     |                         |
     |           |  |                     |ESTABLISH_EVT            |
     |           |  |  +-------------+    |                         |
     |           |  |  | RESET_EVT   |    |                         |
     |           |  |  |             |    |                         |
     |           V  V  V             |    |                         |
     |    +-------------+          +--------------+        RESET_EVT|
     +--->|    RESET    |--------->| ESTABLISHING |<----------------+
          +-------------+ PEER_    +--------------+
           |           A  RESET_EVT       |
           |           |                  |
           |           |                  |
           |FAILOVER_  |FAILOVER_         |FAILOVER_
           |BEGIN_EVT  |END_EVT           |BEGIN_EVT
           |           |                  |
           V           |                  |
          +-------------+                 |
          | FAILINGOVER |<----------------+
          +-------------+
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8306f99a517b91ebf8fa94d017c2c84ca62e107c
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Oct 15 14:52:43 2015 -0400

    tipc: disallow packet duplicates in link deferred queue
    
    After the previous commits, we are guaranteed that no packets
    of type LINK_PROTOCOL or with illegal sequence numbers will be
    attempted added to the link deferred queue. This makes it possible to
    make some simplifications to the sorting algorithm in the function
    tipc_skb_queue_sorted().
    
    We also alter the function so that it will drop packets if one with
    the same seqeunce number is already present in the queue. This is
    necessary because we have identified weird packet sequences, involving
    duplicate packets, where a legitimate in-sequence packet may advance to
    the head of the queue without being detected and de-queued.
    
    Finally, we make this function outline, since it will now be called only
    in exceptional cases.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 81204c492b05274ade680c54787cd8ba234dcfd7
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Oct 15 14:52:42 2015 -0400

    tipc: improve sequence number checking
    
    The sequence number of an incoming packet is currently only checked
    for less than, equality to, or bigger than the next expected number,
    meaning that the receive window in practice becomes one half sequence
    number cycle, or U16_MAX/2. This does not make sense, and may not even
    be safe if there are extreme delays in the network. Any packet sent by
    the peer during the ongoing cycle must belong inside his current send
    window, or should otherwise be dropped if possible.
    
    Since a link endpoint cannot know its peer's current send window, it
    has to base this sanity check on a worst-case assumption, i.e., that
    the peer is using a maximum sized window of 8191 packets. Using this
    assumption, we now add a check that the sequence number is not bigger
    than next_expected + TIPC_MAX_LINK_WIN. We also re-order the checks
    done, so that the receive window test is performed before the gap test.
    This way, we are guaranteed that no packet with illegal sequence numbers
    are ever added to the deferred queue.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f9aa358a8109f9f33e96c3a7efb9a07631670294
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Oct 15 14:52:41 2015 -0400

    tipc: simplify tipc_link_rcv() reception loop
    
    Currently, all packets received in tipc_link_rcv() are unconditionally
    added to the packet deferred queue, whereafter that queue is walked and
    all its buffers evaluated for delivery. This is both non-optimal and
    and makes the queue sorting function unnecessary complex.
    
    This commit changes the loop so that an arrived packet is evaluated
    first, and added to the deferred queue only when a sequence number gap
    is discovered. A non-empty deferred queue is walked until it is empty
    or until its head's sequence number doesn't fit.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9945e8043ef9273cfb633d930e2a5a9116009b09
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Oct 15 14:52:40 2015 -0400

    tipc: limit usage of temporary skb list during packet reception
    
    During packet reception, the function tipc_link_rcv() adds its accepted
    packets to a temporary buffer queue, before finally splicing this queue
    into the lock protected input queue that will be delivered up to the
    socket layer. The purpose is to reduce potential contention on the input
    queue lock. However, since the vast majority of packets arrive in
    sequence, they will anyway be added one by one to the input queue, and
    the use of the temporary queue becomes a sub-optimization.
    
    The only case where this queue makes sense is when unpacking buffers
    from a bundle packet; here we want to avoid dozens of small buffers
    to be added individually to the lock-protected input queue in a tight
    loop.
    
    In this commit, we remove the general usage of the temporary queue,
    and keep it only for the packet unbundling case.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit dde4b5ae65de659b9ec64bafdde0430459fcb495
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Oct 14 09:23:18 2015 -0400

    tipc: move fragment importance field to new header position
    
    In commit e3eea1eb47a ("tipc: clean up handling of message priorities")
    we introduced a field in the packet header for keeping track of the
    priority of fragments, since this value is not present in the specified
    protocol header. Since the value so far only is used at the transmitting
    end of the link, we have not yet officially defined it as part of the
    protocol.
    
    Unfortunately, the field we use for keeping this value, bits 13-15 in
    in word 5, has turned out to be a poor choice; it is already used by the
    broadcast protocol for carrying the 'network id' field of the sending
    node. Since packet fragments also need to be transported across the
    broadcast protocol, the risk of conflict is obvious, and we see this
    happen when we use network identities larger than 2^13-1. This has
    escaped our testing because we have so far only been using small network
    id values.
    
    We now move this field to bits 0-2 in word 9, a field that is guaranteed
    to be unused by all involved protocols.
    
    Fixes: e3eea1eb47a ("tipc: clean up handling of message priorities")
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0f8b8e28fb3241f9fd82ce13bac2b40c35e987e0
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Tue Oct 13 12:41:51 2015 -0400

    tipc: eliminate risk of stalled link synchronization
    
    In commit 6e498158a827 ("tipc: move link synch and failover to link aggregation level")
    we introduced a new mechanism for performing link failover and
    synchronization. We have now detected a bug in this mechanism.
    
    During link synchronization we use the arrival of any packet on
    the tunnel link to trig a check for whether it has reached the
    synchronization point or not. This has turned out to be too
    permissive, since it may cause an arriving non-last SYNCH packet to
    end the synch state, just to see the next SYNCH packet initiate a
    new synch state with a new, higher synch point. This is not fatal,
    but should be avoided, because it may significantly extend the
    synchronization period, while at the same time we are not allowed
    to send NACKs if packets are lost. In the worst case, a low-traffic
    user may see its traffic stall until a LINK_PROTOCOL state message
    trigs the link to leave synchronization state.
    
    At the same time, LINK_PROTOCOL packets which happen to have a (non-
    valid) sequence number lower than the tunnel link's rcv_nxt value will
    be consistently dropped, and will never be able to resolve the situation
    described above.
    
    We fix this by exempting LINK_PROTOCOL packets from the sequence number
    check, as they should be. We also reduce (but don't completely
    eliminate) the risk of entering multiple synchronization states by only
    allowing the (logically) first SYNCH packet to initiate a synchronization
    state. This works independently of actual packet arrival order.
    
    Fixes: commit 6e498158a827 ("tipc: move link synch and failover to link aggregation level")
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 79bff4bc9204dec190576741babecf73786f48a3
Author: Stephen Smalley <sds@tycho.nsa.gov>
Date:   Tue Jul 7 09:43:45 2015 -0400

    net/tipc: initialize security state for new connection socket
    
    [ Upstream commit fdd75ea8df370f206a8163786e7470c1277a5064 ]
    
    Calling connect() with an AF_TIPC socket would trigger a series
    of error messages from SELinux along the lines of:
    SELinux: Invalid class 0
    type=AVC msg=audit(1434126658.487:34500): avc:  denied  { <unprintable> }
      for pid=292 comm="kworker/u16:5" scontext=system_u:system_r:kernel_t:s0
      tcontext=system_u:object_r:unlabeled_t:s0 tclass=<unprintable>
      permissive=0
    
    This was due to a failure to initialize the security state of the new
    connection sock by the tipc code, leaving it with junk in the security
    class field and an unlabeled secid.  Add a call to security_sk_clone()
    to inherit the security state from the parent socket.
    
    Reported-by: Tim Shearer <tim.shearer@overturenetworks.com>
    Signed-off-by: Stephen Smalley <sds@tycho.nsa.gov>
    Acked-by: Paul Moore <paul@paul-moore.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [bwh: Backported to 3.2: adjust context, indentation]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit afabf2a8b621f2c300cbdf6adb0f8855f612b3a6
Author: Stephen Smalley <sds@tycho.nsa.gov>
Date:   Tue Jul 7 09:43:45 2015 -0400

    net/tipc: initialize security state for new connection socket
    
    [ Upstream commit fdd75ea8df370f206a8163786e7470c1277a5064 ]
    
    Calling connect() with an AF_TIPC socket would trigger a series
    of error messages from SELinux along the lines of:
    SELinux: Invalid class 0
    type=AVC msg=audit(1434126658.487:34500): avc:  denied  { <unprintable> }
      for pid=292 comm="kworker/u16:5" scontext=system_u:system_r:kernel_t:s0
      tcontext=system_u:object_r:unlabeled_t:s0 tclass=<unprintable>
      permissive=0
    
    This was due to a failure to initialize the security state of the new
    connection sock by the tipc code, leaving it with junk in the security
    class field and an unlabeled secid.  Add a call to security_sk_clone()
    to inherit the security state from the parent socket.
    
    Reported-by: Tim Shearer <tim.shearer@overturenetworks.com>
    Signed-off-by: Stephen Smalley <sds@tycho.nsa.gov>
    Acked-by: Paul Moore <paul@paul-moore.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4db9a9724fdf1a61ef99e09580237db07503d21e
Author: Stephen Smalley <sds@tycho.nsa.gov>
Date:   Tue Jul 7 09:43:45 2015 -0400

    net/tipc: initialize security state for new connection socket
    
    [ Upstream commit fdd75ea8df370f206a8163786e7470c1277a5064 ]
    
    Calling connect() with an AF_TIPC socket would trigger a series
    of error messages from SELinux along the lines of:
    SELinux: Invalid class 0
    type=AVC msg=audit(1434126658.487:34500): avc:  denied  { <unprintable> }
      for pid=292 comm="kworker/u16:5" scontext=system_u:system_r:kernel_t:s0
      tcontext=system_u:object_r:unlabeled_t:s0 tclass=<unprintable>
      permissive=0
    
    This was due to a failure to initialize the security state of the new
    connection sock by the tipc code, leaving it with junk in the security
    class field and an unlabeled secid.  Add a call to security_sk_clone()
    to inherit the security state from the parent socket.
    
    Reported-by: Tim Shearer <tim.shearer@overturenetworks.com>
    Signed-off-by: Stephen Smalley <sds@tycho.nsa.gov>
    Acked-by: Paul Moore <paul@paul-moore.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb18cdc8b40e14a36fff015e794724e989af426c
Author: Stephen Smalley <sds@tycho.nsa.gov>
Date:   Tue Jul 7 09:43:45 2015 -0400

    net/tipc: initialize security state for new connection socket
    
    [ Upstream commit fdd75ea8df370f206a8163786e7470c1277a5064 ]
    
    Calling connect() with an AF_TIPC socket would trigger a series
    of error messages from SELinux along the lines of:
    SELinux: Invalid class 0
    type=AVC msg=audit(1434126658.487:34500): avc:  denied  { <unprintable> }
      for pid=292 comm="kworker/u16:5" scontext=system_u:system_r:kernel_t:s0
      tcontext=system_u:object_r:unlabeled_t:s0 tclass=<unprintable>
      permissive=0
    
    This was due to a failure to initialize the security state of the new
    connection sock by the tipc code, leaving it with junk in the security
    class field and an unlabeled secid.  Add a call to security_sk_clone()
    to inherit the security state from the parent socket.
    
    Reported-by: Tim Shearer <tim.shearer@overturenetworks.com>
    Signed-off-by: Stephen Smalley <sds@tycho.nsa.gov>
    Acked-by: Paul Moore <paul@paul-moore.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b558aeea96d34dbcfb3192d0a09f9f80efd4d5a6
Author: Stephen Smalley <sds@tycho.nsa.gov>
Date:   Tue Jul 7 09:43:45 2015 -0400

    net/tipc: initialize security state for new connection socket
    
    [ Upstream commit fdd75ea8df370f206a8163786e7470c1277a5064 ]
    
    Calling connect() with an AF_TIPC socket would trigger a series
    of error messages from SELinux along the lines of:
    SELinux: Invalid class 0
    type=AVC msg=audit(1434126658.487:34500): avc:  denied  { <unprintable> }
      for pid=292 comm="kworker/u16:5" scontext=system_u:system_r:kernel_t:s0
      tcontext=system_u:object_r:unlabeled_t:s0 tclass=<unprintable>
      permissive=0
    
    This was due to a failure to initialize the security state of the new
    connection sock by the tipc code, leaving it with junk in the security
    class field and an unlabeled secid.  Add a call to security_sk_clone()
    to inherit the security state from the parent socket.
    
    Reported-by: Tim Shearer <tim.shearer@overturenetworks.com>
    Signed-off-by: Stephen Smalley <sds@tycho.nsa.gov>
    Acked-by: Paul Moore <paul@paul-moore.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sasha.levin@oracle.com>

commit 518a7cb6980cd640c7f979d29021ad870f60d7d7
Merge: d4a748a10e50 bdb06cbf77cb
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Sep 26 06:01:33 2015 -0400

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) When we run a tap on netlink sockets, we have to copy mmap'd SKBs
        instead of cloning them.  From Daniel Borkmann.
    
     2) When converting classical BPF into eBPF, fix the setting of the
        source reg to BPF_REG_X.  From Tycho Andersen.
    
     3) Fix igmpv3/mldv2 report parsing in the bridge multicast code, from
        Linus Lussing.
    
     4) Fix dst refcounting for ipv6 tunnels, from Martin KaFai Lau.
    
     5) Set NLM_F_REPLACE flag properly when replacing ipv6 routes, from
        Roopa Prabhu.
    
     6) Add some new cxgb4 PCI device IDs, from Hariprasad Shenai.
    
     7) Fix headroom tests and SKB leaks in ipv6 fragmentation code, from
        Florian Westphal.
    
     8) Check DMA mapping errors in bna driver, from Ivan Vecera.
    
     9) Several 8139cp bug fixes (dev_kfree_skb_any in interrupt context,
        misclearing of interrupt status in TX timeout handler, etc.) from
        David Woodhouse.
    
    10) In tipc, reset SKB header pointer after skb_linearize(), from Erik
        Hugne.
    
    11) Fix autobind races et al. in netlink code, from Herbert Xu with
        help from Tejun Heo and others.
    
    12) Missing SET_NETDEV_DEV in sunvnet driver, from Sowmini Varadhan.
    
    13) Fix various races in timewait timer and reqsk_queue_hadh_req, from
        Eric Dumazet.
    
    14) Fix array overruns in mac80211, from Johannes Berg and Dan
        Carpenter.
    
    15) Fix data race in rhashtable_rehash_one(), from Dmitriy Vyukov.
    
    16) Fix race between poll_one_napi and napi_disable, from Neil Horman.
    
    17) Fix byte order in geneve tunnel port config, from John W Linville.
    
    18) Fix handling of ARP replies over lightweight tunnels, from Jiri
        Benc.
    
    19) We can loop when fib rule dumps cross multiple SKBs, fix from Wilson
        Kok and Roopa Prabhu.
    
    20) Several reference count handling bug fixes in the PHY/MDIO layer
        from Russel King.
    
    21) Fix lockdep splat in ppp_dev_uninit(), from Guillaume Nault.
    
    22) Fix crash in icmp_route_lookup(), from David Ahern.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (116 commits)
      net: Fix panic in icmp_route_lookup
      net: update docbook comment for __mdiobus_register()
      ppp: fix lockdep splat in ppp_dev_uninit()
      net: via/Kconfig: GENERIC_PCI_IOMAP required if PCI not selected
      phy: marvell: add link partner advertised modes
      net: fix net_device refcounting
      phy: add phy_device_remove()
      phy: fixed-phy: properly validate phy in fixed_phy_update_state()
      net: fix phy refcounting in a bunch of drivers
      of_mdio: fix MDIO phy device refcounting
      phy: add proper phy struct device refcounting
      phy: fix mdiobus module safety
      net: dsa: fix of_mdio_find_bus() device refcount leak
      phy: fix of_mdio_find_bus() device refcount leak
      ip6_tunnel: Reduce log level in ip6_tnl_err() to debug
      ip6_gre: Reduce log level in ip6gre_err() to debug
      fib_rules: fix fib rule dumps across multiple skbs
      bnx2x: byte swap rss_key to comply to Toeplitz specs
      net: revert "net_sched: move tp->root allocation into fw_init()"
      lwtunnel: remove source and destination UDP port config option
      ...

commit 4e3ae00100945d39e1f83b7c0179a114ccf55759
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Fri Sep 18 10:46:31 2015 +0200

    tipc: reinitialize pointer after skb linearize
    
    The msg pointer into header may change after skb linearization.
    We must reinitialize it after calling skb_linearize to prevent
    operating on a freed or invalid pointer.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reported-by: Tamás Végh <tamas.vegh@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7845989cb4b3da1db903918c844fccb9817d34a0
Author: Kolmakov Dmitriy <kolmakov.dmitriy@huawei.com>
Date:   Mon Sep 7 09:05:48 2015 +0000

    net: tipc: fix stall during bclink wakeup procedure
    
    If an attempt to wake up users of broadcast link is made when there is
    no enough place in send queue than it may hang up inside the
    tipc_sk_rcv() function since the loop breaks only after the wake up
    queue becomes empty. This can lead to complete CPU stall with the
    following message generated by RCU:
    
    INFO: rcu_sched self-detected stall on CPU { 0}  (t=2101 jiffies
                                            g=54225 c=54224 q=11465)
    Task dump for CPU 0:
    tpch            R  running task        0 39949  39948 0x0000000a
     ffffffff818536c0 ffff88181fa037a0 ffffffff8106a4be 0000000000000000
     ffffffff818536c0 ffff88181fa037c0 ffffffff8106d8a8 ffff88181fa03800
     0000000000000001 ffff88181fa037f0 ffffffff81094a50 ffff88181fa15680
    Call Trace:
     <IRQ>  [<ffffffff8106a4be>] sched_show_task+0xae/0x120
     [<ffffffff8106d8a8>] dump_cpu_task+0x38/0x40
     [<ffffffff81094a50>] rcu_dump_cpu_stacks+0x90/0xd0
     [<ffffffff81097c3b>] rcu_check_callbacks+0x3eb/0x6e0
     [<ffffffff8106e53f>] ? account_system_time+0x7f/0x170
     [<ffffffff81099e64>] update_process_times+0x34/0x60
     [<ffffffff810a84d1>] tick_sched_handle.isra.18+0x31/0x40
     [<ffffffff810a851c>] tick_sched_timer+0x3c/0x70
     [<ffffffff8109a43d>] __run_hrtimer.isra.34+0x3d/0xc0
     [<ffffffff8109aa95>] hrtimer_interrupt+0xc5/0x1e0
     [<ffffffff81030d52>] ? native_smp_send_reschedule+0x42/0x60
     [<ffffffff81032f04>] local_apic_timer_interrupt+0x34/0x60
     [<ffffffff810335bc>] smp_apic_timer_interrupt+0x3c/0x60
     [<ffffffff8165a3fb>] apic_timer_interrupt+0x6b/0x70
     [<ffffffff81659129>] ? _raw_spin_unlock_irqrestore+0x9/0x10
     [<ffffffff8107eb9f>] __wake_up_sync_key+0x4f/0x60
     [<ffffffffa313ddd1>] tipc_write_space+0x31/0x40 [tipc]
     [<ffffffffa313dadf>] filter_rcv+0x31f/0x520 [tipc]
     [<ffffffffa313d699>] ? tipc_sk_lookup+0xc9/0x110 [tipc]
     [<ffffffff81659259>] ? _raw_spin_lock_bh+0x19/0x30
     [<ffffffffa314122c>] tipc_sk_rcv+0x2dc/0x3e0 [tipc]
     [<ffffffffa312e7ff>] tipc_bclink_wakeup_users+0x2f/0x40 [tipc]
     [<ffffffffa313ce26>] tipc_node_unlock+0x186/0x190 [tipc]
     [<ffffffff81597c1c>] ? kfree_skb+0x2c/0x40
     [<ffffffffa313475c>] tipc_rcv+0x2ac/0x8c0 [tipc]
     [<ffffffffa312ff58>] tipc_l2_rcv_msg+0x38/0x50 [tipc]
     [<ffffffff815a76d3>] __netif_receive_skb_core+0x5a3/0x950
     [<ffffffff815a98d3>] __netif_receive_skb+0x13/0x60
     [<ffffffff815a993e>] netif_receive_skb_internal+0x1e/0x90
     [<ffffffff815aa138>] napi_gro_receive+0x78/0xa0
     [<ffffffffa07f93f4>] tg3_poll_work+0xc54/0xf40 [tg3]
     [<ffffffff81597c8c>] ? consume_skb+0x2c/0x40
     [<ffffffffa07f9721>] tg3_poll_msix+0x41/0x160 [tg3]
     [<ffffffff815ab0f2>] net_rx_action+0xe2/0x290
     [<ffffffff8104b92a>] __do_softirq+0xda/0x1f0
     [<ffffffff8104bc26>] irq_exit+0x76/0xa0
     [<ffffffff81004355>] do_IRQ+0x55/0xf0
     [<ffffffff8165a12b>] common_interrupt+0x6b/0x6b
     <EOI>
    
    The issue occurs only when tipc_sk_rcv() is used to wake up postponed
    senders:
    
            tipc_bclink_wakeup_users()
                    // wakeupq - is a queue which consists of special
                    //               messages with SOCK_WAKEUP type.
                    tipc_sk_rcv(wakeupq)
                            ...
                            while (skb_queue_len(inputq)) {
                                    filter_rcv(skb)
                                            // Here the type of message is checked
                                            // and if it is SOCK_WAKEUP then
                                            // it tries to wake up a sender.
                                            tipc_write_space(sk)
                                                    wake_up_interruptible_sync_poll()
                            }
    
    After the sender thread is woke up it can gather control and perform
    an attempt to send a message. But if there is no enough place in send
    queue it will call link_schedule_user() function which puts a message
    of type SOCK_WAKEUP to the wakeup queue and put the sender to sleep.
    Thus the size of the queue actually is not changed and the while()
    loop never exits.
    
    The approach I proposed is to wake up only senders for which there is
    enough place in send queue so the described issue can't occur.
    Moreover the same approach is already used to wake up senders on
    unicast links.
    
    I have got into the issue on our product code but to reproduce the
    issue I changed a benchmark test application (from
    tipcutils/demos/benchmark) to perform the following scenario:
            1. Run 64 instances of test application (nodes). It can be done
               on the one physical machine.
            2. Each application connects to all other using TIPC sockets in
               RDM mode.
            3. When setup is done all nodes start simultaneously send
               broadcast messages.
            4. Everything hangs up.
    
    The issue is reproducible only when a congestion on broadcast link
    occurs. For example, when there are only 8 nodes it works fine since
    congestion doesn't occur. Send queue limit is 40 in my case (I use a
    critical importance level) and when 64 nodes send a message at the
    same moment a congestion occurs every time.
    
    Signed-off-by: Dmitry S Kolmakov <kolmakov.dmitriy@huawei.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a43a9ef6a2e510fec61176ff2c34fab3e7d581da
Author: Jiri Benc <jbenc@redhat.com>
Date:   Fri Aug 28 20:48:22 2015 +0200

    vxlan: do not receive IPv4 packets on IPv6 socket
    
    By default (subject to the sysctl settings), IPv6 sockets listen also for
    IPv4 traffic. Vxlan is not prepared for that and expects IPv6 header in
    packets received through an IPv6 socket.
    
    In addition, it's currently not possible to have both IPv4 and IPv6 vxlan
    tunnel on the same port (unless bindv6only sysctl is enabled), as it's not
    possible to create and bind both IPv4 and IPv6 vxlan interfaces and there's
    no way to specify both IPv4 and IPv6 remote/group IP addresses.
    
    Set IPV6_V6ONLY on vxlan sockets to fix both of these issues. This is not
    done globally in udp_tunnel, as l2tp and tipc seems to work okay when
    receiving IPv4 packets on IPv6 socket and people may rely on this behavior.
    The other tunnels (geneve and fou) do not support IPv6.
    
    Signed-off-by: Jiri Benc <jbenc@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 400f1f4f6b08b2b2071b8a85315f852a1a524f50
Author: Stephen Smalley <sds@tycho.nsa.gov>
Date:   Tue Jul 7 09:43:45 2015 -0400

    net/tipc: initialize security state for new connection socket
    
    commit fdd75ea8df370f206a8163786e7470c1277a5064 upstream.
    
    Calling connect() with an AF_TIPC socket would trigger a series
    of error messages from SELinux along the lines of:
    SELinux: Invalid class 0
    type=AVC msg=audit(1434126658.487:34500): avc:  denied  { <unprintable> }
      for pid=292 comm="kworker/u16:5" scontext=system_u:system_r:kernel_t:s0
      tcontext=system_u:object_r:unlabeled_t:s0 tclass=<unprintable>
      permissive=0
    
    This was due to a failure to initialize the security state of the new
    connection sock by the tipc code, leaving it with junk in the security
    class field and an unlabeled secid.  Add a call to security_sk_clone()
    to inherit the security state from the parent socket.
    
    Reported-by: Tim Shearer <tim.shearer@overturenetworks.com>
    Signed-off-by: Stephen Smalley <sds@tycho.nsa.gov>
    Acked-by: Paul Moore <paul@paul-moore.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Luis Henriques <luis.henriques@canonical.com>

commit f5aeec43af3251629bd50bd0075712325086f721
Author: Stephen Smalley <sds@tycho.nsa.gov>
Date:   Tue Jul 7 09:43:45 2015 -0400

    net/tipc: initialize security state for new connection socket
    
    [ Upstream commit fdd75ea8df370f206a8163786e7470c1277a5064 ]
    
    Calling connect() with an AF_TIPC socket would trigger a series
    of error messages from SELinux along the lines of:
    SELinux: Invalid class 0
    type=AVC msg=audit(1434126658.487:34500): avc:  denied  { <unprintable> }
      for pid=292 comm="kworker/u16:5" scontext=system_u:system_r:kernel_t:s0
      tcontext=system_u:object_r:unlabeled_t:s0 tclass=<unprintable>
      permissive=0
    
    This was due to a failure to initialize the security state of the new
    connection sock by the tipc code, leaving it with junk in the security
    class field and an unlabeled secid.  Add a call to security_sk_clone()
    to inherit the security state from the parent socket.
    
    Reported-by: Tim Shearer <tim.shearer@overturenetworks.com>
    Signed-off-by: Stephen Smalley <sds@tycho.nsa.gov>
    Acked-by: Paul Moore <paul@paul-moore.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit c5f98b5669b875564f992e1398f5a4407dba8b07
Merge: 7f629be158a9 2be80c2d87de
Author: David S. Miller <davem@davemloft.net>
Date:   Sun Aug 23 16:14:46 2015 -0700

    Merge branch 'tipc-failover-fixes'
    
    Jon Maloy says:
    
    ====================
    tipc: fix link failover/synch problems
    
    We fix three problems with the new link failover/synch implementation,
    which was introduced earlier in this release cycle. They are all related
    to situations where there is a very short interval between the disabling
    and enabling of interfaces.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2be80c2d87de789550982e74a11e9f9ff5940845
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Aug 20 02:12:56 2015 -0400

    tipc: fix stale link problem during synchronization
    
    Recent changes to the link synchronization means that we can now just
    drop packets arriving on the synchronizing link before the synch point
    is reached. This has lead to significant simplifications to the
    implementation, but also turns out to have a flip side that we need
    to consider.
    
    Under unlucky circumstances, the two endpoints may end up
    repeatedly dropping each other's packets, while immediately
    asking for retransmission of the same packets, just to drop
    them once more. This pattern will eventually be broken when
    the synch point is reached on the other link, but before that,
    the endpoints may have arrived at the retransmission limit
    (stale counter) that indicates that the link should be broken.
    We see this happen at rare occasions.
    
    The fix for this is to not ask for retransmissions when a link is in
    state LINK_SYNCHING. The fact that the link has reached this state
    means that it has already received the first SYNCH packet, and that it
    knows the synch point. Hence, it doesn't need any more packets until the
    other link has reached the synch point, whereafter it can go ahead and
    ask for the missing packets.
    
    However, because of the reduced traffic on the synching link that
    follows this change, it may now take longer to discover that the
    synch point has been reached. We compensate for this by letting all
    packets, on any of the links, trig a check for synchronization
    termination. This is possible because the packets themselves don't
    contain any information that is needed for discovering this condition.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5ae2f8e6857968d6dddbd3879ed0a32b860e02d1
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Aug 20 02:12:55 2015 -0400

    tipc: interrupt link synchronization when a link goes down
    
    When we introduced the new link failover/synch mechanism
    in commit 6e498158a827fd515b514842e9a06bdf0f75ab86
    ("tipc: move link synch and failover to link aggregation level"),
    we missed the case when the non-tunnel link goes down during the link
    synchronization period. In this case the tunnel link will remain in
    state LINK_SYNCHING, something leading to unpredictable behavior when
    the failover procedure is initiated.
    
    In this commit, we ensure that the node and remaining link goes
    back to regular communication state (SELF_UP_PEER_UP/LINK_ESTABLISHED)
    when one of the parallel links goes down. We also ensure that we don't
    re-enter synch mode if subsequent SYNCH packets arrive on the remaining
    link.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 17b2063077a7478e5fd3c34b04a059dbb8474638
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Aug 20 02:12:54 2015 -0400

    tipc: eliminate risk of premature link setup during failover
    
    When a link goes down, and there is still a working link towards its
    destination node, a failover is initiated, and the failed link is not
    allowed to re-establish until that procedure is finished. To ensure
    this, the concerned link endpoints are set to state LINK_FAILINGOVER,
    and the node endpoints to NODE_FAILINGOVER during the failover period.
    
    However, if the link reset is due to a disabled bearer, the corres-
    ponding link endpoint is deleted, and only the node endpoint knows
    about the ongoing failover. Now, if the disabled bearer is re-enabled
    during the failover period, the discovery mechanism may create a new
    link endpoint that is ready to be established, despite that this is not
    permitted. This situation may cause both the ongoing failover and any
    subsequent link synchronization to fail.
    
    In this commit, we ensure that a newly created link goes directly to
    state LINK_FAILINGOVER if the corresponding node state is
    NODE_FAILINGOVER. This eliminates the problem described above.
    
    Furthermore, we tighten the criteria for which packets are allowed
    to end a failover state in the function tipc_node_check_state().
    By checking that the receiving link is up and running, instead of just
    checking that it is not in failover mode, we eliminate the risk that
    protocol packets from the re-created link may cause the failover to
    be prematurely terminated.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8f8ff9135b28a7560a5627aceaf289e3f0d4cd64
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Mon Aug 17 14:15:10 2015 +0200

    tipc: don't sanity check non-existing TLV (NL compat)
    
    A zero length payload means that no TLV (Type Length Value) data has
    been passed. Prior to this patch a non-existing TLV could be sanity
    checked with TLV_OK() resulting in random behavior where a user
    sending an empty message occasionally got a incorrect "operation not
    supported" message back.
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1df33a11454de804661c8e19cd0e464914eefc6d
Merge: 29a3060aa7cc 440d8963cd59
Author: David S. Miller <davem@davemloft.net>
Date:   Thu Jul 30 17:25:15 2015 -0700

    Merge branch 'tipc-next'
    
    Jon Maloy says:
    
    ====================
    tipc: separate link aggregation from link layer
    
    We continue the work on separating the roles of the link aggregation and
    link layers, as well as making code cleanups in general.
    
    This second commit batch focuses on moving the orchestration of link
    failover and synchronization to the node level, as well as preparing the
    node lock structure for further future impovements. We also make some
    changes to message delivery between link and socket layer, in order to
    make this mechanism safer and less obscure.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 440d8963cd590ec9387d76a36e60c02da9ed944d
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Jul 30 18:24:26 2015 -0400

    tipc: clean up link creation
    
    We simplify the link creation function tipc_link_create() and the way
    the link struct it is connected to the node struct. In particular, we
    remove the duplicate initialization of some fields which are anyway set
    in tipc_link_reset().
    
    Tested-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9073fb8be3ee6f89492b8ea8f6d3902913a9fc91
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Jul 30 18:24:25 2015 -0400

    tipc: use temporary, non-protected skb queue for bundle reception
    
    Currently, when we extract small messages from a message bundle, or
    when many messages have accumulated in the link arrival queue, those
    messages are added one by one to the lock protected link input queue.
    This may increase contention with the reader of that queue, in
    the function tipc_sk_rcv().
    
    This commit introduces a temporary, unprotected input queue in
    tipc_link_rcv() for such cases. Only when the arrival queue has been
    emptied, and the function is ready to return, does it splice the whole
    temporary queue into the real input queue.
    
    Tested-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 23d8335d786472021b5c733f228c7074208dcfa0
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Jul 30 18:24:24 2015 -0400

    tipc: remove implicit message delivery in node_unlock()
    
    After the most recent changes, all access calls to a link which
    may entail addition of messages to the link's input queue are
    postpended by an explicit call to tipc_sk_rcv(), using a reference
    to the correct queue.
    
    This means that the potentially hazardous implicit delivery, using
    tipc_node_unlock() in combination with a binary flag and a cached
    queue pointer, now has become redundant.
    
    This commit removes this implicit delivery mechanism both for regular
    data messages and for binding table update messages.
    
    Tested-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 598411d70f85dcf5b5c6c2369cc48637c251b656
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Jul 30 18:24:23 2015 -0400

    tipc: make resetting of links non-atomic
    
    In order to facilitate future improvements to the locking structure, we
    want to make resetting and establishing of links non-atomic. I.e., the
    functions tipc_node_link_up() and tipc_node_link_down() should be called
    from outside the node lock context, and grab/release the node lock
    themselves. This requires that we can freeze the link state from the
    moment it is set to RESETTING or PEER_RESET in one lock context until
    it is set to RESET or ESTABLISHING in a later context. The recently
    introduced link FSM makes this possible, so we are now ready to introduce
    the above change.
    
    This commit implements this.
    
    Tested-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit cf148816acb6def45474001302368eb472995e62
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Jul 30 18:24:22 2015 -0400

    tipc: move received discovery data evaluation inside node.c
    
    The node lock is currently grabbed and and released in the function
    tipc_disc_rcv() in the file discover.c. As a preparation for the next
    commits, we need to move this node lock handling, along with the code
    area it is covering, to node.c.
    
    This commit introduces this change.
    
    Tested-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 662921cd0a53db4504838dfbb7d996f9e6e94001
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Jul 30 18:24:21 2015 -0400

    tipc: merge link->exec_mode and link->state into one FSM
    
    Until now, we have been handling link failover and synchronization
    by using an additional link state variable, "exec_mode". This variable
    is not independent of the link FSM state, something causing a risk of
    inconsistencies, apart from the fact that it clutters the code.
    
    The conditions are now in place to define a new link FSM that covers
    all existing use cases, including failover and synchronization, and
    eliminate the "exec_mode" field altogether. The FSM must also support
    non-atomic resetting of links, which will be introduced later.
    
    The new link FSM is shown below, with 7 states and 8 events.
    Only events leading to state change are shown as edges.
    
    +------------------------------------+
    |RESET_EVT                           |
    |                                    |
    |                             +--------------+
    |           +-----------------|   SYNCHING   |-----------------+
    |           |FAILURE_EVT      +--------------+   PEER_RESET_EVT|
    |           |                  A            |                  |
    |           |                  |            |                  |
    |           |                  |            |                  |
    |           |                  |SYNCH_      |SYNCH_            |
    |           |                  |BEGIN_EVT   |END_EVT           |
    |           |                  |            |                  |
    |           V                  |            V                  V
    |    +-------------+          +--------------+          +------------+
    |    |  RESETTING  |<---------|  ESTABLISHED |--------->| PEER_RESET |
    |    +-------------+ FAILURE_ +--------------+ PEER_    +------------+
    |           |        EVT        |    A         RESET_EVT       |
    |           |                   |    |                         |
    |           |                   |    |                         |
    |           |    +--------------+    |                         |
    |  RESET_EVT|    |RESET_EVT          |ESTABLISH_EVT            |
    |           |    |                   |                         |
    |           |    |                   |                         |
    |           V    V                   |                         |
    |    +-------------+          +--------------+        RESET_EVT|
    +--->|    RESET    |--------->| ESTABLISHING |<----------------+
         +-------------+ PEER_    +--------------+
          |           A  RESET_EVT       |
          |           |                  |
          |           |                  |
          |FAILOVER_  |FAILOVER_         |FAILOVER_
          |BEGIN_EVT  |END_EVT           |BEGIN_EVT
          |           |                  |
          V           |                  |
         +-------------+                 |
         | FAILINGOVER |<----------------+
         +-------------+
    
    These changes are fully backwards compatible.
    
    Tested-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5045f7b9009f1455268b98cecbcc271663934c85
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Jul 30 18:24:20 2015 -0400

    tipc: move protocol message sending away from link FSM
    
    The implementation of the link FSM currently takes decisions about and
    sends out link protocol messages. This is unnecessary, since such
    actions are not the result of any link state change, and are even
    decided based on non-FSM state information ("silent_intv_cnt").
    
    We now move the sending of unicast link protocol messages to the
    function tipc_link_timeout(), and the initial broadcast synchronization
    message to tipc_node_link_up(). The latter is done because a link
    instance should not need to know whether it is the first or second
    link to a destination. Such information is now restricted to and
    handled by the link aggregation layer in node.c
    
    Tested-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6e498158a827fd515b514842e9a06bdf0f75ab86
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Jul 30 18:24:19 2015 -0400

    tipc: move link synch and failover to link aggregation level
    
    Link failover and synchronization have until now been handled by the
    links themselves, forcing them to have knowledge about and to access
    parallel links in order to make the two algorithms work correctly.
    
    In this commit, we move the control part of this functionality to the
    link aggregation level in node.c, which is the right location for this.
    As a result, the two algorithms become easier to follow, and the link
    implementation becomes simpler.
    
    Tested-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 66996b6c47ed7f6bbb01a768e23fae262c7db8e0
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Jul 30 18:24:18 2015 -0400

    tipc: extend node FSM
    
    In the next commit, we will move link synch/failover orchestration to
    the link aggregation level. In order to do this, we first need to extend
    the node FSM with two more states, NODE_SYNCHING and NODE_FAILINGOVER,
    plus four new events to enter and leave those states.
    
    This commit introduces this change, without yet making use of it.
    The node FSM now looks as follows:
    
                               +-----------------------------------------+
                               |                            PEER_DOWN_EVT|
                               |                                         |
      +------------------------+----------------+                        |
      |SELF_DOWN_EVT           |                |                        |
      |                        |                |                        |
      |              +-----------+          +-----------+                |
      |              |NODE_      |          |NODE_      |                |
      |   +----------|FAILINGOVER|<---------|SYNCHING   |------------+   |
      |   |SELF_     +-----------+ FAILOVER_+-----------+    PEER_   |   |
      |   |DOWN_EVT   |         A  BEGIN_EVT A         |     DOWN_EVT|   |
      |   |           |         |            |         |             |   |
      |   |           |         |            |         |             |   |
      |   |           |FAILOVER_|FAILOVER_   |SYNCH_   |SYNCH_       |   |
      |   |           |END_EVT  |BEGIN_EVT   |BEGIN_EVT|END_EVT      |   |
      |   |           |         |            |         |             |   |
      |   |           |         |            |         |             |   |
      |   |           |        +--------------+        |             |   |
      |   |           +------->|   SELF_UP_   |<-------+             |   |
      |   |   +----------------|   PEER_UP    |------------------+   |   |
      |   |   |SELF_DOWN_EVT   +--------------+     PEER_DOWN_EVT|   |   |
      |   |   |                   A          A                   |   |   |
      |   |   |                   |          |                   |   |   |
      |   |   |        PEER_UP_EVT|          |SELF_UP_EVT        |   |   |
      |   |   |                   |          |                   |   |   |
      V   V   V                   |          |                   V   V   V
    +------------+       +-----------+    +-----------+       +------------+
    |SELF_DOWN_  |       |SELF_UP_   |    |PEER_UP_   |       |PEER_DOWN   |
    |PEER_LEAVING|<------|PEER_COMING|    |SELF_COMING|------>|SELF_LEAVING|
    +------------+ SELF_ +-----------+    +-----------+ PEER_ +------------+
           |       DOWN_EVT       A          A          DOWN_EVT     |
           |                      |          |                       |
           |                      |          |                       |
           |           SELF_UP_EVT|          |PEER_UP_EVT            |
           |                      |          |                       |
           |                      |          |                       |
           |PEER_DOWN_EVT       +--------------+        SELF_DOWN_EVT|
           +------------------->|  SELF_DOWN_  |<--------------------+
                                |  PEER_DOWN   |
                                +--------------+
    
    Tested-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 655fb243b8ae5e652f744311bcb6e806e83cea1e
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Jul 30 18:24:17 2015 -0400

    tipc: reverse call order for link_reset()->node_link_down()
    
    In many cases the call order when a link is reset goes as follows:
    tipc_node_xx()->tipc_link_reset()->tipc_node_link_down()
    
    This is not the right order if we want the node to be in control,
    so in this commit we change the order to:
    tipc_node_xx()->tipc_node_link_down()->tipc_link_reset()
    
    The fact that tipc_link_reset() now is called from only one
    location with a well-defined state will also facilitate later
    simplifications of tipc_link_reset() and the link FSM.
    
    Tested-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6144a996a65199480eed7521c1c50590c282e78e
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Jul 30 18:24:16 2015 -0400

    tipc: move all link_reset() calls to link aggregation level
    
    In line with our effort to let the node level have full control over
    its links, we want to move all link reset calls from link.c to node.c.
    Some of the calls can be moved by simply moving the calling function,
    when this is the right thing to do. For the remaining calls we use
    the now established technique of returning a TIPC_LINK_DOWN_EVT
    flag from tipc_link_rcv(), whereafter we perform the reset call when
    the call returns.
    
    This change serves as a preparation for the coming commits.
    
    Tested-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit cbeb83ca68dcedf69b336fd1c5263658cbe5b51e
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Jul 30 18:24:15 2015 -0400

    tipc: eliminate function tipc_link_activate()
    
    The function tipc_link_activate() is redundant, since it mostly performs
    settings that have already been done in a preceding tipc_link_reset().
    
    There are three exceptions to this:
    - The actual state change to TIPC_LINK_WORKING. This should anyway be done
      in the FSM, and not in a separate function.
    - Registration of the link with the bearer. This should be done by the
      node, since we don't want the link to have any knowledge about its
      specific bearer.
    - Call to tipc_node_link_up() for user access registration. With the new
      role distribution between link aggregation and link level this becomes
      the wrong call order; tipc_node_link_up() should instead be called
      directly as a result of a TIPC_LINK_UP event, hence by the node itself.
    
    This commit implements those changes.
    
    Tested-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5a4c355229da12558b5ded0775f4d0bc6650d28d
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Wed Jul 29 18:28:01 2015 -0400

    tipc: fix bug in broadcast synch message create function
    
    In commit d999297c3dbbe7fdd832f7fa4ec84301e170b3e6
    ("tipc: reduce locking scope during packet reception") we introduced
    a new function tipc_build_bcast_sync_msg(), which carries initial
    synchronization data between two nodes at first contact and at
    re-contact. In this function, we missed to add synchronization data,
    with the effect that the broadcast link endpoints will fail to
    synchronize correctly at re-contact between a running and a restarted
    node. All other cases work as intended.
    
    With this commit, we fix this bug.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1d70ec70ef3b5e3e5536d21d8fc82b25aba62d97
Merge: a69e5a0dcfa4 cda3696d3d26
Author: David S. Miller <davem@davemloft.net>
Date:   Sun Jul 26 16:31:50 2015 -0700

    Merge branch 'tipc'
    
    Jon Maloy says:
    
    ====================
    tipc: clean up socket message reception
    
    Despite recent improvements the message reception code in socket.c is
    perceived as obscure and hard to follow, especially regarding the logics
    for message rejection. With the commits in this series we try to remedy
    this situation.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit cda3696d3d26eb798c94de0dab5bd66ddb5627cb
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Jul 22 10:11:20 2015 -0400

    tipc: clean up socket layer message reception
    
    When a message is received in a socket, one of the call chains
    tipc_sk_rcv()->tipc_sk_enqueue()->filter_rcv()(->tipc_sk_proto_rcv())
    or
    tipc_sk_backlog_rcv()->filter_rcv()(->tipc_sk_proto_rcv())
    are followed. At each of these levels we may encounter situations
    where the message may need to be rejected, or a new message
    produced for transfer back to the sender. Despite recent
    improvements, the current code for doing this is perceived
    as awkward and hard to follow.
    
    Leveraging the two previous commits in this series, we now
    introduce a more uniform handling of such situations. We
    let each of the functions in the chain itself produce/reverse
    the message to be returned to the sender, but also perform the
    actual forwarding. This simplifies the necessary logics within
    each function.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit bcd3ffd4f6d7c994c93be2ab8598fdfb2952a1f1
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Jul 22 10:11:19 2015 -0400

    tipc: introduce new tipc_sk_respond() function
    
    Currently, we use the code sequence
    
    if (msg_reverse())
       tipc_link_xmit_skb()
    
    at numerous locations in socket.c. The preparation of arguments
    for these calls, as well as the sequence itself, makes the code
    unecessarily complex.
    
    In this commit, we introduce a new function, tipc_sk_respond(),
    that performs this call combination. We also replace some, but not
    yet all, of these explicit call sequences with calls to the new
    function. Notably, we let the function tipc_sk_proto_rcv() use
    the new function to directly send out PROBE_REPLY messages,
    instead of deferring this to the calling tipc_sk_rcv() function,
    as we do now.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 29042e19f2c602fabe4705b5b719550b4627639c
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Jul 22 10:11:18 2015 -0400

    tipc: let function tipc_msg_reverse() expand header when needed
    
    The shortest TIPC message header, for cluster local CONNECTED messages,
    is 24 bytes long. With this format, the fields "dest_node" and
    "orig_node" are optimized away, since they in reality are redundant
    in this particular case.
    
    However, the absence of these fields leads to code inconsistencies
    that are difficult to handle in some cases, especially when we need
    to reverse or reject messages at the socket layer.
    
    In this commit, we concentrate the handling of the absent fields
    to one place, by letting the function tipc_msg_reverse() reallocate
    the buffer and expand the header to 32 bytes when necessary. This
    means that the socket code now can assume that the two previously
    absent fields are present in the header when a message needs to be
    rejected. This opens up for some further simplifications of the
    socket code.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 16040894b26af9f85d9395f072c53d76a44eba21
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Tue Jul 21 06:42:28 2015 -0400

    tipc: fix compatibility bug
    
    In commit d999297c3dbbe7fdd832f7fa4ec84301e170b3e6
    ("tipc: reduce locking scope during packet reception") we introduced
    a new function tipc_link_proto_rcv(). This function contains a bug,
    so that it sometimes by error sends out a non-zero link priority value
    in created protocol messages.
    
    The bug may lead to an extra link reset at initial link establising
    with older nodes. This will never happen more than once, whereafter
    the link will work as intended.
    
    We fix this bug in this commit.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7781e5d10a457b7e456c8193896c2141cdbf2ad4
Merge: 6acc23266054 d999297c3dbb
Author: David S. Miller <davem@davemloft.net>
Date:   Mon Jul 20 20:41:16 2015 -0700

    Merge branch 'tipc-separate-link-and-aggregation'
    
    Jon Maloy says:
    
    ====================
    tipc: separate link and link aggregation layer
    
    This is the first batch of a longer series that has two main objectives:
    
    o Finer lock granularity during message sending and reception,
      especially regarding usage of the node spinlock.
    
    o Better separation between the link layer implementation and the link
      aggregation layer, represented by node.c::struct tipc_node.
    
    Hopefully these changes also make this part of code somewhat easier
    to comprehend and maintain.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d999297c3dbbe7fdd832f7fa4ec84301e170b3e6
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Jul 16 16:54:31 2015 -0400

    tipc: reduce locking scope during packet reception
    
    We convert packet/message reception according to the same principle
    we have been using for message sending and timeout handling:
    
    We move the function tipc_rcv() to node.c, hence handling the initial
    packet reception at the link aggregation level. The function grabs
    the node lock, selects the receiving link, and accesses it via a new
    call tipc_link_rcv(). This function appends buffers to the input
    queue for delivery upwards, but it may also append outgoing packets
    to the xmit queue, just as we do during regular message sending. The
    latter will happen when buffers are forwarded from the link backlog,
    or when retransmission is requested.
    
    Upon return of this function, and after having released the node lock,
    tipc_rcv() delivers/tranmsits the contents of those queues, but it may
    also perform actions such as link activation or reset, as indicated by
    the return flags from the link.
    
    This reduces the number of cpu cycles spent inside the node spinlock,
    and reduces contention on that lock.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1a20cc254e60e79929ef7edb5cf784df86b46e42
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Jul 16 16:54:30 2015 -0400

    tipc: introduce node contact FSM
    
    The logics for determining when a node is permitted to establish
    and maintain contact with its peer node becomes non-trivial in the
    presence of multiple parallel links that may come and go independently.
    
    A known failure scenario is that one endpoint registers both its links
    to the peer lost, cleans up it binding table, and prepares for a table
    update once contact is re-establihed, while the other endpoint may
    see its links reset and re-established one by one, hence seeing
    no need to re-synchronize the binding table. To avoid this, a node
    must not allow re-establishing contact until it has confirmation that
    even the peer has lost both links.
    
    Currently, the mechanism for handling this consists of setting and
    resetting two state flags from different locations in the code. This
    solution is hard to understand and maintain. A closer analysis even
    reveals that it is not completely safe.
    
    In this commit we do instead introduce an FSM that keeps track of
    the conditions for when the node can establish and maintain links.
    It has six states and four events, and is strictly based on explicit
    knowledge about the own node's and the peer node's contact states.
    Only events leading to state change are shown as edges in the figure
    below.
    
                                 +--------------+
                                 | SELF_UP/     |
               +---------------->| PEER_COMING  |-----------------+
        SELF_  |                 +--------------+                 |PEER_
        ESTBL_ |                        |                         |ESTBL_
        CONTACT|      SELF_LOST_CONTACT |                         |CONTACT
               |                        v                         |
               |                 +--------------+                 |
               |      PEER_      | SELF_DOWN/   |     SELF_       |
               |      LOST_   +--| PEER_LEAVING |<--+ LOST_       v
    +-------------+   CONTACT |  +--------------+   | CONTACT  +-----------+
    | SELF_DOWN/  |<----------+                     +----------| SELF_UP/  |
    | PEER_DOWN   |<----------+                     +----------| PEER_UP   |
    +-------------+   SELF_   |  +--------------+   | PEER_    +-----------+
               |      LOST_   +--| SELF_LEAVING/|<--+ LOST_       A
               |      CONTACT    | PEER_DOWN    |     CONTACT     |
               |                 +--------------+                 |
               |                         A                        |
        PEER_  |       PEER_LOST_CONTACT |                        |SELF_
        ESTBL_ |                         |                        |ESTBL_
        CONTACT|                 +--------------+                 |CONTACT
               +---------------->| PEER_UP/     |-----------------+
                                 | SELF_COMING  |
                                 +--------------+
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8a1577c96f122308ac9b5f195f9f9a7dd74ac541
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Jul 16 16:54:29 2015 -0400

    tipc: move link supervision timer to node level
    
    In our effort to move control of the links to the link aggregation
    layer, we move the perodic link supervision timer to struct tipc_node.
    The new timer is shared between all links belonging to the node, thus
    saving resources, while still kicking the FSM on both its pertaining
    links at each expiration.
    
    The current link timer and corresponding functions are removed.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 333ef69ed2121f535e00ceb26e095d3745584c6e
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Jul 16 16:54:28 2015 -0400

    tipc: simplify link timer implementation
    
    We create a second, simpler, link timer function, tipc_link_timeout().
    The new function  makes use of the new FSM function introduced in the
    previous commit, and just like it, takes a buffer queue as parameter.
    It returns an event bit field and potentially a link protocol packet
    to the caller.
    
    The existing timer function, link_timeout(), is still needed for a
    while, so we redesign it to become a wrapper around the new function.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6ab30f9cbe134d19559f48dc748587d036529aaf
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Jul 16 16:54:27 2015 -0400

    tipc: improve link FSM implementation
    
    The link FSM implementation is currently unnecessarily complex.
    It sometimes checks for conditional state outside the FSM data
    before deciding next state, and often performs actions directly
    inside the FSM logics.
    
    In this commit, we create a second, simpler FSM implementation,
    that as far as possible acts only on states and events that it is
    strictly defined for, and postpone any actions until it is finished
    with its decisions. It also returns an event flag field and an a
    buffer queue which may potentially contain a protocol message to
    be sent by the caller.
    
    Unfortunately, we cannot yet make the FSM "clean", in the sense
    that its decisions are only based on FSM state and event, and that
    state changes happen only here. That will have to wait until the
    activate/reset logics has been cleaned up in a future commit.
    
    We also rename the link states as follows:
    
    WORKING_WORKING -> TIPC_LINK_WORKING
    WORKING_UNKNOWN -> TIPC_LINK_PROBING
    RESET_UNKNOWN   -> TIPC_LINK_RESETTING
    RESET_RESET     -> TIPC_LINK_ESTABLISHING
    
    The existing FSM function, link_state_event(), is still needed for
    a while, so we redesign it to make use of the new function.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 426cc2b86d1813959497d608dcb52c32df2d448a
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Jul 16 16:54:26 2015 -0400

    tipc: introduce new link protocol msg create function
    
    As a preparation for later changes, we introduce a new function
    tipc_link_build_proto_msg(). Instead of actually sending the created
    protocol message, it only creates it and adds it to the head of a
    skb queue provided by the caller.
    
    Since we still need the existing function tipc_link_protocol_xmit()
    for a while, we redesign it to make use of the new function.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d3504c3449fead545e5254bfb11da916f72c4734
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Jul 16 16:54:25 2015 -0400

    tipc: clean up definitions and usage of link flags
    
    The status flag LINK_STOPPED is not needed any more, since the
    mechanism for delayed deletion of links has been removed.
    Likewise, LINK_STARTED and LINK_START_EVT are unnecessary,
    because we can just as well start the link timer directly from
    inside tipc_link_create().
    
    We eliminate these flags in this commit.
    
    Instead of the above flags, we now introduce three new link modes,
    TIPC_LINK_OPEN, TIPC_LINK_BLOCKED and TIPC_LINK_TUNNEL. The values
    indicate whether, and in the case of TIPC_LINK_TUNNEL, which, messages
    the link is allowed to receive in this state. TIPC_LINK_BLOCKED also
    blocks timer-driven protocol messages to be sent out, and any change
    to the link FSM. Since the modes are mutually exclusive, we convert
    them to state values, and rename the 'flags' field in struct tipc_link
    to 'exec_mode'.
    
    Finally, we move the #defines for link FSM states and events from link.h
    into enums inside the file link.c, which is the real usage scope of
    these definitions.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit af9b028e270fda6fb812d70d17d902297df1ceb5
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Jul 16 16:54:24 2015 -0400

    tipc: make media xmit call outside node spinlock context
    
    Currently, message sending is performed through a deep call chain,
    where the node spinlock is grabbed and held during a significant
    part of the transmission time. This is clearly detrimental to
    overall throughput performance; it would be better if we could send
    the message after the spinlock has been released.
    
    In this commit, we do instead let the call revert on the stack after
    the buffer chain has been added to the transmission queue, whereafter
    clones of the buffers are transmitted to the device layer outside the
    spinlock scope.
    
    As a further step in our effort to separate the roles of the node
    and link entities we also move the function tipc_link_xmit() to
    node.c, and rename it to tipc_node_xmit().
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 22d85c79428b8ca9a01623aa3e3a1fe29a30a119
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Jul 16 16:54:23 2015 -0400

    tipc: change sk_buffer handling in tipc_link_xmit()
    
    When the function tipc_link_xmit() is given a buffer list for
    transmission, it currently consumes the list both when transmission
    is successful and when it fails, except for the special case when
    it encounters link congestion.
    
    This behavior is inconsistent, and needs to be corrected if we want
    to avoid problems in later commits in this series.
    
    In this commit, we change this to let the function consume the list
    only when transmission is successful, and leave the list with the
    sender in all other cases. We also modifiy the socket code so that
    it adapts to this change, i.e., purges the list when a non-congestion
    error code is returned.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 36e78a463b26c9b8017a2e11dcd6c4b8e34b4161
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Jul 16 16:54:22 2015 -0400

    tipc: use bearer index when looking up active links
    
    struct tipc_node currently holds two arrays of link pointers; one,
    indexed by bearer identity, which contains all links irrespective of
    current state, and one two-slot array for the currently active link
    or links. The latter array contains direct pointers into the elements
    of the former. This has the effect that we cannot know the bearer id of
    a link when accessing it via the "active_links[]" array without actually
    dereferencing the pointer, something we want to avoid in some cases.
    
    In this commit, we do instead store the bearer identity in the
    "active_links" array, and use this as an index to find the right element
    in the overall link entry array. This change should be seen as a
    preparation for the later commits in this series.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d39bbd445dc44259c77bbbc8aadcce7dcdba39cc
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Jul 16 16:54:21 2015 -0400

    tipc: move link input queue to tipc_node
    
    At present, the link input queue and the name distributor receive
    queues are fields aggregated in struct tipc_link. This is a hazard,
    because a link might be deleted while a receiving socket still keeps
    reference to one of the queues.
    
    This commit fixes this bug. However, rather than adding yet another
    reference counter to the critical data path, we move the two queues
    to safe ground inside struct tipc_node, which is already protected, and
    let the link code only handle references to the queues. This is also
    in line with planned later changes in this area.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d3a43b907ae688af6cb753c53cd7de05f3c1ba85
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Jul 16 16:54:20 2015 -0400

    tipc: move link creation from neighbor discoverer to node
    
    As a step towards turning links into node internal entities, we move the
    creation of links from the neighbor discovery logics to the node's link
    control logics.
    
    We also create an additional entry for the link's media address in the
    newly introduced struct tipc_link_entry, since this is where it is
    needed in the upcoming commits. The current copy in struct tipc_link
    is kept for now, but will be removed later.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9d13ec65ede775f896c3da1cfa35283afe2f796c
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Jul 16 16:54:19 2015 -0400

    tipc: introduce link entry structure to struct tipc_node
    
    struct 'tipc_node' currently contains two arrays for link attributes,
    one for the link pointers, and one for the usable link MTUs.
    
    We now group those into a new struct 'tipc_link_entry', and intoduce
    one single array consisting of such enties. Apart from being a cosmetic
    improvement, this is a starting point for the strict master-slave
    relation between node and link that we will introduce in the following
    commits.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f760b87f8f12eb262f14603e65042996fe03720e
Merge: 34bef46e786c cee9f6d0186a
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jul 13 11:18:25 2015 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Missing list head init in bluetooth hidp session creation, from Tedd
        Ho-Jeong An.
    
     2) Don't leak SKB in bridge netfilter error paths, from Florian
        Westphal.
    
     3) ipv6 netdevice private leak in netfilter bridging, fixed by Julien
        Grall.
    
     4) Fix regression in IP over hamradio bpq encapsulation, from Ralf
        Baechle.
    
     5) Fix race between rhashtable resize events and table walks, from Phil
        Sutter.
    
     6) Missing validation of IFLA_VF_INFO netlink attributes, fix from
        Daniel Borkmann.
    
     7) Missing security layer socket state initialization in tipc code,
        from Stephen Smalley.
    
     8) Fix shared IRQ handling in boomerang 3c59x interrupt handler, from
        Denys Vlasenko.
    
     9) Missing minor_idr destroy on module unload on macvtap driver, from
        Johannes Thumshirn.
    
    10) Various pktgen kernel thread races, from Oleg Nesterov.
    
    11) Fix races that can cause packets to be processed in the backlog even
        after a device attached to that SKB has been fully unregistered.
        From Julian Anastasov.
    
    12) bcmgenet driver doesn't account packet drops vs.  errors properly,
        fix from Petri Gynther.
    
    13) Array index validation and off by one fix in DSA layer from Florian
        Fainelli
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (66 commits)
      can: replace timestamp as unique skb attribute
      ARM: dts: dra7x-evm: Prevent glitch on DCAN1 pinmux
      can: c_can: Fix default pinmux glitch at init
      can: rcar_can: unify error messages
      can: rcar_can: print request_irq() error code
      can: rcar_can: fix typo in error message
      can: rcar_can: print signed IRQ #
      can: rcar_can: fix IRQ check
      net: dsa: Fix off-by-one in switch address parsing
      net: dsa: Test array index before use
      net: switchdev: don't abort unsupported operations
      net: bcmgenet: fix accounting of packet drops vs errors
      cdc_ncm: update specs URL
      Doc: z8530book: Fix typo in API-z8530-sync-txdma-open.html
      net: inet_diag: always export IPV6_V6ONLY sockopt for listening sockets
      bridge: mdb: allow the user to delete mdb entry if there's a querier
      net: call rcu_read_lock early in process_backlog
      net: do not process device backlog during unregistration
      bridge: fix potential crash in __netdev_pick_tx()
      net: axienet: Fix devm_ioremap_resource return value check
      ...

commit fdd75ea8df370f206a8163786e7470c1277a5064
Author: Stephen Smalley <sds@tycho.nsa.gov>
Date:   Tue Jul 7 09:43:45 2015 -0400

    net/tipc: initialize security state for new connection socket
    
    Calling connect() with an AF_TIPC socket would trigger a series
    of error messages from SELinux along the lines of:
    SELinux: Invalid class 0
    type=AVC msg=audit(1434126658.487:34500): avc:  denied  { <unprintable> }
      for pid=292 comm="kworker/u16:5" scontext=system_u:system_r:kernel_t:s0
      tcontext=system_u:object_r:unlabeled_t:s0 tclass=<unprintable>
      permissive=0
    
    This was due to a failure to initialize the security state of the new
    connection sock by the tipc code, leaving it with junk in the security
    class field and an unlabeled secid.  Add a call to security_sk_clone()
    to inherit the security state from the parent socket.
    
    Reported-by: Tim Shearer <tim.shearer@overturenetworks.com>
    Signed-off-by: Stephen Smalley <sds@tycho.nsa.gov>
    Acked-by: Paul Moore <paul@paul-moore.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7d967b673c2ff992205be051ffebc39e1a323400
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Sun Jun 28 09:44:44 2015 -0400

    tipc: purge backlog queue counters when broadcast link is reset
    
    In commit 1f66d161ab3d8b518903fa6c3f9c1f48d6919e74
    ("tipc: introduce starvation free send algorithm")
    we introduced a counter per priority level for buffers
    in the link backlog queue. We also introduced a new
    function tipc_link_purge_backlog(), to reset these
    counters to zero when the link is reset.
    
    Unfortunately, we missed to call this function when
    the broadcast link is reset, with the result that the
    values of these counters might be permanently skewed
    when new nodes are attached. This may in the worst case
    lead to permananent, but spurious, broadcast link
    congestion, where no broadcast packets can be sent at
    all.
    
    We fix this bug with this commit.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c8d17b451aa18b07b60e771addf17a5fdd4138c7
Merge: b85dfd30cb37 b07d496177cd
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Jun 12 20:54:16 2015 -1000

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Fix uninitialized struct station_info in cfg80211_wireless_stats(),
        from Johannes Berg.
    
     2) Revert commit attempt to fix ipv6 protocol resubmission, it adds
        regressions.
    
     3) Endless loops can be created in bridge port lists, fix from Nikolay
        Aleksandrov.
    
     4) Don't WARN_ON() if sk->sk_forward_alloc is non-zero in
        sk_clear_memalloc, it is a legal situation during swap deactivation.
        Fix from Mel Gorman.
    
     5) Fix order of disabling interrupts and unlocking NAPI in enic driver
        to avoid a race.  From Govindarajulu Varadarajan.
    
     6) High and low register writes are swapped when programming the start
        of periodic output in igb driver.  From Richard Cochran.
    
     7) Fix device rename handling in mpls stack, from Robert Shearman.
    
     8) Do not trigger compaction synchronously when optimistically trying
        to allocate an order 3 page in alloc_skb_with_frags() and
        skb_page_frag_refill().  From Shaohua Li.
    
     9) Authentication with COOKIE_ECHO is not handled properly in SCTP, fix
        from Marcelo Ricardo Leitner.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net:
      Doc: networking: Fix URL for wiki.wireshark.org in udplite.txt
      sctp: allow authenticating DATA chunks that are bundled with COOKIE_ECHO
      net: don't wait for order-3 page allocation
      mpls: handle device renames for per-device sysctls
      net: igb: fix the start time for periodic output signals
      enic: fix memory leak in rq_clean
      enic: check return value for stat dump
      enic: unlock napi busy poll before unmasking intr
      net, swap: Remove a warning and clarify why sk_mem_reclaim is required when deactivating swap
      bridge: fix multicast router rlist endless loop
      tipc: disconnect socket directly after probe failure
      Revert "ipv6: Fix protocol resubmission"
      cfg80211: wext: clear sinfo struct before calling driver

commit b3be5e3e726a6cc849f40c70c3ae525e4146e9df
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Tue Jun 9 17:27:12 2015 +0200

    tipc: disconnect socket directly after probe failure
    
    If the TIPC connection timer expires in a probing state, a
    self abort message is supposed to be generated and delivered
    to the local socket. This is currently broken, and the abort
    message is actually sent out to the peer node with invalid
    addressing information. This will cause the link to enter
    a constant retransmission state and eventually reset.
    We fix this by removing the self-abort message creation and
    tear down connection immediately instead.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1ea23a21176e449685a9d0523ab6da83e3779eb1
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu May 28 13:19:22 2015 +0800

    tipc: unconditionally put sock refcnt when sock timer to be deleted is pending
    
    As sock refcnt is taken when sock timer is started in
    sk_reset_timer(), the sock refcnt should be put when sock timer
    to be deleted is in pending state no matter what "probing_state"
    value of tipc sock is.
    
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f517700cce37ffcb36e7afae0294fd11c72ed134
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Mar 26 13:27:08 2015 +0800

    rculist: Fix another sparse warning
    
    This fixes the following sparse warnings:
    
    make C=1 CF=-D__CHECK_ENDIAN__ net/tipc/name_table.o
    net/tipc/name_table.c:977:17: error: incompatible types in comparison expression (different address spaces)
    net/tipc/name_table.c:977:17: error: incompatible types in comparison expression (different address spaces)
    
    To silence these spare complaints, an RCU annotation should be added to
    "next" pointer of hlist_node structure through hlist_next_rcu() macro
    when iterating over a hlist with hlist_for_each_entry_from_rcu().
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Paul E. McKenney <paulmck@linux.vnet.ibm.com>

commit f3903bcc0091df871ac64261f65ed2e4c3519d39
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Tue May 26 05:40:19 2015 -0400

    tipc: fix bug in link protocol message create function
    
    In commit dd3f9e70f59f43a5712eba9cf3ee4f1e6999540c
    ("tipc: add packet sequence number at instant of transmission") we
    made a change with the consequence that packets in the link backlog
    queue don't contain valid sequence numbers.
    
    However, when we create a link protocol message, we still use the
    sequence number of the first packet in the backlog, if there is any,
    as "next_sent" indicator in the message. This may entail unnecessary
    retransissions or stale packet transmission when there is very low
    traffic on the link.
    
    This commit fixes this issue by only using the current value of
    tipc_link::snd_nxt as indicator.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 74b80e841b4da2f83d8f548f32cfe421fde85aca
Author: Jiri Pirko <jiri@resnulli.us>
Date:   Fri May 15 13:27:32 2015 +0200

    flow_dissector: remove bogus return in tipc section
    
    Fixes: 06635a35d13d42b9 ("flow_dissect: use programable dissector in skb_flow_dissect and friends")
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Jiri Pirko <jiri@resnulli.us>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 07ee0722bf941960fb3888f9c9b5839473372fd1
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Fri May 15 11:30:47 2015 +0800

    rhashtable: Add cap on number of elements in hash table
    
    We currently have no limit on the number of elements in a hash table.
    This is a problem because some users (tipc) set a ceiling on the
    maximum table size and when that is reached the hash table may
    degenerate.  Others may encounter OOM when growing and if we allow
    insertions when that happens the hash table perofrmance may also
    suffer.
    
    This patch adds a new paramater insecure_max_entries which becomes
    the cap on the table.  If unset it defaults to max_size * 2.  If
    it is also zero it means that there is no cap on the number of
    elements in the table.  However, the table will grow whenever the
    utilisation hits 100% and if that growth fails, you will get ENOMEM
    on insertion.
    
    As allowing oversubscription is potentially dangerous, the name
    contains the word insecure.
    
    Note that the cap is not a hard limit.  This is done for performance
    reasons as enforcing a hard limit will result in use of atomic ops
    that are heavier than the ones we currently use.
    
    The reasoning is that we're only guarding against a gross over-
    subscription of the table, rather than a small breach of the limit.
    
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit fa787ae0624c46d0c894c19ae74f53d7bb4406f8
Author: Ying Xue <ying.xue@windriver.com>
Date:   Wed May 13 11:20:38 2015 +0800

    tipc: use sock_create_kern interface to create kernel socket
    
    After commit eeb1bd5c40ed ("net: Add a struct net parameter to
    sock_create_kern"), we should use sock_create_kern() to create kernel
    socket as the interface doesn't reference count struct net any more.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b55b10bebb86a436bebd5c754f80076ad51f4068
Merge: c16ead798ee3 dd3f9e70f59f
Author: David S. Miller <davem@davemloft.net>
Date:   Thu May 14 12:24:46 2015 -0400

    Merge branch 'tipc-next'
    
    Jon Maloy says:
    
    ====================
    tipc: some link layer improvements
    
    We continue eliminating redundant complexity at the link layer, and
    add a couple of improvements to the packet sending functionality.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit dd3f9e70f59f43a5712eba9cf3ee4f1e6999540c
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu May 14 10:46:18 2015 -0400

    tipc: add packet sequence number at instant of transmission
    
    Currently, the packet sequence number is updated and added to each
    packet at the moment a packet is added to the link backlog queue.
    This is wasteful, since it forces the code to traverse the send
    packet list packet by packet when adding them to the backlog queue.
    It would be better to just splice the whole packet list into the
    backlog queue when that is the right action to do.
    
    In this commit, we do this change. Also, since the sequence numbers
    cannot now be assigned to the packets at the moment they are added
    the backlog queue, we do instead calculate and add them at the moment
    of transmission, when the backlog queue has to be traversed anyway.
    We do this in the function tipc_link_push_packet().
    
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f21e897eccb5a236f4191ecc1b4391eda895d6ed
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu May 14 10:46:17 2015 -0400

    tipc: improve link congestion algorithm
    
    The link congestion algorithm used until now implies two problems.
    
    - It is too generous towards lower-level messages in situations of high
      load by giving "absolute" bandwidth guarantees to the different
      priority levels. LOW traffic is guaranteed 10%, MEDIUM is guaranted
      20%, HIGH is guaranteed 30%, and CRITICAL is guaranteed 40% of the
      available bandwidth. But, in the absence of higher level traffic, the
      ratio between two distinct levels becomes unreasonable. E.g. if there
      is only LOW and MEDIUM traffic on a system, the former is guaranteed
      1/3 of the bandwidth, and the latter 2/3. This again means that if
      there is e.g. one LOW user and 10 MEDIUM users, the  former will have
      33.3% of the bandwidth, and the others will have to compete for the
      remainder, i.e. each will end up with 6.7% of the capacity.
    
    - Packets of type MSG_BUNDLER are created at SYSTEM importance level,
      but only after the packets bundled into it have passed the congestion
      test for their own respective levels. Since bundled packets don't
      result in incrementing the level counter for their own importance,
      only occasionally for the SYSTEM level counter, they do in practice
      obtain SYSTEM level importance. Hence, the current implementation
      provides a gap in the congestion algorithm that in the worst case
      may lead to a link reset.
    
    We now refine the congestion algorithm as follows:
    
    - A message is accepted to the link backlog only if its own level
      counter, and all superior level counters, permit it.
    
    - The importance of a created bundle packet is set according to its
      contents. A bundle packet created from messges at levels LOW to
      CRITICAL is given importance level CRITICAL, while a bundle created
      from a SYSTEM level message is given importance SYSTEM. In the latter
      case only subsequent SYSTEM level messages are allowed to be bundled
      into it.
    
    This solves the first problem described above, by making the bandwidth
    guarantee relative to the total number of users at all levels; only
    the upper limit for each level remains absolute. In the example
    described above, the single LOW user would use 1/11th of the bandwidth,
    the same as each of the ten MEDIUM users, but he still has the same
    guarantee against starvation as the latter ones.
    
    The fix also solves the second problem. If the CRITICAL level is filled
    up by bundle packets of that level, no lower level packets will be
    accepted any more.
    
    Suggested-by: Gergely Kiss <gergely.kiss@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit cd4eee3c2e3e01590df5cada0d56b396dd726d05
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu May 14 10:46:16 2015 -0400

    tipc: simplify link supervision checkpointing
    
    We change the sequence number checkpointing that is performed
    by the timer in order to discover if the peer is active. Currently,
    we store a checkpoint of the next expected sequence number "rcv_nxt"
    at each timer expiration, and compare it to the current expected
    number at next timeout expiration. Instead, we now use the already
    existing field "silent_intv_cnt" for this task. We step the counter
    at each timeout expiration, and zero it at each valid received packet.
    If no valid packet has been received from the peer after "abort_limit"
    number of silent timer intervals, the link is declared faulty and reset.
    
    We also remove the multiple instances of timer activation from inside
    the FSM function "link_state_event()", and now do it at only one place;
    at the end of the timer function itself.
    
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a97b9d3fa9bce0d78dc83a14a9e1ebb3bf5cc414
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu May 14 10:46:15 2015 -0400

    tipc: rename fields in struct tipc_link
    
    We rename some fields in struct tipc_link, in order to give them more
    descriptive names:
    
    next_in_no -> rcv_nxt
    next_out_no-> snd_nxt
    fsm_msg_cnt-> silent_intv_cnt
    cont_intv  -> keepalive_intv
    last_retransmitted -> last_retransm
    
    There are no functional changes in this commit.
    
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e4bf4f76962b0869d1048ac6c52a46e7d90eb46f
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu May 14 10:46:14 2015 -0400

    tipc: simplify packet sequence number handling
    
    Although the sequence number in the TIPC protocol is 16 bits, we have
    until now stored it internally as an unsigned 32 bits integer.
    We got around this by always doing explicit modulo-65535 operations
    whenever we need to access a sequence number.
    
    We now make the incoming and outgoing sequence numbers to unsigned
    16-bit integers, and remove the modulo operations where applicable.
    
    We also move the arithmetic inline functions for 16 bit integers
    to core.h, and the function buf_seqno() to msg.h, so they can easily
    be accessed from anywhere in the code.
    
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a6bf70f792963b32e410e5c3d2f96903265b090a
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu May 14 10:46:13 2015 -0400

    tipc: simplify include dependencies
    
    When we try to add new inline functions in the code, we sometimes
    run into circular include dependencies.
    
    The main problem is that the file core.h, which really should be at
    the root of the dependency chain, instead is a leaf. I.e., core.h
    includes a number of header files that themselves should be allowed
    to include core.h. In reality this is unnecessary, because core.h does
    not need to know the full signature of any of the structs it refers to,
    only their type declaration.
    
    In this commit, we remove all dependencies from core.h towards any
    other tipc header file.
    
    As a consequence of this change, we can now move the function
    tipc_own_addr(net) from addr.c to addr.h, and make it inline.
    
    There are no functional changes in this commit.
    
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 75b44b018eb086fb461aa0351d2ecb1eba684302
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu May 14 10:46:12 2015 -0400

    tipc: simplify link timer handling
    
    Prior to this commit, the link timer has been running at a "continuity
    interval" of configured link tolerance/4. When a timer wakes up and
    discovers that there has been no sign of life from the peer during the
    previous interval, it divides its own timer interval by another factor
    four, and starts sending one probe per new interval. When the configured
    link tolerance time has passed without answer, i.e. after 16 unacked
    probes, the link is declared faulty and reset.
    
    This is unnecessary complex. It is sufficient to continue with the
    original continuity interval, and instead reset the link after four
    missed probe responses. This makes the timer handling in the link
    simpler, and opens up for some planned later changes in this area.
    This commit implements this change.
    
    Reviewed-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b1c29f6b10d5981c89d3ea9b9991ca97141ed6d0
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu May 14 10:46:11 2015 -0400

    tipc: simplify resetting and disabling of bearers
    
    Since commit 4b475e3f2f8e4e241de101c8240f1d74d0470494
    ("tipc: eliminate delayed link deletion at link failover") the extra
    boolean parameter "shutting_down" is not any longer needed for the
    functions bearer_disable() and tipc_link_delete_list().
    
    Furhermore, the function tipc_link_reset_links(), called from
    bearer_reset()  is now unnecessary. We can just as well delete
    all the links, as we do in bearer_disable(), and start over with
    creating new links.
    
    This commit introduces those changes.
    
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b063bc5ea77b1c1c0e7798f641f53504d0f64bf8
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Wed May 6 13:58:56 2015 +0200

    tipc: send explicit not supported error in nl compat
    
    The legacy netlink API treated EPERM (permission denied) as
    "operation not supported".
    
    Reported-by: Tomi Ollila <tomi.ollila@iki.fi>
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 670f4f8818ee54d0c1831e3165dadd5b8a3f713e
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Wed May 6 13:58:55 2015 +0200

    tipc: add broadcast link window set/get to nl api
    
    Add the ability to get or set the broadcast link window through the
    new netlink API. The functionality was unintentionally missing from
    the new netlink API. Adding this means that we also fix the breakage
    in the old API when coming through the compat layer.
    
    Fixes: 37e2d4843f9e (tipc: convert legacy nl link prop set to nl compat)
    Reported-by: Tomi Ollila <tomi.ollila@iki.fi>
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c3d6fb85b2ed6a57b57b322a470b3b4eefb34fb7
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Wed May 6 13:58:54 2015 +0200

    tipc: fix default link prop regression in nl compat
    
    Default link properties can be set for media or bearer. This
    functionality was missed when introducing the NL compatibility layer.
    
    This patch implements this functionality in the compat netlink
    layer. It works the same way as it did in the old API. We search for
    media and bearers matching the "link name". If we find a matching
    media or bearer the link tolerance, priority or window is used as
    default for new links on that media or bearer.
    
    Fixes: 37e2d4843f9e (tipc: convert legacy nl link prop set to nl compat)
    Reported-by: Tomi Ollila <tomi.ollila@iki.fi>
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c373dac522c2aee864ac7f5394c91cfc1afc3dd2
Merge: 29a1ff6596fc 90bdfcb76f7d
Author: David S. Miller <davem@davemloft.net>
Date:   Mon May 4 15:04:02 2015 -0400

    Merge branch 'tipc-topology-cleanup'
    
    Ying Xue says:
    
    ====================
    tipc: cleanup topology server
    
    Not only function names declared in subscr.c are very confused, but
    also topology server's locking policy is not designed very well, for
    instance, usually leading to panic in some special corner cases.
    
    In this series, we attempt to eliminate the confusion of function names
    and simplify topology server's locking policy to solve above mentioned
    issues. More importantly, the change will make relevant code easily
    understandable and maintainable.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 90bdfcb76f7d3b4a763ded3242277578ef22eda4
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon May 4 10:36:48 2015 +0800

    tipc: deal with return value of tipc_conn_new callback
    
    Once tipc_conn_new() returns NULL, the connection should be shut
    down immediately, otherwise, oops may happen due to the NULL pointer.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a13683f292b2ce697f71fa3788a9335ebcb32676
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon May 4 10:36:47 2015 +0800

    tipc: adjust locking policy of subscription
    
    Currently subscriber's lock protects not only subscriber's subscription
    list but also all subscriptions linked into the list. However, as all
    members of subscription are never changed after they are initialized,
    it's unnecessary for subscription to be protected under subscriber's
    lock. If the lock is used to only protect subscriber's subscription
    list, the adjustment not only makes the locking policy simpler, but
    also helps to avoid a deadlock which may happen once creating a
    subscription is failed.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 00bc00a9384c306cdd48611a53b955d936349bf6
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon May 4 10:36:46 2015 +0800

    tipc: involve reference counter for subscriber
    
    At present subscriber's lock is used to protect the subscription list
    of subscriber as well as subscriptions linked into the list. While one
    or all subscriptions are deleted through iterating the list, the
    subscriber's lock must be held. Meanwhile, as deletion of subscription
    may happen in subscription timer's handler, the lock must be grabbed
    in the function as well. When subscription's timer is terminated with
    del_timer_sync() during above iteration, subscriber's lock has to be
    temporarily released, otherwise, deadlock may occur. However, the
    temporary release may cause the double free of a subscription as the
    subscription is not disconnected from the subscription list.
    
    Now if a reference counter is introduced to subscriber, subscription's
    timer can be asynchronously stopped with del_timer(). As a result, the
    issue is not only able to be fixed, but also relevant code is pretty
    readable and understandable.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1b764828add9feaa18a8f916a79b954ac8a20a73
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon May 4 10:36:45 2015 +0800

    tipc: introduce tipc_subscrb_create routine
    
    Introducing a new function makes the purpose of tipc_subscrb_connect_cb
    callback routine more clear.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 57f1d1868fb5d71a20bfb1bc807274471c2ff459
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon May 4 10:36:44 2015 +0800

    tipc: rename functions defined in subscr.c
    
    When a topology server accepts a connection request from its client,
    it allocates a connection instance and a tipc_subscriber structure
    object. The former is used to communicate with client, and the latter
    is often treated as a subscriber which manages all subscription events
    requested from a same client. When a topology server receives a request
    of subscribing name services from a client through the connection, it
    creates a tipc_subscription structure instance which is seen as a
    subscription recording what name services are subscribed. In order to
    manage all subscriptions from a same client, topology server links
    them into the subscrp_list of the subscriber. So subscriber and
    subscription completely represents different meanings respectively,
    but function names associated with them make us so confused that we
    are unable to easily tell which function is against subscriber and
    which is to subscription. So we want to eliminate the confusion by
    renaming them.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6c3c1eb3c35e8856d6dcb01b412316a676f58bbe
Merge: e412d3a32bad a134f083e79f
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri May 1 20:51:04 2015 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Receive packet length needs to be adjust by 2 on RX to accomodate
        the two padding bytes in altera_tse driver.  From Vlastimil Setka.
    
     2) If rx frame is dropped due to out of memory in macb driver, we leave
        the receive ring descriptors in an undefined state.  From Punnaiah
        Choudary Kalluri
    
     3) Some netlink subsystems erroneously signal NLM_F_MULTI.  That is
        only for dumps.  Fix from Nicolas Dichtel.
    
     4) Fix mis-use of raw rt->rt_pmtu value in ipv4, one must always go via
        the ipv4_mtu() helper.  From Herbert Xu.
    
     5) Fix null deref in bridge netfilter, and miscalculated lengths in
        jump/goto nf_tables verdicts.  From Florian Westphal.
    
     6) Unhash ping sockets properly.
    
     7) Software implementation of BPF divide did 64/32 rather than 64/64
        bit divide.  The JITs got it right.  Fix from Alexei Starovoitov.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (30 commits)
      ipv4: Missing sk_nulls_node_init() in ping_unhash().
      net: fec: Fix RGMII-ID mode
      net/mlx4_en: Schedule napi when RX buffers allocation fails
      netxen_nic: use spin_[un]lock_bh around tx_clean_lock
      net/mlx4_core: Fix unaligned accesses
      mlx4_en: Use correct loop cursor in error path.
      cxgb4: Fix MC1 memory offset calculation
      bnx2x: Delay during kdump load
      net: Fix Kernel Panic in bonding driver debugfs file: rlb_hash_table
      net: dsa: Fix scope of eeprom-length property
      net: macb: Fix race condition in driver when Rx frame is dropped
      hv_netvsc: Fix a bug in netvsc_start_xmit()
      altera_tse: Correct rx packet length
      mlx4: Fix tx ring affinity_mask creation
      tipc: fix problem with parallel link synchronization mechanism
      tipc: remove wrong use of NLM_F_MULTI
      bridge/nl: remove wrong use of NLM_F_MULTI
      bridge/mdb: remove wrong use of NLM_F_MULTI
      net: sched: act_connmark: don't zap skb->nfct
      trivial: net: systemport: bcmsysport.h: fix 0x0x prefix
      ...

commit 0d699f28ee5d0641470a603ab5904e463cb1532a
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Tue Apr 28 16:59:04 2015 -0400

    tipc: fix problem with parallel link synchronization mechanism
    
    Currently, we try to accumulate arrived packets in the links's
    'deferred' queue during the parallel link syncronization phase.
    
    This entails two problems:
    
    - With an unlucky combination of arriving packets the algorithm
      may go into a lockstep with the out-of-sequence handling function,
      where the synch mechanism is adding a packet to the deferred queue,
      while the out-of-sequence handling is retrieving it again, thus
      ending up in a loop inside the node_lock scope.
    
    - Even if this is avoided, the link will very often send out
      unnecessary protocol messages, in the worst case leading to
      redundant retransmissions.
    
    We fix this by just dropping arriving packets on the upcoming link
    during the synchronization phase, thus relying on the retransmission
    protocol to resolve the situation once the two links have arrived to
    a synchronized state.
    
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f2f67390a4b961dae83733732e96e1a394a53c4e
Author: Nicolas Dichtel <nicolas.dichtel@6wind.com>
Date:   Tue Apr 28 18:33:50 2015 +0200

    tipc: remove wrong use of NLM_F_MULTI
    
    NLM_F_MULTI must be used only when a NLMSG_DONE message is sent. In fact,
    it is sent only at the end of a dump.
    
    Libraries like libnl will wait forever for NLMSG_DONE.
    
    Fixes: 35b9dd7607f0 ("tipc: add bearer get/dump to new netlink api")
    Fixes: 7be57fc69184 ("tipc: add link get/dump to new netlink api")
    Fixes: 46f15c6794fb ("tipc: add media get/dump to new netlink api")
    CC: Richard Alpe <richard.alpe@ericsson.com>
    CC: Jon Maloy <jon.maloy@ericsson.com>
    CC: Ying Xue <ying.xue@windriver.com>
    CC: tipc-discussion@lists.sourceforge.net
    Signed-off-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 37a06a87f20d93c2cec3db9aaf0360a322b703dd
Merge: 4fce14820c1b 73a317377303
Author: David S. Miller <davem@davemloft.net>
Date:   Thu Apr 23 11:50:34 2015 -0400

    Merge branch 'tipc-fixes'
    
    Jon Maloy says:
    
    ====================
    tipc: three bug fixes
    
    A set of unrelated corrections; one for the tipc netns implementation,
    one regarding problems with random link resets, and one removing a
    an erroneous refcount decrement when reading link statistsics via
    netlink.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 73a317377303b5ec14d4703d73ba87efffbb779d
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Thu Apr 23 09:37:40 2015 -0400

    tipc: fix node refcount issue
    
    When link statistics is dumped over netlink, we iterate over
    the list of peer nodes and append each links statistics to
    the netlink msg. In the case where the dump is resumed after
    filling up a nlmsg, the node refcnt is decremented without
    having been incremented previously which may cause the node
    reference to be freed. When this happens, the following
    info/stacktrace will be generated, followed by a crash or
    undefined behavior.
    We fix this by removing the erroneous call to tipc_node_put
    inside the loop that iterates over nodes.
    
    [  384.312303] INFO: trying to register non-static key.
    [  384.313110] the code is fine but needs lockdep annotation.
    [  384.313290] turning off the locking correctness validator.
    [  384.313290] CPU: 1 PID: 0 Comm: swapper/1 Not tainted 4.0.0+ #13
    [  384.313290] Hardware name: Bochs Bochs, BIOS Bochs 01/01/2011
    [  384.313290]  ffff88003c6d0290 ffff88003cc03ca8 ffffffff8170adf1 0000000000000007
    [  384.313290]  ffffffff82728730 ffff88003cc03d38 ffffffff810a6a6d 00000000001d7200
    [  384.313290]  ffff88003c6d0ab0 ffff88003cc03ce8 0000000000000285 0000000000000001
    [  384.313290] Call Trace:
    [  384.313290]  <IRQ>  [<ffffffff8170adf1>] dump_stack+0x4c/0x65
    [  384.313290]  [<ffffffff810a6a6d>] __lock_acquire+0xf3d/0xf50
    [  384.313290]  [<ffffffff810a7375>] lock_acquire+0xd5/0x290
    [  384.313290]  [<ffffffffa0043e8c>] ? link_timeout+0x1c/0x170 [tipc]
    [  384.313290]  [<ffffffffa0043e70>] ? link_state_event+0x4e0/0x4e0 [tipc]
    [  384.313290]  [<ffffffff81712890>] _raw_spin_lock_bh+0x40/0x80
    [  384.313290]  [<ffffffffa0043e8c>] ? link_timeout+0x1c/0x170 [tipc]
    [  384.313290]  [<ffffffffa0043e8c>] link_timeout+0x1c/0x170 [tipc]
    [  384.313290]  [<ffffffff810c4698>] call_timer_fn+0xb8/0x490
    [  384.313290]  [<ffffffff810c45e0>] ? process_timeout+0x10/0x10
    [  384.313290]  [<ffffffff810c5a2c>] run_timer_softirq+0x21c/0x420
    [  384.313290]  [<ffffffffa0043e70>] ? link_state_event+0x4e0/0x4e0 [tipc]
    [  384.313290]  [<ffffffff8105a954>] __do_softirq+0xf4/0x630
    [  384.313290]  [<ffffffff8105afdd>] irq_exit+0x5d/0x60
    [  384.313290]  [<ffffffff8103ade1>] smp_apic_timer_interrupt+0x41/0x50
    [  384.313290]  [<ffffffff817144a0>] apic_timer_interrupt+0x70/0x80
    [  384.313290]  <EOI>  [<ffffffff8100db10>] ? default_idle+0x20/0x210
    [  384.313290]  [<ffffffff8100db0e>] ? default_idle+0x1e/0x210
    [  384.313290]  [<ffffffff8100e61a>] arch_cpu_idle+0xa/0x10
    [  384.313290]  [<ffffffff81099803>] cpu_startup_entry+0x2c3/0x530
    [  384.313290]  [<ffffffff810d2893>] ? clockevents_register_device+0x113/0x200
    [  384.313290]  [<ffffffff81038b0f>] start_secondary+0x13f/0x170
    
    Fixes: 8a0f6ebe8494 ("tipc: involve reference counter for node structure")
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9871b27f6705fc6e0ba633b136369a289b2bfb99
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Thu Apr 23 09:37:39 2015 -0400

    tipc: fix random link reset problem
    
    In the function tipc_sk_rcv(), the stack variable 'err'
    is only initialized to TIPC_ERR_NO_PORT for the first
    iteration over the link input queue. If a chain of messages
    are received from a link, failure to lookup the socket for
    any but the first message will cause the message to bounce back
    out on a random link.
    We fix this by properly initializing err.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit def81f69bfbd70a3278a7592a4ab8717300cbac1
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Apr 23 09:37:38 2015 -0400

    tipc: fix topology server broken issue
    
    When a new topology server is launched in a new namespace, its
    listening socket is inserted into the "init ns" namespace's socket
    hash table rather than the one owned by the new namespace. Although
    the socket's namespace is forcedly changed to the new namespace later,
    the socket is still stored in the socket hash table of "init ns"
    namespace. When a client created in the new namespace connects
    its own topology server, the connection is failed as its server's
    socket could not be found from its own namespace's socket table.
    
    If __sock_create() instead of original sock_create_kern() is used
    to create the server's socket through specifying an expected namesapce,
    the socket will be inserted into the specified namespace's socket
    table, thereby avoiding to the topology server broken issue.
    
    Fixes: 76100a8a64bc ("tipc: fix netns refcnt leak")
    
    Reported-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c448b5e7853b5921957c4cbf5ad54a20eff79882
Merge: c5531ca2bf3d ed193ece2649
Author: David S. Miller <davem@davemloft.net>
Date:   Thu Apr 2 16:27:13 2015 -0400

    Merge branch 'tipc-next'
    
    Jon Maloy says:
    
    ====================
    tipc: remove some unnecessary complexity
    
    The TIPC code is unnecessarily complex in some places, often because
    the conditions or assumptions that were the cause for the complexity
    are not valid anymore.
    
    In these three commits, we eliminate some cases of such redundant
    complexity.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ed193ece2649c194a87a9d8470195760d367c075
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Apr 2 09:33:02 2015 -0400

    tipc: simplify link mtu negotiation
    
    When a link is being established, the two endpoints advertise their
    respective interface MTU in the transmitted RESET and ACTIVATE messages.
    If there is any difference, the lower of the two MTUs will be selected
    for use by both endpoints.
    
    However, as a remnant of earlier attempts to introduce TIPC level
    routing. there also exists an MTU discovery mechanism. If an intermediate
    node has a lower MTU than the two endpoints, they will discover this
    through a bisectional approach, and finally adopt this MTU for common use.
    
    Since there is no TIPC level routing, and probably never will be,
    this mechanism doesn't make any sense, and only serves to make the
    link level protocol unecessarily complex.
    
    In this commit, we eliminate the MTU discovery algorithm,and fall back
    to the simple MTU advertising approach. This change is fully backwards
    compatible.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit dff29b1a88524fe6afe296d6c477c491d1e02af0
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Apr 2 09:33:01 2015 -0400

    tipc: eliminate delayed link deletion at link failover
    
    When a bearer is disabled manually, all its links have to be reset
    and deleted. However, if there is a remaining, parallel link ready
    to take over a deleted link's traffic, we currently delay the delete
    of the removed link until the failover procedure is finished. This
    is because the remaining link needs to access state from the reset
    link, such as the last received packet number, and any partially
    reassembled buffer, in order to perform a successful failover.
    
    In this commit, we do instead move the state data over to the new
    link, so that it can fulfill the procedure autonomously, without
    accessing any data on the old link. This means that we can now
    proceed and delete all pertaining links immediately when a bearer
    is disabled. This saves us from some unnecessary complexity in such
    situations.
    
    We also choose to change the confusing definitions CHANGEOVER_PROTOCOL,
    ORIGINAL_MSG and DUPLICATE_MSG to the more descriptive TUNNEL_PROTOCOL,
    FAILOVER_MSG and SYNCH_MSG respectively.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2da7142516527a5213588f47ed302e79a5d9527a
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Apr 2 09:33:00 2015 -0400

    tipc: drop tunneled packet duplicates at reception
    
    In commit 8b4ed8634f8b3f9aacfc42b4a872d30c36b9e255
    ("tipc: eliminate race condition at dual link establishment")
    we introduced a parallel link synchronization mechanism that
    guarentees sequential delivery even for users switching from
    an old to a newly established link. The new mechanism makes it
    unnecessary to deliver the tunneled duplicate packets back to
    the old link, as we are currently doing. It is now sufficient
    to use the last tunneled packet's inner sequence number as
    synchronization point between the two parallel links, whereafter
    it can be dropped.
    
    In this commit, we drop the duplicate packets arriving on the new
    link, after updating the synchronization point at each new arrival.
    
    Although it would now have been sufficient for the other endpoint
    to only tunnel the last packet in its send queue, and not the
    entire queue, we must still do this to maintain compatibility
    with older nodes.
    
    This commit makes it possible to get rid if some complex
    interaction between the two parallel links.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8172ba51e257fdd353010cd7caaa37c8bc9eb44a
Merge: d4039314d0b1 f5f321c43150
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 2 11:09:41 2015 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Fix use-after-free with mac80211 RX A-MPDU reorder timer, from
        Johannes Berg.
    
     2) iwlwifi leaks memory every module load/unload cycles, fix from Larry
        Finger.
    
     3) Need to use for_each_netdev_safe() in rtnl_group_changelink()
        otherwise we can crash, from WANG Cong.
    
     4) mlx4 driver does register_netdev() too early in the probe sequence,
        from Ido Shamay.
    
     5) Don't allow router discovery hop limit to decrease the interface's
        hop limit, from D.S. Ljungmark.
    
     6) tx_packets and tx_bytes improperly accounted for certain classes of
        USB network devices, fix from Ben Hutchings.
    
     7) ip{6}mr_rules_init() mistakenly use plain kfree to release the ipmr
        tables in the error path, they must instead use ip{6}mr_free_table().
        Fix from WANG Cong.
    
     8) cxgb4 doesn't properly quiesce all RX activity before unregistering
        the netdevice.  Fix from Hariprasad Shenai.
    
     9) Fix hash corruptions in ipvlan driver, from Jiri Benc.
    
    10) nla_memcpy(), like a real memcpy, should fully initialize the
        destination buffer, even if the source attribute is smaller.  Fix
        from Jiri Benc.
    
    11) Fix wrong error code returned from iucv_sock_sendmsg().  We should
        use whatever sock_alloc_send_skb() put into 'err'.  From Eugene
        Crosser.
    
    12) Fix slab object leak on module unload in TIPC, from Ying Xue.
    
    13) Need a READ_ONCE() when reading the cached RX socket route in
        tcp_v{4,6}_early_demux().  From Michal Kubecek.
    
    14) Still too many problems with TPC support in the ath9k driver, so
        disable it for now.  From Felix Fietkau.
    
    15) When in AP mode the rtlwifi driver can leak DMA mappings, fix from
        Larry Finger.
    
    16) Missing kzalloc() failure check in gs_usb CAN driver, from Colin Ian
        King.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (52 commits)
      cxgb4: Fix to dump devlog, even if FW is crashed
      cxgb4: Firmware macro changes for fw verison 1.13.32.0
      bnx2x: Fix kdump when iommu=on
      bnx2x: Fix kdump on 4-port device
      mac80211: fix RX A-MPDU session reorder timer deletion
      MAINTAINERS: Update Intel Wired Ethernet Driver info
      tipc: fix a slab object leak
      net/usb/r8152: add device id for Lenovo TP USB 3.0 Ethernet
      af_iucv: fix AF_IUCV sendmsg() errno
      openvswitch: Return vport module ref before destruction
      netlink: pad nla_memcpy dest buffer with zeroes
      bonding: Bonding Overriding Configuration logic restored.
      ipvlan: fix check for IP addresses in control path
      ipvlan: do not use rcu operations for address list
      ipvlan: protect against concurrent link removal
      ipvlan: fix addr hash list corruption
      net: fec: setup right value for mdio hold time
      net: tcp6: fix double call of tcp_v6_fill_cb()
      cxgb4vf: Fix sparse warnings
      netns: don't clear nsid too early on removal
      ...

commit 7e436905780659d6dc12d0581944934bf91a9919
Author: Ying Xue <ying.xue@windriver.com>
Date:   Wed Apr 1 09:42:50 2015 +0800

    tipc: fix a slab object leak
    
    When remove TIPC module, there is a warning to remind us that a slab
    object is leaked like:
    
    root@localhost:~# rmmod tipc
    [   19.056226] =============================================================================
    [   19.057549] BUG TIPC (Not tainted): Objects remaining in TIPC on kmem_cache_close()
    [   19.058736] -----------------------------------------------------------------------------
    [   19.058736]
    [   19.060287] INFO: Slab 0xffffea0000519a00 objects=23 used=1 fp=0xffff880014668b00 flags=0x100000000004080
    [   19.061915] INFO: Object 0xffff880014668000 @offset=0
    [   19.062717] kmem_cache_destroy TIPC: Slab cache still has objects
    
    This is because the listening socket of TIPC topology server is not
    closed before TIPC proto handler is unregistered with proto_unregister().
    However, as the socket is closed in tipc_exit_net() which is called by
    unregister_pernet_subsys() during unregistering TIPC namespace operation,
    the warning can be eliminated if calling unregister_pernet_subsys() is
    moved before calling proto_unregister().
    
    Fixes: e05b31f4bf89 ("tipc: make tipc socket support net namespace")
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d482994fca82380912b3a80201b74d5118ff0487
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Mar 27 10:19:19 2015 -0400

    tipc: fix two bugs in secondary destination lookup
    
    A message sent to a node after a successful name table lookup may still
    find that the destination socket has disappeared, because distribution
    of name table updates is non-atomic. If so, the message will be rejected
    back to the sender with error code TIPC_ERR_NO_PORT. If the source
    socket of the message has disappeared in the meantime, the message
    should be dropped.
    
    However, in the currrent code, the message will instead be subject to an
    unwanted tertiary lookup, because the function tipc_msg_lookup_dest()
    doesn't check if there is an error code present in the message before
    performing the lookup. In the worst case, the message may now find the
    old destination again, and be redirected once more, instead of being
    dropped directly as it should be.
    
    A second bug in this function is that the "prev_node" field in the message
    is not updated after successful lookup, something that may have
    unpredictable consequences.
    
    The problems arising from those bugs occur very infrequently.
    
    The third change in this function; the test on msg_reroute_msg_cnt() is
    purely cosmetic, reflecting that the returned value never can be negative.
    
    This commit corrects the two bugs described above.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ae7633c841b3d17ab54e372ad9cc0f37a9a7c72d
Merge: faadb05f4b7f 8a0f6ebe8494
Author: David S. Miller <davem@davemloft.net>
Date:   Sun Mar 29 12:40:37 2015 -0700

    Merge branch 'tipc-next'
    
    Ying Xue says:
    
    ====================
    tipc: fix two corner issues
    
    The patch set aims at resolving the following two critical issues:
    
    Patch #1: Resolve a deadlock which happens while all links are reset
    Patch #2: Correct a mistake usage of RCU lock which is used to protect
              node list
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8a0f6ebe8494c5c6ccfe12264385b64c280e3241
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Mar 26 18:10:24 2015 +0800

    tipc: involve reference counter for node structure
    
    TIPC node hash node table is protected with rcu lock on read side.
    tipc_node_find() is used to look for a node object with node address
    through iterating the hash node table. As the entire process of what
    tipc_node_find() traverses the table is guarded with rcu read lock,
    it's safe for us. However, when callers use the node object returned
    by tipc_node_find(), there is no rcu read lock applied. Therefore,
    this is absolutely unsafe for callers of tipc_node_find().
    
    Now we introduce a reference counter for node structure. Before
    tipc_node_find() returns node object to its caller, it first increases
    the reference counter. Accordingly, after its caller used it up,
    it decreases the counter again. This can prevent a node being used by
    one thread from being freed by another thread.
    
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericson.com>
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b952b2befb6f6b009e91f087285b9a0a6beb1cc8
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Mar 26 18:10:23 2015 +0800

    tipc: fix potential deadlock when all links are reset
    
    [   60.988363] ======================================================
    [   60.988754] [ INFO: possible circular locking dependency detected ]
    [   60.989152] 3.19.0+ #194 Not tainted
    [   60.989377] -------------------------------------------------------
    [   60.989781] swapper/3/0 is trying to acquire lock:
    [   60.990079]  (&(&n_ptr->lock)->rlock){+.-...}, at: [<ffffffffa0006dca>] tipc_link_retransmit+0x1aa/0x240 [tipc]
    [   60.990743]
    [   60.990743] but task is already holding lock:
    [   60.991106]  (&(&bclink->lock)->rlock){+.-...}, at: [<ffffffffa00004be>] tipc_bclink_lock+0x8e/0xa0 [tipc]
    [   60.991738]
    [   60.991738] which lock already depends on the new lock.
    [   60.991738]
    [   60.992174]
    [   60.992174] the existing dependency chain (in reverse order) is:
    [   60.992174]
    -> #1 (&(&bclink->lock)->rlock){+.-...}:
    [   60.992174]        [<ffffffff810a9c0c>] lock_acquire+0x9c/0x140
    [   60.992174]        [<ffffffff8179c41f>] _raw_spin_lock_bh+0x3f/0x50
    [   60.992174]        [<ffffffffa00004be>] tipc_bclink_lock+0x8e/0xa0 [tipc]
    [   60.992174]        [<ffffffffa0000f57>] tipc_bclink_add_node+0x97/0xf0 [tipc]
    [   60.992174]        [<ffffffffa0011815>] tipc_node_link_up+0xf5/0x110 [tipc]
    [   60.992174]        [<ffffffffa0007783>] link_state_event+0x2b3/0x4f0 [tipc]
    [   60.992174]        [<ffffffffa00193c0>] tipc_link_proto_rcv+0x24c/0x418 [tipc]
    [   60.992174]        [<ffffffffa0008857>] tipc_rcv+0x827/0xac0 [tipc]
    [   60.992174]        [<ffffffffa0002ca3>] tipc_l2_rcv_msg+0x73/0xd0 [tipc]
    [   60.992174]        [<ffffffff81646e66>] __netif_receive_skb_core+0x746/0x980
    [   60.992174]        [<ffffffff816470c1>] __netif_receive_skb+0x21/0x70
    [   60.992174]        [<ffffffff81647295>] netif_receive_skb_internal+0x35/0x130
    [   60.992174]        [<ffffffff81648218>] napi_gro_receive+0x158/0x1d0
    [   60.992174]        [<ffffffff81559e05>] e1000_clean_rx_irq+0x155/0x490
    [   60.992174]        [<ffffffff8155c1b7>] e1000_clean+0x267/0x990
    [   60.992174]        [<ffffffff81647b60>] net_rx_action+0x150/0x360
    [   60.992174]        [<ffffffff8105ec43>] __do_softirq+0x123/0x360
    [   60.992174]        [<ffffffff8105f12e>] irq_exit+0x8e/0xb0
    [   60.992174]        [<ffffffff8179f9f5>] do_IRQ+0x65/0x110
    [   60.992174]        [<ffffffff8179da6f>] ret_from_intr+0x0/0x13
    [   60.992174]        [<ffffffff8100de9f>] arch_cpu_idle+0xf/0x20
    [   60.992174]        [<ffffffff8109dfa6>] cpu_startup_entry+0x2f6/0x3f0
    [   60.992174]        [<ffffffff81033cda>] start_secondary+0x13a/0x150
    [   60.992174]
    -> #0 (&(&n_ptr->lock)->rlock){+.-...}:
    [   60.992174]        [<ffffffff810a8f7d>] __lock_acquire+0x163d/0x1ca0
    [   60.992174]        [<ffffffff810a9c0c>] lock_acquire+0x9c/0x140
    [   60.992174]        [<ffffffff8179c41f>] _raw_spin_lock_bh+0x3f/0x50
    [   60.992174]        [<ffffffffa0006dca>] tipc_link_retransmit+0x1aa/0x240 [tipc]
    [   60.992174]        [<ffffffffa0001e11>] tipc_bclink_rcv+0x611/0x640 [tipc]
    [   60.992174]        [<ffffffffa0008646>] tipc_rcv+0x616/0xac0 [tipc]
    [   60.992174]        [<ffffffffa0002ca3>] tipc_l2_rcv_msg+0x73/0xd0 [tipc]
    [   60.992174]        [<ffffffff81646e66>] __netif_receive_skb_core+0x746/0x980
    [   60.992174]        [<ffffffff816470c1>] __netif_receive_skb+0x21/0x70
    [   60.992174]        [<ffffffff81647295>] netif_receive_skb_internal+0x35/0x130
    [   60.992174]        [<ffffffff81648218>] napi_gro_receive+0x158/0x1d0
    [   60.992174]        [<ffffffff81559e05>] e1000_clean_rx_irq+0x155/0x490
    [   60.992174]        [<ffffffff8155c1b7>] e1000_clean+0x267/0x990
    [   60.992174]        [<ffffffff81647b60>] net_rx_action+0x150/0x360
    [   60.992174]        [<ffffffff8105ec43>] __do_softirq+0x123/0x360
    [   60.992174]        [<ffffffff8105f12e>] irq_exit+0x8e/0xb0
    [   60.992174]        [<ffffffff8179f9f5>] do_IRQ+0x65/0x110
    [   60.992174]        [<ffffffff8179da6f>] ret_from_intr+0x0/0x13
    [   60.992174]        [<ffffffff8100de9f>] arch_cpu_idle+0xf/0x20
    [   60.992174]        [<ffffffff8109dfa6>] cpu_startup_entry+0x2f6/0x3f0
    [   60.992174]        [<ffffffff81033cda>] start_secondary+0x13a/0x150
    [   60.992174]
    [   60.992174] other info that might help us debug this:
    [   60.992174]
    [   60.992174]  Possible unsafe locking scenario:
    [   60.992174]
    [   60.992174]        CPU0                    CPU1
    [   60.992174]        ----                    ----
    [   60.992174]   lock(&(&bclink->lock)->rlock);
    [   60.992174]                                lock(&(&n_ptr->lock)->rlock);
    [   60.992174]                                lock(&(&bclink->lock)->rlock);
    [   60.992174]   lock(&(&n_ptr->lock)->rlock);
    [   60.992174]
    [   60.992174]  *** DEADLOCK ***
    [   60.992174]
    [   60.992174] 3 locks held by swapper/3/0:
    [   60.992174]  #0:  (rcu_read_lock){......}, at: [<ffffffff81646791>] __netif_receive_skb_core+0x71/0x980
    [   60.992174]  #1:  (rcu_read_lock){......}, at: [<ffffffffa0002c35>] tipc_l2_rcv_msg+0x5/0xd0 [tipc]
    [   60.992174]  #2:  (&(&bclink->lock)->rlock){+.-...}, at: [<ffffffffa00004be>] tipc_bclink_lock+0x8e/0xa0 [tipc]
    [   60.992174]
    
    The correct the sequence of grabbing n_ptr->lock and bclink->lock
    should be that the former is first held and the latter is then taken,
    which exactly happened on CPU1. But especially when the retransmission
    of broadcast link is failed, bclink->lock is first held in
    tipc_bclink_rcv(), and n_ptr->lock is taken in link_retransmit_failure()
    called by tipc_link_retransmit() subsequently, which is demonstrated on
    CPU0. As a result, deadlock occurs.
    
    If the order of holding the two locks happening on CPU0 is reversed, the
    deadlock risk will be relieved. Therefore, the node lock taken in
    link_retransmit_failure() originally is moved to tipc_bclink_rcv()
    so that it's obtained before bclink lock. But the precondition of
    the adjustment of node lock is that responding to bclink reset event
    must be moved from tipc_bclink_unlock() to tipc_node_unlock().
    
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8fa38a38ac37a0ca5366cd62ba4339c2bab49db9
Merge: b06b107a4c19 8b4ed8634f8b
Author: David S. Miller <davem@davemloft.net>
Date:   Wed Mar 25 14:05:56 2015 -0400

    Merge branch 'tipc-next'
    
    Jon Maloy says:
    
    ====================
    tipc: some improvements and fixes
    
    We introduce a better algorithm for selecting when and which
    users should be subject to link congestion control, plus clean
    up some code for that mechanism.
    Commit #3 fixes another rare race condition during packet reception.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8b4ed8634f8b3f9aacfc42b4a872d30c36b9e255
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Mar 25 12:07:26 2015 -0400

    tipc: eliminate race condition at dual link establishment
    
    Despite recent improvements, the establishment of dual parallel
    links still has a small glitch where messages can bypass each
    other. When the second link in a dual-link configuration is
    established, part of the first link's traffic will be steered over
    to the new link. Although we do have a mechanism to ensure that
    packets sent before and after the establishment of the new link
    arrive in sequence to the destination node, this is not enough.
    The arriving messages will still be delivered upwards in different
    threads, something entailing a risk of message disordering during
    the transition phase.
    
    To fix this, we introduce a synchronization mechanism between the
    two parallel links, so that traffic arriving on the new link cannot
    be added to its input queue until we are guaranteed that all
    pre-establishment messages have been delivered on the old, parallel
    link.
    
    This problem seems to always have been around, but its occurrence is
    so rare that it has not been noticed until recent intensive testing.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3127a0200d4a46cf279bb388cc0f71827cd60699
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Mar 25 12:07:25 2015 -0400

    tipc: clean up handling of link congestion
    
    After the recent changes in message importance handling it becomes
    possible to simplify handling of messages and sockets when we
    encounter link congestion.
    
    We merge the function tipc_link_cong() into link_schedule_user(),
    and simplify the code of the latter. The code should now be
    easier to follow, especially regarding return codes and handling
    of the message that caused the situation.
    
    In case the scheduling function is unable to pre-allocate a wakeup
    message buffer, it now returns -ENOBUFS, which is a more correct
    code than the previously used -EHOSTUNREACH.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1f66d161ab3d8b518903fa6c3f9c1f48d6919e74
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Mar 25 12:07:24 2015 -0400

    tipc: introduce starvation free send algorithm
    
    Currently, we only use a single counter; the length of the backlog
    queue, to determine whether a message should be accepted to the queue
    or not. Each time a message is being sent, the queue length is compared
    to a threshold value for the message's importance priority. If the queue
    length is beyond this threshold, the message is rejected. This algorithm
    implies a risk of starvation of low importance senders during very high
    load, because it may take a long time before the backlog queue has
    decreased enough to accept a lower level message.
    
    We now eliminate this risk by introducing a counter for each importance
    priority. When a message is sent, we check only the queue level for that
    particular message's priority. If that is ok, the message can be added
    to the backlog, irrespective of the queue level for other priorities.
    This way, each level is guaranteed a certain portion of the total
    bandwidth, and any risk of starvation is eliminated.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit bc14b8d6a98eb0747126cd517b468148b9e1c7ac
Author: Ying Xue <ying.xue@windriver.com>
Date:   Wed Mar 25 18:09:40 2015 +0800

    tipc: fix a link reset issue due to retransmission failures
    
    When a node joins a cluster while we are transmitting a fragment
    stream over the broadcast link, it's missing the preceding fragments
    needed to build a meaningful message. As a result, the node has to
    drop it. However, as the fragment message is not acknowledged to
    its sender before it's dropped, it accidentally causes link reset
    of retransmission failure on the node.
    
    Reported-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Tested-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ed3e852aa5039fda5a9f53c716c7466913403288
Author: Ying Xue <ying.xue@windriver.com>
Date:   Tue Mar 24 16:59:21 2015 +0800

    tipc: fix compile error when IPV6=m and TIPC=y
    
    When IPV6=m and TIPC=y, below error will appear during building kernel
    image:
    
    net/tipc/udp_media.c:196:
    undefined reference to `ip6_dst_lookup'
    make: *** [vmlinux] Error 1
    
    As ip6_dst_lookup() is implemented in IPV6 and IPV6 is compiled as
    module, ip6_dst_lookup() is not built-in core kernel image. As a
    result, compiler cannot find 'ip6_dst_lookup' reference while
    compiling TIPC code into core kernel image.
    
    But with the method introduced by commit 5f81bd2e5d80 ("ipv6: export a
    stub for IPv6 symbols used by vxlan"), we can avoid the compile error
    through "ipv6_stub" pointer to access ip6_dst_lookup().
    
    Fixes: d0f91938bede ("tipc: add ip/udp media type")
    Suggested-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 610600c8c5e25d551a010b64412cf731c084b1e1
Author: Sasha Levin <sasha.levin@oracle.com>
Date:   Mon Mar 23 15:30:00 2015 -0400

    tipc: validate length of sockaddr in connect() for dgram/rdm
    
    Commit f2f8036 ("tipc: add support for connect() on dgram/rdm sockets")
    hasn't validated user input length for the sockaddr structure which allows
    a user to overwrite kernel memory with arbitrary input.
    
    Fixes: f2f8036 ("tipc: add support for connect() on dgram/rdm sockets")
    Signed-off-by: Sasha Levin <sasha.levin@oracle.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6d022949810b1ea82d46a576d6166035720bbb32
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Tue Mar 24 00:50:24 2015 +1100

    tipc: Use default rhashtable hashfn
    
    This patch removes the explicit jhash value for the hashfn parameter
    of rhashtable.  The default is now jhash so removing the setting
    makes no difference apart from making one less copy of jhash in
    the kernel.
    
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Acked-by: Thomas Graf <tgraf@suug.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6cca7289d5cba80d61da711205cd230fc637e2e3
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Fri Mar 20 21:57:05 2015 +1100

    tipc: Use inlined rhashtable interface
    
    This patch converts tipc to the inlined rhashtable interface.
    
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 446981e5fcad3d64a27358d6591928da4a55a156
Author: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
Date:   Thu Mar 19 16:47:58 2015 -0300

    tipc: fix build issue when building without IPv6
    
    We can't directly call ipv6_sock_mc_join() but should use the stub
    instead and protect it around IS_ENABLED.
    
    Fixes: d0f91938bede ("tipc: add ip/udp media type")
    Signed-off-by: Marcelo Ricardo Leitner <marcelo.leitner@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c9bdc0dde187e5f6b481989b4084c1b7cbe2726f
Merge: de1cf8a7d7a3 f2f8036e391e
Author: David S. Miller <davem@davemloft.net>
Date:   Thu Mar 19 12:26:01 2015 -0400

    Merge branch 'tipc-next'
    
    Erik Hugne says:
    
    ====================
    tipc: small bugfix an support for datagram connect()
    
    Most notable in this series is patch#3 that allows programs to associate
    a tipc address with a connectionless (RDM/DGRAM) socket.
    
    v2: Fix indent issue in patch#3
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f2f8036e391eb82ee78764483f869f2feafb5da8
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Thu Mar 19 09:02:19 2015 +0100

    tipc: add support for connect() on dgram/rdm sockets
    
    Following the example of ip4_datagram_connect, we store the
    address in the socket structure for dgram/rdm sockets and use
    that as the default destination for subsequent send() calls.
    It is allowed to connect to any address types, and the behaviour
    of send() will be the same as a normal sendto() with this address
    provided. Binding to an AF_UNSPEC address clears the association.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3bd88ee7a2ea19dffe384e12fe452c59d9e53c29
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Thu Mar 19 09:02:18 2015 +0100

    tipc: do not report -EHOSTUNREACH for failed local delivery
    
    Since commit 1186adf7df04 ("tipc: simplify message forwarding and
    rejection in socket layer") -EHOSTUNREACH is propagated back to
    the sending process if we fail to deliver the message to another
    socket local to the node.
    This is wrong, host unreachable should only be reported when the
    destination port/name does not exist in the cluster, and that
    check is always done before sending the message. Also, this
    introduces inconsistent sendmsg() behavior for local/remote
    destinations. Errors occurring on the receiving side should not
    trickle up to the sender. If message delivery fails TIPC should
    either discard the packet or reject it back to the sender based
    on the destination droppable option.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 18d6c58415fa9f5ec98767a2434acc8197c7f288
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Thu Mar 19 09:02:17 2015 +0100

    tipc: remove redundant call to tipc_node_remove_conn
    
    tipc_node_remove_conn may be called twice if shutdown() is
    called on a socket that have messages in the receive queue.
    Calling this function twice does no harm, but is unnecessary
    and we remove the redundant call.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b65885d29d41c7245bbd98769e781f77e8d9ed5b
Merge: a61bfa65face e2e21c1c5808
Author: David S. Miller <davem@davemloft.net>
Date:   Wed Mar 18 12:46:48 2015 -0400

    Merge branch 'rhashtable_remove_shift'
    
    Herbert Xu says:
    
    ====================
    rhashtable: Kill redundant shift parameter
    
    I was trying to squeeze bucket_table->rehash in by downsizing
    bucket_table->size, only to find that my spot had been taken
    over by bucket_table->shift.  These patches kill shift and makes
    me feel better :)
    
    v2 corrects the typo in the test_rhashtable changelog and also
    notes the min_shift parameter in the tipc patch changelog.
    ====================
    
    Acked-by: Thomas Graf <tgraf@suug.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 446c89ac1f6026df9e3e0ca2614b36909398d431
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Wed Mar 18 20:01:18 2015 +1100

    tipc: Use rhashtable max/min_size instead of max/min_shift
    
    This patch converts tipc to use rhashtable max/min_size instead of
    the obsolete max/min_shift.
    
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e7a9eee53cf10cb32fb28ccaacfa98a6220b7276
Merge: 528414305770 2b9bb7f33850
Author: David S. Miller <davem@davemloft.net>
Date:   Tue Mar 17 22:12:10 2015 -0400

    Merge branch 'tipc_netns_leak'
    
    Ying Xue says:
    
    ====================
    tipc: fix netns refcnt leak
    
    The series aims to eliminate the issue of netns refcount leak. But
    during fixing it, another two additional problems are found. So all
    of known issues associated with the netns refcnt leak are resolved
    at the same time in the patchset.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2b9bb7f338502d9d01543daa9fdf4a7f104bd572
Author: Ying Xue <ying.xue@windriver.com>
Date:   Wed Mar 18 09:32:59 2015 +0800

    tipc: withdraw tipc topology server name when namespace is deleted
    
    The TIPC topology server is a per namespace service associated with the
    tipc name {1, 1}. When a namespace is deleted, that name must be withdrawn
    before we call sk_release_kernel because the kernel socket release is
    done in init_net and trying to withdraw a TIPC name published in another
    namespace will fail with an error as:
    
    [  170.093264] Unable to remove local publication
    [  170.093264] (type=1, lower=1, ref=2184244004, key=2184244005)
    
    We fix this by breaking the association between the topology server name
    and socket before calling sk_release_kernel.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8460504bdd9aa5996dfc5dd69cd61582a25139ec
Author: Ying Xue <ying.xue@windriver.com>
Date:   Wed Mar 18 09:32:58 2015 +0800

    tipc: fix a potential deadlock when nametable is purged
    
    [   28.531768] =============================================
    [   28.532322] [ INFO: possible recursive locking detected ]
    [   28.532322] 3.19.0+ #194 Not tainted
    [   28.532322] ---------------------------------------------
    [   28.532322] insmod/583 is trying to acquire lock:
    [   28.532322]  (&(&nseq->lock)->rlock){+.....}, at: [<ffffffffa000d219>] tipc_nametbl_remove_publ+0x49/0x2e0 [tipc]
    [   28.532322]
    [   28.532322] but task is already holding lock:
    [   28.532322]  (&(&nseq->lock)->rlock){+.....}, at: [<ffffffffa000e0dc>] tipc_nametbl_stop+0xfc/0x1f0 [tipc]
    [   28.532322]
    [   28.532322] other info that might help us debug this:
    [   28.532322]  Possible unsafe locking scenario:
    [   28.532322]
    [   28.532322]        CPU0
    [   28.532322]        ----
    [   28.532322]   lock(&(&nseq->lock)->rlock);
    [   28.532322]   lock(&(&nseq->lock)->rlock);
    [   28.532322]
    [   28.532322]  *** DEADLOCK ***
    [   28.532322]
    [   28.532322]  May be due to missing lock nesting notation
    [   28.532322]
    [   28.532322] 3 locks held by insmod/583:
    [   28.532322]  #0:  (net_mutex){+.+.+.}, at: [<ffffffff8163e30f>] register_pernet_subsys+0x1f/0x50
    [   28.532322]  #1:  (&(&tn->nametbl_lock)->rlock){+.....}, at: [<ffffffffa000e091>] tipc_nametbl_stop+0xb1/0x1f0 [tipc]
    [   28.532322]  #2:  (&(&nseq->lock)->rlock){+.....}, at: [<ffffffffa000e0dc>] tipc_nametbl_stop+0xfc/0x1f0 [tipc]
    [   28.532322]
    [   28.532322] stack backtrace:
    [   28.532322] CPU: 1 PID: 583 Comm: insmod Not tainted 3.19.0+ #194
    [   28.532322] Hardware name: Bochs Bochs, BIOS Bochs 01/01/2007
    [   28.532322]  ffffffff82394460 ffff8800144cb928 ffffffff81792f3e 0000000000000007
    [   28.532322]  ffffffff82394460 ffff8800144cba28 ffffffff810a8080 ffff8800144cb998
    [   28.532322]  ffffffff810a4df3 ffff880013e9cb10 ffffffff82b0d330 ffff880013e9cb38
    [   28.532322] Call Trace:
    [   28.532322]  [<ffffffff81792f3e>] dump_stack+0x4c/0x65
    [   28.532322]  [<ffffffff810a8080>] __lock_acquire+0x740/0x1ca0
    [   28.532322]  [<ffffffff810a4df3>] ? __bfs+0x23/0x270
    [   28.532322]  [<ffffffff810a7506>] ? check_irq_usage+0x96/0xe0
    [   28.532322]  [<ffffffff810a8a73>] ? __lock_acquire+0x1133/0x1ca0
    [   28.532322]  [<ffffffffa000d219>] ? tipc_nametbl_remove_publ+0x49/0x2e0 [tipc]
    [   28.532322]  [<ffffffff810a9c0c>] lock_acquire+0x9c/0x140
    [   28.532322]  [<ffffffffa000d219>] ? tipc_nametbl_remove_publ+0x49/0x2e0 [tipc]
    [   28.532322]  [<ffffffff8179c41f>] _raw_spin_lock_bh+0x3f/0x50
    [   28.532322]  [<ffffffffa000d219>] ? tipc_nametbl_remove_publ+0x49/0x2e0 [tipc]
    [   28.532322]  [<ffffffffa000d219>] tipc_nametbl_remove_publ+0x49/0x2e0 [tipc]
    [   28.532322]  [<ffffffffa000e11e>] tipc_nametbl_stop+0x13e/0x1f0 [tipc]
    [   28.532322]  [<ffffffffa000dfe5>] ? tipc_nametbl_stop+0x5/0x1f0 [tipc]
    [   28.532322]  [<ffffffffa0004bab>] tipc_init_net+0x13b/0x150 [tipc]
    [   28.532322]  [<ffffffffa0004a75>] ? tipc_init_net+0x5/0x150 [tipc]
    [   28.532322]  [<ffffffff8163dece>] ops_init+0x4e/0x150
    [   28.532322]  [<ffffffff810aa66d>] ? trace_hardirqs_on+0xd/0x10
    [   28.532322]  [<ffffffff8163e1d3>] register_pernet_operations+0xf3/0x190
    [   28.532322]  [<ffffffff8163e31e>] register_pernet_subsys+0x2e/0x50
    [   28.532322]  [<ffffffffa002406a>] tipc_init+0x6a/0x1000 [tipc]
    [   28.532322]  [<ffffffffa0024000>] ? 0xffffffffa0024000
    [   28.532322]  [<ffffffff810002d9>] do_one_initcall+0x89/0x1c0
    [   28.532322]  [<ffffffff811b7cb0>] ? kmem_cache_alloc_trace+0x50/0x1b0
    [   28.532322]  [<ffffffff810e725b>] ? do_init_module+0x2b/0x200
    [   28.532322]  [<ffffffff810e7294>] do_init_module+0x64/0x200
    [   28.532322]  [<ffffffff810e9353>] load_module+0x12f3/0x18e0
    [   28.532322]  [<ffffffff810e5890>] ? show_initstate+0x50/0x50
    [   28.532322]  [<ffffffff810e9a19>] SyS_init_module+0xd9/0x110
    [   28.532322]  [<ffffffff8179f3b3>] sysenter_dispatch+0x7/0x1f
    
    Before tipc_purge_publications() calls tipc_nametbl_remove_publ() to
    remove a publication with a name sequence, the name sequence's lock
    is held. However, when tipc_nametbl_remove_publ() calling
    tipc_nameseq_remove_publ() to remove the publication, it first tries
    to query name sequence instance with the publication, and then holds
    the lock of the found name sequence. But as the lock may be already
    taken in tipc_purge_publications(), deadlock happens like above
    scenario demonstrated. As tipc_nameseq_remove_publ() doesn't grab name
    sequence's lock, the deadlock can be avoided if it's directly invoked
    by tipc_purge_publications().
    
    Fixes: 97ede29e80ee ("tipc: convert name table read-write lock to RCU")
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 76100a8a64bc2ae898bc49d51dd28c1f4f5ed37b
Author: Ying Xue <ying.xue@windriver.com>
Date:   Wed Mar 18 09:32:57 2015 +0800

    tipc: fix netns refcnt leak
    
    When the TIPC module is loaded, we launch a topology server in kernel
    space, which in its turn is creating TIPC sockets for communication
    with topology server users. Because both the socket's creator and
    provider reside in the same module, it is necessary that the TIPC
    module's reference count remains zero after the server is started and
    the socket created; otherwise it becomes impossible to perform "rmmod"
    even on an idle module.
    
    Currently, we achieve this by defining a separate "tipc_proto_kern"
    protocol struct, that is used only for kernel space socket allocations.
    This structure has the "owner" field set to NULL, which restricts the
    module reference count from being be bumped when sk_alloc() for local
    sockets is called. Furthermore, we have defined three kernel-specific
    functions, tipc_sock_create_local(), tipc_sock_release_local() and
    tipc_sock_accept_local(), to avoid the module counter being modified
    when module local sockets are created or deleted. This has worked well
    until we introduced name space support.
    
    However, after name space support was introduced, we have observed that
    a reference count leak occurs, because the netns counter is not
    decremented in tipc_sock_delete_local().
    
    This commit remedies this problem. But instead of just modifying
    tipc_sock_delete_local(), we eliminate the whole parallel socket
    handling infrastructure, and start using the regular sk_create_kern(),
    kernel_accept() and sk_release_kernel() calls. Since those functions
    manipulate the module counter, we must now compensate for that by
    explicitly decrementing the counter after module local sockets are
    created, and increment it just before calling sk_release_kernel().
    
    Fixes: a62fbccecd62 ("tipc: make subscriber server support net namespace")
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reported-by: Cong Wang <cwang@twopensource.com>
    Tested-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a3795208b9a9801a66b305395e9ebaae850eee03
Merge: 5f1764ddfeb0 e3eea1eb47ac
Author: David S. Miller <davem@davemloft.net>
Date:   Sat Mar 14 14:38:41 2015 -0400

    Merge branch 'tipc-next'
    
    Jon Maloy says:
    
    ====================
    tipc: some optimizations and impovements
    
    The commits in this series contain some relatively simple changes that
    lead to better throughput across TIPC connections. We also make changes
    to the implementation of link transmission queueing and priority
    handling, in order to make the code more comprehensible and maintainable.
    
    v2: Commit #2: Redesigned tipc_msg_validate() to use pskb_may_pull(),
                   as per feedback from David Miller.
        Commit #3: Some cosmetic changes to tipc_msg_extract(). I tried to
                   replace the unconditional skb_linearize() with calls to
                   pskb_may_pull() at selected locations, but I gave up.
                   First, skb_trim() requires a fully linearized buffer.
                   Second, it doesn't make much sense; the whole buffer
                   will end up linearized, one way or another.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e3eea1eb47ac616ee09cf0ae5d1e7790ef8461ea
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Mar 13 16:08:11 2015 -0400

    tipc: clean up handling of message priorities
    
    Messages transferred by TIPC are assigned an "importance priority", -an
    integer value indicating how to treat the message when there is link or
    destination socket congestion.
    
    There is no separate header field for this value. Instead, the message
    user values have been chosen in ascending order according to perceived
    importance, so that the message user field can be used for this.
    
    This is not a good solution. First, we have many more users than the
    needed priority levels, so we end up with treating more priority
    levels than necessary. Second, the user field cannot always
    accurately reflect the priority of the message. E.g., a message
    fragment packet should really have the priority of the enveloped
    user data message, and not the priority of the MSG_FRAGMENTER user.
    Until now, we have been working around this problem in different ways,
    but it is now time to implement a consistent way of handling such
    priorities, although still within the constraint that we cannot
    allocate any more bits in the regular data message header for this.
    
    In this commit, we define a new priority level, TIPC_SYSTEM_IMPORTANCE,
    that will be the only one used apart from the four (lower) user data
    levels. All non-data messages map down to this priority. Furthermore,
    we take some free bits from the MSG_FRAGMENTER header and allocate
    them to store the priority of the enveloped message. We then adjust
    the functions msg_importance()/msg_set_importance() so that they
    read/set the correct header fields depending on user type.
    
    This small protocol change is fully compatible, because the code at
    the receiving end of a link currently reads the importance level
    only from user data messages, where there is no change.
    
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 05dcc5aa4dcced4f59f925625cea669e82b75519
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Mar 13 16:08:10 2015 -0400

    tipc: split link outqueue
    
    struct tipc_link contains one single queue for outgoing packets,
    where both transmitted and waiting packets are queued.
    
    This infrastructure is hard to maintain, because we need
    to keep a number of fields to keep track of which packets are
    sent or unsent, and the number of packets in each category.
    
    A lot of code becomes simpler if we split this queue into a transmission
    queue, where sent/unacknowledged packets are kept, and a backlog queue,
    where we keep the not yet sent packets.
    
    In this commit we do this separation.
    
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2cdf3918e47e98c8f34f7a64455ea9fd433756e7
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Mar 13 16:08:09 2015 -0400

    tipc: eliminate unnecessary call to broadcast ack function
    
    The unicast packet header contains a broadcast acknowledge sequence
    number, that may need to be conveyed to the broadcast link for proper
    treatment. Currently, the function tipc_rcv(), which is on the most
    critical data path, calls the function tipc_bclink_acknowledge() to
    have this done. This call is made for each received packet, and results
    in the unconditional grabbing of the broadcast link spinlock.
    
    This is unnecessary, since we can see directly from tipc_rcv() if
    the acknowledged number differs from what has been previously acked
    from the node in question. In the vast majority of cases the numbers
    won't differ, and there is nothing to update.
    
    We now make the call to tipc_bclink_acknowledge() conditional
    to that the two ack values differ.
    
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c1336ee472f83a90ede01fdae095ed5d0a2934c9
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Mar 13 16:08:08 2015 -0400

    tipc: extract bundled buffers by cloning instead of copying
    
    When we currently extract a bundled buffer from a message bundle in
    the function tipc_msg_extract(), we allocate a new buffer and explicitly
    copy the linear data area.
    
    This is unnecessary, since we can just clone the buffer and do
    skb_pull() on the clone to move the data pointer to the correct
    position.
    
    This is what we do in this commit.
    
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1149557d64c97dc9adf3103347a1c0e8c06d3b89
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Mar 13 16:08:07 2015 -0400

    tipc: eliminate unnecessary linearization of incoming buffers
    
    Currently, TIPC linearizes all incoming buffers directly at reception
    before passing them upwards in the stack. This is clearly a waste of
    CPU resources, and must be avoided.
    
    In this commit, we eliminate this unnecessary linearization. We still
    ensure that at least the message header is linear, and that the buffer
    is linearized where this is still needed, i.e. when unbundling and when
    reversing messages.
    
    In addition, we ensure that fragmented messages are validated after
    reassembly before delivering them upwards in the stack.
    
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit cf2157f88a5abf1a64b8c51a737a35e918dc67e5
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Mar 13 16:08:06 2015 -0400

    tipc: move message validation function to msg.c
    
    The function link_buf_validate() is in reality re-entrant and context
    independent, and will in later commits be called from several locations.
    Therefore, we move it to msg.c, make it outline and rename the it to
    tipc_msg_validate().
    
    We also redesign the function to make proper use of pskb_may_pull()
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7764d6e83d2c3b50d9282f12144ebb10418c056e
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Mar 13 16:08:05 2015 -0400

    tipc: add framework for node capabilities exchange
    
    The TIPC protocol spec has defined a 13 bit capability bitmap in
    the neighbor discovery header, as a means to maintain compatibility
    between different code and protocol generations. Until now this field
    has been unused.
    
    We now introduce the basic framework for exchanging capabilities
    between nodes at first contact. After exchange, a peer node's
    capabilities are stored as a 16 bit bitmap in struct tipc_node.
    
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 169bf9121b19dd6029e0a354d33513f61bfbe3d3
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Tue Mar 10 12:23:34 2015 -0400

    tipc: ensure that idle links are deleted when a bearer is disabled
    
    commit afaa3f65f65fda2e7b190aac7e2a75d9a2a77cb6
    (tipc: purge links when bearer is disabled) was an attempt to resolve
    a problem that turned out to have a more profound reason.
    
    When we disable a bearer, we delete all its pertaining links if
    there is no other bearer to perform failover to, or if the module
    is shutting down. In case there are dual bearers, we wait with
    deleting links until the failover procedure is finished.
    
    However, this misses the case when a link on the removed bearer
    was already down, so that there will be no failover procedure to
    finish the link delete. This causes confusion if a new bearer is
    added to replace the removed one, and also entails a small memory
    leak.
    
    This commit takes the current state of the link into account when
    deciding when to delete it, and also reverses the above-mentioned
    commit.
    
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 36bef88380037288d5b575ed2029de694533b1ec
Merge: e93df634aac6 e6441bae3262
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Mar 9 18:17:21 2015 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) nft_compat accidently truncates ethernet protocol to 8-bits, from
        Arturo Borrero.
    
     2) Memory leak in ip_vs_proc_conn(), from Julian Anastasov.
    
     3) Don't allow the space required for nftables rules to exceed the
        maximum value representable in the dlen field.  From Patrick
        McHardy.
    
     4) bcm63xx_enet can accidently leave interrupts permanently disabled
        due to errors in the NAPI polling exit logic.  Fix from Nicolas
        Schichan.
    
     5) Fix OOPSes triggerable by the ping protocol module, due to missing
        address family validations etc.  From Lorenzo Colitti.
    
     6) Don't use RCU locking in sleepable context in team driver, from Jiri
        Pirko.
    
     7) xen-netback miscalculates statistic offset pointers when reporting
        the stats to userspace.  From David Vrabel.
    
     8) Fix a leak of up to 256 pages per VIF destroy in xen-netaback, also
        from David Vrabel.
    
     9) ip_check_defrag() cannot assume that skb_network_offset(),
        particularly when it is used by the AF_PACKET fanout defrag code.
        From Alexander Drozdov.
    
    10) gianfar driver doesn't query OF node names properly when trying to
        determine the number of hw queues available.  Fix it to explicitly
        check for OF nodes named queue-group.  From Tobias Waldekranz.
    
    11) MID field in macb driver should be 12 bits, not 16.  From Punnaiah
        Choudary Kalluri.
    
    12) Fix unintentional regression in traceroute due to timestamp socket
        option changes.  Empty ICMP payloads should be allowed in
        non-timestamp cases.  From Willem de Bruijn.
    
    13) When devices are unregistered, we have to get rid of AF_PACKET
        multicast list entries that point to it via ifindex.  Fix from
        Francesco Ruggeri.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (38 commits)
      tipc: fix bug in link failover handling
      net: delete stale packet_mclist entries
      net: macb: constify macb configuration data
      MAINTAINERS: add Marc Kleine-Budde as co maintainer for CAN networking layer
      MAINTAINERS: linux-can moved to github
      can: kvaser_usb: Read all messages in a bulk-in URB buffer
      can: kvaser_usb: Avoid double free on URB submission failures
      can: peak_usb: fix missing ctrlmode_ init for every dev
      can: add missing initialisations in CAN related skbuffs
      ip: fix error queue empty skb handling
      bgmac: Clean warning messages
      tcp: align tcp_xmit_size_goal() on tcp_tso_autosize()
      net: fec: fix unbalanced clk disable on driver unbind
      net: macb: Correct the MID field length value
      net: gianfar: correctly determine the number of queue groups
      ipv4: ip_check_defrag should not assume that skb_network_offset is zero
      net: bcmgenet: properly disable password matching
      net: eth: xgene: fix booting with devicetree
      bnx2x: Force fundamental reset for EEH recovery
      xen-netback: refactor xenvif_handle_frag_list()
      ...

commit e6441bae326271090755e1707196ad05aa1dc703
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Mon Mar 9 16:16:22 2015 -0400

    tipc: fix bug in link failover handling
    
    In commit c637c1035534867b85b78b453c38c495b58e2c5a
    ("tipc: resolve race problem at unicast message reception") we
    introduced a new mechanism for delivering buffers upwards from link
    to socket layer.
    
    That code contains a bug in how we handle the new link input queue
    during failover. When a link is reset, some of its users may be blocked
    because of congestion, and in order to resolve this, we add any pending
    wakeup pseudo messages to the link's input queue, and deliver them to
    the socket. This misses the case where the other, remaining link also
    may have congested users. Currently, the owner node's reference to the
    remaining link's input queue is unconditionally overwritten by the
    reset link's input queue. This has the effect that wakeup events from
    the remaining link may be unduely delayed (but not lost) for a
    potentially long period.
    
    We fix this by adding the pending events from the reset link to the
    input queue that is currently referenced by the node, whichever one
    it is.
    
    This commit should be applied to both net and net-next.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 115403df818abf1e84c3554b14c8e0f8746bf3a6
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Mon Mar 9 14:44:13 2015 -0400

    tipc: Add Ying Xue to TIPC maintainers list
    
    We remove Allan Stephens, who has moved on to other tasks, from
    the TIPC maintainers list. He is replaced by Ying Xue, who has
    been doing the maintenance on behalf of WindRiver since almost
    three years.
    
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 143fe22f50a8be855bba77b5b2dc9dd1a5982b1c
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Mon Mar 9 10:43:42 2015 +0100

    tipc: fix inconsistent signal handling regression
    
    Commit 9bbb4ecc6819 ("tipc: standardize recvmsg routine") changed
    the sleep/wakeup behaviour for sockets entering recv() or accept().
    In this process the order of reporting -EAGAIN/-EINTR was reversed.
    This caused problems with wrong errno being reported back if the
    timeout expires. The same problem happens if the socket is
    nonblocking and recv()/accept() is called when the process have
    pending signals. If there is no pending data read or connections to
    accept, -EINTR will be returned instead of -EAGAIN.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Reported-by László Benedek <laszlo.benedek@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4fee6be8134a69545caf88d8b439936a326d6d77
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Mon Mar 9 10:19:31 2015 +0100

    tipc: sparse: fix htons conversion warnings
    
    Commit d0f91938bede ("tipc: add ip/udp media type") introduced
    some new sparse warnings. Clean them up.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d0f91938bede204a343473792529e0db7d599836
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Thu Mar 5 10:23:49 2015 +0100

    tipc: add ip/udp media type
    
    The ip/udp bearer can be configured in a point-to-point
    mode by specifying both local and remote ip/hostname,
    or it can be enabled in multicast mode, where links are
    established to all tipc nodes that have joined the same
    multicast group. The multicast IP address is generated
    based on the TIPC network ID, but can be overridden by
    using another multicast address as remote ip.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 948fa2d115c553ae32aced66e0f00f89245dc05e
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Thu Mar 5 10:23:48 2015 +0100

    tipc: increase size of tipc discovery messages
    
    The payload area following the TIPC discovery message header is an
    opaque area defined by the media. INT_H_SIZE was enough for
    Ethernet/IB/IPv4 but needs to be expanded to carry IPv6 addressing
    information.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 39a0295f901423e260a034ac7c3211ecaa9c2745
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Mar 2 15:37:47 2015 +0800

    tipc: Don't use iocb argument in socket layer
    
    Currently the iocb argument is used to idenfiy whether or not socket
    lock is hold before tipc_sendmsg()/tipc_send_stream() is called. But
    this usage prevents iocb argument from being dropped through sendmsg()
    at socket common layer. Therefore, in the commit we introduce two new
    functions called __tipc_sendmsg() and __tipc_send_stream(). When they
    are invoked, it assumes that their callers have taken socket lock,
    thereby avoiding the weird usage of iocb argument.
    
    Cc: Al Viro <viro@ZenIV.linux.org.uk>
    Cc: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 721a57a02dfc81b6d63b93b8ca23be3004b61515
Merge: 247f6d0f8667 d76a436d50d1
Author: David S. Miller <davem@davemloft.net>
Date:   Fri Feb 27 18:18:52 2015 -0500

    Merge branch 'tipc-next'
    
    Erik Hugne says:
    
    ====================
    tipc: bug fix and some improvements
    
    Most important is a fix for a nullptr exception that would occur when
    name table subscriptions fail. The remaining patches are performance
    improvements and cosmetic changes.
    
    v2: remove unnecessary whitespace in patch #2
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d76a436d50d1ebce352e1815eaea79a254b2b24f
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Fri Feb 27 08:56:58 2015 +0100

    tipc: make media address offset a common define
    
    With the exception of infiniband media which does not use media
    offsets, the media address is always located at offset 4 in the
    media info field as defined by the protocol, so we move the
    definition to the generic bearer.h
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 91e2eb56845a018e5c691acf87137baf05316c4e
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Fri Feb 27 08:56:57 2015 +0100

    tipc: rename media/msg related definitions
    
    The TIPC_MEDIA_ADDR_SIZE and TIPC_MEDIA_ADDR_OFFSET names
    are misleading, as they actually define the size and offset of
    the whole media info field and not the address part. This patch
    does not have any functional changes.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit afaa3f65f65fda2e7b190aac7e2a75d9a2a77cb6
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Fri Feb 27 08:56:56 2015 +0100

    tipc: purge links when bearer is disabled
    
    If a bearer is disabled by manual intervention, all links over that
    bearer should be purged, indicated with the 'shutting_down' flag.
    Otherwise tipc will get confused if a new bearer is enabled using
    a different media type.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7fe8097cef5ff4ba1c7ced42bda97830ce00eec6
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Fri Feb 27 08:56:55 2015 +0100

    tipc: fix nullpointer bug when subscribing to events
    
    If a subscription request is sent to a topology server
    connection, and any error occurs (malformed request, oom
    or limit reached) while processing this request, TIPC should
    terminate the subscriber connection. While doing so, it tries
    to access fields in an already freed (or never allocated)
    subscription element leading to a nullpointer exception.
    We fix this by removing the subscr_terminate function and
    terminate the connection immediately upon any subscription
    failure.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3622c36f37640078c9a706b71e02e6334c85f9e9
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Fri Feb 27 08:56:54 2015 +0100

    tipc: only create header copy for name distr messages
    
    The TIPC name distributor pushes topology updates to the cluster
    neighbors. Currently this is done in a unicast manner, and the
    skb holding the update is cloned for each cluster member. This
    is unnecessary, as we only modify the destnode field in the header
    so we change it to do pskb_copy instead.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8331de75cb13fc907ceba78e698c42150e61dda9
Author: Daniel Borkmann <daniel@iogearbox.net>
Date:   Wed Feb 25 16:31:53 2015 +0100

    rhashtable: unconditionally grow when max_shift is not specified
    
    While commit c0c09bfdc415 ("rhashtable: avoid unnecessary wakeup for
    worker queue") rightfully moved part of the decision making of
    whether we should expand or shrink from the expand/shrink functions
    themselves into insert/delete functions in order to avoid unnecessary
    worker wake-ups, it however introduced a regression by doing so.
    
    Before that change, if no max_shift was specified (= 0) on rhashtable
    initialization, rhashtable_expand() would just grow unconditionally
    and lets the available memory be the limiting factor. After that
    change, if no max_shift was specified, there would be _no_ expansion
    step at all.
    
    Given that netlink and tipc have a max_shift specified, it was not
    visible there, but Josh Hunt reported that if nft that starts out
    with a default element hint of 3 if not otherwise provided, would
    slow i.e. inserts down trememdously as it cannot grow larger to
    relax table occupancy.
    
    Given that the test case verifies shrinks/expands manually, we also
    must remove pointer to the helper functions to explicitly avoid
    parallel resizing on insertions/deletions. test_bucket_stats() and
    test_rht_lookup() could also be wrapped around rhashtable mutex to
    explicitly synchronize a walk from resizing, but I think that defeats
    the actual test case which intended to have explicit test steps,
    i.e. 1) inserts, 2) expands, 3) shrinks, 4) deletions, with object
    verification after each stage.
    
    Reported-by: Josh Hunt <johunt@akamai.com>
    Fixes: c0c09bfdc415 ("rhashtable: avoid unnecessary wakeup for worker queue")
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Cc: Ying Xue <ying.xue@windriver.com>
    Cc: Josh Hunt <johunt@akamai.com>
    Acked-by: Thomas Graf <tgraf@suug.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1f3aefb5dfcaf28c0a0b5c270ca120818da88f58
Author: Melike Yurtoglu <aysemelikeyurtoglu@gmail.com>
Date:   Sun Feb 22 16:58:08 2015 +0200

    Staging: rtl8192e: replace memcpy() by ether_addr_copy() using coccinelle and pack variable
    
    This patch focuses on fixing the following warning generated
    by checkpatch.pl for the file rxtx.c
    
    Prefer ether_addr_copy() over memcpy() if the Ethernet addresses
    are __aligned(2)
    
    @@ expression e1, e2; @@
    
    - memcpy(e1, e2, ETH_ALEN);
    + ether_addr_copy(e1, e2);
    
    struct net_device {
            char                       name[16];             /*     0    16*/
            struct hlist_node          name_hlist;           /*    16    16*/
            char *                     ifalias;              /*    32     8*/
            long unsigned int          mem_end;              /*    40     8*/
            long unsigned int          mem_start;            /*    48     8*/
            long unsigned int          base_addr;            /*    56     8*/
            /* --- cacheline 1 boundary (64 bytes) --- */
            int                        irq;                  /*    64     4*/
    
            /* XXX 4 bytes hole, try to pack */
    
            long unsigned int          state;                /*    72     8*/
            struct list_head           dev_list;             /*    80    16*/
            struct list_head           napi_list;            /*    96    16*/
            struct list_head           unreg_list;           /*   112    16*/
            /* --- cacheline 2 boundary (128 bytes) --- */
            struct list_head           close_list;           /*   128    16*/
            struct {
                    struct list_head   upper;                /*   144    16*/
                    struct list_head   lower;                /*   160    16*/
            } adj_list;                                      /*   144    32*/
            struct {
                    struct list_head   upper;                /*   176    16*/
                    struct list_head   lower;                /*   192    16*/
            } all_adj_list;                                  /*   176    32*/
            /* --- cacheline 3 boundary (192 bytes) was 16 bytes ago --- */
            netdev_features_t          features;             /*   208     8*/
            netdev_features_t          hw_features;          /*   216     8*/
            netdev_features_t          wanted_features;      /*   224     8*/
            netdev_features_t          vlan_features;        /*   232     8*/
            netdev_features_t          hw_enc_features;      /*   240     8*/
            netdev_features_t          mpls_features;        /*   248     8*/
            /* --- cacheline 4 boundary (256 bytes) --- */
            int                        ifindex;              /*   256     4*/
            int                        iflink;               /*   260     4*/
            struct net_device_stats    stats;                /*   264   184*/
            /* --- cacheline 7 boundary (448 bytes) --- */
            atomic_long_t              rx_dropped;           /*   448     8*/
            atomic_long_t              tx_dropped;           /*   456     8*/
            atomic_t                   carrier_changes;      /*   464     4*/
    
            /* XXX 4 bytes hole, try to pack */
    
            const struct iw_handler_def  * wireless_handlers; /*   472     8*/
            struct iw_public_data *    wireless_data;        /*   480     8*/
            const struct net_device_ops  * netdev_ops;       /*   488     8*/
            const struct ethtool_ops  * ethtool_ops;         /*   496     8*/
            const struct forwarding_accel_ops  * fwd_ops;    /*   504     8*/
            /* --- cacheline 8 boundary (512 bytes) --- */
            const struct header_ops  * header_ops;           /*   512     8*/
            unsigned int               flags;                /*   520     4*/
            unsigned int               priv_flags;           /*   524     4*/
            short unsigned int         gflags;               /*   528     2*/
            short unsigned int         padded;               /*   530     2*/
            unsigned char              operstate;            /*   532     1*/
            unsigned char              link_mode;            /*   533     1*/
            unsigned char              if_port;              /*   534     1*/
            unsigned char              dma;                  /*   535     1*/
            unsigned int               mtu;                  /*   536     4*/
            short unsigned int         type;                 /*   540     2*/
            short unsigned int         hard_header_len;      /*   542     2*/
            short unsigned int         needed_headroom;      /*   544     2*/
            short unsigned int         needed_tailroom;      /*   546     2*/
            unsigned char              perm_addr[32];        /*   548    32*/
            /* --- cacheline 9 boundary (576 bytes) was 4 bytes ago --- */
            unsigned char              addr_assign_type;     /*   580     1*/
            unsigned char              addr_len;             /*   581     1*/
            short unsigned int         neigh_priv_len;       /*   582     2*/
            short unsigned int         dev_id;               /*   584     2*/
            short unsigned int         dev_port;             /*   586     2*/
            spinlock_t                 addr_list_lock;       /*   588     4*/
            struct netdev_hw_addr_list uc;                   /*   592    24*/
            struct netdev_hw_addr_list mc;                   /*   616    24*/
            /* --- cacheline 10 boundary (640 bytes) --- */
            struct netdev_hw_addr_list dev_addrs;            /*   640    24*/
            struct kset *              queues_kset;          /*   664     8*/
            unsigned char              name_assign_type;     /*   672     1*/
            bool                       uc_promisc;           /*   673     1*/
    
            /* XXX 2 bytes hole, try to pack */
    
            unsigned int               promiscuity;          /*   676     4*/
            unsigned int               allmulti;             /*   680     4*/
    
            /* XXX 4 bytes hole, try to pack */
    
            struct vlan_info *         vlan_info;            /*   688     8*/
            struct dsa_switch_tree *   dsa_ptr;              /*   696     8*/
            /* --- cacheline 11 boundary (704 bytes) --- */
            struct tipc_bearer *       tipc_ptr;             /*   704     8*/
            void *                     atalk_ptr;            /*   712     8*/
            struct in_device *         ip_ptr;               /*   720     8*/
            struct dn_dev *            dn_ptr;               /*   728     8*/
            struct inet6_dev *         ip6_ptr;              /*   736     8*/
            void *                     ax25_ptr;             /*   744     8*/
            struct wireless_dev *      ieee80211_ptr;        /*   752     8*/
            struct wpan_dev *          ieee802154_ptr;       /*   760     8*/
            /* --- cacheline 12 boundary (768 bytes) --- */
            long unsigned int          last_rx;              /*   768     8*/
            unsigned char *            dev_addr;             /*   776     8*/
            struct netdev_rx_queue *   _rx;                  /*   784     8*/
            unsigned int               num_rx_queues;        /*   792     4*/
            unsigned int               real_num_rx_queues;   /*   796     4*/
            long unsigned int          gro_flush_timeout;    /*   800     8*/
            rx_handler_func_t *        rx_handler;           /*   808     8*/
            void *                     rx_handler_data;      /*   816     8*/
            struct netdev_queue *      ingress_queue;        /*   824     8*/
            /* --- cacheline 13 boundary (832 bytes) --- */
            unsigned char              broadcast[32];        /*   832    32*/
    
            /* XXX 32 bytes hole, try to pack */
    
            /* --- cacheline 14 boundary (896 bytes) --- */
            struct netdev_queue *      _tx;                  /*   896     8*/
            unsigned int               num_tx_queues;        /*   904     4*/
            unsigned int               real_num_tx_queues;   /*   908     4*/
            struct Qdisc *             qdisc;                /*   912     8*/
            long unsigned int          tx_queue_len;         /*   920     8*/
            spinlock_t                 tx_global_lock;       /*   928     4*/
    
            /* XXX 4 bytes hole, try to pack */
    
            struct xps_dev_maps *      xps_maps;             /*   936     8*/
            struct cpu_rmap *          rx_cpu_rmap;          /*   944     8*/
            long unsigned int          trans_start;          /*   952     8*/
            /* --- cacheline 15 boundary (960 bytes) --- */
            int                        watchdog_timeo;       /*   960     4*/
    
            /* XXX 4 bytes hole, try to pack */
    
            struct timer_list          watchdog_timer;       /*   968    80*/
            /* --- cacheline 16 boundary (1024 bytes) was 24 bytes ago ---* */
            int *                      pcpu_refcnt;          /*  1048     8*/
            struct list_head           todo_list;            /*  1056    16*/
            struct hlist_node          index_hlist;          /*  1072    16*/
            /* --- cacheline 17 boundary (1088 bytes) --- */
            struct list_head           link_watch_list;      /*  1088    16*/
            enum {
                    NETREG_UNINITIALIZED = 0,
                    NETREG_REGISTERED = 1,
                    NETREG_UNREGISTERING = 2,
                    NETREG_UNREGISTERED = 3,
                    NETREG_RELEASED = 4,
                    NETREG_DUMMY = 5,
            } reg_state:8;                                     /*  1104 4 */
            /* Bitfield combined with next fields */
    
            bool                       dismantle;            /*  1105     1*/
    
            /* Bitfield combined with previous fields */
    
            enum {
                    RTNL_LINK_INITIALIZED = 0,
                    RTNL_LINK_INITIALIZING = 1,
            } rtnl_link_state:16;                               /*  1104 4 */
    
            /* XXX 4 bytes hole, try to pack */
    
            void                       (*destructor)(struct net_device *);/*  1112     8 */
            struct netpoll_info *      npinfo;               /*  1120     8*/
            struct net *               nd_net;               /*  1128     8*/
            union {
                    void *             ml_priv;              /*           8*/
                    struct pcpu_lstats * lstats;             /*           8*/
                    struct pcpu_sw_netstats * tstats;        /*           8*/
                    struct pcpu_dstats * dstats;             /*           8*/
                    struct pcpu_vstats * vstats;             /*           8*/
            };                                               /*  1136     8*/
            struct garp_port *         garp_port;            /*  1144     8*/
            /* --- cacheline 18 boundary (1152 bytes) was 4 bytes ago --- */
            struct mrp_port *          mrp_port;             /*  1152     8*/
            struct device              dev;                  /*  1160   696*/
    
            /* XXX last struct has 7 bytes of padding */
    
            /* --- cacheline 29 boundary (1856 bytes) was 4 bytes ago --- */
            const struct attribute_group  * sysfs_groups[4]; /*  1856    32*/
            const struct attribute_group  * sysfs_rx_queue_group; /*  18888 */
            const struct rtnl_link_ops  * rtnl_link_ops;     /*  1896     8*/
            unsigned int               gso_max_size;         /*  1904     4*/
            u16                        gso_max_segs;         /*  1908     2*/
            u16                        gso_min_segs;         /*  1910     2*/
            const struct dcbnl_rtnl_ops  * dcbnl_ops;        /*  1912     8*/
            /* --- cacheline 30 boundary (1920 bytes) was 4 bytes ago --- */
            u8                         num_tc;               /*  1920     1*/
    
            /* XXX 1 byte hole, try to pack */
    
            struct netdev_tc_txq       tc_to_txq[16];        /*  1922    64*/
            /* --- cacheline 31 boundary (1984 bytes) was 6 bytes ago --- */
            u8                         prio_tc_map[16];      /*  1986    16*/
    
            /* XXX 2 bytes hole, try to pack */
    
            unsigned int               fcoe_ddp_xid;         /*  2004     4*/
            struct phy_device *        phydev;               /*  2008     8*/
            struct lock_class_key *    qdisc_tx_busylock;    /*  2016     8*/
            int                        group;                /*  2024     4*/
    
            /* XXX 4 bytes hole, try to pack */
    
            struct pm_qos_request      pm_qos_req;           /*  2032   176*/
            /* --- cacheline 34 boundary (2176 bytes) was 36 bytes ago --- * */
    
            /* size: 2240, cachelines: 35, members: 120 */
            /* sum members: 2147, holes: 11, sum holes: 65 */
            /* padding: 32 */
            /* paddings: 1, sum paddings: 7 */
    
            /* BRAIN FART ALERT! 2240 != 2147 + 65(holes), diff = 28 */
    
    };
    
    Signed-off-by: Melike Yurtoglu <aysemelikeyurtoglu@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c5ce28df0e7c01a1de23c36ebdefcd803f2b6cbb
Merge: 29afc4e9a408 9399f0c51489
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Feb 10 20:01:30 2015 -0800

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net-next
    
    Pull networking updates from David Miller:
    
     1) More iov_iter conversion work from Al Viro.
    
        [ The "crypto: switch af_alg_make_sg() to iov_iter" commit was
          wrong, and this pull actually adds an extra commit on top of the
          branch I'm pulling to fix that up, so that the pre-merge state is
          ok.   - Linus ]
    
     2) Various optimizations to the ipv4 forwarding information base trie
        lookup implementation.  From Alexander Duyck.
    
     3) Remove sock_iocb altogether, from CHristoph Hellwig.
    
     4) Allow congestion control algorithm selection via routing metrics.
        From Daniel Borkmann.
    
     5) Make ipv4 uncached route list per-cpu, from Eric Dumazet.
    
     6) Handle rfs hash collisions more gracefully, also from Eric Dumazet.
    
     7) Add xmit_more support to r8169, e1000, and e1000e drivers.  From
        Florian Westphal.
    
     8) Transparent Ethernet Bridging support for GRO, from Jesse Gross.
    
     9) Add BPF packet actions to packet scheduler, from Jiri Pirko.
    
    10) Add support for uniqu flow IDs to openvswitch, from Joe Stringer.
    
    11) New NetCP ethernet driver, from Muralidharan Karicheri and Wingman
        Kwok.
    
    12) More sanely handle out-of-window dupacks, which can result in
        serious ACK storms.  From Neal Cardwell.
    
    13) Various rhashtable bug fixes and enhancements, from Herbert Xu,
        Patrick McHardy, and Thomas Graf.
    
    14) Support xmit_more in be2net, from Sathya Perla.
    
    15) Group Policy extensions for vxlan, from Thomas Graf.
    
    16) Remove Checksum Offload support for vxlan, from Tom Herbert.
    
    17) Like ipv4, support lockless transmit over ipv6 UDP sockets.  From
        Vlad Yasevich.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net-next: (1494+1 commits)
      crypto: fix af_alg_make_sg() conversion to iov_iter
      ipv4: Namespecify TCP PMTU mechanism
      i40e: Fix for stats init function call in Rx setup
      tcp: don't include Fast Open option in SYN-ACK on pure SYN-data
      openvswitch: Only set TUNNEL_VXLAN_OPT if VXLAN-GBP metadata is set
      ipv6: Make __ipv6_select_ident static
      ipv6: Fix fragment id assignment on LE arches.
      bridge: Fix inability to add non-vlan fdb entry
      net: Mellanox: Delete unnecessary checks before the function call "vunmap"
      cxgb4: Add support in cxgb4 to get expansion rom version via ethtool
      ethtool: rename reserved1 memeber in ethtool_drvinfo for expansion ROM version
      net: dsa: Remove redundant phy_attach()
      IB/mlx4: Reset flow support for IB kernel ULPs
      IB/mlx4: Always use the correct port for mirrored multicast attachments
      net/bonding: Fix potential bad memory access during bonding events
      tipc: remove tipc_snprintf
      tipc: nl compat add noop and remove legacy nl framework
      tipc: convert legacy nl stats show to nl compat
      tipc: convert legacy nl net id get to nl compat
      tipc: convert legacy nl net id set to nl compat
      ...

commit 9dce285b70c157754d753203112cfef22770b1f9
Merge: c8ac18f2006b 941787b82982
Author: David S. Miller <davem@davemloft.net>
Date:   Mon Feb 9 13:20:53 2015 -0800

    Merge branch 'tipc-next'
    
    Richard Alpe says:
    
    ====================
    tipc: new compat layer for the legacy NL API
    
    This is a compatibility / transcoding layer for the old netlink API.
    It relies on the new netlink API to collect data or perform actions
    (dumpit / doit).
    
    The main benefit of this compat layer is that it removes a lot of
    complex code from the tipc core as only the new API needs to be able
    harness data or perform actions. I.e. the compat layer isn't concerned
    with locking or how the internal data-structures look. As long as the
    new API stays relatively intact the compat layer should be fine.
    
    The main challenge in this compat layer is the randomness of the legacy
    API. Some commands send binary data and some send ASCII data, some are
    very picky in optimizing there buffer sizes and some just don't care.
    Most legacy commands put there data in a single TLV (data container) but some
    segment the data into multiple TLV's. This list of randomness goes on and on..
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 941787b82982b3f33ac398c8c00035ddd0f8c514
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Mon Feb 9 09:50:19 2015 +0100

    tipc: remove tipc_snprintf
    
    tipc_snprintf() was heavily utilized by the old netlink API which no
    longer exists (now netlink compat).
    
    In this patch we swap tipc_snprintf() to the identical scnprintf() in
    the only remaining occurrence.
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 22ae7cff509f3bb22caaa0003f67eeb93d338fed
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Mon Feb 9 09:50:18 2015 +0100

    tipc: nl compat add noop and remove legacy nl framework
    
    Add TIPC_CMD_NOOP to compat layer and remove the old framework.
    
    All legacy nl commands are now converted to the compat layer in
    netlink_compat.c.
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5a81a6377b6083fccffdfb7a21ec080b8d58475b
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Mon Feb 9 09:50:17 2015 +0100

    tipc: convert legacy nl stats show to nl compat
    
    Convert TIPC_CMD_SHOW_STATS to compat layer. This command does not
    have any counterpart in the new API, meaning it now solely exists as a
    function in the compat layer.
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3c26181c5b1b0b49e147bac8a8d012234f813a5e
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Mon Feb 9 09:50:16 2015 +0100

    tipc: convert legacy nl net id get to nl compat
    
    Convert TIPC_CMD_GET_NETID to compat dumpit.
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 964f9501c1910c0835eee3cf870ba5aa44db1241
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Mon Feb 9 09:50:15 2015 +0100

    tipc: convert legacy nl net id set to nl compat
    
    Convert TIPC_CMD_SET_NETID to compat doit.
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d7cc75d3cb6beac88a2bd041a7700154b73a989d
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Mon Feb 9 09:50:14 2015 +0100

    tipc: convert legacy nl node addr set to nl compat
    
    Convert TIPC_CMD_SET_NODE_ADDR to compat doit.
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4b28cb581dd0df8d8ff19151f39683f641e576ba
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Mon Feb 9 09:50:13 2015 +0100

    tipc: convert legacy nl node dump to nl compat
    
    Convert TIPC_CMD_GET_NODES to compat dumpit and remove global node
    counter solely used by the legacy API.
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5bfc335a637ad4aecededb67b0075aae72a6dbb3
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Mon Feb 9 09:50:12 2015 +0100

    tipc: convert legacy nl media dump to nl compat
    
    Convert TIPC_CMD_GET_MEDIA_NAMES to compat dumpit.
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 487d2a3a1326d339ce273ffbcd03247f2b7b052e
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Mon Feb 9 09:50:11 2015 +0100

    tipc: convert legacy nl socket dump to nl compat
    
    Convert socket (port) listing to compat dumpit call. If a socket
    (port) has publications a second dumpit call is issued to collect them
    and format then into the legacy buffer before continuing to process
    the sockets (ports).
    
    Command converted in this patch:
    TIPC_CMD_SHOW_PORTS
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 44a8ae94fd5525aa06a8c71cb52efbc418fb8b7c
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Mon Feb 9 09:50:10 2015 +0100

    tipc: convert legacy nl name table dump to nl compat
    
    Add functionality for printing a dump header and convert
    TIPC_CMD_SHOW_NAME_TABLE to compat dumpit.
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1817877b3cd7b4dc73e4a1514d5f48eaa3989ec9
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Mon Feb 9 09:50:09 2015 +0100

    tipc: convert legacy nl link stat reset to nl compat
    
    Convert TIPC_CMD_RESET_LINK_STATS to compat doit.
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 37e2d4843f9e2f5aad6bf3be5dad174f2838f375
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Mon Feb 9 09:50:08 2015 +0100

    tipc: convert legacy nl link prop set to nl compat
    
    Convert setting of link proprieties to compat doit calls.
    
    Commands converted in this patch:
    TIPC_CMD_SET_LINK_TOL
    TIPC_CMD_SET_LINK_PRI
    TIPC_CMD_SET_LINK_WINDOW
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 357ebdbfca0baa9a8d8d85307393e9ec3406affc
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Mon Feb 9 09:50:07 2015 +0100

    tipc: convert legacy nl link dump to nl compat
    
    Convert TIPC_CMD_GET_LINKS to compat dumpit and remove global link
    counter solely used by the legacy API.
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f2b3b2d4ccbf9666f5f42a21347cd1aaa532b2fa
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Mon Feb 9 09:50:06 2015 +0100

    tipc: convert legacy nl link stat to nl compat
    
    Add functionality for safely appending string data to a TLV without
    keeping write count in the caller.
    
    Convert TIPC_CMD_SHOW_LINK_STATS to compat dumpit.
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9ab154658a7ff2c5076607e02f18581c6859fc2a
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Mon Feb 9 09:50:05 2015 +0100

    tipc: convert legacy nl bearer enable/disable to nl compat
    
    Introduce a framework for transcoding legacy nl action into actions
    (.doit) calls from the new nl API. This is done by converting the
    incoming TLV data into netlink data with nested netlink attributes.
    Unfortunately due to the randomness of the legacy API we can't do this
    generically so each legacy netlink command requires a specific
    transcoding recipe. In this case for bearer enable and bearer disable.
    
    Convert TIPC_CMD_ENABLE_BEARER and TIPC_CMD_DISABLE_BEARER into doit
    compat calls.
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d0796d1ef63deb38147729664691ba3090930b26
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Mon Feb 9 09:50:04 2015 +0100

    tipc: convert legacy nl bearer dump to nl compat
    
    Introduce a framework for dumping netlink data from the new netlink
    API and formatting it to the old legacy API format. This is done by
    looping the dump data and calling a format handler for each entity, in
    this case a bearer.
    
    We dump until either all data is dumped or we reach the limited buffer
    size of the legacy API. Remember, the legacy API doesn't scale.
    
    In this commit we convert TIPC_CMD_GET_BEARER_NAMES to use the compat
    layer.
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit bfb3e5dd8dfd84dfd13649393abab63e43267b00
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Mon Feb 9 09:50:03 2015 +0100

    tipc: move and rename the legacy nl api to "nl compat"
    
    The new netlink API is no longer "v2" but rather the standard API and
    the legacy API is now "nl compat". We split them into separate
    start/stop and put them in different files in order to further
    distinguish them.
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 51a00daf7369b581e5241c5cae5924886deda261
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Sun Feb 8 11:10:50 2015 -0500

    tipc: fix bug in socket reception function
    
    In commit c637c1035534867b85b78b453c38c495b58e2c5a ("tipc: resolve race
    problem at unicast message reception") we introduced a time limit
    for how long the function tipc_sk_eneque() would be allowed to execute
    its loop. Unfortunately, the test for when this limit is passed was put
    in the wrong place, resulting in a lost message when the test is true.
    
    We fix this by moving the test to before we dequeue the next buffer
    from the input queue.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7d231e3f762b4cbb0d91f284f3aa6d47a8e83e28
Merge: 4134069f3ea6 cb1b728096f5
Author: David S. Miller <davem@davemloft.net>
Date:   Thu Feb 5 16:00:06 2015 -0800

    Merge branch 'tipc-next'
    
    Jon Maloy says:
    
    ====================
    tipc: resolve message disordering problem
    
    When TIPC receives messages from multi-threaded device drivers it may
    occasionally deliver messages to their destination sockets in the wrong
    order. This happens despite correct resequencing at the link layer,
    because the upcall path from link to socket is not protected by any
    locks.
    
    These commits solve this problem by introducing an 'input' message
    queue in each link, through which messages must be delivered to the
    upper layers.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit cb1b728096f54e7408d60fb571944bed00c5b771
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Feb 5 08:36:44 2015 -0500

    tipc: eliminate race condition at multicast reception
    
    In a previous commit in this series we resolved a race problem during
    unicast message reception.
    
    Here, we resolve the same problem at multicast reception. We apply the
    same technique: an input queue serializing the delivery of arriving
    buffers. The main difference is that here we do it in two steps.
    First, the broadcast link feeds arriving buffers into the tail of an
    arrival queue, which head is consumed at the socket level, and where
    destination lookup is performed. Second, if the lookup is successful,
    the resulting buffer clones are fed into a second queue, the input
    queue. This queue is consumed at reception in the socket just like
    in the unicast case. Both queues are protected by the same lock, -the
    one of the input queue.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3c724acdd5049907555a831f814bfd5927c3350c
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Feb 5 08:36:43 2015 -0500

    tipc: simplify socket multicast reception
    
    The structure 'tipc_port_list' is used to collect port numbers
    representing multicast destination socket on a receiving node.
    The list is not based on a standard linked list, and is in reality
    optimized for the uncommon case that there are more than one
    multicast destinations per node. This makes the list handling
    unecessarily complex, and as a consequence, even the socket
    multicast reception becomes more complex.
    
    In this commit, we replace 'tipc_port_list' with a new 'struct
    tipc_plist', which is based on a standard list. We give the new
    list stack (push/pop) semantics, someting that simplifies
    the implementation of the function tipc_sk_mcast_rcv().
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 708ac32cb5e1305cf3670e147eedcc699d110ed0
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Feb 5 08:36:42 2015 -0500

    tipc: simplify connection abort notifications when links break
    
    The new input message queue in struct tipc_link can be used for
    delivering connection abort messages to subscribing sockets. This
    makes it possible to simplify the code for such cases.
    
    This commit removes the temporary list in tipc_node_unlock()
    used for transforming abort subscriptions to messages. Instead, the
    abort messages are now created at the moment of lost contact, and
    then added to the last failed link's generic input queue for delivery
    to the sockets concerned.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c637c1035534867b85b78b453c38c495b58e2c5a
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Feb 5 08:36:41 2015 -0500

    tipc: resolve race problem at unicast message reception
    
    TIPC handles message cardinality and sequencing at the link layer,
    before passing messages upwards to the destination sockets. During the
    upcall from link to socket no locks are held. It is therefore possible,
    and we see it happen occasionally, that messages arriving in different
    threads and delivered in sequence still bypass each other before they
    reach the destination socket. This must not happen, since it violates
    the sequentiality guarantee.
    
    We solve this by adding a new input buffer queue to the link structure.
    Arriving messages are added safely to the tail of that queue by the
    link, while the head of the queue is consumed, also safely, by the
    receiving socket. Sequentiality is secured per socket by only allowing
    buffers to be dequeued inside the socket lock. Since there may be multiple
    simultaneous readers of the queue, we use a 'filter' parameter to reduce
    the risk that they peek the same buffer from the queue, hence also
    reducing the risk of contention on the receiving socket locks.
    
    This solves the sequentiality problem, and seems to cause no measurable
    performance degradation.
    
    A nice side effect of this change is that lock handling in the functions
    tipc_rcv() and tipc_bcast_rcv() now becomes uniform, something that
    will enable future simplifications of those functions.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 94153e36e709e78fc4e1f93dc4e4da785690c7d1
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Feb 5 08:36:40 2015 -0500

    tipc: use existing sk_write_queue for outgoing packet chain
    
    The list for outgoing traffic buffers from a socket is currently
    allocated on the stack. This forces us to initialize the queue for
    each sent message, something costing extra CPU cycles in the most
    critical data path. Later in this series we will introduce a new
    safe input buffer queue, something that would force us to initialize
    even the spinlock of the outgoing queue. A closer analysis reveals
    that the queue always is filled and emptied within the same lock_sock()
    session. It is therefore safe to use a queue aggregated in the socket
    itself for this purpose. Since there already exists a queue for this
    in struct sock, sk_write_queue, we introduce use of that queue in
    this commit.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e3a77561e7d326e18881ef3cb84807892b353459
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Feb 5 08:36:39 2015 -0500

    tipc: split up function tipc_msg_eval()
    
    The function tipc_msg_eval() is in reality doing two related, but
    different tasks. First it tries to find a new destination for named
    messages, in case there was no first lookup, or if the first lookup
    failed. Second, it does what its name suggests, evaluating the validity
    of the message and its destination, and returning an appropriate error
    code depending on the result.
    
    This is confusing, and in this commit we choose to break it up into two
    functions. A new function, tipc_msg_lookup_dest(), first attempts to find
    a new destination, if the message is of the right type. If this lookup
    fails, or if the message should not be subject to a second lookup, the
    already existing tipc_msg_reverse() is called. This function performs
    prepares the message for rejection, if applicable.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d570d86497eeb11410b1c096d82ade11bcdd966c
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Feb 5 08:36:38 2015 -0500

    tipc: enqueue arrived buffers in socket in separate function
    
    The code for enqueuing arriving buffers in the function tipc_sk_rcv()
    contains long code lines and currently goes to two indentation levels.
    As a cosmetic preparaton for the next commits, we break it out into
    a separate function.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1186adf7df04e3b4298943fe89d9741ab42e30ff
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Feb 5 08:36:37 2015 -0500

    tipc: simplify message forwarding and rejection in socket layer
    
    Despite recent improvements, the handling of error codes and return
    values at reception of messages in the socket layer is still confusing.
    
    In this commit, we try to make it more comprehensible. First, we
    separate between the return values coming from the functions called
    by tipc_sk_rcv(), -those are TIPC specific error codes, and the
    return values returned by tipc_sk_rcv() itself. Second, we don't
    use the returned TIPC error code as indication for whether a buffer
    should be forwarded/rejected or not; instead we use the buffer pointer
    passed along with filter_msg(). This separation is necessary because
    we sometimes want to forward messages even when there is no error
    (i.e., protocol messages and successfully secondary looked up data
    messages).
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c5898636c440da91d58f10beac00f073e68378df
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Feb 5 08:36:36 2015 -0500

    tipc: reduce usage of context info in socket and link
    
    The most common usage of namespace information is when we fetch the
    own node addess from the net structure. This leads to a lot of
    passing around of a parameter of type 'struct net *' between
    functions just to make them able to obtain this address.
    
    However, in many cases this is unnecessary. The own node address
    is readily available as a member of both struct tipc_sock and
    tipc_link, and can be fetched from there instead.
    The fact that the vast majority of functions in socket.c and link.c
    anyway are maintaining a pointer to their respective base structures
    makes this option even more compelling.
    
    In this commit, we introduce the inline functions tsk_own_node()
    and link_own_node() to make it easy for functions to fetch the node
    address from those structs instead of having to pass along and
    dereference the namespace struct.
    
    In particular, we make calls to the msg_xx() functions in msg.{h,c}
    context independent by directly passing them the own node address
    as parameter when needed. Those functions should be regarded as
    leaves in the code dependency tree, and it is hence desirable to
    keep them namspace unaware.
    
    Apart from a potential positive effect on cache behavior, these
    changes make it easier to introduce the changes that will follow
    later in this series.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 251c005a6403933b3405fdc15fca4355e7590b42
Merge: 940288b6a560 af9946fde998
Author: David S. Miller <davem@davemloft.net>
Date:   Wed Feb 4 16:09:38 2015 -0800

    Merge branch 'tipc-next'
    
    Jon Maloy says:
    
    ====================
    tipc: some small fixes
    
    During extensive testing and analysis of running dual links between
    nodes, we have encountered some issues that potentially may cause
    problems. We choose to fix those proactively in this series.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit af9946fde9983e1312e5bcda7d1658fee2a3cb1d
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Tue Feb 3 08:59:20 2015 -0500

    tipc: separate link starting event from link timeout event
    
    When a new link instance is created, it is trigged to start by
    sending it a TIPC_STARTING_EVT, whereafter a regular link
    reset is applied to it.
    
    The starting event is codewise treated as a timeout event, and prompts
    a link RESET message to be sent to the peer node, carrying a link
    session identifier. The later link_reset() call nudges this session
    identifier, whereafter all subsequent RESET messages will be sent out
    with the new identifier. The latter session number overrides the former,
    causing the peer to unconditionally accept it irrespective of its
    current working state.
    
    We don't think that this causes any problem, but it is not in accordance
    with the protocol spec, and may cause confusion when debugging TIPC
    sessions.
    
    To avoid this, we make the starting event distinct from the
    subsequent timeout events, by not allowing the former to send
    out any RESET message. This eliminates the described problem.
    
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b45db71b525d75e520d7ef46c796f49c5d26c07c
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Tue Feb 3 08:59:19 2015 -0500

    tipc: eliminate race during node creation
    
    Instances of struct node are created in the function tipc_disc_rcv()
    under the assumption that there is no race between received discovery
    messages arriving from the same node. This assumption is wrong.
    When we use more than one bearer, it is possible that discovery
    messages from the same node arrive at the same moment, resulting in
    creation of two instances of struct tipc_node. This may later cause
    confusion during link establishment, and may result in one of the links
    never becoming activated.
    
    We fix this by making lookup and potential creation of nodes atomic.
    Instead of first looking up the node, and in case of failure, create it,
    we now start with looking up the node inside node_link_create(), and
    return a reference to that one if found. Otherwise, we go ahead and
    create the node as we did before.
    
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7d24dcdb3f3132e0ec36f19c49bd004bc874b8aa
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Tue Feb 3 08:59:18 2015 -0500

    tipc: avoid stale link after aborted failover
    
    During link failover it may happen that the remaining link goes
    down while it is still in the process of taking over traffic
    from a previously failed link. When this happens, we currently
    abort the failover procedure and reset the first failed link to
    non-failover mode, so that it will be ready to re-establish
    contact with its peer when it comes available.
    
    However, if the first link goes down because its bearer was manually
    disabled, it is not enough to reset it; it must also be deleted;
    which is supposed to happen when the failover procedure is finished.
    Otherwise it will remain a zombie link: attached to the owner node
    structure, in mode LINK_STOPPED, and permanently blocking any re-
    establishing of the link to the peer via the interface in question.
    
    We fix this by amending the failover abort procedure. Apart from
    resetting the link to non-failover state, we test if the link is
    also in LINK_STOPPED mode. If so, we delete it, using the conditional
    tipc_link_delete() function introduced in the previous commit.
    
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2d72d49553d8de113d4eb1f69b2291f449a4c6bc
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Tue Feb 3 08:59:17 2015 -0500

    tipc: add reference count to struct tipc_link
    
    When a bearer is disabled, all pertaining links will be reset and
    deleted. However, if there is a second active link towards a killed
    link's destination, the delete has to be postponed until the failover
    is finished. During this interval, we currently put the link in zombie
    mode, i.e., we take it out of traffic, delete its timer, but leave it
    attached to the owner node structure until all missing packets have
    been received.  When this is done, we detach the link from its node
    and delete it, assuming that the synchronous timer deletion that was
    initiated earlier in a different thread has finished.
    
    This is unsafe, as the failover may finish before del_timer_sync()
    has returned in the other thread.
    
    We fix this by adding an atomic reference counter of type kref in
    struct tipc_link. The counter keeps track of the references kept
    to the link by the owner node and the timer. We then do a conditional
    delete, based on the reference counter, both after the failover has
    been finished and when the timer expires, if applicable. Whoever
    comes last, will actually delete the link. This approach also implies
    that we can make the deletion of the timer asynchronous.
    
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f25dcc7687d42a72de18aa41b04990a24c9e77c7
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Fri Nov 28 15:52:29 2014 -0500

    tipc: tipc ->sendmsg() conversion
    
    This one needs to copy the same data from user potentially more than
    once.  Sadly, MTU changes can trigger that ;-/
    
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit 21226abb4e9f14d88238964d89b279e461ddc30c
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Fri Nov 28 15:48:29 2014 -0500

    net: switch memcpy_fromiovec()/memcpy_fromiovecend() users to copy_from_iter()
    
    That takes care of the majority of ->sendmsg() instances - most of them
    via memcpy_to_msg() or assorted getfrag() callbacks.  One place where we
    still keep memcpy_fromiovecend() is tipc - there we potentially read the
    same data over and over; separate patch, that...
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit 08bfc9cb76e26d2489c401fb1d2de58d06fd1ded
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Thu Jan 22 17:10:32 2015 +0100

    flow_dissector: add tipc support
    
    The flows are hashed on the sending node address, which allows us
    to spread out the TIPC link processing to RPS enabled cores. There
    is no point to include the destination address in the hash as that
    will always be the same for all inbound links. We have experimented
    with a 3-tuple hash over [srcnode, sport, dport], but this showed to
    give slightly lower performance because of increased lock contention
    when the same link was handled by multiple cores.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3fa9cacd697eb26d99c59a8479d8a1b3d6311182
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Thu Jan 22 17:10:31 2015 +0100

    tipc: fix excessive network event logging
    
    If a large number of namespaces is spawned on a node and TIPC is
    enabled in each of these, the excessive printk tracing of network
    events will cause the system to grind down to a near halt.
    The traces are still of debug value, so instead of removing them
    completely we fix it by changing the link state and node availability
    logging debug traces.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d6e164e3215794f9920af69cd2c6794632773478
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Fri Jan 16 12:30:40 2015 +0100

    tipc: fix socket list regression in new nl api
    
    Commit 07f6c4bc (tipc: convert tipc reference table to use generic
    rhashtable) introduced a problem with port listing in the new netlink
    API. It broke the resume functionality resulting in a never ending
    loop. This was caused by starting with the first hash table every time
    subsequently never returning an empty skb (terminating).
    
    This patch fixes the resume mechanism by keeping a logical reference
    to the last hash table along with a logical reference to the socket
    (port) that didn't fit in the previous message.
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a6391a924cf5a16761ccd6b45094a7d5b9aeebac
Merge: 48c53db22032 c637dbcedf31
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Jan 15 11:17:37 2015 +1300

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Don't use uninitialized data in IPVS, from Dan Carpenter.
    
     2) conntrack race fixes from Pablo Neira Ayuso.
    
     3) Fix TX hangs with i40e, from Jesse Brandeburg.
    
     4) Fix budget return from poll calls in dnet and alx, from Eric
        Dumazet.
    
     5) Fix bugus "if (unlikely(x) < 0)" test in AF_PACKET, from Christoph
        Jaeger.
    
     6) Fix bug introduced by conversion to list_head in TIPC retransmit
        code, from Jon Paul Maloy.
    
     7) Don't use GFP_NOIO under spinlock in USB kaweth driver, from Alexey
        Khoroshilov.
    
     8) Fix bridge build with INET disabled, from Arnd Bergmann.
    
     9) Fix netlink array overrun for PROBE attributes in openvswitch, from
        Thomas Graf.
    
    10) Don't hold spinlock across synchronize_irq() in tg3 driver, from
        Prashant Sreedharan.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (44 commits)
      tg3: Release tp->lock before invoking synchronize_irq()
      tg3: tg3_reset_task() needs to use rtnl_lock to synchronize
      tg3: tg3_timer() should grab tp->lock before checking for tp->irq_sync
      team: avoid possible underflow of count_pending value for notify_peers and mcast_rejoin
      openvswitch: packet messages need their own probe attribtue
      i40e: adds FCoE configure option
      cxgb4vf: Fix queue allocation for 40G adapter
      netdevice: Add missing parentheses in macro
      bridge: only provide proxy ARP when CONFIG_INET is enabled
      neighbour: fix base_reachable_time(_ms) not effective immediatly when changed
      net: fec: fix MDIO bus assignement for dual fec SoC's
      xen-netfront: use different locks for Rx and Tx stats
      drivers: net: cpsw: fix multicast flush in dual emac mode
      cxgb4vf: Initialize mdio_addr before using it
      net: Corrected the comment describing the ndo operations to reflect the actual prototype for couple of operations
      usb/kaweth: use GFP_ATOMIC under spin_lock in usb_start_wait_urb()
      MAINTAINERS: add me as ibmveth maintainer
      tipc: fix bug in broadcast retransmit code
      update ip-sysctl.txt documentation (v2)
      net/at91_ether: prepare and unprepare clock
      ...

commit 357c4774b5b08878d980847f496af38869e7aad0
Author: Sasha Levin <sasha.levin@oracle.com>
Date:   Tue Jan 13 12:46:41 2015 -0500

    tipc: correctly handle releasing a not fully initialized sock
    
    Commit f2f9800d4955 "tipc: make tipc node table aware of net
    namespace" has added a dereference of sock->sk before making sure it's
    not NULL, which makes releasing a tipc socket NULL pointer dereference
    for sockets that are not fully initialized.
    
    Signed-off-by: Sasha Levin <sasha.levin@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3721e9c7c194f576fbd30926e98e0abb13c641b5
Author: Ying Xue <ying.xue@windriver.com>
Date:   Tue Jan 13 17:07:48 2015 +0800

    tipc: remove redundant timer defined in tipc_sock struct
    
    Remove the redundant timer defined in tipc_sock structure, instead we
    can directly reuse the sk_timer defined in sock structure.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 52e3ad9f011fe72620b2f7050227cd48fd295ad5
Merge: d2c60b1350c9 6f73d3b13dc5
Author: David S. Miller <davem@davemloft.net>
Date:   Tue Jan 13 14:01:06 2015 -0500

    Merge branch 'rhashtable-next'
    
    Ying Xue says:
    
    ====================
    remove nl_sk_hash_lock from netlink socket
    
    After tipc socket successfully avoids the involvement of an extra lock
    with rhashtable_lookup_insert(), it's possible for netlink socket to
    remove its hash socket lock now. But as netlink socket needs a compare
    function to look for an object, we first introduce a new function
    called rhashtable_lookup_compare_insert() in commit #1 which is
    implemented based on original rhashtable_lookup_insert(). We
    subsequently remove nl_sk_hash_lock from netlink socket with the new
    introduced function in commit #2. Lastly, as Thomas requested, we add
    commit #3 to indicate the implementation of what the grow and shrink
    decision function must enforce min/max shift.
    
    v2:
     As Thomas pointed out, there was a race between checking portid and
     then setting it in commit #2. Now use socket lock to make the process
     of both checking and setting portid atomic, and then eliminate the
     race.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d9fbfb94d07ff8feb1741c31a1dd80d4850b44cb
Merge: 45e81834a4a4 d49e204161af
Author: David S. Miller <davem@davemloft.net>
Date:   Mon Jan 12 16:24:39 2015 -0500

    Merge branch 'tipc-namespaces'
    
    Ying Xue says:
    
    ====================
    tipc: make tipc support namespace
    
    This patchset aims to add net namespace support for TIPC stack.
    
    Currently TIPC module declares the following global resources:
    - TIPC network idenfication number
    - TIPC node table
    - TIPC bearer list table
    - TIPC broadcast link
    - TIPC socket reference table
    - TIPC name service table
    - TIPC node address
    - TIPC service subscriber server
    - TIPC random value
    - TIPC netlink
    
    In order that TIPC is aware of namespace, above each resource must be
    allocated, initialized and destroyed inside per namespace. Therefore,
    the major works of this patchset are to isolate these global resources
    and make them private for each namespace. However, before these changes
    come true, some necessary preparation works must be first done: convert
    socket reference table with generic rhashtable, cleanup core.c and
    core.h files, remove unnecessary wrapper functions for kernel timer
    interfaces and so on.
    
    It should be noted that commit ##1 ("tipc: fix bug in broadcast
    retransmit code") was already submitted to 'net' tree, so please see
    below link:
    
    http://patchwork.ozlabs.org/patch/426717/
    
    Since it is prerequisite for the rest of the series to apply, I
    prepend them to the series.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d49e204161af6e47d8473423aa6856388c02f254
Author: Ying Xue <ying.xue@windriver.com>
Date:   Fri Jan 9 15:27:13 2015 +0800

    tipc: make netlink support net namespace
    
    Currently tipc module only allows users sitting on "init_net" namespace
    to configure it through netlink interface. But now almost each tipc
    component is able to be aware of net namespace, so it's time to open
    the permission for users residing in other namespaces, allowing them
    to configure their own tipc stack instance through netlink interface.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Tested-by: Tero Aho <Tero.Aho@coriant.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit bafa29e34185fb70496bfd604dc9e4071049f023
Author: Ying Xue <ying.xue@windriver.com>
Date:   Fri Jan 9 15:27:12 2015 +0800

    tipc: make tipc random value aware of net namespace
    
    After namespace is supported, each namespace should own its private
    random value. So the global variable representing the random value
    must be moved to tipc_net structure.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Tested-by: Tero Aho <Tero.Aho@coriant.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a62fbccecd62bacb4416fc427239f5b43b25d05e
Author: Ying Xue <ying.xue@windriver.com>
Date:   Fri Jan 9 15:27:11 2015 +0800

    tipc: make subscriber server support net namespace
    
    TIPC establishes one subscriber server which allows users to subscribe
    their interesting name service status. After tipc supports namespace,
    one dedicated tipc stack instance is created for each namespace, and
    each instance can be deemed as one independent TIPC node. As a result,
    subscriber server must be built for each namespace.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Tested-by: Tero Aho <Tero.Aho@coriant.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 347475395434abb2b61bf59c2952470f37072567
Author: Ying Xue <ying.xue@windriver.com>
Date:   Fri Jan 9 15:27:10 2015 +0800

    tipc: make tipc node address support net namespace
    
    If net namespace is supported in tipc, each namespace will be treated
    as a separate tipc node. Therefore, every namespace must own its
    private tipc node address. This means the "tipc_own_addr" global
    variable of node address must be moved to tipc_net structure to
    satisfy the requirement. It's turned out that users also can assign
    node address for every namespace.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Tested-by: Tero Aho <Tero.Aho@coriant.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4ac1c8d0ee9faf3a4be185cc4db1381fa0d81280
Author: Ying Xue <ying.xue@windriver.com>
Date:   Fri Jan 9 15:27:09 2015 +0800

    tipc: name tipc name table support net namespace
    
    TIPC name table is used to store the mapping relationship between
    TIPC service name and socket port ID. When tipc supports namespace,
    it allows users to publish service names only owned by a certain
    namespace. Therefore, every namespace must have its private name
    table to prevent service names published to one namespace from being
    contaminated by other service names in another namespace. Therefore,
    The name table global variable (ie, nametbl) and its lock must be
    moved to tipc_net structure, and a parameter of namespace must be
    added for necessary functions so that they can obtain name table
    variable defined in tipc_net structure.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Tested-by: Tero Aho <Tero.Aho@coriant.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e05b31f4bf8994d49322e9afb004ad479a129db0
Author: Ying Xue <ying.xue@windriver.com>
Date:   Fri Jan 9 15:27:08 2015 +0800

    tipc: make tipc socket support net namespace
    
    Now tipc socket table is statically allocated as a global variable.
    Through it, we can look up one socket instance with port ID, insert
    a new socket instance to the table, and delete a socket from the
    table. But when tipc supports net namespace, each namespace must own
    its specific socket table. So the global variable of socket table
    must be redefined in tipc_net structure. As a concequence, a new
    socket table will be allocated when a new namespace is created, and
    a socket table will be deallocated when namespace is destroyed.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Tested-by: Tero Aho <Tero.Aho@coriant.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1da465683a93142488a54a9038155f23d6349441
Author: Ying Xue <ying.xue@windriver.com>
Date:   Fri Jan 9 15:27:07 2015 +0800

    tipc: make tipc broadcast link support net namespace
    
    TIPC broadcast link is statically established and its relevant states
    are maintained with the global variables: "bcbearer", "bclink" and
    "bcl". Allowing different namespace to own different broadcast link
    instances, these variables must be moved to tipc_net structure and
    broadcast link instances would be allocated and initialized when
    namespace is created.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Tested-by: Tero Aho <Tero.Aho@coriant.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7f9f95d9d9bcdf253c4149a157b096958013eceb
Author: Ying Xue <ying.xue@windriver.com>
Date:   Fri Jan 9 15:27:06 2015 +0800

    tipc: make bearer list support net namespace
    
    Bearer list defined as a global variable is used to store bearer
    instances. When tipc supports net namespace, bearers created in
    one namespace must be isolated with others allocated in other
    namespaces, which requires us that the bearer list(bearer_list)
    must be moved to tipc_net structure. As a result, a net namespace
    pointer has to be passed to functions which access the bearer list.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Tested-by: Tero Aho <Tero.Aho@coriant.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f2f9800d4955a96d92896841d8ba9b04201deaa1
Author: Ying Xue <ying.xue@windriver.com>
Date:   Fri Jan 9 15:27:05 2015 +0800

    tipc: make tipc node table aware of net namespace
    
    Global variables associated with node table are below:
    - node table list (node_htable)
    - node hash table list (tipc_node_list)
    - node table lock (node_list_lock)
    - node number counter (tipc_num_nodes)
    - node link number counter (tipc_num_links)
    
    To make node table support namespace, above global variables must be
    moved to tipc_net structure in order to keep secret for different
    namespaces. As a consequence, these variables are allocated and
    initialized when namespace is created, and deallocated when namespace
    is destroyed. After the change, functions associated with these
    variables have to utilize a namespace pointer to access them. So
    adding namespace pointer as a parameter of these functions is the
    major change made in the commit.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Tested-by: Tero Aho <Tero.Aho@coriant.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c93d3baa24095887005647984cff5de8c63d3611
Author: Ying Xue <ying.xue@windriver.com>
Date:   Fri Jan 9 15:27:04 2015 +0800

    tipc: involve namespace infrastructure
    
    Involve namespace infrastructure, make the "tipc_net_id" global
    variable aware of per namespace, and rename it to "net_id". In
    order that the conversion can be successfully done, an instance
    of networking namespace must be passed to relevant functions,
    allowing them to access the "net_id" variable of per namespace.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Tested-by: Tero Aho <Tero.Aho@coriant.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 54fef04ad05f15984082c225fe47ce6af8ea1c5c
Author: Ying Xue <ying.xue@windriver.com>
Date:   Fri Jan 9 15:27:03 2015 +0800

    tipc: remove unused tipc_link_get_max_pkt routine
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Tested-by: Tero Aho <Tero.Aho@coriant.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f2f2a96a20d52d65aa79bd4019af43bbfb0e1528
Author: Ying Xue <ying.xue@windriver.com>
Date:   Fri Jan 9 15:27:02 2015 +0800

    tipc: feed tipc sock pointer to tipc_sk_timeout routine
    
    In order to make tipc socket table aware of namespace, a networking
    namespace instance must be passed to tipc_sk_lookup(), allowing it
    to look up tipc socket instance with a given port ID from a concrete
    socket table. However, as now tipc_sk_timeout() only has one port ID
    parameter and is not namespace aware, it's unable to obtain a correct
    socket instance through tipc_sk_lookup() just with a port ID,
    especially after namespace is completely supported.
    
    If port ID is replaced with socket instance as tipc_sk_timeout()'s
    parameter, it's unnecessary to look up socket table. But as the timer
    handler - tipc_sk_timeout() is run asynchronously, socket reference
    must be held before its timer is launched, and must be carefully
    checked to identify whether the socket reference needs to be put or
    not when its timer is terminated.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Tested-by: Tero Aho <Tero.Aho@coriant.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 859fc7c0cedca0f84dac471fa31e9512259e1ecd
Author: Ying Xue <ying.xue@windriver.com>
Date:   Fri Jan 9 15:27:01 2015 +0800

    tipc: cleanup core.c and core.h files
    
    Only the works of initializing and shutting down tipc module are done
    in core.h and core.c files, so all stuffs which are not closely
    associated with the two tasks should be moved to appropriate places.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Tested-by: Tero Aho <Tero.Aho@coriant.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2f55c43788df7358be8c6e78ae2a3d3268e7afb6
Author: Ying Xue <ying.xue@windriver.com>
Date:   Fri Jan 9 15:27:00 2015 +0800

    tipc: remove unnecessary wrapper functions of kernel timer APIs
    
    Not only some wrapper function like k_term_timer() is empty, but also
    some others including k_start_timer() and k_cancel_timer() don't return
    back any value to its caller, what's more, there is no any component
    in the kernel world to do such thing. Therefore, these timer interfaces
    defined in tipc module should be purged.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Tested-by: Tero Aho <Tero.Aho@coriant.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6b8326ed14683f641e1c4149197f23a48c7cee36
Author: Ying Xue <ying.xue@windriver.com>
Date:   Fri Jan 9 15:26:59 2015 +0800

    tipc: remove tipc_core_start/stop routines
    
    Remove redundant wrapper functions like tipc_core_start() and
    tipc_core_stop(), and directly move them to their callers, such
    as tipc_init() and tipc_exit(), having us clearly know what are
    really done in both initialization and deinitialzation functions.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Tested-by: Tero Aho <Tero.Aho@coriant.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 703068eee6dde2ab318048f976b6ebd7fd239a78
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Jan 9 15:26:58 2015 +0800

    tipc: fix bug in broadcast retransmit code
    
    In commit 58dc55f25631178ee74cd27185956a8f7dcb3e32 ("tipc: use generic
    SKB list APIs to manage link transmission queue") we replace all list
    traversal loops with the macros skb_queue_walk() or
    skb_queue_walk_safe(). While the previous loops were based on the
    assumption that the list was NULL-terminated, the standard macros
    stop when the iterator reaches the list head, which is non-NULL.
    
    In the function bclink_retransmit_pkt() this macro replacement has
    lead to a bug. When we receive a BCAST STATE_MSG we unconditionally
    call the function bclink_retransmit_pkt(), whether there really is
    anything to retransmit or not, assuming that the sequence number
    comparisons will lead to the correct behavior. However, if the
    transmission queue is empty, or if there are no eligible buffers in
    the transmission queue, we will by mistake pass the list head pointer
    to the function tipc_link_retransmit(). Since the list head is not a
    valid sk_buff, this leads to a crash.
    
    In this commit we fix this by only calling tipc_link_retransmit()
    if we actually found eligible buffers in the transmission queue.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 164167794c1f9f34264e3d9281385728b0d22018
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Jan 8 12:27:27 2015 -0500

    tipc: fix bug in broadcast retransmit code
    
    In commit 58dc55f25631178ee74cd27185956a8f7dcb3e32 ("tipc: use generic
    SKB list APIs to manage link transmission queue") we replace all list
    traversal loops with the macros skb_queue_walk() or
    skb_queue_walk_safe(). While the previous loops were based on the
    assumption that the list was NULL-terminated, the standard macros
    stop when the iterator reaches the list head, which is non-NULL.
    
    In the function bclink_retransmit_pkt() this macro replacement has
    lead to a bug. When we receive a BCAST STATE_MSG we unconditionally
    call the function bclink_retransmit_pkt(), whether there really is
    anything to retransmit or not, assuming that the sequence number
    comparisons will lead to the correct behavior. However, if the
    transmission queue is empty, or if there are no eligible buffers in
    the transmission queue, we will by mistake pass the list head pointer
    to the function tipc_link_retransmit(). Since the list head is not a
    valid sk_buff, this leads to a crash.
    
    In this commit we fix this by only calling tipc_link_retransmit()
    if we actually found eligible buffers in the transmission queue.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4a71d0548c9d51384977e986dff2c6f8395d8283
Merge: 7c1b70234ed4 07f6c4bc048a
Author: David S. Miller <davem@davemloft.net>
Date:   Thu Jan 8 19:47:19 2015 -0800

    Merge branch 'rhashtable-next'
    
    Ying Xue says:
    
    ====================
    Involve rhashtable_lookup_insert routine
    
    The series aims to involve rhashtable_lookup_insert() to guarantee
    that the process of lookup and insertion of an object from/into hash
    table is finished atomically, allowing rhashtable's users not to
    introduce an extra lock during search and insertion. For example,
    tipc socket is the first user benefiting from this enhancement.
    
    v2 changes:
     - fix the issue of waking up worker thread under a wrong condition in
       patch #2, which is pointed by Thomas.
     - move a comment from rhashtable_inser() to rhashtable_wakeup_worker()
       according to Thomas's suggestion in patch #2.
     - indent the third line of condition statement in
       rhashtable_wakeup_worker() to inner bracket in patch #2.
     - drop patch #3 of v1 series
     - fix an issue of being unable to remove an object from hash table in
       certain special case in patch #4.
     - involve a new patch #5 to avoid unnecessary wakeup for worker queue
       thread
     - involve a new patch #6 to initialize atomic "nelems" variable
     - adjust "nelem_hint" value from 256 to 192 avoiding to unnecessarily
       to shrink hash table from the beginning phase in patch #7.
    
    v1 changes:
     But before rhashtable_lookup_insert() is involved, the following
     optimizations need to be first done:
    - simplify rhashtable_lookup by reusing rhashtable_lookup_compare()
    - introduce rhashtable_wakeup_worker() to further reduce duplicated
      code in patch #2
    - fix an issue in patch #3
    - involve rhashtable_lookup_insert(). But in this version, we firstly
      use rhashtable_lookup() to search duplicate key in both old and new
      bucket table; secondly introduce another __rhashtable_insert() helper
      function to reduce the duplicated code between rhashtable_insert()
      and rhashtable_lookup_insert().
    - add patch #5 into the series as it depends on above patches. But in
      this version, no change is made comparing with its previous version.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 07f6c4bc048a7a8939c68a668bf77474890794c5
Author: Ying Xue <ying.xue@windriver.com>
Date:   Wed Jan 7 13:41:58 2015 +0800

    tipc: convert tipc reference table to use generic rhashtable
    
    As tipc reference table is statically allocated, its memory size
    requested on stack initialization stage is quite big even if the
    maximum port number is just restricted to 8191 currently, however,
    the number already becomes insufficient in practice. But if the
    maximum ports is allowed to its theory value - 2^32, its consumed
    memory size will reach a ridiculously unacceptable value. Apart from
    this, heavy tipc users spend a considerable amount of time in
    tipc_sk_get() due to the read-lock on ref_table_lock.
    
    If tipc reference table is converted with generic rhashtable, above
    mentioned both disadvantages would be resolved respectively: making
    use of the new resizable hash table can avoid locking on the lookup;
    smaller memory size is required at initial stage, for example, 256
    hash bucket slots are requested at the beginning phase instead of
    allocating the entire 8191 slots in old mode. The hash table will
    grow if entries exceeds 75% of table size up to a total table size
    of 1M, and it will automatically shrink if usage falls below 30%,
    but the minimum table size is allowed down to 256.
    
    Also converts ref_table_lock to a separate mutex to protect hash table
    mutations on write side. Lastly defers the release of the socket
    reference using call_rcu() to allow using an RCU read-side protected
    call to rhashtable_lookup().
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Erik Hugne <erik.hugne@ericsson.com>
    Cc: Thomas Graf <tgraf@suug.ch>
    Acked-by: Thomas Graf <tgraf@suug.ch>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 886eaa1fe668e75615a48df2ff68e23b762e31e8
Author: Fabian Frederick <fabf@skynet.be>
Date:   Thu Dec 25 12:05:50 2014 +0100

    tipc: replace 0 by NULL for pointers
    
    Fix sparse warning:
    net/tipc/link.c:1924:40: warning: Using plain integer as NULL pointer
    
    Signed-off-by: Fabian Frederick <fabf@skynet.be>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 340b6e59fbc6ac97469253315c96e952908c9c0d
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Wed Dec 10 09:46:54 2014 +0100

    tipc: fix broadcast wakeup contention after congestion
    
    commit 908344cdda80 ("tipc: fix bug in multicast congestion handling")
    introduced a race in the broadcast link wakeup functionality.
    
    This patch eliminates this broadcast link wakeup race caused by
    operation on the wakeup list without proper locking. If this race
    hit and corrupted the list all subsequent wakeup messages would be
    lost, resulting in a considerable memory leak.
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 023160bc8f100ad949ebaee0d3a1b7398d938171
Author: Ying Xue <ying.xue@windriver.com>
Date:   Tue Dec 9 15:17:56 2014 +0800

    tipc: avoid double lock 'spin_lock:&seq->lock'
    
    The commit fb9962f3cefe ("tipc: ensure all name sequences are properly
    protected with its lock") involves below errors:
    
    net/tipc/name_table.c:980 tipc_purge_publications() error: double lock 'spin_lock:&seq->lock'
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4988bb4a3f0b3b0273c21c6c52f2730f55693b42
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Wed Dec 3 16:58:40 2014 +0100

    tipc: fix missing spinlock init and nullptr oops
    
    commit 908344cdda80 ("tipc: fix bug in multicast congestion
    handling") introduced two bugs with the bclink wakeup
    function. This commit fixes the missing spinlock init for the
    waiting_sks list. We also eliminate the race condition
    between the waiting_sks length check/dequeue operations in
    tipc_bclink_wakeup_users by simply removing the redundant
    length check.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Acked-by: Tero Aho <Tero.Aho@coriant.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 88b17b6a22673715348cb6c99a00ff2a0a2a9f9e
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Wed Dec 3 14:44:44 2014 +0100

    tipc: drop tx side permission checks
    
    Part of the old remote management feature is a piece of code
    that checked permissions on the local system to see if a certain
    operation was permitted, and if so pass the command to a remote
    node. This serves no purpose after the removal of remote management
    with commit 5902385a2440 ("tipc: obsolete the remote management
    feature") so we remove it.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 66813d4d04101c6342d74006eb36b8b59554fd51
Merge: 60c04aecd8a7 97ede29e80ee
Author: David S. Miller <davem@davemloft.net>
Date:   Mon Dec 8 20:40:03 2014 -0500

    Merge branch 'tipc-next'
    
    Ying Xue says:
    
    ====================
    tipc: convert name table read-write lock to RCU
    
    Now TIPC name table is statically allocated and is protected with a
    Read-Write lock. To enhance the performance of TIPC name table lookup,
    we are going to involve RCU lock to protect the name table. As a
    consequence, it becomes lockless to concurrently look up name table on
    read side. However, before the conversion can be successfully made,
    the following two things must be first done:
    
    - change allocation way of name table from static to dynamic
    - fix several incorrect locking policy issues
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 97ede29e80eead50d8bd533cf163401b88c027be
Author: Ying Xue <ying.xue@windriver.com>
Date:   Tue Dec 2 15:00:30 2014 +0800

    tipc: convert name table read-write lock to RCU
    
    Convert tipc name table read-write lock to RCU. After this change,
    a new spin lock is used to protect name table on write side while
    RCU is applied on read side.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Tested-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 834caafa3e61f63805738376fa9c02dc0c1eb224
Author: Ying Xue <ying.xue@windriver.com>
Date:   Tue Dec 2 15:00:29 2014 +0800

    tipc: remove unnecessary INIT_LIST_HEAD
    
    When a list_head variable is seen as a new entry to be added to a
    list head, it's unnecessary to be initialized with INIT_LIST_HEAD().
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Tested-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5492390a9495bade807afca61eab860f852e33fa
Author: Ying Xue <ying.xue@windriver.com>
Date:   Tue Dec 2 15:00:28 2014 +0800

    tipc: simplify relationship between name table lock and node lock
    
    When tipc name sequence is published, name table lock is released
    before name sequence buffer is delivered to remote nodes through its
    underlying unicast links. However, when name sequence is withdrawn,
    the name table lock is held until the transmission of the removal
    message of name sequence is finished. During the process, node lock
    is nested in name table lock. To prevent node lock from being nested
    in name table lock, while withdrawing name, we should adopt the same
    locking policy of publishing name sequence: name table lock should
    be released before message is sent.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Tested-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3493d25cfb5eee9d0045c2720878a26dcbeafa73
Author: Ying Xue <ying.xue@windriver.com>
Date:   Tue Dec 2 15:00:27 2014 +0800

    tipc: any name table member must be protected under name table lock
    
    As tipc_nametbl_lock is used to protect name_table structure, the lock
    must be held while all members of name_table structure are accessed.
    However, the lock is not obtained while a member of name_table
    structure - local_publ_count is read in tipc_nametbl_publish(), as
    a consequence, an inconsistent value of local_publ_count might be got.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Tested-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit fb9962f3cefeba8c5addc96dceb8bc360062ab50
Author: Ying Xue <ying.xue@windriver.com>
Date:   Tue Dec 2 15:00:26 2014 +0800

    tipc: ensure all name sequences are properly protected with its lock
    
    TIPC internally created a name table which is used to store name
    sequences. Now there is a read-write lock - tipc_nametbl_lock to
    protect the table, and each name sequence saved in the table is
    protected with its private lock. When a name sequence is inserted
    or removed to or from the table, its members might need to change.
    Therefore, in normal case, the two locks must be held while TIPC
    operates the table. However, there are still several places where
    we only hold tipc_nametbl_lock without proprerly obtaining name
    sequence lock, which might cause the corruption of name sequence.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Tested-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 38622f41956f92a06f5b5e42e50746851110d970
Author: Ying Xue <ying.xue@windriver.com>
Date:   Tue Dec 2 15:00:25 2014 +0800

    tipc: ensure all name sequences are released when name table is stopped
    
    As TIPC subscriber server is terminated before name table, no user
    depends on subscription list of name sequence when name table is
    stopped. Therefore, all name sequences stored in name table should
    be released whatever their subscriptions lists are empty or not,
    otherwise, memory leak might happen.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Tested-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 993bfe5daf34c645a51348facdc7c28c55f488fe
Author: Ying Xue <ying.xue@windriver.com>
Date:   Tue Dec 2 15:00:24 2014 +0800

    tipc: make name table allocated dynamically
    
    Name table locking policy is going to be adjusted from read-write
    lock protection to RCU lock protection in the future commits. But
    its essential precondition is to convert the allocation way of name
    table from static to dynamic mode.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Tested-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1b61e70ad13e1c907f143c3b0a1694df640639c0
Author: Ying Xue <ying.xue@windriver.com>
Date:   Tue Dec 2 15:00:23 2014 +0800

    tipc: remove size variable from publ_list struct
    
    The size variable is introduced in publ_list struct to help us exactly
    calculate SKB buffer sizes needed by publications when all publications
    in name table are delivered in bulk in named_distribute(). But if
    publication SKB buffer size is assumed to MTU, the size variable in
    publ_list struct can be completely eliminated at the cost of wasting
    a bit memory space for last SKB.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Tero Aho <tero.aho@coriant.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Tested-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8b7f8a99906fc21c287ad63ad3a89cf662b0293e
Merge: 73cf0e923d68 a6ca10944384
Author: David S. Miller <davem@davemloft.net>
Date:   Wed Nov 26 12:30:23 2014 -0500

    Merge branch 'tipc-next'
    
    Ying Xue says:
    
    ====================
    standardize TIPC SKB queue operations
    
    Now the following SKB queues are created and maintained within internal
    TIPC stack:
    
    - link transmission queue
    - link deferred queue
    - link receive queue
    - socket outgoing packet chain
    - name table outgoing packet chain
    
    In order to manage above queues, TIPC stack declares a sk_buff pointer
    for each queue to record its head, and directly modifies "prev" and
    "next" SKB pointers of SKB structure when inserting or deleting a SKB
    to or from the queue. As these operations are pretty complex, they
    easily involve fatal mistakes. If these sk_buff pointers are replaced
    with sk_buff_head instances as queue heads and corresponding generic
    SKB list APIs are used to manage them, the entire TIPC code would
    become quite clean and readable. But before make the change, we need
    to clean up below redundant functionalities:
    
    - remove node subscribe infrastructure
    - remove protocol message queue
    - remove retransmission queue
    - clean up process of pushing packets in link layer
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a6ca109443842e7251c68451f8137ae68ae6d8a6
Author: Ying Xue <ying.xue@windriver.com>
Date:   Wed Nov 26 11:41:55 2014 +0800

    tipc: use generic SKB list APIs to manage TIPC outgoing packet chains
    
    Use standard SKB list APIs associated with struct sk_buff_head to
    manage socket outgoing packet chain and name table outgoing packet
    chain, having relevant code simpler and more readable.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f03273f1e2fc8a59c3831200dd1532cf29e37e35
Author: Ying Xue <ying.xue@windriver.com>
Date:   Wed Nov 26 11:41:54 2014 +0800

    tipc: use generic SKB list APIs to manage link receive queue
    
    Use standard SKB list APIs associated with struct sk_buff_head to
    manage link's receive queue to simplify its relevant code cemplexity.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit bc6fecd4098df2d21b056486e5b418c84be95032
Author: Ying Xue <ying.xue@windriver.com>
Date:   Wed Nov 26 11:41:53 2014 +0800

    tipc: use generic SKB list APIs to manage deferred queue of link
    
    Use standard SKB list APIs associated with struct sk_buff_head to
    manage link's deferred queue, simplifying relevant code.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 58dc55f25631178ee74cd27185956a8f7dcb3e32
Author: Ying Xue <ying.xue@windriver.com>
Date:   Wed Nov 26 11:41:52 2014 +0800

    tipc: use generic SKB list APIs to manage link transmission queue
    
    Use standard SKB list APIs associated with struct sk_buff_head to
    manage link transmission queue, having relevant code more clean.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 58d78b328a70f4b5ed1c00010499aaedb715ea5b
Author: Ying Xue <ying.xue@windriver.com>
Date:   Wed Nov 26 11:41:51 2014 +0800

    tipc: use skb_queue_walk_safe marco to simplify link_prepare_wakeup routine
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 99315ad43d92a8df0e4a30a0694336cdcdb7965f
Author: Ying Xue <ying.xue@windriver.com>
Date:   Wed Nov 26 11:41:50 2014 +0800

    tipc: remove unused between routine
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 58311d169083f1940c7ce64cb6bf736e2a023cd0
Author: Ying Xue <ying.xue@windriver.com>
Date:   Wed Nov 26 11:41:49 2014 +0800

    tipc: eliminate two pseudo message types of BUNDLE_OPEN and BUNDLE_CLOSED
    
    The pseudo message types of BUNDLE_CLOSED as well as BUNDLE_OPEN are
    used to flag whether or not more messages can be bundled into a data
    packet in the outgoing transmission queue. Obviously, no more messages
    can be appended after the packet has been sent and is waiting to be
    acknowledged and deleted. These message types do in reality represent
    a send-side local implementation flag, and are not defined as part of
    the protocol. It is therefore safe to move it to to where it belongs,
    that is, the control area (TIPC_SKB_CB) of the buffer.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 47b4c9a82f2ed0c00aa1c20899b41f54d6f8a07a
Author: Ying Xue <ying.xue@windriver.com>
Date:   Wed Nov 26 11:41:48 2014 +0800

    tipc: clean up the process of link pushing packets
    
    In original tipc_link_push_packet(), it pushes messages from protocol
    message queue, retransmission queue and next_out queue. But as the two
    first queues are removed, we can simplify its relevant code through
    deleting tipc_link_push_queue().
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7b6f087f98107617e0535a6ed378c561f1ae84d7
Author: Ying Xue <ying.xue@windriver.com>
Date:   Wed Nov 26 11:41:47 2014 +0800

    tipc: remove retransmission queue
    
    TIPC retransmission queue is intended to record which messages
    should be retransmitted when bearer is not congested. However,
    as the retransmission queue becomes useless with the removal of
    bearer congestion mechanism, it should be removed.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8965d250c28f588d2a6dca2a0b00e4bb895b58e0
Author: Ying Xue <ying.xue@windriver.com>
Date:   Wed Nov 26 11:41:46 2014 +0800

    tipc: remove protocol message queue
    
    TIPC protocol message queue is intended to save one protocol message
    when bearer is congested so that the message stored in the queue can
    be immediately transmitted when bearer congestion is released. However,
    as now the protocol queue has no mission any more with the removal of
    bearer congestion mechanism, it should be removed.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a8f48af587b0f257c49dce5b49a62554a4b8627e
Author: Ying Xue <ying.xue@windriver.com>
Date:   Wed Nov 26 11:41:45 2014 +0800

    tipc: remove node subscription infrastructure
    
    The node subscribe infrastructure represents a virtual base class, so
    its users, such as struct tipc_port and struct publication, can derive
    its implemented functionalities. However, after the removal of struct
    tipc_port, struct publication is left as its only single user now. So
    defining an abstract infrastructure for one user becomes no longer
    reasonable. If corresponding new functions associated with the
    infrastructure are moved to name_table.c file, the node subscription
    infrastructure can be removed as well.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4f0372150b1fbf2167cfe21d2e6eac1933fb36ac
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Mon Nov 24 14:24:54 2014 +0100

    tipc: add tipc_netlink.h to uapi Kbuild
    
    tipc_netlink.h is the user-space header for the new netlink api. It
    was accidentally left out of the uapi Kbuild list when the api was
    added.
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d8182804cfd6503e73dc1c0a409903412a389541
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Mon Nov 24 11:10:29 2014 +0100

    tipc: fix sparse warnings in new nl api
    
    Fix sparse warnings about non-static declaration of static functions
    in the new tipc netlink API.
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 45dcc687f764f89e1e7c41dace52b105494e5dbb
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Sat Nov 15 01:16:27 2014 -0500

    tipc_msg_build(): pass msghdr instead of its ->msg_iov
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit 562640f3c3fb64fca24253868dab6e900e305c46
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Sat Nov 15 01:13:43 2014 -0500

    tipc_sendmsg(): pass msghdr instead of its ->msg_iov
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit 49ed2617a06abacaccd46fa88ae14c333baa15f0
Merge: 7cc76f515082 1593123a6a49
Author: David S. Miller <davem@davemloft.net>
Date:   Fri Nov 21 15:01:35 2014 -0500

    Merge branch 'tipc-next'
    
    Richard Alpe says:
    
    ====================
    tipc: new netlink API
    
    v3
    The old API is not removed.
    
    The new API is separated from the old because of a bug in the old
    tipc-config utility using it. When adding commands to the existing
    genl_ops struct the get-family response message grows to a point where
    it overflows the small receive buffer in tipc-config, subsequently
    breaking the tool. Hence the two genl_family and genl_ops structs.
    
    The new headers are placed in a new file called tipc_netlink.h rather
    than added to tipc_config.h as they where in previous versions of this
    patchset.
    /v3
    
    v2
    Redesigned "socket list command" to address David Millers comments in
    net-next v1 of this patchset.
    
    Simply put the problem is that we can have an arbitrary amount of
    sockets with an arbitrary amount of associated publications. In the
    previous patchset this was solved by nesting as many publications as
    possible into a socket. If all didn't fit it sent the same socket again
    with the remaining publications. As David Miller pointed out this makes
    each message malformed as the receiver cannot by the data itself know if
    it has received a complete set or not. This was flagged outside of the
    data and the client did the reassembly.
    
    o socket 1
      o publ 1
      o publ 2
    o socket 1
      o publ 3
      o publ 4
    
    In this patchset this is divided into socket listing and publication
    listing to avoid having nested data of arbitrary size.
    
    TIPC_NL_SOCK_GET now dumps all sockets with any nested connection
    information. However, it no longer include publication information,
    only a HAS_PUBL flag to indicate whether the socket has publications or
    not. To compliment this there is a new command TIPC_NL_PUBL_GET which
    takes a socket as argument and dumps all associated publications.
    
    This means that on "top-level" the data is always complete. In the case
    of "tipc socket list" (new tipc-config -p) it first queries all sockets
    with TIPC_NL_SOCK_GET and if the socket is published it fetches the
    publications using TIPC_NL_PUBL_GET. This is slow for large amount of
    sockets with a low publication count (worst case). However, the
    integrity is preserved and there is no malformed messages.
    /v2
    
    This is a new netlink API for TIPC. It's intended to replace the
    existing ASCII API. It utilizes many of the standard netlink
    functionalities in the kernel, such as attribute nesting and
    input polices.
    
    There are a couple of reasons for this rewrite. The main and most
    easily justifiable is that the existing API doesn't scale.  Meaning
    that a TIPC cluster with a larger amount of nodes, publications or
    ports will rapidly exceed what the exiting API can handle. Resulting
    in truncated or corrupt responses. In addition to this, the existing
    ASCII API rarely uses "standard" kernel functions and has several
    tipc specific functions for sanity checking and string formating.
    
    The new API utilizes standard function for pushing data to socket
    buffers and netlink attribute nesting to logically group data.
    The new API can handle an arbitrary amount of data for things that
    are likely to scale up as the TIPC usage and/or cluster size
    increases.
    
    A new user-space tool has been developed to work with this new API.
    It is called "tipc" and is part of the "tipc-utils" package that
    comes with many Linux distributions.  The new "tipc" tool utilizes
    standard functions from libnl to format, send, receive and process
    messages. The tool has borrowed design philosophies from git and the
    ip tool. Making the syntax resemble that of ip whiles its strong
    modularity resembles that of git.
    
    The existing tool for managing TIPC, "tipc-config" remains in the
    package, but when built for kernels that has this new API it is
    replaced by a script-based wrapper that maps the old syntax to the
    new tool. This way, backwards compatibility is mostly preserved.
    
    MORE ABOUT THE CODE
    
    The main challenge here is to handle the case where the data is of
    arbitrary size. This was largely neglected in the old API design.
    For example when there is a lot of sockets that has a large amount of
    associated publications. In this specific case we can't assume that
    all ports nor for that matter all the publications can fit inside a
    single netlink message. Sending everything in one batch isn't an
    option as we need to yield for the socket layer to cope.
    
    This is solved by using the standard netlink callback for dumping
    data and releasing the locks when the netlink message is full. The
    dumping mechanism gets us back and we keep a reference (logical) to
    where we where when the message became full. This means that we are
    not "atomic", what is retrieved by user-space isn't a snapshot at a
    certain time but rather a continuously updated data set. In the case
    where we can't find our way back i.e. our logical reference are gone
    we set a standard flag (NLM_F_DUMP_INTR) to tell user-space that the
    dump was interrupted.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1593123a6a4914ccac4699d7f93cdf8057a7d822
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Thu Nov 20 10:29:20 2014 +0100

    tipc: add name table dump to new netlink api
    
    Add TIPC_NL_NAME_TABLE_GET command to the new tipc netlink API.
    
    This command supports dumping the name table of all nodes.
    
    Netlink logical layout of name table response message:
    -> name table
        -> publication
            -> type
            -> lower
            -> upper
            -> scope
            -> node
            -> ref
            -> key
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 27c21416727af73df45051acb05331c0f10e50f6
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Thu Nov 20 10:29:19 2014 +0100

    tipc: add net set to new netlink api
    
    Add TIPC_NL_NET_SET command to the new tipc netlink API.
    
    This command can set the network id and network (tipc) address.
    
    Netlink logical layout of network set message:
    -> net
         [ -> id ]
         [ -> address ]
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit fd3cf2ad519f73c2f7a46460ebedf32ad246520c
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Thu Nov 20 10:29:18 2014 +0100

    tipc: add net dump to new netlink api
    
    Add TIPC_NL_NET_GET command to the new tipc netlink API.
    
    This command dumps the network id of the node.
    
    Netlink logical layout of returned network data:
    -> net
        -> id
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3e4b6ab58d614934e7ca99bdf448089695d34ffa
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Thu Nov 20 10:29:17 2014 +0100

    tipc: add node get/dump to new netlink api
    
    Add TIPC_NL_NODE_GET to the new tipc netlink API.
    
    This command can dump the address and node status of all nodes in the
    tipc cluster.
    
    Netlink logical layout of returned node/address data:
    -> node
        -> address
        -> up flag
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1e55417d8fc6f6d93b1cc6995b911d48ded2adfb
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Thu Nov 20 10:29:16 2014 +0100

    tipc: add media set to new netlink api
    
    Add TIPC_NL_MEDIA_SET command to the new tipc netlink API.
    
    This command can set one or more link properties for a particular
    media.
    
    Netlink logical layout of bearer set message:
    -> media
        -> name
        -> link properties
            [ -> tolerance ]
            [ -> priority ]
            [ -> window ]
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 46f15c6794fb744bb7741d26143a85b9012c10d4
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Thu Nov 20 10:29:15 2014 +0100

    tipc: add media get/dump to new netlink api
    
    Add TIPC_NL_MEDIA_GET command to the new tipc netlink API.
    
    This command supports dumping all information about all defined
    media as well as getting all information about a specific media.
    
    The information about a media includes name and link properties.
    
    Netlink logical layout of media get response message:
    -> media
        -> name
        -> link properties
            -> tolerance
            -> priority
            -> window
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ae36342b50a91cff188e417201452dc075a8f444
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Thu Nov 20 10:29:14 2014 +0100

    tipc: add link stat reset to new netlink api
    
    Add TIPC_NL_LINK_RESET_STATS command to the new netlink API.
    
    This command resets the link statistics for a particular link.
    
    Netlink logical layout of link reset message:
    -> link
        -> name
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f96ce7a20d6972a834202f3cdd6a53fd0ee26a8e
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Thu Nov 20 10:29:13 2014 +0100

    tipc: add link set to new netlink api
    
    Add TIPC_NL_LINK_SET to the new tipc netlink API.
    
    This command can set one or more link properties for a particular
    link.
    
    Netlink logical layout of link set message:
    -> link
        -> name
        -> properties
            [ -> tolerance ]
            [ -> priority ]
            [ -> window ]
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7be57fc6918470ecacd16b89c0d4f73d8fc265c4
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Thu Nov 20 10:29:12 2014 +0100

    tipc: add link get/dump to new netlink api
    
    Add TIPC_NL_LINK_GET command to the new tipc netlink API.
    
    This command supports dumping all information about all links
    (including the broadcast link) or getting all information about a
    specific link (not the broadcast link).
    
    The information about a link includes name, transmission info,
    properties and link statistics.
    
    As the tipc broadcast link is special we unfortunately have to treat
    it specially. It is a deliberate decision not to abstract the
    broadcast link on this (API) level.
    
    Netlink logical layout of link response message:
        -> port
            -> name
            -> MTU
            -> RX
            -> TX
            -> up flag
            -> active flag
            -> properties
               -> priority
               -> tolerance
               -> window
            -> statistics
                -> rx_info
                -> rx_fragments
                -> rx_fragmented
                -> rx_bundles
                -> rx_bundled
                -> tx_info
                -> tx_fragments
                -> tx_fragmented
                -> tx_bundles
                -> tx_bundled
                -> msg_prof_tot
                -> msg_len_cnt
                -> msg_len_tot
                -> msg_len_p0
                -> msg_len_p1
                -> msg_len_p2
                -> msg_len_p3
                -> msg_len_p4
                -> msg_len_p5
                -> msg_len_p6
                -> rx_states
                -> rx_probes
                -> rx_nacks
                -> rx_deferred
                -> tx_states
                -> tx_probes
                -> tx_nacks
                -> tx_acks
                -> retransmitted
                -> duplicates
                -> link_congs
                -> max_queue
                -> avg_queue
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1a1a143daf84db95dd7212086042004a3abb7bc2
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Thu Nov 20 10:29:11 2014 +0100

    tipc: add publication dump to new netlink api
    
    Add TIPC_NL_PUBL_GET command to the new tipc netlink API.
    
    This command supports dumping of all publications for a specific
    socket.
    
    Netlink logical layout of request message:
        -> socket
            -> reference
    
    Netlink logical layout of response message:
        -> publication
            -> type
            -> lower
            -> upper
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 34b78a127c4fd57cf3d5c64031693d10a8e0fae1
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Thu Nov 20 10:29:10 2014 +0100

    tipc: add sock dump to new netlink api
    
    Add TIPC_NL_SOCK_GET command to the new tipc netlink API.
    
    This command supports dumping of all available sockets with their
    associated connection or publication(s). It could be extended to reply
    with a single socket if the NLM_F_DUMP isn't set.
    
    The information about a socket includes reference, address, connection
    information / publication information.
    
    Netlink logical layout of response message:
    -> socket
        -> reference
        -> address
        [
        -> connection
            -> node
            -> socket
            [
            -> connected flag
            -> type
            -> instance
            ]
        ]
        [
        -> publication flag
        ]
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 315c00bc9f2bd17f7ad7ed8119ca49b1125af507
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Thu Nov 20 10:29:09 2014 +0100

    tipc: add bearer set to new netlink api
    
    Add TIPC_NL_BEARER_SET command to the new tipc netlink API.
    
    This command can set one or more link properties for a particular
    bearer.
    
    Netlink logical layout of bearer set message:
    -> bearer
        -> name
        -> link properties
            [ -> tolerance ]
            [ -> priority ]
            [ -> window ]
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 35b9dd7607f049466a66427e58818b29aeae9ea7
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Thu Nov 20 10:29:08 2014 +0100

    tipc: add bearer get/dump to new netlink api
    
    Add TIPC_NL_BEARER_GET command to the new tipc netlink API.
    
    This command supports dumping all data about all bearers or getting
    all information about a specific bearer.
    
    The information about a bearer includes name, link priorities and
    domain.
    
    Netlink logical layout of bearer get message:
    -> bearer
        -> name
    
    Netlink logical layout of returned bearer information:
    -> bearer
        -> name
        -> link properties
            -> priority
            -> tolerance
            -> window
        -> domain
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0655f6a8635b1b66f2434d5556b1044c14b1ccaf
Author: Richard Alpe <richard.alpe@ericsson.com>
Date:   Thu Nov 20 10:29:07 2014 +0100

    tipc: add bearer disable/enable to new netlink api
    
    A new netlink API for tipc that can disable or enable a tipc bearer.
    
    The new API is separated from the old API because of a bug in the
    user space client (tipc-config). The problem is that older versions
    of tipc-config has a very low receive limit and adding commands to
    the legacy genl_opts struct causes the ctrl_getfamily() response
    message to grow, subsequently breaking the tool.
    
    The new API utilizes netlink policies for input validation. Where the
    top-level netlink attributes are tipc-logical entities, like bearer.
    The top level entities then contain nested attributes. In this case
    a name, nested link properties and a domain.
    
    Netlink commands implemented in this patch:
    TIPC_NL_BEARER_ENABLE
    TIPC_NL_BEARER_DISABLE
    
    Netlink logical layout of bearer enable message:
    -> bearer
        -> name
        [ -> domain ]
        [
        -> properties
            -> priority
        ]
    
    Netlink logical layout of bearer disable message:
    -> bearer
        -> name
    
    Signed-off-by: Richard Alpe <richard.alpe@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0372bf5c096217447157d41c3eee1fab1bac6c7e
Author: Holger Brunck <holger.brunck@keymile.com>
Date:   Fri Nov 14 18:33:19 2014 +0100

    tipc: allow one link per bearer to neighboring nodes
    
    There is no reason to limit the amount of possible links to a
    neighboring node to 2. If we have more then two bearers we can also
    establish more links.
    
    Signed-off-by: Holger Brunck <holger.brunck@keymile.com>
    Reviewed-By: Jon Maloy <jon.maloy@ericsson.com>
    cc: Ying Xue <ying.xue@windriver.com>
    cc: Erik Hugne <erik.hugne@ericsson.com>
    cc: netdev@vger.kernel.org
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 96798a1735c430afca60cf0563c93a5973b3edf0
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Oct 17 15:25:28 2014 -0400

    tipc: fix bug in bundled buffer reception
    
    [ Upstream commit 643566d4b47e2956110e79c0e6f65db9b9ea42c6 ]
    
    In commit ec8a2e5621db2da24badb3969eda7fd359e1869f ("tipc: same receive
    code path for connection protocol and data messages") we omitted the
    the possiblilty that an arriving message extracted from a bundle buffer
    may be a multicast message. Such messages need to be to be delivered to
    the socket via a separate function, tipc_sk_mcast_rcv(). As a result,
    small multicast messages arriving as members of a bundle buffer will be
    silently dropped.
    
    This commit corrects the error by considering this case in the function
    tipc_link_bundle_rcv().
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b2ad5e5fcc7d2385ac7dcf0617a4b22f52245086
Author: stephen hemminger <stephen@networkplumber.org>
Date:   Wed Oct 29 22:58:51 2014 -0700

    tipc: spelling errors
    
    Signed-off-by: Stephen Hemminger <stephen@networkplumber.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1a194c2d59c55c37cb4c0c459d5418071a141341
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Oct 20 14:46:35 2014 +0800

    tipc: fix lockdep warning when intra-node messages are delivered
    
    When running tipcTC&tipcTS test suite, below lockdep unsafe locking
    scenario is reported:
    
    [ 1109.997854]
    [ 1109.997988] =================================
    [ 1109.998290] [ INFO: inconsistent lock state ]
    [ 1109.998575] 3.17.0-rc1+ #113 Not tainted
    [ 1109.998762] ---------------------------------
    [ 1109.998762] inconsistent {SOFTIRQ-ON-W} -> {IN-SOFTIRQ-W} usage.
    [ 1109.998762] swapper/7/0 [HC0[0]:SC1[1]:HE1:SE0] takes:
    [ 1109.998762]  (slock-AF_TIPC){+.?...}, at: [<ffffffffa0011969>] tipc_sk_rcv+0x49/0x2b0 [tipc]
    [ 1109.998762] {SOFTIRQ-ON-W} state was registered at:
    [ 1109.998762]   [<ffffffff810a4770>] __lock_acquire+0x6a0/0x1d80
    [ 1109.998762]   [<ffffffff810a6555>] lock_acquire+0x95/0x1e0
    [ 1109.998762]   [<ffffffff81a2d1ce>] _raw_spin_lock+0x3e/0x80
    [ 1109.998762]   [<ffffffffa0011969>] tipc_sk_rcv+0x49/0x2b0 [tipc]
    [ 1109.998762]   [<ffffffffa0004fe8>] tipc_link_xmit+0xa8/0xc0 [tipc]
    [ 1109.998762]   [<ffffffffa000ec6f>] tipc_sendmsg+0x15f/0x550 [tipc]
    [ 1109.998762]   [<ffffffffa000f165>] tipc_connect+0x105/0x140 [tipc]
    [ 1109.998762]   [<ffffffff817676ee>] SYSC_connect+0xae/0xc0
    [ 1109.998762]   [<ffffffff81767b7e>] SyS_connect+0xe/0x10
    [ 1109.998762]   [<ffffffff817a9788>] compat_SyS_socketcall+0xb8/0x200
    [ 1109.998762]   [<ffffffff81a306e5>] sysenter_dispatch+0x7/0x1f
    [ 1109.998762] irq event stamp: 241060
    [ 1109.998762] hardirqs last  enabled at (241060): [<ffffffff8105a4ad>] __local_bh_enable_ip+0x6d/0xd0
    [ 1109.998762] hardirqs last disabled at (241059): [<ffffffff8105a46f>] __local_bh_enable_ip+0x2f/0xd0
    [ 1109.998762] softirqs last  enabled at (241020): [<ffffffff81059a52>] _local_bh_enable+0x22/0x50
    [ 1109.998762] softirqs last disabled at (241021): [<ffffffff8105a626>] irq_exit+0x96/0xc0
    [ 1109.998762]
    [ 1109.998762] other info that might help us debug this:
    [ 1109.998762]  Possible unsafe locking scenario:
    [ 1109.998762]
    [ 1109.998762]        CPU0
    [ 1109.998762]        ----
    [ 1109.998762]   lock(slock-AF_TIPC);
    [ 1109.998762]   <Interrupt>
    [ 1109.998762]     lock(slock-AF_TIPC);
    [ 1109.998762]
    [ 1109.998762]  *** DEADLOCK ***
    [ 1109.998762]
    [ 1109.998762] 2 locks held by swapper/7/0:
    [ 1109.998762]  #0:  (rcu_read_lock){......}, at: [<ffffffff81782dc9>] __netif_receive_skb_core+0x69/0xb70
    [ 1109.998762]  #1:  (rcu_read_lock){......}, at: [<ffffffffa0001c90>] tipc_l2_rcv_msg+0x40/0x260 [tipc]
    [ 1109.998762]
    [ 1109.998762] stack backtrace:
    [ 1109.998762] CPU: 7 PID: 0 Comm: swapper/7 Not tainted 3.17.0-rc1+ #113
    [ 1109.998762] Hardware name: Bochs Bochs, BIOS Bochs 01/01/2007
    [ 1109.998762]  ffffffff82745830 ffff880016c03828 ffffffff81a209eb 0000000000000007
    [ 1109.998762]  ffff880017b3cac0 ffff880016c03888 ffffffff81a1c5ef 0000000000000001
    [ 1109.998762]  ffff880000000001 ffff880000000000 ffffffff81012d4f 0000000000000000
    [ 1109.998762] Call Trace:
    [ 1109.998762]  <IRQ>  [<ffffffff81a209eb>] dump_stack+0x4e/0x68
    [ 1109.998762]  [<ffffffff81a1c5ef>] print_usage_bug+0x1f1/0x202
    [ 1109.998762]  [<ffffffff81012d4f>] ? save_stack_trace+0x2f/0x50
    [ 1109.998762]  [<ffffffff810a406c>] mark_lock+0x28c/0x2f0
    [ 1109.998762]  [<ffffffff810a3440>] ? print_irq_inversion_bug.part.46+0x1f0/0x1f0
    [ 1109.998762]  [<ffffffff810a467d>] __lock_acquire+0x5ad/0x1d80
    [ 1109.998762]  [<ffffffff810a70dd>] ? trace_hardirqs_on+0xd/0x10
    [ 1109.998762]  [<ffffffff8108ace8>] ? sched_clock_cpu+0x98/0xc0
    [ 1109.998762]  [<ffffffff8108ad2b>] ? local_clock+0x1b/0x30
    [ 1109.998762]  [<ffffffff810a10dc>] ? lock_release_holdtime.part.29+0x1c/0x1a0
    [ 1109.998762]  [<ffffffff8108aa05>] ? sched_clock_local+0x25/0x90
    [ 1109.998762]  [<ffffffffa000dec0>] ? tipc_sk_get+0x60/0x80 [tipc]
    [ 1109.998762]  [<ffffffff810a6555>] lock_acquire+0x95/0x1e0
    [ 1109.998762]  [<ffffffffa0011969>] ? tipc_sk_rcv+0x49/0x2b0 [tipc]
    [ 1109.998762]  [<ffffffff810a6fb6>] ? trace_hardirqs_on_caller+0xa6/0x1c0
    [ 1109.998762]  [<ffffffff81a2d1ce>] _raw_spin_lock+0x3e/0x80
    [ 1109.998762]  [<ffffffffa0011969>] ? tipc_sk_rcv+0x49/0x2b0 [tipc]
    [ 1109.998762]  [<ffffffffa000dec0>] ? tipc_sk_get+0x60/0x80 [tipc]
    [ 1109.998762]  [<ffffffffa0011969>] tipc_sk_rcv+0x49/0x2b0 [tipc]
    [ 1109.998762]  [<ffffffffa00076bd>] tipc_rcv+0x5ed/0x960 [tipc]
    [ 1109.998762]  [<ffffffffa0001d1c>] tipc_l2_rcv_msg+0xcc/0x260 [tipc]
    [ 1109.998762]  [<ffffffffa0001c90>] ? tipc_l2_rcv_msg+0x40/0x260 [tipc]
    [ 1109.998762]  [<ffffffff81783345>] __netif_receive_skb_core+0x5e5/0xb70
    [ 1109.998762]  [<ffffffff81782dc9>] ? __netif_receive_skb_core+0x69/0xb70
    [ 1109.998762]  [<ffffffff81784eb9>] ? dev_gro_receive+0x259/0x4e0
    [ 1109.998762]  [<ffffffff817838f6>] __netif_receive_skb+0x26/0x70
    [ 1109.998762]  [<ffffffff81783acd>] netif_receive_skb_internal+0x2d/0x1f0
    [ 1109.998762]  [<ffffffff81785518>] napi_gro_receive+0xd8/0x240
    [ 1109.998762]  [<ffffffff815bf854>] e1000_clean_rx_irq+0x2c4/0x530
    [ 1109.998762]  [<ffffffff815c1a46>] e1000_clean+0x266/0x9c0
    [ 1109.998762]  [<ffffffff8108ad2b>] ? local_clock+0x1b/0x30
    [ 1109.998762]  [<ffffffff8108aa05>] ? sched_clock_local+0x25/0x90
    [ 1109.998762]  [<ffffffff817842b1>] net_rx_action+0x141/0x310
    [ 1109.998762]  [<ffffffff810bd710>] ? handle_fasteoi_irq+0xe0/0x150
    [ 1109.998762]  [<ffffffff81059fa6>] __do_softirq+0x116/0x4d0
    [ 1109.998762]  [<ffffffff8105a626>] irq_exit+0x96/0xc0
    [ 1109.998762]  [<ffffffff81a30d07>] do_IRQ+0x67/0x110
    [ 1109.998762]  [<ffffffff81a2ee2f>] common_interrupt+0x6f/0x6f
    [ 1109.998762]  <EOI>  [<ffffffff8100d2b7>] ? default_idle+0x37/0x250
    [ 1109.998762]  [<ffffffff8100d2b5>] ? default_idle+0x35/0x250
    [ 1109.998762]  [<ffffffff8100dd1f>] arch_cpu_idle+0xf/0x20
    [ 1109.998762]  [<ffffffff810999fd>] cpu_startup_entry+0x27d/0x4d0
    [ 1109.998762]  [<ffffffff81034c78>] start_secondary+0x188/0x1f0
    
    When intra-node messages are delivered from one process to another
    process, tipc_link_xmit() doesn't disable BH before it directly calls
    tipc_sk_rcv() on process context to forward messages to destination
    socket. Meanwhile, if messages delivered by remote node arrive at the
    node and their destinations are also the same socket, tipc_sk_rcv()
    running on process context might be preempted by tipc_sk_rcv() running
    BH context. As a result, the latter cannot obtain the socket lock as
    the lock was obtained by the former, however, the former has no chance
    to be run as the latter is owning the CPU now, so headlock happens. To
    avoid it, BH should be always disabled in tipc_sk_rcv().
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7b8613e0a1502b43b3b36c93c66f835c891f63b3
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Oct 20 14:44:25 2014 +0800

    tipc: fix a potential deadlock
    
    Locking dependency detected below possible unsafe locking scenario:
    
               CPU0                          CPU1
    T0:  tipc_named_rcv()                tipc_rcv()
    T1:  [grab nametble write lock]*     [grab node lock]*
    T2:  tipc_update_nametbl()           tipc_node_link_up()
    T3:  tipc_nodesub_subscribe()        tipc_nametbl_publish()
    T4:  [grab node lock]*               [grab nametble write lock]*
    
    The opposite order of holding nametbl write lock and node lock on
    above two different paths may result in a deadlock. If we move the
    the updating of the name table after link state named out of node
    lock, the reverse order of holding locks will be eliminated, and
    as a result, the deadlock risk.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1b62f19c3c0722d9b3ac20f41225f582f2277d81
Merge: a66d05d504a2 f114040e3ea6
Author: Mauro Carvalho Chehab <mchehab@osg.samsung.com>
Date:   Tue Oct 21 08:37:20 2014 -0200

    Merge tag 'v3.18-rc1' into v4l_for_linus
    
    Linux 3.18-rc1
    
    * tag 'v3.18-rc1': (9167 commits)
      Linux 3.18-rc1
      MAINTAINERS: corrected bcm2835 search
      Net: DSA: Fix checking for get_phy_flags function
      sparc64: Do not define thread fpregs save area as zero-length array.
      sparc64: Fix corrupted thread fault code.
      MAINTAINERS: Become the docs maintainer
      x86,kvm,vmx: Preserve CR4 across VM entry
      ipv6: fix a potential use after free in sit.c
      ipv6: fix a potential use after free in ip6_offload.c
      ipv4: fix a potential use after free in gre_offload.c
      tcp: fix build error if IPv6 is not enabled
      futex: Ensure get_futex_key_refs() always implies a barrier
      bna: fix skb->truesize underestimation
      net: dsa: add includes for ethtool and phy_fixed definitions
      openvswitch: Set flow-key members.
      netrom: use linux/uaccess.h
      dsa: Fix conversion from host device to mii bus
      tipc: fix bug in bundled buffer reception
      ipv6: introduce tcp_v6_iif()
      sfc: add support for skb->xmit_more
      ...

commit 1ef24960ab78554fe7e8e77d8fc86524fbd60d3c
Merge: 5563caaf8b8c f114040e3ea6
Author: Mauro Carvalho Chehab <mchehab@osg.samsung.com>
Date:   Tue Oct 21 08:32:51 2014 -0200

    Merge tag 'v3.18-rc1' into patchwork
    
    Linux 3.18-rc1
    
    * tag 'v3.18-rc1': (9526 commits)
      Linux 3.18-rc1
      MAINTAINERS: corrected bcm2835 search
      Net: DSA: Fix checking for get_phy_flags function
      sparc64: Do not define thread fpregs save area as zero-length array.
      sparc64: Fix corrupted thread fault code.
      MAINTAINERS: Become the docs maintainer
      x86,kvm,vmx: Preserve CR4 across VM entry
      ipv6: fix a potential use after free in sit.c
      ipv6: fix a potential use after free in ip6_offload.c
      ipv4: fix a potential use after free in gre_offload.c
      tcp: fix build error if IPv6 is not enabled
      futex: Ensure get_futex_key_refs() always implies a barrier
      bna: fix skb->truesize underestimation
      net: dsa: add includes for ethtool and phy_fixed definitions
      openvswitch: Set flow-key members.
      netrom: use linux/uaccess.h
      dsa: Fix conversion from host device to mii bus
      tipc: fix bug in bundled buffer reception
      ipv6: introduce tcp_v6_iif()
      sfc: add support for skb->xmit_more
      ...

commit 2e923b0251932ad4a82cc87ec1443a1f1d17073e
Merge: ffd8221bc348 f2d9da1a8375
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Oct 18 09:31:37 2014 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Include fixes for netrom and dsa (Fabian Frederick and Florian
        Fainelli)
    
     2) Fix FIXED_PHY support in stmmac, from Giuseppe CAVALLARO.
    
     3) Several SKB use after free fixes (vxlan, openvswitch, vxlan,
        ip_tunnel, fou), from Li ROngQing.
    
     4) fec driver PTP support fixes from Luwei Zhou and Nimrod Andy.
    
     5) Use after free in virtio_net, from Michael S Tsirkin.
    
     6) Fix flow mask handling for megaflows in openvswitch, from Pravin B
        Shelar.
    
     7) ISDN gigaset and capi bug fixes from Tilman Schmidt.
    
     8) Fix route leak in ip_send_unicast_reply(), from Vasily Averin.
    
     9) Fix two eBPF JIT bugs on x86, from Alexei Starovoitov.
    
    10) TCP_SKB_CB() reorganization caused a few regressions, fixed by Cong
        Wang and Eric Dumazet.
    
    11) Don't overwrite end of SKB when parsing malformed sctp ASCONF
        chunks, from Daniel Borkmann.
    
    12) Don't call sock_kfree_s() with NULL pointers, this function also has
        the side effect of adjusting the socket memory usage.  From Cong Wang.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (90 commits)
      bna: fix skb->truesize underestimation
      net: dsa: add includes for ethtool and phy_fixed definitions
      openvswitch: Set flow-key members.
      netrom: use linux/uaccess.h
      dsa: Fix conversion from host device to mii bus
      tipc: fix bug in bundled buffer reception
      ipv6: introduce tcp_v6_iif()
      sfc: add support for skb->xmit_more
      r8152: return -EBUSY for runtime suspend
      ipv4: fix a potential use after free in fou.c
      ipv4: fix a potential use after free in ip_tunnel_core.c
      hyperv: Add handling of IP header with option field in netvsc_set_hash()
      openvswitch: Create right mask with disabled megaflows
      vxlan: fix a free after use
      openvswitch: fix a use after free
      ipv4: dst_entry leak in ip_send_unicast_reply()
      ipv4: clean up cookie_v4_check()
      ipv4: share tcp_v4_save_options() with cookie_v4_check()
      ipv4: call __ip_options_echo() in cookie_v4_check()
      atm: simplify lanai.c by using module_pci_driver
      ...

commit 643566d4b47e2956110e79c0e6f65db9b9ea42c6
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Oct 17 15:25:28 2014 -0400

    tipc: fix bug in bundled buffer reception
    
    In commit ec8a2e5621db2da24badb3969eda7fd359e1869f ("tipc: same receive
    code path for connection protocol and data messages") we omitted the
    the possiblilty that an arriving message extracted from a bundle buffer
    may be a multicast message. Such messages need to be to be delivered to
    the socket via a separate function, tipc_sk_mcast_rcv(). As a result,
    small multicast messages arriving as members of a bundle buffer will be
    silently dropped.
    
    This commit corrects the error by considering this case in the function
    tipc_link_bundle_rcv().
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8ef544dce03e2d04a0faf56917ceb07cf5112b31
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Fri Aug 15 16:44:35 2014 +0200

    tipc: fix message importance range check
    
    [ Upstream commit ac32c7f705692b92fe12dcbe88fe87136fdfff6f ]
    
    Commit 3b4f302d8578 ("tipc: eliminate
    redundant locking") introduced a bug by removing the sanity check
    for message importance, allowing programs to assign any value to
    the msg_user field. This will mess up the packet reception logic
    and may cause random link resets.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 35a9ad8af0bb0fa3525e6d0d20e32551d226f38e
Merge: d5935b07da53 64b1f00a0830
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Oct 8 21:40:54 2014 -0400

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net-next
    
    Pull networking updates from David Miller:
     "Most notable changes in here:
    
       1) By far the biggest accomplishment, thanks to a large range of
          contributors, is the addition of multi-send for transmit.  This is
          the result of discussions back in Chicago, and the hard work of
          several individuals.
    
          Now, when the ->ndo_start_xmit() method of a driver sees
          skb->xmit_more as true, it can choose to defer the doorbell
          telling the driver to start processing the new TX queue entires.
    
          skb->xmit_more means that the generic networking is guaranteed to
          call the driver immediately with another SKB to send.
    
          There is logic added to the qdisc layer to dequeue multiple
          packets at a time, and the handling mis-predicted offloads in
          software is now done with no locks held.
    
          Finally, pktgen is extended to have a "burst" parameter that can
          be used to test a multi-send implementation.
    
          Several drivers have xmit_more support: i40e, igb, ixgbe, mlx4,
          virtio_net
    
          Adding support is almost trivial, so export more drivers to
          support this optimization soon.
    
          I want to thank, in no particular or implied order, Jesper
          Dangaard Brouer, Eric Dumazet, Alexander Duyck, Tom Herbert, Jamal
          Hadi Salim, John Fastabend, Florian Westphal, Daniel Borkmann,
          David Tat, Hannes Frederic Sowa, and Rusty Russell.
    
       2) PTP and timestamping support in bnx2x, from Michal Kalderon.
    
       3) Allow adjusting the rx_copybreak threshold for a driver via
          ethtool, and add rx_copybreak support to enic driver.  From
          Govindarajulu Varadarajan.
    
       4) Significant enhancements to the generic PHY layer and the bcm7xxx
          driver in particular (EEE support, auto power down, etc.) from
          Florian Fainelli.
    
       5) Allow raw buffers to be used for flow dissection, allowing drivers
          to determine the optimal "linear pull" size for devices that DMA
          into pools of pages.  The objective is to get exactly the
          necessary amount of headers into the linear SKB area pre-pulled,
          but no more.  The new interface drivers use is eth_get_headlen().
          From WANG Cong, with driver conversions (several had their own
          by-hand duplicated implementations) by Alexander Duyck and Eric
          Dumazet.
    
       6) Support checksumming more smoothly and efficiently for
          encapsulations, and add "foo over UDP" facility.  From Tom
          Herbert.
    
       7) Add Broadcom SF2 switch driver to DSA layer, from Florian
          Fainelli.
    
       8) eBPF now can load programs via a system call and has an extensive
          testsuite.  Alexei Starovoitov and Daniel Borkmann.
    
       9) Major overhaul of the packet scheduler to use RCU in several major
          areas such as the classifiers and rate estimators.  From John
          Fastabend.
    
      10) Add driver for Intel FM10000 Ethernet Switch, from Alexander
          Duyck.
    
      11) Rearrange TCP_SKB_CB() to reduce cache line misses, from Eric
          Dumazet.
    
      12) Add Datacenter TCP congestion control algorithm support, From
          Florian Westphal.
    
      13) Reorganize sk_buff so that __copy_skb_header() is significantly
          faster.  From Eric Dumazet"
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net-next: (1558 commits)
      netlabel: directly return netlbl_unlabel_genl_init()
      net: add netdev_txq_bql_{enqueue, complete}_prefetchw() helpers
      net: description of dma_cookie cause make xmldocs warning
      cxgb4: clean up a type issue
      cxgb4: potential shift wrapping bug
      i40e: skb->xmit_more support
      net: fs_enet: Add NAPI TX
      net: fs_enet: Remove non NAPI RX
      r8169:add support for RTL8168EP
      net_sched: copy exts->type in tcf_exts_change()
      wimax: convert printk to pr_foo()
      af_unix: remove 0 assignment on static
      ipv6: Do not warn for informational ICMP messages, regardless of type.
      Update Intel Ethernet Driver maintainers list
      bridge: Save frag_max_size between PRE_ROUTING and POST_ROUTING
      tipc: fix bug in multicast congestion handling
      net: better IFF_XMIT_DST_RELEASE support
      net/mlx4_en: remove NETDEV_TX_BUSY
      3c59x: fix bad split of cpu_to_le32(pci_map_single())
      net: bcmgenet: fix Tx ring priority programming
      ...

commit 908344cdda8039dd5c291e8a1ddd49649dff8c4b
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Tue Oct 7 14:12:34 2014 -0400

    tipc: fix bug in multicast congestion handling
    
    One aim of commit 50100a5e39461b2a61d6040e73c384766c29975d ("tipc:
    use pseudo message to wake up sockets after link congestion") was
    to handle link congestion abatement in a uniform way for both unicast
    and multicast transmit. However, the latter doesn't work correctly,
    and has been broken since the referenced commit was applied.
    
    If a user now sends a burst of multicast messages that is big
    enough to cause broadcast link congestion, it will be put to sleep,
    and not be waked up when the congestion abates as it should be.
    
    This has two reasons. First, the flag that is used, TIPC_WAKEUP_USERS,
    is set correctly, but in the wrong field. Instead of setting it in the
    'action_flags' field of the arrival node struct, it is by mistake set
    in the dummy node struct that is owned by the broadcast link, where it
    will never tested for. Second, we cannot use the same flag for waking
    up unicast and multicast users, since the function tipc_node_unlock()
    needs to pick the wakeup pseudo messages to deliver from different
    queues. It must hence be able to distinguish between the two cases.
    
    This commit solves this problem by adding a new flag
    TIPC_WAKEUP_BCAST_USERS, and a new function tipc_bclink_wakeup_user().
    The latter is to be called by tipc_node_unlock() when the named flag,
    now set in the correct field, is encountered.
    
    v2: using explicit 'unsigned int' declaration instead of 'uint', as
    per comment from David Miller.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0fc4dffad13e81deb3bf72e74cac292172df5285
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Wed Sep 10 14:02:50 2014 +0200

    tipc: fix sparse warnings
    
    This fixes the following sparse warnings:
    sparse: symbol 'tipc_update_nametbl' was not declared. Should it be static?
    Also, the function is changed to return bool upon success, rather than a
    potentially freed pointer.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a5325ae5b8bff051933a754db7727fc9823e6414
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Thu Aug 28 09:08:47 2014 +0200

    tipc: add name distributor resiliency queue
    
    TIPC name table updates are distributed asynchronously in a cluster,
    entailing a risk of certain race conditions. E.g., if two nodes
    simultaneously issue conflicting (overlapping) publications, this may
    not be detected until both publications have reached a third node, in
    which case one of the publications will be silently dropped on that
    node. Hence, we end up with an inconsistent name table.
    
    In most cases this conflict is just a temporary race, e.g., one
    node is issuing a publication under the assumption that a previous,
    conflicting, publication has already been withdrawn by the other node.
    However, because of the (rtt related) distributed update delay, this
    may not yet hold true on all nodes. The symptom of this failure is a
    syslog message: "tipc: Cannot publish {%u,%u,%u}, overlap error".
    
    In this commit we add a resiliency queue at the receiving end of
    the name table distributor. When insertion of an arriving publication
    fails, we retain it in this queue for a short amount of time, assuming
    that another update will arrive very soon and clear the conflict. If so
    happens, we insert the publication, otherwise we drop it.
    
    The (configurable) retention value defaults to 2000 ms. Knowing from
    experience that the situation described above is extremely rare, there
    is no risk that the queue will accumulate any large number of items.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f4ad8a4b8b9f490a15c3239e0d6ac99e7e438d34
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Thu Aug 28 09:08:46 2014 +0200

    tipc: refactor name table updates out of named packet receive routine
    
    We need to perform the same actions when processing deferred name
    table updates, so this functionality is moved to a separate
    function.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit cc086fcf92996965f0dcf05c6641d65381705266
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Aug 28 10:02:41 2014 +0800

    tipc: fix a potential oops
    
    Commit 6c9808ce09f7 ("tipc: remove port_lock") accidentally involves
    a potential bug: when tipc socket instance(tsk) is not got with given
    reference number in tipc_sk_get(), tsk is set to NULL. Subsequently
    we jump to exit label where to decrease socket reference counter
    pointed by tsk pointer in tipc_sk_put(). However, As now tsk is NULL,
    oops may happen because of touching a NULL pointer.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Erik Hugne <erik.hugne@ericsson.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 56cf7e077c081a5874dcbd722cbae771bb5177fc
Author: Ying Xue <ying.xue@windriver.com>
Date:   Fri Oct 18 07:23:14 2013 +0200

    tipc: don't use memcpy to copy from user space
    
    commit 5c0a0fc81f4dc786b42c4fc9c7c72ba635406ab5 upstream.
    
    tipc_msg_build() calls skb_copy_to_linear_data_offset() to copy data
    from user space to kernel space. However, the latter function does
    in its turn call memcpy() to perform the actual copying. This poses
    an obvious security and robustness risk, since memcpy() never makes
    any validity check on the pointer it is copying from.
    
    To correct this, we the replace the offending function call with
    a call to memcpy_fromiovecend(), which uses copy_from_user() to
    perform the copying.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 5aa8dbbd5f9ae6ec6f5ab88596a29a5b5d4caf31
Merge: f9474ddfaa00 301bae56f212
Author: David S. Miller <davem@davemloft.net>
Date:   Sat Aug 23 11:18:41 2014 -0700

    Merge branch 'tipc-next'
    
    Jon Maloy says:
    
    ====================
    tipc: Merge port and socket layer code
    
    After the removal of the TIPC native interface, there is no reason to
    keep a distinction between a "generic" port layer and a "specific"
    socket layer in the code. Throughout the last months, we have posted
    several series that aimed at facilitating removal of the port layer,
    and in particular the port_lock spinlock, which in reality duplicates
    the role normally kept by lock_sock()/bh_lock_sock().
    
    In this series, we finalize this work, by making a significant number of
    changes to the link, node, port and socket code, all with the aim of
    reducing dependencies between the layers. In the final commits, we then
    remove the port spinlock, port.c and port.h altogether.
    
    After this series, we have a socket layer that has only few dependencies
    to the rest of the stack, so that it should be possible to continue
    cleanups of its code without significantly affecting other code.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 301bae56f21295a4ba71367818d80735687f11ac
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Aug 22 18:09:20 2014 -0400

    tipc: merge struct tipc_port into struct tipc_sock
    
    We complete the merging of the port and socket layer by aggregating
    the fields of struct tipc_port directly into struct tipc_sock, and
    moving the combined structure into socket.c.
    
    We also move all functions and macros that are not any longer
    exposed to the rest of the stack into socket.c, and rename them
    accordingly.
    
    Despite the size of this commit, there are no functional changes.
    We have only made such changes that are necessary due of the removal
    of struct tipc_port.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 808d90f9c55943c2965d33b7156e559c59dd2db9
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Aug 22 18:09:19 2014 -0400

    tipc: remove files ref.h and ref.c
    
    The reference table is now 'socket aware' instead of being generic,
    and has in reality become a socket internal table. In order to be
    able to minimize the API exposed by the socket layer towards the rest
    of the stack, we now move the reference table definitions and functions
    into the file socket.c, and rename the functions accordingly.
    
    There are no functional changes in this commit.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2e84c60b77e4dd96068f568a5971e681bb7e6b68
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Aug 22 18:09:18 2014 -0400

    tipc: remove include file port.h
    
    We move the inline functions in the file port.h to socket.c, and modify
    their names accordingly.
    
    We move struct tipc_port and some macros to socket.h.
    
    Finally, we remove the file port.h.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0fc87aaebdfbf2c75112ce17aec093652c682acd
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Aug 22 18:09:17 2014 -0400

    tipc: remove source file port.c
    
    In this commit, we move the remaining functions in port.c to
    socket.c, and give them new names that correspond to their new
    location. We then remove the file port.c.
    
    There are only cosmetic changes to the moved functions.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6c9808ce09f778a1de7b207b82cfc36a59cda2d3
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Aug 22 18:09:16 2014 -0400

    tipc: remove port_lock
    
    In previous commits we have reduced usage of port_lock to a minimum,
    and complemented it with usage of bh_lock_sock() at the remaining
    locations. The purpose has been to remove this lock altogether, since
    it largely duplicates the role of bh_lock_sock. We are now ready to do
    this.
    
    However, we still need to protect the BH callers from inadvertent
    release of the socket while they hold a reference to it. We do this by
    replacing port_lock by a combination of a rw-lock protecting the
    reference table as such, and updating the socket reference counter while
    the socket is referenced from BH. This technique is more standard and
    comprehensible than the previous approach, and turns out to have a
    positive effect on overall performance.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9b50fd087a9f1454d6a8b613fff376dfb6d6ea93
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Aug 22 18:09:15 2014 -0400

    tipc: replace port pointer with socket pointer in registry
    
    In order to make tipc_sock the only entity referencable from other
    parts of the stack, we add a tipc_sock pointer instead of a tipc_port
    pointer to the registry. As a consequence, we also let the function
    tipc_port_lock() return a pointer to a tipc_sock instead  of a tipc_port.
    We keep the function's name for now, since the lock still is owned by
    the port.
    
    This is another step in the direction of eliminating port_lock, replacing
    its usage with lock_sock() and bh_lock_sock().
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5a9ee0be3371eb77d671a77e26261931c5c3fb31
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Aug 22 18:09:14 2014 -0400

    tipc: use registry when scanning sockets
    
    The functions tipc_port_get_ports() and tipc_port_reinit() scan over
    all sockets/ports to access each of them. This is done by using a
    dedicated linked list, 'tipc_socks' where all sockets are members. The
    list is in turn protected by a spinlock, 'port_list_lock', while each
    socket is locked by using port_lock at the moment of access.
    
    In order to reduce complexity and risk of deadlock, we want to get
    rid of the linked list and the accompanying spinlock.
    
    This is what we do in this commit. Instead of the linked list, we use
    the port registry to scan across the sockets. We also add usage of
    bh_lock_sock() inside the scope of port_lock in both functions, as a
    preparation for the complete removal of port_lock.
    
    Finally, we move the functions from port.c to socket.c, and rename them
    to tipc_sk_sock_show() and tipc_sk_reinit() repectively.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5b8fa7ce823a59a328e0a7661df2478bfb745de4
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Aug 22 18:09:13 2014 -0400

    tipc: eliminate functions tipc_port_init and tipc_port_destroy
    
    After the latest changes to the socket/port layer the existence of
    the functions tipc_port_init() and tipc_port_destroy() cannot be
    justified. They are both called only once, from tipc_sk_create() and
    tipc_sk_delete() respectively, and their functionality can better be
    merged into the latter two functions.
    
    This also entails that all remaining references to port_lock now are
    made from inside socket.c, something that will make it easier to remove
    this lock.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 739f5e4efc82c4cb6b5201cbed337b6ff663bf19
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Aug 22 18:09:12 2014 -0400

    tipc: redefine message acknowledge function
    
    The function tipc_acknowledge() is a remnant from the obsolete native
    API. Currently, it grabs port_lock, before building an acknowledge
    message and sending it to the peer.
    
    Since all access to socket members now is protected by the socket lock,
    it has become unnecessary to grab port_lock here.
    
    In this commit, we remove the usage of port_lock, simplify the
    function, and move it to socket.c, renaming it to tipc_sk_send_ack().
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit dadebc00299a19dc4639ba7192db937e31b81eb2
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Aug 22 18:09:11 2014 -0400

    tipc: eliminate port_connect()/port_disconnect() functions
    
    tipc_port_connect()/tipc_port_disconnect() are remnants of the obsolete
    native API. Their only task is to grab port_lock and call the functions
    __tipc_port_connect()/__tipc_port_disconnect() respectively, which will
    perform the actual state change.
    
    Since socket/port exection now is single-threaded the use of port_lock
    is not needed any more, so we can safely replace the two functions with
    their lock-free counterparts.
    
    In this commit, we remove the two functions. Furthermore, the contents
    of __tipc_port_disconnect() is so trivial that we choose to eliminate
    that function too, expanding its functionality into tipc_shutdown().
    __tipc_port_connect() is simplified, moved to socket.c, and given the
    more correct name tipc_sk_finish_conn(). Finally, we eliminate the
    function auto_connect(), and expand its contents into filter_connect().
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 80e44c22255468337b891da2348cab68cb62766f
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Aug 22 18:09:10 2014 -0400

    tipc: eliminate function tipc_port_shutdown()
    
    tipc_port_shutdown() is a remnant from the now obsolete native
    interface. As such it grabs port_lock in order to protect itself
    from concurrent BH processing.
    
    However, after the recent changes to the port/socket upcalls, sockets
    are now basically single-threaded, and all execution, except the read-only
    tipc_sk_timer(), is executing within the protection of lock_sock(). So
    the use of port_lock is not needed here.
    
    In this commit we eliminate the whole function, and merge it into its
    only caller, tipc_shutdown().
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5728901581139e68e6cf53b36590f64829c37453
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Aug 22 18:09:09 2014 -0400

    tipc: clean up socket timer function
    
    The last remaining BH upcall to the socket, apart for the message
    reception function tipc_sk_rcv(), is the timer function.
    
    We prefer to let this function continue executing in BH, since it only
    does read-acces to semi-permanent data, but we make three changes to it:
    
    1) We introduce a bh_lock_sock()/bh_unlock_sock() inside the scope
       of port_lock.  This is a preparation for replacing port_lock with
       bh_lock_sock() at the locations where it is still used.
    
    2) We move the function from port.c to socket.c, as a further step
       of eliminating the port code level altogether.
    
    3) We let it make use of the newly introduced tipc_msg_create()
       function. This enables us to get rid of three context specific
       functions (port_create_self_abort_msg() etc.) in port.c
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 02be61a981fb5ca5f1526323336198ee92cadf95
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Aug 22 18:09:08 2014 -0400

    tipc: use message to abort connections when losing contact to node
    
    In the current implementation, each 'struct tipc_node' instance keeps
    a linked list of those ports/sockets that are connected to the node
    represented by that struct. The purpose of this is to let the node
    object know which sockets to alert when it loses contact with its peer
    node, i.e., which sockets need to have their connections aborted.
    
    This entails an unwanted direct reference from the node structure
    back to the port/socket structure, and a need to grab port_lock
    when we have to make an upcall to the port. We want to get rid of
    this unecessary BH entry point into the socket, and also eliminate
    its use of port_lock.
    
    In this commit, we instead let the node struct keep list of "connected
    socket" structs, which each represents a connected socket, but is
    allocated independently by the node at the moment of connection. If
    the node loses contact with its peer node, the list is traversed, and
    a "connection abort" message is created for each entry in the list. The
    message is sent to it respective connected socket using the ordinary
    data path, and the receiving socket aborts its connections upon reception
    of the message.
    
    This enables us to get rid of the direct reference from 'struct node' to
    ´struct port', and another unwanted BH access point to the latter.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 50100a5e39461b2a61d6040e73c384766c29975d
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Aug 22 18:09:07 2014 -0400

    tipc: use pseudo message to wake up sockets after link congestion
    
    The current link implementation keeps a linked list of blocked ports/
    sockets that is populated when there is link congestion. The purpose
    of this is to let the link know which users to wake up when the
    congestion abates.
    
    This adds unnecessary complexity to the data structure and the code,
    since it forces us to involve the link each time we want to delete
    a socket. It also forces us to grab the spinlock port_lock within
    the scope of node_lock. We want to get rid of this direct dependence,
    as well as the deadlock hazard resulting from the usage of port_lock.
    
    In this commit, we instead let the link keep list of a "wakeup" pseudo
    messages for use in such situations. Those messages are sent to the
    pending sockets via the ordinary message reception path, and wake up
    the socket's owner when they are received.
    
    This enables us to get rid of the 'waiting_ports' linked lists in struct
    tipc_port that manifest this direct reference. As a consequence, we can
    eliminate another BH entry into the socket, and hence the need to grab
    port_lock. This is a further step in our effort to remove port_lock
    altogether.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1dd0bd2b14032037d40a316dd52370f1713fa62b
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Aug 22 18:09:06 2014 -0400

    tipc: introduce new function tipc_msg_create()
    
    The function tipc_msg_init() has turned out to be of limited value
    in many cases. It take too few parameters to be usable for creating
    a complete message, it makes too many assumptions about what the
    message should be used for, and it does not allocate any buffer to
    be returned to the caller.
    
    Therefore, we now introduce the new function tipc_msg_create(), which
    takes all the parameters needed to create a full message, and returns
    a buffer of the requested size. The new function will be very useful
    for the changes we will be doing in later commits in this series.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 02784f1b05b8f241c8180af88869e717e2758593
Author: David S. Miller <davem@davemloft.net>
Date:   Tue Aug 19 11:14:02 2014 -0700

    tipc: Fix build.
    
    Missing semicolon in range check fix.
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ac32c7f705692b92fe12dcbe88fe87136fdfff6f
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Fri Aug 15 16:44:35 2014 +0200

    tipc: fix message importance range check
    
    Commit 3b4f302d8578 ("tipc: eliminate
    redundant locking") introduced a bug by removing the sanity check
    for message importance, allowing programs to assign any value to
    the msg_user field. This will mess up the packet reception logic
    and may cause random link resets.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ad025a56a5487d5d443ee790c04517581d39b21b
Author: Wei Yongjun <yongjun_wei@trendmicro.com.cn>
Date:   Mon Jul 28 21:30:14 2014 +0800

    tipc: remove duplicated include from socket.c
    
    Remove duplicated include.
    
    Signed-off-by: Wei Yongjun <yongjun_wei@trendmicro.com.cn>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0515cc266b526def4d880515d3ab3bb0b190eec9
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Jul 11 08:45:27 2014 -0400

    tipc: clear 'next'-pointer of message fragments before reassembly
    
    [ Upstream commit 999417549c16dd0e3a382aa9f6ae61688db03181 ]
    
    If the 'next' pointer of the last fragment buffer in a message is not
    zeroed before reassembly, we risk ending up with a corrupt message,
    since the reassembly function itself isn't doing this.
    
    Currently, when a buffer is retrieved from the deferred queue of the
    broadcast link, the next pointer is not cleared, with the result as
    described above.
    
    This commit corrects this, and thereby fixes a bug that may occur when
    long broadcast messages are transmitted across dual interfaces. The bug
    has been present since 40ba3cdf542a469aaa9083fa041656e59b109b90 ("tipc:
    message reassembly using fragment chain")
    
    This commit should be applied to both net and net-next.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 13e9b9972fa0f34059e737ae215a26e43966b46f
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Jul 25 14:48:09 2014 -0400

    tipc: make tipc_buf_append() more robust
    
    As per comment from David Miller, we try to make the buffer reassembly
    function more resilient to user errors than it is today.
    
    - We check that the "*buf" parameter always is set, since this is
      mandatory input.
    
    - We ensure that *buf->next always is set to NULL before linking in
      the buffer, instead of relying of the caller to have done this.
    
    - We ensure that the "tail" pointer in the head buffer's control
      block is initialized to NULL when the first fragment arrives.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 197a020d98de01c81cecf931e26f99faf848d0ca
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Jul 11 08:45:27 2014 -0400

    tipc: clear 'next'-pointer of message fragments before reassembly
    
    [ Upstream commit 999417549c16dd0e3a382aa9f6ae61688db03181 ]
    
    If the 'next' pointer of the last fragment buffer in a message is not
    zeroed before reassembly, we risk ending up with a corrupt message,
    since the reassembly function itself isn't doing this.
    
    Currently, when a buffer is retrieved from the deferred queue of the
    broadcast link, the next pointer is not cleared, with the result as
    described above.
    
    This commit corrects this, and thereby fixes a bug that may occur when
    long broadcast messages are transmitted across dual interfaces. The bug
    has been present since 40ba3cdf542a469aaa9083fa041656e59b109b90 ("tipc:
    message reassembly using fragment chain")
    
    This commit should be applied to both net and net-next.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f0f998cc4bfa3caf5225afe6813306f53f30e0de
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Jul 11 08:45:27 2014 -0400

    tipc: clear 'next'-pointer of message fragments before reassembly
    
    [ Upstream commit 999417549c16dd0e3a382aa9f6ae61688db03181 ]
    
    If the 'next' pointer of the last fragment buffer in a message is not
    zeroed before reassembly, we risk ending up with a corrupt message,
    since the reassembly function itself isn't doing this.
    
    Currently, when a buffer is retrieved from the deferred queue of the
    broadcast link, the next pointer is not cleared, with the result as
    described above.
    
    This commit corrects this, and thereby fixes a bug that may occur when
    long broadcast messages are transmitted across dual interfaces. The bug
    has been present since 40ba3cdf542a469aaa9083fa041656e59b109b90 ("tipc:
    message reassembly using fragment chain")
    
    This commit should be applied to both net and net-next.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 60008435941d4ad1a55763a9cb6d4e9c0e20f374
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Jul 11 08:45:27 2014 -0400

    tipc: clear 'next'-pointer of message fragments before reassembly
    
    [ Upstream commit 999417549c16dd0e3a382aa9f6ae61688db03181 ]
    
    If the 'next' pointer of the last fragment buffer in a message is not
    zeroed before reassembly, we risk ending up with a corrupt message,
    since the reassembly function itself isn't doing this.
    
    Currently, when a buffer is retrieved from the deferred queue of the
    broadcast link, the next pointer is not cleared, with the result as
    described above.
    
    This commit corrects this, and thereby fixes a bug that may occur when
    long broadcast messages are transmitted across dual interfaces. The bug
    has been present since 40ba3cdf542a469aaa9083fa041656e59b109b90 ("tipc:
    message reassembly using fragment chain")
    
    This commit should be applied to both net and net-next.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d1558f713d5a4963f1bf95573bc870b816651f91
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Jul 11 08:45:27 2014 -0400

    tipc: clear 'next'-pointer of message fragments before reassembly
    
    [ Upstream commit 999417549c16dd0e3a382aa9f6ae61688db03181 ]
    
    If the 'next' pointer of the last fragment buffer in a message is not
    zeroed before reassembly, we risk ending up with a corrupt message,
    since the reassembly function itself isn't doing this.
    
    Currently, when a buffer is retrieved from the deferred queue of the
    broadcast link, the next pointer is not cleared, with the result as
    described above.
    
    This commit corrects this, and thereby fixes a bug that may occur when
    long broadcast messages are transmitted across dual interfaces. The bug
    has been present since 40ba3cdf542a469aaa9083fa041656e59b109b90 ("tipc:
    message reassembly using fragment chain")
    
    This commit should be applied to both net and net-next.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 52f50ce556af7008e1c2088d8b2b778ef5e79ff1
Author: Wei Yongjun <yongjun_wei@trendmicro.com.cn>
Date:   Sun Jul 20 13:14:28 2014 +0800

    tipc: fix sparse non static symbol warnings
    
    Fixes the following sparse warnings:
    
    net/tipc/socket.c:545:5: warning:
     symbol 'tipc_sk_proto_rcv' was not declared. Should it be static?
    net/tipc/socket.c:2015:5: warning:
     symbol 'tipc_ioctl' was not declared. Should it be static?
    
    Signed-off-by: Wei Yongjun <yongjun_wei@trendmicro.com.cn>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ee40d4bbc031e5286bbcf539315b65e21b63c421
Merge: a9f559c37b58 6f92ee54b316
Author: David S. Miller <davem@davemloft.net>
Date:   Wed Jul 16 21:38:26 2014 -0700

    Merge branch 'tipc-next'
    
    Jon Maloy says:
    
    ====================
    tipc: multicast and internal users to new send functions
    
    We move the remaining data transmit users: multicast, name table
    distributor, and link internal protocols to use the new data
    transmission framework introduced in a previous commit series
    ("tipc: new unicast transmission code").
    
    Finally, we remove the code obsoleted by the new functions.
    
    v2: - Fixed a braindead, but harmless return sequence in commit #3, as
          reported by David Miller.
        - Rebased series to 3.16.0-rc5+
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6f92ee54b316c116e125a6bb268abe308e4c14e6
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Jul 16 20:41:04 2014 -0400

    tipc: ensure sequential message delivery across dual bearers
    
    When we run broadcast packets over dual bearers/interfaces, the
    current transmission code is flipping bearers between each sent
    packet, with the purpose of leveraging the double bandwidth
    available. The receiving bclink is resequencing the packets if
    needed, so all messages are delivered upwards from the broadcast
    link in the correct order, even if they may arrive in concurrent
    interrupts.
    
    However, at the moment of delivery upwards to the socket, we release
    all spinlocks (bclink_lock, node_lock), so it is still possible
    that arriving messages bypass each other before they reach the socket
    queue.
    
    We fix this by applying the same technique we are using for unicast
    traffic. We use a link selector (i.e., the last bit of sending port
    number) to ensure that messages from the same sender socket always are
    sent over the same bearer. This guarantees sequential delivery between
    socket pairs, which is sufficient to satisfy the protocol spec, as well
    as all known user requirements.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9fbfb8b120bd4fe89cd70d6c8841e6e1cfab2609
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Jul 16 20:41:03 2014 -0400

    tipc: rename temporarily named functions
    
    After the previous commit, we can now give the functions with temporary
    names, such as tipc_link_xmit2(), tipc_msg_build2() etc., their proper
    names.
    
    There are no functional changes in this commit.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c4116e10579c5bbbfc3cd2ad0324ee0d8691e531
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Jul 16 20:41:02 2014 -0400

    tipc: remove unreferenced functions
    
    We can now remove a number of functions which have become obsolete
    and unreferenced through this commit series. There are no functional
    changes in this commit.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0abd8ff21f19adddc465538354e9baaca63df073
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Jul 16 20:41:01 2014 -0400

    tipc: start using the new multicast functions
    
    In this commit, we convert the socket multicast send function to
    directly call the new multicast/broadcast function (tipc_bclink_xmit2())
    introduced in the previous commit. We do this instead of letting the
    call go via the now obsolete tipc_port_mcast_xmit(), hence saving
    a call level and some code complexity.
    
    We also remove the initial destination lookup at the message sending
    side, and replace that with an unconditional lookup at the receiving
    side, including on the sending node itself. This makes the destination
    lookup and message transfer more uniform than before.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 078bec826f7b73cf2a2397680537bcb7e075b492
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Jul 16 20:41:00 2014 -0400

    tipc: add new functions for multicast and broadcast distribution
    
    We add a new broadcast link transmit function in bclink.c and a new
    receive function in socket.c. The purpose is to move the branching
    between external and internal destination down to the link layer,
    just as we have done with unicast in earlier commits. We also make
    use of the new link-independent fragmentation support that was
    introduced in an earlier commit series.
    
    This gives a shorter and simpler code path, and makes it possible
    to obtain copy-free buffer delivery to all node local destination
    sockets.
    
    The new transmission code is added in parallel with the existing one,
    and will be used by the socket multicast send function in the next
    commit in this series.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 25b660c7e202d533e4985380b24729fd12de2b5e
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Jul 16 20:40:59 2014 -0400

    tipc: let internal link users call the new link send function
    
    We convert the link internal users (changeover protocol, broadcast
    synchronization) to use the new packet send function.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit dbdf6d24ad37d63938f29a2d134a1a9f6e9e673c
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Jul 16 20:40:58 2014 -0400

    tipc: make name table distributor use new send function
    
    In a previous commit series ("tipc: new unicast transmission code")
    we introduced a new message sending function, tipc_link_xmit2(),
    and moved the unicast data users over to use that function. We now
    let the internal name table distributor do the same.
    
    The interaction between the name distributor and the node/link
    layer also becomes significantly simpler, so we can eliminate
    the function tipc_link_names_xmit().
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7ceaa583becacb985ad5803bac0970b8f8cc0d74
Author: Fabian Frederick <fabf@skynet.be>
Date:   Mon Jul 14 18:30:52 2014 +0200

    tipc: remove unnecessary break after return
    
    Signed-off-by: Fabian Frederick <fabf@skynet.be>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5615f9f822c12482d33c8561df0b01a0aaf39437
Merge: 1b81e8818944 8f9818af4eae
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Jul 15 08:42:52 2014 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Bluetooth pairing fixes from Johan Hedberg.
    
     2) ieee80211_send_auth() doesn't allocate enough tail room for the SKB,
        from Max Stepanov.
    
     3) New iwlwifi chip IDs, from Oren Givon.
    
     4) bnx2x driver reads wrong PCI config space MSI register, from Yijing
        Wang.
    
     5) IPV6 MLD Query validation isn't strong enough, from Hangbin Liu.
    
     6) Fix double SKB free in openvswitch, from Andy Zhou.
    
     7) Fix sk_dst_set() being racey with UDP sockets, leading to strange
        crashes, from Eric Dumazet.
    
     8) Interpret the NAPI budget correctly in the new systemport driver,
        from Florian Fainelli.
    
     9) VLAN code frees percpu stats in the wrong place, leading to crashes
        in the get stats handler.  From Eric Dumazet.
    
    10) TCP sockets doing a repair can crash with a divide by zero, because
        we invoke tcp_push() with an MSS value of zero.  Just skip that part
        of the sendmsg paths in repair mode.  From Christoph Paasch.
    
    11) IRQ affinity bug fixes in mlx4 driver from Amir Vadai.
    
    12) Don't ignore path MTU icmp messages with a zero mtu, machines out
        there still spit them out, and all of our per-protocol handlers for
        PMTU can cope with it just fine.  From Edward Allcutt.
    
    13) Some NETDEV_CHANGE notifier invocations were not passing in the
        correct kind of cookie as the argument, from Loic Prylli.
    
    14) Fix crashes in long multicast/broadcast reassembly, from Jon Paul
        Maloy.
    
    15) ip_tunnel_lookup() doesn't interpret wildcard keys correctly, fix
        from Dmitry Popov.
    
    16) Fix skb->sk assigned without taking a reference to 'sk' in
        appletalk, from Andrey Utkin.
    
    17) Fix some info leaks in ULP event signalling to userspace in SCTP,
        from Daniel Borkmann.
    
    18) Fix deadlocks in HSO driver, from Olivier Sobrie.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (93 commits)
      hso: fix deadlock when receiving bursts of data
      hso: remove unused workqueue
      net: ppp: don't call sk_chk_filter twice
      mlx4: mark napi id for gro_skb
      bonding: fix ad_select module param check
      net: pppoe: use correct channel MTU when using Multilink PPP
      neigh: sysctl - simplify address calculation of gc_* variables
      net: sctp: fix information leaks in ulpevent layer
      MAINTAINERS: update r8169 maintainer
      net: bcmgenet: fix RGMII_MODE_EN bit
      tipc: clear 'next'-pointer of message fragments before reassembly
      r8152: fix r8152_csum_workaround function
      be2net: set EQ DB clear-intr bit in be_open()
      GRE: enable offloads for GRE
      farsync: fix invalid memory accesses in fst_add_one() and fst_init_card()
      igb: do a reset on SR-IOV re-init if device is down
      igb: Workaround for i210 Errata 25: Slow System Clock
      usbnet: smsc95xx: add reset_resume function with reset operation
      dp83640: Always decode received status frames
      r8169: disable L23
      ...

commit 999417549c16dd0e3a382aa9f6ae61688db03181
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Jul 11 08:45:27 2014 -0400

    tipc: clear 'next'-pointer of message fragments before reassembly
    
    If the 'next' pointer of the last fragment buffer in a message is not
    zeroed before reassembly, we risk ending up with a corrupt message,
    since the reassembly function itself isn't doing this.
    
    Currently, when a buffer is retrieved from the deferred queue of the
    broadcast link, the next pointer is not cleared, with the result as
    described above.
    
    This commit corrects this, and thereby fixes a bug that may occur when
    long broadcast messages are transmitted across dual interfaces. The bug
    has been present since 40ba3cdf542a469aaa9083fa041656e59b109b90 ("tipc:
    message reassembly using fragment chain")
    
    This commit should be applied to both net and net-next.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 70452dcb6d401349fbd6db55dfab112fb44639be
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Sun Jul 6 20:38:50 2014 -0400

    tipc: fix a memleak when sending data
    
    This fixes a regression bug caused by:
    067608e9d019d6477fd45dd948e81af0e5bf599f ("tipc: introduce direct
    iovec to buffer chain fragmentation function")
    
    If data is sent on a nonblocking socket and the destination link
    is congested, the buffer chain is leaked. We fix this by freeing
    the chain in this case.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 29322d0db98e5a84f5cc6a55655bee3dc4ffb5ab
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Sat Jul 5 13:44:13 2014 -0400

    tipc: fix bug in multicast/broadcast message reassembly
    
    Since commit 37e22164a8a3c39bdad45aa463b1e69a1fdf4110 ("tipc: rename and
    move message reassembly function") reassembly of long broadcast messages
    has been broken. This is because we test for a non-NULL return value
    of the *buf parameter as criteria for succesful reassembly. However, this
    parameter is left defined even after reception of the first fragment,
    when reassebly is still incomplete. This leads to a kernel crash as soon
    as a the first fragment of a long broadcast message is received.
    
    We fix this with this commit, by implementing a stricter behavior of the
    function and its return values.
    
    This commit should be applied to both net and net-next.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8e6e85e606c9472fca7504f231585e7760841628
Merge: 86c6a2c75ab9 3f53bd8f8b56
Author: David S. Miller <davem@davemloft.net>
Date:   Mon Jul 7 19:55:49 2014 -0700

    Merge branch 'tipc-next'
    
    Erik Hugne says:
    
    ====================
    tipc: link state processing improvements
    
    Message delivery is separated from the link state processing, and
    we fix a bug in receive-path triggered acks.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3f53bd8f8b563cc6024d25c1665d8358745f48b2
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Tue Jul 1 10:22:41 2014 +0200

    tipc: fix link acknowledge logic in receive path
    
    Link state acks triggered from the receive path is done before
    the last received packet have been processed by the link layer.
    The effect of this is that the last received packet will not be
    included in the ack. This causes problems if the link window is
    set to TIPC_MIN_LINK_WIN, where the ack interval will be equal to
    the link tolerance, and the link enters a stop-and-go behavior.
    We move the ack logic to after link state processing, just before
    the packet is delivered to higher layers.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: Carl Sigurjonsson <carl.sigurjonsson@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7ae934bebe289362e5b1f5ea50e4c347863ae202
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Tue Jul 1 10:22:40 2014 +0200

    tipc: refactor message delivery out of tipc_rcv
    
    This is a cosmetic change, separating message delivery from the
    link state processing.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0ff9275a4b1d6b1b0439a79c9cf7c03b38dbe24d
Merge: f5b265039f13 60120526c26f
Author: David S. Miller <davem@davemloft.net>
Date:   Fri Jun 27 12:51:00 2014 -0700

    Merge branch 'tipc-next'
    
    Jon Maloy says:
    
    ====================
    tipc: new unicast transmission code
    
    As a step towards making the data transmission code more maintainable
    and performant, we introduce a number of new functions, both for
    building, sending and rejecting messages. The new functions will
    eventually be used for alla data transmission, user data unicast,
    service internal messaging, and multicast/broadcast.
    
    We start with this series, where we introduce the functions, and
    let user data unicast and the internal connection protocol use them.
    The remaining users will come in a later series.
    
    There are only minor changes to data structures, and no protocol
    changes, so the older functions can still be used in parallel for
    some time. Until the old functions are removed, we use temporary
    names for the new functions, such as tipc_build_msg2, tipc_link_xmit2.
    
    It should be noted that the first two commits are unrelated to the
    rest of the series.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 60120526c26f42fd658e32bf4a6d548483d09da8
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Jun 25 20:41:42 2014 -0500

    tipc: simplify connection congestion handling
    
    As a consequence of the recently introduced serialized access
    to the socket in commit 8d94168a761819d10252bab1f8de6d7b202c3baa
    ("tipc: same receive code path for connection protocol and data
    messages") we can make a number of simplifications in the
    detection and handling of connection congestion situations.
    
    - We don't need to keep two counters, one for sent messages and one
      for acked messages. There is no longer any risk for races between
      acknowledge messages arriving in BH and data message sending
      running in user context. So we merge this into one counter,
      'sent_unacked', which is incremented at sending and subtracted
      from at acknowledge reception.
    
    - We don't need to set the 'congested' field in tipc_port to
      true before we sent the message, and clear it when sending
      is successful. (As a matter of fact, it was never necessary;
      the field was set in link_schedule_port() before any wakeup
      could arrive anyway.)
    
    - We keep the conditions for link congestion and connection connection
      congestion separated. There would otherwise be a risk that an arriving
      acknowledge message may wake up a user sleeping because of link
      congestion.
    
    - We can simplify reception of acknowledge messages.
    
    We also make some cosmetic/structural changes:
    
    - We rename the 'congested' field to the more correct 'link_cong´.
    
    - We rename 'conn_unacked' to 'rcv_unacked'
    
    - We move the above mentioned fields from struct tipc_port to
      struct tipc_sock.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ac0074ee70ddb32f62d918b31cb20e3c947c75a1
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Jun 25 20:41:41 2014 -0500

    tipc: clean up connection protocol reception function
    
    We simplify the code for receiving connection probes, leveraging the
    recently introduced tipc_msg_reverse() function. We also stick to
    the principle of sending a possible response message directly from
    the calling (tipc_sk_rcv or backlog_rcv) functions, hence making
    the call chain shallower and easier to follow.
    
    We make one small protocol change here, allowed according to
    the spec. If a protocol message arrives from a remote socket that
    is not the one we are connected to, we are currently generating a
    connection abort message and send it to the source. This behavior
    is unnecessary, and might even be a security risk, so instead we
    now choose to only ignore the message. The consequnce for the sender
    is that he will need longer time to discover his mistake (until the
    next timeout), but this is an extreme corner case, and may happen
    anyway under other circumstances, so we deem this change acceptable.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ec8a2e5621db2da24badb3969eda7fd359e1869f
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Jun 25 20:41:40 2014 -0500

    tipc: same receive code path for connection protocol and data messages
    
    As a preparation to eliminate port_lock we need to bring reception
    of connection protocol messages under proper protection of bh_lock_sock
    or socket owner.
    
    We fix this by letting those messages follow the same code path as
    incoming data messages.
    
    As a side effect of this change, the last reference to the function
    net_route_msg() disappears, and we can eliminate that function.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b786e2b0faea1265d72533d59ec4482f764ad60f
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Jun 25 20:41:39 2014 -0500

    tipc: let port protocol senders use new link send function
    
    Several functions in port.c, related to the port protocol and
    connection shutdown, need to send messages. We now convert them
    to use the new link send function.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4ccfe5e0419eefcab3010ff6a87ffb03aef86c5d
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Jun 25 20:41:38 2014 -0500

    tipc: connection oriented transport uses new send functions
    
    We move the message sending across established connections
    to use the message preparation and send functions introduced
    earlier in this series. We now do the message preparation
    and call to the link send function directly from the socket,
    instead of going via the port layer.
    
    As a consequence of this change, the functions tipc_send(),
    tipc_port_iovec_rcv(), tipc_port_iovec_reject() and tipc_reject_msg()
    become unreferenced and can be eliminated from port.c. For the same
    reason, the functions tipc_link_xmit_fast(), tipc_link_iovec_xmit_long()
    and tipc_link_iovec_fast() can be eliminated from link.c.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e2dafe87d328774a94fdd77718422b9cbd97ed47
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Jun 25 20:41:37 2014 -0500

    tipc: RDM/DGRAM transport uses new fragmenting and sending functions
    
    We merge the code for sending port name and port identity addressed
    messages into the corresponding send functions in socket.c, and start
    using the new fragmenting and transmit functions we just have introduced.
    
    This saves a call level and quite a few code lines, as well as making
    this part of the code easier to follow. As a consequence, the functions
    tipc_send2name() and tipc_send2port() in port.c can be removed.
    
    For practical reasons, we break out the code for sending multicast messages
    from tipc_sendmsg() and move it into a separate function, tipc_sendmcast(),
    but we do not yet convert it into using the new build/send functions.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5a379074a7dd6d288ec9e6472769ba0e0c54dd85
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Jun 25 20:41:36 2014 -0500

    tipc: introduce message evaluation function
    
    When a message arrives in a node and finds no destination
    socket, we may need to drop it, reject it, or forward it after
    a secondary destination lookup. The latter two cases currently
    results in a code path that is perceived as complex, because it
    follows a deep call chain via obscure functions such as
    net_route_named_msg() and net_route_msg().
    
    We now introduce a function, tipc_msg_eval(), that takes the
    decision about whether such a message should be rejected or
    forwarded, but leaves it to the caller to actually perform
    the indicated action.
    
    If the decision is 'reject', it is still the task of the recently
    introduced function tipc_msg_reverse() to take the final decision
    about whether the message is rejectable or not. In the latter case
    it drops the message.
    
    As a result of this change, we can finally eliminate the function
    net_route_named_msg(), and hence become independent of net_route_msg().
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8db1bae30b7cd3c3abc05f467d0f7c69b33b80e9
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Jun 25 20:41:35 2014 -0500

    tipc: separate building and sending of rejected messages
    
    The way we build and send rejected message is currenty perceived as
    hard to follow, partly because we let the transmission go via deep
    call chains through functions such as tipc_reject_msg() and
    net_route_msg().
    
    We want to remove those functions, and make the call sequences shallower
    and simpler. For this purpose, we separate building and sending of
    rejected messages. We build the reject message using the new function
    tipc_msg_reverse(), and let the transmission go via the newly introduced
    tipc_link_xmit2() function, as all transmission eventually will do. We
    also ensure that all calls to tipc_link_xmit2() are made outside
    port_lock/bh_lock_sock.
    
    Finally, we replace all calls to tipc_reject_msg() with the two new
    calls at all locations in the code that we want to keep. The remaining
    calls are made from code that we are planning to remove, along with
    tipc_reject_msg() itself.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 067608e9d019d6477fd45dd948e81af0e5bf599f
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Jun 25 20:41:34 2014 -0500

    tipc: introduce direct iovec to buffer chain fragmentation function
    
    Fragmentation at message sending is currently performed in two
    places in link.c, depending on whether data to be transmitted
    is delivered in the form of an iovec or as a big sk_buff. Those
    functions are also tightly entangled with the send functions
    that are using them.
    
    We now introduce a re-entrant, standalone function, tipc_msg_build2(),
    that builds a packet chain directly from an iovec. Each fragment is
    sized according to the MTU value given by the caller, and is prepended
    with a correctly built fragment header, when needed. The function is
    independent from who is calling and where the chain will be delivered,
    as long as the caller is able to indicate a correct MTU.
    
    The function is tested, but not called by anybody yet. Since it is
    incompatible with the existing tipc_msg_build(), and we cannot yet
    remove that function, we have given it a temporary name.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 16e166b88cdfd508b88934ec0c8a0ec97e6b30f8
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Jun 25 20:41:33 2014 -0500

    tipc: make link mtu easily accessible from socket
    
    Message fragmentation is currently performed at link level, inside
    the protection of node_lock. This potentially binds up the sending
    link structure for a long time, instead of letting it do other tasks,
    such as handle reception of new packets.
    
    In this commit, we make the MTUs of each active link become easily
    accessible from the socket level, i.e., without taking any spinlock
    or dereferencing the target link pointer. This way, we make it possible
    to perform fragmentation in the sending socket, before sending the
    whole fragment chain to the link for transport.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4f1688b2c63cd86f0d7bcf95a9b3040e38bd3c1a
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Jun 25 20:41:32 2014 -0500

    tipc: introduce send functions for chained buffers in link
    
    The current link implementation provides several different transmit
    functions, depending on the characteristics of the message to be
    sent: if it is an iovec or an sk_buff, if it needs fragmentation or
    not, if the caller holds the node_lock or not. The permutation of
    these options gives us an unwanted amount of unnecessarily complex
    code.
    
    As a first step towards simplifying the send path for all messages,
    we introduce two new send functions at link level, tipc_link_xmit2()
    and __tipc_link_xmit2(). The former looks up a link to the message
    destination, and if one is found, it grabs the node lock and calls
    the second function, which works exclusively inside the node lock
    protection. If no link is found, and the destination is on the same
    node, it delivers the message directly to the local destination
    socket.
    
    The new functions take a buffer chain where all packet headers are
    already prepared, and the correct MTU has been used. These two
    functions will later replace all other link-level transmit functions.
    
    The functions are not backwards compatible, so we have added them
    as new functions with temporary names. They are tested, but have no
    users yet. Those will be added later in this series.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e4de5fab806f74622600ab7fd6ed22b7f911a8c5
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Jun 25 20:41:31 2014 -0500

    tipc: use negative error return values in functions
    
    In some places, TIPC functions returns positive integers as return
    codes. This goes against standard Linux coding practice, and may
    even cause problems in some cases.
    
    We now change the return values of the functions filter_rcv()
    and filter_connect() to become signed integers, and return
    negative error codes when needed. The codes we use in these
    particular cases are still TIPC specific, since they are both
    part of the TIPC API and have no correspondence in errno.h
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3d09fc424406b5610964507b3eb73cebbc3b4c38
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Jun 25 20:41:30 2014 -0500

    tipc: eliminate case of writing to freed memory
    
    In the function tipc_nodesub_notify() we call a function pointer
    aggregated into the object to be notified, whereafter we set
    the function pointer to NULL. However, in some cases the function
    pointed to will free the struct containing the function pointer,
    resulting in a write to already freed memory.
    
    This bug seems to always have been there, without causing any
    notable harm.
    
    In this commit we fix the problem by inverting the order of the
    zeroing and the function call.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 481956841e2e0f88b519267c91d86b7625e2a3af
Author: Ying Xue <ying.xue@windriver.com>
Date:   Tue Apr 29 11:12:18 2014 +0800

    tipc: fix memory leak of publications
    
    commit 1621b94d2a655c8548ddbdfc8ccf907a5bbdc860 upstream.
    
    Commit 1bb8dce57f4d15233688c68990852a10eb1cd79f ("tipc: fix memory
    leak during module removal") introduced a memory leak issue: when
    name table is stopped, it's forgotten that publication instances are
    freed properly. Additionally the useless "continue" statement in
    tipc_nametbl_stop() is removed as well.
    
    Reported-by: Jason <huzhijiang@gmail.com>
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit a6eacef7fba7834da4d22762ea0d8524df3993a8
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Wed Jun 25 10:07:05 2014 +0200

    tipc: bump max configurable window size
    
    The maximum window size is limited by the sequence gap field, which
    was expanded with bd7845337b105e090dd18912d511139945fa7586
    ("tipc: Expand link sequence gap field to 13 bits")
    We remove the artificial limit that prevents the link window to be
    set larger than 150.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 02c00c2ab0807ec64b480e899d2619e64566a0af
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Mon Jun 9 11:08:18 2014 -0500

    tipc: fix potential bug in function tipc_backlog_rcv
    
    In commit 4f4482dcd9a0606a30541ff165ddaca64748299b ("tipc: compensate
    for double accounting in socket rcv buffer") we access 'truesize' of
    a received buffer after it might have been released by the function
    filter_rcv().
    
    In this commit we correct this by reading the value of 'truesize' to
    the stack before delivering the buffer to filter_rcv().
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 85d3fc9418dc5b357290de89b99c9a8bdd9eef89
Author: Arnaldo Carvalho de Melo <acme@kernel.org>
Date:   Fri May 23 15:55:12 2014 -0400

    tipc: Don't reset the timeout when restarting
    
    As it may then take longer than what the user specified using
    setsockopt(SO_RCVTIMEO).
    
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b0027af4a0539a91df88483f06939d7bc2c997c5
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Aug 16 12:09:07 2012 +0000

    tipc: fix lockdep warning during bearer initialization
    
    [ Upstream commit 4225a398c1352a7a5c14dc07277cb5cc4473983b ]
    
    When the lockdep validator is enabled, it will report the below
    warning when we enable a TIPC bearer:
    
    [ INFO: possible irq lock inversion dependency detected ]
    ---------------------------------------------------------
    Possible interrupt unsafe locking scenario:
    
            CPU0                    CPU1
            ----                    ----
       lock(ptype_lock);
                                    local_irq_disable();
                                    lock(tipc_net_lock);
                                    lock(ptype_lock);
       <Interrupt>
       lock(tipc_net_lock);
    
      *** DEADLOCK ***
    
    the shortest dependencies between 2nd lock and 1st lock:
      -> (ptype_lock){+.+...} ops: 10 {
    [...]
    SOFTIRQ-ON-W at:
                          [<c1089418>] __lock_acquire+0x528/0x13e0
                          [<c108a360>] lock_acquire+0x90/0x100
                          [<c1553c38>] _raw_spin_lock+0x38/0x50
                          [<c14651ca>] dev_add_pack+0x3a/0x60
                          [<c182da75>] arp_init+0x1a/0x48
                          [<c182dce5>] inet_init+0x181/0x27e
                          [<c1001114>] do_one_initcall+0x34/0x170
                          [<c17f7329>] kernel_init+0x110/0x1b2
                          [<c155b6a2>] kernel_thread_helper+0x6/0x10
    [...]
       ... key      at: [<c17e4b10>] ptype_lock+0x10/0x20
       ... acquired at:
        [<c108a360>] lock_acquire+0x90/0x100
        [<c1553c38>] _raw_spin_lock+0x38/0x50
        [<c14651ca>] dev_add_pack+0x3a/0x60
        [<c8bc18d2>] enable_bearer+0xf2/0x140 [tipc]
        [<c8bb283a>] tipc_enable_bearer+0x1ba/0x450 [tipc]
        [<c8bb3a04>] tipc_cfg_do_cmd+0x5c4/0x830 [tipc]
        [<c8bbc032>] handle_cmd+0x42/0xd0 [tipc]
        [<c148e802>] genl_rcv_msg+0x232/0x280
        [<c148d3f6>] netlink_rcv_skb+0x86/0xb0
        [<c148e5bc>] genl_rcv+0x1c/0x30
        [<c148d144>] netlink_unicast+0x174/0x1f0
        [<c148ddab>] netlink_sendmsg+0x1eb/0x2d0
        [<c1456bc1>] sock_aio_write+0x161/0x170
        [<c1135a7c>] do_sync_write+0xac/0xf0
        [<c11360f6>] vfs_write+0x156/0x170
        [<c11361e2>] sys_write+0x42/0x70
        [<c155b0df>] sysenter_do_call+0x12/0x38
    [...]
    }
      -> (tipc_net_lock){+..-..} ops: 4 {
    [...]
        IN-SOFTIRQ-R at:
                         [<c108953a>] __lock_acquire+0x64a/0x13e0
                         [<c108a360>] lock_acquire+0x90/0x100
                         [<c15541cd>] _raw_read_lock_bh+0x3d/0x50
                         [<c8bb874d>] tipc_recv_msg+0x1d/0x830 [tipc]
                         [<c8bc195f>] recv_msg+0x3f/0x50 [tipc]
                         [<c146a5fa>] __netif_receive_skb+0x22a/0x590
                         [<c146ab0b>] netif_receive_skb+0x2b/0xf0
                         [<c13c43d2>] pcnet32_poll+0x292/0x780
                         [<c146b00a>] net_rx_action+0xfa/0x1e0
                         [<c103a4be>] __do_softirq+0xae/0x1e0
    [...]
    }
    
    >From the log, we can see three different call chains between
    CPU0 and CPU1:
    
    Time 0 on CPU0:
    
      kernel_init()->inet_init()->dev_add_pack()
    
    At time 0, the ptype_lock is held by CPU0 in dev_add_pack();
    
    Time 1 on CPU1:
    
      tipc_enable_bearer()->enable_bearer()->dev_add_pack()
    
    At time 1, tipc_enable_bearer() first holds tipc_net_lock, and then
    wants to take ptype_lock to register TIPC protocol handler into the
    networking stack.  But the ptype_lock has been taken by dev_add_pack()
    on CPU0, so at this time the dev_add_pack() running on CPU1 has to be
    busy looping.
    
    Time 2 on CPU0:
    
      netif_receive_skb()->recv_msg()->tipc_recv_msg()
    
    At time 2, an incoming TIPC packet arrives at CPU0, hence
    tipc_recv_msg() will be invoked. In tipc_recv_msg(), it first wants
    to hold tipc_net_lock.  At the moment, below scenario happens:
    
    On CPU0, below is our sequence of taking locks:
    
      lock(ptype_lock)->lock(tipc_net_lock)
    
    On CPU1, our sequence of taking locks looks like:
    
      lock(tipc_net_lock)->lock(ptype_lock)
    
    Obviously deadlock may happen in this case.
    
    But please note the deadlock possibly doesn't occur at all when the
    first TIPC bearer is enabled.  Before enable_bearer() -- running on
    CPU1 does not hold ptype_lock, so the TIPC receive handler (i.e.
    recv_msg()) is not registered successfully via dev_add_pack(), so
    the tipc_recv_msg() cannot be called by recv_msg() even if a TIPC
    message comes to CPU0. But when the second TIPC bearer is
    registered, the deadlock can perhaps really happen.
    
    To fix it, we will push the work of registering TIPC protocol
    handler into workqueue context. After the change, both paths taking
    ptype_lock are always in process contexts, thus, the deadlock should
    never occur.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit d6cc76d3898b8295418c772298a53489d9494b71
Merge: 3fdddd859af2 9816f0615d54
Author: David S. Miller <davem@davemloft.net>
Date:   Wed May 14 15:20:19 2014 -0400

    Merge branch 'tipc-next'
    
    Jon Maloy says:
    
    ====================
    tipc: bug fixes and improvements
    
    Intensive and extensive testing has revealed some rather infrequent
    problems related to flow control, buffer handling and link
    establishment. Commits ##1 to 4 deal with these problems.
    
    The remaining four commits are just code improvments, aiming at
    making the code more comprehensible and maintainable. There are
    no functional enhancements in this series.
    
    v2: Fixed a typo in commit log #2. Otherwise no changes from v1.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9816f0615d549b948a76e6d2385159b4366e4658
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed May 14 05:39:15 2014 -0400

    tipc: merge port message reception into socket reception function
    
    In order to reduce complexity and save a call level during message
    reception at port/socket level, we remove the function tipc_port_rcv()
    and merge its functionality into tipc_sk_rcv().
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c82910e2a8d6fc9dd321a1f30dd4e89fb779cfe1
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed May 14 05:39:14 2014 -0400

    tipc: clean up neigbor discovery message reception
    
    The function tipc_disc_rcv(), which is handling received neighbor
    discovery messages, is perceived as messy, and it is hard to verify
    its correctness by code inspection. The fact that the task it is set
    to resolve is fairly complex does not make the situation better.
    
    In this commit we try to take a more systematic approach to the
    problem. We define a decision machine which takes three state flags
     as input, and produces three action flags as output. We then walk
    through all permutations of the state flags, and for each of them we
    describe verbally what is going on, plus that we set zero or more of
    the action flags. The action flags indicate what should be done once
    the decision machine has finished its job, while the last part of the
    function deals with performing those actions.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 38504c28a201a80d12a6a0f821fecb331cb1f223
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed May 14 05:39:13 2014 -0400

    tipc: improve and extend media address conversion functions
    
    TIPC currently handles two media specific addresses: Ethernet MAC
    addresses and InfiniBand addresses. Those are kept in three different
    formats:
    
    1) A "raw" format as obtained from the device. This format is known
       only by the media specific adapter code in eth_media.c and
       ib_media.c.
    2) A "generic" internal format, in the form of struct tipc_media_addr,
       which can be referenced and passed around by the generic media-
       unaware code.
    3) A serialized version of the latter, to be conveyed in neighbor
       discovery messages.
    
    Conversion between the three formats can only be done by the media
    specific code, so we have function pointers for this purpose in
    struct tipc_media. Here, the media adapters can install their own
    conversion functions at startup.
    
    We now introduce a new such function, 'raw2addr()', whose purpose
    is to convert from format 1 to format 2 above. We also try to as far
    as possible uniform commenting, variable names and usage of these
    functions, with the purpose of making them more comprehensible.
    
    We can now also remove the function tipc_l2_media_addr_set(), whose
    job is done better by the new function.
    
    Finally, we expand the field for serialized addresses (format 3)
    in discovery messages from 20 to 32 bytes. This is permitted
    according to the spec, and reduces the risk of problems when we
    add new media in the future.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 37e22164a8a3c39bdad45aa463b1e69a1fdf4110
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed May 14 05:39:12 2014 -0400

    tipc: rename and move message reassembly function
    
    The function tipc_link_frag_rcv() is in reality a re-entrant generic
    message reassemby function that has nothing in particular to do with
    the link, where it is defined now. This becomes obvious when we see
    the need to call the function from other places in the code.
    
    In this commit rename it to tipc_buf_append() and move it to the file
    msg.c. We also simplify its signature by moving the tail pointer to
    the control block of the head buffer, hence making the head buffer
    self-contained.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5074ab89c555dd130ceeac129546670423d634b8
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed May 14 05:39:11 2014 -0400

    tipc: mark head of reassembly buffer as non-linear
    
    The message reassembly function does not update the 'len' and 'data_len'
    fields of the head skbuff correctly when fragments are chained to it.
    This may sometimes lead to obsure errors, such as fragment reordering
    when we receive fragments which are cloned buffers.
    
    This commit fixes this, by ensuring that the two fields are updated
    correctly.
    
    Suggested-by: Eric Dumazet <eric.dumazet@gmail.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ec37dcd382b4f3673bfbf36ccd348ef48f98ffe3
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed May 14 05:39:10 2014 -0400

    tipc: don't record link RESET or ACTIVATE messages as traffic
    
    In the current code, all incoming LINK_PROTOCOL messages, irrespective
    of type, nudge the "last message received" checkpoint, informing the
    link state machine that a message was received from the peer since last
    supervision timeout event. This inhibits the link from starting probing
    the peer unnecessarily.
    
    However, not only STATE messages are recorded as legitimate incoming
    traffic this way, but even RESET and ACTIVATE messages, which in
    reality are there to inform the link that the peer endpoint has been
    reset. At the same time, some RESET messages may be dropped instead
    of causing a link reset. This happens when the link endpoint thinks
    it is fully up and working, and the session number of the RESET is
    lower than or equal to the current link session. In such cases the
    RESET is perceived as a delayed remnant from an earlier session, or
    the current one, and dropped.
    
    Now, if a TIPC module is removed and then immediately reinserted, e.g.
    when using a script, RESET messages may arrive at the peer link endpoint
    before this one has had time to discover the failure. The RESET may be
    dropped because of the session number, but only after it has been
    recorded as a legitimate traffic event. Hence, the receiving link will
    not start probing, and not discover that the peer endpoint is down, at
    the same time ignoring the periodic RESET messages coming from that
    endpoint. We have ended up in a stale state where a failed link cannot
    be re-established.
    
    In this commit, we remedy this by nudging the checkpoint only for
    received STATE messages, not for RESET or ACTIVATE messages.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4f4482dcd9a0606a30541ff165ddaca64748299b
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed May 14 05:39:09 2014 -0400

    tipc: compensate for double accounting in socket rcv buffer
    
    The function net/core/sock.c::__release_sock() runs a tight loop
    to move buffers from the socket backlog queue to the receive queue.
    
    As a security measure, sk_backlog.len of the receiving socket
    is not set to zero until after the loop is finished, i.e., until
    the whole backlog queue has been transferred to the receive queue.
    During this transfer, the data that has already been moved is counted
    both in the backlog queue and the receive queue, hence giving an
    incorrect picture of the available queue space for new arriving buffers.
    
    This leads to unnecessary rejection of buffers by sk_add_backlog(),
    which in TIPC leads to unnecessarily broken connections.
    
    In this commit, we compensate for this double accounting by adding
    a counter that keeps track of it. The function socket.c::backlog_rcv()
    receives buffers one by one from __release_sock(), and adds them to the
    socket receive queue. If the transfer is successful, it increases a new
    atomic counter 'tipc_sock::dupl_rcvcnt' with 'truesize' of the
    transferred buffer. If a new buffer arrives during this transfer and
    finds the socket busy (owned), we attempt to add it to the backlog.
    However, when sk_add_backlog() is called, we adjust the 'limit'
    parameter with the value of the new counter, so that the risk of
    inadvertent rejection is eliminated.
    
    It should be noted that this change does not invalidate the original
    purpose of zeroing 'sk_backlog.len' after the full transfer. We set an
    upper limit for dupl_rcvcnt, so that if a 'wild' sender (i.e., one that
    doesn't respect the send window) keeps pumping in buffers to
    sk_add_backlog(), he will eventually reach an upper limit,
    (2 x TIPC_CONN_OVERLOAD_LIMIT). After that, no messages can be added
    to the backlog, and the connection will be broken. Ordinary, well-
    behaved senders will never reach this buffer limit at all.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6163a194e02ab6cab2758b277a0ae082378dd4e6
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed May 14 05:39:08 2014 -0400

    tipc: decrease connection flow control window
    
    Memory overhead when allocating big buffers for data transfer may
    be quite significant. E.g., truesize of a 64 KB buffer turns out
    to be 132 KB, 2 x the requested size.
    
    This invalidates the "worst case" calculation we have been
    using to determine the default socket receive buffer limit,
    which is based on the assumption that 1024x64KB = 67MB buffers
    may be queued up on a socket.
    
    Since TIPC connections cannot survive hitting the buffer limit,
    we have to compensate for this overhead.
    
    We do that in this commit by dividing the fix connection flow
    control window from 1024 (2*512) messages to 512 (2*256). Since
    older version nodes send out acks at 512 message intervals,
    compatibility with such nodes is guaranteed, although performance
    may be non-optimal in such cases.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a3ab3c13f1fe6eea92468ddd1681d41e133fe703
Merge: 1b5d35358eff ca9cf06a0654
Author: David S. Miller <davem@davemloft.net>
Date:   Fri May 9 01:41:09 2014 -0400

    Merge branch 'tipc-next'
    
    Ying Xue says:
    
    ====================
    tipc: overhaul node action flags
    
    We currently have two problems with the node flags field:
     - The naming of the individual action flags is unclear and confusing
     - The flags are often not cleared individually,  making it hard to follow
       where this happens.
    
    So the series aims to solve above two problems.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ca9cf06a0654fcf4b114a5a2d08723fc45d00317
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu May 8 08:54:40 2014 +0800

    tipc: don't directly overwrite node action_flags
    
    Each node action flag should be set or cleared separately, instead
    we now set the whole flags variable in one shot, and it's turned
    out to be hard to see which other flags are affected. Therefore,
    for instance, we explicitly clear TIPC_WAIT_OWN_LINKS_DOWN bit in
    node_lost_contact().
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit aecb9bb89cbc08366c50a98d2d4751b381a6dc3b
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu May 8 08:54:39 2014 +0800

    tipc: rename enum names of node flags
    
    Rename node flags to action_flags as well as its enum names so
    that they can reflect its real meanings.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5a50a92784e4630f7b3e163ecd32ac3f783d9b4e
Merge: 5b579e212fc7 52ff872055e0
Author: David S. Miller <davem@davemloft.net>
Date:   Mon May 5 17:26:54 2014 -0400

    Merge branch 'tipc-next'
    
    Ying Xue says:
    
    ====================
    tipc: purge signal handler infrastructure
    
    When we delay some actions to be executed in asynchronous contexts,
    these usually add unnecessary code complexities, and make their
    behaviours unpredictable and indeterministic. Moreover, as the signal
    handler infrastructure is first stopped when tipc module is removed,
    this may cause some potential risks for us. For instance, although
    signal handler is already stopped, some tipc components still submit
    signal requests to signal handler infrastructure, which may lead to
    some resources not to be released or freed correctly.
    
    So the series aims to convert all actions being performed in tasklet
    context asynchronously with interface provided by signal handler
    infrastructure to be executed synchronously, thereby deleting the
    whole infrastructure of signal handler.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 52ff872055e06af10f94b8853c946f07ed8a0672
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon May 5 08:56:18 2014 +0800

    tipc: purge signal handler infrastructure
    
    In the previous commits of this series, we removed all asynchronous
    actions which were based on the tasklet handler - "tipc_k_signal()".
    
    So the moment has now come when we can completely remove the tasklet
    handler infrastructure. That is done with this commit.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3f5a12bd9f9a61d8a12f9adf778b14e4bb8ca050
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon May 5 08:56:17 2014 +0800

    tipc: avoid to asynchronously reset all links
    
    Postpone the actions of resetting all links until after bclink
    lock is released, avoiding to asynchronously reset all links.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit eb8b00f5f248c50603bca383792ac3a618297be0
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon May 5 08:56:16 2014 +0800

    tipc: convert allocations of global variables associated with bclink
    
    Convert allocations of global variables associated with bclink from
    static way to dynamical way for the convenience of bclink instance
    initialisation. Meanwhile, this also helps TIPC support name space
    in the future easily.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d69afc90b8d47e471d2870f090f662e569b08407
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon May 5 08:56:15 2014 +0800

    tipc: define new functions to operate bc_lock
    
    As we are going to do more jobs when bc_lock is released, the two
    operations of holding/releasing the lock should be encapsulated with
    functions. In addition, we move bc_lock spin lock into tipc_bclink
    structure avoiding to define the global variable.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ca0c42732c512a12fabe677594840f31861dd31a
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon May 5 08:56:14 2014 +0800

    tipc: avoid to asynchronously deliver name tables to peer node
    
    Postpone the actions of delivering name tables until after node
    lock is released, avoiding to do it under asynchronous context.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9d561949685749be3d97239eab7d85aa78718108
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon May 5 08:56:13 2014 +0800

    tipc: remove TIPC_NAMES_GONE node flag
    
    Since previously what all publications pertaining to the lost node
    were removed from name table was finished in tasklet context
    asynchronously, we need to TIPC_NAMES_GONE flag indicating whether
    the node cleanup work is finished or not. But now as the cleanup work
    has been finished when node lock is released, the flag becomes
    meaningless for us.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9db9fdd1983eb960182d72f95d77b91b3a5173d0
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon May 5 08:56:12 2014 +0800

    tipc: avoid to asynchronously notify subscriptions
    
    Postpone the actions of notifying subscriptions until after node lock
    is released, avoiding to asynchronously execute registered handlers
    when node is lost.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 10f465c4966fbc8f50a59480d37a3451f6f3d564
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon May 5 08:56:11 2014 +0800

    tipc: rename setup_blocked variable of node struct to flags
    
    Rename setup_blocked variable of node struct to a more common
    name called "flags", which will be used to represent kinds of
    node states.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 486f930ac546914550b84abbc227867cc1be1f95
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon May 5 08:56:10 2014 +0800

    tipc: adjust order of variables in tipc_node structure
    
    Move more frequently used variables up to the head of tipc_node
    structure, hopefully improving a bit performance.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5356f3d7d48af72eb2a14b643d5563f068c44fe0
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon May 5 08:56:09 2014 +0800

    tipc: always use tipc_node_lock() to hold node lock
    
    Although we obtain node lock with tipc_node_lock() in most time, there
    are still places where we directly use native spin lock interface
    to grab node lock. But as we will do more jobs in the future when node
    lock is released, we should ensure that tipc_node_lock() is always
    called when node lock is taken.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1621b94d2a655c8548ddbdfc8ccf907a5bbdc860
Author: Ying Xue <ying.xue@windriver.com>
Date:   Tue Apr 29 11:12:18 2014 +0800

    tipc: fix memory leak of publications
    
    Commit 1bb8dce57f4d15233688c68990852a10eb1cd79f ("tipc: fix memory
    leak during module removal") introduced a memory leak issue: when
    name table is stopped, it's forgotten that publication instances are
    freed properly. Additionally the useless "continue" statement in
    tipc_nametbl_stop() is removed as well.
    
    Reported-by: Jason <huzhijiang@gmail.com>
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit eab8c045732635e3833a5d58b17c6da08ff71f9e
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Apr 28 18:00:10 2014 +0800

    tipc: move the delivery of named messages out of nametbl lock
    
    Commit a89778d8baf19cd7e728d81121a294a06cedaad1 ("tipc: add support
    for link state subscriptions") introduced below possible deadlock
    scenario:
    
           CPU0                          CPU1
    T0:   tipc_publish()                 link_timeout()
    T1:   tipc_nametbl_publish()         [grab node lock]*
    T2:   [grab nametbl write lock]*     link_state_event()
    T3:   named_cluster_distribute()     link_activate()
    T4:   [grab node lock]*              tipc_node_link_up()
    T5:                                  tipc_nametbl_publish()
    T6:                                  [grab nametble write lock]*
    
    The opposite order of holding nametbl write lock and node lock on
    above two different paths may result in a deadlock. If we move the
    the delivery of named messages via link out of name nametbl lock,
    the reverse order of holding locks will be eliminated, as a result,
    the deadlock will be killed as well.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d7bb74c38cb3de40600dcbba50a4f84df290dc91
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Mon Apr 28 08:20:09 2014 +0200

    tipc: fix out of bounds indexing
    
    Commit 78acb1f9b898e85fa2c1e28e700b54b66b288e8d ("tipc: add
    ioctl to fetch link names") introduced a buffer overflow bug where
    specially crafted ioctl requests could cause out-of-bounds indexing
    of the node->links array. This was caused by an incorrect check vs
    MAX_BEARERS, and the static code checker complaint is:
    net/tipc/node.c:459 tipc_node_get_linkname() error: buffer overflow 'node->links' 2 <= 2
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 22e7987ae7d8d13beeaf0717215800f7e803ddcf
Author: Ying Xue <ying.xue@windriver.com>
Date:   Fri Apr 25 10:44:15 2014 +0800

    tipc: fix a possible memory leak
    
    The commit a8b9b96e959f3c035af20b1bd2ba67b0b7269b19 ("tipc: fix race
    in disc create/delete") leads to the following static checker warning:
    
            net/tipc/discover.c:352 tipc_disc_create()
                    warn: possible memory leak of 'req'
    
    The risk of memory leak really exists in practice. Especially when
    it's failed to allocate memory for "req->buf", tipc_disc_create()
    doesn't free its allocated memory, instead just directly returns
    with ENOMEM error code. In this situation, memory leak, of course,
    happens.
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7f51531c11be9f6ebace405aec724ffac043a8f5
Merge: d42f157b3498 78acb1f9b898
Author: David S. Miller <davem@davemloft.net>
Date:   Sat Apr 26 12:13:30 2014 -0400

    Merge branch 'tipc-next'
    
    Erik Hugne says:
    
    ====================
    tipc: add support for link state subscriptions
    
    Low level topology information like TIPC link up/down is useful for
    applications like teamd to make smarter failover decisions in a
    HA cluster environment. Fetching logical link names through an ioctl
    may hurt the eyes of some. Suggestions for a more elegant way of doing
    this would be appreciated in that case. :)
    
    v2:
       -Properly based on net-next
       -Off-list comments from Billie Alsup:
        -Add a string length parameter to tipc_node_get_linkname
        -Use TIPC_MAX_LINK_NAME definition instead of hardcoded
         value in tipc_sioc_ln_req linkname
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 78acb1f9b898e85fa2c1e28e700b54b66b288e8d
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Thu Apr 24 16:26:47 2014 +0200

    tipc: add ioctl to fetch link names
    
    We add a new ioctl for AF_TIPC that can be used to fetch the
    logical name for a link to a remote node on a given bearer. This
    should be used in combination with link state subscriptions.
    The logical name size limit definitions are moved to tipc.h, as
    they are now also needed by the new ioctl.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a89778d8baf19cd7e728d81121a294a06cedaad1
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Thu Apr 24 16:26:46 2014 +0200

    tipc: add support for link state subscriptions
    
    When links are established over a bearer plane, we create a node
    local publication containing information about the peer node and
    bearer plane. This allows TIPC applications to use the standard
    TIPC topology server subscription mechanism to get notifications
    when a link goes up or down.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0080d4f5f21861da5d5c0bf443e6ba1222c6af7b
Merge: 5a9d19ab76f9 a8b9b96e959f
Author: David S. Miller <davem@davemloft.net>
Date:   Tue Apr 22 21:18:26 2014 -0400

    Merge branch 'tipc-next'
    
    Ying Xue says:
    
    ====================
    purge tipc_net_lock
    
    Now tipc routing hierarchy comprises the structures 'node', 'link'and
    'bearer'. The whole hierarchy is protected by a big read/write lock,
    tipc_net_lock, to ensure that nothing is added or removed while code
    is accessing any of these structures. Obviously the locking policy
    makes node, link and bearer components closely bound together so that
    their relationship becomes unnecessarily complex. In the worst case,
    such locking policy not only has a negative influence on performance,
    but also it's prone to lead to deadlock occasionally.
    
    In order o decouple the complex relationship between bearer and node
    as well as link, the locking policy is adjusted as follows:
    
    - Bearer level
      RTNL lock is used on update side, and RCU is used on read side.
      Meanwhile, all bearer instances including broadcast bearer are
      saved into bearer_list array.
    
    - Node and link level
      All node instances are saved into two tipc_node_list and node_htable
      lists. The two lists are protected by node_list_lock on write side,
      and they are guarded with RCU lock on read side. All members in node
      structure including link instances are protected by node spin lock.
    
    - The relationship between bearer and node
      When link accesses bearer, it first needs to find the bearer with
      its bearer identity from the bearer_list array. When bearer accesses
      node, it can iterate the node_htable hash list with the node address
      to find the corresponding node.
    
    In the new locking policy, every component has its private locking
    solution and the relationship between bearer and node is very simple,
    that is, they can find each other with node address or bearer identity
    from node_htable hash list or bearer_list array.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a8b9b96e959f3c035af20b1bd2ba67b0b7269b19
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Apr 21 10:55:52 2014 +0800

    tipc: fix race in disc create/delete
    
    Commit a21a584d6720ce349b05795b9bcfab3de8e58419 (tipc: fix neighbor
    detection problem after hw address change) introduces a race condition
    involving tipc_disc_delete() and tipc_disc_add/remove_dest that can
    cause TIPC to dereference the pointer to the bearer discovery request
    structure after it has been freed since a stray pointer is left in the
    bearer structure.
    
    In order to fix the issue, the process of resetting the discovery
    request handler is optimized: the discovery request handler and request
    buffer are just reset instead of being freed, allocated and initialized.
    As the request point is always valid and the request's lock is taken
    while the request handler is reset, the race doesn't happen any more.
    
    Reported-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Tested-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 28dd94187afd660a350d01d6bad4a915a6d570b8
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Apr 21 10:55:51 2014 +0800

    tipc: use bc_lock to protect node map in bearer structure
    
    The node map variable - 'nodes' in bearer structure is only used by
    bclink. When bclink accesses it, bc_lock is held. But when change it,
    for instance, in tipc_bearer_add_dest() or tipc_bearer_remove_dest()
    the bc_lock is not taken at all. To avoid any inconsistent data, we
    should always grab bc_lock while accessing node map variable.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Tested-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4ae88c94d3b52dc47c6ad9352991219862f703f9
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Apr 21 10:55:50 2014 +0800

    tipc: use bearer_disable to disable bearer in tipc_l2_device_event
    
    As bearer pointer is known in tipc_l2_device_event(), it's unnecessary
    to search it again in tipc_disable_bearer(). If tipc_disable_bearer()
    is replaced with bearer_disable() in tipc_l2_device_event(), this will
    help us save a bit time when bearer is disabled.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Tested-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f1c8d8cb82113ea6f41d2774127d3d08a4ca8d46
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Apr 21 10:55:49 2014 +0800

    tipc: make media_ptr pointed netdevice valid
    
    The 'media_ptr' pointer in bearer structure which points to network
    device, is protected by RCU. So, before netdevice is released,
    synchronize_net() should be involved to prevent no any user of
    the netdevice on read side from accessing it after it is freed.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Tested-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7216cd949c9bd56a4ccd952c624ab68f8c9aa0a4
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Apr 21 10:55:48 2014 +0800

    tipc: purge tipc_net_lock lock
    
    Now tipc routing hierarchy comprises the structures 'node', 'link'and
    'bearer'. The whole hierarchy is protected by a big read/write lock,
    tipc_net_lock, to ensure that nothing is added or removed while code
    is accessing any of these structures. Obviously the locking policy
    makes node, link and bearer components closely bound together so that
    their relationship becomes unnecessarily complex. In the worst case,
    such locking policy not only has a negative influence on performance,
    but also it's prone to lead to deadlock occasionally.
    
    In order o decouple the complex relationship between bearer and node
    as well as link, the locking policy is adjusted as follows:
    
    - Bearer level
      RTNL lock is used on update side, and RCU is used on read side.
      Meanwhile, all bearer instances including broadcast bearer are
      saved into bearer_list array.
    
    - Node and link level
      All node instances are saved into two tipc_node_list and node_htable
      lists. The two lists are protected by node_list_lock on write side,
      and they are guarded with RCU lock on read side. All members in node
      structure including link instances are protected by node spin lock.
    
    - The relationship between bearer and node
      When link accesses bearer, it first needs to find the bearer with
      its bearer identity from the bearer_list array. When bearer accesses
      node, it can iterate the node_htable hash list with the node
      address to find the corresponding node.
    
    In the new locking policy, every component has its private locking
    solution and the relationship between bearer and node is very simple,
    that is, they can find each other with node address or bearer identity
    from node_htable hash list or bearer_list array.
    
    Until now above all changes have been done, so tipc_net_lock can be
    removed safely.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Tested-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2231c5af451e4b7ae3cc56eaa4653af6ede51109
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Apr 21 10:55:47 2014 +0800

    tipc: use RCU to protect media_ptr pointer
    
    Now the media_ptr pointer is protected with tipc_net_lock write lock
    on write side; tipc_net_lock read lock is used to read side. As the
    part of effort of eliminating tipc_net_lock, we decide to adjust the
    locking policy of media_ptr pointer protection: on write side, RTNL
    lock is use while on read side RCU read lock is applied.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Tested-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7a2f7d18e79b09c5c5a65fb1fa0e31ad046b3116
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Apr 21 10:55:46 2014 +0800

    tipc: decouple the relationship between bearer and link
    
    Currently on both paths of message transmission and reception, the
    read lock of tipc_net_lock must be held before bearer is accessed,
    while the write lock of tipc_net_lock has to be taken before bearer
    is configured. Although it can ensure that bearer is always valid on
    the two data paths, link and bearer is closely bound together.
    
    So as the part of effort of removing tipc_net_lock, the locking
    policy of bearer protection will be adjusted as below: on the two
    data paths, RCU is used, and on the configuration path of bearer,
    RTNL lock is applied.
    
    Now RCU just covers the path of message reception. To make it possible
    to protect the path of message transmission with RCU, link should not
    use its stored bearer pointer to access bearer, but it should use the
    bearer identity of its attached bearer as index to get bearer instance
    from bearer_list array, which can help us decouple the relationship
    between bearer and link. As a result, bearer on the path of message
    transmission can be safely protected by RCU when we access bearer_list
    array within RCU lock protection.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Tested-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f8322dfce5766c8e26d9224cbcaf6fdc0b2eb04d
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Apr 21 10:55:45 2014 +0800

    tipc: convert bearer_list to RCU list
    
    Convert bearer_list to RCU list. It's protected by RTNL lock on
    update side, and RCU read lock is applied to read side.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Tested-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f97e455abf0d83b7d69da295163db18e3ebb4d8b
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Apr 21 10:55:44 2014 +0800

    tipc: use RTNL lock to protect tipc_net_stop routine
    
    As the tipc network initialization(ie, tipc_net_start routine) is
    under RTNL protection, its corresponding deinitialization part(ie,
    tipc_net_stop routine) should be protected by RTNL too.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Tested-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ca07fb07c9a362149ea72f0de8f7eefd00489ecc
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Apr 21 10:55:43 2014 +0800

    tipc: adjust locking policy of protecting tipc_ptr pointer of net_device
    
    Currently the 'tipc_ptr' pointer is protected by tipc_net_lock
    write lock on write side, and RCU read lock is applied to read
    side. In addition, there have two paths on write side where we
    may change variables pointed by the 'tipc_ptr' pointer: one is
    to configure bearer by tipc-config tool and another one is that
    bearer status is changed by notification events of its attached
    interface. But on the latter path, we improperly deem that
    accessing 'tipc_ptr' pointer happens on read side with
    rcu_read_lock() although some variables pointed by the 'tipc_ptr'
    pointer are changed possibly.
    
    Moreover, as now the both paths are guarded by RTNL lock, it's
    better to adjust the locking policy of 'tipc_ptr' pointer
    protection, allowing RTNL instead of tipc_net_lock write lock to
    protect it on write side, which will help us purge tipc_net_lock
    in the future.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Tested-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ef13a262c339544a81e3ba8d15ee345641593da4
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Apr 21 10:55:42 2014 +0800

    tipc: replace config_mutex lock with RTNL lock
    
    There have two paths where we can configure or change bearer status:
    one is that bearer is configured from user space with tipc-config
    tool; another one is that bearer is changed by notification events
    from its attached interface. On the first path, one dedicated
    config_mutex lock is guarded; on the latter path, RTNL lock has been
    placed to serialize the process of dealing with interface events.
    So, if RTNL lock is also used to protect the first path, this will
    not only extremely help us simplify current locking policy, but also
    config_mutex lock can be deleted as well.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Tested-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 21a018a58f3c92c7e39ca38b84643bd187e397db
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Mon Mar 24 16:56:38 2014 +0100

    tipc: fix spinlock recursion bug for failed subscriptions
    
    [ Upstream commit a5d0e7c037119484a7006b883618bfa87996cb41 ]
    
    If a topology event subscription fails for any reason, such as out
    of memory, max number reached or because we received an invalid
    request the correct behavior is to terminate the subscribers
    connection to the topology server. This is currently broken and
    produces the following oops:
    
    [27.953662] tipc: Subscription rejected, illegal request
    [27.955329] BUG: spinlock recursion on CPU#1, kworker/u4:0/6
    [27.957066]  lock: 0xffff88003c67f408, .magic: dead4ead, .owner: kworker/u4:0/6, .owner_cpu: 1
    [27.958054] CPU: 1 PID: 6 Comm: kworker/u4:0 Not tainted 3.14.0-rc6+ #5
    [27.960230] Hardware name: Bochs Bochs, BIOS Bochs 01/01/2011
    [27.960874] Workqueue: tipc_rcv tipc_recv_work [tipc]
    [27.961430]  ffff88003c67f408 ffff88003de27c18 ffffffff815c0207 ffff88003de1c050
    [27.962292]  ffff88003de27c38 ffffffff815beec5 ffff88003c67f408 ffffffff817f0a8a
    [27.963152]  ffff88003de27c58 ffffffff815beeeb ffff88003c67f408 ffffffffa0013520
    [27.964023] Call Trace:
    [27.964292]  [<ffffffff815c0207>] dump_stack+0x45/0x56
    [27.964874]  [<ffffffff815beec5>] spin_dump+0x8c/0x91
    [27.965420]  [<ffffffff815beeeb>] spin_bug+0x21/0x26
    [27.965995]  [<ffffffff81083df6>] do_raw_spin_lock+0x116/0x140
    [27.966631]  [<ffffffff815c6215>] _raw_spin_lock_bh+0x15/0x20
    [27.967256]  [<ffffffffa0008540>] subscr_conn_shutdown_event+0x20/0xa0 [tipc]
    [27.968051]  [<ffffffffa000fde4>] tipc_close_conn+0xa4/0xb0 [tipc]
    [27.968722]  [<ffffffffa00101ba>] tipc_conn_terminate+0x1a/0x30 [tipc]
    [27.969436]  [<ffffffffa00089a2>] subscr_conn_msg_event+0x1f2/0x2f0 [tipc]
    [27.970209]  [<ffffffffa0010000>] tipc_receive_from_sock+0x90/0xf0 [tipc]
    [27.970972]  [<ffffffffa000fa79>] tipc_recv_work+0x29/0x50 [tipc]
    [27.971633]  [<ffffffff8105dbf5>] process_one_work+0x165/0x3e0
    [27.972267]  [<ffffffff8105e869>] worker_thread+0x119/0x3a0
    [27.972896]  [<ffffffff8105e750>] ? manage_workers.isra.25+0x2a0/0x2a0
    [27.973622]  [<ffffffff810648af>] kthread+0xdf/0x100
    [27.974168]  [<ffffffff810647d0>] ? kthread_create_on_node+0x1a0/0x1a0
    [27.974893]  [<ffffffff815ce13c>] ret_from_fork+0x7c/0xb0
    [27.975466]  [<ffffffff810647d0>] ? kthread_create_on_node+0x1a0/0x1a0
    
    The recursion occurs when subscr_terminate tries to grab the
    subscriber lock, which is already taken by subscr_conn_msg_event.
    We fix this by checking if the request to establish a new
    subscription was successful, and if not we initiate termination of
    the subscriber after we have released the subscriber lock.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit d80441c0019881e72774fa3f51a09997b8214a46
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Thu Mar 6 14:40:21 2014 +0100

    tipc: don't log disabled tasklet handler errors
    
    [ Upstream commit 2892505ea170094f982516bb38105eac45f274b1 ]
    
    Failure to schedule a TIPC tasklet with tipc_k_signal because the
    tasklet handler is disabled is not an error. It means TIPC is
    currently in the process of shutting down. We remove the error
    logging in this case.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 140490bca84bceb627da429ffceb03fb88b208e3
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Thu Mar 6 14:40:20 2014 +0100

    tipc: fix memory leak during module removal
    
    [ Upstream commit 1bb8dce57f4d15233688c68990852a10eb1cd79f ]
    
    When the TIPC module is removed, the tasklet handler is disabled
    before all other subsystems. This will cause lingering publications
    in the name table because the node_down tasklets responsible to
    clean up publications from an unreachable node will never run.
    When the name table is shut down, these publications are detected
    and an error message is logged:
    tipc: nametbl_stop(): orphaned hash chain detected
    This is actually a memory leak, introduced with commit
    993b858e37b3120ee76d9957a901cca22312ffaa ("tipc: correct the order
    of stopping services at rmmod")
    
    Instead of just logging an error and leaking memory, we free
    the orphaned entries during nametable shutdown.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit fa7a24eeb7d49ea81028b1ddb0921a6703fe1424
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Thu Mar 6 14:40:19 2014 +0100

    tipc: drop subscriber connection id invalidation
    
    [ Upstream commit edcc0511b5ee7235282a688cd604e3ae7f9e1fc9 ]
    
    When a topology server subscriber is disconnected, the associated
    connection id is set to zero. A check vs zero is then done in the
    subscription timeout function to see if the subscriber have been
    shut down. This is unnecessary, because all subscription timers
    will be cancelled when a subscriber terminates. Setting the
    connection id to zero is actually harmful because id zero is the
    identity of the topology server listening socket, and can cause a
    race that leads to this socket being closed instead.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit a9d796583feb5cfa2e2282e69a4963aa3492dfe6
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Mar 6 14:40:17 2014 +0100

    tipc: fix connection refcount leak
    
    [ Upstream commit 4652edb70e8a7eebbe47fa931940f65522c36e8f ]
    
    When tipc_conn_sendmsg() calls tipc_conn_lookup() to query a
    connection instance, its reference count value is increased if
    it's found. But subsequently if it's found that the connection is
    closed, the work of sending message is not queued into its server
    send workqueue, and the connection reference count is not decreased.
    This will cause a reference count leak. To reproduce this problem,
    an application would need to open and closes topology server
    connections with high intensity.
    
    We fix this by immediately decrementing the connection reference
    count if a send fails due to the connection being closed.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 1f92d32f63aef244e48d96b6d1abab64133b0d0c
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Mar 6 14:40:16 2014 +0100

    tipc: allow connection shutdown callback to be invoked in advance
    
    [ Upstream commit 6d4ebeb4df0176b1973875840a9f7e91394c0685 ]
    
    Currently connection shutdown callback function is called when
    connection instance is released in tipc_conn_kref_release(), and
    receiving packets and sending packets are running in different
    threads. Even if connection is closed by the thread of receiving
    packets, its shutdown callback may not be called immediately as
    the connection reference count is non-zero at that moment. So,
    although the connection is shut down by the thread of receiving
    packets, the thread of sending packets doesn't know it. Before
    its shutdown callback is invoked to tell the sending thread its
    connection has been closed, the sending thread may deliver
    messages by tipc_conn_sendmsg(), this is why the following error
    information appears:
    
    "Sending subscription event failed, no memory"
    
    To eliminate it, allow connection shutdown callback function to
    be called before connection id is removed in tipc_close_conn(),
    which makes the sending thread know the truth in time that its
    socket is closed so that it doesn't send message to it. We also
    remove the "Sending XXX failed..." error reporting for topology
    and config services.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit e78e7aa146835ad539534fe98e573043a73797f1
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Mon Mar 24 16:56:38 2014 +0100

    tipc: fix spinlock recursion bug for failed subscriptions
    
    [ Upstream commit a5d0e7c037119484a7006b883618bfa87996cb41 ]
    
    If a topology event subscription fails for any reason, such as out
    of memory, max number reached or because we received an invalid
    request the correct behavior is to terminate the subscribers
    connection to the topology server. This is currently broken and
    produces the following oops:
    
    [27.953662] tipc: Subscription rejected, illegal request
    [27.955329] BUG: spinlock recursion on CPU#1, kworker/u4:0/6
    [27.957066]  lock: 0xffff88003c67f408, .magic: dead4ead, .owner: kworker/u4:0/6, .owner_cpu: 1
    [27.958054] CPU: 1 PID: 6 Comm: kworker/u4:0 Not tainted 3.14.0-rc6+ #5
    [27.960230] Hardware name: Bochs Bochs, BIOS Bochs 01/01/2011
    [27.960874] Workqueue: tipc_rcv tipc_recv_work [tipc]
    [27.961430]  ffff88003c67f408 ffff88003de27c18 ffffffff815c0207 ffff88003de1c050
    [27.962292]  ffff88003de27c38 ffffffff815beec5 ffff88003c67f408 ffffffff817f0a8a
    [27.963152]  ffff88003de27c58 ffffffff815beeeb ffff88003c67f408 ffffffffa0013520
    [27.964023] Call Trace:
    [27.964292]  [<ffffffff815c0207>] dump_stack+0x45/0x56
    [27.964874]  [<ffffffff815beec5>] spin_dump+0x8c/0x91
    [27.965420]  [<ffffffff815beeeb>] spin_bug+0x21/0x26
    [27.965995]  [<ffffffff81083df6>] do_raw_spin_lock+0x116/0x140
    [27.966631]  [<ffffffff815c6215>] _raw_spin_lock_bh+0x15/0x20
    [27.967256]  [<ffffffffa0008540>] subscr_conn_shutdown_event+0x20/0xa0 [tipc]
    [27.968051]  [<ffffffffa000fde4>] tipc_close_conn+0xa4/0xb0 [tipc]
    [27.968722]  [<ffffffffa00101ba>] tipc_conn_terminate+0x1a/0x30 [tipc]
    [27.969436]  [<ffffffffa00089a2>] subscr_conn_msg_event+0x1f2/0x2f0 [tipc]
    [27.970209]  [<ffffffffa0010000>] tipc_receive_from_sock+0x90/0xf0 [tipc]
    [27.970972]  [<ffffffffa000fa79>] tipc_recv_work+0x29/0x50 [tipc]
    [27.971633]  [<ffffffff8105dbf5>] process_one_work+0x165/0x3e0
    [27.972267]  [<ffffffff8105e869>] worker_thread+0x119/0x3a0
    [27.972896]  [<ffffffff8105e750>] ? manage_workers.isra.25+0x2a0/0x2a0
    [27.973622]  [<ffffffff810648af>] kthread+0xdf/0x100
    [27.974168]  [<ffffffff810647d0>] ? kthread_create_on_node+0x1a0/0x1a0
    [27.974893]  [<ffffffff815ce13c>] ret_from_fork+0x7c/0xb0
    [27.975466]  [<ffffffff810647d0>] ? kthread_create_on_node+0x1a0/0x1a0
    
    The recursion occurs when subscr_terminate tries to grab the
    subscriber lock, which is already taken by subscr_conn_msg_event.
    We fix this by checking if the request to establish a new
    subscription was successful, and if not we initiate termination of
    the subscriber after we have released the subscriber lock.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fc9696c20861a1b3cb8e493344c35237839671e2
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Thu Mar 6 14:40:21 2014 +0100

    tipc: don't log disabled tasklet handler errors
    
    [ Upstream commit 2892505ea170094f982516bb38105eac45f274b1 ]
    
    Failure to schedule a TIPC tasklet with tipc_k_signal because the
    tasklet handler is disabled is not an error. It means TIPC is
    currently in the process of shutting down. We remove the error
    logging in this case.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 59caf2777566e6cb4ef45d092e87d4780db2943f
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Thu Mar 6 14:40:20 2014 +0100

    tipc: fix memory leak during module removal
    
    [ Upstream commit 1bb8dce57f4d15233688c68990852a10eb1cd79f ]
    
    When the TIPC module is removed, the tasklet handler is disabled
    before all other subsystems. This will cause lingering publications
    in the name table because the node_down tasklets responsible to
    clean up publications from an unreachable node will never run.
    When the name table is shut down, these publications are detected
    and an error message is logged:
    tipc: nametbl_stop(): orphaned hash chain detected
    This is actually a memory leak, introduced with commit
    993b858e37b3120ee76d9957a901cca22312ffaa ("tipc: correct the order
    of stopping services at rmmod")
    
    Instead of just logging an error and leaking memory, we free
    the orphaned entries during nametable shutdown.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1b954f5307dec6871b1075537c22969e5786d1fc
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Thu Mar 6 14:40:19 2014 +0100

    tipc: drop subscriber connection id invalidation
    
    [ Upstream commit edcc0511b5ee7235282a688cd604e3ae7f9e1fc9 ]
    
    When a topology server subscriber is disconnected, the associated
    connection id is set to zero. A check vs zero is then done in the
    subscription timeout function to see if the subscriber have been
    shut down. This is unnecessary, because all subscription timers
    will be cancelled when a subscriber terminates. Setting the
    connection id to zero is actually harmful because id zero is the
    identity of the topology server listening socket, and can cause a
    race that leads to this socket being closed instead.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d7b4510a84a79153054e0ae707be2d6ed8322440
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Mar 6 14:40:17 2014 +0100

    tipc: fix connection refcount leak
    
    [ Upstream commit 4652edb70e8a7eebbe47fa931940f65522c36e8f ]
    
    When tipc_conn_sendmsg() calls tipc_conn_lookup() to query a
    connection instance, its reference count value is increased if
    it's found. But subsequently if it's found that the connection is
    closed, the work of sending message is not queued into its server
    send workqueue, and the connection reference count is not decreased.
    This will cause a reference count leak. To reproduce this problem,
    an application would need to open and closes topology server
    connections with high intensity.
    
    We fix this by immediately decrementing the connection reference
    count if a send fails due to the connection being closed.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e28aa7519e2f20d048ca5743d1219a6474eb50e
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Mar 6 14:40:16 2014 +0100

    tipc: allow connection shutdown callback to be invoked in advance
    
    [ Upstream commit 6d4ebeb4df0176b1973875840a9f7e91394c0685 ]
    
    Currently connection shutdown callback function is called when
    connection instance is released in tipc_conn_kref_release(), and
    receiving packets and sending packets are running in different
    threads. Even if connection is closed by the thread of receiving
    packets, its shutdown callback may not be called immediately as
    the connection reference count is non-zero at that moment. So,
    although the connection is shut down by the thread of receiving
    packets, the thread of sending packets doesn't know it. Before
    its shutdown callback is invoked to tell the sending thread its
    connection has been closed, the sending thread may deliver
    messages by tipc_conn_sendmsg(), this is why the following error
    information appears:
    
    "Sending subscription event failed, no memory"
    
    To eliminate it, allow connection shutdown callback function to
    be called before connection id is removed in tipc_close_conn(),
    which makes the sending thread know the truth in time that its
    socket is closed so that it doesn't send message to it. We also
    remove the "Sending XXX failed..." error reporting for topology
    and config services.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce7613db2d8d4d5af2587ab5d7090055c4562201
Merge: 0afccc4ccecf 52c35befb69b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Apr 8 12:41:23 2014 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull more networking updates from David Miller:
    
     1) If a VXLAN interface is created with no groups, we can crash on
        reception of packets.  Fix from Mike Rapoport.
    
     2) Missing includes in CPTS driver, from Alexei Starovoitov.
    
     3) Fix string validations in isdnloop driver, from YOSHIFUJI Hideaki
        and Dan Carpenter.
    
     4) Missing irq.h include in bnxw2x, enic, and qlcnic drivers.  From
        Josh Boyer.
    
     5) AF_PACKET transmit doesn't statistically count TX drops, from Daniel
        Borkmann.
    
     6) Byte-Queue-Limit enabled drivers aren't handled properly in
        AF_PACKET transmit path, also from Daniel Borkmann.
    
        Same problem exists in pktgen, and Daniel fixed it there too.
    
     7) Fix resource leaks in driver probe error paths of new sxgbe driver,
        from Francois Romieu.
    
     8) Truesize of SKBs can gradually get more and more corrupted in NAPI
        packet recycling path, fix from Eric Dumazet.
    
     9) Fix uniprocessor netfilter build, from Florian Westphal.  In the
        longer term we should perhaps try to find a way for ARRAY_SIZE() to
        work even with zero sized array elements.
    
    10) Fix crash in netfilter conntrack extensions due to mis-estimation of
        required extension space.  From Andrey Vagin.
    
    11) Since we commit table rule updates before trying to copy the
        counters back to userspace (it's the last action we perform), we
        really can't signal the user copy with an error as we are beyond the
        point from which we can unwind everything.  This causes all kinds of
        use after free crashes and other mysterious behavior.
    
        From Thomas Graf.
    
    12) Restore previous behvaior of div/mod by zero in BPF filter
        processing.  From Daniel Borkmann.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (38 commits)
      net: sctp: wake up all assocs if sndbuf policy is per socket
      isdnloop: several buffer overflows
      netdev: remove potentially harmful checks
      pktgen: fix xmit test for BQL enabled devices
      net/at91_ether: avoid NULL pointer dereference
      tipc: Let tipc_release() return 0
      at86rf230: fix MAX_CSMA_RETRIES parameter
      mac802154: fix duplicate #include headers
      sxgbe: fix duplicate #include headers
      net: filter: be more defensive on div/mod by X==0
      netfilter: Can't fail and free after table replacement
      xen-netback: Trivial format string fix
      net: bcmgenet: Remove unnecessary version.h inclusion
      net: smc911x: Remove unused local variable
      bonding: Inactive slaves should keep inactive flag's value
      netfilter: nf_tables: fix wrong format in request_module()
      netfilter: nf_tables: set names cannot be larger than 15 bytes
      netfilter: nf_conntrack: reserve two bytes for nf_ct_ext->len
      netfilter: Add {ipt,ip6t}_osf aliases for xt_osf
      netfilter: x_tables: allow to use cgroup match for LOCAL_IN nf hooks
      ...

commit 065d7e39563b092dbb429373bd8f0f2295768cea
Author: Geert Uytterhoeven <geert@linux-m68k.org>
Date:   Sun Apr 6 15:56:14 2014 +0200

    tipc: Let tipc_release() return 0
    
    net/tipc/socket.c: In function ‘tipc_release’:
    net/tipc/socket.c:352: warning: ‘res’ is used uninitialized in this function
    
    Introduced by commit 24be34b5a0c9114541891d29dff1152bb1a8df34 ("tipc:
    eliminate upcall function pointers between port and socket"), which
    removed the sole initializer of "res".
    
    Just return 0 to fix it.
    
    Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a5e7ac5ce134d8f72f59631011fafa7bbf7ca174
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Thu Apr 3 08:28:01 2014 +0200

    tipc: fix regression bug where node events are not being generated
    
    Commit 5902385a2440a55f005b266c93e0bb9398e5a62b ("tipc: obsolete
    the remote management feature") introduces a regression where node
    topology events are not being generated because the publication
    that triggers this: {0, <z.c.n>, <z.c.n>} is no longer available.
    This will break applications that rely on node events to discover
    when nodes join/leave a cluster.
    
    We fix this by advertising the node publication when TIPC enters
    networking mode, and withdraws it upon shutdown.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f3c9ec05ab020b57108647cd30ce67bec156486f
Merge: c8c3d7e2449a 16470111ed2a
Author: David S. Miller <davem@davemloft.net>
Date:   Fri Mar 28 14:46:34 2014 -0400

    Merge branch 'tipc-next'
    
    Erik Hugne says:
    
    ====================
    tipc: fix handling of NETDEV_CHANGEADDR event
    
    Aside from manual reconfiguration of the netdevice hwaddr, this can also
    be changed automatically for an interface bond in active-backup mode
    if fail_over_mac is enabled. This patchset fixes the handling of this
    event in TIPC by properly updating the l2 media address for the bearer,
    followed by a reinitialization of the node discovery mechanism.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 16470111ed2aad67d2e2407aae2a8a53a4a38060
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Fri Mar 28 10:32:09 2014 +0100

    tipc: make discovery domain a bearer attribute
    
    The node discovery domain is assigned when a bearer is enabled.
    In the previous commit we reflect this attribute directly in the
    bearer structure since it's needed to reinitialize the node
    discovery mechanism after a hardware address change.
    
    There's no need to replicate this attribute anywhere else, so we
    remove it from the tipc_link_req structure.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a21a584d6720ce349b05795b9bcfab3de8e58419
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Fri Mar 28 10:32:08 2014 +0100

    tipc: fix neighbor detection problem after hw address change
    
    If the hardware address of a underlying netdevice is changed, it is
    not enough to simply reset the bearer/links over this device. We
    also need to reflect this change in the TIPC bearer and node
    discovery structures aswell.
    
    This patch adds the necessary reinitialization of the node disovery
    mechanism following a hardware address change so that the correct
    originating media address is advertised in the discovery messages.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reported-by: Dong Liu <dliu.cn@gmail.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b5b6bc32a380cf3d40dd0019e900815a06f6dc3b
Merge: 1dbe136938df dde2026608fb
Author: David S. Miller <davem@davemloft.net>
Date:   Thu Mar 27 13:08:45 2014 -0400

    Merge branch 'tipc-next'
    
    Ying Xue says:
    
    ====================
    tipc: clean up bearer and node layer
    
    This is another commit series which aims at facilitating future
    changes to the locking policy around nodes, links and bearers.
    
    Currently, the tipc routing hierarchy comprises the structures 'node',
    'link' and 'bearer'. The whole hierarchy is protected by a big
    read/write lock (tipc_net_lock), to ensure that nothing is added or
    removed while any of these structures is being accessed. Obviously
    the locking policy makes node, link and bearer components closely
    bound together so that their relationship becomes extremely complex.
    In the worst case, such locking policy not only has a negative
    influence on performance, but also it's prone to lead to deadlock
    occasionally.
    
    In order to decouple the complex relationship between bearer and node
    as well as link, the locking policy is adjusted as follows:
    
    - Bearer level
      RTNL lock is used on update side, and RCU is used on read side.
      Meanwhile, all bearer instances including broadcast bearer are
      saved into bearer_list array.
    
    - Node and link level
      All node instances are saved into two tipc_node_list and node_htable
      lists. The two lists are protected by node_list_lock on write side,
      and they are guarded with RCU lock on read side. All members in node
      structure including link instances are protected by node spin lock.
    
    - The relationship between bearer and node
      When link accesses bearer, it first needs to find the bearer with
      its bearer identity from the bearer_list array. When bearer accesses
      node, it can iterate the node_htable hash list with the node address
      to find the corresponding node.
    
    In the new locking policy, every component has its private locking
    solution and the relationship between bearer and node is very simple,
    that is, they can find each other with node address or bearer identity
    from node_htable hash list or bearer_list array.
    
    But, prior to these changes, we need to do some necessary cleanup and
    code consolidation. This is what we do with this commit series. In a
    later series we will replace net_lock with RTNL as well as RCU lock
    to deploy the new locking policy.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit dde2026608fbf24e1687a2b62c4752022f429252
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Mar 27 12:54:39 2014 +0800

    tipc: use node list lock to protect tipc_num_links variable
    
    Without properly implicit or explicit read memory barrier, it's
    unsafe to read an atomic variable with atomic_read() from another
    thread which is different with the thread of changing the atomic
    variable with atomic_inc() or atomic_dec(). So a stale tipc_num_links
    may be got with atomic_read() in tipc_node_get_links(). If the
    tipc_num_links variable type is converted from atomic to unsigned
    integer and node list lock is used to protect it, the issue would
    be avoided.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2220646a53aa588798653232e26172ec36ab06cd
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Mar 27 12:54:38 2014 +0800

    tipc: use node_list_lock to protect tipc_num_nodes variable
    
    As tipc_node_list is protected by rcu read lock on read side, it's
    unnecessary to hold node_list_lock to protect tipc_node_list in
    tipc_node_get_links(). Instead, node_list_lock should just protects
    tipc_num_nodes in the function.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6c7a762e70637a256229f9dc9ca793908e8bd01b
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Mar 27 12:54:37 2014 +0800

    tipc: tipc: convert node list and node hlist to RCU lists
    
    Convert tipc_node_list list and node_htable hash list to RCU lists.
    On read side, the two lists are protected with RCU read lock, and
    on update side, node_list_lock is applied to them.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 46651c59c483f14fd35cf7df2104feac0e54e258
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Mar 27 12:54:36 2014 +0800

    tipc: rename node create lock to protect node list and hlist
    
    When a node is created, tipc_net_lock read lock is first held and
    then node_create_lock is grabbed in order to prevent the same node
    from being created and inserted into both node list and hlist twice.
    But when we query node from the two node lists, we only hold
    tipc_net_lock read lock without grabbing node_create_lock. Obviously
    this locking policy is unable to guarantee that the two node lists
    are always synchronized especially when the operation of changing
    and accessing them occurs in different contexts like currently doing.
    
    Therefore, rename node_create_lock to node_list_lock to protect the
    two node lists, that is, whenever node is inserted into them or node
    is queried from them, the node_list_lock should be always held. As a
    result, tipc_net_lock read lock becomes redundant and then can be
    removed from the node query functions.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 987b58be376b8d087a9bb677f50592efc6ccb7c5
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Mar 27 12:54:35 2014 +0800

    tipc: make broadcast bearer store in bearer_list array
    
    Now unicast bearer is dynamically allocated and placed into its
    identity specified slot of bearer_list array. When we search
    bearer_list array with a bearer identity, the corresponding bearer
    instance can be found. But broadcast bearer is statically allocated
    and it is not located in the bearer_list array yet. So we decide to
    enlarge bearer_list array into MAX_BEARERS + 1 slots, and its last
    slot stores the broadcast bearer so that the broadcast bearer can
    be found from bearer_list array with MAX_BEARERS as index. The
    change will help us reduce the complex relationship between bearer
    and link in the future.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f47de12b06c95cfc38c1c79986210c7620f264c4
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Mar 27 12:54:34 2014 +0800

    tipc: remove active flag from tipc_bearer structure
    
    After the allocation of tipc_bearer structure instance is converted
    from statical way to dynamical way, we identify whether a certain
    tipc_bearer structure pointer is valid by checking whether the pointer
    is NULL or not. So the active flag in tipc_bearer structure becomes
    redundant.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3874ccbba80f3b3127e94b1e055fb3d502a44718
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Mar 27 12:54:33 2014 +0800

    tipc: convert tipc_bearers array to pointer list
    
    As part of the effort to introduce RCU protection for the bearer
    list, we first need to change it to a list of pointers.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 78dfb789b69f161703ef322a0c2e3e61c7f7573a
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Mar 27 12:54:32 2014 +0800

    tipc: acquire necessary locks in named_cluster_distribute routine
    
    The 'tipc_node_list' is guarded by tipc_net_lock and 'links' array
    defined in 'tipc_node' structure is protected by node lock as well.
    Without acquiring the two locks in named_cluster_distribute() a fatal
    oops may happen in case that a destroyed link might be got and then
    accessed. Therefore, above mentioned two locks must be held in
    named_cluster_distribute() to prevent the issue from happening
    accidentally.
    
    As 'links' array in node struct must be protected by node lock,
    we have to move the code of selecting an active link from
    tipc_link_xmit() to named_cluster_distribute() and then call
    __tipc_link_xmit() with the selected link to deliver name messages.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5902385a2440a55f005b266c93e0bb9398e5a62b
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Mar 27 12:54:31 2014 +0800

    tipc: obsolete the remote management feature
    
    Due to the lacking of any credential, it's allowed to accept commands
    requested from remote nodes to query the local node status, which is
    prone to involve potential security risks. Instead, if we login to
    a remote node with ssh command, this approach is not only more safe
    than the remote management feature, but also it can give us more
    permissions like changing the remote node configuration. So it's
    reasonable for us to obsolete the remote management feature now.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 76d7882420d94075c806c074de241602a06e47e6
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Mar 27 12:54:30 2014 +0800

    tipc: remove unnecessary checking for node object
    
    tipc_node_create routine doesn't need to check whether a node
    object specified with a node address exists or not because its
    caller(ie, tipc_disc_recv_msg routine) has checked this before
    calling it.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8a1094462c7ec47f9d3a31b0a281ce35cb138f50
Merge: 774868c7094d a5d0e7c03711
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Mar 24 17:07:24 2014 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) OpenVswitch's lookup_datapath() returns error pointers, so don't
        check against NULL.  From Jiri Pirko.
    
     2) pfkey_compile_policy() code path tries to do a GFP_KERNEL allocation
        under RCU locks, fix by using GFP_ATOMIC when necessary.  From
        Nikolay Aleksandrov.
    
     3) phy_suspend() indirectly passes uninitialized data into the ethtool
        get wake-on-land implementations.  Fix from Sebastian Hesselbarth.
    
     4) CPSW driver unregisters CPTS twice, fix from Benedikt Spranger.
    
     5) If SKB allocation of reply packet fails, vxlan's arp_reduce() defers
        a NULL pointer.  Fix from David Stevens.
    
     6) IPV6 neigh handling in vxlan doesn't validate the destination
        address properly, and it builds a packet with the src and dst
        reversed.  Fix also from David Stevens.
    
     7) Fix spinlock recursion during subscription failures in TIPC stack,
        from Erik Hugne.
    
     8) Revert buggy conversion of davinci_emac to devm_request_irq, from
        Chrstian Riesch.
    
     9) Wrong flags passed into forwarding database netlink notifications,
        from Nicolas Dichtel.
    
    10) The netpoll neighbour soliciation handler checks wrong ethertype,
        needs to be ETH_P_IPV6 rather than ETH_P_ARP.  Fix from Li RongQing.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (34 commits)
      tipc: fix spinlock recursion bug for failed subscriptions
      vxlan: fix nonfunctional neigh_reduce()
      net: davinci_emac: Fix rollback of emac_dev_open()
      net: davinci_emac: Replace devm_request_irq with request_irq
      netpoll: fix the skb check in pkt_is_ns
      net: micrel : ks8851-ml: add vdd-supply support
      ip6mr: fix mfc notification flags
      ipmr: fix mfc notification flags
      rtnetlink: fix fdb notification flags
      tcp: syncookies: do not use getnstimeofday()
      netlink: fix setsockopt in mmap examples in documentation
      openvswitch: Correctly report flow used times for first 5 minutes after boot.
      via-rhine: Disable device in error path
      ATHEROS-ATL1E: Convert iounmap to pci_iounmap
      vxlan: fix potential NULL dereference in arp_reduce()
      cnic: Update version to 2.5.20 and copyright year.
      cnic,bnx2i,bnx2fc: Fix inconsistent use of page size
      cnic: Use proper ulp_ops for per device operations.
      net: cdc_ncm: fix control message ordering
      ipv6: ip6_append_data_mtu do not handle the mtu of the second fragment properly
      ...

commit a5d0e7c037119484a7006b883618bfa87996cb41
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Mon Mar 24 16:56:38 2014 +0100

    tipc: fix spinlock recursion bug for failed subscriptions
    
    If a topology event subscription fails for any reason, such as out
    of memory, max number reached or because we received an invalid
    request the correct behavior is to terminate the subscribers
    connection to the topology server. This is currently broken and
    produces the following oops:
    
    [27.953662] tipc: Subscription rejected, illegal request
    [27.955329] BUG: spinlock recursion on CPU#1, kworker/u4:0/6
    [27.957066]  lock: 0xffff88003c67f408, .magic: dead4ead, .owner: kworker/u4:0/6, .owner_cpu: 1
    [27.958054] CPU: 1 PID: 6 Comm: kworker/u4:0 Not tainted 3.14.0-rc6+ #5
    [27.960230] Hardware name: Bochs Bochs, BIOS Bochs 01/01/2011
    [27.960874] Workqueue: tipc_rcv tipc_recv_work [tipc]
    [27.961430]  ffff88003c67f408 ffff88003de27c18 ffffffff815c0207 ffff88003de1c050
    [27.962292]  ffff88003de27c38 ffffffff815beec5 ffff88003c67f408 ffffffff817f0a8a
    [27.963152]  ffff88003de27c58 ffffffff815beeeb ffff88003c67f408 ffffffffa0013520
    [27.964023] Call Trace:
    [27.964292]  [<ffffffff815c0207>] dump_stack+0x45/0x56
    [27.964874]  [<ffffffff815beec5>] spin_dump+0x8c/0x91
    [27.965420]  [<ffffffff815beeeb>] spin_bug+0x21/0x26
    [27.965995]  [<ffffffff81083df6>] do_raw_spin_lock+0x116/0x140
    [27.966631]  [<ffffffff815c6215>] _raw_spin_lock_bh+0x15/0x20
    [27.967256]  [<ffffffffa0008540>] subscr_conn_shutdown_event+0x20/0xa0 [tipc]
    [27.968051]  [<ffffffffa000fde4>] tipc_close_conn+0xa4/0xb0 [tipc]
    [27.968722]  [<ffffffffa00101ba>] tipc_conn_terminate+0x1a/0x30 [tipc]
    [27.969436]  [<ffffffffa00089a2>] subscr_conn_msg_event+0x1f2/0x2f0 [tipc]
    [27.970209]  [<ffffffffa0010000>] tipc_receive_from_sock+0x90/0xf0 [tipc]
    [27.970972]  [<ffffffffa000fa79>] tipc_recv_work+0x29/0x50 [tipc]
    [27.971633]  [<ffffffff8105dbf5>] process_one_work+0x165/0x3e0
    [27.972267]  [<ffffffff8105e869>] worker_thread+0x119/0x3a0
    [27.972896]  [<ffffffff8105e750>] ? manage_workers.isra.25+0x2a0/0x2a0
    [27.973622]  [<ffffffff810648af>] kthread+0xdf/0x100
    [27.974168]  [<ffffffff810647d0>] ? kthread_create_on_node+0x1a0/0x1a0
    [27.974893]  [<ffffffff815ce13c>] ret_from_fork+0x7c/0xb0
    [27.975466]  [<ffffffff810647d0>] ? kthread_create_on_node+0x1a0/0x1a0
    
    The recursion occurs when subscr_terminate tries to grab the
    subscriber lock, which is already taken by subscr_conn_msg_event.
    We fix this by checking if the request to establish a new
    subscription was successful, and if not we initiate termination of
    the subscriber after we have released the subscriber lock.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 36f6fdb74997c3f456f1c6a9803c009c49a30053
Merge: 4a93f5095a62 5c311421a280
Author: David S. Miller <davem@davemloft.net>
Date:   Wed Mar 12 15:53:54 2014 -0400

    Merge branch 'tipc'
    
    Jon Maloy says:
    
    ====================
    tipc: simplifications in socket and port layer
    
    After the removal of the tipc native API the relation between
    tipc_port and its API types is strictly one-to-one, i.e, the latter
    can now only be a socket API. This change opens up for
    simplifications both in the code, data and locking structure.
    
    We start with this series, where we ensure that port and socket
    structures are co-allocated. Note that the first commit in the
    series is unrelated to the above.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5c311421a28051036a114aec972d36c72114ed4c
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Mar 12 11:31:13 2014 -0400

    tipc: eliminate redundant lookups in registry
    
    As an artefact from the native interface, the message sending functions
    in the port takes a port ref as first parameter, and then looks up in
    the registry to find the corresponding port pointer. This despite the
    fact that the only currently existing caller, tipc_sock, already knows
    this pointer.
    
    We change the signature of these functions to take a struct tipc_port*
    argument, and remove the redundant lookups.
    
    We also remove an unmotivated extra lookup in the function
    socket.c:auto_connect(), and, as the lookup functions tipc_port_deref()
    and ref_deref() now become unused, we remove these two functions.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 58ed944241794087df1edadfa66795c966bf1604
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Mar 12 11:31:12 2014 -0400

    tipc: align usage of variable names and macros in socket
    
    The practice of naming variables in TIPC is inconistent, sometimes
    even within the same file.
    
    In this commit we align variable names and declarations within
    socket.c, and function and macro names within socket.h. We also
    reduce the number of conversion macros to two, in order to make
    usage less obsure.
    
    These changes are purely cosmetic.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3b4f302d85785bb1c99b3db7f9557b256baa3805
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Mar 12 11:31:11 2014 -0400

    tipc: eliminate redundant locking
    
    The three functions tipc_portimportance(), tipc_portunreliable() and
    tipc_portunreturnable() and their corresponding tipc_set* functions,
    are all grabbing port_lock when accessing the targeted port. This is
    unnecessary in the current code, since these calls only are made from
    within socket downcalls, already protected by sock_lock.
    
    We remove the redundant locking. Also, since the functions now become
    trivial one-liners, we move them to port.h and make them inline.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 24be34b5a0c9114541891d29dff1152bb1a8df34
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Mar 12 11:31:10 2014 -0400

    tipc: eliminate upcall function pointers between port and socket
    
    Due to the original one-to-many relation between port and user API
    layers, upcalls to the API have been performed via function pointers,
    installed in struct tipc_port at creation. Since this relation now
    always is one-to-one, we can instead use ordinary function calls.
    
    We remove the function pointers 'dispatcher' and ´wakeup' from
    struct tipc_port, and replace them with calls to the renamed
    functions tipc_sk_rcv() and tipc_sk_wakeup().
    
    At the same time we change the name and signature of the functions
    tipc_createport() and tipc_deleteport() to reflect their new role
    as mere initialization/destruction functions.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8826cde655fb5ca3b35a112c851c90b3dccbb7b8
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Mar 12 11:31:09 2014 -0400

    tipc: aggregate port structure into socket structure
    
    After the removal of the tipc native API the relation between
    a tipc_port and its API types is strictly one-to-one, i.e, the
    latter can now only be a socket API. There is therefore no need
    to allocate struct tipc_port and struct sock independently.
    
    In this commit, we aggregate struct tipc_port into struct tipc_sock,
    hence saving both CPU cycles and structure complexity.
    
    There are no functional changes in this commit, except for the
    elimination of the separate allocation/freeing of tipc_port.
    All other changes are just adaptatons to the new data structure.
    
    This commit also opens up for further code simplifications and
    code volume reduction, something we will do in later commits.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f9fef18c6d688697e72d1020a7c43a50c1331a58
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Mar 12 11:31:08 2014 -0400

    tipc: remove redundant 'peer_name' field in struct tipc_sock
    
    The field 'peer_name' in struct tipc_sock is redundant, since
    this information already is available from tipc_port, to which
    tipc_sock has a reference.
    
    We remove the field, and ensure that peer node and peer port
    info instead is fetched via the functions that already exist
    for this purpose.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 978813ee89674fdb6bb6585153166b7603173cd2
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Wed Mar 12 11:31:07 2014 -0400

    tipc: replace reference table rwlock with spinlock
    
    The lock for protecting the reference table is declared as an
    RWLOCK, although it is only used in write mode, never in read
    mode.
    
    We redefine it to become a spinlock.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 184593c73439e82121702038d715b8f3ec9a86c9
Author: Joe Perches <joe@perches.com>
Date:   Wed Mar 12 10:04:20 2014 -0700

    tipc: Convert uses of __constant_<foo> to <foo>
    
    The use of __constant_<foo> has been unnecessary for quite awhile now.
    
    Make these uses consistent with the rest of the kernel.
    
    Signed-off-by: Joe Perches <joe@perches.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 409e145643d66d5307fbd4ec1a0addfef95ef1c3
Merge: 9e9cb6221aa7 2892505ea170
Author: David S. Miller <davem@davemloft.net>
Date:   Thu Mar 6 14:46:38 2014 -0500

    Merge branch 'tipc'
    
    Eric Hugne says:
    
    ====================
    tipc: refcount and memory leak fixes
    
    v3: Remove error logging from data path completely. Rebased on top of
        latest net merge.
    
    v2: Drop specific -ENOMEM logging in patch #1 (tipc: allow connection
        shutdown callback to be invoked in advance) And add a general error
        message if an internal server tries to send a message on a
        closed/nonexisting connection.
    
    In addition to the fix for refcount leak and memory leak during
    module removal, we also fix a problem where the topology server
    listening socket where unexpectedly closed. We also eliminate an
    unnecessary context switch during accept()/recvmsg() for nonblocking
    sockets.
    
    It might be good to include this patchset in stable aswell. After the
    v3 rebase on latest merge from net all patches apply cleanly on that
    tree.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2892505ea170094f982516bb38105eac45f274b1
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Thu Mar 6 14:40:21 2014 +0100

    tipc: don't log disabled tasklet handler errors
    
    Failure to schedule a TIPC tasklet with tipc_k_signal because the
    tasklet handler is disabled is not an error. It means TIPC is
    currently in the process of shutting down. We remove the error
    logging in this case.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1bb8dce57f4d15233688c68990852a10eb1cd79f
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Thu Mar 6 14:40:20 2014 +0100

    tipc: fix memory leak during module removal
    
    When the TIPC module is removed, the tasklet handler is disabled
    before all other subsystems. This will cause lingering publications
    in the name table because the node_down tasklets responsible to
    clean up publications from an unreachable node will never run.
    When the name table is shut down, these publications are detected
    and an error message is logged:
    tipc: nametbl_stop(): orphaned hash chain detected
    This is actually a memory leak, introduced with commit
    993b858e37b3120ee76d9957a901cca22312ffaa ("tipc: correct the order
    of stopping services at rmmod")
    
    Instead of just logging an error and leaking memory, we free
    the orphaned entries during nametable shutdown.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit edcc0511b5ee7235282a688cd604e3ae7f9e1fc9
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Thu Mar 6 14:40:19 2014 +0100

    tipc: drop subscriber connection id invalidation
    
    When a topology server subscriber is disconnected, the associated
    connection id is set to zero. A check vs zero is then done in the
    subscription timeout function to see if the subscriber have been
    shut down. This is unnecessary, because all subscription timers
    will be cancelled when a subscriber terminates. Setting the
    connection id to zero is actually harmful because id zero is the
    identity of the topology server listening socket, and can cause a
    race that leads to this socket being closed instead.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit fe8e4649397915cf3b2ab0b695929a27e543967e
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Mar 6 14:40:18 2014 +0100

    tipc: avoid to unnecessary process switch under non-block mode
    
    When messages are received via tipc socket under non-block mode,
    schedule_timeout() is called in tipc_wait_for_rcvmsg(), that is,
    the process of receiving messages will be scheduled once although
    timeout value passed to schedule_timeout() is 0. The same issue
    exists in accept()/wait_for_accept(). To avoid this unnecessary
    process switch, we only call schedule_timeout() if the timeout
    value is non-zero.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4652edb70e8a7eebbe47fa931940f65522c36e8f
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Mar 6 14:40:17 2014 +0100

    tipc: fix connection refcount leak
    
    When tipc_conn_sendmsg() calls tipc_conn_lookup() to query a
    connection instance, its reference count value is increased if
    it's found. But subsequently if it's found that the connection is
    closed, the work of sending message is not queued into its server
    send workqueue, and the connection reference count is not decreased.
    This will cause a reference count leak. To reproduce this problem,
    an application would need to open and closes topology server
    connections with high intensity.
    
    We fix this by immediately decrementing the connection reference
    count if a send fails due to the connection being closed.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Acked-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6d4ebeb4df0176b1973875840a9f7e91394c0685
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Mar 6 14:40:16 2014 +0100

    tipc: allow connection shutdown callback to be invoked in advance
    
    Currently connection shutdown callback function is called when
    connection instance is released in tipc_conn_kref_release(), and
    receiving packets and sending packets are running in different
    threads. Even if connection is closed by the thread of receiving
    packets, its shutdown callback may not be called immediately as
    the connection reference count is non-zero at that moment. So,
    although the connection is shut down by the thread of receiving
    packets, the thread of sending packets doesn't know it. Before
    its shutdown callback is invoked to tell the sending thread its
    connection has been closed, the sending thread may deliver
    messages by tipc_conn_sendmsg(), this is why the following error
    information appears:
    
    "Sending subscription event failed, no memory"
    
    To eliminate it, allow connection shutdown callback function to
    be called before connection id is removed in tipc_close_conn(),
    which makes the sending thread know the truth in time that its
    socket is closed so that it doesn't send message to it. We also
    remove the "Sending XXX failed..." error reporting for topology
    and config services.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 68ad785c007246490b220ae958b544671339059b
Merge: 7cce3b75682f 970122fdf4b2
Author: David S. Miller <davem@davemloft.net>
Date:   Sat Feb 22 00:00:20 2014 -0500

    Merge branch 'tipc'
    
    Ying Xue says:
    
    ====================
    tipc: clean up components initialization code
    
    In this series, we will fix a regression issue involved by commit
    6e967adf7(tipc: relocate common functions from media to bearer)
    But before the issue is fixed, we firstly adjust the process of
    components initialization so as to remove all enabled flags from
    necessary tipc components. Otherwise, without the change, we also
    have to add an extra enabled flag into bearer layer indicating
    whether bearer setup is finshed or not.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 970122fdf4b2d79c708022f2fdc0ab3840311d87
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Feb 20 11:32:50 2014 +0800

    tipc: make bearer set up in module insertion stage
    
    Accidentally a side effect is involved by commit 6e967adf7(tipc:
    relocate common functions from media to bearer). Now tipc stack
    handler of receiving packets from netdevices as well as netdevice
    notification handler are registered when bearer is enabled rather
    than tipc module initialization stage, but the two handlers are
    both unregistered in tipc module exit phase. If tipc module is
    inserted and then immediately removed, the following warning
    message will appear:
    
    "dev_remove_pack: ffffffffa0380940 not found"
    
    This is because in module insertion stage tipc stack packet handler
    is not registered at all, but in module exit phase dev_remove_pack()
    needs to remove it. Of course, dev_remove_pack() cannot find tipc
    protocol handler from the kernel protocol handler list so that the
    warning message is printed out.
    
    But if registering the two handlers is adjusted from enabling bearer
    phase into inserting module stage, the warning message will be
    eliminated. Due to this change, tipc_core_start_net() and
    tipc_core_stop_net() can be deleted as well.
    
    Reported-by: Wang Weidong <wangweidong1@huawei.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9fe7ed474956944443eec57c5f75be12e10da84e
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Feb 20 11:32:49 2014 +0800

    tipc: remove all enabled flags from all tipc components
    
    When tipc module is inserted, many tipc components are initialized
    one by one. During the initialization period, if one of them is
    failed, tipc_core_stop() will be called to stop all components
    whatever corresponding components are created or not. To avoid to
    release uncreated ones, relevant components have to add necessary
    enabled flags indicating whether they are created or not.
    
    But in the initialization stage, if one component is unsuccessfully
    created, we will just destroy successfully created components before
    the failed component instead of all components. All enabled flags
    defined in components, in turn, become redundant. Additionally it's
    also unnecessary to identify whether table.types is NULL in
    tipc_nametbl_stop() because name stable has been definitely created
    successfully when tipc_nametbl_stop() is called.
    
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 63fa01c147b98eaf5e5e4620c3c7bea8e9ddbbc1
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Wed Feb 19 08:37:58 2014 +0100

    tipc: failed transmissions should return error
    
    When a message could not be sent out because the destination node
    or link could not be found, the full message size is returned from
    sendmsg() as if it had been sent successfully. An application will
    then get a false indication that it's making forward progress. This
    problem has existed since the initial commit in 2.6.16.
    
    We change this to return -ENETUNREACH if the message cannot be
    delivered due to the destination node/link being unavailable. We
    also get rid of the redundant tipc_reject_msg call since freeing
    the buffer and doing a tipc_port_iovec_reject accomplishes exactly
    the same thing.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 247f0f3c3176c55b46cb9a20011d3d6757634815
Author: Ying Xue <ying.xue@windriver.com>
Date:   Tue Feb 18 16:06:46 2014 +0800

    tipc: align tipc function names with common naming practice in the network
    
    Rename the following functions, which are shorter and more in line
    with common naming practice in the network subsystem.
    
    tipc_bclink_send_msg->tipc_bclink_xmit
    tipc_bclink_recv_pkt->tipc_bclink_rcv
    tipc_disc_recv_msg->tipc_disc_rcv
    tipc_link_send_proto_msg->tipc_link_proto_xmit
    link_recv_proto_msg->tipc_link_proto_rcv
    link_send_sections_long->tipc_link_iovec_long_xmit
    tipc_link_send_sections_fast->tipc_link_iovec_xmit_fast
    tipc_link_send_sync->tipc_link_sync_xmit
    tipc_link_recv_sync->tipc_link_sync_rcv
    tipc_link_send_buf->__tipc_link_xmit
    tipc_link_send->tipc_link_xmit
    tipc_link_send_names->tipc_link_names_xmit
    tipc_named_recv->tipc_named_rcv
    tipc_link_recv_bundle->tipc_link_bundle_rcv
    tipc_link_dup_send_queue->tipc_link_dup_queue_xmit
    link_send_long_buf->tipc_link_frag_xmit
    
    tipc_multicast->tipc_port_mcast_xmit
    tipc_port_recv_mcast->tipc_port_mcast_rcv
    tipc_port_reject_sections->tipc_port_iovec_reject
    tipc_port_recv_proto_msg->tipc_port_proto_rcv
    tipc_connect->tipc_port_connect
    __tipc_connect->__tipc_port_connect
    __tipc_disconnect->__tipc_port_disconnect
    tipc_disconnect->tipc_port_disconnect
    tipc_shutdown->tipc_port_shutdown
    tipc_port_recv_msg->tipc_port_rcv
    tipc_port_recv_sections->tipc_port_iovec_rcv
    
    release->tipc_release
    accept->tipc_accept
    bind->tipc_bind
    get_name->tipc_getname
    poll->tipc_poll
    send_msg->tipc_sendmsg
    send_packet->tipc_send_packet
    send_stream->tipc_send_stream
    recv_msg->tipc_recvmsg
    recv_stream->tipc_recv_stream
    connect->tipc_connect
    listen->tipc_listen
    shutdown->tipc_shutdown
    setsockopt->tipc_setsockopt
    getsockopt->tipc_getsockopt
    
    Above changes have no impact on current users of the functions.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a11607f5a145818e097c64c72c839bcf6907e110
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Feb 14 16:40:44 2014 -0500

    tipc: correct usage of spin_lock() vs spin_lock_bh()
    
    I commit e099e86c9e24fe9aff36773600543eb31d8954d
    ("tipc: add node_lock protection to link lookup function")
    we are calling spin_lock(&node->lock) directly instead of indirectly
    via the tipc_node_lock(node) function. However, tipc_node_lock() is
    using spin_lock_bh(), not spin_lock(), something leading to
    unbalanced usage in one place, and a smatch warning.
    
    We fix this by consistently using tipc_node_lock()/unlock() in
    in the places touched by the mentioned commit.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 074bb43e9e594bec647ec45cc5bbc8c1ac2306aa
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Fri Feb 14 16:40:43 2014 -0500

    tipc: fix a loop style problem
    
    In commit 7d33939f475d403e79124e3143d7951dcfe8629f
    ("tipc: delay delete of link when failover is needed") we
    introduced a loop for finding and removing a link pointer
    in an array. The removal is done after we have left the loop,
    giving the impression that one may remove the wrong pointer
    if no matching element is found.
    
    This is not really a bug, since we know that there will always
    be a matching element, but it looks wrong, and causes a smatch
    warning.
    
    We fix this loop with this commit.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ca52b6647ffc6bc0f4b80823006834646b3e4f04
Merge: b3f0f5c357e6 e099e86c9e24
Author: David S. Miller <davem@davemloft.net>
Date:   Thu Feb 13 17:57:11 2014 -0500

    Merge branch 'tipc'
    
    Jon Maloy says:
    
    ====================
    tipc: clean up media and bearer layer
    
    This commit series aims at facilitating future changes to the
    locking policy around nodes, links and bearers.
    
    Currently, we have a big read/write lock (net_lock) that is used for
    serializing all changes to the node, link and bearer lists, as well
    as to their mutual pointers and references.
    
    But, in order to allow for concurrent access to the contents of these
    structures, net_lock is only used in read mode by the data path code,
    and hence a finer granular locking policy must be applied inside the
    scope of net_lock: a spinlock (node_lock) for each node structure,
    and another one (bearer_lock) for protection of bearer structures.
    
    This locking policy has proved hard to maintain. We have several
    times encountered contention problems between node_lock and
    bearer_lock, and with the advent of the RCU locking mechanism we
    feel it is anyway obsolete and ripe for improvements.
    
    We now plan to replace net_lock with an RCU lock, as well as
    getting rid of bearer_lock altogether. This will both reduce data
    path overhead and make the code more manageable, while reducing the
    risk of future lock contention problems.
    
    Prior to these changes, we need to do some necessary cleanup and
    code consolidation. This is what we do with this commit series,
    before we finally remove bearer_lock. In a later series we will
    replace net_lock with an RCU lock.
    
    v2:
     - Re-inserted a removed kerneldoc entry in commit#5, based on
       feedback from D. Miller.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e099e86c9e24fe9aff36773600543eb31d8954d1
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Feb 13 17:29:18 2014 -0500

    tipc: add node_lock protection to link lookup function
    
    In an earlier commit, ("tipc: remove links list from bearer struct")
    we described three issues that need to be pre-emptively resolved before
    we can remove tipc_net_lock. Here we resolve issue a) described in that
    commit:
    
    "a) In access method #2, we access the link before taking the
        protecting node_lock. This will not work once net_lock is gone,
        so we will have to change the access order. We will deal with
        this in a later commit in this series."
    
    Here, we change that access order, by ensuring that the function
    link_find_link() returns only a safe reference for finding
    the link, i.e., a node pointer and an index into its 'links' array,
    not the link pointer itself. We also change all callers of this
    function to first take the node lock before they can check if there
    still is a valid link pointer at the returned index. Since the
    function now returns a node pointer rather than a link pointer,
    we rename it to the more appropriate 'tipc_link_find_owner().
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a83045292daf9f07d0b103e5715ef527123d2fcc
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Feb 13 17:29:17 2014 -0500

    tipc: remove bearer_lock from tipc_bearer struct
    
    After the earlier commits ("tipc: remove 'links' list from
    tipc_bearer struct") and ("tipc: introduce new spinlock to protect
    struct link_req"), there is no longer any need to protect struct
    link_req or or any link list by use of bearer_lock. Furthermore,
    we have eliminated the need for using bearer_lock during downcalls
    (send) from the link to the bearer, since we have ensured that
    bearers always have a longer life cycle that their associated links,
    and always contain valid data.
    
    So, the only need now for a lock protecting bearers is for guaranteeing
    consistency of the bearer list itself. For this, it is sufficient, at
    least for the time being, to continue applying 'net_lock´ in write mode.
    
    By removing bearer_lock we also pre-empt introduction of issue b) descibed
    in the previous commit "tipc: remove 'links' list from tipc_bearer struct":
    
    "b) When the outer protection from net_lock is gone, taking
        bearer_lock and node_lock in opposite order of method 1) and 2)
        will become an obvious deadlock hazard".
    
    Therefore, we now eliminate the bearer_lock spinlock.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7d33939f475d403e79124e3143d7951dcfe8629f
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Feb 13 17:29:16 2014 -0500

    tipc: delay delete of link when failover is needed
    
    When a bearer is disabled, all its attached links are deleted.
    Ideally, we should do link failover to redundant links on other bearers,
    if there are any, in such cases. This would be consistent with current
    behavior when a link is reset, but not deleted. However, due to the
    complexity involved, and the (wrongly) perceived low demand for this
    feature, it was never implemented until now.
    
    We mark the doomed link for deletion with a new flag, but wait until the
    failover process is finished before we actually delete it. With the
    improved link tunnelling/failover code introduced earlier in this commit
    series, it is now easy to identify a spot in the code where the failover
    is finished and it is safe to delete the marked link. Moreover, the test
    for the flag and the deletion can be done synchronously, and outside the
    most time critical data path.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a5377831eb64c1b8a7b911dc79aec73a930e95da
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Feb 13 17:29:15 2014 -0500

    tipc: changes to general packet reception algorithm
    
    We change the order of checking for destination users when processing
    incoming packets. By placing the checks for users that may potentially
    replace the processed buffer, i.e., CHANGEOVER_PROTOCOL and
    MSG_FRAGMENTER, in a separate step before we check for the true end
    users, we get rid of a label and a 'goto', at the same time making the
    code more comprehensible and easy to follow.
    
    This commit does not change any functionality, it is just a cosmetic
    code reshuffle.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 02842f718d9d47950ec9045825679ec266ba532d
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Feb 13 17:29:14 2014 -0500

    tipc: rename stack variables in function tipc_link_tunnel_rcv
    
    After the previous redesign of the tunnel reception algorithm and
    functions, we finalize it by renaming a couple of stack variables
    in tipc_tunnel_rcv(). This makes it more consistent with the naming
    scheme elsewhere in this part of the code.
    
    This change is purely cosmetic, with no functional changes.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1e9d47a948f44af4bb040e10a3a852b6bc3d6a90
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Feb 13 17:29:13 2014 -0500

    tipc: more cleanup of tunnelling reception function
    
    We simplify and slim down the code in function tipc_tunnel_rcv()
    No impact on the users of this function.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3bb533800c698d5e8a8b01dbfc37e147260988f2
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Feb 13 17:29:12 2014 -0500

    tipc: change signature of tunnelling reception function
    
    After the earlier commits in this series related to the function
    tipc_link_tunnel_rcv(), we can now go further and simplify its
    signature.
    
    The function now consumes all DUPLICATE packets, and only returns such
    ORIGINAL packets that are ready for immediate delivery, i.e., no
    more link level protocol processing needs to be done by the caller.
    As a consequence, the the caller, tipc_rcv(), does not access the link
    pointer after call return, and it becomes unnecessary to pass a link
    pointer reference in the call. Instead, we now only pass it the tunnel
    link's owner node, which is sufficient to find the destination link for
    the tunnelled packet.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f006c9c70fda4676157e00caa2efa74646709d72
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Feb 13 17:29:11 2014 -0500

    tipc: change reception of tunnelled failover packets
    
    When a link is reset, and there is a redundant link available, all
    sender sockets will steer their subsequent traffic through the
    remaining link. In order to guarantee preserved packet order and
    cardinality during the transition, we tunnel the failing link's send
    queue through the remaining link before we allow any sockets to use it.
    
    In this commit, we change the algorithm for receiving failover
    ("ORIGINAL_MSG") packets in tipc_link_tunnel_rcv(), at the same time
    delegating it to a new subfuncton, tipc_link_failover_rcv(). Instead
    of directly returning an extracted inner packet to the packet reception
    loop in tipc_rcv(), we first check if it is a message fragment, in which
    case we append it to the reset link's fragment chain. If the fragment
    chain is complete, we return the whole chain instead of the individual
    buffer, eliminating any need for the tipc_rcv() loop to do reassembly of
    tunneled packets.
    
    This change makes it possible to further simplify tipc_link_tunnel_rcv(),
    as well as the calling tipc_rcv() loop. We will do that in later
    commits. It also makes it possible to identify a single spot in the code
    where we can tell that a failover procedure is finished, something that
    is useful when we are deleting links after a failover. This will also
    be done in a later commit.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1dab3d5ac22217241ca5c5bb7d0132602b465938
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Feb 13 17:29:10 2014 -0500

    tipc: change reception of tunnelled duplicate packets
    
    When a second link to a destination comes up, some sender sockets will
    steer their subsequent traffic through the new link. In order to
    guarantee preserved packet order and cardinality for those sockets, we
    tunnel a duplicate of the old link's send queue through the new link
    before we open it for regular traffic. The last arriving packet copy,
    on whichever link, will be dropped at the receiving end based on the
    original sequence number, to ensure that only one copy is delivered to
    the end receiver.
    
    In this commit, we change the algorithm for receiving DUPLICATE_MSG
    packets, at the same time delegating it to a new subfunction,
    tipc_link_dup_rcv(). Instead of returning an extracted inner packet to
    the packet reception loop in tipc_rcv(), we just add it to the receiving
    (new) link's deferred packet queue. The packet will then be processed by
    that link when it receives its first non-tunneled packet, i.e., at
    latest when the changeover procedure is finished.
    
    Because tipc_link_tunnel_rcv()/tipc_link_dup_rcv() now is consuming all
    packets of type DUPLICATE_MSG, the calling tipc_rcv() function can omit
    testing for this. This in turn means that the current conditional jump
    to the label 'protocol_check' becomes redundant, and we can remove that
    label.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c61dd61dec0b79fa22ded8b5caf2e817dc506c24
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Feb 13 17:29:09 2014 -0500

    tipc: remove 'links' list from tipc_bearer struct
    
    In our ongoing effort to simplify the TIPC locking structure,
    we see a need to remove the linked list for tipc_links
    in the bearer. This can be explained as follows.
    
    Currently, we have three different ways to access a link,
    via three different lists/tables:
    
    1: Via a node hash table:
       Used by the time-critical outgoing/incoming data paths.
       (e.g. link_send_sections_fast() and tipc_recv_msg() ):
    
    grab net_lock(read)
       find node from node hash table
       grab node_lock
           select link
           grab bearer_lock
              send_msg()
           release bearer_lock
       release node lock
    release net_lock
    
    2: Via a global linked list for nodes:
       Used by configuration commands (link_cmd_set_value())
    
    grab net_lock(read)
       find node and link from global node list (using link name)
       grab node_lock
           update link
       release node lock
    release net_lock
    
    (Same locking order as above. No problem.)
    
    3: Via the bearer's linked link list:
       Used by notifications from interface (e.g. tipc_disable_bearer() )
    
    grab net_lock(write)
       grab bearer_lock
          get link ptr from bearer's link list
          get node from link
          grab node_lock
             delete link
          release node lock
       release bearer_lock
    release net_lock
    
    (Different order from above, but works because we grab the
    outer net_lock in write mode first, excluding all other access.)
    
    The first major goal in our simplification effort is to get rid
    of the "big" net_lock, replacing it with rcu-locks when accessing
    the node list and node hash array. This will come in a later patch
    series.
    
    But to get there we first need to rewrite access methods ##2 and 3,
    since removal of net_lock would introduce three major problems:
    
    a) In access method #2, we access the link before taking the
       protecting node_lock. This will not work once net_lock is gone,
       so we will have to change the access order. We will deal with
       this in a later commit in this series, "tipc: add node lock
       protection to link found by link_find_link()".
    
    b) When the outer protection from net_lock is gone, taking
       bearer_lock and node_lock in opposite order of method 1) and 2)
       will become an obvious deadlock hazard. This is fixed in the
       commit ("tipc: remove bearer_lock from tipc_bearer struct")
       later in this series.
    
    c) Similar to what is described in problem a), access method #3
       starts with using a link pointer that is unprotected by node_lock,
       in order to via that pointer find the correct node struct and
       lock it. Before we remove net_lock, this access order must be
       altered. This is what we do with this commit.
    
    We can avoid introducing problem problem c) by even here using the
    global node list to find the node, before accessing its links. When
    we loop though the node list we use the own bearer identity as search
    criteria, thus easily finding the links that are associated to the
    resetting/disabling bearer. It should be noted that although this
    method is somewhat slower than the current list traversal, it is in
    no way time critical. This is only about resetting or deleting links,
    something that must be considered relatively infrequent events.
    
    As a bonus, we can get rid of the mutual pointers between links and
    bearers. After this commit, pointer dependency go in one direction
    only: from the link to the bearer.
    
    This commit pre-empts introduction of problem c) as described above.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 135daee6d3959a6d7c4f59b448ed6f854d88ce27
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Feb 13 17:29:08 2014 -0500

    tipc: redefine 'started' flag in struct link to bitmap
    
    Currently, the 'started' field in struct tipc_link represents only a
    binary state, 'started' or 'not started'. We need it to represent
    more link execution states in the coming commits in this series.
    Hence, we rename the field to 'flags', and define the current
    started/non-started state to be represented by the LSB bit of
    that field.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8d8439b686f15c23faef4d7d67c4a9f30ce0f2b5
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Feb 13 17:29:07 2014 -0500

    tipc: move code for deleting links from bearer.c to link.c
    
    We break out the code for deleting attached links in the
    function bearer_disable(), and define a new function named
    tipc_link_delete_list() to do this job.
    
    This commit incurs no functional changes, but makes the code of
    function bearer_disable() cleaner. It is also a preparation
    for a more important change to the bearer code, in a subsequent
    commit in this series.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e0ca2c30b1e9c1ed8b58bccb95c33d25763a4311
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Feb 13 17:29:06 2014 -0500

    tipc: move code for resetting links from bearer.c to link.c
    
    We break out the code for resetting attached links in the
    function tipc_reset_bearer(), and define a new function named
    tipc_link_reset_list() to do this job.
    
    This commit incurs no functional changes, but makes the code
    of function tipc_reset_bearer() cleaner. It is also a preparation
    for a more important change to the bearer code, in a subsequent
    commit in this series.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 03b92017933bd22a3dca6830048877dd3162f872
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Feb 13 17:29:05 2014 -0500

    tipc: stricter behavior of message reassembly function
    
    The function tipc_link_recv_fragment(struct sk_buff **buf) currently
    leaves the value of the input buffer pointer undefined when it returns,
    except when the return code indicates that the reassembly is complete.
    This despite the fact that it always consumes the input buffer.
    
    Here, we enforce a stricter behavior by this function, ensuring that
    the returned buffer pointer is non-NULL if and only if the reassembly
    is complete. This makes it possible to test for the buffer pointer as
    criteria for successful reassembly.
    
    We also rename the function to tipc_link_frag_rcv(), which is both
    shorter and more in line with common naming practice in the network
    subsystem.
    
    Apart from the new name, these changes have no impact on current
    users of the function, but makes it more practical for use in some
    planned future commits.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b3f0f5c357e60b7a366d2c8d739b47452451868b
Author: Andreas Bofjäll <andreas.bofjall@ericsson.com>
Date:   Wed Feb 12 09:34:18 2014 +0100

    tipc: explicitly include core.h in addr.h
    
    The inline functions in addr.h uses tipc_own_addr which is exported by
    core.h, but addr.h never actually includes it. It works because it is
    explicitly included where this is used, but it looks a bit strange.
    
    Include core.h in addr.h explicitly to make the dependency clearer.
    
    Signed-off-by: Andreas Bofjäll <andreas.bofjall@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 64380a04deeed4720de76b086a3a4eab8dd41671
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Tue Feb 11 11:38:26 2014 +0100

    tipc: fix message corruption bug for deferred packets
    
    If a packet received on a link is out-of-sequence, it will be
    placed on a deferred queue and later reinserted in the receive
    path once the preceding packets have been processed. The problem
    with this is that it will be subject to the buffer adjustment from
    link_recv_buf_validate twice. The second adjustment for 20 bytes
    header space will corrupt the packet.
    
    We solve this by tagging the deferred packets and bail out from
    receive buffer validation for packets that have already been
    subjected to this.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8b88a11e4451a967973b7b8b5e82ff62f3d69945
Merge: abfce3ef58b6 9bbb4ecc6819
Author: David S. Miller <davem@davemloft.net>
Date:   Thu Jan 16 19:11:22 2014 -0800

    Merge branch 'tipc'
    
    Ying Xue says:
    
    ====================
    tipc: align TIPC behaviours of waiting for events with other stacks
    
    Comparing the current implementations of waiting for events in TIPC
    socket layer with other stacks, TIPC's behaviour is very different
    because wait_event_interruptible_timeout()/wait_event_interruptible()
    are always used by TIPC to wait for events while relevant socket or
    port variables are fed to them as their arguments. As socket lock has
    to be released temporarily before the two routines of waiting for
    events are called, their arguments associated with socket or port
    structures are out of socket lock protection. This might cause
    serious issues where the process of calling socket syscall such as
    sendsmg(), connect(), accept(), and recvmsg(), cannot be waken up
    at all even if proper event arrives or improperly be woken up
    although the condition of waking up the process is not satisfied
    in practice.
    
    Therefore, aligning its behaviours with similar functions implemented
    in other stacks, for instance, sk_stream_wait_connect() and
    inet_csk_wait_for_connect() etc, can avoid above risks for us.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9bbb4ecc681968b7cf781e08e3918604c3b699d3
Author: Ying Xue <ying.xue@windriver.com>
Date:   Fri Jan 17 09:50:07 2014 +0800

    tipc: standardize recvmsg routine
    
    Standardize the behaviour of waiting for events in TIPC recvmsg()
    so that all variables of socket or port structures are protected
    within socket lock, allowing the process of calling recvmsg() to
    be woken up at appropriate time.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 391a6dd1da3979be7b6fc0d9ded1b0b906bd068f
Author: Ying Xue <ying.xue@windriver.com>
Date:   Fri Jan 17 09:50:06 2014 +0800

    tipc: standardize sendmsg routine of connected socket
    
    Standardize the behaviour of waiting for events in TIPC send_packet()
    so that all variables of socket or port structures are protected within
    socket lock, allowing the process of calling sendmsg() to be woken up
    at appropriate time.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3f40504f7ee419eda0068e55e0ee2622e1fce40b
Author: Ying Xue <ying.xue@windriver.com>
Date:   Fri Jan 17 09:50:05 2014 +0800

    tipc: standardize sendmsg routine of connectionless socket
    
    Comparing the behaviour of how to wait for events in TIPC sendmsg()
    with other stacks, the TIPC implementation might be perceived as
    different, and sometimes even incorrect. For instance, sk_sleep()
    and tport->congested variables associated with socket are exposed
    without socket lock protection while wait_event_interruptible_timeout()
    accesses them. So standardizing it with similar implementation
    in other stacks can help us correct these errors which the process
    of calling sendmsg() cannot be woken up event if an expected event
    arrive at socket or improperly woken up although the wake condition
    doesn't match.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6398e23cdb1d807132c1d3d007d6b1ec87b511af
Author: Ying Xue <ying.xue@windriver.com>
Date:   Fri Jan 17 09:50:04 2014 +0800

    tipc: standardize accept routine
    
    Comparing the behaviour of how to wait for events in TIPC accept()
    with other stacks, the TIPC implementation might be perceived as
    different, and sometimes even incorrect. As sk_sleep() and
    sk->sk_receive_queue variables associated with socket are not
    protected by socket lock, the process of calling accept() may be
    woken up improperly or sometimes cannot be woken up at all. After
    standardizing it with inet_csk_wait_for_connect routine, we can
    get benefits including: avoiding 'thundering herd' phenomenon,
    adding a timeout mechanism for accept(), coping with a pending
    signal, and having sk_sleep() and sk->sk_receive_queue being
    always protected within socket lock scope and so on.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 78eb3a5379a52f291556483ea55b8a37e2ed4d5b
Author: Ying Xue <ying.xue@windriver.com>
Date:   Fri Jan 17 09:50:03 2014 +0800

    tipc: standardize connect routine
    
    Comparing the behaviour of how to wait for events in TIPC connect()
    with other stacks, the TIPC implementation might be perceived as
    different, and sometimes even incorrect. For instance, as both
    sock->state and sk_sleep() are directly fed to
    wait_event_interruptible_timeout() as its arguments, and socket lock
    has to be released before we call wait_event_interruptible_timeout(),
    the two variables associated with socket are exposed out of socket
    lock protection, thereby probably getting stale values so that the
    process of calling connect() cannot be woken up exactly even if
    correct event arrives or it is woken up improperly even if the wake
    condition is not satisfied in practice. Therefore, standardizing its
    behaviour with sk_stream_wait_connect routine can avoid these risks.
    
    Additionally the implementation of connect routine is simplified as a
    whole, allowing it to return correct values in all different cases.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 963a185539a789cdfda7ee9e501be92235a22680
Author: stephen hemminger <stephen@networkplumber.org>
Date:   Sun Jan 12 12:48:00 2014 -0800

    tipc: spelling fixes
    
    Signed-off-by: Stephen Hemminger <stephen@networkplumber.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 228fdc083b017eaf90e578fa86fb1ecfd5ffae87
Merge: e2bc44706faa d6e9c89a8d3c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Jan 11 06:37:11 2014 +0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
     "Famouse last words: "final pull request" :-)
    
      I'm sending this because Jason Wang's fixes are pretty important
    
       1) Add missing per-cpu stats initialization to ip6_vti.  Otherwise
          lockdep spits out a call trace.  From Li RongQing.
    
       2) Fix NULL oops in wireless hwsim, from Javier Lopez
    
       3) TIPC deferred packet queue unlink must NULL out skb->next to avoid
          crashes.  From Erik Hugne
    
       4) Fix access to uninitialized buffer in nf_nat netfilter code, from
          Daniel Borkmann
    
       5) Fix lifetime of ipv6 loopback and SIT tunnel addresses, otherwise
          they basically timeout immediately.  From Hannes Frederic Sowa
    
       6) Fix DMA unmapping of TSO packets in bnx2x driver, from Michal
          Schmidt
    
       7) Do not allow L2 forwarding offload via macvtap device, the way
          things are now it will not end up being forwaded at all.  From
          Jason Wang
    
       8) Fix transmit queue selection via ndo_dfwd_start_xmit(), fixing
          things like applying NETIF_F_LLTX to the wrong device (!!) and
          eliding the proper transmit watchdog handling
    
       9) qlcnic driver was not updating tx statistics at all, from Manish
          Chopra"
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net:
      qlcnic: Fix ethtool statistics length calculation
      qlcnic: Fix bug in TX statistics
      net: core: explicitly select a txq before doing l2 forwarding
      macvlan: forbid L2 fowarding offload for macvtap
      bnx2x: fix DMA unmapping of TSO split BDs
      ipv6: add link-local, sit and loopback address with INFINITY_LIFE_TIME
      bnx2x: prevent WARN during driver unload
      tipc: correctly unlink packets from deferred packet queue
      ipv6: pcpu_tstats.syncp should be initialised in ip6_vti.c
      netfilter: only warn once on wrong seqadj usage
      netfilter: nf_nat: fix access to uninitialized buffer in IRC NAT helper
      NFC: Fix target mode p2p link establishment
      iwlwifi: add new devices for 7265 series
      mac80211: move "bufferable MMPDU" check to fix AP mode scan
      mac80211_hwsim: Fix NULL pointer dereference

commit 8752b5caed54baa36c056b5c279ccdcf2805b9f6
Merge: fd44b93cb5ee 581465fa2858
Author: David S. Miller <davem@davemloft.net>
Date:   Tue Jan 7 18:44:35 2014 -0500

    Merge branch 'tipc'
    
    Jon Maloy says:
    
    ====================
    tipc: link setup and failover improvements
    
    This series consists of four unrelated commits with different purposes.
    
    - Commit #1 is purely cosmetic and pedagogic, hopefully making the
      failover/tunneling logics slightly easier to understand.
    - Commit #2 fixes a bug that has always been in the code, but was not
      discovered until very recently.
    - Commit #3 fixes a non-fatal race issue in the neighbour discovery
      code.
    - Commit #4 removes an unnecessary indirection step during link
      startup.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 581465fa285863344efc233bc546823bfabd295f
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Tue Jan 7 17:02:44 2014 -0500

    tipc: make link start event synchronous
    
    When a link is created we delay the start event by launching it
    to be executed later in a tasklet. As we hold all the
    necessary locks at the moment of creation, and there is no risk
    of deadlock or contention, this delay serves no purpose in the
    current code.
    
    We remove this obsolete indirection step, and the associated function
    link_start(). At the same time, we rename the function tipc_link_stop()
    to the more appropriate tipc_link_purge_queues().
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f9a2c80b8b7366748a1c3975df07f4a34aa80538
Author: Ying Xue <ying.xue@windriver.com>
Date:   Tue Jan 7 17:02:43 2014 -0500

    tipc: introduce new spinlock to protect struct link_req
    
    Currently, only 'bearer_lock' is used to protect struct link_req in
    the function disc_timeout(). This is unsafe, since the member fields
    'num_nodes' and 'timer_intv' might be accessed by below three different
    threads simultaneously, none of them grabbing bearer_lock in the
    critical region:
    
    link_activate()
      tipc_bearer_add_dest()
        tipc_disc_add_dest()
          req->num_nodes++;
    
    tipc_link_reset()
      tipc_bearer_remove_dest()
        tipc_disc_remove_dest()
          req->num_nodes--
          disc_update()
            read req->num_nodes
            write req->timer_intv
    
    disc_timeout()
      read req->num_nodes
      read/write req->timer_intv
    
    Without lock protection, the only symptom of a race is that discovery
    messages occasionally may not be sent out. This is not fatal, since such
    messages are best-effort anyway. On the other hand, since discovery
    messages are not time critical, adding a protecting lock brings no
    serious overhead either. So we add a new, dedicated spinlock in
    order to guarantee absolute data consistency in link_req objects.
    This also helps reduce the overall role of the bearer_lock, which
    we want to remove completely in a later commit series.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b9d4c33935bb5673fa9f721ecf85e5029c847f08
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Tue Jan 7 17:02:42 2014 -0500

    tipc: remove 'has_redundant_link' flag from STATE link protocol messages
    
    The flag 'has_redundant_link' is defined only in RESET and ACTIVATE
    protocol messages. Due to an ambiguity in the protocol specification it
    is currently also transferred in STATE messages. Its value is used to
    initialize a link state variable, 'permit_changeover', which is used
    to inhibit futile link failover attempts when it is known that the
    peer node has no working links at the moment, although the local node
    may still think it has one.
    
    The fact that 'has_redundant_link' incorrectly is read from STATE
    messages has the effect that 'permit_changeover' sometimes gets a wrong
    value, and permanently blocks any links from being re-established. Such
    failures can only occur in in dual-link systems, and are extremely rare.
    This bug seems to have always been present in the code.
    
    Furthermore, since commit b4b5610223f17790419b03eaa962b0e3ecf930d7
    ("tipc: Ensure both nodes recognize loss of contact between them"),
    the 'permit_changeover' field serves no purpose any more. The task of
    enforcing 'lost contact' cycles at both peer endpoints is now taken
    by a new mechanism, using the flags WAIT_NODE_DOWN and WAIT_PEER_DOWN
    in struct tipc_node to abort unnecessary failover attempts.
    
    We therefore remove the 'has_redundant_link' flag from STATE messages,
    as well as the now redundant 'permit_changeover' variable.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 170b3927b4c4f6e105964f81ae985fc9772b1f9b
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Tue Jan 7 17:02:41 2014 -0500

    tipc: rename functions related to link failover and improve comments
    
    The functionality related to link addition and failover is unnecessarily
    hard to understand and maintain. We try to improve this by renaming
    some of the functions, at the same time adding or improving the
    explanatory comments around them. Names such as "tipc_rcv()" etc. also
    align better with what is used in other networking components.
    
    The changes in this commit are purely cosmetic, no functional changes
    are made.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 732256b9335f8456623bb772d86c2a24e3cafca2
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Tue Jan 7 15:51:36 2014 -0500

    tipc: correctly unlink packets from deferred packet queue
    
    When we pull a received packet from a link's 'deferred packets' queue
    for processing, its 'next' pointer is not cleared, and still refers to
    the next packet in that queue, if any. This is incorrect, but caused
    no harm before commit 40ba3cdf542a469aaa9083fa041656e59b109b90 ("tipc:
    message reassembly using fragment chain") was introduced. After that
    commit, it may sometimes lead to the following oops:
    
    general protection fault: 0000 [#1] SMP DEBUG_PAGEALLOC
    Modules linked in: tipc
    CPU: 4 PID: 0 Comm: swapper/4 Tainted: G        W 3.13.0-rc2+ #6
    Hardware name: Bochs Bochs, BIOS Bochs 01/01/2007
    task: ffff880017af4880 ti: ffff880017aee000 task.ti: ffff880017aee000
    RIP: 0010:[<ffffffff81710694>]  [<ffffffff81710694>] skb_try_coalesce+0x44/0x3d0
    RSP: 0018:ffff880016603a78  EFLAGS: 00010212
    RAX: 6b6b6b6bd6d6d6d6 RBX: ffff880013106ac0 RCX: ffff880016603ad0
    RDX: ffff880016603ad7 RSI: ffff88001223ed00 RDI: ffff880013106ac0
    RBP: ffff880016603ab8 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000001 R11: 0000000000000000 R12: ffff88001223ed00
    R13: ffff880016603ad0 R14: 000000000000058c R15: ffff880012297650
    FS:  0000000000000000(0000) GS:ffff880016600000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 000000008005003b
    CR2: 000000000805b000 CR3: 0000000011f5d000 CR4: 00000000000006e0
    Stack:
     ffff880016603a88 ffffffff810a38ed ffff880016603aa8 ffff88001223ed00
     0000000000000001 ffff880012297648 ffff880016603b68 ffff880012297650
     ffff880016603b08 ffffffffa0006c51 ffff880016603b08 00ffffffa00005fc
    Call Trace:
     <IRQ>
     [<ffffffff810a38ed>] ? trace_hardirqs_on+0xd/0x10
     [<ffffffffa0006c51>] tipc_link_recv_fragment+0xd1/0x1b0 [tipc]
     [<ffffffffa0007214>] tipc_recv_msg+0x4e4/0x920 [tipc]
     [<ffffffffa00016f0>] ? tipc_l2_rcv_msg+0x40/0x250 [tipc]
     [<ffffffffa000177c>] tipc_l2_rcv_msg+0xcc/0x250 [tipc]
     [<ffffffffa00016f0>] ? tipc_l2_rcv_msg+0x40/0x250 [tipc]
     [<ffffffff8171e65b>] __netif_receive_skb_core+0x80b/0xd00
     [<ffffffff8171df94>] ? __netif_receive_skb_core+0x144/0xd00
     [<ffffffff8171eb76>] __netif_receive_skb+0x26/0x70
     [<ffffffff8171ed6d>] netif_receive_skb+0x2d/0x200
     [<ffffffff8171fe70>] napi_gro_receive+0xb0/0x130
     [<ffffffff815647c2>] e1000_clean_rx_irq+0x2c2/0x530
     [<ffffffff81565986>] e1000_clean+0x266/0x9c0
     [<ffffffff81985f7b>] ? notifier_call_chain+0x2b/0x160
     [<ffffffff8171f971>] net_rx_action+0x141/0x310
     [<ffffffff81051c1b>] __do_softirq+0xeb/0x480
     [<ffffffff819817bb>] ? _raw_spin_unlock+0x2b/0x40
     [<ffffffff810b8c42>] ? handle_fasteoi_irq+0x72/0x100
     [<ffffffff81052346>] irq_exit+0x96/0xc0
     [<ffffffff8198cbc3>] do_IRQ+0x63/0xe0
     [<ffffffff81981def>] common_interrupt+0x6f/0x6f
     <EOI>
    
    This happens when the last fragment of a message has passed through the
    the receiving link's 'deferred packets' queue, and at least one other
    packet was added to that queue while it was there. After the fragment
    chain with the complete message has been successfully delivered to the
    receiving socket, it is released. Since 'next' pointer of the last
    fragment in the released chain now is non-NULL, we get the crash shown
    above.
    
    We fix this by clearing the 'next' pointer of all received packets,
    including those being pulled from the 'deferred' queue, before they
    undergo any further processing.
    
    Fixes: 40ba3cdf542a4 ("tipc: message reassembly using fragment chain")
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reported-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit eec73f1c968d6d6cafa5ca19d53b6618bbd20e1e
Author: stephen hemminger <stephen@networkplumber.org>
Date:   Sat Jan 4 13:49:14 2014 -0800

    tipc: remove unused code
    
    Remove dead code;
           tipc_bearer_find_interface
           tipc_node_redundant_links
    
    This may break out of tree version of TIPC if there still is one.
    But that maybe a good thing :-)
    
    Signed-off-by: Stephen Hemminger <stephen@networkplumber.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9805696399ac4e1a7f59ebccc614cbd5d7dace6d
Author: stephen hemminger <stephen@networkplumber.org>
Date:   Sat Jan 4 13:47:48 2014 -0800

    tipc: make local function static
    
    Signed-off-by: Stephen Hemminger <stephen@networkplumber.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b0555976973aa37f080188665aff2c55aa60f47d
Author: wangweidong <wangweidong1@huawei.com>
Date:   Fri Dec 27 10:09:39 2013 +0800

    tipc: make the code look more readable
    
    In commit 3b8401fe9d ("tipc: kill unnecessary goto's") didn't make
    the code look most readable, so fix it. This patch is cosmetic
    and does not change the operation of TIPC in any way.
    
    Suggested-by: David Laight <David.Laight@ACULAB.COM>
    Signed-off-by: Wang Weidong <wangweidong1@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 67e0c1b037f8739a023c0129c1e0946defbaefb5
Merge: 802eee95bde7 7cd013992335
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Dec 30 09:33:30 2013 -0800

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
     "Some holiday bug fixes for 3.13...  There is still one bug I'd like to
      get fixed before 3.13-final.
    
      The vlan code erroneously assignes the header ops of the underlying
      real device to the VLAN device above it when the real device can
      hardware offload VLAN handling.  That's completely bogus because
      header ops are tied to the device type, so they only expect to see a
      'dev' argument compatible with their ops.
    
      The fix is the have the VLAN code use a special set of header ops that
      does the pass-thru correctly, by calling the underlying real device's
      header ops but _also_ passing in the real device instead of the VLAN
      device.
    
      That fix is currently waiting some testing.
    
      Anyways, of note here:
    
       1) Fix bitmap edge case in radiotap, from Johannes Berg.
    
       2) Fix oops on driver unload in rtlwifi, from Larry Finger.
    
       3) Bonding doesn't do locking correctly during speed/duplex/link
          changes, from Ding Tianhong.
    
       4) Fix header parsing in GRE code, this bug has been around for a few
          releases.  From Timo Teräs.
    
       5) SIT tunnel driver MTU check needs to take GSO into account, from
          Eric Dumazet.
    
       6) Minor info leak in inet_diag, from Daniel Borkmann.
    
       7) Info leak in YAM hamradio driver, from Salva Peiró.
    
       8) Fix route expiration state handling in ipv6 routing code, from Li
          RongQing.
    
       9) DCCP probe module does not check request_module()'s return value,
          from Wang Weidong.
    
      10) cpsw driver passes NULL device names to request_irq(), from
          Mugunthan V N.
    
      11) Prevent a NULL splat in RDS binding code, from Sasha Levin.
    
      12) Fix 4G overflow test in tg3 driver, from Nithin Sujir.
    
      13) Cure use after free in arc_emac and fec driver's software
          timestamp handling, from Eric Dumazet.
    
      14) SIT driver can fail to release the route when
          iptunnel_handle_offloads() throws an error.  From Li RongQing.
    
      15) Several batman-adv fixes from Simon Wunderlich and Antonio
          Quartulli.
    
      16) Fix deadlock during TIPC socket release, from Ying Xue.
    
      17) Fix regression in ROSE protocol recvmsg() msg_name handling, from
          Florian Westphal.
    
      18) stmmac PTP support releases wrong spinlock, from Vince Bridgers"
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (73 commits)
      stmmac: Fix incorrect spinlock release and PTP cap detection.
      phy: IRQ cannot be shared
      net: rose: restore old recvmsg behavior
      xen-netback: fix guest-receive-side array sizes
      fec: Do not assume that PHY reset is active low
      tipc: fix deadlock during socket release
      netfilter: nf_tables: fix wrong datatype in nft_validate_data_load()
      batman-adv: fix vlan header access
      batman-adv: clean nf state when removing protocol header
      batman-adv: fix alignment for batadv_tvlv_tt_change
      batman-adv: fix size of batadv_bla_claim_dst
      batman-adv: fix size of batadv_icmp_header
      batman-adv: fix header alignment by unrolling batadv_header
      batman-adv: fix alignment for batadv_coded_packet
      netfilter: nf_tables: fix oops when updating table with user chains
      netfilter: nf_tables: fix dumping with large number of sets
      ipv6: release dst properly in ipip6_tunnel_xmit
      netxen: Correct off-by-one errors in bounds checks
      net: Add some clarification to skb_tx_timestamp() comment.
      arc_emac: fix potential use after free
      ...

commit 84602761ca4495dd409be936dfa93ed20c946684
Author: Ying Xue <ying.xue@windriver.com>
Date:   Fri Dec 27 10:18:28 2013 +0800

    tipc: fix deadlock during socket release
    
    A deadlock might occur if name table is withdrawn in socket release
    routine, and while packets are still being received from bearer.
    
           CPU0                       CPU1
    T0:   recv_msg()               release()
    T1:   tipc_recv_msg()          tipc_withdraw()
    T2:   [grab node lock]         [grab port lock]
    T3:   tipc_link_wakeup_ports() tipc_nametbl_withdraw()
    T4:   [grab port lock]*        named_cluster_distribute()
    T5:   wakeupdispatch()         tipc_link_send()
    T6:                            [grab node lock]*
    
    The opposite order of holding port lock and node lock on above two
    different paths may result in a deadlock. If socket lock instead of
    port lock is used to protect port instance in tipc_withdraw(), the
    reverse order of holding port lock and node lock will be eliminated,
    as a result, the deadlock is killed as well.
    
    Reported-by: Lars Everbrand <lars.everbrand@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d3fbccf2b01f8262faa1479712be6a55c626bdef
Author: wangweidong <wangweidong1@huawei.com>
Date:   Thu Dec 12 09:36:42 2013 +0800

    tipc: change lock_sock order in connect()
    
    Instead of reaquiring the socket lock and taking the normal exit
    path when a connection times out, we bail out early with a
    return -ETIMEDOUT.
    
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: Wang Weidong <wangweidong1@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 776a74ce07a6e325fcfc04e272389947b1281159
Author: wangweidong <wangweidong1@huawei.com>
Date:   Thu Dec 12 09:36:41 2013 +0800

    tipc: Use <linux/uaccess.h> instead of <asm/uaccess.h>
    
    As warned by checkpatch.pl, use #include <linux/uaccess.h>
    instead of <asm/uaccess.h>
    
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: Wang Weidong <wangweidong1@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3b8401fe9dba490b81b30deaa9bf4f89120bb5ba
Author: wangweidong <wangweidong1@huawei.com>
Date:   Thu Dec 12 09:36:40 2013 +0800

    tipc: kill unnecessary goto's
    
    Remove a number of needless 'goto exit' in send_stream
    when the socket is in an unconnected state.
    This patch is cosmetic and does not alter the operation of
    TIPC in any way.
    
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: Wang Weidong <wangweidong1@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0cee6bbe06f67ff7dd83a4bc794f23c5cd5e7929
Author: wangweidong <wangweidong1@huawei.com>
Date:   Thu Dec 12 09:36:39 2013 +0800

    tipc: remove unnecessary variables and conditions
    
    We remove a number of unnecessary variables and branches
    in TIPC. This patch is cosmetic and does not change the
    operation of TIPC in any way.
    
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: Wang Weidong <wangweidong1@huawei.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit fcfa1a1722722de0d6c125723d1772780525a19a
Merge: 4ba3f99a3624 77a7e07a78a4
Author: David S. Miller <davem@davemloft.net>
Date:   Wed Dec 11 00:17:51 2013 -0500

    Merge branch 'tipc'
    
    Jon Maloy says:
    
    ====================
    tipc: cleanups in media and bearer layer
    
    This commit series performs a number cleanups in order to make the
    bearer and media part of the code more comprehensible and manageable.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 77a7e07a78a44d6c015fa8447ab84bcdb360e35d
Author: Ying Xue <ying.xue@windriver.com>
Date:   Tue Dec 10 20:45:44 2013 -0800

    tipc: remove unused 'blocked' flag from tipc_link struct
    
    In early versions of TIPC it was possible to administratively block
    individual links through the use of the member flag 'blocked'. This
    functionality was deemed redundant, and since commit 7368dd ("tipc:
    clean out all instances of #if 0'd unused code"), this flag has been
    unused.
    
    In the current code, a link only needs to be blocked for sending and
    reception if it is subject to an ongoing link failover. In that case,
    it is sufficient to check if the number of expected failover packets
    is non-zero, something which is done via the funtion 'link_blocked()'.
    
    This commit finally removes the redundant 'blocked' flag completely.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e4d050cbf7720d8bcc781f4ef557d37ed148a5c4
Author: Ying Xue <ying.xue@windriver.com>
Date:   Tue Dec 10 20:45:43 2013 -0800

    tipc: eliminate code duplication in media layer
    
    Currently TIPC supports two L2 media types, Ethernet and Infiniband.
    Because both these media are accessed through the common net_device API,
    several functions in the two media adaptation files turn out to be
    fully or almost identical, leading to unnecessary code duplication.
    
    In this commit we extract this common code from the two media files
    and move them to the generic bearer.c. Additionally, we change
    the function names to reflect their real role: to access L2 media,
    irrespective of type.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Cc: Patrick McHardy <kaber@trash.net>
    Reviewed-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6e967adf798ae5066488fd0c2b2466d06c642f23
Author: Ying Xue <ying.xue@windriver.com>
Date:   Tue Dec 10 20:45:42 2013 -0800

    tipc: relocate common functions from media to bearer
    
    Currently, registering a TIPC stack handler in the network device layer
    is done twice, once for Ethernet (eth_media) and Infiniband (ib_media)
    repectively. But, as this registration is not media specific, we can
    avoid some code duplication by moving the registering function to
    the generic bearer layer, to the file bearer.c, and call it only once.
    The same is true for the network device event notifier.
    
    As a side effect, the two workqueues we are using for for setting up/
    cleaning up media can now be eliminated. Furthermore, the array for
    storing the specific media type structs, media_array[], can be entirely
    deleted.
    
    Note that the eth_started and ib_started flags were removed during the
    code relocation.  There is now only one call to bearer_setup and
    bearer_cleanup, and these can logically not race against each other.
    
    Despite its size, this cleanup work incurs no functional changes in TIPC.
    In particular, it should be noted that the sequence ordering of received
    packets is unaffected by this change, since packet reception never was
    subject to any work queue handling in the first place.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Cc: Patrick McHardy <kaber@trash.net>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 37cb0620073cb64101d9307931c135c70b2e3f04
Author: Ying Xue <ying.xue@windriver.com>
Date:   Tue Dec 10 20:45:41 2013 -0800

    tipc: remove TIPC usage of field af_packet_priv in struct net_device
    
    TIPC is currently using the field 'af_packet_priv' in struct net_device
    as a handle to find the bearer instance associated to the given network
    device. But, by doing so it is blocking other networking cleanups, such
    as the one discussed here:
    
    http://patchwork.ozlabs.org/patch/178044/
    
    This commit removes this usage from TIPC. Instead, we introduce a new
    field, 'tipc_ptr', to the net_device structure, to serve this purpose.
    When TIPC bearer is enabled, the bearer object is associated to
    'tipc_ptr'. When a TIPC packet arrives in the recv_msg() upcall
    from a networking device, the bearer object can now be obtained from
    'tipc_ptr'. When a bearer is disabled, the bearer object is detached
    from its underlying network device by setting 'tipc_ptr' to NULL.
    
    Additionally, an RCU lock is used to protect the new pointer.
    Henceforth, the existing tipc_net_lock is used in write mode to
    serialize write accesses to this pointer, while the new RCU lock is
    applied on the read side to ensure that the pointer is 100% valid
    within its wrapped area for all readers.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Cc: Patrick McHardy <kaber@trash.net>
    Reviewed-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ef72a7e02a28adfd9d5d0d1de81c0b75f3823aa5
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Tue Dec 10 20:45:40 2013 -0800

    tipc: improve naming and comment consistency in media layer
    
    struct 'tipc_media' represents the specific info that the media
    layer adaptors (eth_media and ib_media) expose to the generic
    bearer layer. We clarify this by improved commenting, and by giving
    the 'media_list' array the more appropriate name 'media_info_array'.
    
    There are no functional changes in this commit.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5702dbab687e19792102200b085108f00ab820c9
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Tue Dec 10 20:45:39 2013 -0800

    tipc: initiate media type array at compile time
    
    Communication media types are abstracted through the struct 'tipc_media',
    one per media type. These structs are allocated statically inside their
    respective media file.
    
    Furthermore, in order to be able to reach all instances from a central
    location, we keep a static array with pointers to these structs. This
    array is currently initialized at runtime, under protection of
    tipc_net_lock. However, since the contents of the array itself never
    changes after initialization, we can just as well initialize it at
    compile time and make it 'const', at the same time making it obvious
    that no lock protection is needed here.
    
    This commit makes the array constant and removes the redundant lock
    protection.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d77b3831f7d59d69aa49d5d1df10bbe56671dc5d
Author: Ying Xue <ying.xue@windriver.com>
Date:   Tue Dec 10 20:45:38 2013 -0800

    tipc: eliminate redundant code with kfree_skb_list routine
    
    sk_buff lists are currently relased by looping over the list and
    explicitly releasing each buffer.
    
    We replace all occurrences of this loop with a call to kfree_skb_list().
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 231df15f1ccbbb4526fdbcf072059b661b48c07d
Merge: 388d3335575f 00ede977098b
Author: David S. Miller <davem@davemloft.net>
Date:   Tue Dec 10 22:36:00 2013 -0500

    Merge branch 'tipc'
    
    Jon Maloy says:
    
    ====================
    tipc: corrections related to tasklet job mechanism
    
    These commits correct two bugs related to tipc' service for launching
    functions for asynchronous execution in a separate tasklet.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 00ede977098be3296d42d05a4265ec5ec4a28419
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Dec 9 22:54:47 2013 -0800

    tipc: protect handler_enabled variable with qitem_lock spin lock
    
    'handler_enabled' is a global flag indicating whether the TIPC
    signal handling service is enabled or not. The lack of lock
    protection for this flag incurs a risk for contention, so that
    a tipc_k_signal() call might queue a signal handler to a destroyed
    signal queue, with unpredictable results. To correct this, we let
    the already existing 'qitem_lock' protect the flag, as it already
    does with the queue itself. This way, we ensure that the flag
    always is consistent across all cores.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 993b858e37b3120ee76d9957a901cca22312ffaa
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Mon Dec 9 22:54:46 2013 -0800

    tipc: correct the order of stopping services at rmmod
    
    The 'signal handler' service in TIPC is a mechanism that makes it
    possible to postpone execution of functions, by launcing them into
    a job queue for execution in a separate tasklet, independent of
    the launching execution thread.
    
    When we do rmmod on the tipc module, this service is stopped after
    the network service. At the same time, the stopping of the network
    service may itself launch jobs for execution, with the risk that these
    functions may be scheduled for execution after the data structures
    meant to be accessed by the job have already been deleted. We have
    seen this happen, most often resulting in an oops.
    
    This commit ensures that the signal handler is the very first to be
    stopped when TIPC is shut down, so there are no surprises during
    the cleanup of the other services.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Reviewed-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 512137eeff00f73a8a62e481a6575f1556cf962c
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Fri Dec 6 10:08:00 2013 -0500

    tipc: remove interface state mirroring in bearer
    
    struct 'tipc_bearer' is a generic representation of the underlying
    media type, and exists in a one-to-one relationship to each interface
    TIPC is using. The struct contains a 'blocked' flag that mirrors the
    operational and execution state of the represented interface, and is
    updated through notification calls from the latter. The users of
    tipc_bearer are checking this flag before each attempt to send a
    packet via the interface.
    
    This state mirroring serves no purpose in the current code base. TIPC
    links will not discover a media failure any faster through this
    mechanism, and in reality the flag only adds overhead at packet
    sending and reception.
    
    Furthermore, the fact that the flag needs to be protected by a spinlock
    aggregated into tipc_bearer has turned out to cause a serious and
    completely unnecessary deadlock problem.
    
    CPU0                                    CPU1
    ----                                    ----
    Time 0: bearer_disable()                link_timeout()
    Time 1:   spin_lock_bh(&b_ptr->lock)      tipc_link_push_queue()
    Time 2:   tipc_link_delete()                tipc_bearer_blocked(b_ptr)
    Time 3:     k_cancel_timer(&req->timer)       spin_lock_bh(&b_ptr->lock)
    Time 4:       del_timer_sync(&req->timer)
    
    I.e., del_timer_sync() on CPU0 never returns, because the timer handler
    on CPU1 is waiting for the bearer lock.
    
    We eliminate the 'blocked' flag from struct tipc_bearer, along with all
    tests on this flag. This not only resolves the deadlock, but also
    simplifies and speeds up the data path execution of TIPC. It also fits
    well into our ongoing effort to make the locking policy simpler and
    more manageable.
    
    An effect of this change is that we can get rid of functions such as
    tipc_bearer_blocked(), tipc_continue() and tipc_block_bearer().
    We replace the latter with a new function, tipc_reset_bearer(), which
    resets all links associated to the bearer immediately after an
    interface goes down.
    
    A user might notice one slight change in link behaviour after this
    change. When an interface goes down, (e.g. through a NETDEV_DOWN
    event) all attached links will be reset immediately, instead of
    leaving it to each link to detect the failure through a timer-driven
    mechanism. We consider this an improvement, and see no obvious risks
    with the new behavior.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Paul Gortmaker <Paul.Gortmaker@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3db0a197ed86317ab2915bc8bddb91807b0f0e96
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Wed Nov 13 09:35:11 2013 +0100

    tipc: fix dereference before check warning
    
    This fixes the following Smatch warning:
    net/tipc/link.c:2364 tipc_link_recv_fragment()
        warn: variable dereferenced before check '*head' (see line 2361)
    
    A null pointer might be passed to skb_try_coalesce if
    a malicious sender injects orphan fragments on a link.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 95ed40196f965177ee0d044ab304e5cab3aee9c1
Merge: b0db7b0c21a0 a715b49e79b0
Author: David S. Miller <davem@davemloft.net>
Date:   Thu Nov 7 18:30:35 2013 -0500

    Merge branch 'tipc_fragmentation'
    
    Erik Hugne says:
    
    ====================
    tipc: message reassembly using fragment chain
    
    We introduce a new reassembly algorithm that improves performance
    and eliminates the risk of causing out-of-memory situations.
    
    v3: -Use skb_try_coalesce, and revert to fraglist if this does not succeed.
        -Make sure reassembly list head is uncloned.
    
    v2: -Rebased on Ying's indentation fix.
        -Node unlock call in msg_fragmenter case moved from patch #2 to #1.
         ('continue' with this lock held would cause spinlock recursion if only
          patch #1 is used)
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a715b49e79b0924863ff1424f9823cc1b5972322
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Wed Nov 6 09:28:07 2013 +0100

    tipc: reassembly failures should cause link reset
    
    If appending a received fragment to the pending fragment chain
    in a unicast link fails, the current code tries to force a retransmission
    of the fragment by decrementing the 'next received sequence number'
    field in the link. This is done under the assumption that the failure
    is caused by an out-of-memory situation, an assumption that does
    not hold true after the previous patch in this series.
    
    A failure to append a fragment can now only be caused by a protocol
    violation by the sending peer, and it must hence be assumed that it
    is either malicious or buggy.  Either way, the correct behavior is now
    to reset the link instead of trying to revert its sequence number.
    So, this is what we do in this commit.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 40ba3cdf542a469aaa9083fa041656e59b109b90
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Wed Nov 6 09:28:06 2013 +0100

    tipc: message reassembly using fragment chain
    
    When the first fragment of a long data data message is received on a link, a
    reassembly buffer large enough to hold the data from this and all subsequent
    fragments of the message is allocated. The payload of each new fragment is
    copied into this buffer upon arrival. When the last fragment is received, the
    reassembled message is delivered upwards to the port/socket layer.
    
    Not only is this an inefficient approach, but it may also cause bursts of
    reassembly failures in low memory situations. since we may fail to allocate
    the necessary large buffer in the first place. Furthermore, after 100 subsequent
    such failures the link will be reset, something that in reality aggravates the
    situation.
    
    To remedy this problem, this patch introduces a different approach. Instead of
    allocating a big reassembly buffer, we now append the arriving fragments
    to a reassembly chain on the link, and deliver the whole chain up to the
    socket layer once the last fragment has been received. This is safe because
    the retransmission layer of a TIPC link always delivers packets in strict
    uninterrupted order, to the reassembly layer as to all other upper layers.
    Hence there can never be more than one fragment chain pending reassembly at
    any given time in a link, and we can trust (but still verify) that the
    fragments will be chained up in the correct order.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 528f6f4bf372511ebf6004eed822de8f749b5930
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Wed Nov 6 09:28:05 2013 +0100

    tipc: don't reroute message fragments
    
    When a message fragment is received in a broadcast or unicast link,
    the reception code will append the fragment payload to a big reassembly
    buffer through a call to the function tipc_recv_fragm(). However, after
    the return of that call, the logics goes on and passes the fragment
    buffer to the function tipc_net_route_msg(), which will simply drop it.
    This behavior is a remnant from the now obsolete multi-cluster
    functionality, and has no relevance in the current code base.
    
    Although currently harmless, this unnecessary call would be fatal
    after applying the next patch in this series, which introduces
    a completely new reassembly algorithm. So we change the code to
    eliminate the redundant call.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3af390e2c5fd8a8cab6d123c18fcd3e1a65b43c6
Author: Ying Xue <ying.xue@windriver.com>
Date:   Wed Oct 30 11:26:57 2013 +0800

    tipc: remove two indentation levels in tipc_recv_msg routine
    
    The message dispatching part of tipc_recv_msg() is wrapped layers of
    while/if/if/switch, causing out-of-control indentation and does not
    look very good. We reduce two indentation levels by separating the
    message dispatching from the blocks that checks link state and
    sequence numbers, allowing longer function and arg names to be
    consistently indented without wrapping. Additionally we also rename
    "cont" label to "discard" and add one new label called "unlock_discard"
    to make code clearer. In all, these are cosmetic changes that do not
    alter the operation of TIPC in any way.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Erik Hugne <erik.hugne@ericsson.com>
    Cc: David Laight <david.laight@aculab.com>
    Cc: Andreas Bofjäll <andreas.bofjall@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e7b1664d08249f111c1802050c1e49435dde8e1d
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Aug 16 12:09:07 2012 +0000

    tipc: fix lockdep warning during bearer initialization
    
    [ Upstream commit 4225a398c1352a7a5c14dc07277cb5cc4473983b ]
    
    When the lockdep validator is enabled, it will report the below
    warning when we enable a TIPC bearer:
    
    [ INFO: possible irq lock inversion dependency detected ]
    ---------------------------------------------------------
    Possible interrupt unsafe locking scenario:
    
            CPU0                    CPU1
            ----                    ----
       lock(ptype_lock);
                                    local_irq_disable();
                                    lock(tipc_net_lock);
                                    lock(ptype_lock);
       <Interrupt>
       lock(tipc_net_lock);
    
      *** DEADLOCK ***
    
    the shortest dependencies between 2nd lock and 1st lock:
      -> (ptype_lock){+.+...} ops: 10 {
    [...]
    SOFTIRQ-ON-W at:
                          [<c1089418>] __lock_acquire+0x528/0x13e0
                          [<c108a360>] lock_acquire+0x90/0x100
                          [<c1553c38>] _raw_spin_lock+0x38/0x50
                          [<c14651ca>] dev_add_pack+0x3a/0x60
                          [<c182da75>] arp_init+0x1a/0x48
                          [<c182dce5>] inet_init+0x181/0x27e
                          [<c1001114>] do_one_initcall+0x34/0x170
                          [<c17f7329>] kernel_init+0x110/0x1b2
                          [<c155b6a2>] kernel_thread_helper+0x6/0x10
    [...]
       ... key      at: [<c17e4b10>] ptype_lock+0x10/0x20
       ... acquired at:
        [<c108a360>] lock_acquire+0x90/0x100
        [<c1553c38>] _raw_spin_lock+0x38/0x50
        [<c14651ca>] dev_add_pack+0x3a/0x60
        [<c8bc18d2>] enable_bearer+0xf2/0x140 [tipc]
        [<c8bb283a>] tipc_enable_bearer+0x1ba/0x450 [tipc]
        [<c8bb3a04>] tipc_cfg_do_cmd+0x5c4/0x830 [tipc]
        [<c8bbc032>] handle_cmd+0x42/0xd0 [tipc]
        [<c148e802>] genl_rcv_msg+0x232/0x280
        [<c148d3f6>] netlink_rcv_skb+0x86/0xb0
        [<c148e5bc>] genl_rcv+0x1c/0x30
        [<c148d144>] netlink_unicast+0x174/0x1f0
        [<c148ddab>] netlink_sendmsg+0x1eb/0x2d0
        [<c1456bc1>] sock_aio_write+0x161/0x170
        [<c1135a7c>] do_sync_write+0xac/0xf0
        [<c11360f6>] vfs_write+0x156/0x170
        [<c11361e2>] sys_write+0x42/0x70
        [<c155b0df>] sysenter_do_call+0x12/0x38
    [...]
    }
      -> (tipc_net_lock){+..-..} ops: 4 {
    [...]
        IN-SOFTIRQ-R at:
                         [<c108953a>] __lock_acquire+0x64a/0x13e0
                         [<c108a360>] lock_acquire+0x90/0x100
                         [<c15541cd>] _raw_read_lock_bh+0x3d/0x50
                         [<c8bb874d>] tipc_recv_msg+0x1d/0x830 [tipc]
                         [<c8bc195f>] recv_msg+0x3f/0x50 [tipc]
                         [<c146a5fa>] __netif_receive_skb+0x22a/0x590
                         [<c146ab0b>] netif_receive_skb+0x2b/0xf0
                         [<c13c43d2>] pcnet32_poll+0x292/0x780
                         [<c146b00a>] net_rx_action+0xfa/0x1e0
                         [<c103a4be>] __do_softirq+0xae/0x1e0
    [...]
    }
    
    >From the log, we can see three different call chains between
    CPU0 and CPU1:
    
    Time 0 on CPU0:
    
      kernel_init()->inet_init()->dev_add_pack()
    
    At time 0, the ptype_lock is held by CPU0 in dev_add_pack();
    
    Time 1 on CPU1:
    
      tipc_enable_bearer()->enable_bearer()->dev_add_pack()
    
    At time 1, tipc_enable_bearer() first holds tipc_net_lock, and then
    wants to take ptype_lock to register TIPC protocol handler into the
    networking stack.  But the ptype_lock has been taken by dev_add_pack()
    on CPU0, so at this time the dev_add_pack() running on CPU1 has to be
    busy looping.
    
    Time 2 on CPU0:
    
      netif_receive_skb()->recv_msg()->tipc_recv_msg()
    
    At time 2, an incoming TIPC packet arrives at CPU0, hence
    tipc_recv_msg() will be invoked. In tipc_recv_msg(), it first wants
    to hold tipc_net_lock.  At the moment, below scenario happens:
    
    On CPU0, below is our sequence of taking locks:
    
      lock(ptype_lock)->lock(tipc_net_lock)
    
    On CPU1, our sequence of taking locks looks like:
    
      lock(tipc_net_lock)->lock(ptype_lock)
    
    Obviously deadlock may happen in this case.
    
    But please note the deadlock possibly doesn't occur at all when the
    first TIPC bearer is enabled.  Before enable_bearer() -- running on
    CPU1 does not hold ptype_lock, so the TIPC receive handler (i.e.
    recv_msg()) is not registered successfully via dev_add_pack(), so
    the tipc_recv_msg() cannot be called by recv_msg() even if a TIPC
    message comes to CPU0. But when the second TIPC bearer is
    registered, the deadlock can perhaps really happen.
    
    To fix it, we will push the work of registering TIPC protocol
    handler into workqueue context. After the change, both paths taking
    ptype_lock are always in process contexts, thus, the deadlock should
    never occur.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit ace0d5d8bf8a69866e4394ca2e4c5d1296ef7db2
Merge: 7cc7c5e54b71 bbfbe47cc99c
Author: David S. Miller <davem@davemloft.net>
Date:   Fri Oct 18 13:22:19 2013 -0400

    Merge branch 'tipc'
    
    Jon Maloy says:
    
    ====================
    Some small and relatively straightforward patches. With exception of
    the two first ones they are all unrelated and address minor issues.
    
    v2: update of v1 (http://patchwork.ozlabs.org/patch/277404/)
    
    -added commit to use memcpy_fromiovec on user data as per v1 feedback
    -updated sparse fix commit to drop chunks covered by above commit
    -added new commit that greatly simplifies the link lookup routine
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit bbfbe47cc99ce093708aaf28b7f2c08d28045c67
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Fri Oct 18 07:23:21 2013 +0200

    tipc: simplify the link lookup routine
    
    When checking statistics or changing parameters on a link, the
    link_find_link function is used to locate the link with a given
    name. The complex method of deconstructing the name into local
    and remote address/interface is error prone and may fail if the
    interface names contains special characters. We change the lookup
    method to iterate over the list of nodes and compare the link
    names.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Reviewed-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 636c0371a737c27510df867161fb8100c2f086bd
Author: Ying Xue <ying.xue@windriver.com>
Date:   Fri Oct 18 07:23:20 2013 +0200

    tipc: correct return value of link_cmd_set_value routine
    
    link_cmd_set_value() takes commands for link, bearer and media related
    configuration. Genereally the function returns 0 when a command is
    recognized, and -EINVAL when it is not. However, in the switch for link
    related commands it returns 0 even when the command is unrecognized. This
    will sometimes make it look as if a failed configuration command has been
    successful, but has otherwise no negative effects.
    
    We remove this anomaly by returning -EINVAL even for link commands. We also
    rework all three switches to make them  conforming to common kernel coding
    style.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 679815834857d5305dae108a03addccf16d86868
Author: Ying Xue <ying.xue@windriver.com>
Date:   Fri Oct 18 07:23:19 2013 +0200

    tipc: correct return value of recv_msg routine
    
    Currently, rcv_msg() always returns zero on a packet delivery upcall
    from net_device.
    
    To make its behavior more compliant with the way this API should be
    used, we change this to let it return NET_RX_SUCCESS (which is zero
    anyway) when it is able to handle the packet, and NET_RX_DROP otherwise.
    The latter does not imply any functional change, it only enables the
    driver to keep more accurate statistics about the fate of delivered
    packets.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f2875c3cc4769d07bab3bc6e51c386840a7de280
Author: Ying Xue <ying.xue@windriver.com>
Date:   Fri Oct 18 07:23:18 2013 +0200

    tipc: avoid unnecessary lookup for tipc bearer instance
    
    tipc_block_bearer() currently takes a bearer name (const char*)
    as argument. This requires the function to make a lookup to find
    the pointer to the corresponding bearer struct. In the current
    code base this is not necessary, since the only two callers
    (tipc_continue(),recv_notification()) already have validated
    copies of this pointer, and hence can pass it directly in the
    function call.
    
    We change tipc_block_bearer() to directly take struct tipc_bearer*
    as argument instead.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4babbaa8a1ecf1cb76de5e1635417c7472190ef5
Author: Ying Xue <ying.xue@windriver.com>
Date:   Fri Oct 18 07:23:17 2013 +0200

    tipc: make bearer and media naming consistent
    
    TIPC 'bearer' exists as an abstract concept, while 'media'
    is deemed a specific implementation of a bearer, such as Ethernet
    or Infiniband media. When a component inside TIPC wants to control
    a specific media, it only needs to access the generic bearer API
    to achieve this. However, in the current media implementations,
    the 'bearer' name is also extensively used in media specific
    function and variable names.
    
    This may create confusion, so we choose to replace the term 'bearer'
    with 'media' in all function names, variable names, and prefixes
    where this is what really is meant.
    
    Note that this change is cosmetic only, and no runtime behaviour
    changes are made here.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4068243208d605b046479e25c253379069a05fed
Author: Ying Xue <ying.xue@windriver.com>
Date:   Fri Oct 18 07:23:16 2013 +0200

    tipc: silence sparse warnings
    
    Eliminate below sparse warnings:
    
    net/tipc/link.c:1210:37: warning: cast removes address space of expression
    net/tipc/link.c:1218:59: warning: incorrect type in argument 2 (different address spaces)
    net/tipc/link.c:1218:59:    expected void const [noderef] <asn:1>*from
    net/tipc/link.c:1218:59:    got unsigned char const [usertype] *[assigned] sect_crs
    net/tipc/socket.c:341:49: warning: Using plain integer as NULL pointer
    net/tipc/socket.c:1371:36: warning: Using plain integer as NULL pointer
    net/tipc/socket.c:1694:57: warning: Using plain integer as NULL pointer
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Andreas Bofjäll <andreas.bofjall@ericsson.com>
    Reviewed-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9446b87addd90a067b21c726aedd3c42694c1780
Author: Ying Xue <ying.xue@windriver.com>
Date:   Fri Oct 18 07:23:15 2013 +0200

    tipc: remove iovec length parameter from all sending functions
    
    tipc_msg_build() now copies message data from iovec to skb_buff
    using memcpy_fromiovecend(), which doesn't need to be passed the
    iovec length to perform the copying.
    
    So we remove the parameter indicating iovec length in all
    functions where TIPC messages are built and sent.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5c0a0fc81f4dc786b42c4fc9c7c72ba635406ab5
Author: Ying Xue <ying.xue@windriver.com>
Date:   Fri Oct 18 07:23:14 2013 +0200

    tipc: don't use memcpy to copy from user space
    
    tipc_msg_build() calls skb_copy_to_linear_data_offset() to copy data
    from user space to kernel space. However, the latter function does
    in its turn call memcpy() to perform the actual copying. This poses
    an obvious security and robustness risk, since memcpy() never makes
    any validity check on the pointer it is copying from.
    
    To correct this, we the replace the offending function call with
    a call to memcpy_fromiovecend(), which uses copy_from_user() to
    perform the copying.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8db07b82b70897d868d864402b43a68da5e0cd59
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Wed Aug 28 09:29:58 2013 +0200

    tipc: set sk_err correctly when connection fails
    
    [ Upstream commit 2c8d85182348021fc0a1bed193a4be4161dc8364 ]
    
    Should a connect fail, if the publication/server is unavailable or
    due to some other error, a positive value will be returned and errno
    is never set. If the application code checks for an explicit zero
    return from connect (success) or a negative return (failure), it
    will not catch the error and subsequent send() calls will fail as
    shown from the strace snippet below.
    
    socket(0x1e /* PF_??? */, SOCK_SEQPACKET, 0) = 3
    connect(3, {sa_family=0x1e /* AF_??? */, sa_data="\2\1\322\4\0\0\322\4\0\0\0\0\0\0"}, 16) = 111
    sendto(3, "test", 4, 0, NULL, 0)        = -1 EPIPE (Broken pipe)
    
    The reason for this behaviour is that TIPC wrongly inverts error
    codes set in sk_err.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0aa1fedab07204880b8d1e935cc0782b55dfae21
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Aug 16 12:09:07 2012 +0000

    tipc: fix lockdep warning during bearer initialization
    
    [ Upstream commit 4225a398c1352a7a5c14dc07277cb5cc4473983b ]
    
    When the lockdep validator is enabled, it will report the below
    warning when we enable a TIPC bearer:
    
    [ INFO: possible irq lock inversion dependency detected ]
    ---------------------------------------------------------
    Possible interrupt unsafe locking scenario:
    
            CPU0                    CPU1
            ----                    ----
       lock(ptype_lock);
                                    local_irq_disable();
                                    lock(tipc_net_lock);
                                    lock(ptype_lock);
       <Interrupt>
       lock(tipc_net_lock);
    
      *** DEADLOCK ***
    
    the shortest dependencies between 2nd lock and 1st lock:
      -> (ptype_lock){+.+...} ops: 10 {
    [...]
    SOFTIRQ-ON-W at:
                          [<c1089418>] __lock_acquire+0x528/0x13e0
                          [<c108a360>] lock_acquire+0x90/0x100
                          [<c1553c38>] _raw_spin_lock+0x38/0x50
                          [<c14651ca>] dev_add_pack+0x3a/0x60
                          [<c182da75>] arp_init+0x1a/0x48
                          [<c182dce5>] inet_init+0x181/0x27e
                          [<c1001114>] do_one_initcall+0x34/0x170
                          [<c17f7329>] kernel_init+0x110/0x1b2
                          [<c155b6a2>] kernel_thread_helper+0x6/0x10
    [...]
       ... key      at: [<c17e4b10>] ptype_lock+0x10/0x20
       ... acquired at:
        [<c108a360>] lock_acquire+0x90/0x100
        [<c1553c38>] _raw_spin_lock+0x38/0x50
        [<c14651ca>] dev_add_pack+0x3a/0x60
        [<c8bc18d2>] enable_bearer+0xf2/0x140 [tipc]
        [<c8bb283a>] tipc_enable_bearer+0x1ba/0x450 [tipc]
        [<c8bb3a04>] tipc_cfg_do_cmd+0x5c4/0x830 [tipc]
        [<c8bbc032>] handle_cmd+0x42/0xd0 [tipc]
        [<c148e802>] genl_rcv_msg+0x232/0x280
        [<c148d3f6>] netlink_rcv_skb+0x86/0xb0
        [<c148e5bc>] genl_rcv+0x1c/0x30
        [<c148d144>] netlink_unicast+0x174/0x1f0
        [<c148ddab>] netlink_sendmsg+0x1eb/0x2d0
        [<c1456bc1>] sock_aio_write+0x161/0x170
        [<c1135a7c>] do_sync_write+0xac/0xf0
        [<c11360f6>] vfs_write+0x156/0x170
        [<c11361e2>] sys_write+0x42/0x70
        [<c155b0df>] sysenter_do_call+0x12/0x38
    [...]
    }
      -> (tipc_net_lock){+..-..} ops: 4 {
    [...]
        IN-SOFTIRQ-R at:
                         [<c108953a>] __lock_acquire+0x64a/0x13e0
                         [<c108a360>] lock_acquire+0x90/0x100
                         [<c15541cd>] _raw_read_lock_bh+0x3d/0x50
                         [<c8bb874d>] tipc_recv_msg+0x1d/0x830 [tipc]
                         [<c8bc195f>] recv_msg+0x3f/0x50 [tipc]
                         [<c146a5fa>] __netif_receive_skb+0x22a/0x590
                         [<c146ab0b>] netif_receive_skb+0x2b/0xf0
                         [<c13c43d2>] pcnet32_poll+0x292/0x780
                         [<c146b00a>] net_rx_action+0xfa/0x1e0
                         [<c103a4be>] __do_softirq+0xae/0x1e0
    [...]
    }
    
    >From the log, we can see three different call chains between
    CPU0 and CPU1:
    
    Time 0 on CPU0:
    
      kernel_init()->inet_init()->dev_add_pack()
    
    At time 0, the ptype_lock is held by CPU0 in dev_add_pack();
    
    Time 1 on CPU1:
    
      tipc_enable_bearer()->enable_bearer()->dev_add_pack()
    
    At time 1, tipc_enable_bearer() first holds tipc_net_lock, and then
    wants to take ptype_lock to register TIPC protocol handler into the
    networking stack.  But the ptype_lock has been taken by dev_add_pack()
    on CPU0, so at this time the dev_add_pack() running on CPU1 has to be
    busy looping.
    
    Time 2 on CPU0:
    
      netif_receive_skb()->recv_msg()->tipc_recv_msg()
    
    At time 2, an incoming TIPC packet arrives at CPU0, hence
    tipc_recv_msg() will be invoked. In tipc_recv_msg(), it first wants
    to hold tipc_net_lock.  At the moment, below scenario happens:
    
    On CPU0, below is our sequence of taking locks:
    
      lock(ptype_lock)->lock(tipc_net_lock)
    
    On CPU1, our sequence of taking locks looks like:
    
      lock(tipc_net_lock)->lock(ptype_lock)
    
    Obviously deadlock may happen in this case.
    
    But please note the deadlock possibly doesn't occur at all when the
    first TIPC bearer is enabled.  Before enable_bearer() -- running on
    CPU1 does not hold ptype_lock, so the TIPC receive handler (i.e.
    recv_msg()) is not registered successfully via dev_add_pack(), so
    the tipc_recv_msg() cannot be called by recv_msg() even if a TIPC
    message comes to CPU0. But when the second TIPC bearer is
    registered, the deadlock can perhaps really happen.
    
    To fix it, we will push the work of registering TIPC protocol
    handler into workqueue context. After the change, both paths taking
    ptype_lock are always in process contexts, thus, the deadlock should
    never occur.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 49b74a1aebc95914fff369b746ce13558eb9063f
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Aug 16 12:09:07 2012 +0000

    tipc: fix lockdep warning during bearer initialization
    
    [ Upstream commit 4225a398c1352a7a5c14dc07277cb5cc4473983b ]
    
    When the lockdep validator is enabled, it will report the below
    warning when we enable a TIPC bearer:
    
    [ INFO: possible irq lock inversion dependency detected ]
    ---------------------------------------------------------
    Possible interrupt unsafe locking scenario:
    
            CPU0                    CPU1
            ----                    ----
       lock(ptype_lock);
                                    local_irq_disable();
                                    lock(tipc_net_lock);
                                    lock(ptype_lock);
       <Interrupt>
       lock(tipc_net_lock);
    
      *** DEADLOCK ***
    
    the shortest dependencies between 2nd lock and 1st lock:
      -> (ptype_lock){+.+...} ops: 10 {
    [...]
    SOFTIRQ-ON-W at:
                          [<c1089418>] __lock_acquire+0x528/0x13e0
                          [<c108a360>] lock_acquire+0x90/0x100
                          [<c1553c38>] _raw_spin_lock+0x38/0x50
                          [<c14651ca>] dev_add_pack+0x3a/0x60
                          [<c182da75>] arp_init+0x1a/0x48
                          [<c182dce5>] inet_init+0x181/0x27e
                          [<c1001114>] do_one_initcall+0x34/0x170
                          [<c17f7329>] kernel_init+0x110/0x1b2
                          [<c155b6a2>] kernel_thread_helper+0x6/0x10
    [...]
       ... key      at: [<c17e4b10>] ptype_lock+0x10/0x20
       ... acquired at:
        [<c108a360>] lock_acquire+0x90/0x100
        [<c1553c38>] _raw_spin_lock+0x38/0x50
        [<c14651ca>] dev_add_pack+0x3a/0x60
        [<c8bc18d2>] enable_bearer+0xf2/0x140 [tipc]
        [<c8bb283a>] tipc_enable_bearer+0x1ba/0x450 [tipc]
        [<c8bb3a04>] tipc_cfg_do_cmd+0x5c4/0x830 [tipc]
        [<c8bbc032>] handle_cmd+0x42/0xd0 [tipc]
        [<c148e802>] genl_rcv_msg+0x232/0x280
        [<c148d3f6>] netlink_rcv_skb+0x86/0xb0
        [<c148e5bc>] genl_rcv+0x1c/0x30
        [<c148d144>] netlink_unicast+0x174/0x1f0
        [<c148ddab>] netlink_sendmsg+0x1eb/0x2d0
        [<c1456bc1>] sock_aio_write+0x161/0x170
        [<c1135a7c>] do_sync_write+0xac/0xf0
        [<c11360f6>] vfs_write+0x156/0x170
        [<c11361e2>] sys_write+0x42/0x70
        [<c155b0df>] sysenter_do_call+0x12/0x38
    [...]
    }
      -> (tipc_net_lock){+..-..} ops: 4 {
    [...]
        IN-SOFTIRQ-R at:
                         [<c108953a>] __lock_acquire+0x64a/0x13e0
                         [<c108a360>] lock_acquire+0x90/0x100
                         [<c15541cd>] _raw_read_lock_bh+0x3d/0x50
                         [<c8bb874d>] tipc_recv_msg+0x1d/0x830 [tipc]
                         [<c8bc195f>] recv_msg+0x3f/0x50 [tipc]
                         [<c146a5fa>] __netif_receive_skb+0x22a/0x590
                         [<c146ab0b>] netif_receive_skb+0x2b/0xf0
                         [<c13c43d2>] pcnet32_poll+0x292/0x780
                         [<c146b00a>] net_rx_action+0xfa/0x1e0
                         [<c103a4be>] __do_softirq+0xae/0x1e0
    [...]
    }
    
    >From the log, we can see three different call chains between
    CPU0 and CPU1:
    
    Time 0 on CPU0:
    
      kernel_init()->inet_init()->dev_add_pack()
    
    At time 0, the ptype_lock is held by CPU0 in dev_add_pack();
    
    Time 1 on CPU1:
    
      tipc_enable_bearer()->enable_bearer()->dev_add_pack()
    
    At time 1, tipc_enable_bearer() first holds tipc_net_lock, and then
    wants to take ptype_lock to register TIPC protocol handler into the
    networking stack.  But the ptype_lock has been taken by dev_add_pack()
    on CPU0, so at this time the dev_add_pack() running on CPU1 has to be
    busy looping.
    
    Time 2 on CPU0:
    
      netif_receive_skb()->recv_msg()->tipc_recv_msg()
    
    At time 2, an incoming TIPC packet arrives at CPU0, hence
    tipc_recv_msg() will be invoked. In tipc_recv_msg(), it first wants
    to hold tipc_net_lock.  At the moment, below scenario happens:
    
    On CPU0, below is our sequence of taking locks:
    
      lock(ptype_lock)->lock(tipc_net_lock)
    
    On CPU1, our sequence of taking locks looks like:
    
      lock(tipc_net_lock)->lock(ptype_lock)
    
    Obviously deadlock may happen in this case.
    
    But please note the deadlock possibly doesn't occur at all when the
    first TIPC bearer is enabled.  Before enable_bearer() -- running on
    CPU1 does not hold ptype_lock, so the TIPC receive handler (i.e.
    recv_msg()) is not registered successfully via dev_add_pack(), so
    the tipc_recv_msg() cannot be called by recv_msg() even if a TIPC
    message comes to CPU0. But when the second TIPC bearer is
    registered, the deadlock can perhaps really happen.
    
    To fix it, we will push the work of registering TIPC protocol
    handler into workqueue context. After the change, both paths taking
    ptype_lock are always in process contexts, thus, the deadlock should
    never occur.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a8787645e14ce7bbc3db9788526ed0be968c0df2
Merge: de80963e6108 0affdf347ffc
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Aug 30 17:43:17 2013 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) There was a simplification in the ipv6 ndisc packet sending
        attempted here, which avoided using memory accounting on the
        per-netns ndisc socket for sending NDISC packets.  It did fix some
        important issues, but it causes regressions so it gets reverted here
        too.  Specifically, the problem with this change is that the IPV6
        output path really depends upon there being a valid skb->sk
        attached.
    
        The reason we want to do this change in some form when we figure out
        how to do it right, is that if a device goes down the ndisc_sk
        socket send queue will fill up and block NDISC packets that we want
        to send to other devices too.  That's really bad behavior.
    
        Hopefully Thomas can come up with a better version of this change.
    
     2) Fix a severe TCP performance regression by reverting a change made
        to dev_pick_tx() quite some time ago.  From Eric Dumazet.
    
     3) TIPC returns wrongly signed error codes, fix from Erik Hugne.
    
     4) Fix OOPS when doing IPSEC over ipv4 tunnels due to orphaning the
        skb->sk too early.  Fix from Li Hongjun.
    
     5) RAW ipv4 sockets can use the wrong routing key during lookup, from
        Chris Clark.
    
     6) Similar to #1 revert an older change that tried to use plain
        alloc_skb() for SYN/ACK TCP packets, this broke the netfilter owner
        mark which needs to see the skb->sk for such frames.  From Phil
        Oester.
    
     7) BNX2x driver bug fixes from Ariel Elior and Yuval Mintz,
        specifically in the handling of virtual functions.
    
     8) IPSEC path error propagations to sockets is not done properly when
        we have v4 in v6, and v6 in v4 type rules.  Fix from Hannes Frederic
        Sowa.
    
     9) Fix missing channel context release in mac80211, from Johannes Berg.
    
    10) Fix network namespace handing wrt.  SCM_RIGHTS, from Andy
        Lutomirski.
    
    11) Fix usage of bogus NAPI weight in jme, netxen, and ps3_gelic
        drivers.  From Michal Schmidt.
    
    12) Hopefully a complete and correct fix for the genetlink dump locking
        and module reference counting.  From Pravin B Shelar.
    
    13) sk_busy_loop() must do a cpu_relax(), from Eliezer Tamir.
    
    14) Fix handling of timestamp offset when restoring a snapshotted TCP
        socket.  From Andrew Vagin.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (44 commits)
      net: fec: fix time stamping logic after napi conversion
      net: bridge: convert MLDv2 Query MRC into msecs_to_jiffies for max_delay
      mISDN: return -EINVAL on error in dsp_control_req()
      net: revert 8728c544a9c ("net: dev_pick_tx() fix")
      Revert "ipv6: Don't depend on per socket memory for neighbour discovery messages"
      ipv4 tunnels: fix an oops when using ipip/sit with IPsec
      tipc: set sk_err correctly when connection fails
      tcp: tcp_make_synack() should use sock_wmalloc
      bridge: separate querier and query timer into IGMP/IPv4 and MLD/IPv6 ones
      ipv6: Don't depend on per socket memory for neighbour discovery messages
      ipv4: sendto/hdrincl: don't use destination address found in header
      tcp: don't apply tsoffset if rcv_tsecr is zero
      tcp: initialize rcv_tstamp for restored sockets
      net: xilinx: fix memleak
      net: usb: Add HP hs2434 device to ZLP exception table
      net: add cpu_relax to busy poll loop
      net: stmmac: fixed the pbl setting with DT
      genl: Hold reference on correct module while netlink-dump.
      genl: Fix genl dumpit() locking.
      xfrm: Fix potential null pointer dereference in xdst_queue_output
      ...

commit 2c8d85182348021fc0a1bed193a4be4161dc8364
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Wed Aug 28 09:29:58 2013 +0200

    tipc: set sk_err correctly when connection fails
    
    Should a connect fail, if the publication/server is unavailable or
    due to some other error, a positive value will be returned and errno
    is never set. If the application code checks for an explicit zero
    return from connect (success) or a negative return (failure), it
    will not catch the error and subsequent send() calls will fail as
    shown from the strace snippet below.
    
    socket(0x1e /* PF_??? */, SOCK_SEQPACKET, 0) = 3
    connect(3, {sa_family=0x1e /* AF_??? */, sa_data="\2\1\322\4\0\0\322\4\0\0\0\0\0\0"}, 16) = 111
    sendto(3, "test", 4, 0, NULL, 0)        = -1 EPIPE (Broken pipe)
    
    The reason for this behaviour is that TIPC wrongly inverts error
    codes set in sk_err.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d4cca39d90fca21c04315095de5d0e734e839a8b
Author: dingtianhong <dingtianhong@huawei.com>
Date:   Fri Aug 9 17:12:58 2013 +0800

    tipc: avoid possible deadlock while enable and disable bearer
    
    We met lockdep warning when enable and disable the bearer for commands such as:
    
    tipc-config -netid=1234 -addr=1.1.3 -be=eth:eth0
    tipc-config -netid=1234 -addr=1.1.3 -bd=eth:eth0
    
    ---------------------------------------------------
    
    [  327.693595] ======================================================
    [  327.693994] [ INFO: possible circular locking dependency detected ]
    [  327.694519] 3.11.0-rc3-wwd-default #4 Tainted: G           O
    [  327.694882] -------------------------------------------------------
    [  327.695385] tipc-config/5825 is trying to acquire lock:
    [  327.695754]  (((timer))#2){+.-...}, at: [<ffffffff8105be80>] del_timer_sync+0x0/0xd0
    [  327.696018]
    [  327.696018] but task is already holding lock:
    [  327.696018]  (&(&b_ptr->lock)->rlock){+.-...}, at: [<ffffffffa02be58d>] bearer_disable+  0xdd/0x120 [tipc]
    [  327.696018]
    [  327.696018] which lock already depends on the new lock.
    [  327.696018]
    [  327.696018]
    [  327.696018] the existing dependency chain (in reverse order) is:
    [  327.696018]
    [  327.696018] -> #1 (&(&b_ptr->lock)->rlock){+.-...}:
    [  327.696018]        [<ffffffff810b3b4d>] validate_chain+0x6dd/0x870
    [  327.696018]        [<ffffffff810b40bb>] __lock_acquire+0x3db/0x670
    [  327.696018]        [<ffffffff810b4453>] lock_acquire+0x103/0x130
    [  327.696018]        [<ffffffff814d65b1>] _raw_spin_lock_bh+0x41/0x80
    [  327.696018]        [<ffffffffa02c5d48>] disc_timeout+0x18/0xd0 [tipc]
    [  327.696018]        [<ffffffff8105b92a>] call_timer_fn+0xda/0x1e0
    [  327.696018]        [<ffffffff8105bcd7>] run_timer_softirq+0x2a7/0x2d0
    [  327.696018]        [<ffffffff8105379a>] __do_softirq+0x16a/0x2e0
    [  327.696018]        [<ffffffff81053a35>] irq_exit+0xd5/0xe0
    [  327.696018]        [<ffffffff81033005>] smp_apic_timer_interrupt+0x45/0x60
    [  327.696018]        [<ffffffff814df4af>] apic_timer_interrupt+0x6f/0x80
    [  327.696018]        [<ffffffff8100b70e>] arch_cpu_idle+0x1e/0x30
    [  327.696018]        [<ffffffff810a039d>] cpu_idle_loop+0x1fd/0x280
    [  327.696018]        [<ffffffff810a043e>] cpu_startup_entry+0x1e/0x20
    [  327.696018]        [<ffffffff81031589>] start_secondary+0x89/0x90
    [  327.696018]
    [  327.696018] -> #0 (((timer))#2){+.-...}:
    [  327.696018]        [<ffffffff810b33fe>] check_prev_add+0x43e/0x4b0
    [  327.696018]        [<ffffffff810b3b4d>] validate_chain+0x6dd/0x870
    [  327.696018]        [<ffffffff810b40bb>] __lock_acquire+0x3db/0x670
    [  327.696018]        [<ffffffff810b4453>] lock_acquire+0x103/0x130
    [  327.696018]        [<ffffffff8105bebd>] del_timer_sync+0x3d/0xd0
    [  327.696018]        [<ffffffffa02c5855>] tipc_disc_delete+0x15/0x30 [tipc]
    [  327.696018]        [<ffffffffa02be59f>] bearer_disable+0xef/0x120 [tipc]
    [  327.696018]        [<ffffffffa02be74f>] tipc_disable_bearer+0x2f/0x60 [tipc]
    [  327.696018]        [<ffffffffa02bfb32>] tipc_cfg_do_cmd+0x2e2/0x550 [tipc]
    [  327.696018]        [<ffffffffa02c8c79>] handle_cmd+0x49/0xe0 [tipc]
    [  327.696018]        [<ffffffff8143e898>] genl_family_rcv_msg+0x268/0x340
    [  327.696018]        [<ffffffff8143ed30>] genl_rcv_msg+0x70/0xd0
    [  327.696018]        [<ffffffff8143d4c9>] netlink_rcv_skb+0x89/0xb0
    [  327.696018]        [<ffffffff8143e617>] genl_rcv+0x27/0x40
    [  327.696018]        [<ffffffff8143d21e>] netlink_unicast+0x15e/0x1b0
    [  327.696018]        [<ffffffff8143ddcf>] netlink_sendmsg+0x22f/0x400
    [  327.696018]        [<ffffffff813f7836>] __sock_sendmsg+0x66/0x80
    [  327.696018]        [<ffffffff813f7957>] sock_aio_write+0x107/0x120
    [  327.696018]        [<ffffffff8117f76d>] do_sync_write+0x7d/0xc0
    [  327.696018]        [<ffffffff8117fc56>] vfs_write+0x186/0x190
    [  327.696018]        [<ffffffff811803e0>] SyS_write+0x60/0xb0
    [  327.696018]        [<ffffffff814de852>] system_call_fastpath+0x16/0x1b
    [  327.696018]
    [  327.696018] other info that might help us debug this:
    [  327.696018]
    [  327.696018]  Possible unsafe locking scenario:
    [  327.696018]
    [  327.696018]        CPU0                    CPU1
    [  327.696018]        ----                    ----
    [  327.696018]   lock(&(&b_ptr->lock)->rlock);
    [  327.696018]                                lock(((timer))#2);
    [  327.696018]                                lock(&(&b_ptr->lock)->rlock);
    [  327.696018]   lock(((timer))#2);
    [  327.696018]
    [  327.696018]  *** DEADLOCK ***
    [  327.696018]
    [  327.696018] 5 locks held by tipc-config/5825:
    [  327.696018]  #0:  (cb_lock){++++++}, at: [<ffffffff8143e608>] genl_rcv+0x18/0x40
    [  327.696018]  #1:  (genl_mutex){+.+.+.}, at: [<ffffffff8143ed66>] genl_rcv_msg+0xa6/0xd0
    [  327.696018]  #2:  (config_mutex){+.+.+.}, at: [<ffffffffa02bf889>] tipc_cfg_do_cmd+0x39/ 0x550 [tipc]
    [  327.696018]  #3:  (tipc_net_lock){++.-..}, at: [<ffffffffa02be738>] tipc_disable_bearer+ 0x18/0x60 [tipc]
    [  327.696018]  #4:  (&(&b_ptr->lock)->rlock){+.-...}, at: [<ffffffffa02be58d>]             bearer_disable+0xdd/0x120 [tipc]
    [  327.696018]
    [  327.696018] stack backtrace:
    [  327.696018] CPU: 2 PID: 5825 Comm: tipc-config Tainted: G           O 3.11.0-rc3-wwd-    default #4
    [  327.696018] Hardware name: Bochs Bochs, BIOS Bochs 01/01/2007
    [  327.696018]  00000000ffffffff ffff880037fa77a8 ffffffff814d03dd 0000000000000000
    [  327.696018]  ffff880037fa7808 ffff880037fa77e8 ffffffff810b1c4f 0000000037fa77e8
    [  327.696018]  ffff880037fa7808 ffff880037e4db40 0000000000000000 ffff880037e4e318
    [  327.696018] Call Trace:
    [  327.696018]  [<ffffffff814d03dd>] dump_stack+0x4d/0xa0
    [  327.696018]  [<ffffffff810b1c4f>] print_circular_bug+0x10f/0x120
    [  327.696018]  [<ffffffff810b33fe>] check_prev_add+0x43e/0x4b0
    [  327.696018]  [<ffffffff810b3b4d>] validate_chain+0x6dd/0x870
    [  327.696018]  [<ffffffff81087a28>] ? sched_clock_cpu+0xd8/0x110
    [  327.696018]  [<ffffffff810b40bb>] __lock_acquire+0x3db/0x670
    [  327.696018]  [<ffffffff810b4453>] lock_acquire+0x103/0x130
    [  327.696018]  [<ffffffff8105be80>] ? try_to_del_timer_sync+0x70/0x70
    [  327.696018]  [<ffffffff8105bebd>] del_timer_sync+0x3d/0xd0
    [  327.696018]  [<ffffffff8105be80>] ? try_to_del_timer_sync+0x70/0x70
    [  327.696018]  [<ffffffffa02c5855>] tipc_disc_delete+0x15/0x30 [tipc]
    [  327.696018]  [<ffffffffa02be59f>] bearer_disable+0xef/0x120 [tipc]
    [  327.696018]  [<ffffffffa02be74f>] tipc_disable_bearer+0x2f/0x60 [tipc]
    [  327.696018]  [<ffffffffa02bfb32>] tipc_cfg_do_cmd+0x2e2/0x550 [tipc]
    [  327.696018]  [<ffffffff81218783>] ? security_capable+0x13/0x20
    [  327.696018]  [<ffffffffa02c8c79>] handle_cmd+0x49/0xe0 [tipc]
    [  327.696018]  [<ffffffff8143e898>] genl_family_rcv_msg+0x268/0x340
    [  327.696018]  [<ffffffff8143ed30>] genl_rcv_msg+0x70/0xd0
    [  327.696018]  [<ffffffff8143ecc0>] ? genl_lock+0x20/0x20
    [  327.696018]  [<ffffffff8143d4c9>] netlink_rcv_skb+0x89/0xb0
    [  327.696018]  [<ffffffff8143e608>] ? genl_rcv+0x18/0x40
    [  327.696018]  [<ffffffff8143e617>] genl_rcv+0x27/0x40
    [  327.696018]  [<ffffffff8143d21e>] netlink_unicast+0x15e/0x1b0
    [  327.696018]  [<ffffffff81289d7c>] ? memcpy_fromiovec+0x6c/0x90
    [  327.696018]  [<ffffffff8143ddcf>] netlink_sendmsg+0x22f/0x400
    [  327.696018]  [<ffffffff813f7836>] __sock_sendmsg+0x66/0x80
    [  327.696018]  [<ffffffff813f7957>] sock_aio_write+0x107/0x120
    [  327.696018]  [<ffffffff813fe29c>] ? release_sock+0x8c/0xa0
    [  327.696018]  [<ffffffff8117f76d>] do_sync_write+0x7d/0xc0
    [  327.696018]  [<ffffffff8117fa24>] ? rw_verify_area+0x54/0x100
    [  327.696018]  [<ffffffff8117fc56>] vfs_write+0x186/0x190
    [  327.696018]  [<ffffffff811803e0>] SyS_write+0x60/0xb0
    [  327.696018]  [<ffffffff814de852>] system_call_fastpath+0x16/0x1b
    
    -----------------------------------------------------------------------
    
    The problem is that the tipc_link_delete() will cancel the timer disc_timeout() when
    the b_ptr->lock is hold, but the disc_timeout() still call b_ptr->lock to finish the
    work, so the dead lock occurs.
    
    We should unlock the b_ptr->lock when del the disc_timeout().
    
    Remove link_timeout() still met the same problem, the patch:
    
    http://article.gmane.org/gmane.network.tipc.general/4380
    
    fix the problem, so no need to send patch for fix link_timeout() deadlock warming.
    
    Signed-off-by: Wang Weidong <wangweidong1@huawei.com>
    Signed-off-by: Ding Tianhong <dingtianhong@huawei.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 72a67a94bcba71a5fddd6b3596a20604d2b5dcd6
Merge: 83aaf3b39c4f 4bd8e7385961
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Aug 3 15:00:23 2013 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Don't ignore user initiated wireless regulatory settings on cards
        with custom regulatory domains, from Arik Nemtsov.
    
     2) Fix length check of bluetooth information responses, from Jaganath
        Kanakkassery.
    
     3) Fix misuse of PTR_ERR in btusb, from Adam Lee.
    
     4) Handle rfkill properly while iwlwifi devices are offline, from
        Emmanuel Grumbach.
    
     5) Fix r815x devices DMA'ing to stack buffers, from Hayes Wang.
    
     6) Kernel info leak in ATM packet scheduler, from Dan Carpenter.
    
     7) 8139cp doesn't check for DMA mapping errors, from Neil Horman.
    
     8) Fix bridge multicast code to not snoop when no querier exists,
        otherwise mutlicast traffic is lost.  From Linus Lüssing.
    
     9) Avoid soft lockups in fib6_run_gc(), from Michal Kubecek.
    
    10) Fix races in automatic address asignment on ipv6, which can result
        in incorrect lifetime assignments.  From Jiri Benc.
    
    11) Cure build bustage when CONFIG_NET_LL_RX_POLL is not set and rename
        it CONFIG_NET_RX_BUSY_POLL to eliminate the last reference to the
        original naming of this feature.  From Cong Wang.
    
    12) Fix crash in TIPC when server socket creation fails, from Ying Xue.
    
    13) macvlan_changelink() silently succeeds when it shouldn't, from
        Michael S Tsirkin.
    
    14) HTB packet scheduler can crash due to sign extension, fix from
        Stephen Hemminger.
    
    15) With the cable unplugged, r8169 prints out a message every 10
        seconds, make it netif_dbg() instead of netif_warn().  From Peter
        Wu.
    
    16) Fix memory leak in rtm_to_ifaddr(), from Daniel Borkmann.
    
    17) sis900 gets spurious TX queue timeouts due to mismanagement of link
        carrier state, from Denis Kirjanov.
    
    18) Validate somaxconn sysctl to make sure it fits inside of a u16.
        From Roman Gushchin.
    
    19) Fix MAC address filtering on qlcnic, from Shahed Shaikh.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (68 commits)
      qlcnic: Fix for flash update failure on 83xx adapter
      qlcnic: Fix link speed and duplex display for 83xx adapter
      qlcnic: Fix link speed display for 82xx adapter
      qlcnic: Fix external loopback test.
      qlcnic: Removed adapter series name from warning messages.
      qlcnic: Free up memory in error path.
      qlcnic: Fix ingress MAC learning
      qlcnic: Fix MAC address filter issue on 82xx adapter
      net: ethernet: davinci_emac: drop IRQF_DISABLED
      netlabel: use domain based selectors when address based selectors are not available
      net: check net.core.somaxconn sysctl values
      sis900: Fix the tx queue timeout issue
      net: rtm_to_ifaddr: free ifa if ifa_cacheinfo processing fails
      r8169: remove "PHY reset until link up" log spam
      net: ethernet: cpsw: drop IRQF_DISABLED
      htb: fix sign extension bug
      macvlan: handle set_promiscuity failures
      macvlan: better mode validation
      tipc: fix oops when creating server socket fails
      net: rename CONFIG_NET_LL_RX_POLL to CONFIG_NET_RX_BUSY_POLL
      ...

commit c756891a4e1c08c43780e17aca1d2b849ef31d1a
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Aug 1 08:29:18 2013 -0400

    tipc: fix oops when creating server socket fails
    
    When creation of TIPC internal server socket fails,
    we get an oops with the following dump:
    
    BUG: unable to handle kernel NULL pointer dereference at 0000000000000020
    IP: [<ffffffffa0011f49>] tipc_close_conn+0x59/0xb0 [tipc]
    PGD 13719067 PUD 12008067 PMD 0
    Oops: 0000 [#1] SMP DEBUG_PAGEALLOC
    Modules linked in: tipc(+)
    CPU: 4 PID: 4340 Comm: insmod Not tainted 3.10.0+ #1
    Hardware name: Bochs Bochs, BIOS Bochs 01/01/2007
    task: ffff880014360000 ti: ffff88001374c000 task.ti: ffff88001374c000
    RIP: 0010:[<ffffffffa0011f49>]  [<ffffffffa0011f49>] tipc_close_conn+0x59/0xb0 [tipc]
    RSP: 0018:ffff88001374dc98  EFLAGS: 00010292
    RAX: 0000000000000000 RBX: ffff880012ac09d8 RCX: 0000000000000000
    RDX: 0000000000000046 RSI: 0000000000000001 RDI: ffff880014360000
    RBP: ffff88001374dcb8 R08: 0000000000000001 R09: 0000000000000001
    R10: 0000000000000000 R11: 0000000000000000 R12: ffffffffa0016fa0
    R13: ffffffffa0017010 R14: ffffffffa0017010 R15: ffff880012ac09d8
    FS:  0000000000000000(0000) GS:ffff880016600000(0063) knlGS:00000000f76668d0
    CS:  0010 DS: 002b ES: 002b CR0: 000000008005003b
    CR2: 0000000000000020 CR3: 0000000012227000 CR4: 00000000000006e0
    Stack:
    ffff88001374dcb8 ffffffffa0016fa0 0000000000000000 0000000000000001
    ffff88001374dcf8 ffffffffa0012922 ffff88001374dce8 00000000ffffffea
    ffffffffa0017100 0000000000000000 ffff8800134241a8 ffffffffa0017150
    Call Trace:
    [<ffffffffa0012922>] tipc_server_stop+0xa2/0x1b0 [tipc]
    [<ffffffffa0009995>] tipc_subscr_stop+0x15/0x20 [tipc]
    [<ffffffffa00130f5>] tipc_core_stop+0x1d/0x33 [tipc]
    [<ffffffffa001f0d4>] tipc_init+0xd4/0xf8 [tipc]
    [<ffffffffa001f000>] ? 0xffffffffa001efff
    [<ffffffff8100023f>] do_one_initcall+0x3f/0x150
    [<ffffffff81082f4d>] ? __blocking_notifier_call_chain+0x7d/0xd0
    [<ffffffff810cc58a>] load_module+0x11aa/0x19c0
    [<ffffffff810c8d60>] ? show_initstate+0x50/0x50
    [<ffffffff8190311c>] ? retint_restore_args+0xe/0xe
    [<ffffffff810cce79>] SyS_init_module+0xd9/0x110
    [<ffffffff8190dc65>] sysenter_dispatch+0x7/0x1f
    Code: 6c 24 70 4c 89 ef e8 b7 04 8f e1 8b 73 04 4c 89 e7 e8 7c 9e 32 e1 41 83 ac 24
    b8 00 00 00 01 4c 89 ef e8 eb 0a 8f e1 48 8b 43 08 <4c> 8b 68 20 4d 8d a5 48 03 00
    00 4c 89 e7 e8 04 05 8f e1 4c 89
    RIP  [<ffffffffa0011f49>] tipc_close_conn+0x59/0xb0 [tipc]
    RSP <ffff88001374dc98>
    CR2: 0000000000000020
    ---[ end trace b02321f40e4269a3 ]---
    
    We have the following call chain:
    
    tipc_core_start()
        ret = tipc_subscr_start()
            ret = tipc_server_start(){
                      server->enabled = 1;
                      ret = tipc_open_listening_sock()
                  }
    
    I.e., the server->enabled flag is unconditionally set to 1, whatever
    the return value of tipc_open_listening_sock().
    
    This causes a crash when tipc_core_start() tries to clean up
    resources after a failed initialization:
    
        if (ret == failed)
            tipc_subscr_stop()
                tipc_server_stop(){
                    if (server->enabled)
                        tipc_close_conn(){
                            NULL reference of con->sock-sk
                            OOPS!
                    }
                }
    
    To avoid this, tipc_server_start() should only set server->enabled
    to 1 in case of a succesful socket creation. In case of failure, it
    should release all allocated resources before returning.
    
    Problem introduced in commit c5fa7b3cf3cb22e4ac60485fc2dc187fe012910f
    ("tipc: introduce new TIPC server infrastructure") in v3.11-rc1.
    Note that it won't be seen often; it takes a module load under memory
    constrained conditions in order to trigger the failure condition.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit be9c6d9169705504296bdb42ffec8f406691d99f
Merge: 03ce3ca4b02b 307f2fb95e9b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Jul 13 17:42:22 2013 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
     "Just a bunch of small fixes and tidy ups:
    
       1) Finish the "busy_poll" renames, from Eliezer Tamir.
    
       2) Fix RCU stalls in IFB driver, from Ding Tianhong.
    
       3) Linearize buffers properly in tun/macvtap zerocopy code.
    
       4) Don't crash on rmmod in vxlan, from Pravin B Shelar.
    
       5) Spinlock used before init in alx driver, from Maarten Lankhorst.
    
       6) A sparse warning fix in bnx2x broke TSO checksums, fix from Dmitry
          Kravkov.
    
       7) Dummy and ifb driver load failure paths can oops, fixes from Tan
          Xiaojun and Ding Tianhong.
    
       8) Correct MTU calculations in IP tunnels, from Alexander Duyck.
    
       9) Account all TCP retransmits in SNMP stats properly, from Yuchung
          Cheng.
    
      10) atl1e and via-rhine do not handle DMA mapping failures properly,
          from Neil Horman.
    
      11) Various equal-cost multipath route fixes in ipv6 from Hannes
          Frederic Sowa"
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (36 commits)
      ipv6: only static routes qualify for equal cost multipathing
      via-rhine: fix dma mapping errors
      atl1e: fix dma mapping warnings
      tcp: account all retransmit failures
      usb/net/r815x: fix cast to restricted __le32
      usb/net/r8152: fix integer overflow in expression
      net: access page->private by using page_private
      net: strict_strtoul is obsolete, use kstrtoul instead
      drivers/net/ieee802154: don't use devm_pinctrl_get_select_default() in probe
      drivers/net/ethernet/cadence: don't use devm_pinctrl_get_select_default() in probe
      drivers/net/can/c_can: don't use devm_pinctrl_get_select_default() in probe
      net/usb: add relative mii functions for r815x
      net/tipc: use %*phC to dump small buffers in hex form
      qlcnic: Adding Maintainers.
      gre: Fix MTU sizing check for gretap tunnels
      pkt_sched: sch_qfq: remove forward declaration of qfq_update_agg_ts
      pkt_sched: sch_qfq: improve efficiency of make_eligible
      gso: Update tunnel segmentation to support Tx checksum offload
      inet: fix spacing in assignment
      ifb: fix oops when loading the ifb failed
      ...

commit d77e41e12744e53ca7f98f920350998b5f00c93a
Author: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
Date:   Wed Jul 10 17:30:34 2013 +0300

    net/tipc: use %*phC to dump small buffers in hex form
    
    Instead of passing each byte by stack let's use nice specifier for that.
    
    Signed-off-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c7b67aef0fa5f665ca47f45d254e806e919d01ac
Merge: dafcc4380dee 2537af9dcabb
Author: David S. Miller <davem@davemloft.net>
Date:   Mon Jun 17 15:53:09 2013 -0700

    Merge branch 'tipc'
    
    Paul Gortmaker says:
    
    ====================
    This is a rework of the content sent earlier[1], with the following changes:
    
            -drop the Kconfig --> modparam conversion patch; this was
             requested to be replaced[2] with a dynamic port quantity resizing.
             Ying and Erik were discussing how best to achieve this, and then
             vacation schedules got in the way, so implementing that will
             come (hopefully) in the next round.
    
            -rework the sk_rcvbuf patch to allow memory resizing via sysctl
             as per what Ying and Neil discussed[3]
    
            -add 4 more seemingly straigtforward and relatively small changes
             from Ying (the last 4 in the series).
    
            -add cosmetic UAPI comment update patch from Ying.
    
    That said, the largest change is still the one where we make use of
    the fact that linux supports kernel threads and do the server like
    operations within kernel threads.  As Jon says:
    
       We remove the last remnants of the TIPC native API, to make it
       possible to simplify locking policy and solve a problem with lost
       topology events.
    
       First, we introduce a socket-based alternative to the native API.
    
       Second, we convert the two remaining users of the native API, the
       TIPC internal topology server and the configuarion server, to use the
       new API.
    
       Third, we remove the remaining code pertaining to the native API.
    
    I have re-tested this collection of commits between 32 and 64 bit x86
    machines using the standard tipc test suite, and build tested for ppc.
    
    [1] http://patchwork.ozlabs.org/patch/247687/
    [2] http://patchwork.ozlabs.org/patch/247680/
    [3] http://patchwork.ozlabs.org/patch/247688/
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2537af9dcabbdd6c93c041a955d3a9ae42c0c008
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jun 17 10:54:51 2013 -0400

    tipc: remove dev_base_lock use from enable_bearer
    
    Convert enable_bearer() to RCU locking with dev_get_by_name().
    
    Based on a similar changeset in commit 840a185d ["aoe: remove
    dev_base_lock use from aoecmd_cfg_pkts()"] -- quoting that:
    
      "dev_base_lock is the legacy way to lock the device list,
       and is planned to disappear. (writers hold RTNL, readers
       hold RCU lock)"
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 126c0524648631a0f6fba4d016586b236209fe6f
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jun 17 10:54:50 2013 -0400

    tipc: fix wrong return value for link_send_sections_long routine
    
    When skb buffer cannot be allocated in link_send_sections_long(),
    -ENOMEM error code instead of -EFAULT should be returned to its
    caller.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7410f967ba9bdc14b1e336e5d235929ed878cbfc
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jun 17 10:54:49 2013 -0400

    tipc: make tipc_link_send_sections_fast exit earlier
    
    Once message build request function returns invalid code, the
    process of sending message cannot continue. So in case of message
    build failure, tipc_link_send_sections_fast() should return
    immediately.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 796c75d0d3ef13cd1df00779abb8b27edb630504
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jun 17 10:54:48 2013 -0400

    tipc: enhance priority of link protocol packet
    
    pfifo_fast is set as default traffic class queueing discipline. This
    queue has three so called "bands". Within each band, FIFO rules apply.
    However, as long as there are packets waiting in band 0, band 1 won't
    be processed.
    
    Now all kind of TIPC type packet priorities are never set, that is,
    their priorities are 0, so they are mapped to band 1 of pfifo_fast
    qdisc. But, especially during link congestion, if link protocol packet
    can be sent out as earlier as possible than other type of packets so
    that protocol packet can arrive at peer endpoint in time, the peer
    will timely reset its link timeout timer to keep the link alive.
    So enhancing the priority of link protocol packets can meet the
    specific demand to avoid unnecessary link reset due to a transient
    link congestion.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ae8509c420122866344bde1241e31858d0aa2fbc
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Mon Jun 17 10:54:47 2013 -0400

    tipc: cosmetic realignment of function arguments
    
    No runtime code changes here.  Just a realign of the function
    arguments to start where the 1st one was, and fit as many args
    as can be put in an 80 char line.
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c0fee8aca7206264d5e3dcc4e60aaf86501f4ea1
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jun 17 10:54:46 2013 -0400

    tipc: save sock structure pointer instead of void pointer to tipc_port
    
    Directly save sock structure pointer instead of void pointer to avoid
    unnecessary cast conversions.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 28e5297281ab85d636aa814a9b65cfb99375d092
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jun 17 10:54:45 2013 -0400

    tipc: convert config_lock from spinlock to mutex
    
    As the configuration server is now running under process context,
    it's unnecessary for us to have a spinlock serializing the TIPC
    configuration process. Instead, we replace it with a mutex lock,
    which gives us more freedom. For instance, we can now call
    pre-emptable functions within the protected area.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3c5db8e4eca36e4f312b49bba99f4c1f6ce0563a
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jun 17 10:54:44 2013 -0400

    tipc: rename tipc_createport_raw to tipc_createport
    
    After the removal of the native API, there is now only one way to
    to create a TIPC port instance -- the function tipc_createport_raw().
    We make it more readable by renaming it to tipc_createport().
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f1733d7580ff94deb8ea071a293c23939ae0d450
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jun 17 10:54:43 2013 -0400

    tipc: remove user_port instance from tipc_port structure
    
    After the native API has been completely removed, the 'user_port'
    field in struct tipc_port becomes unused, and can be removed.
    As a consequence, the "usrmem" argument in tipc_msg_build() is no
    longer needed, and so we remove that one too.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 198d73b82bf78739f8f11cf7ff567a2e0da1dbef
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jun 17 10:54:42 2013 -0400

    tipc: delete code orphaned by new server infrastructure
    
    Having completed the conversion of the topology server and
    configuration server to use the new server infrastructure,
    the following functions become unused, and can be deleted:
    
       - tipc_createport()
       - port_wakeup_sh()
       - port_dispatcher()
       - port_dispatcher_sigh()
       - tipc_send_buf_fast()
       - tipc_send_buf2port
    
    Additionally, the following variables become orphaned,
    and can be deleted:
    
       - tipc_msg_err_event
       - tipc_named_msg_err_event
       - tipc_conn_shutdown_event
       - tipc_msg_event
       - tipc_named_msg_event
       - tipc_conn_msg_event
       - tipc_continue_event
       - msg_queue_head
       - msg_queue_tail
       - queue_lock
    
    Deletion is done here in a separate commit in order to allow
    the actual conversion changes to be more easily viewed.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7d0ab17b74330e39a68ba33099ccda27f794f519
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jun 17 10:54:41 2013 -0400

    tipc: convert configuration server to use new server facility
    
    As the new socket-based TIPC server infrastructure has been
    introduced, we can now convert the configuration server to use
    it.  Then we can take future steps to simplify the configuration
    server locking policy.
    
    Some minor reordering of initialization is done, due to the
    dependency on having tipc_socket_init completed.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 13a2e89873506d64d7e52f17b571da371a3e25a4
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jun 17 10:54:40 2013 -0400

    tipc: convert topology server to use new server facility
    
    As the new TIPC server infrastructure has been introduced, we can
    now convert the TIPC topology server to it.  We get two benefits
    from doing this:
    
    1) It simplifies the topology server locking policy.  In the
    original locking policy, we placed one spin lock pointer in the
    tipc_subscriber structure to reuse the lock of the subscriber's
    server port, controlling access to members of tipc_subscriber
    instance.  That is, we only used one lock to ensure both
    tipc_port and tipc_subscriber members were safely accessed.
    
    Now we introduce another spin lock for tipc_subscriber structure
    only protecting themselves, to get a finer granularity locking
    policy.  Moreover, the change will allow us to make the topology
    server code more readable and maintainable.
    
    2) It fixes a bug where sent subscription events may be lost when
    the topology port is congested.  Using the new service, the
    topology server now queues sent events into an outgoing buffer,
    and then wakes up a sender process which has been blocked in
    workqueue context.  The process will keep picking events from the
    buffer and send them to their respective subscribers, using the
    kernel socket interface, until the buffer is empty. Even if the
    socket is congested during transmission there is no risk that
    events may be dropped, since the sender process may block when
    needed.
    
    Some minor reordering of initialization is done, since we now
    have a scenario where the topology server must be started after
    socket initialization has taken place, as the former depends
    on the latter.  And overall, we see a simplification of the
    TIPC subscriber code in making this changeover.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c5fa7b3cf3cb22e4ac60485fc2dc187fe012910f
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jun 17 10:54:39 2013 -0400

    tipc: introduce new TIPC server infrastructure
    
    TIPC has two internal servers, one providing a subscription
    service for topology events, and another providing the
    configuration interface. These servers have previously been running
    in BH context, accessing the TIPC-port (aka native) API directly.
    Apart from these servers, even the TIPC socket implementation is
    partially built on this API.
    
    As this API may simultaneously be called via different paths and in
    different contexts, a complex and costly lock policiy is required
    in order to protect TIPC internal resources.
    
    To eliminate the need for this complex lock policiy, we introduce
    a new, generic service API that uses kernel sockets for message
    passing instead of the native API. Once the toplogy and configuration
    servers are converted to use this new service, all code pertaining
    to the native API can be removed. This entails a significant
    reduction in code amount and complexity, and opens up for a complete
    rework of the locking policy in TIPC.
    
    The new service also solves another problem:
    
    As the current topology server works in BH context, it cannot easily
    be blocked when sending of events fails due to congestion. In such
    cases events may have to be silently dropped, something that is
    unacceptable. Therefore, the new service keeps a dedicated outbound
    queue receiving messages from BH context. Once messages are
    inserted into this queue, we will immediately schedule a work from a
    special workqueue. This way, messages/events from the topology server
    are in reality sent in process context, and the server can block
    if necessary.
    
    Analogously, there is a new workqueue for receiving messages. Once a
    notification about an arriving message is received in BH context, we
    schedule a work from the receive workqueue to do the job of
    receiving the message in process context.
    
    As both sending and receive messages are now finished in processes,
    subscribed events cannot be dropped any more.
    
    As of this commit, this new server infrastructure is built, but
    not actually yet called by the existing TIPC code, but since the
    conversion changes required in order to use it are significant,
    the addition is kept here as a separate commit.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5d21cb70db0122507cd18f58b4a9112583c1e075
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Mon Jun 17 10:54:38 2013 -0400

    tipc: allow implicit connect for stream sockets
    
    TIPC's implied connect feature, aka piggyback connect, allows
    applications to save one syscall and all SYN/SYN-ACK signalling
    overhead when setting up a connection.  Until now, this has only
    been supported for SEQPACKET sockets.  Here, we make it possible
    to use this feature even with stream sockets.
    
    At the connecting side, the connection is completed when the
    first data message arrives from the accepting peer.  This means
    that we must allow the connecting user to call blocking recv()
    before the socket has reached state SS_CONNECTED.  So we must must
    relax the state machine check at recv_stream(), and allow the
    recv() call even if socket is in state SS_CONNECTING.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit cc79dd1ba9c1021c2ac6ae200a65ec38ee8db351
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jun 17 10:54:37 2013 -0400

    tipc: change socket buffer overflow control to respect sk_rcvbuf
    
    As per feedback from the netdev community, we change the buffer
    overflow protection algorithm in receiving sockets so that it
    always respects the nominal upper limit set in sk_rcvbuf.
    
    Instead of scaling up from a small sk_rcvbuf value, which leads to
    violation of the configured sk_rcvbuf limit, we now calculate the
    weighted per-message limit by scaling down from a much bigger value,
    still in the same field, according to the importance priority of the
    received message.
    
    To allow for administrative tunability of the socket receive buffer
    size, we create a tipc_rmem sysctl variable to allow the user to
    configure an even bigger value via sysctl command.  It is a size of
    three (min/default/max) to be consistent with things like tcp_rmem.
    
    By default, the value initialized in tipc_rmem[1] is equal to the
    receive socket size needed by a TIPC_CRITICAL_IMPORTANCE message.
    This value is also set as the default value of sk_rcvbuf.
    
    Originally-by: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Neil Horman <nhorman@tuxdriver.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    [Ying: added sysctl variation to Jon's original patch]
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    [PG: don't compile sysctl.c if not config'd; add Documentation]
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8941bbcd572a8860ad03c76e2f3d1dafa820b842
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Jun 17 10:54:36 2013 -0400

    tipc: update code comments to reflect new uapi header path
    
    Files tipc.h and tipc_config.h were moved to uapi directory, but
    the corresponding comments were not updated at the same time.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0736a7172906aa0356f1ce47363c429c60214fec
Author: Mathias Krause <minipli@googlemail.com>
Date:   Sun Apr 7 01:52:00 2013 +0000

    tipc: fix info leaks via msg_name in recv_msg/recv_stream
    
    commit 60085c3d009b0df252547adb336d1ccca5ce52ec upstream.
    
    The code in set_orig_addr() does not initialize all of the members of
    struct sockaddr_tipc when filling the sockaddr info -- namely the union
    is only partly filled. This will make recv_msg() and recv_stream() --
    the only users of this function -- leak kernel stack memory as the
    msg_name member is a local variable in net/socket.c.
    
    Additionally to that both recv_msg() and recv_stream() fail to update
    the msg_namelen member to 0 while otherwise returning with 0, i.e.
    "success". This is the case for, e.g., non-blocking sockets. This will
    lead to a 128 byte kernel stack leak in net/socket.c.
    
    Fix the first issue by initializing the memory of the union with
    memset(0). Fix the second one by setting msg_namelen to 0 early as it
    will be updated later if we're going to fill the msg_name member.
    
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Mathias Krause <minipli@googlemail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    [dannf: backported to Debian's 2.6.32]
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 1ae38900523eaf11a77c73827c096d7e7eade3a4
Author: Mathias Krause <minipli@googlemail.com>
Date:   Sun Apr 7 01:52:00 2013 +0000

    tipc: fix info leaks via msg_name in  recv_msg/recv_stream
    
    [ Upstream commit 60085c3d009b0df252547adb336d1ccca5ce52ec ]
    
    The code in set_orig_addr() does not initialize all of the members of
    struct sockaddr_tipc when filling the sockaddr info -- namely the union
    is only partly filled. This will make recv_msg() and recv_stream() --
    the only users of this function -- leak kernel stack memory as the
    msg_name member is a local variable in net/socket.c.
    
    Additionally to that both recv_msg() and recv_stream() fail to update
    the msg_namelen member to 0 while otherwise returning with 0, i.e.
    "success". This is the case for, e.g., non-blocking sockets. This will
    lead to a 128 byte kernel stack leak in net/socket.c.
    
    Fix the first issue by initializing the memory of the union with
    memset(0). Fix the second one by setting msg_namelen to 0 early as it
    will be updated later if we're going to fill the msg_name member.
    
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Mathias Krause <minipli@googlemail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 51a26ae7a14b85c99c9be470c2d28eeeba0f26a3
Merge: 2b69703fea18 6bf15191f666
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon May 6 15:51:10 2013 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
     "Just a small pile of fixes"
    
     1) Fix race conditions in IP fragmentation LRU list handling, from
        Konstantin Khlebnikov.
    
     2) vfree() is no longer verboten in interrupts, so deferring is
        pointless, from Al Viro.
    
     3) Conversion from mutex to semaphore in netpoll left trylock test
        inverted, caught by Dan Carpenter.
    
     4) 3c59x uses wrong base address when releasing regions, from Sergei
        Shtylyov.
    
     5) Bounds checking in TIPC from Dan Carpenter.
    
     6) Fastopen cookies should not be expired as aggressively as other TCP
        metrics.  From Eric Dumazet.
    
     7) Fix retrieval of MAC address in ibmveth, from Ben Herrenschmidt.
    
     8) Don't use "u16" in virtio user headers, from Stephen Hemminger
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net:
      tipc: potential divide by zero in tipc_link_recv_fragment()
      tipc: add a bounds check in link_recv_changeover_msg()
      net/usb: new driver for RTL8152
      3c59x: fix freeing nonexistent resource on driver unload
      netpoll: inverted down_trylock() test
      rps_dev_flow_table_release(): no need to delay vfree()
      fib_trie: no need to delay vfree()
      net: frag, fix race conditions in LRU list maintenance
      tcp: do not expire TCP fastopen cookies
      net/eth/ibmveth: Fixup retrieval of MAC address
      virtio: don't expose u16 in userspace api

commit 6bf15191f666c5965d212561d7a5c7b78b808dfa
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon May 6 09:31:17 2013 +0000

    tipc: potential divide by zero in tipc_link_recv_fragment()
    
    The worry here is that fragm_sz could be zero since it comes from
    skb->data.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit cb4b102f0ab29fcbaf945c6b1f85ef006cdb8edc
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon May 6 08:28:41 2013 +0000

    tipc: add a bounds check in link_recv_changeover_msg()
    
    The bearer_id here comes from skb->data and it can be a number from 0 to
    7.  The problem is that the ->links[] array has only 2 elements so I
    have added a range check.
    
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1aaf6d3d3d1e95f4be07e32dd84aa1c93855fbbd
Merge: f589e9bfcfc4 777c2300865c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat May 4 20:10:04 2013 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Several routines do not use netdev_features_t to hold such bitmasks,
        fixes from Patrick McHardy and Bjørn Mork.
    
     2) Update cpsw IRQ software state and the actual HW irq enabling in the
        correct order.  From Mugunthan V N.
    
     3) When sending tipc packets to multiple bearers, we have to make
        copies of the SKB rather than just giving the original SKB directly.
        Fix from Gerlando Falauto.
    
     4) Fix race with bridging topology change timer, from Stephen
        Hemminger.
    
     5) Fix TCPv6 segmentation handling in GRE and VXLAN, from Pravin B
        Shelar.
    
     6) Endian bug in USB pegasus driver, from Dan Carpenter.
    
     7) Fix crashes on MTU reduction in USB asix driver, from Holger
        Eitzenberger.
    
     8) Don't allow the kernel to BUG() just because the user puts some crap
        in an AF_PACKET mmap() ring descriptor.  Fix from Daniel Borkmann.
    
     9) Don't use variable sized arrays on the stack in xen-netback, from
        Wei Liu.
    
    10) Fix stats reporting and an unbalanced napi_disable() in be2net
        driver.  From Somnath Kotur and Ajit Khaparde.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (25 commits)
      cxgb4: fix error recovery when t4_fw_hello returns a positive value
      sky2: Fix crash on receiving VLAN frames
      packet: tpacket_v3: do not trigger bug() on wrong header status
      asix: fix BUG in receive path when lowering MTU
      net: qmi_wwan: Add Telewell TW-LTE 4G
      usbnet: pegasus: endian bug in write_mii_word()
      vxlan: Fix TCPv6 segmentation.
      gre: Fix GREv4 TCPv6 segmentation.
      bridge: fix race with topology change timer
      tipc: pskb_copy() buffers when sending on more than one bearer
      tipc: tipc_bcbearer_send(): simplify bearer selection
      tipc: cosmetic: clean up comments and break a long line
      drivers: net: cpsw: irq not disabled in cpsw isr in particular sequence
      xen-netback: better names for thresholds
      xen-netback: avoid allocating variable size array on stack
      xen-netback: remove redundent parameter in netbk_count_requests
      be2net: Fix to fail probe if MSI-X enable fails for a VF
      be2net: avoid napi_disable() when it has not been enabled
      be2net: Fix firmware download for Lancer
      be2net: Fix to receive Multicast Packets when Promiscuous mode is enabled on certain devices
      ...

commit 488fc9af8267d0cd9036bc9db9f5dbbfde6de208
Author: Gerlando Falauto <gerlando.falauto@keymile.com>
Date:   Wed May 1 12:04:46 2013 +0000

    tipc: pskb_copy() buffers when sending on more than one bearer
    
    When sending packets, TIPC bearers use skb_clone() before writing their
    hardware header. This will however NOT copy the data buffer.
    So when the same packet is sent over multiple bearers (to reach multiple
    nodes), the same socket buffer data will be treated by multiple
    tipc_media drivers which will write their own hardware header through
    dev_hard_header().
    Most of the time this is not a problem, because by the time the
    packet is processed by the second media, it has already been sent over
    the first one. However, when the first transmission is delayed (e.g.
    because of insufficient bandwidth or through a shaper), the next bearer
    will overwrite the hardware header, resulting in the packet being sent:
    a) with the wrong source address, when bearers of the same type,
    e.g. ethernet, are involved
    b) with a completely corrupt header, or even dropped, when bearers of
    different types are involved.
    
    So when the same socket buffer is to be sent multiple times, send a
    pskb_copy() instead (from the second instance on), and release it
    afterwards (the bearer will skb_clone() it anyway).
    
    Signed-off-by: Gerlando Falauto <gerlando.falauto@keymile.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 77861d9c00900c0105b9d66ecf9fa612a43f8df5
Author: Gerlando Falauto <gerlando.falauto@keymile.com>
Date:   Wed May 1 12:04:45 2013 +0000

    tipc: tipc_bcbearer_send(): simplify bearer selection
    
    Signed-off-by: Gerlando Falauto <gerlando.falauto@keymile.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e616071094c214a274fb66d0b297f8b25a1a34d7
Author: Gerlando Falauto <gerlando.falauto@keymile.com>
Date:   Wed May 1 12:04:44 2013 +0000

    tipc: cosmetic: clean up comments and break a long line
    
    Signed-off-by: Gerlando Falauto <gerlando.falauto@keymile.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7c824b03b007b5fd594a8dd91858325c2daa6f4b
Author: Mathias Krause <minipli@googlemail.com>
Date:   Sun Apr 7 01:52:00 2013 +0000

    tipc: fix info leaks via msg_name in recv_msg/recv_stream
    
    [ Upstream commit 60085c3d009b0df252547adb336d1ccca5ce52ec ]
    
    The code in set_orig_addr() does not initialize all of the members of
    struct sockaddr_tipc when filling the sockaddr info -- namely the union
    is only partly filled. This will make recv_msg() and recv_stream() --
    the only users of this function -- leak kernel stack memory as the
    msg_name member is a local variable in net/socket.c.
    
    Additionally to that both recv_msg() and recv_stream() fail to update
    the msg_namelen member to 0 while otherwise returning with 0, i.e.
    "success". This is the case for, e.g., non-blocking sockets. This will
    lead to a 128 byte kernel stack leak in net/socket.c.
    
    Fix the first issue by initializing the memory of the union with
    memset(0). Fix the second one by setting msg_namelen to 0 early as it
    will be updated later if we're going to fill the msg_name member.
    
    Signed-off-by: Mathias Krause <minipli@googlemail.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e979f5408b145c0d2b0bf6622952c09a43bcd23a
Author: Mathias Krause <minipli@googlemail.com>
Date:   Sun Apr 7 01:52:00 2013 +0000

    tipc: fix info leaks via msg_name in recv_msg/recv_stream
    
    [ Upstream commit 60085c3d009b0df252547adb336d1ccca5ce52ec ]
    
    The code in set_orig_addr() does not initialize all of the members of
    struct sockaddr_tipc when filling the sockaddr info -- namely the union
    is only partly filled. This will make recv_msg() and recv_stream() --
    the only users of this function -- leak kernel stack memory as the
    msg_name member is a local variable in net/socket.c.
    
    Additionally to that both recv_msg() and recv_stream() fail to update
    the msg_namelen member to 0 while otherwise returning with 0, i.e.
    "success". This is the case for, e.g., non-blocking sockets. This will
    lead to a 128 byte kernel stack leak in net/socket.c.
    
    Fix the first issue by initializing the memory of the union with
    memset(0). Fix the second one by setting msg_namelen to 0 early as it
    will be updated later if we're going to fill the msg_name member.
    
    Signed-off-by: Mathias Krause <minipli@googlemail.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dc85f620e827440f520551b2ff6222bc92b00fa9
Author: Mathias Krause <minipli@googlemail.com>
Date:   Sun Apr 7 01:52:00 2013 +0000

    tipc: fix info leaks via msg_name in recv_msg/recv_stream
    
    [ Upstream commit 60085c3d009b0df252547adb336d1ccca5ce52ec ]
    
    The code in set_orig_addr() does not initialize all of the members of
    struct sockaddr_tipc when filling the sockaddr info -- namely the union
    is only partly filled. This will make recv_msg() and recv_stream() --
    the only users of this function -- leak kernel stack memory as the
    msg_name member is a local variable in net/socket.c.
    
    Additionally to that both recv_msg() and recv_stream() fail to update
    the msg_namelen member to 0 while otherwise returning with 0, i.e.
    "success". This is the case for, e.g., non-blocking sockets. This will
    lead to a 128 byte kernel stack leak in net/socket.c.
    
    Fix the first issue by initializing the memory of the union with
    memset(0). Fix the second one by setting msg_namelen to 0 early as it
    will be updated later if we're going to fill the msg_name member.
    
    Signed-off-by: Mathias Krause <minipli@googlemail.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2551c405e886c4ce4732bedaa8559a110a6f373f
Merge: a6bda459fafd dc850b0e68ad
Author: David S. Miller <davem@davemloft.net>
Date:   Wed Apr 17 14:18:43 2013 -0400

    Merge branch 'tipc-ipoib'
    
    Patrick McHardy says:
    
    ====================
    The following patchset adds support for running TIPC over InfiniBand.
    The patchset consists of three parts (+ a minor fix for the ethernet media
    type):
    
    - Preparation: removal of an the unused str2addr callback and move of the
      bcast_addr from struct tipc_media to struct tipc_bearer. This is necessary
      because InfiniBand doesn't have a fixed broadcast address like ethernet,
      so it needs to be initialized with the device's broadcast address when
      the bearer is enabled
    
    - Introduction of a TIPC InfiniBand media type. A new media type is needed
      to deal with the different address sizes
    
    - Support for ETH_P_TIPC in IPoIB
    
    Since the last posting I've addressed all feedback I received and rebased
    to the current net-next tree.
    
    I consider these patches ready for merging. Since they mainly affect TIPC
    code, I'd propose to have them either go through the TIPC tree or through
    Dave directly (not sure how TIPC patches are managed).
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a29a194a15df9840b24c6c383a9a9a1236979db5
Author: Patrick McHardy <kaber@trash.net>
Date:   Wed Apr 17 06:18:28 2013 +0000

    tipc: add InfiniBand media type
    
    Add InfiniBand media type based on the ethernet media type.
    
    The only real difference is that in case of InfiniBand, we need the entire
    20 bytes of space reserved for media addresses, so the TIPC media type ID is
    not explicitly stored in the packet payload.
    
    Sample output of tipc-config:
    
    # tipc-config -v -addr -netid -nt=all -p -m -b -n -ls
    
    node address: <10.1.4>
    current network id: 4711
    Type       Lower      Upper      Port Identity              Publication Scope
    0          167776257  167776257  <10.1.1:1855512577>        1855512578  cluster
               167776260  167776260  <10.1.4:1216454657>        1216454658  zone
    1          1          1          <10.1.4:1216479235>        1216479236  node
    Ports:
    1216479235: bound to {1,1}
    1216454657: bound to {0,167776260}
    Media:
    eth
    ib
    Bearers:
    ib:ib0
    Nodes known:
    <10.1.1>: up
    Link <broadcast-link>
      Window:20 packets
      RX packets:0 fragments:0/0 bundles:0/0
      TX packets:0 fragments:0/0 bundles:0/0
      RX naks:0 defs:0 dups:0
      TX naks:0 acks:0 dups:0
      Congestion bearer:0 link:0  Send queue max:0 avg:0
    
    Link <10.1.4:ib0-10.1.1:ib0>
      ACTIVE  MTU:2044  Priority:10  Tolerance:1500 ms  Window:50 packets
      RX packets:80 fragments:0/0 bundles:0/0
      TX packets:40 fragments:0/0 bundles:0/0
      TX profile sample:22 packets  average:54 octets
      0-64:100% -256:0% -1024:0% -4096:0% -16384:0% -32768:0% -66000:0%
      RX states:410 probes:213 naks:0 defs:0 dups:0
      TX states:410 probes:197 naks:0 acks:0 dups:0
      Congestion bearer:0 link:0  Send queue max:1 avg:0
    
    Signed-off-by: Patrick McHardy <kaber@trash.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 76f5c6f359a18abd3359ad8523cb23fbf58602b7
Author: Patrick McHardy <kaber@trash.net>
Date:   Wed Apr 17 06:18:27 2013 +0000

    tipc: set skb->protocol in eth_media packet transmission
    
    The skb->protocol field is used by packet classifiers and for AF_PACKET
    cooked format, TIPC needs to set it properly.
    
    Fixes packet classification and ethertype of 0x0000 in cooked captures:
    
    Out 20:c9:d0:43:12:d9 ethertype Unknown (0x0000), length 56:
            0x0000:  5b50 0028 0000 30d4 0100 1000 0100 1001  [P.(..0.........
            0x0010:  0000 03e8 0000 0001 20c9 d043 12d9 0000  ...........C....
            0x0020:  0000 0000 0000 0000                      ........
    
    Signed-off-by: Patrick McHardy <kaber@trash.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8aeb89f214cdb4c3d9e43213d52d4c5b0fb93bbb
Author: Patrick McHardy <kaber@trash.net>
Date:   Wed Apr 17 06:18:26 2013 +0000

    tipc: move bcast_addr from struct tipc_media to struct tipc_bearer
    
    Some network protocols, like InfiniBand, don't have a fixed broadcast
    address but one that depends on the configuration. Move the bcast_addr
    to struct tipc_bearer and initialize it with the broadcast address of
    the network device when the bearer is enabled.
    
    Signed-off-by: Patrick McHardy <kaber@trash.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ccc4ba2ea23e4507c174620405c5de7bee328f99
Author: Patrick McHardy <kaber@trash.net>
Date:   Wed Apr 17 06:18:25 2013 +0000

    tipc: remove unused str2addr media callback
    
    Signed-off-by: Patrick McHardy <kaber@trash.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 60085c3d009b0df252547adb336d1ccca5ce52ec
Author: Mathias Krause <minipli@googlemail.com>
Date:   Sun Apr 7 01:52:00 2013 +0000

    tipc: fix info leaks via msg_name in recv_msg/recv_stream
    
    The code in set_orig_addr() does not initialize all of the members of
    struct sockaddr_tipc when filling the sockaddr info -- namely the union
    is only partly filled. This will make recv_msg() and recv_stream() --
    the only users of this function -- leak kernel stack memory as the
    msg_name member is a local variable in net/socket.c.
    
    Additionally to that both recv_msg() and recv_stream() fail to update
    the msg_namelen member to 0 while otherwise returning with 0, i.e.
    "success". This is the case for, e.g., non-blocking sockets. This will
    lead to a 128 byte kernel stack leak in net/socket.c.
    
    Fix the first issue by initializing the memory of the union with
    memset(0). Fix the second one by setting msg_namelen to 0 early as it
    will be updated later if we're going to fill the msg_name member.
    
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Mathias Krause <minipli@googlemail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c8c5b287152bfd10c27390d36df2a8131cf906f5
Merge: efd9450e7e36 97f8b87e9108
Author: David S. Miller <davem@davemloft.net>
Date:   Mon Feb 18 12:22:17 2013 -0500

    Merge branch 'tipc_net-next' of git://git.kernel.org/pub/scm/linux/kernel/git/paulg/linux
    
    Paul Gortmaker says:
    
    ====================
    Two relatively small cleanup patches here, plus a reimplementation
    of the patch Neil had questions about[1] in the last development
    cycle.
    
    Tested on today's net-next, between 32 and 64 bit x86 machines using
    the server/client in tipc-utils, as usual.
    
    [1] http://patchwork.ozlabs.org/patch/204507/
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 97f8b87e9108485a0b7070645662253561304458
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Jan 31 21:51:47 2013 +0100

    tipc: remove redundant checking for the number of iovecs in a send request
    
    As the number of iovecs in a send request is already limited within
    UIO_MAXIOV(i.e. 1024) in __sys_sendmsg(), it's unnecessary to check it
    again in TIPC stack.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit aba79f332f46ca8529f3e62a9fc2926c8fe75e44
Author: Ying Xue <ying.xue@windriver.com>
Date:   Sun Jan 20 23:30:09 2013 +0100

    tipc: byte-based overload control on socket receive queue
    
    Change overload control to be purely byte-based, using
    sk->sk_rmem_alloc as byte counter, and compare it to a calculated
    upper limit for the socket receive queue.
    
    For all connection messages, irrespective of message importance,
    the overload limit is set to a constant value (i.e, 67MB). This
    limit should normally never be reached because of the lower
    limit used by the flow control algorithm, and is there only
    as a last resort in case a faulty peer doesn't respect the send
    window limit.
    
    For datagram messages, message importance is taken into account
    when calculating the overload limit. The calculation is based
    on sk->sk_rcvbuf, and is hence configurable via the socket option
    SO_RCVBUF.
    
    Cc: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 57467e56293796f780e91a24600a732516f534ac
Author: Ying Xue <ying.xue@windriver.com>
Date:   Sun Jan 20 23:30:08 2013 +0100

    tipc: eliminate duplicated discard_rx_queue routine
    
    The tipc function discard_rx_queue() is just a duplicated
    implementation of __skb_queue_purge().  Remove the former
    and directly invoke __skb_queue_purge().
    
    In doing so, the underscores convey to the code reader, more
    information about the current locking state that is assumed.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit c5c73dca596894c47760e4e955877b731ffabf57
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Thu Feb 14 14:43:33 2013 +0000

    tipc: fix missing spinlock init in broadcast code
    
    After commit 3c294cb3 "tipc: remove the bearer congestion mechanism",
    we try to grab the broadcast bearer lock when sending multicast
    messages over the broadcast link. This will cause an oops because
    the lock is never initialized. This is an old bug, but the lock
    was never actually used before commit 3c294cb3, so that why it was
    not visible until now.  The oops will look something like:
    
            BUG: spinlock bad magic on CPU#2, daemon/147
            lock: bcast_bearer+0x48/0xffffffffffffd19a [tipc],
            .magic: 00000000, .owner: <none>/-1, .owner_cpu: 0
            Pid: 147, comm: daemon Not tainted 3.8.0-rc3+ #206
            Call Trace:
            spin_dump+0x8a/0x8f
            spin_bug+0x21/0x26
            do_raw_spin_lock+0x114/0x150
            _raw_spin_lock_bh+0x19/0x20
            tipc_bearer_blocked+0x1f/0x40 [tipc]
            tipc_link_send_buf+0x82/0x280 [tipc]
            ? __alloc_skb+0x9f/0x2b0
            tipc_bclink_send_msg+0x77/0xa0 [tipc]
            tipc_multicast+0x11b/0x1b0 [tipc]
            send_msg+0x225/0x530 [tipc]
            sock_sendmsg+0xca/0xe0
    
    The above can be triggered by running the multicast demo program.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f887cc48c6464af20058e81544e73e33daacbd52
Author: Kees Cook <keescook@chromium.org>
Date:   Tue Oct 2 11:20:02 2012 -0700

    net/tipc: remove depends on CONFIG_EXPERIMENTAL
    
    The CONFIG_EXPERIMENTAL config item has not carried much meaning for a
    while now and is almost always enabled by default. As agreed during the
    Linux kernel summit, remove it from any "depends on" lines in Kconfigs.
    
    CC: Jon Maloy <jon.maloy@ericsson.com>
    CC: Allan Stephens <allan.stephens@windriver.com>
    CC: "David S. Miller" <davem@davemloft.net>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Acked-by: David S. Miller <davem@davemloft.net>

commit ba501666fa8d44344a1f7e5158ba973491a70671
Merge: c772dde34391 0fef8f205f6f
Author: David S. Miller <davem@davemloft.net>
Date:   Sat Dec 8 20:25:45 2012 -0500

    Merge branch 'tipc_net-next_v2' of git://git.kernel.org/pub/scm/linux/kernel/git/paulg/linux
    
    Paul Gortmaker says:
    
    ====================
    Changes since v1:
            -get rid of essentially unused variable spotted by
             Neil Horman (patch #2)
    
            -drop patch #3; defer it for 3.9 content, so Neil,
             Jon and Ying can discuss its specifics at their
             leisure while net-next is closed.  (It had no
             direct dependencies to the rest of the series, and
             was just an optimization)
    
            -fix indentation of accept() code directly in place
             vs. forking it out to a separate function (was patch
             #10, now patch #9).
    
    Rebuilt and re-ran tests just to ensure nothing odd happened.
    
    Original v1 text follows, updated pull information follows that.
    
               ---------
    
    Here is another batch of TIPC changes.  The most interesting
    thing is probably the non-blocking socket connect - I'm told
    there were several users looking forward to seeing this.
    
    Also there were some resource limitation changes that had
    the right intent back in 2005, but were now apparently causing
    needless limitations to people's real use cases; those have
    been relaxed/removed.
    
    There is a lockdep splat fix, but no need for a stable backport,
    since it is virtually impossible to trigger in mainline; you
    have to essentially modify code to force the probabilities
    in your favour to see it.
    
    The rest can largely be categorized as general cleanup of things
    seen in the process of getting the above changes done.
    
    Tested between 64 and 32 bit nodes with the test suite.  I've
    also compile tested all the individual commits on the chain.
    
    I'd originally figured on this queue not being ready for 3.8, but
    the extended stabilization window of 3.7 has changed that.  On
    the other hand, this can still be 3.9 material, if that simply
    works better for folks - no problem for me to defer it to 2013.
    If anyone spots any problems then I'll definitely defer it,
    rather than rush a last minute respin.
    ===================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0fef8f205f6f4cdff1869e54e44f317a79902785
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Tue Dec 4 11:01:55 2012 -0500

    tipc: refactor accept() code for improved readability
    
    In TIPC's accept() routine, there is a large block of code relating
    to initialization of a new socket, all within an if condition checking
    if the allocation succeeded.
    
    Here, we simply flip the check of the if, so that the main execution
    path stays at the same indentation level, which improves readability.
    If the allocation fails, we jump to an already existing exit label.
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 258f8667a29d72b1c220065632b39c0faeb061ca
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Dec 3 16:12:07 2012 +0800

    tipc: add lock nesting notation to quiet lockdep warning
    
    TIPC accept() call grabs the socket lock on a newly allocated
    socket while holding the socket lock on an old socket. But lockdep
    worries that this might be a recursive lock attempt:
    
      [ INFO: possible recursive locking detected ]
      ---------------------------------------------
      kworker/u:0/6 is trying to acquire lock:
      (sk_lock-AF_TIPC){+.+.+.}, at: [<c8c1226c>] accept+0x15c/0x310 [tipc]
    
      but task is already holding lock:
      (sk_lock-AF_TIPC){+.+.+.}, at: [<c8c12138>] accept+0x28/0x310 [tipc]
    
      other info that might help us debug this:
      Possible unsafe locking scenario:
    
              CPU0
              ----
              lock(sk_lock-AF_TIPC);
              lock(sk_lock-AF_TIPC);
    
              *** DEADLOCK ***
    
      May be due to missing lock nesting notation
      [...]
    
    Tell lockdep that this locking is safe by using lock_sock_nested().
    This is similar to what was done in commit 5131a184a3458d9 for
    SCTP code ("SCTP: lock_sock_nested in sctp_sock_migrate").
    
    Also note that this is isn't something that is seen normally,
    as it was uncovered with some experimental work-in-progress
    code not yet ready for mainline.  So no need for stable
    backports or similar of this commit.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit cbab368790f23bc917d97fcf7a338c5ba5336ee0
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Nov 29 16:28:30 2012 +0800

    tipc: eliminate connection setup for implied connect in recv_msg()
    
    As connection setup is now completed asynchronously in BH context,
    in the function filter_connect(), the corresponding code in recv_msg()
    becomes redundant.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 584d24b3960e4c877fc623214815f278708f127c
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Nov 29 18:51:19 2012 -0500

    tipc: introduce non-blocking socket connect
    
    TIPC has so far only supported blocking connect(), meaning that a call
    to connect() doesn't return until either the connection is fully
    established, or an error occurs. This has proved insufficient for many
    users, so we now introduce non-blocking connect(), analogous to how
    this is done in TCP and other protocols.
    
    With this feature, if a connection cannot be established instantly,
    connect() will return the error code "-EINPROGRESS".
    If the user later calls connect() again, he will either have the
    return code "-EALREADY" or "-EISCONN", depending on whether the
    connection has been established or not.
    
    The user must have explicitly set the socket to be non-blocking
    (SOCK_NONBLOCK or O_NONBLOCK, depending on method used), so unless
    for some reason they had set this already (the socket would anyway
    remain blocking in current TIPC) this change should be completely
    backwards compatible.
    
    It is also now possible to call select() or poll() to wait for the
    completion of a connection.
    
    An effect of the above is that the actual completion of a connection
    may now be performed asynchronously, independent of the calls from
    user space. Therefore, we now execute this code in BH context, in
    the function filter_rcv(), which is executed upon reception of
    messages in the socket.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    [PG: minor refactoring for improved connect/disconnect function names]
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 7e6c131e1568dcc2033736739a9880dce1976886
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Nov 29 18:39:14 2012 -0500

    tipc: consolidate connection-oriented message reception in one function
    
    Handling of connection-related message reception is currently scattered
    around at different places in the code. This makes it harder to verify
    that things are handled correctly in all possible scenarios.
    So we consolidate the existing processing of connection-oriented
    message reception in a single routine.  In the process, we convert the
    chain of if/else into a switch/case for improved readability.
    
    A cast on the socket_state in the switch is needed to avoid compile
    warnings on 32 bit, like "net/tipc/socket.c:1252:2: warning: case value
    ‘4294967295’ not in enumerated type".  This happens because existing
    tipc code pseudo extends the default linux socket state values with:
    
            #define SS_LISTENING    -1      /* socket is listening */
            #define SS_READY        -2      /* socket is connectionless */
    
    It may make sense to add these as _positive_ values to the existing
    socket state enum list someday, vs. these already existing defines.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    [PG: add cast to fix warning; remove returns from middle of switch]
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit bc879117d4cf2a6fcf5c5a43f157143bbbe88e84
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Thu Nov 29 13:48:40 2012 -0500

    tipc: standardize across connect/disconnect function naming
    
    Currently we have tipc_disconnect and tipc_disconnect_port.  It is
    not clear from the names alone, what they do or how they differ.
    It turns out that tipc_disconnect just deals with the port locking
    and then calls tipc_disconnect_port which does all the work.
    
    If we rename as follows: tipc_disconnect_port --> __tipc_disconnect
    then we will be following typical linux convention, where:
    
       __tipc_disconnect: "raw" function that does all the work.
    
       tipc_disconnect: wrapper that deals with locking and then calls
                        the real core __tipc_disconnect function
    
    With this, the difference is immediately evident, and locking
    violations are more apt to be spotted by chance while working on,
    or even just while reading the code.
    
    On the connect side of things, we currently only have the single
    "tipc_connect2port" function.  It does both the locking at enter/exit,
    and the core of the work.  Pending changes will make it desireable to
    have the connect be a two part locking wrapper + worker function,
    just like the disconnect is already.
    
    Here, we make the connect look just like the updated disconnect case,
    for the above reason, and for consistency.  In the process, we also
    get rid of the "2port" suffix that was on the original name, since
    it adds no descriptive value.
    
    On close examination, one might notice that the above connect
    changes implicitly move the call to tipc_link_get_max_pkt() to be
    within the scope of tipc_port_lock() protected region; when it was
    not previously.  We don't see any issues with this, and it is in
    keeping with __tipc_connect doing the work and tipc_connect just
    handling the locking.
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit e643df156ade104b0430588562d25b8638683fc1
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Tue Nov 27 06:15:29 2012 -0500

    tipc: change sk_receive_queue upper limit
    
    The sk_recv_queue upper limit for connectionless sockets has empirically
    turned out to be too low. When we double the current limit we get much
    fewer rejected messages and no noticable negative side-effects.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 9da3d475874f4da49057767913af95ce01063ba3
Author: Ying Xue <ying.xue@windriver.com>
Date:   Tue Nov 27 06:15:27 2012 -0500

    tipc: eliminate aggregate sk_receive_queue limit
    
    As a complement to the per-socket sk_recv_queue limit, TIPC keeps a
    global atomic counter for the sum of sk_recv_queue sizes across all
    tipc sockets. When incremented, the counter is compared to an upper
    threshold value, and if this is reached, the message is rejected
    with error code TIPC_OVERLOAD.
    
    This check was originally meant to protect the node against
    buffer exhaustion and general CPU overload. However, all experience
    indicates that the feature not only is redundant on Linux, but even
    harmful. Users run into the limit very often, causing disturbances
    for their applications, while removing it seems to have no negative
    effects at all. We have also seen that overall performance is
    boosted significantly when this bottleneck is removed.
    
    Furthermore, we don't see any other network protocols maintaining
    such a mechanism, something strengthening our conviction that this
    control can be eliminated.
    
    As a result, the atomic variable tipc_queue_size is now unused
    and so it can be deleted.  There is a getsockopt call that used
    to allow reading it; we retain that but just return zero for
    maximum compatibility.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Neil Horman <nhorman@tuxdriver.com>
    [PG: phase out tipc_queue_size as pointed out by Neil Horman]
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit c008413850d1d48cc02c940280bf2dcf76160f4c
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Wed Nov 7 02:40:07 2012 -0500

    tipc: remove obsolete flush of stale reassembly buffer
    
    Each link instance has a periodic job checking if there is a stale
    ongoing message reassembly associated to the link. If no new
    fragment has been received during the last 4*[link_tolerance] period,
    it is assumed the missing fragment will never arrive. As a consequence,
    the reassembly buffer is discarded, and a gap in the message sequence
    occurs.
    
    This assumption is wrong. After we abandoned our ambition to develop
    packet routing for multi-cluster networks, only single-hop packet
    transfer remains as an option. For those, all packets are guaranteed
    to be delivered in sequence to the defragmentation layer. Any failure
    to achieve sequenced delivery will eventually lead to link reset, and
    the reassembly buffer will be flushed anyway.
    
    So we just remove this periodic check, which is now obsolete.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Acked-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    [PG: also delete get/inc_timer count, since they are now unused]
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit a386bff88575e206efbbad17190e591c8879f627
Merge: 2b9164771efe 94fc9c4719f5
Author: David S. Miller <davem@davemloft.net>
Date:   Fri Nov 23 14:08:43 2012 -0500

    Merge branch 'tipc_net-next' of git://git.kernel.org/pub/scm/linux/kernel/git/paulg/linux
    
    Paul Gortmaker says:
    
    ====================
    The most interesting thing here, at least from a user perspective,
    is the broadcast link fix -- where there was a corner case where
    two endpoints could get in a state where they disagree on where
    to start Rx and ack of broadcast packets.
    
    There is also the poll/wait changes which could also impact
    end users for certain use cases - the fixes there also better
    align tipc with the rest of the networking code.
    
    The rest largely falls into routine cleanup category, by getting
    rid of some unused routines, some Kconfig clutter, etc.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 94fc9c4719f53264c7cce62ee558781fee7b7128
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Wed Nov 21 20:11:54 2012 -0500

    tipc: delete TIPC_ADVANCED Kconfig variable
    
    There used to be a time when TIPC had lots of Kconfig knobs the
    end user could alter, but they have all been made automatic or
    obsolete, with the exception of CONFIG_TIPC_PORTS.  This
    previously existing set of options was all hidden under the
    TIPC_ADVANCED setting, which does not exist in any code, but
    only in Kconfig scope.
    
    Having this now, just to hide the one remaining "advanced"
    option no longer makes sense.  Remove it.  Also get rid of the
    ifdeffery in the TIPC code that allowed for TIPC_PORTS to be
    possibly undefined.
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 4cb7d55ab4c4726c5d966d5a19e7b304345e74ca
Author: Ying Xue <ying.xue@windriver.com>
Date:   Fri Nov 16 13:51:32 2012 +0800

    tipc: eliminate an unnecessary cast of node variable
    
    As the variable:node is currently defined to u32 type, it is
    unnecessary to cast its type to u32 again when using it.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit c64f7a6a1fb13565687ae5415736095f82557880
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Fri Nov 16 13:51:31 2012 +0800

    tipc: introduce message to synchronize broadcast link
    
    Upon establishing a first link between two nodes, there is
    currently a risk that the two endpoints will disagree on exactly
    which sequence number reception and acknowleding of broadcast
    packets should start.
    
    The following scenarios may happen:
    
    1: Node A sends an ACTIVATE message to B, telling it to start acking
       packets from sequence number N.
    2: Node A sends out broadcast N, but does not expect an acknowledge
       from B, since B is not yet in its broadcast receiver's list.
    3: Node A receives ACK for N from all nodes except B, and releases
       packet N.
    4: Node B receives the ACTIVATE, activates its link endpoint, and
       stores the value N as sequence number of first expected packet.
    5: Node B sends a NAME_DISTR message to A.
    6: Node A receives the NAME_DISTR message, and activates its endpoint.
       At this moment B is added to A's broadcast receiver's set.
       Node A also sets sequence number 0 as the first broadcast packet
       to be received from B.
    7: Node A sends broadcast N+1.
    8: B receives N+1, determines there is a gap in the sequence, since
       it is expecting N, and sends a NACK for N back to A.
    9: Node A has already released N, so no retransmission is possible.
       The broadcast link in direction A->B is stale.
    
    In addition to, or instead of, 7-9 above, the following may happen:
    
    10: Node B sends broadcast M > 0 to A.
    11: Node A receives M, falsely decides there must be a gap, since
        it is expecting packet 0, and asks for retransmission of packets
        [0,M-1].
    12: Node B has already released these packets, so the broadcast
        link is stale in direction B->A.
    
    We solve this problem by introducing a new unicast message type,
    BCAST_PROTOCOL/STATE, to convey the sequence number of the next
    sent broadcast packet to the other endpoint, at exactly the moment
    that endpoint is added to the own node's broadcast receivers list,
    and before any other unicast messages are permitted to be sent.
    
    Furthermore, we don't allow any node to start receiving and
    processing broadcast packets until this new synchronization
    message has been received.
    
    To maintain backwards compatibility, we still open up for
    broadcast reception if we receive a NAME_DISTR message without
    any preceding broadcast sync message. In this case, we must
    assume that the other end has an older code version, and will
    never send out the new synchronization message. Hence, for mixed
    old and new nodes, the issue arising in 7-12 of the above may
    happen with the same probability as before.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 389dd9bcf65e10929cedfeb79c49bd02069b8899
Author: Ying Xue <ying.xue@windriver.com>
Date:   Fri Nov 16 13:51:30 2012 +0800

    tipc: rename supported flag to recv_permitted
    
    Rename the "supported" flag in bclink structure to "recv_permitted"
    to better reflect what it is used for. When this flag is set for a
    given node, we are permitted to receive and acknowledge broadcast
    messages from that node.  Convert it to a bool at the same time,
    since it is not used to store any numerical values.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 818f4da526656a100c637b098be06316fd4624e4
Author: Ying Xue <ying.xue@windriver.com>
Date:   Fri Nov 16 13:51:29 2012 +0800

    tipc: remove supportable flag from bclink structure
    
    The "supportable" flag in bclink structure is a compatibility flag
    indicating whether a peer node is capable of receiving TIPC broadcast
    messages. However, all TIPC versions since tipc-1.5, and after the
    inclusion in the upstream Linux kernel in 2006, support this capability.
    It is highly unlikely that anybody is still using such an old
    version of TIPC, let alone that they want to mix it with TIPC-2.0
    nodes. Therefore, we now remove the "supportable" flag.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 3c294cb374bf7ad6f5c2763f994d75935fb7814d
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Nov 15 11:34:45 2012 +0800

    tipc: remove the bearer congestion mechanism
    
    Currently at the TIPC bearer layer there is the following congestion
    mechanism:
    
    Once sending packets has failed via that bearer, the bearer will be
    flagged as being in congested state at once. During bearer congestion,
    all packets arriving at link will be queued on the link's outgoing
    buffer.  When we detect that the state of bearer congestion has
    relaxed (e.g. some packets are received from the bearer) we will try
    our best to push all packets in the link's outgoing buffer until the
    buffer is empty, or until the bearer is congested again.
    
    However, in fact the TIPC bearer never receives any feedback from the
    device layer whether a send was successful or not, so it must always
    assume it was successful. Therefore, the bearer congestion mechanism
    as it exists currently is of no value.
    
    But the bearer blocking state is still useful for us. For example,
    when the physical media goes down/up, we need to change the state of
    the links bound to the bearer.  So the code maintaing the state
    information is not removed.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 7503115107e5862870eaf5133627051b2e23ac0a
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Oct 29 09:38:15 2012 -0400

    tipc: wake up all waiting threads at socket shutdown
    
    When a socket is shut down, we should wake up all thread sleeping on
    it, instead of just one of them. Otherwise, when several threads are
    polling the same socket, and one of them does shutdown(), the
    remaining threads may end up sleeping forever.
    
    Also, to align socket usage with common practice in other stacks, we
    use one of the common socket callback handlers, sk_state_change(),
    to wake up pending users. This is similar to the usage in e.g.
    inet_shutdown(). [net/ipv4/af_inet.c].
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit c4fc298ab44011a7f7a391bf00350acf481eeaeb
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Tue Oct 16 16:47:06 2012 +0200

    tipc: return POLLOUT for sockets in an unconnected state
    
    If an implied connect is attempted on a nonblocking STREAM/SEQPACKET
    socket during link congestion, the connect message will be discarded
    and sendmsg will return EAGAIN. This is normal behavior, and the
    application is expected to poll the socket until POLLOUT is set,
    after which the connection attempt can be retried.
    However, the POLLOUT flag is never set for unconnected sockets and
    poll() always returns a zero mask. The application is then left without
    a trigger for when it can make another attempt at sending the message.
    
    The solution is to check if we're polling on an unconnected socket
    and set the POLLOUT flag if the TIPC port owned by this socket
    is not congested. The TIPC ports waiting on a specific link will be
    marked as 'not congested' when the link congestion have abated.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit f288bef46443eb3a0b212c1c57b222c0497e06f6
Author: Ying Xue <ying.xue@windriver.com>
Date:   Tue Aug 21 11:16:57 2012 +0800

    tipc: fix race/inefficiencies in poll/wait behaviour
    
    When an application blocks at poll/select on a TIPC socket
    while requesting a specific event mask, both the filter_rcv() and
    wakeupdispatch() case will wake it up unconditionally whenever
    the state changes (i.e an incoming message arrives, or congestion
    has subsided).  No mask is used.
    
    To avoid this, we populate sk->sk_data_ready and sk->sk_write_space
    with tipc_data_ready and tipc_write_space respectively, which makes
    tipc more in alignment with the rest of the networking code.  These
    pass the exact set of possible events to the waker in fs/select.c
    hence avoiding waking up blocked processes unnecessarily.
    
    In doing so, we uncover another issue -- that there needs to be a
    memory barrier in these poll/receive callbacks, otherwise we are
    subject to the the same race as documented above wq_has_sleeper()
    [in commit a57de0b4 "net: adding memory barrier to the poll and
    receive callbacks"].  So we need to replace poll_wait() with
    sock_poll_wait() and use rcu protection for the sk->sk_wq pointer
    in these two new functions.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit b251f0f399e275b027d6541cfbac1d2a3206b44a
Merge: 2b1768f39aeb a375413311b3
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Nov 10 22:03:49 2012 +0100

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
     "Bug fixes galore, mostly in drivers as is often the case:
    
      1) USB gadget and cdc_eem drivers need adjustments to their frame size
         lengths in order to handle VLANs correctly.  From Ian Coolidge.
    
      2) TIPC and several network drivers erroneously call tasklet_disable
         before tasklet_kill, fix from Xiaotian Feng.
    
      3) r8169 driver needs to apply the WOL suspend quirk to more chipsets,
         fix from Cyril Brulebois.
    
      4) Fix multicast filters on RTL_GIGA_MAC_VER_35 r8169 chips, from
         Nathan Walp.
    
      5) FDB netlink dumps should use RTM_NEWNEIGH as the message type, not
         zero.  From John Fastabend.
    
      6) Fix smsc95xx tx checksum offload on big-endian, from Steve
         Glendinning.
    
      7) __inet_diag_dump() needs to repsect and report the error value
         returned from inet_diag_lock_handler() rather than ignore it.
         Otherwise if an inet diag handler is not available for a particular
         protocol, we essentially report success instead of giving an error
         indication.  Fix from Cyrill Gorcunov.
    
      8) When the QFQ packet scheduler sees TSO/GSO packets it does not
         handle things properly, and in fact ends up corrupting it's
         datastructures as well as mis-schedule packets.  Fix from Paolo
         Valente.
    
      9) Fix oopser in skb_loop_sk(), from Eric Leblond.
    
      10) CXGB4 passes partially uninitialized datastructures in to FW
          commands, fix from Vipul Pandya.
    
      11) When we send unsolicited ipv6 neighbour advertisements, we should
          send them to the link-local allnodes multicast address, as per
          RFC4861.  Fix from Hannes Frederic Sowa.
    
      12) There is some kind of bug in the usbnet's kevent deferral
          mechanism, but more immediately when it triggers an uncontrolled
          stream of kernel messages spam the log.  Rate limit the error log
          message triggered when this problem occurs, as sending thousands
          of error messages into the kernel log doesn't help matters at all,
          and in fact makes further diagnosis more difficult.
    
          From Steve Glendinning.
    
      13) Fix gianfar restore from hibernation, from Wang Dongsheng.
    
      14) The netlink message attribute sizes are wrong in the ipv6 GRE
          driver, it was using the size of ipv4 addresses instead of ipv6
          ones :-) Fix from Nicolas Dichtel."
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net:
      gre6: fix rtnl dump messages
      gianfar: ethernet vanishes after restoring from hibernation
      usbnet: ratelimit kevent may have been dropped warnings
      ipv6: send unsolicited neighbour advertisements to all-nodes
      net: usb: cdc_eem: Fix rx skb allocation for 802.1Q VLANs
      usb: gadget: g_ether: fix frame size check for 802.1Q
      cxgb4: Fix initialization of SGE_CONTROL register
      isdn: Make CONFIG_ISDN depend on CONFIG_NETDEVICES
      cxgb4: Initialize data structures before using.
      af-packet: fix oops when socket is not present
      pkt_sched: enable QFQ to support TSO/GSO
      net: inet_diag -- Return error code if protocol handler is missed
      net: bnx2x: Fix typo in bnx2x driver
      smsc95xx: fix tx checksum offload for big endian
      rtnetlink: Use nlmsg type RTM_NEWNEIGH from dflt fdb dump
      ptp: update adjfreq callback description
      r8169: allow multicast packets on sub-8168f chipset.
      r8169: Fix WoL on RTL8168d/8111d.
      drivers/net: use tasklet_kill in device remove/close process
      tipc: do not use tasklet_disable before tasklet_kill

commit d145f7ec23b6366e2b75442eaefafa11077ed568
Author: Xiaotian Feng <xtfeng@gmail.com>
Date:   Tue Oct 30 22:06:01 2012 +0000

    tipc: do not use tasklet_disable before tasklet_kill
    
    If tasklet_disable() is called before related tasklet handled,
    tasklet_kill will never be finished. tasklet_kill is enough.
    
    Signed-off-by: Xiaotian Feng <dannyfeng@tencent.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Allan Stephens <allan.stephens@windriver.com>
    Cc: "David S. Miller" <davem@davemloft.net>
    Cc: netdev@vger.kernel.org
    Cc: tipc-discussion@lists.sourceforge.net
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 283dbd82055eb70ff3b469f812d9c695f18c9641
Merge: 11126c611e10 6825a26c2dc2
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Oct 6 03:11:59 2012 +0900

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking changes from David Miller:
     "The most important bit in here is the fix for input route caching from
      Eric Dumazet, it's a shame we couldn't fully analyze this in time for
      3.6 as it's a 3.6 regression introduced by the routing cache removal.
    
      Anyways, will send quickly to -stable after you pull this in.
    
      Other changes of note:
    
       1) Fix lockdep splats in team and bonding, from Eric Dumazet.
    
       2) IPV6 adds link local route even when there is no link local
          address, from Nicolas Dichtel.
    
       3) Fix ixgbe PTP implementation, from Jacob Keller.
    
       4) Fix excessive stack usage in cxgb4 driver, from Vipul Pandya.
    
       5) MAC length computed improperly in VLAN demux, from Antonio
          Quartulli."
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net: (26 commits)
      ipv6: release reference of ip6_null_entry's dst entry in __ip6_del_rt
      Remove noisy printks from llcp_sock_connect
      tipc: prevent dropped connections due to rcvbuf overflow
      silence some noisy printks in irda
      team: set qdisc_tx_busylock to avoid LOCKDEP splat
      bonding: set qdisc_tx_busylock to avoid LOCKDEP splat
      sctp: check src addr when processing SACK to update transport state
      sctp: fix a typo in prototype of __sctp_rcv_lookup()
      ipv4: add a fib_type to fib_info
      can: mpc5xxx_can: fix section type conflict
      can: peak_pcmcia: fix error return code
      can: peak_pci: fix error return code
      cxgb4: Fix build error due to missing linux/vmalloc.h include.
      bnx2x: fix ring size for 10G functions
      cxgb4: Dynamically allocate memory in t4_memory_rw() and get_vpd_params()
      ixgbe: add support for X540-AT1
      ixgbe: fix poll loop for FDIRCTRL.INIT_DONE bit
      ixgbe: fix PTP ethtool timestamping function
      ixgbe: (PTP) Fix PPS interrupt code
      ixgbe: Fix PTP X540 SDP alignment code for PPS signal
      ...

commit e57edf6b6dba975eceede20b4b13699d4e88cd78
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Thu Oct 4 05:00:43 2012 +0000

    tipc: prevent dropped connections due to rcvbuf overflow
    
    When large buffers are sent over connected TIPC sockets, it
    is likely that the sk_backlog will be filled up on the
    receiver side, but the TIPC flow control mechanism is happily
    unaware of this since that is based on message count.
    
    The sender will receive a TIPC_ERR_OVERLOAD message when this occurs
    and drop it's side of the connection, leaving it stale on
    the receiver end.
    
    By increasing the sk_rcvbuf to a 'worst case' value, we avoid the
    overload caused by a full backlog queue and the flow control
    will work properly.
    
    This worst case value is the max TIPC message size times
    the flow control window, multiplied by two because a sender
    will transmit up to double the window size before a port is marked
    congested.
    We multiply this by 2 to account for the sk_buff and other overheads.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit adccff34de1ef81564b7e6c436f762e7a1caf807
Author: Peter Senna Tschudin <peter.senna@gmail.com>
Date:   Tue Sep 18 07:10:45 2012 +0000

    net/tipc/name_table.c: Remove unecessary semicolon
    
    Found by http://coccinelle.lip6.fr/
    
    Signed-off-by: Peter Senna Tschudin <peter.senna@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e6a04b1d3ff9d5af219b2fcaebe0ef04733d597c
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Aug 16 12:09:14 2012 +0000

    tipc: eliminate configuration for maximum number of name publications
    
    Gets rid of the need for users to specify the maximum number of
    name publications supported by TIPC. TIPC now automatically provides
    support for the maximum number of name publications to 65535.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 34f256cc7962a44537a0d33877cd93c89873098e
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Aug 16 12:09:13 2012 +0000

    tipc: eliminate configuration for maximum number of name subscriptions
    
    Gets rid of the need for users to specify the maximum number of
    name subscriptions supported by TIPC. TIPC now automatically provides
    support for the maximum number of name subscriptions to 65535.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 61cdd4d80b29cfdee45920238eea2d1fbb51f922
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Aug 16 12:09:12 2012 +0000

    tipc: add __read_mostly annotations to several global variables
    
    Added to the following:
    
     - tipc_random
     - tipc_own_addr
     - tipc_max_ports
     - tipc_net_id
     - tipc_remote_management
     - handler_enabled
    
    The above global variables are read often, but written rarely. Use
    __read_mostly to prevent them being on the same cacheline as another
    variable which is written to often, which would cause cacheline
    bouncing.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f046e7d9be1cbb3335694c7f9a31d18e1f998ff5
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Aug 16 12:09:11 2012 +0000

    tipc: convert tipc_nametbl_size type from variable to macro
    
    There is nothing changing this variable dynamically, so change
    it to a macro to make that more obvious when reading the code.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 379c0456afc170d56ceb712a5689ede91d293e88
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Aug 16 12:09:10 2012 +0000

    tipc: change tipc_net_start routine return value type
    
    Since now tipc_net_start() always returns a success code - 0, its
    return value type should be changed from integer to void, which can
    avoid unnecessary check for its return value.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 381294331ed2858f8e75223310f873d580921366
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Aug 16 12:09:09 2012 +0000

    tipc: manually inline single use media_name_valid routine
    
    After eliminating the mechanism which checks whether all letters
    in media name string are within a given character set, the
    media_name_valid routine becomes trivial.  It is also only
    used once, so it is unnecessary to keep it as a separate function.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit fc0739385ba10f59105e87a46cc93d9d9a10553c
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Aug 16 12:09:08 2012 +0000

    tipc: remove pointless name sanity check and tipc_alphabet array
    
    There is no real reason to check whether all letters in the given
    media name and network interface name are within the character set
    defined in tipc_alphabet array. Even if we eliminate the checking,
    the rest of checking conditions in tipc_enable_bearer() can ensure
    we do not enable an invalid or illegal bearer.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4225a398c1352a7a5c14dc07277cb5cc4473983b
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Aug 16 12:09:07 2012 +0000

    tipc: fix lockdep warning during bearer initialization
    
    When the lockdep validator is enabled, it will report the below
    warning when we enable a TIPC bearer:
    
    [ INFO: possible irq lock inversion dependency detected ]
    ---------------------------------------------------------
    Possible interrupt unsafe locking scenario:
    
            CPU0                    CPU1
            ----                    ----
       lock(ptype_lock);
                                    local_irq_disable();
                                    lock(tipc_net_lock);
                                    lock(ptype_lock);
       <Interrupt>
       lock(tipc_net_lock);
    
      *** DEADLOCK ***
    
    the shortest dependencies between 2nd lock and 1st lock:
      -> (ptype_lock){+.+...} ops: 10 {
    [...]
    SOFTIRQ-ON-W at:
                          [<c1089418>] __lock_acquire+0x528/0x13e0
                          [<c108a360>] lock_acquire+0x90/0x100
                          [<c1553c38>] _raw_spin_lock+0x38/0x50
                          [<c14651ca>] dev_add_pack+0x3a/0x60
                          [<c182da75>] arp_init+0x1a/0x48
                          [<c182dce5>] inet_init+0x181/0x27e
                          [<c1001114>] do_one_initcall+0x34/0x170
                          [<c17f7329>] kernel_init+0x110/0x1b2
                          [<c155b6a2>] kernel_thread_helper+0x6/0x10
    [...]
       ... key      at: [<c17e4b10>] ptype_lock+0x10/0x20
       ... acquired at:
        [<c108a360>] lock_acquire+0x90/0x100
        [<c1553c38>] _raw_spin_lock+0x38/0x50
        [<c14651ca>] dev_add_pack+0x3a/0x60
        [<c8bc18d2>] enable_bearer+0xf2/0x140 [tipc]
        [<c8bb283a>] tipc_enable_bearer+0x1ba/0x450 [tipc]
        [<c8bb3a04>] tipc_cfg_do_cmd+0x5c4/0x830 [tipc]
        [<c8bbc032>] handle_cmd+0x42/0xd0 [tipc]
        [<c148e802>] genl_rcv_msg+0x232/0x280
        [<c148d3f6>] netlink_rcv_skb+0x86/0xb0
        [<c148e5bc>] genl_rcv+0x1c/0x30
        [<c148d144>] netlink_unicast+0x174/0x1f0
        [<c148ddab>] netlink_sendmsg+0x1eb/0x2d0
        [<c1456bc1>] sock_aio_write+0x161/0x170
        [<c1135a7c>] do_sync_write+0xac/0xf0
        [<c11360f6>] vfs_write+0x156/0x170
        [<c11361e2>] sys_write+0x42/0x70
        [<c155b0df>] sysenter_do_call+0x12/0x38
    [...]
    }
      -> (tipc_net_lock){+..-..} ops: 4 {
    [...]
        IN-SOFTIRQ-R at:
                         [<c108953a>] __lock_acquire+0x64a/0x13e0
                         [<c108a360>] lock_acquire+0x90/0x100
                         [<c15541cd>] _raw_read_lock_bh+0x3d/0x50
                         [<c8bb874d>] tipc_recv_msg+0x1d/0x830 [tipc]
                         [<c8bc195f>] recv_msg+0x3f/0x50 [tipc]
                         [<c146a5fa>] __netif_receive_skb+0x22a/0x590
                         [<c146ab0b>] netif_receive_skb+0x2b/0xf0
                         [<c13c43d2>] pcnet32_poll+0x292/0x780
                         [<c146b00a>] net_rx_action+0xfa/0x1e0
                         [<c103a4be>] __do_softirq+0xae/0x1e0
    [...]
    }
    
    >From the log, we can see three different call chains between
    CPU0 and CPU1:
    
    Time 0 on CPU0:
    
      kernel_init()->inet_init()->dev_add_pack()
    
    At time 0, the ptype_lock is held by CPU0 in dev_add_pack();
    
    Time 1 on CPU1:
    
      tipc_enable_bearer()->enable_bearer()->dev_add_pack()
    
    At time 1, tipc_enable_bearer() first holds tipc_net_lock, and then
    wants to take ptype_lock to register TIPC protocol handler into the
    networking stack.  But the ptype_lock has been taken by dev_add_pack()
    on CPU0, so at this time the dev_add_pack() running on CPU1 has to be
    busy looping.
    
    Time 2 on CPU0:
    
      netif_receive_skb()->recv_msg()->tipc_recv_msg()
    
    At time 2, an incoming TIPC packet arrives at CPU0, hence
    tipc_recv_msg() will be invoked. In tipc_recv_msg(), it first wants
    to hold tipc_net_lock.  At the moment, below scenario happens:
    
    On CPU0, below is our sequence of taking locks:
    
      lock(ptype_lock)->lock(tipc_net_lock)
    
    On CPU1, our sequence of taking locks looks like:
    
      lock(tipc_net_lock)->lock(ptype_lock)
    
    Obviously deadlock may happen in this case.
    
    But please note the deadlock possibly doesn't occur at all when the
    first TIPC bearer is enabled.  Before enable_bearer() -- running on
    CPU1 does not hold ptype_lock, so the TIPC receive handler (i.e.
    recv_msg()) is not registered successfully via dev_add_pack(), so
    the tipc_recv_msg() cannot be called by recv_msg() even if a TIPC
    message comes to CPU0. But when the second TIPC bearer is
    registered, the deadlock can perhaps really happen.
    
    To fix it, we will push the work of registering TIPC protocol
    handler into workqueue context. After the change, both paths taking
    ptype_lock are always in process contexts, thus, the deadlock should
    never occur.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit fa7f86f1bb5d8f08d10442a546252d2670b26f41
Author: Ying Xue <ying.xue@windriver.com>
Date:   Thu Aug 16 12:09:06 2012 +0000

    tipc: optimize the initialization of network device notifier
    
    Ethernet media initialization is only done when TIPC is started or
    switched to network mode. So the initialization of the network device
    notifier structure can be moved out of this function and done
    statically instead.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 07689b0a5c26176c528d7864b93188045439f49b
Merge: 51d7cccf0723 869dd4662f90
Author: David S. Miller <davem@davemloft.net>
Date:   Mon Jul 16 22:33:32 2012 -0700

    Merge branch 'tipc_net-next' of git://git.kernel.org/pub/scm/linux/kernel/git/paulg/linux
    
    Paul Gortmaker says:
    
    ====================
    This is the same eight commits as sent for review last week[1],
    with just the incorporation of the pr_fmt change as suggested
    by JoeP.  There was no additional change requests, so unless you
    can see something else you'd like me to change, please pull.
     ...
    Erik Hugne (5):
          tipc: use standard printk shortcut macros (pr_err etc.)
          tipc: remove TIPC packet debugging functions and macros
          tipc: simplify print buffer handling in tipc_printf
          tipc: phase out most of the struct print_buf usage
          tipc: remove print_buf and deprecated log buffer code
    
    Paul Gortmaker (3):
          tipc: factor stats struct out of the larger link struct
          tipc: limit error messages relating to memory leak to one line
          tipc: simplify link_print by divorcing it from using tipc_printf
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 869dd4662f90514cb92b44a389e85c737b464e25
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Fri Jun 29 00:50:24 2012 -0400

    tipc: remove print_buf and deprecated log buffer code
    
    The internal log buffer handling functions can now safely be
    removed since there is no code using it anymore.  Requests to
    interact with the internal tipc log buffer over netlink (in
    config.c) will report 'obsolete command'.
    
    This represents the final removal of any references to a
    struct print_buf, and the removal of the struct itself.
    We also get rid of a TIPC specific Kconfig in the process.
    
    Finally, log.h is removed since it is not needed anymore.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit dc1aed37d17b4fe4f28a74d804c065b877bc7bed
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Fri Jun 29 00:50:23 2012 -0400

    tipc: phase out most of the struct print_buf usage
    
    The tipc_printf is renamed to tipc_snprintf, as the new name
    describes more what the function actually does.  It is also
    changed to take a buffer and length parameter and return
    number of characters written to the buffer.  All callers of
    this function that used to pass a print_buf are updated.
    
    Final removal of the struct print_buf itself will be done
    synchronously with the pending removal of the deprecated
    logging code that also was using it.
    
    Functions that build up a response message with a list of
    ports, nametable contents etc. are changed to return the number
    of characters written to the output buffer. This information
    was previously hidden in a field of the print_buf struct, and
    the number of chars written was fetched with a call to
    tipc_printbuf_validate.  This function is removed since it
    is no longer referenced nor needed.
    
    A generic max size ULTRA_STRING_MAX_LEN is defined, named
    in keeping with the existing TIPC_TLV_ULTRA_STRING, and the
    various definitions in port, link and nametable code that
    largely duplicated this information are removed.  This means
    that amount of link statistics that can be returned is now
    increased from 2k to 32k.
    
    The buffer overflow check is now done just before the reply
    message is passed over netlink or TIPC to a remote node and
    the message indicating a truncated buffer is changed to a less
    dramatic one (less CAPS), placed at the end of the message.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit e2dbd601346aeb64b1b387168b217fd5c301644e
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Fri Jun 29 00:50:22 2012 -0400

    tipc: simplify print buffer handling in tipc_printf
    
    tipc_printf was previously used both to construct debug traces
    and to append data to buffers that should be sent over netlink
    to the tipc-config application.  A global print_buffer was
    used to format the string before it was copied to the actual
    output buffer.  This could lead to concurrent access of the
    global print_buffer, which then had to be lock protected.
    This is simplified by changing tipc_printf to append data
    directly to the output buffer using vscnprintf.
    
    With the new implementation of tipc_printf, there is no longer
    any risk of concurrent access to the internal log buffer, so
    the lock (and the comments describing it) are no longer
    strictly necessary.  However, there are still a few functions
    that do grab this lock before resizing/dumping the log
    buffer.  We leave the lock, and these functions untouched since
    they will be removed with a subsequent commit that drops the
    deprecated log buffer handling code
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 5deedde9fa65c494c9747dd66b1721be90991b64
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Wed Jul 11 19:27:56 2012 -0400

    tipc: simplify link_print by divorcing it from using tipc_printf
    
    To pave the way for a pending cleanup of tipc_printf, and
    removal of struct print_buf entirely, we make that task simpler
    by converting link_print to issue its messages with standard
    printk infrastructure.  [Original idea separated from a larger
    patch from Erik Hugne <erik.hugne@ericsson.com>]
    
    Cc: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 568fc588fce85602e4e2c7573f6f912311306b72
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Fri Jun 29 00:50:21 2012 -0400

    tipc: remove TIPC packet debugging functions and macros
    
    The link queue traces and packet level debug functions served
    a purpose during early development, but are now redundant
    since there are other, more capable tools available for
    debugging at the packet level.
    
    The TIPC_DEBUG Kconfig option is removed since it does not
    provide any extra debugging features anymore.
    
    This gets rid of a lot of tipc_printf usages, which will
    make the pending cleanup work of that function easier.
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 2cf8aa19fe8bec578b707daa383ebff80e3f81a1
Author: Erik Hugne <erik.hugne@ericsson.com>
Date:   Fri Jun 29 00:16:37 2012 -0400

    tipc: use standard printk shortcut macros (pr_err etc.)
    
    All messages should go directly to the kernel log.  The TIPC
    specific error, warning, info and debug trace macro's are
    removed and all references replaced with pr_err, pr_warn,
    pr_info and pr_debug.
    
    Commonly used sub-strings are explicitly declared as a const
    char to reduce .text size.
    
    Note that this means the debug messages (changed to pr_debug),
    are now enabled through dynamic debugging, instead of a TIPC
    specific Kconfig option (TIPC_DEBUG).  The latter will be
    phased out completely
    
    Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    [PG: use pr_fmt as suggested by Joe Perches <joe@perches.com>]
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit f705ab956b3a0377181c9d73b235ad5bf4020937
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Wed Jul 11 17:35:01 2012 -0400

    tipc: limit error messages relating to memory leak to one line
    
    With the default name table size of 1024, it is possible that
    the sanity check in tipc_nametbl_stop could spam out 1024
    essentially identical error messages if memory was corrupted
    or similar.  Limit it to issuing no more than a single message.
    
    The actual chain number (i.e. 0 --> 1023) wouldn't provide any
    useful insight if/when such an instance happened, so don't
    bother printing out that value.
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 7e9cab58e8e0b5e52af28145ffa70de329adc459
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Wed Jul 11 09:40:43 2012 -0400

    tipc: factor stats struct out of the larger link struct
    
    This is done to improve readability, and so that we can give
    the struct a name that will allow us to declare a local
    pointer to it in code, instead of having to always redirect
    through the link struct to get to it.
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit b6d151bb8261a229555cbd0704749de099104bbd
Merge: 1191cb83489e 617d3c7a50b3
Author: David S. Miller <davem@davemloft.net>
Date:   Mon Apr 30 21:42:30 2012 -0400

    Merge branch 'tipc_net-next' of git://git.kernel.org/pub/scm/linux/kernel/git/paulg/linux

commit 617d3c7a50b3dc15f558d60013047aede79dc055
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Mon Apr 30 15:29:02 2012 -0400

    tipc: compress out gratuitous extra carriage returns
    
    Some of the comment blocks are floating in limbo between two
    functions, or between blocks of code.  Delete the extra line
    feeds between any comment and its associated following block
    of code, to be consistent with the majority of the rest of
    the kernel.  Also delete trailing newlines at EOF and fix
    a couple trivial typos in existing comments.
    
    This is a 100% cosmetic change with no runtime impact.  We get
    rid of over 500 lines of non-code, and being blank line deletes,
    they won't even show up as noise in git blame.
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit aad585473fe1e4b07f2ec1e2432475937f90c385
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu Apr 26 18:13:08 2012 -0400

    tipc: Reject payload messages with invalid message type
    
    Adds check to ensure TIPC sockets reject incoming payload messages
    that have an unrecognized message type.
    
    Remove the old open question about whether TIPC_ERR_NO_PORT is
    the proper return value.  It is appropriate here since there are
    valid instances where another node can make use of the reply,
    and at this point in time the host is already broadcasting TIPC
    data, so there are no real security concerns.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 8f1778969359a71f398c9ac6d3a9a3e61439b466
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu Apr 26 17:57:17 2012 -0400

    tipc: Enhance error checking of published names
    
    Consolidates validation of scope and name sequence range values into
    a single routine where it applies both to local name publications
    and to name publications issued by other nodes in the network. This
    change means that the scope value for non-local publications is now
    validated and the name sequence range for local publications is now
    validated only once. Additionally, a publication attempt that fails
    validation now creates an entry in the system log file only if debugging
    capabilities have been enabled; this prevents the system log from being
    cluttered up with messages caused by a defective application or network
    node.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit f7fb9d20ade55e538efe91477014b6b367ecd802
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu Apr 26 17:53:03 2012 -0400

    tipc: Create helper routine to delete unused name sequence structure
    
    Replaces two identical chunks of code that delete an unused name
    sequence structure from TIPC's name table with calls to a new routine
    that performs this operation.
    
    This change is cosmetic and doesn't impact the operation of TIPC.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit bbe6a295d0a987068c89ca7e7b7291b754995754
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu Apr 26 17:44:52 2012 -0400

    tipc: remove redundant memset and stale comment from subscr.c
    
    Eliminate code to zero-out the main topology service structure,
    which is already zeroed-out.
    
    Get rid of a comment documenting a field of the main topology
    service structure that no longer exists.
    
    Both are cosmetic changes with no impact on runtime behaviour.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 2d98abb9fe132898d17b56fb4765687aff82c093
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu Apr 26 17:41:35 2012 -0400

    tipc: Optimize initialization of network topology service
    
    Initialization now occurs in the calling thread of control,
    rather than being deferred to the TIPC tasklet.  With the
    current codebase, the deferral is no longer necessary.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit eb3865a99dc38396a403ef82f99f4c51dd34f0bf
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu Apr 26 17:21:49 2012 -0400

    tipc: Enhance re-initialization of network topology service
    
    Streamlines the job of re-initializing TIPC's network topology service
    when a node's network address is first assigned. Rather than destroying
    the topology server port and breaking its connections to existing
    subscribers, TIPC now simply lets the service continue running (since
    the change to the port identifier of each port used by the topology
    service no longer impacts the flow of messages between the service and
    its subscribers).
    
    This enhancement means that applications that utilize the topology
    service prior to the assignment of TIPC's network address no longer need
    to re-establish their subscriptions when the address is finally assigned.
    
    However, it is worth noting that any subsequent events for existing
    subscriptions report the new port identifier of the publishing port,
    rather than the original port identifier. (For example, a name that was
    previously reported as being published by <0.0.0:ref> may be subsequently
    withdrawn by <Z.C.N:ref>.)
    
    This doesn't impact any of the existing known userspace in tipc-utils,
    since (a) TIPC continues to treat references to the original port ID
    correctly and (b) normal use cases assign an address before active use.
    
    However if there does happen to be some rare/custom application out
    there that was relying on this, they can simply bypass the enhancement
    by issuing a subscription to {0,0} and break its connection to the
    topology service, if an associated withdrawal event occurs.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit eb323b075a360d59fabbbd58c0d7aeb951bfc647
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu Apr 26 17:17:39 2012 -0400

    tipc: Optimize termination of configuration service
    
    Termination no longer tests to see if the configuration service
    port was successfully created or not. In the unlikely event that the
    port was not created, attempting to delete the non-existent port is
    detected gracefully and causes no harm.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 861d3a0e5bbc93b79b5739cfb4ea0fb553fe9407
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu Apr 26 16:50:22 2012 -0400

    tipc: Optimize initialization of configuration service
    
    Initialization now occurs in the calling thread of control,
    rather than being deferred to the TIPC tasklet.  With the
    current codebase, the deferral is no longer necessary.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit a2cfd45b52006893fc0d0e850d187d30f86a39dc
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu Apr 26 16:46:29 2012 -0400

    tipc: Optimize re-initialization of configuration service
    
    Streamlines the job of re-initializing TIPC's configuration service
    when a node's network address is first assigned. Rather than destroying
    the configuration server port and then recreating it, TIPC now simply
    withdraws the existing {0,<0.0.0>} name publication and creates a new
    {0,<Z.C.N>} name publication that identifies the node's network address
    to interested subscribers.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 872f24dbc604ef585ea7eec73020dcdfaffd1956
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Mon Apr 23 04:49:13 2012 +0000

    tipc: remove inline instances from C source files.
    
    Untie gcc's hands and let it do what it wants within the
    individual source files.  There are two files, node.c and
    port.c -- only the latter effectively changes (gcc-4.5.2).
    Objdump shows gcc deciding to not inline port_peernode().
    
    Suggested-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 167de77fd4e5646f98f67bd9f0a0054a891f6ff4
Merge: 2528a5dc4331 9d52ce4bd3fa
Author: David S. Miller <davem@davemloft.net>
Date:   Fri Apr 20 20:40:31 2012 -0400

    Merge branch 'tipc_net-next' of git://git.kernel.org/pub/scm/linux/kernel/git/paulg/linux

commit 9d52ce4bd3fa9e0cf1658791f2c680e20e0598a1
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Apr 18 09:42:56 2012 -0400

    tipc: Ensure network address change doesn't impact configuration service
    
    Enhances command validation done by TIPC's configuration service so
    that it works properly even if the node's network address is changed in
    mid-operation. The default node address of <0.0.0> is now recognized as an
    alias for "this node" even after a new network address has been assigned.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 630d920dcae546c4e8ef6c01e7c49b2f42822c5f
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Apr 18 09:42:29 2012 -0400

    tipc: Ensure network address change doesn't impact rejected message
    
    Revises handling of a rejected message to ensure that a locally
    originated message is returned properly even if the node's network
    address is changed in mid-operation. The routine now treats the
    default node address of <0.0.0> as an alias for "this node" when
    determining where to send a returned message.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 8a55fe74b1a767cb00d6248a847068c9d886d710
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Apr 18 09:27:22 2012 -0400

    tipc: handle <0.0.0> as an alias for this node on outgoing msgs
    
    Revises handling of send routines for payload messages to ensure that
    they are processed properly even if the node's network address is
    changed in mid-operation. The routines now treat the default node
    address of <0.0.0> as an alias for "this node" when determining where
    to send an outgoing message.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit b8f683d126c1cb757e794d6d904cbe7cf5954797
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Apr 18 09:22:56 2012 -0400

    tipc: properly handle off-node send requests with invalid addr
    
    There are two send routines that might conceivably be asked by an
    application to send a message off-node when the node is still using
    the default network address.  These now have an added check that
    detects this and rejects the message gracefully.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 974a5a864bf959b7f3412a31ee8ce001c6628451
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Apr 18 09:12:09 2012 -0400

    tipc: take lock while updating node network address
    
    The routine that changes the node's network address now takes TIPC's
    network lock in write mode while the main address variable and associated
    data structures are being changed; this is needed to ensure that the
    link subsystem won't attempt to send a message off-node until the sending
    port's message header template has been updated with the node's new
    network address.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit f0712e86b75f4839773abbc01d5baa7e36e378c2
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Apr 17 18:42:28 2012 -0400

    tipc: Ensure network address change doesn't impact local connections
    
    Revises routines that deal with connections between two ports on
    the same node to ensure the connection is not impacted if the node's
    network address is changed in mid-operation. The routines now treat
    the default node address of <0.0.0> as an alias for "this node" in
    the following situations:
    
    1) Incoming messages destined to a connected port now handle the alias
    properly when validating that the message was sent by the expected
    peer port, ensuring that the message will be accepted regardless of
    whether it specifies the node's old network address or it's current one.
    
    2) The code which completes connection establishment now handles the
    alias properly when determining if the peer port is on the same node
    as the connected port.
    
    An added benefit of addressing issue 1) is that some peer port
    validation code has been relocated to TIPC's socket subsystem, which
    means that validation is no longer done twice when a message is
    sent to a non-socket port (such as TIPC's configuration service or
    network topology service).
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit d0e17fedc2aeb0c4db09434787ef6d432582e050
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Apr 17 18:36:42 2012 -0400

    tipc: delete duplicate peerport/peernode helper functions
    
    Prior to commit 23dd4cce387124ec3ea06ca30d17854ae4d9b772
    
        "tipc: Combine port structure with tipc_port structure"
    
    there was a need for the two sets of helper functions.  But
    now they are just duplicates.  Remove the globally visible
    ones, and mark the remaining ones as inline.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit f21536d1e73c36b37c50f71013c67f19db77d4b8
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Apr 17 18:22:49 2012 -0400

    tipc: Ensure network address change doesn't impact new port
    
    Re-orders port creation logic so that the initialization of a new
    port's message header template occurs while the port list lock is
    held. This ensures that a change to the node's network address that
    occurs at the same time as the port is being created does not result
    in the template identifying the sender using the former network
    address. The new approach guarantees that the new port's template is
    using the current network address or that it will be updated when
    the address changes.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 5eb0a291fbde1842b8e3f241183a0e2c1399c600
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Apr 17 18:17:35 2012 -0400

    tipc: Optimize re-initialization of port message header templates
    
    Removes an unnecessary check in the logic that updates the message
    header template for existing ports when a node's network address is
    first assigned. There is no longer any need to check to see if the
    node's network address has actually changed since the calling routine
    has already verified that this is so.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit d4f5c12cdf43ce70731d5abfb6400bfb1be392d3
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Apr 17 18:16:34 2012 -0400

    tipc: Ensure network address change doesn't impact name table updates
    
    Revises routines that add and remove an entry from a node's name table
    so that the publication scope lists are updated properly even if the
    node's network address is changed in mid-operation. The routines now
    recognize the default node address of <0.0.0> as an alias for "this node"
    even after a new network address has been assigned.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 336ebf5bf524e447227cb1d785b22ca722e6afa7
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Apr 17 18:02:01 2012 -0400

    tipc: Add routines for safe checking of node's network address
    
    Introduces routines that test whether a given network address is
    equal to a node's own network address or if it lies within the node's
    own network cluster, and which work properly regardless of whether
    the node is using the default network address <0.0.0> or a non-zero
    network address that is assigned later on. In essence, these routines
    ensure that address <0.0.0> is treated as an alias for "this node",
    regardless of which network address the node is actually using.
    
    Old users of the pre-existing more strict match in_own_cluster()
    have been accordingly redirected to what is now called
    in_own_cluster_exact() --- which does not extend matching to <0,0,0>.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit fd6eced8a482986784eb1f3aa0838dbdd725e71c
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Nov 9 14:22:52 2011 -0500

    tipc: Don't record failed publication attempt as a success
    
    No longer increments counter of number of publications by a node
    if an attempt to add a new publication fails. This prevents TIPC from
    incorrectly blocking future publications because the configured maximum
    number of publications has been reached.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 1110b8d33a54d1b91131e2a70ef0c3c26425b800
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Apr 17 17:57:52 2012 -0400

    tipc: Update node-scope publications when network address is assigned
    
    Ensures that node-scope name publications that exist prior to the
    configuration of a node's network address are properly re-initialized
    with that address when it is assigned. TIPC's node-scope publications
    are now tracked using a publications list like the lists used for
    cluster-scope and zone-scope publications so they can be easily updated
    when required.
    
    The inclusion of node scope name publications in a conventional publication
    list means that they must now also be withdrawn, just like cluster and zone
    scope publications are currently withdrawn.  So some conditional tests on
    scope ==/!= TIPC_NODE_SCOPE are inserted/removed accordingly.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit a909804f7c6cb83b7365ed23e9fd4c1267ee9ef0
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Apr 17 17:57:52 2012 -0400

    tipc: Separate cluster-scope and zone-scope names into distinct lists
    
    Utilizes distinct lists to track zone-scope and cluster-scope names
    published by a node. For now, TIPC continues to process the entries
    in both lists in the same way; however, an upcoming patch will utilize
    the existence of the lists to prevent the sending of cluster-scope names
    to nodes that are not part of the local cluster.
    
    To achieve this, an array of publication lists is introduced, so
    that they can be iterated over and accessed via publ->scope as
    an index where convenient.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit e11aa059715e2bacd4e62d57be5557dda697af8e
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Apr 17 17:57:52 2012 -0400

    tipc: Factor out name publication code to a separate function
    
    This is done so that it can be reused with differing publication
    lists, instead of being hard coded to the cluster publicaton list.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 3f8375fee30cbf7fb0bd67f044e3406daa16fa3e
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Apr 17 17:57:52 2012 -0400

    tipc: introduce publication lists struct
    
    There is currently a single list that is containing both cluster-scope and
    zone-scope publications, and the list count is a separate free floating
    variable.  Create a struct to bind the count to the list, and to pave
    the way for factoring out the publications into zone/cluster/node scope.
    
    The current "publ_root" most matches what will be the cluster scope
    list, so it is named accordingly in this commit.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 06b8db9cac717fcd6b8410b9efae8aca33b4b9e6
Merge: 9100eb012a31 9bbbc59dbd4e
Author: David S. Miller <davem@davemloft.net>
Date:   Wed Feb 29 23:52:12 2012 -0500

    Merge branch 'tipc_net-next' of git://git.kernel.org/pub/scm/linux/kernel/git/paulg/linux

commit 9bbbc59dbd4e69da078b65a7f708c4250984dd29
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Nov 9 16:30:55 2011 -0500

    tipc: Optimize setting of immutable payload message header fields
    
    Optimizes routines that send payload messages so that they no longer
    update the "originating node" and "originating port" fields of the
    outgoing message header template, since these fields are initialized
    when the sending port is created and never change thereafter. Also
    optimizes the routine which updates the message header template when
    a connection to a port is established, for the same reason.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit e8ec1ae756de320644c69194898c53d247925586
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Nov 9 17:38:20 2011 -0500

    tipc: Eliminate obsolete code for re-sending a message
    
    Removes code that updated the "previous node" field of an out-going
    message over TIPC's links. Such updating is unnecessary since the
    removal of the prototype multi-cluster capability means that all
    outgoing messages are generated locally and already have this field
    populated correctly.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 9b641251aee1a804169a17fe4236a50188894994
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Nov 9 13:29:18 2011 -0500

    tipc: Un-inline port routine for processing incoming messages
    
    Converts a non-trivial routine from inline to non-inline form
    to avoid bloating the TIPC code base with 6 copies of its body.
    
    This change is essentially cosmetic, and doesn't change existing
    TIPC behavior.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit b58343f9ea75f02ef48b984767511c6b3ba76eaf
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Nov 8 13:48:28 2011 -0500

    tipc: Eliminate support for tipc_mode global variable
    
    Removes all references to the global variable that records whether
    TIPC is running in "single node" mode or "network" mode, since this
    information can be easily deduced from the global variable that
    records TIPC's network address. (i.e. a non-zero network address
    means that TIPC is running in network mode.)
    
    The changes made update most existing mode-based checks to use the
    network address global variable. A few checks that are no longer
    needed are removed entirely, along with any associated code lying on
    non-executable control paths.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 077a26f029e76a5918edf9c1d44d5566eec719fc
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Nov 8 13:18:59 2011 -0500

    tipc: Eliminate obsolete support for "not running" mode
    
    Removes all references to TIPC's "not running" mode, since the
    removal of support for the native API means that there is no longer
    any way to interact with TIPC if it has not been initialized.
    
    The changes made consist of removing mode-based checks that are no
    longer needed, along with any associated code lying on non-executable
    control paths.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit bc9f8143ecf96c17a56635d2ef4c3c6b6ec27947
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon Nov 7 17:00:54 2011 -0500

    tipc: Revert name table translation optimization
    
    Restores name table translation using a non-zero domain that is
    "out of scope", which was broken by an earlier commit
    (5d9c54c1e9ececcf7e99c4f014f9bec7ee3a7def). Comments have now been
    added to the name table translation routine to make it clear that
    there are actually three possible outcomes to a translation request
    (found/not found/deferred), rather than just two (found/not found).
    
    Note that a straightforward revert of the earlier commit is not
    possible, as other changes to the name table translation logic
    have occurred since the incorrect optimization was made.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 75aba9af2410ae8fc70600d9dcda0651f20e091e
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Fri Nov 4 15:00:02 2011 -0400

    tipc: Minor optimization to broadcast link synchronization logic
    
    Optimizes processing done when contact with a neighboring node is
    established to avoid recording the current state of outgoing broadcast
    messages if the neighboring node isn't a valid broadcast link destination,
    since this state information isn't needed for such nodes.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 1cc35df847f7dba4ba06cb65bc41713df5d41404
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Fri Nov 4 14:54:06 2011 -0400

    tipc: Remove obsolete comments about routing table updates
    
    Eliminates a block of comments that describe how routing table updates
    are to be handled. These comments no longer apply following the removal
    of TIPC's prototype multi-cluster support.
    
    Note that these changes are essentially cosmetic in nature, and have
    no impact on the actual operation of TIPC.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 5f6d9123f1c7ef7297b0da1620988fe16c738e75
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Fri Nov 4 13:24:29 2011 -0400

    tipc: Eliminate trivial buffer manipulation helper routines
    
    Gets rid of two inlined routines that simply call existing sk_buff
    manipulation routines, since there is no longer any extra processing
    done by the helper routines.
    
    Note that these changes are essentially cosmetic in nature, and have
    no impact on the actual operation of TIPC.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit a635b46bd884efc1fc98819cb5a200da255d575c
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Fri Nov 4 11:54:43 2011 -0400

    tipc: Hide internal details of node table implementation
    
    Relocates information about the size of TIPC's node table index and
    its associated hash function, since only node subsystem routines need
    to have access to this information.
    
    Note that these changes are essentially cosmetic in nature, and have
    no impact on the actual operation of TIPC.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 9efde4a0bd2f21dec0c7b40da2bf2c3e189e98e2
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu Nov 3 13:15:10 2011 -0400

    tipc: Eliminate a test for negative unsigned quantities
    
    Simplifies a comparison operation to eliminate a useless test that
    checks if an unsigned value is less than zero.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 732efba4d77e1b0857984c401a7b18784f51b075
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Thu Feb 23 15:44:08 2012 -0500

    tipc: nuke the delimit static inline function.
    
    This "shortform" is actually longer than typing out what it is really
    trying to do, and just makes reading the code more difficult, so
    lets simply shoot it in the head.
    
    In the case of log.c - the comparison is on a u32, so we can drop the
    check for < 0 at the same time.
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit f80c24d9964c8a15c55d1afc2dea327c5eff7d6b
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu Nov 3 11:12:01 2011 -0400

    tipc: Add check to prevent insertion of duplicate name table entries
    
    Adds a new check to TIPC's name table logic to reject any attempt to
    create a new name publication that is identical to an existing one.
    (Such an attempt will never happen under normal circumstances, but
    could arise if another network node malfunctions and issues a duplicate
    name publication message.)
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit c422f1bdc3d3f9f637b3d288a6601668e26111d6
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Nov 2 15:49:40 2011 -0400

    tipc: Simplify enforcement of reserved name type prohibition
    
    Streamlines the logic that prevents an application from binding a
    reserved TIPC name type to a port by moving the check to the code
    that handles a socket bind() operation. This allows internal TIPC
    subsystems to bind a reserved name without having to set an atomic
    flag to gain permission to use such a name. (This simplification is
    now possible due to the elimination of support for TIPC's native API.)
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit c74a46110fd5f97bf9299e68e9ed0453bdacb181
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Nov 2 15:08:44 2011 -0400

    tipc: Remove duplicate check of message destination node
    
    Eliminates a check in the processing of TIPC messages arriving from
    off node that ensures the message is destined for this node, since this
    check duplicates an earlier check. (The check would be necessary if TIPC
    needed to be able to route incoming messages to another node, but the
    elimination of multi-cluster support means that this never happens and
    all incoming messages are consumed by the receiving node.)
    
    Note: This change involves the elimination of a single "if" statement
    with a large "then" clause; consequently, a significant number of lines
    end up getting re-indented. In addition, a simple message header access
    routine that is no longer referenced is eliminated. However, the only
    functional change is the elimination of the single check described above.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 97878a405c0ffe0f6433e1fb51834d4619ece025
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Fri Oct 28 17:30:08 2011 -0400

    tipc: Detect duplicate nodes using different network interfaces
    
    Utilizes the new "node signature" field in neighbor discovery messages
    to ensure that all links TIPC associates with a given <Z.C.N> network
    address belong to the same neighboring node. (Previously, TIPC could not
    tell if link setup requests arriving on different interfaces were from
    the same node or from two different nodes that has mistakenly been assigned
    the same network address.)
    
    The revised algorithm for detecting a duplicate node considers both the
    node signature and the network interface adddress specified in a request
    message when deciding how to respond to a link setup request. This prevents
    false alarms that might otherwise arise during normal network operation
    under the following scenarios:
    
    a) A neighboring node reboots. (The node's signature changes, but the
    network interface address remains unchanged.)
    
    b) A neighboring node's network interface is replaced. (The node's signature
    remains unchanged, but the network interface address changes.)
    
    c) A neighboring node is completely replaced. (The node's signature and
    network interface address both change.)
    
    The algorithm also handles cases in which a node reboots and re-establishes
    its links to TIPC (or begins re-establishing those links) before TIPC
    detects that it is using a new node signature. In such cases of "delayed
    rediscovery" TIPC simply accepts the new signature without disrupting
    communication that is already underway over the links.
    
    Thanks to Laser [gotolaser@gmail.com] for his contributions to the
    development of this enhancement.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit fc0eea691a06ba8516795fb7a198239fb9db1cfc
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Fri Oct 28 16:26:41 2011 -0400

    tipc: Introduce node signature field in neighbor discovery message
    
    Adds support for the new "node signature" in neighbor discovery messages,
    which is a 16 bit identifier chosen randomly when TIPC is initialized.
    This field makes it possible for nodes receiving a neighbor discovery
    message to detect if multiple neighboring nodes are using the same network
    address (i.e. <Z.C.N>), even when the messages are arriving on different
    interfaces.
    
    This first phase of node signature support creates the signature,
    incorporates it into outgoing neighbor discovery messages, and tracks
    the signature used by valid neighbors. An upcoming patch builds on this
    foundation to implement the improved duplicate neighbor detection checking.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 17b8a74f00474fb4fe6154aa426a80bcf1220997
Merge: 0e15df490eef dff10e9e6376
Author: David S. Miller <davem@davemloft.net>
Date:   Tue Feb 7 12:31:01 2012 -0500

    Merge branch 'tipc_net-next' of git://git.kernel.org/pub/scm/linux/kernel/git/paulg/linux

commit dff10e9e637663c8c5dd0bae1a8f0e899cbb4a36
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Nov 2 10:32:14 2011 -0400

    tipc: Minor optimization to rejection of connection-based messages
    
    Modifies message rejection logic so that TIPC doesn't attempt to
    send a FIN message to the rejecting port if it is known in advance
    that there is no such message because the rejecting port doesn't exist.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 3175bd9add570f3b5c06877369897b334556a2ff
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Fri Oct 28 12:03:00 2011 -0400

    tipc: Eliminate alteration of publication key during name table purging
    
    Removes code that alters the publication key of a name table entry
    that is being forcibly purged from TIPC's name table after contact
    with the publishing node has been lost.
    
    Current TIPC ensures that all defunct names are purged before
    re-establishing contact with a failed node.  There used to be a risk
    that the publication might be accidentally deleted because it might be
    re-added to the name table before the purge operation was completed.
    But now there is no longer a need to ensure that the new key is different
    than the old one.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 63e7f1ac2855ba56f15d8189694ca9bd16ae4107
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu Oct 27 16:43:09 2011 -0400

    tipc: Prevent loss of fragmented messages over broadcast link
    
    Modifies broadcast link so that an incoming fragmented message is not
    lost if reassembly cannot begin because there currently is no buffer
    big enough to hold the entire reassembled message. The broadcast link
    now ignores the first fragment completely, which causes the sending node
    to retransmit the first fragment so that reassembly can be re-attempted.
    
    Previously, the sender would have had no reason to retransmit the 1st
    fragment, so we would never have a chance to re-try the allocation.
    
    To do this cleanly without duplicaton, a new bclink_accept_pkt()
    function is introduced.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit b76b27cad5ade1d483d4b94df6b35976bccf1055
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu Oct 27 16:31:26 2011 -0400

    tipc: Prevent loss of fragmented messages over unicast links
    
    Modifies unicast link endpoint logic so an incoming fragmented message
    is not lost if reassembly cannot begin because there is no buffer big
    enough to hold the entire reassembled message. The link endpoint now
    ignores the first fragment completely, which causes the sending node to
    retransmit the first fragment so that reassembly can be re-attempted.
    
    Previously, the sender would have had no reason to retransmit the 1st
    fragment, so we would never have a chance to re-try the allocation.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>

commit 1ec2bb08407b377e5954b3f9479c2bf67fc925a9
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu Oct 27 15:03:24 2011 -0400

    tipc: Remove obsolete broadcast tag capability
    
    Eliminates support for the broadcast tag field, which is no longer
    used by broadcast link NACK messages.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 7a54d4a99dcbbfdf1d4550faa19b615091137953
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu Oct 27 14:17:53 2011 -0400

    tipc: Major redesign of broadcast link ACK/NACK algorithms
    
    Completely redesigns broadcast link ACK and NACK mechanisms to prevent
    spurious retransmit requests in dual LAN networks, and to prevent the
    broadcast link from stalling due to the failure of a receiving node to
    acknowledge receiving a broadcast message or request its retransmission.
    
    Note: These changes only impact the timing of when ACK and NACK messages
    are sent, and not the basic broadcast link protocol itself, so inter-
    operability with nodes using the "classic" algorithms is maintained.
    
    The revised algorithms are as follows:
    
    1) An explicit ACK message is still sent after receiving 16 in-sequence
    messages, and implicit ACK information continues to be carried in other
    unicast link message headers (including link state messages).  However,
    the timing of explicit ACKs is now based on the receiving node's absolute
    network address rather than its relative network address to ensure that
    the failure of another node does not delay the ACK beyond its 16 message
    target.
    
    2) A NACK message is now typically sent only when a message gap persists
    for two consecutive incoming link state messages; this ensures that a
    suspected gap is not confirmed until both LANs in a dual LAN network have
    had an opportunity to deliver the message, thereby preventing spurious NACKs.
    A NACK message can also be generated by the arrival of a single link state
    message, if the deferred queue is so big that the current message gap
    cannot be the result of "normal" mis-ordering due to the use of dual LANs
    (or one LAN using a bonded interface). Since link state messages typically
    arrive at different nodes at different times the problem of multiple nodes
    issuing identical NACKs simultaneously is inherently avoided.
    
    3) Nodes continue to "peek" at NACK messages sent by other nodes. If
    another node requests retransmission of a message gap suspected (but not
    yet confirmed) by the peeking node, the peeking node forgets about the
    gap and does not generate a duplicate retransmit request. (If the peeking
    node subsequently fails to receive the lost message, later link state
    messages will cause it to rediscover and confirm the gap and send another
    NACK.)
    
    4) Message gap "equality" is now determined by the start of the gap only.
    This is sufficient to deal with the most common cases of message loss,
    and eliminates the need for complex end of gap computations.
    
    5) A peeking node no longer tries to determine whether it should send a
    complementary NACK, since the most common cases of message loss don't
    require it to be sent. Consequently, the node no longer examines the
    "broadcast tag" field of a NACK message when peeking.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit b98158e3b36645305363a598d91c544fa31446f1
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Oct 26 16:13:35 2011 -0400

    tipc: Add missing locks in broadcast link statistics accumulation
    
    Ensures that all attempts to update broadcast link statistics are done
    only while holding the lock that protects the link's main data structures,
    to prevent interference by simultaneous updates caused by messages
    arriving on other interfaces.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 0232c5a566ff52d5c9fc1dda70253c942628ca66
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Oct 26 15:57:26 2011 -0400

    tipc: Fix bug in broadcast link duplicate message statistics
    
    Modifies broadcast link so that it increments the "received duplicate
    message" count if an incoming message cannot be added to the deferred
    message queue because it is already present in the queue. (The aligns
    broadcast link behavior with that of TIPC's unicast links.)
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 8a275a6a30ba871eb34ea41c1fbb507039f4c0dc
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Oct 26 15:33:44 2011 -0400

    tipc: Fix node lock reclamation issues in broadcast link reception
    
    Fixes a pair of problems in broadcast link message reception code
    relating to the reclamation of the node lock after consuming an
    in-sequence message.
    
    1) Now retests to see if the sending node is still up after reclaiming
       the node lock, and bails out if it is non-operational.
    
    2) Now manipulates the node's deferred message queue only after
       reclaiming the node lock, rather than using queue head pointer
       information that was cached previously.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 57732560d1aa7d454d10e557f8959d19d1454174
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Oct 26 11:41:45 2011 -0400

    tipc: Add missing broadcast link lock when sending NACK
    
    Ensures that any attempt to send a NACK message over TIPC's broadcast
    link has exclusive access to the link's main data structures, to prevent
    interference with a simultaneous attempt to send other broadcast link
    traffic (such as application-generated multicast messages).
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 47361c87c504d89f1ba50b4230d56ef67792c258
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Oct 26 10:55:16 2011 -0400

    tipc: Fix problem with broadcast link synchronization between nodes
    
    Corrects a problem in which a link endpoint that activates as the
    result of receiving a RESET/STATE sequence of link protocol messages
    fails to properly record the broadcast link status information about
    the node to which it is now communicating with. (The problem does
    not occur with the more common RESET/ACTIVATE sequence of messages.)
    The fix ensures that the broadcast link status info is updated after
    the RESET message resets the link endpoint, rather than before, thereby
    preventing new information from being overwritten by the reset operation.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 934993137199ffb56fef50664f87e71cdb3471b0
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Oct 25 15:14:46 2011 -0400

    tipc: Ensure broadcast link re-acquires node after link failure
    
    Fix a bug that can prevent TIPC from sending broadcast messages to a node
    if contact with the node is lost and then regained. The problem occurs if
    the broadcast link first clears the flag indicating the node is part of the
    link's distribution set (when it loses contact with the node), and later
    fails to restore the flag (when contact is regained); restoration fails
    if contact with the node is regained by implicit unicast link activation
    triggered by the arrival of a data message, rather than explicitly by the
    arrival of a link activation message.
    
    The broadcast link now uses separate fields to track whether a node is
    theoretically capable of receiving broadcast messages versus whether it is
    actually part of the link's distribution set. The former member is updated
    by the receipt of link protocol messages, which can occur at any time; the
    latter member is updated only when contact with the node is gained or lost.
    This change also permits the simplification of several conditional
    expressions since the broadcast link's "supported" field can now only be
    set if there are working links to the associated node.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 4d75313ce9b832efc4efb487f080b5ed72beae2c
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Oct 25 12:19:05 2011 -0400

    tipc: Prevent broadcast link stalling in dual LAN environments
    
    Ensure that sequence number information about incoming broadcast link
    messages is initialized only by the activation of the first link to a
    given cluster node.  Previously, a race condition allowed reset and/or
    activation messages for a second link to re-initialize this sequence
    number information with obsolete values. This could trigger TIPC to
    request the retransmission of previously acknowledged broadcast link
    messages from that node, resulting in broadcast link processing becoming
    stalled if the node had already released one or more of those messages
    and was unable to perform the required retransmission.
    
    Thanks to Laser <gotolaser@gmail.com> for identifying this problem
    and assisting in the development of this fix.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 92d2c905b404d8d056ce35a0ce645e23529742c2
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Oct 25 11:20:26 2011 -0400

    tipc: Prevent transmission of outdated link protocol messages
    
    Ensures that a link endpoint discards any previously deferred link
    protocol message whenever it attempts to send a new one.
    
    Previously, it was possible for a link protocol message that was unsent
    due to congestion to be transmitted after newer protocol messages had
    been sent. The stale link protocol message might then cause the receiving
    link endpoint to malfunction because of its outdated conent.
    
    Thanks to Osamu Kaminuma [okaminum@avaya.com] for diagnosing the problem
    and contributing a prototype patch.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 8809b255a9fca8c3179491d3bc9268c42e23ba97
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Oct 25 10:44:35 2011 -0400

    tipc: improve the link deferred queue insertion algorithm
    
    Re-code the algorithm for inserting an out-of-sequence message into
    a unicast or broadcast link's deferred message queue.  It remains
    functionally equivalent but should be easier to understand/maintain.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 56be178875cf699a17cc285171492353620ef0ae
Merge: 7f8e3234c5f7 f19765f4f7dc
Author: David S. Miller <davem@davemloft.net>
Date:   Fri Dec 30 13:46:54 2011 -0500

    Merge branch 'tipc-Dec29-2011' of git://git.kernel.org/pub/scm/linux/kernel/git/paulg/linux

commit f19765f4f7dc3cb118cf5f151ed56e01063082ed
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Thu Dec 29 21:39:49 2011 -0500

    tipc: rename struct bearer_name to struct tipc_bearer_names
    
    The addition of the "s" to indicate pluralization is intentional,
    since the struct actually contains two name variants.
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit a18c4bc3ea3c23f658655b1eee4f62cb71d51efd
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Thu Dec 29 20:58:42 2011 -0500

    tipc: rename struct link* to struct tipc_link*
    
    This converts the following:
    
            struct link             ->      struct tipc_link
            struct link_req         ->      struct tipc_link_req
            struct link_name        ->      struct tipc_link_name
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 7f9ab6ac2e79b9658eba7c8e3ad8a4392d308057
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Thu Dec 29 20:55:27 2011 -0500

    tipc: rename struct bcbearer* to tipc_bcbearer*
    
    This changes both the struct bcbearer and struct bcbearer_pair to
    have the "tipc_" prefix.  Runtime behaviour is unchanged.
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 6765fd677168df46dbed3cb4c32b9104ce2d3e83
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Thu Dec 29 20:52:18 2011 -0500

    tipc: rename struct bclink to struct tipc_bclink
    
    Make this rename so that it is consistent with the majority
    of the other tipc structs and to assist in removing any
    ambiguity with other similar names in other subsystems.
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 11f9990604637e08f163f919ab37d8834dff5583
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Thu Dec 29 20:49:39 2011 -0500

    tipc: rename struct subscriber to struct tipc_subscriber
    
    Make this rename so that it is consistent with the majority
    of the other tipc structs and to assist in removing any
    ambiguity with other similar names in other subsystems.
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit fead39098badacbfb5890de9a10e5b265788a524
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Thu Dec 29 20:43:44 2011 -0500

    tipc: rename struct subscription to struct tipc_subscription
    
    Make this rename so that it is consistent with the majority
    of the other tipc structs and to assist in removing any
    ambiguity with other similar names in other subsystems.
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 4584310b4a787c9b70e5507a8b5288ba32b0a909
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Thu Dec 29 20:33:30 2011 -0500

    tipc: rename struct port_list to struct tipc_port_list
    
    Make this rename so that it is consistent with the majority
    of the other tipc structs and to assist in removing any
    ambiguity with other similar names in other subsystems.
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 358a0d1c9edcf6ff041776d65cdc2bc59887ab9c
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Thu Dec 29 20:19:42 2011 -0500

    tipc: rename struct media to struct tipc_media
    
    Give it a meaningful prefix, as suggested by DaveM, so that it
    is consistent with things like struct tipc_bearer, and so it isn't
    confused with anything else.  This has no impact on the actual
    runtime code behaviour.
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit f905730c7ed97dc2dfcbf6af894acd6ce70a62e7
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon Oct 24 16:03:12 2011 -0400

    tipc: Allow use of buf_seqno() helper routine by unicast links
    
    Migrates the buf_seqno() helper routine from broadcast link level to
    unicast link level so that it can be used both types of TIPC links.
    This is a cosmetic change only, and does not affect the operation of TIPC.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 3655959143ebf1fd32e28a448d204be2f7f13e99
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon Oct 24 15:26:24 2011 -0400

    tipc: Ignore broadcast acknowledgements that are out-of-range
    
    Adds checks to TIPC's broadcast link so that it ignores any
    acknowledgement message containing a sequence number that does not
    correspond to an unacknowledged message currently in the broadcast
    link's transmit queue.
    
    This change prevents the broadcast link from becoming stalled if a
    newly booted node receives stale broadcast link acknowledgement
    information from another node that has not yet fully synchronized
    its end of the broadcast link to reflect the current state of the
    new node's end.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 10745cd5990542447268f60078133df8b1ee960b
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon Oct 24 14:59:20 2011 -0400

    tipc: Flush unsent broadcast messages when contact with last node is lost
    
    Adds code to release any unsent broadcast messages in the broadcast link
    transmit queue if TIPC loses contact with its only neighboring node.
    Previously, a broadcast link that was in the congested state would hold
    on to the unsent messages, even though the messages were now undeliverable.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 9157bafb44637a2cfefc222d6551100ead40e79e
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon Oct 24 13:27:31 2011 -0400

    tipc: Minor optimization of broadcast link transmit queue statistic
    
    The two broadcast link statistics fields that are used to derive the
    average length of that link's transmit queue are now updated only after
    a successful attempt to send a broadcast message, since there is no need
    to update these values when an unsuccessful send attempt leaves the
    queue unchanged.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 2b78f9a002dccc587912af4da3bf1db86909de91
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon Oct 24 13:05:55 2011 -0400

    tipc: Handle broadcast attempt when no neighboring nodes exist
    
    Adds a check to detect when an attempt is made to send a message
    via the broadcast link and no neighboring nodes are currently available
    to receive it. Rather than wasting effort passing the message to the
    broadcast link and broadcast bearer, who will only throw it away,
    TIPC now frees the message immediately and reports success (i.e. the
    message has been delivered to all available destinations).
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit cd3decdfd1dbab8a585eafe2e5b9866f193de99e
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon Oct 24 11:18:12 2011 -0400

    tipc: Ensure broadcast link spinlock is held when updating node map
    
    Fixes oversight that allowed broadcast link node map to be updated without
    first taking the broadcast link spinlock that protects the map. As part
    of this fix the node map has been incorporated into the broadcast link
    structure to make the need for such protection more evident.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit c47e9b918844ab7bb139eada7b085c576ddf0afb
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon Oct 24 10:29:26 2011 -0400

    tipc: Eliminate dynamic allocation of broadcast link data structures
    
    Creates global variables to hold the broadcast link's pseudo-bearer and
    pseudo-link structures, rather than allocating them dynamically. There
    is only a single instance of each structure, and changing over to static
    allocation allows elimination of code to handle the cases where dynamic
    allocation was unsuccessful.
    
    The memset in the teardown code may look like they aren't used, but
    the same teardown code is run when there is a non-fatal error at
    init-time, so that stale data isn't present when the user fixes the
    cause of the soft error.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 945af1c39df00a1e5873e38145432ba752ec49a0
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Fri Oct 14 14:42:25 2011 -0400

    tipc: Eliminate useless check when network address is assigned
    
    Gets rid of an unnecessary check in the routine that updates the port id
    of a node's name publications when the node is assigned a network address,
    since the routine is only invoked if the new address is different from
    the existing one.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 97f1b625d133b44d38b8b55ec2cbe35d7ef94f3a
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu Oct 20 09:48:05 2011 -0400

    tipc: Minor correction to TIPC module unloading
    
    Modifies TIPC's module unloading logic to switch itself into "single
    node" mode before starting to terminate networking support. This helps
    to ensure that no operations that require TIPC to be in "networking"
    mode can initiate once unloading starts.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit d47ce2ece33eac5c2b12d52622d1b17fe6a34ce9
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Oct 19 15:39:21 2011 -0400

    tipc: Eliminate useless memset operations in Ethernet media support
    
    Gets rid of two pointless operations that zero out the array used to
    record information about TIPC's Ethernet bearers. There is no need to
    initialize the array on start up since it is a global variable that is
    already zero'd out, and there is no need to zero it out on exit because
    the array is never referenced again.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 64b32f7e38627a325c825087318c09075a5edc42
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Oct 19 15:18:11 2011 -0400

    tipc: Do timely cleanup of disabled Ethernet bearer resources
    
    Modifies Ethernet bearer disable logic to break the association between
    the bearer and its device driver at the time the bearer is disabled,
    rather than when the TIPC module is unloaded. This allows the array
    entry used by the disabled bearer to be re-used if the same bearer (or
    a different one) is subsequently enabled.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 8c12118db77dce5a7abf1a0e87af56592fdd7c09
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Oct 19 14:58:29 2011 -0400

    tipc: Minor optimization to deactivation of Ethernet media suppot
    
    Change TIPC's shutdown code to deactivate generic networking support
    before terminating Ethernet media support. The deactivation of generic
    networking support causes all existing bearers to be destroyed, meaning
    the Ethernet media termination routine no longer has to bother marking
    them as unavailable.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit bfec73d7e45cdf570d649a547050295789e1e6fb
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Oct 18 14:47:02 2011 -0400

    tipc: Revise comment justifying release of configuration spinlock
    
    Comment-only change to better explain why TIPC's configuration lock is
    temporarily released while activating support for network interfaces,
    and why the existing activation code doesn't require rework.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 5c216e1d28c82332db0fa53e30536577fb6130c6
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Oct 18 11:34:29 2011 -0400

    tipc: Allow run-time alteration of default link settings
    
    Permits run-time alteration of default link settings on a per-media
    and per-bearer basis, in addition to the existing per-link basis.
    The following syntax can now be used:
    
        tipc-config -lt=<link-name|bearer-name|media-name>/<tolerance>
        tipc-config -lp=<link-name|bearer-name|media-name>/<priority>
        tipc-config -lw=<link-name|bearer-name|media-name>/<window>
    
    Note that changes to the default settings for a given media type has
    no effect on the default settings used by existing bearers. Similarly,
    changes to default bearer settings has no effect on existing link
    endpoints that utilize that interface.
    
    Thanks to Florian Westphal <fw@strlen.de> for his contributions to
    the development of this enhancement.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit d6d4577ae48bcfde06894540ea793abf076e1643
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Fri Oct 7 15:48:41 2011 -0400

    tipc: Ignore neighbor discovery messages containing invalid address
    
    Adds a check to ensure that TIPC ignores an incoming neighbor discovery
    message that specifies an invalid media address as its source. The check
    ensures that the source address is a valid, non-broadcast address that
    could legally be used by a neighboring link endpoint.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 3d749a6a26b0811b4b2bb4ec2c47cd630a6bbf88
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Fri Oct 7 15:19:11 2011 -0400

    tipc: Hide media-specific addressing details from generic bearer code
    
    Reworks TIPC's media address data structure and associated processing
    routines to transfer all media-specific details of address conversion
    to the associated TIPC media adaptation code. TIPC's generic bearer code
    now only needs to know which media type an address is associated with
    and whether or not it is a broadcast address, and totally ignores the
    "value" field that contains the actual media-specific addressing info.
    
    These changes eliminate the need for a number of endianness conversion
    operations and will make it easier for TIPC to support new media types
    in the future.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 4d163a326fa4868cce1bb75dd95855d40e5497c6
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Fri Oct 7 13:37:34 2011 -0400

    tipc: Add new address conversion routines for Ethernet media
    
    Enhances TIPC's Ethernet media support to provide 3 new address conversion
    routines, which allow TIPC to interpret an address that is in string form
    and to convert an address to and from the 20 byte format used in TIPC's
    neighbor discovery messages.
    
    These routines are pre-requisites to a follow on commit that hides all
    media-specific addressing details from TIPC's generic bearer code.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit c61b666e260d5cc2e0203b21c689321e6ab0d676
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Fri Oct 7 11:31:49 2011 -0400

    tipc: Improve handling of media address printing errors
    
    Enhances conversion of a media address to printable form so that an
    unconvertable address will be displayed as a string of hex digits,
    rather than not being displayed at all. (Also removes a pointless check
    for the existence of the media-specific address conversion routine,
    since the routine is not optional.)
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 6c349210101352103d9055636845155bc801ae9b
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Fri Oct 7 09:54:44 2011 -0400

    tipc: Streamline media registration error checking
    
    Simplifies error handling performed during media registration, since
    TIPC no longer supports the dynamic addition of new media types that
    are potentially error-prone. These simplifications include the following:
    
    1) No longer check for premature registration of a new media type.
    2) No longer check for negative link priority values (which was pointless
       since such values are unsigned, and could cause a compiler warning).
    3) No longer generate a warning describing the exact cause of any
       registration failure (just warns that overall registration failed).
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit a31abe8daee5dd618aecb1484dbe9bf68c5c8a4a
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Fri Oct 7 09:25:12 2011 -0400

    tipc: Eliminate duplication of media structures
    
    Changes TIPC's list of registered media types from an array of media
    structures to an array of pointers to media structures. This eliminates
    the need to copy of the contents of the structure passed in during media
    registration.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit c79be4549ae39edc026aa67eb64a25424542943f
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu Oct 6 16:40:55 2011 -0400

    tipc: Optimize detection of duplicate media registration
    
    Streamlines the detection of an attempt to register a TIPC media structure
    using an already registered name or type identifier. The revised logic now
    reuses an existing routine to detect an existing name and no longer
    unnecessarily manipulates the media type counter during an unsuccessful
    registration attempt.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 706767da1bd0726d8fbc62e4818cb29193676a74
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu Oct 6 15:28:44 2011 -0400

    tipc: Register new media using pre-compiled structure
    
    Speeds up the registration of TIPC media types by passing in a structure
    containing the required information, rather than by passing in the various
    fields describing the media type individually.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 2060a5774452e35b4a1dc4371abbb5ffd691355f
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu Oct 6 13:57:51 2011 -0400

    tipc: Enable use by containers having their own network namespace
    
    Permits a Linux container to use TIPC sockets even when it has its own
    network namespace defined by removing the check that prohibits such use.
    This makes it possible for users who wish to isolate their container
    network traffic from normal network traffic to utilize TIPC.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 46151ae81758f05086e17fd4e4da129afe100f93
Merge: 653fc9155769 94362c7e49b2
Author: David S. Miller <davem@davemloft.net>
Date:   Tue Sep 20 14:39:04 2011 -0400

    Merge branch 'tipc-Sep17-2011' of git://openlinux.windriver.com/people/paulg/net-next

commit 94362c7e49b2eccf9fe86112b8090939aa2f5355
Author: Ying Xue <ying.xue@windriver.com>
Date:   Mon Aug 8 22:45:27 2011 -0400

    tipc: Remove unused link event tracking code
    
    Elimintes prototype link event tracking functionality that has never
    been fleshed out and doesn't do anything useful at the current time.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 7e2447763c28b8b67af67e757508c1a05c2c85b9
Author: Ying Xue <ying.xue@windriver.com>
Date:   Tue Jul 19 04:21:56 2011 -0400

    tipc: Remove callback field from subscription structure
    
    Eliminate the "event_cb" member from TIPC's "subscription" structure
    since the function pointer it holds always points to subscr_send_event().
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 245f3d342dccad293d0cd0bbe231051b2daa695f
Author: Ying Xue <ying.xue@windriver.com>
Date:   Wed Jul 6 06:01:13 2011 -0400

    tipc: Simplify prohibition of listen and accept for connectionless sockets
    
    Modifies the proto_ops structure used by TIPC DGRAM and RDM sockets
    so that calls to listen() and accept() are handled by existing kernel
    "unsupported operation" routines, and eliminates the related checks
    in the listen and accept routines used by SEQPACKET and STREAM sockets
    that are no longer needed.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 1d835874af143a5c8273268d09e2f259b4c1ba89
Author: Ying Xue <ying.xue@windriver.com>
Date:   Wed Jul 6 05:53:15 2011 -0400

    tipc: Add support for SO_SNDTIMEO socket option
    
    Adds support for the SO_SNDTIMEO socket option. (This complements the
    existing support for SO_RCVTIMEO that is already present.)
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 9aa88c2a509e11e6efc466c88b386e0e01bef731
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue May 31 13:38:02 2011 -0400

    tipc: Enhance sending of bulk name table messages
    
    Modifies the initial transfer of name table entries to a new neighboring
    node so that the messages are enqueued as a unit, rather than individually.
    
    The revised algorithm now locates the link carrying the message only once,
    and eliminates unnecessary checks for link congestion, message fragmentation,
    and message bundling that are not required when sending these messages.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 1c553bb52eb4c58333a843c0a5888d2329909f62
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Fri Sep 2 13:45:34 2011 -0400

    tipc: relocate/coalesce node cast in tipc_named_node_up
    
    Functions like this are called using unsigned longs from
    function pointers.  In this case, the function is passed in
    a node which is normally internally treated as a u32 by TIPC.
    
    Rather than add more casts into this function in the future
    for each added use of node within, move the cast to a single
    place on a local.
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 149ce37c8de72c64fc4f66c1b4cf7a0fb66b7ee9
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue May 31 11:05:02 2011 -0400

    tipc: Prevent fragmented messages during initial name table exchange
    
    Reduces the maximum size of messages sent during the initial exchange
    of name table information between two nodes to be no larger than the
    MTU of the first link established between the nodes. This ensures that
    messages will never need to be fragmented, which would add unnecessary
    overhead to the name table synchronization mechanism.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 909234cdd2b5954374e346c105b648f6c2800f55
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Fri May 27 15:09:40 2011 -0400

    tipc: Lower limits for number of bearers and media types
    
    Reduces the number of bearers a node can support to 2, which can use
    identical or non-identical media. This change won't impact users,
    since they are currently limited to a maximum of 2 Ethernet bearers,
    and will save memory by eliminating a number of unused entries in
    TIPC's media and bearer arrays.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 18abf0fb6b8f05be2a289abbbc054d4869281476
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Fri May 27 14:02:48 2011 -0400

    tipc: Remove redundant search when enabling bearer
    
    Removes obsolete code that searches for an Ethernet bearer structure entry
    to use for a newly enabled bearer, since this search is now performed
    at the start of the enabling algorithm.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit bcd326e844c46e0533a79f91e75dea160469cf86
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Fri May 27 13:59:17 2011 -0400

    tipc: Fix unsafe device list search when enabling bearer
    
    Ensures that the device list lock is held while trying to locate
    the Ethernet device used by a newly enabled bearer, so that the
    addition or removal of a device does not cause problems.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit b4b5610223f17790419b03eaa962b0e3ecf930d7
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Fri May 27 11:00:51 2011 -0400

    tipc: Ensure both nodes recognize loss of contact between them
    
    Enhances TIPC to ensure that a node that loses contact with a
    neighboring node does not allow contact to be re-established until
    it sees that its peer has also recognized the loss of contact.
    
    Previously, nodes that were connected by two or more links could
    encounter a situation in which node A would lose contact with node B
    on all of its links, purge its name table of names published by B,
    and then fail to repopulate those names once contact with B was restored.
    This would happen because B was able to re-establish one or more links
    so quickly that it never reached a point where it had no links to A --
    meaning that B never saw a loss of contact with A, and consequently
    didn't re-publish its names to A.
    
    This problem is now prevented by enhancing the cleanup done by TIPC
    following a loss of contact with a neighboring node to ensure that
    node A ignores all messages sent by B until it receives a LINK_PROTOCOL
    message that indicates B has lost contact with A, thereby preventing
    the (re)establishment of links between the nodes. The loss of contact
    is recognized when a RESET or ACTIVATE message is received that has
    a "redundant link exists" field of 0, indicating that B's sending link
    endpoint is in a reset state and that B has no other working links.
    
    Additionally, TIPC now suppresses the sending of (most) link protocol
    messages to a neighboring node while it is cleaning up after an earlier
    loss of contact with that node. This stops the peer node from prematurely
    activating its link endpoint, which would prevent TIPC from later
    activating its own end. TIPC still allows outgoing RESET messages to
    occur during cleanup, to avoid problems if its own node recognizes
    the loss of contact first and tries to notify the peer of the situation.
    
    Finally, TIPC now recognizes an impending loss of contact with a peer node
    as soon as it receives a RESET message on a working link that is the
    peer's only link to the node, and ensures that the link protocol
    suppression mentioned above goes into effect right away -- that is,
    even before its own link endpoints have failed. This is necessary to
    ensure correct operation when there are redundant links between the nodes,
    since otherwise TIPC would send an ACTIVATE message upon receiving a RESET
    on its first link and only begin suppressing when a RESET on its second
    link was received, instead of initiating suppression with the first RESET
    message as it needs to.
    
    Note: The reworked cleanup code also eliminates a check that prevented
    a link endpoint's discovery object from responding to incoming messages
    while stale name table entries are being purged. This check is now
    unnecessary and would have slowed down re-establishment of communication
    between the nodes in some situations.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 4b3743ef2ca67e1f8ef7e9d4c551d6ba6ee85584
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu May 26 13:59:17 2011 -0400

    tipc: Ensure congested links receive bearer status updates
    
    Modifies code that disables a bearer to ensure that all of its links
    are deleted, not just its uncongested links. Similarly, modifies code
    that blocks a bearer to ensure that all of its links are reset, not
    just its uncongested links.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit a0f40f02ef0783688233caf737a17f1f56283e2b
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu May 26 13:44:34 2011 -0400

    tipc: Prevent rounding issues when saving connect timeout option
    
    Saves a socket's TIPC_CONN_TIMEOUT socket option value in its original
    form (milliseconds), rather than jiffies. This ensures that the exact
    value set using setsockopt() is always returned by getsockopt(), without
    being subject to rounding issues introduced by a ms->jiffies->ms
    conversion sequence.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit ff60af8c16aa3b8ee51a0a6b4c4ea42342d1607d
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu May 26 13:24:24 2011 -0400

    tipc: Eliminate redundant check when sending messages
    
    Eliminates code in tipc_send_buf_fast() that handles messages
    sent to a destination on the current node, since the only caller
    of the routine only passes in messages destined for other nodes.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 0f38513d22e14f607fc791364856b08cac9f91c9
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu Apr 7 15:47:48 2011 -0400

    tipc: Remove obsolete congestion handling when sending a broadcast NACK
    
    Eliminates obsolete code that handles broadcast bearer congestion when
    the broadast link sends a NACK message, since the broadcast pseudo-bearer
    never becomes blocked.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 9f6bdcd4286145e812058e4111e906e9830514d8
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu Apr 7 14:57:53 2011 -0400

    tipc: Discard incoming broadcast messages that are unexpected
    
    Modifies TIPC's incoming broadcast packet handler to discard messages
    that cannot legally be sent over the broadcast link, including:
    
    - broadcast protocol messages that do no contain state information
    - payload messages that are not named multicast messages
    - any other form of message except for bundled messages, fragmented
      messages, and name distribution messages.
    
    These checks are needed to prevent TIPC from handing an unexpected
    message to a routine that isn't prepared to handle it, which could
    lead to incorrect processing (up to and including invalid memory
    references caused by attempts to access message fields that aren't
    present in the message).
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 693d03ae3c2bafd7caca1cf4ade9f23f107e33c1
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu Apr 7 14:20:45 2011 -0400

    tipc: Remove deferred queue head caching during broadcast message reception
    
    Modifies TIPC's incoming broadcast packet handler so that it no longer
    pre-reads information about the deferred packet queue, since the cached
    value is unreliable once the associated node lock has been released.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 5d3c488dfe5f797d9f3cee2e8928aad8a2f6e44f
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu Apr 7 13:57:25 2011 -0400

    tipc: Fix node lock problems during broadcast message reception
    
    Modifies TIPC's incoming broadcast packet handler to ensure that the
    node lock associated with the sender of the packet is held whenever
    node-related data structure fields are accessed. The routine is also
    restructured with a single exit point, making it easier to ensure
    the node lock is properly released and the incoming packet is properly
    disposed of.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 169073db442cb9e5aa2b70a2e4158d4f35a3b810
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu Apr 7 13:05:25 2011 -0400

    tipc: Prevent broadcast link stalling when another node fails
    
    Ensure that broadcast link messages that have not been acknowledged
    by a newly failed node do not get an implied acknowledgement until the
    failed node is removed from the broadcast link's map of reachable nodes.
    
    Previously, a race condition allowed a new broadcast link message to be
    sent after the implicit acknowledgement processing was completed, but
    before the map of reachable nodes was updated, resulting in the message
    having an expected acknowledgement count that required the failed node
    to explicitly acknowledge the message. Since this would never occur
    the new message would remain in the broadcast link's transmit queue
    forever, eventually causing the link to become congested and "stall".
    Delaying the implicit acknowledgement processing until after the update
    of the map of reachable nodes eliminates this race condition and prevents
    stalling.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit c5bd4d85d356199ebdbc2c8bbfff86a292c65a9f
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu Apr 7 11:58:08 2011 -0400

    tipc: Enhance cleanup of broadcast link when contact with node is lost
    
    Enhances cleanup of broadcast link-related information when contact
    with a node is lost.
    
    1) All broadcast link-related cleanup now occurs only if the lost node
       was capable of communicating over the broadcast link.
    
    2) Following cleanup, the lost node is marked as no longer supporting
       the broadcast link, ensuring that any remaining broadcast messages
       received from that node prior to the re-establishment of a normal
       communication link are ignored.
    
    Thanks to Surya [Suryanarayana.Garlapati@emerson.com] for contributing
    a prototype version of this patch.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 23f0ff906af93be6edb579824474117b232c7cc0
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu Apr 7 11:25:26 2011 -0400

    tipc: Remove non-executable code to handle broadcast bearer congestion
    
    Eliminates code associated with the sending of unsent broadcast link
    traffic when the broadcast pseudo-bearer becomes unblocked following a
    temporary congestion situation. This code is non-executable because the
    broadcast pseudo-bearer never becomes blocked [see tipc_bcbearer_send()].
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 2ff9f924a565aa22c06169c89fcd2133d820a9d2
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu Apr 7 10:44:54 2011 -0400

    tipc: Cosmetic changes to broadcast bearer send routine
    
    Updates the comments in the broadcast bearer send routine to more
    accurately describe the processing done by the routine. Also replaces
    the improper use of a TIPC payload message error status symbol (in a place
    that has nothing to do with such errors) with its numeric equivalent.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 2e2d9be8454e295374dfbddd7ceaba2e4fc01c76
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu Apr 7 10:22:31 2011 -0400

    tipc: Update obsolete references to multicast link
    
    Updates TIPC's broadcast link in a couple of places that were missed
    during the transition from its former name ("multicast-link") to its
    current name ("broadcast-link"). These changes are essentially cosmetic
    and do not affect the overall operation of TIPC.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 641c218d120b03bdea4f658ab44930587cff9158
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu Apr 7 09:54:43 2011 -0400

    tipc: Enhance filtering of out-dated link reset messages
    
    Ensure TIPC ignores an out-dated link reset message whose session
    number predates the current session number. (Previously, TIPC only
    ignored an out-date reset message whose session number was equal
    to the current link session number.)
    
    Out-dated link reset messages should not occur under normal circumstances;
    however, they can be generated if a link endpoint is unable to send a
    link reset message right away and queues it for later delivery, but the
    queued message is not sent until after the link is established.
    
    Thanks to Laser [gotolaser@gmail.com] for diagnosing the problem and
    contributing a prototype patch.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit f882cb7684cf54d4f5d3e25443a80a039e1b4bd7
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu Apr 7 09:43:27 2011 -0400

    tipc: Initialize peer session field of newly created link endpoint
    
    Initializes the peer session number field of a newly created link
    endpoint to an invalid value. This eliminates the remote possibility
    that it will accidentally match the session number used by the peer
    the first time the link is activated, and cause the link to ignore
    a valid RESET message.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 062b4c99fe70f95e07e8af15617750d2a6fb6789
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu Apr 7 09:28:47 2011 -0400

    tipc: Display meaningful peer interface name during link creation
    
    Sets the peer interface portion of the name of a newly created link
    endpoint to "unknown". This ensures that state and statistics information
    can be properly displayed during the time between the link endpoint's
    creation and the time handshaking with its peer is completed.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit ed33a9c4e354b08630bcf4cea70596f690487108
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Apr 5 15:15:04 2011 -0400

    tipc: Eliminate obsolete filter for unexpected unicast messages
    
    Removes a test that ensures unicast link endpoints discard an incoming
    message if it will not be consumed by the node itself and cannot be
    forwarded to another node, since the preceding test already ensures that
    the message is destined for this node and single-cluster TIPC no longer
    performs message forwarding.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 5adeb17c936d2dca155e4c93e2c6ea70419a6033
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Apr 5 09:48:52 2011 -0400

    tipc: Remove obsolete manipulation of message re-route count field
    
    Eliminates code that increments and validates the re-route count field
    of payload messages, since the elimination of multi-cluster support
    means that it is no longer necessary for TIPC to forward incoming messages
    to another node. (The obsolete code was incorrect anyway, since it
    incorrectly incremented the re-route count field of messages that
    originated on the node that forwarded the message.)
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 3828620bc0c2d055c3e66c075de4c2a609baec26
Author: Ben Hutchings <ben@decadent.org.uk>
Date:   Wed Aug 24 18:45:14 2011 +0000

    headers, tipc: Add missing #include to <linux/tipc_config.h> for userland
    
    <linux/tipc_config.h> defines inline functions using ntohs() etc.
    For userland these are defined in <arpa/inet.h>.
    
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ddfd87424bef1dc8b2930acae2311b286ab9de12
Author: Kulikov Vasiliy <segooon@gmail.com>
Date:   Sun Oct 31 07:10:32 2010 +0000

    net: tipc: fix information leak to userland
    
    commit 88f8a5e3e7defccd3925cabb1ee4d3994e5cdb52 upstream.
    
    Structure sockaddr_tipc is copied to userland with padding bytes after
    "id" field in union field "name" unitialized.  It leads to leaking of
    contents of kernel stack memory.  We have to initialize them to zero.
    
    Signed-off-by: Vasiliy Kulikov <segooon@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 1897fe55e1385ddfb7733d0e0819588571cca867
Merge: cd5f3e2064ea e4a0aee47e18
Author: David S. Miller <davem@davemloft.net>
Date:   Fri Jun 24 16:49:10 2011 -0700

    Merge branch 'tipc-Jun24-2011' of git://git.kernel.org/pub/scm/linux/kernel/git/paulg/net-next-2.6

commit e4a0aee47e1823025972b8f3defde432e485b7b9
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Jun 1 16:21:12 2011 -0400

    tipc: Optimize creation of connection protocol messages
    
    Simplifies the creation of connection protocol messages by eliminating
    the passing of information that is no longer required, is constant,
    or is contained within the port structure that is issuing the message.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit f55b564054e35dcd171e1191a477327528271f95
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Jun 1 15:48:42 2011 -0400

    tipc: Don't create payload message using connection protocol routine
    
    Modifies the logic that creates a connection termination payload
    message so that it no longer (mis)uses a routine that creates a
    connection protocol message. The revised code is now more easily
    understood, and avoids setting several fields that are either not
    present in payload messages or were being set more than once.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 1c1a551acb8b65f842824900b283a96462f907ab
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Jun 1 15:08:10 2011 -0400

    tipc: Reject connection protocol message sent to unconnected port
    
    Restructures the logic used in tipc_port_recv_proto_msg() to ensure
    that incoming connection protocol messages are handled properly. The
    routine now uses a two-stage process that first ensures the message
    applies on an existing connection and then processes the request.
    This corrects a loophole that allowed a connection probe request to
    be processed if it was sent to an unconnected port that had no names
    bound to it.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit e244a915ff7676b1567ba68102c9b53011f5b766
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue May 31 16:10:08 2011 -0400

    tipc: Optimize creation of FIN messages
    
    Speeds up the creation of the FIN message that terminates a TIPC
    connection. The typical peer termination message is now created by
    duplicating the terminating port's standard payload message header
    and adjusting the message size, importance, and error code fields,
    rather than building all fields of the message from scratch. A FIN
    message that is directed to the port itself is created the same way.
    but also requires swapping the origin and destination address fields.
    
    In addition to reducing the work required to create FIN messages,
    these changes eliminate several instances of duplicated code,
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 741d9eb7b8f352071f56aacb77f5245b4e2a4fbe
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue May 31 15:03:18 2011 -0400

    tipc: Cleanup of message header size terminology
    
    Performs cosmetic cleanup of the symbolic names used to specify TIPC
    payload message header sizes. The revised names now more accurately
    reflect the payload messages in which they can appear. In addition,
    several places where these payload message symbol names were being used
    to create non-payload messages have been updated to use the proper
    internal message symbolic name.
    
    No functional changes are introduced by this rework.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 15f4e2b30372695573bc46102790094a92b3eb11
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue May 31 14:35:18 2011 -0400

    tipc: Eliminate useless check when creating internal message
    
    Gets rid of code that allows tipc_msg_init() to create a short
    payload message header. This optimization is possible because
    there are no longer any callers who require this capability.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit a9948ba24f764694413207812d2b2dae46eb7275
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon May 30 15:50:35 2011 -0400

    tipc: Remove unnecessary includes in socket code
    
    Eliminates a pair of #include statements for files that are brought in
    automatically by including core.h.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit f01a2b6378f757727b205419b677d45edfcc5a3b
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon May 30 15:43:02 2011 -0400

    tipc: Eliminate unused field in bearer structure
    
    Gets rid of counter that records the number of times a bearer has
    resumed after congestion or blocking, since the value is never
    referenced anywhere.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 0f305bf4218c75b6fd1283105bd88736157aa5d2
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon May 30 15:36:56 2011 -0400

    tipc: Correct typo in link statistics output
    
    Fixes a minor error in the title of one of the message size profiling
    values printed as part of TIPC's link statistics.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 8af4638a297b43c4929fdc01456b7f0698de0c0e
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon May 30 11:27:50 2011 -0400

    tipc: Eliminate checks for empty zone list during name translation
    
    Gets rid of a pair of checks to see if a name sequence entry in
    TIPC's name table has an empty zone list. These checks are pointless
    since the zone list can never be empty (i.e. as soon as the list
    becomes empty the associated name sequence entry is deleted).
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit f6f0a4d2d05f758f011a506731e84160d140304b
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon May 30 10:48:48 2011 -0400

    tipc: Convert name table publication lists to standard kernel lists
    
    Modifies the main circular linked lists of publications used in TIPC's
    name table to use the standard kernel linked list type. This change
    simplifies the deletion of an existing publication by eliminating
    the need to search up to three lists to locate the publication.
    The use of standard list routines also helps improve the readability
    of the name table code by make it clearer what each list operation
    being performed is actually doing.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit b52124a50fa7b870a3d1a18a8ff56273c7d690dd
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon May 30 09:44:38 2011 -0400

    tipc: Partition name table instance array info into two parts
    
    Modifies the name table array structure that contains the name
    sequence instances for a given name type so that the publication
    lists associated with a given instance are stored in a dynamically
    allocated structure, rather than being embedded within the array
    entry itself. This change is being done for several reasons:
    
    1) It reduces the amount of data that needs to be copied whenever
    a given array is expanded or contracted to accommodate the first
    publication of a new name sequence or the removal of the last
    publication of an existing name sequence.
    
    2) It reduces the amount of memory associated with array entries that
    are currently unused.
    
    3) It facilitates the upcoming conversion of the publication lists
    from TIPC-specific circular lists to standard kernel lists. (Standard
    lists cannot be used with the former array structure because the
    relocation of array entries during array expansion and contraction
    would corrupt the lists.)
    
    Note that, aside from introducing a small amount of code to dynamically
    allocate and free the structure that now holds publication list info,
    this change is largely a simple renaming exercise that replaces
    references to "sseq->LIST" with "sseq->info->LIST" (or "info->LIST").
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 7eb878ed8e0eae67269439bfd82234f9ba52ffe4
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed May 25 13:28:27 2011 -0400

    tipc: Eliminate redundant masking in message header routines
    
    Gets rid of unnecessary masking in two routines that set TIPC message
    header fields. (The msg_set_bits() routine already takes care of
    masking the new value to the correct size.)
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 74d33b32deaa9ec864d6db3255b3a17a459f75fe
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue May 24 14:44:56 2011 -0400

    tipc: Eliminate message header routines for caching destination node
    
    Gets rid of a pair of routines that provide support for temporarily
    caching the destination node for a message in the associated message
    buffer's application handle, since this capability is no longer used.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 7dd1bf28ccc44ef205c64aab618863faa914daa9
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon May 23 16:23:32 2011 -0400

    tipc: Optimizations & corrections to message rejection
    
    Optimizes the creation of a returned payload message by duplicating
    the original message and then updating the small number of fields
    that need to be adjusted, rather than building the new message header
    from scratch. In addition, certain operations that are not always
    required are relocated so that they are only done if needed.
    
    These optimizations also have the effect of addressing other issues
    that were present previously:
    
    1) Fixes a bug that caused the socket send routines to return the
    size of the returned message, rather than the size of the sent
    message, when a returnable payload message was sent to a non-existent
    destination port.
    
    2) The message header of the returned message now matches that of
    the original message more closely. The header is now always the same
    size as the original header, and some message header fields that
    weren't being initialized in the returned message header are now
    populated correctly -- namely the "d" and "s" bits, and the upper
    bound of a multicast name instance (where present).
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 017dac31dc8a25ad45421715d88c3869e299fd35
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue May 24 13:20:09 2011 -0400

    tipc: Optimize routing of returned payload messages
    
    Reduces the work involved in transmitting a returned payload message
    by doing only the work necessary to route such a message directly to
    the specified destination port, rather than invoking the code used
    to route an arbitrary message to an arbitrary destination.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 76d12527f74ad1b42b068252fdd2056c8ae48a99
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon May 23 13:57:25 2011 -0400

    tipc: Add sanity check to detect rejection of non-payload messages
    
    Introduces an internal sanity check to ensure that the only undeliverable
    messages TIPC attempts to return to their origin are application payload
    messages.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit acc631bf6f597b36f3f014e12e69c710da610027
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon May 23 13:47:44 2011 -0400

    tipc: Standardize exit logic for message rejection handling
    
    Modifies the routine that handles the rejection of payload messages
    so that it has a single exit point that frees up the rejected message,
    thereby eliminating some duplicated code.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 7ae4738e9e46a2f88e5d1332b7397bb96c527c44
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon May 23 13:38:39 2011 -0400

    tipc: Remove unused sanity test macro
    
    Eliminates a TIPC-specific assert() macro that is no longer used.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 5e726900380cfff50436ca6c5e08b35b3357d82a
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon May 23 13:14:18 2011 -0400

    tipc: Convert fatal broadcast sanity check to non-fatal check
    
    Modifies the existing broadcast link sanity check that detects an
    attempt to send a message off-node when there are no available
    destinations so that it no longer causes a kernel panic; instead,
    the check now issues a warning and stack trace and then returns
    without sending the message anywhere.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 0074820978004cc484b132d7a9ce0df414660d9d
Merge: 1fc19aff84ed 972a77fbf1bb
Author: David S. Miller <davem@davemloft.net>
Date:   Wed May 11 12:41:28 2011 -0400

    Merge branch 'tipc-May10-2011' of git://git.kernel.org/pub/scm/linux/kernel/git/paulg/net-next-2.6

commit 972a77fbf1bbea6f54b5986b05041a17b607695b
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Thu Apr 21 20:34:03 2011 -0500

    tipc: Revise timings used when sending link request messages
    
    Revises the algorithm governing the sending of link request messages
    to take into account the number of nodes each bearer is currently in
    contact with, and to ensure more rapid rediscovery of neighboring nodes
    if a bearer fails and then recovers.
    
    The discovery object now sends requests at least once a second if it
    is not in contact with any other nodes, and at least once a minute if
    it has at least one neighbor; if contact with the only neighbor is
    lost, the object immediately reverts to its initial rapid-fire search
    timing to accelerate the rediscovery process.
    
    In addition, the discovery object now stops issuing link request
    messages if it is in contact with the only neighboring node it is
    configured to communicate with, since further searching is unnecessary.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 1209966cd5d2ec7f89ad2ed58a6a342aa8ea8712
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Thu Apr 21 19:05:25 2011 -0500

    tipc: Add monitoring of number of nodes discovered by bearer
    
    Augments TIPC's discovery object to track the number of neighboring nodes
    having an active link to the associated bearer.
    
    This means tipc_disc_update_link_req() becomes either one of:
    
           tipc_disc_add_dest()
    or:
           tipc_disc_remove_dest()
    
    depending on the code flow direction of things.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 691a62075922b43b2b03def87ebcfdfbf0cd2ed8
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Thu Apr 21 16:28:02 2011 -0500

    tipc: Enhance sending of discovery object link request messages
    
    Augments TIPC's discovery object to send its initial neighbor discovery
    request message as soon as the associated bearer is created, rather than
    waiting for its first periodic timeout to occur, thereby speeding up the
    discovery process. Also adds a check to suppress the initial request or
    subsequent requests if the bearer is blocked at the time the request is
    scheduled for transmission.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 3a777ff8b14456e15991c9fcc225943453dc3a75
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Thu Apr 21 13:58:26 2011 -0500

    tipc: Enhance handling of discovery object creation failures
    
    Modifies bearer creation and deletion code to improve handling of
    scenarios when a neighbor discovery object cannot be created. The
    creation routine now aborts the creation of a bearer if its discovery
    object cannot be created, and deletes the newly created bearer, rather
    than failing quietly and leaving an unusable bearer hanging around.
    
    Since the exit via the goto label really isn't a definitive failure
    in all cases, relabel it appropriately.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit dc63d91eb1cf74233c68b0058dcd477f5d019d02
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu Apr 21 11:50:42 2011 -0400

    tipc: Introduce routine to enqueue a chain of messages on link tx queue
    
    Create a helper routine to enqueue a chain of sk_buffs to a link's
    transmit queue.  It improves readability and the new function is
    anticipated to be used more than just once in the future as well.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 2689690469c9fd76f9db0afcdf2523f48cce4006
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Thu Apr 21 10:42:07 2011 -0500

    tipc: Avoid recomputation of outgoing message length
    
    Rework TIPC's message sending routines to take advantage of the total
    amount of data value passed to it by the kernel socket infrastructure.
    This change eliminates the need for TIPC to compute the size of outgoing
    messages itself, as well as the check for an oversize message in
    tipc_msg_build().  In addition, this change warrants an explanation:
    
       -     res = send_packet(NULL, sock, &my_msg, 0);
       +     res = send_packet(NULL, sock, &my_msg, bytes_to_send);
    
    Previously, the final argument to send_packet() was ignored (since the
    amount of data being sent was recalculated by a lower-level routine)
    and we could just pass in a dummy value (0). Now that the
    recalculation is being eliminated, the argument value being passed to
    send_packet() is significant and we have to supply the actual amount
    of data we want to send.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit c29c3f70c9eb6f18090da5af9dbe9dcb4adece8c
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Tue Apr 20 17:58:24 2010 -0400

    tipc: Abort excessive send requests as early as possible
    
    Adds checks to TIPC's socket send routines to promptly detect and
    abort attempts to send more than 66,000 bytes in a single TIPC
    message or more than 2**31-1 bytes in a single TIPC byte stream request.
    In addition, this ensures that the number of iovecs in a send request
    does not exceed the limits of a standard integer variable.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 66e019a6af827a254641e83e96ee36b0f4adc5e3
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Wed Apr 20 16:24:07 2011 -0500

    tipc: Strengthen checks for neighboring node discovery
    
    Enhances existing checks on the discovery domain associated with a TIPC
    bearer. A bearer can no longer be configured to accept links from itself
    only (which would be pointless), or to nodes outside its own cluster
    (since multi-cluster support has now been removed from TIPC). Also, the
    neighbor discovery routine now validates link setup requests against the
    configured discovery domain for the bearer, rather than simply ensuring
    the requesting node belongs to the node's own cluster.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 1f3de471adf5c2a584480a6010808d7a17063897
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Tue Apr 19 13:11:23 2011 -0400

    tipc: make zone/cluster mask constants a define
    
    This allows them to be available for easy re-use in other places
    and avoids trivial mistakes caused by  "count the f's and 0's".
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit bebc55aeffa72d8198e5c54cab9973a30e92f854
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Apr 19 10:17:58 2011 -0400

    tipc: Fix sk_buff leaks when link congestion is detected
    
    Modifies a TIPC send routine that did not discard the outgoing sk_buff
    if it was not transmitted because of link congestion; this eliminates
    the potential for buffer leakage in the many callers who did not clean up
    the unsent buffer. (The two routines that previously did discard the unsent
    buffer have been updated to eliminate their now-redundant clean up.)
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 7f47f5c751c93f2ca9e7f0ef6c0915162ac9e076
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon Apr 18 10:14:26 2011 -0400

    tipc: Update destination node field on incoming multicast messages
    
    Sets the destination node field of an incoming multicast message
    to the receiving node's network address before handing off the message
    to each receiving port. This ensures that, in the event the destination
    port returns the message to the sender, the sender can identify which
    node the destination port belonged to.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 7462b9e9f69aa6c5e2fded65d3b03df4ed08ff45
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon Apr 18 10:08:22 2011 -0400

    tipc: Fix problem with bundled multicast message
    
    Set the destination node and destination port fields of an outgoing
    multicast message header to zero; this is necessary to ensure that
    the receiving node can route the message properly if it was packed
    into a bundle due to link congestion. (Previously, there was a chance
    that the receiving node would send the unbundled message to a random
    node & port, rather than processing the message itself.)
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 53b94364a7c96d3b2276cb2bbbecfb269bc9f0fc
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Sun Apr 17 16:02:11 2011 -0400

    tipc: Set name lookup scope field properly in all data messages
    
    Ensures that all outgoing data messages have the "name lookup scope"
    field of their header set correctly; that is, named multicast messages
    now specify cluster-wide name lookup, while messages not using TIPC
    naming zero out the lookup field.  (Previously, the lookup scope specified
    for these types of messages was inherited from the last message sent
    by the sending port.)
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 77561557447d3be586e701815e261c93c11ded00
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Sun Apr 17 13:06:23 2011 -0400

    tipc: Fix issues with fragmentation of an existing message buffer
    
    Modifies the routine that fragments an existing message buffer to
    use similar logic to that used when generating fragments from an iovec.
    The routine now creates a complete chain of fragments and adds them to
    the link transmit queue as a unit, so that the link sends all fragments
    or none; this prevents the incomplete transmission of a fragmented
    message that might otherwise result because of link congestion or
    memory exhaustion. This change also ensures that the counter recording
    the number of fragmented messages sent by the link is now incremented
    only if the message is actually sent.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit e0f085964cac97a3a9e47741365ef6a03e500873
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Sun Apr 17 11:44:24 2011 -0400

    tipc: Avoid pointless masking of fragmented message identifier
    
    Eliminates code that restricts a link's counter of its fragmented
    messages to a 16-bit value, since the counter value is automatically
    restricted to this range when it is written into the message header.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 670c54083aa6e0eeefda1c4b307a91679b577664
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Sun Apr 17 10:29:16 2011 -0400

    tipc: Don't initialize link selector field in fragmented messages
    
    Eliminates code that sets the link selector field in the header of
    fragmented messages, since this information is never referenced.
    (The unnecessary initialization was harmless as it was over-written
    by the fragmented message identifier value before the fragments were
    transmitted.)
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 7775bcc722ed9993e83401fee9c14008843b83c7
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Apr 12 14:59:03 2011 -0400

    tipc: Remove code to emulate loss of broadcast messages
    
    Eliminates optional code used to test TIPC's ability to recover
    from lost broadcast messages. This code duplicates functionality
    already provided by the network stack's QoS option "network emulator".
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 92138d1f254d58b818e7c3b91a1967cf57d374b5
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Fri Apr 8 11:04:15 2011 -0400

    tipc: Cosmetic consolidation of internal message type definitions
    
    Half of the #define entries in msg.h were down at the bottom
    of the header, instead of up at the top before any of the static
    inlines etc.   Relocate them up to the top, to be consistent with
    the other normal linux header file layout conventions.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 19f53d2cef97506364638c647a3aa11291819896
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Fri Apr 8 10:59:04 2011 -0400

    tipc: Eliminate unused routing message definitions
    
    Gets rid of unused constants defining the types used in routing
    messages. These messages no longer exist in TIPC now that multicluster
    and multizone support has been eliminated.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit cc4c4353f0ebde05992bf360f16ec92260811393
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Fri Apr 8 10:50:52 2011 -0400

    tipc: Update comments in message header include file
    
    Removes comments in TIPC's message header include file that are
    outdated and/or unnecessary. Also introduces short comments (or
    supplements existing ones) to better describe several set of existing
    symbolic constants.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 97fbdc1f77e9ce50ed0be543273d78f8de8675ac
Author: Michal Marek <mmarek@suse.cz>
Date:   Tue Apr 5 16:59:16 2011 +0200

    tipc: Drop __TIME__ usage
    
    The kernel already prints its build timestamp during boot, no need to
    repeat it in random drivers and produce different object files each
    time.
    
    Signed-off-by: Michal Marek <mmarek@suse.cz>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: netdev@vger.kernel.org
    Cc: tipc-discussion@lists.sourceforge.net
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit e4eec22e3501a2d6a0bf583f5c34cc1fcc6f5a91
Author: Kulikov Vasiliy <segooon@gmail.com>
Date:   Sun Oct 31 07:10:32 2010 +0000

    net: tipc: fix information leak to userland
    
    commit 88f8a5e3e7defccd3925cabb1ee4d3994e5cdb52 upstream.
    
    Structure sockaddr_tipc is copied to userland with padding bytes after
    "id" field in union field "name" unitialized.  It leads to leaking of
    contents of kernel stack memory.  We have to initialize them to zero.
    
    Signed-off-by: Vasiliy Kulikov <segooon@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Moritz Muehlenhoff <jmm@debian.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 153e4ee16df4ec1660a97c6040715e5993f9032e
Author: Kulikov Vasiliy <segooon@gmail.com>
Date:   Sun Oct 31 07:10:32 2010 +0000

    net: tipc: fix information leak to userland
    
    commit 88f8a5e3e7defccd3925cabb1ee4d3994e5cdb52 upstream.
    
    Structure sockaddr_tipc is copied to userland with padding bytes after
    "id" field in union field "name" unitialized.  It leads to leaking of
    contents of kernel stack memory.  We have to initialize them to zero.
    
    Signed-off-by: Vasiliy Kulikov <segooon@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Andi Kleen <ak@linux.intel.com>
    Cc: Moritz Muehlenhoff <jmm@debian.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 4312007ec44ba76536bd660a236701a7de21e98b
Author: Kulikov Vasiliy <segooon@gmail.com>
Date:   Sun Oct 31 07:10:32 2010 +0000

    net: tipc: fix information leak to userland
    
    commit 88f8a5e3e7defccd3925cabb1ee4d3994e5cdb52 upstream.
    
    Structure sockaddr_tipc is copied to userland with padding bytes after
    "id" field in union field "name" unitialized.  It leads to leaking of
    contents of kernel stack memory.  We have to initialize them to zero.
    
    Signed-off-by: Vasiliy Kulikov <segooon@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Moritz Muehlenhoff <jmm@debian.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 51d7a20fca5f8e96646e51bf9645da08f14e7a22
Author: Kulikov Vasiliy <segooon@gmail.com>
Date:   Sun Oct 31 07:10:32 2010 +0000

    net: tipc: fix information leak to userland
    
    commit 88f8a5e3e7defccd3925cabb1ee4d3994e5cdb52 upstream.
    
    Structure sockaddr_tipc is copied to userland with padding bytes after
    "id" field in union field "name" unitialized.  It leads to leaking of
    contents of kernel stack memory.  We have to initialize them to zero.
    
    Signed-off-by: Vasiliy Kulikov <segooon@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Cc: Moritz Muehlenhoff <jmm@debian.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 201a11c1db82247143f0fbe29b4a97f16fa3a591
Merge: 05aebe2e5d00 1fa073803ec5
Author: David S. Miller <davem@davemloft.net>
Date:   Mon Mar 14 13:49:53 2011 -0700

    Merge branch 'tipc-Mar14-2011' of git://git.kernel.org/pub/scm/linux/kernel/git/paulg/net-next-2.6

commit 1fa073803ec543e8b95fc5acf164fa2e0074bb4f
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Mon Mar 14 12:03:44 2011 -0400

    tipc: delete extra semicolon blocking node deletion
    
    Remove bogus semicolon only recently introduced in 34e46258cb9f5
    that blocks cleanup of nodes for N>1 on shutdown.
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 27b61ae2d73936554fcd07e77c3cc13bc88c41a9
Merge: 46af31800b69 633d2bdedc3b
Author: David S. Miller <davem@davemloft.net>
Date:   Sun Mar 13 18:49:11 2011 -0700

    Merge branch 'tipc-Mar13-2011' of git://git.kernel.org/pub/scm/linux/kernel/git/paulg/net-next-2.6

commit 633d2bdedc3b81f202bda8fdad17aeb08809b7df
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Sun Mar 13 15:44:07 2011 -0500

    tipc: Update maintenance information
    
    Updates TIPC maintenance information to reflect changes that have
    taken place during TIPC 2.0 development, including:
    
    - removal of directories that have been deleted
    - removal of websites that have been decommisioned
    - removal of sidestream SCM repositories that are no longer used
    - addition of netdev as appropriate list for kernel code.
    
    Grateful acknowledgement is given to Joe Perches <joe@perches.com>,
    who reported the stale file entry that triggered the update.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 390bce4237487975c2168aa5fa786f75ead66852
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Fri Mar 11 13:22:53 2011 -0500

    tipc: Eliminate obsolete routine for handling routed messages
    
    Eliminates a routine that is used in handling messages arriving from
    another cluster or zone. Such messages can no longer be received by TIPC
    now that multi-cluster and multi-zone network support has been eliminated.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 7945c1fb02ef08316df8c054ce180bf3f4e35ae4
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Fri Mar 11 13:09:28 2011 -0500

    tipc: Eliminate remaining support for routing table messages
    
    Gets rid of all remaining code relating to ROUTE_DISTRIBUTOR messages.
    These messages were only used in multi-cluster and multi-zone networks,
    which TIPC no longer supports. (For safety, TIPC now treats such messages
    the same way that it handles other unrecognized messages.)
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 50d492321a2d94aa2ff5e26e73af08d937f8acb0
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Mon Feb 28 11:47:36 2011 -0500

    tipc: Remove bearer flag indicating existence of broadcast address
    
    Eliminates the flag in the TIPC bearer structure that indicates if
    the bearer supports broadcasting, since the flag is always set to 1
    and serves no useful purpose.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit f9107ebe7d18a04f07d2a990a912efa2a2ac1873
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Mon Feb 28 11:04:08 2011 -0500

    tipc: Don't respond to neighbor discovery request on blocked bearer
    
    Adds a check to prevent TIPC from trying to respond to an incoming
    LINK_CONFIG request message if the associated bearer is currently
    prohibited from sending messages.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit d901a42b271dbd94983b798955403dcf1afa60ac
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Mon Feb 28 16:02:30 2011 -0500

    tipc: Eliminate unnecessary constant for neighbor discovery msg size
    
    Eliminates an unnecessary constant that defines the size of a LINK_CONFIG
    message, and uses one of the existing standard message size symbols in
    its place. (The defunct constant was located in the wrong place anyway,
    since it was grouped with other constants that define message users instead
    of message sizes.)
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit a2b58de2e3993a23b092ae54a35c38bf0dacb618
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Mon Feb 28 15:03:22 2011 -0500

    tipc: Remove unused field in bearer structure
    
    Eliminates a field in TIPC's bearer objects that is set, but never
    referenced.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 50d3e6399a61fca53c5c440a79f71299db66b803
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Mon Feb 28 14:56:15 2011 -0500

    tipc: Correct misnamed references to neighbor discovery domain
    
    Renames items that are improperly labelled as "network scope" items
    (which are represented by simple integer values) rather than "network
    domain" items (which are represented by <Z.C.N>-type network addresses).
    This change is purely cosmetic, and does not affect the operation of TIPC.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 37b9c08a88f9a82456bb11fa050cccb544e8dc60
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Mon Feb 28 11:32:27 2011 -0500

    tipc: Optimizations to link creation code
    
    Enhances link creation code as follows:
    
    1) Detects illegal attempts to add a requested link earlier in the
       link creation process. This prevents TIPC from wasting time
       initializing a link object it then throws away, and also eliminates
       the code needed to do the throwing away.
    
    2) Passes in the node object associated with the requested link.
       This allows TIPC to eliminate a search to locate the node object,
       as well as code that attempted to create the node if it doesn't
       exist.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit fa2bae2d5bede252445cc457737d00f9036c41c3
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Mon Feb 28 10:56:23 2011 -0500

    tipc: Give Tx of discovery responses priority over link messages
    
    Delay releasing the node lock when processing a neighbor discovery
    message until after the optional discovery response message has been
    sent. This helps ensure that any link protocol messages sent by a
    link endpoint created as a result of a neighbor discovery request
    are received after the discovery response is received, thereby
    giving the receiving node a chance to create a peer link endpoint to
    consume those link protocol messages, if one does not already exist.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit a728750e4f0c9500741406299f1817022d411d33
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Mon Feb 28 10:03:05 2011 -0500

    tipc: Cosmetic changes to neighbor discovery logic
    
    Reworks the appearance of the routine that processes incoming
    LINK_CONFIG messages to keep the main logic flow at a consistent level
    of indentation, and to add comments outlining the various phases involved
    in processing each message. This rework is being done to allow upcoming
    enhancements to this routine to be integrated more cleanly.
    
    The diff isn't really readable, so know that it was a case of the
    old code being like:
    
            tipc_disc_recv_msg(..)
            {
                    if (in_own_cluster(orig)) {
                            ...
                            lines and lines of stuff
                            ...
                    }
            }
    
    which is now replaced with the more sane:
    
            tipc_disc_recv_msg(..)
            {
                    if (!in_own_cluster(orig))
                            return;
                    ...
                    lines and lines of stuff
                    ...
            }
    
    Instances of spin locking within the reindented block were replaced with
    the identical tipc_node_[un]lock() abstractions.  Note that all these
    changes are cosmetic in nature, and do not change the way LINK_CONFIG
    messages are processed.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 75f0aa49908992dbeb75710b72cbedb5cff9680f
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Mon Feb 28 15:30:20 2011 -0500

    tipc: Fix redundant link field handling in link protocol message
    
    Ensures that the "redundant link exists" field of the LINK_PROTOCOL
    messages sent by a link endpoint is set if and only if the sending
    node has at least one other working link to the peer node. Previously,
    the bit was set only if there were at least 2 working links to the peer
    node, meaning the bit was incorrectly left unset in messages sent by a
    non-working link endpoint when exactly one alternate working link was
    available. The revised code now takes the state of the link sending
    the message into account when deciding if an alternate link exists.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 77f167fcce4d2ea144d92891d1e0fc0c50554082
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Mon Feb 28 15:30:20 2011 -0500

    tipc: make msg_set_redundant_link() consistent with other set ops
    
    All the other boolean like msg_set_X(m) operations don't
    export both a msg_set_X(a) and a msg_clear_X(m), but instead
    just have the single msg_set_X(m, val) variant.
    
    Make the redundant_link one consistent by having the set take
    a value, and delete the msg_clear_redundant_link() anomoly.
    This is a cosmetic change and should not change behaviour.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 8f19afb2dbc885befef2a4e7931dfcb51702a212
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Mon Feb 28 11:36:21 2011 -0400

    tipc: cosmetic - function names are not to be full sentences
    
    Function names like "tipc_node_has_redundant_links" are unweildy
    and result in long lines even for simple lines.  The "has" doesn't
    contribute any value add, so dropping that is a slight step in the
    right direction.   This is a cosmetic change, basic result of:
    
    for i in `grep -l tipc_node_has_ *` ; do sed -i s/tipc_node_has_/tipc_node_/ $i ; done
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit e7b3acb6a85266dfd3e102b3d15b51b0ecd6bc2e
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Sun Feb 27 14:43:52 2011 -0500

    tipc: Eliminate timestamp from link protocol messages
    
    Removes support for the timestamp field of TIPC's link protocol messages.
    
    This field was previously used to hold an OS-dependent timestamp value
    that was used to assist in debugging early versions of TIPC. The field
    has now been deemed unnecessary and has been removed from the latest TIPC
    specification. This change has no impact on the operation of TIPC since
    the field was set by TIPC, but never referenced.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 34e46258cb9f53b41e8ffd2e9acd58e0cf64b158
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Fri Feb 25 19:11:25 2011 -0500

    tipc: manually inline net_start/stop, make assoc. vars static
    
    Relocates network-related variables into the subsystem files where
    they are now primarily used (following the recent rework of TIPC's
    node table), and converts globals into locals where possible. Changes
    the initialization of tipc_num_links from run-time to compile-time,
    and eliminates the net_start routine that becomes empty as a result.
    Also eliminates the corresponding net_stop routine by moving its
    (trivial) content into the one location that called the routine.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 672d99e19a12b703c9e2d71ead8fb8b8a85a3886
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Fri Feb 25 18:42:52 2011 -0500

    tipc: Convert node object array to a hash table
    
    Replaces the dynamically allocated array of pointers to the cluster's
    node objects with a static hash table. Hash collisions are resolved
    using chaining, with a typical hash chain having only a single node,
    to avoid degrading performance during processing of incoming packets.
    The conversion to a hash table reduces the memory requirements for
    TIPC's node table to approximately the same size it had prior to
    the previous commit.
    
    In addition to the hash table itself, TIPC now also maintains a
    linked list for the node objects, sorted by ascending network address.
    This list allows TIPC to continue sending responses to user space
    applications that request node and link information in sorted order.
    The list also improves performance when name table update messages are
    sent by making it easier to identify the nodes that must be notified.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit f831c963b5c20bec230edce89e25f369996be5db
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Fri Feb 25 14:22:11 2011 -0500

    tipc: Eliminate configuration for maximum number of cluster nodes
    
    Gets rid of the need for users to specify the maximum number of
    cluster nodes supported by TIPC. TIPC now automatically provides
    support for all 4K nodes allowed by its addressing scheme.
    
    Note: This change sets TIPC's memory usage to the amount used by
    a maximum size node table with 4K entries.  An upcoming patch that
    converts the node table from a linear array to a hash table will
    compact the node table to a more efficient design, but for clarity
    it is nice to have all the Kconfig infrastruture go away separately.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit d1bcb11544109114d72965afea7805cc3e16a83a
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Fri Feb 25 10:01:58 2011 -0500

    tipc: Split up unified structure of network-related variables
    
    Converts the fields of the global "tipc_net" structure into individual
    variables.  Since the struct was never referenced as a complete unit,
    its existence was pointless.  This will facilitate upcoming changes to
    TIPC's node table and simpify upcoming relocation of the variables so
    they are only visible to the files that actually use them.
    
    This change is essentially cosmetic in nature, and doesn't affect the
    operation of TIPC.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 9df3b7eb6ec1c7734482f782bf8335a2737c02f0
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Thu Feb 24 13:20:20 2011 -0500

    tipc: Fix problem with missing link in "tipc-config -l" output
    
    Removes a race condition that could cause TIPC's internal counter
    of the number of links it has to neighboring nodes to have the
    incorrect value if two independent threads of control simultaneously
    create new link endpoints connecting to two different nodes using two
    different bearers. Such under counting would result in TIPC failing to
    list the final link(s) in its response to a configuration request to
    list all of the node's links. The counter is now updated atomically
    to ensure that simultaneous increments do not interfere with each
    other.
    
    Thanks go to Peter Butler <pbutler@pt.com> for his assistance in
    diagnosing and fixing this problem.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 71092ea122062012f8e4b7fb2f9a747212d1479c
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Wed Feb 23 14:52:14 2011 -0500

    tipc: Add support for SO_RCVTIMEO socket option
    
    Adds support for the SO_RCVTIMEO socket option to TIPC's socket
    receive routines.
    
    Thanks go out to Raj Hegde <rajenhegde@yahoo.ca> for his contribution
    to the development and testing this enhancement.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit f1379173326de4c745c4f610501486e4f3bd9248
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Wed Feb 23 14:13:41 2011 -0500

    tipc: Cosmetic changes to node subscription code
    
    Relocates the code that notifies users of node subscriptions so that
    it is adjacent to the rest of the routines that implement TIPC's node
    subscription capability. Renames the name table routine that is
    invoked by a node subscription to better reflect its purpose and to
    be consistent with other, similar name table routines.
    
    These changes are cosmetic in nature, and do not alter the behavior
    of TIPC.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 431697eb60d2d36614096aff12bd1b826a9f9bc1
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Wed Feb 23 13:51:15 2011 -0500

    tipc: Prevent null pointer error when removing a node subscription
    
    Prevents a null pointer dereference from occurring if a node subscription
    is triggered at the same time that the subscribing port or publication is
    terminating the subscription. The problem arises if the triggering routine
    asynchronously activates and deregisters the node subscription while
    deregistration is already underway -- the deregistration routine may find
    that the pointer it has just verified to be non-NULL is now NULL.
    To avoid this race condition the triggering routine now simply marks the
    node subscription as defunct (to prevent it from re-activating)
    instead of deregistering it. The subscription is now both deregistered
    and destroyed only when the subscribing port or publication code terminates
    the node subscription.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit a3796f895ff2917aea331a8d40036c73452b2203
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Wed Feb 23 11:44:49 2011 -0500

    tipc: Add network address mask helper routines
    
    Introduces a pair of helper routines that convert the network address
    for a TIPC node into the network address for its cluster or zone.
    
    This is a cosmetic change designed to avoid future errors caused by
    the incorrect use of address bitmasks, and does not alter the existing
    operation of TIPC.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit aa8472948487432bacbd099b86e313bc16319495
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Mon Feb 21 09:45:31 2011 -0500

    tipc: Correct broadcast link peer info when displaying links
    
    Fixes a typo in the calculation of the network address of a node's own
    cluster when generating a response to the configuration command that
    lists all of the node's links. The correct mask value for a <Z.C.N>
    network address uses 1's for the 8-bit zone and 12-bit cluster parts
    and 0's for the 12-bit node part.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 0232fd0ac475e5f5ec19a69d53467be11bec9833
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Mon Feb 21 09:45:40 2011 -0500

    tipc: Allow receiving into iovec containing multiple entries
    
    Enhances TIPC's socket receive routines to support iovec structures
    containing more than a single entry. This change leverages existing
    sk_buff routines to do most of the work; the only significant change
    to TIPC itself is that an sk_buff now records how much data has been
    already consumed as an numeric offset, rather than as a pointer to
    the first unread data byte.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 55ae22d08fc9b531bc8a88b7306004e7053bb425
Merge: d12b0d9adc46 bf781ecfc6d6
Author: David S. Miller <davem@davemloft.net>
Date:   Wed Feb 23 20:47:56 2011 -0800

    Merge branch 'tipc-Feb23-2011' of git://git.kernel.org/pub/scm/linux/kernel/git/paulg/net-next-2.6

commit bf781ecfc6d6ecc4f66762a870f9c1fc76b9c8d5
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Tue Jan 25 16:12:39 2011 -0500

    tipc: Avoid reliable broadcast preparation for NACK messages
    
    Enhance TIPC to skip unnecessary (and, in some cases, redundant)
    preparation work when sending a broadcast link NACK message, since this
    preparation is only required for broadcast messages that are sent in a
    reliable manner. This change also fixes a bug that caused NACK messages
    to be improperly counted as "TX packets" in TIPC's broadcast link
    statistics.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 2e07dda1659095115e5e36a2fed0fddc1e3ea1c8
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Tue Jan 25 14:39:59 2011 -0500

    tipc: Remove unused message header field for requested number of links
    
    Eliminates support for the "number of requested links" field in a neighbor
    discovery message. This field was never used and has been removed from
    the TIPC 2.0 protocol specification.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 741de3e9ff6e07e908e1cad2eb03e29677fde093
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Tue Jan 25 13:33:31 2011 -0500

    tipc: Remove support for per-connection message sequence numbering
    
    Eliminates TIPC's prototype support for message sequence numbering
    on routable connections (i.e. connections requiring more than one hop).
    This capability isn't currently used, and can be removed since TIPC
    only supports systems in which all inter-node communication can be
    achieved in a single hop.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 214dda4a36329fdd631e3aac0fee6e6fa369db62
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Mon Jan 24 16:22:43 2011 -0500

    tipc: Add in missing lock during link initialization
    
    Ensure that the routine that starts up processing on a newly created
    link endpoint takes the spinlock of the node object that owns the link,
    to prevent possible conflicts with processing involving other links
    owned by that node object.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit cb7ce91448c01724e18c1759aa5aba86e5f1c69b
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Mon Jan 24 15:02:14 2011 -0500

    tipc: Fix port counter handling to correct congestion control
    
    Modifies TIPC's congestion control between a connected port and its
    peer so that it works as documented. The following changes have been
    made:
    
    1) The counter of the number of messages sent by a port now starts
       at zero, rather than one. This prevents the port from reporting port
       congestion one message earlier than it was supposed to.
    
    2) The counter of the number of messages sent by a port is now
       incremented only if a non-empty message is sent successfully.
       This prevents the port from becoming permanently congested if
       too many send attempts are unsuccessful because of congestion
       (or other reasons). It also removes the risk that empty hand-
       shaking messages used during connection setup might cause the
       port to report congestion earlier than it was supposed to.
    
    3) The counter of the number of unacknowledged messages received by
       a port controlled by an internal TIPC service is now incremented
       only if the message is non-empty, in order to be consistent with
       the aforementioned changes.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 69218fc426569739d2bb68e15ac4905948409642
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Fri Jan 21 09:45:33 2011 -0500

    tipc: Minor optimization to topology service connection establishment
    
    Eliminates a local iovec structure containing no data, which was
    previously used during the establishment of a topology service connection,
    since the same effect can be achieved by passing in a NULL pointer and
    an iovec length of zero.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit f23d9bf2b7ba22fe49b65d344b3651049cecc51d
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Tue Jan 18 15:15:34 2011 -0500

    tipc: Set unused probe field of link protocol messages to defined value
    
    Ensures that a link reset or activate message has a "probe" field
    of zero. (This field is currently unused in these messages, but this
    could potentially change in future versions of TIPC.)
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 9bd80b60827fe8d84c0e594895acb8a44f2b98b1
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Tue Jan 18 15:02:50 2011 -0500

    tipc: Improve accuracy of link transmit queue maximum size statistic
    
    Enhances TIPC's unicast and broadcast link code to update the transmit
    queue maximum size counter in a single place, namely the routine that
    adds messages to the queue. This ensures that the maximum size statistic
    reported for unicast links is completely accurate, rather than being
    partially based on statistical sampling.
    
    The changes to link.h are just documenting the roles of the variables.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 9f54b545bd62a42ec354727d90eacadc5846406b
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Tue Jan 18 13:58:27 2011 -0500

    tipc: Eliminate unnecessary locking when starting topology service
    
    Modifies the initialization code for TIPC's topology service to
    avoid taking the spinlock protecting the subscriber list, since
    there is no need to do this.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 01d83eddc55c138cbb24a5917d5271c0b24956a1
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Tue Jan 18 13:53:16 2011 -0500

    tipc: Clean up tracking of node requesting a broadcast retransmit
    
    Allows the broadcast link to track the node that is requesting a retransmit
    in a new field dedicated to that purpose. This replaces the existing
    mechanism that (ab)uses an existing node structure linked list field to do
    the tracking.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 77c81e0bb8af3f1a0e5d84dd0346fe57dfe3da27
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Tue Jan 18 13:37:09 2011 -0500

    tipc: Clean out all remaining instances of #if 0'd unused code
    
    Remove all instances of legacy or proposed-but-not-implemented code
    that lives within an #if 0 ... #endif block.  If some of it is needed
    in the future it can recovered out of history, but there is no need
    for it to clutter up the active code base.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit c8a61b52ebac3645b4e3c5b03c2073e6c8c119a8
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Tue Jan 18 13:31:32 2011 -0500

    tipc: Fix print statements that assume pointers are 32-bit values
    
    Corrects print statements that use %x to print pointer values to use
    %p instead, so that 64-bit pointer values are displayed correctly.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 5413b4c6c07b659e52c84a4e40d897b32b89834f
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Tue Jan 18 13:24:55 2011 -0500

    tipc: Improve handling of invalid link tolerance values
    
    Enhances TIPC link code to ignore an invalid link tolerance value
    contained in an incoming LINK_PROTOCOL message, rather than
    processing the value and potentially causing a divide-by-zero error.
    
    Also add a compile-time check that catches attempts to redefine
    TIPC's minimum link tolerance value in a manner that might result
    in the same divide-by-zero error at run-time.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 3f8dd9446e66f2a982ddcff38e4705cfe93eeec6
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Tue Jan 18 13:09:29 2011 -0500

    tipc: Prevent invalid memory access when sending to configuration service
    
    Reject TIPC configuration service messages without a full message
    header.  Previously, an application that sent a message to the
    configuration service that was too short could cause the validation
    code to access an uninitialized field in the msghdr structure,
    resulting in a memory access exception.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 4132facae1df653b5a78e0e32956218199026812
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Fri Jan 7 13:12:12 2011 -0500

    tipc: Remove unused global variable tipc_user_count
    
    Eliminates a global variable that was previously used by TIPC's user
    registry to track the number of distinct applications using TIPC. Due to
    the recent elimination of the user registry this variable no longer serves
    any purpose and can be removed.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 2d627b92fd1e39d83c3ee0b9d410403f98cb3981
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Fri Jan 7 13:00:11 2011 -0500

    tipc: Combine bearer structure with tipc_bearer structure
    
    Combines two distinct structures containing information about a TIPC bearer
    into a single structure. The structures were previously kept separate so
    that public information about a bearer could be made available to plug-in
    media types using TIPC's native API, while the remaining information was
    kept private for use by TIPC itself. However, now that the native API has
    been removed there is no longer any need for this arrangement.
    
    Since one of the structures was already embedded within the other, the
    change largely involves replacing instances of "publ.foo" with "foo".
    The changes do not otherwise alter the operation of TIPC bearers.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 23dd4cce387124ec3ea06ca30d17854ae4d9b772
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Fri Jan 7 11:43:40 2011 -0500

    tipc: Combine port structure with tipc_port structure
    
    Merge two distinct structures containing information about a TIPC port
    into a single structure. The structures were previously kept separate
    so that public information about a port could be made available to
    applications using TIPC's native API, while the remaining information
    was kept private for use by TIPC itself. However, now that the native
    API has been removed there is no longer any need for this somewhat
    confusing arrangement.
    
    Since one of the structures was already embedded within the other, the
    change largely involves replacing instances of "publ.foo" with "foo".
    The changes do not otherwise alter the operation of TIPC ports.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 40cd201e37073b3e2281cf2c73fcf5674f22267f
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Sat Jan 1 14:56:18 2011 -0800

    tipc: update log.h re-include protection to reflect new name
    
    The tipc/dbg.h file was recently renamed to tipc/log.h,
    but the re-include define was not updated accordingly.
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a016892cd6eb8d3dd9769021b088917ac7371abd
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Fri Dec 31 18:59:35 2010 +0000

    tipc: remove extraneous braces from single statements
    
    Cleans up TIPC's source code to eliminate the presence of unnecessary
    use of {} around single statements.
    
    These changes are purely cosmetic and do not alter the operation of TIPC
    in any way.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e3ec9c7d5eea9adf2c604c623c987360cc700b88
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Fri Dec 31 18:59:34 2010 +0000

    tipc: remove zeroing assignments to static global variables
    
    Cleans up TIPC's source code to eliminate the needless initialization
    of static variables to zero.
    
    These changes are purely cosmetic and do not alter the operation of TIPC
    in any way.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2db9983a4318818845193bd577879c0620705e82
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Fri Dec 31 18:59:33 2010 +0000

    tipc: split variable assignments out of conditional expressions
    
    Cleans up TIPC's source code to eliminate assigning values to variables
    within conditional expressions, improving code readability and reducing
    warnings from various code checker tools.
    
    These changes are purely cosmetic and do not alter the operation of TIPC
    in any way.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0e65967e33be61e5f67727edd4ea829b47676fc0
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Fri Dec 31 18:59:32 2010 +0000

    tipc: cleanup various cosmetic whitespace issues
    
    Cleans up TIPC's source code to eliminate deviations from generally
    accepted coding conventions relating to leading/trailing white space
    and white space around commas, braces, cases, and sizeof.
    
    These changes are purely cosmetic and do not alter the operation of TIPC
    in any way.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 25860c3bd5bd1db236d4fd5826d76127d677dc28
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Fri Dec 31 18:59:31 2010 +0000

    tipc: recode getsockopt error handling for better readability
    
    The existing code for the copy to user and error handling at the
    end of getsockopt isn't easy to follow, due to the excessive use
    of if/else.  By simply using return where appropriate, it can be
    made smaller and easier to follow at the same time.
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e83504f72456809cdbdbc91700d3ba6370c9da1c
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Fri Dec 31 18:59:30 2010 +0000

    tipc: remove pointless check for NULL prior to kfree
    
    It is acceptable to call kfree() with NULL, so these checks are not
    serving any useful purpose.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 886ef52a8ce6930a9d0c58267d5b5038ac3e8d30
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Fri Dec 31 18:59:29 2010 +0000

    tipc: remove redundant #includes
    
    Eliminates a number of #include statements that no longer serve any
    useful purpose.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6e7e309c62ab584348e0fef90c8e3e48f634dba1
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Fri Dec 31 18:59:28 2010 +0000

    tipc: Finish streamlining of debugging code
    
    Completes the simplification of TIPC's debugging capabilities. By default
    TIPC includes no debugging code, and any debugging code added by developers
    that calls the dbg() and dbg_macros() is compiled out. If debugging support
    is enabled, TIPC prints out some additional data about its internal state
    when certain abnormal conditions occur, and any developer-added calls to the
    TIPC debug macros are compiled in.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8d64a5ba58157dedc61f3f1f51e1c5d66f32a484
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Fri Dec 31 18:59:27 2010 +0000

    tipc: Prune down link-specific debugging code
    
    Eliminates most link-specific debugging code in TIPC, which is now
    largely unnecessary. All calls to the link-specific debugging macros
    have been removed, as are the macros themselves; in addition, the optional
    allocation of print buffers to hold debugging information for each link
    endpoint has been removed. The ability for TIPC to print out helpful
    diagnostic information when link retransmit failures occur has been
    retained for the time being, as an aid in tracking down the cause of
    such failures.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7ced6890bf81d311ab2ea846f92d5f3d0951c08c
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Fri Dec 31 18:59:26 2010 +0000

    tipc: remove dump() and tipc_dump_dbg()
    
    Eliminates calls to two debugging macros that are being completely obsoleted,
    as well as any associated debugging routines that are no longer required.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b29f14284989b3d0b3a5ce268b5b1fc4df9c5795
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Fri Dec 31 18:59:25 2010 +0000

    tipc: remove calls to dbg() and msg_dbg()
    
    Eliminates obsolete calls to two of TIPC's main debugging macros, as well
    as a pair of associated debugging routines that are no longer required.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f5e75269f59f7c3816f23314b924895e4ecf8409
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Fri Dec 31 18:59:24 2010 +0000

    tipc: rename dbg.[ch] to log.[ch]
    
    As the first step in removing obsolete debugging code from TIPC the
    files that implement TIPC's non-debug-related log buffer subsystem
    are renamed to better reflect their true nature.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5af5479296fba0ace5d5cab84045de5b19bde3fe
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Fri Dec 31 18:59:23 2010 +0000

    tipc: Remove internal linked list of node objects
    
    Eliminates a sorted list TIPC uses to keep track of the neighboring
    nodes it has links to, since this duplicates information already present
    in the internal array of node object pointers.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b0c1e928c85023c73780b5d9873406ccf1cd8019
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Fri Dec 31 18:59:22 2010 +0000

    tipc: Remove user registry subsystem
    
    Eliminates routines, data structures, and files that make up TIPC's
    user registry. The user registry is no longer needed since the native
    API routines that utilized it no longer exist and there are no longer
    any internal TIPC services that use it.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit aa70200e001fc4d76552c974c94f65ab26020203
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Fri Dec 31 18:59:21 2010 +0000

    tipc: Eliminate use of user registry by topology service
    
    Simplifies TIPC's network topology service so that it no longer registers
    its ports with the user registry, since the service doesn't take advantage
    of any of the registry's capabilities.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7a488fd3d40a127d0d6057ecd2696f39e11e63c3
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Fri Dec 31 18:59:20 2010 +0000

    tipc: Eliminate use of user registry by configuration service
    
    Simplifies TIPC's configuration service so that it no longer registers
    its port with the user registry, since the service doesn't take advantage
    of any of the registry's capabilities.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8f92df6ad49da958d97e171762d0a97a3dc738f1
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Fri Dec 31 18:59:19 2010 +0000

    tipc: Remove prototype code for supporting multiple clusters
    
    Eliminates routines, data structures, and files that were intended
    to allow TIPC to support a network containing multiple clusters.
    Currently, TIPC supports only networks consisting of a single cluster
    within a single zone, so this code is unnecessary.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 51a8e4dee7653698ba4c6e7de71053665f075273
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Fri Dec 31 18:59:18 2010 +0000

    tipc: Remove prototype code for supporting inter-cluster routing
    
    Eliminates routines and data structures that were intended to allow
    TIPC to route messages to other clusters. Currently, TIPC supports only
    networks consisting of a single cluster within a single zone, so this
    code is unnecessary.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 08c80e9a031df0a8f0269477a32f5eae47d7a146
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Fri Dec 31 18:59:17 2010 +0000

    tipc: Remove prototype code for supporting slave nodes
    
    Simplifies routines and data structures that were intended to allow
    TIPC to support slave nodes (i.e. nodes that did not have links to
    all of the other nodes in its cluster, forcing TIPC to route messages
    that it could not deliver directly through a non-slave node).
    
    Currently, TIPC supports only networks containing non-slave nodes,
    so this code is unnecessary.
    
    Note: The latest edition of the TIPC 2.0 Specification has eliminated
    the concept of slave nodes entirely.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 51f98a8d70583b18cb08b19353aeed5efb0244af
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Fri Dec 31 18:59:16 2010 +0000

    tipc: Remove prototype code for supporting multiple zones
    
    Eliminates routines, data structures, and files that were intended
    to allows TIPC to support a network containing multiple zones.
    Currently, TIPC supports only networks consisting of a single cluster
    within a single zone, so this code is unnecessary.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b924dcf0038b8f83e65b44f679ad480d44f85aa6
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Tue Nov 30 12:01:03 2010 +0000

    tipc: Delete tipc_ownidentity()
    
    Moves the content of the native API routine tipc_ownidentity() into the
    sole routine that calls it, since it can no longer be called in isolation.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 12bae479ee414f45ad8fe93530f5b6ea241bde3f
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Tue Nov 30 12:01:02 2010 +0000

    tipc: Eliminate obsolete native API forwarding routines
    
    Moves the content of each native API message forwarding routine
    into the sole routine that calls it, since the forwarding routines
    no longer be called in isolation. Also removes code in each routine
    that altered the outgoing message's importance level since this is
    now no longer possible.
    
    The previous function mapping (parent function, and child API) was
    as follows:
    
       tipc_send2name
           \--tipc_forward2name
    
       tipc_send2port
           \--tipc_forward2port
    
       tipc_send_buf2port
           \--tipc_forward_buf2port
    
    After this commit, the children don't exist and their functionality
    is completely in the respective parent.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 471450f7ec24ccd9ac24e6f05cd9358d40c09d03
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Tue Nov 30 12:01:01 2010 +0000

    tipc: Eliminate an unused symbolic constant in link code
    
    Removes a symbol that is not referenced anywhere by TIPC's link code.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 52fe7b725e0a1360d36c720ee87ab1e559df69db
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Tue Nov 30 12:01:00 2010 +0000

    tipc: Eliminate useless initialization when creating subscriber
    
    Removes initialization of a local variable that is always assigned
    a different value before it is referenced.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 38f232eae20cefed2e2379d77c54babb0de6d024
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Tue Nov 30 12:00:59 2010 +0000

    tipc: Remove unused domain argument from multicast send routine
    
    Eliminates an unused argument from tipc_multicast(), now that this
    routine can no longer be called by kernel-based applications.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a5c2af9922a94a875c5f4b2dcd357a1c399b7ea6
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Tue Nov 30 12:00:58 2010 +0000

    tipc: Remove support for TIPC mode change callback
    
    Eliminates support for the callback routine invoked when TIPC
    changes its mode of operation from inactive to standalone or from
    standalone to networked. This callback was part of TIPC's obsolete
    native API and is not used by TIPC internally.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 528c771e87c3fa661bc6983b5bf0ba464d9f7c3a
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Tue Nov 30 12:00:57 2010 +0000

    tipc: Delete useless function prototypes
    
    Removes several function declarations that aren't used anywhere,
    either because they reference routines that no longer exist or
    because all users of the function reference it after it has already
    been defined.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 28cc937eac00805e8b9c6e7ed7d590567378187f
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Tue Nov 30 12:00:56 2010 +0000

    tipc: Eliminate useless return value when disabling a bearer
    
    Modifies bearer_disable() to return void since it always indicates
    success anyway.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8d71919d7afc4ade0d9de09e1d50fbf9168c368d
Author: Allan Stephens <Allan.Stephens@windriver.com>
Date:   Tue Nov 30 12:00:55 2010 +0000

    tipc: Delete unused configuration service structure definition
    
    Removes a structure definition that is no longer used by TIPC's
    configuration service.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c80262829769419e19527f972672e8df0480235a
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Nov 30 12:00:54 2010 +0000

    tipc: Remove obsolete inclusions of header files
    
    Gets rid of #include statements that are no longer required as a
    result of the merging of obsolete native API header file content
    into other TIPC include files.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d265fef6ddf9042195aae551e1fde211c2a1588b
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Nov 30 12:00:53 2010 +0000

    tipc: Remove obsolete native API files and exports
    
    As part of the removal of TIPC's native API support it is no longer
    necessary for TIPC to export symbols for routines that can be called
    by kernel-based applications, nor for it to have header files that
    kernel-based applications can include to access the declarations for
    those routines. This commit eliminates the exporting of symbols by
    TIPC and migrates the contents of each obsolete native API include
    file into its corresponding non-native API equivalent.
    
    The code which was migrated in this commit was migrated intact, in
    that there are no technical changes combined with the relocation.
    
    Signed-off-by: Allan Stephens <Allan.Stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4ac86dc5d9f1407e94253e29b7b6c57517f9abae
Author: Neil Horman <nhorman@tuxdriver.com>
Date:   Thu Oct 21 01:06:15 2010 +0000

    Revert c6537d6742985da1fbf12ae26cde6a096fd35b5c
    
    [ Upstream commit 8c974438085d2c81b006daeaab8801eedbd19758 ]
    
    Backout the tipc changes to the flags int he subscription message.  These
    changees, while reasonable on the surface, interefere with user space ABI
    compatibility which is a no-no.  This was part of the changes to fix the
    endianess issues in the TIPC protocol, which would be really nice to do but we
    need to do so in a way that is backwards compatible with user space.
    
    Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 88f8a5e3e7defccd3925cabb1ee4d3994e5cdb52
Author: Kulikov Vasiliy <segooon@gmail.com>
Date:   Sun Oct 31 07:10:32 2010 +0000

    net: tipc: fix information leak to userland
    
    Structure sockaddr_tipc is copied to userland with padding bytes after
    "id" field in union field "name" unitialized.  It leads to leaking of
    contents of kernel stack memory.  We have to initialize them to zero.
    
    Signed-off-by: Vasiliy Kulikov <segooon@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a0e00369f1e1ff9142a20efe4785890e52b2e525
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon Oct 18 11:43:56 2010 +0000

    tipc: delete needless memset from bearer enabling.
    
    Eliminates zeroing out of the new bearer structure at the start of
    activation, since it is already in that state.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8c974438085d2c81b006daeaab8801eedbd19758
Author: Neil Horman <nhorman@tuxdriver.com>
Date:   Thu Oct 21 01:06:15 2010 +0000

    Revert c6537d6742985da1fbf12ae26cde6a096fd35b5c
    
    Backout the tipc changes to the flags int he subscription message.  These
    changees, while reasonable on the surface, interefere with user space ABI
    compatibility which is a no-no.  This was part of the changes to fix the
    endianess issues in the TIPC protocol, which would be really nice to do but we
    need to do so in a way that is backwards compatible with user space.
    
    Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ccc901ee58cfb090a31216a6eda0f1e9dfc572fa
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu Oct 14 13:58:26 2010 +0000

    tipc: Simplify bearer shutdown logic
    
    Optimize processing in TIPC's bearer shutdown code, including:
    
    1. Remove an unnecessary check to see if TIPC bearer's can exist.
    2. Don't release spinlocks before calling a media-specific disabling
    routine, since the routine can't sleep.
    3. Make bearer_disable() operate directly on a struct bearer, instead
    of needlessly taking a name and then mapping that to the struct.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Reviewed-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 724829b3ad8e8aeb0aec46de383d35bfa1ad3875
Author: David S. Miller <davem@davemloft.net>
Date:   Mon Oct 18 01:06:20 2010 -0700

    tipc: Kill tipc_get_mode() completely.
    
    It's completely unused and exporting a static symbol
    makes no sense and breaks the build.
    
    Reported-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 31e3c3f6f1f9b154981a0e6620df700463db30ee
Author: stephen hemminger <shemminger@vyatta.com>
Date:   Wed Oct 13 13:20:35 2010 +0000

    tipc: cleanup function namespace
    
    Do some cleanups of TIPC based on make namespacecheck
      1. Don't export unused symbols
      2. Eliminate dead code
      3. Make functions and variables local
      4. Rename buf_acquire to tipc_buf_acquire since it is used in several files
    
    Compile tested only.
    This make break out of tree kernel modules that depend on TIPC routines.
    
    Signed-off-by: Stephen Hemminger <shemminger@vyatta.com>
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Acked-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7368ddf144afd79456fd853fa25f33e31da003a9
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Tue Oct 12 14:25:58 2010 +0000

    tipc: clean out all instances of #if 0'd unused code
    
    Remove all instances of legacy, or as yet to be implemented code
    that is currently living within an #if 0 ... #endif block.
    In the rare instance that some of it be needed in the future,
    it can still be dragged out of history, but there is no need
    for it to sit in mainline.
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Acked-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b2abd4c033c3965ce670841dfb401f5f166222d5
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Wed Sep 8 13:31:24 2010 +0000

    tipc: Optimize handling excess content on incoming messages
    
    Remove code that trimmed excess trailing info from incoming messages
    arriving over an Ethernet interface.  TIPC now ignores the extra info
    while the message is being processed by the node, and only trims it off
    if the message is retransmitted to another node.  (This latter step is
    done to ensure the extra info doesn't cause the sk_buff to exceed the
    outgoing interface's MTU limit.) The outgoing buffer is guaranteed to
    be linear.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d1fb62796cdac6899ebd4319e4a610684db063e9
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Fri Sep 3 08:33:42 2010 +0000

    tipc: Fix misleading error code when enabling Ethernet bearers
    
    Cause TIPC to return EAGAIN if it is unable to enable a new Ethernet
    bearer because one or more recently disabled Ethernet bearers are
    temporarily consuming resources during shut down.  (The previous error
    code, EDQUOT, is now returned only if all available Ethernet bearer
    data structures are fully enabled at the time the request to enable an
    additional bearer is received.)
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9fbfca013176f9b90d186f3b446fd93e4d972b25
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Fri Sep 3 08:33:40 2010 +0000

    tipc: Ensure outgoing messages on Ethernet have sufficient headroom
    
    Add code to expand the headroom of an outgoing TIPC message if the
    sk_buff has insufficient room to hold the header for the associated
    Ethernet device.  This change is necessary to ensure that messages
    TIPC does not create itself (eg. incoming messages that are being
    routed to another node) do not cause problems, since TIPC has no
    control over the amount of headroom available in such messages.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5d9c54c1e9ececcf7e99c4f014f9bec7ee3a7def
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Fri Sep 3 08:33:39 2010 +0000

    tipc: Minor optimizations to name table translation code
    
    Optimizes TIPC's name table translation code to avoid unnecessary
    manipulation of the node address field of the resulting port id when
    name translation fails.  This change is possible because a valid port
    id cannot have a reference field of zero, so examining the reference
    only is sufficient to determine if the translation was successful.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5a68d5ee000bb784c4856391b4861739c8bbd341
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Aug 17 11:00:16 2010 +0000

    tipc: Prevent missing name table entries when link flip-flops rapidly
    
    Ensure that TIPC does not re-establish communication with a
    neighboring node until it has finished updating all data structures
    containing information about that node to reflect the earlier loss of
    contact.  Previously, it was possible for TIPC to perform its purge of
    name table entries relating to the node once contact had already been
    re-established, resulting in the unwanted removal of valid name table
    entries.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 564e83b51a12b794e3f63a2d872398e1ee21616f
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Aug 17 11:00:15 2010 +0000

    tipc: Allow connect() to wait indefinitely
    
    Cause a socket whose TIPC_CONN_TIMEOUT option is zero to wait
    indefinitely for a response to a connection request using connect().
    Previously, specifying a timeout of 0 ms resulted in an immediate
    timeout, which was inconsistent with the behavior specified by Posix
    for a socket's receive and send timeout.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c2de58140a380172610b6a0f07f975abb2fbb311
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Aug 17 11:00:14 2010 +0000

    tipc: Minor enhancements to name table display format
    
    Eliminate printing of dashes after name table column headers
    (to adhere more closely to the standard format used in tipc-config),
    and simplify name table display logic using array lookups rather
    than if-then-else logic.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 76ae0d71d839b365faa7fdca0eec85a6d1a20d95
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Aug 17 11:00:12 2010 +0000

    tipc: Optimize tipc_node_has_active_links()
    
    Eliminate unnecessary checking for null node pointer and redundant
    check of second active link array entry.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 96d841b7038b8091af3530a008793f5577337d3a
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Aug 17 11:00:11 2010 +0000

    tipc: Remove per-connection sequence number logic
    
    Remove validation of the per-connection sequence numbers on routable
    connections, since routable connections are not supported by TIPC.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0048b826afae7c47afdc47c3854707581cafe3d8
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Aug 17 11:00:10 2010 +0000

    tipc: Fix bug in broadcast link transmit statistics computation
    
    Modify TIPC's broadcast link so that it counts each piece of a
    fragmented message individually, rather than as treating the group
    as a single message.  This ensures that proper correlation of sent
    and received traffic can be done when the broadcast link statistics
    are displayed, and is consistent with the way fragments are counted
    by TIPC's unicast links.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5b1f7bdeb698547cc319c7a302a5acf585227a92
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Aug 17 11:00:09 2010 +0000

    tipc: Fix premature broadcast advertisement by sending node
    
    Prevent a TIPC node from sending out a LINK_STATE message
    advertising a broadcast message that it is in the process
    of sending, but has not yet actually sent.  Previously, it was
    possible for a link timeout to occur in between the time the
    broadcast link updated its "last message sent" counter and the
    time the broadcast message was passed to the broadcast bearer
    for transmission.  This ensures that the code which issues
    the LINK_STATE message isn't informed of the new message until
    the broadcast bearer has had a chance to send it.
    
    Note: The "last message sent" value is stored in the "fsm_msg_count"
    field of the link structure used by the broadcast link.  Since the
    broadcast link doesn't utilize the normal link FSM, this field can
    be re-used rather than adding a new field to the broadcast link.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7e3e5d0950559d1118dccbdff3c765fffcf04fd5
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Aug 17 11:00:08 2010 +0000

    tipc: Prevent crash when broadcast link cannot send to all nodes
    
    Allow TIPC's broadcast link to continue operation when it is unable
    to send a message to all nodes in the cluster.  Previously, the
    broadcast link attempted to put the broadcast pseudo-bearer into a
    blocked state; however, this caused a crash because the associated
    bearer structure is only partially initialized.  Further
    investigation has revealed some conceptual problems with blocking
    the pseudo-bearer; consequently, this functionality has been
    disabled for the time being and the undelivered message is
    eventually resent by the broadcast link's existing message
    retransmission mechanism (if possible).
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b02b69c8a403859ec72090742727e853d606a325
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Aug 17 11:00:07 2010 +0000

    tipc: Check for disabled bearer when processing incoming messages
    
    Add a check to tipc_recv_msg() to ensure it discards messages
    arriving on a newly disabled bearer.  This is needed to deal with a
    race condition that can arise if the bearer is in the midst of being
    disabled when it receives a message.  Performing the check after
    tipc_net_lock has been taken ensures that TIPC's bearers are in a
    stable state while the message is being processed.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f662c07058f7e6365ae65080d772f9122f6f50a9
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Aug 17 11:00:06 2010 +0000

    tipc: correct problems with misleading flags returned using poll()
    
    Prevent TIPC from incorrectly setting returned flags to poll()
    in the following cases:
    
    - an unconnected socket no longer indicates that it is always readable
    
    - an unconnected, connecting, or listening socket no longer indicates
      that it is always writable
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 35997e3157eba16c6124d440bdf9272087129b2a
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Aug 17 11:00:05 2010 +0000

    tipc: Provide correct error code for unsupported connect() operation
    
    Modify TIPC to return EOPNOTSUPP if an application attempts to perform
     a non-blocking connect() operation, which is not supported by TIPC.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3720d40b201fe82dce1d8a64a31bfbf49c221771
Author: Florian Westphal <fw@strlen.de>
Date:   Tue Aug 17 11:00:04 2010 +0000

    tipc: add SO_RCVLOWAT support to stream socket receive path
    
    Add support for the SO_RCVLOWAT socket option to TIPC's stream socket
    type.
    
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f81380925209bc60732a57eef41ab440c056aacf
Author: Anders Kaseorg <[andersk@ksplice.com]>
Date:   Tue Aug 17 11:00:03 2010 +0000

    tipc: Fix log buffer memory leak if initialization fails
    
    Moves log buffer cleanup into tipc_core_stop() so that memory allocated
    for the log buffer is freed if tipc_core_start() is unsuccessful.
    
    Signed-off-by: Anders Kaseorg <andersk@ksplice.com>
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ed24d91246b907441b8061dc3fb18f233ebd664e
Author: Neil Horman <nhorman@tuxdriver.com>
Date:   Wed Mar 3 08:31:23 2010 +0000

    tipc: Fix oops on send prior to entering networked mode (v3)
    
    commit d0021b252eaf65ca07ed14f0d66425dd9ccab9a6 upstream.
    
    Fix TIPC to disallow sending to remote addresses prior to entering NET_MODE
    
    user programs can oops the kernel by sending datagrams via AF_TIPC prior to
    entering networked mode.  The following backtrace has been observed:
    
    ID: 13459  TASK: ffff810014640040  CPU: 0   COMMAND: "tipc-client"
    [exception RIP: tipc_node_select_next_hop+90]
    RIP: ffffffff8869d3c3  RSP: ffff81002d9a5ab8  RFLAGS: 00010202
    RAX: 0000000000000001  RBX: 0000000000000001  RCX: 0000000000000001
    RDX: 0000000000000000  RSI: 0000000000000001  RDI: 0000000001001001
    RBP: 0000000001001001   R8: 0074736575716552   R9: 0000000000000000
    R10: ffff81003fbd0680  R11: 00000000000000c8  R12: 0000000000000008
    R13: 0000000000000001  R14: 0000000000000001  R15: ffff810015c6ca00
    ORIG_RAX: ffffffffffffffff  CS: 0010  SS: 0018
    RIP: 0000003cbd8d49a3  RSP: 00007fffc84e0be8  RFLAGS: 00010206
    RAX: 000000000000002c  RBX: ffffffff8005d116  RCX: 0000000000000000
    RDX: 0000000000000008  RSI: 00007fffc84e0c00  RDI: 0000000000000003
    RBP: 0000000000000000   R8: 00007fffc84e0c10   R9: 0000000000000010
    R10: 0000000000000000  R11: 0000000000000246  R12: 0000000000000000
    R13: 00007fffc84e0d10  R14: 0000000000000000  R15: 00007fffc84e0c30
    ORIG_RAX: 000000000000002c  CS: 0033  SS: 002b
    
    What happens is that, when the tipc module in inserted it enters a standalone
    node mode in which communication to its own address is allowed <0.0.0> but not
    to other addresses, since the appropriate data structures have not been
    allocated yet (specifically the tipc_net pointer).  There is nothing stopping a
    client from trying to send such a message however, and if that happens, we
    attempt to dereference tipc_net.zones while the pointer is still NULL, and
    explode.  The fix is pretty straightforward.  Since these oopses all arise from
    the dereference of global pointers prior to their assignment to allocated
    values, and since these allocations are small (about 2k total), lets convert
    these pointers to static arrays of the appropriate size.  All the accesses to
    these bits consider 0/NULL to be a non match when searching, so all the lookups
    still work properly, and there is no longer a chance of a bad dererence
    anywhere.  As a bonus, this lets us eliminate the setup/teardown routines for
    those pointers, and elimnates the need to preform any locking around them to
    prevent access while their being allocated/freed.
    
    I've updated the tipc_net structure to behave this way to fix the exact reported
    problem, and also fixed up the tipc_bearers and media_list arrays to fix an
    obvious simmilar problem that arises from issuing tipc-config commands to
    manipulate bearers/links prior to entering networked mode
    
    I've tested this for a few hours by running the sanity tests and stress test
    with the tipcutils suite, and nothing has fallen over.  There have been a few
    lockdep warnings, but those were there before, and can be addressed later, as
    they didn't actually result in any deadlock.
    
    Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
    CC: Allan Stephens <allan.stephens@windriver.com>
    CC: David S. Miller <davem@davemloft.net>
    CC: tipc-discussion@lists.sourceforge.net
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 670037a94e70b107a79fd9ac0f4f2c9e1d26f742
Author: Neil Horman <nhorman@tuxdriver.com>
Date:   Wed Mar 3 08:31:23 2010 +0000

    tipc: Fix oops on send prior to entering networked mode (v3)
    
    commit d0021b252eaf65ca07ed14f0d66425dd9ccab9a6 upstream.
    
    Fix TIPC to disallow sending to remote addresses prior to entering NET_MODE
    
    user programs can oops the kernel by sending datagrams via AF_TIPC prior to
    entering networked mode.  The following backtrace has been observed:
    
    ID: 13459  TASK: ffff810014640040  CPU: 0   COMMAND: "tipc-client"
    [exception RIP: tipc_node_select_next_hop+90]
    RIP: ffffffff8869d3c3  RSP: ffff81002d9a5ab8  RFLAGS: 00010202
    RAX: 0000000000000001  RBX: 0000000000000001  RCX: 0000000000000001
    RDX: 0000000000000000  RSI: 0000000000000001  RDI: 0000000001001001
    RBP: 0000000001001001   R8: 0074736575716552   R9: 0000000000000000
    R10: ffff81003fbd0680  R11: 00000000000000c8  R12: 0000000000000008
    R13: 0000000000000001  R14: 0000000000000001  R15: ffff810015c6ca00
    ORIG_RAX: ffffffffffffffff  CS: 0010  SS: 0018
    RIP: 0000003cbd8d49a3  RSP: 00007fffc84e0be8  RFLAGS: 00010206
    RAX: 000000000000002c  RBX: ffffffff8005d116  RCX: 0000000000000000
    RDX: 0000000000000008  RSI: 00007fffc84e0c00  RDI: 0000000000000003
    RBP: 0000000000000000   R8: 00007fffc84e0c10   R9: 0000000000000010
    R10: 0000000000000000  R11: 0000000000000246  R12: 0000000000000000
    R13: 00007fffc84e0d10  R14: 0000000000000000  R15: 00007fffc84e0c30
    ORIG_RAX: 000000000000002c  CS: 0033  SS: 002b
    
    What happens is that, when the tipc module in inserted it enters a standalone
    node mode in which communication to its own address is allowed <0.0.0> but not
    to other addresses, since the appropriate data structures have not been
    allocated yet (specifically the tipc_net pointer).  There is nothing stopping a
    client from trying to send such a message however, and if that happens, we
    attempt to dereference tipc_net.zones while the pointer is still NULL, and
    explode.  The fix is pretty straightforward.  Since these oopses all arise from
    the dereference of global pointers prior to their assignment to allocated
    values, and since these allocations are small (about 2k total), lets convert
    these pointers to static arrays of the appropriate size.  All the accesses to
    these bits consider 0/NULL to be a non match when searching, so all the lookups
    still work properly, and there is no longer a chance of a bad dererence
    anywhere.  As a bonus, this lets us eliminate the setup/teardown routines for
    those pointers, and elimnates the need to preform any locking around them to
    prevent access while their being allocated/freed.
    
    I've updated the tipc_net structure to behave this way to fix the exact reported
    problem, and also fixed up the tipc_bearers and media_list arrays to fix an
    obvious simmilar problem that arises from issuing tipc-config commands to
    manipulate bearers/links prior to entering networked mode
    
    I've tested this for a few hours by running the sanity tests and stress test
    with the tipcutils suite, and nothing has fallen over.  There have been a few
    lockdep warnings, but those were there before, and can be addressed later, as
    they didn't actually result in any deadlock.
    
    Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
    CC: Allan Stephens <allan.stephens@windriver.com>
    CC: David S. Miller <davem@davemloft.net>
    CC: tipc-discussion@lists.sourceforge.net
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 23461e835b3537dd395828b090fb1cb64a198f85
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue May 11 14:30:18 2010 +0000

    tipc: Reduce footprint by un-inlining tipc_msg_* routines
    
    Convert tipc_msg_* inline routines that are more than one line into
    standard functions, thereby eliminating some repeated code.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3032cca4d5cf885cacc78fae27ddf0c56dbf9963
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue May 11 14:30:17 2010 +0000

    tipc: Reduce footprint by un-inlining buf_acquire routine
    
    Convert buf_acquire inline routine that is more than one line into
    a standard function, thereby eliminating some repeated code.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b274f4ab8e674db1757371a21e7217e0766cb574
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue May 11 14:30:16 2010 +0000

    tipc: Reduce footprint by un-inlining bearer congestion routine
    
    Convert bearer congestion inline routine that is more than one line into
    a standard function, thereby eliminating some repeated code.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 43608edc2dbe83057544cf76b765ecdf63d59e8c
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue May 11 14:30:15 2010 +0000

    tipc: Reduce footprint by un-inlining port list routines
    
    Converts port list inline routines that are more than one line into
    standard functions, thereby eliminating a significant amount of
    repeated code.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3e22e62b6204414cf31c414d5a91897e2b718135
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue May 11 14:30:14 2010 +0000

    tipc: Reduce footprint by un-inlining nmap routines
    
    Converts nmap inline routines that are more than one line into standard
    functions, thereby eliminating a significant amount of repeated code.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 80e0c33064bd71bd5791c79f28c59a1aee898993
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue May 11 14:30:13 2010 +0000

    tipc: Reduce footprint by un-inlining address routines
    
    Convert address-related inline routines that are more than one
    line into standard functions, thereby eliminating a significant
    amount of repeated code.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c68ca7b72017f8f52e7aed0d2a6ecfaede133b6b
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue May 11 14:30:12 2010 +0000

    tipc: add tipc_ prefix to fcns targeted for un-inlining
    
    These functions have enough code in them such that they
    seem like sensible targets for un-inlining.  Prior to doing
    that, this adds the tipc_ prefix to the functions, so that
    in the event of a panic dump or similar, the subsystem from
    which the functions come from is immediately clear.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 01fee256a675f6492fc6945bbb9b59640d8705d4
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue May 11 14:30:11 2010 +0000

    tipc: Relocate trivial link status functions to header file
    
    Rather than live in link.c where they can only be used in that file alone,
    these helper routines are better served by being in link.h
    
    Relocated are the following:
    
            link_working_working
            link_working_unknown
            link_reset_unknown
            link_reset_reset
            link_blocked
            link_congested
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 15e979da7c9ddddd55d2eb81e962dbb2aac51ad1
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue May 11 14:30:10 2010 +0000

    tipc: remove abstraction for link_max_pkt
    
    This is just a straight return of a field; there is no
    value in the abstraction of hiding it behind a function.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8e1c298c01d4596fa2837913e531a93a791a7bec
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue May 11 14:30:09 2010 +0000

    tipc: Update commenting in TIPC API
    
    Eliminate comments in TIPC's main API files that are either obsolete,
    incorrect, misleading, or unhelpful.  It also adds in one new comment.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 107e7be628821dcb78c43adce0331e8ddb40eabd
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue May 11 14:30:08 2010 +0000

    tipc: Add support for "-s" configuration option
    
    Provide initial support for displaying overall TIPC status/statistics
    information at runtime.  Currently, only version info for the TIPC
    kernel module is displayed.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3aec9cc936217a30dbb45a9b6808a39571674e66
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue May 11 14:30:07 2010 +0000

    tipc: Rename "multicast-link" to "broadcast-link"
    
    Make a cosmetic change to the name displayed for the broadcast link,
    to better reflect its true nature. Since TIPC utilizes this link to
    distribute name table information, in addition to multicast messages
    sent by user applications, the prior name "multicast-link" is
    no longer appropriate.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9ccc2eb4e12a39bd8430952b76c56c6267018500
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue May 11 14:30:06 2010 +0000

    tipc: Eliminate unnecessary initialization in native API send routines
    
    Eliminate a couple of instances where TIPC's native API send routines
    were doing pointless initialization of local variables.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 289464e4fc2ebdef20be5f6b58414136f75107e2
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue May 11 14:30:05 2010 +0000

    tipc: Prune unused data structures from configuration service
    
    Eliminate some unused data structures in the TIPC
    configuration service that relate to the handling of link
    subscriptions, which were not supported when TIPC 1.5 was
    introduced.  If and when support for link subscriptions is
    offered in TIPC, these elements may need to be re-introduced.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b82834e66aabb6e26c2b792a46d44bab346c46fb
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue May 11 14:30:04 2010 +0000

    tipc: Eliminate unused argument in print statement
    
    Eliminate an argument in a print statement that has no corresponding
    format specification.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit df4ef33716232077564024baf0e5f2c74a295dfd
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue May 11 14:30:03 2010 +0000

    tipc: Eliminate obsolete port's "congested_link" field
    
    Eliminate a field of the TIPC port structure that is populated,
    but never referenced.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a8464342dfdfd918bcf7ceb98281210d80ee89b4
Author: Neil Horman <nhorman@tuxdriver.com>
Date:   Wed Mar 3 08:31:23 2010 +0000

    tipc: Fix oops on send prior to entering networked mode (v3)
    
    [ Upstream commit d0021b252eaf65ca07ed14f0d66425dd9ccab9a6 ]
    
    Fix TIPC to disallow sending to remote addresses prior to entering NET_MODE
    
    user programs can oops the kernel by sending datagrams via AF_TIPC prior to
    entering networked mode.  The following backtrace has been observed:
    
    ID: 13459  TASK: ffff810014640040  CPU: 0   COMMAND: "tipc-client"
    [exception RIP: tipc_node_select_next_hop+90]
    RIP: ffffffff8869d3c3  RSP: ffff81002d9a5ab8  RFLAGS: 00010202
    RAX: 0000000000000001  RBX: 0000000000000001  RCX: 0000000000000001
    RDX: 0000000000000000  RSI: 0000000000000001  RDI: 0000000001001001
    RBP: 0000000001001001   R8: 0074736575716552   R9: 0000000000000000
    R10: ffff81003fbd0680  R11: 00000000000000c8  R12: 0000000000000008
    R13: 0000000000000001  R14: 0000000000000001  R15: ffff810015c6ca00
    ORIG_RAX: ffffffffffffffff  CS: 0010  SS: 0018
    RIP: 0000003cbd8d49a3  RSP: 00007fffc84e0be8  RFLAGS: 00010206
    RAX: 000000000000002c  RBX: ffffffff8005d116  RCX: 0000000000000000
    RDX: 0000000000000008  RSI: 00007fffc84e0c00  RDI: 0000000000000003
    RBP: 0000000000000000   R8: 00007fffc84e0c10   R9: 0000000000000010
    R10: 0000000000000000  R11: 0000000000000246  R12: 0000000000000000
    R13: 00007fffc84e0d10  R14: 0000000000000000  R15: 00007fffc84e0c30
    ORIG_RAX: 000000000000002c  CS: 0033  SS: 002b
    
    What happens is that, when the tipc module in inserted it enters a standalone
    node mode in which communication to its own address is allowed <0.0.0> but not
    to other addresses, since the appropriate data structures have not been
    allocated yet (specifically the tipc_net pointer).  There is nothing stopping a
    client from trying to send such a message however, and if that happens, we
    attempt to dereference tipc_net.zones while the pointer is still NULL, and
    explode.  The fix is pretty straightforward.  Since these oopses all arise from
    the dereference of global pointers prior to their assignment to allocated
    values, and since these allocations are small (about 2k total), lets convert
    these pointers to static arrays of the appropriate size.  All the accesses to
    these bits consider 0/NULL to be a non match when searching, so all the lookups
    still work properly, and there is no longer a chance of a bad dererence
    anywhere.  As a bonus, this lets us eliminate the setup/teardown routines for
    those pointers, and elimnates the need to preform any locking around them to
    prevent access while their being allocated/freed.
    
    I've updated the tipc_net structure to behave this way to fix the exact reported
    problem, and also fixed up the tipc_bearers and media_list arrays to fix an
    obvious simmilar problem that arises from issuing tipc-config commands to
    manipulate bearers/links prior to entering networked mode
    
    I've tested this for a few hours by running the sanity tests and stress test
    with the tipcutils suite, and nothing has fallen over.  There have been a few
    lockdep warnings, but those were there before, and can be addressed later, as
    they didn't actually result in any deadlock.
    
    Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
    CC: Allan Stephens <allan.stephens@windriver.com>
    CC: David S. Miller <davem@davemloft.net>
    CC: tipc-discussion@lists.sourceforge.net
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit c6537d6742985da1fbf12ae26cde6a096fd35b5c
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Tue Apr 6 11:40:52 2010 +0000

    TIPC: Updated topology subscription protocol according to latest spec
    
    This patch makes it explicit in the API that all fields in subscriptions and events exchanged with the Topology Server must be in
    network byte order.
    It also ensures that all fields of a subscription are compared when cancelling a subscription, in order to avoid inadvertent
    cancelling of the wrong subscription.
    Finally, the tipc module version is updated to 2.0.0, to reflect the API change.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c531ab23d0b83b6018c5f137c4093771267f505b
Author: Zhu Yi <yi.zhu@intel.com>
Date:   Thu Mar 4 18:01:45 2010 +0000

    tipc: use limited socket backlog
    
    [ Upstream commit 53eecb1be5ae499d399d2923933937a9ea1a284f ]
    
    Make tipc adapt to the limited socket backlog change.
    
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Zhu Yi <yi.zhu@intel.com>
    Acked-by: Eric Dumazet <eric.dumazet@gmail.com>
    Acked-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 8379d07031e59a5d72bc73a6060c4d63aac956ce
Author: Hagen Paul Pfeifer <hagen@jauu.net>
Date:   Tue Mar 30 14:24:12 2010 +0000

    tipc: define needless global scoped variable static
    
    struct _zone *tipc_zones has local scope level and
    should defined with the correct scoping.
    
    CC: Per Liden <per.liden@nospam.ericsson.com>
    Signed-off-by: Hagen Paul Pfeifer <hagen@jauu.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a570f095eac34b7439eed2df6728381708c55bdc
Author: Frans Pop <elendil@planet.nl>
Date:   Wed Mar 24 07:57:29 2010 +0000

    tipc: remove trailing space in messages
    
    Signed-off-by: Frans Pop <elendil@planet.nl>
    Cc: Per Liden <per.liden@ericsson.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2e0c17d100c35e843dac1e99daf19b5e2b3fe168
Merge: 7de4a9a73563 22001a13d09d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Mar 18 16:45:01 2010 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net-2.6
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net-2.6: (39 commits)
      gigaset: fix build failure
      bridge: Make first arg to deliver_clone const.
      bridge br_multicast: Don't refer to BR_INPUT_SKB_CB(skb)->mrouters_only without IGMP snooping.
      route: Fix caught BUG_ON during rt_secret_rebuild_oneshot()
      bridge br_multicast: Fix skb leakage in error path.
      bridge br_multicast: Fix handling of Max Response Code in IGMPv3 message.
      NET: netpoll, fix potential NULL ptr dereference
      tipc: fix lockdep warning on address assignment
      l2tp: Fix UDP socket reference count bugs in the pppol2tp driver
      smsc95xx: wait for PHY to complete reset during init
      l2tp: Fix oops in pppol2tp_xmit
      smsc75xx: SMSC LAN75xx USB gigabit ethernet adapter driver
      ne: Do not use slashes in irq name string
      NET: ksz884x, fix lock imbalance
      gigaset: correct range checking off by one error
      bridge: Fix br_forward crash in promiscuous mode
      bridge: Move NULL mdb check into br_mdb_ip_get
      ISDN: Add PCI ID for HFC-2S/4S Beronet Card PCIe
      net-2.6 [Bug-Fix][dccp]: fix oops caused after failed initialisation
      myri: remove dead code
      ...

commit ca50910185fcce694af0cc194de50d2374a7c7ef
Author: Neil Horman <nhorman@tuxdriver.com>
Date:   Mon Mar 15 07:58:45 2010 +0000

    tipc: Allow retransmission of cloned buffers
    
    Forward port commit
    fc477e160af086f6e30c3d4fdf5f5c000d29beb5
    from git://tipc.cslab.ericsson.net/pub/git/people/allan/tipc.git
    
    Origional commit message:
    
    Allow retransmission of cloned buffers
    
    This patch fixes an issue with TIPC's message retransmission logic
    that prevented retransmission of clone sk_buffs.  Originally intended
    as a means of avoiding wasted work in retransmitting messages that
    were still on the driver's outbound queue, it also prevented TIPC
    from retransmitting messages through other means -- such as the
    secondary bearer of the broadcast link, or another interface in a
    set of bonded interfaces.  This fix removes existing checks for
    cloned sk_buffs that prevented such retransmission.
    
    Origionally-Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1a624832a06b465d0e5651901bcbc3680c78d374
Author: Neil Horman <nhorman@tuxdriver.com>
Date:   Mon Mar 15 08:02:24 2010 +0000

    tipc: Increase frequency of load distribution over broadcast link
    
    Forward port commit 29eb572941501c40ac6e62dbc5043bf9ee76ee56
    from git://tipc.cslab.ericsson.net/pub/git/people/allan/tipc.git
    
    Origional commit message:
    Increase frequency of load distribution over broadcast link
    
    This patch enhances the behavior of TIPC's broadcast link so that it
    alternates between redundant bearers (if available) after every
    message sent, rather than after every 10 messages.  This change helps
    to speed up delivery of retransmitted messages by ensuring that
    they are not sent repeatedly over a bearer that is no longer working,
    but not yet recognized as failed.
    
    Tested by myself in the latest net-2.6 tree using the tipc sanity test suite
    
    Origionally-signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
    
    bcast.c |   35 ++++++++++++++---------------------
    1 file changed, 14 insertions(+), 21 deletions(-)
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a2f46ee1ba5ee249ce2ca1ee7a7a0ac46529fb4f
Author: Neil Horman <nhorman@tuxdriver.com>
Date:   Tue Mar 16 08:14:33 2010 +0000

    tipc: fix lockdep warning on address assignment
    
    So in the forward porting of various tipc packages, I was constantly
    getting this lockdep warning everytime I used tipc-config to set a network
    address for the protocol:
    
    [ INFO: possible circular locking dependency detected ]
    2.6.33 #1
    tipc-config/1326 is trying to acquire lock:
    (ref_table_lock){+.-...}, at: [<ffffffffa0315148>] tipc_ref_discard+0x53/0xd4 [tipc]
    
    but task is already holding lock:
    (&(&entry->lock)->rlock#2){+.-...}, at: [<ffffffffa03150d5>] tipc_ref_lock+0x43/0x63 [tipc]
    
    which lock already depends on the new lock.
    
    the existing dependency chain (in reverse order) is:
    
    -> #1 (&(&entry->lock)->rlock#2){+.-...}:
    [<ffffffff8107b508>] __lock_acquire+0xb67/0xd0f
    [<ffffffff8107b78c>] lock_acquire+0xdc/0x102
    [<ffffffff8145471e>] _raw_spin_lock_bh+0x3b/0x6e
    [<ffffffffa03152b1>] tipc_ref_acquire+0xe8/0x11b [tipc]
    [<ffffffffa031433f>] tipc_createport_raw+0x78/0x1b9 [tipc]
    [<ffffffffa031450b>] tipc_createport+0x8b/0x125 [tipc]
    [<ffffffffa030f221>] tipc_subscr_start+0xce/0x126 [tipc]
    [<ffffffffa0308fb2>] process_signal_queue+0x47/0x7d [tipc]
    [<ffffffff81053e0c>] tasklet_action+0x8c/0xf4
    [<ffffffff81054bd8>] __do_softirq+0xf8/0x1cd
    [<ffffffff8100aadc>] call_softirq+0x1c/0x30
    [<ffffffff810549f4>] _local_bh_enable_ip+0xb8/0xd7
    [<ffffffff81054a21>] local_bh_enable_ip+0xe/0x10
    [<ffffffff81454d31>] _raw_spin_unlock_bh+0x34/0x39
    [<ffffffffa0308eb8>] spin_unlock_bh.clone.0+0x15/0x17 [tipc]
    [<ffffffffa0308f47>] tipc_k_signal+0x8d/0xb1 [tipc]
    [<ffffffffa0308dd9>] tipc_core_start+0x8a/0xad [tipc]
    [<ffffffffa01b1087>] 0xffffffffa01b1087
    [<ffffffff8100207d>] do_one_initcall+0x72/0x18a
    [<ffffffff810872fb>] sys_init_module+0xd8/0x23a
    [<ffffffff81009b42>] system_call_fastpath+0x16/0x1b
    
    -> #0 (ref_table_lock){+.-...}:
    [<ffffffff8107b3b2>] __lock_acquire+0xa11/0xd0f
    [<ffffffff8107b78c>] lock_acquire+0xdc/0x102
    [<ffffffff81454836>] _raw_write_lock_bh+0x3b/0x6e
    [<ffffffffa0315148>] tipc_ref_discard+0x53/0xd4 [tipc]
    [<ffffffffa03141ee>] tipc_deleteport+0x40/0x119 [tipc]
    [<ffffffffa0316e35>] release+0xeb/0x137 [tipc]
    [<ffffffff8139dbf4>] sock_release+0x1f/0x6f
    [<ffffffff8139dc6b>] sock_close+0x27/0x2b
    [<ffffffff811116f6>] __fput+0x12a/0x1df
    [<ffffffff811117c5>] fput+0x1a/0x1c
    [<ffffffff8110e49b>] filp_close+0x68/0x72
    [<ffffffff8110e552>] sys_close+0xad/0xe7
    [<ffffffff81009b42>] system_call_fastpath+0x16/0x1b
    
    Finally decided I should fix this.  Its a straightforward inversion,
    tipc_ref_acquire takes two locks in this order:
    ref_table_lock
    entry->lock
    
    while tipc_deleteport takes them in this order:
    entry->lock (via tipc_port_lock())
    ref_table_lock (via tipc_ref_discard())
    
    when the same entry is referenced, we get the above warning.  The fix is equally
    straightforward.  Theres no real relation between the entry->lock and the
    ref_table_lock (they just are needed at the same time), so move the entry->lock
    aquisition in tipc_ref_acquire down, after we unlock ref_table_lock (this is
    safe since the ref_table_lock guards changes to the reference table, and we've
    already claimed a slot there.  I've tested the below fix and confirmed that it
    clears up the lockdep issue
    
    Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
    CC: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit de5865714621e23d65c52955ca2125dbb074c242
Author: Neil Horman <nhorman@tuxdriver.com>
Date:   Mon Mar 8 12:43:56 2010 -0800

    tipc: filter out messages not intended for this host
    
    Port commit 20deb48d16fdd07ce2fdc8d03ea317362217e085
    from git://tipc.cslab.ericsson.net/pub/git/people/allan/tipc.git
    
    Part of the large effort I'm trying to help with getting all the downstreamed
    code from windriver forward ported to the upstream tree
    
    Origional commit message
    Restore check to filter out inadverdently received messages
    This patch reimplements a check that allows TIPC to discard messages
    that are not intended for it.  This check was present in TIPC 1.5/1.6,
    but was removed by accident during the development of TIPC 1.7; it has
    now been updated to account for new features present in TIPC 1.7 and
    reinserted into TIPC.  The main benefit of this check is to filter
    out messages arriving from orphaned link endpoints, which can arise
    when a node exits the network and then re-enters it with a different
    TIPC network address (i.e. <Z.C.N> value).
    
    Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
    Origionally-authored-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d88dca79d3852a3623f606f781e013d61486828a
Author: Neil Horman <nhorman@tuxdriver.com>
Date:   Mon Mar 8 12:20:58 2010 -0800

    tipc: fix endianness on tipc subscriber messages
    
    Remove htohl implementation from tipc
    
    I was working on forward porting the downstream commits for TIPC and ran accross this one:
    http://tipc.cslab.ericsson.net/cgi-bin/gitweb.cgi?p=people/allan/tipc.git;a=commitdiff;h=894279b9437b63cbb02405ad5b8e033b51e4e31e
    
    I was going to just take it, when I looked closer and noted what it was doing.
    This is basically a routine to byte swap fields of data in sent/received packets
    for tipc, dependent upon the receivers guessed endianness of the peer when a
    connection is established.  Asside from just seeming silly to me, it appears to
    violate the latest RFC draft for tipc:
    http://tipc.sourceforge.net/doc/draft-spec-tipc-02.txt
    Which, according to section 4.2 and 4.3.3, requires that all fields of all
    commands be sent in network byte order.  So instead of just taking this patch,
    instead I'm removing the htohl function and replacing the calls with calls to
    ntohl in the rx path and htonl in the send path.
    
    As part of this fix, I'm also changing the subscr_cancel function, which
    searches the list of subscribers, using a memcmp of the entire subscriber list,
    for the entry to tear down.  unfortunately it memcmps the entire tipc_subscr
    structure which has several bits that are private to the local side, so nothing
    will ever match.  section 5.2 of the draft spec indicates the <type,upper,lower>
    tuple should uniquely identify a subscriber, so convert subscr_cancel to just
    match on those fields (properly endian swapped).
    
    I've tested this using the tipc test suite, and its passed without issue.
    
    Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 53eecb1be5ae499d399d2923933937a9ea1a284f
Author: Zhu Yi <yi.zhu@intel.com>
Date:   Thu Mar 4 18:01:45 2010 +0000

    tipc: use limited socket backlog
    
    Make tipc adapt to the limited socket backlog change.
    
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Zhu Yi <yi.zhu@intel.com>
    Acked-by: Eric Dumazet <eric.dumazet@gmail.com>
    Acked-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d0021b252eaf65ca07ed14f0d66425dd9ccab9a6
Author: Neil Horman <nhorman@tuxdriver.com>
Date:   Wed Mar 3 08:31:23 2010 +0000

    tipc: Fix oops on send prior to entering networked mode (v3)
    
    Fix TIPC to disallow sending to remote addresses prior to entering NET_MODE
    
    user programs can oops the kernel by sending datagrams via AF_TIPC prior to
    entering networked mode.  The following backtrace has been observed:
    
    ID: 13459  TASK: ffff810014640040  CPU: 0   COMMAND: "tipc-client"
    [exception RIP: tipc_node_select_next_hop+90]
    RIP: ffffffff8869d3c3  RSP: ffff81002d9a5ab8  RFLAGS: 00010202
    RAX: 0000000000000001  RBX: 0000000000000001  RCX: 0000000000000001
    RDX: 0000000000000000  RSI: 0000000000000001  RDI: 0000000001001001
    RBP: 0000000001001001   R8: 0074736575716552   R9: 0000000000000000
    R10: ffff81003fbd0680  R11: 00000000000000c8  R12: 0000000000000008
    R13: 0000000000000001  R14: 0000000000000001  R15: ffff810015c6ca00
    ORIG_RAX: ffffffffffffffff  CS: 0010  SS: 0018
    RIP: 0000003cbd8d49a3  RSP: 00007fffc84e0be8  RFLAGS: 00010206
    RAX: 000000000000002c  RBX: ffffffff8005d116  RCX: 0000000000000000
    RDX: 0000000000000008  RSI: 00007fffc84e0c00  RDI: 0000000000000003
    RBP: 0000000000000000   R8: 00007fffc84e0c10   R9: 0000000000000010
    R10: 0000000000000000  R11: 0000000000000246  R12: 0000000000000000
    R13: 00007fffc84e0d10  R14: 0000000000000000  R15: 00007fffc84e0c30
    ORIG_RAX: 000000000000002c  CS: 0033  SS: 002b
    
    What happens is that, when the tipc module in inserted it enters a standalone
    node mode in which communication to its own address is allowed <0.0.0> but not
    to other addresses, since the appropriate data structures have not been
    allocated yet (specifically the tipc_net pointer).  There is nothing stopping a
    client from trying to send such a message however, and if that happens, we
    attempt to dereference tipc_net.zones while the pointer is still NULL, and
    explode.  The fix is pretty straightforward.  Since these oopses all arise from
    the dereference of global pointers prior to their assignment to allocated
    values, and since these allocations are small (about 2k total), lets convert
    these pointers to static arrays of the appropriate size.  All the accesses to
    these bits consider 0/NULL to be a non match when searching, so all the lookups
    still work properly, and there is no longer a chance of a bad dererence
    anywhere.  As a bonus, this lets us eliminate the setup/teardown routines for
    those pointers, and elimnates the need to preform any locking around them to
    prevent access while their being allocated/freed.
    
    I've updated the tipc_net structure to behave this way to fix the exact reported
    problem, and also fixed up the tipc_bearers and media_list arrays to fix an
    obvious simmilar problem that arises from issuing tipc-config commands to
    manipulate bearers/links prior to entering networked mode
    
    I've tested this for a few hours by running the sanity tests and stress test
    with the tipcutils suite, and nothing has fallen over.  There have been a few
    lockdep warnings, but those were there before, and can be addressed later, as
    they didn't actually result in any deadlock.
    
    Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
    CC: Allan Stephens <allan.stephens@windriver.com>
    CC: David S. Miller <davem@davemloft.net>
    CC: tipc-discussion@lists.sourceforge.net
    
     bearer.c |   37 ++++++-------------------------------
     bearer.h |    2 +-
     net.c    |   25 ++++---------------------
     3 files changed, 11 insertions(+), 53 deletions(-)
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7981d6f6b280d28779343cff4a88029fe53d1b47
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Jan 19 14:23:57 2010 -0800

    tipc: Clean up configuration file
    
    This patch addresses a number of minor (mostly cosmetic) issues relating
    to the configuration of TIPC, including the following:
    
    - Corrects range limits for maximum number of ports per node
    - Adds missing range limits for size of log buffer
    - Removes configuration setting relating to unsupported slave node capability
    - Standardizes description and help text wording for configuration settings
    - Removes unneeded blank spaces
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ee983ac76865797a5553597a9412c835c2710f51
Author: Amerigo Wang <amwang@redhat.com>
Date:   Thu Dec 24 17:26:48 2009 +0000

    tipc: use kconfig to limit numeric ranges
    
    We can rely on kconfig to limit these numbers,
    no need to limit them at compile time/run time.
    
    Users who modify these numbers manually should
    be responsible for themself. :)
    
    Signed-off-by: WANG Cong <amwang@redhat.com>
    Cc: Per Liden <per.liden@ericsson.com>
    Cc: Jon Maloy <jon.maloy@ericsson.com>
    Cc: Allan Stephens <allan.stephens@windriver.com>
    Cc: David S. Miller <davem@davemloft.net>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b3df9a514f3c2020952cff34bc5bc6694a31c00c
Author: roel kluin <roel.kluin@gmail.com>
Date:   Thu Aug 27 02:03:15 2009 +0000

    tipc: fix test of bearer_priority range in tipc_register_media()
    
    For the bearer_priority to be less than TIPC_MIN_LINK_PRI and greater than
    TIPC_MAX_LINK_PRI is logically impossible.
    
    Signed-off-by: Roel Kluin <roel.kluin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a57de0b4336e48db2811a2030bb68dba8dd09d88
Author: Jiri Olsa <jolsa@redhat.com>
Date:   Wed Jul 8 12:09:13 2009 +0000

    net: adding memory barrier to the poll and receive callbacks
    
    Adding memory barrier after the poll_wait function, paired with
    receive callbacks. Adding fuctions sock_poll_wait and sk_has_sleeper
    to wrap the memory barrier.
    
    Without the memory barrier, following race can happen.
    The race fires, when following code paths meet, and the tp->rcv_nxt
    and __add_wait_queue updates stay in CPU caches.
    
    CPU1                         CPU2
    
    sys_select                   receive packet
      ...                        ...
      __add_wait_queue           update tp->rcv_nxt
      ...                        ...
      tp->rcv_nxt check          sock_def_readable
      ...                        {
      schedule                      ...
                                    if (sk->sk_sleep && waitqueue_active(sk->sk_sleep))
                                            wake_up_interruptible(sk->sk_sleep)
                                    ...
                                 }
    
    If there was no cache the code would work ok, since the wait_queue and
    rcv_nxt are opposit to each other.
    
    Meaning that once tp->rcv_nxt is updated by CPU2, the CPU1 either already
    passed the tp->rcv_nxt check and sleeps, or will get the new value for
    tp->rcv_nxt and will return with new data mask.
    In both cases the process (CPU1) is being added to the wait queue, so the
    waitqueue_active (CPU2) call cannot miss and will wake up CPU1.
    
    The bad case is when the __add_wait_queue changes done by CPU1 stay in its
    cache, and so does the tp->rcv_nxt update on CPU2 side.  The CPU1 will then
    endup calling schedule and sleep forever if there are no more data on the
    socket.
    
    Calls to poll_wait in following modules were ommited:
            net/bluetooth/af_bluetooth.c
            net/irda/af_irda.c
            net/irda/irnet/irnet_ppp.c
            net/mac80211/rc80211_pid_debugfs.c
            net/phonet/socket.c
            net/rds/af_rds.c
            net/rfkill/core.c
            net/sunrpc/cache.c
            net/sunrpc/rpc_pipe.c
            net/tipc/socket.c
    
    Signed-off-by: Jiri Olsa <jolsa@redhat.com>
    Signed-off-by: Eric Dumazet <eric.dumazet@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6650613d3387dcc30685e2781818ea7d0f840027
Author: oscar.medina@motorola.com <oscar.medina@motorola.com>
Date:   Tue Jun 30 03:25:39 2009 +0000

    tipc: Add socket options to get number of queued messages
    
    This patch allows a TIPC application to determine the number of messages
    currently waiting in a socket's receive queue (TIPC_SOCK_RECVQ_DEPTH) or
    in all TIPC socket receive queues (TIPC_NODE_RECVQ_DEPTH).
    
    Signed-off-by: Oscar Medina <oscar.medina@motorola.com>
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit acb0a200ae48d95e3117608d0225a23e5efa283c
Author: Michał Mirosław <mirq-linux@rere.qmqm.pl>
Date:   Thu May 21 10:34:05 2009 +0000

    tipc: Use genl_register_family_with_ops()
    
    Use genl_register_family_with_ops() instead of a copy. This also changes
    netlink related variable names to be kernel-wide unique for consistency
    with other users.
    
    Signed-off-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4b704d59d6fb152bcd0883b84af5936a29067f12
Author: Stephen Hemminger <shemminger@vyatta.com>
Date:   Wed Mar 18 19:11:29 2009 -0700

    tipc: fix non-const printf format arguments
    
    Fix warnings from current gcc about using non-const strings as printf
    args in TIPC. Compile tested only (not a TIPC user).
    
    Signed-off-by: Stephen Hemminger <shemminger@vyatta.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 87fe85133fa7f33c2bc9882826666a7f117c62bd
Merge: 1ff8f739c7cc 15c554439fae
Author: Ingo Molnar <mingo@elte.hu>
Date:   Tue Feb 3 13:55:06 2009 +0100

    Merge branch 'core/header-fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/jaswinder/linux-2.6-tipclean into core/header-fixes

commit 6c614a50206ee56c21b34cc02d0bd40e756db87e
Author: Julia Lawall <julia@diku.dk>
Date:   Fri Jan 9 10:22:21 2009 +0000

    net/tipc/bcast.h: use ARRAY_SIZE
    
    ARRAY_SIZE is more concise to use when the size of an array is divided by
    the size of its type or the size of its first element.
    
    The semantic patch that makes this change is as follows:
    (http://www.emn.fr/x-info/coccinelle/)
    
    // <smpl>
    @i@
    @@
    
    #include <linux/kernel.h>
    
    @depends on i using "paren.iso"@
    type T;
    T[] E;
    @@
    
    - (sizeof(E)/sizeof(T))
    + ARRAY_SIZE(E)
    // </smpl>
    
    Signed-off-by: Julia Lawall <julia@diku.dk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f574179b63e48f5285468b5ee40f3c480221f708
Author: Harvey Harrison <harvey.harrison@gmail.com>
Date:   Fri Nov 7 23:37:50 2008 -0800

    tipc: trivial endian annotation in debug statement
    
    Use htonl rather than ntohl on a u32.
    net/tipc/name_table.c:557:2: warning: cast to restricted __be32
    
    Signed-off-by: Harvey Harrison <harvey.harrison@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 316343e2cfd9a4bb4c70d0e1991e7a74840fe29e
Merge: ec0c15afb41f fca1287a3a92
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Sep 3 16:21:02 2008 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net-2.6
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net-2.6:
      bnx2x: Accessing un-mapped page
      ath9k: Fix TX control flag use for no ACK and RTS/CTS
      ath9k: Fix TX status reporting
      iwlwifi: fix STATUS_EXIT_PENDING is not set on pci_remove
      iwlwifi: call apm stop on exit
      iwlwifi: fix Tx cmd memory allocation failure handling
      iwlwifi: fix rx_chain computation
      iwlwifi: fix station mimo power save values
      iwlwifi: remove false rxon if rx chain changes
      iwlwifi: fix hidden ssid discovery in passive channels
      iwlwifi: W/A for the TSF correction in IBSS
      netxen: Remove workaround for chipset quirk
      pcnet-cs, axnet_cs: add new IDs, remove dup ID with less info
      ixgbe: initialize interrupt throttle rate
      net/usb/pegasus: avoid hundreds of diagnostics
      tipc: Don't use structure names which easily globally conflict.

commit 6c00055a819ce8a6e2c3af2f65d4ea1a8559c491
Author: David S. Miller <davem@davemloft.net>
Date:   Tue Sep 2 23:38:32 2008 -0700

    tipc: Don't use structure names which easily globally conflict.
    
    Andrew Morton reported a build failure on sparc32, because TIPC
    uses names like "struct node" and there is a like named data
    structure defined in linux/node.h
    
    This just regexp replaces "struct node*" to "struct tipc_node*"
    to avoid this and any future similar problems.
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6ced0b3f1e1c089caf8798485423a093744b6a48
Author: Andrew Morton <akpm@linux-foundation.org>
Date:   Wed Aug 13 02:32:06 2008 -0700

    net/tipc/subscr.c: don't use ___constant_swab32
    
    It's an internal implementation detail which we _should_ be free to change.
    So we did, and it promptly broke.
    
    The compiler shold be able to work out when to use the __constant version
    anyway.
    
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 968edbe1c82f1a50d80225ed7e410aba419e55bf
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon Jul 14 22:45:33 2008 -0700

    tipc: Optimization to multicast name lookup algorithm
    
    This patch simplifies and speeds up TIPC's algorithm for identifying
    on-node and off-node destinations that overlap a multicast name
    sequence range.  Rather than traversing the list of all known name
    publications within the cluster, it now traverses the (potentially
    much shorter) list of name publications made by the node itself, and
    determines if any off-node destinations exist by comparing the sizes
    of the two lists.  (Since the node list must be a subset of the
    cluster list, a difference in sizes means that at least one off-node
    destination must exist.)
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1aad72d6cd518872c5f545320823bf7f4dafb026
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon Jul 14 22:44:58 2008 -0700

    tipc: Add missing locks when inspecting node list & link list
    
    This patch ensures that TIPC configuration commands that display info
    about neighboring nodes and their links take the spinlocks that
    protect the node list and link lists from changing while the lists
    are being traversed.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 08d2cf0f74b3ee5e773bb906043a0efe96ded229
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon Jul 14 22:44:32 2008 -0700

    tipc: Fix bug in scope checking for multicast messages
    
    This patch ensures that TIPC's multicast message name lookup
    algorithm does individualized scope checking for each published
    name it examines.  Previously, scope checking was only done for
    the first name in a name table publication list, which could
    result in incoming multicast messages being delivered to ports
    publishing names with "node" scope, or not being delivered to
    ports publishing names with "cluster" or "zone" scope.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0e35fd5e5264bb46d1febbe9cd9aa08421c21a96
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon Jul 14 22:44:01 2008 -0700

    tipc: Eliminate improper use of TIPC_OK error code
    
    This patch corrects many places where TIPC routines indicated
    successful completion by returning TIPC_OK instead of 0.
    (The TIPC_OK symbol has the value 0, but it should only be used
    in contexts that deal with the error code field of a TIPC
    message header.)
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2da59918e26837f305131cfac9c0f1b3b42bb8ae
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon Jul 14 22:43:32 2008 -0700

    tipc: Fix race condition that could cause accept() to fail
    
    This patch ensurs that accept() returns successfully even when
    the newly created socket is immediately disconnected by its peer.
    Previously, accept() would fail if it was unable to pass back
    the optional address info for the socket's peer before the
    socket became disconnected; TIPC now allows accept() to gather
    peer address information after disconnection.  As a bonus, the
    revised code accesses the socket's port more efficiently, without
    the overhead incurred by a reference table lookup.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8642bd9e04f51980b2b6293c66acf7e388c9a6e7
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon Jul 14 22:42:51 2008 -0700

    tipc: Optimize pointer dereferencing when receiving stream data
    
    This patch eliminates an unnecessary pointer dereference when
    accessing a stream-based socket's receive queue.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0ea522416b658dedfc9d565b331624a55a6260ad
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon Jul 14 22:42:19 2008 -0700

    tipc: Remove unneeded parameter to tipc_createport_raw()
    
    This patch eliminates an unneeded parameter when creating a low-level
    TIPC port object.  Instead of returning both the pointer to the port
    structure and the port's reference ID, it now returns only the pointer
    since the port structure contains the reference ID as one of its fields.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 40aecb1b13f50d96616abb612c17e59457f54263
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Jun 4 17:54:48 2008 -0700

    tipc: Message rejection rework preparatory changes
    
    This patch defines a few new message header manipulation routines,
    and generalizes the usefulness of another, in preparation for upcoming
    rework of TIPC's message rejection code.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 99c145939bc1f65f9b946f2b9dd7bfc1f44783d6
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Jun 4 17:48:25 2008 -0700

    tipc: Fix bugs in rejection of message with short header
    
    This patch ensures that TIPC doesn't try to access non-existent
    message header fields when rejecting a message with a short header.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9bef54383d16568da19cfe46bdc52cdedb9bb8da
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Jun 4 17:47:55 2008 -0700

    tipc: Message header creation optimizations
    
    This patch eliminates several cases where message header fields
    were being set to the same value twice.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit bd7845337b105e090dd18912d511139945fa7586
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Jun 4 17:47:30 2008 -0700

    tipc: Expand link sequence gap field to 13 bits
    
    This patch increases the "sequence gap" field of the LINK_PROTOCOL
    message header from 8 bits to 13 bits (utilizing 5 previously
    unused 0 bits).  This ensures that the field is big enough to
    indicate the loss of up to 8191 consecutive messages on the link,
    thereby accommodating the current worst-case scenario of 4000
    lost messages.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 307fdf5e7defcacf84db21cda18770b2bf5f5196
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Jun 4 17:38:22 2008 -0700

    tipc: Add missing spinlock in name table display code
    
    This patch ensures that the display code that traverses the
    publication lists belonging to a name table entry take its
    associated spinlock, to protect against a possible change to
    one of its "head of list" pointers caused by a simultaneous
    name table lookup operation by another thread of control.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0f15d36453bbd02d404445dace49f4ae072f44e5
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Jun 4 17:37:59 2008 -0700

    tipc: Prevent display of name table types with no publications
    
    This patch adds a check to prevent TIPC's name table display code
    from listing a name type entry if it exists only to hold subscription
    info, rather than published names.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 757152175666681d54d370500e41a756cfedd4fc
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Jun 4 17:37:34 2008 -0700

    tipc: Optimize message initialization routine
    
    This patch eliminates the rarely-used "error code" argument
    when initializing a TIPC message header, since the default
    value of zero is the desired result in most cases; the few
    exceptional cases now set the error code explicitly.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9c396a7bfb4fe74e444be09069651280da520944
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Jun 4 17:36:58 2008 -0700

    tipc: Prevent access of non-existent field in short message header
    
    This patch eliminates a case where TIPC's link code could try reading
    a field that is not present in a short message header.  (The random
    value obtained was not being used, but the read operation could result
    in an invalid memory access exception in extremely rare circumstances.)
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1265a02108c508b508112cdeac922aad03e0146a
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Jun 4 17:32:35 2008 -0700

    tipc: Minor optimizations to received message processing
    
    This patch enhances TIPC's handler for incoming messages in two
    ways:
    - the trivial, single-use routine for processing non-sequenced
      messages has been merged into the main handler
    - the interface that received a message is now identified without
      having to access and/or modify the associated sk_buff
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a686e6859e976712e28f6af927cd52a6a3bb372a
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Jun 4 17:29:39 2008 -0700

    tipc: Fix minor bugs in link session number handling
    
    This patch introduces a new, out-of-range value to indicate that
    a link endpoint does not have an existing session established
    with its peer, eliminating the risk that the previously used
    "invalid session number" value (i.e. zero) might eventually be
    assigned as a valid session number and cause incorrect link
    behavior.
    
    The patch also introduces explicit bit masking when assigning a
    new link session number to ensure it does not exceed 16 bits.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e0d4e3d0d72cfae7b7eac14e39e12dfc6b406313
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Jun 4 17:29:09 2008 -0700

    tipc: Fix bugs in message error code display when debugging
    
    This patch corrects two problems in the display of error code
    information in TIPC messages when debugging:
    - no longer tries to display error code in NAME_DISTRIBUTOR
      messages, which don't have the error field
    - now displays error code in 24 byte data messages, which do
      have the error field
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5307e46957e76d71f02d2d736030ad92cdb3dd8c
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Jun 4 17:28:45 2008 -0700

    tipc: Standardize error checking on incoming messages via native API
    
    This patch re-orders & re-groups the error checks performed on
    messages being delivered to native API ports, in order to clarify the
    similarities and differences required for the various message types.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 84b07c1638c36ae937d4930b467001a0d22904e5
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Jun 4 17:28:21 2008 -0700

    tipc: Fix bug in connection setup via native API
    
    This patch fixes a bug that prevented TIPC from receiving a
    connection setup request message on a native TIPC port.
    The revised connection setup logic ensures that validation
    of the source of a connection-based message is skipped if
    the port is not yet connected to a peer.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 03194379a77b02df3404ec4848a50c6784e9a8a5
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed May 21 14:55:04 2008 -0700

    tipc: Fix initialization sequence problems when entering network mode
    
    This patch ensures that TIPC's topology service and configuration
    service are shut down before switching into "network mode".  This
    ensures that TIPC does not mistakenly try to send unnecessary
    "publication withdraw" messages to other nodes before it is fully
    initialized for sending off-node messages.  Note that the node's
    current network address is now updated only after the two services
    are shut down; this ensures that any existing connections to the
    topology server are terminated correctly using the old address.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6d4a6672c8263f98544d2b91690dc7074b144090
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed May 21 14:54:12 2008 -0700

    tipc: Update "previous node" indicators when node address changes
    
    This patch ensures that the "previous node" field in any existing
    TIPC port message header templates is updated properly when a TIPC
    network address is assigned to the node.  (Previously, only the
    "originating node" field was updated.)
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 811102ca23dfdde5ee8b782b3a4bbff44c499cb2
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed May 21 14:53:34 2008 -0700

    tipc: Optimize null pointer check during neighbor discovery
    
    This patch optimizes TIPC neighbor discovery code to avoid testing for
    a null node pointer when the pointer is already known to be non-null.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2ecb0924d7791372a70ef8f1174e37b329b955c3
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed May 21 14:53:00 2008 -0700

    tipc: Prevent node object duplication due to simultaneous discovery
    
    This patch ensures that the simultaneous discovery of the same
    neighboring node by multiple interfaces does not cause TIPC to add
    the node into its internal data structures more than once.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 59f0c4523fdea865fab7d69d878269992a9d08dd
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed May 21 14:52:30 2008 -0700

    tipc: Fix skb_under_panic when configuring TIPC without privileges
    
    This patch prevents a TIPC configuration command requiring network
    administrator privileges from triggering an skbuff underrun if it
    is issued by a process lacking those privileges.  The revised error
    handling code avoids the use of a potentially uninitialized global
    variable by transforming the unauthorized command into a new command,
    then following the standard command processing path to generate the
    required error message.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5b06c85c3b96fa8db632f1ee94f99a2bd0215f3a
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon May 19 13:30:13 2008 -0700

    tipc: Cosmetic cleanup of topology service code
    
    This patch contains a set of cosmetic changes to TIPC's network
    topology service subsystem, including:
    
    - updates to comments (including copyright dates)
    - re-ordering structure fields to group them more logically
    - removal of optional debugging code that is no longer required
    - minor changes to whitespace to conform to Linux coding conventions
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 28353e7fad1d224687220a448950dc552645a50a
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon May 19 13:29:47 2008 -0700

    tipc: Consolidate subscriber & subscriber port references
    
    This patch modifies TIPC's network topology service so that it
    only requires a single reference table entry per subscriber
    connection, rather than two.  This is achieved by letting the
    reference to the server port communicating with the subscriber
    act as the reference to the subscriber object itself.  (Since
    the subscriber cannot exist without its port, and vice versa,
    this dual role for the reference is perfectly natural.)  This
    consolidation reduces the size of the reference table by 50%
    in the default configuration.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit fc5ad582709ce9c7b9ab7b70c1e5b5e2cfc384db
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon May 19 13:29:06 2008 -0700

    tipc: Fix bug in topology server byte swapping routine
    
    This patch fixes TIPC's topology server so that it does byte swapping
    correctly when endianness conversion is required.  (Note: This bug only
    impacted an application if it issues a subscription request to a
    topology server on another node, rather than the server on it's own
    node; since the topology server is normally not accessible by off-node
    applications, most TIPC applications were not impacted by the bug.)
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8e9501f5188d90eed737240453c32cad01849c96
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon May 19 13:28:32 2008 -0700

    tipc: Add support for customized subscription endianness
    
    This patch enables TIPC's topology server code to do customized
    endianness conversions on a per-subscription basis.  (This
    capability is needed to support the upcoming consolidation of
    subscriber and subscription object references.)
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e15f880409c807bb589e9492263564e80f0de6e9
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon May 19 13:27:31 2008 -0700

    tipc: Add support for customized subscription overlap handling
    
    This patch enables TIPC's topology server code to do customized
    overlap detection handling on a per-subscription basis.  (This
    capability is needed to support the upcoming introduction of
    multi-cluster TIPC networks.)
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7ef43ebaa538e0cc9063cbf84593a05091bcace2
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon May 12 15:42:28 2008 -0700

    tipc: Fix race condition when creating socket or native port
    
    This patch eliminates the (very remote) chance of a crash resulting
    from a partially initialized socket or native port unexpectedly
    receiving a message.  Now, during the creation of a socket or native
    port, the underlying generic port's lock is not released until all
    initialization required to handle incoming messages has been done.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4e3e6dcb43c3669a8817cb3d0f920f91661afd98
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon May 12 15:41:53 2008 -0700

    tipc: Enhancements to name table initialization
    
    This patch enhances the initialization of TIPC's name table
    by removing a pointless spinlock operation, and by using
    kcalloc() to detect requests for an oversized name table.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a8f43ee7e108cecf68cac652d0a3aeedb8131220
Merge: 91e37a793b5a 36ca34cc3b83
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri May 9 08:01:19 2008 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net-2.6
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net-2.6:
      sit: Add missing kfree_skb() on pskb_may_pull() failure.
      tipc: Increase buffer header to support worst-case device

commit f08269d3ecbb9300aeeb2d4272580f660afe9db9
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu May 8 21:38:24 2008 -0700

    tipc: Increase buffer header to support worst-case device
    
    This patch increases the headroom TIPC reserves in each sk_buff
    to accommodate the largest possible link level device header.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a7ca0268b5dfffcaa8a1fe40c6eccdeac50fa3ea
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon May 5 01:24:36 2008 -0700

    tipc: Update version number to TIPC 1.6.4
    
    This patch updates TIPC's version number to 1.6.4.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 48c971394626173eaf1c33441ea1d900c88b21a3
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon May 5 01:24:06 2008 -0700

    tipc: Exclude debug-only print buffer code when not debugging
    
    This patch modifies TIPC to only exclude debug-related print buffer
    routines when debugging capabilities are not required.  It also
    fixes up some related #defines that exceed 80 characters.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6063da9d74d4da812ae0d8f233b7e320e15765e3
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon May 5 01:23:34 2008 -0700

    tipc: Cosmetic cleanup of system & debug output declarations
    
    This patch contains changes to make TIPC's system & debug
    message declarations more readable.  Declarations have been
    regrouped and recommented to make it easier to understand
    what output is generated in both standard and debugging modes.
    In addition, oversize lines have been fixed to respect the
    80 character upper bound used in the kernel.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c89039850bdf8047472b4ee6132048dacef2cf5a
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon May 5 01:22:30 2008 -0700

    tipc: Elimination of print buffer chaining
    
    This patch revamps TIPC's print buffer subsystem to eliminate
    support for arbitrary chains of print buffers, which were
    rarely needed and difficult to use safely.
    
    In its place, print buffers can now be configured to echo their
    output to the system console.  This provides an equivalent for
    the only chaining currently utilized by TIPC, in a faster and
    more compact manner.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 40dbfae440abe6860167f12e0296bd7a1a599839
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon May 5 01:21:54 2008 -0700

    tipc: Fix null pointer dereference in debug code
    
    This patch eliminates an obsolete use of the DBG_OUTPUT print
    buffer which could lead to a null pointer crash in tipc_printf()
    if TIPC's debugging capabilities are configured.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 93758c3da19e99f5377cc1413c27320882b18f4b
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon May 5 01:21:12 2008 -0700

    tipc: Fix recursive spinlock invocation in print buffer code
    
    This patch fixes two routines that allow the global print buffer
    spinlock to be taken recursively.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit fb98ec71c7f81b6db9b793aeb9d53823b6960d8b
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon May 5 01:20:42 2008 -0700

    tipc: Provide feedback when log buffer resizing fails
    
    This patch provides feedback to the user when TIPC is unable
    to set its log buffer to the requested size.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 025adbe8e58290798001b472aec3eb618d8fc930
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon May 5 01:20:04 2008 -0700

    tipc: Simplify log buffer resizing
    
    This patch simplifies & standardizes the way TIPC's print buffer
    log is resized.  Code to terminate use of the log buffer is
    eliminated by simply setting the log buffer size to 0 bytes.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 77a50df2b14c8d3ee3c58c21c4a0e0157570df09
Merge: 96fffeb4b413 358c12953b88
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 28 09:44:11 2008 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net-2.6
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net-2.6:
      iwlwifi: Allow building iwl3945 without iwl4965.
      wireless: Fix compile error with wifi & leds
      tcp: Fix slab corruption with ipv6 and tcp6fuzz
      ipv4/ipv6 compat: Fix SSM applications on 64bit kernels.
      [IPSEC]: Use digest_null directly for auth
      sunrpc: fix missing kernel-doc
      can: Fix copy_from_user() results interpretation
      Revert "ipv6: Fix typo in net/ipv6/Kconfig"
      tipc: endianness annotations
      ipv6: result of csum_fold() is already 16bit, no need to cast
      [XFRM] AUDIT: Fix flowlabel text format ambibuity.

commit becf3da20eca82e06607b9813cc3b592b359bae5
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Sat Apr 26 22:42:14 2008 -0700

    tipc: endianness annotations
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a198d3a200313bca8261e30e6daaad790937fd7e
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Apr 15 00:07:15 2008 -0700

    [TIPC]: Allow stream receive to read from multiple TIPC messages
    
    This patch allows a stream socket to receive data from multiple
    TIPC messages in its receive queue, without requiring the use of
    the MSG_WAITALL flag.
    
    Acknowledgements to Florian Westphal <fw-tipc@strlen.de> for
    identifying this issue and suggesting how to correct it.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5f2f40a92e007ec5b503db20f3f70cb331c64f65
Author: Harvey Harrison <harvey.harrison@gmail.com>
Date:   Sun Feb 24 18:38:31 2008 -0800

    tipc: fix integer as NULL pointer sparse warnings in tipc
    
    net/tipc/cluster.c:145:2: warning: Using plain integer as NULL pointer
    net/tipc/link.c:3254:36: warning: Using plain integer as NULL pointer
    net/tipc/ref.c:151:15: warning: Using plain integer as NULL pointer
    net/tipc/zone.c:85:2: warning: Using plain integer as NULL pointer
    
    Signed-off-by: Harvey Harrison <harvey.harrison@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 86121fe5b4f170829429433cd99ec7f884c8ae75
Author: Ilpo Järvinen <ilpo.jarvinen@helsinki.fi>
Date:   Thu Feb 7 18:17:13 2008 -0800

    [TIPC]: Kill unused static inline (x5)
    
    All these static inlines are unused:
    
    in_own_zone     1 (net/tipc/addr.h)
    msg_dataoctet   1 (net/tipc/msg.h)
    msg_direct      1 (include/net/tipc/tipc_msg.h)
    msg_options     1 (include/net/tipc/tipc_msg.h)
    tipc_nmap_get   1 (net/tipc/bcast.h)
    
    Signed-off-by: Ilpo Järvinen <ilpo.jarvinen@helsinki.fi>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 4cec72c890d3a465eed08c24a4a2bfe25650318f
Author: Julia Lawall <julia@diku.dk>
Date:   Tue Jan 8 23:48:20 2008 -0800

    [TIPC]: Use tipc_port_unlock
    
    The file net/tipc/port.c takes a lock using the function tipc_port_lock and
    then releases the lock sometimes using tipc_port_unlock and sometimes using
    spin_unlock_bh(p_ptr->publ.lock).  tipc_port_unlock simply does the
    spin_unlock_bh, but it seems cleaner to use it everywhere.
    
    The problem was fixed using the following semantic patch.
    (http://www.emn.fr/x-info/coccinelle/)
    
    // <smpl>
    @@
    struct port *p_ptr;
    @@
    
       p_ptr = tipc_port_lock(...)
       ...
    (
       p_ptr = tipc_port_lock(...);
    |
    ?- spin_unlock_bh(p_ptr->publ.lock);
    +  tipc_port_unlock(p_ptr);
    )
    // </smpl>
    
    Signed-off-by: Julia Lawall <julia@diku.dk>
    Acked-by: Jon Paul Maloy <maloy@donjonn.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 98eb5683fb94c458b3c8d121797bc9aa1baf4e7e
Author: Andrew Morton <akpm@linux-foundation.org>
Date:   Wed Dec 12 11:24:19 2007 -0800

    [TIPC]: Fix semaphore handling.
    
    As noted by Kevin, tipc's release() does down_interruptible() and
    ignores the return value.  So if signal_pending() we'll end up doing
    up() on a non-downed semaphore.  Fix.
    
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit dd13810b420e0de1fe75bc3b9b14dd2c2c9a4299
Merge: a3634d7169f5 298bb62175a8
Author: Linus Torvalds <torvalds@woody.linux-foundation.org>
Date:   Wed Oct 31 07:46:51 2007 -0700

    Merge branch 'master' of git://git.kernel.org/pub/scm/linux/kernel/git/davem/net-2.6
    
    * 'master' of git://git.kernel.org/pub/scm/linux/kernel/git/davem/net-2.6:
      [AF_KEY]: suppress a warning for 64k pages.
      [TIPC]: Fix headercheck wrt. tipc_config.h
      [COMPAT]: Fix build on COMPAT platforms when CONFIG_NET is disabled.
      [CONNECTOR]: Fix a spurious kfree_skb() call
      [COMPAT]: Fix new dev_ifname32 returning -EFAULT
      [NET]: Fix incorrect sg_mark_end() calls.
      [IPVS]: Remove /proc/net/ip_vs_lblcr
      [IPV6]: remove duplicate call to proc_net_remove
      [NETNS]: fix net released by rcu callback
      [NET]: Fix free_netdev on register_netdev failure.
      [WAN]: fix drivers/net/wan/lmc/ compilation

commit 97ef1bb0c8e371b7988287f38bd107c4aa14d78d
Author: David S. Miller <davem@sunset.davemloft.net>
Date:   Tue Oct 30 21:44:00 2007 -0700

    [TIPC]: Fix headercheck wrt. tipc_config.h
    
    It wants string functions like memcpy() for inline
    routines, and these define userland interfaces.
    
    The only clean way to deal with this is to simply
    put linux/string.h into unifdef-y and have it
    include <string.h> when not-__KERNEL__.
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2d175d438f297bcd75a7b88baf3a304137047af6
Merge: c2db6376c934 502ef38da15d
Author: Linus Torvalds <torvalds@woody.linux-foundation.org>
Date:   Tue Oct 30 08:08:40 2007 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net-2.6
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net-2.6:
      [TIPC]: Add tipc_config.h to include/linux/Kbuild.
      [WAN]: lmc_ioctl: don't return with locks held
      [SUNRPC]: fix rpc debugging
      [TCP]: Saner thash_entries default with much memory.
      [SUNRPC] rpc_rdma: we need to cast u64 to unsigned long long for printing
      [IPv4] SNMP: Refer correct memory location to display ICMP out-going statistics
      [NET]: Fix error reporting in sys_socketpair().
      [NETFILTER]: nf_ct_alloc_hashtable(): use __GFP_NOWARN
      [NET]: Fix race between poll_napi() and net_rx_action()
      [TCP] MD5: Remove some more unnecessary casting.
      [TCP] vegas: Fix a bug in disabling slow start by gamma parameter.
      [IPVS]: use proper timeout instead of fixed value
      [IPV6] NDISC: Fix setting base_reachable_time_ms variable.

commit 502ef38da15d817f8e67acefc12dc2212f7f8aa1
Author: David S. Miller <davem@sunset.davemloft.net>
Date:   Tue Oct 30 01:19:19 2007 -0700

    [TIPC]: Add tipc_config.h to include/linux/Kbuild.
    
    Needed, as reported in:
    
    http://bugzilla.kernel.org/show_bug.cgi?id=9260
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ab3c556de19b1888b0830ef066524884d4788131
Merge: c4e7ac5d427a cae7ca3d3de4
Author: Linus Torvalds <torvalds@woody.linux-foundation.org>
Date:   Tue Aug 14 09:31:19 2007 -0700

    Merge branch 'master' of master.kernel.org:/pub/scm/linux/kernel/git/davem/net-2.6
    
    * 'master' of master.kernel.org:/pub/scm/linux/kernel/git/davem/net-2.6:
      [IPVS]: Use IP_VS_WAIT_WHILE when encessary.
      [NET]: Share correct feature code between bridging and bonding
      [ATM] drivers/atm/iphase.c: mostly kmalloc + memset conversion to kzalloc
      [IRDA] irda-usb.c: mostly kmalloc + memset conversion to k[cz]alloc
      [WAN] drivers/net/wan/hdlc_fr.c: kmalloc + memset conversion to kzalloc
      [DCCP]: fix memory leak and clean up style - dccp_feat_empty_confirm()
      [DCCP]: fix theoretical ccids_{read,write}_lock() race
      [XFRM]: Clean up duplicate includes in net/xfrm/
      [TIPC]: Clean up duplicate includes in net/tipc/
      [SUNRPC]: Clean up duplicate includes in net/sunrpc/
      [PKT_SCHED]: Clean up duplicate includes in net/sched/
      [IPV6]: Clean up duplicate includes in net/ipv6/
      [IPV4]: Clean up duplicate includes in net/ipv4/
      [ATM]: Clean up duplicate includes in net/atm/
      [ATM]: Clean up duplicate includes in drivers/atm/
      [IPCONFIG]: ip_auto_config fix
      [ATM]: fore200e_param_bs_queue() must be __devinit

commit 897c77cab0c386103e1c51fe8f3fc7eb5d1eb37f
Author: Jesper Juhl <jesper.juhl@gmail.com>
Date:   Fri Aug 10 15:19:43 2007 -0700

    [TIPC]: Clean up duplicate includes in net/tipc/
    
    This patch cleans up duplicate includes in
            net/tipc/
    
    Signed-off-by: Jesper Juhl <jesper.juhl@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e1d7e7fcf8625857de6b48975096c127e5cb1534
Merge: 3ff42e4f1309 49ff4bb4cd4c
Author: Linus Torvalds <torvalds@woody.linux-foundation.org>
Date:   Fri Aug 3 14:57:41 2007 -0700

    Merge branch 'master' of master.kernel.org:/pub/scm/linux/kernel/git/davem/net-2.6
    
    * 'master' of master.kernel.org:/pub/scm/linux/kernel/git/davem/net-2.6:
      [TCP]: DSACK signals data receival, be conservative
      [TCP]: Also handle snd_una changes in tcp_cwnd_down
      [TIPC]: Fix two minor sparse warnings.
      [TIPC]: Make function tipc_nameseq_subscribe static.
      [PF_KEY]: Fix ipsec not working in 2.6.23-rc1-git10
      [TCP]: Invoke tcp_sendmsg() directly, do not use inet_sendmsg().
      [IPV4] route.c: mostly kmalloc + memset conversion to k[cz]alloc
      [IPV4] raw.c: kmalloc + memset conversion to kzalloc
      [NETFILTER] nf_conntrack_l3proto_ipv4_compat.c: kmalloc + memset conversion to kzalloc
      [NETFILTER] nf_conntrack_expect.c: kmalloc + memset conversion to kzalloc
      [NET]: Removal of duplicated include net/wanrouter/wanmain.c
      SCTP: remove useless code in function sctp_init_cause
      SCTP: drop SACK if ctsn is not less than the next tsn of assoc
      SCTP: IPv4 mapped addr not returned in SCTPv6 accept()
      SCTP: IPv4 mapped addr not returned in SCTPv6 accept()
      sctp: fix shadow symbol in net/sctp/tsnmap.c
      sctp: try to fix readlock
      sctp: remove shadowed symbols
      sctp: move global declaration to header file.
      sctp: make locally used function static

commit 248bbf38215fd5ce45a31c65c5e5511d9b611e5a
Author: Florian Westphal <fw@strlen.de>
Date:   Thu Aug 2 19:26:23 2007 -0700

    [TIPC]: Make function tipc_nameseq_subscribe static.
    
    make needlessly global function tipc_nameseq_subscribe static.
    
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 94571065757a4f2619c48ab4e36cafdc635028ce
Author: Florian Westphal <fw@strlen.de>
Date:   Thu Jul 26 00:05:07 2007 -0700

    [TIPC]: fix tipc_link_create error handling
    
    if printbuf allocation or tipc_node_attach_link() fails, invalid
    references to the link are left in the associated node and bearer
    structures.
    Fix by allocating printbuf early and moving timer initialization
    and the addition of the new link to the b_ptr->links list after
    tipc_node_attach_link() succeeded.
    
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 64beb8f3eb3c724add64ca3272915528e10213c1
Author: Florian Westphal <fw@strlen.de>
Date:   Sat Jun 23 22:59:40 2007 -0700

    [TIPC]: Fix infinite loop in netlink handler
    
    The tipc netlink config handler uses the nlmsg_pid from the
    request header as destination for its reply. If the application
    initialized nlmsg_pid to 0, the reply is looped back to the kernel,
    causing hangup. Fix: use nlmsg_pid of the skb that triggered the
    request.
    
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit eb193e405155c5680ca1560b040b1551566660f9
Merge: 0ca2b776ab1f 6f5b7ef6b581
Author: Linus Torvalds <torvalds@g5.osdl.org>
Date:   Thu Nov 2 08:50:46 2006 -0800

    Merge master.kernel.org:/pub/scm/linux/kernel/git/davem/net-2.6
    
    * master.kernel.org:/pub/scm/linux/kernel/git/davem/net-2.6:
      [NETFILTER]: silence a warning in ebtables
      [IPV6]: File the fingerprints off ah6->spi/esp6->spi
      [TCP]: Set default congestion control when no sysctl.
      [TIPC] net/tipc/port.c: fix NULL dereference

commit d55b4c631e89a008e80b003e5aa4291d9ec800ac
Author: Adrian Bunk <bunk@stusta.de>
Date:   Tue Oct 31 16:59:35 2006 -0800

    [TIPC] net/tipc/port.c: fix NULL dereference
    
    The correct order is: NULL check before dereference
    
    Spotted by the Coverity checker.
    
    Signed-off-by: Adrian Bunk <bunk@stusta.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit fc144deec6403c17e6d3f6a6574f701420f166ed
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon Oct 16 21:57:56 2006 -0700

    [TIPC]: Can now list multicast link on an isolated network node
    
    This patch fixes a minor bug that prevents "tipc-config -l" from
    displaying the multicast link if a TIPC node has never successfully
    established at least one unicast link.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Per Liden <per.liden@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 29ede244cc4cfb11432a0bffd158ba09e7b2c167
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon Oct 16 21:42:04 2006 -0700

    [TIPC]: Debug print buffer enhancements and fixes
    
    This change modifies TIPC's print buffer code as follows:
    1) Now supports small print buffers (min. size reduced from 512 bytes to 64)
    2) Now uses TIPC_NULL print buffer structure to indicate null device
       instead of NULL pointer (this simplified error handling)
    3) Fixed misuse of console buffer structure by tipc_dump()
    4) Added and corrected comments in various places
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Per Liden <per.liden@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 28c4dadd3a7221f5b9cd5c7d03c499788b193353
Author: Al Viro <viro@ftp.linux.org.uk>
Date:   Tue Oct 10 22:45:57 2006 +0100

    [PATCH] tipc __user annotations
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Acked-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit 617dbeaa3f2987acc83c1149409685005e9dd740
Author: Jeff Garzik <jeff@garzik.org>
Date:   Tue Oct 3 16:25:34 2006 -0700

    [TIPC]: fix printk warning
    
    gcc spits out this warning:
    
    net/tipc/link.c: In function ‘link_retransmit_failure’:
    net/tipc/link.c:1669: warning: cast from pointer to integer of different
    size
    
    More than a little bit ugly, storing integers in void*, but at least the
    code is correct, unlike some of the more crufty Linux kernel code found
    elsewhere.
    
    Rather than having two casts to massage the value into u32, it's easier
    just to have a single cast and use "%lu", since it's just a printk.
    
    Signed-off-by: Jeff Garzik <jeff@garzik.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 67ab33db8be1cd466c09dfcba334d69d3e2f92e6
Merge: f7d57e42e7eb 300b93974ff6
Author: Linus Torvalds <torvalds@g5.osdl.org>
Date:   Mon Jul 3 21:28:14 2006 -0700

    Merge master.kernel.org:/pub/scm/linux/kernel/git/davem/net-2.6
    
    * master.kernel.org:/pub/scm/linux/kernel/git/davem/net-2.6: (27 commits)
      [Bluetooth] Add RFCOMM role switch support
      [Bluetooth] Allow disabling of credit based flow control
      [Bluetooth] Small cleanup of the L2CAP source code
      [Bluetooth] Use real devices for host controllers
      [Bluetooth] Add platform device for virtual and serial devices
      [Bluetooth] Add automatic sniff mode support
      [Bluetooth] Correct SCO buffer size on request
      [Bluetooth] Add suspend/resume support to the HCI USB driver
      [Bluetooth] Use raw mode for the Frontline sniffer device
      [BRIDGE]: br_dump_ifinfo index fix
      [ATM]: add+use poison defines
      [NET]: add+use poison defines
      [IOAT]: fix kernel-doc in source files
      [IOAT]: fix header file kernel-doc
      [TG3]: Add ipv6 TSO feature
      [IPV6]: Fix ipv6 GSO payload length
      [TIPC] Fixed sk_buff panic caused by tipc_link_bundle_buf (REVISED)
      [NET]: Verify gso_type too in gso_segment
      [IPVS]: Add sysctl documentation
      [ROSE]: Try all routes when establishing a ROSE connections.
      ...

commit 863fae666acb87b150f4634e6e79476ebe274f43
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Mon Jul 3 19:39:36 2006 -0700

    [TIPC] Fixed sk_buff panic caused by tipc_link_bundle_buf (REVISED)
    
    The recent change to direct inspection of bundle buffer tailroom did not
    account for the possiblity of unrequested tailroom added by skb_alloc(),
    thereby allowing a bundle to be created that exceeds the current link MTU.
    An additional check now ensures that bundling works correctly no matter
    if the bundle buffer is smaller, larger, or equal to the link MTU.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Per Liden <per.liden@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 74e651f0aa100f3e5d3432a8dd8869c089e8d72f
Merge: 6002e45045a1 0702056f9f41
Author: Linus Torvalds <torvalds@g5.osdl.org>
Date:   Thu Jun 29 17:43:43 2006 -0700

    Merge master.kernel.org:/pub/scm/linux/kernel/git/davem/net-2.6
    
    * master.kernel.org:/pub/scm/linux/kernel/git/davem/net-2.6: (30 commits)
      [TIPC]: Initial activation message now includes TIPC version number
      [TIPC]: Improve response to requests for node/link information
      [TIPC]: Fixed skb_under_panic caused by tipc_link_bundle_buf
      [IrDA]: Fix the AU1000 FIR dependencies
      [IrDA]: Fix RCU lock pairing on error path
      [XFRM]: unexport xfrm_state_mtu
      [NET]: make skb_release_data() static
      [NETFILTE] ipv4: Fix typo (Bugzilla #6753)
      [IrDA]: MCS7780 usb_driver struct should be static
      [BNX2]: Turn off link during shutdown
      [BNX2]: Use dev_kfree_skb() instead of the _irq version
      [ATM]: basic sysfs support for ATM devices
      [ATM]: [suni] change suni_init to __devinit
      [ATM]: [iphase] should be __devinit not __init
      [ATM]: [idt77105] should be __devinit not __init
      [BNX2]: Add NETIF_F_TSO_ECN
      [NET]: Add ECN support for TSO
      [AF_UNIX]: Datagram getpeersec
      [NET]: Fix logical error in skb_gso_ok
      [PKT_SCHED]: PSCHED_TADD() and PSCHED_TADD2() can result,tv_usec >= 1000000
      ...

commit ea13847b240e689e8f291355c36b46de9f44ddf9
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu Jun 29 12:33:20 2006 -0700

    [TIPC]: Improve response to requests for node/link information
    
    Now allocates reply space for "get links" request based on number of actual
    links, not number of potential links.  Also, limits reply to "get links" and
    "get nodes" requests to 32KB to match capabilities of tipc-config utility
    that issued request.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Per Liden <per.liden@ericsson.com>

commit e49060c7cab6ca856d048e1e10d71c0e6fedf376
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Thu Jun 29 12:32:46 2006 -0700

    [TIPC]: Fixed skb_under_panic caused by tipc_link_bundle_buf
    
    Now determines tailroom of bundle buffer by directly inspection of buffer.
    Previously, buffer was assumed to have a max capacity equal to the link MTU,
    but the addition of link MTU negotiation means that the link MTU can increase
    after the bundle buffer is allocated.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Per Liden <per.liden@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 61a46dc9d1c10d07a2ed6b7d346b868803b52506
Merge: b78709cfd438 8070b2b1ecbe
Author: Linus Torvalds <torvalds@g5.osdl.org>
Date:   Mon Jun 26 10:08:13 2006 -0700

    Merge master.kernel.org:/pub/scm/linux/kernel/git/davem/net-2.6
    
    * master.kernel.org:/pub/scm/linux/kernel/git/davem/net-2.6: (42 commits)
      [IOAT]: Do not dereference THIS_MODULE directly to set unsafe.
      [NETROM]: Fix possible null pointer dereference.
      [NET] netpoll: break recursive loop in netpoll rx path
      [NET] netpoll: don't spin forever sending to stopped queues
      [IRDA]: add some IBM think pads
      [ATM]: atm/mpc.c warning fix
      [NET]: skb_find_text ignores to argument
      [NET]: make net/core/dev.c:netdev_nit static
      [NET]: Fix GSO problems in dev_hard_start_xmit()
      [NET]: Fix CHECKSUM_HW GSO problems.
      [TIPC]: Fix incorrect correction to discovery timer frequency computation.
      [TIPC]: Get rid of dynamically allocated arrays in broadcast code.
      [TIPC]: Fixed link switchover bugs
      [TIPC]: Enhanced & cleaned up system messages; fixed 2 obscure memory leaks.
      [TIPC]: First phase of assert() cleanup
      [TIPC]: Disallow config operations that aren't supported in certain modes.
      [TIPC]: Fixed memory leak in tipc_link_send() when destination is unreachable
      [TIPC]: Added missing warning for out-of-memory condition
      [TIPC]: Withdrawing all names from nameless port now returns success, not error
      [TIPC]: Optimized argument validation done by connect().
      ...

commit c33d53b23589d9133af85effefbaa619853eb7f0
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Sun Jun 25 23:50:30 2006 -0700

    [TIPC]: Fixed memory leak in tipc_link_send() when destination is unreachable
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Per Liden <per.liden@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 49384507896ee26e67266cebef6b6a9f2e31081c
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Sun Jun 25 23:38:29 2006 -0700

    [TIPC]: Corrected potential misuse of tipc_media_addr structure.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Per Liden <per.liden@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 988f088a8e9e555dc99ced83690967fad3d905f6
Author: Adrian Bunk <bunk@stusta.de>
Date:   Mon Mar 20 22:37:52 2006 -0800

    [TIPC]: Cleanups
    
    This patch contains the following possible cleanups:
    - make needlessly global code static
    - #if 0 the following unused global functions:
      - name_table.c: tipc_nametbl_print()
      - name_table.c: tipc_nametbl_dump()
      - net.c: tipc_net_next_node()
    
    Signed-off-by: Adrian Bunk <bunk@stusta.de>
    Signed-off-by: Per Liden <per.liden@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 05790c6456f144024e655710347b3df499260374
Author: Sam Ravnborg <sam@ravnborg.org>
Date:   Mon Mar 20 22:37:04 2006 -0800

    [TIPC]: Remove inlines from *.c
    
    With reference to latest discussions on linux-kernel with respect to
    inline here is a patch for tipc to remove all inlines as used in
    the .c files. See also chapter 14 in Documentation/CodingStyle.
    
    Before:
       text        data     bss     dec     hex filename
     102990        5292    1752  110034   1add2 tipc.o
    
    Now:
       text        data     bss     dec     hex filename
     101190        5292    1752  108234   1a6ca tipc.o
    
    This is a nice text size reduction which will improve icache usage.
    In some cases bigger (> 4 lines) functions where declared inline
    and used in many places, they are most probarly no longer inlined by gcc
    resulting in the size reduction.
    There are several one liners that no longer are declared inline, but gcc
    should inline these just fine without the inline hint.
    
    With this patch applied one warning is added about an unused static
    function - that was hidded by utilising inline before.
    The function in question were kept so this patch is solely a
    inline removal patch.
    
    Signed-off-by: Sam Ravnborg <sam@ravnborg.org>
    Signed-off-by: Per Liden <per.liden@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1fc54d8f49c1270c584803437fb7c0ac543588c1
Author: Sam Ravnborg <sam@ravnborg.org>
Date:   Mon Mar 20 22:36:47 2006 -0800

    [TIPC]: Fix simple sparse warnings
    
    Tried to run the new tipc stack through sparse.
    Following patch fixes all cases where 0 was used
    as replacement of NULL.
    Use NULL to document this is a pointer and to silence sparse.
    
    This brough sparse warning count down with 127 to 24 warnings.
    
    Signed-off-by: Sam Ravnborg <sam@ravnborg.org>
    Signed-off-by: Per Liden <per.liden@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 27a7b0415f6e5c0ffdfb1ba42b9b96ddfbb78b8f
Merge: ad12583f46bc 4323add67792
Author: David S. Miller <davem@sunset.davemloft.net>
Date:   Wed Jan 18 14:23:54 2006 -0800

    Merge git://tipc.cslab.ericsson.net/pub/git/tipc

commit 4323add67792ced172d0d93b8b2e6187023115f1
Author: Per Liden <per.liden@ericsson.com>
Date:   Wed Jan 18 00:38:21 2006 +0100

    [TIPC] Avoid polluting the global namespace
    
    This patch adds a tipc_ prefix to all externally visible symbols.
    
    Signed-off-by: Per Liden <per.liden@ericsson.com>

commit 16cb4b333c9e7a00ce3b1d74ec0c9b4c2e956910
Author: Per Liden <per.liden@nospam.ericsson.com>
Date:   Fri Jan 13 22:22:22 2006 +0100

    [TIPC] Updated link priority macros
    
    Added macros for min/default/max link priority in tipc_config.h.
    Also renamed TIPC_NUM_LINK_PRI to TIPC_MEDIA_LINK_PRI since that
    is a more accurate description of what it is used for.
    
    Signed-off-by: Per Liden <per.liden@ericsson.com>

commit 593a5f22d8035b1396a958b6bbde9f13c0f09549
Author: Per Liden <per.liden@nospam.ericsson.com>
Date:   Wed Jan 11 19:14:19 2006 +0100

    [TIPC] More updates of file headers
    
    Updated copyright notice to include the year the file was
    actually created. Information about file creation dates
    was extracted from the files in the old CVS repository
    at tipc.sourceforge.net.
    
    Signed-off-by: Per Liden <per.liden@nospam.ericsson.com>

commit ea714ccda5d5858ee677a77cf33dbaf34a0060c3
Author: Per Liden <per.liden@nospam.ericsson.com>
Date:   Wed Jan 11 12:28:47 2006 +0100

    [TIPC] Moved configuration interface into tipc_config.h
    
    Restored the old tipc_config.h to get a cleaner division between the
    interfaces used by normal TIPC users and TIPC administration utilities.
    
    Signed-off-by: Per Liden <per.liden@nospam.ericsson.com>

commit b97bf3fd8f6a16966d4f18983b2c40993ff937d4
Author: Per Liden <per.liden@nospam.ericsson.com>
Date:   Mon Jan 2 19:04:38 2006 +0100

    [TIPC] Initial merge
    
    TIPC (Transparent Inter Process Communication) is a protocol designed for
    intra cluster communication. For more information see
    http://tipc.sourceforge.net
    
    Signed-off-by: Per Liden <per.liden@nospam.ericsson.com>
