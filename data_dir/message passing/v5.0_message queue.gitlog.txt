commit 8398a45d3d72a7389b0a301b34f883e0042b9005
Author: Neil Armstrong <narmstrong@baylibre.com>
Date:   Thu Sep 8 14:18:03 2022 +0200

    spi: meson-spicc: do not rely on busy flag in pow2 clk ops
    
    [ Upstream commit 36acf80fc0c4b5ebe6fa010b524d442ee7f08fd3 ]
    
    Since [1], controller's busy flag isn't set anymore when the
    __spi_transfer_message_noqueue() is used instead of the
    __spi_pump_transfer_message() logic for spi_sync transfers.
    
    Since the pow2 clock ops were limited to only be available when a
    transfer is ongoing (between prepare_transfer_hardware and
    unprepare_transfer_hardware callbacks), the only way to track this
    down is to check for the controller cur_msg.
    
    [1] ae7d2346dc89 ("spi: Don't use the message queue if possible in spi_sync")
    
    Fixes: 09992025dacd ("spi: meson-spicc: add local pow2 clock ops to preserve rate between messages")
    Fixes: ae7d2346dc89 ("spi: Don't use the message queue if possible in spi_sync")
    Reported-by: Markus Schneider-Pargmann <msp@baylibre.com>
    Signed-off-by: Neil Armstrong <narmstrong@baylibre.com>
    Tested-by: Markus Schneider-Pargmann <msp@baylibre.com>
    Link: https://lore.kernel.org/r/20220908121803.919943-1-narmstrong@baylibre.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4ce47c5545d2ec52207dc2f4a1f9c4b8d5f54516
Author: Neil Armstrong <narmstrong@baylibre.com>
Date:   Thu Sep 8 14:18:03 2022 +0200

    spi: meson-spicc: do not rely on busy flag in pow2 clk ops
    
    [ Upstream commit 36acf80fc0c4b5ebe6fa010b524d442ee7f08fd3 ]
    
    Since [1], controller's busy flag isn't set anymore when the
    __spi_transfer_message_noqueue() is used instead of the
    __spi_pump_transfer_message() logic for spi_sync transfers.
    
    Since the pow2 clock ops were limited to only be available when a
    transfer is ongoing (between prepare_transfer_hardware and
    unprepare_transfer_hardware callbacks), the only way to track this
    down is to check for the controller cur_msg.
    
    [1] ae7d2346dc89 ("spi: Don't use the message queue if possible in spi_sync")
    
    Fixes: 09992025dacd ("spi: meson-spicc: add local pow2 clock ops to preserve rate between messages")
    Fixes: ae7d2346dc89 ("spi: Don't use the message queue if possible in spi_sync")
    Reported-by: Markus Schneider-Pargmann <msp@baylibre.com>
    Signed-off-by: Neil Armstrong <narmstrong@baylibre.com>
    Tested-by: Markus Schneider-Pargmann <msp@baylibre.com>
    Link: https://lore.kernel.org/r/20220908121803.919943-1-narmstrong@baylibre.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bcc34897bd58f758d4983cd08cced09ff139d2d8
Author: Neil Armstrong <narmstrong@baylibre.com>
Date:   Thu Sep 8 14:18:03 2022 +0200

    spi: meson-spicc: do not rely on busy flag in pow2 clk ops
    
    [ Upstream commit 36acf80fc0c4b5ebe6fa010b524d442ee7f08fd3 ]
    
    Since [1], controller's busy flag isn't set anymore when the
    __spi_transfer_message_noqueue() is used instead of the
    __spi_pump_transfer_message() logic for spi_sync transfers.
    
    Since the pow2 clock ops were limited to only be available when a
    transfer is ongoing (between prepare_transfer_hardware and
    unprepare_transfer_hardware callbacks), the only way to track this
    down is to check for the controller cur_msg.
    
    [1] ae7d2346dc89 ("spi: Don't use the message queue if possible in spi_sync")
    
    Fixes: 09992025dacd ("spi: meson-spicc: add local pow2 clock ops to preserve rate between messages")
    Fixes: ae7d2346dc89 ("spi: Don't use the message queue if possible in spi_sync")
    Reported-by: Markus Schneider-Pargmann <msp@baylibre.com>
    Signed-off-by: Neil Armstrong <narmstrong@baylibre.com>
    Tested-by: Markus Schneider-Pargmann <msp@baylibre.com>
    Link: https://lore.kernel.org/r/20220908121803.919943-1-narmstrong@baylibre.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ee12c2f906009275dfb37e13243ea22b48fa3bfd
Author: Neil Armstrong <narmstrong@baylibre.com>
Date:   Thu Sep 8 14:18:03 2022 +0200

    spi: meson-spicc: do not rely on busy flag in pow2 clk ops
    
    [ Upstream commit 36acf80fc0c4b5ebe6fa010b524d442ee7f08fd3 ]
    
    Since [1], controller's busy flag isn't set anymore when the
    __spi_transfer_message_noqueue() is used instead of the
    __spi_pump_transfer_message() logic for spi_sync transfers.
    
    Since the pow2 clock ops were limited to only be available when a
    transfer is ongoing (between prepare_transfer_hardware and
    unprepare_transfer_hardware callbacks), the only way to track this
    down is to check for the controller cur_msg.
    
    [1] ae7d2346dc89 ("spi: Don't use the message queue if possible in spi_sync")
    
    Fixes: 09992025dacd ("spi: meson-spicc: add local pow2 clock ops to preserve rate between messages")
    Fixes: ae7d2346dc89 ("spi: Don't use the message queue if possible in spi_sync")
    Reported-by: Markus Schneider-Pargmann <msp@baylibre.com>
    Signed-off-by: Neil Armstrong <narmstrong@baylibre.com>
    Tested-by: Markus Schneider-Pargmann <msp@baylibre.com>
    Link: https://lore.kernel.org/r/20220908121803.919943-1-narmstrong@baylibre.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 36acf80fc0c4b5ebe6fa010b524d442ee7f08fd3
Author: Neil Armstrong <narmstrong@baylibre.com>
Date:   Thu Sep 8 14:18:03 2022 +0200

    spi: meson-spicc: do not rely on busy flag in pow2 clk ops
    
    Since [1], controller's busy flag isn't set anymore when the
    __spi_transfer_message_noqueue() is used instead of the
    __spi_pump_transfer_message() logic for spi_sync transfers.
    
    Since the pow2 clock ops were limited to only be available when a
    transfer is ongoing (between prepare_transfer_hardware and
    unprepare_transfer_hardware callbacks), the only way to track this
    down is to check for the controller cur_msg.
    
    [1] ae7d2346dc89 ("spi: Don't use the message queue if possible in spi_sync")
    
    Fixes: 09992025dacd ("spi: meson-spicc: add local pow2 clock ops to preserve rate between messages")
    Fixes: ae7d2346dc89 ("spi: Don't use the message queue if possible in spi_sync")
    Reported-by: Markus Schneider-Pargmann <msp@baylibre.com>
    Signed-off-by: Neil Armstrong <narmstrong@baylibre.com>
    Tested-by: Markus Schneider-Pargmann <msp@baylibre.com>
    Link: https://lore.kernel.org/r/20220908121803.919943-1-narmstrong@baylibre.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit b30f7c8eb0780e1479a9882526e838664271f4c9
Author: Mark Brown <broonie@kernel.org>
Date:   Thu Sep 1 13:07:32 2022 +0100

    spi: mux: Fix mux interaction with fast path optimisations
    
    The spi-mux driver is rather too clever and attempts to resubmit any
    message that is submitted to it to the parent controller with some
    adjusted callbacks.  This does not play at all nicely with the fast
    path which now sets flags on the message indicating that it's being
    handled through the fast path, we see async messages flagged as being on
    the fast path.  Ideally the spi-mux code would duplicate the message but
    that's rather invasive and a bit fragile in that it relies on the mux
    knowing which fields in the message to copy.  Instead teach the core
    that there are controllers which can't cope with the fast path and have
    the mux flag itself as being such a controller, ensuring that messages
    going via the mux don't get partially handled via the fast path.
    
    This will reduce the performance of any spi-mux connected device since
    we'll now always use the thread for both the actual controller and the
    mux controller instead of just the actual controller but given that we
    were always hitting the slow path anyway it's hopefully not too much of
    an additional cost and it allows us to keep the fast path.
    
    Fixes: ae7d2346dc89 ("spi: Don't use the message queue if possible in spi_sync")
    Reported-by: Casper Andersson <casper.casan@gmail.com>
    Tested-by: Casper Andersson <casper.casan@gmail.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Link: https://lore.kernel.org/r/20220901120732.49245-1-broonie@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit ae7d2346dc89ae89a6e0aabe6037591a11e593c0
Author: David Jander <david@protonic.nl>
Date:   Tue Jun 21 08:12:25 2022 +0200

    spi: Don't use the message queue if possible in spi_sync
    
    The interaction with the controller message queue and its corresponding
    auxiliary flags and variables requires the use of the queue_lock which is
    costly. Since spi_sync will transfer the complete message anyway, and not
    return until it is finished, there is no need to put the message into the
    queue if the queue is empty. This can save a lot of overhead.
    
    As an example of how significant this is, when using the MCP2518FD SPI CAN
    controller on a i.MX8MM SoC, the time during which the interrupt line
    stays active (during 3 relatively short spi_sync messages), is reduced
    from 98us to 72us by this patch.
    
    Signed-off-by: David Jander <david@protonic.nl>
    Link: https://lore.kernel.org/r/20220621061234.3626638-3-david@protonic.nl
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 1714582a3a087eda8786d5a1b32b2ec86ca8a303
Author: David Jander <david@protonic.nl>
Date:   Tue Jun 21 08:12:24 2022 +0200

    spi: Move ctlr->cur_msg_prepared to struct spi_message
    
    This enables the possibility to transfer a message that is not at the
    current tip of the async message queue.
    This is in preparation of the next patch(es) which enable spi_sync messages
    to skip the queue altogether.
    
    Signed-off-by: David Jander <david@protonic.nl>
    Link: https://lore.kernel.org/r/20220621061234.3626638-2-david@protonic.nl
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 145cfc3840e5931a789a8e2e76af841ab4cad44b
Author: Mark Brown <broonie@kernel.org>
Date:   Mon Jun 13 13:19:46 2022 +0100

    spi: mpc52xx-psc: Switch to using core message queue
    
    We deprecated open coding of the transfer queue back in 2017 so it's high
    time we finished up converting drivers to use the standard message queue
    code. The mpc52xx-psc driver is fairly straightforward so convert to use
    transfer_one_message(), it looks like the driver would be a good fit for
    transfer_one() with a little bit of updating but this smaller change seems
    safer.
    
    The driver seems like a good candidate for transfer_one() but the chip
    select function is actually doing rather more than just updating the chip
    select and both transfer_one() and transfer_one_message() are current APIs
    so leave that refactoring for another day, ideally by someone with the
    hardware.
    
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Link: https://lore.kernel.org/r/20220613121946.136193-1-broonie@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit e2185072a4a4786eb46be046cf20494c08dcc78f
Author: Mark Brown <broonie@kernel.org>
Date:   Fri Jun 10 16:46:49 2022 +0100

    spi: sh: Switch to using core message queue
    
    We deprecated open coding of the transfer queue back in 2017 so it's high
    time we finished up converting drivers to use the standard message queue
    code. The SH driver is fairly straightforward so convert to use
    transfer_one_message(), it looks like the driver would be a good fit for
    transfer_one() with a little bit of updating but this smaller change seems
    safer.
    
    I'm not actually clear how the driver worked robustly previously, it
    clears SSA and CR1 when queueing a transfer which looks like it would
    interfere with any running transfer. This clearing has been moved to the
    start of the message transfer function.
    
    I'm also unclear how exactly the chip select is managed with this driver.
    
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Link: https://lore.kernel.org/r/20220610154649.1707851-1-broonie@kernel.org
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit aec8904396dc6c34a104f42b02d50ca9de58ab13
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Mon Jan 24 12:46:50 2022 -0600

    ucount: Make get_ucount a safe get_user replacement
    
    commit f9d87929d451d3e649699d0f1d74f71f77ad38f5 upstream.
    
    When the ucount code was refactored to create get_ucount it was missed
    that some of the contexts in which a rlimit is kept elevated can be
    the only reference to the user/ucount in the system.
    
    Ordinary ucount references exist in places that also have a reference
    to the user namspace, but in POSIX message queues, the SysV shm code,
    and the SIGPENDING code there is no independent user namespace
    reference.
    
    Inspection of the the user_namespace show no instance of circular
    references between struct ucounts and the user_namespace.  So
    hold a reference from struct ucount to i's user_namespace to
    resolve this problem.
    
    Link: https://lore.kernel.org/lkml/YZV7Z+yXbsx9p3JN@fixkernel.com/
    Reported-by: Qian Cai <quic_qiancai@quicinc.com>
    Reported-by: Mathias Krause <minipli@grsecurity.net>
    Tested-by: Mathias Krause <minipli@grsecurity.net>
    Reviewed-by: Mathias Krause <minipli@grsecurity.net>
    Reviewed-by: Alexey Gladkov <legion@kernel.org>
    Fixes: d64696905554 ("Reimplement RLIMIT_SIGPENDING on top of ucounts")
    Fixes: 6e52a9f0532f ("Reimplement RLIMIT_MSGQUEUE on top of ucounts")
    Fixes: d7c9e99aee48 ("Reimplement RLIMIT_MEMLOCK on top of ucounts")
    Cc: stable@vger.kernel.org
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 348a8501e6029f9308ea7675edfa645b5e669c9e
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Mon Jan 24 12:46:50 2022 -0600

    ucount: Make get_ucount a safe get_user replacement
    
    commit f9d87929d451d3e649699d0f1d74f71f77ad38f5 upstream.
    
    When the ucount code was refactored to create get_ucount it was missed
    that some of the contexts in which a rlimit is kept elevated can be
    the only reference to the user/ucount in the system.
    
    Ordinary ucount references exist in places that also have a reference
    to the user namspace, but in POSIX message queues, the SysV shm code,
    and the SIGPENDING code there is no independent user namespace
    reference.
    
    Inspection of the the user_namespace show no instance of circular
    references between struct ucounts and the user_namespace.  So
    hold a reference from struct ucount to i's user_namespace to
    resolve this problem.
    
    Link: https://lore.kernel.org/lkml/YZV7Z+yXbsx9p3JN@fixkernel.com/
    Reported-by: Qian Cai <quic_qiancai@quicinc.com>
    Reported-by: Mathias Krause <minipli@grsecurity.net>
    Tested-by: Mathias Krause <minipli@grsecurity.net>
    Reviewed-by: Mathias Krause <minipli@grsecurity.net>
    Reviewed-by: Alexey Gladkov <legion@kernel.org>
    Fixes: d64696905554 ("Reimplement RLIMIT_SIGPENDING on top of ucounts")
    Fixes: 6e52a9f0532f ("Reimplement RLIMIT_MSGQUEUE on top of ucounts")
    Fixes: d7c9e99aee48 ("Reimplement RLIMIT_MEMLOCK on top of ucounts")
    Cc: stable@vger.kernel.org
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f9d87929d451d3e649699d0f1d74f71f77ad38f5
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Mon Jan 24 12:46:50 2022 -0600

    ucount:  Make get_ucount a safe get_user replacement
    
    When the ucount code was refactored to create get_ucount it was missed
    that some of the contexts in which a rlimit is kept elevated can be
    the only reference to the user/ucount in the system.
    
    Ordinary ucount references exist in places that also have a reference
    to the user namspace, but in POSIX message queues, the SysV shm code,
    and the SIGPENDING code there is no independent user namespace
    reference.
    
    Inspection of the the user_namespace show no instance of circular
    references between struct ucounts and the user_namespace.  So
    hold a reference from struct ucount to i's user_namespace to
    resolve this problem.
    
    Link: https://lore.kernel.org/lkml/YZV7Z+yXbsx9p3JN@fixkernel.com/
    Reported-by: Qian Cai <quic_qiancai@quicinc.com>
    Reported-by: Mathias Krause <minipli@grsecurity.net>
    Tested-by: Mathias Krause <minipli@grsecurity.net>
    Reviewed-by: Mathias Krause <minipli@grsecurity.net>
    Reviewed-by: Alexey Gladkov <legion@kernel.org>
    Fixes: d64696905554 ("Reimplement RLIMIT_SIGPENDING on top of ucounts")
    Fixes: 6e52a9f0532f ("Reimplement RLIMIT_MSGQUEUE on top of ucounts")
    Fixes: d7c9e99aee48 ("Reimplement RLIMIT_MEMLOCK on top of ucounts")
    Cc: stable@vger.kernel.org
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>

commit 365e4ba01df4b297cb92f30f078ddaf2e62bf15c
Author: Yunfei Dong <yunfei.dong@mediatek.com>
Date:   Thu Jan 13 05:10:50 2022 +0100

    media: mtk-vcodec: Add work queue for core hardware decode
    
    Add work queue to process core hardware information.
    First, get lat_buf from message queue, then call core
    hardware of each codec(H264/VP9/AV1) to decode, finally
    puts lat_buf back to the message.
    
    Signed-off-by: Yunfei Dong <yunfei.dong@mediatek.com>
    Reviewed-by: Steve Cho <stevecho@chromium.org>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>

commit 79f6540ba88dfb383ecf057a3425e668105ca774
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Thu Sep 2 14:55:10 2021 -0700

    memcg: enable accounting for mnt_cache entries
    
    Patch series "memcg accounting from OpenVZ", v7.
    
    OpenVZ uses memory accounting 20+ years since v2.2.x linux kernels.
    Initially we used our own accounting subsystem, then partially committed
    it to upstream, and a few years ago switched to cgroups v1.  Now we're
    rebasing again, revising our old patches and trying to push them upstream.
    
    We try to protect the host system from any misuse of kernel memory
    allocation triggered by untrusted users inside the containers.
    
    Patch-set is addressed mostly to cgroups maintainers and cgroups@ mailing
    list, though I would be very grateful for any comments from maintainersi
    of affected subsystems or other people added in cc:
    
    Compared to the upstream, we additionally account the following kernel objects:
    - network devices and its Tx/Rx queues
    - ipv4/v6 addresses and routing-related objects
    - inet_bind_bucket cache objects
    - VLAN group arrays
    - ipv6/sit: ip_tunnel_prl
    - scm_fp_list objects used by SCM_RIGHTS messages of Unix sockets
    - nsproxy and namespace objects itself
    - IPC objects: semaphores, message queues and share memory segments
    - mounts
    - pollfd and select bits arrays
    - signals and posix timers
    - file lock
    - fasync_struct used by the file lease code and driver's fasync queues
    - tty objects
    - per-mm LDT
    
    We have an incorrect/incomplete/obsoleted accounting for few other kernel
    objects: sk_filter, af_packets, netlink and xt_counters for iptables.
    They require rework and probably will be dropped at all.
    
    Also we're going to add an accounting for nft, however it is not ready
    yet.
    
    We have not tested performance on upstream, however, our performance team
    compares our current RHEL7-based production kernel and reports that they
    are at least not worse as the according original RHEL7 kernel.
    
    This patch (of 10):
    
    The kernel allocates ~400 bytes of 'struct mount' for any new mount.
    Creating a new mount namespace clones most of the parent mounts, and this
    can be repeated many times.  Additionally, each mount allocates up to
    PATH_MAX=4096 bytes for mnt->mnt_devname.
    
    It makes sense to account for these allocations to restrict the host's
    memory consumption from inside the memcg-limited container.
    
    Link: https://lkml.kernel.org/r/045db11f-4a45-7c9b-2664-5b32c2b44943@virtuozzo.com
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Reviewed-by: Shakeel Butt <shakeelb@google.com>
    Acked-by: Christian Brauner <christian.brauner@ubuntu.com>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Vladimir Davydov <vdavydov.dev@gmail.com>
    Cc: Roman Gushchin <guro@fb.com>
    Cc: Yutian Yang <nglaive@gmail.com>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: Alexey Dobriyan <adobriyan@gmail.com>
    Cc: Andrei Vagin <avagin@gmail.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Dmitry Safonov <0x7f454c46@gmail.com>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: "J. Bruce Fields" <bfields@fieldses.org>
    Cc: Jeff Layton <jlayton@kernel.org>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: Jiri Slaby <jirislaby@kernel.org>
    Cc: Kirill Tkhai <ktkhai@virtuozzo.com>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Serge Hallyn <serge@hallyn.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Zefan Li <lizefan.x@bytedance.com>
    Cc: Borislav Petkov <bp@suse.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit edcf4d5ca958c011fd7e9df57c7846401bb315b1
Author: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
Date:   Wed May 26 08:39:37 2021 -0400

    i2c: s3c2410: fix possible NULL pointer deref on read message after write
    
    commit 24990423267ec283b9d86f07f362b753eb9b0ed5 upstream.
    
    Interrupt handler processes multiple message write requests one after
    another, till the driver message queue is drained.  However if driver
    encounters a read message without preceding START, it stops the I2C
    transfer as it is an invalid condition for the controller.  At least the
    comment describes a requirement "the controller forces us to send a new
    START when we change direction".  This stop results in clearing the
    message queue (i2c->msg = NULL).
    
    The code however immediately jumped back to label "retry_write" which
    dereferenced the "i2c->msg" making it a possible NULL pointer
    dereference.
    
    The Coverity analysis:
    1. Condition !is_msgend(i2c), taking false branch.
       if (!is_msgend(i2c)) {
    
    2. Condition !is_lastmsg(i2c), taking true branch.
       } else if (!is_lastmsg(i2c)) {
    
    3. Condition i2c->msg->flags & 1, taking true branch.
       if (i2c->msg->flags & I2C_M_RD) {
    
    4. write_zero_model: Passing i2c to s3c24xx_i2c_stop, which sets i2c->msg to NULL.
       s3c24xx_i2c_stop(i2c, -EINVAL);
    
    5. Jumping to label retry_write.
       goto retry_write;
    
    6. var_deref_model: Passing i2c to is_msgend, which dereferences null i2c->msg.
       if (!is_msgend(i2c)) {"
    
    All previous calls to s3c24xx_i2c_stop() in this interrupt service
    routine are followed by jumping to end of function (acknowledging
    the interrupt and returning).  This seems a reasonable choice also here
    since message buffer was entirely emptied.
    
    Addresses-Coverity: Explicit null dereferenced
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eff3c5b67fbb99558c3faac4750044a74d5dbdbe
Author: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
Date:   Wed May 26 08:39:37 2021 -0400

    i2c: s3c2410: fix possible NULL pointer deref on read message after write
    
    commit 24990423267ec283b9d86f07f362b753eb9b0ed5 upstream.
    
    Interrupt handler processes multiple message write requests one after
    another, till the driver message queue is drained.  However if driver
    encounters a read message without preceding START, it stops the I2C
    transfer as it is an invalid condition for the controller.  At least the
    comment describes a requirement "the controller forces us to send a new
    START when we change direction".  This stop results in clearing the
    message queue (i2c->msg = NULL).
    
    The code however immediately jumped back to label "retry_write" which
    dereferenced the "i2c->msg" making it a possible NULL pointer
    dereference.
    
    The Coverity analysis:
    1. Condition !is_msgend(i2c), taking false branch.
       if (!is_msgend(i2c)) {
    
    2. Condition !is_lastmsg(i2c), taking true branch.
       } else if (!is_lastmsg(i2c)) {
    
    3. Condition i2c->msg->flags & 1, taking true branch.
       if (i2c->msg->flags & I2C_M_RD) {
    
    4. write_zero_model: Passing i2c to s3c24xx_i2c_stop, which sets i2c->msg to NULL.
       s3c24xx_i2c_stop(i2c, -EINVAL);
    
    5. Jumping to label retry_write.
       goto retry_write;
    
    6. var_deref_model: Passing i2c to is_msgend, which dereferences null i2c->msg.
       if (!is_msgend(i2c)) {"
    
    All previous calls to s3c24xx_i2c_stop() in this interrupt service
    routine are followed by jumping to end of function (acknowledging
    the interrupt and returning).  This seems a reasonable choice also here
    since message buffer was entirely emptied.
    
    Addresses-Coverity: Explicit null dereferenced
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 45488e77e0142ec8b17dddc6ba960c3a747075b6
Author: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
Date:   Wed May 26 08:39:37 2021 -0400

    i2c: s3c2410: fix possible NULL pointer deref on read message after write
    
    commit 24990423267ec283b9d86f07f362b753eb9b0ed5 upstream.
    
    Interrupt handler processes multiple message write requests one after
    another, till the driver message queue is drained.  However if driver
    encounters a read message without preceding START, it stops the I2C
    transfer as it is an invalid condition for the controller.  At least the
    comment describes a requirement "the controller forces us to send a new
    START when we change direction".  This stop results in clearing the
    message queue (i2c->msg = NULL).
    
    The code however immediately jumped back to label "retry_write" which
    dereferenced the "i2c->msg" making it a possible NULL pointer
    dereference.
    
    The Coverity analysis:
    1. Condition !is_msgend(i2c), taking false branch.
       if (!is_msgend(i2c)) {
    
    2. Condition !is_lastmsg(i2c), taking true branch.
       } else if (!is_lastmsg(i2c)) {
    
    3. Condition i2c->msg->flags & 1, taking true branch.
       if (i2c->msg->flags & I2C_M_RD) {
    
    4. write_zero_model: Passing i2c to s3c24xx_i2c_stop, which sets i2c->msg to NULL.
       s3c24xx_i2c_stop(i2c, -EINVAL);
    
    5. Jumping to label retry_write.
       goto retry_write;
    
    6. var_deref_model: Passing i2c to is_msgend, which dereferences null i2c->msg.
       if (!is_msgend(i2c)) {"
    
    All previous calls to s3c24xx_i2c_stop() in this interrupt service
    routine are followed by jumping to end of function (acknowledging
    the interrupt and returning).  This seems a reasonable choice also here
    since message buffer was entirely emptied.
    
    Addresses-Coverity: Explicit null dereferenced
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 124c1dbe01ca5761eb47a83b60cea5209aeafaee
Author: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
Date:   Wed May 26 08:39:37 2021 -0400

    i2c: s3c2410: fix possible NULL pointer deref on read message after write
    
    commit 24990423267ec283b9d86f07f362b753eb9b0ed5 upstream.
    
    Interrupt handler processes multiple message write requests one after
    another, till the driver message queue is drained.  However if driver
    encounters a read message without preceding START, it stops the I2C
    transfer as it is an invalid condition for the controller.  At least the
    comment describes a requirement "the controller forces us to send a new
    START when we change direction".  This stop results in clearing the
    message queue (i2c->msg = NULL).
    
    The code however immediately jumped back to label "retry_write" which
    dereferenced the "i2c->msg" making it a possible NULL pointer
    dereference.
    
    The Coverity analysis:
    1. Condition !is_msgend(i2c), taking false branch.
       if (!is_msgend(i2c)) {
    
    2. Condition !is_lastmsg(i2c), taking true branch.
       } else if (!is_lastmsg(i2c)) {
    
    3. Condition i2c->msg->flags & 1, taking true branch.
       if (i2c->msg->flags & I2C_M_RD) {
    
    4. write_zero_model: Passing i2c to s3c24xx_i2c_stop, which sets i2c->msg to NULL.
       s3c24xx_i2c_stop(i2c, -EINVAL);
    
    5. Jumping to label retry_write.
       goto retry_write;
    
    6. var_deref_model: Passing i2c to is_msgend, which dereferences null i2c->msg.
       if (!is_msgend(i2c)) {"
    
    All previous calls to s3c24xx_i2c_stop() in this interrupt service
    routine are followed by jumping to end of function (acknowledging
    the interrupt and returning).  This seems a reasonable choice also here
    since message buffer was entirely emptied.
    
    Addresses-Coverity: Explicit null dereferenced
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bebac745ef2675d6a9b2940e9376a49c55847766
Author: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
Date:   Wed May 26 08:39:37 2021 -0400

    i2c: s3c2410: fix possible NULL pointer deref on read message after write
    
    commit 24990423267ec283b9d86f07f362b753eb9b0ed5 upstream.
    
    Interrupt handler processes multiple message write requests one after
    another, till the driver message queue is drained.  However if driver
    encounters a read message without preceding START, it stops the I2C
    transfer as it is an invalid condition for the controller.  At least the
    comment describes a requirement "the controller forces us to send a new
    START when we change direction".  This stop results in clearing the
    message queue (i2c->msg = NULL).
    
    The code however immediately jumped back to label "retry_write" which
    dereferenced the "i2c->msg" making it a possible NULL pointer
    dereference.
    
    The Coverity analysis:
    1. Condition !is_msgend(i2c), taking false branch.
       if (!is_msgend(i2c)) {
    
    2. Condition !is_lastmsg(i2c), taking true branch.
       } else if (!is_lastmsg(i2c)) {
    
    3. Condition i2c->msg->flags & 1, taking true branch.
       if (i2c->msg->flags & I2C_M_RD) {
    
    4. write_zero_model: Passing i2c to s3c24xx_i2c_stop, which sets i2c->msg to NULL.
       s3c24xx_i2c_stop(i2c, -EINVAL);
    
    5. Jumping to label retry_write.
       goto retry_write;
    
    6. var_deref_model: Passing i2c to is_msgend, which dereferences null i2c->msg.
       if (!is_msgend(i2c)) {"
    
    All previous calls to s3c24xx_i2c_stop() in this interrupt service
    routine are followed by jumping to end of function (acknowledging
    the interrupt and returning).  This seems a reasonable choice also here
    since message buffer was entirely emptied.
    
    Addresses-Coverity: Explicit null dereferenced
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e4d63ca7b9a5d746af03f3d0bbe1b8fafad266a1
Author: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
Date:   Wed May 26 08:39:37 2021 -0400

    i2c: s3c2410: fix possible NULL pointer deref on read message after write
    
    commit 24990423267ec283b9d86f07f362b753eb9b0ed5 upstream.
    
    Interrupt handler processes multiple message write requests one after
    another, till the driver message queue is drained.  However if driver
    encounters a read message without preceding START, it stops the I2C
    transfer as it is an invalid condition for the controller.  At least the
    comment describes a requirement "the controller forces us to send a new
    START when we change direction".  This stop results in clearing the
    message queue (i2c->msg = NULL).
    
    The code however immediately jumped back to label "retry_write" which
    dereferenced the "i2c->msg" making it a possible NULL pointer
    dereference.
    
    The Coverity analysis:
    1. Condition !is_msgend(i2c), taking false branch.
       if (!is_msgend(i2c)) {
    
    2. Condition !is_lastmsg(i2c), taking true branch.
       } else if (!is_lastmsg(i2c)) {
    
    3. Condition i2c->msg->flags & 1, taking true branch.
       if (i2c->msg->flags & I2C_M_RD) {
    
    4. write_zero_model: Passing i2c to s3c24xx_i2c_stop, which sets i2c->msg to NULL.
       s3c24xx_i2c_stop(i2c, -EINVAL);
    
    5. Jumping to label retry_write.
       goto retry_write;
    
    6. var_deref_model: Passing i2c to is_msgend, which dereferences null i2c->msg.
       if (!is_msgend(i2c)) {"
    
    All previous calls to s3c24xx_i2c_stop() in this interrupt service
    routine are followed by jumping to end of function (acknowledging
    the interrupt and returning).  This seems a reasonable choice also here
    since message buffer was entirely emptied.
    
    Addresses-Coverity: Explicit null dereferenced
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 572e5bf9765a864acbd6e6e3f8d7de2d5d9ca9c2
Author: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
Date:   Wed May 26 08:39:37 2021 -0400

    i2c: s3c2410: fix possible NULL pointer deref on read message after write
    
    commit 24990423267ec283b9d86f07f362b753eb9b0ed5 upstream.
    
    Interrupt handler processes multiple message write requests one after
    another, till the driver message queue is drained.  However if driver
    encounters a read message without preceding START, it stops the I2C
    transfer as it is an invalid condition for the controller.  At least the
    comment describes a requirement "the controller forces us to send a new
    START when we change direction".  This stop results in clearing the
    message queue (i2c->msg = NULL).
    
    The code however immediately jumped back to label "retry_write" which
    dereferenced the "i2c->msg" making it a possible NULL pointer
    dereference.
    
    The Coverity analysis:
    1. Condition !is_msgend(i2c), taking false branch.
       if (!is_msgend(i2c)) {
    
    2. Condition !is_lastmsg(i2c), taking true branch.
       } else if (!is_lastmsg(i2c)) {
    
    3. Condition i2c->msg->flags & 1, taking true branch.
       if (i2c->msg->flags & I2C_M_RD) {
    
    4. write_zero_model: Passing i2c to s3c24xx_i2c_stop, which sets i2c->msg to NULL.
       s3c24xx_i2c_stop(i2c, -EINVAL);
    
    5. Jumping to label retry_write.
       goto retry_write;
    
    6. var_deref_model: Passing i2c to is_msgend, which dereferences null i2c->msg.
       if (!is_msgend(i2c)) {"
    
    All previous calls to s3c24xx_i2c_stop() in this interrupt service
    routine are followed by jumping to end of function (acknowledging
    the interrupt and returning).  This seems a reasonable choice also here
    since message buffer was entirely emptied.
    
    Addresses-Coverity: Explicit null dereferenced
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24990423267ec283b9d86f07f362b753eb9b0ed5
Author: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
Date:   Wed May 26 08:39:37 2021 -0400

    i2c: s3c2410: fix possible NULL pointer deref on read message after write
    
    Interrupt handler processes multiple message write requests one after
    another, till the driver message queue is drained.  However if driver
    encounters a read message without preceding START, it stops the I2C
    transfer as it is an invalid condition for the controller.  At least the
    comment describes a requirement "the controller forces us to send a new
    START when we change direction".  This stop results in clearing the
    message queue (i2c->msg = NULL).
    
    The code however immediately jumped back to label "retry_write" which
    dereferenced the "i2c->msg" making it a possible NULL pointer
    dereference.
    
    The Coverity analysis:
    1. Condition !is_msgend(i2c), taking false branch.
       if (!is_msgend(i2c)) {
    
    2. Condition !is_lastmsg(i2c), taking true branch.
       } else if (!is_lastmsg(i2c)) {
    
    3. Condition i2c->msg->flags & 1, taking true branch.
       if (i2c->msg->flags & I2C_M_RD) {
    
    4. write_zero_model: Passing i2c to s3c24xx_i2c_stop, which sets i2c->msg to NULL.
       s3c24xx_i2c_stop(i2c, -EINVAL);
    
    5. Jumping to label retry_write.
       goto retry_write;
    
    6. var_deref_model: Passing i2c to is_msgend, which dereferences null i2c->msg.
       if (!is_msgend(i2c)) {"
    
    All previous calls to s3c24xx_i2c_stop() in this interrupt service
    routine are followed by jumping to end of function (acknowledging
    the interrupt and returning).  This seems a reasonable choice also here
    since message buffer was entirely emptied.
    
    Addresses-Coverity: Explicit null dereferenced
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@canonical.com>
    Signed-off-by: Wolfram Sang <wsa@kernel.org>

commit 111d746bb4767ad476f80fe49067e3df3d9a9375
Author: Scott Branden <scott.branden@broadcom.com>
Date:   Wed Jan 20 09:58:23 2021 -0800

    misc: bcm-vk: add VK messaging support
    
    Add message support in order to be able to communicate
    to VK card via message queues.
    
    This info is used for debug purposes via collection of logs via direct
    read of BAR space and by sysfs access (in a follow on commit).
    
    Co-developed-by: Desmond Yan <desmond.yan@broadcom.com>
    Acked-by: Olof Johansson <olof@lixom.net>
    Signed-off-by: Desmond Yan <desmond.yan@broadcom.com>
    Signed-off-by: Scott Branden <scott.branden@broadcom.com>
    Link: https://lore.kernel.org/r/20210120175827.14820-10-scott.branden@broadcom.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7f339fdc3756e193136a167bfcfdfbfdaec42306
Author: Vikash Garodia <vgarodia@codeaurora.org>
Date:   Fri Dec 4 11:01:38 2020 +0100

    media: venus: request for interrupt from venus
    
    For synchronous commands, update the message queue variable.
    This would inform video firmware to raise interrupt on host
    CPU whenever there is a response for such commands.
    
    Signed-off-by: Vikash Garodia <vgarodia@codeaurora.org>
    Tested-by: Fritz Koenig <frkoenig@chromium.org>
    Signed-off-by: Stanimir Varbanov <stanimir.varbanov@linaro.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 933b2ba7f9dec4c73588b565fa3cb32cb14ed37f
Author: Lijun Pan <ljp@linux.ibm.com>
Date:   Sat Dec 19 15:40:34 2020 -0600

    ibmvnic: continue fatal error reset after passive init
    
    [ Upstream commit 1f45dc22066797479072978feeada0852502e180 ]
    
    Commit f9c6cea0b385 ("ibmvnic: Skip fatal error reset after passive init")
    says "If the passive
    CRQ initialization occurs before the FATAL reset task is processed,
    the FATAL error reset task would try to access a CRQ message queue
    that was freed, causing an oops. The problem may be most likely to
    occur during DLPAR add vNIC with a non-default MTU, because the DLPAR
    process will automatically issue a change MTU request.
    Fix this by not processing fatal error reset if CRQ is passively
    initialized after client-driven CRQ initialization fails."
    
    Even with this commit, we still see similar kernel crashes. In order
    to completely solve this problem, we'd better continue the fatal error
    reset, capture the kernel crash, and try to fix it from that end.
    
    Fixes: f9c6cea0b385 ("ibmvnic: Skip fatal error reset after passive init")
    Signed-off-by: Lijun Pan <ljp@linux.ibm.com>
    Link: https://lore.kernel.org/r/20201219214034.21123-1-ljp@linux.ibm.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6d003fe7fe87578c64a8845db90ae7f4309e8eb9
Author: Lijun Pan <ljp@linux.ibm.com>
Date:   Sat Dec 19 15:40:34 2020 -0600

    ibmvnic: continue fatal error reset after passive init
    
    [ Upstream commit 1f45dc22066797479072978feeada0852502e180 ]
    
    Commit f9c6cea0b385 ("ibmvnic: Skip fatal error reset after passive init")
    says "If the passive
    CRQ initialization occurs before the FATAL reset task is processed,
    the FATAL error reset task would try to access a CRQ message queue
    that was freed, causing an oops. The problem may be most likely to
    occur during DLPAR add vNIC with a non-default MTU, because the DLPAR
    process will automatically issue a change MTU request.
    Fix this by not processing fatal error reset if CRQ is passively
    initialized after client-driven CRQ initialization fails."
    
    Even with this commit, we still see similar kernel crashes. In order
    to completely solve this problem, we'd better continue the fatal error
    reset, capture the kernel crash, and try to fix it from that end.
    
    Fixes: f9c6cea0b385 ("ibmvnic: Skip fatal error reset after passive init")
    Signed-off-by: Lijun Pan <ljp@linux.ibm.com>
    Link: https://lore.kernel.org/r/20201219214034.21123-1-ljp@linux.ibm.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1f45dc22066797479072978feeada0852502e180
Author: Lijun Pan <ljp@linux.ibm.com>
Date:   Wed Dec 23 14:49:04 2020 -0600

    ibmvnic: continue fatal error reset after passive init
    
    Commit f9c6cea0b385 ("ibmvnic: Skip fatal error reset after passive init")
    says "If the passive
    CRQ initialization occurs before the FATAL reset task is processed,
    the FATAL error reset task would try to access a CRQ message queue
    that was freed, causing an oops. The problem may be most likely to
    occur during DLPAR add vNIC with a non-default MTU, because the DLPAR
    process will automatically issue a change MTU request.
    Fix this by not processing fatal error reset if CRQ is passively
    initialized after client-driven CRQ initialization fails."
    
    The original commit skips a specific reset condition, but that does
    not fix the problem it claims to fix, and misses a reset condition.
    The effective fix is commit 0e435befaea4 ("ibmvnic: fix NULL pointer
    dereference in ibmvic_reset_crq") and commit a0faaa27c716 ("ibmvnic:
    fix NULL pointer dereference in reset_sub_crq_queues"). With above
    two fixes, there are no more crashes seen as described even without
    the original commit, so I would like to revert the original commit.
    
    Fixes: f9c6cea0b385 ("ibmvnic: Skip fatal error reset after passive init")
    Signed-off-by: Lijun Pan <ljp@linux.ibm.com>
    Link: https://lore.kernel.org/r/20201223204904.12677-1-ljp@linux.ibm.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 73d513e45ac7e5219388bee98d36aae820d2876c
Author: Stanimir Varbanov <stanimir.varbanov@linaro.org>
Date:   Thu Jul 30 13:46:32 2020 +0200

    media: venus: Add new interface queues reinit
    
    Presently the recovery mechanism is using two hfi functions
    to destroy and create interface queues. For the purpose of
    recovery we don't need to free and allocate the memory used
    for interface message queues, that's why we introduce new
    function which just reinit the queues.  Also this will give
    to the recovery procedure one less reason to fail (if for
    some reason we couldn't allocate memory).
    
    Signed-off-by: Stanimir Varbanov <stanimir.varbanov@linaro.org>
    Reviewed-by: Fritz Koenig <frkoenig@chromium.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 3c5da06f9969959f5cd85e8baaef9d96059b3924
Author: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
Date:   Mon Jun 29 17:09:26 2020 +0200

    staging: vchi: Get rid of vchiq_shim's message callback
    
    As vchiq_shim's callback does nothing aside from pushing messages into
    the service's queue, let's bypass it and jump directly to the service's
    callbacks, letting them choose whether to use the message queue.
    
    It turns out most services don't need to use the message queue, which
    makes for simpler code in the end.
    
    Signed-off-by: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
    Link: https://lore.kernel.org/r/20200629150945.10720-29-nsaenzjulienne@suse.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b79134e9de28dd6ca7627a9bae2fa4bfb382ad64
Author: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
Date:   Mon Jun 29 17:09:25 2020 +0200

    staging: vchiq: Export vchiq_msg_queue_push
    
    vchiq consumer drivers may need to use this function in order to get the
    benefits of vchiq's per service message queueing mechanism.
    
    Signed-off-by: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
    Link: https://lore.kernel.org/r/20200629150945.10720-28-nsaenzjulienne@suse.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 77b3f6c49105088f157672c6e16deb0154a1383b
Author: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
Date:   Mon Jun 29 17:09:21 2020 +0200

    staging: vchiq: Move message queue into struct vchiq_service
    
    This has historically been handled by vchi, but there is no reason why
    this couldn't be handled directly in vchiq.
    
    The patch tries to avoid altering any behavior, with the exception of
    the msg_queue size, which is now fixed to VCHIQ_MAX_SLOTS (it was set to
    VCHIQ_MAX_SLOTS / 2). This is done to match vchiq's user_service message
    queue, which could be merged with this one in the future.
    
    Signed-off-by: Nicolas Saenz Julienne <nsaenzjulienne@suse.de>
    Link: https://lore.kernel.org/r/20200629150945.10720-24-nsaenzjulienne@suse.de
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 675efd2778ce532d9492617d564426434c8be02c
Author: Lukas Wunner <lukas@wunner.de>
Date:   Fri May 15 17:58:01 2020 +0200

    spi: Fix controller unregister order
    
    [ Upstream commit 84855678add8aba927faf76bc2f130a40f94b6f7 ]
    
    When an SPI controller unregisters, it unbinds all its slave devices.
    For this, their drivers may need to access the SPI bus, e.g. to quiesce
    interrupts.
    
    However since commit ffbbdd21329f ("spi: create a message queueing
    infrastructure"), spi_destroy_queue() is executed before unbinding the
    slaves.  It sets ctlr->running = false, thereby preventing SPI bus
    access and causing unbinding of slave devices to fail.
    
    Fix by unbinding slaves before calling spi_destroy_queue().
    
    Fixes: ffbbdd21329f ("spi: create a message queueing infrastructure")
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: stable@vger.kernel.org # v3.4+
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Link: https://lore.kernel.org/r/8aaf9d44c153fe233b17bc2dec4eb679898d7e7b.1589557526.git.lukas@wunner.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 277011f9d74df4d9679bbd98b035e376a0e8257c
Author: Lukas Wunner <lukas@wunner.de>
Date:   Fri May 15 17:58:01 2020 +0200

    spi: Fix controller unregister order
    
    [ Upstream commit 84855678add8aba927faf76bc2f130a40f94b6f7 ]
    
    When an SPI controller unregisters, it unbinds all its slave devices.
    For this, their drivers may need to access the SPI bus, e.g. to quiesce
    interrupts.
    
    However since commit ffbbdd21329f ("spi: create a message queueing
    infrastructure"), spi_destroy_queue() is executed before unbinding the
    slaves.  It sets ctlr->running = false, thereby preventing SPI bus
    access and causing unbinding of slave devices to fail.
    
    Fix by unbinding slaves before calling spi_destroy_queue().
    
    Fixes: ffbbdd21329f ("spi: create a message queueing infrastructure")
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: stable@vger.kernel.org # v3.4+
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Link: https://lore.kernel.org/r/8aaf9d44c153fe233b17bc2dec4eb679898d7e7b.1589557526.git.lukas@wunner.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c7e41e1caa713225f5f16f144cc0f8760a7a06c4
Author: Lukas Wunner <lukas@wunner.de>
Date:   Fri May 15 17:58:01 2020 +0200

    spi: Fix controller unregister order
    
    [ Upstream commit 84855678add8aba927faf76bc2f130a40f94b6f7 ]
    
    When an SPI controller unregisters, it unbinds all its slave devices.
    For this, their drivers may need to access the SPI bus, e.g. to quiesce
    interrupts.
    
    However since commit ffbbdd21329f ("spi: create a message queueing
    infrastructure"), spi_destroy_queue() is executed before unbinding the
    slaves.  It sets ctlr->running = false, thereby preventing SPI bus
    access and causing unbinding of slave devices to fail.
    
    Fix by unbinding slaves before calling spi_destroy_queue().
    
    Fixes: ffbbdd21329f ("spi: create a message queueing infrastructure")
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: stable@vger.kernel.org # v3.4+
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Link: https://lore.kernel.org/r/8aaf9d44c153fe233b17bc2dec4eb679898d7e7b.1589557526.git.lukas@wunner.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b4c6230bb0babe04d135d5c2d7343b7fb7ee9e4b
Author: Lukas Wunner <lukas@wunner.de>
Date:   Fri May 15 17:58:01 2020 +0200

    spi: Fix controller unregister order
    
    [ Upstream commit 84855678add8aba927faf76bc2f130a40f94b6f7 ]
    
    When an SPI controller unregisters, it unbinds all its slave devices.
    For this, their drivers may need to access the SPI bus, e.g. to quiesce
    interrupts.
    
    However since commit ffbbdd21329f ("spi: create a message queueing
    infrastructure"), spi_destroy_queue() is executed before unbinding the
    slaves.  It sets ctlr->running = false, thereby preventing SPI bus
    access and causing unbinding of slave devices to fail.
    
    Fix by unbinding slaves before calling spi_destroy_queue().
    
    Fixes: ffbbdd21329f ("spi: create a message queueing infrastructure")
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: stable@vger.kernel.org # v3.4+
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Link: https://lore.kernel.org/r/8aaf9d44c153fe233b17bc2dec4eb679898d7e7b.1589557526.git.lukas@wunner.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2d83862dca3e9f5c119740c2f8d4433b6f337683
Author: Lukas Wunner <lukas@wunner.de>
Date:   Fri May 15 17:58:01 2020 +0200

    spi: Fix controller unregister order
    
    commit 84855678add8aba927faf76bc2f130a40f94b6f7 upstream.
    
    When an SPI controller unregisters, it unbinds all its slave devices.
    For this, their drivers may need to access the SPI bus, e.g. to quiesce
    interrupts.
    
    However since commit ffbbdd21329f ("spi: create a message queueing
    infrastructure"), spi_destroy_queue() is executed before unbinding the
    slaves.  It sets ctlr->running = false, thereby preventing SPI bus
    access and causing unbinding of slave devices to fail.
    
    Fix by unbinding slaves before calling spi_destroy_queue().
    
    Fixes: ffbbdd21329f ("spi: create a message queueing infrastructure")
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: stable@vger.kernel.org # v3.4+
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Link: https://lore.kernel.org/r/8aaf9d44c153fe233b17bc2dec4eb679898d7e7b.1589557526.git.lukas@wunner.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fc836f0a8534542673f50682cfe6e02ebbec0be6
Author: Lukas Wunner <lukas@wunner.de>
Date:   Fri May 15 17:58:01 2020 +0200

    spi: Fix controller unregister order
    
    commit 84855678add8aba927faf76bc2f130a40f94b6f7 upstream.
    
    When an SPI controller unregisters, it unbinds all its slave devices.
    For this, their drivers may need to access the SPI bus, e.g. to quiesce
    interrupts.
    
    However since commit ffbbdd21329f ("spi: create a message queueing
    infrastructure"), spi_destroy_queue() is executed before unbinding the
    slaves.  It sets ctlr->running = false, thereby preventing SPI bus
    access and causing unbinding of slave devices to fail.
    
    Fix by unbinding slaves before calling spi_destroy_queue().
    
    Fixes: ffbbdd21329f ("spi: create a message queueing infrastructure")
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: stable@vger.kernel.org # v3.4+
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Link: https://lore.kernel.org/r/8aaf9d44c153fe233b17bc2dec4eb679898d7e7b.1589557526.git.lukas@wunner.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 824a4e3b9acfb1bf373bbba12f91f3b1eb22937b
Author: Lukas Wunner <lukas@wunner.de>
Date:   Fri May 15 17:58:01 2020 +0200

    spi: Fix controller unregister order
    
    commit 84855678add8aba927faf76bc2f130a40f94b6f7 upstream.
    
    When an SPI controller unregisters, it unbinds all its slave devices.
    For this, their drivers may need to access the SPI bus, e.g. to quiesce
    interrupts.
    
    However since commit ffbbdd21329f ("spi: create a message queueing
    infrastructure"), spi_destroy_queue() is executed before unbinding the
    slaves.  It sets ctlr->running = false, thereby preventing SPI bus
    access and causing unbinding of slave devices to fail.
    
    Fix by unbinding slaves before calling spi_destroy_queue().
    
    Fixes: ffbbdd21329f ("spi: create a message queueing infrastructure")
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: stable@vger.kernel.org # v3.4+
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Link: https://lore.kernel.org/r/8aaf9d44c153fe233b17bc2dec4eb679898d7e7b.1589557526.git.lukas@wunner.de
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b83f5d4214a252972d2ef7d5b30a90674bf033f
Author: Juliet Kim <julietk@linux.vnet.ibm.com>
Date:   Thu Apr 30 13:22:11 2020 -0500

    ibmvnic: Skip fatal error reset after passive init
    
    [ Upstream commit f9c6cea0b38518741c8dcf26ac056d26ee2fd61d ]
    
    During MTU change, the following events may happen.
    Client-driven CRQ initialization fails due to partner’s CRQ closed,
    causing client to enqueue a reset task for FATAL_ERROR. Then passive
    (server-driven) CRQ initialization succeeds, causing client to
    release CRQ and enqueue a reset task for failover. If the passive
    CRQ initialization occurs before the FATAL reset task is processed,
    the FATAL error reset task would try to access a CRQ message queue
    that was freed, causing an oops. The problem may be most likely to
    occur during DLPAR add vNIC with a non-default MTU, because the DLPAR
    process will automatically issue a change MTU request.
    
    Fix this by not processing fatal error reset if CRQ is passively
    initialized after client-driven CRQ initialization fails.
    
    Signed-off-by: Juliet Kim <julietk@linux.vnet.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2eac9d3dc23ff5e942e5d685272b74bc436279a2
Author: Juliet Kim <julietk@linux.vnet.ibm.com>
Date:   Thu Apr 30 13:22:11 2020 -0500

    ibmvnic: Skip fatal error reset after passive init
    
    [ Upstream commit f9c6cea0b38518741c8dcf26ac056d26ee2fd61d ]
    
    During MTU change, the following events may happen.
    Client-driven CRQ initialization fails due to partner’s CRQ closed,
    causing client to enqueue a reset task for FATAL_ERROR. Then passive
    (server-driven) CRQ initialization succeeds, causing client to
    release CRQ and enqueue a reset task for failover. If the passive
    CRQ initialization occurs before the FATAL reset task is processed,
    the FATAL error reset task would try to access a CRQ message queue
    that was freed, causing an oops. The problem may be most likely to
    occur during DLPAR add vNIC with a non-default MTU, because the DLPAR
    process will automatically issue a change MTU request.
    
    Fix this by not processing fatal error reset if CRQ is passively
    initialized after client-driven CRQ initialization fails.
    
    Signed-off-by: Juliet Kim <julietk@linux.vnet.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 84855678add8aba927faf76bc2f130a40f94b6f7
Author: Lukas Wunner <lukas@wunner.de>
Date:   Fri May 15 17:58:01 2020 +0200

    spi: Fix controller unregister order
    
    When an SPI controller unregisters, it unbinds all its slave devices.
    For this, their drivers may need to access the SPI bus, e.g. to quiesce
    interrupts.
    
    However since commit ffbbdd21329f ("spi: create a message queueing
    infrastructure"), spi_destroy_queue() is executed before unbinding the
    slaves.  It sets ctlr->running = false, thereby preventing SPI bus
    access and causing unbinding of slave devices to fail.
    
    Fix by unbinding slaves before calling spi_destroy_queue().
    
    Fixes: ffbbdd21329f ("spi: create a message queueing infrastructure")
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: stable@vger.kernel.org # v3.4+
    Cc: Linus Walleij <linus.walleij@linaro.org>
    Link: https://lore.kernel.org/r/8aaf9d44c153fe233b17bc2dec4eb679898d7e7b.1589557526.git.lukas@wunner.de
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 8079acfe5b45d5601a399ba4e938ed75d8dc68c2
Author: Tyler Hicks <tyhicks@linux.microsoft.com>
Date:   Mon Apr 13 15:21:45 2020 -0500

    selftests/ipc: Fix test failure seen after initial test run
    
    [ Upstream commit b87080eab4c1377706c113fc9c0157f19ea8fed1 ]
    
    After successfully running the IPC msgque test once, subsequent runs
    result in a test failure:
    
      $ sudo ./run_kselftest.sh
      TAP version 13
      1..1
      # selftests: ipc: msgque
      # Failed to get stats for IPC queue with id 0
      # Failed to dump queue: -22
      # Bail out!
      # # Pass 0 Fail 0 Xfail 0 Xpass 0 Skip 0 Error 0
      not ok 1 selftests: ipc: msgque # exit=1
    
    The dump_queue() function loops through the possible message queue index
    values using calls to msgctl(kern_id, MSG_STAT, ...) where kern_id
    represents the index value. The first time the test is ran, the initial
    index value of 0 is valid and the test is able to complete. The index
    value of 0 is not valid in subsequent test runs and the loop attempts to
    try index values of 1, 2, 3, and so on until a valid index value is
    found that corresponds to the message queue created earlier in the test.
    
    The msgctl() syscall returns -1 and sets errno to EINVAL when invalid
    index values are used. The test failure is caused by incorrectly
    comparing errno to -EINVAL when cycling through possible index values.
    
    Fix invalid test failures on subsequent runs of the msgque test by
    correctly comparing errno values to a non-negated EINVAL.
    
    Fixes: 3a665531a3b7 ("selftests: IPC message queue copy feature test")
    Signed-off-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3ea62d49613b7ab64defeb6f28bb7f131d4b3afc
Author: Tyler Hicks <tyhicks@linux.microsoft.com>
Date:   Mon Apr 13 15:21:45 2020 -0500

    selftests/ipc: Fix test failure seen after initial test run
    
    [ Upstream commit b87080eab4c1377706c113fc9c0157f19ea8fed1 ]
    
    After successfully running the IPC msgque test once, subsequent runs
    result in a test failure:
    
      $ sudo ./run_kselftest.sh
      TAP version 13
      1..1
      # selftests: ipc: msgque
      # Failed to get stats for IPC queue with id 0
      # Failed to dump queue: -22
      # Bail out!
      # # Pass 0 Fail 0 Xfail 0 Xpass 0 Skip 0 Error 0
      not ok 1 selftests: ipc: msgque # exit=1
    
    The dump_queue() function loops through the possible message queue index
    values using calls to msgctl(kern_id, MSG_STAT, ...) where kern_id
    represents the index value. The first time the test is ran, the initial
    index value of 0 is valid and the test is able to complete. The index
    value of 0 is not valid in subsequent test runs and the loop attempts to
    try index values of 1, 2, 3, and so on until a valid index value is
    found that corresponds to the message queue created earlier in the test.
    
    The msgctl() syscall returns -1 and sets errno to EINVAL when invalid
    index values are used. The test failure is caused by incorrectly
    comparing errno to -EINVAL when cycling through possible index values.
    
    Fix invalid test failures on subsequent runs of the msgque test by
    correctly comparing errno values to a non-negated EINVAL.
    
    Fixes: 3a665531a3b7 ("selftests: IPC message queue copy feature test")
    Signed-off-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 17c29ddae8d1023926662261f2e7fbb3c1d13159
Author: Tyler Hicks <tyhicks@linux.microsoft.com>
Date:   Mon Apr 13 15:21:45 2020 -0500

    selftests/ipc: Fix test failure seen after initial test run
    
    [ Upstream commit b87080eab4c1377706c113fc9c0157f19ea8fed1 ]
    
    After successfully running the IPC msgque test once, subsequent runs
    result in a test failure:
    
      $ sudo ./run_kselftest.sh
      TAP version 13
      1..1
      # selftests: ipc: msgque
      # Failed to get stats for IPC queue with id 0
      # Failed to dump queue: -22
      # Bail out!
      # # Pass 0 Fail 0 Xfail 0 Xpass 0 Skip 0 Error 0
      not ok 1 selftests: ipc: msgque # exit=1
    
    The dump_queue() function loops through the possible message queue index
    values using calls to msgctl(kern_id, MSG_STAT, ...) where kern_id
    represents the index value. The first time the test is ran, the initial
    index value of 0 is valid and the test is able to complete. The index
    value of 0 is not valid in subsequent test runs and the loop attempts to
    try index values of 1, 2, 3, and so on until a valid index value is
    found that corresponds to the message queue created earlier in the test.
    
    The msgctl() syscall returns -1 and sets errno to EINVAL when invalid
    index values are used. The test failure is caused by incorrectly
    comparing errno to -EINVAL when cycling through possible index values.
    
    Fix invalid test failures on subsequent runs of the msgque test by
    correctly comparing errno values to a non-negated EINVAL.
    
    Fixes: 3a665531a3b7 ("selftests: IPC message queue copy feature test")
    Signed-off-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a88e01df10fec0c3c4170a9be3af4ec147287f29
Author: Tyler Hicks <tyhicks@linux.microsoft.com>
Date:   Mon Apr 13 15:21:45 2020 -0500

    selftests/ipc: Fix test failure seen after initial test run
    
    [ Upstream commit b87080eab4c1377706c113fc9c0157f19ea8fed1 ]
    
    After successfully running the IPC msgque test once, subsequent runs
    result in a test failure:
    
      $ sudo ./run_kselftest.sh
      TAP version 13
      1..1
      # selftests: ipc: msgque
      # Failed to get stats for IPC queue with id 0
      # Failed to dump queue: -22
      # Bail out!
      # # Pass 0 Fail 0 Xfail 0 Xpass 0 Skip 0 Error 0
      not ok 1 selftests: ipc: msgque # exit=1
    
    The dump_queue() function loops through the possible message queue index
    values using calls to msgctl(kern_id, MSG_STAT, ...) where kern_id
    represents the index value. The first time the test is ran, the initial
    index value of 0 is valid and the test is able to complete. The index
    value of 0 is not valid in subsequent test runs and the loop attempts to
    try index values of 1, 2, 3, and so on until a valid index value is
    found that corresponds to the message queue created earlier in the test.
    
    The msgctl() syscall returns -1 and sets errno to EINVAL when invalid
    index values are used. The test failure is caused by incorrectly
    comparing errno to -EINVAL when cycling through possible index values.
    
    Fix invalid test failures on subsequent runs of the msgque test by
    correctly comparing errno values to a non-negated EINVAL.
    
    Fixes: 3a665531a3b7 ("selftests: IPC message queue copy feature test")
    Signed-off-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bca8fdc1cc586e2e222462bee9eaa67a2c0b0758
Author: Tyler Hicks <tyhicks@linux.microsoft.com>
Date:   Mon Apr 13 15:21:45 2020 -0500

    selftests/ipc: Fix test failure seen after initial test run
    
    [ Upstream commit b87080eab4c1377706c113fc9c0157f19ea8fed1 ]
    
    After successfully running the IPC msgque test once, subsequent runs
    result in a test failure:
    
      $ sudo ./run_kselftest.sh
      TAP version 13
      1..1
      # selftests: ipc: msgque
      # Failed to get stats for IPC queue with id 0
      # Failed to dump queue: -22
      # Bail out!
      # # Pass 0 Fail 0 Xfail 0 Xpass 0 Skip 0 Error 0
      not ok 1 selftests: ipc: msgque # exit=1
    
    The dump_queue() function loops through the possible message queue index
    values using calls to msgctl(kern_id, MSG_STAT, ...) where kern_id
    represents the index value. The first time the test is ran, the initial
    index value of 0 is valid and the test is able to complete. The index
    value of 0 is not valid in subsequent test runs and the loop attempts to
    try index values of 1, 2, 3, and so on until a valid index value is
    found that corresponds to the message queue created earlier in the test.
    
    The msgctl() syscall returns -1 and sets errno to EINVAL when invalid
    index values are used. The test failure is caused by incorrectly
    comparing errno to -EINVAL when cycling through possible index values.
    
    Fix invalid test failures on subsequent runs of the msgque test by
    correctly comparing errno values to a non-negated EINVAL.
    
    Fixes: 3a665531a3b7 ("selftests: IPC message queue copy feature test")
    Signed-off-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fabbe023d90395ac224b6f5b67c23d398afe555f
Author: Tyler Hicks <tyhicks@linux.microsoft.com>
Date:   Mon Apr 13 15:21:45 2020 -0500

    selftests/ipc: Fix test failure seen after initial test run
    
    [ Upstream commit b87080eab4c1377706c113fc9c0157f19ea8fed1 ]
    
    After successfully running the IPC msgque test once, subsequent runs
    result in a test failure:
    
      $ sudo ./run_kselftest.sh
      TAP version 13
      1..1
      # selftests: ipc: msgque
      # Failed to get stats for IPC queue with id 0
      # Failed to dump queue: -22
      # Bail out!
      # # Pass 0 Fail 0 Xfail 0 Xpass 0 Skip 0 Error 0
      not ok 1 selftests: ipc: msgque # exit=1
    
    The dump_queue() function loops through the possible message queue index
    values using calls to msgctl(kern_id, MSG_STAT, ...) where kern_id
    represents the index value. The first time the test is ran, the initial
    index value of 0 is valid and the test is able to complete. The index
    value of 0 is not valid in subsequent test runs and the loop attempts to
    try index values of 1, 2, 3, and so on until a valid index value is
    found that corresponds to the message queue created earlier in the test.
    
    The msgctl() syscall returns -1 and sets errno to EINVAL when invalid
    index values are used. The test failure is caused by incorrectly
    comparing errno to -EINVAL when cycling through possible index values.
    
    Fix invalid test failures on subsequent runs of the msgque test by
    correctly comparing errno values to a non-negated EINVAL.
    
    Fixes: 3a665531a3b7 ("selftests: IPC message queue copy feature test")
    Signed-off-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f9c6cea0b38518741c8dcf26ac056d26ee2fd61d
Author: Juliet Kim <julietk@linux.vnet.ibm.com>
Date:   Thu Apr 30 13:22:11 2020 -0500

    ibmvnic: Skip fatal error reset after passive init
    
    During MTU change, the following events may happen.
    Client-driven CRQ initialization fails due to partner’s CRQ closed,
    causing client to enqueue a reset task for FATAL_ERROR. Then passive
    (server-driven) CRQ initialization succeeds, causing client to
    release CRQ and enqueue a reset task for failover. If the passive
    CRQ initialization occurs before the FATAL reset task is processed,
    the FATAL error reset task would try to access a CRQ message queue
    that was freed, causing an oops. The problem may be most likely to
    occur during DLPAR add vNIC with a non-default MTU, because the DLPAR
    process will automatically issue a change MTU request.
    
    Fix this by not processing fatal error reset if CRQ is passively
    initialized after client-driven CRQ initialization fails.
    
    Signed-off-by: Juliet Kim <julietk@linux.vnet.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b87080eab4c1377706c113fc9c0157f19ea8fed1
Author: Tyler Hicks <tyhicks@linux.microsoft.com>
Date:   Mon Apr 13 15:21:45 2020 -0500

    selftests/ipc: Fix test failure seen after initial test run
    
    After successfully running the IPC msgque test once, subsequent runs
    result in a test failure:
    
      $ sudo ./run_kselftest.sh
      TAP version 13
      1..1
      # selftests: ipc: msgque
      # Failed to get stats for IPC queue with id 0
      # Failed to dump queue: -22
      # Bail out!
      # # Pass 0 Fail 0 Xfail 0 Xpass 0 Skip 0 Error 0
      not ok 1 selftests: ipc: msgque # exit=1
    
    The dump_queue() function loops through the possible message queue index
    values using calls to msgctl(kern_id, MSG_STAT, ...) where kern_id
    represents the index value. The first time the test is ran, the initial
    index value of 0 is valid and the test is able to complete. The index
    value of 0 is not valid in subsequent test runs and the loop attempts to
    try index values of 1, 2, 3, and so on until a valid index value is
    found that corresponds to the message queue created earlier in the test.
    
    The msgctl() syscall returns -1 and sets errno to EINVAL when invalid
    index values are used. The test failure is caused by incorrectly
    comparing errno to -EINVAL when cycling through possible index values.
    
    Fix invalid test failures on subsequent runs of the msgque test by
    correctly comparing errno values to a non-negated EINVAL.
    
    Fixes: 3a665531a3b7 ("selftests: IPC message queue copy feature test")
    Signed-off-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>

commit 938251ee1e23e91b51c5d2a2a31601fa487f85d7
Author: Kees Cook <keescook@chromium.org>
Date:   Mon Apr 8 10:13:44 2019 -0700

    selftests/ipc: Fix msgque compiler warnings
    
    [ Upstream commit a147faa96f832f76e772b1e448e94ea84c774081 ]
    
    This fixes the various compiler warnings when building the msgque
    selftest. The primary change is using sys/msg.h instead of linux/msg.h
    directly to gain the API declarations.
    
    Fixes: 3a665531a3b7 ("selftests: IPC message queue copy feature test")
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c0d4d3bdf73f868e6afbec16395d1edc448651b0
Author: Kees Cook <keescook@chromium.org>
Date:   Mon Apr 8 10:13:44 2019 -0700

    selftests/ipc: Fix msgque compiler warnings
    
    [ Upstream commit a147faa96f832f76e772b1e448e94ea84c774081 ]
    
    This fixes the various compiler warnings when building the msgque
    selftest. The primary change is using sys/msg.h instead of linux/msg.h
    directly to gain the API declarations.
    
    Fixes: 3a665531a3b7 ("selftests: IPC message queue copy feature test")
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f83b9570297cf92d225fe193f5f2ad68a59dab3b
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Tue Dec 10 15:21:03 2019 +0700

    tipc: fix potential hanging after b/rcast changing
    
    commit dca4a17d24ee9d878836ce5eb8dc25be1ffa5729 upstream.
    
    In commit c55c8edafa91 ("tipc: smooth change between replicast and
    broadcast"), we allow instant switching between replicast and broadcast
    by sending a dummy 'SYN' packet on the last used link to synchronize
    packets on the links. The 'SYN' message is an object of link congestion
    also, so if that happens, a 'SOCK_WAKEUP' will be scheduled to be sent
    back to the socket...
    However, in that commit, we simply use the same socket 'cong_link_cnt'
    counter for both the 'SYN' & normal payload message sending. Therefore,
    if both the replicast & broadcast links are congested, the counter will
    be not updated correctly but overwritten by the latter congestion.
    Later on, when the 'SOCK_WAKEUP' messages are processed, the counter is
    reduced one by one and eventually overflowed. Consequently, further
    activities on the socket will only wait for the false congestion signal
    to disappear but never been met.
    
    Because sending the 'SYN' message is vital for the mechanism, it should
    be done anyway. This commit fixes the issue by marking the message with
    an error code e.g. 'TIPC_ERR_NO_PORT', so its sending should not face a
    link congestion, there is no need to touch the socket 'cong_link_cnt'
    either. In addition, in the event of any error (e.g. -ENOBUFS), we will
    purge the entire payload message queue and make a return immediately.
    
    Fixes: c55c8edafa91 ("tipc: smooth change between replicast and broadcast")
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e1cc579898aed48fe6a6ac1bf5a7491784c5d690
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Wed Jan 15 06:34:22 2020 +1000

    drm/nouveau/flcn/msgq: pass explicit message queue pointer to recv()
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

commit 22431189d6690071db01079606feb1daa2784afe
Author: Ben Skeggs <bskeggs@redhat.com>
Date:   Wed Jan 15 06:34:22 2020 +1000

    drm/nouveau/flcn/msgq: explicitly create message queue from subdevs
    
    Code to interface with LS firmwares is being moved to the subdevs where it
    belongs, rather than living in the common falcon code.
    
    This is an incremental step towards that goal.
    
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

commit dca4a17d24ee9d878836ce5eb8dc25be1ffa5729
Author: Tuong Lien <tuong.t.lien@dektech.com.au>
Date:   Tue Dec 10 15:21:03 2019 +0700

    tipc: fix potential hanging after b/rcast changing
    
    In commit c55c8edafa91 ("tipc: smooth change between replicast and
    broadcast"), we allow instant switching between replicast and broadcast
    by sending a dummy 'SYN' packet on the last used link to synchronize
    packets on the links. The 'SYN' message is an object of link congestion
    also, so if that happens, a 'SOCK_WAKEUP' will be scheduled to be sent
    back to the socket...
    However, in that commit, we simply use the same socket 'cong_link_cnt'
    counter for both the 'SYN' & normal payload message sending. Therefore,
    if both the replicast & broadcast links are congested, the counter will
    be not updated correctly but overwritten by the latter congestion.
    Later on, when the 'SOCK_WAKEUP' messages are processed, the counter is
    reduced one by one and eventually overflowed. Consequently, further
    activities on the socket will only wait for the false congestion signal
    to disappear but never been met.
    
    Because sending the 'SYN' message is vital for the mechanism, it should
    be done anyway. This commit fixes the issue by marking the message with
    an error code e.g. 'TIPC_ERR_NO_PORT', so its sending should not face a
    link congestion, there is no need to touch the socket 'cong_link_cnt'
    either. In addition, in the event of any error (e.g. -ENOBUFS), we will
    purge the entire payload message queue and make a return immediately.
    
    Fixes: c55c8edafa91 ("tipc: smooth change between replicast and broadcast")
    Acked-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: Tuong Lien <tuong.t.lien@dektech.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a43eca8aa889570f24bf48f87a719000726d6858
Author: Kees Cook <keescook@chromium.org>
Date:   Mon Apr 8 10:13:44 2019 -0700

    selftests/ipc: Fix msgque compiler warnings
    
    commit a147faa96f832f76e772b1e448e94ea84c774081 upstream.
    
    This fixes the various compiler warnings when building the msgque
    selftest. The primary change is using sys/msg.h instead of linux/msg.h
    directly to gain the API declarations.
    
    Fixes: 3a665531a3b7 ("selftests: IPC message queue copy feature test")
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>
    [bwh: Backported to 3.16: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 6461b446f2a0f40c038f1d09c69d1e5565a84a43
Author: Shannon Nelson <snelson@pensando.io>
Date:   Tue Sep 3 15:28:08 2019 -0700

    ionic: Add interrupts and doorbells
    
    The ionic interrupt model is based on interrupt control blocks
    accessed through the PCI BAR.  Doorbell registers are used by
    the driver to signal to the NIC that requests are waiting on
    the message queues.  Interrupts are used by the NIC to signal
    to the driver that answers are waiting on the completion queues.
    
    Signed-off-by: Shannon Nelson <snelson@pensando.io>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 0f93242d96ff5a04fe02c4978e8dddb014235971
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Mon Jul 8 19:53:08 2019 -0700

    nfp: tls: ignore queue limits for delete commands
    
    We need to do our best not to drop delete commands, otherwise
    we will have stale entries in the connection table.  Ignore
    the control message queue limits for delete commands.
    
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Dirk van der Merwe <dirk.vandermerwe@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a68634893fca765f4914ca32c142028891be6935
Author: Jakub Kicinski <jakub.kicinski@netronome.com>
Date:   Wed Jun 5 14:11:33 2019 -0700

    nfp: parse the mailbox cmsg TLV
    
    Parse the mailbox TLV.  When control message queue is not available
    we can fall back to passing the control messages via the vNIC
    mailbox.
    
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Reviewed-by: Dirk van der Merwe <dirk.vandermerwe@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a147faa96f832f76e772b1e448e94ea84c774081
Author: Kees Cook <keescook@chromium.org>
Date:   Mon Apr 8 10:13:44 2019 -0700

    selftests/ipc: Fix msgque compiler warnings
    
    This fixes the various compiler warnings when building the msgque
    selftest. The primary change is using sys/msg.h instead of linux/msg.h
    directly to gain the API declarations.
    
    Fixes: 3a665531a3b7 ("selftests: IPC message queue copy feature test")
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Shuah Khan <skhan@linuxfoundation.org>

commit 412e60373245fd1dfae8d4d44c5d1406b3d90971
Author: Martin Sperl <kernel@martin.sperl.org>
Date:   Tue Jan 8 12:13:45 2019 +0000

    spi: core: avoid waking pump thread from spi_sync instead run teardown delayed
    
    When spi_sync is running alone with no other spi devices connected
    to the bus the worker thread is woken during spi_finalize_current_message
    to run the teardown code every time.
    
    This is totally unnecessary in the case that there is no message queued.
    
    On a multi-core system this results in one wakeup of the thread for each
    spi_message processed via spi_sync where in most cases the teardown does
    not happen as the hw is already in use.
    
    This patch now delays the teardown by 1 second by using a separate
    kthread_delayed_work for the teardown.
    
    This avoids waking the kthread too often.
    
    For spi_sync transfers in a tight loop (say 40k messages/s) this
    avoids the penalty of waking the worker thread 40k times/s.
    On a rasperry pi 3 with 4 cores the results in 32% of a single core
    only to find out that there is nothing in the queue and it can go back
    to sleep.
    
    With this patch applied the spi-worker is woken exactly once: after
    the load finishes and the spi bus is idle for 1 second.
    
    I believe I have also seen situations where during a spi_sync loop
    the worker thread (triggered by the last message finished) is slightly
    faster and _wins_ the race to process the message, so we are actually
    running the kthread and letting it do some work...
    
    This is also no longer observed with this patch applied as.
    
    Tested with a new CAN controller driver for the mcp2517fd which
    uses spi_sync for interrupt handling and spi_async for scheduling
    of can frames for transmission (in a different thread)
    
    Some statistics when receiving 100000 CAN frames with the mcp25xxfd driver
    on a Raspberry pi 3:
    
    without the patch:
    ------------------
    root@raspcm3:~# for x in $(pgrep spi0) $(pgrep irq/94-mcp25xxf) ; do awk '{printf "%-20s %6i\n", $2,$15}' /proc/$x/stat; done
    (spi0)                    5
    (irq/94-mcp25xxf)         0
    root@raspcm3:~# vmstat 1
    procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
     r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
     1  0      0 821960  13592  50848    0    0    80     2 1986  105  1  2 97  0  0
     0  0      0 821968  13592  50876    0    0     0     0 8046   30  0  0 100  0  0
     0  0      0 821936  13592  50876    0    0     0     0 8032   24  0  0 100  0  0
     0  0      0 821936  13592  50876    0    0     0     0 8035   30  0  0 100  0  0
     0  0      0 821936  13592  50876    0    0     0     0 8033   22  0  0 100  0  0
     2  0      0 821936  13592  50876    0    0     0     0 11598 7129  0  3 97  0  0
     1  0      0 821872  13592  50876    0    0     0     0 37741 59003  0 31 69  0  0
     2  0      0 821840  13592  50876    0    0     0     0 37762 59078  0 29 71  0  0
     2  0      0 821776  13592  50876    0    0     0     0 37593 58792  0 28 72  0  0
     1  0      0 821744  13592  50876    0    0     0     0 37642 58881  0 30 70  0  0
     2  0      0 821680  13592  50876    0    0     0     0 37490 58602  0 27 73  0  0
     1  0      0 821648  13592  50876    0    0     0     0 37412 58418  0 29 71  0  0
     1  0      0 821584  13592  50876    0    0     0     0 37337 58288  0 27 73  0  0
     1  0      0 821552  13592  50876    0    0     0     0 37584 58774  0 27 73  0  0
     0  0      0 821520  13592  50876    0    0     0     0 18363 20566  0  9 91  0  0
     0  0      0 821520  13592  50876    0    0     0     0 8037   32  0  0 100  0  0
     0  0      0 821520  13592  50876    0    0     0     0 8031   23  0  0 100  0  0
     0  0      0 821520  13592  50876    0    0     0     0 8034   26  0  0 100  0  0
     0  0      0 821520  13592  50876    0    0     0     0 8033   24  0  0 100  0  0
    ^C
    root@raspcm3:~# for x in $(pgrep spi0) $(pgrep irq/94-mcp25xxf) ; do awk '{printf "%-20s %6i\n", $2,$15}' /proc/$x/stat; done
    (spi0)                  228
    (irq/94-mcp25xxf)       794
    root@raspcm3:~# cat /proc/interrupts
               CPU0       CPU1       CPU2       CPU3
     17:         34          0          0          0  ARMCTRL-level   1 Edge      3f00b880.mailbox
     27:          1          0          0          0  ARMCTRL-level  35 Edge      timer
     33:    1416870          0          0          0  ARMCTRL-level  41 Edge      3f980000.usb, dwc2_hsotg:usb1
     34:          1          0          0          0  ARMCTRL-level  42 Edge      vc4
     35:          0          0          0          0  ARMCTRL-level  43 Edge      3f004000.txp
     40:       1753          0          0          0  ARMCTRL-level  48 Edge      DMA IRQ
     42:         11          0          0          0  ARMCTRL-level  50 Edge      DMA IRQ
     44:         11          0          0          0  ARMCTRL-level  52 Edge      DMA IRQ
     45:          0          0          0          0  ARMCTRL-level  53 Edge      DMA IRQ
     66:          0          0          0          0  ARMCTRL-level  74 Edge      vc4 crtc
     69:          0          0          0          0  ARMCTRL-level  77 Edge      vc4 crtc
     70:          0          0          0          0  ARMCTRL-level  78 Edge      vc4 crtc
     77:         20          0          0          0  ARMCTRL-level  85 Edge      3f205000.i2c, 3f804000.i2c, 3f805000.i2c
     78:       6346          0          0          0  ARMCTRL-level  86 Edge      3f204000.spi
     80:        205          0          0          0  ARMCTRL-level  88 Edge      mmc0
     81:        493          0          0          0  ARMCTRL-level  89 Edge      uart-pl011
     89:          0          0          0          0  bcm2836-timer   0 Edge      arch_timer
     90:       4291       3821       2180       1649  bcm2836-timer   1 Edge      arch_timer
     94:      14289          0          0          0  pinctrl-bcm2835  16 Level     mcp25xxfd
    IPI0:          0          0          0          0  CPU wakeup interrupts
    IPI1:          0          0          0          0  Timer broadcast interrupts
    IPI2:       3645     242371       7919       1328  Rescheduling interrupts
    IPI3:        112        543        273        194  Function call interrupts
    IPI4:          0          0          0          0  CPU stop interrupts
    IPI5:          1          0          0          0  IRQ work interrupts
    IPI6:          0          0          0          0  completion interrupts
    Err:          0
    
    top shows 93% for the mcp25xxfd interrupt handler, 31% for spi0.
    
    with the patch:
    ---------------
    root@raspcm3:~# for x in $(pgrep spi0) $(pgrep irq/94-mcp25xxf) ; do awk '{printf "%-20s %6i\n", $2,$15}' /proc/$x/stat; done
    (spi0)                    0
    (irq/94-mcp25xxf)         0
    root@raspcm3:~# vmstat 1
    procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
     0  0      0 804768  13584  62628    0    0     0     0 8038   24  0  0 100  0  0
     0  0      0 804768  13584  62628    0    0     0     0 8042   25  0  0 100  0  0
     1  0      0 804704  13584  62628    0    0     0     0 9603 2967  0 20 80  0  0
     1  0      0 804672  13584  62628    0    0     0     0 9828 3380  0 24 76  0  0
     1  0      0 804608  13584  62628    0    0     0     0 9823 3375  0 23 77  0  0
     1  0      0 804608  13584  62628    0    0     0    12 9829 3394  0 23 77  0  0
     1  0      0 804544  13584  62628    0    0     0     0 9816 3362  0 22 78  0  0
     1  0      0 804512  13584  62628    0    0     0     0 9817 3367  0 23 77  0  0
     1  0      0 804448  13584  62628    0    0     0     0 9822 3370  0 22 78  0  0
     1  0      0 804416  13584  62628    0    0     0     0 9815 3367  0 23 77  0  0
     0  0      0 804352  13584  62628    0    0     0    84 9222 2250  0 14 86  0  0
     0  0      0 804352  13592  62620    0    0     0    24 8131  209  0  0 93  7  0
     0  0      0 804320  13592  62628    0    0     0     0 8041   27  0  0 100  0  0
     0  0      0 804352  13592  62628    0    0     0     0 8040   26  0  0 100  0  0
    root@raspcm3:~# for x in $(pgrep spi0) $(pgrep irq/94-mcp25xxf) ; do awk '{printf "%-20s %6i\n", $2,$15}' /proc/$x/stat; done
    (spi0)                    0
    (irq/94-mcp25xxf)       767
    root@raspcm3:~# cat /proc/interrupts
               CPU0       CPU1       CPU2       CPU3
     17:         29          0          0          0  ARMCTRL-level   1 Edge      3f00b880.mailbox
     27:          1          0          0          0  ARMCTRL-level  35 Edge      timer
     33:    1024412          0          0          0  ARMCTRL-level  41 Edge      3f980000.usb, dwc2_hsotg:usb1
     34:          1          0          0          0  ARMCTRL-level  42 Edge      vc4
     35:          0          0          0          0  ARMCTRL-level  43 Edge      3f004000.txp
     40:       1773          0          0          0  ARMCTRL-level  48 Edge      DMA IRQ
     42:         11          0          0          0  ARMCTRL-level  50 Edge      DMA IRQ
     44:         11          0          0          0  ARMCTRL-level  52 Edge      DMA IRQ
     45:          0          0          0          0  ARMCTRL-level  53 Edge      DMA IRQ
     66:          0          0          0          0  ARMCTRL-level  74 Edge      vc4 crtc
     69:          0          0          0          0  ARMCTRL-level  77 Edge      vc4 crtc
     70:          0          0          0          0  ARMCTRL-level  78 Edge      vc4 crtc
     77:         20          0          0          0  ARMCTRL-level  85 Edge      3f205000.i2c, 3f804000.i2c, 3f805000.i2c
     78:       6417          0          0          0  ARMCTRL-level  86 Edge      3f204000.spi
     80:        237          0          0          0  ARMCTRL-level  88 Edge      mmc0
     81:        489          0          0          0  ARMCTRL-level  89 Edge      uart-pl011
     89:          0          0          0          0  bcm2836-timer   0 Edge      arch_timer
     90:       4048       3704       2383       1892  bcm2836-timer   1 Edge      arch_timer
     94:      14287          0          0          0  pinctrl-bcm2835  16 Level     mcp25xxfd
    IPI0:          0          0          0          0  CPU wakeup interrupts
    IPI1:          0          0          0          0  Timer broadcast interrupts
    IPI2:       2361       2948       7890       1616  Rescheduling interrupts
    IPI3:         65        617        301        166  Function call interrupts
    IPI4:          0          0          0          0  CPU stop interrupts
    IPI5:          1          0          0          0  IRQ work interrupts
    IPI6:          0          0          0          0  completion interrupts
    Err:          0
    top shows 91% for the mcp25xxfd interrupt handler, 0% for spi0
    
    So we see that spi0 is no longer getting scheduled wasting CPU cycles
    There are a lot less context switches and corresponding Rescheduling interrupts
    All of these show that this improves efficiency of the system and reduces
    CPU utilization.
    
    Signed-off-by: Martin Sperl <kernel@martin.sperl.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit f699c3222635eaf919f3d4716fe0e0565cd4afad
Author: Oleksij Rempel <o.rempel@pengutronix.de>
Date:   Tue Sep 18 11:40:41 2018 +0200

    can: flexcan: use can_rx_offload_queue_sorted() for flexcan_irq_bus_*()
    
    commit d788905f68fd4714c82936f6f7f1d3644d7ae7ef upstream.
    
    Currently, in case of bus error, driver will generate error message and put
    in the tail of the message queue. To avoid confusions, this change should
    place the bus related messages in proper order.
    
    Signed-off-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Cc: linux-stable <stable@vger.kernel.org>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d788905f68fd4714c82936f6f7f1d3644d7ae7ef
Author: Oleksij Rempel <o.rempel@pengutronix.de>
Date:   Tue Sep 18 11:40:41 2018 +0200

    can: flexcan: use can_rx_offload_queue_sorted() for flexcan_irq_bus_*()
    
    Currently, in case of bus error, driver will generate error message and put
    in the tail of the message queue. To avoid confusions, this change should
    place the bus related messages in proper order.
    
    Signed-off-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Cc: linux-stable <stable@vger.kernel.org>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>

commit b5932f5c68e5fbe74fb7a27b4d0faf919e1e1642
Author: Boris Brezillon <boris.brezillon@bootlin.com>
Date:   Thu Apr 26 18:18:15 2018 +0200

    spi: Make support for regular transfers optional when ->mem_ops != NULL
    
    Some SPI/QuadSPI controllers only expose a high-level SPI memory
    interface, thus preventing any regular SPI transfers from being done.
    
    In that case, SPI controller drivers can leave all ->transfer_xxx()
    hooks empty and only implement the spi_mem_ops interface.
    
    Adjust the core to allow such situations:
    - extend spi_controller_check_ops() to accept situations where all
      ->transfer_xxx() pointers are NULL only if ->mem_ops != NULL
    - make sure we do not initialize the SPI message queue if
      ctlr->transfer_one and ctlr->transfer_one_message are missing
    - return -ENOTSUPP if someone tries to do a regular SPI transfer on
      a controller that does not support it
    
    Signed-off-by: Boris Brezillon <boris.brezillon@bootlin.com>
    Reviewed-by: Frieder Schrempf <frieder.schrempf@exceet.de>
    Tested-by: Frieder Schrempf <frieder.schrempf@exceet.de>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 988f259b46646934003ff8ae4966f7233691d1ad
Author: Boris Brezillon <boris.brezillon@bootlin.com>
Date:   Sun Apr 22 20:35:15 2018 +0200

    spi: Add an helper to flush the message queue
    
    This is needed by the spi-mem logic to force all messages that have been
    queued before a memory operation to be sent before we start the memory
    operation. We do that in order to guarantee that spi-mem operations do
    not preempt regular SPI transfers.
    
    Signed-off-by: Boris Brezillon <boris.brezillon@bootlin.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 01c15e93a78cfcf45cc32d07aa38bdc84250f569
Author: Pieter Jansen van Vuuren <pieter.jansenvanvuuren@netronome.com>
Date:   Fri Jan 19 17:54:08 2018 -0800

    nfp: flower: prioritize stats updates
    
    Previously it was possible to interrupt processing stats updates because
    they were handled in a work queue. Interrupting the stats updates could
    lead to a situation where we backup the control message queue. This patch
    moves the stats update processing out of the work queue to be processed as
    soon as hardware sends a request.
    
    Reported-by: Louis Peens <louis.peens@netronome.com>
    Signed-off-by: Pieter Jansen van Vuuren <pieter.jansenvanvuuren@netronome.com>
    Reviewed-by: Dirk van der Merwe <dirk.vandermerwe@netronome.com>
    Reviewed-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e0e853ac036f76fcad3995554b8b6cef555b010f
Author: Jon Maloy <jon.maloy@ericsson.com>
Date:   Mon Nov 20 21:43:03 2017 +0100

    tipc: fix access of released memory
    
    When the function tipc_group_filter_msg() finds that a member event
    indicates that the member is leaving the group, it first deletes the
    member instance, and then purges the message queue being handled
    by the call. But the message queue is an aggregated field in the
    just deleted item, leading the purge call to access freed memory.
    
    We fix this by swapping the order of the two actions.
    
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit bc5e3a546d553e5223851fc199e69040eb70f68b
Author: David Howells <dhowells@redhat.com>
Date:   Wed Oct 18 11:07:31 2017 +0100

    rxrpc: Use MSG_WAITALL to tell sendmsg() to temporarily ignore signals
    
    Make AF_RXRPC accept MSG_WAITALL as a flag to sendmsg() to tell it to
    ignore signals whilst loading up the message queue, provided progress is
    being made in emptying the queue at the other side.
    
    Progress is defined as the base of the transmit window having being
    advanced within 2 RTT periods.  If the period is exceeded with no progress,
    sendmsg() will return anyway, indicating how much data has been copied, if
    any.
    
    Once the supplied buffer is entirely decanted, the sendmsg() will return.
    
    Signed-off-by: David Howells <dhowells@redhat.com>

commit 1f5c27e52857c9ba8f1ee4ed5093bee1a341f330
Author: Jacob Keller <jacob.e.keller@intel.com>
Date:   Mon Jul 10 13:23:18 2017 -0700

    fm10k: use the MAC/VLAN queue for VF<->PF MAC/VLAN requests
    
    Now that we have a working MAC/VLAN queue for handling MAC/VLAN messages
    from the netdev, replace the default handler for the VF<->PF messages.
    This new handler is very similar to the default code, but uses the
    MAC/VLAN queue instead of sending the message directly. Unfortunately we
    can't easily re-use the default code, so we'll just replace the entire
    function.
    
    This ensures that a VF requesting a large number of VLANs or MAC
    addresses does not start a reset cycle, as explained in the commit which
    introduced the message queue.
    
    Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
    Reviewed-by: Ngai-mint Kwan <ngai-mint.kwan@intel.com>
    Tested-by: Krishneil Singh <krishneil.k.singh@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>

commit fc9173682dcf73cfe3324267424ef17e854bb444
Author: Jacob Keller <jacob.e.keller@intel.com>
Date:   Mon Jul 10 13:23:17 2017 -0700

    fm10k: introduce a message queue for MAC/VLAN messages
    
    Under some circumstances, when dealing with a large number of MAC
    address or VLAN updates at once, the fm10k driver, particularly the VFs
    can overload the mailbox with too many messages at once.
    
    This results in a mailbox timeout, which causes the driver to initiate
    a reset. During the reset, we re-send all the same messages that
    originally caused the timeout. This results in a cycle of resets each
    triggering a future reset.
    
    To fix or avoid this, we introduce a workqueue item which monitors
    a queue of MAC and VLAN requests. These requests are queued to the end
    of the list, and we process as a FIFO periodically.
    
    Initially we only handle requests for the netdev, but we do handle
    unicast MAC addresses, multicast MAC addresses, and update VLAN
    requests.
    
    A future patch will add support to use this queue for handling MAC
    update requests from the VF<->PF mailbox.
    
    The MAC/VLAN work item will keep checking to make sure that each request
    does not overflow the mailbox and cause a timeout. If it might, then the
    work item will reschedule itself a short time later. This avoids any
    reset cycle, since we never send the message if the mailbox is not
    ready.
    
    As an alternative, we tried increasing the mailbox message FIFO, but
    this just delays the problem and results in needless memory waste on the
    system. Our new message queue is dynamically allocated so only uses as
    much memory as it needs. Additionally, it need not be contiguous like
    the Tx and Rx FIFOs.
    
    Note that this patch chose to only create a queue for MAC and VLAN
    messages, since these are the only messages sent in a large enough
    volume to cause the reset loop. Other messages are very unlikely to
    overflow the mailbox Tx FIFO so easily.
    
    Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
    Tested-by: Krishneil Singh <krishneil.k.singh@intel.com>
    Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>

commit 16779622be1c8959d6a665e2b6886bb33885fcb1
Author: H Hartley Sweeten <hsweeten@visionengravers.com>
Date:   Wed Aug 9 08:51:27 2017 +1200

    spi: spi-ep93xx: add spi master prepare_transfer_hardware()
    
    This driver currently enables the hardware at the start of every
    message and disabled it when the message is complete. Make it a
    bit smarter by adding the prepare_transfer_hardware() and
    unprepare_transfer_hardware() callbacks so that the core can
    enable/disable the hardware based on spi message queue.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    [chris: use u32 instead of unsigned int]
    Signed-off-by: Chris Packham <chris.packham@alliedtelesis.co.nz>
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 8ac6e2a3b8dd7dc8f5b924f440e005d957489d8d
Merge: 65344ba99836 a356ab1c3d46
Author: David S. Miller <davem@davemloft.net>
Date:   Thu Jun 29 15:26:14 2017 -0400

    Merge branch 'arcnet-features'
    
    Michael Grzeschik says:
    
    ====================
    arcnet: Collection of latest features
    
    Here we sum up the latest features to improve the arcnet framework. One
    patch is used to get feedback from the transfer queue about failed xfers
    by adding the err_skb message queue. Beside that we improve the
    backplane status that can be read by the PCI-based cards and offer that
    status via an extra sysfs attribute. In the last patch we add another
    card type PCIFB2.
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 05fcd31cc472c5da6416d3bc2ab25599bbb9331f
Author: Michael Grzeschik <m.grzeschik@pengutronix.de>
Date:   Wed Jun 28 18:32:18 2017 +0200

    arcnet: add err_skb package for package status feedback
    
    We need to track the status of our queued packages. This way the driving
    process knows if failed packages need to be retransmitted. For this
    purpose we queue the transferred/failed packages back into the err_skb
    message queue added with some status information.
    
    Signed-off-by: Michael Grzeschik <m.grzeschik@pengutronix.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 114223aa1a7f9926960d2c3d6b2b51317df1aa9e
Author: Alexandre Courbot <acourbot@nvidia.com>
Date:   Thu Jan 26 16:57:24 2017 +0900

    drm/nouveau/secboot: add support for SEC LS firmware
    
    Support running a message queue firmware on SEC.
    
    Signed-off-by: Alexandre Courbot <acourbot@nvidia.com>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

commit eabe4ea6a418a60b4df666154f2b0d8cd7d5ba29
Author: Alexandre Courbot <acourbot@nvidia.com>
Date:   Thu Oct 27 14:22:28 2016 +0900

    drm/nouveau/secboot: support for loading LS PMU firmware
    
    Allow secboot to load a LS PMU firmware. LS PMU is one instance of
    firmwares based on the message queue mechanism, which is also used for
    other firmwares like SEC, so name its source file accordingly.
    
    Signed-off-by: Alexandre Courbot <acourbot@nvidia.com>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

commit 9b536e9d525191cab931c997556af6b9b4637164
Author: Alexandre Courbot <acourbot@nvidia.com>
Date:   Thu Jan 19 12:52:50 2017 +0900

    drm/nouveau/falcon: add msgqueue interface
    
    A message queue firmware implements a specific protocol allowing the
    host to send "commands" to a falcon, and the falcon to reply using
    "messages". This patch implements the common part of this protocol and
    defines the interface that the host can use.
    
    Due to the way the firmware is developped internally at NVIDIA (where
    kernel driver and firmware evolve in lockstep), firmwares taken at
    different points in time can have frustratingly subtle differences that
    must be taken into account. This code is architectured to make
    implementing such differences as easy as possible.
    
    Signed-off-by: Alexandre Courbot <acourbot@nvidia.com>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

commit 1ca5eebb894a3625b2a543c7b550aa4ae33ba3cc
Author: Mike Frysinger <vapier@chromium.org>
Date:   Fri Feb 24 15:00:26 2017 -0800

    uapi: mqueue.h: add missing linux/types.h include
    
    Commit 63159f5dcccb ("uapi: Use __kernel_long_t in struct mq_attr")
    changed the types from long to __kernel_long_t, but didn't add a
    linux/types.h include.  Code that tries to include this header directly
    breaks:
    
      /usr/include/linux/mqueue.h:26:2: error: unknown type name '__kernel_long_t'
      __kernel_long_t mq_flags; /* message queue flags   */
    
    This also upsets configure tests for this header:
    
      checking linux/mqueue.h usability... no
      checking linux/mqueue.h presence... yes
      configure: WARNING: linux/mqueue.h: present but cannot be compiled
      configure: WARNING: linux/mqueue.h:     check for missing prerequisite headers?
      configure: WARNING: linux/mqueue.h: see the Autoconf documentation
      configure: WARNING: linux/mqueue.h:     section "Present But Cannot Be Compiled"
      configure: WARNING: linux/mqueue.h: proceeding with the compiler's result
      checking for linux/mqueue.h... no
    
    Link: http://lkml.kernel.org/r/20170119194644.4403-1-vapier@gentoo.org
    Signed-off-by: Mike Frysinger <vapier@gentoo.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 4fc0caac065dbf300238997c7d2c212a2b120099
Author: Jarkko Nikula <jarkko.nikula@linux.intel.com>
Date:   Wed Sep 7 17:04:06 2016 +0300

    spi: pxa2xx: Remove pointer to current SPI message from driver data
    
    There is no need to carry pointer to current SPI message in driver data
    because cur_msg in struct spi_master holds it already when driver is using
    the message queueing infrastructure from the SPI core.
    
    Signed-off-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit eac9837f87017c7a3a6c0a8908fdda66f7f9c076
Author: Bhaktipriya Shridhar <bhaktipriya96@gmail.com>
Date:   Sat Jul 2 14:29:41 2016 +0530

    spi: spi-bfin-sport: Remove deprecated create_singlethread_workqueue
    
    The workqueue "workqueue" serves as a driver message queue.
    It has a single work item(&drv_data->pump_messages) and hence doesn't
    require ordering. Also, it is not being used on a memory reclaim path.
    Hence, the singlethreaded workqueue has been replaced with the use of
    system_wq.
    
    System workqueues have been able to handle high level of concurrency
    for a long time now and hence it's not required to have a singlethreaded
    workqueue just to gain concurrency. Unlike a dedicated per-cpu workqueue
    created with create_singlethread_workqueue(), system_wq allows multiple
    work items to overlap executions even on the same CPU; however, a
    per-cpu workqueue doesn't have any CPU locality or global ordering
    guarantee unless the target CPU is explicitly specified and thus the
    increase of local concurrency shouldn't make any difference.
    
    Work item has been flushed in bfin_sport_spi_destroy_queue() to ensure
    that there are no pending tasks while disconnecting the driver.
    
    Signed-off-by: Bhaktipriya Shridhar <bhaktipriya96@gmail.com>
    Acked-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 9b96f0704b5ad75ef26085d03934bee21d3362f0
Author: Bhaktipriya Shridhar <bhaktipriya96@gmail.com>
Date:   Sat Jul 2 14:12:00 2016 +0530

    spi: spi-bfin5xx: Remove deprecated create_singlethread_workqueue
    
    The workqueue "workqueue" serves as a driver message queue.
    It has a single work item(&drv_data->pump_messages) and hence doesn't
    require ordering. Also, it is not being used on a memory reclaim path.
    Hence, the singlethreaded workqueue has been replaced with the use of
    system_wq.
    
    System workqueues have been able to handle high level of concurrency
    for a long time now and hence it's not required to have a singlethreaded
    workqueue just to gain concurrency. Unlike a dedicated per-cpu workqueue
    created with create_singlethread_workqueue(), system_wq allows multiple
    work items to overlap executions even on the same CPU; however, a
    per-cpu workqueue doesn't have any CPU locality or global ordering
    guarantee unless the target CPU is explicitly specified and thus the
    increase of local concurrency shouldn't make any difference.
    
    Work item has been flushed in bfin_spi_destroy_queue() to ensure that there
    are no pending tasks while disconnecting the driver.
    
    Signed-off-by: Bhaktipriya Shridhar <bhaktipriya96@gmail.com>
    Acked-by: Tejun Heo <tj@kernel.org>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit f69c3331624438321877083e27f5aa09eab3b863
Author: Ismail, Mustafa <mustafa.ismail@intel.com>
Date:   Mon Apr 18 10:33:03 2016 -0500

    RDMA/i40iw: Add virtual channel message queue
    
    Queue users of virtual channel on a waitqueue until the channel is
    clear instead of failing the call when the channel is occupied.
    
    Signed-off-by: Mustafa Ismail <mustafa.ismail@intel.com>
    Signed-off-by: Faisal Latif <faisal.latif@intel.com>
    Signed-off-by: Doug Ledford <dledford@redhat.com>

commit a52db659c79ceede44e2d5ca63ca058d49df8dea
Author: Christophe Ricard <christophe.ricard@gmail.com>
Date:   Sun Mar 20 19:30:17 2016 +0100

    spi: pxa2xx: Fix cs_change management
    
    Fix cs_change management so that it is in line with other spi drivers.
    
    In the spi core api helpers such as spi_bus_lock/unlock and spi_sync_locked
    or cs_change field in spi_transfer help to manage chip select from the
    device driver.
    
    The driver was setting the chip select to idle if the message queue was
    empty despite cs_change or other status field set by spi_bus_lock/unlock
    or spi_sync_locked.
    
    Signed-off-by: Christophe Ricard <christophe-h.ricard@st.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 22640c8a2736d1127a3fd2380f6ed08670b22ed9
Author: Jarkko Nikula <jarkko.nikula@linux.intel.com>
Date:   Wed Feb 17 13:52:12 2016 +0200

    spi: pl022: Remove obsolete struct pl022 members from kerneldoc
    
    These structure members were removed in 2012 by the commit ffbbdd21329f
    ("spi: create a message queueing infrastructure").
    
    Signed-off-by: Jarkko Nikula <jarkko.nikula@linux.intel.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 17aa8ac53418d99ac6394ae47a59fc573bb1972e
Author: Stewart Smith <stewart@linux.vnet.ibm.com>
Date:   Fri Dec 11 12:08:23 2015 +1100

    powerpc/powernv: pr_warn_once on unsupported OPAL_MSG type
    
    commit 98da62b716a3b24ab8e77453c9a8a954124c18cd upstream.
    
    When running on newer OPAL firmware that supports sending extra
    OPAL_MSG types, we would print a warning on *every* message received.
    
    This could be a problem for kernels that don't support OPAL_MSG_OCC
    on machines that are running real close to thermal limits and the
    OCC is throttling the chip. For a kernel that is paying attention to
    the message queue, we could get these notifications quite often.
    
    Conceivably, future message types could also come fairly often,
    and printing that we didn't understand them 10,000 times provides
    no further information than printing them once.
    
    Signed-off-by: Stewart Smith <stewart@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1e14dd5a386443f9dd4237f7da4df3669d903f0d
Author: Stewart Smith <stewart@linux.vnet.ibm.com>
Date:   Fri Dec 11 12:08:23 2015 +1100

    powerpc/powernv: pr_warn_once on unsupported OPAL_MSG type
    
    commit 98da62b716a3b24ab8e77453c9a8a954124c18cd upstream.
    
    When running on newer OPAL firmware that supports sending extra
    OPAL_MSG types, we would print a warning on *every* message received.
    
    This could be a problem for kernels that don't support OPAL_MSG_OCC
    on machines that are running real close to thermal limits and the
    OCC is throttling the chip. For a kernel that is paying attention to
    the message queue, we could get these notifications quite often.
    
    Conceivably, future message types could also come fairly often,
    and printing that we didn't understand them 10,000 times provides
    no further information than printing them once.
    
    Signed-off-by: Stewart Smith <stewart@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3a2030c8b0e0202f2aa5613cc815b072a385ed3e
Author: Stewart Smith <stewart@linux.vnet.ibm.com>
Date:   Fri Dec 11 12:08:23 2015 +1100

    powerpc/powernv: pr_warn_once on unsupported OPAL_MSG type
    
    commit 98da62b716a3b24ab8e77453c9a8a954124c18cd upstream.
    
    When running on newer OPAL firmware that supports sending extra
    OPAL_MSG types, we would print a warning on *every* message received.
    
    This could be a problem for kernels that don't support OPAL_MSG_OCC
    on machines that are running real close to thermal limits and the
    OCC is throttling the chip. For a kernel that is paying attention to
    the message queue, we could get these notifications quite often.
    
    Conceivably, future message types could also come fairly often,
    and printing that we didn't understand them 10,000 times provides
    no further information than printing them once.
    
    Signed-off-by: Stewart Smith <stewart@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Luis Henriques <luis.henriques@canonical.com>

commit 98da62b716a3b24ab8e77453c9a8a954124c18cd
Author: Stewart Smith <stewart@linux.vnet.ibm.com>
Date:   Fri Dec 11 12:08:23 2015 +1100

    powerpc/powernv: pr_warn_once on unsupported OPAL_MSG type
    
    When running on newer OPAL firmware that supports sending extra
    OPAL_MSG types, we would print a warning on *every* message received.
    
    This could be a problem for kernels that don't support OPAL_MSG_OCC
    on machines that are running real close to thermal limits and the
    OCC is throttling the chip. For a kernel that is paying attention to
    the message queue, we could get these notifications quite often.
    
    Conceivably, future message types could also come fairly often,
    and printing that we didn't understand them 10,000 times provides
    no further information than printing them once.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Stewart Smith <stewart@linux.vnet.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

commit 17db84eba18eaa20fab687bf38418a2286cb085a
Author: Vincent Stehlé <vincent.stehle@laposte.net>
Date:   Wed Oct 7 07:08:25 2015 +0200

    staging: wilc1000: avoid NULL pointer dereference on error
    
    The host_int_init() function can dereference the pstrWFIDrv pointer
    while it is NULL on its error path. Jump directly to the _fail_ error
    label in the end of the error handling path to avoid that.
            By doing that we also skip stopping our kthread and destroying
    our message queue, but they were not started or created yet in that case
    anyway.
    
    This fixes the following coccinelle error:
    
      drivers/staging/wilc1000/host_interface.c:6100:17-33: ERROR: pstrWFIDrv is NULL but dereferenced.
    
    Signed-off-by: Vincent Stehlé <vincent.stehle@laposte.net>
    Cc: Johnny Kim <johnny.kim@atmel.com>
    Cc: Rachel Kim <rachel.kim@atmel.com>
    Cc: Dean Lee <dean.lee@atmel.com>
    Cc: Chris Park <chris.park@atmel.com>
    Cc: Nicolas Ferre <nicolas.ferre@atmel.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f23eb98b9429082644c2a08af12fbdbff646c406
Author: Chaehyun Lim <chaehyun.lim@gmail.com>
Date:   Wed Sep 23 18:03:47 2015 +0900

    staging: wilc1000: move wilc_msgqueue.h include file
    
    This patch moves wilc_msgqueue.h include file from wilc_oswrapper.h to
    host_interface.c because message queue function as wilc_mq_create,
    wilc_mq_send, wilc_mq_recv and wilc_mq_destroy are used only at
    host_interface.c file.
    
    Signed-off-by: Chaehyun Lim <chaehyun.lim@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b76ac7053d65b5b8bf2af6ef19c7f0ce6782cb7e
Author: Marcus Gelderie <redmnic@gmail.com>
Date:   Thu Aug 6 15:46:10 2015 -0700

    ipc: modify message queue accounting to not take kernel data structures into account
    
    [ Upstream commit de54b9ac253787c366bbfb28d901a31954eb3511 ]
    
    A while back, the message queue implementation in the kernel was
    improved to use btrees to speed up retrieval of messages, in commit
    d6629859b36d ("ipc/mqueue: improve performance of send/recv").
    
    That patch introducing the improved kernel handling of message queues
    (using btrees) has, as a by-product, changed the meaning of the QSIZE
    field in the pseudo-file created for the queue.  Before, this field
    reflected the size of the user-data in the queue.  Since, it also takes
    kernel data structures into account.  For example, if 13 bytes of user
    data are in the queue, on my machine the file reports a size of 61
    bytes.
    
    There was some discussion on this topic before (for example
    https://lkml.org/lkml/2014/10/1/115).  Commenting on a th lkml, Michael
    Kerrisk gave the following background
    (https://lkml.org/lkml/2015/6/16/74):
    
        The pseudofiles in the mqueue filesystem (usually mounted at
        /dev/mqueue) expose fields with metadata describing a message
        queue. One of these fields, QSIZE, as originally implemented,
        showed the total number of bytes of user data in all messages in
        the message queue, and this feature was documented from the
        beginning in the mq_overview(7) page. In 3.5, some other (useful)
        work happened to break the user-space API in a couple of places,
        including the value exposed via QSIZE, which now includes a measure
        of kernel overhead bytes for the queue, a figure that renders QSIZE
        useless for its original purpose, since there's no way to deduce
        the number of overhead bytes consumed by the implementation.
        (The other user-space breakage was subsequently fixed.)
    
    This patch removes the accounting of kernel data structures in the
    queue.  Reporting the size of these data-structures in the QSIZE field
    was a breaking change (see Michael's comment above).  Without the QSIZE
    field reporting the total size of user-data in the queue, there is no
    way to deduce this number.
    
    It should be noted that the resource limit RLIMIT_MSGQUEUE is counted
    against the worst-case size of the queue (in both the old and the new
    implementation).  Therefore, the kernel overhead accounting in QSIZE is
    not necessary to help the user understand the limitations RLIMIT imposes
    on the processes.
    
    Signed-off-by: Marcus Gelderie <redmnic@gmail.com>
    Acked-by: Doug Ledford <dledford@redhat.com>
    Acked-by: Michael Kerrisk <mtk.manpages@gmail.com>
    Acked-by: Davidlohr Bueso <dbueso@suse.de>
    Cc: David Howells <dhowells@redhat.com>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: John Duffy <jb_duffy@btinternet.com>
    Cc: Arto Bendiken <arto@bendiken.net>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sasha.levin@oracle.com>

commit 1e10a0a1f1185918c89ced518cc288329db6d4ee
Author: Marcus Gelderie <redmnic@gmail.com>
Date:   Thu Aug 6 15:46:10 2015 -0700

    ipc: modify message queue accounting to not take kernel data structures into account
    
    commit de54b9ac253787c366bbfb28d901a31954eb3511 upstream.
    
    A while back, the message queue implementation in the kernel was
    improved to use btrees to speed up retrieval of messages, in commit
    d6629859b36d ("ipc/mqueue: improve performance of send/recv").
    
    That patch introducing the improved kernel handling of message queues
    (using btrees) has, as a by-product, changed the meaning of the QSIZE
    field in the pseudo-file created for the queue.  Before, this field
    reflected the size of the user-data in the queue.  Since, it also takes
    kernel data structures into account.  For example, if 13 bytes of user
    data are in the queue, on my machine the file reports a size of 61
    bytes.
    
    There was some discussion on this topic before (for example
    https://lkml.org/lkml/2014/10/1/115).  Commenting on a th lkml, Michael
    Kerrisk gave the following background
    (https://lkml.org/lkml/2015/6/16/74):
    
        The pseudofiles in the mqueue filesystem (usually mounted at
        /dev/mqueue) expose fields with metadata describing a message
        queue. One of these fields, QSIZE, as originally implemented,
        showed the total number of bytes of user data in all messages in
        the message queue, and this feature was documented from the
        beginning in the mq_overview(7) page. In 3.5, some other (useful)
        work happened to break the user-space API in a couple of places,
        including the value exposed via QSIZE, which now includes a measure
        of kernel overhead bytes for the queue, a figure that renders QSIZE
        useless for its original purpose, since there's no way to deduce
        the number of overhead bytes consumed by the implementation.
        (The other user-space breakage was subsequently fixed.)
    
    This patch removes the accounting of kernel data structures in the
    queue.  Reporting the size of these data-structures in the QSIZE field
    was a breaking change (see Michael's comment above).  Without the QSIZE
    field reporting the total size of user-data in the queue, there is no
    way to deduce this number.
    
    It should be noted that the resource limit RLIMIT_MSGQUEUE is counted
    against the worst-case size of the queue (in both the old and the new
    implementation).  Therefore, the kernel overhead accounting in QSIZE is
    not necessary to help the user understand the limitations RLIMIT imposes
    on the processes.
    
    Signed-off-by: Marcus Gelderie <redmnic@gmail.com>
    Acked-by: Doug Ledford <dledford@redhat.com>
    Acked-by: Michael Kerrisk <mtk.manpages@gmail.com>
    Acked-by: Davidlohr Bueso <dbueso@suse.de>
    Cc: David Howells <dhowells@redhat.com>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: John Duffy <jb_duffy@btinternet.com>
    Cc: Arto Bendiken <arto@bendiken.net>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Luis Henriques <luis.henriques@canonical.com>

commit be797479a84d19d12f101a14a0668a628c63dfe2
Author: Marcus Gelderie <redmnic@gmail.com>
Date:   Thu Aug 6 15:46:10 2015 -0700

    ipc: modify message queue accounting to not take kernel data structures into account
    
    commit de54b9ac253787c366bbfb28d901a31954eb3511 upstream.
    
    A while back, the message queue implementation in the kernel was
    improved to use btrees to speed up retrieval of messages, in commit
    d6629859b36d ("ipc/mqueue: improve performance of send/recv").
    
    That patch introducing the improved kernel handling of message queues
    (using btrees) has, as a by-product, changed the meaning of the QSIZE
    field in the pseudo-file created for the queue.  Before, this field
    reflected the size of the user-data in the queue.  Since, it also takes
    kernel data structures into account.  For example, if 13 bytes of user
    data are in the queue, on my machine the file reports a size of 61
    bytes.
    
    There was some discussion on this topic before (for example
    https://lkml.org/lkml/2014/10/1/115).  Commenting on a th lkml, Michael
    Kerrisk gave the following background
    (https://lkml.org/lkml/2015/6/16/74):
    
        The pseudofiles in the mqueue filesystem (usually mounted at
        /dev/mqueue) expose fields with metadata describing a message
        queue. One of these fields, QSIZE, as originally implemented,
        showed the total number of bytes of user data in all messages in
        the message queue, and this feature was documented from the
        beginning in the mq_overview(7) page. In 3.5, some other (useful)
        work happened to break the user-space API in a couple of places,
        including the value exposed via QSIZE, which now includes a measure
        of kernel overhead bytes for the queue, a figure that renders QSIZE
        useless for its original purpose, since there's no way to deduce
        the number of overhead bytes consumed by the implementation.
        (The other user-space breakage was subsequently fixed.)
    
    This patch removes the accounting of kernel data structures in the
    queue.  Reporting the size of these data-structures in the QSIZE field
    was a breaking change (see Michael's comment above).  Without the QSIZE
    field reporting the total size of user-data in the queue, there is no
    way to deduce this number.
    
    It should be noted that the resource limit RLIMIT_MSGQUEUE is counted
    against the worst-case size of the queue (in both the old and the new
    implementation).  Therefore, the kernel overhead accounting in QSIZE is
    not necessary to help the user understand the limitations RLIMIT imposes
    on the processes.
    
    Signed-off-by: Marcus Gelderie <redmnic@gmail.com>
    Acked-by: Doug Ledford <dledford@redhat.com>
    Acked-by: Michael Kerrisk <mtk.manpages@gmail.com>
    Acked-by: Davidlohr Bueso <dbueso@suse.de>
    Cc: David Howells <dhowells@redhat.com>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: John Duffy <jb_duffy@btinternet.com>
    Cc: Arto Bendiken <arto@bendiken.net>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit dbbf0fec573be060c7869674ec112b4c3de58957
Author: Marcus Gelderie <redmnic@gmail.com>
Date:   Thu Aug 6 15:46:10 2015 -0700

    ipc: modify message queue accounting to not take kernel data structures into account
    
    commit de54b9ac253787c366bbfb28d901a31954eb3511 upstream.
    
    A while back, the message queue implementation in the kernel was
    improved to use btrees to speed up retrieval of messages, in commit
    d6629859b36d ("ipc/mqueue: improve performance of send/recv").
    
    That patch introducing the improved kernel handling of message queues
    (using btrees) has, as a by-product, changed the meaning of the QSIZE
    field in the pseudo-file created for the queue.  Before, this field
    reflected the size of the user-data in the queue.  Since, it also takes
    kernel data structures into account.  For example, if 13 bytes of user
    data are in the queue, on my machine the file reports a size of 61
    bytes.
    
    There was some discussion on this topic before (for example
    https://lkml.org/lkml/2014/10/1/115).  Commenting on a th lkml, Michael
    Kerrisk gave the following background
    (https://lkml.org/lkml/2015/6/16/74):
    
        The pseudofiles in the mqueue filesystem (usually mounted at
        /dev/mqueue) expose fields with metadata describing a message
        queue. One of these fields, QSIZE, as originally implemented,
        showed the total number of bytes of user data in all messages in
        the message queue, and this feature was documented from the
        beginning in the mq_overview(7) page. In 3.5, some other (useful)
        work happened to break the user-space API in a couple of places,
        including the value exposed via QSIZE, which now includes a measure
        of kernel overhead bytes for the queue, a figure that renders QSIZE
        useless for its original purpose, since there's no way to deduce
        the number of overhead bytes consumed by the implementation.
        (The other user-space breakage was subsequently fixed.)
    
    This patch removes the accounting of kernel data structures in the
    queue.  Reporting the size of these data-structures in the QSIZE field
    was a breaking change (see Michael's comment above).  Without the QSIZE
    field reporting the total size of user-data in the queue, there is no
    way to deduce this number.
    
    It should be noted that the resource limit RLIMIT_MSGQUEUE is counted
    against the worst-case size of the queue (in both the old and the new
    implementation).  Therefore, the kernel overhead accounting in QSIZE is
    not necessary to help the user understand the limitations RLIMIT imposes
    on the processes.
    
    Signed-off-by: Marcus Gelderie <redmnic@gmail.com>
    Acked-by: Doug Ledford <dledford@redhat.com>
    Acked-by: Michael Kerrisk <mtk.manpages@gmail.com>
    Acked-by: Davidlohr Bueso <dbueso@suse.de>
    Cc: David Howells <dhowells@redhat.com>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: John Duffy <jb_duffy@btinternet.com>
    Cc: Arto Bendiken <arto@bendiken.net>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f5dd4ec9d8460f7c5d15ebe5be755cacd1fd5d2e
Author: Marcus Gelderie <redmnic@gmail.com>
Date:   Thu Aug 6 15:46:10 2015 -0700

    ipc: modify message queue accounting to not take kernel data structures into account
    
    commit de54b9ac253787c366bbfb28d901a31954eb3511 upstream.
    
    A while back, the message queue implementation in the kernel was
    improved to use btrees to speed up retrieval of messages, in commit
    d6629859b36d ("ipc/mqueue: improve performance of send/recv").
    
    That patch introducing the improved kernel handling of message queues
    (using btrees) has, as a by-product, changed the meaning of the QSIZE
    field in the pseudo-file created for the queue.  Before, this field
    reflected the size of the user-data in the queue.  Since, it also takes
    kernel data structures into account.  For example, if 13 bytes of user
    data are in the queue, on my machine the file reports a size of 61
    bytes.
    
    There was some discussion on this topic before (for example
    https://lkml.org/lkml/2014/10/1/115).  Commenting on a th lkml, Michael
    Kerrisk gave the following background
    (https://lkml.org/lkml/2015/6/16/74):
    
        The pseudofiles in the mqueue filesystem (usually mounted at
        /dev/mqueue) expose fields with metadata describing a message
        queue. One of these fields, QSIZE, as originally implemented,
        showed the total number of bytes of user data in all messages in
        the message queue, and this feature was documented from the
        beginning in the mq_overview(7) page. In 3.5, some other (useful)
        work happened to break the user-space API in a couple of places,
        including the value exposed via QSIZE, which now includes a measure
        of kernel overhead bytes for the queue, a figure that renders QSIZE
        useless for its original purpose, since there's no way to deduce
        the number of overhead bytes consumed by the implementation.
        (The other user-space breakage was subsequently fixed.)
    
    This patch removes the accounting of kernel data structures in the
    queue.  Reporting the size of these data-structures in the QSIZE field
    was a breaking change (see Michael's comment above).  Without the QSIZE
    field reporting the total size of user-data in the queue, there is no
    way to deduce this number.
    
    It should be noted that the resource limit RLIMIT_MSGQUEUE is counted
    against the worst-case size of the queue (in both the old and the new
    implementation).  Therefore, the kernel overhead accounting in QSIZE is
    not necessary to help the user understand the limitations RLIMIT imposes
    on the processes.
    
    Signed-off-by: Marcus Gelderie <redmnic@gmail.com>
    Acked-by: Doug Ledford <dledford@redhat.com>
    Acked-by: Michael Kerrisk <mtk.manpages@gmail.com>
    Acked-by: Davidlohr Bueso <dbueso@suse.de>
    Cc: David Howells <dhowells@redhat.com>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: John Duffy <jb_duffy@btinternet.com>
    Cc: Arto Bendiken <arto@bendiken.net>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2934eb36cf564b6e368d8b43eb48384b308e04e7
Author: Marcus Gelderie <redmnic@gmail.com>
Date:   Thu Aug 6 15:46:10 2015 -0700

    ipc: modify message queue accounting to not take kernel data structures into account
    
    commit de54b9ac253787c366bbfb28d901a31954eb3511 upstream.
    
    A while back, the message queue implementation in the kernel was
    improved to use btrees to speed up retrieval of messages, in commit
    d6629859b36d ("ipc/mqueue: improve performance of send/recv").
    
    That patch introducing the improved kernel handling of message queues
    (using btrees) has, as a by-product, changed the meaning of the QSIZE
    field in the pseudo-file created for the queue.  Before, this field
    reflected the size of the user-data in the queue.  Since, it also takes
    kernel data structures into account.  For example, if 13 bytes of user
    data are in the queue, on my machine the file reports a size of 61
    bytes.
    
    There was some discussion on this topic before (for example
    https://lkml.org/lkml/2014/10/1/115).  Commenting on a th lkml, Michael
    Kerrisk gave the following background
    (https://lkml.org/lkml/2015/6/16/74):
    
        The pseudofiles in the mqueue filesystem (usually mounted at
        /dev/mqueue) expose fields with metadata describing a message
        queue. One of these fields, QSIZE, as originally implemented,
        showed the total number of bytes of user data in all messages in
        the message queue, and this feature was documented from the
        beginning in the mq_overview(7) page. In 3.5, some other (useful)
        work happened to break the user-space API in a couple of places,
        including the value exposed via QSIZE, which now includes a measure
        of kernel overhead bytes for the queue, a figure that renders QSIZE
        useless for its original purpose, since there's no way to deduce
        the number of overhead bytes consumed by the implementation.
        (The other user-space breakage was subsequently fixed.)
    
    This patch removes the accounting of kernel data structures in the
    queue.  Reporting the size of these data-structures in the QSIZE field
    was a breaking change (see Michael's comment above).  Without the QSIZE
    field reporting the total size of user-data in the queue, there is no
    way to deduce this number.
    
    It should be noted that the resource limit RLIMIT_MSGQUEUE is counted
    against the worst-case size of the queue (in both the old and the new
    implementation).  Therefore, the kernel overhead accounting in QSIZE is
    not necessary to help the user understand the limitations RLIMIT imposes
    on the processes.
    
    Signed-off-by: Marcus Gelderie <redmnic@gmail.com>
    Acked-by: Doug Ledford <dledford@redhat.com>
    Acked-by: Michael Kerrisk <mtk.manpages@gmail.com>
    Acked-by: Davidlohr Bueso <dbueso@suse.de>
    Cc: David Howells <dhowells@redhat.com>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: John Duffy <jb_duffy@btinternet.com>
    Cc: Arto Bendiken <arto@bendiken.net>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit de54b9ac253787c366bbfb28d901a31954eb3511
Author: Marcus Gelderie <redmnic@gmail.com>
Date:   Thu Aug 6 15:46:10 2015 -0700

    ipc: modify message queue accounting to not take kernel data structures into account
    
    A while back, the message queue implementation in the kernel was
    improved to use btrees to speed up retrieval of messages, in commit
    d6629859b36d ("ipc/mqueue: improve performance of send/recv").
    
    That patch introducing the improved kernel handling of message queues
    (using btrees) has, as a by-product, changed the meaning of the QSIZE
    field in the pseudo-file created for the queue.  Before, this field
    reflected the size of the user-data in the queue.  Since, it also takes
    kernel data structures into account.  For example, if 13 bytes of user
    data are in the queue, on my machine the file reports a size of 61
    bytes.
    
    There was some discussion on this topic before (for example
    https://lkml.org/lkml/2014/10/1/115).  Commenting on a th lkml, Michael
    Kerrisk gave the following background
    (https://lkml.org/lkml/2015/6/16/74):
    
        The pseudofiles in the mqueue filesystem (usually mounted at
        /dev/mqueue) expose fields with metadata describing a message
        queue. One of these fields, QSIZE, as originally implemented,
        showed the total number of bytes of user data in all messages in
        the message queue, and this feature was documented from the
        beginning in the mq_overview(7) page. In 3.5, some other (useful)
        work happened to break the user-space API in a couple of places,
        including the value exposed via QSIZE, which now includes a measure
        of kernel overhead bytes for the queue, a figure that renders QSIZE
        useless for its original purpose, since there's no way to deduce
        the number of overhead bytes consumed by the implementation.
        (The other user-space breakage was subsequently fixed.)
    
    This patch removes the accounting of kernel data structures in the
    queue.  Reporting the size of these data-structures in the QSIZE field
    was a breaking change (see Michael's comment above).  Without the QSIZE
    field reporting the total size of user-data in the queue, there is no
    way to deduce this number.
    
    It should be noted that the resource limit RLIMIT_MSGQUEUE is counted
    against the worst-case size of the queue (in both the old and the new
    implementation).  Therefore, the kernel overhead accounting in QSIZE is
    not necessary to help the user understand the limitations RLIMIT imposes
    on the processes.
    
    Signed-off-by: Marcus Gelderie <redmnic@gmail.com>
    Acked-by: Doug Ledford <dledford@redhat.com>
    Acked-by: Michael Kerrisk <mtk.manpages@gmail.com>
    Acked-by: Davidlohr Bueso <dbueso@suse.de>
    Cc: David Howells <dhowells@redhat.com>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: John Duffy <jb_duffy@btinternet.com>
    Cc: Arto Bendiken <arto@bendiken.net>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 23b7776290b10297fe2cae0fb5f166a4f2c68121
Merge: 6bc4c3ad3619 6fab54101923
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jun 22 15:52:04 2015 -0700

    Merge branch 'sched-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull scheduler updates from Ingo Molnar:
     "The main changes are:
    
       - lockless wakeup support for futexes and IPC message queues
         (Davidlohr Bueso, Peter Zijlstra)
    
       - Replace spinlocks with atomics in thread_group_cputimer(), to
         improve scalability (Jason Low)
    
       - NUMA balancing improvements (Rik van Riel)
    
       - SCHED_DEADLINE improvements (Wanpeng Li)
    
       - clean up and reorganize preemption helpers (Frederic Weisbecker)
    
       - decouple page fault disabling machinery from the preemption
         counter, to improve debuggability and robustness (David
         Hildenbrand)
    
       - SCHED_DEADLINE documentation updates (Luca Abeni)
    
       - topology CPU masks cleanups (Bartosz Golaszewski)
    
       - /proc/sched_debug improvements (Srikar Dronamraju)"
    
    * 'sched-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (79 commits)
      sched/deadline: Remove needless parameter in dl_runtime_exceeded()
      sched: Remove superfluous resetting of the p->dl_throttled flag
      sched/deadline: Drop duplicate init_sched_dl_class() declaration
      sched/deadline: Reduce rq lock contention by eliminating locking of non-feasible target
      sched/deadline: Make init_sched_dl_class() __init
      sched/deadline: Optimize pull_dl_task()
      sched/preempt: Add static_key() to preempt_notifiers
      sched/preempt: Fix preempt notifiers documentation about hlist_del() within unsafe iteration
      sched/stop_machine: Fix deadlock between multiple stop_two_cpus()
      sched/debug: Add sum_sleep_runtime to /proc/<pid>/sched
      sched/debug: Replace vruntime with wait_sum in /proc/sched_debug
      sched/debug: Properly format runnable tasks in /proc/sched_debug
      sched/numa: Only consider less busy nodes as numa balancing destinations
      Revert 095bebf61a46 ("sched/numa: Do not move past the balance point if unbalanced")
      sched/fair: Prevent throttling in early pick_next_task_fair()
      preempt: Reorganize the notrace definitions a bit
      preempt: Use preempt_schedule_context() as the official tracing preemption point
      sched: Make preempt_schedule_context() function-tracing safe
      x86: Remove cpu_sibling_mask() and cpu_core_mask()
      x86: Replace cpu_**_mask() with topology_**_cpumask()
      ...

commit 2ed3dc1d3ca0fcbf94ad087187e3d34e337ecf4d
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Jun 1 21:06:36 2015 +0200

    staging: wilc1000: simplify msgqueue code
    
    The driver contains an abstraction for message queues, with
    optional unused features, while the driver requires the main
    feature.
    
    This makes the msgqueue code unconditional as it's required
    but removes the unused parts.
    
    A later cleanup should remove the entire msgqueue code
    and replace it with some normal kernel API.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8696938ae072a8d2c5809ab6ca1ac251c23e53fb
Merge: 7c9049dd4768 072ac04d31b1
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Mar 24 16:58:29 2015 -0700

    Merge tag 'spi-v4.0-rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/broonie/spi
    
    Pull spi fixes from Mark Brown:
     "A couple of driver specific fixes of the usual "important if you have
      that device" kind together with a fix for a use after free bug that
      was introduced into the trace code in some of the recent refactoring
      of the message queue handling"
    
    * tag 'spi-v4.0-rc5' of git://git.kernel.org/pub/scm/linux/kernel/git/broonie/spi:
      spi: trigger trace event for message-done before mesg->complete
      spi: dw-mid: clear BUSY flag fist and test other one
      spi: qup: Fix cs-num DT property parsing

commit 708ac32cb5e1305cf3670e147eedcc699d110ed0
Author: Jon Paul Maloy <jon.maloy@ericsson.com>
Date:   Thu Feb 5 08:36:42 2015 -0500

    tipc: simplify connection abort notifications when links break
    
    The new input message queue in struct tipc_link can be used for
    delivering connection abort messages to subscribing sockets. This
    makes it possible to simplify the code for such cases.
    
    This commit removes the temporary list in tipc_node_unlock()
    used for transforming abort subscriptions to messages. Instead, the
    abort messages are now created at the moment of lost contact, and
    then added to the last failed link's generic input queue for delivery
    to the sockets concerned.
    
    Reviewed-by: Ying Xue <ying.xue@windriver.com>
    Signed-off-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit eea0cf3fcd3243666e0bb792c560ec128b1f06a1
Merge: 823e334ecd24 95c97b594154
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Dec 12 14:49:56 2014 -0800

    Merge tag 'for-linus' of git://git.code.sf.net/p/openipmi/linux-ipmi
    
    Pull IPMI driver updates from Corey Minyard:
      - Quite a few bug fixes
      - A new driver for the powernv
      - A new driver for the SMBus interface from the IPMI 2.0 specification
    
    * tag 'for-linus' of git://git.code.sf.net/p/openipmi/linux-ipmi:
      ipmi: Check the BT interrupt enable periodically
      ipmi: Fix attention handling for system interfaces
      ipmi: Periodically check to see if irqs and messages are set right
      drivers/char/ipmi: Add powernv IPMI driver
      ipmi: Add SMBus interface driver (SSIF)
      ipmi: Remove the now unused priority from SMI sender
      ipmi: Remove the now unnecessary message queue
      ipmi: Make the message handler easier to use for SMI interfaces
      ipmi: Move message sending into its own function
      ipmi: rename waiting_msgs to waiting_rcv_msgs
      ipmi: Fix handling of BMC flags
      ipmi: Initialize BMC device attributes
      ipmi: Unregister previously registered driver in error case
      ipmi: Use the proper type for acpi_handle
      ipmi: Fix a bug in hot add/remove
      ipmi: Remove useless sysfs_name parameters
      ipmi: clean up the device handling for the bmc device
      ipmi: Move the address source to string to ipmi-generic code
      ipmi: Ignore SSIF in the PNP handling

commit b874b985c816c74a9bda04082f18db88dcbc808a
Author: Corey Minyard <cminyard@mvista.com>
Date:   Thu Nov 6 17:01:59 2014 -0600

    ipmi: Remove the now unnecessary message queue
    
    A message queue was added to the message handler, so the SMI
    interfaces only need to handle one message at a time.  Pull out
    the message queue.  This also leads to some significant
    simplification in the shutdown of an interface, since the
    message handler now does a lot of the cleanup.
    
    Signed-off-by: Corey Minyard <cminyard@mvista.com>

commit 65be754453a3625487670b086b1f9a662f28c610
Author: Corey Minyard <cminyard@mvista.com>
Date:   Thu Nov 6 20:48:02 2014 -0600

    ipmi: rename waiting_msgs to waiting_rcv_msgs
    
    To avoid confusion with the coming transmit message queue.
    
    Signed-off-by: Corey Minyard <cminyard@mvista.com>

commit 8b7f8a99906fc21c287ad63ad3a89cf662b0293e
Merge: 73cf0e923d68 a6ca10944384
Author: David S. Miller <davem@davemloft.net>
Date:   Wed Nov 26 12:30:23 2014 -0500

    Merge branch 'tipc-next'
    
    Ying Xue says:
    
    ====================
    standardize TIPC SKB queue operations
    
    Now the following SKB queues are created and maintained within internal
    TIPC stack:
    
    - link transmission queue
    - link deferred queue
    - link receive queue
    - socket outgoing packet chain
    - name table outgoing packet chain
    
    In order to manage above queues, TIPC stack declares a sk_buff pointer
    for each queue to record its head, and directly modifies "prev" and
    "next" SKB pointers of SKB structure when inserting or deleting a SKB
    to or from the queue. As these operations are pretty complex, they
    easily involve fatal mistakes. If these sk_buff pointers are replaced
    with sk_buff_head instances as queue heads and corresponding generic
    SKB list APIs are used to manage them, the entire TIPC code would
    become quite clean and readable. But before make the change, we need
    to clean up below redundant functionalities:
    
    - remove node subscribe infrastructure
    - remove protocol message queue
    - remove retransmission queue
    - clean up process of pushing packets in link layer
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 47b4c9a82f2ed0c00aa1c20899b41f54d6f8a07a
Author: Ying Xue <ying.xue@windriver.com>
Date:   Wed Nov 26 11:41:48 2014 +0800

    tipc: clean up the process of link pushing packets
    
    In original tipc_link_push_packet(), it pushes messages from protocol
    message queue, retransmission queue and next_out queue. But as the two
    first queues are removed, we can simplify its relevant code through
    deleting tipc_link_push_queue().
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8965d250c28f588d2a6dca2a0b00e4bb895b58e0
Author: Ying Xue <ying.xue@windriver.com>
Date:   Wed Nov 26 11:41:46 2014 +0800

    tipc: remove protocol message queue
    
    TIPC protocol message queue is intended to save one protocol message
    when bearer is congested so that the message stored in the queue can
    be immediately transmitted when bearer congestion is released. However,
    as now the protocol queue has no mission any more with the removal of
    bearer congestion mechanism, it should be removed.
    
    Signed-off-by: Ying Xue <ying.xue@windriver.com>
    Reviewed-by: Jon Maloy <jon.maloy@ericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b48b9488e3180b173f37782a348b76ea6bff2c48
Author: Lars-Peter Clausen <lars@metafoo.de>
Date:   Thu Jul 10 11:26:29 2014 +0200

    spi: cadence: Configure SPI clock in the prepare_message() callback
    
    Currently the cadence SPI driver does the SPI clock configuration (setup CPOL
    and CPHA) in the prepare_transfer_hardware() callback. The
    prepare_transfer_hardware() callback is only called though when the controller
    transitions from a idle state to a non-idle state. Such a transitions happens
    when the message queue goes from empty to non-empty. If multiple messages from
    different SPI slaves with different clock settings are in the message queue the
    clock settings will not be properly updated when switching from one slave device
    to another. Instead do the updating of the clock configuration in the
    prepare_message() callback which will be called for each individual message.
    
    Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
    Signed-off-by: Mark Brown <broonie@linaro.org>

commit 10e03a431b2dd84b2cd671ddc402bf1a18a33906
Author: samix.lebsir <samix.lebsir@intel.com>
Date:   Mon Aug 13 13:44:22 2012 +0100

    char: n_gsm: remove message filtering for contipated DLCI
    
    commit 10c6c383e43565c9c6ec07ff8eb2825f8091bdf0 upstream.
    
    The design of uplink flow control in the mux driver is
    that for constipated channels data will backup into the
    per-channel fifos, and any messages that make it to the
    outbound message queue will still go out.
    Code was added to also stop messages that were in the outbound
    queue but this requires filtering through all the messages on the
    queue for stopped dlcis and changes some of the mux logic unneccessarily.
    
    The message fiiltering was removed to be in line w/ the original design
    as the message filtering does not provide any solution.
    Extra debug messages used during investigation were also removed.
    
    Signed-off-by: samix.lebsir <samix.lebsir@intel.com>
    Signed-off-by: Alan Cox <alan@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Cc: Rui Xiang <rui.xiang@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4abc1815f205b6d48c7ba628359fac64392ff45c
Author: Michael Kerrisk <mtk.manpages@gmail.com>
Date:   Mon Mar 10 14:46:07 2014 +0100

    ipc: Fix 2 bugs in msgrcv() MSG_COPY implementation
    
    commit 4f87dac386cc43d5525da7a939d4b4e7edbea22c upstream.
    
    While testing and documenting the msgrcv() MSG_COPY flag that Stanislav
    Kinsbursky added in commit 4a674f34ba04 ("ipc: introduce message queue
    copy feature" => kernel 3.8), I discovered a couple of bugs in the
    implementation.  The two bugs concern MSG_COPY interactions with other
    msgrcv() flags, namely:
    
     (A) MSG_COPY + MSG_EXCEPT
     (B) MSG_COPY + !IPC_NOWAIT
    
    The bugs are distinct (and the fix for the first one is obvious),
    however my fix for both is a single-line patch, which is why I'm
    combining them in a single mail, rather than writing two mails+patches.
    
     ===== (A) MSG_COPY + MSG_EXCEPT =====
    
    With the addition of the MSG_COPY flag, there are now two msgrcv()
    flags--MSG_COPY and MSG_EXCEPT--that modify the meaning of the 'msgtyp'
    argument in unrelated ways.  Specifying both in the same call is a
    logical error that is currently permitted, with the effect that MSG_COPY
    has priority and MSG_EXCEPT is ignored.  The call should give an error
    if both flags are specified.  The patch below implements that behavior.
    
     ===== (B) (B) MSG_COPY + !IPC_NOWAIT =====
    
    The test code that was submitted in commit 3a665531a3b7 ("selftests: IPC
    message queue copy feature test") shows MSG_COPY being used in
    conjunction with IPC_NOWAIT.  In other words, if there is no message at
    the position 'msgtyp'.  return immediately with the error in ENOMSG.
    
    What was not (fully) tested is the behavior if MSG_COPY is specified
    *without* IPC_NOWAIT, and there is an odd behavior.  If the queue
    contains less than 'msgtyp' messages, then the call blocks until the
    next message is written to the queue.  At that point, the msgrcv() call
    returns a copy of the newly added message, regardless of whether that
    message is at the ordinal position 'msgtyp'.  This is clearly bogus, and
    problematic for applications that might want to make use of the MSG_COPY
    flag.
    
    I considered the following possible solutions to this problem:
    
     (1) Force the call to block until a message *does* appear at the
         position 'msgtyp'.
    
     (2) If the MSG_COPY flag is specified, the kernel should implicitly add
         IPC_NOWAIT, so that the call fails with ENOMSG for this case.
    
     (3) If the MSG_COPY flag is specified, but IPC_NOWAIT is not, generate
         an error (probably, EINVAL is the right one).
    
    I do not know if any application would really want to have the
    functionality of solution (1), especially since an application can
    determine in advance the number of messages in the queue using msgctl()
    IPC_STAT.  Obviously, this solution would be the most work to implement.
    
    Solution (2) would have the effect of silently fixing any applications
    that tried to employ broken behavior.  However, it would mean that if we
    later decided to implement solution (1), then user-space could not
    easily detect what the kernel supports (but, since I'm somewhat doubtful
    that solution (1) is needed, I'm not sure that this is much of a
    problem).
    
    Solution (3) would have the effect of informing broken applications that
    they are doing something broken.  The downside is that this would cause
    a ABI breakage for any applications that are currently employing the
    broken behavior.  However:
    
    a) Those applications are almost certainly not getting the results they
       expect.
    b) Possibly, those applications don't even exist, because MSG_COPY is
       currently hidden behind CONFIG_CHECKPOINT_RESTORE.
    
    The upside of solution (3) is that if we later decided to implement
    solution (1), user-space could determine what the kernel supports, via
    the error return.
    
    In my view, solution (3) is mildly preferable to solution (2), and
    solution (1) could still be done later if anyone really cares.  The
    patch below implements solution (3).
    
    PS.  For anyone out there still listening, it's the usual story:
    documenting an API (and the thinking about, and the testing of the API,
    that documentation entails) is the one of the single best ways of
    finding bugs in the API, as I've learned from a lot of experience.  Best
    to do that documentation before releasing the API.
    
    Signed-off-by: Michael Kerrisk <mtk.manpages@gmail.com>
    Acked-by: Stanislav Kinsbursky <skinsbursky@parallels.com>
    Cc: Stanislav Kinsbursky <skinsbursky@parallels.com>
    Cc: Serge Hallyn <serge.hallyn@canonical.com>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Pavel Emelyanov <xemul@parallels.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 9fe28cdec6fecfd8c8b69f068dc20c3f8439d275
Author: Michael Kerrisk <mtk.manpages@gmail.com>
Date:   Mon Mar 10 14:46:07 2014 +0100

    ipc: Fix 2 bugs in msgrcv() MSG_COPY implementation
    
    commit 4f87dac386cc43d5525da7a939d4b4e7edbea22c upstream.
    
    While testing and documenting the msgrcv() MSG_COPY flag that Stanislav
    Kinsbursky added in commit 4a674f34ba04 ("ipc: introduce message queue
    copy feature" => kernel 3.8), I discovered a couple of bugs in the
    implementation.  The two bugs concern MSG_COPY interactions with other
    msgrcv() flags, namely:
    
     (A) MSG_COPY + MSG_EXCEPT
     (B) MSG_COPY + !IPC_NOWAIT
    
    The bugs are distinct (and the fix for the first one is obvious),
    however my fix for both is a single-line patch, which is why I'm
    combining them in a single mail, rather than writing two mails+patches.
    
     ===== (A) MSG_COPY + MSG_EXCEPT =====
    
    With the addition of the MSG_COPY flag, there are now two msgrcv()
    flags--MSG_COPY and MSG_EXCEPT--that modify the meaning of the 'msgtyp'
    argument in unrelated ways.  Specifying both in the same call is a
    logical error that is currently permitted, with the effect that MSG_COPY
    has priority and MSG_EXCEPT is ignored.  The call should give an error
    if both flags are specified.  The patch below implements that behavior.
    
     ===== (B) (B) MSG_COPY + !IPC_NOWAIT =====
    
    The test code that was submitted in commit 3a665531a3b7 ("selftests: IPC
    message queue copy feature test") shows MSG_COPY being used in
    conjunction with IPC_NOWAIT.  In other words, if there is no message at
    the position 'msgtyp'.  return immediately with the error in ENOMSG.
    
    What was not (fully) tested is the behavior if MSG_COPY is specified
    *without* IPC_NOWAIT, and there is an odd behavior.  If the queue
    contains less than 'msgtyp' messages, then the call blocks until the
    next message is written to the queue.  At that point, the msgrcv() call
    returns a copy of the newly added message, regardless of whether that
    message is at the ordinal position 'msgtyp'.  This is clearly bogus, and
    problematic for applications that might want to make use of the MSG_COPY
    flag.
    
    I considered the following possible solutions to this problem:
    
     (1) Force the call to block until a message *does* appear at the
         position 'msgtyp'.
    
     (2) If the MSG_COPY flag is specified, the kernel should implicitly add
         IPC_NOWAIT, so that the call fails with ENOMSG for this case.
    
     (3) If the MSG_COPY flag is specified, but IPC_NOWAIT is not, generate
         an error (probably, EINVAL is the right one).
    
    I do not know if any application would really want to have the
    functionality of solution (1), especially since an application can
    determine in advance the number of messages in the queue using msgctl()
    IPC_STAT.  Obviously, this solution would be the most work to implement.
    
    Solution (2) would have the effect of silently fixing any applications
    that tried to employ broken behavior.  However, it would mean that if we
    later decided to implement solution (1), then user-space could not
    easily detect what the kernel supports (but, since I'm somewhat doubtful
    that solution (1) is needed, I'm not sure that this is much of a
    problem).
    
    Solution (3) would have the effect of informing broken applications that
    they are doing something broken.  The downside is that this would cause
    a ABI breakage for any applications that are currently employing the
    broken behavior.  However:
    
    a) Those applications are almost certainly not getting the results they
       expect.
    b) Possibly, those applications don't even exist, because MSG_COPY is
       currently hidden behind CONFIG_CHECKPOINT_RESTORE.
    
    The upside of solution (3) is that if we later decided to implement
    solution (1), user-space could determine what the kernel supports, via
    the error return.
    
    In my view, solution (3) is mildly preferable to solution (2), and
    solution (1) could still be done later if anyone really cares.  The
    patch below implements solution (3).
    
    PS.  For anyone out there still listening, it's the usual story:
    documenting an API (and the thinking about, and the testing of the API,
    that documentation entails) is the one of the single best ways of
    finding bugs in the API, as I've learned from a lot of experience.  Best
    to do that documentation before releasing the API.
    
    Signed-off-by: Michael Kerrisk <mtk.manpages@gmail.com>
    Acked-by: Stanislav Kinsbursky <skinsbursky@parallels.com>
    Cc: Stanislav Kinsbursky <skinsbursky@parallels.com>
    Cc: Serge Hallyn <serge.hallyn@canonical.com>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Pavel Emelyanov <xemul@parallels.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0f8141267dce8a719b294b6fcade653eaae7aa54
Author: Michael Kerrisk <mtk.manpages@gmail.com>
Date:   Mon Mar 10 14:46:07 2014 +0100

    ipc: Fix 2 bugs in msgrcv() MSG_COPY implementation
    
    commit 4f87dac386cc43d5525da7a939d4b4e7edbea22c upstream.
    
    While testing and documenting the msgrcv() MSG_COPY flag that Stanislav
    Kinsbursky added in commit 4a674f34ba04 ("ipc: introduce message queue
    copy feature" => kernel 3.8), I discovered a couple of bugs in the
    implementation.  The two bugs concern MSG_COPY interactions with other
    msgrcv() flags, namely:
    
     (A) MSG_COPY + MSG_EXCEPT
     (B) MSG_COPY + !IPC_NOWAIT
    
    The bugs are distinct (and the fix for the first one is obvious),
    however my fix for both is a single-line patch, which is why I'm
    combining them in a single mail, rather than writing two mails+patches.
    
     ===== (A) MSG_COPY + MSG_EXCEPT =====
    
    With the addition of the MSG_COPY flag, there are now two msgrcv()
    flags--MSG_COPY and MSG_EXCEPT--that modify the meaning of the 'msgtyp'
    argument in unrelated ways.  Specifying both in the same call is a
    logical error that is currently permitted, with the effect that MSG_COPY
    has priority and MSG_EXCEPT is ignored.  The call should give an error
    if both flags are specified.  The patch below implements that behavior.
    
     ===== (B) (B) MSG_COPY + !IPC_NOWAIT =====
    
    The test code that was submitted in commit 3a665531a3b7 ("selftests: IPC
    message queue copy feature test") shows MSG_COPY being used in
    conjunction with IPC_NOWAIT.  In other words, if there is no message at
    the position 'msgtyp'.  return immediately with the error in ENOMSG.
    
    What was not (fully) tested is the behavior if MSG_COPY is specified
    *without* IPC_NOWAIT, and there is an odd behavior.  If the queue
    contains less than 'msgtyp' messages, then the call blocks until the
    next message is written to the queue.  At that point, the msgrcv() call
    returns a copy of the newly added message, regardless of whether that
    message is at the ordinal position 'msgtyp'.  This is clearly bogus, and
    problematic for applications that might want to make use of the MSG_COPY
    flag.
    
    I considered the following possible solutions to this problem:
    
     (1) Force the call to block until a message *does* appear at the
         position 'msgtyp'.
    
     (2) If the MSG_COPY flag is specified, the kernel should implicitly add
         IPC_NOWAIT, so that the call fails with ENOMSG for this case.
    
     (3) If the MSG_COPY flag is specified, but IPC_NOWAIT is not, generate
         an error (probably, EINVAL is the right one).
    
    I do not know if any application would really want to have the
    functionality of solution (1), especially since an application can
    determine in advance the number of messages in the queue using msgctl()
    IPC_STAT.  Obviously, this solution would be the most work to implement.
    
    Solution (2) would have the effect of silently fixing any applications
    that tried to employ broken behavior.  However, it would mean that if we
    later decided to implement solution (1), then user-space could not
    easily detect what the kernel supports (but, since I'm somewhat doubtful
    that solution (1) is needed, I'm not sure that this is much of a
    problem).
    
    Solution (3) would have the effect of informing broken applications that
    they are doing something broken.  The downside is that this would cause
    a ABI breakage for any applications that are currently employing the
    broken behavior.  However:
    
    a) Those applications are almost certainly not getting the results they
       expect.
    b) Possibly, those applications don't even exist, because MSG_COPY is
       currently hidden behind CONFIG_CHECKPOINT_RESTORE.
    
    The upside of solution (3) is that if we later decided to implement
    solution (1), user-space could determine what the kernel supports, via
    the error return.
    
    In my view, solution (3) is mildly preferable to solution (2), and
    solution (1) could still be done later if anyone really cares.  The
    patch below implements solution (3).
    
    PS.  For anyone out there still listening, it's the usual story:
    documenting an API (and the thinking about, and the testing of the API,
    that documentation entails) is the one of the single best ways of
    finding bugs in the API, as I've learned from a lot of experience.  Best
    to do that documentation before releasing the API.
    
    Signed-off-by: Michael Kerrisk <mtk.manpages@gmail.com>
    Acked-by: Stanislav Kinsbursky <skinsbursky@parallels.com>
    Cc: Stanislav Kinsbursky <skinsbursky@parallels.com>
    Cc: Serge Hallyn <serge.hallyn@canonical.com>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Pavel Emelyanov <xemul@parallels.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f87dac386cc43d5525da7a939d4b4e7edbea22c
Author: Michael Kerrisk <mtk.manpages@gmail.com>
Date:   Mon Mar 10 14:46:07 2014 +0100

    ipc: Fix 2 bugs in msgrcv() MSG_COPY implementation
    
    While testing and documenting the msgrcv() MSG_COPY flag that Stanislav
    Kinsbursky added in commit 4a674f34ba04 ("ipc: introduce message queue
    copy feature" => kernel 3.8), I discovered a couple of bugs in the
    implementation.  The two bugs concern MSG_COPY interactions with other
    msgrcv() flags, namely:
    
     (A) MSG_COPY + MSG_EXCEPT
     (B) MSG_COPY + !IPC_NOWAIT
    
    The bugs are distinct (and the fix for the first one is obvious),
    however my fix for both is a single-line patch, which is why I'm
    combining them in a single mail, rather than writing two mails+patches.
    
     ===== (A) MSG_COPY + MSG_EXCEPT =====
    
    With the addition of the MSG_COPY flag, there are now two msgrcv()
    flags--MSG_COPY and MSG_EXCEPT--that modify the meaning of the 'msgtyp'
    argument in unrelated ways.  Specifying both in the same call is a
    logical error that is currently permitted, with the effect that MSG_COPY
    has priority and MSG_EXCEPT is ignored.  The call should give an error
    if both flags are specified.  The patch below implements that behavior.
    
     ===== (B) (B) MSG_COPY + !IPC_NOWAIT =====
    
    The test code that was submitted in commit 3a665531a3b7 ("selftests: IPC
    message queue copy feature test") shows MSG_COPY being used in
    conjunction with IPC_NOWAIT.  In other words, if there is no message at
    the position 'msgtyp'.  return immediately with the error in ENOMSG.
    
    What was not (fully) tested is the behavior if MSG_COPY is specified
    *without* IPC_NOWAIT, and there is an odd behavior.  If the queue
    contains less than 'msgtyp' messages, then the call blocks until the
    next message is written to the queue.  At that point, the msgrcv() call
    returns a copy of the newly added message, regardless of whether that
    message is at the ordinal position 'msgtyp'.  This is clearly bogus, and
    problematic for applications that might want to make use of the MSG_COPY
    flag.
    
    I considered the following possible solutions to this problem:
    
     (1) Force the call to block until a message *does* appear at the
         position 'msgtyp'.
    
     (2) If the MSG_COPY flag is specified, the kernel should implicitly add
         IPC_NOWAIT, so that the call fails with ENOMSG for this case.
    
     (3) If the MSG_COPY flag is specified, but IPC_NOWAIT is not, generate
         an error (probably, EINVAL is the right one).
    
    I do not know if any application would really want to have the
    functionality of solution (1), especially since an application can
    determine in advance the number of messages in the queue using msgctl()
    IPC_STAT.  Obviously, this solution would be the most work to implement.
    
    Solution (2) would have the effect of silently fixing any applications
    that tried to employ broken behavior.  However, it would mean that if we
    later decided to implement solution (1), then user-space could not
    easily detect what the kernel supports (but, since I'm somewhat doubtful
    that solution (1) is needed, I'm not sure that this is much of a
    problem).
    
    Solution (3) would have the effect of informing broken applications that
    they are doing something broken.  The downside is that this would cause
    a ABI breakage for any applications that are currently employing the
    broken behavior.  However:
    
    a) Those applications are almost certainly not getting the results they
       expect.
    b) Possibly, those applications don't even exist, because MSG_COPY is
       currently hidden behind CONFIG_CHECKPOINT_RESTORE.
    
    The upside of solution (3) is that if we later decided to implement
    solution (1), user-space could determine what the kernel supports, via
    the error return.
    
    In my view, solution (3) is mildly preferable to solution (2), and
    solution (1) could still be done later if anyone really cares.  The
    patch below implements solution (3).
    
    PS.  For anyone out there still listening, it's the usual story:
    documenting an API (and the thinking about, and the testing of the API,
    that documentation entails) is the one of the single best ways of
    finding bugs in the API, as I've learned from a lot of experience.  Best
    to do that documentation before releasing the API.
    
    Signed-off-by: Michael Kerrisk <mtk.manpages@gmail.com>
    Acked-by: Stanislav Kinsbursky <skinsbursky@parallels.com>
    Cc: Stanislav Kinsbursky <skinsbursky@parallels.com>
    Cc: stable@vger.kernel.org
    Cc: Serge Hallyn <serge.hallyn@canonical.com>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Pavel Emelyanov <xemul@parallels.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 26e8452e66ce0f5c86d70a7251de1392a62d8a2e
Author: Daniel Santos <daniel.santos@pobox.com>
Date:   Sun Jan 5 17:39:26 2014 -0600

    spidev: fix hang when transfer_one_message fails
    
    commit e120cc0dcf2880a4c5c0a6cb27b655600a1cfa1d upstream.
    
    This corrects a problem in spi_pump_messages() that leads to an spi
    message hanging forever when a call to transfer_one_message() fails.
    This failure occurs in my MCP2210 driver when the cs_change bit is set
    on the last transfer in a message, an operation which the hardware does
    not support.
    
    Rationale
    Since the transfer_one_message() returns an int, we must presume that it
    may fail.  If transfer_one_message() should never fail, it should return
    void.  Thus, calls to transfer_one_message() should properly manage a
    failure.
    
    Fixes: ffbbdd21329f3 (spi: create a message queueing infrastructure)
    Signed-off-by: Daniel Santos <daniel.santos@pobox.com>
    Signed-off-by: Mark Brown <broonie@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 24175707cb728921b5ad1cf1095d1600a07dda2e
Author: Daniel Santos <daniel.santos@pobox.com>
Date:   Sun Jan 5 17:39:26 2014 -0600

    spidev: fix hang when transfer_one_message fails
    
    commit e120cc0dcf2880a4c5c0a6cb27b655600a1cfa1d upstream.
    
    This corrects a problem in spi_pump_messages() that leads to an spi
    message hanging forever when a call to transfer_one_message() fails.
    This failure occurs in my MCP2210 driver when the cs_change bit is set
    on the last transfer in a message, an operation which the hardware does
    not support.
    
    Rationale
    Since the transfer_one_message() returns an int, we must presume that it
    may fail.  If transfer_one_message() should never fail, it should return
    void.  Thus, calls to transfer_one_message() should properly manage a
    failure.
    
    Fixes: ffbbdd21329f3 (spi: create a message queueing infrastructure)
    Signed-off-by: Daniel Santos <daniel.santos@pobox.com>
    Signed-off-by: Mark Brown <broonie@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4371c272186d393fbb401a743867a209f3e218ae
Author: Daniel Santos <daniel.santos@pobox.com>
Date:   Sun Jan 5 17:39:26 2014 -0600

    spidev: fix hang when transfer_one_message fails
    
    commit e120cc0dcf2880a4c5c0a6cb27b655600a1cfa1d upstream.
    
    This corrects a problem in spi_pump_messages() that leads to an spi
    message hanging forever when a call to transfer_one_message() fails.
    This failure occurs in my MCP2210 driver when the cs_change bit is set
    on the last transfer in a message, an operation which the hardware does
    not support.
    
    Rationale
    Since the transfer_one_message() returns an int, we must presume that it
    may fail.  If transfer_one_message() should never fail, it should return
    void.  Thus, calls to transfer_one_message() should properly manage a
    failure.
    
    Fixes: ffbbdd21329f3 (spi: create a message queueing infrastructure)
    Signed-off-by: Daniel Santos <daniel.santos@pobox.com>
    Signed-off-by: Mark Brown <broonie@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b939c238fdafd3b48e08547b929b1ab1ab37cf4
Author: Daniel Santos <daniel.santos@pobox.com>
Date:   Sun Jan 5 17:39:26 2014 -0600

    spidev: fix hang when transfer_one_message fails
    
    commit e120cc0dcf2880a4c5c0a6cb27b655600a1cfa1d upstream.
    
    This corrects a problem in spi_pump_messages() that leads to an spi
    message hanging forever when a call to transfer_one_message() fails.
    This failure occurs in my MCP2210 driver when the cs_change bit is set
    on the last transfer in a message, an operation which the hardware does
    not support.
    
    Rationale
    Since the transfer_one_message() returns an int, we must presume that it
    may fail.  If transfer_one_message() should never fail, it should return
    void.  Thus, calls to transfer_one_message() should properly manage a
    failure.
    
    Fixes: ffbbdd21329f3 (spi: create a message queueing infrastructure)
    Signed-off-by: Daniel Santos <daniel.santos@pobox.com>
    Signed-off-by: Mark Brown <broonie@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e120cc0dcf2880a4c5c0a6cb27b655600a1cfa1d
Author: Daniel Santos <daniel.santos@pobox.com>
Date:   Sun Jan 5 17:39:26 2014 -0600

    spidev: fix hang when transfer_one_message fails
    
    This corrects a problem in spi_pump_messages() that leads to an spi
    message hanging forever when a call to transfer_one_message() fails.
    This failure occurs in my MCP2210 driver when the cs_change bit is set
    on the last transfer in a message, an operation which the hardware does
    not support.
    
    Rationale
    Since the transfer_one_message() returns an int, we must presume that it
    may fail.  If transfer_one_message() should never fail, it should return
    void.  Thus, calls to transfer_one_message() should properly manage a
    failure.
    
    Fixes: ffbbdd21329f3 (spi: create a message queueing infrastructure)
    Signed-off-by: Daniel Santos <daniel.santos@pobox.com>
    Signed-off-by: Mark Brown <broonie@linaro.org>
    Cc: stable@vger.kernel.org

commit f8afd1fd31f4e263ee407f20f65b7afb8bef23b9
Author: Davidlohr Bueso <davidlohr.bueso@hp.com>
Date:   Wed Sep 11 14:26:15 2013 -0700

    ipc,shm: introduce lockless functions to obtain the ipc object
    
    commit 8b8d52ac382b17a19906b930cd69e2edb0aca8ba upstream.
    
    This is the third and final patchset that deals with reducing the amount
    of contention we impose on the ipc lock (kern_ipc_perm.lock).  These
    changes mostly deal with shared memory, previous work has already been
    done for semaphores and message queues:
    
      http://lkml.org/lkml/2013/3/20/546 (sems)
      http://lkml.org/lkml/2013/5/15/584 (mqueues)
    
    With these patches applied, a custom shm microbenchmark stressing shmctl
    doing IPC_STAT with 4 threads a million times, reduces the execution
    time by 50%.  A similar run, this time with IPC_SET, reduces the
    execution time from 3 mins and 35 secs to 27 seconds.
    
    Patches 1-8: replaces blindly taking the ipc lock for a smarter
    combination of rcu and ipc_obtain_object, only acquiring the spinlock
    when updating.
    
    Patch 9: renames the ids rw_mutex to rwsem, which is what it already was.
    
    Patch 10: is a trivial mqueue leftover cleanup
    
    Patch 11: adds a brief lock scheme description, requested by Andrew.
    
    This patch:
    
    Add shm_obtain_object() and shm_obtain_object_check(), which will allow us
    to get the ipc object without acquiring the lock.  Just as with other
    forms of ipc, these functions are basically wrappers around
    ipc_obtain_object*().
    
    Signed-off-by: Davidlohr Bueso <davidlohr.bueso@hp.com>
    Tested-by: Sedat Dilek <sedat.dilek@gmail.com>
    Cc: Rik van Riel <riel@redhat.com>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mike Galbraith <efault@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1b2ad167481aed32347ef7726d14bb2b9f63c4c9
Author: Davidlohr Bueso <davidlohr.bueso@hp.com>
Date:   Wed Sep 11 14:26:15 2013 -0700

    ipc,shm: introduce lockless functions to obtain the ipc object
    
    commit 8b8d52ac382b17a19906b930cd69e2edb0aca8ba upstream.
    
    This is the third and final patchset that deals with reducing the amount
    of contention we impose on the ipc lock (kern_ipc_perm.lock).  These
    changes mostly deal with shared memory, previous work has already been
    done for semaphores and message queues:
    
      http://lkml.org/lkml/2013/3/20/546 (sems)
      http://lkml.org/lkml/2013/5/15/584 (mqueues)
    
    With these patches applied, a custom shm microbenchmark stressing shmctl
    doing IPC_STAT with 4 threads a million times, reduces the execution
    time by 50%.  A similar run, this time with IPC_SET, reduces the
    execution time from 3 mins and 35 secs to 27 seconds.
    
    Patches 1-8: replaces blindly taking the ipc lock for a smarter
    combination of rcu and ipc_obtain_object, only acquiring the spinlock
    when updating.
    
    Patch 9: renames the ids rw_mutex to rwsem, which is what it already was.
    
    Patch 10: is a trivial mqueue leftover cleanup
    
    Patch 11: adds a brief lock scheme description, requested by Andrew.
    
    This patch:
    
    Add shm_obtain_object() and shm_obtain_object_check(), which will allow us
    to get the ipc object without acquiring the lock.  Just as with other
    forms of ipc, these functions are basically wrappers around
    ipc_obtain_object*().
    
    Signed-off-by: Davidlohr Bueso <davidlohr.bueso@hp.com>
    Tested-by: Sedat Dilek <sedat.dilek@gmail.com>
    Cc: Rik van Riel <riel@redhat.com>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mike Galbraith <efault@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b8d52ac382b17a19906b930cd69e2edb0aca8ba
Author: Davidlohr Bueso <davidlohr.bueso@hp.com>
Date:   Wed Sep 11 14:26:15 2013 -0700

    ipc,shm: introduce lockless functions to obtain the ipc object
    
    This is the third and final patchset that deals with reducing the amount
    of contention we impose on the ipc lock (kern_ipc_perm.lock).  These
    changes mostly deal with shared memory, previous work has already been
    done for semaphores and message queues:
    
      http://lkml.org/lkml/2013/3/20/546 (sems)
      http://lkml.org/lkml/2013/5/15/584 (mqueues)
    
    With these patches applied, a custom shm microbenchmark stressing shmctl
    doing IPC_STAT with 4 threads a million times, reduces the execution
    time by 50%.  A similar run, this time with IPC_SET, reduces the
    execution time from 3 mins and 35 secs to 27 seconds.
    
    Patches 1-8: replaces blindly taking the ipc lock for a smarter
    combination of rcu and ipc_obtain_object, only acquiring the spinlock
    when updating.
    
    Patch 9: renames the ids rw_mutex to rwsem, which is what it already was.
    
    Patch 10: is a trivial mqueue leftover cleanup
    
    Patch 11: adds a brief lock scheme description, requested by Andrew.
    
    This patch:
    
    Add shm_obtain_object() and shm_obtain_object_check(), which will allow us
    to get the ipc object without acquiring the lock.  Just as with other
    forms of ipc, these functions are basically wrappers around
    ipc_obtain_object*().
    
    Signed-off-by: Davidlohr Bueso <davidlohr.bueso@hp.com>
    Tested-by: Sedat Dilek <sedat.dilek@gmail.com>
    Cc: Rik van Riel <riel@redhat.com>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 900bfe33b6d46058c4dd64d4bff7f287baf2a34e
Author: Mark Brown <broonie@linaro.org>
Date:   Fri Jul 5 18:53:22 2013 +0100

    spi/s3c64xx: Remove unused message queue
    
    Since the driver has been converted to use the core message pump code
    the only use of the messsage queue in the driver is a check to see if
    it is empty which will always succeed since nothing ever adds to the
    queue. Just remove the queue.
    
    Signed-off-by: Mark Brown <broonie@linaro.org>
    Acked-by: Kukjin Kim <kgene.kim@samsung.com>

commit 84ddb3c1df021c69a40af30e3e30cc7429a5d659
Author: H Hartley Sweeten <hartleys@visionengravers.com>
Date:   Mon Jul 8 09:12:37 2013 -0700

    spi: spi-ep93xx: convert to the queued driver infrastructure
    
    The SPI core provides infrastructure for standard message queueing. Use
    that instead of handling it in the driver.
    
    Signed-off-by: H Hartley Sweeten <hsweeten@visionengravers.com>
    Acked-by: Mika Westerberg <mika.westerberg@iki.fi>
    Signed-off-by: Mark Brown <broonie@linaro.org>

commit da60b85506861b71db345f93bae72cbd8b51dcdd
Author: Mark Brown <broonie@linaro.org>
Date:   Wed Jul 10 15:52:11 2013 +0100

    spi/omap-100k: Convert to use core message queue implementation
    
    Saves some code duplication and gets us the benefits of any improvements
    in the core code.
    
    Signed-off-by: Mark Brown <broonie@linaro.org>

commit 750b2d7b93f2ba19f4f238cc641bda22fe07c155
Merge: 3dbde57ad941 ed893559c979
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Jul 3 11:51:05 2013 -0700

    Merge tag 'spi-v3.11' of git://git.kernel.org/pub/scm/linux/kernel/git/broonie/spi
    
    Pull spi updates from Mark Brown:
     "A fairly quiet release for the SPI subsystem, the standout changes
      being:
    
       - Core support for implementing bits per word constraints implemented
         by Stephen Warren, factoring some code out of drivers.
    
       - Addition of polling mode support for the s3c64xx driver as some
         newer Exynos systems have taken the unusual step of removing
         interrupt support.
    
       - Use of the in-IP FIFO and generic dmaengine support for the OMAP2
         driver, providing improved performance.
    
       - Conversion of the mpc512x driver to use the core message queue
         infrastructure.
    
      The nicest thing being that all the factoring out into common code
      leads to a negative diffstat overall."
    
    * tag 'spi-v3.11' of git://git.kernel.org/pub/scm/linux/kernel/git/broonie/spi: (42 commits)
      spi/s3c64xx: Rely on the compiler eliminating the OF ID table
      spi: s3c64xx: Added support for exynos5440 spi
      spi: s3c64xx: Added provision for dedicated cs pin
      spi: omap2-mcspi: add generic DMA request support to the DT binding
      spi: omap2-mcspi: convert to dma_request_slave_channel_compat()
      spi/s3c64xx: Make wait_for_timeout() function name less generic
      spi: s3c64xx: added support for polling mode
      spi: omap2-mcspi: Add FIFO buffer support
      spi: omap2-mcspi: Move bytes per word calculation to the function
      spi: spi-xilinx: cleanup a check in xilinx_spi_txrx_bufs()
      spi: spi-nuc900: Remove redundant platform_set_drvdata()
      spi: spi-fsl-lib: Make mpc8xxx_spi_work static
      spi: spi-topcliff-pch: Fix sparse warnings
      spi: spi-xilinx: Remove redundant platform_set_drvdata()
      spi: spi-xilinx: Add run run-time endian detection
      spi: mpc512x: use the SPI subsystem's message queue
      spi: mpc512x: improve throughput in the RX/TX func
      spi: mpc512x: minor prep before feature change
      spi: atmel: convert to dma_request_slave_channel_compat()
      spi: sirf: avoid uninitialized-use warning
      ...

commit 85085898ab0fefc6e181d3b495dc34034dda2fee
Author: Gerhard Sittig <gsi@denx.de>
Date:   Mon Jun 3 14:03:51 2013 +0200

    spi: mpc512x: use the SPI subsystem's message queue
    
    the SPI subsystem recently grew support to queue messages before handing
    them to the SPI master, and erroneously emitted deprecation warnings
    when the SPI master's driver did not use the common logic (in fact the
    master might queue messages, but implement the queue in the master
    driver's source)
    
      [    0.823015] mpc512x-psc-spi 80011400.psc: master is unqueued, this is deprecated
      [    0.854913] mpc512x-psc-spi 80011500.psc: master is unqueued, this is deprecated
    
    this change makes the MPC512x PSC SPI driver use the SPI subsystem's
    support to queue SPI messages and removes the master driver's private
    code for the queue support
    
    Signed-off-by: Gerhard Sittig <gsi@denx.de>
    Signed-off-by: Mark Brown <broonie@linaro.org>

commit 7f86bde90e2e1f693d93922fc0f4d50f001ce1a5
Author: Mika Westerberg <mika.westerberg@linux.intel.com>
Date:   Tue Jan 22 12:26:26 2013 +0200

    spi/pxa2xx: convert to the pump message infrastructure
    
    The SPI core provides infrastructure for standard message queueing so use
    that instead of handling everything in the driver. This simplifies the
    driver.
    
    Signed-off-by: Mika Westerberg <mika.westerberg@linux.intel.com>
    Acked-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>

commit 3a665531a3b7c2ad2c87903b24646be6916340e4
Author: Stanislav Kinsbursky <skinsbursky@parallels.com>
Date:   Fri Jan 4 15:34:56 2013 -0800

    selftests: IPC message queue copy feature test
    
    This test can be used to check wheither kernel supports IPC message queue
    copy and restore features (required by CRIU project).
    
    Signed-off-by: Stanislav Kinsbursky <skinsbursky@parallels.com>
    Cc: Serge Hallyn <serge.hallyn@canonical.com>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Pavel Emelyanov <xemul@parallels.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Cc: Michael Kerrisk <mtk.manpages@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 4a674f34ba04a002244edaf891b5da7fc1473ae8
Author: Stanislav Kinsbursky <skinsbursky@parallels.com>
Date:   Fri Jan 4 15:34:55 2013 -0800

    ipc: introduce message queue copy feature
    
    This patch is required for checkpoint/restore in userspace.
    
    c/r requires some way to get all pending IPC messages without deleting
    them from the queue (checkpoint can fail and in this case tasks will be
    resumed, so queue have to be valid).
    
    To achive this, new operation flag MSG_COPY for sys_msgrcv() system call
    was introduced.  If this flag was specified, then mtype is interpreted as
    number of the message to copy.
    
    If MSG_COPY is set, then kernel will allocate dummy message with passed
    size, and then use new copy_msg() helper function to copy desired message
    (instead of unlinking it from the queue).
    
    Notes:
    
    1) Return -ENOSYS if MSG_COPY is specified, but
       CONFIG_CHECKPOINT_RESTORE is not set.
    
    Signed-off-by: Stanislav Kinsbursky <skinsbursky@parallels.com>
    Cc: Serge Hallyn <serge.hallyn@canonical.com>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Pavel Emelyanov <xemul@parallels.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Cc: Michael Kerrisk <mtk.manpages@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit f9dd87f4738c7555aca2cdf8cb2b2326cafb0cad
Author: Stanislav Kinsbursky <skinsbursky@parallels.com>
Date:   Fri Jan 4 15:34:52 2013 -0800

    ipc: message queue receive cleanup
    
    Move all message related manipulation into one function msg_fill().
    Actually, two functions because of the compat one.
    
    [akpm@linux-foundation.org: checkpatch fixes]
    Signed-off-by: Stanislav Kinsbursky <skinsbursky@parallels.com>
    Cc: Serge Hallyn <serge.hallyn@canonical.com>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Pavel Emelyanov <xemul@parallels.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Cc: Michael Kerrisk <mtk.manpages@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 083500a74cb59d5b3a3ccec5368ac850f41f3dcd
Author: Russ Gorby <russ.gorby@intel.com>
Date:   Mon Aug 13 13:44:40 2012 +0100

    n_gsm: added interlocking for gsm_data_lock for certain code paths
    
    commit 5e44708f75b0f8712da715d6babb0c21089b2317 upstream.
    
    There were some locking holes in the management of the MUX's
    message queue for 2 code paths:
    1) gsmld_write_wakeup
    2) receipt of CMD_FCON flow-control message
    In both cases gsm_data_kick is called w/o locking so it can collide
    with other other instances of gsm_data_kick (pulling messages tx_tail)
    or potentially other instances of __gsm_data_queu (adding messages to tx_head)
    
    Changed to take the tx_lock in these 2 cases
    
    Signed-off-by: Russ Gorby <russ.gorby@intel.com>
    Tested-by: Yin, Fengwei <fengwei.yin@intel.com>
    Signed-off-by: Alan Cox <alan@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit ba3fd3d6cf4a97bcb934614295aa2ee4d2cd6ac9
Author: samix.lebsir <samix.lebsir@intel.com>
Date:   Mon Aug 13 13:44:22 2012 +0100

    char: n_gsm: remove message filtering for contipated DLCI
    
    commit 10c6c383e43565c9c6ec07ff8eb2825f8091bdf0 upstream.
    
    The design of uplink flow control in the mux driver is
    that for constipated channels data will backup into the
    per-channel fifos, and any messages that make it to the
    outbound message queue will still go out.
    Code was added to also stop messages that were in the outbound
    queue but this requires filtering through all the messages on the
    queue for stopped dlcis and changes some of the mux logic unneccessarily.
    
    The message fiiltering was removed to be in line w/ the original design
    as the message filtering does not provide any solution.
    Extra debug messages used during investigation were also removed.
    
    Signed-off-by: samix.lebsir <samix.lebsir@intel.com>
    Signed-off-by: Alan Cox <alan@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit efdd902a13b786961c072d947c548af4730733e0
Author: Russ Gorby <russ.gorby@intel.com>
Date:   Mon Aug 13 13:44:40 2012 +0100

    n_gsm: added interlocking for gsm_data_lock for certain code paths
    
    commit 5e44708f75b0f8712da715d6babb0c21089b2317 upstream.
    
    There were some locking holes in the management of the MUX's
    message queue for 2 code paths:
    1) gsmld_write_wakeup
    2) receipt of CMD_FCON flow-control message
    In both cases gsm_data_kick is called w/o locking so it can collide
    with other other instances of gsm_data_kick (pulling messages tx_tail)
    or potentially other instances of __gsm_data_queu (adding messages to tx_head)
    
    Changed to take the tx_lock in these 2 cases
    
    Signed-off-by: Russ Gorby <russ.gorby@intel.com>
    Tested-by: Yin, Fengwei <fengwei.yin@intel.com>
    Signed-off-by: Alan Cox <alan@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f73fd7d132c40bb779017444da92aed6c5dfcd95
Author: Russ Gorby <russ.gorby@intel.com>
Date:   Mon Aug 13 13:44:40 2012 +0100

    n_gsm: added interlocking for gsm_data_lock for certain code paths
    
    commit 5e44708f75b0f8712da715d6babb0c21089b2317 upstream.
    
    There were some locking holes in the management of the MUX's
    message queue for 2 code paths:
    1) gsmld_write_wakeup
    2) receipt of CMD_FCON flow-control message
    In both cases gsm_data_kick is called w/o locking so it can collide
    with other other instances of gsm_data_kick (pulling messages tx_tail)
    or potentially other instances of __gsm_data_queu (adding messages to tx_head)
    
    Changed to take the tx_lock in these 2 cases
    
    Signed-off-by: Russ Gorby <russ.gorby@intel.com>
    Tested-by: Yin, Fengwei <fengwei.yin@intel.com>
    Signed-off-by: Alan Cox <alan@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 119bd47785006d185e8247f63f44c43eaf345ed9
Author: Russ Gorby <russ.gorby@intel.com>
Date:   Mon Aug 13 13:44:40 2012 +0100

    n_gsm: added interlocking for gsm_data_lock for certain code paths
    
    commit 5e44708f75b0f8712da715d6babb0c21089b2317 upstream.
    
    There were some locking holes in the management of the MUX's
    message queue for 2 code paths:
    1) gsmld_write_wakeup
    2) receipt of CMD_FCON flow-control message
    In both cases gsm_data_kick is called w/o locking so it can collide
    with other other instances of gsm_data_kick (pulling messages tx_tail)
    or potentially other instances of __gsm_data_queu (adding messages to tx_head)
    
    Changed to take the tx_lock in these 2 cases
    
    Signed-off-by: Russ Gorby <russ.gorby@intel.com>
    Tested-by: Yin, Fengwei <fengwei.yin@intel.com>
    Signed-off-by: Alan Cox <alan@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ce5f868f54045589dd0f90e6b502efb1becd88d
Author: Russ Gorby <russ.gorby@intel.com>
Date:   Mon Aug 13 13:44:40 2012 +0100

    n_gsm: added interlocking for gsm_data_lock for certain code paths
    
    commit 5e44708f75b0f8712da715d6babb0c21089b2317 upstream.
    
    There were some locking holes in the management of the MUX's
    message queue for 2 code paths:
    1) gsmld_write_wakeup
    2) receipt of CMD_FCON flow-control message
    In both cases gsm_data_kick is called w/o locking so it can collide
    with other other instances of gsm_data_kick (pulling messages tx_tail)
    or potentially other instances of __gsm_data_queu (adding messages to tx_head)
    
    Changed to take the tx_lock in these 2 cases
    
    Signed-off-by: Russ Gorby <russ.gorby@intel.com>
    Tested-by: Yin, Fengwei <fengwei.yin@intel.com>
    Signed-off-by: Alan Cox <alan@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 50888469bda11bcff306893bbaff21f25894be0b
Author: Steven Miao <realmz6@gmail.com>
Date:   Tue Jul 31 17:28:10 2012 +0800

    blackfin: smp: adapt to generic smp helpers
    
    Replace blackfin ipi message queue with generic smp helper function.
    
    Signed-off-by: Steven Miao <realmz6@gmail.com>
    Signed-off-by: Bob Liu <lliubbo@gmail.com>

commit 5e44708f75b0f8712da715d6babb0c21089b2317
Author: Russ Gorby <russ.gorby@intel.com>
Date:   Mon Aug 13 13:44:40 2012 +0100

    n_gsm: added interlocking for gsm_data_lock for certain code paths
    
    There were some locking holes in the management of the MUX's
    message queue for 2 code paths:
    1) gsmld_write_wakeup
    2) receipt of CMD_FCON flow-control message
    In both cases gsm_data_kick is called w/o locking so it can collide
    with other other instances of gsm_data_kick (pulling messages tx_tail)
    or potentially other instances of __gsm_data_queu (adding messages to tx_head)
    
    Changed to take the tx_lock in these 2 cases
    
    Signed-off-by: Russ Gorby <russ.gorby@intel.com>
    Tested-by: Yin, Fengwei <fengwei.yin@intel.com>
    Signed-off-by: Alan Cox <alan@linux.intel.com>
    Cc: Riding School <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 10c6c383e43565c9c6ec07ff8eb2825f8091bdf0
Author: samix.lebsir <samix.lebsir@intel.com>
Date:   Mon Aug 13 13:44:22 2012 +0100

    char: n_gsm: remove message filtering for contipated DLCI
    
    The design of uplink flow control in the mux driver is
    that for constipated channels data will backup into the
    per-channel fifos, and any messages that make it to the
    outbound message queue will still go out.
    Code was added to also stop messages that were in the outbound
    queue but this requires filtering through all the messages on the
    queue for stopped dlcis and changes some of the mux logic unneccessarily.
    
    The message fiiltering was removed to be in line w/ the original design
    as the message filtering does not provide any solution.
    Extra debug messages used during investigation were also removed.
    
    Signed-off-by: samix.lebsir <samix.lebsir@intel.com>
    Signed-off-by: Alan Cox <alan@linux.intel.com>
    Cc: Dressage <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7e7a57b3ea066e3caf149feb37c6487d8423c772
Author: Virupax Sadashivpetimath <virupax.sadashivpetimath@stericsson.com>
Date:   Tue Jun 12 15:10:58 2012 +0200

    spi/pl022: disable port when unused
    
    commit fd316941cfee1fbd12746afea83720fb7823888a upstream.
    
    Commit ffbbdd21329f3e15eeca6df2d4bc11c04d9d91c0
    "spi: create a message queueing infrastructure"
    Accidentally deleted the logic to disable the port
    when unused leading to higher power consumption.
    Fix this up.
    
    Cc: Vinit Shenoy <vinit.shenoy@st.com>
    Signed-off-by: Virupax Sadashivpetimath <virupax.sadashivpetimath@stericsson.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit be142c0eac7a427fe4c7e4564466be9d826fefd4
Author: Virupax Sadashivpetimath <virupax.sadashivpetimath@stericsson.com>
Date:   Tue Jun 12 15:10:58 2012 +0200

    spi/pl022: disable port when unused
    
    commit fd316941cfee1fbd12746afea83720fb7823888a upstream.
    
    Commit ffbbdd21329f3e15eeca6df2d4bc11c04d9d91c0
    "spi: create a message queueing infrastructure"
    Accidentally deleted the logic to disable the port
    when unused leading to higher power consumption.
    Fix this up.
    
    Cc: Vinit Shenoy <vinit.shenoy@st.com>
    Signed-off-by: Virupax Sadashivpetimath <virupax.sadashivpetimath@stericsson.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd316941cfee1fbd12746afea83720fb7823888a
Author: Virupax Sadashivpetimath <virupax.sadashivpetimath@stericsson.com>
Date:   Tue Jun 12 15:10:58 2012 +0200

    spi/pl022: disable port when unused
    
    Commit ffbbdd21329f3e15eeca6df2d4bc11c04d9d91c0
    "spi: create a message queueing infrastructure"
    Accidentally deleted the logic to disable the port
    when unused leading to higher power consumption.
    Fix this up.
    
    Cc: stable@kernel.org
    Cc: Vinit Shenoy <vinit.shenoy@st.com>
    Signed-off-by: Virupax Sadashivpetimath <virupax.sadashivpetimath@stericsson.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit d6629859b36d953a4b1369b749f178736911bf10
Author: Doug Ledford <dledford@redhat.com>
Date:   Thu May 31 16:26:35 2012 -0700

    ipc/mqueue: improve performance of send/recv
    
    The existing implementation of the POSIX message queue send and recv
    functions is, well, abysmal.  Even worse than abysmal.  I submitted a
    patch to increase the maximum POSIX message queue limit to 65536 due to
    customer needs, however, upon looking over the send/recv implementation, I
    realized that my customer needs help with that too even if they don't know
    it.  The basic problem is that, given the fairly typical use case scenario
    for a large queue of queueing lots of messages all at the same priority (I
    verified with my customer that this is indeed what their app does), the
    msg_insert routine is basically a frikkin' bubble sort.  I mean, whoa,
    that's *so* middle school.
    
    OK, OK, to not slam the original author too much, I'm sure they didn't
    envision a queue depth of 50,000+ messages.  No one would think that
    moving elements in an array, one at a time, and dereferencing each pointer
    in that array to check priority of the message being pointed too, again
    one at a time, for 50,000+ times would be good.  So let's assume that, as
    is typical, the users have found a way to break our code simply by using
    it in a way we didn't envision.  Fair enough.
    
    "So, just how broken is it?", you ask.  I wondered the same thing, so I
    wrote an app to let me know.  It's my next patch.  It gave me some
    interesting results.  Here's what it tested:
    
    Interference with other apps - In continuous mode, the app just sits there
    and hits a message queue forever, while you go do something productive on
    another terminal using other CPUs.  You then measure how long it takes you
    to do that something productive.  Then you restart the app in fake
    continuous mode, and it sits in a tight loop on a CPU while you repeat
    your tests.  The whole point of this is to keep one CPU tied up (so it
    can't be used in your other work) but in one case tied up hitting the
    mqueue code so we can see the effect of walking that 65,528 element array
    one pointer at a time on the global CPU cache.  If it's bad, then it will
    slow down your app on the other CPUs just by polluting cache mercilessly.
    In the fake case, it will be in a tight loop, but not polluting cache.
    Testing the mqueue subsystem directly - Here we just run a number of tests
    to see how the mqueue subsystem performs under different conditions.  A
    couple conditions are known to be worst case for the old system, and some
    routines, so this tests all of them.
    
    So, on to the results already:
    
    Subsystem/Test                  Old                         New
    
    Time to compile linux
    kernel (make -j12 on a
    6 core CPU)
      Running mqueue test     user 49m10.744s             user 45m26.294s
                               sys  5m51.924s              sys  4m59.894s
                             total 55m02.668s            total 50m26.188s
    
      Running fake test       user 45m32.686s             user 45m18.552s
                               sys  5m12.465s              sys  4m56.468s
                             total 50m45.151s            total 50m15.020s
    
      % slowdown from mqueue
        cache thrashing            ~8%                         ~.5%
    
    Avg time to send/recv (in nanoseconds per message)
      when queue empty            305/288                    349/318
      when queue full (65528 messages)
        constant priority      526589/823                    362/314
        increasing priority    403105/916                    495/445
        decreasing priority     73420/594                    482/409
        random priority        280147/920                    546/436
    
    Time to fill/drain queue (65528 messages, in seconds)
      constant priority         17.37/.12                    .13/.12
      increasing priority        4.14/.14                    .21/.18
      decreasing priority       12.93/.13                    .21/.18
      random priority            8.88/.16                    .22/.17
    
    So, I think the results speak for themselves.  It's possible this
    implementation could be improved by cacheing at least one priority level
    in the node tree (that would bring the queue empty performance more in
    line with the old implementation), but this works and is *so* much better
    than what we had, especially for the common case of a single priority in
    use, that further refinements can be in follow on patches.
    
    [akpm@linux-foundation.org: fix typo in comment, remove stray semicolon]
    [levinsasha928@gmail.com: use correct gfp flags in msg_insert]
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Cc: Stephen Rothwell <sfr@canb.auug.org.au>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Acked-by: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Signed-off-by: Sasha Levin <levinsasha928@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 50069a5851323ba5def0e414a21e234345016870
Author: Doug Ledford <dledford@redhat.com>
Date:   Thu May 31 16:26:34 2012 -0700

    selftests: add mq_open_tests
    
    Add a directory to house POSIX message queue subsystem specific tests.
    Add first test which checks the operation of mq_open() under various
    corner conditions.
    
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Cc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Cc: Doug Ledford <dledford@redhat.com>
    Cc: Joe Korty <joe.korty@ccur.com>
    Cc: Amerigo Wang <amwang@redhat.com>
    Cc: Serge E. Hallyn <serue@us.ibm.com>
    Cc: Jiri Slaby <jslaby@suse.cz>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit cef0184c115e5e4e10498f6548d9526465e72478
Author: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
Date:   Thu May 31 16:26:33 2012 -0700

    mqueue: separate mqueue default value from maximum value
    
    Commit b231cca4381e ("message queues: increase range limits") changed
    mqueue default value when attr parameter is specified NULL from hard
    coded value to fs.mqueue.{msg,msgsize}_max sysctl value.
    
    This made large side effect.  When user need to use two mqueue
    applications 1) using !NULL attr parameter and it require big message
    size and 2) using NULL attr parameter and only need small size message,
    app (1) require to raise fs.mqueue.msgsize_max and app (2) consume large
    memory size even though it doesn't need.
    
    Doug Ledford propsed to switch back it to static hard coded value.
    However it also has a compatibility problem.  Some applications might
    started depend on the default value is tunable.
    
    The solution is to separate default value from maximum value.
    
    Signed-off-by: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Acked-by: Doug Ledford <dledford@redhat.com>
    Acked-by: Joe Korty <joe.korty@ccur.com>
    Cc: Amerigo Wang <amwang@redhat.com>
    Acked-by: Serge E. Hallyn <serue@us.ibm.com>
    Cc: Jiri Slaby <jslaby@suse.cz>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 5b5c4d1a1440e94994c73dddbad7be0676cd8b9a
Author: Doug Ledford <dledford@redhat.com>
Date:   Thu May 31 16:26:30 2012 -0700

    ipc/mqueue: update maximums for the mqueue subsystem
    
    Commit b231cca4381e ("message queues: increase range limits") changed the
    maximum size of a message in a message queue from INT_MAX to 8192*128.
    Unfortunately, we had customers that relied on a size much larger than
    8192*128 on their production systems.  After reviewing POSIX, we found
    that it is silent on the maximum message size.  We did find a couple other
    areas in which it was not silent.  Fix up the mqueue maximums so that the
    customer's system can continue to work, and document both the POSIX and
    real world requirements in ipc_namespace.h so that we don't have this
    issue crop back up.
    
    Also, commit 9cf18e1dd74cd0 ("ipc: HARD_MSGMAX should be higher not lower
    on 64bit") fiddled with HARD_MSGMAX without realizing that the number was
    intentionally in place to limit the msg queue depth to one that was small
    enough to kmalloc an array of pointers (hence why we divided 128k by
    sizeof(long)).  If we wish to meet POSIX requirements, we have no choice
    but to change our allocation to a vmalloc instead (at least for the large
    queue size case).  With that, it's possible to increase our allowed
    maximum to the POSIX requirements (or more if we choose).
    
    [sfr@canb.auug.org.au: using vmalloc requires including vmalloc.h]
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Cc: Serge E. Hallyn <serue@us.ibm.com>
    Cc: Amerigo Wang <amwang@redhat.com>
    Cc: Joe Korty <joe.korty@ccur.com>
    Cc: Jiri Slaby <jslaby@suse.cz>
    Acked-by: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Stephen Rothwell <sfr@canb.auug.org.au>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 858ee3784e8105467f1f3017f4ece51cb51d4830
Author: Doug Ledford <dledford@redhat.com>
Date:   Thu May 31 16:26:29 2012 -0700

    ipc/mqueue: switch back to using non-max values on create
    
    Commit b231cca4381e ("message queues: increase range limits") changed
    how we create a queue that does not include an attr struct passed to
    open so that it creates the queue with whatever the maximum values are.
    However, if the admin has set the maximums to allow flexibility in
    creating a queue (aka, both a large size and large queue are allowed,
    but combined they create a queue too large for the RLIMIT_MSGQUEUE of
    the user), then attempts to create a queue without an attr struct will
    fail.  Switch back to using acceptable defaults regardless of what the
    maximums are.
    
    Note: so far, we only know of a few applications that rely on this
    behavior (specifically, set the maximums in /proc, then run the
    application which calls mq_open() without passing in an attr struct, and
    the application expects the newly created message queue to have the
    maximum sizes that were set in /proc used on the mq_open() call, and all
    of those applications that we know of are actually part of regression
    test suites that were coded to do something like this:
    
    for size in 4096 65536 $((1024 * 1024)) $((16 * 1024 * 1024)); do
            echo $size > /proc/sys/fs/mqueue/msgsize_max
            mq_open || echo "Error opening mq with size $size"
    done
    
    These test suites that depend on any behavior like this are broken.  The
    concept that programs should rely upon the system wide maximum in order
    to get their desired results instead of simply using a attr struct to
    specify what they want is fundamentally unfriendly programming practice
    for any multi-tasking OS.
    
    Fixing this will break those few apps that we know of (and those app
    authors recognize the brokenness of their code and the need to fix it).
    However, the following patch "mqueue: separate mqueue default value"
    allows a workaround in the form of new knobs for the default msg queue
    creation parameters for any software out there that we don't already
    know about that might rely on this behavior at the moment.
    
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Cc: Serge E. Hallyn <serue@us.ibm.com>
    Cc: Amerigo Wang <amwang@redhat.com>
    Cc: Joe Korty <joe.korty@ccur.com>
    Cc: Jiri Slaby <jslaby@suse.cz>
    Acked-by: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 93e6f119c0ce8a1bba6e81dc8dd97d67be360844
Author: Doug Ledford <dledford@redhat.com>
Date:   Thu May 31 16:26:28 2012 -0700

    ipc/mqueue: cleanup definition names and locations
    
    Since commit b231cca4381e ("message queues: increase range limits") on
    Oct 18, 2008, calls to mq_open() that did not pass in an attribute
    struct and expected to get default values for the size of the queue and
    the max message size now get the system wide maximums instead of
    hardwired defaults like they used to get.
    
    This was uncovered when one of the earlier patches in this patch set
    increased the default system wide maximums at the same time it increased
    the hard ceiling on the system wide maximums (a customer specifically
    needed the hard ceiling brought back up, the new ceiling that commit
    b231cca4381e introduced was too low for their production systems).  By
    increasing the default maximums and not realising they were tied to any
    attempt to create a message queue without an attribute struct, I had
    inadvertently made it such that all message queue creation attempts
    without an attribute struct were failing because the new default
    maximums would create a queue that exceeded the default rlimit for
    message queue bytes.
    
    As a result, the system wide defaults were brought back down to their
    previous levels, and the system wide ceilings on the maximums were
    raised to meet the customer's needs.  However, the fact that the no
    attribute struct behavior of mq_open() could be broken by changing the
    system wide maximums for message queues was seen as fundamentally broken
    itself.  So we hardwired the no attribute case back like it used to be.
    But, then we realized that on the very off chance that some piece of
    software in the wild depended on that behavior, we could work around
    that issue by adding two new knobs to /proc that allowed setting the
    defaults for message queues created without an attr struct separately
    from the system wide maximums.
    
    What is not an option IMO is to leave the current behavior in place.  No
    piece of software should ever rely on setting the system wide maximums
    in order to get a desired message queue.  Such a reliance would be so
    fundamentally multitasking OS unfriendly as to not really be tolerable.
    Fortunately, we don't know of any software in the wild that uses this
    except for a regression test program that caught the issue in the first
    place.  If there is though, we have made accommodations with the two new
    /proc knobs (and that's all the accommodations such fundamentally broken
    software can be allowed)..
    
    This patch:
    
    The various defines for minimums and maximums of the sysctl controllable
    mqueue values are scattered amongst different files and named
    inconsistently.  Move them all into ipc_namespace.h and make them have
    consistent names.  Additionally, make the number of queues per namespace
    also have a minimum and maximum and use the same sysctl function as the
    other two settable variables.
    
    Signed-off-by: Doug Ledford <dledford@redhat.com>
    Acked-by: Serge E. Hallyn <serue@us.ibm.com>
    Cc: Amerigo Wang <amwang@redhat.com>
    Cc: Joe Korty <joe.korty@ccur.com>
    Cc: Jiri Slaby <jslaby@suse.cz>
    Acked-by: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 5fda88f5e17ea0e767360a3f09eac80f83296ea9
Author: Shubhrajyoti D <shubhrajyoti@ti.com>
Date:   Thu May 10 18:27:45 2012 +0530

    spi/omap2-mcspi: convert to the pump message infrastructure
    
    This patch converts the OMAP SPI driver to use the SPI infrastructure
    pump message queue.Also fixes the below warning.
    master is unqueued, this is deprecated
    
    Signed-off-by: Shubhrajyoti D <shubhrajyoti@ti.com>
    Acked-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

commit cde4384e1037c15e5dd04c68d19c75798b6281dd
Author: Florian Fainelli <florian@openwrt.org>
Date:   Fri Apr 20 15:37:33 2012 +0200

    spi/bcm63xx: convert to the pump message infrastructure
    
    This patch converts the bcm63xx SPI driver to use the SPI infrastructure
    pump message queue. Since we were previously sleeping in the SPI
    driver's transfer() function (which is not allowed) this is now fixed as well.
    
    To complete that conversion a certain number of changes have been made:
    - the transfer len is split into multiple hardware transfers in case its
      size is bigger than the hardware FIFO size
    - the FIFO refill is no longer done in the interrupt context, which was a
      bad idea leading to quick interrupt handler re-entrancy
    
    Tested-by: Tanguy Bouzeloc <tanguy.bouzeloc@efixo.com>
    Signed-off-by: Florian Fainelli <florian@openwrt.org>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

commit 31739139f3ed7be802dd9019ec8d8cc910e3d241
Author: Alex Elder <elder@dreamhost.com>
Date:   Wed Mar 7 11:40:08 2012 -0600

    libceph: use kernel_sendpage() for sending zeroes
    
    If a message queued for send gets revoked, zeroes are sent over the
    wire instead of any unsent data.  This is done by constructing a
    message and passing it to kernel_sendmsg() via ceph_tcp_sendmsg().
    
    Since we are already working with a page in this case we can use
    the sendpage interface instead.  Create a new ceph_tcp_sendpage()
    helper that sets up flags to match the way ceph_tcp_sendmsg()
    does now.
    
    Signed-off-by: Alex Elder <elder@dreamhost.com>
    Reviewed-by: Sage Weil <sage@newdream.net>

commit 5f0e685f316a1de6d3af8b23eaf46651faca32ab
Merge: f8974cb71310 87bf5ab82884
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Mar 21 10:32:00 2012 -0700

    Merge tag 'spi-for-linus' of git://git.secretlab.ca/git/linux-2.6
    
    Pull SPI changes for v3.4 from Grant Likely:
     "Mostly a bunch of new drivers and driver bug fixes; but this also
      includes a few patches that create a core message queue infrastructure
      for the spi subsystem instead of making each driver open code it."
    
    * tag 'spi-for-linus' of git://git.secretlab.ca/git/linux-2.6: (34 commits)
      spi/fsl-espi: Make sure pm is within 2..32
      spi/fsl-espi: make the clock computation easier to read
      spi: sh-hspi: modify write/read method
      spi: sh-hspi: control spi clock more correctly
      spi: sh-hspi: convert to using core message queue
      spi: s3c64xx: Fix build
      spi: s3c64xx: remove unnecessary callback msg->complete
      spi: remove redundant variable assignment
      spi: release lock on error path in spi_pump_messages()
      spi: Compatibility with direction which is used in samsung DMA operation
      spi-topcliff-pch: add recovery processing in case wait-event timeout
      spi-topcliff-pch: supports a spi mode setup and bit order setup by IO control
      spi-topcliff-pch: Fix issue for transmitting over 4KByte
      spi-topcliff-pch: Modify pci-bus number dynamically to get DMA device info
      spi/imx: simplify error handling to free gpios
      spi: Convert to DEFINE_PCI_DEVICE_TABLE
      spi: add Broadcom BCM63xx SPI controller driver
      SPI: add CSR SiRFprimaII SPI controller driver
      spi-topcliff-pch: fix -Wuninitialized warning
      spi: Mark spi_register_board_info() __devinit
      ...

commit ec139b67ad00647239b804d6f15315b83dba9a58
Author: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
Date:   Wed Mar 14 02:47:40 2012 -0700

    spi: sh-hspi: convert to using core message queue
    
    Signed-off-by: Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

commit ad2a99af0d7242726723575efaffa1625664b384
Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
Date:   Wed Feb 15 14:48:32 2012 -0800

    spi/s3c64xx: Convert to using core message queue
    
    Convert the s3c64xx driver to using the new message queue factored out of
    the pl022 driver by Linus Walleij, saving us a nice block of code and
    getting the benefits of improvements implemented in the core.
    
    Signed-off-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

commit ffbbdd21329f3e15eeca6df2d4bc11c04d9d91c0
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Wed Feb 22 10:05:38 2012 +0100

    spi: create a message queueing infrastructure
    
    This rips the message queue in the PL022 driver out and pushes
    it into (optional) common infrastructure. Drivers that want to
    use the message pumping thread will need to define the new
    per-messags transfer methods and leave the deprecated transfer()
    method as NULL.
    
    Most of the design is described in the documentation changes that
    are included in this patch.
    
    Since there is a queue that need to be stopped when the system
    is suspending/resuming, two new calls are implemented for the
    device drivers to call in their suspend()/resume() functions:
    spi_master_suspend() and spi_master_resume().
    
    ChangeLog v1->v2:
    - Remove Kconfig entry and do not make the queue support optional
      at all, instead be more agressive and have it as part of the
      compulsory infrastructure.
    - If the .transfer() method is implemented, delete print a small
      deprecation notice and do not start the transfer pump.
    - Fix a bitrotted comment.
    ChangeLog v2->v3:
    - Fix up a problematic sequence courtesy of Chris Blair.
    - Stop rather than destroy the queue on suspend() courtesy of
      Chris Blair.
    
    Signed-off-by: Chris Blair <chris.blair@stericsson.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Tested-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Reviewed-by: Mark Brown <broonie@opensource.wolfsonmicro.com>
    Signed-off-by: Grant Likely <grant.likely@secretlab.ca>

commit 0232c5a566ff52d5c9fc1dda70253c942628ca66
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Oct 26 15:57:26 2011 -0400

    tipc: Fix bug in broadcast link duplicate message statistics
    
    Modifies broadcast link so that it increments the "received duplicate
    message" count if an incoming message cannot be added to the deferred
    message queue because it is already present in the queue. (The aligns
    broadcast link behavior with that of TIPC's unicast links.)
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 8a275a6a30ba871eb34ea41c1fbb507039f4c0dc
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Wed Oct 26 15:33:44 2011 -0400

    tipc: Fix node lock reclamation issues in broadcast link reception
    
    Fixes a pair of problems in broadcast link message reception code
    relating to the reclamation of the node lock after consuming an
    in-sequence message.
    
    1) Now retests to see if the sending node is still up after reclaiming
       the node lock, and bails out if it is non-operational.
    
    2) Now manipulates the node's deferred message queue only after
       reclaiming the node lock, rather than using queue head pointer
       information that was cached previously.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 8809b255a9fca8c3179491d3bc9268c42e23ba97
Author: Allan Stephens <allan.stephens@windriver.com>
Date:   Tue Oct 25 10:44:35 2011 -0400

    tipc: improve the link deferred queue insertion algorithm
    
    Re-code the algorithm for inserting an out-of-sequence message into
    a unicast or broadcast link's deferred message queue.  It remains
    functionally equivalent but should be easier to understand/maintain.
    
    Signed-off-by: Allan Stephens <allan.stephens@windriver.com>
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 8b8d719161c386668161daf29b2632f094e326c8
Author: Virupax Sadashivpetimath <virupax.sadashivpetimath@stericsson.com>
Date:   Thu Nov 10 12:43:24 2011 +0530

    spi/pl022: make the chip deselect handling thread safe
    
    There is a possibility that the pump_message and giveback
    run in parallel on a SMP system. Both the pump_message and
    giveback threads work on the same SPI message queue.
    Results will be in correct if the pump_message gets to
    work on the queue first.
    
    when the pump_message works with the queue, it reads the
    head of the queue and removes it from the queue. pump_message
    activates the chip select depending on this message read.
    
    This leads to giveback working on the modified queue or a
    emptied queue. If the queue is empty or if the next message on
    the queue (which is not the actual next message, as the pump
    message has removed the next message from the queue) is not for
    the same SPI device as that Of the previous one, giveback will
    de-activate the chip select activated by pump_message(),
    which is wrong.
    
    To solve this problem pump_message is made not to run and
    access the queue until the giveback is done handling the queue.
    I.e. by making the cur_msg NULL after the giveback has read the
    queue.
    
    Also a state variable has been introduced to keep track of when
    the CS for next message is already activated and avoid to
    double-activate it.
    
    Reviewed-by: Viresh Kumar <viresh.kumar@st.com>
    Signed-off-by: Virupax Sadashivpetimath <virupax.sadashivpetimath@stericsson.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>

commit 32ea845d5bafc37b7406bea1aee3005407cb0900
Author: Wanlong Gao <gaowanlong@cn.fujitsu.com>
Date:   Mon Oct 31 17:06:35 2011 -0700

    ipc/mqueue.c: fix wrong use of schedule_hrtimeout_range_clock()
    
    Fix the wrong use of schedule_hrtimeout_range_clock() in wq_sleep(),
    although it is harmless for the syscall mq_timed* now.  It was introduced
    by 9ca7d8e ("mqueue: Convert message queue timeout to use hrtimers").
    
    Signed-off-by: Wanlong Gao <gaowanlong@cn.fujitsu.com>
    Cc: Carsten Emde <C.Emde@osadl.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 0d39ea76fa3b9a97e9dc45282613bc239ffa8509
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Tue Jul 26 16:08:47 2011 -0700

    ipc/mqueue.c: fix mq_open() return value
    
    commit d40dcdb0172a1ba853464983a059fb45e0aaf61a upstream.
    
    We return ENOMEM from mqueue_get_inode even when we have enough memory.
    Namely in case the system rlimit of mqueue was reached.  This error
    propagates to mq_queue and user sees the error unexpectedly.  So fix
    this up to properly return EMFILE as described in the manpage:
    
            EMFILE The process already has the maximum number of files and
                   message queues open.
    
    instead of:
    
            ENOMEM Insufficient memory.
    
    With the previous patch we just switch to ERR_PTR/PTR_ERR/IS_ERR error
    handling here.
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit f3bd51732390ca40a7f5bb7520289da4f3d63762
Author: Rasesh Mody <rmody@brocade.com>
Date:   Mon Aug 8 16:21:37 2011 +0000

    bna: Tx and Rx Redesign
    
    Change details:
     - This patch contains the changes as a result of redesigning of Tx, Rx data
       path setup. In the old design, setting up Txqs, Rxqs were done in the driver.
       With the new design, most of the hardware setup steps for the Txq, Rxqs are
       moved to FW. Host driver issues commands to FW through the message queue to
       setup/teardown tx, rx data path. FW performs necessary steps and responds
       back to the driver with a status.
     - As a result of this redesign, the state machine implementation for Tx, Rx
       objects have changed significantly. Instead of doing the raw register access,
       these state machines mostly send a command to FW and wait for response and
       take the next action. In addition to tx, rx datapath setup, this patch also
       deals with rx filter configuration - such as unicast address, multicast
       address, vlan filter, promiscuous mode etc.
    
    Signed-off-by: Rasesh Mody <rmody@brocade.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d40dcdb0172a1ba853464983a059fb45e0aaf61a
Author: Jiri Slaby <jslaby@suse.cz>
Date:   Tue Jul 26 16:08:47 2011 -0700

    ipc/mqueue.c: fix mq_open() return value
    
    We return ENOMEM from mqueue_get_inode even when we have enough memory.
    Namely in case the system rlimit of mqueue was reached.  This error
    propagates to mq_queue and user sees the error unexpectedly.  So fix
    this up to properly return EMFILE as described in the manpage:
    
            EMFILE The process already has the maximum number of files and
                   message queues open.
    
    instead of:
    
            ENOMEM Insufficient memory.
    
    With the previous patch we just switch to ERR_PTR/PTR_ERR/IS_ERR error
    handling here.
    
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 73a400646b8e26615f3ef1a0a4bc0cd0d5bd284c
Author: Yi Li <yi.li@analog.com>
Date:   Thu Dec 17 08:20:32 2009 +0000

    Blackfin: SMP: rewrite IPI handling to avoid memory allocation
    
    Currently, sending an interprocessor interrupt (IPI) requires building up
    a message dynamically which means memory allocation.  But often times, we
    will want to send an IPI in low level contexts where allocation is not
    possible which may lead to a panic().  So create a per-cpu static array
    for the message queue and use that instead.
    
    Further, while we have two supplemental interrupts, we are currently only
    using one of them.  So use the second one for the most common IPI message
    of all -- smp_send_reschedule().  This avoids ugly contention for locks
    which in turn would require an IPI message ...
    
    In general, this improves SMP performance, and in some cases allows the
    SMP port to work in places it wouldn't before.  Such as the PREEMPT_RT
    state where the slab is protected by a per-cpu spin lock.  If the slab
    kmalloc/kfree were to put the task to sleep, and that task was actually
    the IPI handler, then the system falls down yet again.
    
    After running some various stress tests on the system, the static limit
    of 5 messages seems to work.  On the off chance even this overflows, we
    simply panic(), and we can review that scenario to see if the limit needs
    to be increased a bit more.
    
    Signed-off-by: Yi Li <yi.li@analog.com>
    Signed-off-by: Mike Frysinger <vapier@gentoo.org>

commit fb522b653dae079c79ce1cbaf32d307d3d4088f0
Author: Nathan Lynch <ntl@pobox.com>
Date:   Tue Aug 10 18:03:08 2010 -0700

    signalfd: fill in ssi_int for posix timers and message queues
    
    commit a2a20c412c86e0bb46a9ab0dd31bcfe6d201b913 upstream.
    
    If signalfd is used to consume a signal generated by a POSIX interval
    timer or POSIX message queue, the ssi_int field does not reflect the data
    (sigevent->sigev_value) supplied to timer_create(2) or mq_notify(3).  (The
    ssi_ptr field, however, is filled in.)
    
    This behavior differs from signalfd's treatment of sigqueue-generated
    signals -- see the default case in signalfd_copyinfo.  It also gives
    results that differ from the case when a signal is handled conventionally
    via a sigaction-registered handler.
    
    So, set signalfd_siginfo->ssi_int in the remaining cases (__SI_TIMER,
    __SI_MESGQ) where ssi_ptr is set.
    
    akpm: a non-back-compatible change.  Merge into -stable to minimise the
    number of kernels which are in the field and which miss this feature.
    
    Signed-off-by: Nathan Lynch <ntl@pobox.com>
    Acked-by: Davide Libenzi <davidel@xmailserver.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit d774a312e59179db06d61d916f096fa241545e59
Author: Nathan Lynch <ntl@pobox.com>
Date:   Tue Aug 10 18:03:08 2010 -0700

    signalfd: fill in ssi_int for posix timers and message queues
    
    commit a2a20c412c86e0bb46a9ab0dd31bcfe6d201b913 upstream.
    
    If signalfd is used to consume a signal generated by a POSIX interval
    timer or POSIX message queue, the ssi_int field does not reflect the data
    (sigevent->sigev_value) supplied to timer_create(2) or mq_notify(3).  (The
    ssi_ptr field, however, is filled in.)
    
    This behavior differs from signalfd's treatment of sigqueue-generated
    signals -- see the default case in signalfd_copyinfo.  It also gives
    results that differ from the case when a signal is handled conventionally
    via a sigaction-registered handler.
    
    So, set signalfd_siginfo->ssi_int in the remaining cases (__SI_TIMER,
    __SI_MESGQ) where ssi_ptr is set.
    
    akpm: a non-back-compatible change.  Merge into -stable to minimise the
    number of kernels which are in the field and which miss this feature.
    
    Signed-off-by: Nathan Lynch <ntl@pobox.com>
    Acked-by: Davide Libenzi <davidel@xmailserver.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit e9d2a41cea95d1efb23b5803ec8d5e89a0986265
Author: Nathan Lynch <ntl@pobox.com>
Date:   Tue Aug 10 18:03:08 2010 -0700

    signalfd: fill in ssi_int for posix timers and message queues
    
    commit a2a20c412c86e0bb46a9ab0dd31bcfe6d201b913 upstream.
    
    If signalfd is used to consume a signal generated by a POSIX interval
    timer or POSIX message queue, the ssi_int field does not reflect the data
    (sigevent->sigev_value) supplied to timer_create(2) or mq_notify(3).  (The
    ssi_ptr field, however, is filled in.)
    
    This behavior differs from signalfd's treatment of sigqueue-generated
    signals -- see the default case in signalfd_copyinfo.  It also gives
    results that differ from the case when a signal is handled conventionally
    via a sigaction-registered handler.
    
    So, set signalfd_siginfo->ssi_int in the remaining cases (__SI_TIMER,
    __SI_MESGQ) where ssi_ptr is set.
    
    akpm: a non-back-compatible change.  Merge into -stable to minimise the
    number of kernels which are in the field and which miss this feature.
    
    Signed-off-by: Nathan Lynch <ntl@pobox.com>
    Acked-by: Davide Libenzi <davidel@xmailserver.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit e13fd0a2324283b00131c2e7a91bacd06e6f6810
Author: Nathan Lynch <ntl@pobox.com>
Date:   Tue Aug 10 18:03:08 2010 -0700

    signalfd: fill in ssi_int for posix timers and message queues
    
    commit a2a20c412c86e0bb46a9ab0dd31bcfe6d201b913 upstream.
    
    If signalfd is used to consume a signal generated by a POSIX interval
    timer or POSIX message queue, the ssi_int field does not reflect the data
    (sigevent->sigev_value) supplied to timer_create(2) or mq_notify(3).  (The
    ssi_ptr field, however, is filled in.)
    
    This behavior differs from signalfd's treatment of sigqueue-generated
    signals -- see the default case in signalfd_copyinfo.  It also gives
    results that differ from the case when a signal is handled conventionally
    via a sigaction-registered handler.
    
    So, set signalfd_siginfo->ssi_int in the remaining cases (__SI_TIMER,
    __SI_MESGQ) where ssi_ptr is set.
    
    akpm: a non-back-compatible change.  Merge into -stable to minimise the
    number of kernels which are in the field and which miss this feature.
    
    Signed-off-by: Nathan Lynch <ntl@pobox.com>
    Acked-by: Davide Libenzi <davidel@xmailserver.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit a2a20c412c86e0bb46a9ab0dd31bcfe6d201b913
Author: Nathan Lynch <ntl@pobox.com>
Date:   Tue Aug 10 18:03:08 2010 -0700

    signalfd: fill in ssi_int for posix timers and message queues
    
    If signalfd is used to consume a signal generated by a POSIX interval
    timer or POSIX message queue, the ssi_int field does not reflect the data
    (sigevent->sigev_value) supplied to timer_create(2) or mq_notify(3).  (The
    ssi_ptr field, however, is filled in.)
    
    This behavior differs from signalfd's treatment of sigqueue-generated
    signals -- see the default case in signalfd_copyinfo.  It also gives
    results that differ from the case when a signal is handled conventionally
    via a sigaction-registered handler.
    
    So, set signalfd_siginfo->ssi_int in the remaining cases (__SI_TIMER,
    __SI_MESGQ) where ssi_ptr is set.
    
    akpm: a non-back-compatible change.  Merge into -stable to minimise the
    number of kernels which are in the field and which miss this feature.
    
    Signed-off-by: Nathan Lynch <ntl@pobox.com>
    Acked-by: Davide Libenzi <davidel@xmailserver.org>
    Cc: <stable@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 7fba1bcd4844a4a8619a03bf51cabc92aea365a8
Author: Cliff Wickman <cpw@sgi.com>
Date:   Wed Jun 2 16:22:02 2010 -0500

    x86, UV: Correct BAU regular message type
    
    The Broadcast Assist Unit messages have a regular or retry
    message type. The regular type was not being set, but needs to
    be, because the lack of a message type is sometimes used to
    identify an unused entry in the message queue.
    Also removing some excess comments.
    
    Signed-off-by: Cliff Wickman <cpw@sgi.com>
    Cc: gregkh@suse.de
    LKML-Reference: <E1OJvNy-0004ak-Dy@eag09.americas.sgi.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit 164d44fd92e79d5bce54d0d62df9f856f7b23925
Merge: 5bfec46baa3a d7e81c269db8
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed May 19 17:11:10 2010 -0700

    Merge branch 'timers-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip
    
    * 'timers-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/linux-2.6-tip:
      clocksource: Add clocksource_register_hz/khz interface
      posix-cpu-timers: Optimize run_posix_cpu_timers()
      time: Remove xtime_cache
      mqueue: Convert message queue timeout to use hrtimers
      hrtimers: Provide schedule_hrtimeout for CLOCK_REALTIME
      timers: Introduce the concept of timer slack for legacy timers
      ntp: Remove tickadj
      ntp: Make time_adjust static
      time: Add xtime, wall_to_monotonic to feature-removal-schedule
      timer: Try to survive timer callback preempt_count leak
      timer: Split out timer function call
      timer: Print function name for timer callbacks modifying preemption count
      time: Clean up warp_clock()
      cpu-timers: Avoid iterating over all threads in fastpath_timer_check()
      cpu-timers: Change SIGEV_NONE timer implementation
      cpu-timers: Return correct previous timer reload value
      cpu-timers: Cleanup arm_timer()
      cpu-timers: Simplify RLIMIT_CPU handling

commit a3ed2a15719219769bb095b28009c1d654a419e8
Author: André Goddard Rosa <andre.goddard@gmail.com>
Date:   Tue May 11 14:07:03 2010 -0700

    mqueue: fix kernel BUG caused by double free() on mq_open()
    
    In case of aborting because we reach the maximum amount of memory which
    can be allocated to message queues per user (RLIMIT_MSGQUEUE), we would
    try to free the message area twice when bailing out: first by the error
    handling code itself, and then later when cleaning up the inode through
    delete_inode().
    
    Signed-off-by: André Goddard Rosa <andre.goddard@gmail.com>
    Cc: Alexey Dobriyan <adobriyan@gmail.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: <stable@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 9ca7d8e6834c40a99622bbe4a88aaf64313ae43c
Author: Carsten Emde <C.Emde@osadl.org>
Date:   Fri Apr 2 22:40:20 2010 +0200

    mqueue: Convert message queue timeout to use hrtimers
    
    The message queue functions mq_timedsend() and mq_timedreceive()
    have not yet been converted to use the hrtimer interface.
    
    This patch replaces the call to schedule_timeout() by a call to
    schedule_hrtimeout() and transforms the expiration time from
    timespec to ktime as required.
    
    [ tglx: Fixed whitespace wreckage ]
    
    Signed-off-by: Carsten Emde <C.Emde@osadl.org>
    Tested-by: Pradyumna Sampath <pradysam@gmail.com>
    Cc: Arjan van de Veen <arjan@infradead.org>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    LKML-Reference: <20100402204331.715783034@osadl.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>

commit 56abcf24ff993291b20efd6e3402cd3d12f5cee2
Author: Jack Steiner <steiner@sgi.com>
Date:   Tue Dec 15 16:48:20 2009 -0800

    gru: function to generate chipset IPI values
    
    Create a function to generate the value that is written to the UV hub MMR
    to cause an IPI interrupt to be sent.  The function will be used in the
    GRU message queue error recovery code that sends IPIs to nodes in remote
    partitions.
    
    Signed-off-by: Jack Steiner <steiner@sgi.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit c2c9f115741453715d6b4da1cd2de65af8c7ad86
Author: Robin Holt <holt@sgi.com>
Date:   Tue Dec 15 16:47:56 2009 -0800

    x86: uv: update XPC to handle updated BIOS interface
    
    The UV BIOS has moved the location of some of their pointers to the
    "partition reserved page" from memory into a uv hub MMR.  The GRU does not
    support bcopy operations from MMR space so we need to special case the MMR
    addresses using VLOAD operations.
    
    Additionally, the BIOS call for registering a message queue watchlist has
    removed the 'blade' value and eliminated the structure that was being
    passed in.  This is also reflected in this patch.
    
    Signed-off-by: Robin Holt <holt@sgi.com>
    Cc: Jack Steiner <steiner@sgi.com>
    Cc: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 46690f3718d95e9bb712b6f2b5c869f8494521de
Author: Mimi Zohar <zohar@linux.vnet.ibm.com>
Date:   Fri Jun 26 11:24:05 2009 -0400

    integrity: ima mq_open imbalance msg fix
    
    This patch fixes an imbalance message as reported by Sanchin Sant.
    As we don't need to measure the message queue, just increment the
    counters.
    
    Reported-by: Sanchin Sant <sanchinp@in.ibm.com>
    Signed-off-by: Mimi Zohar <zohar@us.ibm.com>
    Acked-by: Serge Hallyn <serue@us.ibm.com>
    Signed-off-by: James Morris <jmorris@namei.org>

commit d6e2fbce0d70c2072a1c478dbd37b34d27129d74
Author: Jack Steiner <steiner@sgi.com>
Date:   Wed Jun 17 16:28:29 2009 -0700

    gru: fix automatic retry of gru instruction failures
    
    Fix bug in automatic retry of GRU instruction failures.  CBR substatus
    (message queue failure) was being checked incorrectly.
    
    Signed-off-by: Jack Steiner <steiner@sgi.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 17b49a67a6a59f0e9f3c22e67ddb602410e8e182
Author: Jack Steiner <steiner@sgi.com>
Date:   Wed Jun 17 16:28:23 2009 -0700

    gru: fix handling of mesq failures
    
    Fix endcase in handling GRU message queue failures due to NACKs of PUT
    requests.  Must ensure that the "present" bits are cleared before
    resending the message.
    
    Signed-off-by: Jack Steiner <steiner@sgi.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 3fa6b5adbe46b3d665267dee0f879858ab464f44
Author: Hendrik Brueckner <brueckner@linux.vnet.ibm.com>
Date:   Tue Apr 21 06:04:24 2009 +0000

    af_iucv: Fix race when queuing incoming iucv messages
    
    AF_IUCV runs into a race when queuing incoming iucv messages
    and receiving the resulting backlog.
    
    If the Linux system is under pressure (high load or steal time),
    the message queue grows up, but messages are not received and queued
    onto the backlog queue. In that case, applications do not
    receive any data with recvmsg() even if AF_IUCV puts incoming
    messages onto the message queue.
    
    The race can be avoided if the message queue spinlock in the
    message_pending callback is spreaded across the entire callback
    function.
    
    Signed-off-by: Hendrik Brueckner <brueckner@linux.vnet.ibm.com>
    Signed-off-by: Ursula Braun <ursula.braun@de.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7eafd7c74c3f2e67c27621b987b28397110d643f
Author: Serge E. Hallyn <serue@us.ibm.com>
Date:   Mon Apr 6 19:01:10 2009 -0700

    namespaces: ipc namespaces: implement support for posix msqueues
    
    Implement multiple mounts of the mqueue file system, and link it to usage
    of CLONE_NEWIPC.
    
    Each ipc ns has a corresponding mqueuefs superblock.  When a user does
    clone(CLONE_NEWIPC) or unshare(CLONE_NEWIPC), the unshare will cause an
    internal mount of a new mqueuefs sb linked to the new ipc ns.
    
    When a user does 'mount -t mqueue mqueue /dev/mqueue', he mounts the
    mqueuefs superblock.
    
    Posix message queues can be worked with both through the mq_* system calls
    (see mq_overview(7)), and through the VFS through the mqueue mount.  Any
    usage of mq_open() and friends will work with the acting task's ipc
    namespace.  Any actions through the VFS will work with the mqueuefs in
    which the file was created.  So if a user doesn't remount mqueuefs after
    unshare(CLONE_NEWIPC), mq_open("/ab") will not be reflected in "ls
    /dev/mqueue".
    
    If task a mounts mqueue for ipc_ns:1, then clones task b with a new ipcns,
    ipcns:2, and then task a is the last task in ipc_ns:1 to exit, then (1)
    ipc_ns:1 will be freed, (2) it's superblock will live on until task b
    umounts the corresponding mqueuefs, and vfs actions will continue to
    succeed, but (3) sb->s_fs_info will be NULL for the sb corresponding to
    the deceased ipc_ns:1.
    
    To make this happen, we must protect the ipc reference count when
    
    a) a task exits and drops its ipcns->count, since it might be dropping
       it to 0 and freeing the ipcns
    
    b) a task accesses the ipcns through its mqueuefs interface, since it
       bumps the ipcns refcount and might race with the last task in the ipcns
       exiting.
    
    So the kref is changed to an atomic_t so we can use
    atomic_dec_and_lock(&ns->count,mq_lock), and every access to the ipcns
    through ns = mqueuefs_sb->s_fs_info is protected by the same lock.
    
    Signed-off-by: Cedric Le Goater <clg@fr.ibm.com>
    Signed-off-by: Serge E. Hallyn <serue@us.ibm.com>
    Cc: Alexey Dobriyan <adobriyan@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 614b84cf4e4a920d2af32b8f147ea1e3b8c27ea6
Author: Serge E. Hallyn <serue@us.ibm.com>
Date:   Mon Apr 6 19:01:08 2009 -0700

    namespaces: mqueue ns: move mqueue_mnt into struct ipc_namespace
    
    Move mqueue vfsmount plus a few tunables into the ipc_namespace struct.
    The CONFIG_IPC_NS boolean and the ipc_namespace struct will serve both the
    posix message queue namespaces and the SYSV ipc namespaces.
    
    The sysctl code will be fixed separately in patch 3.  After just this
    patch, making a change to posix mqueue tunables always changes the values
    in the initial ipc namespace.
    
    Signed-off-by: Cedric Le Goater <clg@fr.ibm.com>
    Signed-off-by: Serge E. Hallyn <serue@us.ibm.com>
    Cc: Alexey Dobriyan <adobriyan@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 6f2584f47474d29ce829604bfc8b56c10b352fdb
Author: Jack Steiner <steiner@sgi.com>
Date:   Thu Apr 2 16:59:10 2009 -0700

    sgi-gru: add support to the GRU driver for message queue interrupts
    
    Add support to the GRU driver for message queue interrupts.
    
    Signed-off-by: Jack Steiner <steiner@sgi.com>
    Signed-off-by: Dean Nelson <dcn@sgi.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 760df93ecdd59fc1c213a491b5adee79f53606da
Author: Shen Feng <shen@cn.fujitsu.com>
Date:   Thu Apr 2 16:57:20 2009 -0700

    documentation: update Documentation/filesystem/proc.txt and Documentation/sysctls
    
    Now /proc/sys is described in many places and much information is
    redundant.  This patch updates the proc.txt and move the /proc/sys
    desciption out to the files in Documentation/sysctls.
    
    Details are:
    
    merge
    -  2.1  /proc/sys/fs - File system data
    -  2.11 /proc/sys/fs/mqueue - POSIX message queues filesystem
    -  2.17 /proc/sys/fs/epoll - Configuration options for the epoll interface
    with Documentation/sysctls/fs.txt.
    
    remove
    -  2.2  /proc/sys/fs/binfmt_misc - Miscellaneous binary formats
    since it's not better then the Documentation/binfmt_misc.txt.
    
    merge
    -  2.3  /proc/sys/kernel - general kernel parameters
    with Documentation/sysctls/kernel.txt
    
    remove
    -  2.5  /proc/sys/dev - Device specific parameters
    since it's obsolete the sysfs is used now.
    
    remove
    -  2.6  /proc/sys/sunrpc - Remote procedure calls
    since it's not better then the Documentation/sysctls/sunrpc.txt
    
    move
    -  2.7  /proc/sys/net - Networking stuff
    -  2.9  Appletalk
    -  2.10 IPX
    to newly created Documentation/sysctls/net.txt.
    
    remove
    -  2.8  /proc/sys/net/ipv4 - IPV4 settings
    since it's not better then the Documentation/networking/ip-sysctl.txt.
    
    add
    - Chapter 3 Per-Process Parameters
    to descibe /proc/<pid>/xxx parameters.
    
    Signed-off-by: Shen Feng <shen@cn.fujitsu.com>
    Cc: Randy Dunlap <randy.dunlap@oracle.com>
    Cc: "David S. Miller" <davem@davemloft.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 50ce9baeaeb0e7bdff9338fe195735176988cb02
Author: Sukadev Bhattiprolu <sukadev@linux.vnet.ibm.com>
Date:   Wed Jan 7 18:08:50 2009 -0800

    mqueue: fix si_pid value in mqueue do_notify()
    
    commit a6684999f7c6bddd75cf9755ad7ff44435f72fff upstream.
    
    If a process registers for asynchronous notification on a POSIX message
    queue, it gets a signal and a siginfo_t structure when a message arrives
    on the message queue.  The si_pid in the siginfo_t structure is set to the
    PID of the process that sent the message to the message queue.
    
    The principle is the following:
    . when mq_notify(SIGEV_SIGNAL) is called, the caller registers for
      notification when a msg arrives. The associated pid structure is stroed into
      inode_info->notify_owner. Let's call this process P1.
    . when mq_send() is called by say P2, P2 sends a signal to P1 to notify
      him about msg arrival.
    
    The way .si_pid is set today is not correct, since it doesn't take into account
    the fact that the process that is sending the message might not be in the
    same namespace as the notified one.
    
    This patch proposes to set si_pid to the sender's pid into the notify_owner
    namespace.
    
    Signed-off-by: Nadia Derbey <Nadia.Derbey@bull.net>
    Signed-off-by: Sukadev Bhattiprolu <sukadev@linux.vnet.ibm.com>
    Acked-by: Oleg Nesterov <oleg@redhat.com>
    Cc: Roland McGrath <roland@redhat.com>
    Cc: Bastian Blank <bastian@waldi.eu.org>
    Cc: Pavel Emelyanov <xemul@openvz.org>
    Cc: Eric W. Biederman <ebiederm@xmission.com>
    Acked-by: Serge Hallyn <serue@us.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 727cfccf7228713b733297207ae26aa97858f126
Author: Sukadev Bhattiprolu <sukadev@linux.vnet.ibm.com>
Date:   Wed Jan 7 18:08:50 2009 -0800

    mqueue: fix si_pid value in mqueue do_notify()
    
    commit a6684999f7c6bddd75cf9755ad7ff44435f72fff upstream.
    
    If a process registers for asynchronous notification on a POSIX message
    queue, it gets a signal and a siginfo_t structure when a message arrives
    on the message queue.  The si_pid in the siginfo_t structure is set to the
    PID of the process that sent the message to the message queue.
    
    The principle is the following:
    . when mq_notify(SIGEV_SIGNAL) is called, the caller registers for
      notification when a msg arrives. The associated pid structure is stroed into
      inode_info->notify_owner. Let's call this process P1.
    . when mq_send() is called by say P2, P2 sends a signal to P1 to notify
      him about msg arrival.
    
    The way .si_pid is set today is not correct, since it doesn't take into account
    the fact that the process that is sending the message might not be in the
    same namespace as the notified one.
    
    This patch proposes to set si_pid to the sender's pid into the notify_owner
    namespace.
    
    Signed-off-by: Nadia Derbey <Nadia.Derbey@bull.net>
    Signed-off-by: Sukadev Bhattiprolu <sukadev@linux.vnet.ibm.com>
    Acked-by: Oleg Nesterov <oleg@redhat.com>
    Cc: Roland McGrath <roland@redhat.com>
    Cc: Bastian Blank <bastian@waldi.eu.org>
    Cc: Pavel Emelyanov <xemul@openvz.org>
    Cc: Eric W. Biederman <ebiederm@xmission.com>
    Acked-by: Serge Hallyn <serue@us.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit a6684999f7c6bddd75cf9755ad7ff44435f72fff
Author: Sukadev Bhattiprolu <sukadev@linux.vnet.ibm.com>
Date:   Wed Jan 7 18:08:50 2009 -0800

    mqueue: fix si_pid value in mqueue do_notify()
    
    If a process registers for asynchronous notification on a POSIX message
    queue, it gets a signal and a siginfo_t structure when a message arrives
    on the message queue.  The si_pid in the siginfo_t structure is set to the
    PID of the process that sent the message to the message queue.
    
    The principle is the following:
    . when mq_notify(SIGEV_SIGNAL) is called, the caller registers for
      notification when a msg arrives. The associated pid structure is stroed into
      inode_info->notify_owner. Let's call this process P1.
    . when mq_send() is called by say P2, P2 sends a signal to P1 to notify
      him about msg arrival.
    
    The way .si_pid is set today is not correct, since it doesn't take into account
    the fact that the process that is sending the message might not be in the
    same namespace as the notified one.
    
    This patch proposes to set si_pid to the sender's pid into the notify_owner
    namespace.
    
    Signed-off-by: Nadia Derbey <Nadia.Derbey@bull.net>
    Signed-off-by: Sukadev Bhattiprolu <sukadev@linux.vnet.ibm.com>
    Acked-by: Oleg Nesterov <oleg@redhat.com>
    Cc: Roland McGrath <roland@redhat.com>
    Cc: Bastian Blank <bastian@waldi.eu.org>
    Cc: Pavel Emelyanov <xemul@openvz.org>
    Cc: Eric W. Biederman <ebiederm@xmission.com>
    Acked-by: Serge Hallyn <serue@us.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 2525789b4694d78df4f001063f042b2b74227d26
Author: Dean Nelson <dcn@sgi.com>
Date:   Wed Nov 5 17:28:00 2008 -0600

    sgi-xp: create activate and notify gru message queues
    
    For UV add the code to create the activate and notify gru message queues.
    
    Signed-off-by: Dean Nelson <dcn@sgi.com>
    Signed-off-by: H. Peter Anvin <hpa@zytor.com>

commit b231cca4381ee15ec99afbfb244fbc0324869927
Author: Joe Korty <joe.korty@ccur.com>
Date:   Sat Oct 18 20:28:32 2008 -0700

    message queues: increase range limits
    
    Increase the range of various posix message queue limits.
    
    Posix gives the message queue user the ability to 'trade off' the maximum
    size of messages with the number of possible messages that can be 'in
    flight'.  Linux currently makes this trade off more restrictive than it
    needs to be.
    
    In particular, the maximum message size today can be made no smaller than
    8192.  This greatly restricts those applications that would like to have
    the ability to post large numbers of very small messages.
    
    So this task lowers the limit that the maximum message size can be set to,
    from 8192 to 128.  It also lowers the limit that the maximum #number of
    messages in flight can be set to, from 10 to 1.
    
    With these changes the message queue user can make better trade offs
    between #messages and message size, in order to get everything to fit
    within the setrlimit(RLIMIT_MSGQUEUE) limit for that particular user.
    
    This patch also applies the values in
    
            /proc/sys/fs/mqueue/msg_max
            /proc/sys/fs/mqueue/msgsize_max
    
    as the defaults for the max #messages allowed and the max message size
    allowed, respectively, for those applications that do not supply these.
    Previously, the defaults were hardwired to 10 and 8192, respectively.
    
    [akpm@linux-foundation.org: coding-style fixes]
    Signed-off-by: Joe Korty <joe.korty@ccur.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Cc: Nadia Derbey <Nadia.Derbey@bull.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit bd3e64c1759e4930315ebf022611468ee9621486
Author: Dean Nelson <dcn@sgi.com>
Date:   Tue Jul 29 22:34:19 2008 -0700

    sgi-xp: setup the notify GRU message queue
    
    Setup the notify GRU message queue that is used for sending user messages
    on UV systems.
    
    Signed-off-by: Dean Nelson <dcn@sgi.com>
    Cc: Jack Steiner <steiner@sgi.com>
    Cc: "Luck, Tony" <tony.luck@intel.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 5b8669dfd110a62a74eea525a009342f73987ea0
Author: Dean Nelson <dcn@sgi.com>
Date:   Tue Jul 29 22:34:18 2008 -0700

    sgi-xp: setup the activate GRU message queue
    
    Setup the activate GRU message queue that is used for partition activation
    and channel connection on UV systems.
    
    Signed-off-by: Dean Nelson <dcn@sgi.com>
    Cc: Jack Steiner <steiner@sgi.com>
    Cc: "Luck, Tony" <tony.luck@intel.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit a0d092fc2df845a43cc4847836818f49331d0a5c
Author: Pierre Peiffer <pierre.peiffer@bull.net>
Date:   Tue Apr 29 01:00:48 2008 -0700

    IPC/message queues: introduce msgctl_down
    
    Currently, sys_msgctl is not easy to read.
    
    This patch tries to improve that by introducing the msgctl_down function to
    handle all commands requiring the rwmutex to be taken in write mode (ie
    IPC_SET and IPC_RMID for now).  It is the equivalent function of semctl_down
    for message queues.
    
    This greatly changes the readability of sys_msgctl and also harmonizes the way
    these commands are handled among all IPCs.
    
    Signed-off-by: Pierre Peiffer <pierre.peiffer@bull.net>
    Acked-by: Serge Hallyn <serue@us.ibm.com>
    Cc: Nadia Derbey <Nadia.Derbey@bull.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit f7bf3df8be72d98afa84f5ff183e14c1ba1e560d
Author: Nadia Derbey <Nadia.Derbey@bull.net>
Date:   Tue Apr 29 01:00:39 2008 -0700

    ipc: scale msgmni to the amount of lowmem
    
    On large systems we'd like to allow a larger number of message queues.  In
    some cases up to 32K.  However simply setting MSGMNI to a larger value may
    cause problems for smaller systems.
    
    The first patch of this series introduces a default maximum number of message
    queue ids that scales with the amount of lowmem.
    
    Since msgmni is per namespace and there is no amount of memory dedicated to
    each namespace so far, the second patch of this series scales msgmni to the
    number of ipc namespaces too.
    
    Since msgmni depends on the amount of memory, it becomes necessary to
    recompute it upon memory add/remove.  In the 4th patch, memory hotplug
    management is added: a notifier block is registered into the memory hotplug
    notifier chain for the ipc subsystem.  Since the ipc namespaces are not linked
    together, they have their own notification chain: one notifier_block is
    defined per ipc namespace.  Each time an ipc namespace is created (removed) it
    registers (unregisters) its notifier block in (from) the ipcns chain.  The
    callback routine registered in the memory chain invokes the ipcns notifier
    chain with the IPCNS_MEMCHANGE event.  Each callback routine registered in the
    ipcns namespace, in turn, recomputes msgmni for the owning namespace.
    
    The 5th patch makes it possible to keep the memory hotplug notifier chain's
    lock for a lesser amount of time: instead of directly notifying the ipcns
    notifier chain upon memory add/remove, a work item is added to the global
    workqueue.  When activated, this work item is the one who notifies the ipcns
    notifier chain.
    
    Since msgmni depends on the number of ipc namespaces, it becomes necessary to
    recompute it upon ipc namespace creation / removal.  The 6th patch uses the
    ipc namespace notifier chain for that purpose: that chain is notified each
    time an ipc namespace is created or removed.  This makes it possible to
    recompute msgmni for all the namespaces each time one of them is created or
    removed.
    
    When msgmni is explicitely set from userspace, we should avoid recomputing it
    upon memory add/remove or ipcns creation/removal.  This is what the 7th patch
    does: it simply unregisters the ipcns callback routine as soon as msgmni has
    been changed from procfs or sysctl().
    
    Even if msgmni is set by hand, it should be possible to make it back
    automatically recomputed upon memory add/remove or ipcns creation/removal.
    This what is achieved in patch 8: if set to a negative value, msgmni is added
    back to the ipcns notifier chain, making it automatically recomputed again.
    
    This patch:
    
    Compute msg_ctlmni to make it scale with the amount of lowmem.  msg_ctlmni is
    now set to make the message queues occupy 1/32 of the available lowmem.
    
    Some cleaning has also been done for the MSGPOOL constant: the msgctl man page
    says it's not used, but it also defines it as a size in bytes (the code
    expresses it in Kbytes).
    
    Signed-off-by: Nadia Derbey <Nadia.Derbey@bull.net>
    Cc: Yasunori Goto <y-goto@jp.fujitsu.com>
    Cc: Matt Helsley <matthltc@us.ibm.com>
    Cc: Mingming Cao <cmm@us.ibm.com>
    Cc: Pierre Peiffer <pierre.peiffer@bull.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit f66e883eb6186bc43a79581b67aff7d1a69d0ff1
Author: Michael Halcrow <mhalcrow@us.ibm.com>
Date:   Tue Apr 29 00:59:51 2008 -0700

    eCryptfs: integrate eCryptfs device handle into the module.
    
    Update the versioning information.  Make the message types generic.  Add an
    outgoing message queue to the daemon struct.  Make the functions to parse
    and write the packet lengths available to the rest of the module.  Add
    functions to create and destroy the daemon structs.  Clean up some of the
    comments and make the code a little more consistent with itself.
    
    [akpm@linux-foundation.org: printk fixes]
    Signed-off-by: Michael Halcrow <mhalcrow@us.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 8bf2debd5f7bf12d122124e34fec14af5b1e8ecf
Author: Michael Halcrow <mhalcrow@us.ibm.com>
Date:   Tue Apr 29 00:59:50 2008 -0700

    eCryptfs: introduce device handle for userspace daemon communications
    
    A regular device file was my real preference from the get-go, but I went with
    netlink at the time because I thought it would be less complex for managing
    send queues (i.e., just do a unicast and move on).  It turns out that we do
    not really get that much complexity reduction with netlink, and netlink is
    more heavyweight than a device handle.
    
    In addition, the netlink interface to eCryptfs has been broken since 2.6.24.
    I am assuming this is a bug in how eCryptfs uses netlink, since the other
    in-kernel users of netlink do not seem to be having any problems.  I have had
    one report of a user successfully using eCryptfs with netlink on 2.6.24, but
    for my own systems, when starting the userspace daemon, the initial helo
    message sent to the eCryptfs kernel module results in an oops right off the
    bat.  I spent some time looking at it, but I have not yet found the cause.
    The netlink interface breaking gave me the motivation to just finish my patch
    to migrate to a regular device handle.  If I cannot find out soon why the
    netlink interface in eCryptfs broke, I am likely to just send a patch to
    disable it in 2.6.24 and 2.6.25.  I would like the device handle to be the
    preferred means of communicating with the userspace daemon from 2.6.26 on
    forward.
    
    This patch:
    
    Functions to facilitate reading and writing to the eCryptfs miscellaneous
    device handle.  This will replace the netlink interface as the preferred
    mechanism for communicating with the userspace eCryptfs daemon.
    
    Each user has his own daemon, which registers itself by opening the eCryptfs
    device handle.  Only one daemon per euid may be registered at any given time.
    The eCryptfs module sends a message to a daemon by adding its message to the
    daemon's outgoing message queue.  The daemon reads the device handle to get
    the oldest message off the queue.
    
    Incoming messages from the userspace daemon are immediately handled.  If the
    message is a response, then the corresponding process that is blocked waiting
    for the response is awakened.
    
    Signed-off-by: Michael Halcrow <mhalcrow@us.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 970a8645ca051225a32401e4c80b50fc0a49c081
Author: Alexey Dobriyan <adobriyan@sw.ru>
Date:   Tue Oct 16 23:30:09 2007 -0700

    user.c: #ifdef ->mq_bytes
    
    For those who deselect POSIX message queues.
    
    Reduces SLAB size of user_struct from 64 to 32 bytes here, SLUB size -- from
    40 bytes to 32 bytes.
    
    [akpm@linux-foundation.org: fix build]
    Signed-off-by: Alexey Dobriyan <adobriyan@sw.ru>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit f0703c80e5156406ad947cb67fe277725b48080f
Author: Ursula Braun <braunu@de.ibm.com>
Date:   Mon Oct 8 02:03:31 2007 -0700

    [AF_IUCV]: postpone receival of iucv-packets
    
    AF_IUCV socket programs may waste Linux storage, because af_iucv
    allocates an skb whenever posted by the receive callback routine and
    receives the message immediately.
    Message receival is now postponed if data from previous callbacks has
    not yet been transferred to the receiving socket program. Instead a
    message handle is saved in a message queue as a reminder. Once
    messages could be given to the receiving socket program, there is
    an additional checking for entries in the message queue, followed
    by skb allocation and message receival if applicable.
    
    Signed-off-by: Ursula Braun <braunu@de.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 853da0022023c046e0a5ccc51d427745f0c94de7
Merge: 5884c40668a9 0a4ff8c2598b
Author: Linus Torvalds <torvalds@woody.linux-foundation.org>
Date:   Fri May 11 09:57:16 2007 -0700

    Merge branch 'audit.b38' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/audit-current
    
    * 'audit.b38' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/audit-current:
      [PATCH] Abnormal End of Processes
      [PATCH] match audit name data
      [PATCH] complete message queue auditing
      [PATCH] audit inode for all xattr syscalls
      [PATCH] initialize name osid
      [PATCH] audit signal recipients
      [PATCH] add SIGNAL syscall class (v3)
      [PATCH] auditing ptrace

commit 4fc03b9beb2314f3adb9e72b7935a80c577954d1
Author: Amy Griffis <amy.griffis@hp.com>
Date:   Tue Feb 13 14:15:01 2007 -0500

    [PATCH] complete message queue auditing
    
    Handle the edge cases for POSIX message queue auditing. Collect inode
    info when opening an existing mq, and for send/receive operations. Remove
    audit_inode_update() as it has really evolved into the equivalent of
    audit_inode().
    
    Signed-off-by: Amy Griffis <amy.griffis@hp.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit f3ce6a0ead8c557e9acdc733addd23cbc206c7e3
Author: Corey Minyard <minyard@acm.org>
Date:   Wed Nov 8 17:44:52 2006 -0800

    [PATCH] IPMI: Clean up the waiting message queue properly on unload
    
    A wrong function was being used to free a list; this fixes the problem.
    Otherwise, an oops at unload time was possible.  But not likely, since you
    can't have any users when you unload the modules and it is very hard to get
    messages into this queue without users.
    
    Signed-off-by: Corey Minyard <minyard@acm.org>
    Cc: Patrick Schoeller <Patrick.Schoeller@hp.com>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit 1534c3820c26aca4e2567f97b8add8bea40e7e2b
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Wed Sep 20 15:58:25 2006 +0200

    [S390] zcrypt adjunct processor bus.
    
    Add a bus for the adjunct processor interface. Up to 64 devices can
    be connect to the ap bus interface, each device with 16 domains. That
    makes 1024 message queues. The interface is asynchronous, the answer
    to a message sent to a queue needs to be received at some later point
    in time. Unfortunately the interface does not provide interrupts when
    a message reply is pending. So the ap bus needs to implement some
    fancy polling, each active queue is polled once per 1/HZ second or
    continuously if an idle cpus exsists and the poll thread is activ
    (see poll_thread parameter).
    
    The ap bus uses the sysfs path /sys/bus/ap and has two bus attributes,
    ap_domain and config_time. The ap_domain selects one of the 16 domains
    to be used for this system. This limits the maximum number of ap devices
    to 64. The config_time attribute contains the number of seconds between
    two ap bus scans to find new devices.
    
    The ap bus uses the modalias entries of the form "ap:tN" to autoload
    the ap driver for hardware type N. Currently known types are:
    3 - PCICC, 4 - PCICA, 5 - PCIXCC, 6 - CEX2A and 7 - CEX2C.
    
    Signed-off-by: Cornelia Huck <cornelia.huck@de.ibm.com>
    Signed-off-by: Ralph Wuerthner <rwuerthn@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

commit 20ca73bc792be9625af184cbec36e1372611d1c3
Author: George C. Wilson <ltcgcw@us.ibm.com>
Date:   Wed May 24 16:09:55 2006 -0500

    [PATCH] Audit of POSIX Message Queue Syscalls v.2
    
    This patch adds audit support to POSIX message queues.  It applies cleanly to
    the lspp.b15 branch of Al Viro's git tree.  There are new auxiliary data
    structures, and collection and emission routines in kernel/auditsc.c.  New hooks
    in ipc/mqueue.c collect arguments from the syscalls.
    
    I tested the patch by building the examples from the POSIX MQ library tarball.
    Build them -lrt, not against the old MQ library in the tarball.  Here's the URL:
    http://www.geocities.com/wronski12/posix_ipc/libmqueue-4.41.tar.gz
    Do auditctl -a exit,always -S for mq_open, mq_timedsend, mq_timedreceive,
    mq_notify, mq_getsetattr.  mq_unlink has no new hooks.  Please see the
    corresponding userspace patch to get correct output from auditd for the new
    record types.
    
    [fixes folded]
    
    Signed-off-by: George Wilson <ltcgcw@us.ibm.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit ac03221a4fdda9bfdabf99bcd129847f20fc1d80
Author: Linda Knippers <linda.knippers@hp.com>
Date:   Tue May 16 22:03:48 2006 -0400

    [PATCH] update of IPC audit record cleanup
    
    The following patch addresses most of the issues with the IPC_SET_PERM
    records as described in:
    https://www.redhat.com/archives/linux-audit/2006-May/msg00010.html
    and addresses the comments I received on the record field names.
    
    To summarize, I made the following changes:
    
    1. Changed sys_msgctl() and semctl_down() so that an IPC_SET_PERM
       record is emitted in the failure case as well as the success case.
       This matches the behavior in sys_shmctl().  I could simplify the
       code in sys_msgctl() and semctl_down() slightly but it would mean
       that in some error cases we could get an IPC_SET_PERM record
       without an IPC record and that seemed odd.
    
    2. No change to the IPC record type, given no feedback on the backward
       compatibility question.
    
    3. Removed the qbytes field from the IPC record.  It wasn't being
       set and when audit_ipc_obj() is called from ipcperms(), the
       information isn't available.  If we want the information in the IPC
       record, more extensive changes will be necessary.  Since it only
       applies to message queues and it isn't really permission related, it
       doesn't seem worth it.
    
    4. Removed the obj field from the IPC_SET_PERM record.  This means that
       the kern_ipc_perm argument is no longer needed.
    
    5. Removed the spaces and renamed the IPC_SET_PERM field names.  Replaced iuid and
       igid fields with ouid and ogid in the IPC record.
    
    I tested this with the lspp.22 kernel on an x86_64 box.  I believe it
    applies cleanly on the latest kernel.
    
    -- ljk
    
    Signed-off-by: Linda Knippers <linda.knippers@hp.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit 59175839783287d3b03f18460bb3539c69300837
Author: Krzysztof Benedyczak <golbi@mat.uni.torun.pl>
Date:   Tue Sep 27 22:21:36 2005 +0200

    [PATCH] Make POSIX message queue sys_mq_open() honor umask
    
    We ignored umask when creating new queues via mq_open (when creating
    with open() on mqueue fs it is ok of course).  According to the
    specification this a bug.  This trivial patch fixes this.
    
    Signed-off-by: Krzysztof Benedyczak <golbi@mat.uni.torun.pl>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit 9a4f12f65e6eb78411ed7df0b7a6d0b8bdce9ec7
Author: davem@davemloft.net <davem@davemloft.net>
Date:   Fri Apr 29 18:05:22 2005 -0700

    [PATCH] sparc64: use message queue compat syscalls
    
    A couple message queue system call entries for compat tasks
    were not using the necessary compat_sys_*() functions, causing
    some glibc test cases to fail.
    
    From: "David S. Miller" <davem@davemloft.net>
    Signed-off-by: Chris Wright <chrisw@osdl.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 961f8bc9fc91c39a3fe169f3b6d3df1b096769d3
Author: David S. Miller <davem@davemloft.net>
Date:   Sun Apr 17 18:03:10 2005 -0700

    [PATCH] sparc64: use message queue compat syscalls
    
    A couple message queue system call entries for compat tasks
    were not using the necessary compat_sys_*() functions, causing
    some glibc test cases to fail.
    
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>
