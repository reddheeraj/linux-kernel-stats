commit 69a75087cd1f10d5be07527f7ed7ed38db429d7e
Author: Ao Zhong <hacc1225@gmail.com>
Date:   Tue Oct 25 23:17:49 2022 +0200

    drm/amd/display: move remaining FPU code to dml folder
    
    commit 58ddbecb14c792b7fe0d92ae5e25c9179d62ff25 upstream.
    
    pipes[pipe_cnt].pipe.src.dcc_fraction_of_zs_req_luma = 0;
    pipes[pipe_cnt].pipe.src.dcc_fraction_of_zs_req_chroma = 0;
    these two operations in dcn32/dcn32_resource.c still need to use FPU,
    This will cause compilation to fail on ARM64 platforms because
    -mgeneral-regs-only is enabled by default to disable the hardware FPU.
    Therefore, imitate the dcn31_zero_pipe_dcc_fraction function in
    dml/dcn31/dcn31_fpu.c, declare the dcn32_zero_pipe_dcc_fraction function
    in dcn32_fpu.c, and move above two operations into this function.
    
    Reviewed-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Ao Zhong <hacc1225@gmail.com>
    Signed-off-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4ac1437d64efdd2788f8c511276243f594e946fd
Author: Dillon Varone <Dillon.Varone@amd.com>
Date:   Tue Nov 8 18:45:33 2022 -0500

    drm/amd/display: Add check for DET fetch latency hiding for dcn32
    
    [ Upstream commit 6d4727c80947de0e6fad58b196a9d215e3b32608 ]
    
    [WHY?]
    Some configurations are constructed with very marginal DET buffers relative to
    the worst possible time required to fetch a swath.
    
    [HOW?]
    Add a check to see that the DET buffer allocated for each pipe can hide the
    latency for all pipes to fetch at least one swath.
    
    Reviewed-by: Alvin Lee <Alvin.Lee2@amd.com>
    Reviewed-by: Jun Lei <Jun.Lei@amd.com>
    Acked-by: Brian Chang <Brian.Chang@amd.com>
    Signed-off-by: Dillon Varone <Dillon.Varone@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Stable-dep-of: f3c23bea598a ("drm/amd/display: Uninitialized variables causing 4k60 UCLK to stay at DPM1 and not DPM0")
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ec7475a20ceb5bb7d434fbf5d2b7efcb6132ebb5
Author: Wesley Chalmers <Wesley.Chalmers@amd.com>
Date:   Wed Nov 9 17:43:13 2022 -0500

    drm/amd/display: Use the largest vready_offset in pipe group
    
    [ Upstream commit 5842abd985b792a3b13a89b6dae4869b56656c92 ]
    
    [WHY]
    Corruption can occur in LB if vready_offset is not large enough.
    DML calculates vready_offset for each pipe, but we currently select the
    top pipe's vready_offset, which is not necessarily enough for all pipes
    in the group.
    
    [HOW]
    Wherever program_global_sync is currently called, iterate through the
    entire pipe group and find the highest vready_offset.
    
    Reviewed-by: Dillon Varone <Dillon.Varone@amd.com>
    Acked-by: Jasdeep Dhillon <jdhillon@amd.com>
    Signed-off-by: Wesley Chalmers <Wesley.Chalmers@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 2ed52650a287d8f2f2c33357556cb37914acc3ce
Author: George Shen <george.shen@amd.com>
Date:   Tue Nov 1 00:16:56 2022 -0400

    drm/amd/display: Workaround to increase phantom pipe vactive in pipesplit
    
    [ Upstream commit 5b8f9deaf3b6badfc0da968e6e07ceabd19700b6 ]
    
    [Why]
    Certain high resolution displays exhibit DCC line corruption with SubVP
    enabled. This is likely due to insufficient DCC meta data buffered
    immediately after the mclk switch.
    
    [How]
    Add workaround to increase phantom pipe vactive height by
    meta_row_height number of lines, thus increasing the amount of meta data
    buffered immediately after mclk switch finishes.
    
    Reviewed-by: Alvin Lee <Alvin.Lee2@amd.com>
    Acked-by: Tom Chung <chiahsuan.chung@amd.com>
    Signed-off-by: George Shen <george.shen@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f97e6d4af8ea20d851d9faa8133d3b94c2c5aa79
Author: zhikzhai <zhikai.zhai@amd.com>
Date:   Thu Oct 20 11:46:55 2022 -0400

    drm/amd/display: skip commit minimal transition state
    
    [ Upstream commit 1e8fd864afdc7a52df375e888a03b8472fc24f5d ]
    
    [WHY]
    Now dynamic ODM will now be disabled when MPO is required safe
    transitions to avoid underflow, but we are triggering the way of minimal
    transition too often. Commit state of dc with no check will do pipeline
    setup which may re-initialize the component with no need such as audio.
    
    [HOW]
    Just do the minimal transition when all of pipes are in use, otherwise
    return true to skip.
    
    Tested-by: Mark Broadworth <mark.broadworth@amd.com>
    Reviewed-by: Dillon Varone <Dillon.Varone@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: zhikzhai <zhikai.zhai@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5113758a4962dc0df3663eded3121773c6082791
Author: Wesley Chalmers <Wesley.Chalmers@amd.com>
Date:   Wed Nov 9 17:43:13 2022 -0500

    drm/amd/display: Use the largest vready_offset in pipe group
    
    [ Upstream commit 5842abd985b792a3b13a89b6dae4869b56656c92 ]
    
    [WHY]
    Corruption can occur in LB if vready_offset is not large enough.
    DML calculates vready_offset for each pipe, but we currently select the
    top pipe's vready_offset, which is not necessarily enough for all pipes
    in the group.
    
    [HOW]
    Wherever program_global_sync is currently called, iterate through the
    entire pipe group and find the highest vready_offset.
    
    Reviewed-by: Dillon Varone <Dillon.Varone@amd.com>
    Acked-by: Jasdeep Dhillon <jdhillon@amd.com>
    Signed-off-by: Wesley Chalmers <Wesley.Chalmers@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 02c004a7ab07b2a86f7fa1a58295f82a70011a5e
Author: George Shen <george.shen@amd.com>
Date:   Tue Nov 1 00:16:56 2022 -0400

    drm/amd/display: Workaround to increase phantom pipe vactive in pipesplit
    
    [ Upstream commit 5b8f9deaf3b6badfc0da968e6e07ceabd19700b6 ]
    
    [Why]
    Certain high resolution displays exhibit DCC line corruption with SubVP
    enabled. This is likely due to insufficient DCC meta data buffered
    immediately after the mclk switch.
    
    [How]
    Add workaround to increase phantom pipe vactive height by
    meta_row_height number of lines, thus increasing the amount of meta data
    buffered immediately after mclk switch finishes.
    
    Reviewed-by: Alvin Lee <Alvin.Lee2@amd.com>
    Acked-by: Tom Chung <chiahsuan.chung@amd.com>
    Signed-off-by: George Shen <george.shen@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 62095428690c46a4121471df418c9efe061c4f82
Author: Wesley Chalmers <Wesley.Chalmers@amd.com>
Date:   Wed Nov 9 17:43:13 2022 -0500

    drm/amd/display: Use the largest vready_offset in pipe group
    
    [ Upstream commit 5842abd985b792a3b13a89b6dae4869b56656c92 ]
    
    [WHY]
    Corruption can occur in LB if vready_offset is not large enough.
    DML calculates vready_offset for each pipe, but we currently select the
    top pipe's vready_offset, which is not necessarily enough for all pipes
    in the group.
    
    [HOW]
    Wherever program_global_sync is currently called, iterate through the
    entire pipe group and find the highest vready_offset.
    
    Reviewed-by: Dillon Varone <Dillon.Varone@amd.com>
    Acked-by: Jasdeep Dhillon <jdhillon@amd.com>
    Signed-off-by: Wesley Chalmers <Wesley.Chalmers@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7b1d495b44b0bcdcf63d78f39f1641171326e35d
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Nov 18 20:52:01 2022 +0200

    drm/i915: Remove non-existent pipes from bigjoiner pipe mask
    
    [ Upstream commit 3c1ea6a5f4f55d4e376675dda16945eb5d9bb4de ]
    
    bigjoiner_pipes() doesn't consider that:
    - RKL only has three pipes
    - some pipes may be fused off
    
    This means that intel_atomic_check_bigjoiner() won't reject
    all configurations that would need a non-existent pipe.
    Instead we just keep on rolling witout actually having
    reserved the slave pipe we need.
    
    It's possible that we don't outright explode anywhere due to
    this since eg. for_each_intel_crtc_in_pipe_mask() will only
    walk the crtcs we've registered even though the passed in
    pipe_mask asks for more of them. But clearly the thing won't
    do what is expected of it when the required pipes are not
    present.
    
    Fix the problem by consulting the device info pipe_mask already
    in bigjoiner_pipes().
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221118185201.10469-1-ville.syrjala@linux.intel.com
    Reviewed-by: Arun R Murthy <arun.r.murthy@intel.com>
    (cherry picked from commit f1c87a94a1087a26f41007ee83264033007421b5)
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a594533df0f6ca391da003f43d53b336a2d23ffa
Merge: cdb9d3537711 66efff515a65
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Dec 13 11:59:58 2022 -0800

    Merge tag 'drm-next-2022-12-13' of git://anongit.freedesktop.org/drm/drm
    
    Pull drm updates from Dave Airlie:
     "The biggest highlight is that the accel subsystem framework is merged.
      Hopefully for 6.3 we will be able to line up a driver to use it.
    
      In drivers land, i915 enables DG2 support by default now, and nouveau
      has a big stability refactoring and initial ampere support, AMD
      includes new hw IP support and should build on ARM again. There is
      also an ofdrm driver to take over offb on platforms it's used.
    
      Stuff outside my tree, the dma-buf patches hit a few places, the vc4
      firmware changes also do, and i915 has some interactions with MEI for
      discrete GPUs. I think all of those should have been acked/reviewed by
      relevant parties.
    
      New driver:
       - ofdrm - replacement for offb
    
      fbdev:
       - add support for nomodeset
    
      fourcc:
       - add Vivante tiled modifier
    
      core:
       - atomic-helpers: CRTC primary plane test fixes, fb access hooks
       - connector: TV API consistency, cmdline parser improvements
       - send connector hotplug on cleanup
       - sort makefile objects
    
      tests:
       - sort kunit tests
       - improve DP-MST tests
       - add kunit helpers to create a device
    
      sched:
       - module param for scheduling policy
       - refcounting fix
    
      buddy:
       - add back random seed log
    
      ttm:
       - convert ttm_resource to size_t
       - optimize pool allocations
    
      edid:
       - HFVSDB parsing support fixes
       - logging/debug improvements
       - DSC quirks
    
      dma-buf:
       - Add unlocked vmap and attachment mapping
       - move drivers to common locking convention
       - locking improvements
    
      firmware:
       - new API for rPI firmware and vc4
    
      xilinx:
       - zynqmp: displayport bridge support
       - dpsub fix
    
      bridge:
       - adv7533: Remove dynamic lane switching
       - it6505: Runtime PM support, sync improvements
       - ps8640: Handle AUX defer messages
       - tc358775: Drop soft-reset over I2C
    
      panel:
       - panel-edp: Add INX N116BGE-EA2 C2 and C4 support.
       - Jadard JD9365DA-H3
       - NewVision NV3051D
    
      amdgpu:
       - DCN support on ARM
       - DCN 2.1 secure display
       - Sienna Cichlid mode2 reset fixes
       - new GC 11.x firmware versions
       - drop AMD specific DSC workarounds in favour of drm code
       - clang warning fixes
       - scheduler rework
       - SR-IOV fixes
       - GPUVM locking fixes
       - fix memory leak in CS IOCTL error path
       - flexible array updates
       - enable new GC/PSP/SMU/NBIO IP
       - GFX preemption support for gfx9
    
      amdkfd:
       - cache size fixes
       - userptr fixes
       - enable cooperative launch on gfx 10.3
       - enable GC 11.0.4 KFD support
    
      radeon:
       - replace kmap with kmap_local_page
       - ACPI ref count fix
       - HDA audio notifier support
    
      i915:
       - DG2 enabled by default
       - MTL enablement work
       - hotplug refactoring
       - VBT improvements
       - Display and watermark refactoring
       - ADL-P workaround
       - temp disable runtime_pm for discrete-
       - fix for A380 as a secondary GPU
       - Wa_18017747507 for DG2
       - CS timestamp support fixes for gen5 and earlier
       - never purge busy TTM objects
       - use i915_sg_dma_sizes for all backends
       - demote GuC kernel contexts to normal priority
       - gvt: refactor for new MDEV interface
       - enable DC power states on eDP ports
       - fix gen 2/3 workarounds
    
      nouveau:
       - fix page fault handling
       - Ampere acceleration support
       - driver stability improvements
       - nva3 backlight support
    
      msm:
       - MSM_INFO_GET_FLAGS support
       - DPU: XR30 and P010 image formats
       - Qualcomm SM6115 support
       - DSI PHY support for QCM2290
       - HDMI: refactored dev init path
       - remove exclusive-fence hack
       - fix speed-bin detection
       - enable clamp to idle on 7c3
       - improved hangcheck detection
    
      vmwgfx:
       - fb and cursor refactoring
       - convert to generic hashtable
       - cursor improvements
    
      etnaviv:
       - hw workarounds
       - softpin MMU fixes
    
      ast:
       - atomic gamma LUT support
       - convert to SHMEM
    
      lcdif:
       - support YUV planes
       - Increase DMA burst size
       - FIFO threshold tuning
    
      meson:
       - fix return type of cvbs mode_valid
    
      mgag200:
       - fix PLL setup on some revisions
    
      sun4i:
       - A100 and D1 support
    
      udl:
       - modesetting improvements
       - hot unplug support
    
      vc4:
       - support PAL-M
       - fix regression preventing 4K @ 60Hz
       - fix NULL ptr deref
    
      v3d:
       - switch to drm managed resources
    
      renesas:
       - RZ/G2L DSI support
       - DU Kconfig cleanup
    
      mediatek:
       - fixup dpi and hdmi
       - MT8188 dpi support
       - MT8195 AFBC support
    
      tegra:
       - NVDEC hardware on Tegra234 SoC
    
      hdlcd:
       - switch to drm managed resources
    
      ingenic:
       - fix registration error path
    
      hisilicon:
       - convert to drm_mode_init
    
      maildp:
       - use managed resources
    
      mtk:
       - use drm_mode_init
    
      rockchip:
       - use drm_mode_copy"
    
    * tag 'drm-next-2022-12-13' of git://anongit.freedesktop.org/drm/drm: (1397 commits)
      drm/amdgpu: fix mmhub register base coding error
      drm/amdgpu: add tmz support for GC IP v11.0.4
      drm/amdgpu: enable GFX Clock Gating control for GC IP v11.0.4
      drm/amdgpu: enable GFX Power Gating for GC IP v11.0.4
      drm/amdgpu: enable GFX IP v11.0.4 CG support
      drm/amdgpu: Make amdgpu_ring_mux functions as static
      drm/amdgpu: generally allow over-commit during BO allocation
      drm/amd/display: fix array index out of bound error in DCN32 DML
      drm/amd/display: 3.2.215
      drm/amd/display: set optimized required for comp buf changes
      drm/amd/display: Add debug option to skip PSR CRTC disable
      drm/amd/display: correct DML calc error of UrgentLatency
      drm/amd/display: correct static_screen_event_mask
      drm/amd/display: Ensure commit_streams returns the DC return code
      drm/amd/display: read invalid ddc pin status cause engine busy
      drm/amd/display: Bypass DET swath fill check for max clocks
      drm/amd/display: Disable uclk pstate for subvp pipes
      drm/amd/display: Fix DCN2.1 default DSC clocks
      drm/amd/display: Enable dp_hdmi21_pcon support
      drm/amd/display: prevent seamless boot on displays that don't have the preferred dig
      ...

commit e61aebe38714d5f3b320002d19167f57b8cd3b93
Author: Dillon Varone <Dillon.Varone@amd.com>
Date:   Wed Nov 23 10:44:16 2022 -0500

    drm/amd/display: Disable uclk pstate for subvp pipes
    
    [Description]
    When subvp is in use, main pipes should block unintended natural uclk pstate
    changes to prevent disruption to the state machine.
    
    Reviewed-by: Alvin Lee <Alvin.Lee2@amd.com>
    Acked-by: Stylon Wang <stylon.wang@amd.com>
    Signed-off-by: Dillon Varone <Dillon.Varone@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit c290db013742e98fe5b64073bc2dd8c8a2ac9e4c
Merge: bdaa78c6aa86 c082fbd687ad
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Dec 2 15:35:21 2022 -0800

    Merge tag 'drm-fixes-2022-12-02' of git://anongit.freedesktop.org/drm/drm
    
    Pull drm fixes from Dave Airlie:
     "Things do seem to have finally settled down, just four i915 and one
      amdgpu this week. Probably won't have much for next week if you do
      push rc8 out.
    
      i915:
       - Fix dram info readout
       - Remove non-existent pipes from bigjoiner pipe mask
       - Fix negative value passed as remaining time
       - Never return 0 if not all requests retired
    
      amdgpu:
       - VCN fix for vangogh"
    
    * tag 'drm-fixes-2022-12-02' of git://anongit.freedesktop.org/drm/drm:
      drm/amdgpu: enable Vangogh VCN indirect sram mode
      drm/i915: Never return 0 if not all requests retired
      drm/i915: Fix negative value passed as remaining time
      drm/i915: Remove non-existent pipes from bigjoiner pipe mask
      drm/i915/mtl: Fix dram info readout

commit 65a388250e391b7127efd6751f64f3e4955e43a0
Merge: b7b275e60bcd 12b8b046e4c9
Author: Dave Airlie <airlied@redhat.com>
Date:   Fri Dec 2 07:34:27 2022 +1000

    Merge tag 'drm-intel-fixes-2022-12-01' of git://anongit.freedesktop.org/drm/drm-intel into drm-fixes
    
    - Fix dram info readout (Radhakrishna Sripada)
    - Remove non-existent pipes from bigjoiner pipe mask (Ville Syrjälä)
    - Fix negative value passed as remaining time (Janusz Krzysztofik)
    - Never return 0 if not all requests retired (Janusz Krzysztofik)
    
    Signed-off-by: Dave Airlie <airlied@redhat.com>
    From: Tvrtko Ursulin <tvrtko.ursulin@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/Y4hp+a3TJ13t2ZA1@tursulin-desk

commit aaae52110a381033d960c087bd276e2a857eb7cb
Author: Alvin Lee <Alvin.Lee2@amd.com>
Date:   Thu Nov 17 11:55:52 2022 -0500

    drm/amd/display: Retain phantom pipes when min transition into subvp (#7358)
    
    [Description]
    - When entering into a SubVP config that requires a minimal
      transition we need to retain phantom pipes and also restore
      the mall config
    - This is because the min transition will remove phantom pipes
      from the context (shallow copy) and not restore it's original
      state
    - This is just a workaround, and needs a proper fix
    
    Reviewed-by: Jun Lei <Jun.Lei@amd.com>
    Acked-by: Jasdeep Dhillon <jdhillon@amd.com>
    Signed-off-by: Alvin Lee <Alvin.Lee2@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 719b59a3fac159e974164b3d52c9ad763a5d6bc8
Author: Dillon Varone <Dillon.Varone@amd.com>
Date:   Wed Nov 16 10:03:23 2022 -0500

    drm/amd/display: MALL SS calculations should iterate over all pipes for cursor
    
    [Description]
    MALL SS allocation calculations should iterate over all pipes to determine the
    the allocation size required for HW cursor.
    
    Reviewed-by: Alvin Lee <Alvin.Lee2@amd.com>
    Acked-by: Jasdeep Dhillon <jdhillon@amd.com>
    Signed-off-by: Dillon Varone <Dillon.Varone@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 5842abd985b792a3b13a89b6dae4869b56656c92
Author: Wesley Chalmers <Wesley.Chalmers@amd.com>
Date:   Wed Nov 9 17:43:13 2022 -0500

    drm/amd/display: Use the largest vready_offset in pipe group
    
    [WHY]
    Corruption can occur in LB if vready_offset is not large enough.
    DML calculates vready_offset for each pipe, but we currently select the
    top pipe's vready_offset, which is not necessarily enough for all pipes
    in the group.
    
    [HOW]
    Wherever program_global_sync is currently called, iterate through the
    entire pipe group and find the highest vready_offset.
    
    Reviewed-by: Dillon Varone <Dillon.Varone@amd.com>
    Acked-by: Jasdeep Dhillon <jdhillon@amd.com>
    Signed-off-by: Wesley Chalmers <Wesley.Chalmers@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 3c1ea6a5f4f55d4e376675dda16945eb5d9bb4de
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Nov 18 20:52:01 2022 +0200

    drm/i915: Remove non-existent pipes from bigjoiner pipe mask
    
    bigjoiner_pipes() doesn't consider that:
    - RKL only has three pipes
    - some pipes may be fused off
    
    This means that intel_atomic_check_bigjoiner() won't reject
    all configurations that would need a non-existent pipe.
    Instead we just keep on rolling witout actually having
    reserved the slave pipe we need.
    
    It's possible that we don't outright explode anywhere due to
    this since eg. for_each_intel_crtc_in_pipe_mask() will only
    walk the crtcs we've registered even though the passed in
    pipe_mask asks for more of them. But clearly the thing won't
    do what is expected of it when the required pipes are not
    present.
    
    Fix the problem by consulting the device info pipe_mask already
    in bigjoiner_pipes().
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221118185201.10469-1-ville.syrjala@linux.intel.com
    Reviewed-by: Arun R Murthy <arun.r.murthy@intel.com>
    (cherry picked from commit f1c87a94a1087a26f41007ee83264033007421b5)
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>

commit 5af16182c5639349415118e9e9aecd8355f7a08b
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Sat Aug 27 00:27:46 2022 +0900

    9p/trans_fd: always use O_NONBLOCK read/write
    
    commit ef575281b21e9a34dfae544a187c6aac2ae424a9 upstream.
    
    syzbot is reporting hung task at p9_fd_close() [1], for p9_mux_poll_stop()
     from p9_conn_destroy() from p9_fd_close() is failing to interrupt already
    started kernel_read() from p9_fd_read() from p9_read_work() and/or
    kernel_write() from p9_fd_write() from p9_write_work() requests.
    
    Since p9_socket_open() sets O_NONBLOCK flag, p9_mux_poll_stop() does not
    need to interrupt kernel_read()/kernel_write(). However, since p9_fd_open()
    does not set O_NONBLOCK flag, but pipe blocks unless signal is pending,
    p9_mux_poll_stop() needs to interrupt kernel_read()/kernel_write() when
    the file descriptor refers to a pipe. In other words, pipe file descriptor
    needs to be handled as if socket file descriptor.
    
    We somehow need to interrupt kernel_read()/kernel_write() on pipes.
    
    A minimal change, which this patch is doing, is to set O_NONBLOCK flag
     from p9_fd_open(), for O_NONBLOCK flag does not affect reading/writing
    of regular files. But this approach changes O_NONBLOCK flag on userspace-
    supplied file descriptors (which might break userspace programs), and
    O_NONBLOCK flag could be changed by userspace. It would be possible to set
    O_NONBLOCK flag every time p9_fd_read()/p9_fd_write() is invoked, but still
    remains small race window for clearing O_NONBLOCK flag.
    
    If we don't want to manipulate O_NONBLOCK flag, we might be able to
    surround kernel_read()/kernel_write() with set_thread_flag(TIF_SIGPENDING)
    and recalc_sigpending(). Since p9_read_work()/p9_write_work() works are
    processed by kernel threads which process global system_wq workqueue,
    signals could not be delivered from remote threads when p9_mux_poll_stop()
     from p9_conn_destroy() from p9_fd_close() is called. Therefore, calling
    set_thread_flag(TIF_SIGPENDING)/recalc_sigpending() every time would be
    needed if we count on signals for making kernel_read()/kernel_write()
    non-blocking.
    
    Link: https://lkml.kernel.org/r/345de429-a88b-7097-d177-adecf9fed342@I-love.SAKURA.ne.jp
    Link: https://syzkaller.appspot.com/bug?extid=8b41a1365f1106fd0f33 [1]
    Reported-by: syzbot <syzbot+8b41a1365f1106fd0f33@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Tested-by: syzbot <syzbot+8b41a1365f1106fd0f33@syzkaller.appspotmail.com>
    Reviewed-by: Christian Schoenebeck <linux_oss@crudebyte.com>
    [Dominique: add comment at Christian's suggestion]
    Signed-off-by: Dominique Martinet <asmadeus@codewreck.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 65d3c9275229e7f9df2d615a21e9996242fa24b4
Author: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
Date:   Thu Oct 6 17:26:48 2022 -0400

    drm/amd/display: Remove wrong pipe control lock
    
    [ Upstream commit ca08a1725d0d78efca8d2dbdbce5ea70355da0f2 ]
    
    When using a device based on DCN32/321,
    we have an issue where a second
    4k@60Hz display does not light up,
    and the system becomes unresponsive
    for a few minutes. In the debug process,
    it was possible to see a hang
    in the function dcn20_post_unlock_program_front_end
    in this part:
    
    for (j = 0; j < TIMEOUT_FOR_PIPE_ENABLE_MS*1000
            && hubp->funcs->hubp_is_flip_pending(hubp); j++)
            mdelay(1);
    }
    
    The hubp_is_flip_pending always returns positive
    for waiting pending flips which is a symptom of
    pipe hang. Additionally, the dmesg log shows
    this message after a few minutes:
    
      BUG: soft lockup - CPU#4 stuck for 26s!
      ...
      [  +0.000003]  dcn20_post_unlock_program_front_end+0x112/0x340 [amdgpu]
      [  +0.000171]  dc_commit_state_no_check+0x63d/0xbf0 [amdgpu]
      [  +0.000155]  ? dc_validate_global_state+0x358/0x3d0 [amdgpu]
      [  +0.000154]  dc_commit_state+0xe2/0xf0 [amdgpu]
    
    This confirmed the hypothesis that we had a pipe
    hanging somewhere. Next, after checking the
    ftrace entries, we have the below weird
    sequence:
    
     [..]
      2)               |        dcn10_lock_all_pipes [amdgpu]() {
      2)   0.120 us    |          optc1_is_tg_enabled [amdgpu]();
      2)               |          dcn20_pipe_control_lock [amdgpu]() {
      2)               |            dc_dmub_srv_clear_inbox0_ack [amdgpu]() {
      2)   0.121 us    |              amdgpu_dm_dmub_reg_write [amdgpu]();
      2)   0.551 us    |            }
      2)               |            dc_dmub_srv_send_inbox0_cmd [amdgpu]() {
      2)   0.110 us    |              amdgpu_dm_dmub_reg_write [amdgpu]();
      2)   0.511 us    |            }
      2)               |            dc_dmub_srv_wait_for_inbox0_ack [amdgpu]() {
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
     [..]
    
    We are not expected to read from dmub register
    so many times and for so long. From the trace log,
    it was possible to identify that the function
    dcn20_pipe_control_lock was triggering the dmub
    operation when it was unnecessary and causing
    the hang issue. This commit drops the unnecessary
    dmub code and, consequently, fixes the second display not
    lighting up the issue.
    
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Acked-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
    Signed-off-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0e07032b4b4724b8ad1003698cb81083c1818999
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Sat Aug 27 00:27:46 2022 +0900

    9p/trans_fd: always use O_NONBLOCK read/write
    
    commit ef575281b21e9a34dfae544a187c6aac2ae424a9 upstream.
    
    syzbot is reporting hung task at p9_fd_close() [1], for p9_mux_poll_stop()
     from p9_conn_destroy() from p9_fd_close() is failing to interrupt already
    started kernel_read() from p9_fd_read() from p9_read_work() and/or
    kernel_write() from p9_fd_write() from p9_write_work() requests.
    
    Since p9_socket_open() sets O_NONBLOCK flag, p9_mux_poll_stop() does not
    need to interrupt kernel_read()/kernel_write(). However, since p9_fd_open()
    does not set O_NONBLOCK flag, but pipe blocks unless signal is pending,
    p9_mux_poll_stop() needs to interrupt kernel_read()/kernel_write() when
    the file descriptor refers to a pipe. In other words, pipe file descriptor
    needs to be handled as if socket file descriptor.
    
    We somehow need to interrupt kernel_read()/kernel_write() on pipes.
    
    A minimal change, which this patch is doing, is to set O_NONBLOCK flag
     from p9_fd_open(), for O_NONBLOCK flag does not affect reading/writing
    of regular files. But this approach changes O_NONBLOCK flag on userspace-
    supplied file descriptors (which might break userspace programs), and
    O_NONBLOCK flag could be changed by userspace. It would be possible to set
    O_NONBLOCK flag every time p9_fd_read()/p9_fd_write() is invoked, but still
    remains small race window for clearing O_NONBLOCK flag.
    
    If we don't want to manipulate O_NONBLOCK flag, we might be able to
    surround kernel_read()/kernel_write() with set_thread_flag(TIF_SIGPENDING)
    and recalc_sigpending(). Since p9_read_work()/p9_write_work() works are
    processed by kernel threads which process global system_wq workqueue,
    signals could not be delivered from remote threads when p9_mux_poll_stop()
     from p9_conn_destroy() from p9_fd_close() is called. Therefore, calling
    set_thread_flag(TIF_SIGPENDING)/recalc_sigpending() every time would be
    needed if we count on signals for making kernel_read()/kernel_write()
    non-blocking.
    
    Link: https://lkml.kernel.org/r/345de429-a88b-7097-d177-adecf9fed342@I-love.SAKURA.ne.jp
    Link: https://syzkaller.appspot.com/bug?extid=8b41a1365f1106fd0f33 [1]
    Reported-by: syzbot <syzbot+8b41a1365f1106fd0f33@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Tested-by: syzbot <syzbot+8b41a1365f1106fd0f33@syzkaller.appspotmail.com>
    Reviewed-by: Christian Schoenebeck <linux_oss@crudebyte.com>
    [Dominique: add comment at Christian's suggestion]
    Signed-off-by: Dominique Martinet <asmadeus@codewreck.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 004decd41b32cbdecbafade726ec27853c0c2449
Author: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
Date:   Thu Oct 6 17:26:48 2022 -0400

    drm/amd/display: Remove wrong pipe control lock
    
    [ Upstream commit ca08a1725d0d78efca8d2dbdbce5ea70355da0f2 ]
    
    When using a device based on DCN32/321,
    we have an issue where a second
    4k@60Hz display does not light up,
    and the system becomes unresponsive
    for a few minutes. In the debug process,
    it was possible to see a hang
    in the function dcn20_post_unlock_program_front_end
    in this part:
    
    for (j = 0; j < TIMEOUT_FOR_PIPE_ENABLE_MS*1000
            && hubp->funcs->hubp_is_flip_pending(hubp); j++)
            mdelay(1);
    }
    
    The hubp_is_flip_pending always returns positive
    for waiting pending flips which is a symptom of
    pipe hang. Additionally, the dmesg log shows
    this message after a few minutes:
    
      BUG: soft lockup - CPU#4 stuck for 26s!
      ...
      [  +0.000003]  dcn20_post_unlock_program_front_end+0x112/0x340 [amdgpu]
      [  +0.000171]  dc_commit_state_no_check+0x63d/0xbf0 [amdgpu]
      [  +0.000155]  ? dc_validate_global_state+0x358/0x3d0 [amdgpu]
      [  +0.000154]  dc_commit_state+0xe2/0xf0 [amdgpu]
    
    This confirmed the hypothesis that we had a pipe
    hanging somewhere. Next, after checking the
    ftrace entries, we have the below weird
    sequence:
    
     [..]
      2)               |        dcn10_lock_all_pipes [amdgpu]() {
      2)   0.120 us    |          optc1_is_tg_enabled [amdgpu]();
      2)               |          dcn20_pipe_control_lock [amdgpu]() {
      2)               |            dc_dmub_srv_clear_inbox0_ack [amdgpu]() {
      2)   0.121 us    |              amdgpu_dm_dmub_reg_write [amdgpu]();
      2)   0.551 us    |            }
      2)               |            dc_dmub_srv_send_inbox0_cmd [amdgpu]() {
      2)   0.110 us    |              amdgpu_dm_dmub_reg_write [amdgpu]();
      2)   0.511 us    |            }
      2)               |            dc_dmub_srv_wait_for_inbox0_ack [amdgpu]() {
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
     [..]
    
    We are not expected to read from dmub register
    so many times and for so long. From the trace log,
    it was possible to identify that the function
    dcn20_pipe_control_lock was triggering the dmub
    operation when it was unnecessary and causing
    the hang issue. This commit drops the unnecessary
    dmub code and, consequently, fixes the second display not
    lighting up the issue.
    
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Acked-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
    Signed-off-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a8e2fc8f7b41fa9d9ca5f624f4e4d34fce5b40a9
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Sat Aug 27 00:27:46 2022 +0900

    9p/trans_fd: always use O_NONBLOCK read/write
    
    commit ef575281b21e9a34dfae544a187c6aac2ae424a9 upstream.
    
    syzbot is reporting hung task at p9_fd_close() [1], for p9_mux_poll_stop()
     from p9_conn_destroy() from p9_fd_close() is failing to interrupt already
    started kernel_read() from p9_fd_read() from p9_read_work() and/or
    kernel_write() from p9_fd_write() from p9_write_work() requests.
    
    Since p9_socket_open() sets O_NONBLOCK flag, p9_mux_poll_stop() does not
    need to interrupt kernel_read()/kernel_write(). However, since p9_fd_open()
    does not set O_NONBLOCK flag, but pipe blocks unless signal is pending,
    p9_mux_poll_stop() needs to interrupt kernel_read()/kernel_write() when
    the file descriptor refers to a pipe. In other words, pipe file descriptor
    needs to be handled as if socket file descriptor.
    
    We somehow need to interrupt kernel_read()/kernel_write() on pipes.
    
    A minimal change, which this patch is doing, is to set O_NONBLOCK flag
     from p9_fd_open(), for O_NONBLOCK flag does not affect reading/writing
    of regular files. But this approach changes O_NONBLOCK flag on userspace-
    supplied file descriptors (which might break userspace programs), and
    O_NONBLOCK flag could be changed by userspace. It would be possible to set
    O_NONBLOCK flag every time p9_fd_read()/p9_fd_write() is invoked, but still
    remains small race window for clearing O_NONBLOCK flag.
    
    If we don't want to manipulate O_NONBLOCK flag, we might be able to
    surround kernel_read()/kernel_write() with set_thread_flag(TIF_SIGPENDING)
    and recalc_sigpending(). Since p9_read_work()/p9_write_work() works are
    processed by kernel threads which process global system_wq workqueue,
    signals could not be delivered from remote threads when p9_mux_poll_stop()
     from p9_conn_destroy() from p9_fd_close() is called. Therefore, calling
    set_thread_flag(TIF_SIGPENDING)/recalc_sigpending() every time would be
    needed if we count on signals for making kernel_read()/kernel_write()
    non-blocking.
    
    Link: https://lkml.kernel.org/r/345de429-a88b-7097-d177-adecf9fed342@I-love.SAKURA.ne.jp
    Link: https://syzkaller.appspot.com/bug?extid=8b41a1365f1106fd0f33 [1]
    Reported-by: syzbot <syzbot+8b41a1365f1106fd0f33@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Tested-by: syzbot <syzbot+8b41a1365f1106fd0f33@syzkaller.appspotmail.com>
    Reviewed-by: Christian Schoenebeck <linux_oss@crudebyte.com>
    [Dominique: add comment at Christian's suggestion]
    Signed-off-by: Dominique Martinet <asmadeus@codewreck.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f0187227e2b8a8377d6d3847b656099ed81e9f1a
Author: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
Date:   Thu Oct 6 17:26:48 2022 -0400

    drm/amd/display: Remove wrong pipe control lock
    
    [ Upstream commit ca08a1725d0d78efca8d2dbdbce5ea70355da0f2 ]
    
    When using a device based on DCN32/321,
    we have an issue where a second
    4k@60Hz display does not light up,
    and the system becomes unresponsive
    for a few minutes. In the debug process,
    it was possible to see a hang
    in the function dcn20_post_unlock_program_front_end
    in this part:
    
    for (j = 0; j < TIMEOUT_FOR_PIPE_ENABLE_MS*1000
            && hubp->funcs->hubp_is_flip_pending(hubp); j++)
            mdelay(1);
    }
    
    The hubp_is_flip_pending always returns positive
    for waiting pending flips which is a symptom of
    pipe hang. Additionally, the dmesg log shows
    this message after a few minutes:
    
      BUG: soft lockup - CPU#4 stuck for 26s!
      ...
      [  +0.000003]  dcn20_post_unlock_program_front_end+0x112/0x340 [amdgpu]
      [  +0.000171]  dc_commit_state_no_check+0x63d/0xbf0 [amdgpu]
      [  +0.000155]  ? dc_validate_global_state+0x358/0x3d0 [amdgpu]
      [  +0.000154]  dc_commit_state+0xe2/0xf0 [amdgpu]
    
    This confirmed the hypothesis that we had a pipe
    hanging somewhere. Next, after checking the
    ftrace entries, we have the below weird
    sequence:
    
     [..]
      2)               |        dcn10_lock_all_pipes [amdgpu]() {
      2)   0.120 us    |          optc1_is_tg_enabled [amdgpu]();
      2)               |          dcn20_pipe_control_lock [amdgpu]() {
      2)               |            dc_dmub_srv_clear_inbox0_ack [amdgpu]() {
      2)   0.121 us    |              amdgpu_dm_dmub_reg_write [amdgpu]();
      2)   0.551 us    |            }
      2)               |            dc_dmub_srv_send_inbox0_cmd [amdgpu]() {
      2)   0.110 us    |              amdgpu_dm_dmub_reg_write [amdgpu]();
      2)   0.511 us    |            }
      2)               |            dc_dmub_srv_wait_for_inbox0_ack [amdgpu]() {
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
     [..]
    
    We are not expected to read from dmub register
    so many times and for so long. From the trace log,
    it was possible to identify that the function
    dcn20_pipe_control_lock was triggering the dmub
    operation when it was unnecessary and causing
    the hang issue. This commit drops the unnecessary
    dmub code and, consequently, fixes the second display not
    lighting up the issue.
    
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Acked-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
    Signed-off-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b1ad04da7fe4515e2ce2d5f2dcab3b5b6d45614b
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Sat Aug 27 00:27:46 2022 +0900

    9p/trans_fd: always use O_NONBLOCK read/write
    
    commit ef575281b21e9a34dfae544a187c6aac2ae424a9 upstream.
    
    syzbot is reporting hung task at p9_fd_close() [1], for p9_mux_poll_stop()
     from p9_conn_destroy() from p9_fd_close() is failing to interrupt already
    started kernel_read() from p9_fd_read() from p9_read_work() and/or
    kernel_write() from p9_fd_write() from p9_write_work() requests.
    
    Since p9_socket_open() sets O_NONBLOCK flag, p9_mux_poll_stop() does not
    need to interrupt kernel_read()/kernel_write(). However, since p9_fd_open()
    does not set O_NONBLOCK flag, but pipe blocks unless signal is pending,
    p9_mux_poll_stop() needs to interrupt kernel_read()/kernel_write() when
    the file descriptor refers to a pipe. In other words, pipe file descriptor
    needs to be handled as if socket file descriptor.
    
    We somehow need to interrupt kernel_read()/kernel_write() on pipes.
    
    A minimal change, which this patch is doing, is to set O_NONBLOCK flag
     from p9_fd_open(), for O_NONBLOCK flag does not affect reading/writing
    of regular files. But this approach changes O_NONBLOCK flag on userspace-
    supplied file descriptors (which might break userspace programs), and
    O_NONBLOCK flag could be changed by userspace. It would be possible to set
    O_NONBLOCK flag every time p9_fd_read()/p9_fd_write() is invoked, but still
    remains small race window for clearing O_NONBLOCK flag.
    
    If we don't want to manipulate O_NONBLOCK flag, we might be able to
    surround kernel_read()/kernel_write() with set_thread_flag(TIF_SIGPENDING)
    and recalc_sigpending(). Since p9_read_work()/p9_write_work() works are
    processed by kernel threads which process global system_wq workqueue,
    signals could not be delivered from remote threads when p9_mux_poll_stop()
     from p9_conn_destroy() from p9_fd_close() is called. Therefore, calling
    set_thread_flag(TIF_SIGPENDING)/recalc_sigpending() every time would be
    needed if we count on signals for making kernel_read()/kernel_write()
    non-blocking.
    
    Link: https://lkml.kernel.org/r/345de429-a88b-7097-d177-adecf9fed342@I-love.SAKURA.ne.jp
    Link: https://syzkaller.appspot.com/bug?extid=8b41a1365f1106fd0f33 [1]
    Reported-by: syzbot <syzbot+8b41a1365f1106fd0f33@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Tested-by: syzbot <syzbot+8b41a1365f1106fd0f33@syzkaller.appspotmail.com>
    Reviewed-by: Christian Schoenebeck <linux_oss@crudebyte.com>
    [Dominique: add comment at Christian's suggestion]
    Signed-off-by: Dominique Martinet <asmadeus@codewreck.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7abf40f06a76c0dff42eada10597917e9776fbd4
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Sat Aug 27 00:27:46 2022 +0900

    9p/trans_fd: always use O_NONBLOCK read/write
    
    commit ef575281b21e9a34dfae544a187c6aac2ae424a9 upstream.
    
    syzbot is reporting hung task at p9_fd_close() [1], for p9_mux_poll_stop()
     from p9_conn_destroy() from p9_fd_close() is failing to interrupt already
    started kernel_read() from p9_fd_read() from p9_read_work() and/or
    kernel_write() from p9_fd_write() from p9_write_work() requests.
    
    Since p9_socket_open() sets O_NONBLOCK flag, p9_mux_poll_stop() does not
    need to interrupt kernel_read()/kernel_write(). However, since p9_fd_open()
    does not set O_NONBLOCK flag, but pipe blocks unless signal is pending,
    p9_mux_poll_stop() needs to interrupt kernel_read()/kernel_write() when
    the file descriptor refers to a pipe. In other words, pipe file descriptor
    needs to be handled as if socket file descriptor.
    
    We somehow need to interrupt kernel_read()/kernel_write() on pipes.
    
    A minimal change, which this patch is doing, is to set O_NONBLOCK flag
     from p9_fd_open(), for O_NONBLOCK flag does not affect reading/writing
    of regular files. But this approach changes O_NONBLOCK flag on userspace-
    supplied file descriptors (which might break userspace programs), and
    O_NONBLOCK flag could be changed by userspace. It would be possible to set
    O_NONBLOCK flag every time p9_fd_read()/p9_fd_write() is invoked, but still
    remains small race window for clearing O_NONBLOCK flag.
    
    If we don't want to manipulate O_NONBLOCK flag, we might be able to
    surround kernel_read()/kernel_write() with set_thread_flag(TIF_SIGPENDING)
    and recalc_sigpending(). Since p9_read_work()/p9_write_work() works are
    processed by kernel threads which process global system_wq workqueue,
    signals could not be delivered from remote threads when p9_mux_poll_stop()
     from p9_conn_destroy() from p9_fd_close() is called. Therefore, calling
    set_thread_flag(TIF_SIGPENDING)/recalc_sigpending() every time would be
    needed if we count on signals for making kernel_read()/kernel_write()
    non-blocking.
    
    Link: https://lkml.kernel.org/r/345de429-a88b-7097-d177-adecf9fed342@I-love.SAKURA.ne.jp
    Link: https://syzkaller.appspot.com/bug?extid=8b41a1365f1106fd0f33 [1]
    Reported-by: syzbot <syzbot+8b41a1365f1106fd0f33@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Tested-by: syzbot <syzbot+8b41a1365f1106fd0f33@syzkaller.appspotmail.com>
    Reviewed-by: Christian Schoenebeck <linux_oss@crudebyte.com>
    [Dominique: add comment at Christian's suggestion]
    Signed-off-by: Dominique Martinet <asmadeus@codewreck.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9f8554615df668e4bf83294633ee9d232b28ce45
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Sat Aug 27 00:27:46 2022 +0900

    9p/trans_fd: always use O_NONBLOCK read/write
    
    commit ef575281b21e9a34dfae544a187c6aac2ae424a9 upstream.
    
    syzbot is reporting hung task at p9_fd_close() [1], for p9_mux_poll_stop()
     from p9_conn_destroy() from p9_fd_close() is failing to interrupt already
    started kernel_read() from p9_fd_read() from p9_read_work() and/or
    kernel_write() from p9_fd_write() from p9_write_work() requests.
    
    Since p9_socket_open() sets O_NONBLOCK flag, p9_mux_poll_stop() does not
    need to interrupt kernel_read()/kernel_write(). However, since p9_fd_open()
    does not set O_NONBLOCK flag, but pipe blocks unless signal is pending,
    p9_mux_poll_stop() needs to interrupt kernel_read()/kernel_write() when
    the file descriptor refers to a pipe. In other words, pipe file descriptor
    needs to be handled as if socket file descriptor.
    
    We somehow need to interrupt kernel_read()/kernel_write() on pipes.
    
    A minimal change, which this patch is doing, is to set O_NONBLOCK flag
     from p9_fd_open(), for O_NONBLOCK flag does not affect reading/writing
    of regular files. But this approach changes O_NONBLOCK flag on userspace-
    supplied file descriptors (which might break userspace programs), and
    O_NONBLOCK flag could be changed by userspace. It would be possible to set
    O_NONBLOCK flag every time p9_fd_read()/p9_fd_write() is invoked, but still
    remains small race window for clearing O_NONBLOCK flag.
    
    If we don't want to manipulate O_NONBLOCK flag, we might be able to
    surround kernel_read()/kernel_write() with set_thread_flag(TIF_SIGPENDING)
    and recalc_sigpending(). Since p9_read_work()/p9_write_work() works are
    processed by kernel threads which process global system_wq workqueue,
    signals could not be delivered from remote threads when p9_mux_poll_stop()
     from p9_conn_destroy() from p9_fd_close() is called. Therefore, calling
    set_thread_flag(TIF_SIGPENDING)/recalc_sigpending() every time would be
    needed if we count on signals for making kernel_read()/kernel_write()
    non-blocking.
    
    Link: https://lkml.kernel.org/r/345de429-a88b-7097-d177-adecf9fed342@I-love.SAKURA.ne.jp
    Link: https://syzkaller.appspot.com/bug?extid=8b41a1365f1106fd0f33 [1]
    Reported-by: syzbot <syzbot+8b41a1365f1106fd0f33@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Tested-by: syzbot <syzbot+8b41a1365f1106fd0f33@syzkaller.appspotmail.com>
    Reviewed-by: Christian Schoenebeck <linux_oss@crudebyte.com>
    [Dominique: add comment at Christian's suggestion]
    Signed-off-by: Dominique Martinet <asmadeus@codewreck.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0b5e6bd72b8171364616841603a70e4ba9837063
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Sat Aug 27 00:27:46 2022 +0900

    9p/trans_fd: always use O_NONBLOCK read/write
    
    commit ef575281b21e9a34dfae544a187c6aac2ae424a9 upstream.
    
    syzbot is reporting hung task at p9_fd_close() [1], for p9_mux_poll_stop()
     from p9_conn_destroy() from p9_fd_close() is failing to interrupt already
    started kernel_read() from p9_fd_read() from p9_read_work() and/or
    kernel_write() from p9_fd_write() from p9_write_work() requests.
    
    Since p9_socket_open() sets O_NONBLOCK flag, p9_mux_poll_stop() does not
    need to interrupt kernel_read()/kernel_write(). However, since p9_fd_open()
    does not set O_NONBLOCK flag, but pipe blocks unless signal is pending,
    p9_mux_poll_stop() needs to interrupt kernel_read()/kernel_write() when
    the file descriptor refers to a pipe. In other words, pipe file descriptor
    needs to be handled as if socket file descriptor.
    
    We somehow need to interrupt kernel_read()/kernel_write() on pipes.
    
    A minimal change, which this patch is doing, is to set O_NONBLOCK flag
     from p9_fd_open(), for O_NONBLOCK flag does not affect reading/writing
    of regular files. But this approach changes O_NONBLOCK flag on userspace-
    supplied file descriptors (which might break userspace programs), and
    O_NONBLOCK flag could be changed by userspace. It would be possible to set
    O_NONBLOCK flag every time p9_fd_read()/p9_fd_write() is invoked, but still
    remains small race window for clearing O_NONBLOCK flag.
    
    If we don't want to manipulate O_NONBLOCK flag, we might be able to
    surround kernel_read()/kernel_write() with set_thread_flag(TIF_SIGPENDING)
    and recalc_sigpending(). Since p9_read_work()/p9_write_work() works are
    processed by kernel threads which process global system_wq workqueue,
    signals could not be delivered from remote threads when p9_mux_poll_stop()
     from p9_conn_destroy() from p9_fd_close() is called. Therefore, calling
    set_thread_flag(TIF_SIGPENDING)/recalc_sigpending() every time would be
    needed if we count on signals for making kernel_read()/kernel_write()
    non-blocking.
    
    Link: https://lkml.kernel.org/r/345de429-a88b-7097-d177-adecf9fed342@I-love.SAKURA.ne.jp
    Link: https://syzkaller.appspot.com/bug?extid=8b41a1365f1106fd0f33 [1]
    Reported-by: syzbot <syzbot+8b41a1365f1106fd0f33@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Tested-by: syzbot <syzbot+8b41a1365f1106fd0f33@syzkaller.appspotmail.com>
    Reviewed-by: Christian Schoenebeck <linux_oss@crudebyte.com>
    [Dominique: add comment at Christian's suggestion]
    Signed-off-by: Dominique Martinet <asmadeus@codewreck.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 544b6bec67fc893bc8906d59ff03fb93f69c07fc
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Thu Oct 20 22:28:51 2022 +0100

    media: atomisp: Remove accelerator pipe creation code
    
    The ATOMISP_ACC_* custom ioctls and the ACC device node have been removed
    in commit a5c17adbadcb ("media: atomisp: Remove the ACC device node").
    
    This means that pipe_configs[pipe_id].acc_extension now never gets set
    which causes atomisp_compat_css20.c: __create_pipe() to always skip
    creation of pipes with a pipe_id of IA_CSS_PIPE_ID_ACC / a mode of
    IA_CSS_PIPE_MODE_ACC.
    
    This allows removing of the acc_pipe creation / handling code
    from mainly sh_css.c and a bunch of other places.
    
    Reviewed-by: Andy Shevchenko <andy@kernel.org>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>

commit ddb97ea7cdb6462d7a719c649f58858b083f7eed
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Nov 18 20:52:01 2022 +0200

    drm/i915: Remove non-existent pipes from bigjoiner pipe mask
    
    bigjoiner_pipes() doesn't consider that:
    - RKL only has three pipes
    - some pipes may be fused off
    
    This means that intel_atomic_check_bigjoiner() won't reject
    all configurations that would need a non-existent pipe.
    Instead we just keep on rolling witout actually having
    reserved the slave pipe we need.
    
    It's possible that we don't outright explode anywhere due to
    this since eg. for_each_intel_crtc_in_pipe_mask() will only
    walk the crtcs we've registered even though the passed in
    pipe_mask asks for more of them. But clearly the thing won't
    do what is expected of it when the required pipes are not
    present.
    
    Fix the problem by consulting the device info pipe_mask already
    in bigjoiner_pipes().
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221118185201.10469-1-ville.syrjala@linux.intel.com
    Reviewed-by: Arun R Murthy <arun.r.murthy@intel.com>
    (cherry picked from commit f1c87a94a1087a26f41007ee83264033007421b5)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>

commit 9b216b7e38f5381bcc3ad21c5ac614aa577ab8f2
Author: Alvin Lee <Alvin.Lee2@amd.com>
Date:   Fri Nov 11 12:14:37 2022 -0500

    drm/amd/display: Retain phantom plane/stream if validation fails
    
    [Description]
    - If we fail validation, we should retain the phantom
      stream/planes
    - Full updates assume that phantom pipes will be fully
      removed, but if validation fails we keep the phantom
      pipes
    - Therefore we have to retain the plane/stream if validation
      fails (since the refcount is decremented before validation,
      and the expectation is that it's fully freed when the  old
      dc_state is released)
    
    Reviewed-by: Jun Lei <Jun.Lei@amd.com>
    Acked-by: Brian Chang <Brian.Chang@amd.com>
    Signed-off-by: Alvin Lee <Alvin.Lee2@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 6d4727c80947de0e6fad58b196a9d215e3b32608
Author: Dillon Varone <Dillon.Varone@amd.com>
Date:   Tue Nov 8 18:45:33 2022 -0500

    drm/amd/display: Add check for DET fetch latency hiding for dcn32
    
    [WHY?]
    Some configurations are constructed with very marginal DET buffers relative to
    the worst possible time required to fetch a swath.
    
    [HOW?]
    Add a check to see that the DET buffer allocated for each pipe can hide the
    latency for all pipes to fetch at least one swath.
    
    Reviewed-by: Alvin Lee <Alvin.Lee2@amd.com>
    Reviewed-by: Jun Lei <Jun.Lei@amd.com>
    Acked-by: Brian Chang <Brian.Chang@amd.com>
    Signed-off-by: Dillon Varone <Dillon.Varone@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 9a31c06ff7d45a909162076d9f446f925acce76a
Author: Aric Cyr <Aric.Cyr@amd.com>
Date:   Sun Nov 6 20:37:34 2022 -0500

    drm/amd/display: 3.2.212
    
    DC version 3.2.212 brings along the following fixes:
    
    - Fix DPIA AUX timeout issue
    - Add HUBP surface flip interrupt handler
    - Fix dpms_off issue when disabling bios mode
    - Update SubVP Visual Confirm
    - Program pipes for ODM when removing planes
    - Use min transition for all SubVP plane add/remove
    - Support parsing VRAM info v3.0 from VBIOS
    - Enable dchub request limit for NV32
    - Workaround to increase phantom pipe vactive in pipesplit
    - Fix dcn3.1x mode validation on high bandwidth config
    - Check context constructed for pipe split flags after pipesplit
    - Align phantom pipe dst/src scaling with main for subvp
    - Fix calculation for cursor CAB allocation
    - Fix unbounded requesting for high pixel rate modes on dcn315
    - Revert Disable DRR actions during state commit
    - Fix array index out of bound error in bios parser
    - Fix optc2_configure warning on dcn314
    - Fix Subvp phantom pipe transition
    - Fix prefetch calculations for dcn32
    - Use uclk pstate latency for fw assisted mclk validation dcn32
    - Set max for prefetch lines on dcn32
    - Rework macros for DWB register access
    - Adjust DP 8b10b LT exit behavior
    
    Reviewed-by: Tom Chung <chiahsuan.chung@amd.com>
    Acked-by: Tom Chung <chiahsuan.chung@amd.com>
    Signed-off-by: Aric Cyr <Aric.Cyr@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 31494626cec4bdac43e92ff653812650d147d691
Author: Dillon Varone <Dillon.Varone@amd.com>
Date:   Mon Oct 31 19:08:23 2022 -0400

    drm/amd/display: Check context constructed for pipe split flags is still valid
    
    [WHY?]
    After applying pipesplit flags, DML can select a different configuration upon
    revalidation, despite the desired one still being valid.
    
    [HOW?]
    Check the configuration is still has mode support, and apply it.
    
    Reviewed-by: Martin Leung <Martin.Leung@amd.com>
    Acked-by: Tom Chung <chiahsuan.chung@amd.com>
    Signed-off-by: Dillon Varone <Dillon.Varone@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 5b8f9deaf3b6badfc0da968e6e07ceabd19700b6
Author: George Shen <george.shen@amd.com>
Date:   Tue Nov 1 00:16:56 2022 -0400

    drm/amd/display: Workaround to increase phantom pipe vactive in pipesplit
    
    [Why]
    Certain high resolution displays exhibit DCC line corruption with SubVP
    enabled. This is likely due to insufficient DCC meta data buffered
    immediately after the mclk switch.
    
    [How]
    Add workaround to increase phantom pipe vactive height by
    meta_row_height number of lines, thus increasing the amount of meta data
    buffered immediately after mclk switch finishes.
    
    Reviewed-by: Alvin Lee <Alvin.Lee2@amd.com>
    Acked-by: Tom Chung <chiahsuan.chung@amd.com>
    Signed-off-by: George Shen <george.shen@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit e4c1b01bc35b04e15782608165aa85b9e1724f7b
Author: Alvin Lee <Alvin.Lee2@amd.com>
Date:   Wed Nov 2 12:38:12 2022 -0400

    drm/amd/display: Use min transition for all SubVP plane add/remove
    
    [Description]
    - Whenever disabling a phantom pipe, we must run through the
      minimal transition sequence
    - In the case where SetVisibility = false for the main pipe,
      we also need to run through the min transtion when disabling
      the phantom pipes
    
    Reviewed-by: Jun Lei <Jun.Lei@amd.com>
    Acked-by: Tom Chung <chiahsuan.chung@amd.com>
    Signed-off-by: Alvin Lee <Alvin.Lee2@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 1cb69b43550b6c20819decba870db34175677b2a
Author: Dillon Varone <Dillon.Varone@amd.com>
Date:   Tue Nov 1 16:38:20 2022 -0400

    drm/amd/display: Program pipes for ODM when removing planes
    
    [WHY?]
    Software state expects pipes to be configured for ODM, but due to the transition
    occurring on a plane disable, the ODM enablement code is not run.
    
    [HOW?]
    Update ODM when removing a plane, and dynamic ODM is active. Also acquire pipe
    lock when removing a plane.
    
    Reviewed-by: Alvin Lee <Alvin.Lee2@amd.com>
    Acked-by: Tom Chung <chiahsuan.chung@amd.com>
    Signed-off-by: Dillon Varone <Dillon.Varone@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit d417ef7bd76a281e95c0965fce691923b953ab10
Author: David Galiffi <David.Galiffi@amd.com>
Date:   Fri Oct 21 22:22:46 2022 -0400

    drm/amd/display: Update SubVP Visual Confirm
    
    [Why]
    The visual confirm bar is displayed on all displays, but is only
    updated on a flip. If an update causes SubVP to be disabled on
    all displays, but there are no updates on the other displays, it
    will lead to stale information displayed on the non-active
    displays. An example of this is playing a fullscreen video on a
    rotated display.
    
    [How]
    Add a procedure to update visual confirm color for all pipes when
    committing a plane.
    
    Reviewed-by: Alvin Lee <Alvin.Lee2@amd.com>
    Acked-by: Tom Chung <chiahsuan.chung@amd.com>
    Signed-off-by: David Galiffi <David.Galiffi@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 7fbf451e7639f4ce41e2e3e802e5c521c1827b48
Author: Dillon Varone <Dillon.Varone@amd.com>
Date:   Mon Oct 17 18:51:15 2022 -0400

    drm/amd/display: Reinit DPG when exiting dynamic ODM
    
    [WHY]
    DPG must be returned to initialized state when pipe is disabled.
    
    [HOW]
    Reinit DPG on unused pipes when exiting dynamic ODM.
    
    Reviewed-by: Alvin Lee <Alvin.Lee2@amd.com>
    Acked-by: Alex Hung <alex.hung@amd.com>
    Signed-off-by: Dillon Varone <Dillon.Varone@amd.com>
    Tested-by: Mark Broadworth <mark.broadworth@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 58ddbecb14c792b7fe0d92ae5e25c9179d62ff25
Author: Ao Zhong <hacc1225@gmail.com>
Date:   Tue Oct 25 23:17:49 2022 +0200

    drm/amd/display: move remaining FPU code to dml folder
    
    pipes[pipe_cnt].pipe.src.dcc_fraction_of_zs_req_luma = 0;
    pipes[pipe_cnt].pipe.src.dcc_fraction_of_zs_req_chroma = 0;
    these two operations in dcn32/dcn32_resource.c still need to use FPU,
    This will cause compilation to fail on ARM64 platforms because
    -mgeneral-regs-only is enabled by default to disable the hardware FPU.
    Therefore, imitate the dcn31_zero_pipe_dcc_fraction function in
    dml/dcn31/dcn31_fpu.c, declare the dcn32_zero_pipe_dcc_fraction function
    in dcn32_fpu.c, and move above two operations into this function.
    
    Reviewed-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Ao Zhong <hacc1225@gmail.com>
    Signed-off-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 1e8fd864afdc7a52df375e888a03b8472fc24f5d
Author: zhikzhai <zhikai.zhai@amd.com>
Date:   Thu Oct 20 11:46:55 2022 -0400

    drm/amd/display: skip commit minimal transition state
    
    [WHY]
    Now dynamic ODM will now be disabled when MPO is required safe
    transitions to avoid underflow, but we are triggering the way of minimal
    transition too often. Commit state of dc with no check will do pipeline
    setup which may re-initialize the component with no need such as audio.
    
    [HOW]
    Just do the minimal transition when all of pipes are in use, otherwise
    return true to skip.
    
    Tested-by: Mark Broadworth <mark.broadworth@amd.com>
    Reviewed-by: Dillon Varone <Dillon.Varone@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: zhikzhai <zhikai.zhai@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit ca08a1725d0d78efca8d2dbdbce5ea70355da0f2
Author: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
Date:   Thu Oct 6 17:26:48 2022 -0400

    drm/amd/display: Remove wrong pipe control lock
    
    When using a device based on DCN32/321,
    we have an issue where a second
    4k@60Hz display does not light up,
    and the system becomes unresponsive
    for a few minutes. In the debug process,
    it was possible to see a hang
    in the function dcn20_post_unlock_program_front_end
    in this part:
    
    for (j = 0; j < TIMEOUT_FOR_PIPE_ENABLE_MS*1000
            && hubp->funcs->hubp_is_flip_pending(hubp); j++)
            mdelay(1);
    }
    
    The hubp_is_flip_pending always returns positive
    for waiting pending flips which is a symptom of
    pipe hang. Additionally, the dmesg log shows
    this message after a few minutes:
    
      BUG: soft lockup - CPU#4 stuck for 26s!
      ...
      [  +0.000003]  dcn20_post_unlock_program_front_end+0x112/0x340 [amdgpu]
      [  +0.000171]  dc_commit_state_no_check+0x63d/0xbf0 [amdgpu]
      [  +0.000155]  ? dc_validate_global_state+0x358/0x3d0 [amdgpu]
      [  +0.000154]  dc_commit_state+0xe2/0xf0 [amdgpu]
    
    This confirmed the hypothesis that we had a pipe
    hanging somewhere. Next, after checking the
    ftrace entries, we have the below weird
    sequence:
    
     [..]
      2)               |        dcn10_lock_all_pipes [amdgpu]() {
      2)   0.120 us    |          optc1_is_tg_enabled [amdgpu]();
      2)               |          dcn20_pipe_control_lock [amdgpu]() {
      2)               |            dc_dmub_srv_clear_inbox0_ack [amdgpu]() {
      2)   0.121 us    |              amdgpu_dm_dmub_reg_write [amdgpu]();
      2)   0.551 us    |            }
      2)               |            dc_dmub_srv_send_inbox0_cmd [amdgpu]() {
      2)   0.110 us    |              amdgpu_dm_dmub_reg_write [amdgpu]();
      2)   0.511 us    |            }
      2)               |            dc_dmub_srv_wait_for_inbox0_ack [amdgpu]() {
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
     [..]
    
    We are not expected to read from dmub register
    so many times and for so long. From the trace log,
    it was possible to identify that the function
    dcn20_pipe_control_lock was triggering the dmub
    operation when it was unnecessary and causing
    the hang issue. This commit drops the unnecessary
    dmub code and, consequently, fixes the second display not
    lighting up the issue.
    
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Acked-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
    Signed-off-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 345b16961afe0deae8633ce10dbff46c7e64e35f
Author: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
Date:   Thu Oct 6 17:26:48 2022 -0400

    drm/amd/display: Remove wrong pipe control lock
    
    When using a device based on DCN32/321,
    we have an issue where a second
    4k@60Hz display does not light up,
    and the system becomes unresponsive
    for a few minutes. In the debug process,
    it was possible to see a hang
    in the function dcn20_post_unlock_program_front_end
    in this part:
    
    for (j = 0; j < TIMEOUT_FOR_PIPE_ENABLE_MS*1000
            && hubp->funcs->hubp_is_flip_pending(hubp); j++)
            mdelay(1);
    }
    
    The hubp_is_flip_pending always returns positive
    for waiting pending flips which is a symptom of
    pipe hang. Additionally, the dmesg log shows
    this message after a few minutes:
    
      BUG: soft lockup - CPU#4 stuck for 26s!
      ...
      [  +0.000003]  dcn20_post_unlock_program_front_end+0x112/0x340 [amdgpu]
      [  +0.000171]  dc_commit_state_no_check+0x63d/0xbf0 [amdgpu]
      [  +0.000155]  ? dc_validate_global_state+0x358/0x3d0 [amdgpu]
      [  +0.000154]  dc_commit_state+0xe2/0xf0 [amdgpu]
    
    This confirmed the hypothesis that we had a pipe
    hanging somewhere. Next, after checking the
    ftrace entries, we have the below weird
    sequence:
    
     [..]
      2)               |        dcn10_lock_all_pipes [amdgpu]() {
      2)   0.120 us    |          optc1_is_tg_enabled [amdgpu]();
      2)               |          dcn20_pipe_control_lock [amdgpu]() {
      2)               |            dc_dmub_srv_clear_inbox0_ack [amdgpu]() {
      2)   0.121 us    |              amdgpu_dm_dmub_reg_write [amdgpu]();
      2)   0.551 us    |            }
      2)               |            dc_dmub_srv_send_inbox0_cmd [amdgpu]() {
      2)   0.110 us    |              amdgpu_dm_dmub_reg_write [amdgpu]();
      2)   0.511 us    |            }
      2)               |            dc_dmub_srv_wait_for_inbox0_ack [amdgpu]() {
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
      2)   0.110 us    |              amdgpu_dm_dmub_reg_read [amdgpu]();
     [..]
    
    We are not expected to read from dmub register
    so many times and for so long. From the trace log,
    it was possible to identify that the function
    dcn20_pipe_control_lock was triggering the dmub
    operation when it was unnecessary and causing
    the hang issue. This commit drops the unnecessary
    dmub code and, consequently, fixes the second display not
    lighting up the issue.
    
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Acked-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
    Signed-off-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 7de5b6b54630c670af6822bebe70ff7b4281dc23
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Oct 21 19:24:41 2022 +0300

    drm/i915: Don't flag both full modeset and fastset at the same time
    
    Be consistent in whether we flag a full modeset or a
    fastset for the pipe. intel_modeset_all_pipes() would
    seem to be the only codepath not getting this right.
    
    The other case is when we flag the fastset initially,
    currently we just clear the mode_changed flag and set
    the update_pipe flag. But we could still have
    connectors_changed==true or active_changed==true forcing
    a full modeset anyway. So check for that after clearing
    the mode_changed flag.
    
    And let's add a WARN to make sure we did get it right.
    
    v2: Deal with {connectors,active}_changed
    
    Reviewed-by: Jani Nikula <jani.nikula@intel.com> #v1
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20221021162442.27283-4-ville.syrjala@linux.intel.com

commit 0a4594886dd904b73541188c875bf378c463cbbc
Author: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
Date:   Wed Sep 28 17:20:17 2022 +0200

    arm64: dts: qcom: sdm845: drop unused slimbus properties
    
    Drop properties from slimbus node: unneeded status and
    downstream-related qcom,apps-ch-pipes/qcom,ea-pc (not documented, not
    used).
    
    Signed-off-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Tested-by: Steev Klimaszewski <steev@kali.org>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20220928152027.489543-2-krzysztof.kozlowski@linaro.org

commit e50f67cf5e168d92e24cfb61fb11f2f0a35708cd
Author: Aurabindo Pillai <aurabindo.pillai@amd.com>
Date:   Thu Sep 29 11:15:12 2022 -0400

    drm/amd/display: Do not trigger timing sync for phantom pipes
    
    [Why&How]
    Doing timing sync seqence for phantom pipes will not go through since
    they are not fully programmed like normal pipes. Skip the sequence on
    such pipes
    
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Reviewed-by: Alvin Lee <Alvin.Lee2@amd.com>
    Acked-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
    Signed-off-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 599cc77efae7e4dc5700be2f422dac331e7b4d06
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Jun 22 18:54:51 2022 +0300

    drm/i915: Write watermarks for disabled pipes on gmch platforms
    
    We've excluded gmch platforms from writing the final watermarks
    for any disabled pipe. IIRC the reason was perhaps some lingering
    issue with the watermark merging across the pipes. But I can't
    really see any reason for this anymore, so let's unify this behaviour.
    The main benefit being more consistency in register dumps when
    we don't have stale watermarks hanging around in the registers.
    Functionally there should be no difference as the hardware just
    ignore all of it when the pipe is disabled.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220622155452.32587-9-ville.syrjala@linux.intel.com
    Reviewed-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>

commit ef575281b21e9a34dfae544a187c6aac2ae424a9
Author: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Date:   Sat Aug 27 00:27:46 2022 +0900

    9p/trans_fd: always use O_NONBLOCK read/write
    
    syzbot is reporting hung task at p9_fd_close() [1], for p9_mux_poll_stop()
     from p9_conn_destroy() from p9_fd_close() is failing to interrupt already
    started kernel_read() from p9_fd_read() from p9_read_work() and/or
    kernel_write() from p9_fd_write() from p9_write_work() requests.
    
    Since p9_socket_open() sets O_NONBLOCK flag, p9_mux_poll_stop() does not
    need to interrupt kernel_read()/kernel_write(). However, since p9_fd_open()
    does not set O_NONBLOCK flag, but pipe blocks unless signal is pending,
    p9_mux_poll_stop() needs to interrupt kernel_read()/kernel_write() when
    the file descriptor refers to a pipe. In other words, pipe file descriptor
    needs to be handled as if socket file descriptor.
    
    We somehow need to interrupt kernel_read()/kernel_write() on pipes.
    
    A minimal change, which this patch is doing, is to set O_NONBLOCK flag
     from p9_fd_open(), for O_NONBLOCK flag does not affect reading/writing
    of regular files. But this approach changes O_NONBLOCK flag on userspace-
    supplied file descriptors (which might break userspace programs), and
    O_NONBLOCK flag could be changed by userspace. It would be possible to set
    O_NONBLOCK flag every time p9_fd_read()/p9_fd_write() is invoked, but still
    remains small race window for clearing O_NONBLOCK flag.
    
    If we don't want to manipulate O_NONBLOCK flag, we might be able to
    surround kernel_read()/kernel_write() with set_thread_flag(TIF_SIGPENDING)
    and recalc_sigpending(). Since p9_read_work()/p9_write_work() works are
    processed by kernel threads which process global system_wq workqueue,
    signals could not be delivered from remote threads when p9_mux_poll_stop()
     from p9_conn_destroy() from p9_fd_close() is called. Therefore, calling
    set_thread_flag(TIF_SIGPENDING)/recalc_sigpending() every time would be
    needed if we count on signals for making kernel_read()/kernel_write()
    non-blocking.
    
    Link: https://lkml.kernel.org/r/345de429-a88b-7097-d177-adecf9fed342@I-love.SAKURA.ne.jp
    Link: https://syzkaller.appspot.com/bug?extid=8b41a1365f1106fd0f33 [1]
    Reported-by: syzbot <syzbot+8b41a1365f1106fd0f33@syzkaller.appspotmail.com>
    Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Tested-by: syzbot <syzbot+8b41a1365f1106fd0f33@syzkaller.appspotmail.com>
    Reviewed-by: Christian Schoenebeck <linux_oss@crudebyte.com>
    [Dominique: add comment at Christian's suggestion]
    Signed-off-by: Dominique Martinet <asmadeus@codewreck.org>

commit 07ebc18c047adcd72905619e72ae7c48db28ab48
Author: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
Date:   Thu Sep 22 09:24:12 2022 -0400

    drm/amd/display: Disconnect DSC for unused pipes during ODM transition
    
    [Why]
    During transition from ODM combine to ODM bypass, if DSC is enabled need
    to disconnect the DSC mux for pipes no longer in use.
    
    [How]
    During ODM update, detect pipes with DSC that are no longer being used
    for new state and call new DSC interface to disconnect.
    
    Add new DSC interface to disconnect from pipe
    
    Reviewed-by: Alvin Lee <Alvin.Lee2@amd.com>
    Signed-off-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 3f4dee59253a6882acde98a2a027e55f1330ae86
Author: Dillon Varone <Dillon.Varone@amd.com>
Date:   Fri Sep 23 14:00:09 2022 -0400

    drm/amd/display: Fix merging dynamic ODM+MPO configs on DCN32
    
    [WHY&HOW?]
    When merging ODM pipes that are using MPO, we must copy the stream_res
    from the new top pipe to the bottom pipe so that the overlayed plane is
    not pointing to the wrong stream assets.
    
    Reviewed-by: Martin Leung <Martin.Leung@amd.com>
    Reviewed-by: Jun Lei <Jun.Lei@amd.com>
    Acked-by: Hamza Mahfooz <hamza.mahfooz@amd.com>
    Signed-off-by: Dillon Varone <Dillon.Varone@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit e4e481e4d838f30985dd46d43ed195110ed265f5
Author: Zhikai Zhai <zhikai.zhai@amd.com>
Date:   Tue Sep 20 18:51:02 2022 +0800

    drm/amd/display: skip commit minimal transition state
    
    [WHY]
    Now dynamic ODM will now be disabled when MPO is required safe
    transitions to avoid underflow, but we are triggering the way of
    minimal transition too often. Commit state of dc with no check
    will do pipeline setup which may re-initialize the component with no
    need such as audio.
    
    [HOW]
    Just do the minimal transition when all of pipes are in use, otherwise
    return true to skip.
    
    Reviewed-by: Dillon Varone <Dillon.Varone@amd.com>
    Acked-by: Hamza Mahfooz <hamza.mahfooz@amd.com>
    Signed-off-by: Zhikai Zhai <zhikai.zhai@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 380202c84454e89d29a9abc670f09b9145617d58
Author: Alvin Lee <Alvin.Lee2@amd.com>
Date:   Wed Sep 21 12:04:25 2022 -0400

    drm/amd/display: For SubVP pipe split case use min transition into MPO
    
    [Description]
    - For SubVP pipe split case we need to use a minimial transition
      when opening MPO video since we are transitioning from 4 pipes
      to 3 pipes where an OPP for a previous MPCC will change
    - Also save and restore mall config when doing fast_validate in case
      there was a shallow copy of the dc->current_state
    
    Reviewed-by: Jun Lei <Jun.Lei@amd.com>
    Acked-by: Hamza Mahfooz <hamza.mahfooz@amd.com>
    Signed-off-by: Alvin Lee <Alvin.Lee2@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit ab5220bb5a910246c61512a9e29a4e2406cb1ecd
Author: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
Date:   Thu Sep 8 11:37:58 2022 -0400

    drm/amd/display: fix dcn315 dml detile overestimation
    
    DML does not take the fact that dcn315 does not have enough detile
    buffer to max all pipes. This change adds a workaround to apply
    the same logic DC does when calculating detile buffer size in DML.
    
    Reviewed-by: Charlene Liu <Charlene.Liu@amd.com>
    Acked-by: Hamza Mahfooz <hamza.mahfooz@amd.com>
    Signed-off-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 0c31611437b7155f115919a24f31673ffe94deee
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Sep 28 09:08:13 2022 +0300

    drm/i915: Add some debug prints for intel_modeset_all_pipes()
    
    Print out on which pipes, and for what reason, we are forcing a
    full modeset.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220928060813.23264-1-ville.syrjala@linux.intel.com
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>

commit ce438e99015871b9226c27066fe72fc05f18e8bf
Author: Aric Cyr <aric.cyr@amd.com>
Date:   Sun Sep 18 12:20:03 2022 -0400

    drm/amd/display: 3.2.205
    
    This version brings along following fixes:
    
        - LTTPR mode can be be dynamically changed
        - fixes divide by zero error
        - features able to use same interface to update cursor info
        - fixes for llvm compilation issues
        - Fixes DIO FIFO underflow and other FIFO errors
        - Partially valid EDIDs handled properly
        - Phatom pipes are skipped when checking pending flip
        - Fixed audio on audio on display after unplugging
    
    Acked-by: Jasdeep Dhillon <jdhillon@amd.com>
    Signed-off-by: Aric Cyr <aric.cyr@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 1e939ea1bf4917095575fe4ff1a42578ff234605
Author: Dillon Varone <Dillon.Varone@amd.com>
Date:   Fri Sep 9 12:49:55 2022 -0400

    drm/amd/display: Fix various dynamic ODM transitions on DCN32
    
    [Why&How]
    
    Several transitions were fixed that will allow Dynamic ODM and MPO
    transitions to be supported on DCN32.
    
    1) Due to resource limitations, in certain scenarios that require an MPO
    plane to be split, the features cannot be combined with the current
    policy. This is due to unsafe transitions being required (OPP instance
    per MPCC being switched on active pipe is not supported by DCN), to
    support the split plane with ODM active as it moves across the viewport.
    Dynamic ODM will now be disabled when MPO is required.
    
    2) When exiting MPO and re-entering ODM, DC assigns an inactive pipe for
    the next ODM pipe, which under previous power gating policy would result
    in programming a gated DSC HW block. New policy dynamically
    gates/un-gates DSC blocks when Dynamic ODM is active to support
    
    transitions on DCN32 only.
    
    3) Entry and exit from 3 plane MPO and Dynamic ODM requires a minimal
    transition so that all pipes which require their MPCC OPP instance to
    be changed have a full frame to be disabled before reprogramming. To
    solve this, the Dynamic ODM policy now utilizes minimal state
    transitions when entering or exiting 3 plane scenarios.
    
    4) Various fixes to DCN32 pipe merge/split algorithm to support Dynamic
    ODM and MPO transitions.
    
    In summary, this commit fixes various transitions to support ODM->MPO
    and MPO->ODM.
    
    Reviewed-by: Martin Leung <Martin.Leung@amd.com>
    Reviewed-by: Jun Lei <Jun.Lei@amd.com>
    Acked-by: Jasdeep Dhillon <jdhillon@amd.com>
    Signed-off-by: Dillon Varone <Dillon.Varone@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 553bf264a5e736d0a6186a35b00bdc634bb5facd
Author: Aurabindo Pillai <aurabindo.pillai@amd.com>
Date:   Tue Sep 13 14:08:05 2022 -0400

    drm/amd/display: skip phantom pipes when checking for pending flip
    
    [Why&How]
    Phantom pipes are not programmed fully to hardware and hence we should
    not expect a flip completion.
    
    Reviewed-by: Alvin Lee <alvin.lee2@amd.com>
    Acked-by: Jasdeep Dhillon <jdhillon@amd.com>
    Signed-off-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit c08978577a7b17736d9680aaa7e0d22dc775c326
Author: Aurabindo Pillai <aurabindo.pillai@amd.com>
Date:   Tue Sep 13 14:08:05 2022 -0400

    drm/amd/display: skip phantom pipes when checking for pending flip
    
    [Why&How]
    Phantom pipes are not programmed fully to hardware and hence we should
    not expect a flip completion.
    
    Reviewed-by: Alvin Lee <alvin.lee2@amd.com>
    Acked-by: Jasdeep Dhillon <jdhillon@amd.com>
    Signed-off-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 0d51573df3e0d944a644dbe90cdb06afefe77cc4
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Sep 3 12:41:15 2022 +0200

    media: atomisp: Remove asd == NULL checks from ioctl handling
    
    At probe time isp_subdev_init_entities() sets pipe->asd to a non NULL
    value for all four (preview/vf/capture/capture_video) pipes by calling
    atomisp_init_subdev_pipe() for all 4 pipes.
    
    So it can never be NULL. Remove the redundant NULL checks.
    
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>

commit adea153b4f6537f367fe77abada263fde8a1f7b6
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Sat Aug 13 10:12:39 2022 +0200

    media: atomisp-ov2680: Fix ov2680_set_fmt()
    
    On sets actually store the set (closest) format inside ov2680_device.dev,
    so that it also properly gets returned by get_fmt.
    
    This fixes the following problem:
    
    1. App does an VIDIOC_SET_FMT 640x480, calling ov2680_set_fmt()
    2. Internal buffers (atomisp_create_pipes_stream()) get allocated
       at 640x480 size by atomisp_set_fmt()
    3. ov2680_get_fmt() gets called later on and returns 1600x1200
       since ov2680_device.dev was not updated. So things get configured
       to stream at 1600x1200, but the internal buffers created during
       atomisp_create_pipes_stream() do not get updated in size
    4. streaming starts, internal buffers overflow and the entire
       machine freezes eventually due to memory being corrupted
    
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>

commit 72002056f771a025a2e6b4578aeb538799cb9ba2
Author: Meenakshikumar Somasundaram <meenakshikumar.somasundaram@amd.com>
Date:   Wed Aug 31 13:27:07 2022 -0400

    drm/amd/display: Display distortion after hotplug 5K tiled display
    
    [Why]
    During hot plug of specific 5K tiled display, sometimes both the tiles
    are not synchronized resulting in distortion. The reason is that otgs of
    both the tiles goes out of sync when otg workaround (dcnxxx_disable_otg_wa)
    is applied for bandwidth optimization. The otg workaround reenables otg
    but otg synchronization context is not reset and hence dc_trigger_sync()
    does not resynchronize otg again.
    
    [How]
    Implement reset_sync_context_for_pipe() to reset the otg synchronization
    context for the disabled pipe and its slave pipes when otg workaround is
    applied.
    
    Reviewed-by: Nicholas Kazlauskas <Nicholas.Kazlauskas@amd.com>
    Acked-by: Wayne Lin <wayne.lin@amd.com>
    Signed-off-by: Meenakshikumar Somasundaram <meenakshikumar.somasundaram@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit e4cf73fdfa420eb73507cf95c165d5d538d70d76
Author: Aric Cyr <aric.cyr@amd.com>
Date:   Sun Sep 11 23:59:13 2022 -0400

    drm/amd/display: 3.2.204
    
    This version brings along following fixes:
    - Fix urgent latency override for DCN32/DCN321
    - Correct hostvm flag in DCN31
    - Added new Asic Id for DCN301
    - Adjust to 2 phys in DCN301
    - Update dummy P-state search to use DCN32 DML
    - Increase dcn315 pstate change latency
    - Disable OTG WA for the plane_state NULL case on DCN314
    - Update dccg based on HW delta
    - Correct num_dsc for DCN314
    - Fix DP DSC compliance failure with DCN314
    - Refactor edp power sequencer codes
    - update gamut remap if plane has changed
    - Skip audio setup when audio stream is enabled
    - Display distortion after hotplug LG Ultrafine 5K tiled display
    - Fix DP MST timeslot issue when fallback happened
    - Uncomment SubVP pipe split assignment in driver
    - Enable committing subvp config
    - Do second pass through DML for DET calculation
    - Don't allocate DET for phantom pipes
    - Modify DML to adjust Vstartup Position
    - Ignore k1/k2 values for virtual signal to avoid assert
    - Fix failures of disabling primary planes
    - Do not compare integers of different widths
    - Fix empty slot problem of EDID management
    - Revise Sink device string ID width in dmub psr
    - Log vertical interrupt 1 for debug
    
    Acked-by: Wayne Lin <wayne.lin@amd.com>
    Signed-off-by: Aric Cyr <aric.cyr@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 2447ba5bee91527d3d49c5271b6c34a84fc67bdc
Author: Alvin Lee <Alvin.Lee2@amd.com>
Date:   Thu Sep 8 11:08:25 2022 -0400

    drm/amd/display: Don't allocate DET for phantom pipes
    
    [Why & How]
    We should not allocate any DET for the phantom pipes.
    
    Reviewed-by: Jun Lei <Jun.Lei@amd.com>
    Acked-by: Wayne Lin <wayne.lin@amd.com>
    Signed-off-by: Alvin Lee <Alvin.Lee2@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit abffd871d4862f9e77979708d1df45152becf8b4
Author: Meenakshikumar Somasundaram <meenakshikumar.somasundaram@amd.com>
Date:   Wed Aug 31 13:27:07 2022 -0400

    drm/amd/display: Display distortion after hotplug 5K tiled display
    
    [Why]
    During hot plug of specific 5K tiled display, sometimes both the tiles
    are not synchronized resulting in distortion. The reason is that otgs of
    both the tiles goes out of sync when otg workaround (dcnxxx_disable_otg_wa)
    is applied for bandwidth optimization. The otg workaround reenables otg
    but otg synchronization context is not reset and hence dc_trigger_sync()
    does not resynchronize otg again.
    
    [How]
    Implement reset_sync_context_for_pipe() to reset the otg synchronization
    context for the disabled pipe and its slave pipes when otg workaround is
    applied.
    
    Reviewed-by: Nicholas Kazlauskas <Nicholas.Kazlauskas@amd.com>
    Acked-by: Wayne Lin <wayne.lin@amd.com>
    Signed-off-by: Meenakshikumar Somasundaram <meenakshikumar.somasundaram@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 1591a6478fbc61a0b30765a3c2b222fc50db849e
Author: Anthony Koo <Anthony.Koo@amd.com>
Date:   Sat Sep 3 21:31:04 2022 -0400

    drm/amd/display: [FW Promotion] Release 0.0.134.0
    
    - Handle pipe split case for SubVP:
      Pass in pipe split index for main and phantom pipes
    
    Reviewed-by: Aric Cyr <Aric.Cyr@amd.com>
    Acked-by: Wayne Lin <wayne.lin@amd.com>
    Signed-off-by: Anthony Koo <Anthony.Koo@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit b0d6de32e30c635aac22e52357b090982d94df52
Author: Alvin Lee <Alvin.Lee2@amd.com>
Date:   Thu Sep 1 18:54:22 2022 -0400

    drm/amd/display: SubVP pipe split case
    
    [Why and How]
    For SubVP pipe split case, pass in split index for
    main and phantom pipes to ensure that the P-State
    sequence will force P-State for all required pipes.
    
    Reviewed-by: Nevenko Stupar <Nevenko.Stupar@amd.com>
    Reviewed-by: Jun Lei <Jun.Lei@amd.com>
    Acked-by: Wayne Lin <wayne.lin@amd.com>
    Signed-off-by: Alvin Lee <Alvin.Lee2@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit d1e2d6b78ffc0317b41e1465b47e325e2765e5e0
Merge: 213cb76ddc8b 917bda9ab155
Author: Dave Airlie <airlied@redhat.com>
Date:   Thu Sep 15 22:38:12 2022 +1000

    Merge tag 'drm-intel-next-2022-08-29' of git://anongit.freedesktop.org/drm/drm-intel into drm-next
    
    drm/i915 feature pull for v6.1:
    
    Features and functionality:
    - Early Meteorlake (MTL) enabling (José, Radhakrishna, Clint, Imre, Vandita, Ville, Jani)
    - Support more HDMI pixel clock frequencies on DG2 (Clint)
    - Sanity check PCI BARs (Piotr Piórkowski)
    - Enable DC5 on DG2 (Anusha)
    - DG2 DMC firmware version bump to v2.07 (Madhumitha)
    - New ADL-S PCI ID (José)
    
    Refactoring and cleanups:
    - Add display sub-struct to struct drm_i915_private (Jani)
    - Add initial runtime info to device info (Jani)
    - Split out HDCP and backlight registers to separate files (Jani)
    
    Fixes:
    - Skip wm/ddb readout for disabled pipes (Ville)
    - HDMI port timing quirk for GLK ECS Liva Q2 (Diego Santa Cruz)
    - Fix bw init null pointer dereference (Łukasz Bartosik)
    - Disable PPS power hook for DP AUX backlight (Jouni)
    - Avoid warnings on registering multiple backlight devices (Arun)
    - Fix dual-link DSI backlight and CABC ports for display 11+ (Jani)
    - Fix Type-C PHY ownership programming in HDMI legacy mode (Imre)
    - Fix unclaimed register access while loading PIPEDMC-C/D (Imre)
    - Bump up CDCLK for DG2 (Stan)
    - Prune modes that require HDMI 2.1 FRL (Ankit)
    - Disable FBC when PSR1 is enabled in display 12-13 (Matt)
    - Fix TGL+ HDMI transcoder clock and DDI BUF disable order (Imre)
    - Disable PSR before disable pipe (José)
    - Disable DMC handlers during firmware loading/disabling on display 12+ (Imre)
    - Disable clock gating for PIPEDMC-A/B as a workaround (Imre)
    
    Merges:
    - Two drm-next backmerges (Rodrigo, Jani)
    
    Signed-off-by: Dave Airlie <airlied@redhat.com>
    From: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/87k06rfaku.fsf@intel.com

commit c1e48e36c120df7e3a3cb39d17d64c753485f225
Author: Jiapeng Chong <jiapeng.chong@linux.alibaba.com>
Date:   Wed Sep 14 13:27:40 2022 +0800

    drm/amd/display: make some functions static
    
    These functions are not used outside the file dcn32_hubbub.c, so the
    modification is defined as static.
    
    drivers/gpu/drm/amd/amdgpu/../display/dc/dcn32/dcn32_hubbub.c:912:6: warning: no previous prototype for ‘hubbub32_force_wm_propagate_to_pipes’.
    drivers/gpu/drm/amd/amdgpu/../display/dc/dcn32/dcn32_hubbub.c:823:6: warning: no previous prototype for ‘hubbub32_wm_read_state’.
    drivers/gpu/drm/amd/amdgpu/../display/dc/dcn32/dcn32_hubbub.c:772:6: warning: no previous prototype for ‘hubbub32_init_watermarks’.
    drivers/gpu/drm/amd/amdgpu/../display/dc/dcn32/dcn32_hubbub.c:712:6: warning: no previous prototype for ‘hubbub32_force_usr_retraining_allow’.
    
    Link: https://bugzilla.openanolis.cn/show_bug.cgi?id=2141
    Reported-by: Abaci Robot <abaci@linux.alibaba.com>
    Signed-off-by: Jiapeng Chong <jiapeng.chong@linux.alibaba.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 419c14521e0b090e82353556008833d58c2efde1
Author: Aric Cyr <aric.cyr@amd.com>
Date:   Sat Aug 27 15:08:49 2022 -0400

    drm/amd/display: 3.2.202
    
    This version brings along following fixes:
    
    *Fixed register definitions for DCN32/321
    *Adding log for spread_spectrum_info
    *Reverted DSC programming sequence change
    *Correct I2C register offset
    *Updated DCN30 header files, viewport position for phantom pipes
    *Enable dlg and vba compilation for dcn314
    
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Acked-by: Pavle Kotarac <Pavle.Kotarac@amd.com>
    Signed-off-by: Aric Cyr <aric.cyr@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 43080c9b7536c5cbc53c5d8c74027c92c7e0110a
Author: Alvin Lee <Alvin.Lee2@amd.com>
Date:   Thu Aug 25 16:04:29 2022 -0400

    drm/amd/display: Update viewport position for phantom pipes
    
    [Description]
    In some cases the viewport position of the main pipes can change without
    triggering a full update. In this case the subvp phantom viewports must
    be updated accordingly.
    
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Reviewed-by: Jun Lei <Jun.Lei@amd.com>
    Acked-by: Pavle Kotarac <Pavle.Kotarac@amd.com>
    Signed-off-by: Alvin Lee <Alvin.Lee2@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 1787ec7dcc3761e040d0cd9896d3a40b4efac4cf
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Jun 17 22:59:48 2022 +0300

    drm/i915: Skip wm/ddb readout for disabled pipes
    
    commit 0211c2a0ea600e25db3044daaeff4fe41c3ed6d9 upstream.
    
    The stuff programmed into the wm/ddb registers of planes
    on disabled pipes doesn't matter. So during readout just
    leave our software state tracking for those zeroed.
    
    This should avoid us trying too hard to clean up after
    whatever mess the VBIOS/GOP left in there. The actual
    hardware state will get cleaned up if/when we enable
    the pipe anyway.
    
    Cc: stable@vger.kernel.org
    Closes: https://gitlab.freedesktop.org/drm/intel/-/issues/5711
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220617195948.24007-1-ville.syrjala@linux.intel.com
    Reviewed-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    (cherry picked from commit b183db8f4783ca2efc9b47734f15aad9477a108a)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c6c5bdf735443df04ad2e416742e45002b064f81
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Jun 17 22:59:48 2022 +0300

    drm/i915: Skip wm/ddb readout for disabled pipes
    
    commit 0211c2a0ea600e25db3044daaeff4fe41c3ed6d9 upstream.
    
    The stuff programmed into the wm/ddb registers of planes
    on disabled pipes doesn't matter. So during readout just
    leave our software state tracking for those zeroed.
    
    This should avoid us trying too hard to clean up after
    whatever mess the VBIOS/GOP left in there. The actual
    hardware state will get cleaned up if/when we enable
    the pipe anyway.
    
    Cc: stable@vger.kernel.org
    Closes: https://gitlab.freedesktop.org/drm/intel/-/issues/5711
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220617195948.24007-1-ville.syrjala@linux.intel.com
    Reviewed-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    (cherry picked from commit b183db8f4783ca2efc9b47734f15aad9477a108a)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e1a84ba850128b3984973786829e610ae4ee0e2e
Author: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
Date:   Mon Sep 5 11:57:44 2022 +0300

    drm/i915: Add DSC support to MST path
    
    Whenever we are not able to get enough timeslots
    for required PBN, let's try to allocate those
    using DSC, just same way as we do for SST.
    
    v2: Removed intel_dp_mst_dsc_compute_config and refactored
        intel_dp_dsc_compute_config to support timeslots as a
        parameter(Ville Syrjälä)
    
    v3: - Rebased
        - Added a debug to see that we at least try reserving
          VCPI slots using DSC, because currently its not visible
          from the logs, thus making debugging more tricky.
        - Moved timeslots to numerator, where it should be.
    
    v4: - Call drm_dp_mst_atomic_check already during link
          config computation, because we need to know already
          by this moment if uncompressed amount of VCPI slots
          needed can fit, otherwise we need to use DSC.
          (thanks to Vinod Govindapillai for pointing this out)
    
    v5: - Put pipe_config->bigjoiner_pipes back to original
          condition in intel_dp_dsc_compute_config
          (don't remember when I lost it)
    
    v6: - Removed unnecessary drm_dp_mst_atomic_check as it is
          now always called in a newly introduced
          intel_dp_mst_find_vcpi_slots_for_bpp function
          (Vinod Govindapillai)
    
    Reviewed-by: Vinod Govindapillai <vinod.govindapillai@intel.com>
    Signed-off-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220905085744.29637-5-stanislav.lisovskiy@intel.com

commit bd71ef2c30244c25243d84b593ea0ba88164ebb6
Author: Tom Chung <chiahsuan.chung@amd.com>
Date:   Wed Aug 3 15:15:17 2022 +0800

    drm/amd/display: Fix plug/unplug external monitor will hang while playback MPO video
    
    [ Upstream commit e98459c06e3d45c2229b097f7b8cdd412357fa2f ]
    
    [Why]
    Pipes for MPO primary and overlay will be power down and power up during
    plug/unplug external monitor while MPO video playback.
    But the pipes were the same after plug/unplug and should not need to be
    power down and power up or it will make page flip interrupt disabled and
    cause hang issue.
    
    [How]
    Add pipe split change condition that not only check the top pipe pointer
    but also check the index of top pipe if both top pipes are available.
    
    Reviewed-by: Sun peng Li <Sunpeng.Li@amd.com>
    Acked-by: Brian Chang <Brian.Chang@amd.com>
    Signed-off-by: Tom Chung <chiahsuan.chung@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1e8e515edd6dbe15b86003d846fee005c12c0685
Merge: 0b3acd1cc022 bfe632f6d0a1
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Sep 2 14:56:09 2022 -0700

    Merge tag 'drm-fixes-2022-09-02' of git://anongit.freedesktop.org/drm/drm
    
    Pull drm fixes from Dave Airlie:
     "Regular fixes pull. One core dma-buf fix, then two weeks of i915
      fixes, a lot of amdgpu fixes mostly for new IP, and a bunch of msm
      fixes, mostly modesetting ones.
    
      Nothing seems too bad at this point.
    
      dma-buf/dma-resv:
       - Fence-handling fix
    
      i915:
       - GVT fixes including fix for a CommetLake regression in mmio table
         and misc doc and typo fixes
       - Fix CCS handling
       - Fix for guc requests after reset
       - Display DSI related fixes
       - Display backlight related fixes
       - Fix for a null pointer dereference
       - HDMI related quirk for ECS Liva Q2 with GLK graphics
       - Skip wm/ddb readout for disabled pipes
    
      amdgpu:
       - FRU error message fix
       - MES 11 updates
       - DCN 3.2.x fixes
       - DCN 3.1.4 fixes
       - Fix possible use after free in CS IOCTL
       - SMU 13.0.x fixes
       - Fix iolink reporting on devices with direct connections to CPU
       - GFX10 tap delay firmware fixes
    
      msm:
       - Fix for inconsistent indenting in msm_dsi_dphy_timing_calc_v3().
       - Fix to make eDP the first connector in the connected list.
       - Fix to populate intf_cfg correctly before calling reset_intf_cfg().
       - Specify the correct number of DSI regulators for SDM660.
       - Specify the correct number of DSI regulators for MSM8996.
       - Fix for removing DP_RECOVERED_CLOCK_OUT_EN bit for tps4 link training
       - Fix probe-deferral crash in gpu devfreq
       - Fix gpu debugfs deadlock"
    
    * tag 'drm-fixes-2022-09-02' of git://anongit.freedesktop.org/drm/drm: (51 commits)
      drm/amd/amdgpu: skip ucode loading if ucode_size == 0
      drm/amdgpu: only init tap_delay ucode when it's included in ucode binary
      drm/amd/display: Fix black flash when switching from ODM2to1 to ODMBypass
      drm/amd/display: Fix check for stream and plane
      drm/amd/display: Re-initialize viewport after pipe merge
      drm/amd/display: Use correct plane for CAB cursor size allocation
      drm/amdgpu: ensure no PCIe peer access for CPU XGMI iolinks
      drm/amd/pm: bump SMU 13.0.0 driver_if header version
      drm/amd/pm: use vbios carried pptable for all SMU13.0.7 SKUs
      drm/amd/pm: use vbios carried pptable for those supported SKUs
      drm/amd/display: fix wrong register access
      drm/amd/display: use actual cursor size instead of max for CAB allocation
      drm/amd/display: disable display fresh from MALL on an edge case for DCN321
      drm/amd/display: Fix CAB cursor size allocation for DCN32/321
      drm/amd/display: Missing HPO instance added
      drm/amd/display: set dig fifo read start level to 7 before dig fifo reset
      drm/amdgpu: Fix use-after-free in amdgpu_cs_ioctl
      drm/amd/display: Fix OTG H timing reset for dcn314
      drm/amd/display: Fix DCN32 DPSTREAMCLK_CNTL programming
      drm/amdgpu: Update mes_v11_api_def.h
      ...

commit bfe632f6d0a1371784dd9a11fa5a9aa2dbf53bf1
Merge: d7df5e2834d3 0211c2a0ea60
Author: Dave Airlie <airlied@redhat.com>
Date:   Fri Sep 2 11:26:29 2022 +1000

    Merge tag 'drm-intel-fixes-2022-09-01' of git://anongit.freedesktop.org/drm/drm-intel into drm-fixes
    
    - Fix for a null pointer dereference (Lukasz)
    - HDMI related quirk for ECS Liva Q2 with GLK graphics (Diego)
    - Skip wm/ddb readout for disabled pipes (Ville)
    
    Signed-off-by: Dave Airlie <airlied@redhat.com>
    
    From: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/YxC3GmSOpDiZTdIJ@intel.com

commit 330d6da3d03cca592d2101d0f25f01a611c4405b
Author: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
Date:   Thu Aug 11 11:48:18 2022 -0400

    Documentation/gpu: Add an explanation about the DCN pipeline
    
    In the DCN code, we constantly talk about hardware pipeline, pipeline,
    or even just pipes, which is a concept that is not obvious to everyone.
    For this reason, this commit expands the DCN overview explanation by
    adding a new section that describes what a pipeline is from the DCN
    perspective.
    
    Changes since V1:
    - Rewrite the first paragraph that describes AMD hardware pipeline.
    
    Cc: Harry Wentland <harry.wentland@amd.com>
    Cc: Nicholas Kazlauskas <Nicholas.Kazlauskas@amd.com>
    Cc: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Cc: Hersen Wu <hersenxs.wu@amd.com>
    Cc: Alex Hung <alex.hung@amd.com>
    Cc: Pierre-Eric Pelloux-Prayer <pierre-eric.pelloux-prayer@amd.com>
    Cc: Leo Li <sunpeng.li@amd.com>
    Cc: Simon Ser <contact@emersion.fr>
    Cc: Pekka Paalanen <pekka.paalanen@collabora.com>
    Cc: Sean Paul <seanpaul@chromium.org>
    Cc: Mark Yacoub <markyacoub@chromium.org>
    Cc: Pierre-Loup <pgriffais@valvesoftware.com>
    Cc: Michel Dänzer <michel.daenzer@mailbox.org>
    Reviewed-by: Harry Wentland <Harry.Wentland@amd.com>
    Signed-off-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 0211c2a0ea600e25db3044daaeff4fe41c3ed6d9
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Jun 17 22:59:48 2022 +0300

    drm/i915: Skip wm/ddb readout for disabled pipes
    
    The stuff programmed into the wm/ddb registers of planes
    on disabled pipes doesn't matter. So during readout just
    leave our software state tracking for those zeroed.
    
    This should avoid us trying too hard to clean up after
    whatever mess the VBIOS/GOP left in there. The actual
    hardware state will get cleaned up if/when we enable
    the pipe anyway.
    
    Cc: stable@vger.kernel.org
    Closes: https://gitlab.freedesktop.org/drm/intel/-/issues/5711
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220617195948.24007-1-ville.syrjala@linux.intel.com
    Reviewed-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    (cherry picked from commit b183db8f4783ca2efc9b47734f15aad9477a108a)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>

commit b183db8f4783ca2efc9b47734f15aad9477a108a
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Jun 17 22:59:48 2022 +0300

    drm/i915: Skip wm/ddb readout for disabled pipes
    
    The stuff programmed into the wm/ddb registers of planes
    on disabled pipes doesn't matter. So during readout just
    leave our software state tracking for those zeroed.
    
    This should avoid us trying too hard to clean up after
    whatever mess the VBIOS/GOP left in there. The actual
    hardware state will get cleaned up if/when we enable
    the pipe anyway.
    
    Cc: stable@vger.kernel.org
    Closes: https://gitlab.freedesktop.org/drm/intel/-/issues/5711
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220617195948.24007-1-ville.syrjala@linux.intel.com
    Reviewed-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>

commit f577c7c76bf9f0e0a6dd3daf5b9a3d3f2b3880cc
Author: Samson Tam <samson.tam@amd.com>
Date:   Fri Aug 5 18:41:01 2022 -0400

    drm/amd/display: fix odm 2:1 policy not being applied consistently in 4k144 modes
    
    [Why]
    odm 2:1 policy is splitting the pipes in 4k144.
    then in subvp code, we merge the pipes. but since the
     configuration is unsupported, we keep the pipes split
    
    [How]
    for unsupported subvp configuration, redo the dml and
     pipe split calls
    
    Reviewed-by: Alvin Lee <alvin.lee2@amd.com>
    Reviewed-by: Jun Lei <Jun.Lei@amd.com>
    Acked-by: Brian Chang <Brian.Chang@amd.com>
    Signed-off-by: Samson Tam <samson.tam@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 7930f58a7e62e52e96636dafc2c4beb3b76b321e
Author: Aric Cyr <aric.cyr@amd.com>
Date:   Mon Aug 8 10:06:31 2022 -0400

    drm/amd/display: 3.2.199
    
    This verion brings along following fixes:
    -Add scaling factor for SubVP
    -Modify stop_dbg_mode return value
    -Add gfx_off members and document
    -Add GFXOFF function for vangogh
    -Add GFXOFF stats to debug
    -Fix codestyle problems
    -Fix overflow on MIN_I64
    -Fix Unneeded semicolon
    -Fix comment typo
    -Remove useless condition in amdgpu_job_stop_all_jobs_on_sched()
    -Add decoder_iv_ts helper for ih_v6
    -Add chip version to DCN32
    -Avoid doing vm_init multiple time
    -Modify size calculation in MALL
    -Fix DSC for phantom pipes
    -Update clock table policy for DCN314
    -Modify header inclusion pattern
    -Fix plug/unplug external monitor will playback MPO video
    -Add debug parameter to retain default clock table
    -Increase tlb flush timeout for sriov
    -Fix compare intergers of different widths
    -Add reserved dc_log_type
    -Fix pixel clock programming
    
    Acked-by: Brian Chang <Brian.Chang@amd.com>
    Signed-off-by: Aric Cyr <aric.cyr@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 72d9ce5b085a1e7374f4aedc0892bd3b909f25c9
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Wed Jun 29 15:06:58 2022 +0200

    fs: check FMODE_LSEEK to control internal pipe splicing
    
    [ Upstream commit 97ef77c52b789ec1411d360ed99dca1efe4b2c81 ]
    
    The original direct splicing mechanism from Jens required the input to
    be a regular file because it was avoiding the special socket case. It
    also recognized blkdevs as being close enough to a regular file. But it
    forgot about chardevs, which behave the same way and work fine here.
    
    This is an okayish heuristic, but it doesn't totally work. For example,
    a few chardevs should be spliceable here. And a few regular files
    shouldn't. This patch fixes this by instead checking whether FMODE_LSEEK
    is set, which represents decently enough what we need rewinding for when
    splicing to internal pipes.
    
    Fixes: b92ce5589374 ("[PATCH] splice: add direct fd <-> fd splicing support")
    Cc: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ab37175dd3593b9098f2242e370a7b1af4c35368
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Wed Jun 29 15:06:58 2022 +0200

    fs: check FMODE_LSEEK to control internal pipe splicing
    
    [ Upstream commit 97ef77c52b789ec1411d360ed99dca1efe4b2c81 ]
    
    The original direct splicing mechanism from Jens required the input to
    be a regular file because it was avoiding the special socket case. It
    also recognized blkdevs as being close enough to a regular file. But it
    forgot about chardevs, which behave the same way and work fine here.
    
    This is an okayish heuristic, but it doesn't totally work. For example,
    a few chardevs should be spliceable here. And a few regular files
    shouldn't. This patch fixes this by instead checking whether FMODE_LSEEK
    is set, which represents decently enough what we need rewinding for when
    splicing to internal pipes.
    
    Fixes: b92ce5589374 ("[PATCH] splice: add direct fd <-> fd splicing support")
    Cc: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 48cca38787e3e08e3c442d861ee7addbf63c5a2e
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Wed Jun 29 15:06:58 2022 +0200

    fs: check FMODE_LSEEK to control internal pipe splicing
    
    [ Upstream commit 97ef77c52b789ec1411d360ed99dca1efe4b2c81 ]
    
    The original direct splicing mechanism from Jens required the input to
    be a regular file because it was avoiding the special socket case. It
    also recognized blkdevs as being close enough to a regular file. But it
    forgot about chardevs, which behave the same way and work fine here.
    
    This is an okayish heuristic, but it doesn't totally work. For example,
    a few chardevs should be spliceable here. And a few regular files
    shouldn't. This patch fixes this by instead checking whether FMODE_LSEEK
    is set, which represents decently enough what we need rewinding for when
    splicing to internal pipes.
    
    Fixes: b92ce5589374 ("[PATCH] splice: add direct fd <-> fd splicing support")
    Cc: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 36ba38996001ffc0690c79f74a6daad0ea4dae7e
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Wed Jun 29 15:06:58 2022 +0200

    fs: check FMODE_LSEEK to control internal pipe splicing
    
    [ Upstream commit 97ef77c52b789ec1411d360ed99dca1efe4b2c81 ]
    
    The original direct splicing mechanism from Jens required the input to
    be a regular file because it was avoiding the special socket case. It
    also recognized blkdevs as being close enough to a regular file. But it
    forgot about chardevs, which behave the same way and work fine here.
    
    This is an okayish heuristic, but it doesn't totally work. For example,
    a few chardevs should be spliceable here. And a few regular files
    shouldn't. This patch fixes this by instead checking whether FMODE_LSEEK
    is set, which represents decently enough what we need rewinding for when
    splicing to internal pipes.
    
    Fixes: b92ce5589374 ("[PATCH] splice: add direct fd <-> fd splicing support")
    Cc: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit adb67b373a68b6ca4ea9225e248d726f0f5f0f8d
Merge: a4ee891b7e91 b1fb6b87ed55
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Aug 19 09:39:32 2022 -0700

    Merge tag 'drm-fixes-2022-08-19' of git://anongit.freedesktop.org/drm/drm
    
    Pull drm fixes from Dave Airlie:
     "Regular weekly fixes.
    
      The nouveau patch just enables modesetting on GA103 hw which is like
      other ampere cards that are already supported. amdgpu has 2 weeks of
      fixes, as Alex was away, so a bit larger than usual, otherwise some
      i915 and misc other fixes.
    
      ttm:
       - NULL ptr dereference
    
      i915:
       - disable pci resize on 32-bit systems
       - don't leak the ccs state
       - TLB invalidation fixes
    
      nouveau:
       - GA103 enablement
       - off-by-one fix
    
      amdgpu:
       - Revert some DML stack changes
       - Rounding fixes in KFD allocations
       - atombios vram info table parsing fix
       - DCN 3.1.4 fixes
       - Clockgating fixes for various new IPs
       - SMU 13.0.4 fixes
       - DCN 3.1.4 FP fixes
       - TMDS fixes for YCbCr420 4k modes
       - DCN 3.2.x fixes
       - USB 4 fixes
       - SMU 13.0 fixes
       - SMU driver unload memory leak fixes
       - Display orientation fix
       - Regression fix for generic fbdev conversion
       - SDMA 6.x fixes
       - SR-IOV fixes
       - IH 6.x fixes
       - Use after free fix in bo list handling
       - Revert pipe1 support
       - XGMI hive reset fix
    
      amdkfd:
       - Fix potential crach in kfd_create_indirect_link_prop()
    
      imx:
       - warning fix
    
      meson:
       - refcounting fix
    
      lvds-codec:
       - error check fix
    
      sun4i:
       - underflow fix
       - dt-binding fix"
    
    * tag 'drm-fixes-2022-08-19' of git://anongit.freedesktop.org/drm/drm: (109 commits)
      Revert "drm/amd/amdgpu: add pipe1 hardware support"
      drm/amdgpu: Fix use-after-free on amdgpu_bo_list mutex
      drm/amdgpu: Fix interrupt handling on ih_soft ring
      drm/amdgpu: Add secure display TA load for Renoir
      drm/amd/display: Include scaling factor for SubVP command
      drm/amdgpu/vcn: Return void from the stop_dbg_mode
      drm/amdgpu: remove useless condition in amdgpu_job_stop_all_jobs_on_sched()
      drm/amdgpu: Add decode_iv_ts helper for ih_v6 block
      drm/amd/display: add chip revision to DCN32
      drm/amd/display: avoid doing vm_init multiple time
      drm/amd/display: Use pitch when calculating size to cache in MALL
      drm/amd/display: Don't set DSC for phantom pipes
      drm/amd/display: Update clock table policy for DCN314
      drm/amd/display: Modify header inclusion pattern
      drm/amd/display: Fix plug/unplug external monitor will hang while playback MPO video
      drm/amd/display: Add debug parameter to retain default clock table
      drm/amdgpu: Increase tlb flush timeout for sriov
      drm/amd/display: do not compare integers of different widths
      drm/amd/display: Add reserved dc_log_type.
      drm/amd/display: Fix pixel clock programming
      ...

commit b9f20cff54f76e5fdc5be3eb33286416b3494492
Author: Phil Edworthy <phil.edworthy@renesas.com>
Date:   Thu Aug 4 20:22:20 2022 +0100

    usb: gadget: udc: renesas_usb3: Add support for RZ/V2M
    
    RZ/V2M (r9a09g011) has a few differences:
     - The USB3_DRD_CON register has moved, its called USB_PERI_DRD_CON in
       the RZ/V2M hardware manual.
       It has additional bits for host and peripheral reset that need to
       cleared to use usb host and peripheral respectively.
     - The USB3_OTG_STA, USB3_OTG_INT_STA and USB3_OTG_INT_ENA registers
       have been moved and renamed to USB_PERI_DRD_STA, USB_PERI_DRD_INT_STA
       and USB_PERI_DRD_INT_E.
     - The IDMON bit used in the above regs for role detection have moved
       from bit 4 to bit 0.
     - RZ/V2M has an separate interrupt for DRD, i.e. for changes to IDMON.
     - There are reset lines for DRD and USBP
     - There is another clock, managed by runtime PM.
    
    Whilst the hardware can support 16 pipes, it is artifically limited
    based on the ram per pipe calculation. With the 4KB ram per pipe, we
    can support 9 pipes consisting of 4xIN pipes, 4xOUT pipes and PIPE0.
    
    Reviewed-by: Biju Das <biju.das.jz@bp.renesas.com>
    Signed-off-by: Phil Edworthy <phil.edworthy@renesas.com>
    Link: https://lore.kernel.org/r/20220804192220.128601-3-phil.edworthy@renesas.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b662279708751baea3f55c5c158614c3f5dee2ee
Author: Paulo Alcantara <pc@cjr.nz>
Date:   Mon Aug 8 13:41:18 2022 -0300

    cifs: fix lock length calculation
    
    commit 773891ffd4d628d05c4e22f34541e4779ee7a076 upstream.
    
    The lock length was wrongly set to 0 when fl_end == OFFSET_MAX, thus
    failing to lock the whole file when l_start=0 and l_len=0.
    
    This fixes test 2 from cthon04.
    
    Before patch:
    
    $ ./cthon04/lock/tlocklfs -t 2 /mnt
    
    Creating parent/child synchronization pipes.
    
    Test #1 - Test regions of an unlocked file.
            Parent: 1.1  - F_TEST  [               0,               1] PASSED.
            Parent: 1.2  - F_TEST  [               0,          ENDING] PASSED.
            Parent: 1.3  - F_TEST  [               0,7fffffffffffffff] PASSED.
            Parent: 1.4  - F_TEST  [               1,               1] PASSED.
            Parent: 1.5  - F_TEST  [               1,          ENDING] PASSED.
            Parent: 1.6  - F_TEST  [               1,7fffffffffffffff] PASSED.
            Parent: 1.7  - F_TEST  [7fffffffffffffff,               1] PASSED.
            Parent: 1.8  - F_TEST  [7fffffffffffffff,          ENDING] PASSED.
            Parent: 1.9  - F_TEST  [7fffffffffffffff,7fffffffffffffff] PASSED.
    
    Test #2 - Try to lock the whole file.
            Parent: 2.0  - F_TLOCK [               0,          ENDING] PASSED.
            Child:  2.1  - F_TEST  [               0,               1] FAILED!
            Child:  **** Expected EACCES, returned success...
            Child:  **** Probably implementation error.
    
    **  CHILD pass 1 results: 0/0 pass, 0/0 warn, 1/1 fail (pass/total).
            Parent: Child died
    
    ** PARENT pass 1 results: 10/10 pass, 0/0 warn, 0/0 fail (pass/total).
    
    After patch:
    
    $ ./cthon04/lock/tlocklfs -t 2 /mnt
    
    Creating parent/child synchronization pipes.
    
    Test #2 - Try to lock the whole file.
            Parent: 2.0  - F_TLOCK [               0,          ENDING] PASSED.
            Child:  2.1  - F_TEST  [               0,               1] PASSED.
            Child:  2.2  - F_TEST  [               0,          ENDING] PASSED.
            Child:  2.3  - F_TEST  [               0,7fffffffffffffff] PASSED.
            Child:  2.4  - F_TEST  [               1,               1] PASSED.
            Child:  2.5  - F_TEST  [               1,          ENDING] PASSED.
            Child:  2.6  - F_TEST  [               1,7fffffffffffffff] PASSED.
            Child:  2.7  - F_TEST  [7fffffffffffffff,               1] PASSED.
            Child:  2.8  - F_TEST  [7fffffffffffffff,          ENDING] PASSED.
            Child:  2.9  - F_TEST  [7fffffffffffffff,7fffffffffffffff] PASSED.
            Parent: 2.10 - F_ULOCK [               0,          ENDING] PASSED.
    
    ** PARENT pass 1 results: 2/2 pass, 0/0 warn, 0/0 fail (pass/total).
    
    **  CHILD pass 1 results: 9/9 pass, 0/0 warn, 0/0 fail (pass/total).
    
    Fixes: d80c69846ddf ("cifs: fix signed integer overflow when fl_end is OFFSET_MAX")
    Reported-by: Xiaoli Feng <xifeng@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Paulo Alcantara (SUSE) <pc@cjr.nz>
    Reviewed-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd0a6e99b61e6c08fa5cf585d54fd956f70c73a6
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Wed Jun 29 15:06:58 2022 +0200

    fs: check FMODE_LSEEK to control internal pipe splicing
    
    [ Upstream commit 97ef77c52b789ec1411d360ed99dca1efe4b2c81 ]
    
    The original direct splicing mechanism from Jens required the input to
    be a regular file because it was avoiding the special socket case. It
    also recognized blkdevs as being close enough to a regular file. But it
    forgot about chardevs, which behave the same way and work fine here.
    
    This is an okayish heuristic, but it doesn't totally work. For example,
    a few chardevs should be spliceable here. And a few regular files
    shouldn't. This patch fixes this by instead checking whether FMODE_LSEEK
    is set, which represents decently enough what we need rewinding for when
    splicing to internal pipes.
    
    Fixes: b92ce5589374 ("[PATCH] splice: add direct fd <-> fd splicing support")
    Cc: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b3662995293e932c187dd929f8a91ecc1a62fc64
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Wed Jun 29 15:06:58 2022 +0200

    fs: check FMODE_LSEEK to control internal pipe splicing
    
    [ Upstream commit 97ef77c52b789ec1411d360ed99dca1efe4b2c81 ]
    
    The original direct splicing mechanism from Jens required the input to
    be a regular file because it was avoiding the special socket case. It
    also recognized blkdevs as being close enough to a regular file. But it
    forgot about chardevs, which behave the same way and work fine here.
    
    This is an okayish heuristic, but it doesn't totally work. For example,
    a few chardevs should be spliceable here. And a few regular files
    shouldn't. This patch fixes this by instead checking whether FMODE_LSEEK
    is set, which represents decently enough what we need rewinding for when
    splicing to internal pipes.
    
    Fixes: b92ce5589374 ("[PATCH] splice: add direct fd <-> fd splicing support")
    Cc: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f29659bad1d5d0040c9baf86bf93d23333384b39
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Wed Jun 29 15:06:58 2022 +0200

    fs: check FMODE_LSEEK to control internal pipe splicing
    
    [ Upstream commit 97ef77c52b789ec1411d360ed99dca1efe4b2c81 ]
    
    The original direct splicing mechanism from Jens required the input to
    be a regular file because it was avoiding the special socket case. It
    also recognized blkdevs as being close enough to a regular file. But it
    forgot about chardevs, which behave the same way and work fine here.
    
    This is an okayish heuristic, but it doesn't totally work. For example,
    a few chardevs should be spliceable here. And a few regular files
    shouldn't. This patch fixes this by instead checking whether FMODE_LSEEK
    is set, which represents decently enough what we need rewinding for when
    splicing to internal pipes.
    
    Fixes: b92ce5589374 ("[PATCH] splice: add direct fd <-> fd splicing support")
    Cc: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 31ec699ac5d8d17c4f696888708bb6b2567dfcd4
Author: Alvin Lee <Alvin.Lee2@amd.com>
Date:   Fri Aug 5 16:18:31 2022 -0400

    drm/amd/display: Don't set DSC for phantom pipes
    
    [Description]
    Don't set DSC bit for phantom pipes, not
    required since phantom pipe don't have
    any actual output
    
    Reviewed-by: Jun Lei <Jun.Lei@amd.com>
    Acked-by: Brian Chang <Brian.Chang@amd.com>
    Signed-off-by: Alvin Lee <Alvin.Lee2@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit e98459c06e3d45c2229b097f7b8cdd412357fa2f
Author: Tom Chung <chiahsuan.chung@amd.com>
Date:   Wed Aug 3 15:15:17 2022 +0800

    drm/amd/display: Fix plug/unplug external monitor will hang while playback MPO video
    
    [Why]
    Pipes for MPO primary and overlay will be power down and power up during
    plug/unplug external monitor while MPO video playback.
    But the pipes were the same after plug/unplug and should not need to be
    power down and power up or it will make page flip interrupt disabled and
    cause hang issue.
    
    [How]
    Add pipe split change condition that not only check the top pipe pointer
    but also check the index of top pipe if both top pipes are available.
    
    Reviewed-by: Sun peng Li <Sunpeng.Li@amd.com>
    Acked-by: Brian Chang <Brian.Chang@amd.com>
    Signed-off-by: Tom Chung <chiahsuan.chung@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 773891ffd4d628d05c4e22f34541e4779ee7a076
Author: Paulo Alcantara <pc@cjr.nz>
Date:   Mon Aug 8 13:41:18 2022 -0300

    cifs: fix lock length calculation
    
    The lock length was wrongly set to 0 when fl_end == OFFSET_MAX, thus
    failing to lock the whole file when l_start=0 and l_len=0.
    
    This fixes test 2 from cthon04.
    
    Before patch:
    
    $ ./cthon04/lock/tlocklfs -t 2 /mnt
    
    Creating parent/child synchronization pipes.
    
    Test #1 - Test regions of an unlocked file.
            Parent: 1.1  - F_TEST  [               0,               1] PASSED.
            Parent: 1.2  - F_TEST  [               0,          ENDING] PASSED.
            Parent: 1.3  - F_TEST  [               0,7fffffffffffffff] PASSED.
            Parent: 1.4  - F_TEST  [               1,               1] PASSED.
            Parent: 1.5  - F_TEST  [               1,          ENDING] PASSED.
            Parent: 1.6  - F_TEST  [               1,7fffffffffffffff] PASSED.
            Parent: 1.7  - F_TEST  [7fffffffffffffff,               1] PASSED.
            Parent: 1.8  - F_TEST  [7fffffffffffffff,          ENDING] PASSED.
            Parent: 1.9  - F_TEST  [7fffffffffffffff,7fffffffffffffff] PASSED.
    
    Test #2 - Try to lock the whole file.
            Parent: 2.0  - F_TLOCK [               0,          ENDING] PASSED.
            Child:  2.1  - F_TEST  [               0,               1] FAILED!
            Child:  **** Expected EACCES, returned success...
            Child:  **** Probably implementation error.
    
    **  CHILD pass 1 results: 0/0 pass, 0/0 warn, 1/1 fail (pass/total).
            Parent: Child died
    
    ** PARENT pass 1 results: 10/10 pass, 0/0 warn, 0/0 fail (pass/total).
    
    After patch:
    
    $ ./cthon04/lock/tlocklfs -t 2 /mnt
    
    Creating parent/child synchronization pipes.
    
    Test #2 - Try to lock the whole file.
            Parent: 2.0  - F_TLOCK [               0,          ENDING] PASSED.
            Child:  2.1  - F_TEST  [               0,               1] PASSED.
            Child:  2.2  - F_TEST  [               0,          ENDING] PASSED.
            Child:  2.3  - F_TEST  [               0,7fffffffffffffff] PASSED.
            Child:  2.4  - F_TEST  [               1,               1] PASSED.
            Child:  2.5  - F_TEST  [               1,          ENDING] PASSED.
            Child:  2.6  - F_TEST  [               1,7fffffffffffffff] PASSED.
            Child:  2.7  - F_TEST  [7fffffffffffffff,               1] PASSED.
            Child:  2.8  - F_TEST  [7fffffffffffffff,          ENDING] PASSED.
            Child:  2.9  - F_TEST  [7fffffffffffffff,7fffffffffffffff] PASSED.
            Parent: 2.10 - F_ULOCK [               0,          ENDING] PASSED.
    
    ** PARENT pass 1 results: 2/2 pass, 0/0 warn, 0/0 fail (pass/total).
    
    **  CHILD pass 1 results: 9/9 pass, 0/0 warn, 0/0 fail (pass/total).
    
    Fixes: d80c69846ddf ("cifs: fix signed integer overflow when fl_end is OFFSET_MAX")
    Reported-by: Xiaoli Feng <xifeng@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Paulo Alcantara (SUSE) <pc@cjr.nz>
    Reviewed-by: Ronnie Sahlberg <lsahlber@redhat.com>
    Signed-off-by: Steve French <stfrench@microsoft.com>

commit 67c79599eea167dd5e08314b8c26f2dfa717753a
Author: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
Date:   Tue Jul 19 16:57:23 2022 -0400

    drm/amd/display: Move populate dml pipes from DCN314 to dml
    
    The function responsible for populating DML pipes has some FPU
    operations, and for this reason, it must be moved to the dml folder.
    This commit moves such function from resource to the fpu file under the
    dml folder.
    
    Reviewed-by: Nicholas Kazlauskas <Nicholas.Kazlauskas@amd.com>
    Acked-by: Tom Chung <chiahsuan.chung@amd.com>
    Signed-off-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 451c0ba9475ebdce36249c5c769efa5d580d1d83
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Fri Jun 17 13:54:15 2022 -0400

    unify the rest of iov_iter_get_pages()/iov_iter_get_pages_alloc() guts
    
    same as for pipes and xarrays; after that iov_iter_get_pages() becomes
    a wrapper for __iov_iter_get_pages_alloc().
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit 68fe506f3731ecf7881de9512cc5f4c14fd13f3a
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Fri Jun 17 13:48:03 2022 -0400

    unify xarray_get_pages() and xarray_get_pages_alloc()
    
    same as for pipes
    
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit 2dcedb2a549a4d7430538213b1b28ef7271bc0aa
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Tue Jun 14 10:24:37 2022 -0400

    ITER_PIPE: helper for getting pipe buffer by index
    
    pipe_buffer instances of a pipe are organized as a ring buffer,
    with power-of-2 size.  Indices are kept *not* reduced modulo ring
    size, so the buffer refered to by index N is
            pipe->bufs[N & (pipe->ring_size - 1)].
    
    Ring size can change over the lifetime of a pipe, but not while
    the pipe is locked.  So for any iov_iter primitives it's a constant.
    Original conversion of pipes to this layout went overboard trying
    to microoptimize that - calculating pipe->ring_size - 1, storing
    it in a local variable and using through the function.  In some
    cases it might be warranted, but most of the times it only
    obfuscates what's going on in there.
    
    Introduce a helper (pipe_buf(pipe, N)) that would encapsulate
    that and use it in the obvious cases.  More will follow...
    
    Reviewed-by: Jeff Layton <jlayton@kernel.org>
    Reviewed-by: Christian Brauner (Microsoft) <brauner@kernel.org>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit ffccfdbab1056954fd400d2864a1c1b38915c143
Author: Samson Tam <Samson.Tam@amd.com>
Date:   Thu May 26 21:12:23 2022 -0400

    drm/amd/display: Add missing ODM 2:1 policy logic
    
    Phantom pipes must use the same configuration used in main pipes. This
    commit add this check.
    
    Reviewed-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Acked-by: Alex Hung <alex.hung@amd.com>
    Signed-off-by: Samson Tam <Samson.Tam@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit f46e3f28f89b893685ec9204405677dac410d8ad
Author: Taimur Hassan <Syed.Hassan@amd.com>
Date:   Wed Jul 13 17:07:43 2022 -0400

    drm/amd/display: Reset pipe count when iterating for DET override
    
    [Why]
    Coding error in DET allocation was resulting in too few DET segments
    being allocated, causing underflow.
    
    [How]
    Reset pipe count each time we begin iterating through pipes for a stream.
    
    Reviewed-by: Alvin Lee <Alvin.Lee2@amd.com>
    Acked-by: Alex Hung <alex.hung@amd.com>
    Signed-off-by: Taimur Hassan <Syed.Hassan@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit eb54e014367e1700fa5b94e4c788520081a70661
Author: Samson Tam <Samson.Tam@amd.com>
Date:   Tue Jul 12 05:54:38 2022 -0400

    drm/amd/display: Fix two MPO videos in single display ODM combine mode
    
    [Why]
    In single display ODM combine mode, two MPO videos ( three
     planes ) are not working
    
    [How]
    When we detect three planes, don't set odm combine 2to1 policy
     for the MPO planes.  Otherwise, we run out of pipes available
    Add support for two MPO videos in dc_add_plane_to_context().
     Don't allow both videos to be on the same side of the
     display.
    Add extra check when fetching free pipe for two MPO videos.
    
    Reviewed-by: Alvin Lee <Alvin.Lee2@amd.com>
    Acked-by: Alex Hung <alex.hung@amd.com>
    Signed-off-by: Samson Tam <Samson.Tam@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 660f46e16c4b8a34978012a9f10a32a16db3e98f
Author: Taimur Hassan <Syed.Hassan@amd.com>
Date:   Fri Jul 8 13:32:46 2022 -0400

    drm/amd/display: Loop through all pipes for DET allocation
    
    [Why & How]
    There are cases where the pipes populated are not all at the top
    of the pipes list under context. Loop through all pipes for DET
    allocation instead of just the number of populated ones, even if
    some unpopulated pipes are iterated through unnecessarily.
    
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Reviewed-by: Alvin Lee <Alvin.Lee2@amd.com>
    Acked-by: Alan Liu <HaoPing.Liu@amd.com>
    Signed-off-by: Taimur Hassan <Syed.Hassan@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 44b0c964201e1e2fbfcdab4472f9260048befbaa
Author: Taimur Hassan <Syed.Hassan@amd.com>
Date:   Tue Jul 5 12:22:09 2022 -0400

    drm/amd/display: Update de-tile override to anticipate pipe splitting
    
    [Why]
    For certain MPO configurations, DML will split a pipe after DET buffer has
    already been allocated by driver, resulting in allocation of more DET
    segments than the configurable return buffer has, causing underflow.
    
    [How]
    Determine during DET override calculation whether or not a pipe will be
    split later on by DML, and distribute DET segments based on expected
    number of pipes.
    
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Reviewed-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Acked-by: Alan Liu <HaoPing.Liu@amd.com>
    Signed-off-by: Taimur Hassan <Syed.Hassan@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 97ef77c52b789ec1411d360ed99dca1efe4b2c81
Author: Jason A. Donenfeld <Jason@zx2c4.com>
Date:   Wed Jun 29 15:06:58 2022 +0200

    fs: check FMODE_LSEEK to control internal pipe splicing
    
    The original direct splicing mechanism from Jens required the input to
    be a regular file because it was avoiding the special socket case. It
    also recognized blkdevs as being close enough to a regular file. But it
    forgot about chardevs, which behave the same way and work fine here.
    
    This is an okayish heuristic, but it doesn't totally work. For example,
    a few chardevs should be spliceable here. And a few regular files
    shouldn't. This patch fixes this by instead checking whether FMODE_LSEEK
    is set, which represents decently enough what we need rewinding for when
    splicing to internal pipes.
    
    Fixes: b92ce5589374 ("[PATCH] splice: add direct fd <-> fd splicing support")
    Cc: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Jason A. Donenfeld <Jason@zx2c4.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit 80fb575678b488b920cd9100939b60d480101907
Author: Samson Tam <Samson.Tam@amd.com>
Date:   Mon Apr 11 15:38:48 2022 -0400

    drm/amd/display: fix unnecessary pipe split playing NV12 1080p MPO video
    
    [Why]
    When playing NV12 1080p MPO video, it is pipe splitting so
    we see two pipes in fullscreen and four pipes in windowed
    mode. Pipe split is happening because we are setting
    MaximumMPCCombine = 1
    
    [How]
    Algorithm for MaximumMPCCombine has extra conditions we do
    not need.  Use DCN31 algorithm instead
    
    Signed-off-by: Samson Tam <Samson.Tam@amd.com>
    Reviewed-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 59a1e9ed1b406b1ae7cbbc612ce00d459987d028
Author: Ilya Bakoulin <Ilya.Bakoulin@amd.com>
Date:   Thu Jun 9 18:45:04 2022 -0400

    drm/amd/display: Fix black screen when disabling Freesync in OSD
    
    [Why]
    Black screen encountered when disabling Freesync through OSD on some
    displays.
    
    [How]
    Set the should_disable flag when new top pipe has no plane state to
    ensure that pipes get cleaned up.
    
    Reviewed-by: Chris Park <Chris.Park@amd.com>
    Acked-by: Solomon Chiu <solomon.chiu@amd.com>
    Signed-off-by: Ilya Bakoulin <Ilya.Bakoulin@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 9dfc3ee1b0f22d9415c9b7c316447d47d4a702d1
Author: Samson Tam <Samson.Tam@amd.com>
Date:   Fri Jun 17 23:00:30 2022 -0400

    drm/amd/display: Fix windowed MPO video with ODM combine for DCN32
    
    [Why]
    In single display configuration, windowed MPO does not work
     with ODM combine.
    
    [How]
    For ODM + MPO window on one half of ODM, only 3 pipes should
     be allocated and scaling parameters adjusted to handle this case.
     Otherwise, we use 4 pipes.
    Move copy_surface_update_to_plane() before dc_add_plane_to_context()
     so that it gets the updated rect information when setting up
     the pipes.
    Add dc_check_boundary_crossing_for_windowed_mpo_with_odm() to force
     a full update when we cross a boundary requiring us to reconfigure
     the number of pipes between 3 and 4 pipes.
    Set config.enable_windowed_mpo_odm to true when we have the
     debug.enable_single_display_2to1_odm_policy set to true.
    Don't fail validating ODM with windowed MPO if
     config.enable_windowed_mpo_odm is true.
    
    Reviewed-by: Aric Cyr <Aric.Cyr@amd.com>
    Acked-by: Solomon Chiu <solomon.chiu@amd.com>
    Signed-off-by: Samson Tam <Samson.Tam@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 14eb72ff580de169212bfc5222499febd312a252
Author: Alvin Lee <Alvin.Lee2@amd.com>
Date:   Tue Jun 21 11:03:40 2022 -0400

    drm/amd/display: Exit SubVP if MPO in use
    
    [Description]
    Exit SubVP if MPO is in use since SubVP + MPO together is not supported.
    - Don't add SubVP at validation time if we see MPO is in use
    
    Issues fixed in the SubVP / MPO transition:
    1. Enable phantom pipes in post unlock function to prevent underflow
    when an active pipe is being transitioned to be a phantom pipe (VTG
    updates take place right away). Also must wait for VUPDATE of the main
    pipe to complete first
    
    2. Don't wait for MPCC idle when transitioning a phantom pipe to an
    actual pipe. MPCC_STATUS is never asserted due to OTG being off for
    phantom pipes
    
    3. When transitioning an active pipe to phantom, program DET right away
    (same as disabling the pipe) or the DET update will only take when
    the phantom pipe is enabled which can cause DET allocation errors.
    
    4. For K1/K2 programming of phantom pipes, use same settings as the
    main pipe. Also don't program K1 / K2 = 0xF ever since the field is only
    1 / 2 bits wide.
    
    Reviewed-by: Jun Lei <Jun.Lei@amd.com>
    Acked-by: Solomon Chiu <solomon.chiu@amd.com>
    Signed-off-by: Alvin Lee <Alvin.Lee2@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 59bf2aca4b1c3eca28b337b5e797bb9b43d44f3b
Author: CHANDAN VURDIGERE NATARAJ <chandan.vurdigerenataraj@amd.com>
Date:   Tue Mar 29 13:10:31 2022 +0530

    drm/amd/display: Fix by adding FPU protection for dcn30_internal_validate_bw
    
    [ Upstream commit 50e6cb3fd2cde554db646282ea10df7236e6493c ]
    
    [Why]
    Below general protection fault observed when WebGL Aquarium is run for
    longer duration. If drm debug logs are enabled and set to 0x1f then the
    issue is observed within 10 minutes of run.
    
    [  100.717056] general protection fault, probably for non-canonical address 0x2d33302d32323032: 0000 [#1] PREEMPT SMP NOPTI
    [  100.727921] CPU: 3 PID: 1906 Comm: DrmThread Tainted: G        W         5.15.30 #12 d726c6a2d6ebe5cf9223931cbca6892f916fe18b
    [  100.754419] RIP: 0010:CalculateSwathWidth+0x1f7/0x44f
    [  100.767109] Code: 00 00 00 f2 42 0f 11 04 f0 48 8b 85 88 00 00 00 f2 42 0f 10 04 f0 48 8b 85 98 00 00 00 f2 42 0f 11 04 f0 48 8b 45 10 0f 57 c0 <f3> 42 0f 2a 04 b0 0f 57 c9 f3 43 0f 2a 0c b4 e8 8c e2 f3 ff 48 8b
    [  100.781269] RSP: 0018:ffffa9230079eeb0 EFLAGS: 00010246
    [  100.812528] RAX: 2d33302d32323032 RBX: 0000000000000500 RCX: 0000000000000000
    [  100.819656] RDX: 0000000000000001 RSI: ffff99deb712c49c RDI: 0000000000000000
    [  100.826781] RBP: ffffa9230079ef50 R08: ffff99deb712460c R09: ffff99deb712462c
    [  100.833907] R10: ffff99deb7124940 R11: ffff99deb7124d70 R12: ffff99deb712ae44
    [  100.841033] R13: 0000000000000001 R14: 0000000000000000 R15: ffffa9230079f0a0
    [  100.848159] FS:  00007af121212640(0000) GS:ffff99deba780000(0000) knlGS:0000000000000000
    [  100.856240] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  100.861980] CR2: 0000209000fe1000 CR3: 000000011b18c000 CR4: 0000000000350ee0
    [  100.869106] Call Trace:
    [  100.871555]  <TASK>
    [  100.873655]  ? asm_sysvec_reschedule_ipi+0x12/0x20
    [  100.878449]  CalculateSwathAndDETConfiguration+0x1a3/0x6dd
    [  100.883937]  dml31_ModeSupportAndSystemConfigurationFull+0x2ce4/0x76da
    [  100.890467]  ? kallsyms_lookup_buildid+0xc8/0x163
    [  100.895173]  ? kallsyms_lookup_buildid+0xc8/0x163
    [  100.899874]  ? __sprint_symbol+0x80/0x135
    [  100.903883]  ? dm_update_plane_state+0x3f9/0x4d2
    [  100.908500]  ? symbol_string+0xb7/0xde
    [  100.912250]  ? number+0x145/0x29b
    [  100.915566]  ? vsnprintf+0x341/0x5ff
    [  100.919141]  ? desc_read_finalized_seq+0x39/0x87
    [  100.923755]  ? update_load_avg+0x1b9/0x607
    [  100.927849]  ? compute_mst_dsc_configs_for_state+0x7d/0xd5b
    [  100.933416]  ? fetch_pipe_params+0xa4d/0xd0c
    [  100.937686]  ? dc_fpu_end+0x3d/0xa8
    [  100.941175]  dml_get_voltage_level+0x16b/0x180
    [  100.945619]  dcn30_internal_validate_bw+0x10e/0x89b
    [  100.950495]  ? dcn31_validate_bandwidth+0x68/0x1fc
    [  100.955285]  ? resource_build_scaling_params+0x98b/0xb8c
    [  100.960595]  ? dcn31_validate_bandwidth+0x68/0x1fc
    [  100.965384]  dcn31_validate_bandwidth+0x9a/0x1fc
    [  100.970001]  dc_validate_global_state+0x238/0x295
    [  100.974703]  amdgpu_dm_atomic_check+0x9c1/0xbce
    [  100.979235]  ? _printk+0x59/0x73
    [  100.982467]  drm_atomic_check_only+0x403/0x78b
    [  100.986912]  drm_mode_atomic_ioctl+0x49b/0x546
    [  100.991358]  ? drm_ioctl+0x1c1/0x3b3
    [  100.994936]  ? drm_atomic_set_property+0x92a/0x92a
    [  100.999725]  drm_ioctl_kernel+0xdc/0x149
    [  101.003648]  drm_ioctl+0x27f/0x3b3
    [  101.007051]  ? drm_atomic_set_property+0x92a/0x92a
    [  101.011842]  amdgpu_drm_ioctl+0x49/0x7d
    [  101.015679]  __se_sys_ioctl+0x7c/0xb8
    [  101.015685]  do_syscall_64+0x5f/0xb8
    [  101.015690]  ? __irq_exit_rcu+0x34/0x96
    
    [How]
    It calles populate_dml_pipes which uses doubles to initialize.
    Adding FPU protection avoids context switch and probable loss of vba context
    as there is potential contention while drm debug logs are enabled.
    
    Signed-off-by: CHANDAN VURDIGERE NATARAJ <chandan.vurdigerenataraj@amd.com>
    Reviewed-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1341bc9e99af58e5a0c0597da562658332df4513
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Wed Jun 15 21:50:35 2022 +0100

    media: atomisp: use atomisp_destroy_pipes_stream_force() in more places
    
    Use atomisp_destroy_pipes_stream_force() in 4 more places,
    instead of open coding it.
    
    Link: https://lore.kernel.org/linux-media/20220615205037.16549-39-hdegoede@redhat.com
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>

commit 507e72a2ae5ccbc7751a06ce51d3f0096f7209cc
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Wed Jun 15 21:50:33 2022 +0100

    media: atomisp: use atomisp_create_pipes_stream() in more places
    
    Use atomisp_create_pipes_stream() in 2 more places,
    instead of open coding it.
    
    Link: https://lore.kernel.org/linux-media/20220615205037.16549-37-hdegoede@redhat.com
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>

commit 8c341d05a66758fd03d95847a67bf4595f560e92
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Wed Jun 15 21:50:32 2022 +0100

    media: atomisp: add error logging to atomisp_destroy_pipes_stream_force()
    
    __destroy_streams() and __destroy_pipes() may return an error.
    Log a warning when either of them fails.
    
    Link: https://lore.kernel.org/linux-media/20220615205037.16549-36-hdegoede@redhat.com
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>

commit 798d2ad739da5343122eff386578f259278f2594
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Wed Jun 15 21:50:31 2022 +0100

    media: atomisp: add error checking to atomisp_create_pipes_stream()
    
    The functions called by atomisp_create_pipes_stream() can fail,
    add error checking for them.
    
    Link: https://lore.kernel.org/linux-media/20220615205037.16549-35-hdegoede@redhat.com
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>

commit 3bde235bf6780e741d602deb570a8bd7e10a685d
Author: Hans de Goede <hdegoede@redhat.com>
Date:   Wed Jun 15 21:50:30 2022 +0100

    media: atomisp: fix __get_frame_info() error handling
    
    On ia_css_pipe_get_info() errors, destroy both the streams as well
    as the pipes which were created.
    
    Link: https://lore.kernel.org/linux-media/20220615205037.16549-34-hdegoede@redhat.com
    Reviewed-by: Andy Shevchenko <andy.shevchenko@gmail.com>
    Signed-off-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@kernel.org>

commit 97ca308925a50aa80711ccfaf814fa3898374862
Author: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
Date:   Mon Jun 20 16:37:07 2022 -0400

    drm/amd/display: Add minimal pipe split transition state
    
    [WHY?]
    When adding/removing a plane to some configurations, unsupported pipe
    programming can occur when moving to a new plane.  Such cases include pipe
    split on multi-display, with MPO, and/or ODM.
    
    [HOW?]
    Add a safe transistion state that minimizes pipe usage before programming
    new configuration. When adding a plane, the current state has the least
    pipes required so it is applied without splitting.  This must be applied
    prior to updating the plane_state for seamless transition.  When removing a
    plane, the new state has the least pieps required so it is applied without
    splitting.
    
    Signed-off-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 740ccea3d36732346387ce882c50a7e4c3599316
Author: Alvin Lee <Alvin.Lee2@amd.com>
Date:   Wed May 4 11:20:53 2022 -0400

    drm/amd/display: Change DET policy for MPO cases
    
    For MPO we want to allocate less than maximum DET for MPO pipes because
    we need enogh buffer to move DET back to other pipes when removing an
    MPO plane. Also update regular DET allocation to use DET override (DCN32
    has an internal policy which driver does not want to use)
    
    Signed-off-by: Alvin Lee <Alvin.Lee2@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 85f4bc0c333ceed24cbc9f69a2a77fab1ae3d4d1
Author: Alvin Lee <Alvin.Lee2@amd.com>
Date:   Mon May 2 15:04:31 2022 -0400

    drm/amd/display: Add SubVP required code
    
    This commit enables the SubVP feature. To achieve that, we need to:
    
    - Don't force p-state disallow on SubVP (can't block dummy p-state)
    - Send calculated watermark to DMCUB for SubVP
    - Adjust CAB mode message to PMFW
    - Add a proper locking sequence for SubVP
    - Various fixes to SubVP static analysis and determining SubVP config
    - Currently SubVP not supported with pipe split so merge all pipes
      before setting up SubVp
    
    Reviewed-by: Jun Lei <Jun.Lei@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Acked-by: Alan Liu <HaoPing.Liu@amd.com>
    Signed-off-by: Alvin Lee <Alvin.Lee2@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit ff15cea338d2c78e0086d55c8a9dd637a5dd3ccc
Author: Aurabindo Pillai <aurabindo.pillai@amd.com>
Date:   Tue Jun 28 16:25:28 2022 -0400

    drm/amd/display: expose additional modifier for DCN32/321
    
    [Why&How]
    Some userspace expect a backwards compatible modifier on DCN32/321. For
    hardware with num_pipes more than 16, we expose the most efficient
    modifier first. As a fall back method, we need to expose slightly inefficient
    modifier AMD_FMT_MOD_TILE_GFX9_64K_R_X after the best option.
    
    Also set the number of packers to fixed value as required per hardware
    documentation. This value is cached during hardware initialization and
    can be read through the base driver.
    
    Signed-off-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Reviewed-by: Bas Nieuwenhuizen <bas@basnieuwenhuizen.nl>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 8c0666d320f2fff6bc7cf76422bfbe90c20f53cc
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Fri May 20 13:18:16 2022 -0700

    rcutorture: Make failure indication note reader-batch overflow
    
    The loop scanning the pipesummary[] array currently skips the last
    element, which means that the diagnostics ignore those rarest of
    situations, namely where some readers persist across more than ten
    grace periods, but all other readers avoid spanning a full grace period.
    This commit therefore adjusts the scan to include the last element of
    this array.
    
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>

commit 651d4a0fc4c5c6a2d20c95ef814f0d4381f71d55
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Jun 15 20:48:51 2022 +0300

    drm/i915: Sanitize underrun reporting before turning off any pipes
    
    Make sure FIFO underrun reporting is flagged as disabled very
    early during the state readout so that we don't get any
    spurious FIFO underruns reports from intel_crtc_disable_noatomic().
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220615174851.20658-2-ville.syrjala@linux.intel.com
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>

commit e909b43bddc0ff5db59e633398e35a25b9b2f0c1
Merge: a9cf02c6a671 e0e0cc54000e
Author: Marc Kleine-Budde <mkl@pengutronix.de>
Date:   Sat Jun 11 22:46:10 2022 +0200

    Merge branch 'can-etas_es58x-cleanups-on-struct-es58x_device'
    
    Vincent Mailhol says:
    
    ====================
    This series contains two clean up patches toward struct es58x_device
    of the CAN etas_es58x driver. The first one removes the field
    rx_max_packet_size which value can actually be retrieved from the
    helper function usb_maxpacket(). The second one fixes the signedness
    of the TX and RX pipes.
    
    No functional changes.
    ====================
    
    Link: https://lore.kernel.org/all/20220611162037.1507-1-mailhol.vincent@wanadoo.fr
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>

commit e0e0cc54000e6f36a38c70778feb9d753cfb87e2
Author: Vincent Mailhol <mailhol.vincent@wanadoo.fr>
Date:   Sun Jun 12 01:20:37 2022 +0900

    can: etas_es58x: fix signedness of USB RX and TX pipes
    
    USB pipes are meant to be unsigned int (c.f. [1]). However, fields
    rx_pipe and tx_pipe of struct es58x_device are both signed
    integers. Change the type of those two fields from int to unsigned
    int.
    
    [1] https://elixir.bootlin.com/linux/v5.18/source/include/linux/usb.h#L1571
    
    Link: https://lore.kernel.org/all/20220611162037.1507-3-mailhol.vincent@wanadoo.fr
    Signed-off-by: Vincent Mailhol <mailhol.vincent@wanadoo.fr>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>

commit 431d071286524bd4f9ba2e46b1be87b479220174
Author: Yifan Zhang <yifan1.zhang@amd.com>
Date:   Fri Jun 3 10:24:31 2022 +0800

    drm/amdgpu/mes: only invalid/prime icache when finish loading both pipe MES FWs.
    
    invalid/prime icahce operation takes effect both pipes cuconrrently,
    therefore CP_MES_IC_BASE_LO/HI and CP_MES_MDBASE_LO/HI both have to be
    set before prime icache. Otherwise MES hardware gets garbage data in
    above regsters and causes page fault
    
    [  470.873200] amdgpu 0000:33:00.0: amdgpu: [gfxhub] page fault (src_id:0 ring:217 vmid:0 pasid:0, for process  pid 0 thread  pid 0)
    [  470.873222] amdgpu 0000:33:00.0: amdgpu:   in page starting at address 0x000092cb89b00000 from client 10
    [  470.873234] amdgpu 0000:33:00.0: amdgpu: GCVM_L2_PROTECTION_FAULT_STATUS:0x00000BB3
    [  470.873242] amdgpu 0000:33:00.0: amdgpu:      Faulty UTCL2 client ID: CPC (0x5)
    [  470.873247] amdgpu 0000:33:00.0: amdgpu:      MORE_FAULTS: 0x1
    [  470.873251] amdgpu 0000:33:00.0: amdgpu:      WALKER_ERROR: 0x1
    [  470.873256] amdgpu 0000:33:00.0: amdgpu:      PERMISSION_FAULTS: 0xb
    [  470.873260] amdgpu 0000:33:00.0: amdgpu:      MAPPING_ERROR: 0x1
    [  470.873264] amdgpu 0000:33:00.0: amdgpu:      RW: 0x0
    
    Signed-off-by: Yifan Zhang <yifan1.zhang@amd.com>
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Reviewed-by: Tim Huang <Tim.Huang@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 8728df26dd24a63b24e4e5a6c847172add2fa149
Author: Yifan Zhang <yifan1.zhang@amd.com>
Date:   Fri Jun 3 10:24:31 2022 +0800

    drm/amdgpu/mes: only invalid/prime icache when finish loading both pipe MES FWs.
    
    invalid/prime icahce operation takes effect both pipes cuconrrently,
    therefore CP_MES_IC_BASE_LO/HI and CP_MES_MDBASE_LO/HI both have to be
    set before prime icache. Otherwise MES hardware gets garbage data in
    above regsters and causes page fault
    
    [  470.873200] amdgpu 0000:33:00.0: amdgpu: [gfxhub] page fault (src_id:0 ring:217 vmid:0 pasid:0, for process  pid 0 thread  pid 0)
    [  470.873222] amdgpu 0000:33:00.0: amdgpu:   in page starting at address 0x000092cb89b00000 from client 10
    [  470.873234] amdgpu 0000:33:00.0: amdgpu: GCVM_L2_PROTECTION_FAULT_STATUS:0x00000BB3
    [  470.873242] amdgpu 0000:33:00.0: amdgpu:      Faulty UTCL2 client ID: CPC (0x5)
    [  470.873247] amdgpu 0000:33:00.0: amdgpu:      MORE_FAULTS: 0x1
    [  470.873251] amdgpu 0000:33:00.0: amdgpu:      WALKER_ERROR: 0x1
    [  470.873256] amdgpu 0000:33:00.0: amdgpu:      PERMISSION_FAULTS: 0xb
    [  470.873260] amdgpu 0000:33:00.0: amdgpu:      MAPPING_ERROR: 0x1
    [  470.873264] amdgpu 0000:33:00.0: amdgpu:      RW: 0x0
    
    Signed-off-by: Yifan Zhang <yifan1.zhang@amd.com>
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Reviewed-by: Tim Huang <Tim.Huang@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit d4965c53b95d7533dfc2309d2fc25838bd33220e
Author: Duncan Ma <duncan.ma@amd.com>
Date:   Wed May 25 16:28:49 2022 -0400

    drm/amd/display: Fix dpp dto for disabled pipes
    
    [Why]
    When switching from 1 pipe to 4to1 mpc combine,
    DppDtoClk aren't enabled for the disabled pipes
    pior to programming the pipes. Upon optimizing
    bandwidth, DppDto are enabled causing intermittent
    underflow.
    
    [How]
    Update dppclk dto whenever pipe are flagged to
    enable.
    
    Reviewed-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Reviewed-by: Nicholas Kazlauskas <Nicholas.Kazlauskas@amd.com>
    Reviewed-by: Hansen Dsouza <Hansen.Dsouza@amd.com>
    Acked-by: Hamza Mahfooz <hamza.mahfooz@amd.com>
    Signed-off-by: Duncan Ma <duncan.ma@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 0c56705d8aae9696348cc320b71d531ede001b79
Author: Duncan Ma <duncan.ma@amd.com>
Date:   Tue May 17 17:50:23 2022 -0400

    drm/amd/display: Correct min comp buffer size
    
    [Why]
    In 3-way mpo pipes, there is a case that we
    overbook the CRB buffer size. At rare instances,
    overbooking the crb will cause underflow. This only
    happens when det_size changes dynamically
    based on pipe_cnt.
    
    [How]
    Set min compbuff size to 1 segment when preparing BW.
    
    Reviewed-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Acked-by: Hamza Mahfooz <hamza.mahfooz@amd.com>
    Signed-off-by: Duncan Ma <duncan.ma@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit b07d1d73b09ef40e91ace51a2e167391676a8175
Author: Arunpravin Paneer Selvam <Arunpravin.PaneerSelvam@amd.com>
Date:   Mon Jun 6 13:06:30 2022 +0530

    drm/amd/amdgpu: Enable high priority gfx queue
    
    Starting from SIENNA CICHLID asic supports two gfx pipes, enabling
    two graphics queues, 1 on each pipe, pipe0 queue0 would be the normal
    piority queue and pipe1 queue0 would be the high priority queue
    
    Only one queue per pipe is visble to SPI, SPI looks at the priority
    value assigned to CP_GFX_HQD_QUEUE_PRIORITY from each of the queue's
    HQD/MQD.
    
    Create contexts applying AMDGPU_CTX_PRIORITY_HIGH which submits job
    to the high priority queue on GFX pipe1. There would be starvation
    of LP workload if HP workload is always available.
    
    v2:
      - remove unnecessary check(Nirmoy)
      - make pipe1 hardware support a separate patch(Nirmoy)
      - remove duplicate code(Shashank)
      - add CSA support for second gfx pipe(Alex)
    
    v3(Christian):
      - fix incorrect indentation
      - merge COMPUTE and GFX switch cases as both calls the same function.
    
    v4:
      - rebase w/ latest code base
    
    Signed-off-by: Arunpravin Paneer Selvam <Arunpravin.PaneerSelvam@amd.com>
    Acked-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 65b462fc7ef97dad2fe99b58f0172a14b8948329
Author: Hawking Zhang <Hawking.Zhang@amd.com>
Date:   Wed Apr 6 12:08:12 2022 +0800

    drm/amdgpu: enable GENERIC0_INT for gfx/compute pipes
    
    To generate an interrupt to RLC for accessing indirect
    registers that CP can not access directly
    
    Signed-off-by: Hawking Zhang <Hawking.Zhang@amd.com>
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 207e8bbe667fa1368155bae8d0e92041a4c1c079
Author: Jack Xiao <Jack.Xiao@amd.com>
Date:   Wed Apr 14 18:00:13 2021 +0800

    drm/amdgpu/mes: extend mes framework to support multiple mes pipes
    
    Add support for multiple mes pipes, so that reuse the existing
    code to initialize more mes pipe and queue.
    
    Signed-off-by: Jack Xiao <Jack.Xiao@amd.com>
    Reviewed-by: Hawking Zhang <Hawking.Zhang@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 906f904097359d059623ca8d3511d9f341080f2c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Apr 20 12:07:53 2022 -0700

    Revert "fs/pipe: use kvcalloc to allocate a pipe_buffer array"
    
    This reverts commit 5a519c8fe4d620912385f94372fc8472fa98c662.
    
    It turns out that making the pipe almost arbitrarily large has some
    rather unexpected downsides.  The kernel test robot reports a kernel
    warning that is due to pipe->max_usage now growing to the point where
    the iter_file_splice_write() buffer allocation can no longer be
    satisfied as a slab allocation, and the
    
            int nbufs = pipe->max_usage;
            struct bio_vec *array = kcalloc(nbufs, sizeof(struct bio_vec),
                                            GFP_KERNEL);
    
    code sequence there will now always fail as a result.
    
    That code could be modified to use kvcalloc() too, but I feel very
    uncomfortable making those kinds of changes for a very niche use case
    that really should have other options than make these kinds of
    fundamental changes to pipe behavior.
    
    Maybe the CRIU process dumping should be multi-threaded, and use
    multiple pipes and multiple cores, rather than try to use one larger
    pipe to minimize splice() calls.
    
    Reported-by: kernel test robot <oliver.sang@intel.com>
    Link: https://lore.kernel.org/all/20220420073717.GD16310@xsang-OptiPlex-9020/
    Cc: Andrei Vagin <avagin@gmail.com>
    Cc: Dmitry Safonov <0x7f454c46@gmail.com>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 0ba2661db6262da49cf4edee7fc4ab6d17bcc45e
Author: Imre Deak <imre.deak@intel.com>
Date:   Fri Apr 15 00:06:45 2022 +0300

    drm/i915: Rename the power domain names to end with pipes/ports
    
    Make all power domain names end with the pipe/port instance for
    consistency.
    
    No functional changes.
    
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Reviewed-by: Jouni Högander <jouni.hogander@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220414210657.1785773-6-imre.deak@intel.com

commit 0c89008a246804e5d124023804e5866990a17949
Author: Roman Li <Roman.Li@amd.com>
Date:   Tue Mar 15 16:31:14 2022 -0400

    drm/amd/display: Enable power gating before init_pipes
    
    [ Upstream commit 58e16c752e9540b28a873c44c3bee83e022007c1 ]
    
    [Why]
    In init_hw() we call init_pipes() before enabling power gating.
    init_pipes() tries to power gate dsc but it may fail because
    required force-ons are not released yet.
    As a result with dsc config the following errors observed on resume:
    "REG_WAIT timeout 1us * 1000 tries - dcn20_dsc_pg_control"
    "REG_WAIT timeout 1us * 1000 tries - dcn20_dpp_pg_control"
    "REG_WAIT timeout 1us * 1000 tries - dcn20_hubp_pg_control"
    
    [How]
    Move enable_power_gating_plane() before init_pipes() in init_hw()
    
    Reviewed-by: Anthony Koo <Anthony.Koo@amd.com>
    Reviewed-by: Eric Yang <Eric.Yang2@amd.com>
    Acked-by: Alex Hung <alex.hung@amd.com>
    Signed-off-by: Roman Li <Roman.Li@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8af706006e9dbb48e12dfc16472ad1c96b2afa63
Author: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
Date:   Fri Mar 18 11:10:34 2022 -0400

    drm/amd/display: Fix p-state allow debug index on dcn31
    
    commit 3107e1a7ae088ee94323fe9ab05dbefd65b3077f upstream.
    
    [Why]
    It changed since dcn30 but the hubbub31 constructor hasn't been
    modified to reflect this.
    
    [How]
    Update the value in the constructor to 0x6 so we're checking the right
    bits for p-state allow.
    
    It worked before by accident, but can falsely assert 0 depending on HW
    state transitions. The most frequent of which appears to be when
    all pipes turn off during IGT tests.
    
    Cc: Harry Wentland <harry.wentland@amd.com>
    
    Fixes: e7031d8258f1b4 ("drm/amd/display: Add pstate verification and recovery for DCN31")
    Signed-off-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Reviewed-by: Eric Yang <Eric.Yang2@amd.com>
    Acked-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eab8e585840f84c6a352eaab70e5495eda7ebb6f
Author: Roman Li <Roman.Li@amd.com>
Date:   Tue Mar 15 16:31:14 2022 -0400

    drm/amd/display: Enable power gating before init_pipes
    
    [ Upstream commit 58e16c752e9540b28a873c44c3bee83e022007c1 ]
    
    [Why]
    In init_hw() we call init_pipes() before enabling power gating.
    init_pipes() tries to power gate dsc but it may fail because
    required force-ons are not released yet.
    As a result with dsc config the following errors observed on resume:
    "REG_WAIT timeout 1us * 1000 tries - dcn20_dsc_pg_control"
    "REG_WAIT timeout 1us * 1000 tries - dcn20_dpp_pg_control"
    "REG_WAIT timeout 1us * 1000 tries - dcn20_hubp_pg_control"
    
    [How]
    Move enable_power_gating_plane() before init_pipes() in init_hw()
    
    Reviewed-by: Anthony Koo <Anthony.Koo@amd.com>
    Reviewed-by: Eric Yang <Eric.Yang2@amd.com>
    Acked-by: Alex Hung <alex.hung@amd.com>
    Signed-off-by: Roman Li <Roman.Li@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e663865f5284124196bc04e010e7344d8a278f3
Author: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
Date:   Fri Mar 18 11:10:34 2022 -0400

    drm/amd/display: Fix p-state allow debug index on dcn31
    
    commit 3107e1a7ae088ee94323fe9ab05dbefd65b3077f upstream.
    
    [Why]
    It changed since dcn30 but the hubbub31 constructor hasn't been
    modified to reflect this.
    
    [How]
    Update the value in the constructor to 0x6 so we're checking the right
    bits for p-state allow.
    
    It worked before by accident, but can falsely assert 0 depending on HW
    state transitions. The most frequent of which appears to be when
    all pipes turn off during IGT tests.
    
    Cc: Harry Wentland <harry.wentland@amd.com>
    
    Fixes: e7031d8258f1b4 ("drm/amd/display: Add pstate verification and recovery for DCN31")
    Signed-off-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Reviewed-by: Eric Yang <Eric.Yang2@amd.com>
    Acked-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5598442edc29e8f6f2380e4b471dc1a3fcd80508
Author: Pavel Skripkin <paskripkin@gmail.com>
Date:   Sun Mar 13 13:09:03 2022 +0300

    can: mcba_usb: properly check endpoint type
    
    commit 136bed0bfd3bc9c95c88aafff2d22ecb3a919f23 upstream.
    
    Syzbot reported warning in usb_submit_urb() which is caused by wrong
    endpoint type. We should check that in endpoint is actually present to
    prevent this warning.
    
    Found pipes are now saved to struct mcba_priv and code uses them
    directly instead of making pipes in place.
    
    Fail log:
    
    | usb 5-1: BOGUS urb xfer, pipe 3 != type 1
    | WARNING: CPU: 1 PID: 49 at drivers/usb/core/urb.c:502 usb_submit_urb+0xed2/0x18a0 drivers/usb/core/urb.c:502
    | Modules linked in:
    | CPU: 1 PID: 49 Comm: kworker/1:2 Not tainted 5.17.0-rc6-syzkaller-00184-g38f80f42147f #0
    | Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.14.0-2 04/01/2014
    | Workqueue: usb_hub_wq hub_event
    | RIP: 0010:usb_submit_urb+0xed2/0x18a0 drivers/usb/core/urb.c:502
    | ...
    | Call Trace:
    |  <TASK>
    |  mcba_usb_start drivers/net/can/usb/mcba_usb.c:662 [inline]
    |  mcba_usb_probe+0x8a3/0xc50 drivers/net/can/usb/mcba_usb.c:858
    |  usb_probe_interface+0x315/0x7f0 drivers/usb/core/driver.c:396
    |  call_driver_probe drivers/base/dd.c:517 [inline]
    
    Fixes: 51f3baad7de9 ("can: mcba_usb: Add support for Microchip CAN BUS Analyzer")
    Link: https://lore.kernel.org/all/20220313100903.10868-1-paskripkin@gmail.com
    Reported-and-tested-by: syzbot+3bc1dce0cc0052d60fde@syzkaller.appspotmail.com
    Signed-off-by: Pavel Skripkin <paskripkin@gmail.com>
    Reviewed-by: Vincent Mailhol <mailhol.vincent@wanadoo.fr>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cbd110b8dd7ad763bf413f71c0484116ae9302d4
Author: Pavel Skripkin <paskripkin@gmail.com>
Date:   Sun Mar 13 13:09:03 2022 +0300

    can: mcba_usb: properly check endpoint type
    
    commit 136bed0bfd3bc9c95c88aafff2d22ecb3a919f23 upstream.
    
    Syzbot reported warning in usb_submit_urb() which is caused by wrong
    endpoint type. We should check that in endpoint is actually present to
    prevent this warning.
    
    Found pipes are now saved to struct mcba_priv and code uses them
    directly instead of making pipes in place.
    
    Fail log:
    
    | usb 5-1: BOGUS urb xfer, pipe 3 != type 1
    | WARNING: CPU: 1 PID: 49 at drivers/usb/core/urb.c:502 usb_submit_urb+0xed2/0x18a0 drivers/usb/core/urb.c:502
    | Modules linked in:
    | CPU: 1 PID: 49 Comm: kworker/1:2 Not tainted 5.17.0-rc6-syzkaller-00184-g38f80f42147f #0
    | Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.14.0-2 04/01/2014
    | Workqueue: usb_hub_wq hub_event
    | RIP: 0010:usb_submit_urb+0xed2/0x18a0 drivers/usb/core/urb.c:502
    | ...
    | Call Trace:
    |  <TASK>
    |  mcba_usb_start drivers/net/can/usb/mcba_usb.c:662 [inline]
    |  mcba_usb_probe+0x8a3/0xc50 drivers/net/can/usb/mcba_usb.c:858
    |  usb_probe_interface+0x315/0x7f0 drivers/usb/core/driver.c:396
    |  call_driver_probe drivers/base/dd.c:517 [inline]
    
    Fixes: 51f3baad7de9 ("can: mcba_usb: Add support for Microchip CAN BUS Analyzer")
    Link: https://lore.kernel.org/all/20220313100903.10868-1-paskripkin@gmail.com
    Reported-and-tested-by: syzbot+3bc1dce0cc0052d60fde@syzkaller.appspotmail.com
    Signed-off-by: Pavel Skripkin <paskripkin@gmail.com>
    Reviewed-by: Vincent Mailhol <mailhol.vincent@wanadoo.fr>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b48d1bb3f1ca337ad653022aefb5a40a47dfe5cd
Author: Pavel Skripkin <paskripkin@gmail.com>
Date:   Sun Mar 13 13:09:03 2022 +0300

    can: mcba_usb: properly check endpoint type
    
    commit 136bed0bfd3bc9c95c88aafff2d22ecb3a919f23 upstream.
    
    Syzbot reported warning in usb_submit_urb() which is caused by wrong
    endpoint type. We should check that in endpoint is actually present to
    prevent this warning.
    
    Found pipes are now saved to struct mcba_priv and code uses them
    directly instead of making pipes in place.
    
    Fail log:
    
    | usb 5-1: BOGUS urb xfer, pipe 3 != type 1
    | WARNING: CPU: 1 PID: 49 at drivers/usb/core/urb.c:502 usb_submit_urb+0xed2/0x18a0 drivers/usb/core/urb.c:502
    | Modules linked in:
    | CPU: 1 PID: 49 Comm: kworker/1:2 Not tainted 5.17.0-rc6-syzkaller-00184-g38f80f42147f #0
    | Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.14.0-2 04/01/2014
    | Workqueue: usb_hub_wq hub_event
    | RIP: 0010:usb_submit_urb+0xed2/0x18a0 drivers/usb/core/urb.c:502
    | ...
    | Call Trace:
    |  <TASK>
    |  mcba_usb_start drivers/net/can/usb/mcba_usb.c:662 [inline]
    |  mcba_usb_probe+0x8a3/0xc50 drivers/net/can/usb/mcba_usb.c:858
    |  usb_probe_interface+0x315/0x7f0 drivers/usb/core/driver.c:396
    |  call_driver_probe drivers/base/dd.c:517 [inline]
    
    Fixes: 51f3baad7de9 ("can: mcba_usb: Add support for Microchip CAN BUS Analyzer")
    Link: https://lore.kernel.org/all/20220313100903.10868-1-paskripkin@gmail.com
    Reported-and-tested-by: syzbot+3bc1dce0cc0052d60fde@syzkaller.appspotmail.com
    Signed-off-by: Pavel Skripkin <paskripkin@gmail.com>
    Reviewed-by: Vincent Mailhol <mailhol.vincent@wanadoo.fr>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 339bd0b55ecdd0f7f341e9357c4cfde799de9418
Author: Kalle Valo <quic_kvalo@quicinc.com>
Date:   Thu Jan 27 11:01:17 2022 +0200

    ath11k: mhi: use mhi_sync_power_up()
    
    [ Upstream commit 3df6d74aedfdca919cca475d15dfdbc8b05c9e5d ]
    
    If amss.bin was missing ath11k would crash during 'rmmod ath11k_pci'. The
    reason for that was that we were using mhi_async_power_up() which does not
    check any errors. But mhi_sync_power_up() on the other hand does check for
    errors so let's use that to fix the crash.
    
    I was not able to find a reason why an async version was used.
    ath11k_mhi_start() (which enables state ATH11K_MHI_POWER_ON) is called from
    ath11k_hif_power_up(), which can sleep. So sync version should be safe to use
    here.
    
    [  145.569731] general protection fault, probably for non-canonical address 0xdffffc0000000000: 0000 [#1] PREEMPT SMP DEBUG_PAGEALLOC KASAN PTI
    [  145.569789] KASAN: null-ptr-deref in range [0x0000000000000000-0x0000000000000007]
    [  145.569843] CPU: 2 PID: 1628 Comm: rmmod Kdump: loaded Tainted: G        W         5.16.0-wt-ath+ #567
    [  145.569898] Hardware name: Intel(R) Client Systems NUC8i7HVK/NUC8i7HVB, BIOS HNKBLi70.86A.0067.2021.0528.1339 05/28/2021
    [  145.569956] RIP: 0010:ath11k_hal_srng_access_begin+0xb5/0x2b0 [ath11k]
    [  145.570028] Code: df 48 89 fa 48 c1 ea 03 80 3c 02 00 0f 85 ec 01 00 00 48 8b ab a8 00 00 00 48 b8 00 00 00 00 00 fc ff df 48 89 ea 48 c1 ea 03 <0f> b6 14 02 48 89 e8 83 e0 07 83 c0 03 45 85 ed 75 48 38 d0 7c 08
    [  145.570089] RSP: 0018:ffffc900025d7ac0 EFLAGS: 00010246
    [  145.570144] RAX: dffffc0000000000 RBX: ffff88814fca2dd8 RCX: 1ffffffff50cb455
    [  145.570196] RDX: 0000000000000000 RSI: ffff88814fca2dd8 RDI: ffff88814fca2e80
    [  145.570252] RBP: 0000000000000000 R08: 0000000000000000 R09: ffffffffa8659497
    [  145.570329] R10: fffffbfff50cb292 R11: 0000000000000001 R12: ffff88814fca0000
    [  145.570410] R13: 0000000000000000 R14: ffff88814fca2798 R15: ffff88814fca2dd8
    [  145.570465] FS:  00007fa399988540(0000) GS:ffff888233e00000(0000) knlGS:0000000000000000
    [  145.570519] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  145.570571] CR2: 00007fa399b51421 CR3: 0000000137898002 CR4: 00000000003706e0
    [  145.570623] Call Trace:
    [  145.570675]  <TASK>
    [  145.570727]  ? ath11k_ce_tx_process_cb+0x34b/0x860 [ath11k]
    [  145.570797]  ath11k_ce_tx_process_cb+0x356/0x860 [ath11k]
    [  145.570864]  ? tasklet_init+0x150/0x150
    [  145.570919]  ? ath11k_ce_alloc_pipes+0x280/0x280 [ath11k]
    [  145.570986]  ? tasklet_clear_sched+0x42/0xe0
    [  145.571042]  ? tasklet_kill+0xe9/0x1b0
    [  145.571095]  ? tasklet_clear_sched+0xe0/0xe0
    [  145.571148]  ? irq_has_action+0x120/0x120
    [  145.571202]  ath11k_ce_cleanup_pipes+0x45a/0x580 [ath11k]
    [  145.571270]  ? ath11k_pci_stop+0x10e/0x170 [ath11k_pci]
    [  145.571345]  ath11k_core_stop+0x8a/0xc0 [ath11k]
    [  145.571434]  ath11k_core_deinit+0x9e/0x150 [ath11k]
    [  145.571499]  ath11k_pci_remove+0xd2/0x260 [ath11k_pci]
    [  145.571553]  pci_device_remove+0x9a/0x1c0
    [  145.571605]  __device_release_driver+0x332/0x660
    [  145.571659]  driver_detach+0x1e7/0x2c0
    [  145.571712]  bus_remove_driver+0xe2/0x2d0
    [  145.571772]  pci_unregister_driver+0x21/0x250
    [  145.571826]  __do_sys_delete_module+0x30a/0x4b0
    [  145.571879]  ? free_module+0xac0/0xac0
    [  145.571933]  ? lockdep_hardirqs_on_prepare.part.0+0x18c/0x370
    [  145.571986]  ? syscall_enter_from_user_mode+0x1d/0x50
    [  145.572039]  ? lockdep_hardirqs_on+0x79/0x100
    [  145.572097]  do_syscall_64+0x3b/0x90
    [  145.572153]  entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Tested-on: WCN6855 hw2.0 PCI WLAN.HSP.1.1-03003-QCAHSPSWPL_V1_V2_SILICONZ_LITE-2
    
    Signed-off-by: Kalle Valo <quic_kvalo@quicinc.com>
    Link: https://lore.kernel.org/r/20220127090117.2024-2-kvalo@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 20d01a11efde2e05e47d5c66101f5c26eaca68e2
Author: Kalle Valo <quic_kvalo@quicinc.com>
Date:   Thu Jan 27 11:01:17 2022 +0200

    ath11k: mhi: use mhi_sync_power_up()
    
    [ Upstream commit 3df6d74aedfdca919cca475d15dfdbc8b05c9e5d ]
    
    If amss.bin was missing ath11k would crash during 'rmmod ath11k_pci'. The
    reason for that was that we were using mhi_async_power_up() which does not
    check any errors. But mhi_sync_power_up() on the other hand does check for
    errors so let's use that to fix the crash.
    
    I was not able to find a reason why an async version was used.
    ath11k_mhi_start() (which enables state ATH11K_MHI_POWER_ON) is called from
    ath11k_hif_power_up(), which can sleep. So sync version should be safe to use
    here.
    
    [  145.569731] general protection fault, probably for non-canonical address 0xdffffc0000000000: 0000 [#1] PREEMPT SMP DEBUG_PAGEALLOC KASAN PTI
    [  145.569789] KASAN: null-ptr-deref in range [0x0000000000000000-0x0000000000000007]
    [  145.569843] CPU: 2 PID: 1628 Comm: rmmod Kdump: loaded Tainted: G        W         5.16.0-wt-ath+ #567
    [  145.569898] Hardware name: Intel(R) Client Systems NUC8i7HVK/NUC8i7HVB, BIOS HNKBLi70.86A.0067.2021.0528.1339 05/28/2021
    [  145.569956] RIP: 0010:ath11k_hal_srng_access_begin+0xb5/0x2b0 [ath11k]
    [  145.570028] Code: df 48 89 fa 48 c1 ea 03 80 3c 02 00 0f 85 ec 01 00 00 48 8b ab a8 00 00 00 48 b8 00 00 00 00 00 fc ff df 48 89 ea 48 c1 ea 03 <0f> b6 14 02 48 89 e8 83 e0 07 83 c0 03 45 85 ed 75 48 38 d0 7c 08
    [  145.570089] RSP: 0018:ffffc900025d7ac0 EFLAGS: 00010246
    [  145.570144] RAX: dffffc0000000000 RBX: ffff88814fca2dd8 RCX: 1ffffffff50cb455
    [  145.570196] RDX: 0000000000000000 RSI: ffff88814fca2dd8 RDI: ffff88814fca2e80
    [  145.570252] RBP: 0000000000000000 R08: 0000000000000000 R09: ffffffffa8659497
    [  145.570329] R10: fffffbfff50cb292 R11: 0000000000000001 R12: ffff88814fca0000
    [  145.570410] R13: 0000000000000000 R14: ffff88814fca2798 R15: ffff88814fca2dd8
    [  145.570465] FS:  00007fa399988540(0000) GS:ffff888233e00000(0000) knlGS:0000000000000000
    [  145.570519] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  145.570571] CR2: 00007fa399b51421 CR3: 0000000137898002 CR4: 00000000003706e0
    [  145.570623] Call Trace:
    [  145.570675]  <TASK>
    [  145.570727]  ? ath11k_ce_tx_process_cb+0x34b/0x860 [ath11k]
    [  145.570797]  ath11k_ce_tx_process_cb+0x356/0x860 [ath11k]
    [  145.570864]  ? tasklet_init+0x150/0x150
    [  145.570919]  ? ath11k_ce_alloc_pipes+0x280/0x280 [ath11k]
    [  145.570986]  ? tasklet_clear_sched+0x42/0xe0
    [  145.571042]  ? tasklet_kill+0xe9/0x1b0
    [  145.571095]  ? tasklet_clear_sched+0xe0/0xe0
    [  145.571148]  ? irq_has_action+0x120/0x120
    [  145.571202]  ath11k_ce_cleanup_pipes+0x45a/0x580 [ath11k]
    [  145.571270]  ? ath11k_pci_stop+0x10e/0x170 [ath11k_pci]
    [  145.571345]  ath11k_core_stop+0x8a/0xc0 [ath11k]
    [  145.571434]  ath11k_core_deinit+0x9e/0x150 [ath11k]
    [  145.571499]  ath11k_pci_remove+0xd2/0x260 [ath11k_pci]
    [  145.571553]  pci_device_remove+0x9a/0x1c0
    [  145.571605]  __device_release_driver+0x332/0x660
    [  145.571659]  driver_detach+0x1e7/0x2c0
    [  145.571712]  bus_remove_driver+0xe2/0x2d0
    [  145.571772]  pci_unregister_driver+0x21/0x250
    [  145.571826]  __do_sys_delete_module+0x30a/0x4b0
    [  145.571879]  ? free_module+0xac0/0xac0
    [  145.571933]  ? lockdep_hardirqs_on_prepare.part.0+0x18c/0x370
    [  145.571986]  ? syscall_enter_from_user_mode+0x1d/0x50
    [  145.572039]  ? lockdep_hardirqs_on+0x79/0x100
    [  145.572097]  do_syscall_64+0x3b/0x90
    [  145.572153]  entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Tested-on: WCN6855 hw2.0 PCI WLAN.HSP.1.1-03003-QCAHSPSWPL_V1_V2_SILICONZ_LITE-2
    
    Signed-off-by: Kalle Valo <quic_kvalo@quicinc.com>
    Link: https://lore.kernel.org/r/20220127090117.2024-2-kvalo@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e995c5d52ec7415644eee617fc7e906b51aec7ae
Author: CHANDAN VURDIGERE NATARAJ <chandan.vurdigerenataraj@amd.com>
Date:   Tue Mar 29 13:10:31 2022 +0530

    drm/amd/display: Fix by adding FPU protection for dcn30_internal_validate_bw
    
    commit ca1198849ab0e7af5efb392ef6baf1138f6fc086 upstream.
    
    [Why]
    Below general protection fault observed when WebGL Aquarium is run for
    longer duration. If drm debug logs are enabled and set to 0x1f then the
    issue is observed within 10 minutes of run.
    
    [  100.717056] general protection fault, probably for non-canonical address 0x2d33302d32323032: 0000 [#1] PREEMPT SMP NOPTI
    [  100.727921] CPU: 3 PID: 1906 Comm: DrmThread Tainted: G        W         5.15.30 #12 d726c6a2d6ebe5cf9223931cbca6892f916fe18b
    [  100.754419] RIP: 0010:CalculateSwathWidth+0x1f7/0x44f
    [  100.767109] Code: 00 00 00 f2 42 0f 11 04 f0 48 8b 85 88 00 00 00 f2 42 0f 10 04 f0 48 8b 85 98 00 00 00 f2 42 0f 11 04 f0 48 8b 45 10 0f 57 c0 <f3> 42 0f 2a 04 b0 0f 57 c9 f3 43 0f 2a 0c b4 e8 8c e2 f3 ff 48 8b
    [  100.781269] RSP: 0018:ffffa9230079eeb0 EFLAGS: 00010246
    [  100.812528] RAX: 2d33302d32323032 RBX: 0000000000000500 RCX: 0000000000000000
    [  100.819656] RDX: 0000000000000001 RSI: ffff99deb712c49c RDI: 0000000000000000
    [  100.826781] RBP: ffffa9230079ef50 R08: ffff99deb712460c R09: ffff99deb712462c
    [  100.833907] R10: ffff99deb7124940 R11: ffff99deb7124d70 R12: ffff99deb712ae44
    [  100.841033] R13: 0000000000000001 R14: 0000000000000000 R15: ffffa9230079f0a0
    [  100.848159] FS:  00007af121212640(0000) GS:ffff99deba780000(0000) knlGS:0000000000000000
    [  100.856240] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  100.861980] CR2: 0000209000fe1000 CR3: 000000011b18c000 CR4: 0000000000350ee0
    [  100.869106] Call Trace:
    [  100.871555]  <TASK>
    [  100.873655]  ? asm_sysvec_reschedule_ipi+0x12/0x20
    [  100.878449]  CalculateSwathAndDETConfiguration+0x1a3/0x6dd
    [  100.883937]  dml31_ModeSupportAndSystemConfigurationFull+0x2ce4/0x76da
    [  100.890467]  ? kallsyms_lookup_buildid+0xc8/0x163
    [  100.895173]  ? kallsyms_lookup_buildid+0xc8/0x163
    [  100.899874]  ? __sprint_symbol+0x80/0x135
    [  100.903883]  ? dm_update_plane_state+0x3f9/0x4d2
    [  100.908500]  ? symbol_string+0xb7/0xde
    [  100.912250]  ? number+0x145/0x29b
    [  100.915566]  ? vsnprintf+0x341/0x5ff
    [  100.919141]  ? desc_read_finalized_seq+0x39/0x87
    [  100.923755]  ? update_load_avg+0x1b9/0x607
    [  100.927849]  ? compute_mst_dsc_configs_for_state+0x7d/0xd5b
    [  100.933416]  ? fetch_pipe_params+0xa4d/0xd0c
    [  100.937686]  ? dc_fpu_end+0x3d/0xa8
    [  100.941175]  dml_get_voltage_level+0x16b/0x180
    [  100.945619]  dcn30_internal_validate_bw+0x10e/0x89b
    [  100.950495]  ? dcn31_validate_bandwidth+0x68/0x1fc
    [  100.955285]  ? resource_build_scaling_params+0x98b/0xb8c
    [  100.960595]  ? dcn31_validate_bandwidth+0x68/0x1fc
    [  100.965384]  dcn31_validate_bandwidth+0x9a/0x1fc
    [  100.970001]  dc_validate_global_state+0x238/0x295
    [  100.974703]  amdgpu_dm_atomic_check+0x9c1/0xbce
    [  100.979235]  ? _printk+0x59/0x73
    [  100.982467]  drm_atomic_check_only+0x403/0x78b
    [  100.986912]  drm_mode_atomic_ioctl+0x49b/0x546
    [  100.991358]  ? drm_ioctl+0x1c1/0x3b3
    [  100.994936]  ? drm_atomic_set_property+0x92a/0x92a
    [  100.999725]  drm_ioctl_kernel+0xdc/0x149
    [  101.003648]  drm_ioctl+0x27f/0x3b3
    [  101.007051]  ? drm_atomic_set_property+0x92a/0x92a
    [  101.011842]  amdgpu_drm_ioctl+0x49/0x7d
    [  101.015679]  __se_sys_ioctl+0x7c/0xb8
    [  101.015685]  do_syscall_64+0x5f/0xb8
    [  101.015690]  ? __irq_exit_rcu+0x34/0x96
    
    [How]
    It calles populate_dml_pipes which uses doubles to initialize.
    Adding FPU protection avoids context switch and probable loss of vba context
    as there is potential contention while drm debug logs are enabled.
    
    Signed-off-by: CHANDAN VURDIGERE NATARAJ <chandan.vurdigerenataraj@amd.com>
    Reviewed-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3fd7d50384c3808b7f7fa135aa9bb5feb1cb9849
Author: Kalle Valo <quic_kvalo@quicinc.com>
Date:   Thu Jan 27 11:01:17 2022 +0200

    ath11k: mhi: use mhi_sync_power_up()
    
    [ Upstream commit 3df6d74aedfdca919cca475d15dfdbc8b05c9e5d ]
    
    If amss.bin was missing ath11k would crash during 'rmmod ath11k_pci'. The
    reason for that was that we were using mhi_async_power_up() which does not
    check any errors. But mhi_sync_power_up() on the other hand does check for
    errors so let's use that to fix the crash.
    
    I was not able to find a reason why an async version was used.
    ath11k_mhi_start() (which enables state ATH11K_MHI_POWER_ON) is called from
    ath11k_hif_power_up(), which can sleep. So sync version should be safe to use
    here.
    
    [  145.569731] general protection fault, probably for non-canonical address 0xdffffc0000000000: 0000 [#1] PREEMPT SMP DEBUG_PAGEALLOC KASAN PTI
    [  145.569789] KASAN: null-ptr-deref in range [0x0000000000000000-0x0000000000000007]
    [  145.569843] CPU: 2 PID: 1628 Comm: rmmod Kdump: loaded Tainted: G        W         5.16.0-wt-ath+ #567
    [  145.569898] Hardware name: Intel(R) Client Systems NUC8i7HVK/NUC8i7HVB, BIOS HNKBLi70.86A.0067.2021.0528.1339 05/28/2021
    [  145.569956] RIP: 0010:ath11k_hal_srng_access_begin+0xb5/0x2b0 [ath11k]
    [  145.570028] Code: df 48 89 fa 48 c1 ea 03 80 3c 02 00 0f 85 ec 01 00 00 48 8b ab a8 00 00 00 48 b8 00 00 00 00 00 fc ff df 48 89 ea 48 c1 ea 03 <0f> b6 14 02 48 89 e8 83 e0 07 83 c0 03 45 85 ed 75 48 38 d0 7c 08
    [  145.570089] RSP: 0018:ffffc900025d7ac0 EFLAGS: 00010246
    [  145.570144] RAX: dffffc0000000000 RBX: ffff88814fca2dd8 RCX: 1ffffffff50cb455
    [  145.570196] RDX: 0000000000000000 RSI: ffff88814fca2dd8 RDI: ffff88814fca2e80
    [  145.570252] RBP: 0000000000000000 R08: 0000000000000000 R09: ffffffffa8659497
    [  145.570329] R10: fffffbfff50cb292 R11: 0000000000000001 R12: ffff88814fca0000
    [  145.570410] R13: 0000000000000000 R14: ffff88814fca2798 R15: ffff88814fca2dd8
    [  145.570465] FS:  00007fa399988540(0000) GS:ffff888233e00000(0000) knlGS:0000000000000000
    [  145.570519] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  145.570571] CR2: 00007fa399b51421 CR3: 0000000137898002 CR4: 00000000003706e0
    [  145.570623] Call Trace:
    [  145.570675]  <TASK>
    [  145.570727]  ? ath11k_ce_tx_process_cb+0x34b/0x860 [ath11k]
    [  145.570797]  ath11k_ce_tx_process_cb+0x356/0x860 [ath11k]
    [  145.570864]  ? tasklet_init+0x150/0x150
    [  145.570919]  ? ath11k_ce_alloc_pipes+0x280/0x280 [ath11k]
    [  145.570986]  ? tasklet_clear_sched+0x42/0xe0
    [  145.571042]  ? tasklet_kill+0xe9/0x1b0
    [  145.571095]  ? tasklet_clear_sched+0xe0/0xe0
    [  145.571148]  ? irq_has_action+0x120/0x120
    [  145.571202]  ath11k_ce_cleanup_pipes+0x45a/0x580 [ath11k]
    [  145.571270]  ? ath11k_pci_stop+0x10e/0x170 [ath11k_pci]
    [  145.571345]  ath11k_core_stop+0x8a/0xc0 [ath11k]
    [  145.571434]  ath11k_core_deinit+0x9e/0x150 [ath11k]
    [  145.571499]  ath11k_pci_remove+0xd2/0x260 [ath11k_pci]
    [  145.571553]  pci_device_remove+0x9a/0x1c0
    [  145.571605]  __device_release_driver+0x332/0x660
    [  145.571659]  driver_detach+0x1e7/0x2c0
    [  145.571712]  bus_remove_driver+0xe2/0x2d0
    [  145.571772]  pci_unregister_driver+0x21/0x250
    [  145.571826]  __do_sys_delete_module+0x30a/0x4b0
    [  145.571879]  ? free_module+0xac0/0xac0
    [  145.571933]  ? lockdep_hardirqs_on_prepare.part.0+0x18c/0x370
    [  145.571986]  ? syscall_enter_from_user_mode+0x1d/0x50
    [  145.572039]  ? lockdep_hardirqs_on+0x79/0x100
    [  145.572097]  do_syscall_64+0x3b/0x90
    [  145.572153]  entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Tested-on: WCN6855 hw2.0 PCI WLAN.HSP.1.1-03003-QCAHSPSWPL_V1_V2_SILICONZ_LITE-2
    
    Signed-off-by: Kalle Valo <quic_kvalo@quicinc.com>
    Link: https://lore.kernel.org/r/20220127090117.2024-2-kvalo@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 76f4c5e5f99ee7084b555d9a38e8ffeb16ec65a2
Author: CHANDAN VURDIGERE NATARAJ <chandan.vurdigerenataraj@amd.com>
Date:   Tue Mar 29 13:10:31 2022 +0530

    drm/amd/display: Fix by adding FPU protection for dcn30_internal_validate_bw
    
    commit ca1198849ab0e7af5efb392ef6baf1138f6fc086 upstream.
    
    [Why]
    Below general protection fault observed when WebGL Aquarium is run for
    longer duration. If drm debug logs are enabled and set to 0x1f then the
    issue is observed within 10 minutes of run.
    
    [  100.717056] general protection fault, probably for non-canonical address 0x2d33302d32323032: 0000 [#1] PREEMPT SMP NOPTI
    [  100.727921] CPU: 3 PID: 1906 Comm: DrmThread Tainted: G        W         5.15.30 #12 d726c6a2d6ebe5cf9223931cbca6892f916fe18b
    [  100.754419] RIP: 0010:CalculateSwathWidth+0x1f7/0x44f
    [  100.767109] Code: 00 00 00 f2 42 0f 11 04 f0 48 8b 85 88 00 00 00 f2 42 0f 10 04 f0 48 8b 85 98 00 00 00 f2 42 0f 11 04 f0 48 8b 45 10 0f 57 c0 <f3> 42 0f 2a 04 b0 0f 57 c9 f3 43 0f 2a 0c b4 e8 8c e2 f3 ff 48 8b
    [  100.781269] RSP: 0018:ffffa9230079eeb0 EFLAGS: 00010246
    [  100.812528] RAX: 2d33302d32323032 RBX: 0000000000000500 RCX: 0000000000000000
    [  100.819656] RDX: 0000000000000001 RSI: ffff99deb712c49c RDI: 0000000000000000
    [  100.826781] RBP: ffffa9230079ef50 R08: ffff99deb712460c R09: ffff99deb712462c
    [  100.833907] R10: ffff99deb7124940 R11: ffff99deb7124d70 R12: ffff99deb712ae44
    [  100.841033] R13: 0000000000000001 R14: 0000000000000000 R15: ffffa9230079f0a0
    [  100.848159] FS:  00007af121212640(0000) GS:ffff99deba780000(0000) knlGS:0000000000000000
    [  100.856240] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  100.861980] CR2: 0000209000fe1000 CR3: 000000011b18c000 CR4: 0000000000350ee0
    [  100.869106] Call Trace:
    [  100.871555]  <TASK>
    [  100.873655]  ? asm_sysvec_reschedule_ipi+0x12/0x20
    [  100.878449]  CalculateSwathAndDETConfiguration+0x1a3/0x6dd
    [  100.883937]  dml31_ModeSupportAndSystemConfigurationFull+0x2ce4/0x76da
    [  100.890467]  ? kallsyms_lookup_buildid+0xc8/0x163
    [  100.895173]  ? kallsyms_lookup_buildid+0xc8/0x163
    [  100.899874]  ? __sprint_symbol+0x80/0x135
    [  100.903883]  ? dm_update_plane_state+0x3f9/0x4d2
    [  100.908500]  ? symbol_string+0xb7/0xde
    [  100.912250]  ? number+0x145/0x29b
    [  100.915566]  ? vsnprintf+0x341/0x5ff
    [  100.919141]  ? desc_read_finalized_seq+0x39/0x87
    [  100.923755]  ? update_load_avg+0x1b9/0x607
    [  100.927849]  ? compute_mst_dsc_configs_for_state+0x7d/0xd5b
    [  100.933416]  ? fetch_pipe_params+0xa4d/0xd0c
    [  100.937686]  ? dc_fpu_end+0x3d/0xa8
    [  100.941175]  dml_get_voltage_level+0x16b/0x180
    [  100.945619]  dcn30_internal_validate_bw+0x10e/0x89b
    [  100.950495]  ? dcn31_validate_bandwidth+0x68/0x1fc
    [  100.955285]  ? resource_build_scaling_params+0x98b/0xb8c
    [  100.960595]  ? dcn31_validate_bandwidth+0x68/0x1fc
    [  100.965384]  dcn31_validate_bandwidth+0x9a/0x1fc
    [  100.970001]  dc_validate_global_state+0x238/0x295
    [  100.974703]  amdgpu_dm_atomic_check+0x9c1/0xbce
    [  100.979235]  ? _printk+0x59/0x73
    [  100.982467]  drm_atomic_check_only+0x403/0x78b
    [  100.986912]  drm_mode_atomic_ioctl+0x49b/0x546
    [  100.991358]  ? drm_ioctl+0x1c1/0x3b3
    [  100.994936]  ? drm_atomic_set_property+0x92a/0x92a
    [  100.999725]  drm_ioctl_kernel+0xdc/0x149
    [  101.003648]  drm_ioctl+0x27f/0x3b3
    [  101.007051]  ? drm_atomic_set_property+0x92a/0x92a
    [  101.011842]  amdgpu_drm_ioctl+0x49/0x7d
    [  101.015679]  __se_sys_ioctl+0x7c/0xb8
    [  101.015685]  do_syscall_64+0x5f/0xb8
    [  101.015690]  ? __irq_exit_rcu+0x34/0x96
    
    [How]
    It calles populate_dml_pipes which uses doubles to initialize.
    Adding FPU protection avoids context switch and probable loss of vba context
    as there is potential contention while drm debug logs are enabled.
    
    Signed-off-by: CHANDAN VURDIGERE NATARAJ <chandan.vurdigerenataraj@amd.com>
    Reviewed-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1a2f286a45ee44a7de1893ff9a63424e979a6d39
Author: Roman Li <Roman.Li@amd.com>
Date:   Tue Mar 15 14:57:34 2022 -0400

    drm/amd/display: Remove redundant dsc power gating from init_hw
    
    [ Upstream commit 95707203407c4cf0b7e520a99d6f46d8aed4b57f ]
    
    [Why]
    DSC Power down code has been moved from dcn31_init_hw into init_pipes()
    Need to remove it from dcn10_init_hw() as well to avoid duplicated action
    on dcn1.x/2.x
    
    [How]
    Remove DSC power down code from dcn10_init_hw()
    
    Fixes: 8fa6f4c5715c ("drm/amd/display: fixed the DSC power off sequence during Driver PnP")
    
    Reviewed-by: Anthony Koo <Anthony.Koo@amd.com>
    Reviewed-by: Eric Yang <Eric.Yang2@amd.com>
    Acked-by: Alex Hung <alex.hung@amd.com>
    Signed-off-by: Roman Li <Roman.Li@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 646d533af2911be1184eaee8c900b7eb8ecc4396
Author: Kalle Valo <quic_kvalo@quicinc.com>
Date:   Thu Jan 27 11:01:17 2022 +0200

    ath11k: mhi: use mhi_sync_power_up()
    
    [ Upstream commit 3df6d74aedfdca919cca475d15dfdbc8b05c9e5d ]
    
    If amss.bin was missing ath11k would crash during 'rmmod ath11k_pci'. The
    reason for that was that we were using mhi_async_power_up() which does not
    check any errors. But mhi_sync_power_up() on the other hand does check for
    errors so let's use that to fix the crash.
    
    I was not able to find a reason why an async version was used.
    ath11k_mhi_start() (which enables state ATH11K_MHI_POWER_ON) is called from
    ath11k_hif_power_up(), which can sleep. So sync version should be safe to use
    here.
    
    [  145.569731] general protection fault, probably for non-canonical address 0xdffffc0000000000: 0000 [#1] PREEMPT SMP DEBUG_PAGEALLOC KASAN PTI
    [  145.569789] KASAN: null-ptr-deref in range [0x0000000000000000-0x0000000000000007]
    [  145.569843] CPU: 2 PID: 1628 Comm: rmmod Kdump: loaded Tainted: G        W         5.16.0-wt-ath+ #567
    [  145.569898] Hardware name: Intel(R) Client Systems NUC8i7HVK/NUC8i7HVB, BIOS HNKBLi70.86A.0067.2021.0528.1339 05/28/2021
    [  145.569956] RIP: 0010:ath11k_hal_srng_access_begin+0xb5/0x2b0 [ath11k]
    [  145.570028] Code: df 48 89 fa 48 c1 ea 03 80 3c 02 00 0f 85 ec 01 00 00 48 8b ab a8 00 00 00 48 b8 00 00 00 00 00 fc ff df 48 89 ea 48 c1 ea 03 <0f> b6 14 02 48 89 e8 83 e0 07 83 c0 03 45 85 ed 75 48 38 d0 7c 08
    [  145.570089] RSP: 0018:ffffc900025d7ac0 EFLAGS: 00010246
    [  145.570144] RAX: dffffc0000000000 RBX: ffff88814fca2dd8 RCX: 1ffffffff50cb455
    [  145.570196] RDX: 0000000000000000 RSI: ffff88814fca2dd8 RDI: ffff88814fca2e80
    [  145.570252] RBP: 0000000000000000 R08: 0000000000000000 R09: ffffffffa8659497
    [  145.570329] R10: fffffbfff50cb292 R11: 0000000000000001 R12: ffff88814fca0000
    [  145.570410] R13: 0000000000000000 R14: ffff88814fca2798 R15: ffff88814fca2dd8
    [  145.570465] FS:  00007fa399988540(0000) GS:ffff888233e00000(0000) knlGS:0000000000000000
    [  145.570519] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  145.570571] CR2: 00007fa399b51421 CR3: 0000000137898002 CR4: 00000000003706e0
    [  145.570623] Call Trace:
    [  145.570675]  <TASK>
    [  145.570727]  ? ath11k_ce_tx_process_cb+0x34b/0x860 [ath11k]
    [  145.570797]  ath11k_ce_tx_process_cb+0x356/0x860 [ath11k]
    [  145.570864]  ? tasklet_init+0x150/0x150
    [  145.570919]  ? ath11k_ce_alloc_pipes+0x280/0x280 [ath11k]
    [  145.570986]  ? tasklet_clear_sched+0x42/0xe0
    [  145.571042]  ? tasklet_kill+0xe9/0x1b0
    [  145.571095]  ? tasklet_clear_sched+0xe0/0xe0
    [  145.571148]  ? irq_has_action+0x120/0x120
    [  145.571202]  ath11k_ce_cleanup_pipes+0x45a/0x580 [ath11k]
    [  145.571270]  ? ath11k_pci_stop+0x10e/0x170 [ath11k_pci]
    [  145.571345]  ath11k_core_stop+0x8a/0xc0 [ath11k]
    [  145.571434]  ath11k_core_deinit+0x9e/0x150 [ath11k]
    [  145.571499]  ath11k_pci_remove+0xd2/0x260 [ath11k_pci]
    [  145.571553]  pci_device_remove+0x9a/0x1c0
    [  145.571605]  __device_release_driver+0x332/0x660
    [  145.571659]  driver_detach+0x1e7/0x2c0
    [  145.571712]  bus_remove_driver+0xe2/0x2d0
    [  145.571772]  pci_unregister_driver+0x21/0x250
    [  145.571826]  __do_sys_delete_module+0x30a/0x4b0
    [  145.571879]  ? free_module+0xac0/0xac0
    [  145.571933]  ? lockdep_hardirqs_on_prepare.part.0+0x18c/0x370
    [  145.571986]  ? syscall_enter_from_user_mode+0x1d/0x50
    [  145.572039]  ? lockdep_hardirqs_on+0x79/0x100
    [  145.572097]  do_syscall_64+0x3b/0x90
    [  145.572153]  entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Tested-on: WCN6855 hw2.0 PCI WLAN.HSP.1.1-03003-QCAHSPSWPL_V1_V2_SILICONZ_LITE-2
    
    Signed-off-by: Kalle Valo <quic_kvalo@quicinc.com>
    Link: https://lore.kernel.org/r/20220127090117.2024-2-kvalo@kernel.org
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ef0acc514123140157b19a9ff2e2de5d91d612bc
Author: Pavel Skripkin <paskripkin@gmail.com>
Date:   Sun Mar 13 13:09:03 2022 +0300

    can: mcba_usb: properly check endpoint type
    
    commit 136bed0bfd3bc9c95c88aafff2d22ecb3a919f23 upstream.
    
    Syzbot reported warning in usb_submit_urb() which is caused by wrong
    endpoint type. We should check that in endpoint is actually present to
    prevent this warning.
    
    Found pipes are now saved to struct mcba_priv and code uses them
    directly instead of making pipes in place.
    
    Fail log:
    
    | usb 5-1: BOGUS urb xfer, pipe 3 != type 1
    | WARNING: CPU: 1 PID: 49 at drivers/usb/core/urb.c:502 usb_submit_urb+0xed2/0x18a0 drivers/usb/core/urb.c:502
    | Modules linked in:
    | CPU: 1 PID: 49 Comm: kworker/1:2 Not tainted 5.17.0-rc6-syzkaller-00184-g38f80f42147f #0
    | Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.14.0-2 04/01/2014
    | Workqueue: usb_hub_wq hub_event
    | RIP: 0010:usb_submit_urb+0xed2/0x18a0 drivers/usb/core/urb.c:502
    | ...
    | Call Trace:
    |  <TASK>
    |  mcba_usb_start drivers/net/can/usb/mcba_usb.c:662 [inline]
    |  mcba_usb_probe+0x8a3/0xc50 drivers/net/can/usb/mcba_usb.c:858
    |  usb_probe_interface+0x315/0x7f0 drivers/usb/core/driver.c:396
    |  call_driver_probe drivers/base/dd.c:517 [inline]
    
    Fixes: 51f3baad7de9 ("can: mcba_usb: Add support for Microchip CAN BUS Analyzer")
    Link: https://lore.kernel.org/all/20220313100903.10868-1-paskripkin@gmail.com
    Reported-and-tested-by: syzbot+3bc1dce0cc0052d60fde@syzkaller.appspotmail.com
    Signed-off-by: Pavel Skripkin <paskripkin@gmail.com>
    Reviewed-by: Vincent Mailhol <mailhol.vincent@wanadoo.fr>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fa9c1f14002dc0d5293e16a2007bd89b6e79207b
Author: Pavel Skripkin <paskripkin@gmail.com>
Date:   Sun Mar 13 13:09:03 2022 +0300

    can: mcba_usb: properly check endpoint type
    
    commit 136bed0bfd3bc9c95c88aafff2d22ecb3a919f23 upstream.
    
    Syzbot reported warning in usb_submit_urb() which is caused by wrong
    endpoint type. We should check that in endpoint is actually present to
    prevent this warning.
    
    Found pipes are now saved to struct mcba_priv and code uses them
    directly instead of making pipes in place.
    
    Fail log:
    
    | usb 5-1: BOGUS urb xfer, pipe 3 != type 1
    | WARNING: CPU: 1 PID: 49 at drivers/usb/core/urb.c:502 usb_submit_urb+0xed2/0x18a0 drivers/usb/core/urb.c:502
    | Modules linked in:
    | CPU: 1 PID: 49 Comm: kworker/1:2 Not tainted 5.17.0-rc6-syzkaller-00184-g38f80f42147f #0
    | Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.14.0-2 04/01/2014
    | Workqueue: usb_hub_wq hub_event
    | RIP: 0010:usb_submit_urb+0xed2/0x18a0 drivers/usb/core/urb.c:502
    | ...
    | Call Trace:
    |  <TASK>
    |  mcba_usb_start drivers/net/can/usb/mcba_usb.c:662 [inline]
    |  mcba_usb_probe+0x8a3/0xc50 drivers/net/can/usb/mcba_usb.c:858
    |  usb_probe_interface+0x315/0x7f0 drivers/usb/core/driver.c:396
    |  call_driver_probe drivers/base/dd.c:517 [inline]
    
    Fixes: 51f3baad7de9 ("can: mcba_usb: Add support for Microchip CAN BUS Analyzer")
    Link: https://lore.kernel.org/all/20220313100903.10868-1-paskripkin@gmail.com
    Reported-and-tested-by: syzbot+3bc1dce0cc0052d60fde@syzkaller.appspotmail.com
    Signed-off-by: Pavel Skripkin <paskripkin@gmail.com>
    Reviewed-by: Vincent Mailhol <mailhol.vincent@wanadoo.fr>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 88272b4a37913bdf6f339162a7920bd8e9b49de2
Author: Pavel Skripkin <paskripkin@gmail.com>
Date:   Sun Mar 13 13:09:03 2022 +0300

    can: mcba_usb: properly check endpoint type
    
    commit 136bed0bfd3bc9c95c88aafff2d22ecb3a919f23 upstream.
    
    Syzbot reported warning in usb_submit_urb() which is caused by wrong
    endpoint type. We should check that in endpoint is actually present to
    prevent this warning.
    
    Found pipes are now saved to struct mcba_priv and code uses them
    directly instead of making pipes in place.
    
    Fail log:
    
    | usb 5-1: BOGUS urb xfer, pipe 3 != type 1
    | WARNING: CPU: 1 PID: 49 at drivers/usb/core/urb.c:502 usb_submit_urb+0xed2/0x18a0 drivers/usb/core/urb.c:502
    | Modules linked in:
    | CPU: 1 PID: 49 Comm: kworker/1:2 Not tainted 5.17.0-rc6-syzkaller-00184-g38f80f42147f #0
    | Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.14.0-2 04/01/2014
    | Workqueue: usb_hub_wq hub_event
    | RIP: 0010:usb_submit_urb+0xed2/0x18a0 drivers/usb/core/urb.c:502
    | ...
    | Call Trace:
    |  <TASK>
    |  mcba_usb_start drivers/net/can/usb/mcba_usb.c:662 [inline]
    |  mcba_usb_probe+0x8a3/0xc50 drivers/net/can/usb/mcba_usb.c:858
    |  usb_probe_interface+0x315/0x7f0 drivers/usb/core/driver.c:396
    |  call_driver_probe drivers/base/dd.c:517 [inline]
    
    Fixes: 51f3baad7de9 ("can: mcba_usb: Add support for Microchip CAN BUS Analyzer")
    Link: https://lore.kernel.org/all/20220313100903.10868-1-paskripkin@gmail.com
    Reported-and-tested-by: syzbot+3bc1dce0cc0052d60fde@syzkaller.appspotmail.com
    Signed-off-by: Pavel Skripkin <paskripkin@gmail.com>
    Reviewed-by: Vincent Mailhol <mailhol.vincent@wanadoo.fr>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f2ec3cd0f34f8c3f94bc21fbba14868301c9c49d
Author: Pavel Skripkin <paskripkin@gmail.com>
Date:   Sun Mar 13 13:09:03 2022 +0300

    can: mcba_usb: properly check endpoint type
    
    commit 136bed0bfd3bc9c95c88aafff2d22ecb3a919f23 upstream.
    
    Syzbot reported warning in usb_submit_urb() which is caused by wrong
    endpoint type. We should check that in endpoint is actually present to
    prevent this warning.
    
    Found pipes are now saved to struct mcba_priv and code uses them
    directly instead of making pipes in place.
    
    Fail log:
    
    | usb 5-1: BOGUS urb xfer, pipe 3 != type 1
    | WARNING: CPU: 1 PID: 49 at drivers/usb/core/urb.c:502 usb_submit_urb+0xed2/0x18a0 drivers/usb/core/urb.c:502
    | Modules linked in:
    | CPU: 1 PID: 49 Comm: kworker/1:2 Not tainted 5.17.0-rc6-syzkaller-00184-g38f80f42147f #0
    | Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.14.0-2 04/01/2014
    | Workqueue: usb_hub_wq hub_event
    | RIP: 0010:usb_submit_urb+0xed2/0x18a0 drivers/usb/core/urb.c:502
    | ...
    | Call Trace:
    |  <TASK>
    |  mcba_usb_start drivers/net/can/usb/mcba_usb.c:662 [inline]
    |  mcba_usb_probe+0x8a3/0xc50 drivers/net/can/usb/mcba_usb.c:858
    |  usb_probe_interface+0x315/0x7f0 drivers/usb/core/driver.c:396
    |  call_driver_probe drivers/base/dd.c:517 [inline]
    
    Fixes: 51f3baad7de9 ("can: mcba_usb: Add support for Microchip CAN BUS Analyzer")
    Link: https://lore.kernel.org/all/20220313100903.10868-1-paskripkin@gmail.com
    Reported-and-tested-by: syzbot+3bc1dce0cc0052d60fde@syzkaller.appspotmail.com
    Signed-off-by: Pavel Skripkin <paskripkin@gmail.com>
    Reviewed-by: Vincent Mailhol <mailhol.vincent@wanadoo.fr>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1831fed559732b132aef0ea8261ac77e73f7eadf
Merge: 5a5dcfd1e878 88711fa9a14f
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 7 19:27:39 2022 -1000

    Merge tag 'drm-fixes-2022-04-08' of git://anongit.freedesktop.org/drm/drm
    
    Pull drm fixes from Dave Airlie:
     "Main set of fixes for rc2, mostly amdgpu, but some dma-fence fixups as
      well, along with some other misc ones.
    
      dma-fence:
       - fix warning about fence containers
       - fix logic error in new fence merge code
       - handle empty dma_fence_arrays gracefully
    
      bridge:
       - Try all possible cases for bridge/panel detection.
    
      bindings:
       - Don't require input port for MIPI-DSI, and make width/height mandatory.
    
      fbdev:
       - Fix unregistering of framebuffers without device.
    
      nouveau:
       - Fix a crash when booting with nouveau on tegra.
    
      amdgpu:
       - GFX 10.3.7 fixes
       - noretry updates
       - VCN fixes
       - TMDS fix
       - zstate fix for freesync video
       - DCN 3.1.5 fix
       - Display stack size fix
       - Audio fix
       - DCN 3.1 pstate fix
       - TMZ VCN fix
       - APU passthrough fix
       - Misc other fixes
       - VCN 3.0 fixes
       - Misc display fixes
       - GC 10.3 golden register fix
       - Suspend fix
       - SMU 10 fix
    
      amdkfd:
       - Error handling fix
       - xgmi p2p fix
       - HWS VMIDs fix
       - Event fix
    
      panel:
       - ili9341: Fix optional regulator handling
    
      imx:
       - Catch an EDID allocation failure in imx-ldb
       - fix a leaked drm display mode on DT parsing error in parallel-display
       - properly remove the dw_hdmi bridge in case the component_add fails in dw_hdmi-imx
       - fix the IPU clock frequency debug printout in ipu-di"
    
    * tag 'drm-fixes-2022-04-08' of git://anongit.freedesktop.org/drm/drm: (61 commits)
      dt-bindings: display: panel: mipi-dbi-spi: Make width-mm/height-mm mandatory
      fbdev: Fix unregistering of framebuffers without device
      drm/amdgpu/smu10: fix SoC/fclk units in auto mode
      drm/amd/display: update dcn315 clock table read
      drm/amdgpu/display: change pipe policy for DCN 2.1
      drm/amd/display: Add configuration options for AUX wake work around.
      drm/amd/display: remove assert for odm transition case
      drm/amdgpu: don't use BACO for reset in S3
      drm/amd/display: Fix by adding FPU protection for dcn30_internal_validate_bw
      drm/amdkfd: Create file descriptor after client is added to smi_clients list
      drm/amdgpu: Sync up header and implementation to use the same parameter names
      drm/amdgpu: fix incorrect GCR_GENERAL_CNTL address
      amd/display: set backlight only if required
      drm/amd/display: Fix allocate_mst_payload assert on resume
      drm/amd/display: Revert FEC check in validation
      drm/amd/display: Add work around for AUX failure on wake.
      drm/amd/display: Clear optc false state when disable otg
      drm/amd/display: Enable power gating before init_pipes
      drm/amd/display: Remove redundant dsc power gating from init_hw
      drm/amd/display: Correct Slice reset calculation
      ...

commit ca1198849ab0e7af5efb392ef6baf1138f6fc086
Author: CHANDAN VURDIGERE NATARAJ <chandan.vurdigerenataraj@amd.com>
Date:   Tue Mar 29 13:10:31 2022 +0530

    drm/amd/display: Fix by adding FPU protection for dcn30_internal_validate_bw
    
    [Why]
    Below general protection fault observed when WebGL Aquarium is run for
    longer duration. If drm debug logs are enabled and set to 0x1f then the
    issue is observed within 10 minutes of run.
    
    [  100.717056] general protection fault, probably for non-canonical address 0x2d33302d32323032: 0000 [#1] PREEMPT SMP NOPTI
    [  100.727921] CPU: 3 PID: 1906 Comm: DrmThread Tainted: G        W         5.15.30 #12 d726c6a2d6ebe5cf9223931cbca6892f916fe18b
    [  100.754419] RIP: 0010:CalculateSwathWidth+0x1f7/0x44f
    [  100.767109] Code: 00 00 00 f2 42 0f 11 04 f0 48 8b 85 88 00 00 00 f2 42 0f 10 04 f0 48 8b 85 98 00 00 00 f2 42 0f 11 04 f0 48 8b 45 10 0f 57 c0 <f3> 42 0f 2a 04 b0 0f 57 c9 f3 43 0f 2a 0c b4 e8 8c e2 f3 ff 48 8b
    [  100.781269] RSP: 0018:ffffa9230079eeb0 EFLAGS: 00010246
    [  100.812528] RAX: 2d33302d32323032 RBX: 0000000000000500 RCX: 0000000000000000
    [  100.819656] RDX: 0000000000000001 RSI: ffff99deb712c49c RDI: 0000000000000000
    [  100.826781] RBP: ffffa9230079ef50 R08: ffff99deb712460c R09: ffff99deb712462c
    [  100.833907] R10: ffff99deb7124940 R11: ffff99deb7124d70 R12: ffff99deb712ae44
    [  100.841033] R13: 0000000000000001 R14: 0000000000000000 R15: ffffa9230079f0a0
    [  100.848159] FS:  00007af121212640(0000) GS:ffff99deba780000(0000) knlGS:0000000000000000
    [  100.856240] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  100.861980] CR2: 0000209000fe1000 CR3: 000000011b18c000 CR4: 0000000000350ee0
    [  100.869106] Call Trace:
    [  100.871555]  <TASK>
    [  100.873655]  ? asm_sysvec_reschedule_ipi+0x12/0x20
    [  100.878449]  CalculateSwathAndDETConfiguration+0x1a3/0x6dd
    [  100.883937]  dml31_ModeSupportAndSystemConfigurationFull+0x2ce4/0x76da
    [  100.890467]  ? kallsyms_lookup_buildid+0xc8/0x163
    [  100.895173]  ? kallsyms_lookup_buildid+0xc8/0x163
    [  100.899874]  ? __sprint_symbol+0x80/0x135
    [  100.903883]  ? dm_update_plane_state+0x3f9/0x4d2
    [  100.908500]  ? symbol_string+0xb7/0xde
    [  100.912250]  ? number+0x145/0x29b
    [  100.915566]  ? vsnprintf+0x341/0x5ff
    [  100.919141]  ? desc_read_finalized_seq+0x39/0x87
    [  100.923755]  ? update_load_avg+0x1b9/0x607
    [  100.927849]  ? compute_mst_dsc_configs_for_state+0x7d/0xd5b
    [  100.933416]  ? fetch_pipe_params+0xa4d/0xd0c
    [  100.937686]  ? dc_fpu_end+0x3d/0xa8
    [  100.941175]  dml_get_voltage_level+0x16b/0x180
    [  100.945619]  dcn30_internal_validate_bw+0x10e/0x89b
    [  100.950495]  ? dcn31_validate_bandwidth+0x68/0x1fc
    [  100.955285]  ? resource_build_scaling_params+0x98b/0xb8c
    [  100.960595]  ? dcn31_validate_bandwidth+0x68/0x1fc
    [  100.965384]  dcn31_validate_bandwidth+0x9a/0x1fc
    [  100.970001]  dc_validate_global_state+0x238/0x295
    [  100.974703]  amdgpu_dm_atomic_check+0x9c1/0xbce
    [  100.979235]  ? _printk+0x59/0x73
    [  100.982467]  drm_atomic_check_only+0x403/0x78b
    [  100.986912]  drm_mode_atomic_ioctl+0x49b/0x546
    [  100.991358]  ? drm_ioctl+0x1c1/0x3b3
    [  100.994936]  ? drm_atomic_set_property+0x92a/0x92a
    [  100.999725]  drm_ioctl_kernel+0xdc/0x149
    [  101.003648]  drm_ioctl+0x27f/0x3b3
    [  101.007051]  ? drm_atomic_set_property+0x92a/0x92a
    [  101.011842]  amdgpu_drm_ioctl+0x49/0x7d
    [  101.015679]  __se_sys_ioctl+0x7c/0xb8
    [  101.015685]  do_syscall_64+0x5f/0xb8
    [  101.015690]  ? __irq_exit_rcu+0x34/0x96
    
    [How]
    It calles populate_dml_pipes which uses doubles to initialize.
    Adding FPU protection avoids context switch and probable loss of vba context
    as there is potential contention while drm debug logs are enabled.
    
    Signed-off-by: CHANDAN VURDIGERE NATARAJ <chandan.vurdigerenataraj@amd.com>
    Reviewed-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org

commit 58e16c752e9540b28a873c44c3bee83e022007c1
Author: Roman Li <Roman.Li@amd.com>
Date:   Tue Mar 15 16:31:14 2022 -0400

    drm/amd/display: Enable power gating before init_pipes
    
    [Why]
    In init_hw() we call init_pipes() before enabling power gating.
    init_pipes() tries to power gate dsc but it may fail because
    required force-ons are not released yet.
    As a result with dsc config the following errors observed on resume:
    "REG_WAIT timeout 1us * 1000 tries - dcn20_dsc_pg_control"
    "REG_WAIT timeout 1us * 1000 tries - dcn20_dpp_pg_control"
    "REG_WAIT timeout 1us * 1000 tries - dcn20_hubp_pg_control"
    
    [How]
    Move enable_power_gating_plane() before init_pipes() in init_hw()
    
    Reviewed-by: Anthony Koo <Anthony.Koo@amd.com>
    Reviewed-by: Eric Yang <Eric.Yang2@amd.com>
    Acked-by: Alex Hung <alex.hung@amd.com>
    Signed-off-by: Roman Li <Roman.Li@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 95707203407c4cf0b7e520a99d6f46d8aed4b57f
Author: Roman Li <Roman.Li@amd.com>
Date:   Tue Mar 15 14:57:34 2022 -0400

    drm/amd/display: Remove redundant dsc power gating from init_hw
    
    [Why]
    DSC Power down code has been moved from dcn31_init_hw into init_pipes()
    Need to remove it from dcn10_init_hw() as well to avoid duplicated action
    on dcn1.x/2.x
    
    [How]
    Remove DSC power down code from dcn10_init_hw()
    
    Fixes: 8fa6f4c5715c ("drm/amd/display: fixed the DSC power off sequence during Driver PnP")
    
    Reviewed-by: Anthony Koo <Anthony.Koo@amd.com>
    Reviewed-by: Eric Yang <Eric.Yang2@amd.com>
    Acked-by: Alex Hung <alex.hung@amd.com>
    Signed-off-by: Roman Li <Roman.Li@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 50e6cb3fd2cde554db646282ea10df7236e6493c
Author: CHANDAN VURDIGERE NATARAJ <chandan.vurdigerenataraj@amd.com>
Date:   Tue Mar 29 13:10:31 2022 +0530

    drm/amd/display: Fix by adding FPU protection for dcn30_internal_validate_bw
    
    [Why]
    Below general protection fault observed when WebGL Aquarium is run for
    longer duration. If drm debug logs are enabled and set to 0x1f then the
    issue is observed within 10 minutes of run.
    
    [  100.717056] general protection fault, probably for non-canonical address 0x2d33302d32323032: 0000 [#1] PREEMPT SMP NOPTI
    [  100.727921] CPU: 3 PID: 1906 Comm: DrmThread Tainted: G        W         5.15.30 #12 d726c6a2d6ebe5cf9223931cbca6892f916fe18b
    [  100.754419] RIP: 0010:CalculateSwathWidth+0x1f7/0x44f
    [  100.767109] Code: 00 00 00 f2 42 0f 11 04 f0 48 8b 85 88 00 00 00 f2 42 0f 10 04 f0 48 8b 85 98 00 00 00 f2 42 0f 11 04 f0 48 8b 45 10 0f 57 c0 <f3> 42 0f 2a 04 b0 0f 57 c9 f3 43 0f 2a 0c b4 e8 8c e2 f3 ff 48 8b
    [  100.781269] RSP: 0018:ffffa9230079eeb0 EFLAGS: 00010246
    [  100.812528] RAX: 2d33302d32323032 RBX: 0000000000000500 RCX: 0000000000000000
    [  100.819656] RDX: 0000000000000001 RSI: ffff99deb712c49c RDI: 0000000000000000
    [  100.826781] RBP: ffffa9230079ef50 R08: ffff99deb712460c R09: ffff99deb712462c
    [  100.833907] R10: ffff99deb7124940 R11: ffff99deb7124d70 R12: ffff99deb712ae44
    [  100.841033] R13: 0000000000000001 R14: 0000000000000000 R15: ffffa9230079f0a0
    [  100.848159] FS:  00007af121212640(0000) GS:ffff99deba780000(0000) knlGS:0000000000000000
    [  100.856240] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  100.861980] CR2: 0000209000fe1000 CR3: 000000011b18c000 CR4: 0000000000350ee0
    [  100.869106] Call Trace:
    [  100.871555]  <TASK>
    [  100.873655]  ? asm_sysvec_reschedule_ipi+0x12/0x20
    [  100.878449]  CalculateSwathAndDETConfiguration+0x1a3/0x6dd
    [  100.883937]  dml31_ModeSupportAndSystemConfigurationFull+0x2ce4/0x76da
    [  100.890467]  ? kallsyms_lookup_buildid+0xc8/0x163
    [  100.895173]  ? kallsyms_lookup_buildid+0xc8/0x163
    [  100.899874]  ? __sprint_symbol+0x80/0x135
    [  100.903883]  ? dm_update_plane_state+0x3f9/0x4d2
    [  100.908500]  ? symbol_string+0xb7/0xde
    [  100.912250]  ? number+0x145/0x29b
    [  100.915566]  ? vsnprintf+0x341/0x5ff
    [  100.919141]  ? desc_read_finalized_seq+0x39/0x87
    [  100.923755]  ? update_load_avg+0x1b9/0x607
    [  100.927849]  ? compute_mst_dsc_configs_for_state+0x7d/0xd5b
    [  100.933416]  ? fetch_pipe_params+0xa4d/0xd0c
    [  100.937686]  ? dc_fpu_end+0x3d/0xa8
    [  100.941175]  dml_get_voltage_level+0x16b/0x180
    [  100.945619]  dcn30_internal_validate_bw+0x10e/0x89b
    [  100.950495]  ? dcn31_validate_bandwidth+0x68/0x1fc
    [  100.955285]  ? resource_build_scaling_params+0x98b/0xb8c
    [  100.960595]  ? dcn31_validate_bandwidth+0x68/0x1fc
    [  100.965384]  dcn31_validate_bandwidth+0x9a/0x1fc
    [  100.970001]  dc_validate_global_state+0x238/0x295
    [  100.974703]  amdgpu_dm_atomic_check+0x9c1/0xbce
    [  100.979235]  ? _printk+0x59/0x73
    [  100.982467]  drm_atomic_check_only+0x403/0x78b
    [  100.986912]  drm_mode_atomic_ioctl+0x49b/0x546
    [  100.991358]  ? drm_ioctl+0x1c1/0x3b3
    [  100.994936]  ? drm_atomic_set_property+0x92a/0x92a
    [  100.999725]  drm_ioctl_kernel+0xdc/0x149
    [  101.003648]  drm_ioctl+0x27f/0x3b3
    [  101.007051]  ? drm_atomic_set_property+0x92a/0x92a
    [  101.011842]  amdgpu_drm_ioctl+0x49/0x7d
    [  101.015679]  __se_sys_ioctl+0x7c/0xb8
    [  101.015685]  do_syscall_64+0x5f/0xb8
    [  101.015690]  ? __irq_exit_rcu+0x34/0x96
    
    [How]
    It calles populate_dml_pipes which uses doubles to initialize.
    Adding FPU protection avoids context switch and probable loss of vba context
    as there is potential contention while drm debug logs are enabled.
    
    Signed-off-by: CHANDAN VURDIGERE NATARAJ <chandan.vurdigerenataraj@amd.com>
    Reviewed-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 9510d365e0626ff6f7ed5b23f70ae49828b68039
Author: Aric Cyr <aric.cyr@amd.com>
Date:   Sun Mar 20 14:35:12 2022 -0400

    drm/amd/display: 3.2.179
    
    - [FW Promotion] Release 0.0.110.0
    - Revert FEC check in validation
    - Update LTTPR UHBR link rate support struct
    - Add support for USBC connector
    - Add work around for AUX failure on wake
    - Clear optc false state when disable otg
    - Enable power gating before init_pipes
    - Remove redundant dsc power gating from init_hw
    - Power down hardware if timer not trigger
    - Correct Slice reset calculation
    - Enable 3-plane MPO for DCN31
    - Set fec register init value
    - Remove SW w/a for HDCP 1.4 1A-07 failure based on ECO fix
    - Create underflow interrupt IRQ type
    
    Acked-by: Alex Hung <alex.hung@amd.com>
    Signed-off-by: Aric Cyr <aric.cyr@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 384bd90d1cc1168dc845ad2735d7a3d49459fbba
Author: Roman Li <Roman.Li@amd.com>
Date:   Tue Mar 15 16:31:14 2022 -0400

    drm/amd/display: Enable power gating before init_pipes
    
    [Why]
    In init_hw() we call init_pipes() before enabling power gating.
    init_pipes() tries to power gate dsc but it may fail because
    required force-ons are not released yet.
    As a result with dsc config the following errors observed on resume:
    "REG_WAIT timeout 1us * 1000 tries - dcn20_dsc_pg_control"
    "REG_WAIT timeout 1us * 1000 tries - dcn20_dpp_pg_control"
    "REG_WAIT timeout 1us * 1000 tries - dcn20_hubp_pg_control"
    
    [How]
    Move enable_power_gating_plane() before init_pipes() in init_hw()
    
    Reviewed-by: Anthony Koo <Anthony.Koo@amd.com>
    Reviewed-by: Eric Yang <Eric.Yang2@amd.com>
    Acked-by: Alex Hung <alex.hung@amd.com>
    Signed-off-by: Roman Li <Roman.Li@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 75c95f4550e3d4584ff100fef53c240f3291f7cd
Author: Roman Li <Roman.Li@amd.com>
Date:   Tue Mar 15 14:57:34 2022 -0400

    drm/amd/display: Remove redundant dsc power gating from init_hw
    
    [Why]
    DSC Power down code has been moved from dcn31_init_hw into init_pipes()
    Need to remove it from dcn10_init_hw() as well to avoid duplicated action
    on dcn1.x/2.x
    
    [How]
    Remove DSC power down code from dcn10_init_hw()
    
    Fixes: 8fa6f4c5715c ("drm/amd/display: fixed the DSC power off sequence during Driver PnP")
    
    Reviewed-by: Anthony Koo <Anthony.Koo@amd.com>
    Reviewed-by: Eric Yang <Eric.Yang2@amd.com>
    Acked-by: Alex Hung <alex.hung@amd.com>
    Signed-off-by: Roman Li <Roman.Li@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 136bed0bfd3bc9c95c88aafff2d22ecb3a919f23
Author: Pavel Skripkin <paskripkin@gmail.com>
Date:   Sun Mar 13 13:09:03 2022 +0300

    can: mcba_usb: properly check endpoint type
    
    Syzbot reported warning in usb_submit_urb() which is caused by wrong
    endpoint type. We should check that in endpoint is actually present to
    prevent this warning.
    
    Found pipes are now saved to struct mcba_priv and code uses them
    directly instead of making pipes in place.
    
    Fail log:
    
    | usb 5-1: BOGUS urb xfer, pipe 3 != type 1
    | WARNING: CPU: 1 PID: 49 at drivers/usb/core/urb.c:502 usb_submit_urb+0xed2/0x18a0 drivers/usb/core/urb.c:502
    | Modules linked in:
    | CPU: 1 PID: 49 Comm: kworker/1:2 Not tainted 5.17.0-rc6-syzkaller-00184-g38f80f42147f #0
    | Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS 1.14.0-2 04/01/2014
    | Workqueue: usb_hub_wq hub_event
    | RIP: 0010:usb_submit_urb+0xed2/0x18a0 drivers/usb/core/urb.c:502
    | ...
    | Call Trace:
    |  <TASK>
    |  mcba_usb_start drivers/net/can/usb/mcba_usb.c:662 [inline]
    |  mcba_usb_probe+0x8a3/0xc50 drivers/net/can/usb/mcba_usb.c:858
    |  usb_probe_interface+0x315/0x7f0 drivers/usb/core/driver.c:396
    |  call_driver_probe drivers/base/dd.c:517 [inline]
    
    Fixes: 51f3baad7de9 ("can: mcba_usb: Add support for Microchip CAN BUS Analyzer")
    Link: https://lore.kernel.org/all/20220313100903.10868-1-paskripkin@gmail.com
    Reported-and-tested-by: syzbot+3bc1dce0cc0052d60fde@syzkaller.appspotmail.com
    Signed-off-by: Pavel Skripkin <paskripkin@gmail.com>
    Reviewed-by: Vincent Mailhol <mailhol.vincent@wanadoo.fr>
    Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>

commit 47e794d69c0d8a4a1ff91fcb6e3d69bc38fcfef2
Author: José Roberto de Souza <jose.souza@intel.com>
Date:   Wed Mar 30 08:57:24 2022 -0700

    drm/i915/display/adlp: Fix programing of PIPE_MBUS_DBOX_CTL
    
    PIPE_MBUS_DBOX_CTL was only being programmed when a pipe is being
    enabled but that could potentially cause issues as it could have
    mismatching values while pipes are being enabled.
    
    So here moving the PIPE_MBUS_DBOX_CTL programming of all pipes to be
    executed before the function that enables all pipes, leaving all pipes
    with a matching A_CREDIT value.
    
    While at it, also moving it to intel_pm.c as we are trying to reduce
    the gigantic size of intel_display.c and intel_pm.c have other MBUS
    programing sequences.
    
    v2:
    - do not program PIPE_MBUS_DBOX_CTL if pipe will not be active or
    when it do not needs modeset
    - remove the checks to wait a vblank
    
    v3:
    - checking if dbuf state is present in state before using it
    
    v4:
    - removing redundant checks
    - calling intel_atomic_get_new_dbuf_state instead of
    intel_atomic_get_dbuf_state
    
    BSpec: 49213
    BSpec: 50343
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Signed-off-by: José Roberto de Souza <jose.souza@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220330155724.255226-3-jose.souza@intel.com

commit 3107e1a7ae088ee94323fe9ab05dbefd65b3077f
Author: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
Date:   Fri Mar 18 11:10:34 2022 -0400

    drm/amd/display: Fix p-state allow debug index on dcn31
    
    [Why]
    It changed since dcn30 but the hubbub31 constructor hasn't been
    modified to reflect this.
    
    [How]
    Update the value in the constructor to 0x6 so we're checking the right
    bits for p-state allow.
    
    It worked before by accident, but can falsely assert 0 depending on HW
    state transitions. The most frequent of which appears to be when
    all pipes turn off during IGT tests.
    
    Cc: Harry Wentland <harry.wentland@amd.com>
    
    Fixes: e7031d8258f1b4 ("drm/amd/display: Add pstate verification and recovery for DCN31")
    Signed-off-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Reviewed-by: Eric Yang <Eric.Yang2@amd.com>
    Acked-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 5a519c8fe4d620912385f94372fc8472fa98c662
Author: Andrei Vagin <avagin@gmail.com>
Date:   Wed Mar 23 16:06:17 2022 -0700

    fs/pipe: use kvcalloc to allocate a pipe_buffer array
    
    Right now, kcalloc is used to allocate a pipe_buffer array.  The size of
    the pipe_buffer struct is 40 bytes.  kcalloc allows allocating reliably
    chunks with sizes less or equal to PAGE_ALLOC_COSTLY_ORDER (3).  It
    means that the maximum pipe size is 3.2MB in this case.
    
    In CRIU, we use pipes to dump processes memory.  CRIU freezes a target
    process, injects a parasite code into it and then this code splices
    memory into pipes.  If a maximum pipe size is small, we need to do many
    iterations or create many pipes.
    
    kvcalloc attempt to allocate physically contiguous memory, but upon
    failure, fall back to non-contiguous (vmalloc) allocation and so it
    isn't limited by PAGE_ALLOC_COSTLY_ORDER.
    
    The maximum pipe size for non-root users is limited by the
    /proc/sys/fs/pipe-max-size sysctl that is 1MB by default, so only the
    root user will be able to trigger vmalloc allocations.
    
    Link: https://lkml.kernel.org/r/20220104171058.22580-1-avagin@gmail.com
    Signed-off-by: Andrei Vagin <avagin@gmail.com>
    Reviewed-by: Dmitry Safonov <0x7f454c46@gmail.com>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit a8c49af3be5f0b4e105ef678bcf14ef102c270be
Author: Yosry Ahmed <yosryahmed@google.com>
Date:   Tue Mar 22 14:40:10 2022 -0700

    memcg: add per-memcg total kernel memory stat
    
    Currently memcg stats show several types of kernel memory: kernel stack,
    page tables, sock, vmalloc, and slab.  However, there are other
    allocations with __GFP_ACCOUNT (or supersets such as GFP_KERNEL_ACCOUNT)
    that are not accounted in any of those stats, a few examples are:
    
     - various kvm allocations (e.g. allocated pages to create vcpus)
     - io_uring
     - tmp_page in pipes during pipe_write()
     - bpf ringbuffers
     - unix sockets
    
    Keeping track of the total kernel memory is essential for the ease of
    migration from cgroup v1 to v2 as there are large discrepancies between
    v1's kmem.usage_in_bytes and the sum of the available kernel memory
    stats in v2.  Adding separate memcg stats for all __GFP_ACCOUNT kernel
    allocations is an impractical maintenance burden as there a lot of those
    all over the kernel code, with more use cases likely to show up in the
    future.
    
    Therefore, add a "kernel" memcg stat that is analogous to kmem page
    counter, with added benefits such as using rstat infrastructure which
    aggregates stats more efficiently.  Additionally, this provides a
    lighter alternative in case the legacy kmem is deprecated in the future
    
    [yosryahmed@google.com: v2]
      Link: https://lkml.kernel.org/r/20220203193856.972500-1-yosryahmed@google.com
    
    Link: https://lkml.kernel.org/r/20220201200823.3283171-1-yosryahmed@google.com
    Signed-off-by: Yosry Ahmed <yosryahmed@google.com>
    Acked-by: Shakeel Butt <shakeelb@google.com>
    Acked-by: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Muchun Song <songmuchun@bytedance.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 074c88751dc121eb9a7fbcbd632001b8d2b09efa
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Feb 4 16:18:18 2022 +0200

    drm/i915: Workaround broken BIOS DBUF configuration on TGL/RKL
    
    commit 4e6f55120c7eccf6f9323bb681632e23cbcb3f3c upstream.
    
    On TGL/RKL the BIOS likes to use some kind of bogus DBUF layout
    that doesn't match what the spec recommends. With a single active
    pipe that is not going to be a problem, but with multiple pipes
    active skl_commit_modeset_enables() goes into an infinite loop
    since it can't figure out any order in which it can commit the
    pipes without causing DBUF overlaps between the planes.
    
    We'd need some kind of extra DBUF defrag stage in between to
    make the transition possible. But that is clearly way too complex
    a solution, so in the name of simplicity let's just sanitize the
    DBUF state by simply turning off all planes when we detect a
    pipe encroaching on its neighbours' DBUF slices. We only have
    to disable the primary planes as all other planes should have
    already been disabled (if they somehow were enabled) by
    earlier sanitization steps.
    
    And for good measure let's also sanitize in case the DBUF
    allocations of the pipes already seem to overlap each other.
    
    Cc: <stable@vger.kernel.org> # v5.14+
    Closes: https://gitlab.freedesktop.org/drm/intel/-/issues/4762
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220204141818.1900-3-ville.syrjala@linux.intel.com
    Reviewed-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    (cherry picked from commit 15512021eb3975a8c2366e3883337e252bb0eee5)
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 18f23b92187ff75f8381aecd8b89c8feeddcab09
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Tue Mar 15 15:27:46 2022 +0200

    drm/i915: Fix DRRS frontbuffer_bits handling
    
    Now that DRRS can operate on multiple pipes we need to make sure
    one pipe doesn't throw away the other pipe's frontbuffer_bits before
    said pipe can handle them.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220315132752.11849-4-ville.syrjala@linux.intel.com
    Reviewed-by: José Roberto de Souza <jose.souza@intel.com>

commit dd15640bcee5a5fa74fc52557dd6220f48b01116
Author: Becle Lee <becle.lee@amd.com>
Date:   Thu Mar 10 17:20:42 2022 -0500

    drm/amd/display: Wait for hubp read line for Pollock
    
    [Why]
    Underflow occurred while hubp ret pipe read is idle and the
    second pipe is powered up and added. Flickering and underflow
    are only observed on Pollock.
    
    [How]
    Check the hubp ret pipe read prior to unlock pipes.
    
    Reviewed-by: Hersen Wu <hersenxs.wu@amd.com>
    Reviewed-by: Aric Cyr <Aric.Cyr@amd.com>
    Acked-by: Agustin Gutierrez <agustin.gutierrez@amd.com>
    Signed-off-by: Becle Lee <becle.lee@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 22f87d99832650d9389b0b3d08f3c970afc53f10
Author: Melissa Wen <mwen@igalia.com>
Date:   Mon Feb 28 20:10:46 2022 -0100

    drm/amd/display: move FPU operations from dcn21 to dml/dcn20 folder
    
    dml/dcn20_fpu file centralizes all DCN2x functions that require FPU access.
    Therefore, this patch moves FPU-related code from dcn21 to dcn20_fpu. These
    include:
    - dcn21_populate_dml_pipes_from_context()
    - dcn21_validate_bandwidth_fp() and related:
      - dcn21_calculate_wm(),
      - patch_bounding_box(),
      - calculate_wm_set_for_vlevel()
    - renaming update_bw_bounding_box() to dcn21_update_bw_bounding_box(), move
    to dcn20_fpu with related static function construct_low_pstate_lvl()
    
    Also, make dcn21_fast_validate_bw() public in dcn21_resource as it is called
    by dcn21_validate_bandwidth_fp() now in dcn20_fpu.
    
    Reuse dcn20_fpu_adjust_dppclk() in dcn21_fast_validate_bw() as it isolates
    the same FPU operation.
    
    Include dchubbub.h as it is required in dcn21_populate_dml_pipes_from_context()
    
    Signed-off-by: Melissa Wen <mwen@igalia.com>
    Acked-by: Alan Liu <HaoPing.Liu@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit cf689e869cf0339c387397c7a6805e387594656d
Author: Melissa Wen <mwen@igalia.com>
Date:   Wed Feb 23 23:27:25 2022 +0000

    drm/amd/display: move FPU-related code from dcn20 to dml folder
    
    Move parts of dcn20 code that uses FPU to dml folder. It aims to isolate
    FPU operations as described by series:
    
    drm/amd/display: Introduce FPU directory inside DC
    https://patchwork.freedesktop.org/series/93042/
    
    This patch moves the following functions from dcn20_resource to
    dml/dcn20_fpu and calls of public functions in dcn20_resource are
    wrapped by DC_FP_START/END():
    
    - void dcn20_populate_dml_writeback_from_context
    - static bool is_dtbclk_required()
    - static enum dcn_zstate_support_state()
    - void dcn20_calculate_dlg_params()
    - static void swizzle_to_dml_params()
    - int dcn20_populate_dml_pipes_from_context()
    - void dcn20_calculate_wm()
    - void dcn20_cap_soc_clocks()
    - void dcn20_update_bounding_box()
    - void dcn20_patch_bounding_box()
    - bool dcn20_validate_bandwidth_fp()
    
    This movement also affects dcn21/30/31, as dcn20_calculate_dlg_params()
    is used by them. For this reason, I included dcn20_fpu headers in
    dcn20_resource headers to make dcn20_calculate_dlg_params() visible to
    dcn21/30/31.
    
    Three new functions are created to isolate well-delimited FPU
    operations:
    
    - void dcn20_fpu_set_wb_arb_params(): set cli_watermark,
      pstate_watermark and time_per_pixel from wb_arb_params (struct
    mcif_arb_params), since those uses FPU operations on double types:
    WritebackUrgentWatermark, WritebackDRAMClockChangeWatermark, '16.0'.
    - void dcn20_fpu_set_wm_ranges(): set min_fill_clk_mhz and
      max_fill_clk_mhz involves FPU calcs on dram_speed_mts (double type);
    - void dcn20_fpu_adjust_dppclk(): adjust operation on RequiredDPPCLK
      that is a double.
    
    Signed-off-by: Melissa Wen <mwen@igalia.com>
    Acked-by: Alan Liu <HaoPing.Liu@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 851f15fe4c1a2541ac80fa5158c786bf83a2b8e8
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Mar 11 19:24:24 2022 +0200

    drm/i915: Stash DRRS state under intel_crtc
    
    Ger rid of one more ugly crtc->config usage by storing the DRRS
    state under intel_crtc. intel_drrs_enable() copies what it needs
    from the crtc state, after which DRRS can be blissfully ignorant
    of anything going on around it.
    
    This also lets multiple pipes do DRRS simultanously and entirely
    independently.
    
    v2: Split out some stuff (Jani)
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220311172428.14685-13-ville.syrjala@linux.intel.com
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>

commit 8d8b2dd3995f80f26723ad61865e1eb265225561
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Feb 23 15:13:15 2022 +0200

    drm/i915: Make the PIPESRC rect relative to the entire bigjoiner area
    
    When using bigjoiner it's useful to know the offset of each
    individual pipe in the whole set of joined pipes. Let's include
    that information in our PIPESRC rectangle. With this we can make
    the plane clipping code blissfully unaware of bigjoiner usage, as
    all we have to do is remove the pipe's offset from the final plane
    destination coordinates.
    
    v2: Use intel_bigjoiner_num_pipes()
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220223131315.18016-14-ville.syrjala@linux.intel.com
    Reviewed-by: Manasi Navare <manasi.d.navare@intel.com>

commit 4fe4ed07c815044755075eaad5fe1815436a060f
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Feb 23 15:13:03 2022 +0200

    drm/i915: Avoid negative shift due to bigjoiner_pipes==0
    
    bigjoiner_pipes==0 leads bigjoiner_master_pipe() to
    do BIT(ffs(0)-1) which is undefined behaviour. The code should
    actually still work fine since the only place we provoke
    that is intel_crtc_bigjoiner_slave_pipes() and it'll bitwise
    AND the result with 0, so doesn't really matter what we get
    out of bigjoiner_master_pipe(). But best not provoke undefined
    behaviour anyway.
    
    Reported-by: kernel test robot <oliver.sang@intel.com>
    Fixes: a6e7a006f5d5 ("drm/i915: Change bigjoiner state tracking to use the pipe bitmask")
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220223131315.18016-2-ville.syrjala@linux.intel.com
    Reviewed-by: Manasi Navare <manasi.d.navare@intel.com>
    (cherry picked from commit cccc71b552a1040ad3d738d7ec95570801fb0bf6)
    Signed-off-by: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>

commit 8b986e2a051c2910851d3661a8419721028d2f02
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Feb 23 15:13:14 2022 +0200

    drm/i915: Use bigjoiner_pipes more
    
    Replace the hardcoded 2 pipe assumptions when we're massaging
    pipe_mode and the pipe_src rect to be suitable for bigjoiner.
    Instead we can just count the number of pipes in the bitmask.
    
    v2: Introduce intel_bigjoiner_num_pipes()
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220223131315.18016-13-ville.syrjala@linux.intel.com
    Reviewed-by: Manasi Navare <manasi.d.navare@intel.com>

commit 4d1b53dfbf2445a7cf35ca18c90c2c6712fea163
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Feb 23 15:13:13 2022 +0200

    drm/i915: Eliminate bigjoiner boolean
    
    Since we now have the bigjoiner_pipes bitmask the boolean
    is redundant. Get rid of it.
    
    Also, populating bigjoiner_pipes already during
    encoder->compute_config() allows us to use it much earlier
    during the state calculation as well. The initial aim is
    to use it in intel_crtc_compute_config().
    
    v2: Move the hweight(bigjoiner_pipes) stuff to a later patch
    
    Reviewed-by: Ankit Nautiyal <ankit.k.nautiyal@intel.com> #v1
    Reviewed-by: Manasi Navare <manasi.d.navare@intel.com> #v1
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220223131315.18016-12-ville.syrjala@linux.intel.com

commit 6e611b9d22b1ad868e9d2a33116057d642991025
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Feb 18 08:40:34 2022 +0200

    drm/i915: Correctly populate use_sagv_wm for all pipes
    
    commit afc189df6bcc6be65961deb54e15ec60e7f85337 upstream.
    
    When changing between SAGV vs. no SAGV on tgl+ we have to
    update the use_sagv_wm flag for all the crtcs or else
    an active pipe not already in the state will end up using
    the wrong watermarks. That is especially bad when we end up
    with the tighter non-SAGV watermarks with SAGV enabled.
    Usually ends up in underruns.
    
    Cc: stable@vger.kernel.org
    Reviewed-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Fixes: 7241c57d3140 ("drm/i915: Add TGL+ SAGV support")
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220218064039.12834-2-ville.syrjala@linux.intel.com
    (cherry picked from commit 8dd8ffb824ca7b897ce9f2082ffa7e64831c22dc)
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1b4445e09df83c397343ef8ab6b3ab560a4831ff
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Feb 18 08:40:34 2022 +0200

    drm/i915: Correctly populate use_sagv_wm for all pipes
    
    commit afc189df6bcc6be65961deb54e15ec60e7f85337 upstream.
    
    When changing between SAGV vs. no SAGV on tgl+ we have to
    update the use_sagv_wm flag for all the crtcs or else
    an active pipe not already in the state will end up using
    the wrong watermarks. That is especially bad when we end up
    with the tighter non-SAGV watermarks with SAGV enabled.
    Usually ends up in underruns.
    
    Cc: stable@vger.kernel.org
    Reviewed-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Fixes: 7241c57d3140 ("drm/i915: Add TGL+ SAGV support")
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220218064039.12834-2-ville.syrjala@linux.intel.com
    (cherry picked from commit 8dd8ffb824ca7b897ce9f2082ffa7e64831c22dc)
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 55eec5c630eac8034bbfb772bb2e2bccc0777a2b
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Feb 18 08:40:34 2022 +0200

    drm/i915: Correctly populate use_sagv_wm for all pipes
    
    commit afc189df6bcc6be65961deb54e15ec60e7f85337 upstream.
    
    When changing between SAGV vs. no SAGV on tgl+ we have to
    update the use_sagv_wm flag for all the crtcs or else
    an active pipe not already in the state will end up using
    the wrong watermarks. That is especially bad when we end up
    with the tighter non-SAGV watermarks with SAGV enabled.
    Usually ends up in underruns.
    
    Cc: stable@vger.kernel.org
    Reviewed-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Fixes: 7241c57d3140 ("drm/i915: Add TGL+ SAGV support")
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220218064039.12834-2-ville.syrjala@linux.intel.com
    (cherry picked from commit 8dd8ffb824ca7b897ce9f2082ffa7e64831c22dc)
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c26933639b5402c174c65c01d33f145622784012
Author: Vladimir Oltean <vladimir.oltean@nxp.com>
Date:   Fri Feb 25 11:22:22 2022 +0200

    net: dsa: request drivers to perform FDB isolation
    
    For DSA, to encourage drivers to perform FDB isolation simply means to
    track which bridge does each FDB and MDB entry belong to. It then
    becomes the driver responsibility to use something that makes the FDB
    entry from one bridge not match the FDB lookup of ports from other
    bridges.
    
    The top-level functions where the bridge is determined are:
    - dsa_port_fdb_{add,del}
    - dsa_port_host_fdb_{add,del}
    - dsa_port_mdb_{add,del}
    - dsa_port_host_mdb_{add,del}
    
    aka the pre-crosschip-notifier functions.
    
    Changing the API to pass a reference to a bridge is not superfluous, and
    looking at the passed bridge argument is not the same as having the
    driver look at dsa_to_port(ds, port)->bridge from the ->port_fdb_add()
    method.
    
    DSA installs FDB and MDB entries on shared (CPU and DSA) ports as well,
    and those do not have any dp->bridge information to retrieve, because
    they are not in any bridge - they are merely the pipes that serve the
    user ports that are in one or multiple bridges.
    
    The struct dsa_bridge associated with each FDB/MDB entry is encapsulated
    in a larger "struct dsa_db" database. Although only databases associated
    to bridges are notified for now, this API will be the starting point for
    implementing IFF_UNICAST_FLT in DSA. There, the idea is to install FDB
    entries on the CPU port which belong to the corresponding user port's
    port database. These are supposed to match only when the port is
    standalone.
    
    It is better to introduce the API in its expected final form than to
    introduce it for bridges first, then to have to change drivers which may
    have made one or more assumptions.
    
    Drivers can use the provided bridge.num, but they can also use a
    different numbering scheme that is more convenient.
    
    DSA must perform refcounting on the CPU and DSA ports by also taking
    into account the bridge number. So if two bridges request the same local
    address, DSA must notify the driver twice, once for each bridge.
    
    In fact, if the driver supports FDB isolation, DSA must perform
    refcounting per bridge, but if the driver doesn't, DSA must refcount
    host addresses across all bridges, otherwise it would be telling the
    driver to delete an FDB entry for a bridge and the driver would delete
    it for all bridges. So introduce a bool fdb_isolation in drivers which
    would make all bridge databases passed to the cross-chip notifier have
    the same number (0). This makes dsa_mac_addr_find() -> dsa_db_equal()
    say that all bridge databases are the same database - which is
    essentially the legacy behavior.
    
    Signed-off-by: Vladimir Oltean <vladimir.oltean@nxp.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2d0539575abb9dfda27eb7653bb442448fb8982a
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Feb 23 15:13:11 2022 +0200

    drm/i915: Fix MSO vs. bigjoiner timings confusion
    
    When calculating pipe_mode and when doing readout we need
    to order our steps correctly.
    
    1. We start with adjusted_mode crtc timings being populated
       with the transcoder timings (either via readout or
       compute_config(). These will be per-segment for MSO.
    2. For all other uses we want the full crtc timings so
       we ask intel_splitter_adjust_timings() to expand
       the per-segment numbers to their full glory
    3. If bigjoiner is used we the divide the full numbers
       down to per-pipe numbers using intel_bigjoiner_adjust_timings()
    
    During readout we also have to reconstruct the adjusted_mode
    normal timings (ie. not the crtc_ stuff). These are supposed
    to reflect the full timings of the display. So we grab these
    between steps 2 and 3.
    
    The "user" mode readout (mainly done for fastboot purposes)
    should be whatever mode the user would have used had they
    asked us to do a modeset. We want the full timings for this
    as the per-segment timings are not suppoesed to be user visible.
    Also the user mode normal timings hdisplay/vdisplay need to
    match PIPESRC (that is where we get our PIPESRC size
    we doing a modeset with a user supplied mode).
    
    And we end up with
    - adjusted_mode normal timigns == full timings
    - adjusted_mode crtc timings == transcoder timings
      (per-segment timings for MSO, full timings otherwise)
    - pipe_mode normal/crtc timings == pipe timings
      (full timings divided by the number of bigjoiner pipes, if any)
    - user mode normal timings == full timings with
      hdisplay/vdisplay replaced with PIPESRC size
    - user mode crtc timings == full timings
    
    Yes, that is a lot of timings. One day we'll try to remove
    some of the ones we don't actually need to keep around...
    
    Reviewed-by: Manasi Navare <manasi.d.navare@intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220223131315.18016-10-ville.syrjala@linux.intel.com

commit cccc71b552a1040ad3d738d7ec95570801fb0bf6
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Feb 23 15:13:03 2022 +0200

    drm/i915: Avoid negative shift due to bigjoiner_pipes==0
    
    bigjoiner_pipes==0 leads bigjoiner_master_pipe() to
    do BIT(ffs(0)-1) which is undefined behaviour. The code should
    actually still work fine since the only place we provoke
    that is intel_crtc_bigjoiner_slave_pipes() and it'll bitwise
    AND the result with 0, so doesn't really matter what we get
    out of bigjoiner_master_pipe(). But best not provoke undefined
    behaviour anyway.
    
    Reported-by: kernel test robot <oliver.sang@intel.com>
    Fixes: a6e7a006f5d5 ("drm/i915: Change bigjoiner state tracking to use the pipe bitmask")
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220223131315.18016-2-ville.syrjala@linux.intel.com
    Reviewed-by: Manasi Navare <manasi.d.navare@intel.com>

commit 5ee3d0015a4cec798b44ceefc34245752104fc08
Merge: 7ee022567bf9 ecf8a99f4807
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Feb 24 17:29:26 2022 -0800

    Merge tag 'drm-fixes-2022-02-25' of git://anongit.freedesktop.org/drm/drm
    
    Pull drm fixes from Dave Airlie:
     "Regular drm fixes pull, i915, amdgpu and tegra mostly, all pretty
      small.
    
      core:
       - edid: Always set RGB444
    
      tegra:
       - tegra186 suspend/resume fixes
       - syncpoint wait fix
       - build warning fix
       - eDP on older devices fix
    
      amdgpu:
       - Display FP fix
       - PCO powergating fix
       - RDNA2 OEM SKU stability fixes
       - Display PSR fix
       - PCI ASPM fix
       - Display link encoder fix for TEST_COMMIT
       - Raven2 suspend/resume fix
       - Fix a regression in virtual display support
       - GPUVM eviction fix
    
      i915:
       - Fix QGV handling on ADL-P+
       - Fix bw atomic check when switching between SAGV vs. no SAGV
       - Disconnect PHYs left connected by BIOS on disabled ports
       - Fix SAVG to no SAGV transitions on TGL+
       - Print PHY name properly on calibration error (DG2)
    
      imx:
       - dcss: Select GEM CMA helpers
    
      radeon:
       - Fix some variables's type
    
      vc4:
       - Fix codec cleanup
       - Fix PM reference counting"
    
    * tag 'drm-fixes-2022-02-25' of git://anongit.freedesktop.org/drm/drm: (24 commits)
      drm/amdgpu: check vm ready by amdgpu_vm->evicting flag
      drm/amdgpu: bypass tiling flag check in virtual display case (v2)
      Revert "drm/amdgpu: add modifiers in amdgpu_vkms_plane_init()"
      drm/amdgpu: do not enable asic reset for raven2
      drm/amd/display: Fix stream->link_enc unassigned during stream removal
      drm/amd: Check if ASPM is enabled from PCIe subsystem
      drm/edid: Always set RGB444
      drm/tegra: dpaux: Populate AUX bus
      drm/radeon: fix variable type
      drm/amd/display: For vblank_disable_immediate, check PSR is really used
      drm/amd/pm: fix some OEM SKU specific stability issues
      drm/amdgpu: disable MMHUB PG for Picasso
      drm/amd/display: Protect update_bw_bounding_box FPU code.
      drm/i915/dg2: Print PHY name properly on calibration error
      drm/i915: Fix bw atomic check when switching between SAGV vs. no SAGV
      drm/i915: Correctly populate use_sagv_wm for all pipes
      drm/i915: Disconnect PHYs left connected by BIOS on disabled ports
      drm/i915: Widen the QGV point mask
      drm/imx/dcss: i.MX8MQ DCSS select DRM_GEM_CMA_HELPER
      drm/vc4: crtc: Fix runtime_pm reference counting
      ...

commit b51178d6edddbfc8cb4da5b5e9c924f2d24bbcac
Author: Duncan Ma <duncanma@amd.com>
Date:   Tue Feb 8 15:05:09 2022 -0500

    drm/amd/display: Set compbuf size to min at prep prevent overbook crb
    
    [Why]
    Detbuffer size is dynamically set for dcn31x. At certain moment,
    compbuf+(def size * num pipes) > config return buffer size causing
    flickering. This is easily reproducible when MPO is
    enabled with two displays.
    
    [How]
    At prepare BW, use the min comp buffer size. When it is to
    optimize BW, set compbuf size back to maximum possible size.
    
    Reviewed-by: Charlene Liu <Charlene.Liu@amd.com>
    Acked-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
    Signed-off-by: Duncan Ma <duncanma@amd.com>
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 2e6e14c9e47dac61e341d4b8128184e3e0eb3568
Author: Duncan Ma <duncanma@amd.com>
Date:   Tue Feb 8 15:05:09 2022 -0500

    drm/amd/display: Set compbuf size to min at prep prevent overbook crb
    
    [Why]
    Detbuffer size is dynamically set for dcn31x. At certain moment,
    compbuf+(def size * num pipes) > config return buffer size causing
    flickering. This is easily reproducible when MPO is
    enabled with two displays.
    
    [How]
    At prepare BW, use the min comp buffer size. When it is to
    optimize BW, set compbuf size back to maximum possible size.
    
    Reviewed-by: Charlene Liu <Charlene.Liu@amd.com>
    Acked-by: Solomon Chiu <solomon.chiu@amd.com>
    Signed-off-by: Duncan Ma <duncanma@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit e0adbe73d75e46e3665cf0fb30f2cfc00dd78c04
Author: Paul Hsieh <paul.hsieh@amd.com>
Date:   Mon Feb 7 11:45:24 2022 +0800

    drm/amd/display: lock/un-lock cursor if odm pipe split used
    
    [Why]
    When system resume from sleep, the cursor lock will be reset
    to default(lock status). And the cursor programming sequence
    doesn't consider about odm pipe split cause cursor can't be
    enabled.
    
    [How]
    If odm pipe split has been used, lock/un-lock on each pipes.
    
    Reviewed-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Acked-by: Solomon Chiu <solomon.chiu@amd.com>
    Signed-off-by: Paul Hsieh <paul.hsieh@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 3ed9dabaa5d90eee4356aecd2ffbf7b8ebaabf6c
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Feb 7 15:26:59 2022 +0200

    drm/i915: Fix dbuf slice config lookup
    
    commit 698bef8ff5d2edea5d1c9d6e5adf1bfed1e8a106 upstream.
    
    Apparently I totally fumbled the loop condition when I
    removed the ARRAY_SIZE() stuff from the dbuf slice config
    lookup. Comparing the loop index with the active_pipes bitmask
    is utter nonsense, what we want to do is check to see if the
    mask is zero or not.
    
    Note that the code actually ended up working correctly despite
    the fumble, up until commit eef173954432 ("drm/i915: Allow
    !join_mbus cases for adlp+ dbuf configuration") when things
    broke for real.
    
    Cc: stable@vger.kernel.org
    Fixes: 05e8155afe35 ("drm/i915: Use a sentinel to terminate the dbuf slice arrays")
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220207132700.481-1-ville.syrjala@linux.intel.com
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    (cherry picked from commit a28fde308c3c1c174249ff9559b57f24e6850086)
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 34f5556ddf2b5fc25696832fa4a1a7013fc80a05
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Feb 7 15:26:59 2022 +0200

    drm/i915: Fix dbuf slice config lookup
    
    commit 698bef8ff5d2edea5d1c9d6e5adf1bfed1e8a106 upstream.
    
    Apparently I totally fumbled the loop condition when I
    removed the ARRAY_SIZE() stuff from the dbuf slice config
    lookup. Comparing the loop index with the active_pipes bitmask
    is utter nonsense, what we want to do is check to see if the
    mask is zero or not.
    
    Note that the code actually ended up working correctly despite
    the fumble, up until commit eef173954432 ("drm/i915: Allow
    !join_mbus cases for adlp+ dbuf configuration") when things
    broke for real.
    
    Cc: stable@vger.kernel.org
    Fixes: 05e8155afe35 ("drm/i915: Use a sentinel to terminate the dbuf slice arrays")
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220207132700.481-1-ville.syrjala@linux.intel.com
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    (cherry picked from commit a28fde308c3c1c174249ff9559b57f24e6850086)
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit afc189df6bcc6be65961deb54e15ec60e7f85337
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Feb 18 08:40:34 2022 +0200

    drm/i915: Correctly populate use_sagv_wm for all pipes
    
    When changing between SAGV vs. no SAGV on tgl+ we have to
    update the use_sagv_wm flag for all the crtcs or else
    an active pipe not already in the state will end up using
    the wrong watermarks. That is especially bad when we end up
    with the tighter non-SAGV watermarks with SAGV enabled.
    Usually ends up in underruns.
    
    Cc: stable@vger.kernel.org
    Reviewed-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Fixes: 7241c57d3140 ("drm/i915: Add TGL+ SAGV support")
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220218064039.12834-2-ville.syrjala@linux.intel.com
    (cherry picked from commit 8dd8ffb824ca7b897ce9f2082ffa7e64831c22dc)
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>

commit 8dd8ffb824ca7b897ce9f2082ffa7e64831c22dc
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Feb 18 08:40:34 2022 +0200

    drm/i915: Correctly populate use_sagv_wm for all pipes
    
    When changing between SAGV vs. no SAGV on tgl+ we have to
    update the use_sagv_wm flag for all the crtcs or else
    an active pipe not already in the state will end up using
    the wrong watermarks. That is especially bad when we end up
    with the tighter non-SAGV watermarks with SAGV enabled.
    Usually ends up in underruns.
    
    Cc: stable@vger.kernel.org
    Reviewed-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Fixes: 7241c57d3140 ("drm/i915: Add TGL+ SAGV support")
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220218064039.12834-2-ville.syrjala@linux.intel.com

commit 48bb92d91ae9331138656f369e66b5cab8f0fa7e
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Feb 2 13:16:16 2022 +0200

    drm/i915: Drop pointless i830 PIPECONF read
    
    Reading the PIPECONF enable bit out from the hardware
    in i9xx_set_pipeconf() on i830 is pointless as the bit should
    always be set since we keep both pipes constantly running on
    i830. Drop the pointless read and just always keep the bit set.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220202111616.1579-4-ville.syrjala@linux.intel.com
    Reviewed-by: Juha-Pekka Heikkila <juhapekka.heikkila@gmail.com>

commit 2521b0a43db2046f3b975dbe44cf1ac2472f6206
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Feb 4 16:18:18 2022 +0200

    drm/i915: Workaround broken BIOS DBUF configuration on TGL/RKL
    
    commit 4e6f55120c7eccf6f9323bb681632e23cbcb3f3c upstream.
    
    On TGL/RKL the BIOS likes to use some kind of bogus DBUF layout
    that doesn't match what the spec recommends. With a single active
    pipe that is not going to be a problem, but with multiple pipes
    active skl_commit_modeset_enables() goes into an infinite loop
    since it can't figure out any order in which it can commit the
    pipes without causing DBUF overlaps between the planes.
    
    We'd need some kind of extra DBUF defrag stage in between to
    make the transition possible. But that is clearly way too complex
    a solution, so in the name of simplicity let's just sanitize the
    DBUF state by simply turning off all planes when we detect a
    pipe encroaching on its neighbours' DBUF slices. We only have
    to disable the primary planes as all other planes should have
    already been disabled (if they somehow were enabled) by
    earlier sanitization steps.
    
    And for good measure let's also sanitize in case the DBUF
    allocations of the pipes already seem to overlap each other.
    
    Cc: <stable@vger.kernel.org> # v5.14+
    Closes: https://gitlab.freedesktop.org/drm/intel/-/issues/4762
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220204141818.1900-3-ville.syrjala@linux.intel.com
    Reviewed-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    (cherry picked from commit 15512021eb3975a8c2366e3883337e252bb0eee5)
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a6e7a006f5d551ee0827059300148e1c9cf4f9a3
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Thu Feb 3 20:38:23 2022 +0200

    drm/i915: Change bigjoiner state tracking to use the pipe bitmask
    
    Get rid of the inflexible bigjoiner_linked_crtc pointer thing
    and just track things as a bitmask of pipes instead. We can
    also nuke the bigjoiner_slave boolean as the role of the pipe
    can be determined from its position in the bitmask.
    
    It might be possible to nuke the bigjoiner boolean as well
    if we make encoder.compute_config() do the bitmask assignment
    directly for the master pipe. But for now I left that alone so
    that encoer.compute_config() will just flag the state as needing
    bigjoiner, and the intel_atomic_check_bigjoiner() is still
    responsible for determining the bitmask. But that may have to change
    as the encoder may be in the best position to determine how
    exactly we should populate the bitmask.
    
    Most places that just looked at the single bigjoiner_linked_crtc
    now iterate over the whole bitmask, eliminating the singular
    slave pipe assumption.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220203183823.22890-11-ville.syrjala@linux.intel.com
    Reviewed-by: Manasi Navare <manasi.d.navare@intel.com>

commit 208f6265d519643f380c504ee1c1ef925f2c7d5f
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Thu Feb 3 20:38:22 2022 +0200

    drm/i915: Return both master and slave pipes from enabled_bigjoiner_pipes()
    
    Return both the master and slave pipe bitmasks from
    enabled_bigjoiner_pipes(). We'll have use for both during
    readout soon.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220203183823.22890-10-ville.syrjala@linux.intel.com
    Reviewed-by: Manasi Navare <manasi.d.navare@intel.com>

commit f461ea5d8dc425325f4c478dfcddc4de8e24fea2
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Thu Feb 3 20:38:20 2022 +0200

    drm/i915: Convert for_each_intel_crtc_mask() to take a pipe mask instead
    
    Often using pipes is more convenient than crtc indices.
    Convert the current for_each_intel_crtc_mask() to take a
    pipe mask instead of a crtc index mask, and rename it to
    for_each_intel_crtc_in_pipe_mask() to make it clear what
    it does.
    
    The current users of for_each_intel_crtc_mask() don't really
    care which kind of mask we use, but for other uses a pipe
    mask if better.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220203183823.22890-8-ville.syrjala@linux.intel.com
    Reviewed-by: Manasi Navare <manasi.d.navare@intel.com>

commit 698bef8ff5d2edea5d1c9d6e5adf1bfed1e8a106
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Feb 7 15:26:59 2022 +0200

    drm/i915: Fix dbuf slice config lookup
    
    Apparently I totally fumbled the loop condition when I
    removed the ARRAY_SIZE() stuff from the dbuf slice config
    lookup. Comparing the loop index with the active_pipes bitmask
    is utter nonsense, what we want to do is check to see if the
    mask is zero or not.
    
    Note that the code actually ended up working correctly despite
    the fumble, up until commit eef173954432 ("drm/i915: Allow
    !join_mbus cases for adlp+ dbuf configuration") when things
    broke for real.
    
    Cc: stable@vger.kernel.org
    Fixes: 05e8155afe35 ("drm/i915: Use a sentinel to terminate the dbuf slice arrays")
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220207132700.481-1-ville.syrjala@linux.intel.com
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    (cherry picked from commit a28fde308c3c1c174249ff9559b57f24e6850086)
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>

commit 415ccb58f68a6bebcbb9db373973394a6af3d553
Author: Alexey Bayduraev <alexey.v.bayduraev@linux.intel.com>
Date:   Mon Jan 17 21:34:23 2022 +0300

    perf record: Introduce thread specific data array
    
    Introduce thread specific data object and array of such objects
    to store and manage thread local data. Implement functions to
    allocate, initialize, finalize and release thread specific data.
    
    Thread local maps and overwrite_maps arrays keep pointers to
    mmap buffer objects to serve according to maps thread mask.
    Thread local pollfd array keeps event fds connected to mmaps
    buffers according to maps thread mask.
    
    Thread control commands are delivered via thread local comm pipes
    and ctlfd_pos fd. External control commands (--control option)
    are delivered via evlist ctlfd_pos fd and handled by the main
    tool thread.
    
    Reviewed-by: Riccardo Mancini <rickyman7@gmail.com>
    Signed-off-by: Alexey Bayduraev <alexey.v.bayduraev@linux.intel.com>
    Tested-by: Jiri Olsa <jolsa@kernel.org>
    Tested-by: Riccardo Mancini <rickyman7@gmail.com>
    Acked-by: Namhyung Kim <namhyung@gmail.com>
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Alexander Antonov <alexander.antonov@linux.intel.com>
    Cc: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Cc: Alexei Budankov <abudankov@huawei.com>
    Cc: Andi Kleen <ak@linux.intel.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Link: https://lore.kernel.org/r/fc9f74af6f822d9c0fa0e145c3564a760dbe3d4b.1642440724.git.alexey.v.bayduraev@linux.intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

commit a28fde308c3c1c174249ff9559b57f24e6850086
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Feb 7 15:26:59 2022 +0200

    drm/i915: Fix dbuf slice config lookup
    
    Apparently I totally fumbled the loop condition when I
    removed the ARRAY_SIZE() stuff from the dbuf slice config
    lookup. Comparing the loop index with the active_pipes bitmask
    is utter nonsense, what we want to do is check to see if the
    mask is zero or not.
    
    Note that the code actually ended up working correctly despite
    the fumble, up until commit eef173954432 ("drm/i915: Allow
    !join_mbus cases for adlp+ dbuf configuration") when things
    broke for real.
    
    Cc: stable@vger.kernel.org
    Fixes: 05e8155afe35 ("drm/i915: Use a sentinel to terminate the dbuf slice arrays")
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220207132700.481-1-ville.syrjala@linux.intel.com
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>

commit 4e6f55120c7eccf6f9323bb681632e23cbcb3f3c
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Feb 4 16:18:18 2022 +0200

    drm/i915: Workaround broken BIOS DBUF configuration on TGL/RKL
    
    On TGL/RKL the BIOS likes to use some kind of bogus DBUF layout
    that doesn't match what the spec recommends. With a single active
    pipe that is not going to be a problem, but with multiple pipes
    active skl_commit_modeset_enables() goes into an infinite loop
    since it can't figure out any order in which it can commit the
    pipes without causing DBUF overlaps between the planes.
    
    We'd need some kind of extra DBUF defrag stage in between to
    make the transition possible. But that is clearly way too complex
    a solution, so in the name of simplicity let's just sanitize the
    DBUF state by simply turning off all planes when we detect a
    pipe encroaching on its neighbours' DBUF slices. We only have
    to disable the primary planes as all other planes should have
    already been disabled (if they somehow were enabled) by
    earlier sanitization steps.
    
    And for good measure let's also sanitize in case the DBUF
    allocations of the pipes already seem to overlap each other.
    
    Cc: <stable@vger.kernel.org> # v5.14+
    Closes: https://gitlab.freedesktop.org/drm/intel/-/issues/4762
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220204141818.1900-3-ville.syrjala@linux.intel.com
    Reviewed-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    (cherry picked from commit 15512021eb3975a8c2366e3883337e252bb0eee5)
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>

commit 15512021eb3975a8c2366e3883337e252bb0eee5
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Feb 4 16:18:18 2022 +0200

    drm/i915: Workaround broken BIOS DBUF configuration on TGL/RKL
    
    On TGL/RKL the BIOS likes to use some kind of bogus DBUF layout
    that doesn't match what the spec recommends. With a single active
    pipe that is not going to be a problem, but with multiple pipes
    active skl_commit_modeset_enables() goes into an infinite loop
    since it can't figure out any order in which it can commit the
    pipes without causing DBUF overlaps between the planes.
    
    We'd need some kind of extra DBUF defrag stage in between to
    make the transition possible. But that is clearly way too complex
    a solution, so in the name of simplicity let's just sanitize the
    DBUF state by simply turning off all planes when we detect a
    pipe encroaching on its neighbours' DBUF slices. We only have
    to disable the primary planes as all other planes should have
    already been disabled (if they somehow were enabled) by
    earlier sanitization steps.
    
    And for good measure let's also sanitize in case the DBUF
    allocations of the pipes already seem to overlap each other.
    
    Cc: <stable@vger.kernel.org> # v5.14+
    Closes: https://gitlab.freedesktop.org/drm/intel/-/issues/4762
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220204141818.1900-3-ville.syrjala@linux.intel.com
    Reviewed-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>

commit 88298b87cb81311cd21304ff3e028f34fcee2b8b
Author: Bas Nieuwenhuizen <bas@basnieuwenhuizen.nl>
Date:   Mon Jan 24 01:23:35 2022 +0100

    drm/amd/display: Fix FP start/end for dcn30_internal_validate_bw.
    
    commit 72a8d87b87270bff0c0b2fed4d59c48d0dd840d7 upstream.
    
    It calls populate_dml_pipes which uses doubles to initialize the
    scale_ratio_depth params. Mirrors the dcn20 logic.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Bas Nieuwenhuizen <bas@basnieuwenhuizen.nl>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 548f20b39ec91fdd97194a84a0d9b2f68715762a
Author: Bas Nieuwenhuizen <bas@basnieuwenhuizen.nl>
Date:   Mon Jan 24 01:23:35 2022 +0100

    drm/amd/display: Fix FP start/end for dcn30_internal_validate_bw.
    
    commit 72a8d87b87270bff0c0b2fed4d59c48d0dd840d7 upstream.
    
    It calls populate_dml_pipes which uses doubles to initialize the
    scale_ratio_depth params. Mirrors the dcn20 logic.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Bas Nieuwenhuizen <bas@basnieuwenhuizen.nl>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3df6d74aedfdca919cca475d15dfdbc8b05c9e5d
Author: Kalle Valo <quic_kvalo@quicinc.com>
Date:   Thu Jan 27 11:01:17 2022 +0200

    ath11k: mhi: use mhi_sync_power_up()
    
    If amss.bin was missing ath11k would crash during 'rmmod ath11k_pci'. The
    reason for that was that we were using mhi_async_power_up() which does not
    check any errors. But mhi_sync_power_up() on the other hand does check for
    errors so let's use that to fix the crash.
    
    I was not able to find a reason why an async version was used.
    ath11k_mhi_start() (which enables state ATH11K_MHI_POWER_ON) is called from
    ath11k_hif_power_up(), which can sleep. So sync version should be safe to use
    here.
    
    [  145.569731] general protection fault, probably for non-canonical address 0xdffffc0000000000: 0000 [#1] PREEMPT SMP DEBUG_PAGEALLOC KASAN PTI
    [  145.569789] KASAN: null-ptr-deref in range [0x0000000000000000-0x0000000000000007]
    [  145.569843] CPU: 2 PID: 1628 Comm: rmmod Kdump: loaded Tainted: G        W         5.16.0-wt-ath+ #567
    [  145.569898] Hardware name: Intel(R) Client Systems NUC8i7HVK/NUC8i7HVB, BIOS HNKBLi70.86A.0067.2021.0528.1339 05/28/2021
    [  145.569956] RIP: 0010:ath11k_hal_srng_access_begin+0xb5/0x2b0 [ath11k]
    [  145.570028] Code: df 48 89 fa 48 c1 ea 03 80 3c 02 00 0f 85 ec 01 00 00 48 8b ab a8 00 00 00 48 b8 00 00 00 00 00 fc ff df 48 89 ea 48 c1 ea 03 <0f> b6 14 02 48 89 e8 83 e0 07 83 c0 03 45 85 ed 75 48 38 d0 7c 08
    [  145.570089] RSP: 0018:ffffc900025d7ac0 EFLAGS: 00010246
    [  145.570144] RAX: dffffc0000000000 RBX: ffff88814fca2dd8 RCX: 1ffffffff50cb455
    [  145.570196] RDX: 0000000000000000 RSI: ffff88814fca2dd8 RDI: ffff88814fca2e80
    [  145.570252] RBP: 0000000000000000 R08: 0000000000000000 R09: ffffffffa8659497
    [  145.570329] R10: fffffbfff50cb292 R11: 0000000000000001 R12: ffff88814fca0000
    [  145.570410] R13: 0000000000000000 R14: ffff88814fca2798 R15: ffff88814fca2dd8
    [  145.570465] FS:  00007fa399988540(0000) GS:ffff888233e00000(0000) knlGS:0000000000000000
    [  145.570519] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  145.570571] CR2: 00007fa399b51421 CR3: 0000000137898002 CR4: 00000000003706e0
    [  145.570623] Call Trace:
    [  145.570675]  <TASK>
    [  145.570727]  ? ath11k_ce_tx_process_cb+0x34b/0x860 [ath11k]
    [  145.570797]  ath11k_ce_tx_process_cb+0x356/0x860 [ath11k]
    [  145.570864]  ? tasklet_init+0x150/0x150
    [  145.570919]  ? ath11k_ce_alloc_pipes+0x280/0x280 [ath11k]
    [  145.570986]  ? tasklet_clear_sched+0x42/0xe0
    [  145.571042]  ? tasklet_kill+0xe9/0x1b0
    [  145.571095]  ? tasklet_clear_sched+0xe0/0xe0
    [  145.571148]  ? irq_has_action+0x120/0x120
    [  145.571202]  ath11k_ce_cleanup_pipes+0x45a/0x580 [ath11k]
    [  145.571270]  ? ath11k_pci_stop+0x10e/0x170 [ath11k_pci]
    [  145.571345]  ath11k_core_stop+0x8a/0xc0 [ath11k]
    [  145.571434]  ath11k_core_deinit+0x9e/0x150 [ath11k]
    [  145.571499]  ath11k_pci_remove+0xd2/0x260 [ath11k_pci]
    [  145.571553]  pci_device_remove+0x9a/0x1c0
    [  145.571605]  __device_release_driver+0x332/0x660
    [  145.571659]  driver_detach+0x1e7/0x2c0
    [  145.571712]  bus_remove_driver+0xe2/0x2d0
    [  145.571772]  pci_unregister_driver+0x21/0x250
    [  145.571826]  __do_sys_delete_module+0x30a/0x4b0
    [  145.571879]  ? free_module+0xac0/0xac0
    [  145.571933]  ? lockdep_hardirqs_on_prepare.part.0+0x18c/0x370
    [  145.571986]  ? syscall_enter_from_user_mode+0x1d/0x50
    [  145.572039]  ? lockdep_hardirqs_on+0x79/0x100
    [  145.572097]  do_syscall_64+0x3b/0x90
    [  145.572153]  entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Tested-on: WCN6855 hw2.0 PCI WLAN.HSP.1.1-03003-QCAHSPSWPL_V1_V2_SILICONZ_LITE-2
    
    Signed-off-by: Kalle Valo <quic_kvalo@quicinc.com>
    Link: https://lore.kernel.org/r/20220127090117.2024-2-kvalo@kernel.org

commit 94ca070cd3737dd5c3b98f615bd4cc950f82a597
Author: Bas Nieuwenhuizen <bas@basnieuwenhuizen.nl>
Date:   Mon Jan 24 01:23:35 2022 +0100

    drm/amd/display: Fix FP start/end for dcn30_internal_validate_bw.
    
    It calls populate_dml_pipes which uses doubles to initialize the
    scale_ratio_depth params. Mirrors the dcn20 logic.
    
    Signed-off-by: Bas Nieuwenhuizen <bas@basnieuwenhuizen.nl>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 72a8d87b87270bff0c0b2fed4d59c48d0dd840d7
Author: Bas Nieuwenhuizen <bas@basnieuwenhuizen.nl>
Date:   Mon Jan 24 01:23:35 2022 +0100

    drm/amd/display: Fix FP start/end for dcn30_internal_validate_bw.
    
    It calls populate_dml_pipes which uses doubles to initialize the
    scale_ratio_depth params. Mirrors the dcn20 logic.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Bas Nieuwenhuizen <bas@basnieuwenhuizen.nl>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 771ced73fccd0ac19bb956eaacce3669cfccc805
Author: Yi-Ling Chen <Yi-Ling.Chen2@amd.com>
Date:   Mon Dec 13 16:13:26 2021 +0800

    drm/amd/display: Fix underflow for fused display pipes case
    
    [Why]
    Depend on res_pool->res_cap->num_timing_generator to query timing
    gernerator information, it would case underflow at the fused display
    pipes case.
    Due to the res_pool->res_cap->num_timing_generator records default
    timing generator resource built in driver, not the current chip.
    
    [How]
    Some ASICs would be fused display pipes less than the default setting.
    In dcnxx_resource_construct function, driver would obatin real timing
    generator count and store it into res_pool->timing_generator_count.
    
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Reviewed-by: Anthony Koo <Anthony.Koo@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Yi-Ling Chen <Yi-Ling.Chen2@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit b477143566d5b16c8b92ffec2cb3a896fe818509
Author: Eric Bernstein <eric.bernstein@amd.com>
Date:   Fri Dec 10 15:04:06 2021 -0800

    drm/amd/display: ODM + MPO window on only one half of ODM
    
    [Why]
    For ODM + MPO window on one half of ODM, only 3 pipes should
    be allocated and scaling parameters adjusted to handle this case
    
    [How]
    Fix pipe allocation when MPO viewport is only on one side of ODM
    split, and modify scaling paramters.
    Added diags test cases for ODM + windows MPO, where MPO window is
    on right half, left half, and both halves or ODM.
    
    Reviewed-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Acked-by: Pavle Kotarac <Pavle.Kotarac@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Eric Bernstein <eric.bernstein@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit d4a23930490df39fd076a82649ddba6b3a6c8216
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Nov 19 15:13:48 2021 +0200

    drm/i915: Allow cdclk squasher to be reconfigured live
    
    Supposedly we should be able to change the cdclk squasher waveform
    even when many pipes are active. Make it so.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Mika Kahola <mika.kahola@intel.com>
    Signed-off-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20211119131348.725220-6-mika.kahola@intel.com

commit 8fa6f4c5715cee5dfc04f98780a15eb6d1da5be8
Author: Yi-Ling Chen <Yi-Ling.Chen2@amd.com>
Date:   Fri Nov 5 15:43:25 2021 +0800

    drm/amd/display: fixed the DSC power off sequence during Driver PnP
    
    [WHY]
    After unloading driver, driver would not disable DSC function.
    At next loading driver, driver would power all DSC engines off.
    When driver powered the active DSC off, the screen would be gray
    until reprograming DSC relatived register correcntly.
    
    [HOW]
    1. Remove DSC Power down code into init_pipes()
    2. Depend on  the OTG mapping information and DSC status to skip
    power off for the working DSC.
    
    Reviewed-by: Anthony Koo <Anthony.Koo@amd.com>
    Acked-by: Wayne Lin <wayne.lin@amd.com>
    Signed-off-by: Yi-Ling Chen <Yi-Ling.Chen2@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit c68dac968c460b89a4f6e3617ee5defbcd96eead
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Nov 5 23:21:56 2021 +0200

    drm/i915: Call intel_update_active_dpll() for both bigjoiner pipes
    
    Currently we're only calling intel_update_active_dpll() for the
    bigjoiner master pipe but not for the slave. With TC ports this
    leads to the two pipes end up trying to use different PLLs
    (TC vs. TBT). What's worse we're enabling the PLL that didn't get
    intel_update_active_dpll() called on it at the spot where we
    need the clocks turned on. So we turn on the wrong PLL and the
    DDI is now trying to source its clock from the other PLL which is
    still disabled. Naturally that doesn't end so well and the DDI
    fails to start up.
    
    The state checker also gets a bit unhappy (which is a good thing)
    when it notices that one of the pipes was using the wrong PLL.
    
    Let's fix this by remembering to call intel_update_active_dpll()
    for both pipes. That should get the correct PLL turned on when
    we need it, and the state checker should also be happy.
    
    Cc: Imre Deak <imre.deak@intel.com>
    Cc: Manasi Navare <manasi.d.navare@intel.com>
    Closes: https://gitlab.freedesktop.org/drm/intel/-/issues/4434
    Fixes: e12d6218fda2 ("drm/i915: Reduce bigjoiner special casing")
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20211105212156.5697-1-ville.syrjala@linux.intel.com
    Reviewed-by: Imre Deak <imre.deak@intel.com>

commit 115e0f687d29649b8805e3417e089e785b0ea61d
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Thu Oct 21 01:33:39 2021 +0300

    drm/i915: Use unlocked register accesses for LUT loads
    
    We have to bash in a lot of registers to load the higher
    precision LUT modes. The locking overhead is significant, especially
    as we have to get this done as quickly as possible during vblank.
    So let's switch to unlocked accesses for these. Fortunately the LUT
    registers are mostly spread around such that two pipes do not have
    any registers on the same cacheline. So as long as commits on the
    same pipe are serialized (which they are) we should get away with
    this without angering the hardware.
    
    The only exceptions are the PREC_PIPEGCMAX registers on ilk/snb which
    we don't use atm as they are only used in the 12bit gamma mode. If/when
    we add support for that we may need to remember to still serialize
    those registers, though I'm not sure ilk/snb are actually affected
    by the same cacheline issue. I think ivb/hsw at least were, but they
    use a different set of registers for the precision LUT.
    
    I have a test case which is updating the LUTs on two pipes from a
    single atomic commit. Running that in a loop for a minute I get the
    following worst case with the locks in place:
     intel_crtc_vblank_work_start: pipe B, frame=10037, scanline=1081
     intel_crtc_vblank_work_start: pipe A, frame=12274, scanline=769
     intel_crtc_vblank_work_end: pipe A, frame=12274, scanline=58
     intel_crtc_vblank_work_end: pipe B, frame=10037, scanline=74
    
    And here's the worst case with the locks removed:
     intel_crtc_vblank_work_start: pipe B, frame=5869, scanline=1081
     intel_crtc_vblank_work_start: pipe A, frame=7616, scanline=769
     intel_crtc_vblank_work_end: pipe B, frame=5869, scanline=1096
     intel_crtc_vblank_work_end: pipe A, frame=7616, scanline=777
    
    The test was done on a snb using the 10bit 1024 entry LUT mode.
    The vtotals for the two displays are 793 and 1125. So we can
    see that with the locks ripped out the LUT updates are pretty
    nicely confined within the vblank, whereas with the locks in
    place we're routinely blasting past the vblank end which causes
    visual artifacts near the top of the screen.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20211020223339.669-5-ville.syrjala@linux.intel.com
    Reviewed-by: Uma Shankar <uma.shankar@intel.com>

commit 2bbc6fcaf8c58a7a59900512be11b1775a611381
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Thu Oct 21 01:33:38 2021 +0300

    drm/i915: Use vblank workers for gamma updates
    
    The pipe gamma registers are single buffered so they should only
    be updated during the vblank to avoid screen tearing. In fact they
    really should only be updated between start of vblank and frame
    start because that is the only time the pipe is guaranteed to be
    empty. Already at frame start the pipe begins to fill up with
    data for the next frame.
    
    Unfortunately frame start happens ~1 scanline after the start
    of vblank which in practice doesn't always leave us enough time to
    finish the gamma update in time (gamma LUTs can be several KiB of
    data we have to bash into the registers). However we must try our
    best and so we'll add a vblank work for each pipe from where we
    can do the gamma update. Additionally we could consider pushing
    frame start forward to the max of ~4 scanlines after start of
    vblank. But not sure that's exactly a validated configuration.
    As it stands the ~100 first pixels tend to make it through with
    the old gamma values.
    
    Even though the vblank worker is running on a high prority thread
    we still have to contend with C-states. If the CPU happens be in
    a deep C-state when the vblank interrupt arrives even the irq
    handler gets delayed massively (I've observed dozens of scanlines
    worth of latency). To avoid that problem we'll use the qos mechanism
    to keep the CPU awake while the vblank work is scheduled.
    
    With all this hooked up we can finally enjoy near atomic gamma
    updates. It even works across several pipes from the same atomic
    commit which previously was a total fail because we did the
    gamma updates for each pipe serially after waiting for all
    pipes to have latched the double buffered registers.
    
    In the future the DSB should take over this responsibility
    which will hopefully avoid some of these issues.
    
    Kudos to Lyude for finishing the actual vblank workers.
    Works like the proverbial train toilet.
    
    v2: Add missing intel_atomic_state fwd declaration
    v3: Clean up properly when not scheduling the worker
    v4: Clean up the rest and add tracepoints
    v5: s/intel_wait_for_vblank_works/intel_wait_for_vblank_workers/ (Jani,Uma)
    
    CC: Lyude Paul <lyude@redhat.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20211020223339.669-4-ville.syrjala@linux.intel.com
    Reviewed-by: Uma Shankar <uma.shankar@intel.com>

commit 0b55313cbdd3cf9095774dff8782a79a4a6b599f
Author: Roman Li <Roman.Li@amd.com>
Date:   Tue Oct 19 16:44:21 2021 -0400

    drm/amd/display: Force disable planes on any pipe split change
    
    [Why]
    In scenario when 1 display connected with pipe split (2 pipes in use)
    and 3 new displays simultaneously hotplugged via MST hub (4 pipes in use),
    mpcc may get reprogram to other vtg, remaining busy.
    In this case waiting for mpcc idle timeouts with error like this:
    [drm] REG_WAIT timeout 1us * 100000 tries - mpc2_assert_idle_mpcc
    RIP: 0010:mpc2_assert_mpcc_idle_before_connect
    Call Trace:
    dcn20_update_mpcc
    dcn20_program_front_end_for_ctx
    dc_commit_state
    amdgpu_dm_atomic_commit_tail
    ...
    
    [How]
    Add pipe split change condition to disable dangling plane.
    
    Acked-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Signed-off-by: Roman Li <Roman.Li@amd.com>
    Reviewed-by: Nicholas Kazlauskas <Nicholas.Kazlauskas@amd.com>
    Reviewed-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit e12d6218fda20d03960f3f2cca44741ba8d5e9a8
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Oct 22 13:33:03 2021 +0300

    drm/i915: Reduce bigjoiner special casing
    
    Try to make bigjoiner pipes less special.
    
    The main things here are that each pipe now does full
    clock computation/readout with its own shared_dpll reference.
    Also every pipe's cpu_transcoder always points correctly
    at the master transcoder.
    
    Due to the above changes state readout is now complete
    and all the related hacks can go away. The actual modeset
    sequence code is still a mess, but I think in order to clean
    that up properly we're probably going to have to redesign
    the modeset logic to treat transcoders vs. pipes separately.
    That is going to require significant amounts of work.
    
    Reviewed-by: Manasi Navare <manasi.d.navare@intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20211022103304.24164-9-ville.syrjala@linux.intel.com

commit 723559f379af5cd200bc981a723aaf3971f7a166
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Oct 22 13:33:02 2021 +0300

    drm/i915: Perform correct cpu_transcoder readout for bigjoiner
    
    Read out cpu_transcoder correctly for the bigjoiner slave pipes.
    
    Reviewed-by: Manasi Navare <manasi.d.navare@intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20211022103304.24164-8-ville.syrjala@linux.intel.com

commit 3126977d43079866aa0ea351863a7496feec98d2
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Oct 22 13:33:01 2021 +0300

    drm/i915: Split PPS write from DSC enable
    
    The PPS SDP is fed into the transcoder whereas the DSC
    block is (or at least can be) per pipe. Let's split these
    into two distinct operations in an effort to untagle the
    bigjoiner mess where we have two pipes feeding a single
    transcoder.
    
    Reviewed-by: Manasi Navare <manasi.d.navare@intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20211022103304.24164-7-ville.syrjala@linux.intel.com

commit 39919997322f21d367347943ffd5ba8c4007c9ae
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Oct 22 13:32:58 2021 +0300

    drm/i915: Disable all planes before modesetting any pipes
    
    Let's disable planes on all pipes affected by the modeset before
    we start doing the actual modeset. This means we have less
    random planes enabled during the modeset, and it also mirrors
    what we already do when enabling pipes on skl+ since we enable
    planes on all pipes as the very last step. As a bonus we also
    nuke a bunch og bigjoiner special casing.
    
    I've occasionally pondered about going even furher here and
    doing the pre_plane_update() stuff for all pipes first, then
    actually disabling the planes, and finally running the rest
    of the modeset sequence. This would potentially allow
    parallelizing all the extra vblank waits across multiple pipes,
    and would make the plane disable even more atomic. But let's
    go one step a time here.
    
    Cc: José Roberto de Souza <jose.souza@intel.com>
    Reviewed-by: Manasi Navare <manasi.d.navare@intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20211022103304.24164-4-ville.syrjala@linux.intel.com
    Reviewed-by: José Roberto de Souza <jose.souza@intel.com>

commit d1bfbe8a3202640c28a5769faff49b732af2438b
Author: Simon Ser <contact@emersion.fr>
Date:   Wed Oct 6 14:06:05 2021 +0000

    amd/display: check cursor plane matches underlying plane
    
    The current logic checks whether the cursor plane blending
    properties match the primary plane's. However that's wrong,
    because the cursor is painted on all planes underneath. If
    the cursor is over the primary plane and the overlay plane,
    it's painted on both pipes.
    
    Iterate over the CRTC planes and check their scaling match
    the cursor's.
    
    v4: fix typo in commit message (Harry)
    
    Signed-off-by: Simon Ser <contact@emersion.fr>
    Cc: Alex Deucher <alexander.deucher@amd.com>
    Cc: Harry Wentland <hwentlan@amd.com>
    Cc: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Cc: Bas Nieuwenhuizen <bas@basnieuwenhuizen.nl>
    Cc: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Cc: Sean Paul <seanpaul@chromium.org>
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 6483a8cbea54854dfa8fa0e9c9673e564bc0b971
Author: Dikshita Agarwal <dikshita@codeaurora.org>
Date:   Tue Aug 10 11:47:53 2021 +0200

    media: venus: vdec: set work route to fw
    
    Set work route to FW based on num of vpp pipes.
    
    Signed-off-by: Dikshita Agarwal <dikshita@codeaurora.org>
    Signed-off-by: Stanimir Varbanov <stanimir.varbanov@linaro.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 920173c7cfc0aa70787aeecf737cb93f11eedb6d
Author: Dikshita Agarwal <dikshita@codeaurora.org>
Date:   Tue Aug 10 11:47:51 2021 +0200

    media: venus: Add num_vpp_pipes to resource structure
    
    V6 HW can have vpp pipes as 1 or 4, add num_vpp_pipes
    to resource struture to differentiate.
    
    Signed-off-by: Dikshita Agarwal <dikshita@codeaurora.org>
    Signed-off-by: Stanimir Varbanov <stanimir.varbanov@linaro.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 575279059e26b27aababbb7edae2f0f19205779d
Author: Robert Foss <robert.foss@linaro.org>
Date:   Thu Dec 17 15:09:33 2020 +0100

    drm/bridge: lt9611: Fix handling of 4k panels
    
    commit d1a97648ae028a44536927c87837c45ada7141c9 upstream.
    
    4k requires two dsi pipes, so don't report MODE_OK when only a
    single pipe is configured. But rather report MODE_PANEL to
    signal that requirements of the panel are not being met.
    
    Reported-by: Peter Collingbourne <pcc@google.com>
    Suggested-by: Peter Collingbourne <pcc@google.com>
    Signed-off-by: Robert Foss <robert.foss@linaro.org>
    Tested-by: John Stultz <john.stultz@linaro.org>
    Tested-by: Anibal Limon <anibal.limon@linaro.org>
    Tested-by: Peter Collingbourne <pcc@google.com>
    Reviewed-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Acked-by: Vinod Koul <vkoul@kernel.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20201217140933.1133969-1-robert.foss@linaro.org
    Cc: Peter Collingbourne <pcc@google.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8c66081b0b32a5fca6791ee09ccf0e6ef35acce4
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Sep 13 17:44:29 2021 +0300

    drm/i915: s/pipe/transcoder/ when dealing with PIPECONF/TRANSCONF
    
    PIPECONF becamse TRANSCONF when HSW introduced the EDP transcoder.
    Bigjoiner is making life even more confusing by introducing
    a N:1 relationship between pipes and transcoders. In that case
    we only enable/configure the transcoder corresponding to the
    master pipe. Let's do some renames to make it clear we're dealing
    with the transcoder rather than pipe when it comes to
    PIPECONF/TRANSCONF.
    
    I decided to leave the _cpu_ part out from the function/macro
    names since the PCH transcoder related stuff already has a
    _pch_ in their name. So shouldn't be possible to confuse them.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210913144440.23008-6-ville.syrjala@linux.intel.com
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>

commit 4abb1d77321ae43f9d22e50521c05039212ad65c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Aug 5 10:04:43 2021 -0700

    pipe: avoid unnecessary EPOLLET wakeups under normal loads
    
    commit 3b844826b6c6affa80755254da322b017358a2f4 upstream.
    
    I had forgotten just how sensitive hackbench is to extra pipe wakeups,
    and commit 3a34b13a88ca ("pipe: make pipe writes always wake up
    readers") ended up causing a quite noticeable regression on larger
    machines.
    
    Now, hackbench isn't necessarily a hugely meaningful benchmark, and it's
    not clear that this matters in real life all that much, but as Mel
    points out, it's used often enough when comparing kernels and so the
    performance regression shows up like a sore thumb.
    
    It's easy enough to fix at least for the common cases where pipes are
    used purely for data transfer, and you never have any exciting poll
    usage at all.  So set a special 'poll_usage' flag when there is polling
    activity, and make the ugly "EPOLLET has crazy legacy expectations"
    semantics explicit to only that case.
    
    I would love to limit it to just the broken EPOLLET case, but the pipe
    code can't see the difference between epoll and regular select/poll, so
    any non-read/write waiting will trigger the extra wakeup behavior.  That
    is sufficient for at least the hackbench case.
    
    Apart from making the odd extra wakeup cases more explicitly about
    EPOLLET, this also makes the extra wakeup be at the _end_ of the pipe
    write, not at the first write chunk.  That is actually much saner
    semantics (as much as you can call any of the legacy edge-triggered
    expectations for EPOLLET "sane") since it means that you know the wakeup
    will happen once the write is done, rather than possibly in the middle
    of one.
    
    [ For stable people: I'm putting a "Fixes" tag on this, but I leave it
      up to you to decide whether you actually want to backport it or not.
      It likely has no impact outside of synthetic benchmarks  - Linus ]
    
    Link: https://lore.kernel.org/lkml/20210802024945.GA8372@xsang-OptiPlex-9020/
    Fixes: 3a34b13a88ca ("pipe: make pipe writes always wake up readers")
    Reported-by: kernel test robot <oliver.sang@intel.com>
    Tested-by: Sandeep Patil <sspatil@android.com>
    Tested-by: Mel Gorman <mgorman@techsingularity.net>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e91da23c1be16ebcfca0991976ed9377a8233935
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Aug 5 10:04:43 2021 -0700

    pipe: avoid unnecessary EPOLLET wakeups under normal loads
    
    commit 3b844826b6c6affa80755254da322b017358a2f4 upstream.
    
    I had forgotten just how sensitive hackbench is to extra pipe wakeups,
    and commit 3a34b13a88ca ("pipe: make pipe writes always wake up
    readers") ended up causing a quite noticeable regression on larger
    machines.
    
    Now, hackbench isn't necessarily a hugely meaningful benchmark, and it's
    not clear that this matters in real life all that much, but as Mel
    points out, it's used often enough when comparing kernels and so the
    performance regression shows up like a sore thumb.
    
    It's easy enough to fix at least for the common cases where pipes are
    used purely for data transfer, and you never have any exciting poll
    usage at all.  So set a special 'poll_usage' flag when there is polling
    activity, and make the ugly "EPOLLET has crazy legacy expectations"
    semantics explicit to only that case.
    
    I would love to limit it to just the broken EPOLLET case, but the pipe
    code can't see the difference between epoll and regular select/poll, so
    any non-read/write waiting will trigger the extra wakeup behavior.  That
    is sufficient for at least the hackbench case.
    
    Apart from making the odd extra wakeup cases more explicitly about
    EPOLLET, this also makes the extra wakeup be at the _end_ of the pipe
    write, not at the first write chunk.  That is actually much saner
    semantics (as much as you can call any of the legacy edge-triggered
    expectations for EPOLLET "sane") since it means that you know the wakeup
    will happen once the write is done, rather than possibly in the middle
    of one.
    
    [ For stable people: I'm putting a "Fixes" tag on this, but I leave it
      up to you to decide whether you actually want to backport it or not.
      It likely has no impact outside of synthetic benchmarks  - Linus ]
    
    Link: https://lore.kernel.org/lkml/20210802024945.GA8372@xsang-OptiPlex-9020/
    Fixes: 3a34b13a88ca ("pipe: make pipe writes always wake up readers")
    Reported-by: kernel test robot <oliver.sang@intel.com>
    Tested-by: Sandeep Patil <sspatil@android.com>
    Tested-by: Mel Gorman <mgorman@techsingularity.net>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fa3217c4948700d0d4e85c5fad41fe27d663a507
Author: Jani Nikula <jani.nikula@intel.com>
Date:   Thu Aug 26 17:18:30 2021 +0300

    drm/i915: remove unused i915->active_pipes
    
    Apparently the last reader of i915->active_pipes was removed with commit
    ef79d62b5ce5 ("drm/i915: Encapsulate dbuf state handling harder"), and
    now it's only ever written to. Remove it completely.
    
    Cc: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210826141830.889-1-jani.nikula@intel.com

commit 5b14c1f16e2d11b093ccc7c74aabed8199d05cda
Author: Bing Guo <bing.guo@amd.com>
Date:   Mon Jul 19 18:24:06 2021 -0400

    drm/amd/display: Fix Dynamic bpp issue with 8K30 with Navi 1X
    
    [ Upstream commit 06050a0f01dbac2ca33145ef19a72041206ea983 ]
    
    Why:
    In DCN2x, HW doesn't automatically divide MASTER_UPDATE_LOCK_DB_X
    by the number of pipes ODM Combined.
    
    How:
    Set MASTER_UPDATE_LOCK_DB_X to the value that is adjusted by the
    number of pipes ODM Combined.
    
    Reviewed-by: Martin Leung <martin.leung@amd.com>
    Acked-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Signed-off-by: Bing Guo <bing.guo@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dcc8c5fb8d8595f5061c7b000ca1d16449a5e865
Author: Bing Guo <bing.guo@amd.com>
Date:   Mon Jul 19 18:24:06 2021 -0400

    drm/amd/display: Fix Dynamic bpp issue with 8K30 with Navi 1X
    
    [ Upstream commit 06050a0f01dbac2ca33145ef19a72041206ea983 ]
    
    Why:
    In DCN2x, HW doesn't automatically divide MASTER_UPDATE_LOCK_DB_X
    by the number of pipes ODM Combined.
    
    How:
    Set MASTER_UPDATE_LOCK_DB_X to the value that is adjusted by the
    number of pipes ODM Combined.
    
    Reviewed-by: Martin Leung <martin.leung@amd.com>
    Acked-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Signed-off-by: Bing Guo <bing.guo@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a4ebe05cd99e741a2ec7d166f64dcd54a611531f
Author: Bing Guo <bing.guo@amd.com>
Date:   Mon Jul 19 18:24:06 2021 -0400

    drm/amd/display: Fix Dynamic bpp issue with 8K30 with Navi 1X
    
    [ Upstream commit 06050a0f01dbac2ca33145ef19a72041206ea983 ]
    
    Why:
    In DCN2x, HW doesn't automatically divide MASTER_UPDATE_LOCK_DB_X
    by the number of pipes ODM Combined.
    
    How:
    Set MASTER_UPDATE_LOCK_DB_X to the value that is adjusted by the
    number of pipes ODM Combined.
    
    Reviewed-by: Martin Leung <martin.leung@amd.com>
    Acked-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Signed-off-by: Bing Guo <bing.guo@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3b844826b6c6affa80755254da322b017358a2f4
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Aug 5 10:04:43 2021 -0700

    pipe: avoid unnecessary EPOLLET wakeups under normal loads
    
    I had forgotten just how sensitive hackbench is to extra pipe wakeups,
    and commit 3a34b13a88ca ("pipe: make pipe writes always wake up
    readers") ended up causing a quite noticeable regression on larger
    machines.
    
    Now, hackbench isn't necessarily a hugely meaningful benchmark, and it's
    not clear that this matters in real life all that much, but as Mel
    points out, it's used often enough when comparing kernels and so the
    performance regression shows up like a sore thumb.
    
    It's easy enough to fix at least for the common cases where pipes are
    used purely for data transfer, and you never have any exciting poll
    usage at all.  So set a special 'poll_usage' flag when there is polling
    activity, and make the ugly "EPOLLET has crazy legacy expectations"
    semantics explicit to only that case.
    
    I would love to limit it to just the broken EPOLLET case, but the pipe
    code can't see the difference between epoll and regular select/poll, so
    any non-read/write waiting will trigger the extra wakeup behavior.  That
    is sufficient for at least the hackbench case.
    
    Apart from making the odd extra wakeup cases more explicitly about
    EPOLLET, this also makes the extra wakeup be at the _end_ of the pipe
    write, not at the first write chunk.  That is actually much saner
    semantics (as much as you can call any of the legacy edge-triggered
    expectations for EPOLLET "sane") since it means that you know the wakeup
    will happen once the write is done, rather than possibly in the middle
    of one.
    
    [ For stable people: I'm putting a "Fixes" tag on this, but I leave it
      up to you to decide whether you actually want to backport it or not.
      It likely has no impact outside of synthetic benchmarks  - Linus ]
    
    Link: https://lore.kernel.org/lkml/20210802024945.GA8372@xsang-OptiPlex-9020/
    Fixes: 3a34b13a88ca ("pipe: make pipe writes always wake up readers")
    Reported-by: kernel test robot <oliver.sang@intel.com>
    Tested-by: Sandeep Patil <sspatil@android.com>
    Tested-by: Mel Gorman <mgorman@techsingularity.net>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit d346d23d68ed0adcbddb23e8342aaa5c470b929a
Author: Alex Xu (Hello71) <alex_y_xu@yahoo.ca>
Date:   Thu Aug 5 10:40:47 2021 -0400

    pipe: increase minimum default pipe size to 2 pages
    
    commit 46c4c9d1beb7f5b4cec4dd90e7728720583ee348 upstream.
    
    This program always prints 4096 and hangs before the patch, and always
    prints 8192 and exits successfully after:
    
      int main()
      {
          int pipefd[2];
          for (int i = 0; i < 1025; i++)
              if (pipe(pipefd) == -1)
                  return 1;
          size_t bufsz = fcntl(pipefd[1], F_GETPIPE_SZ);
          printf("%zd\n", bufsz);
          char *buf = calloc(bufsz, 1);
          write(pipefd[1], buf, bufsz);
          read(pipefd[0], buf, bufsz-1);
          write(pipefd[1], buf, 1);
      }
    
    Note that you may need to increase your RLIMIT_NOFILE before running the
    program.
    
    Fixes: 759c01142a ("pipe: limit the per-user amount of pages allocated in pipes")
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/lkml/1628086770.5rn8p04n6j.none@localhost/
    Link: https://lore.kernel.org/lkml/1628127094.lxxn016tj7.none@localhost/
    Signed-off-by: Alex Xu (Hello71) <alex_y_xu@yahoo.ca>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2112e5d148424605c115890e2da8e0c6b9648590
Author: Alex Xu (Hello71) <alex_y_xu@yahoo.ca>
Date:   Thu Aug 5 10:40:47 2021 -0400

    pipe: increase minimum default pipe size to 2 pages
    
    commit 46c4c9d1beb7f5b4cec4dd90e7728720583ee348 upstream.
    
    This program always prints 4096 and hangs before the patch, and always
    prints 8192 and exits successfully after:
    
      int main()
      {
          int pipefd[2];
          for (int i = 0; i < 1025; i++)
              if (pipe(pipefd) == -1)
                  return 1;
          size_t bufsz = fcntl(pipefd[1], F_GETPIPE_SZ);
          printf("%zd\n", bufsz);
          char *buf = calloc(bufsz, 1);
          write(pipefd[1], buf, bufsz);
          read(pipefd[0], buf, bufsz-1);
          write(pipefd[1], buf, 1);
      }
    
    Note that you may need to increase your RLIMIT_NOFILE before running the
    program.
    
    Fixes: 759c01142a ("pipe: limit the per-user amount of pages allocated in pipes")
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/lkml/1628086770.5rn8p04n6j.none@localhost/
    Link: https://lore.kernel.org/lkml/1628127094.lxxn016tj7.none@localhost/
    Signed-off-by: Alex Xu (Hello71) <alex_y_xu@yahoo.ca>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7392701d8615e923cc7ce55cd10e7155189a0062
Author: Alex Xu (Hello71) <alex_y_xu@yahoo.ca>
Date:   Thu Aug 5 10:40:47 2021 -0400

    pipe: increase minimum default pipe size to 2 pages
    
    commit 46c4c9d1beb7f5b4cec4dd90e7728720583ee348 upstream.
    
    This program always prints 4096 and hangs before the patch, and always
    prints 8192 and exits successfully after:
    
      int main()
      {
          int pipefd[2];
          for (int i = 0; i < 1025; i++)
              if (pipe(pipefd) == -1)
                  return 1;
          size_t bufsz = fcntl(pipefd[1], F_GETPIPE_SZ);
          printf("%zd\n", bufsz);
          char *buf = calloc(bufsz, 1);
          write(pipefd[1], buf, bufsz);
          read(pipefd[0], buf, bufsz-1);
          write(pipefd[1], buf, 1);
      }
    
    Note that you may need to increase your RLIMIT_NOFILE before running the
    program.
    
    Fixes: 759c01142a ("pipe: limit the per-user amount of pages allocated in pipes")
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/lkml/1628086770.5rn8p04n6j.none@localhost/
    Link: https://lore.kernel.org/lkml/1628127094.lxxn016tj7.none@localhost/
    Signed-off-by: Alex Xu (Hello71) <alex_y_xu@yahoo.ca>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e745e3033999138b024dfb3cf4093c5d272e5312
Author: Alex Xu (Hello71) <alex_y_xu@yahoo.ca>
Date:   Thu Aug 5 10:40:47 2021 -0400

    pipe: increase minimum default pipe size to 2 pages
    
    commit 46c4c9d1beb7f5b4cec4dd90e7728720583ee348 upstream.
    
    This program always prints 4096 and hangs before the patch, and always
    prints 8192 and exits successfully after:
    
      int main()
      {
          int pipefd[2];
          for (int i = 0; i < 1025; i++)
              if (pipe(pipefd) == -1)
                  return 1;
          size_t bufsz = fcntl(pipefd[1], F_GETPIPE_SZ);
          printf("%zd\n", bufsz);
          char *buf = calloc(bufsz, 1);
          write(pipefd[1], buf, bufsz);
          read(pipefd[0], buf, bufsz-1);
          write(pipefd[1], buf, 1);
      }
    
    Note that you may need to increase your RLIMIT_NOFILE before running the
    program.
    
    Fixes: 759c01142a ("pipe: limit the per-user amount of pages allocated in pipes")
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/lkml/1628086770.5rn8p04n6j.none@localhost/
    Link: https://lore.kernel.org/lkml/1628127094.lxxn016tj7.none@localhost/
    Signed-off-by: Alex Xu (Hello71) <alex_y_xu@yahoo.ca>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6b5a3d2c2b89de999eaed8f81f54181734375966
Author: Alex Xu (Hello71) <alex_y_xu@yahoo.ca>
Date:   Thu Aug 5 10:40:47 2021 -0400

    pipe: increase minimum default pipe size to 2 pages
    
    commit 46c4c9d1beb7f5b4cec4dd90e7728720583ee348 upstream.
    
    This program always prints 4096 and hangs before the patch, and always
    prints 8192 and exits successfully after:
    
      int main()
      {
          int pipefd[2];
          for (int i = 0; i < 1025; i++)
              if (pipe(pipefd) == -1)
                  return 1;
          size_t bufsz = fcntl(pipefd[1], F_GETPIPE_SZ);
          printf("%zd\n", bufsz);
          char *buf = calloc(bufsz, 1);
          write(pipefd[1], buf, bufsz);
          read(pipefd[0], buf, bufsz-1);
          write(pipefd[1], buf, 1);
      }
    
    Note that you may need to increase your RLIMIT_NOFILE before running the
    program.
    
    Fixes: 759c01142a ("pipe: limit the per-user amount of pages allocated in pipes")
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/lkml/1628086770.5rn8p04n6j.none@localhost/
    Link: https://lore.kernel.org/lkml/1628127094.lxxn016tj7.none@localhost/
    Signed-off-by: Alex Xu (Hello71) <alex_y_xu@yahoo.ca>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac23a17381279ebd7070b31518a20a765f10f4b4
Author: Alex Xu (Hello71) <alex_y_xu@yahoo.ca>
Date:   Thu Aug 5 10:40:47 2021 -0400

    pipe: increase minimum default pipe size to 2 pages
    
    commit 46c4c9d1beb7f5b4cec4dd90e7728720583ee348 upstream.
    
    This program always prints 4096 and hangs before the patch, and always
    prints 8192 and exits successfully after:
    
      int main()
      {
          int pipefd[2];
          for (int i = 0; i < 1025; i++)
              if (pipe(pipefd) == -1)
                  return 1;
          size_t bufsz = fcntl(pipefd[1], F_GETPIPE_SZ);
          printf("%zd\n", bufsz);
          char *buf = calloc(bufsz, 1);
          write(pipefd[1], buf, bufsz);
          read(pipefd[0], buf, bufsz-1);
          write(pipefd[1], buf, 1);
      }
    
    Note that you may need to increase your RLIMIT_NOFILE before running the
    program.
    
    Fixes: 759c01142a ("pipe: limit the per-user amount of pages allocated in pipes")
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/lkml/1628086770.5rn8p04n6j.none@localhost/
    Link: https://lore.kernel.org/lkml/1628127094.lxxn016tj7.none@localhost/
    Signed-off-by: Alex Xu (Hello71) <alex_y_xu@yahoo.ca>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 76ccb26c5312760113b2b3ef6de307474e8d4b45
Author: Alex Xu (Hello71) <alex_y_xu@yahoo.ca>
Date:   Thu Aug 5 10:40:47 2021 -0400

    pipe: increase minimum default pipe size to 2 pages
    
    commit 46c4c9d1beb7f5b4cec4dd90e7728720583ee348 upstream.
    
    This program always prints 4096 and hangs before the patch, and always
    prints 8192 and exits successfully after:
    
      int main()
      {
          int pipefd[2];
          for (int i = 0; i < 1025; i++)
              if (pipe(pipefd) == -1)
                  return 1;
          size_t bufsz = fcntl(pipefd[1], F_GETPIPE_SZ);
          printf("%zd\n", bufsz);
          char *buf = calloc(bufsz, 1);
          write(pipefd[1], buf, bufsz);
          read(pipefd[0], buf, bufsz-1);
          write(pipefd[1], buf, 1);
      }
    
    Note that you may need to increase your RLIMIT_NOFILE before running the
    program.
    
    Fixes: 759c01142a ("pipe: limit the per-user amount of pages allocated in pipes")
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/lkml/1628086770.5rn8p04n6j.none@localhost/
    Link: https://lore.kernel.org/lkml/1628127094.lxxn016tj7.none@localhost/
    Signed-off-by: Alex Xu (Hello71) <alex_y_xu@yahoo.ca>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a453d2fa4b23fb66e2d786a008415e860263cd4f
Author: Bing Guo <bing.guo@amd.com>
Date:   Mon Jul 19 18:24:06 2021 -0400

    drm/amd/display: Fix Dynamic bpp issue with 8K30 with Navi 1X
    
    Why:
    In DCN2x, HW doesn't automatically divide MASTER_UPDATE_LOCK_DB_X
    by the number of pipes ODM Combined.
    
    How:
    Set MASTER_UPDATE_LOCK_DB_X to the value that is adjusted by the
    number of pipes ODM Combined.
    
    Reviewed-by: Martin Leung <martin.leung@amd.com>
    Acked-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Signed-off-by: Bing Guo <bing.guo@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 06050a0f01dbac2ca33145ef19a72041206ea983
Author: Bing Guo <bing.guo@amd.com>
Date:   Mon Jul 19 18:24:06 2021 -0400

    drm/amd/display: Fix Dynamic bpp issue with 8K30 with Navi 1X
    
    Why:
    In DCN2x, HW doesn't automatically divide MASTER_UPDATE_LOCK_DB_X
    by the number of pipes ODM Combined.
    
    How:
    Set MASTER_UPDATE_LOCK_DB_X to the value that is adjusted by the
    number of pipes ODM Combined.
    
    Reviewed-by: Martin Leung <martin.leung@amd.com>
    Acked-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Signed-off-by: Bing Guo <bing.guo@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 46c4c9d1beb7f5b4cec4dd90e7728720583ee348
Author: Alex Xu (Hello71) <alex_y_xu@yahoo.ca>
Date:   Thu Aug 5 10:40:47 2021 -0400

    pipe: increase minimum default pipe size to 2 pages
    
    This program always prints 4096 and hangs before the patch, and always
    prints 8192 and exits successfully after:
    
      int main()
      {
          int pipefd[2];
          for (int i = 0; i < 1025; i++)
              if (pipe(pipefd) == -1)
                  return 1;
          size_t bufsz = fcntl(pipefd[1], F_GETPIPE_SZ);
          printf("%zd\n", bufsz);
          char *buf = calloc(bufsz, 1);
          write(pipefd[1], buf, bufsz);
          read(pipefd[0], buf, bufsz-1);
          write(pipefd[1], buf, 1);
      }
    
    Note that you may need to increase your RLIMIT_NOFILE before running the
    program.
    
    Fixes: 759c01142a ("pipe: limit the per-user amount of pages allocated in pipes")
    Cc: <stable@vger.kernel.org>
    Link: https://lore.kernel.org/lkml/1628086770.5rn8p04n6j.none@localhost/
    Link: https://lore.kernel.org/lkml/1628127094.lxxn016tj7.none@localhost/
    Signed-off-by: Alex Xu (Hello71) <alex_y_xu@yahoo.ca>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 49f756342b818fccb576c7b6ff00af7b32778e7d
Author: Matt Roper <matthew.d.roper@intel.com>
Date:   Wed Jul 21 15:30:40 2021 -0700

    drm/i915/dg2: Add dbuf programming
    
    DG2 extends our DDB to four DBuf slices; pipes A+B only have access to
    the first two slices, whereas pipes C+D only have access to the second
    two.
    
    Confusingly, our bspec decided to switch from 1-based numbering
    of dbuf slices (S1, S2) to 0-based numbering (S0, S1, S2, S3) in
    Display13.  At the moment we're using the 0-based number scheme for the
    DBUF_CTL_S() register addressing, but the 1-based number scheme in the
    actual slice assignment tables.  We may want to consider switching the
    assignment over to 0-based numbering too at some point...
    
    Bspec: 49255
    Bspec: 50057
    Cc: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
    Reviewed-by: José Roberto de Souza <jose.souza@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210721223043.834562-16-matthew.d.roper@intel.com

commit 32f1d0cfc3444fb44ff1dba10d28e479690bdd3e
Author: Eric Yang <Eric.Yang2@amd.com>
Date:   Wed Jun 23 15:48:02 2021 -0400

    drm/amd/display: implement workaround for riommu related hang
    
    [Why]
    During S4/S5/reboot, sometimes riommu invalidation request arrive too
    early, DCN may be unable to respond to the invalidation request
    resulting in pstate hang.
    
    [How]
    VBIOS will force allow pstate for riommu invalidation and driver will
    clear it after powering down display pipes.
    
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Eric Yang <Eric.Yang2@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 46ddb8965882fcff2d36d84ed12629435f3879c1
Author: Eric Yang <Eric.Yang2@amd.com>
Date:   Wed Jun 23 15:48:02 2021 -0400

    drm/amd/display: implement workaround for riommu related hang
    
    [Why]
    During S4/S5/reboot, sometimes riommu invalidation request arrive too
    early, DCN may be unable to respond to the invalidation request
    resulting in pstate hang.
    
    [How]
    VBIOS will force allow pstate for riommu invalidation and driver will
    clear it after powering down display pipes.
    
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Eric Yang <Eric.Yang2@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 71e433ee91dc8473277053b92a980ed555bd0770
Author: Krunoslav Kovac <Krunoslav.Kovac@amd.com>
Date:   Tue Jun 22 18:42:28 2021 -0400

    drm/amd/display: Assume active upper layer owns the HW cursor
    
    [why]
    The current logic checks if there's an upper pipe whose viewport
    completely covers the current pipe viewport.
    This fails in pipe splitting case as you can have layer 1 pipe that
    crosses the two layer 0 pipes where it's contained in both, but neither
    covers it completely, hence we allow the cursor on both layers.
    
    [How]
    Instead of trying to "sum up" rectangles from the higher level pipes
    which could leave gaps and would not work generically, we will assume if
    there's an upper layer that is active, it will control the HW cursor.
    
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Krunoslav Kovac <Krunoslav.Kovac@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit a1934772719333afc47d776049b65231c2704317
Author: Jani Nikula <jani.nikula@intel.com>
Date:   Thu Jun 10 12:05:28 2021 +0300

    drm/i915/dsc: abstract helpers to get bigjoiner primary/secondary crtc
    
    Add a single point of truth for figuring out the primary/secondary crtc
    for bigjoiner instead of duplicating the magic pipe +/- 1 in multiple
    places.
    
    Also fix the pipe validity checks to properly take non-contiguous pipes
    into account. The current checks may theoretically overflow
    i915->pipe_to_crtc_mapping[pipe], albeit with a warning, due to fused
    off pipes, as INTEL_NUM_PIPES() returns the actual number of pipes on
    the platform, and the check is for INTEL_NUM_PIPES() == pipe + 1.
    
    Prefer primary/secondary terminology going forward.
    
    v2:
    - Improved abstractions for pipe validity etc.
    
    Fixes: 8a029c113b17 ("drm/i915/dp: Modify VDSC helpers to configure DSC for Bigjoiner slave")
    Fixes: d961eb20adb6 ("drm/i915/bigjoiner: atomic commit changes for uncompressed joiner")
    Cc: Animesh Manna <animesh.manna@intel.com>
    Cc: Manasi Navare <manasi.d.navare@intel.com>
    Cc: Vandita Kulkarni <vandita.kulkarni@intel.com>
    Reviewed-by: Manasi Navare <manasi.dl.navare@intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210610090528.20511-1-jani.nikula@intel.com
    (cherry picked from commit 17203224f0536cf223dc5789028d04a768d96ec3)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>

commit 17203224f0536cf223dc5789028d04a768d96ec3
Author: Jani Nikula <jani.nikula@intel.com>
Date:   Thu Jun 10 12:05:28 2021 +0300

    drm/i915/dsc: abstract helpers to get bigjoiner primary/secondary crtc
    
    Add a single point of truth for figuring out the primary/secondary crtc
    for bigjoiner instead of duplicating the magic pipe +/- 1 in multiple
    places.
    
    Also fix the pipe validity checks to properly take non-contiguous pipes
    into account. The current checks may theoretically overflow
    i915->pipe_to_crtc_mapping[pipe], albeit with a warning, due to fused
    off pipes, as INTEL_NUM_PIPES() returns the actual number of pipes on
    the platform, and the check is for INTEL_NUM_PIPES() == pipe + 1.
    
    Prefer primary/secondary terminology going forward.
    
    v2:
    - Improved abstractions for pipe validity etc.
    
    Fixes: 8a029c113b17 ("drm/i915/dp: Modify VDSC helpers to configure DSC for Bigjoiner slave")
    Fixes: d961eb20adb6 ("drm/i915/bigjoiner: atomic commit changes for uncompressed joiner")
    Cc: Animesh Manna <animesh.manna@intel.com>
    Cc: Manasi Navare <manasi.d.navare@intel.com>
    Cc: Vandita Kulkarni <vandita.kulkarni@intel.com>
    Reviewed-by: Manasi Navare <manasi.dl.navare@intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210610090528.20511-1-jani.nikula@intel.com

commit b67fda9a8280b14d44712d2ad6413e0074b070b8
Author: Hayes Wang <hayeswang@realtek.com>
Date:   Thu Jun 17 18:00:15 2021 +0800

    r8152: store the information of the pipes
    
    Store the information of the pipes to avoid calling usb_rcvctrlpipe(),
    usb_sndctrlpipe(), usb_rcvbulkpipe(), usb_sndbulkpipe(), and
    usb_rcvintpipe() frequently.
    
    Signed-off-by: Hayes Wang <hayeswang@realtek.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 94aafc3ee31dc199d1078ffac9edd976b7f47b3d
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Tue Jun 15 12:16:11 2021 +0100

    sched/fair: Age the average idle time
    
    This is a partial forward-port of Peter Ziljstra's work first posted
    at:
    
       https://lore.kernel.org/lkml/20180530142236.667774973@infradead.org/
    
    Currently select_idle_cpu()'s proportional scheme uses the average idle
    time *for when we are idle*, that is temporally challenged.  When a CPU
    is not at all idle, we'll happily continue using whatever value we did
    see when the CPU goes idle. To fix this, introduce a separate average
    idle and age it (the existing value still makes sense for things like
    new-idle balancing, which happens when we do go idle).
    
    The overall goal is to not spend more time scanning for idle CPUs than
    we're idle for. Otherwise we're inhibiting work. This means that we need to
    consider the cost over all the wake-ups between consecutive idle periods.
    To track this, the scan cost is subtracted from the estimated average
    idle time.
    
    The impact of this patch is related to workloads that have domains that
    are fully busy or overloaded. Without the patch, the scan depth may be
    too high because a CPU is not reaching idle.
    
    Due to the nature of the patch, this is a regression magnet. It
    potentially wins when domains are almost fully busy or overloaded --
    at that point searches are likely to fail but idle is not being aged
    as CPUs are active so search depth is too large and useless. It will
    potentially show regressions when there are idle CPUs and a deep search is
    beneficial. This tbench result on a 2-socket broadwell machine partially
    illustates the problem
    
                              5.13.0-rc2             5.13.0-rc2
                                 vanilla     sched-avgidle-v1r5
    Hmean     1        445.02 (   0.00%)      451.36 *   1.42%*
    Hmean     2        830.69 (   0.00%)      846.03 *   1.85%*
    Hmean     4       1350.80 (   0.00%)     1505.56 *  11.46%*
    Hmean     8       2888.88 (   0.00%)     2586.40 * -10.47%*
    Hmean     16      5248.18 (   0.00%)     5305.26 *   1.09%*
    Hmean     32      8914.03 (   0.00%)     9191.35 *   3.11%*
    Hmean     64     10663.10 (   0.00%)    10192.65 *  -4.41%*
    Hmean     128    18043.89 (   0.00%)    18478.92 *   2.41%*
    Hmean     256    16530.89 (   0.00%)    17637.16 *   6.69%*
    Hmean     320    16451.13 (   0.00%)    17270.97 *   4.98%*
    
    Note that 8 was a regression point where a deeper search would have helped
    but it gains for high thread counts when searches are useless. Hackbench
    is a more extreme example although not perfect as the tasks idle rapidly
    
    hackbench-process-pipes
                              5.13.0-rc2             5.13.0-rc2
                                 vanilla     sched-avgidle-v1r5
    Amean     1        0.3950 (   0.00%)      0.3887 (   1.60%)
    Amean     4        0.9450 (   0.00%)      0.9677 (  -2.40%)
    Amean     7        1.4737 (   0.00%)      1.4890 (  -1.04%)
    Amean     12       2.3507 (   0.00%)      2.3360 *   0.62%*
    Amean     21       4.0807 (   0.00%)      4.0993 *  -0.46%*
    Amean     30       5.6820 (   0.00%)      5.7510 *  -1.21%*
    Amean     48       8.7913 (   0.00%)      8.7383 (   0.60%)
    Amean     79      14.3880 (   0.00%)     13.9343 *   3.15%*
    Amean     110     21.2233 (   0.00%)     19.4263 *   8.47%*
    Amean     141     28.2930 (   0.00%)     25.1003 *  11.28%*
    Amean     172     34.7570 (   0.00%)     30.7527 *  11.52%*
    Amean     203     41.0083 (   0.00%)     36.4267 *  11.17%*
    Amean     234     47.7133 (   0.00%)     42.0623 *  11.84%*
    Amean     265     53.0353 (   0.00%)     47.7720 *   9.92%*
    Amean     296     60.0170 (   0.00%)     53.4273 *  10.98%*
    Stddev    1        0.0052 (   0.00%)      0.0025 (  51.57%)
    Stddev    4        0.0357 (   0.00%)      0.0370 (  -3.75%)
    Stddev    7        0.0190 (   0.00%)      0.0298 ( -56.64%)
    Stddev    12       0.0064 (   0.00%)      0.0095 ( -48.38%)
    Stddev    21       0.0065 (   0.00%)      0.0097 ( -49.28%)
    Stddev    30       0.0185 (   0.00%)      0.0295 ( -59.54%)
    Stddev    48       0.0559 (   0.00%)      0.0168 (  69.92%)
    Stddev    79       0.1559 (   0.00%)      0.0278 (  82.17%)
    Stddev    110      1.1728 (   0.00%)      0.0532 (  95.47%)
    Stddev    141      0.7867 (   0.00%)      0.0968 (  87.69%)
    Stddev    172      1.0255 (   0.00%)      0.0420 (  95.91%)
    Stddev    203      0.8106 (   0.00%)      0.1384 (  82.92%)
    Stddev    234      1.1949 (   0.00%)      0.1328 (  88.89%)
    Stddev    265      0.9231 (   0.00%)      0.0820 (  91.11%)
    Stddev    296      1.0456 (   0.00%)      0.1327 (  87.31%)
    
    Again, higher thread counts benefit and the standard deviation
    shows that results are also a lot more stable when the idle
    time is aged.
    
    The patch potentially matters when a socket was multiple LLCs as the
    maximum search depth is lower. However, some of the test results were
    suspiciously good (e.g. specjbb2005 gaining 50% on a Zen1 machine) and
    other results were not dramatically different to other mcahines.
    
    Given the nature of the patch, Peter's full series is not being forward
    ported as each part should stand on its own. Preferably they would be
    merged at different times to reduce the risk of false bisections.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Mel Gorman <mgorman@techsingularity.net>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Link: https://lkml.kernel.org/r/20210615111611.GH30378@techsingularity.net

commit a8b1de7f4f68d558fb952e765aa25e90b50a2388
Author: Shaokun Zhang <zhangshaokun@hisilicon.com>
Date:   Mon May 31 16:07:39 2021 +0800

    ath10k: remove the repeated declaration
    
    Functions 'ath10k_pci_free_pipes' and 'ath10k_wmi_alloc_skb'
    are declared twice in their header file, so remove the repeated
    declaration.
    
    Cc: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Shaokun Zhang <zhangshaokun@hisilicon.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/1622448459-50805-1-git-send-email-zhangshaokun@hisilicon.com

commit a212d9f33ed0b8399bd9829a779c4024068742a2
Merge: ffbbc5e5c717 f7af616c632e
Author: David S. Miller <davem@davemloft.net>
Date:   Sun Jun 13 13:49:39 2021 -0700

    Merge branch 'iosm-driver'
    
    M Chetan Kumar says:
    
    ====================
    net: iosm: PCIe Driver for Intel M.2 Modem
    
    The IOSM (IPC over Shared Memory) driver is a PCIe host driver implemented
    for linux or chrome platform for data exchange over PCIe interface between
    Host platform & Intel M.2 Modem. The driver exposes interface conforming to
    the MBIM protocol. Any front end application ( eg: Modem Manager) could
    easily manage the MBIM interface to enable data communication towards WWAN.
    
    Intel M.2 modem uses 2 BAR regions. The first region is dedicated to Doorbell
    register for IRQs and the second region is used as scratchpad area for book
    keeping modem execution stage details along with host system shared memory
    region context details. The upper edge of the driver exposes the control and
    data channels for user space application interaction. At lower edge these data
    and control channels are associated to pipes. The pipes are lowest level
    interfaces used over PCIe as a logical channel for message exchange. A single
    channel maps to UL and DL pipe and are initialized on device open.
    
    On UL path, driver copies application sent data to SKBs associate it with
    transfer descriptor and puts it on to ring buffer for DMA transfer. Once
    information has been updated in shared memory region, host gives a Doorbell
    to modem to perform DMA and modem uses MSI to communicate back to host.
    For receiving data in DL path, SKBs are pre-allocated during pipe open and
    transfer descriptors are given to modem for DMA transfer.
    
    The driver exposes two types of ports, namely "wwan0mbim0", a char device node
    which is used for MBIM control operation and "wwan0-x",(x = 0,1,2..7) network
    interfaces for IP data communication.
    1) MBIM Control Interface:
    This node exposes an interface between modem and application using char device
    exposed by "IOSM" driver to establish and manage the MBIM data communication
    with PCIe based Intel M.2 Modems.
    
    2) MBIM Data Interface:
    The IOSM driver exposes IP link interface "wwan0-x" of type "wwan" for IP traffic.
    Iproute network utility is used for creating "wwan0-x" network interface and for
    associating it with MBIM IP session. The Driver supports upto 8 IP sessions for
    simultaneous IP communication.
    
    This applies on top of WWAN core rtnetlink series posted here:
    https://lore.kernel.org/netdev/1623486057-13075-1-git-send-email-loic.poulain@linaro.org/
    
    Also driver has been compiled and tested on top of netdev net-next tree.
    https://git.kernel.org/pub/scm/linux/kernel/git/netdev/net-next.git/
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 30ebda7a313d1b45ea64311d8dbb12ff3961bb80
Author: M Chetan Kumar <m.chetan.kumar@intel.com>
Date:   Sun Jun 13 18:20:13 2021 +0530

    net: iosm: channel configuration
    
    Defines pipes & channel configurations like channel type,
    pipe mappings, No. of transfer descriptors and transfer
    buffer size etc.
    
    Signed-off-by: M Chetan Kumar <m.chetan.kumar@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 136e55e7a92726be4a858f9ad69bd53a9c5d07ec
Author: Aric Cyr <aric.cyr@amd.com>
Date:   Fri May 21 18:06:36 2021 -0400

    drm/amd/display: Change default policy for MPO with multidisplay
    
    [Why]
    Rearranging pipes with multiple displays and multiple planes cannot be
    done atomically and requires a much improved sequence to deal with it.
    
    [How]
    To workaround such issues, prefer avoid pipe-split policy for
    multidisplay scenarios.
    
    Signed-off-by: Aric Cyr <aric.cyr@amd.com>
    Reviewed-by: Krunoslav Kovac <Krunoslav.Kovac@amd.com>
    Acked-by: Stylon Wang <stylon.wang@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit f3bb499f98fb0849ddc9126bb003c8c75195b6c1
Author: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
Date:   Tue Apr 13 20:06:04 2021 -0400

    drm/amd/display: Fix two cursor duplication when using overlay
    
    [ Upstream commit 16e9b3e58bc3fce7391539e0eb3fd167cbf9951f ]
    
    Our driver supports overlay planes, and as expected, some userspace
    compositor takes advantage of these features. If the userspace is not
    enabling the cursor, they can use multiple planes as they please.
    Nevertheless, we start to have constraints when userspace tries to
    enable hardware cursor with various planes. Basically, we cannot draw
    the cursor at the same size and position on two separated pipes since it
    uses extra bandwidth and DML only run with one cursor.
    
    For those reasons, when we enable hardware cursor and multiple planes,
    our driver should accept variations like the ones described below:
    
      +-------------+   +--------------+
      | +---------+ |   |              |
      | |Primary  | |   | Primary      |
      | |         | |   | Overlay      |
      | +---------+ |   |              |
      |Overlay      |   |              |
      +-------------+   +--------------+
    
    In this scenario, we can have the desktop UI in the overlay and some
    other framebuffer attached to the primary plane (e.g., video). However,
    userspace needs to obey some rules and avoid scenarios like the ones
    described below (when enabling hw cursor):
    
                                          +--------+
                                          |Overlay |
     +-------------+    +-----+-------+ +-|        |--+
     | +--------+  | +--------+       | | +--------+  |
     | |Overlay |  | |Overlay |       | |             |
     | |        |  | |        |       | |             |
     | +--------+  | +--------+       | |             |
     | Primary     |    | Primary     | | Primary     |
     +-------------+    +-------------+ +-------------+
    
     +-------------+   +-------------+
     |     +--------+  |  Primary    |
     |     |Overlay |  |             |
     |     |        |  |             |
     |     +--------+  | +--------+  |
     | Primary     |   | |Overlay |  |
     +-------------+   +-|        |--+
                         +--------+
    
    If the userspace violates some of the above scenarios, our driver needs
    to reject the commit; otherwise, we can have unexpected behavior. Since
    we don't have a proper driver validation for the above case, we can see
    some problems like a duplicate cursor in applications that use multiple
    planes. This commit fixes the cursor issue and others by adding adequate
    verification for multiple planes.
    
    Change since V1 (Harry and Sean):
    - Remove cursor verification from the equation.
    
    Cc: Louis Li <Ching-shih.Li@amd.com>
    Cc: Nicholas Kazlauskas <Nicholas.Kazlauskas@amd.com>
    Cc: Harry Wentland <Harry.Wentland@amd.com>
    Cc: Hersen Wu <hersenxs.wu@amd.com>
    Cc: Sean Paul <seanpaul@chromium.org>
    Signed-off-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 1ce34fb34b99424d9d6614c520534534c16729e2
Author: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
Date:   Tue Apr 13 20:06:04 2021 -0400

    drm/amd/display: Fix two cursor duplication when using overlay
    
    [ Upstream commit 16e9b3e58bc3fce7391539e0eb3fd167cbf9951f ]
    
    Our driver supports overlay planes, and as expected, some userspace
    compositor takes advantage of these features. If the userspace is not
    enabling the cursor, they can use multiple planes as they please.
    Nevertheless, we start to have constraints when userspace tries to
    enable hardware cursor with various planes. Basically, we cannot draw
    the cursor at the same size and position on two separated pipes since it
    uses extra bandwidth and DML only run with one cursor.
    
    For those reasons, when we enable hardware cursor and multiple planes,
    our driver should accept variations like the ones described below:
    
      +-------------+   +--------------+
      | +---------+ |   |              |
      | |Primary  | |   | Primary      |
      | |         | |   | Overlay      |
      | +---------+ |   |              |
      |Overlay      |   |              |
      +-------------+   +--------------+
    
    In this scenario, we can have the desktop UI in the overlay and some
    other framebuffer attached to the primary plane (e.g., video). However,
    userspace needs to obey some rules and avoid scenarios like the ones
    described below (when enabling hw cursor):
    
                                          +--------+
                                          |Overlay |
     +-------------+    +-----+-------+ +-|        |--+
     | +--------+  | +--------+       | | +--------+  |
     | |Overlay |  | |Overlay |       | |             |
     | |        |  | |        |       | |             |
     | +--------+  | +--------+       | |             |
     | Primary     |    | Primary     | | Primary     |
     +-------------+    +-------------+ +-------------+
    
     +-------------+   +-------------+
     |     +--------+  |  Primary    |
     |     |Overlay |  |             |
     |     |        |  |             |
     |     +--------+  | +--------+  |
     | Primary     |   | |Overlay |  |
     +-------------+   +-|        |--+
                         +--------+
    
    If the userspace violates some of the above scenarios, our driver needs
    to reject the commit; otherwise, we can have unexpected behavior. Since
    we don't have a proper driver validation for the above case, we can see
    some problems like a duplicate cursor in applications that use multiple
    planes. This commit fixes the cursor issue and others by adding adequate
    verification for multiple planes.
    
    Change since V1 (Harry and Sean):
    - Remove cursor verification from the equation.
    
    Cc: Louis Li <Ching-shih.Li@amd.com>
    Cc: Nicholas Kazlauskas <Nicholas.Kazlauskas@amd.com>
    Cc: Harry Wentland <Harry.Wentland@amd.com>
    Cc: Hersen Wu <hersenxs.wu@amd.com>
    Cc: Sean Paul <seanpaul@chromium.org>
    Signed-off-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b3252a87a811b11b3ebd77f27d8bca031e0a07b9
Author: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
Date:   Tue Apr 13 20:06:04 2021 -0400

    drm/amd/display: Fix two cursor duplication when using overlay
    
    [ Upstream commit 16e9b3e58bc3fce7391539e0eb3fd167cbf9951f ]
    
    Our driver supports overlay planes, and as expected, some userspace
    compositor takes advantage of these features. If the userspace is not
    enabling the cursor, they can use multiple planes as they please.
    Nevertheless, we start to have constraints when userspace tries to
    enable hardware cursor with various planes. Basically, we cannot draw
    the cursor at the same size and position on two separated pipes since it
    uses extra bandwidth and DML only run with one cursor.
    
    For those reasons, when we enable hardware cursor and multiple planes,
    our driver should accept variations like the ones described below:
    
      +-------------+   +--------------+
      | +---------+ |   |              |
      | |Primary  | |   | Primary      |
      | |         | |   | Overlay      |
      | +---------+ |   |              |
      |Overlay      |   |              |
      +-------------+   +--------------+
    
    In this scenario, we can have the desktop UI in the overlay and some
    other framebuffer attached to the primary plane (e.g., video). However,
    userspace needs to obey some rules and avoid scenarios like the ones
    described below (when enabling hw cursor):
    
                                          +--------+
                                          |Overlay |
     +-------------+    +-----+-------+ +-|        |--+
     | +--------+  | +--------+       | | +--------+  |
     | |Overlay |  | |Overlay |       | |             |
     | |        |  | |        |       | |             |
     | +--------+  | +--------+       | |             |
     | Primary     |    | Primary     | | Primary     |
     +-------------+    +-------------+ +-------------+
    
     +-------------+   +-------------+
     |     +--------+  |  Primary    |
     |     |Overlay |  |             |
     |     |        |  |             |
     |     +--------+  | +--------+  |
     | Primary     |   | |Overlay |  |
     +-------------+   +-|        |--+
                         +--------+
    
    If the userspace violates some of the above scenarios, our driver needs
    to reject the commit; otherwise, we can have unexpected behavior. Since
    we don't have a proper driver validation for the above case, we can see
    some problems like a duplicate cursor in applications that use multiple
    planes. This commit fixes the cursor issue and others by adding adequate
    verification for multiple planes.
    
    Change since V1 (Harry and Sean):
    - Remove cursor verification from the equation.
    
    Cc: Louis Li <Ching-shih.Li@amd.com>
    Cc: Nicholas Kazlauskas <Nicholas.Kazlauskas@amd.com>
    Cc: Harry Wentland <Harry.Wentland@amd.com>
    Cc: Hersen Wu <hersenxs.wu@amd.com>
    Cc: Sean Paul <seanpaul@chromium.org>
    Signed-off-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f4dc008632260d981c2afc6d72a0a31ca4c7191c
Author: Vandita Kulkarni <vandita.kulkarni@intel.com>
Date:   Tue May 18 17:06:17 2021 -0700

    drm/i915/adl_p: MBUS programming
    
    Update MBUS_CTL register if the 2 mbus can be joined as per the current
    DDB allocation and active pipes, also update hashing mode and pipe
    select bits as  per the sequence mentioned in the bspec.
    
    Cc: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Cc: José Roberto de Souza <jose.souza@intel.com>
    Signed-off-by: Vandita Kulkarni <vandita.kulkarni@intel.com>
    Signed-off-by: Clinton Taylor <Clinton.A.Taylor@intel.com>
    Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
    Reviewed-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210519000625.3184321-10-lucas.demarchi@intel.com

commit 835c176cb1c4f4bb9dd25ff9cc914914938df70a
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Tue May 18 17:06:16 2021 -0700

    drm/i915: Introduce MBUS relative dbuf offsets
    
    The dbuf slices are going to be split across several MBUS units.
    The actual dbuf programming will use offsets relative to the
    MBUS unit. To accommodate that we shall store the MBUS relative
    offsets into the dbuf_state->ddb[] and crtc_state->plane_ddb*[].
    
    For crtc_state->wm.skl.ddb however we want to stick to global
    offsets as we use this to sanity check that the ddb allocations
    don't overlap between pipes.
    
    Cc: Clint Taylor <Clinton.A.Taylor@intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Clinton Taylor <Clinton.A.Taylor@intel.com>
    Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
    Reviewed-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210519000625.3184321-9-lucas.demarchi@intel.com

commit 247bdac958fced2fd0a9bbcfbfcfd6be67a5345a
Author: Vandita Kulkarni <vandita.kulkarni@intel.com>
Date:   Tue May 18 17:06:15 2021 -0700

    drm/i915/adl_p: Add ddb allocation support
    
    On adlp the two mbuses have two display pipes and
    two DBUFS, Pipe A and D on Mbus1 and Pipe B and C on
    Mbus2. The Mbus can be joined and all the DBUFS can be
    used on Pipe A or B.
    
    Bspec: 49255
    Cc: Anusha Srivatsa <anusha.srivatsa@intel.com>
    Signed-off-by: Vandita Kulkarni <vandita.kulkarni@intel.com>
    Signed-off-by: Clinton Taylor <Clinton.A.Taylor@intel.com>
    Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
    Reviewed-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210519000625.3184321-8-lucas.demarchi@intel.com

commit 14076e464550053527165aed352c7d9f4bf77e34
Author: José Roberto de Souza <jose.souza@intel.com>
Date:   Tue May 18 17:06:14 2021 -0700

    drm/i915/adl_p: Don't config MBUS and DBUF during display initialization
    
    Alderlake-P don't have programing sequences for MBUS or DBUF during
    display initializaiton, instead it requires programing to those
    registers during modeset because it to depend on the pipes left
    enabled.
    
    Bspec: 49213
    Cc: Matt Roper <matthew.d.roper@intel.com>
    Signed-off-by: José Roberto de Souza <jose.souza@intel.com>
    Signed-off-by: Clinton Taylor <Clinton.A.Taylor@intel.com>
    Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
    Reviewed-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210519000625.3184321-7-lucas.demarchi@intel.com

commit de1dc033f63e36fb07e6e77fbdc94b026f498ba5
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri May 14 08:37:03 2021 -0700

    drm/i915: Move intel_modeset_all_pipes()
    
    Move intel_modeset_all_pipes() to a central place so that we can
    use it elsewhere as well. No functional changes.
    
    Cc: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Clinton Taylor <Clinton.A.Taylor@intel.com>
    Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
    Reviewed-by: Anusha Srivatsa <anusha.srivatsa@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210514153711.2359617-12-matthew.d.roper@intel.com

commit c8baf9979daec8410c5b701eec5074941a27bb8f
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Mar 12 08:16:03 2021 +0100

    atomisp: don't let it go past pipes array
    
    [ Upstream commit 1f6c45ac5fd70ab59136ab5babc7def269f3f509 ]
    
    In practice, IA_CSS_PIPE_ID_NUM should never be used when
    calling atomisp_q_video_buffers_to_css(), as the driver should
    discover the right pipe before calling it.
    
    Yet, if some pipe parsing issue happens, it could end using
    it.
    
    So, add a WARN_ON() to prevent such case.
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a2bffd91bb5380c7bc6dbb1d8d2957349e929e56
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Mar 12 08:16:03 2021 +0100

    atomisp: don't let it go past pipes array
    
    [ Upstream commit 1f6c45ac5fd70ab59136ab5babc7def269f3f509 ]
    
    In practice, IA_CSS_PIPE_ID_NUM should never be used when
    calling atomisp_q_video_buffers_to_css(), as the driver should
    discover the right pipe before calling it.
    
    Yet, if some pipe parsing issue happens, it could end using
    it.
    
    So, add a WARN_ON() to prevent such case.
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7bb783ec9e0e6ab0a8ebd53d2a2be8b6c74dcc33
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Mar 12 08:16:03 2021 +0100

    atomisp: don't let it go past pipes array
    
    [ Upstream commit 1f6c45ac5fd70ab59136ab5babc7def269f3f509 ]
    
    In practice, IA_CSS_PIPE_ID_NUM should never be used when
    calling atomisp_q_video_buffers_to_css(), as the driver should
    discover the right pipe before calling it.
    
    Yet, if some pipe parsing issue happens, it could end using
    it.
    
    So, add a WARN_ON() to prevent such case.
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9119e993cfd16e65b34d626e8e0b51a847bb2a02
Author: Anthony Wang <anthony1.wang@amd.com>
Date:   Fri Apr 30 09:09:02 2021 -0400

    drm/amd/display: Handle potential dpp_inst mismatch with pipe_idx
    
    [Why]
    In some pipe harvesting configs, we will select the incorrect
    dpp_inst when programming DTO. This is because when any intermediate
    pipe is fused, resource instances are no longer in 1:1
    correspondence with pipe index.
    
    [How]
    When looping through pipes to program DTO, get the dpp_inst
    associated with each pipe from res_pool.
    
    Signed-off-by: Anthony Wang <anthony1.wang@amd.com>
    Reviewed-by: Yongqiang Sun <yongqiang.sun@amd.com>
    Acked-by: Stylon Wang <stylon.wang@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit ddab8bd788f5badb38b8e99d63bffc22225ee3e4
Author: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
Date:   Tue Apr 13 20:06:04 2021 -0400

    drm/amd/display: Fix two cursor duplication when using overlay
    
    Our driver supports overlay planes, and as expected, some userspace
    compositor takes advantage of these features. If the userspace is not
    enabling the cursor, they can use multiple planes as they please.
    Nevertheless, we start to have constraints when userspace tries to
    enable hardware cursor with various planes. Basically, we cannot draw
    the cursor at the same size and position on two separated pipes since it
    uses extra bandwidth and DML only run with one cursor.
    
    For those reasons, when we enable hardware cursor and multiple planes,
    our driver should accept variations like the ones described below:
    
      +-------------+   +--------------+
      | +---------+ |   |              |
      | |Primary  | |   | Primary      |
      | |         | |   | Overlay      |
      | +---------+ |   |              |
      |Overlay      |   |              |
      +-------------+   +--------------+
    
    In this scenario, we can have the desktop UI in the overlay and some
    other framebuffer attached to the primary plane (e.g., video). However,
    userspace needs to obey some rules and avoid scenarios like the ones
    described below (when enabling hw cursor):
    
                                          +--------+
                                          |Overlay |
     +-------------+    +-----+-------+ +-|        |--+
     | +--------+  | +--------+       | | +--------+  |
     | |Overlay |  | |Overlay |       | |             |
     | |        |  | |        |       | |             |
     | +--------+  | +--------+       | |             |
     | Primary     |    | Primary     | | Primary     |
     +-------------+    +-------------+ +-------------+
    
     +-------------+   +-------------+
     |     +--------+  |  Primary    |
     |     |Overlay |  |             |
     |     |        |  |             |
     |     +--------+  | +--------+  |
     | Primary     |   | |Overlay |  |
     +-------------+   +-|        |--+
                         +--------+
    
    If the userspace violates some of the above scenarios, our driver needs
    to reject the commit; otherwise, we can have unexpected behavior. Since
    we don't have a proper driver validation for the above case, we can see
    some problems like a duplicate cursor in applications that use multiple
    planes. This commit fixes the cursor issue and others by adding adequate
    verification for multiple planes.
    
    Change since V1 (Harry and Sean):
    - Remove cursor verification from the equation.
    
    Cc: Louis Li <Ching-shih.Li@amd.com>
    Cc: Nicholas Kazlauskas <Nicholas.Kazlauskas@amd.com>
    Cc: Harry Wentland <Harry.Wentland@amd.com>
    Cc: Hersen Wu <hersenxs.wu@amd.com>
    Cc: Sean Paul <seanpaul@chromium.org>
    Signed-off-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 16e9b3e58bc3fce7391539e0eb3fd167cbf9951f
Author: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
Date:   Tue Apr 13 20:06:04 2021 -0400

    drm/amd/display: Fix two cursor duplication when using overlay
    
    Our driver supports overlay planes, and as expected, some userspace
    compositor takes advantage of these features. If the userspace is not
    enabling the cursor, they can use multiple planes as they please.
    Nevertheless, we start to have constraints when userspace tries to
    enable hardware cursor with various planes. Basically, we cannot draw
    the cursor at the same size and position on two separated pipes since it
    uses extra bandwidth and DML only run with one cursor.
    
    For those reasons, when we enable hardware cursor and multiple planes,
    our driver should accept variations like the ones described below:
    
      +-------------+   +--------------+
      | +---------+ |   |              |
      | |Primary  | |   | Primary      |
      | |         | |   | Overlay      |
      | +---------+ |   |              |
      |Overlay      |   |              |
      +-------------+   +--------------+
    
    In this scenario, we can have the desktop UI in the overlay and some
    other framebuffer attached to the primary plane (e.g., video). However,
    userspace needs to obey some rules and avoid scenarios like the ones
    described below (when enabling hw cursor):
    
                                          +--------+
                                          |Overlay |
     +-------------+    +-----+-------+ +-|        |--+
     | +--------+  | +--------+       | | +--------+  |
     | |Overlay |  | |Overlay |       | |             |
     | |        |  | |        |       | |             |
     | +--------+  | +--------+       | |             |
     | Primary     |    | Primary     | | Primary     |
     +-------------+    +-------------+ +-------------+
    
     +-------------+   +-------------+
     |     +--------+  |  Primary    |
     |     |Overlay |  |             |
     |     |        |  |             |
     |     +--------+  | +--------+  |
     | Primary     |   | |Overlay |  |
     +-------------+   +-|        |--+
                         +--------+
    
    If the userspace violates some of the above scenarios, our driver needs
    to reject the commit; otherwise, we can have unexpected behavior. Since
    we don't have a proper driver validation for the above case, we can see
    some problems like a duplicate cursor in applications that use multiple
    planes. This commit fixes the cursor issue and others by adding adequate
    verification for multiple planes.
    
    Change since V1 (Harry and Sean):
    - Remove cursor verification from the equation.
    
    Cc: Louis Li <Ching-shih.Li@amd.com>
    Cc: Nicholas Kazlauskas <Nicholas.Kazlauskas@amd.com>
    Cc: Harry Wentland <Harry.Wentland@amd.com>
    Cc: Hersen Wu <hersenxs.wu@amd.com>
    Cc: Sean Paul <seanpaul@chromium.org>
    Signed-off-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit ba0e8db170c301b73aa71eb4585218f3105cea0a
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Thu Apr 1 13:36:05 2021 +0300

    perf inject: Fix repipe usage
    
    [ Upstream commit 026334a3bb6a3919b42aba9fc11843db2b77fd41 ]
    
    Since commit 14d3d54052539a1e ("perf session: Try to read pipe data from
    file") 'perf inject' has started printing "PERFILE2h" when not processing
    pipes.
    
    The commit exposed perf to the possiblity that the input is not a pipe
    but the 'repipe' parameter gets used. That causes the printing because
    perf inject sets 'repipe' to true always.
    
    The 'repipe' parameter of perf_session__new() is used by 2 functions:
    
            - perf_file_header__read_pipe()
            - trace_report()
    
    In both cases, the functions copy data to STDOUT_FILENO when 'repipe' is
    true.
    
    Fix by setting 'repipe' to true only if the output is a pipe.
    
    Fixes: e558a5bd8b74aff4 ("perf inject: Work with files")
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Acked-by: Jiri Olsa <jolsa@redhat.com>
    Cc: Andrew Vagin <avagin@openvz.org>
    Link: http://lore.kernel.org/lkml/20210401103605.9000-1-adrian.hunter@intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3b70c6f26364f2621e0aef142c67ffe2c049ea2d
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Thu Apr 1 13:36:05 2021 +0300

    perf inject: Fix repipe usage
    
    [ Upstream commit 026334a3bb6a3919b42aba9fc11843db2b77fd41 ]
    
    Since commit 14d3d54052539a1e ("perf session: Try to read pipe data from
    file") 'perf inject' has started printing "PERFILE2h" when not processing
    pipes.
    
    The commit exposed perf to the possiblity that the input is not a pipe
    but the 'repipe' parameter gets used. That causes the printing because
    perf inject sets 'repipe' to true always.
    
    The 'repipe' parameter of perf_session__new() is used by 2 functions:
    
            - perf_file_header__read_pipe()
            - trace_report()
    
    In both cases, the functions copy data to STDOUT_FILENO when 'repipe' is
    true.
    
    Fix by setting 'repipe' to true only if the output is a pipe.
    
    Fixes: e558a5bd8b74aff4 ("perf inject: Work with files")
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Acked-by: Jiri Olsa <jolsa@redhat.com>
    Cc: Andrew Vagin <avagin@openvz.org>
    Link: http://lore.kernel.org/lkml/20210401103605.9000-1-adrian.hunter@intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d0aab59f099338cf2b3ae573dd38db76fe8e7a49
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Thu Apr 1 13:36:05 2021 +0300

    perf inject: Fix repipe usage
    
    [ Upstream commit 026334a3bb6a3919b42aba9fc11843db2b77fd41 ]
    
    Since commit 14d3d54052539a1e ("perf session: Try to read pipe data from
    file") 'perf inject' has started printing "PERFILE2h" when not processing
    pipes.
    
    The commit exposed perf to the possiblity that the input is not a pipe
    but the 'repipe' parameter gets used. That causes the printing because
    perf inject sets 'repipe' to true always.
    
    The 'repipe' parameter of perf_session__new() is used by 2 functions:
    
            - perf_file_header__read_pipe()
            - trace_report()
    
    In both cases, the functions copy data to STDOUT_FILENO when 'repipe' is
    true.
    
    Fix by setting 'repipe' to true only if the output is a pipe.
    
    Fixes: e558a5bd8b74aff4 ("perf inject: Work with files")
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Acked-by: Jiri Olsa <jolsa@redhat.com>
    Cc: Andrew Vagin <avagin@openvz.org>
    Link: http://lore.kernel.org/lkml/20210401103605.9000-1-adrian.hunter@intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b3652e87c03c70d8e6e04a17afa475f6855169d1
Author: Krishna Manikandan <mkrishn@codeaurora.org>
Date:   Tue Apr 6 10:39:51 2021 +0530

    drm/msm/disp/dpu1: add support to program fetch active in ctl path
    
    A new register called CTL_FETCH_ACTIVE is introduced in
    SC7280 family which is used to inform the HW about
    the pipes which are active in the current ctl path.
    This change adds support to program this register
    based on the active pipes in the current composition.
    
    Signed-off-by: Krishna Manikandan <mkrishn@codeaurora.org>
    Link: https://lore.kernel.org/r/1617685792-14376-4-git-send-email-mkrishn@codeaurora.org
    Signed-off-by: Rob Clark <robdclark@chromium.org>

commit 026334a3bb6a3919b42aba9fc11843db2b77fd41
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Thu Apr 1 13:36:05 2021 +0300

    perf inject: Fix repipe usage
    
    Since commit 14d3d54052539a1e ("perf session: Try to read pipe data from
    file") 'perf inject' has started printing "PERFILE2h" when not processing
    pipes.
    
    The commit exposed perf to the possiblity that the input is not a pipe
    but the 'repipe' parameter gets used. That causes the printing because
    perf inject sets 'repipe' to true always.
    
    The 'repipe' parameter of perf_session__new() is used by 2 functions:
    
            - perf_file_header__read_pipe()
            - trace_report()
    
    In both cases, the functions copy data to STDOUT_FILENO when 'repipe' is
    true.
    
    Fix by setting 'repipe' to true only if the output is a pipe.
    
    Fixes: e558a5bd8b74aff4 ("perf inject: Work with files")
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Acked-by: Jiri Olsa <jolsa@redhat.com>
    Cc: Andrew Vagin <avagin@openvz.org>
    Link: http://lore.kernel.org/lkml/20210401103605.9000-1-adrian.hunter@intel.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

commit 6f46011e4fce981e3a16bba3a2629fa8fa8a9767
Author: Dillon Varone <dillon.varone@amd.com>
Date:   Fri Feb 19 18:15:30 2021 -0500

    drm/amd/display: Enabled pipe harvesting in dcn30
    
    [ Upstream commit d2c91285958a3e77db99c352c136af4243f8f529 ]
    
    [Why & How]
    Ported logic from dcn21 for reading in pipe fusing to dcn30.
    Supported configurations are 1 and 6 pipes. Invalid fusing
    will revert to 1 pipe being enabled.
    
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Dillon Varone <dillon.varone@amd.com>
    Reviewed-by: Jun Lei <Jun.Lei@amd.com>
    Acked-by: Eryk Brol <eryk.brol@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 38833cbda2c2bd2a0968e038248dda31af51d841
Author: Anant Thazhemadam <anant.thazhemadam@gmail.com>
Date:   Sat Mar 27 04:02:51 2021 +0530

    usb: misc: usbsevseg: update to use usb_control_msg_send()
    
    The newer usb_control_msg_{send|recv}() API ensures that a short read is
    treated as an error, data can be used off the stack, and raw usb pipes
    need not be created in the calling functions.
    For this reason, instances of usb_control_msg() have been replaced with
    usb_control_msg_send() appropriately.
    
    Signed-off-by: Anant Thazhemadam <anant.thazhemadam@gmail.com>
    Link: https://lore.kernel.org/r/20210326223251.753952-4-anant.thazhemadam@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ced6a0ba266effb0b31c7207f4348df9e906c789
Author: Anant Thazhemadam <anant.thazhemadam@gmail.com>
Date:   Sat Mar 27 04:02:50 2021 +0530

    usb: misc: ezusb: update to use usb_control_msg_send()
    
    The newer usb_control_msg_{send|recv}() API ensures that a short read is
    treated as an error, data can be used off the stack, and raw usb pipes need
    not be created in the calling functions.
    For this reason, the instance of usb_control_msg() has been replaced with
    usb_control_msg_send() appropriately.
    
    Reviewed-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Anant Thazhemadam <anant.thazhemadam@gmail.com>
    Link: https://lore.kernel.org/r/20210326223251.753952-3-anant.thazhemadam@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f5ffdd3b7554158ec5be6ab28a48751d1d87d0cc
Author: Anant Thazhemadam <anant.thazhemadam@gmail.com>
Date:   Sat Mar 27 04:02:49 2021 +0530

    usb: misc: ehset: update to use the usb_control_msg_{send|recv}() API
    
    The newer usb_control_msg_{send|recv}() API ensures that a short read
    is treated as an error, data can be used off the stack, and raw usb
    pipes need not be created in the calling functions.
    For this reason, instances of usb_control_msg() have been replaced with
    usb_control_msg_{recv|send}() appropriately.
    
    Now, we also test for a short device descriptor (which USB core
    should already have fetched if you get to probe this driver), but which
    wasn't verified again here before.
    
    Reviewed-by: Peter Chen <peter.chen@nxp.com>
    Reviewed-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: Anant Thazhemadam <anant.thazhemadam@gmail.com>
    Link: https://lore.kernel.org/r/20210326223251.753952-2-anant.thazhemadam@gmail.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d1a97648ae028a44536927c87837c45ada7141c9
Author: Robert Foss <robert.foss@linaro.org>
Date:   Thu Dec 17 15:09:33 2020 +0100

    drm/bridge: lt9611: Fix handling of 4k panels
    
    4k requires two dsi pipes, so don't report MODE_OK when only a
    single pipe is configured. But rather report MODE_PANEL to
    signal that requirements of the panel are not being met.
    
    Reported-by: Peter Collingbourne <pcc@google.com>
    Suggested-by: Peter Collingbourne <pcc@google.com>
    Signed-off-by: Robert Foss <robert.foss@linaro.org>
    Tested-by: John Stultz <john.stultz@linaro.org>
    Tested-by: Anibal Limon <anibal.limon@linaro.org>
    Tested-by: Peter Collingbourne <pcc@google.com>
    Reviewed-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Acked-by: Vinod Koul <vkoul@kernel.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20201217140933.1133969-1-robert.foss@linaro.org

commit ffe5650af0a140c0b3bf16f0d196c356fc849b3e
Author: Dillon Varone <dillon.varone@amd.com>
Date:   Fri Feb 19 18:15:30 2021 -0500

    drm/amd/display: Enabled pipe harvesting in dcn30
    
    [Why & How]
    Ported logic from dcn21 for reading in pipe fusing to dcn30.
    Supported configurations are 1 and 6 pipes. Invalid fusing
    will revert to 1 pipe being enabled.
    
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Dillon Varone <dillon.varone@amd.com>
    Reviewed-by: Jun Lei <Jun.Lei@amd.com>
    Acked-by: Eryk Brol <eryk.brol@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 1f6c45ac5fd70ab59136ab5babc7def269f3f509
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Fri Mar 12 08:16:03 2021 +0100

    atomisp: don't let it go past pipes array
    
    In practice, IA_CSS_PIPE_ID_NUM should never be used when
    calling atomisp_q_video_buffers_to_css(), as the driver should
    discover the right pipe before calling it.
    
    Yet, if some pipe parsing issue happens, it could end using
    it.
    
    So, add a WARN_ON() to prevent such case.
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit d2c91285958a3e77db99c352c136af4243f8f529
Author: Dillon Varone <dillon.varone@amd.com>
Date:   Fri Feb 19 18:15:30 2021 -0500

    drm/amd/display: Enabled pipe harvesting in dcn30
    
    [Why & How]
    Ported logic from dcn21 for reading in pipe fusing to dcn30.
    Supported configurations are 1 and 6 pipes. Invalid fusing
    will revert to 1 pipe being enabled.
    
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Dillon Varone <dillon.varone@amd.com>
    Reviewed-by: Jun Lei <Jun.Lei@amd.com>
    Acked-by: Eryk Brol <eryk.brol@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit d0f1bfc615a893187bf7ba27ccde852dc83320bf
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Feb 24 16:42:11 2021 +0200

    drm/i915: Use pipes instead crtc indices in PLL state tracking
    
    All the other places we have use pipes instead of crtc indices
    when tracking resource usage. Life is easier when we do it
    the same way always, so switch the dpll mgr to using pipes as
    well. Looks like it was actually mixing these up in some cases
    so it would not even have worked correctly except when the
    device has a contiguous set of pipes starting from pipe A.
    Granted, that is the typical case but supposedly it may not
    always hold on modern hw.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210224144214.24803-4-ville.syrjala@linux.intel.com
    Reviewed-by: Mika Kahola <mika.kahola@intel.com>

commit 2c6afc3675bc0d4e38b8b47425d8150810482874
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Thu Mar 4 19:04:20 2021 +0200

    drm/i915: Return zero as the scanline counter for disabled pipes
    
    We print the scanline counters as unsigned integers so the -1
    here just makes the debugs/traces look a bit messy. Zero seems
    equally valid for this usecase.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210304170421.10901-4-ville.syrjala@linux.intel.com
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>

commit 9bb475cd31fa6e724225841689495a9c86fac037
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Thu Mar 4 19:04:19 2021 +0200

    drm/i915: Don't try to query the frame counter for disabled pipes
    
    For platforms/outputs without hardware frame counters we can't
    call drm_crtc_accurate_vblank_count() when the vblank support is
    disabled or we just get a WARN due to the crtc timings
    (vblank->hwmode) being considered invalid. Note that until the
    pipe in question has been enabled and drm_crtc_set_max_vblank_count()
    has been called on it we would also take this path on platforms
    which have a working frame counter. So getting the WARN is rather
    likely on any platform unless you always boot with lots of displays
    plugged in.
    
    Also even on hardware with a working frame counter we may not be
    able to read the actual frame counter register on disabled pipes
    due the relevant power well being disabled. Ie. would just result
    in the unclaimed reg spew.
    
    So let's just avoid all this an directly report zero in case
    the pipe is disabled.
    
    Reported-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Tested-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210304170421.10901-3-ville.syrjala@linux.intel.com
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>

commit ea32c4f3551f40269f1dc16a3842eba448e53d88
Author: Gabriel Krisman Bertazi <krisman@collabora.com>
Date:   Tue Nov 24 15:28:02 2020 -0500

    watch_queue: Drop references to /dev/watch_queue
    
    [ Upstream commit 8fe62e0c0e2efa5437f3ee81b65d69e70a45ecd2 ]
    
    The merged API doesn't use a watch_queue device, but instead relies on
    pipes, so let the documentation reflect that.
    
    Fixes: f7e47677e39a ("watch_queue: Add a key/keyring notification facility")
    Signed-off-by: Gabriel Krisman Bertazi <krisman@collabora.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Acked-by: Jarkko Sakkinen <jarkko@kernel.org>
    Reviewed-by: Ben Boeckel <mathstuf@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6e223a3d906a09863d1db331c8637f2d7385f33f
Author: Gabriel Krisman Bertazi <krisman@collabora.com>
Date:   Tue Nov 24 15:28:02 2020 -0500

    watch_queue: Drop references to /dev/watch_queue
    
    [ Upstream commit 8fe62e0c0e2efa5437f3ee81b65d69e70a45ecd2 ]
    
    The merged API doesn't use a watch_queue device, but instead relies on
    pipes, so let the documentation reflect that.
    
    Fixes: f7e47677e39a ("watch_queue: Add a key/keyring notification facility")
    Signed-off-by: Gabriel Krisman Bertazi <krisman@collabora.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Acked-by: Jarkko Sakkinen <jarkko@kernel.org>
    Reviewed-by: Ben Boeckel <mathstuf@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5b616a2958da0c75a6083e82859ca33be7662562
Author: Jani Nikula <jani.nikula@intel.com>
Date:   Tue Mar 2 13:02:59 2021 +0200

    drm/i915/mso: add splitter state readout for platforms that support it
    
    Add splitter configuration to crtc state, and read it where
    supported. Also add splitter state dumping. The stream splitter will be
    required for eDP MSO.
    
    v4:
    - Catch invalid splitter configuration (Uma)
    
    v3:
    - Convert segment timings to full panel timings.
    - Refer to splitter instead of mso in crtc state.
    - Dump splitter state.
    
    v2: Add warning for mso being enabled on pipes other than A.
    
    Cc: Nischal Varide <nischal.varide@intel.com>
    Cc: Uma Shankar <uma.shankar@intel.com>
    Reviewed-by: Uma Shankar <uma.shankar@intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/95cbe1c9d45edf3e3ec252e49fb49055def98155.1614682842.git.jani.nikula@intel.com

commit 774ab4ff15c020f5b38b45958ee22193d06a17d7
Author: José Roberto de Souza <jose.souza@intel.com>
Date:   Tue Feb 9 10:14:37 2021 -0800

    drm/i915/display: Only write to register in intel_psr2_program_trans_man_trk_ctl()
    
    There is no support for two pipes one transcoder for PSR and if we had
    that the current code should not use cpu_transcoder.
    Also I can't see a scenario where crtc_state->enable_psr2_sel_fetch is
    set and PSR is not enabled and if by a bug it happens PSR HW will just
    ignore any value in set in PSR2_MAN_TRK_CTL.
    
    So dropping all the rest and keeping the same behavior that we have
    with intel_psr2_program_plane_sel_fetch().
    
    Cc: Gwan-gyeong Mun <gwan-gyeong.mun@intel.com>
    Signed-off-by: José Roberto de Souza <jose.souza@intel.com>
    Reviewed-by: Gwan-gyeong Mun <gwan-gyeong.mun@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210209181439.215104-2-jose.souza@intel.com

commit b8dc6255bb2d08ff5f57ddfb4ff0f85fd6433a9f
Author: Mikita Lipski <mikita.lipski@amd.com>
Date:   Thu Jan 14 11:48:57 2021 -0500

    drm/amd/display: Release DSC before acquiring
    
    [ Upstream commit 58180a0cc0c57fe62a799a112f95b60f6935bd96 ]
    
    [why]
    Need to unassign DSC from pipes that are not using it
    so other pipes can acquire it. That is needed for
    asic's that have unmatching number of DSC engines from
    the number of pipes.
    
    [how]
    Before acquiring dsc to stream resources, first remove it.
    
    Signed-off-by: Mikita Lipski <mikita.lipski@amd.com>
    Reviewed-by: Eryk Brol <Eryk.Brol@amd.com>
    Acked-by: Anson Jacob <Anson.Jacob@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f8bf64501873ab750166200a698f3b0cc6983a65
Author: Nirmoy Das <nirmoy.das@amd.com>
Date:   Wed Feb 3 13:02:59 2021 +0100

    drm/amdgpu: enable wave limit on non high prio cs pipes
    
    To achieve the best QoS for high priority compute jobs it is
    required to limit waves on other compute pipes as well.
    This patch will set min value in non high priority
    mmSPI_WCL_PIPE_PERCENT_CS[0-3] registers to minimize the
    impact of normal/low priority compute jobs over high priority
    compute jobs.
    
    Signed-off-by: Nirmoy Das <nirmoy.das@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit e8911b02ccb635d6d12166c27ddeb010cf391d39
Author: Vladimir Stempen <vladimir.stempen@amd.com>
Date:   Mon Jan 4 12:05:26 2021 -0500

    drm/amd/display: Fixed corruptions on HPDRX link loss restore
    
    [ Upstream commit 4b08d8c78360241d270396a9de6eb774e88acd00 ]
    
    [why]
    Heavy corruption or blank screen reported on wake,
    with 6k display connected and FEC enabled
    
    [how]
    When Disable/Enable stream for display pipes on HPDRX,
    DC should take into account ODM split pipes.
    
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Vladimir Stempen <vladimir.stempen@amd.com>
    Reviewed-by: Aric Cyr <Aric.Cyr@amd.com>
    Acked-by: Anson Jacob <anson.jacob@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b64d6c51380b7dea17d5503a250ca9cc84025453
Author: Gwan-gyeong Mun <gwan-gyeong.mun@intel.com>
Date:   Thu Feb 4 15:40:14 2021 +0200

    drm/i915/display: Support PSR Multiple Instances
    
    It is a preliminary work for supporting multiple EDP PSR and
    DP PanelReplay. And it refactors singleton PSR to Multi Transcoder
    supportable PSR.
    And this moves and renames the i915_psr structure of drm_i915_private's to
    intel_dp's intel_psr structure.
    It also causes changes in PSR interrupt handling routine for supporting
    multiple transcoders. But it does not change the scenario and timing of
    enabling and disabling PSR. And it not support multiple pipes with
    a single transcoder PSR case yet.
    
    v2: Fix indentation and add comments
    v3: Remove Blank line
    v4: Rebased
    v5: Rebased and Addressed Anshuman's review comment.
        - Move calling of intel_psr_init() to intel_dp_init_connector()
    v6: Address Anshuman's review comments
       - Remove wrong comments and add comments for a limit of supporting of
         a single pipe PSR
    v7: Update intel_psr_compute_config() for supporting multiple transcoder
        PSR on BDW+
    v8: Address Anshuman's review comments
       - Replace DRM_DEBUG_KMS with drm_dbg_kms() / DRM_WARN with drm_warn()
    v9: Fix commit message
    v10: Rebased
    v11: Address Jose's review comment.
      - Reorder calling order of intel_psr2_program_trans_man_trk_ctl().
      - In order to reduce changes keep the old name for drm_i915_private.
      - Change restrictions of multiple instances of PSR.
    v12: Address Jose's review comment.
      - Change the calling of intel_psr2_program_trans_man_trk_ctl() into
        commit_pipe_config().
      - Change a checking order of CAN_PSR() and connector_status to original
        on i915_psr_sink_status_show().
      - Drop unneeded intel_dp_update_pipe() function.
      - In order to wait a specific encoder which belong to crtc_state on
        intel_psr_wait_for_idle(), add checking of encoder.
      - Add an whitespace to comments.
    v13: Rebased and Address Jose's review comment.
      - Add and use for_each_intel_psr_enabled_encoder() macro.
      - In order to use correct frontbuffer_bit for each pipe,
        fix intel_psr_invalidate() and intel_psr_flush().
      - Remove redundant or unneeded codes.
      - Update comments.
    v14: Address Jose's review comment
      - Add and use for_each_intel_encoder_can_psr() macro and
        for_each_intel_encoder_mask_can_psr() macro.
      - Add source_support member variable into intel_psr structure.
      - Update CAN_PSR() macro that checks source_support.
      - Move encoder's PSR availity check to psr_init() from
        psr_compute_config().
      - Remove redundant or unneeded codes.
    v15: Remove wrong mutex lock/unlock of PSR from
         intel_psr2_program_trans_man_trk_ctl()
    
    Signed-off-by: Gwan-gyeong Mun <gwan-gyeong.mun@intel.com>
    Cc: José Roberto de Souza <jose.souza@intel.com>
    Cc: Juha-Pekka Heikkila <juhapekka.heikkila@gmail.com>
    Cc: Anshuman Gupta <anshuman.gupta@intel.com>
    Reviewed-by: Anshuman Gupta <anshuman.gupta@intel.com>
    Reviewed-by: José Roberto de Souza <jose.souza@intel.com>
    Signed-off-by: José Roberto de Souza <jose.souza@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210204134015.419036-1-gwan-gyeong.mun@intel.com

commit 58180a0cc0c57fe62a799a112f95b60f6935bd96
Author: Mikita Lipski <mikita.lipski@amd.com>
Date:   Thu Jan 14 11:48:57 2021 -0500

    drm/amd/display: Release DSC before acquiring
    
    [why]
    Need to unassign DSC from pipes that are not using it
    so other pipes can acquire it. That is needed for
    asic's that have unmatching number of DSC engines from
    the number of pipes.
    
    [how]
    Before acquiring dsc to stream resources, first remove it.
    
    Signed-off-by: Mikita Lipski <mikita.lipski@amd.com>
    Reviewed-by: Eryk Brol <Eryk.Brol@amd.com>
    Acked-by: Anson Jacob <Anson.Jacob@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit bae72358f6a28e1a7f1a1c5a99e5d870360d8e46
Author: Mikita Lipski <mikita.lipski@amd.com>
Date:   Thu Jan 14 11:48:57 2021 -0500

    drm/amd/display: Release DSC before acquiring
    
    [why]
    Need to unassign DSC from pipes that are not using it
    so other pipes can acquire it. That is needed for
    asic's that have unmatching number of DSC engines from
    the number of pipes.
    
    [how]
    Before acquiring dsc to stream resources, first remove it.
    
    Signed-off-by: Mikita Lipski <mikita.lipski@amd.com>
    Reviewed-by: Eryk Brol <Eryk.Brol@amd.com>
    Acked-by: Anson Jacob <Anson.Jacob@amd.com>
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 2c104a469a4ce276117acda94ccf922c3b82d735
Author: Davidlohr Bueso <dave@stgolabs.net>
Date:   Thu Jan 14 16:20:14 2021 -0800

    platform/goldfish: Convert pipe tasklet to threaded irq
    
    Tasklets have long been deprecated as being too heavy on the system
    by running in irq context - and this is not a performance critical
    path. If a higher priority process wants to run, it must wait for
    the tasklet to finish before doing so. A more suitable equivalent
    is to converted to threaded irq instead and deal with the signaled
    pipes in task context.
    
    Signed-off-by: Davidlohr Bueso <dbueso@suse.de>
    Link: https://lore.kernel.org/r/20210115002014.117528-1-dave@stgolabs.net
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e8572713897eb9e4bfaef90bf15d5dd00d7126fc
Author: Johannes Berg <johannes@sipsolutions.net>
Date:   Mon Jan 25 10:16:15 2021 +0100

    fs/pipe: allow sendfile() to pipe again
    
    commit f8ad8187c3b536ee2b10502a8340c014204a1af0 upstream.
    
    After commit 36e2c7421f02 ("fs: don't allow splice read/write
    without explicit ops") sendfile() could no longer send data
    from a real file to a pipe, breaking for example certain cgit
    setups (e.g. when running behind fcgiwrap), because in this
    case cgit will try to do exactly this: sendfile() to a pipe.
    
    Fix this by using iter_file_splice_write for the splice_write
    method of pipes, as suggested by Christoph.
    
    Cc: stable@vger.kernel.org
    Fixes: 36e2c7421f02 ("fs: don't allow splice read/write without explicit ops")
    Suggested-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Tested-by: Johannes Berg <johannes@sipsolutions.net>
    Signed-off-by: Johannes Berg <johannes@sipsolutions.net>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7f8049df7c5094f9913cd49a8b56999321ea3683
Author: Sung Lee <sung.lee@amd.com>
Date:   Tue Jan 5 14:32:29 2021 -0500

    drm/amd/display: DCN2X Find Secondary Pipe properly in MPO + ODM Case
    
    commit 348fe1ca5ccdca0f8c285e2ab99004fdcd531430 upstream.
    
    [WHY]
    Previously as MPO + ODM Combine was not supported, finding secondary pipes
    for each case was mutually exclusive. Now that both are supported at the same
    time, both cases should be taken into account when finding a secondary pipe.
    
    [HOW]
    If a secondary pipe cannot be found based on previous bottom pipe,
    search for a second pipe using next_odm_pipe instead.
    
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Sung Lee <sung.lee@amd.com>
    Reviewed-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Acked-by: Anson Jacob <anson.jacob@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org # 5.10.x
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ef79d62b5ce53851901d6c1d21b74cbb9e27219b
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Jan 22 22:56:32 2021 +0200

    drm/i915: Encapsulate dbuf state handling harder
    
    In order to make the dbuf state computation less fragile
    let's make it stand on its own feet by not requiring someone
    to peek into a crystall ball ahead of time to figure out
    which pipes need to be added to the state under which potential
    future conditions. Instead we compute each piece of the state
    as we go along, and if any fallout occurs that affects more than
    the current set of pipes we add the affected pipes to the state
    naturally.
    
    That requires that we track a few extra thigns in the global
    dbuf state: dbuf slices for each pipe, and the weight each
    pipe has when distributing the same set of slice(s) between
    multiple pipes. Easy enough.
    
    We do need to follow a somewhat careful sequence of computations
    though as there are several steps involved in cooking up the dbuf
    state. Thoguh we could avoid some of that by computing more things
    on demand instead of relying on earlier step of the algorithm to
    have filled it out. I think the end result is still reasonable
    as the entire sequence is pretty much consolidated into a single
    function instead of being spread around all over.
    
    The rough sequence is this:
    1. calculate active_pipes
    2. calculate dbuf slices for every pipe
    3. calculate total enabled slices
    4. calculate new dbuf weights for any crtc in the state
    5. calculate new ddb entry for every pipe based on the sets of
       slices and weights, and add any affected crtc to the state
    6. calculate new plane ddb entries for all crtcs in the state,
       and add any affected plane to the state so that we'll perform
       the requisite hw reprogramming
    
    And as a nice bonus we get to throw dev_priv->wm.distrust_bios_wm
    out the window.
    
    v2: Keep crtc_state->wm.skl.ddb
    
    Reviewed-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210122205633.18492-8-ville.syrjala@linux.intel.com

commit 5363096f822e46104146f08ca8b6aa5c2382429e
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Jan 22 22:56:31 2021 +0200

    drm/i915: Extract intel_crtc_dbuf_weights()
    
    Extract the code to calculate the weights used to chunk up the dbuf
    between pipes. There's still extra stuff in there that shouldn't be
    there and must be moved out, but that requires a bit more state to
    be tracked in the dbuf state.
    
    v2: Keep crtc_state->wm.skl.ddb
    
    Reviewed-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210122205633.18492-7-ville.syrjala@linux.intel.com

commit f8ad8187c3b536ee2b10502a8340c014204a1af0
Author: Johannes Berg <johannes@sipsolutions.net>
Date:   Mon Jan 25 10:16:15 2021 +0100

    fs/pipe: allow sendfile() to pipe again
    
    After commit 36e2c7421f02 ("fs: don't allow splice read/write
    without explicit ops") sendfile() could no longer send data
    from a real file to a pipe, breaking for example certain cgit
    setups (e.g. when running behind fcgiwrap), because in this
    case cgit will try to do exactly this: sendfile() to a pipe.
    
    Fix this by using iter_file_splice_write for the splice_write
    method of pipes, as suggested by Christoph.
    
    Cc: stable@vger.kernel.org
    Fixes: 36e2c7421f02 ("fs: don't allow splice read/write without explicit ops")
    Suggested-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Tested-by: Johannes Berg <johannes@sipsolutions.net>
    Signed-off-by: Johannes Berg <johannes@sipsolutions.net>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 8fe62e0c0e2efa5437f3ee81b65d69e70a45ecd2
Author: Gabriel Krisman Bertazi <krisman@collabora.com>
Date:   Tue Nov 24 15:28:02 2020 -0500

    watch_queue: Drop references to /dev/watch_queue
    
    The merged API doesn't use a watch_queue device, but instead relies on
    pipes, so let the documentation reflect that.
    
    Fixes: f7e47677e39a ("watch_queue: Add a key/keyring notification facility")
    Signed-off-by: Gabriel Krisman Bertazi <krisman@collabora.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Acked-by: Jarkko Sakkinen <jarkko@kernel.org>
    Reviewed-by: Ben Boeckel <mathstuf@gmail.com>

commit 4b08d8c78360241d270396a9de6eb774e88acd00
Author: Vladimir Stempen <vladimir.stempen@amd.com>
Date:   Mon Jan 4 12:05:26 2021 -0500

    drm/amd/display: Fixed corruptions on HPDRX link loss restore
    
    [why]
    Heavy corruption or blank screen reported on wake,
    with 6k display connected and FEC enabled
    
    [how]
    When Disable/Enable stream for display pipes on HPDRX,
    DC should take into account ODM split pipes.
    
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Vladimir Stempen <vladimir.stempen@amd.com>
    Reviewed-by: Aric Cyr <Aric.Cyr@amd.com>
    Acked-by: Anson Jacob <anson.jacob@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 348fe1ca5ccdca0f8c285e2ab99004fdcd531430
Author: Sung Lee <sung.lee@amd.com>
Date:   Tue Jan 5 14:32:29 2021 -0500

    drm/amd/display: DCN2X Find Secondary Pipe properly in MPO + ODM Case
    
    [WHY]
    Previously as MPO + ODM Combine was not supported, finding secondary pipes
    for each case was mutually exclusive. Now that both are supported at the same
    time, both cases should be taken into account when finding a secondary pipe.
    
    [HOW]
    If a secondary pipe cannot be found based on previous bottom pipe,
    search for a second pipe using next_odm_pipe instead.
    
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Sung Lee <sung.lee@amd.com>
    Reviewed-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Acked-by: Anson Jacob <anson.jacob@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org # 5.10.x

commit 7a214cd84680698987d8f1dc4afe59746320c904
Author: Sung Lee <sung.lee@amd.com>
Date:   Tue Jan 5 14:32:29 2021 -0500

    drm/amd/display: DCN2X Find Secondary Pipe properly in MPO + ODM Case
    
    [WHY]
    Previously as MPO + ODM Combine was not supported, finding secondary pipes
    for each case was mutually exclusive. Now that both are supported at the same
    time, both cases should be taken into account when finding a secondary pipe.
    
    [HOW]
    If a secondary pipe cannot be found based on previous bottom pipe,
    search for a second pipe using next_odm_pipe instead.
    
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Sung Lee <sung.lee@amd.com>
    Reviewed-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Acked-by: Anson Jacob <anson.jacob@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 617ab854012c6bf4cf538194381d0282707619f7
Author: Vladimir Stempen <vladimir.stempen@amd.com>
Date:   Mon Jan 4 12:05:26 2021 -0500

    drm/amd/display: Fixed corruptions on HPDRX link loss restore
    
    [why]
    Heavy corruption or blank screen reported on wake,
    with 6k display connected and FEC enabled
    
    [how]
    When Disable/Enable stream for display pipes on HPDRX,
    DC should take into account ODM split pipes.
    
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Vladimir Stempen <vladimir.stempen@amd.com>
    Reviewed-by: Aric Cyr <Aric.Cyr@amd.com>
    Acked-by: Anson Jacob <anson.jacob@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 73644143b31cb95866c19e0d94be9e3127ec3a6b
Author: Qingqing Zhuo <qingqing.zhuo@amd.com>
Date:   Wed Dec 9 18:04:04 2020 -0500

    drm/amd/display: NULL pointer hang
    
    [Why]
    In dc_link_dp_set_test_pattern, we assume all pipes have a stream, which
    can cause null pointer dereference.
    
    [How]
    Add a null pointer check before accessing stream.
    
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
    Reviewed-by: Nicholas Kazlauskas <Nicholas.Kazlauskas@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 985faf2c4ecb606552293a5af1f0b5f99b7b1a3d
Author: Wesley Chalmers <Wesley.Chalmers@amd.com>
Date:   Mon Dec 7 11:53:46 2020 -0500

    drm/amd/display: New sequence for HUBP blank
    
    [WHY]
    DCN30 has a bug where blanking HUBP blocks pstate allow unless
    HUBP_DISABLE is toggled afterwards.
    
    [HOW]
    Create a HW sequence for blanking HUBP.
    1. Wait for enter VBLANK
    2. Set HUBP_BLANK
    3. Make sure HUBP_IN_BLANK = 1
    4. Toggle HUBP_DISABLE on and off to perform soft reset
    
    All existing calls to hubp->funcs->set_blank should be replaced with
    this new sequence.
    In wait_for_mpcc_disconnect, only blank the pipe being disconnected, and
    leave all other pipes unmodified.
    
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Wesley Chalmers <Wesley.Chalmers@amd.com>
    Reviewed-by: Jun Lei <Jun.Lei@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit ae2175641abf3285b44af0ca4af89bd69c27b6c9
Author: Chiawen Huang <chiawen.huang@amd.com>
Date:   Mon Dec 14 13:41:43 2020 +0800

    drm/amd/display: removed unnecessary check when dpp clock increasing
    
    [Why]
    When switching single pipe to split pipe, the bandwidth check is just
    for first pipe.  The 2nd pipe with abnormal(or zero) dpp clock when pipe
    ready and unlock leads the garbage on display.
    
    [How]
    Removed external increasing dpp clock check, the internal function
    already loops all of pipes to check whether update dpp clock.
    
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Chiawen Huang <chiawen.huang@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 33fd9cb8a267937e0902ade4cdefd8a008c93e65
Author: Qingqing Zhuo <qingqing.zhuo@amd.com>
Date:   Wed Dec 9 18:04:04 2020 -0500

    drm/amd/display: NULL pointer hang
    
    [Why]
    In dc_link_dp_set_test_pattern, we assume all pipes have a stream, which
    can cause null pointer dereference.
    
    [How]
    Add a null pointer check before accessing stream.
    
    Tested-by: Daniel Wheeler <daniel.wheeler@amd.com>
    Signed-off-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
    Reviewed-by: Nicholas Kazlauskas <Nicholas.Kazlauskas@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 367b619ae70d25a0ccbbb7cf97db80cf2660657a
Author: Stanimir Varbanov <stanimir.varbanov@linaro.org>
Date:   Wed Aug 26 13:35:47 2020 +0200

    media: venus: hfi_plat: Add platform ops for getting number of VPP pipes
    
    Starting from v6 we have one more hfi property which will be needed
    to calculate buffer sizes/count for particular codec and session type.
    
    Signed-off-by: Stanimir Varbanov <stanimir.varbanov@linaro.org>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit ca765c731ebd62231ec096a121ca11a39a51a07b
Merge: e240cc766523 b3304591f14b
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Thu Jan 7 12:20:28 2021 +0100

    Merge tag 'drm-intel-next-2021-01-04' of git://anongit.freedesktop.org/drm/drm-intel into drm-next
    
    - Display hotplug fix for gen2/gen3 (Chris)
    - Remove trailing semicolon (Tom)
    - Suppress display warnings for old ifwi presend on our CI (Chris)
    - OA/Perf related workaround (Lionel)
    - Replace I915_READ/WRITE per new uncore and display read/write functions (Jani)
    - PSR improvements (Jose)
    - HDR and other color changes on LSPCON (Uma, Ville)
    - FBC fixes for TGL (Uma)
    - Record plane update times for debugging (Chris)
    - Refactor panel backlight control functions (Dave)
    - Display power improvements (Imre)
    - Add VRR register definition (Manasi)
    - Atomic modeset improvements for bigjoiner pipes (Ville)
    - Switch off the scanout during driver unregister (Chris)
    - Clean-up DP's FEW enable (Manasi)
    - Fix VDSCP slice count (Manasi)
    - Fix and clean up around rc_model_size for DSC (Jani)
    - Remove Type-C noisy debug warn message (Sean)
    - Display HPD code clean-up (Ville)
    - Refactor Intel Display (Dave)
    - Start adding support for Intel's eDP backlight controls (Lyude)
    
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    
    From: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20210104211018.GA1094707@intel.com

commit 4aa9d658d21cf192fa12227591526d06fec114e0
Author: Jake Wang <haonan.wang2@amd.com>
Date:   Fri Dec 11 16:53:57 2020 -0500

    drm/amd/display: always program DPPDTO unless not safe to lower
    
    [Why]
    We defer clock updates to after pipes have been programmed. In
    some instances we use DPPCLK that have been previously set to be
    "unused". This results in a brief window of time where underflow
    could occur.
    
    [How]
    During prepare bandwidth allow rn_update_clocks_update_dpp_dto
    to check each instance and compare previous clock to new clock.
    If new clock is higher than previous clock, program DPPDTO.
    
    Signed-off-by: Jake Wang <haonan.wang2@amd.com>
    Acked-by: Bindu Ramamurthy <bindu.r@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 2151ffde188a58d7de8fc92ed5ccf38d73ffdb68
Author: Carl Huang <cjhuang@codeaurora.org>
Date:   Fri Dec 11 19:35:47 2020 +0200

    ath11k: set credit_update flag for flow controlled ep only
    
    Firmware will check all the pipes before entering WoW mode during suspend. If
    ATH11K_HTC_FLAG_NEED_CREDIT_UPDATE is set, firmware treats this pipe needed to
    return credit even though it's actually not required. If any pipe needs to
    return credit, the suspend_complete message doesn't send to host but is
    dropped.  So host gets time out and WoW suspend failed.
    
    Tested-on: QCA6390 hw2.0 PCI WLAN.HST.1.0.1-01740-QCAHSTSWPLZ_V2_TO_X86-1
    
    Signed-off-by: Carl Huang <cjhuang@codeaurora.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/1607708150-21066-8-git-send-email-kvalo@codeaurora.org

commit 72305a8080701cb4e3aff585aa90bcd5afd3bd9e
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Tue Nov 24 22:11:55 2020 +0200

    drm/i915: Properly flag modesets for all bigjoiner pipes
    
    If either of the bigjoiner pipes needs a modeset then we need
    a modeset on both pipes. Make it so.
    
    v2: Split out the kill_bigjoiner_slave() change (Manasi)
        Add affected connectors/planes
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20201124201156.17095-3-ville.syrjala@linux.intel.com
    Reviewed-by: Manasi Navare <manasi.d.navare@intel.com>

commit 46fe37b98ed8f67e3d68177eefe076fdaff643a2
Merge: 22f8c80566c4 b3bf99daaee9
Author: Dave Airlie <airlied@redhat.com>
Date:   Thu Dec 3 13:01:44 2020 +1000

    Merge tag 'drm-intel-next-queued-2020-11-27' of git://anongit.freedesktop.org/drm/drm-intel into drm-next
    
    drm/i915 features for v5.11:
    
    Highlights:
    - Enable big joiner to join two pipes to one port to overcome pipe restrictions
      (Manasi, Ville, Maarten)
    
    Display:
    - More DG1 enabling (Lucas, Aditya)
    - Fixes to cases without display (Lucas, José, Jani)
    - Initial PSR state improvements (José)
    - JSL eDP vswing updates (Tejas)
    - Handle EDID declared max 16 bpc (Ville)
    - Display refactoring (Ville)
    
    Other:
    - GVT features
    - Backmerge
    
    Signed-off-by: Dave Airlie <airlied@redhat.com>
    From: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/87czzzkk1s.fsf@intel.com

commit 6ebb6af62721767a437a4ac76736682631157985
Author: Mateusz Gorski <mateusz.gorski@linux.intel.com>
Date:   Sun Nov 29 12:41:47 2020 +0100

    ASoC: Intel: Multiple I/O PCM format support for pipe
    
    commit 1b450791d517d4d6666ab9ab6d9a20c8819e3572 upstream.
    
    For pipes supporting multiple input/output formats, kcontrol is
    created and selection of pipe input and output configuration
    is done based on control set.
    
    If more than one configuration is supported, then this patch
    allows user to select configuration of choice
    using amixer settings.
    
    Signed-off-by: Mateusz Gorski <mateusz.gorski@linux.intel.com>
    Signed-off-by: Pavan K S <pavan.k.s@intel.com>
    Reviewed-by: Cezary Rojewski <cezary.rojewski@intel.com>
    Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20200427132727.24942-3-mateusz.gorski@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>
    Cc: <stable@vger.kernel.org> # 5.4.x
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d4930b7aaefb8050229f41d19da86d3ab5c8f04f
Author: Tashfique Abdullah <tabdullah@amd.com>
Date:   Wed Nov 4 18:51:53 2020 -0500

    drm/amd/display: intermittent underflow observed when PIP is toggled in Full screen
    
    [Why]
    The MPCC may change and request data when the pipes are switching from 2
    to 1 or 1 to 2. During the switch there is a possibility of underflow
    and flicker/missing data.
    
    [How]
    During VBlank the MPCC won't request data. The trick is to delay and
    wait on VBlank, ONLY when pipes are either turning on or off, right
    before MPCC is reset for the pipes.
    
    Signed-off-by: Tashfique Abdullah <tabdullah@amd.com>
    Reviewed-by: Aric Cyr <Aric.Cyr@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 19f65a3dbf75b820914ab2fd58a90fa2ce37dc60
Author: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
Date:   Tue Nov 17 11:47:06 2020 -0800

    drm/i915: Try to make bigjoiner work in atomic check
    
     When the clock is higher than the dotclock, try with 2 pipes enabled.
     If we can enable 2, then we will go into big joiner mode, and steal
     the adjacent crtc.
    
     This only links the crtc's in software, no hardware or plane
     programming is done yet. Blobs are also copied from the master's
     crtc_state, so it doesn't depend at commit time on the other
     crtc_state.
    
    v6:
    * Enable dSC for any mode->hdisplay > 5120
    v5:
    * Remove intel_dp_max_dotclock (Manasi)
    v4:
    * Fixes in intel_crtc_compute_config (Ville)
    v3:
    * Manual Rebase (Manasi)
     Changes since v1:
     - Rename pipe timings to transcoder timings, as they are now different.
      Changes since v2:
     - Rework bigjoiner checks; always disable slave when recalculating
       master. No need to have a separate bigjoiner pass any more.
     - Use pipe_mode instead of transcoder_mode, to clean up the code.
    
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Signed-off-by: Manasi Navare <manasi.d.navare@intel.com>
    [vsyrjala:
    * hskew isn't a thing
    * Do the dsc compute if bigjoiner is enabled, not the other way around]
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Animesh Manna <animesh.manna@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20201117194718.11462-4-manasi.d.navare@intel.com

commit aceeeea38a869845675e1a001e5915b5aaa5527a
Author: Samson Tam <Samson.Tam@amd.com>
Date:   Fri Oct 30 12:30:09 2020 -0400

    drm/amd/display: fix cursor calculation for 1xnY rotated display groups
    
    [Why]
    Cursor is missing on displays 2 and up when doing rotated
     display groups in 1xnY setup.  Calculation puts cursor
     out of bounds so it is not enabled.
    
    [How]
    In dcn10_set_cursor_position(), add in viewport.y into cursor
     calculations for 1xnY rotated display groups.
    For pipe split, check viewport.y for both pipes and use lower one
     to normalize cursor position before calculations.
    Add odm 2:1 support ( using same calculations as pipe split ).
    
    Signed-off-by: Samson Tam <Samson.Tam@amd.com>
    Acked-by: Bindu Ramamurthy <bindu.r@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 82df77ae4639af747adb223fb4678e3493e4a8b8
Author: Sung Lee <sung.lee@amd.com>
Date:   Fri Oct 30 19:31:51 2020 -0400

    drm/amd/display: Populate hostvm parameter before DML calculation
    
    [Why]
    If the system does not have hostvm enabled, disabling it for
    DML validation will allow more modes to pass at lower voltage
    levels.
    
    [How]
    When initializing HostVM save state to hubbub and read back
    when populating DML pipes from context.
    
    Signed-off-by: Sung Lee <sung.lee@amd.com>
    Acked-by: Bindu Ramamurthy <bindu.r@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit dbf71381d73390d1e2cedd84eb04ea9b32fd96b3
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Nov 6 19:30:38 2020 +0200

    drm/i915: Nuke intel_atomic_crtc_state_for_each_plane_state() from skl+ wm code
    
    intel_atomic_crtc_state_for_each_plane_state() peeks at the
    plane's current state without holding the plane's mutex, trusting
    that the crtc's mutex will protect it. In practice that does work
    since our planes can't move between pipes, but it sets a bad
    example. intel_atomic_crtc_state_for_each_plane_state() also
    relies on crtc_state.uapi.plane_mask which may be full of lies
    when it comes to the bigjoiner stuff, so soon we can't use it as
    is anyway. So best to just get rid of it entirely. Which we can
    easily do by switching to the g4x/vlv "raw" watermark approach.
    
    Later on we should even be able to move the "raw" watermark
    computation into the normal .plane_check() code, leaving only
    the merging/clamping of the final watermarks to the later
    stages. But that will require adjusting the ilk+ wm code
    similarly as well.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Signed-off-by: Manasi Navare <manasi.d.navare@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20201106173042.7534-3-ville.syrjala@linux.intel.com

commit bafcdad643462471628275a120a9e2b52262559c
Author: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
Date:   Thu Nov 12 21:17:18 2020 +0200

    drm/i915: Add hw.pipe_mode to allow bigjoiner pipe/transcoder split
    
    With bigjoiner, there will be 2 pipes driving 2 halves of 1 transcoder,
    because of this, we need a pipe_mode for various calculations, including
    for example watermarks, plane clipping, etc.
    
    v10:
    * remove redundant pipe_mode assignment (Ville)
    v9:
    * pipe_mode in state dump nd state check (Ville)
    v8:
    * Add pipe_mode in readout in verify_crtc_state (Ville)
    v7:
    * Remove redundant comment (Ville)
    * Just keep mode instead of pipe_mode (Ville)
    v6:
    * renaming in separate function, only pipe_mode here (Ville)
    * Add description (Maarten)
    v5:
    * Rebase (Manasi)
    v4:
    * Manual rebase (Manasi)
    v3:
    * Change state to crtc_state, fix rebase err  (Manasi)
    v2:
    * Manual Rebase (Manasi)
    
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Signed-off-by: Manasi Navare <manasi.d.navare@intel.com>
    Reviewed-by: Animesh Manna <animesh.manna@intel.com>
    [vsyrjala:
    * Fix state checker
    * Fix state dump
    * Use pipe_mode for linetime watermarks
    * Make sure pipe_mode normal timings are correct since the
      silly ddb code uses them
    * Drop the redundant pipe_mode copies from intel_modeset_pipe_config()
      and intel_crtc_copy_uapi_to_hw_state()
    * Use drm_mode_copy() all over]
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20201112191718.16683-7-ville.syrjala@linux.intel.com

commit 4f6274b3b9a9d5395b1a5b757132a81023236808
Author: Alvin Lee <alvin.lee2@amd.com>
Date:   Fri Oct 30 13:49:46 2020 -0400

    drm/amd/display: Check other planes for iflip only if GSL already enabled
    
    [Why]
    We don't want GSL to be enabled when only updating
    plane address
    
    [How]
    Only check other pipes for immediate flip if GSL is
    already enabled
    
    Signed-off-by: Alvin Lee <alvin.lee2@amd.com>
    Acked-by: Bindu Ramamurthy <bindu.r@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit e9917ef822bdfa9b881c87934f160a3e48125f00
Author: Aric Cyr <aric.cyr@amd.com>
Date:   Thu Oct 29 17:40:51 2020 -0400

    drm/amd/display: Only wait for flip pending on immediate flips
    
    [Why]
    We want to make sure all immediate flips are completed before locking
    the pipes, but not pipes that are not flip immediate as they will be
    locked by the OTG
    
    [How]
    Skip non flip immediate pipes when checking for flip pending.
    
    Signed-off-by: Aric Cyr <aric.cyr@amd.com>
    Acked-by: Bindu Ramamurthy <bindu.r@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 568cc5f8e7b380a34c463fd4cacb12fb159231d7
Author: Alvin Lee <alvin.lee2@amd.com>
Date:   Wed Jul 29 23:08:59 2020 -0400

    drm/amd/display: Disconnect pipe separetely when disable pipe split
    
    [ Upstream commit 81b437f57e35a6caa3a4304e6fff0eba0a9f3266 ]
    
    [Why]
    When changing pixel formats for HDR (e.g. ARGB -> FP16)
    there are configurations that change from 2 pipes to 1 pipe.
    In these cases, it seems that disconnecting MPCC and doing
    a surface update at the same time(after unlocking) causes
    some registers to be updated slightly faster than others
    after unlocking (e.g. if the pixel format is updated to FP16
    before the new surface address is programmed, we get
    corruption on the screen because the pixel formats aren't
    matching). We separate disconnecting MPCC from the rest
    of  the  pipe programming sequence to prevent this.
    
    [How]
    Move MPCC disconnect into separate operation than the
    rest of the pipe programming.
    
    Signed-off-by: Alvin Lee <alvin.lee2@amd.com>
    Reviewed-by: Aric Cyr <Aric.Cyr@amd.com>
    Acked-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 73ec5680ba6351d848f9304690c3f0105142f4fd
Author: Isabel Zhang <isabel.zhang@amd.com>
Date:   Tue Oct 6 17:34:40 2020 -0400

    drm/amd/display: Revert check for flip pending before locking pipes
    
    [Why]
    Causes underflow regression
    
    [How]
    This reverts commit 99d1437aa0ac1f598e9aabca8bf0e8a40c38f8a1
    
    Signed-off-by: Isabel Zhang <isabel.zhang@amd.com>
    Acked-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit e7fc3f902d76f1c5f6e226f951a03a796e6763df
Author: Manasi Navare <manasi.d.navare@intel.com>
Date:   Thu Oct 8 14:45:26 2020 -0700

    drm/i915/display: Rename pipe_timings to transcoder_timings
    
    No functional changes in this patch.
    
    With Bigjoiner, there are 2 pipes driving 2 halfs of 1
    transcoder. The transcoder_mode has the full timings, and is used
    for configuring the transcoder with the intended mode after
    joining the 2 halves.
    To clear the confusion, we rename intel_set_pipe_timings to
    intel_set_transcoder_timings
    
    v2:
    * Split the renaming into separate patch (Ville)
    
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Manasi Navare <manasi.d.navare@intel.com>
    Reviewed-by: Animesh Manna <animesh.manna@intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20201008214535.22942-2-manasi.d.navare@intel.com

commit 4fbb3ae219d2da0e21352c4eb1af6269b832ac10
Author: Bernard Zhao <bernard@vivo.com>
Date:   Mon Oct 12 04:46:16 2020 -0700

    drm/amd/display: remove no need return value
    
    Functions (disable_all_writeback_pipes_for_stream &
    dc_enable_stereo & dc_post_update_surfaces_to_stream)
    always return true, there is no need to keep the return value.
    This change is to make the code a bit more readable.
    
    Signed-off-by: Bernard Zhao <bernard@vivo.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit f7fb81a18f026b70e42ccc95c7d4485b0cdbfbbf
Author: Aric Cyr <aric.cyr@amd.com>
Date:   Fri Sep 18 11:45:04 2020 -0400

    drm/amd/display: Check for flip pending before locking pipes
    
    [Why]
    When running games or benchmarking with v-sync disabled, disabling
    a plane (which is v-sync) can cause underflow. This is caused by
    flips pending before pipe locking being applied after locks are
    released and pipes could have been re-arranged or disconnected. This
    could potentially apply a flip on incorrect pipe. Also, previous logic
    of always locking pipes was unnecessary.
    
    [How]
    Only lock the pipes when there is a pipe being disabled to increase
    efficiency. Before the pipes are locked, check that any pending flips
    are cleared to ensure the flips are applied to the correct pipe.
    
    Signed-off-by: Aric Cyr <aric.cyr@amd.com>
    Acked-by: Eryk Brol <eryk.brol@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit d0c298030382a743d53e61d757374d8c9b8889fe
Author: Wenjing Liu <Wenjing.Liu@amd.com>
Date:   Tue Feb 18 17:11:50 2020 -0500

    drm/amd/display: fix image corruption with ODM 2:1 DSC 2 slice
    
    [ Upstream commit df8e34ac27e8a0d8dce364628226c5619693c3fd ]
    
    [why]
    When combining two or more pipes in DSC mode, there will always be more
    than 1 slice per line.  In this case, as per DSC rules, the sink device
    is expecting that the ICH is reset at the end of each slice line (i.e.
    ICH_RESET_AT_END_OF_LINE must be configured based on the number of
    slices at the output of ODM).  It is recommended that software set
    ICH_RESET_AT_END_OF_LINE = 0xF for each DSC in the ODM combine.  However
    the current code only set ICH_RESET_AT_END_OF_LINE = 0xF when number of
    slice per DSC engine is greater than 1 instead of number of slice per
    output after ODM combine.
    
    [how]
    Add is_odm in dsc config. Set ICH_RESET_AT_END_OF_LINE = 0xF if either
    is_odm or number of slice per DSC engine is greater than 1.
    
    Signed-off-by: Wenjing Liu <Wenjing.Liu@amd.com>
    Reviewed-by: Nikola Cornij <Nikola.Cornij@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d3768874e5fe410d80c45e57bff47e8e708c0516
Author: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
Date:   Mon Sep 28 17:59:38 2020 -0400

    drm/amd/display: add pipe reassignment prevention code to dcn3
    
    Add code to gracefuly handle any pipe reassignment
    occuring on dcn3 hardware. This should only happen when new
    surfaces are used for an update rather than old ones updated.
    
    Fixes: 69fc1f4b976cea ("amd/drm/display: avoid dcn3 on flip opp change for slave pipes")
    Signed-off-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Reviewed-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 69fc1f4b976ceafe91c64e1fc4ec2a2fe8b916aa
Author: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
Date:   Mon May 11 15:21:02 2020 -0400

    amd/drm/display: avoid dcn3 on flip opp change for slave pipes
    
    At the moment on flip opp reassignment does not work in all cases
    for non root pipes.
    This change simply makes sure we prefer pipes not used previously
    when splitting in dcn3.
    
    Signed-off-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Acked-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Reviewed-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Reviewed-by: Eric Bernstein <eric.bernstein@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit cbd975d0b12fca62408157ecc07379da2da8e0a5
Author: Aric Cyr <aric.cyr@amd.com>
Date:   Fri Sep 25 10:54:53 2020 -0400

    drm/amd/display: Revert check for flip pending before locking pipes
    
    Signed-off-by: Aric Cyr <aric.cyr@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 77dfb36a761b57878389661b5bd05ef7dfe01809
Author: Christian Gmeiner <christian.gmeiner@gmail.com>
Date:   Fri Aug 14 11:05:01 2020 +0200

    drm/etnaviv: rename pipe_reg_read(..)
    
    pipe_reg_read(..) iterates over all pixel pipes, selects a perf counter
    register and sums the actual perf counter value. Rename the function
    to reflect more what it is actual doing.
    
    Signed-off-by: Christian Gmeiner <christian.gmeiner@gmail.com>
    Signed-off-by: Lucas Stach <l.stach@pengutronix.de>

commit 99d1437aa0ac1f598e9aabca8bf0e8a40c38f8a1
Author: Taimur Hassan <syed.hassan@amd.com>
Date:   Thu Sep 10 10:13:42 2020 -0400

    drm/amd/display: Check for flip pending before locking pipes.
    
    [Why]
    When running a game/benchmark with v-sync disabled, disabling a plane
    (which is v-sync) can cause an underflow. This is due to flips that are
    pending before pipe locking being applied after locks are released and
    pipes have been re-arranged or disconnected. This can potentially apply
    a flip on the incorrect pipe.
    
    [How]
    Check that any pending flips are cleared before locking any pipes to
    ensure flips are applied on the correct pipes.
    
    Signed-off-by: Taimur Hassan <syed.hassan@amd.com>
    Reviewed-by: Aric Cyr <Aric.Cyr@amd.com>
    Acked-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit e8cb7a4dd9dffff72172d94dcea4577219426106
Author: Aric Cyr <aric.cyr@amd.com>
Date:   Fri Aug 21 11:26:51 2020 -0400

    drm/amd/display: Flip pending check timeout due to disabled hubp
    
    [Why]
    When pipe locks are being taken we wait for flip pending to clear first.
    In some cases the pipe mapping is changed and the pending we're checking
    for will never clear.
    
    [How]
    Don't check disabled pipes for flip pending.
    
    Signed-off-by: Aric Cyr <aric.cyr@amd.com>
    Acked-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 05e3d830fac89af58b9b6a78e5a498f2984cd2cf
Author: Wesley Chalmers <Wesley.Chalmers@amd.com>
Date:   Tue Aug 25 10:57:24 2020 -0400

    drm/amd/display: Only use offset for first ODM pipe
    
    [WHY]
    Only the first pipe in ODM combine group should have nonzero recout
    offset. All other pipes should have recout offset 0;
    otherwise there will be gaps in the image.
    
    [HOW]
    Set recout.x to 0 if the pipe is not the leftmost ODM pipe.
    
    When computing viewports, calculate the horizontal offset of a pipe's src
    based on the current pipe's position in the ODM group, plus whatever offset the
    leftmost ODM pipe has; otherwise there will be discontinuity in the image.
    
    Since ODM combine can only combine pipes horizontally, nothing needs to
    be done for recout.y.
    
    Signed-off-by: Wesley Chalmers <Wesley.Chalmers@amd.com>
    Acked-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 5e0e390d02257b9176095dd65a8b107d93499a25
Author: Jani Nikula <jani.nikula@intel.com>
Date:   Thu Sep 10 12:52:25 2020 +0300

    drm/i915: disable all display features when no display
    
    Disable all display feature flags when there are no pipes i.e. there is
    no display. This should help with not having to additionally check for
    HAS_DISPLAY() when a feature flag check would suffice.
    
    Also disable modeset and atomic driver features.
    
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200910095227.9466-1-jani.nikula@intel.com

commit c5ea3e4358772b68b0de16bfac7f5b0741acfc68
Author: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>
Date:   Wed Sep 2 14:15:08 2020 +0200

    media: atomisp: fix some bad indents
    
    As smatch reports, there are several bad indents:
    
        drivers/staging/media/atomisp/pci/hmm/hmm.c:271 hmm_alloc() warn: inconsistent indenting
        drivers/staging/media/atomisp/pci/runtime/bufq/src/bufq.c:390 ia_css_bufq_enqueue_psys_event() warn: inconsistent indenting
        drivers/staging/media/atomisp/pci/runtime/debug/src/ia_css_debug.c:2132 ia_css_debug_dump_isys_state() warn: inconsistent indenting
        drivers/staging/media/atomisp/pci/runtime/binary/src/binary.c:246 sh_css_binary_get_sc_requirements() warn: inconsistent indenting
        drivers/staging/media/atomisp/pci/runtime/binary/src/binary.c:565 ia_css_binary_get_shading_info_type_1() warn: inconsistent indenting
        drivers/staging/media/atomisp/pci/sh_css.c:5109 sh_css_pipes_stop() warn: inconsistent indenting
        drivers/staging/media/atomisp/pci/sh_css.c:8791 ia_css_pipe_create() warn: inconsistent indenting
    
    Some of them are due to ifdefs. Get rid of them by either getting
    a common code that would work for both ISP2400 and ISP2401 or
    by creating separate functions, one for each ISP version.
    
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit e93fd7a49023c16ae6da90ff8605be5d384bb81c
Author: Jens Axboe <axboe@kernel.dk>
Date:   Wed Aug 26 10:36:20 2020 -0600

    io_uring: make offset == -1 consistent with preadv2/pwritev2
    
    [ Upstream commit 0fef948363f62494d779cf9dc3c0a86ea1e5f7cd ]
    
    The man page for io_uring generally claims were consistent with what
    preadv2 and pwritev2 accept, but turns out there's a slight discrepancy
    in how offset == -1 is handled for pipes/streams. preadv doesn't allow
    it, but preadv2 does. This currently causes io_uring to return -EINVAL
    if that is attempted, but we should allow that as documented.
    
    This change makes us consistent with preadv2/pwritev2 for just passing
    in a NULL ppos for streams if the offset is -1.
    
    Cc: stable@vger.kernel.org # v5.7+
    Reported-by: Benedikt Ames <wisp3rwind@posteo.eu>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9ab83e1c4a31601a0006f8d26353012dc8876a92
Author: Jens Axboe <axboe@kernel.dk>
Date:   Tue Aug 25 12:27:50 2020 -0600

    io_uring: don't use poll handler if file can't be nonblocking read/written
    
    [ Upstream commit 9dab14b81807a40dab8e464ec87043935c562c2c ]
    
    There's no point in using the poll handler if we can't do a nonblocking
    IO attempt of the operation, since we'll need to go async anyway. In
    fact this is actively harmful, as reading from eg pipes won't return 0
    to indicate EOF.
    
    Cc: stable@vger.kernel.org # v5.7+
    Reported-by: Benedikt Ames <wisp3rwind@posteo.eu>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e408ab068aeca958b83bb6e5ca724356f8c7d78e
Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
Date:   Wed Sep 2 16:21:32 2020 -0500

    ALSA: vx: vx_pcm: remove redundant assignment
    
    Fix cppcheck warning:
    
    sound/drivers/vx/vx_pcm.c:539:30: style: Variable
    'chip->playback_pipes[audio]' is reassigned a value before the old one
    has been used. [redundantAssignment]
     chip->playback_pipes[audio] = pipe;
                                 ^
    sound/drivers/vx/vx_pcm.c:533:31: note: chip->playback_pipes[audio] is
    assigned
      chip->playback_pipes[audio] = pipe;
                                  ^
    sound/drivers/vx/vx_pcm.c:539:30: note: chip->playback_pipes[audio] is
    overwritten
     chip->playback_pipes[audio] = pipe;
                                 ^
    
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20200902212133.30964-18-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit 36e5e7042b202025f8643538c2d591cab1f24b72
Author: Sean Paul <seanpaul@chromium.org>
Date:   Tue Aug 18 11:38:57 2020 -0400

    drm/i915: Don't fully disable HDCP on a port if multiple pipes are using it
    
    This patch is required for HDCP over MST. If a port is being used for
    multiple HDCP streams, we don't want to fully disable HDCP on a port if
    one of them is disabled. Instead, we just disable the HDCP signalling on
    that particular pipe and exit early. The last pipe to disable HDCP will
    also bring down HDCP on the port.
    
    In order to achieve this, we need to keep a refcount in intel_digital_port
    and protect it using a new hdcp_mutex.
    
    Cc: Ramalingam C <ramalingam.c@intel.com>
    Reviewed-by: Ramalingam C <ramalingam.c@intel.com>
    Signed-off-by: Sean Paul <seanpaul@chromium.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191203173638.94919-8-sean@poorly.run #v1
    Link: https://patchwork.freedesktop.org/patch/msgid/20191212190230.188505-9-sean@poorly.run #v2
    Link: https://patchwork.freedesktop.org/patch/msgid/20200117193103.156821-9-sean@poorly.run #v3
    Link: https://patchwork.freedesktop.org/patch/msgid/20200218220242.107265-9-sean@poorly.run #v4
    Link: https://patchwork.freedesktop.org/patch/msgid/20200305201236.152307-9-sean@poorly.run #v5
    Link: https://patchwork.freedesktop.org/patch/msgid/20200429195502.39919-9-sean@poorly.run #v6
    Link: https://patchwork.freedesktop.org/patch/msgid/20200623155907.22961-10-sean@poorly.run #v7
    
    Changes in v2:
    -Move the toggle_signalling call into _intel_hdcp_disable so it's called from check_work
    Changes in v3:
    -None
    Changes in v4:
    -None
    Changes in v5:
    -Change WARN_ON to drm_WARN_ON
    Changes in v6:
    -None
    Changes in v7:
    -Split minor intel_hdcp_disable refactor into separate patch (Ramalingam)
    Changes in v8:
    -None
    
    Signed-off-by: Ramalingam C <ramalingam.c@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200818153910.27894-10-sean@poorly.run

commit 0fef948363f62494d779cf9dc3c0a86ea1e5f7cd
Author: Jens Axboe <axboe@kernel.dk>
Date:   Wed Aug 26 10:36:20 2020 -0600

    io_uring: make offset == -1 consistent with preadv2/pwritev2
    
    The man page for io_uring generally claims were consistent with what
    preadv2 and pwritev2 accept, but turns out there's a slight discrepancy
    in how offset == -1 is handled for pipes/streams. preadv doesn't allow
    it, but preadv2 does. This currently causes io_uring to return -EINVAL
    if that is attempted, but we should allow that as documented.
    
    This change makes us consistent with preadv2/pwritev2 for just passing
    in a NULL ppos for streams if the offset is -1.
    
    Cc: stable@vger.kernel.org # v5.7+
    Reported-by: Benedikt Ames <wisp3rwind@posteo.eu>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit e0a7a29fb37fae0d775b7178e96e56a6e362b929
Author: Paul Hsieh <paul.hsieh@amd.com>
Date:   Wed Aug 5 17:28:37 2020 +0800

    drm/amd/display: Fix DFPstate hang due to view port changed
    
    commit 8e80d482608a4e6a97c75272ef8b4bcfc5d0c490 upstream.
    
    [Why]
    Place the cursor in the center of screen between two pipes then
    adjusting the viewport but cursour doesn't update cause DFPstate hang.
    
    [How]
    If viewport changed, update cursor as well.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Paul Hsieh <paul.hsieh@amd.com>
    Reviewed-by: Aric Cyr <Aric.Cyr@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3f88e2e7a7943ef07a384f653f01832600bb91dd
Author: Paul Hsieh <paul.hsieh@amd.com>
Date:   Wed Aug 5 17:28:37 2020 +0800

    drm/amd/display: Fix DFPstate hang due to view port changed
    
    commit 8e80d482608a4e6a97c75272ef8b4bcfc5d0c490 upstream.
    
    [Why]
    Place the cursor in the center of screen between two pipes then
    adjusting the viewport but cursour doesn't update cause DFPstate hang.
    
    [How]
    If viewport changed, update cursor as well.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Paul Hsieh <paul.hsieh@amd.com>
    Reviewed-by: Aric Cyr <Aric.Cyr@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9dab14b81807a40dab8e464ec87043935c562c2c
Author: Jens Axboe <axboe@kernel.dk>
Date:   Tue Aug 25 12:27:50 2020 -0600

    io_uring: don't use poll handler if file can't be nonblocking read/written
    
    There's no point in using the poll handler if we can't do a nonblocking
    IO attempt of the operation, since we'll need to go async anyway. In
    fact this is actively harmful, as reading from eg pipes won't return 0
    to indicate EOF.
    
    Cc: stable@vger.kernel.org # v5.7+
    Reported-by: Benedikt Ames <wisp3rwind@posteo.eu>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit 2edf94272590b34c3b87c903663b940f583f85a3
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Jul 28 14:10:31 2020 +0200

    net: lan78xx: replace bogus endpoint lookup
    
    [ Upstream commit ea060b352654a8de1e070140d25fe1b7e4d50310 ]
    
    Drop the bogus endpoint-lookup helper which could end up accepting
    interfaces based on endpoints belonging to unrelated altsettings.
    
    Note that the returned bulk pipes and interrupt endpoint descriptor
    were never actually used. Instead the bulk-endpoint numbers are
    hardcoded to 1 and 2 (matching the specification), while the interrupt-
    endpoint descriptor was assumed to be the third descriptor created by
    USB core.
    
    Try to bring some order to this by dropping the bogus lookup helper and
    adding the missing endpoint sanity checks while keeping the interrupt-
    descriptor assumption for now.
    
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b3953988b0dde9e804d9e8247a93cda86ed161de
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Jul 28 14:10:31 2020 +0200

    net: lan78xx: replace bogus endpoint lookup
    
    [ Upstream commit ea060b352654a8de1e070140d25fe1b7e4d50310 ]
    
    Drop the bogus endpoint-lookup helper which could end up accepting
    interfaces based on endpoints belonging to unrelated altsettings.
    
    Note that the returned bulk pipes and interrupt endpoint descriptor
    were never actually used. Instead the bulk-endpoint numbers are
    hardcoded to 1 and 2 (matching the specification), while the interrupt-
    endpoint descriptor was assumed to be the third descriptor created by
    USB core.
    
    Try to bring some order to this by dropping the bogus lookup helper and
    adding the missing endpoint sanity checks while keeping the interrupt-
    descriptor assumption for now.
    
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7105bb40072f3f7de6e06e0a52f804b0f20aa634
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Jul 28 14:10:31 2020 +0200

    net: lan78xx: replace bogus endpoint lookup
    
    [ Upstream commit ea060b352654a8de1e070140d25fe1b7e4d50310 ]
    
    Drop the bogus endpoint-lookup helper which could end up accepting
    interfaces based on endpoints belonging to unrelated altsettings.
    
    Note that the returned bulk pipes and interrupt endpoint descriptor
    were never actually used. Instead the bulk-endpoint numbers are
    hardcoded to 1 and 2 (matching the specification), while the interrupt-
    endpoint descriptor was assumed to be the third descriptor created by
    USB core.
    
    Try to bring some order to this by dropping the bogus lookup helper and
    adding the missing endpoint sanity checks while keeping the interrupt-
    descriptor assumption for now.
    
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 172c1e8572809de8313e311614ff2baf6b936339
Author: Linus Walleij <linus.walleij@linaro.org>
Date:   Fri Jul 3 14:59:01 2020 +0200

    drm: gma500: Convert to GPIO descriptors
    
    Finalize he conversion of GMA500 to use only GPIO descriptors.
    The GPIO look-up-table is associated with the device directly
    in the GMA500 Medfield chip driver since no explicit platform
    type device (such as in x86/platform/intel-mid) exists: the
    GMA500 probes directly from the PCI device. Apparently GPIOs
    128 and 34 are used on all of these so just go ahead and
    register those for resetting the DSI pipes.
    
    Acked-by: Patrik Jakobsson <patrik.r.jakobsson@gmail.com>
    Signed-off-by: Linus Walleij <linus.walleij@linaro.org>
    Signed-off-by: Patrik Jakobsson <patrik.r.jakobsson@gmail.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200703125901.513476-1-linus.walleij@linaro.org

commit 06769a572492f56c6bcc824a17f8055ecc100136
Author: Douglas Anderson <dianders@chromium.org>
Date:   Thu May 28 07:48:34 2020 -0700

    soc: qcom: rpmh-rsc: Don't use ktime for timeout in write_tcs_reg_sync()
    
    [ Upstream commit be24c6a71ecfbd9436ea1f496eb518a53e06368c ]
    
    The write_tcs_reg_sync() may be called after timekeeping is suspended
    so it's not OK to use ktime.  The readl_poll_timeout_atomic() macro
    implicitly uses ktime.  This was causing a warning at suspend time.
    
    Change to just loop 1000000 times with a delay of 1 us between loops.
    This may give a timeout of more than 1 second but never less and is
    safe even if timekeeping is suspended.
    
    NOTE: I don't have any actual evidence that we need to loop here.
    It's possibly that all we really need to do is just read the value
    back to ensure that the pipes are cleaned and the looping/comparing is
    totally not needed.  I never saw the loop being needed in my tests.
    However, the loop shouldn't hurt.
    
    Reviewed-by: Stephen Boyd <sboyd@kernel.org>
    Reviewed-by: Maulik Shah <mkshah@codeaurora.org>
    Fixes: 91160150aba0 ("soc: qcom: rpmh-rsc: Timeout after 1 second in write_tcs_reg_sync()")
    Reported-by: Maulik Shah <mkshah@codeaurora.org>
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Link: https://lore.kernel.org/r/20200528074530.1.Ib86e5b406fe7d16575ae1bb276d650faa144b63c@changeid
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8e80d482608a4e6a97c75272ef8b4bcfc5d0c490
Author: Paul Hsieh <paul.hsieh@amd.com>
Date:   Wed Aug 5 17:28:37 2020 +0800

    drm/amd/display: Fix DFPstate hang due to view port changed
    
    [Why]
    Place the cursor in the center of screen between two pipes then
    adjusting the viewport but cursour doesn't update cause DFPstate hang.
    
    [How]
    If viewport changed, update cursor as well.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Paul Hsieh <paul.hsieh@amd.com>
    Reviewed-by: Aric Cyr <Aric.Cyr@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 6ee90e88b976743835d4f34f3234d775c733ef12
Author: hersen wu <hersenxs.wu@amd.com>
Date:   Wed Jul 8 22:14:41 2020 -0400

    drm/amd/display: PSR eDP p-state warning occurs intermittently after unplug DP
    
    [Why]
    with eDP + DP, each display use one pipe. after DP unplugged, eDP switch
    from one pipe to two pipes -- pipe split.  dpp1_cm_set_regamma_pwl will
    be executed too. The duration from switch single pipe to dual pipes is a
    little long which could let eDP enter PSR mode. upon two pipes for eDP
    are setup, eDP PHY is disabled. front pipe is not really running to
    fetch data from frame buffer. i.e., dchubp is not in normal working
    status. execution of hubbub1_wm_change_req_wa may cause p-state warning.
    
    [How]
    disable eDP PSR before dc_commit_state. psr is disabled when execute
    hubbub1_wm_change_req_wa.
    
    Signed-off-by: Hersen Wu <hersenxs.wu@amd.com>
    Reviewed-by: Roman Li <Roman.Li@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 9804ecbba8f73916101ac36929bc647c3cb17155
Author: Paul Hsieh <paul.hsieh@amd.com>
Date:   Wed Aug 5 17:28:37 2020 +0800

    drm/amd/display: Fix DFPstate hang due to view port changed
    
    [Why]
    Place the cursor in the center of screen between two pipes then
    adjusting the viewport but cursour doesn't update cause DFPstate hang.
    
    [How]
    If viewport changed, update cursor as well.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Paul Hsieh <paul.hsieh@amd.com>
    Reviewed-by: Aric Cyr <Aric.Cyr@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 633fb6ac39801514613fbe050db6abdc3fe744d5
Author: Kees Cook <keescook@chromium.org>
Date:   Tue Aug 11 18:36:26 2020 -0700

    exec: move S_ISREG() check earlier
    
    The execve(2)/uselib(2) syscalls have always rejected non-regular files.
    Recently, it was noticed that a deadlock was introduced when trying to
    execute pipes, as the S_ISREG() test was happening too late.  This was
    fixed in commit 73601ea5b7b1 ("fs/open.c: allow opening only regular files
    during execve()"), but it was added after inode_permission() had already
    run, which meant LSMs could see bogus attempts to execute non-regular
    files.
    
    Move the test into the other inode type checks (which already look for
    other pathological conditions[1]).  Since there is no need to use
    FMODE_EXEC while we still have access to "acc_mode", also switch the test
    to MAY_EXEC.
    
    Also include a comment with the redundant S_ISREG() checks at the end of
    execve(2)/uselib(2) to note that they are present to avoid any mistakes.
    
    My notes on the call path, and related arguments, checks, etc:
    
    do_open_execat()
        struct open_flags open_exec_flags = {
            .open_flag = O_LARGEFILE | O_RDONLY | __FMODE_EXEC,
            .acc_mode = MAY_EXEC,
            ...
        do_filp_open(dfd, filename, open_flags)
            path_openat(nameidata, open_flags, flags)
                file = alloc_empty_file(open_flags, current_cred());
                do_open(nameidata, file, open_flags)
                    may_open(path, acc_mode, open_flag)
                        /* new location of MAY_EXEC vs S_ISREG() test */
                        inode_permission(inode, MAY_OPEN | acc_mode)
                            security_inode_permission(inode, acc_mode)
                    vfs_open(path, file)
                        do_dentry_open(file, path->dentry->d_inode, open)
                            /* old location of FMODE_EXEC vs S_ISREG() test */
                            security_file_open(f)
                            open()
    
    [1] https://lore.kernel.org/lkml/202006041910.9EF0C602@keescook/
    
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Cc: Aleksa Sarai <cyphar@cyphar.com>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: Christian Brauner <christian.brauner@ubuntu.com>
    Cc: Dmitry Vyukov <dvyukov@google.com>
    Cc: Eric Biggers <ebiggers3@gmail.com>
    Cc: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Link: http://lkml.kernel.org/r/20200605160013.3954297-3-keescook@chromium.org
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 01f5ed845906f03b5c096f4451f9c90f8153c691
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Jul 28 14:10:31 2020 +0200

    net: lan78xx: replace bogus endpoint lookup
    
    [ Upstream commit ea060b352654a8de1e070140d25fe1b7e4d50310 ]
    
    Drop the bogus endpoint-lookup helper which could end up accepting
    interfaces based on endpoints belonging to unrelated altsettings.
    
    Note that the returned bulk pipes and interrupt endpoint descriptor
    were never actually used. Instead the bulk-endpoint numbers are
    hardcoded to 1 and 2 (matching the specification), while the interrupt-
    endpoint descriptor was assumed to be the third descriptor created by
    USB core.
    
    Try to bring some order to this by dropping the bogus lookup helper and
    adding the missing endpoint sanity checks while keeping the interrupt-
    descriptor assumption for now.
    
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3787b5a3ac67a1eb79629ba4fd19cc840b2a0f03
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Jul 28 14:10:31 2020 +0200

    net: lan78xx: replace bogus endpoint lookup
    
    [ Upstream commit ea060b352654a8de1e070140d25fe1b7e4d50310 ]
    
    Drop the bogus endpoint-lookup helper which could end up accepting
    interfaces based on endpoints belonging to unrelated altsettings.
    
    Note that the returned bulk pipes and interrupt endpoint descriptor
    were never actually used. Instead the bulk-endpoint numbers are
    hardcoded to 1 and 2 (matching the specification), while the interrupt-
    endpoint descriptor was assumed to be the third descriptor created by
    USB core.
    
    Try to bring some order to this by dropping the bogus lookup helper and
    adding the missing endpoint sanity checks while keeping the interrupt-
    descriptor assumption for now.
    
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a70de92dd44ba152c899a439389d96ac2815b02
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Jul 28 14:10:31 2020 +0200

    net: lan78xx: replace bogus endpoint lookup
    
    [ Upstream commit ea060b352654a8de1e070140d25fe1b7e4d50310 ]
    
    Drop the bogus endpoint-lookup helper which could end up accepting
    interfaces based on endpoints belonging to unrelated altsettings.
    
    Note that the returned bulk pipes and interrupt endpoint descriptor
    were never actually used. Instead the bulk-endpoint numbers are
    hardcoded to 1 and 2 (matching the specification), while the interrupt-
    endpoint descriptor was assumed to be the third descriptor created by
    USB core.
    
    Try to bring some order to this by dropping the bogus lookup helper and
    adding the missing endpoint sanity checks while keeping the interrupt-
    descriptor assumption for now.
    
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 81b437f57e35a6caa3a4304e6fff0eba0a9f3266
Author: Alvin Lee <alvin.lee2@amd.com>
Date:   Wed Jul 29 23:08:59 2020 -0400

    drm/amd/display: Disconnect pipe separetely when disable pipe split
    
    [Why]
    When changing pixel formats for HDR (e.g. ARGB -> FP16)
    there are configurations that change from 2 pipes to 1 pipe.
    In these cases, it seems that disconnecting MPCC and doing
    a surface update at the same time(after unlocking) causes
    some registers to be updated slightly faster than others
    after unlocking (e.g. if the pixel format is updated to FP16
    before the new surface address is programmed, we get
    corruption on the screen because the pixel formats aren't
    matching). We separate disconnecting MPCC from the rest
    of  the  pipe programming sequence to prevent this.
    
    [How]
    Move MPCC disconnect into separate operation than the
    rest of the pipe programming.
    
    Signed-off-by: Alvin Lee <alvin.lee2@amd.com>
    Reviewed-by: Aric Cyr <Aric.Cyr@amd.com>
    Acked-by: Qingqing Zhuo <qingqing.zhuo@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 4453fbec106b5ab69389bf48a27af228a8434b97
Author: Alvin Lee <alvin.lee2@amd.com>
Date:   Wed Jul 22 00:32:14 2020 -0400

    drm/amd/display: Separate pipe disconnect from rest of progrmaming
    
    [Why]
    When changing pixel formats for HDR (e.g. ARGB -> FP16)
    there are configurations that change from 2 pipes to 1 pipe.
    In these cases, it seems that disconnecting MPCC and doing
    a surface update at the same time(after unlocking) causes
    some registers to be updated slightly faster than others
    after unlocking (e.g. if the pixel format is updated to FP16
    before the new surface address is programmed, we get
    corruption on the screen because the pixel formats aren't
    matching). We separate disconnecting MPCC from the rest
    of  the  pipe programming sequence to prevent this.
    
    [How]
    Move MPCC disconnect into separate operation than the
    rest of the pipe programming.
    
    Signed-off-by: Alvin Lee <alvin.lee2@amd.com>
    Reviewed-by: Jun Lei <Jun.Lei@amd.com>
    Acked-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit a300de40f66b87fa90703c94ffb22917f98eb902
Author: Monk Liu <Monk.Liu@amd.com>
Date:   Mon Jul 27 15:20:12 2020 +0800

    drm/amdgpu: introduce a new parameter to configure how many KCQ we want(v5)
    
    what:
    the MQD's save and restore of KCQ (kernel compute queue)
    cost lots of clocks during world switch which impacts a lot
    to multi-VF performance
    
    how:
    introduce a paramter to control the number of KCQ to avoid
    performance drop if there is no kernel compute queue needed
    
    notes:
    this paramter only affects gfx 8/9/10
    
    v2:
    refine namings
    
    v3:
    choose queues for each ring to that try best to cross pipes evenly.
    
    v4:
    fix indentation
    some cleanupsin the gfx_compute_queue_acquire()
    
    v5:
    further fix on indentations
    more cleanupsin gfx_compute_queue_acquire()
    
    TODO:
    in the future we will let hypervisor driver to set this paramter
    automatically thus no need for user to configure it through
    modprobe in virtual machine
    
    Signed-off-by: Monk Liu <Monk.Liu@amd.com>
    Reviewed-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Acked-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 4f010246b4087ab931b060481014ec110e6a8a46
Author: Christoph Hellwig <hch@lst.de>
Date:   Thu Jul 30 18:09:00 2020 +0200

    net/bpfilter: Initialize pos in __bpfilter_process_sockopt
    
    __bpfilter_process_sockopt never initialized the pos variable passed
    to the pipe write. This has been mostly harmless in the past as pipes
    ignore the offset, but the switch to kernel_write now verified the
    position, which can lead to a failure depending on the exact stack
    initialization pattern. Initialize the variable to zero to make
    rw_verify_area happy.
    
    Fixes: 6955a76fbcd5 ("bpfilter: switch to kernel_write")
    Reported-by: Christian Brauner <christian.brauner@ubuntu.com>
    Reported-by: Rodrigo Madera <rodrigo.madera@gmail.com>
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Tested-by: Rodrigo Madera <rodrigo.madera@gmail.com>
    Tested-by: Christian Brauner <christian.brauner@ubuntu.com>
    Reviewed-by: Christian Brauner <christian.brauner@ubuntu.com>
    Link: https://lore.kernel.org/bpf/20200730160900.187157-1-hch@lst.de

commit 7b149f2bbf8cded435a182fa308066d077926470
Author: Kalyan Thota <kalyan_t@codeaurora.org>
Date:   Thu Jun 25 18:15:53 2020 +0530

    drm/msm/dpu: enumerate second cursor pipe for external interface
    
    Setup an RGB HW pipe as cursor which can be used on
    secondary interface.
    
    For SC7180 2 HW pipes are enumerated as cursors
    1 - primary interface
    2 - secondary interface
    
    Signed-off-by: Kalyan Thota <kalyan_t@codeaurora.org>
    Signed-off-by: Rob Clark <robdclark@chromium.org>

commit ea060b352654a8de1e070140d25fe1b7e4d50310
Author: Johan Hovold <johan@kernel.org>
Date:   Tue Jul 28 14:10:31 2020 +0200

    net: lan78xx: replace bogus endpoint lookup
    
    Drop the bogus endpoint-lookup helper which could end up accepting
    interfaces based on endpoints belonging to unrelated altsettings.
    
    Note that the returned bulk pipes and interrupt endpoint descriptor
    were never actually used. Instead the bulk-endpoint numbers are
    hardcoded to 1 and 2 (matching the specification), while the interrupt-
    endpoint descriptor was assumed to be the third descriptor created by
    USB core.
    
    Try to bring some order to this by dropping the bogus lookup helper and
    adding the missing endpoint sanity checks while keeping the interrupt-
    descriptor assumption for now.
    
    Signed-off-by: Johan Hovold <johan@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1cfd3426ef989b83fa6176490a38777057e57f6c
Author: Hauke Mehrtens <hauke@hauke-m.de>
Date:   Tue Jul 14 22:58:02 2020 +0200

    ath10k: Fix NULL pointer dereference in AHB device probe
    
    This fixes a NULL pointer dereference in the probe path for AHB devices.
    There attr parameter in the ath10k_ce_alloc_pipe() function is not
    initialized, but accessed. This function is called by
    ath10k_pci_setup_resource() which is called by ath10k_ahb_probe().
    
    The struct ath10k_pci is also used for AHB devices and not only for PCI
    devices.
    
    The initialization of the new members of struct ath10k_pci is moved to
    ath10k_pci_setup_resource() which is used by the PCI and the AHB code.
    
    This also fixes a use after free bug in ath10k_pci_remove() when ar_pci
    is accessed after ath10k_core_destroy() was called, which calls
    ieee80211_free_hw() and frees this memory.
    
    This fixes the following bug seen with backports-5.8-rc2 on OpenWrt on a
    IPQ4019 device:
    
    [   11.117462] 8<--- cut here ---
    [   11.117494] Unable to handle kernel NULL pointer dereference at virtual address 00000000
    [   11.119510] pgd = f377fd58
    [   11.127657] [00000000] *pgd=8e9a0835, *pte=00000000, *ppte=00000000
    [   11.130206] Internal error: Oops: 17 [#1] SMP ARM
    [   11.136339] Modules linked in: ath10k_pci(+) ath10k_core ath xt_state xt_nat xt_conntrack xt_REDIRECT xt_MASQUERADE xt_FLOWOFFLOAD pppox ppp_generic nf_nat nf_flow_table_hw nf_flow_table nf_conntrack_rtcache nf_conntrack mac80211 ipt_REJECT cfg80211 xt_time xt_tcpudp xt_multiport xt_mark xt_mac xt_limit xt_comment xt_TCPMSS xt_LOG slhc nf_reject_ipv4 nf_log_ipv4 nf_defrag_ipv6 nf_defrag_ipv4 iptable_mangle iptable_filter ip_tables crc_ccitt compat nf_log_ipv6 nf_log_common ip6table_mangle ip6table_filter ip6_tables ip6t_REJECT x_tables nf_reject_ipv6 leds_gpio xhci_plat_hcd xhci_pci xhci_hcd dwc3 dwc3_qcom gpio_button_hotplug
    [   11.174355] CPU: 2 PID: 257 Comm: kmodloader Not tainted 5.4.51 #0
    [   11.196585] Hardware name: Generic DT based system
    [   11.202746] PC is at ath10k_ce_alloc_pipe+0x58/0x180 [ath10k_core]
    [   11.207459] LR is at ath10k_pci_alloc_pipes+0x94/0xc8 [ath10k_pci]
    [   11.213600] pc : [<bf2c96cc>]    lr : [<bf2fbf98>]    psr: 80000013
    [   11.219760] sp : cea0dc90  ip : cf4001f0  fp : 00000001
    [   11.225923] r10: 00000000  r9 : 00000018  r8 : ce4963b4
    [   11.231133] r7 : 00000000  r6 : ce491ea0  r5 : 00000000  r4 : ce4963b4
    [   11.236342] r3 : 0004a000  r2 : 0004a000  r1 : bf2d0d70  r0 : 00000006
    [   11.242942] Flags: Nzcv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment none
    [   11.249452] Control: 10c5387d  Table: 8e9c006a  DAC: 00000051
    [   11.256656] Process kmodloader (pid: 257, stack limit = 0xaba286ca)
    [   11.262386] Stack: (0xcea0dc90 to 0xcea0e000)
    [   11.268462] dc80:                                     00000000 ce49629c ce491ea0 ce4963bc
    [   11.272984] dca0: ce495ea0 bf2fbf98 00000002 ce4963a8 ce495ea0 00000000 ce491ea0 cf95d800
    [   11.281142] dcc0: cf95d810 cf95d810 00000001 bf2fc854 00000000 cf95d800 bf300748 ce495ea0
    [   11.289304] dce0: ce491ea0 d1300000 cf95d800 bf2fde8c 00000000 00000001 ce49cea0 00000000
    [   11.297462] dd00: 00000000 00000000 bf3010a0 cf95d810 bf3010a0 c0b61580 00000000 00000000
    [   11.305624] dd20: bf3010a0 0000000b c0b04e48 c06110c8 c0b61588 cf95d810 c0b61580 c060f740
    [   11.313781] dd40: cf95d810 00000000 bf3010a0 00000000 00000000 ce49d2a4 bf301100 c060fc90
    [   11.321943] dd60: 00000000 bf3010a0 cf95d810 c060fcf0 cf95d810 bf3010a0 c060fc98 c060dca4
    [   11.330101] dd80: cf809d58 cf952cb4 bf3010a0 ce967900 c0b1f2c8 c060ec28 bf3007b8 bf301038
    [   11.338263] dda0: bf3010a0 bf3010a0 c0b2d4d4 ffffe000 bf304000 c0610278 c0b04e48 c0b2d4d4
    [   11.346422] ddc0: ffffe000 bf2fe2b4 c0b04e48 bf30403c c0b04e48 c0302764 8040003f 00000001
    [   11.354582] dde0: 38e38e39 ce513580 c0b2cb50 cf801e00 cffbc6ac ce513600 cf801e00 cffbc6ac
    [   11.362740] de00: 8040003e ce49d280 00000001 c0428d54 00000001 cf801e00 cffbc6ac ce513580
    [   11.370900] de20: ce49d280 0e391998 bf301100 ce49d340 d12d2000 ce49d280 00000001 c0398c2c
    [   11.379061] de40: 00000001 cea0df34 cea0df34 00000001 d12d2000 c039ae48 bf30110c 00007fff
    [   11.387221] de60: bf301100 c0398044 cf804028 bf301148 c0397674 bf30126c c08ee5c0 c08ee70c
    [   11.395380] de80: bf30110c c0b04e48 c08ee518 00000000 c08ee570 c0b04e48 ce513600 fffff000
    [   11.403540] dea0: 00000001 ce513580 0000000d 0000000d 00000000 00000000 00000000 00000000
    [   11.411698] dec0: 00000000 00000000 6e72656b 00006c65 00000000 00000000 00000000 00000000
    [   11.419858] dee0: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
    [   11.428018] df00: 00000000 0e391998 00000000 0000c610 d12de610 00000000 0062c620 ffffe000
    [   11.436180] df20: 000129d1 00000051 00000000 c039b228 00000000 d12d7afd d12d8e80 d12d2000
    [   11.444337] df40: 0000c610 d12de0e8 d12ddfa8 d12dab74 00009000 00009570 00003a2c 00009cae
    [   11.452498] df60: 00000000 00000000 00000000 00003a1c 0000001e 0000001f 00000018 00000000
    [   11.460656] df80: 00000010 00000000 00000000 00000000 00000003 00000080 c0301204 cea0c000
    [   11.468817] dfa0: 00000080 c0301000 00000000 00000000 00620010 0000c610 000129d1 00000014
    [   11.476975] dfc0: 00000000 00000000 00000003 00000080 0000c610 00000000 b6fc1d20 00000000
    [   11.485137] dfe0: bef0ad14 bef0acf8 00011e14 b6f74c94 60000010 00620010 00000000 00000000
    [   11.493390] [<bf2c96cc>] (ath10k_ce_alloc_pipe [ath10k_core]) from [<bf2fbf98>] (ath10k_pci_alloc_pipes+0x94/0xc8 [ath10k_pci])
    [   11.501498] [<bf2fbf98>] (ath10k_pci_alloc_pipes [ath10k_pci]) from [<bf2fc854>] (ath10k_pci_setup_resource+0xb8/0xf0 [ath10k_pci])
    [   11.512773] [<bf2fc854>] (ath10k_pci_setup_resource [ath10k_pci]) from [<bf2fde8c>] (ath10k_ahb_probe+0x32c/0x670 [ath10k_pci])
    [   11.524566] [<bf2fde8c>] (ath10k_ahb_probe [ath10k_pci]) from [<c06110c8>] (platform_drv_probe+0x34/0x70)
    [   11.536016] [<c06110c8>] (platform_drv_probe) from [<c060f740>] (really_probe+0x1f0/0x358)
    [   11.545729] [<c060f740>] (really_probe) from [<c060fc90>] (device_driver_attach+0x58/0x60)
    [   11.553886] [<c060fc90>] (device_driver_attach) from [<c060fcf0>] (__driver_attach+0x58/0xcc)
    [   11.562134] [<c060fcf0>] (__driver_attach) from [<c060dca4>] (bus_for_each_dev+0x68/0x8c)
    [   11.570731] [<c060dca4>] (bus_for_each_dev) from [<c060ec28>] (bus_add_driver+0x1c8/0x1d8)
    [   11.578886] [<c060ec28>] (bus_add_driver) from [<c0610278>] (driver_register+0x74/0x108)
    [   11.587060] [<c0610278>] (driver_register) from [<bf2fe2b4>] (ath10k_ahb_init+0x18/0x38 [ath10k_pci])
    [   11.595320] [<bf2fe2b4>] (ath10k_ahb_init [ath10k_pci]) from [<bf30403c>] (init_module+0x3c/0x1000 [ath10k_pci])
    [   11.604432] [<bf30403c>] (init_module [ath10k_pci]) from [<c0302764>] (do_one_initcall+0x84/0x1d8)
    [   11.614657] [<c0302764>] (do_one_initcall) from [<c0398c2c>] (do_init_module+0x5c/0x228)
    [   11.623421] [<c0398c2c>] (do_init_module) from [<c039ae48>] (load_module+0x1fc8/0x224c)
    [   11.631663] [<c039ae48>] (load_module) from [<c039b228>] (sys_init_module+0x15c/0x17c)
    [   11.639390] [<c039b228>] (sys_init_module) from [<c0301000>] (ret_fast_syscall+0x0/0x54)
    [   11.647370] Exception stack(0xcea0dfa8 to 0xcea0dff0)
    [   11.655615] dfa0:                   00000000 00000000 00620010 0000c610 000129d1 00000014
    [   11.660569] dfc0: 00000000 00000000 00000003 00000080 0000c610 00000000 b6fc1d20 00000000
    [   11.668725] dfe0: bef0ad14 bef0acf8 00011e14 b6f74c94
    [   11.676886] Code: e1c321d4 e0433002 e0232397 e5843014 (e5953000)
    [   11.681958] ---[ end trace 8f35917de2e76854 ]---
    
    Fixes: 521fc37be3d8 ("ath10k: Avoid override CE5 configuration for QCA99X0 chipsets")
    Reported-by: Stefan Lippers-Hollmann <s.l-h@gmx.de> [ipq40xx/ map-ac2200]
    Signed-off-by: Hauke Mehrtens <hauke@hauke-m.de>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200714205802.17688-1-hauke@hauke-m.de

commit 71d734103edfa2b4c6657578a3082ee0e51d767e
Author: Mel Gorman <mgorman@techsingularity.net>
Date:   Wed Jul 8 14:11:36 2020 +0300

    fsnotify: Rearrange fast path to minimise overhead when there is no watcher
    
    The fsnotify paths are trivial to hit even when there are no watchers and
    they are surprisingly expensive. For example, every successful vfs_write()
    hits fsnotify_modify which calls both fsnotify_parent and fsnotify unless
    FMODE_NONOTIFY is set which is an internal flag invisible to userspace.
    As it stands, fsnotify_parent is a guaranteed functional call even if there
    are no watchers and fsnotify() does a substantial amount of unnecessary
    work before it checks if there are any watchers. A perf profile showed
    that applying mnt->mnt_fsnotify_mask in fnotify() was almost half of the
    total samples taken in that function during a test. This patch rearranges
    the fast paths to reduce the amount of work done when there are no
    watchers.
    
    The test motivating this was "perf bench sched messaging --pipe". Despite
    the fact the pipes are anonymous, fsnotify is still called a lot and
    the overhead is noticeable even though it's completely pointless. It's
    likely the overhead is negligible for real IO so this is an extreme
    example. This is a comparison of hackbench using processes and pipes on
    a 1-socket machine with 8 CPU threads without fanotify watchers.
    
                                  5.7.0                  5.7.0
                                vanilla      fastfsnotify-v1r1
    Amean     1       0.4837 (   0.00%)      0.4630 *   4.27%*
    Amean     3       1.5447 (   0.00%)      1.4557 (   5.76%)
    Amean     5       2.6037 (   0.00%)      2.4363 (   6.43%)
    Amean     7       3.5987 (   0.00%)      3.4757 (   3.42%)
    Amean     12      5.8267 (   0.00%)      5.6983 (   2.20%)
    Amean     18      8.4400 (   0.00%)      8.1327 (   3.64%)
    Amean     24     11.0187 (   0.00%)     10.0290 *   8.98%*
    Amean     30     13.1013 (   0.00%)     12.8510 (   1.91%)
    Amean     32     13.9190 (   0.00%)     13.2410 (   4.87%)
    
                           5.7.0       5.7.0
                         vanilla fastfsnotify-v1r1
    Duration User         157.05      152.79
    Duration System      1279.98     1219.32
    Duration Elapsed      182.81      174.52
    
    This is showing that the latencies are improved by roughly 2-9%. The
    variability is not shown but some of these results are within the noise
    as this workload heavily overloads the machine. That said, the system CPU
    usage is reduced by quite a bit so it makes sense to avoid the overhead
    even if it is a bit tricky to detect at times. A perf profile of just 1
    group of tasks showed that 5.14% of samples taken were in either fsnotify()
    or fsnotify_parent(). With the patch, 2.8% of samples were in fsnotify,
    mostly function entry and the initial check for watchers.  The check for
    watchers is complicated enough that inlining it may be controversial.
    
    [Amir] Slightly simplify with mnt_or_sb_mask => marks_mask
    
    Link: https://lore.kernel.org/r/20200708111156.24659-1-amir73il@gmail.com
    Signed-off-by: Mel Gorman <mgorman@techsingularity.net>
    Signed-off-by: Amir Goldstein <amir73il@gmail.com>
    Signed-off-by: Jan Kara <jack@suse.cz>

commit 8fe684e97c86e35f7e5128e756369df5b72e3dd8
Author: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
Date:   Mon Jul 13 10:41:23 2020 -0400

    drm/amd/display: Allow for vblank enabled with no active planes
    
    [Why]
    CRC capture doesn't work when the active plane count is 0 since we
    currently tie both vblank and pageflip interrupts to active_plane_count
    greater than 0.
    
    [How]
    The frontend is what generates the vblank interrupts while the backend
    is what generates pageflip interrupts. Both have a requirement for
    the CRTC to be active, so control the overall interrupt state based
    on that instead.
    
    Pageflip interrupts need to be enabled based on active plane count, but
    we actually rely on power gating to take care of disabling the interrupt
    for us on pipes that can be power gated.
    
    For pipes that can't be power gated it's still fine to leave it enabled
    since the interrupt only triggers after the address has been written
    to that particular pipe - which we won't be doing without an active
    plane.
    
    The issue we had before with this setup was that we couldn't force
    the state back on. We were essentially manipulating the refcount
    to enable or disable as needed in a two pass approach.
    
    However, there is a function that solves this problem more elegantly:
    amdgpu_irq_update() will unconditionally call the set based on what it
    thinks the current enablement state is.
    
    This leaves two future TODO items for our IRQ handling:
    - Disabling IRQs in commit tail instead of atomic commit
    - Mapping the pageflip interrupt to VUPDATE or something that's tied to
      the frontend instead of the backend since the mapping to CRTC is not
      correct
    
    Signed-off-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Reviewed-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 6955a76fbcd56d27c84c01353101048e366d070f
Author: Christoph Hellwig <hch@lst.de>
Date:   Wed May 13 08:46:58 2020 +0200

    bpfilter: switch to kernel_write
    
    While pipes don't really need sb_writers projection, __kernel_write is an
    interface better kept private, and the additional rw_verify_area does not
    hurt here.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>

commit 13c164b1a186dfe17d104d9638b86a06be1e40bf
Author: Christoph Hellwig <hch@lst.de>
Date:   Wed May 13 08:45:59 2020 +0200

    autofs: switch to kernel_write
    
    While pipes don't really need sb_writers projection, __kernel_write is an
    interface better kept private, and the additional rw_verify_area does not
    hurt here.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Acked-by: Ian Kent <raven@themaw.net>

commit 0f782777f05ded1bb9694aed250bc74f25f0c91b
Author: Martin Leung <martin.leung@amd.com>
Date:   Fri May 29 13:51:57 2020 -0400

    drm/amd/display: enable seamless boot for dcn30
    
    why:
    seamless boots requires split of init_hw into hw and pipes to work. This
    was implemented in dcn10_init_hw but did not apply yet to dcn30.
    
    how:
    Copy over dcn10_init_hw and adapt it to dcn30 using recent changes to
    dcn3.  Behavior will be different in init sequence.
    
    Signed-off-by: Martin Leung <martin.leung@amd.com>
    Reviewed-by: Anthony Koo <Anthony.Koo@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit d2e0d8263b7ad40b80bf4d6bf9583c200c17f6ab
Author: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
Date:   Thu Jun 4 11:07:46 2020 -0400

    drm/amd/display: Fix DML failures caused by doubled stereo viewport
    
    [Why]
    Side-by-side and Top-and-bottom stereo configurations fail DML mode
    validation due to Viewport exceeded.
    
    This is because we consider the planes as being pipe split in pipe
    population so we end up doubling the viewport width, eg. from 4k to 8k.
    
    [How]
    These pipes technically aren't hsplit, so add a check for determining
    whether is_hsplit should be set.
    
    Signed-off-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Reviewed-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit be24c6a71ecfbd9436ea1f496eb518a53e06368c
Author: Douglas Anderson <dianders@chromium.org>
Date:   Thu May 28 07:48:34 2020 -0700

    soc: qcom: rpmh-rsc: Don't use ktime for timeout in write_tcs_reg_sync()
    
    The write_tcs_reg_sync() may be called after timekeeping is suspended
    so it's not OK to use ktime.  The readl_poll_timeout_atomic() macro
    implicitly uses ktime.  This was causing a warning at suspend time.
    
    Change to just loop 1000000 times with a delay of 1 us between loops.
    This may give a timeout of more than 1 second but never less and is
    safe even if timekeeping is suspended.
    
    NOTE: I don't have any actual evidence that we need to loop here.
    It's possibly that all we really need to do is just read the value
    back to ensure that the pipes are cleaned and the looping/comparing is
    totally not needed.  I never saw the loop being needed in my tests.
    However, the loop shouldn't hurt.
    
    Reviewed-by: Stephen Boyd <sboyd@kernel.org>
    Reviewed-by: Maulik Shah <mkshah@codeaurora.org>
    Fixes: 91160150aba0 ("soc: qcom: rpmh-rsc: Timeout after 1 second in write_tcs_reg_sync()")
    Reported-by: Maulik Shah <mkshah@codeaurora.org>
    Signed-off-by: Douglas Anderson <dianders@chromium.org>
    Link: https://lore.kernel.org/r/20200528074530.1.Ib86e5b406fe7d16575ae1bb276d650faa144b63c@changeid
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>

commit 21b7c6033823d3888a195a24271cbea34279dd62
Author: Dale Zhao <dale.zhao@amd.com>
Date:   Fri Mar 27 20:11:55 2020 +0800

    drm/amd/display: Correct updating logic of dcn21's pipe VM flags
    
    [ Upstream commit 2a28fe92220a116735ef45939b7edcfee83cc6b0 ]
    
    [Why]:
    Renoir's pipe VM flags are not correctly updated if pipe strategy has
    changed during some scenarios. It will result in watermarks mistakenly
    calculation, thus underflow and garbage appear.
    
    [How]:
    Correctly update pipe VM flags to pipes which have been populated.
    
    Signed-off-by: Dale Zhao <dale.zhao@amd.com>
    Signed-off-by: Sung Lee <sung.lee@amd.com>
    Reviewed-by: Yongqiang Sun <yongqiang.sun@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e9c15badbb7b20ccdbadf5da14e0a68fbad51015
Author: Mel Gorman <mgorman@techsingularity.net>
Date:   Mon Jun 15 13:13:58 2020 +0100

    fs: Do not check if there is a fsnotify watcher on pseudo inodes
    
    The kernel uses internal mounts created by kern_mount() and populated
    with files with no lookup path by alloc_file_pseudo() for a variety of
    reasons. An example of such a mount is for anonymous pipes. For pipes,
    every vfs_write() regardless of filesystem, calls fsnotify_modify()
    to notify of any changes which incurs a small amount of overhead in
    fsnotify even when there are no watchers. It can also trigger for reads
    and readv and writev, it was simply vfs_write() that was noticed first.
    
    A patch is pending that reduces, but does not eliminate, the overhead of
    fsnotify but for files that cannot be looked up via a path, even that
    small overhead is unnecessary. The user API for all notification
    subsystems (inotify, fanotify, ...) is based on the pathname and a dirfd
    and proc entries appear to be the only visible representation of the
    files. Proc does not have the same pathname as the internal entry and
    the proc inode is not the same as the internal inode so even if fanotify
    is used on a file under /proc/XX/fd, no useful events are notified.
    
    This patch changes alloc_file_pseudo() to always opt out of fsnotify by
    setting FMODE_NONOTIFY flag so that no check is made for fsnotify
    watchers on pseudo files. This should be safe as the underlying helper
    for the dentry is d_alloc_pseudo() which explicitly states that no
    lookups are ever performed meaning that fanotify should have nothing
    useful to attach to.
    
    The test motivating this was "perf bench sched messaging --pipe". On
    a single-socket machine using threads the difference of the patch was
    as follows.
    
                                  5.7.0                  5.7.0
                                vanilla        nofsnotify-v1r1
    Amean     1       1.3837 (   0.00%)      1.3547 (   2.10%)
    Amean     3       3.7360 (   0.00%)      3.6543 (   2.19%)
    Amean     5       5.8130 (   0.00%)      5.7233 *   1.54%*
    Amean     7       8.1490 (   0.00%)      7.9730 *   2.16%*
    Amean     12     14.6843 (   0.00%)     14.1820 (   3.42%)
    Amean     18     21.8840 (   0.00%)     21.7460 (   0.63%)
    Amean     24     28.8697 (   0.00%)     29.1680 (  -1.03%)
    Amean     30     36.0787 (   0.00%)     35.2640 *   2.26%*
    Amean     32     38.0527 (   0.00%)     38.1223 (  -0.18%)
    
    The difference is small but in some cases it's outside the noise so
    while marginal, there is still some small benefit to ignoring fsnotify
    for files allocated via alloc_file_pseudo() in some cases.
    
    Link: https://lore.kernel.org/r/20200615121358.GF3183@techsingularity.net
    Signed-off-by: Mel Gorman <mgorman@techsingularity.net>
    Reviewed-by: Amir Goldstein <amir73il@gmail.com>
    Signed-off-by: Jan Kara <jack@suse.cz>

commit 6c3297841472b4e53e22e53826eea9e483d993e5
Merge: df2fbf5bfa0e a8478a602913
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Jun 13 09:56:21 2020 -0700

    Merge tag 'notifications-20200601' of git://git.kernel.org/pub/scm/linux/kernel/git/dhowells/linux-fs
    
    Pull notification queue from David Howells:
     "This adds a general notification queue concept and adds an event
      source for keys/keyrings, such as linking and unlinking keys and
      changing their attributes.
    
      Thanks to Debarshi Ray, we do have a pull request to use this to fix a
      problem with gnome-online-accounts - as mentioned last time:
    
         https://gitlab.gnome.org/GNOME/gnome-online-accounts/merge_requests/47
    
      Without this, g-o-a has to constantly poll a keyring-based kerberos
      cache to find out if kinit has changed anything.
    
      [ There are other notification pending: mount/sb fsinfo notifications
        for libmount that Karel Zak and Ian Kent have been working on, and
        Christian Brauner would like to use them in lxc, but let's see how
        this one works first ]
    
      LSM hooks are included:
    
       - A set of hooks are provided that allow an LSM to rule on whether or
         not a watch may be set. Each of these hooks takes a different
         "watched object" parameter, so they're not really shareable. The
         LSM should use current's credentials. [Wanted by SELinux & Smack]
    
       - A hook is provided to allow an LSM to rule on whether or not a
         particular message may be posted to a particular queue. This is
         given the credentials from the event generator (which may be the
         system) and the watch setter. [Wanted by Smack]
    
      I've provided SELinux and Smack with implementations of some of these
      hooks.
    
      WHY
      ===
    
      Key/keyring notifications are desirable because if you have your
      kerberos tickets in a file/directory, your Gnome desktop will monitor
      that using something like fanotify and tell you if your credentials
      cache changes.
    
      However, we also have the ability to cache your kerberos tickets in
      the session, user or persistent keyring so that it isn't left around
      on disk across a reboot or logout. Keyrings, however, cannot currently
      be monitored asynchronously, so the desktop has to poll for it - not
      so good on a laptop. This facility will allow the desktop to avoid the
      need to poll.
    
      DESIGN DECISIONS
      ================
    
       - The notification queue is built on top of a standard pipe. Messages
         are effectively spliced in. The pipe is opened with a special flag:
    
            pipe2(fds, O_NOTIFICATION_PIPE);
    
         The special flag has the same value as O_EXCL (which doesn't seem
         like it will ever be applicable in this context)[?]. It is given up
         front to make it a lot easier to prohibit splice&co from accessing
         the pipe.
    
         [?] Should this be done some other way?  I'd rather not use up a new
             O_* flag if I can avoid it - should I add a pipe3() system call
             instead?
    
         The pipe is then configured::
    
            ioctl(fds[1], IOC_WATCH_QUEUE_SET_SIZE, queue_depth);
            ioctl(fds[1], IOC_WATCH_QUEUE_SET_FILTER, &filter);
    
         Messages are then read out of the pipe using read().
    
       - It should be possible to allow write() to insert data into the
         notification pipes too, but this is currently disabled as the
         kernel has to be able to insert messages into the pipe *without*
         holding pipe->mutex and the code to make this work needs careful
         auditing.
    
       - sendfile(), splice() and vmsplice() are disabled on notification
         pipes because of the pipe->mutex issue and also because they
         sometimes want to revert what they just did - but one or more
         notification messages might've been interleaved in the ring.
    
       - The kernel inserts messages with the wait queue spinlock held. This
         means that pipe_read() and pipe_write() have to take the spinlock
         to update the queue pointers.
    
       - Records in the buffer are binary, typed and have a length so that
         they can be of varying size.
    
         This allows multiple heterogeneous sources to share a common
         buffer; there are 16 million types available, of which I've used
         just a few, so there is scope for others to be used. Tags may be
         specified when a watchpoint is created to help distinguish the
         sources.
    
       - Records are filterable as types have up to 256 subtypes that can be
         individually filtered. Other filtration is also available.
    
       - Notification pipes don't interfere with each other; each may be
         bound to a different set of watches. Any particular notification
         will be copied to all the queues that are currently watching for it
         - and only those that are watching for it.
    
       - When recording a notification, the kernel will not sleep, but will
         rather mark a queue as having lost a message if there's
         insufficient space. read() will fabricate a loss notification
         message at an appropriate point later.
    
       - The notification pipe is created and then watchpoints are attached
         to it, using one of:
    
            keyctl_watch_key(KEY_SPEC_SESSION_KEYRING, fds[1], 0x01);
            watch_mount(AT_FDCWD, "/", 0, fd, 0x02);
            watch_sb(AT_FDCWD, "/mnt", 0, fd, 0x03);
    
         where in both cases, fd indicates the queue and the number after is
         a tag between 0 and 255.
    
       - Watches are removed if either the notification pipe is destroyed or
         the watched object is destroyed. In the latter case, a message will
         be generated indicating the enforced watch removal.
    
      Things I want to avoid:
    
       - Introducing features that make the core VFS dependent on the
         network stack or networking namespaces (ie. usage of netlink).
    
       - Dumping all this stuff into dmesg and having a daemon that sits
         there parsing the output and distributing it as this then puts the
         responsibility for security into userspace and makes handling
         namespaces tricky. Further, dmesg might not exist or might be
         inaccessible inside a container.
    
       - Letting users see events they shouldn't be able to see.
    
      TESTING AND MANPAGES
      ====================
    
       - The keyutils tree has a pipe-watch branch that has keyctl commands
         for making use of notifications. Proposed manual pages can also be
         found on this branch, though a couple of them really need to go to
         the main manpages repository instead.
    
         If the kernel supports the watching of keys, then running "make
         test" on that branch will cause the testing infrastructure to spawn
         a monitoring process on the side that monitors a notifications pipe
         for all the key/keyring changes induced by the tests and they'll
         all be checked off to make sure they happened.
    
            https://git.kernel.org/pub/scm/linux/kernel/git/dhowells/keyutils.git/log/?h=pipe-watch
    
       - A test program is provided (samples/watch_queue/watch_test) that
         can be used to monitor for keyrings, mount and superblock events.
         Information on the notifications is simply logged to stdout"
    
    * tag 'notifications-20200601' of git://git.kernel.org/pub/scm/linux/kernel/git/dhowells/linux-fs:
      smack: Implement the watch_key and post_notification hooks
      selinux: Implement the watch_key security hook
      keys: Make the KEY_NEED_* perms an enum rather than a mask
      pipe: Add notification lossage handling
      pipe: Allow buffers to be marked read-whole-or-error for notifications
      Add sample notification program
      watch_queue: Add a key/keyring notification facility
      security: Add hooks to rule on setting a watch
      pipe: Add general notification queue support
      pipe: Add O_NOTIFICATION_PIPE
      security: Add a hook for the point of notification insertion
      uapi: General notification queue definitions

commit 562ddcb7485432b2526fe6e158f7ef58631e4d99
Author: Matt Roper <matthew.d.roper@intel.com>
Date:   Wed Jun 3 14:15:23 2020 -0700

    drm/i915/rkl: Don't try to access transcoder D
    
    There are a couple places in our driver that loop over transcoders A..D
    for gen11+; since RKL only has three pipes/transcoders, this can lead to
    unclaimed register reads/writes.  We should add checks for transcoder
    existence where appropriate.
    
    v2: Move one transcoder check that wound up in the wrong function after
        conflict resolution.  It belongs in bdw_get_trans_port_sync_config
        rather than bxt_get_dsi_transcoder_state.
    
    v3: Switch loops to use for_each_cpu_transcoder_masked() since this
        iterator already checks the platform's transcoder mask for us.
        (Ville)
    
    Cc: Aditya Swarup <aditya.swarup@intel.com>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200603211529.3005059-10-matthew.d.roper@intel.com
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>

commit 19aefbc778b8b8e87c2d31be9736c634f0ea95a8
Author: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
Date:   Mon Jun 1 20:30:58 2020 +0300

    drm/i915: Fix wrong CDCLK adjustment changes
    
    Previous patch didn't take into account all pipes
    but only those in state, which could cause wrong
    CDCLK conclcusions and calculations.
    Also there was a severe issue with min_cdclk being
    assigned to 0 every compare cycle.
    
    Too bad this was found by me only after merge.
    This could be also causing the issues in test, however
    not clear - anyway marking this as fixing the
    "Adjust CDCLK accordingly to our DBuf bw needs".
    
    v2: - s/pipe/crtc->pipe/
        - save a bit of instructions by
          skipping inactive pipes, without
          getting 0 DBuf slice mask for it.
    
    Signed-off-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Fixes: cd1915460861 ("drm/i915: Adjust CDCLK accordingly to our DBuf bw needs")
    Reviewed-by: Manasi Navare <manasi.d.navare@intel.com>
    Signed-off-by: Manasi Navare <manasi.d.navare@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200601173058.5084-1-stanislav.lisovskiy@intel.com

commit e95e79749b32b83b4941f28294204be1be3fa3a8
Author: Matt Roper <matthew.d.roper@intel.com>
Date:   Wed Jun 3 14:15:15 2020 -0700

    drm/i915/rkl: Set transcoder mask properly
    
    Although we properly captured RKL's three pipes in the device info
    structure, we forgot to make the corresponding update to the transcoder
    mask.  Set this field so that our transcoder loops will operate
    properly.
    
    Fixes: 123f62de419f ("drm/i915/rkl: Add RKL platform info and PCI ids")
    Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200603211529.3005059-2-matthew.d.roper@intel.com
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>

commit f64b2e49912ac953b318f6f3f043c22d68a70b49
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Wed Aug 9 19:55:24 2017 +0900

    usb: renesas_usbhs: gadget: fix spin_lock_init() for &uep->lock
    
    commit 14a8d4bfc2102f85ce097563d151370c91c1898a upstream.
    
    This patch fixes an issue that the spin_lock_init() is not called
    for almost all pipes. Otherwise, the lockdep output the following
    message when we connect a usb cable using g_ncm:
    
     INFO: trying to register non-static key.
     the code is fine but needs lockdep annotation.
     turning off the locking correctness validator.
    
    Reported-by: Kazuya Mizuguchi <kazuya.mizuguchi.ks@renesas.com>
    Fixes: b8b9c974afee ("usb: renesas_usbhs: gadget: disable all eps when the driver stops")
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Tested-by: Kazuya Mizuguchi <kazuya.mizuguchi.ks@renesas.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Cc: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2a4b3dc9c50ea95157715dee1fa8d06730cf159c
Author: Roman Li <roman.li@amd.com>
Date:   Wed Feb 26 17:30:29 2020 -0500

    drm/amd/display: fix counter in wait_for_no_pipes_pending
    
    [ Upstream commit 80797dd6f1a525d1160c463d6a9f9d29af182cbb ]
    
    [Why]
    Wait counter is not being reset for each pipe.
    
    [How]
    Move counter reset into pipe loop scope.
    
    Signed-off-by: Roman Li <roman.li@amd.com>
    Reviewed-by: Zhan Liu <Zhan.Liu@amd.com>
    Acked-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 281e3aea35e521a90b0b05face3196da23758092
Author: Serge Semin <Sergey.Semin@baikalelectronics.ru>
Date:   Thu May 21 17:07:15 2020 +0300

    mips: Add MIPS Warrior P5600 support
    
    This is a MIPS32 Release 5 based IP core with XPA, EVA, dual/quad issue
    exec pipes, MMU with two-levels TLB, UCA, MSA, MDU core level features
    and system level features like up to six P5600 calculation cores, CM2
    with L2 cache, IOCU/IOMMU (though might be unused depending on the
    system-specific IP core configuration), GIC, CPC, virtualisation module,
    eJTAG and PDtrace.
    
    As being MIPS32 Release 5 based core it provides all the features
    available by the CPU_MIPS32_R5 config, while adding a few more like
    UCA attribute support, availability of CPU-freq (by means of L2/CM
    clock ratio setting), EI/VI GIC modes detection at runtime.
    
    In addition to this if P5600 architecture is enabled modern GNU GCC
    provides a specific tuning for P5600 processors with respect to the
    classic MIPS32 Release 5. First of all branch-likely avoidance is
    activated only when the code is compiled with the speed optimization
    (avoidance is always enabled for the pure MIPS32 Release 5
    architecture). Secondly the madd/msub avoidance is enabled since
    madd/msub utilization isn't profitable due to overhead of getting the
    result out of the HI/LO registers. Multiply-accumulate instructions are
    activated and utilized together with the necessary code reorder when
    multiply-add/multiply-subtract statements are met. Finally load/store
    bonding is activated by default. All of these optimizations may make
    the code relatively faster than if just MIP32 release 5 architecture
    was requested.
    
    Co-developed-by: Alexey Malahov <Alexey.Malahov@baikalelectronics.ru>
    Signed-off-by: Alexey Malahov <Alexey.Malahov@baikalelectronics.ru>
    Signed-off-by: Serge Semin <Sergey.Semin@baikalelectronics.ru>
    Cc: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Cc: Paul Burton <paulburton@kernel.org>
    Cc: Ralf Baechle <ralf@linux-mips.org>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: devicetree@vger.kernel.org
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>

commit b6dbb8ff9dbfdf55ee88e668099d9d7517f109a5
Author: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
Date:   Wed May 6 14:21:35 2020 -0400

    drm/amd/display: Avoid pipe split when plane is too small
    
    [Why]
    The minimum plane size we can support in DML is 16x16. If we try to pass
    a 16x16 plane with dynamic pipe split then validation will fail since it
    tries to split it into two pipes, each 8x8.
    
    Some userspace doesn't check that the commit fails and because the
    commit fails the old state is retained, resulting in corruption.
    
    [How]
    Add a workaround to avoid pipe split if any plane is 16x16 or smaller.
    
    Signed-off-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Reviewed-by: Aric Cyr <Aric.Cyr@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 570bc18c2966b05f556bedca24245a497db5ed13
Author: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
Date:   Mon Apr 27 14:55:08 2020 -0400

    drm/amd/display: fix and simplify pipe split logic
    
    Current odm/mpc combine logic to detect which pipes need to split
    logically is flawed leading to incorrect pipe merge/split operations
    being taken.
    
    This change cleans up the logic and fixes the logical errors.
    
    Signed-off-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Reviewed-by: Eric Bernstein <Eric.Bernstein@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 4a565037f2903ad2d3eca7711f8a2b003356b0d8
Author: Vincent Minet <v.minet@criteo.com>
Date:   Fri May 8 00:14:22 2020 +0200

    umh: fix memory leak on execve failure
    
    [ Upstream commit db803036ada7d61d096783726f9771b3fc540370 ]
    
    If a UMH process created by fork_usermode_blob() fails to execute,
    a pair of struct file allocated by umh_pipe_setup() will leak.
    
    Under normal conditions, the caller (like bpfilter) needs to manage the
    lifetime of the UMH and its two pipes. But when fork_usermode_blob()
    fails, the caller doesn't really have a way to know what needs to be
    done. It seems better to do the cleanup ourselves in this case.
    
    Fixes: 449325b52b7a ("umh: introduce fork_usermode_blob() helper")
    Signed-off-by: Vincent Minet <v.minet@criteo.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2fffdf4dded1032d8ab974567dfc59d754b94c94
Author: Vincent Minet <v.minet@criteo.com>
Date:   Fri May 8 00:14:22 2020 +0200

    umh: fix memory leak on execve failure
    
    [ Upstream commit db803036ada7d61d096783726f9771b3fc540370 ]
    
    If a UMH process created by fork_usermode_blob() fails to execute,
    a pair of struct file allocated by umh_pipe_setup() will leak.
    
    Under normal conditions, the caller (like bpfilter) needs to manage the
    lifetime of the UMH and its two pipes. But when fork_usermode_blob()
    fails, the caller doesn't really have a way to know what needs to be
    done. It seems better to do the cleanup ourselves in this case.
    
    Fixes: 449325b52b7a ("umh: introduce fork_usermode_blob() helper")
    Signed-off-by: Vincent Minet <v.minet@criteo.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6cf991611bc72c077f0cc64e23987341ad7ef41e
Merge: bfbe1744e441 3a36aa237e4e
Author: Dave Airlie <airlied@redhat.com>
Date:   Wed May 20 13:36:44 2020 +1000

    Merge tag 'drm-intel-next-2020-05-15' of git://anongit.freedesktop.org/drm/drm-intel into drm-next
    
    UAPI Changes:
    
    - drm/i915: Show per-engine default property values in sysfs
    
        By providing the default values configured into the kernel via sysfs, it
        is much more convenient for userspace to restore those sane defaults, or
        at least know what are considered good baseline. This is useful, for
        example, to cleanup after any failed userspace prior to commencing new
        jobs.
    
    Cross-subsystem Changes:
    
    - video/hdmi: Add Unpack only function for DRM infoframe
    - Includes pull request gvt-next-2020-05-12
    
    Driver Changes:
    
    - Restore Cherryview back to full-ppgtt (Chris, Mika)
    - Document locking guidelines for i915 (Chris, Daniel, Joonas)
    - Fix GitLab #1746: Handle idling during i915_gem_evict_something busy loops (Chris)
    - Display WA #1105: Require linear fb stride to be multiple of 512 bytes on
      gen9/glk (Ville)
    - Add Wa_14010685332 for ICP/ICL (Matt R)
    - Restrict w/a 1607087056 for EHL/JSL (Swathi)
    - Fix interrupt handling for DP AUX transactions on Tigerlake (Imre)
    - Revert "drm/i915/tgl: Include ro parts of l3 to invalidate" (Mika)
    - Fix HDC pipeline flush hardware bit on Gen12 (Mika)
    - Flush L3 when flushing render on Gen12 (Mika)
    - Invalidate aux table entries forcibly between BB on Gen12 (Mika)
    - Add aux table invalidate for all engines on Gen12 (Mika)
    - Force pte cacheline to main memory Gen8+ (Mika)
    - Add and enable TGL+ SAGV support (Stanislav)
    - Implement vm_ops->access on i915 mmaps for GDB (Chris, Kristian)
    - Replace zero-length array with flexible-array (Gustavo)
    - Improve batch buffer pool effectiveness to mitigate soft-rc6 hit (Chris)
    - Remove wait priority boosting (Chris)
    - Keep driver module referenced when PMU is active (Chris)
    - Sanitize RPS interrupts upon resume (Chris)
    - Extend pcode read timeout to 20 ms (Chris)
    - Wait for ACT sent before enabling MST pipe (Ville)
    - Extend support to async relocations to SNB (Chris)
    - Remove CNL pre-prod workarounds (Ville)
    - Don't enable WaIncreaseLatencyIPCEnabled when IPC is disabled (Sultan)
    - Record the active CCID from before reset (Chris)
    - Mark concurrent submissions with a weak-dependency (Chris)
    - Peel dma-fence-chains for await to allow engine-to-engine sync (Lionel)
    - Prevent using semaphores to chain up to external fences (Chris)
    - Fix GLK watermark calculations (Ville)
    - Emit await(batch) before MI_BB_START (Chris)
    - Reset execlists registers before HWSP (Chris)
    - Drop no-semaphore boosting in favor of fast timeslicing (Chris)
    - Fix enabled infoframe states of lspcon (Gwan-gyeong)
    - Program DP SDPs on pipe updates (Gwan-gyeong)
    - Stop sending DP SDPs on ddi disable (Gwan-gyeong)
    - Store CS timestamp frequency in Hz (Ville)
    
    - Remove unused HAS_FWTABLE macro (Pascal)
    - Use batchbuffer chaining for relocations to save ring space (Chris)
    - Try different engines for relocs if MI ops not supported (Chris, Tvrtko)
    - Lazily acquire the device wakeref for freeing objects (Chris)
    - Streamline display code arithmetics around rounding etc. (Ville)
    - Use bw state for per crtc SAGV evaluation (Stanislav)
    - Track active_pipes in bw_state (Stanislav)
    - Nuke mode.vrefresh usage (Ville)
    - Warn if the FBC is still writing to stolen on removal (Chris)
    - Added new PCode commands prepping for QGV rescricting (Stansilav)
    - Stop holding onto the pinned_default_state (Chris)
    - Propagate error from completed fences (Chris)
    - Ignore submit-fences on the same timeline (Chris)
    - Pull waiting on an external dma-fence into its routine (Chris)
    - Replace the hardcoded I915_FENCE_TIMEOUT with Kconfig (Chris)
    - Mark up the racy read of execlists->context_tag (Chris)
    - Tidy up the return handling for completed dma-fences (Chris)
    - Introduce skl_plane_wm_level accessor (Stanislav)
    - Extract SKL SAGV checking (Stanislav)
    - Make active_pipes check skl specific (Stanislav)
    - Suspend tasklets before resume sanitization (Chris)
    - Remove redundant exec_fence (Chris)
    - Mark the addition of the initial-breadcrumb in the request (Chris)
    - Transfer old virtual breadcrumbs to irq_worker (Chris)
    - Read the DP SDPs from the video DIP (Gwan-gyeong)
    - Program DP SDPs with computed configs (Gwan-gyeong)
    - Add state readout for DP VSC and DP HDR Metadata Infoframe SDP
      (Gwan-gyeong)
    - Add compute routine for DP PSR VSC SDP (Gwan-gyeong)
    - Use new DP VSC SDP compute routine on PSR (Gwan-gyeong)
    - Restrict qgv points which don't have enough bandwidth. (Stanislav)
    - Nuke pointless div by 64bit (Ville)
    
    - Static checker code fixes (Nathan, Mika, Chris)
    - Add logging function for DP VSC SDP (Gwan-gyeong)
    - Include HDMI DRM infoframe, DP HDR metadata and DP VSC SDP in the
      crtc state dump (Gwan-gyeong)
    - Make timeslicing explicit engine property (Chris, Tvrtko)
    - Selftest and debugging improvements (Chris)
    - Align variable names with BSpec (Ville)
    - Tidy up gen8+ breadcrumb emission code (Chris)
    - Turn intel_digital_port_connected() in a vfunc (Ville)
    - Use stashed away hpd isr bits in intel_digital_port_connected() (Ville)
    - Extract i915_cs_timestamp_{ns_to_ticks,tick_to_ns}() (Ville)
    
    Signed-off-by: Dave Airlie <airlied@redhat.com>
    From: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200515160703.GA19043@jlahtine-desk.ger.corp.intel.com

commit c73be61cede5882f9605a852414db559c0ebedfd
Author: David Howells <dhowells@redhat.com>
Date:   Tue Jan 14 17:07:11 2020 +0000

    pipe: Add general notification queue support
    
    Make it possible to have a general notification queue built on top of a
    standard pipe.  Notifications are 'spliced' into the pipe and then read
    out.  splice(), vmsplice() and sendfile() are forbidden on pipes used for
    notifications as post_one_notification() cannot take pipe->mutex.  This
    means that notifications could be posted in between individual pipe
    buffers, making iov_iter_revert() difficult to effect.
    
    The way the notification queue is used is:
    
     (1) An application opens a pipe with a special flag and indicates the
         number of messages it wishes to be able to queue at once (this can
         only be set once):
    
            pipe2(fds, O_NOTIFICATION_PIPE);
            ioctl(fds[0], IOC_WATCH_QUEUE_SET_SIZE, queue_depth);
    
     (2) The application then uses poll() and read() as normal to extract data
         from the pipe.  read() will return multiple notifications if the
         buffer is big enough, but it will not split a notification across
         buffers - rather it will return a short read or EMSGSIZE.
    
         Notification messages include a length in the header so that the
         caller can split them up.
    
    Each message has a header that describes it:
    
            struct watch_notification {
                    __u32   type:24;
                    __u32   subtype:8;
                    __u32   info;
            };
    
    The type indicates the source (eg. mount tree changes, superblock events,
    keyring changes, block layer events) and the subtype indicates the event
    type (eg. mount, unmount; EIO, EDQUOT; link, unlink).  The info field
    indicates a number of things, including the entry length, an ID assigned to
    a watchpoint contributing to this buffer and type-specific flags.
    
    Supplementary data, such as the key ID that generated an event, can be
    attached in additional slots.  The maximum message size is 127 bytes.
    Messages may not be padded or aligned, so there is no guarantee, for
    example, that the notification type will be on a 4-byte bounary.
    
    Signed-off-by: David Howells <dhowells@redhat.com>

commit b580b93664f91db8cb503429030df0f1c1e53528
Author: David Howells <dhowells@redhat.com>
Date:   Wed Feb 12 13:58:35 2020 +0000

    pipe: Add O_NOTIFICATION_PIPE
    
    Add an O_NOTIFICATION_PIPE flag that can be passed to pipe2() to indicate
    that the pipe being created is going to be used for notifications.  This
    suppresses the use of splice(), vmsplice(), tee() and sendfile() on the
    pipe as calling iov_iter_revert() on a pipe when a kernel notification
    message has been inserted into the middle of a multi-buffer splice will be
    messy.
    
    The flag is given the same value as O_EXCL as it seems unlikely that
    this flag will ever be applicable to pipes and I don't want to use up
    another O_* bit unnecessarily.  An alternative could be to add a pipe3()
    system call.
    
    Signed-off-by: David Howells <dhowells@redhat.com>

commit cba597ac45170469a9a60c06d20d64b5af5dc48c
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Sat May 16 20:09:40 2020 +0100

    drm/i915/display: Return error from dbuf allocation failure
    
    drivers/gpu/drm/i915/intel_pm.c:5920 skl_ddb_add_affected_pipes() error: uninitialized symbol 'ret'.
    
    Fixes: 3cf43cdc63fb ("drm/i915: Introduce proper dbuf state")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200516190940.12675-1-chris@chris-wilson.co.uk

commit b6a13a386e288495233245b31e0fb362b9331f17
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon May 18 15:13:54 2020 +0300

    drm/i915: Fix dbuf slice mask when turning off all the pipes
    
    The current dbuf slice computation only happens when there are
    active pipes. If we are turning off all the pipes we just leave
    the dbuf slice mask at it's previous value, which may be something
    other that BIT(S1). If runtime PM will kick in it will however
    turn off everything but S1. Then on the next atomic commit (if
    the new dbuf slice mask matches the stale value we left behind)
    the code will not turn on the other slices we now need. This will
    lead to underruns as the planes are trying to use a dbuf slice
    that's not powered up.
    
    To work around let's just just explicitly set the dbuf slice mask
    to BIT(S1) when we are turning off all the pipes. Really the code
    should just calculate this stuff the same way regardless whether
    the pipes are on or off, but we're not quite there yet (need a
    bit more work on the dbuf state for that).
    
    v2: Let's not put the fix into dead code
    
    Cc: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Acked-by: Chris Wilson <chris@chris-wilson.co.uk>
    Fixes: 3cf43cdc63fb ("drm/i915: Introduce proper dbuf state")
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200518121354.20401-1-ville.syrjala@linux.intel.com

commit d8d5afe35e3f88f73436f79f974d96a67e879637
Author: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
Date:   Wed May 13 12:38:13 2020 +0300

    drm/i915: Make active_pipes check skl specific
    
    Seems that only skl needs to have SAGV turned off
    for multipipe scenarios, so lets do it this way.
    
    If anything blows up - we can always revert this patch.
    
    v2: Changed if condition to look better (Ville).
    
    Signed-off-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    [vsyrjala: wrapped long line to appease checkpatch]
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200513093816.11466-4-stanislav.lisovskiy@intel.com

commit 1d0a6c8486aa53f7545e80f5f0293ed99e48ffc0
Author: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
Date:   Wed May 13 12:38:12 2020 +0300

    drm/i915: Extract skl SAGV checking
    
    Introduce platform dependent SAGV checking in
    combination with bandwidth state pipe SAGV mask.
    
    This is preparation to adding TGL support, which
    requires different way of SAGV checking.
    
    v2, v3, v4, v5, v6: Fix rebase conflict
    
    v7: - Nuke icl specific function, use skl
          for icl as well, gen specific active_pipes
          check to be added in the next patch(Ville)
    
    v8: - Use more generic intel_crtc_can_enable_sagv
          for checking(Ville)
    
    Signed-off-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200513093816.11466-3-stanislav.lisovskiy@intel.com

commit db803036ada7d61d096783726f9771b3fc540370
Author: Vincent Minet <v.minet@criteo.com>
Date:   Fri May 8 00:14:22 2020 +0200

    umh: fix memory leak on execve failure
    
    If a UMH process created by fork_usermode_blob() fails to execute,
    a pair of struct file allocated by umh_pipe_setup() will leak.
    
    Under normal conditions, the caller (like bpfilter) needs to manage the
    lifetime of the UMH and its two pipes. But when fork_usermode_blob()
    fails, the caller doesn't really have a way to know what needs to be
    done. It seems better to do the cleanup ourselves in this case.
    
    Fixes: 449325b52b7a ("umh: introduce fork_usermode_blob() helper")
    Signed-off-by: Vincent Minet <v.minet@criteo.com>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 775a8e0316bd5443a0f3faf771b1bdfb8f8e8342
Merge: af38553c6612 a9fe6f18cde0
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri May 8 08:49:34 2020 -0700

    Merge tag 'drm-fixes-2020-05-08' of git://anongit.freedesktop.org/drm/drm
    
    Pull drm fixes from Dave Airlie:
     "Another pretty normal week. I didn't get any i915 fixes yet, so next
      week I'd expect double the usual i915, but otherwise a bunch of amdgpu
      and some scattered other fixes.
    
      hdcp:
       - fix HDCP regression
    
      amdgpu:
       - Runtime PM fixes
       - DC fix for PPC
       - Misc DC fixes
    
      virtio:
       - fix context ordering issue
    
      sun4i:
       - old gcc warning fix
    
      ingenic-drm:
       - missing module support"
    
    * tag 'drm-fixes-2020-05-08' of git://anongit.freedesktop.org/drm/drm:
      drm/amd/display: Prevent dpcd reads with passive dongles
      drm/amd/display: fix counter in wait_for_no_pipes_pending
      drm/amd/display: Update DCN2.1 DV Code Revision
      drm: Fix HDCP failures when SRM fw is missing
      sun6i: dsi: fix gcc-4.8
      drm: ingenic-drm: add MODULE_DEVICE_TABLE
      drm/virtio: create context before RESOURCE_CREATE_2D in 3D mode
      drm/amd/display: work around fp code being emitted outside of DC_FP_START/END
      drm/amdgpu/dc: Use WARN_ON_ONCE for ASSERT
      drm/amdgpu: drop redundant cg/pg ungate on runpm enter
      drm/amdgpu: move kfd suspend after ip_suspend_phase1

commit 80797dd6f1a525d1160c463d6a9f9d29af182cbb
Author: Roman Li <roman.li@amd.com>
Date:   Wed Feb 26 17:30:29 2020 -0500

    drm/amd/display: fix counter in wait_for_no_pipes_pending
    
    [Why]
    Wait counter is not being reset for each pipe.
    
    [How]
    Move counter reset into pipe loop scope.
    
    Signed-off-by: Roman Li <roman.li@amd.com>
    Reviewed-by: Zhan Liu <Zhan.Liu@amd.com>
    Acked-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 65d68369826918a33d5fb4524efab4109b8e497b
Author: Isabel Zhang <isabel.zhang@amd.com>
Date:   Mon Apr 20 15:21:10 2020 -0400

    drm/amd/display: Add 4 to 1 MPC split support
    
    [Why]
    Want to make use of detile buffer of all 4 pipes to maximize amount of
    data stored to hide certain memory latency cases.
    
    [How]
    In case of 1 plane and 1 stream, program 4 pipes to each retrieve 1/4 of
    plane later mixed together by the MPCs. Added support for transition
    from 4 to 1 MPC to 2 to 1 MPC or no pipe split case and vice versa.
    Currently, only enabled if debug flag is set.
    
    Signed-off-by: Isabel Zhang <isabel.zhang@amd.com>
    Reviewed-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Acked-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 5f6dbd54c05f38d30da9c1d310219808a69afd35
Author: Roman Li <roman.li@amd.com>
Date:   Wed Feb 26 17:30:29 2020 -0500

    drm/amd/display: fix counter in wait_for_no_pipes_pending
    
    [Why]
    Wait counter is not being reset for each pipe.
    
    [How]
    Move counter reset into pipe loop scope.
    
    Signed-off-by: Roman Li <roman.li@amd.com>
    Reviewed-by: Zhan Liu <Zhan.Liu@amd.com>
    Acked-by: Aurabindo Pillai <aurabindo.pillai@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit ecab0f3d055d333640bbe2aa5a5141574a65c534
Author: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
Date:   Thu Apr 30 22:56:34 2020 +0300

    drm/i915: Track active_pipes in bw_state
    
    We need to calculate SAGV mask also in a non-modeset
    commit, however currently active_pipes are only calculated
    for modesets in global atomic state, thus now we will be
    tracking those also in bw_state in order to be able to
    properly access global data.
    
    v2: - Removed pre/post plane SAGV updates from modeset(Ville)
        - Now tracking active pipes in intel_can_enable_sagv(Ville)
    
    v3: - lock global state if active_pipes change as well(Ville)
    
    Signed-off-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200430195634.7666-1-stanislav.lisovskiy@intel.com

commit 1b450791d517d4d6666ab9ab6d9a20c8819e3572
Author: Mateusz Gorski <mateusz.gorski@linux.intel.com>
Date:   Mon Apr 27 15:27:26 2020 +0200

    ASoC: Intel: Multiple I/O PCM format support for pipe
    
    For pipes supporting multiple input/output formats, kcontrol is
    created and selection of pipe input and output configuration
    is done based on control set.
    
    If more than one configuration is supported, then this patch
    allows user to select configuration of choice
    using amixer settings.
    
    Signed-off-by: Mateusz Gorski <mateusz.gorski@linux.intel.com>
    Signed-off-by: Pavan K S <pavan.k.s@intel.com>
    Reviewed-by: Cezary Rojewski <cezary.rojewski@intel.com>
    Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20200427132727.24942-3-mateusz.gorski@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 2a28fe92220a116735ef45939b7edcfee83cc6b0
Author: Dale Zhao <dale.zhao@amd.com>
Date:   Fri Mar 27 20:11:55 2020 +0800

    drm/amd/display: Correct updating logic of dcn21's pipe VM flags
    
    [Why]:
    Renoir's pipe VM flags are not correctly updated if pipe strategy has
    changed during some scenarios. It will result in watermarks mistakenly
    calculation, thus underflow and garbage appear.
    
    [How]:
    Correctly update pipe VM flags to pipes which have been populated.
    
    Signed-off-by: Dale Zhao <dale.zhao@amd.com>
    Signed-off-by: Sung Lee <sung.lee@amd.com>
    Reviewed-by: Yongqiang Sun <yongqiang.sun@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit f0617ff0b89416d5e15e14c22489ae3013d343fa
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Apr 17 18:27:34 2020 +0300

    drm/i915: Push MST link retraining to the hotplug work
    
    We shouldn't try to do link retraining from the short hpd handler.
    We can't take any modeset locks there so this is racy as hell.
    Push the whole thing into the hotplug work like we do with SST.
    
    We'll just have to adjust the SST retraining code to deal with
    the MST encoders and multiple pipes.
    
    TODO: I have a feeling we should just rip this all out and
    do a full modeset instead. Stuff like port sync and the tgl+
    MST master transcoder stuff maybe doesn't work well if we
    try to retrain without following the proper modeset sequence.
    So far haven't done any actual tests to confirm that though.
    
    Cc: Lyude Paul <lyude@redhat.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200417152734.464-2-ville.syrjala@linux.intel.com
    Reviewed-by: Lyude Paul <lyude@redhat.com>

commit a389c49fac556cba82edee7a5724269ec2d28981
Author: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
Date:   Wed Apr 15 17:57:40 2020 +0300

    drm/i915: Prepare to extract gen specific functions from intel_can_enable_sagv
    
    Addressing one of the comments, recommending to extract platform
    specific code from intel_can_enable_sagv as a preparation, before
    we are going to add support for tgl+.
    
    v2: - Removed whitespace
    v3: - Removed premature debug and new cycle introduction(Ville)
        - Added missing no active pipes check(Ville)
    v4: - Fixed stupid mistake with plane_state caused by stupid macro change
    
    Signed-off-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200415145740.28241-1-stanislav.lisovskiy@intel.com

commit fa90219a129fd87bc2186caca79d2626fc1986a9
Author: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
Date:   Sun Apr 5 16:41:02 2020 -0400

    drm/amd/display: fix dml pipe merge logic
    
    Dml merges mpc/odm combine pipes to do calculations. This merge is
    imperfect if there is a viewport overlap. This change saves pre overlap
    viewport for dml use.
    
    Signed-off-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Reviewed-by: Wesley Chalmers <Wesley.Chalmers@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 5b5c1777bd3ce3ae3a448c8c8df3c724d1bfa9fe
Author: Josip Pavic <Josip.Pavic@amd.com>
Date:   Sun Apr 5 16:40:41 2020 -0400

    drm/amd/display: prevent loop from occuring in pipe list
    
    [Why]
    If no free pipes are available, acquire_first_split_pipe is called to
    get a pipe to use. This call may alter the ordering of the pipes in the
    list so that, for example, the tail pipe changes.
    
    If acquire_first_split_pipe returns the tail pipe, we'll have free_pipe
    == tail_pipe. What tail_pipe refers to is not the current tail_pipe, but
    what was previously the tail pipe - i.e. prior to the call to
    acquire_first_split_pipe
    
    The logic that follows will link free_pipe to the tail pipe, referring to
    the current tail pipe. However, since tail_pipe is cached from before the
    call to acquire_first_split_pipe, the wrong tail pipe will be used, and
    it will end up being linked to itself, creating a loop that, if traversed,
    will result in a soft hang.
    
    [How]
    Do not cache the tail pipe. Instead, check the tail pipe after the call to
    acquire_first_split_pipe is made.
    
    Signed-off-by: Josip Pavic <Josip.Pavic@amd.com>
    Reviewed-by: Aric Cyr <Aric.Cyr@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 1ff241ea2b26b6485587e3d1b6997999ab7ea285
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Mar 13 18:48:29 2020 +0200

    drm/i915: Do pipe updates after enables for everyone
    
    Currently only port sync pipes do the sequence such that
    we first do the modeset part for every pipe and then do
    the plane/etc. updates. Let's follow that apporach for
    all pipes in skl+ so that we can properly integrate the
    port sync into the normal modeset flow.
    
    v2: Remove now stale TODO of port sync slave entries[]
        s/oldnew/new/
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200313164831.5980-12-ville.syrjala@linux.intel.com
    Reviewed-by: José Roberto de Souza <jose.souza@intel.com>

commit 4f05d7aeba9764f624e7cb2ebd9a729c8a84408c
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Mar 13 18:48:28 2020 +0200

    drm/i915: Fix port sync code to work with >2 pipes
    
    Don't assume there is just one port sync slave. We might have several.
    
    v2: Fix unitialized new_crtc_state usage (José)
        Fix clearing of modeset_pipes for slaves
        s/oldnew/new/
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200313164831.5980-11-ville.syrjala@linux.intel.com
    Reviewed-by: José Roberto de Souza <jose.souza@intel.com>

commit dc5b8ed56bb3788cade153c853221bb6b73364f3
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Mar 13 18:48:26 2020 +0200

    drm/i915: Implement port sync for SKL+
    
    Transcoder port sync was introduced to the hardware in BDW. We
    can trivially enable it for SKL+ since the same codepaths are
    already used for ICL+ port sync. The only difference is the actual
    location of the bits we need to poke.
    
    We leave BDW out (at least for now) since it uses different modeset
    paths that haven't been adapted for port sync, and IIRC using the
    feature would involve some extra workarounds we've not implemented.
    
    Pre-BDW hardware does not support port sync so we'd have to tweak
    the modeset sequence to start the pipes as close together as possible
    and hope for the best. So far no one has seriously tried to implement
    that.
    
    Closes: https://gitlab.freedesktop.org/drm/intel/issues/27
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200313164831.5980-9-ville.syrjala@linux.intel.com
    Reviewed-by: Manasi Navare <manasi.d.navare@intel.com>

commit 75848108adc1fdb1f994143ebe54268df5308a0b
Author: Eric Biggers <ebiggers@google.com>
Date:   Sat Mar 7 18:38:49 2020 -0800

    libfs: fix infoleak in simple_attr_read()
    
    commit a65cab7d7f05c2061a3e2490257d3086ff3202c6 upstream.
    
    Reading from a debugfs file at a nonzero position, without first reading
    at position 0, leaks uninitialized memory to userspace.
    
    It's a bit tricky to do this, since lseek() and pread() aren't allowed
    on these files, and write() doesn't update the position on them.  But
    writing to them with splice() *does* update the position:
    
            #define _GNU_SOURCE 1
            #include <fcntl.h>
            #include <stdio.h>
            #include <unistd.h>
            int main()
            {
                    int pipes[2], fd, n, i;
                    char buf[32];
    
                    pipe(pipes);
                    write(pipes[1], "0", 1);
                    fd = open("/sys/kernel/debug/fault_around_bytes", O_RDWR);
                    splice(pipes[0], NULL, fd, NULL, 1, 0);
                    n = read(fd, buf, sizeof(buf));
                    for (i = 0; i < n; i++)
                            printf("%02x", buf[i]);
                    printf("\n");
            }
    
    Output:
            5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a30
    
    Fix the infoleak by making simple_attr_read() always fill
    simple_attr::get_buf if it hasn't been filled yet.
    
    Reported-by: syzbot+fcab69d1ada3e8d6f06b@syzkaller.appspotmail.com
    Reported-by: Alexander Potapenko <glider@google.com>
    Fixes: acaefc25d21f ("[PATCH] libfs: add simple attribute files")
    Cc: stable@vger.kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Acked-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20200308023849.988264-1-ebiggers@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 696119fa9f1822ff93d58b3ca9f8f339b29d058b
Author: Eric Biggers <ebiggers@google.com>
Date:   Sat Mar 7 18:38:49 2020 -0800

    libfs: fix infoleak in simple_attr_read()
    
    commit a65cab7d7f05c2061a3e2490257d3086ff3202c6 upstream.
    
    Reading from a debugfs file at a nonzero position, without first reading
    at position 0, leaks uninitialized memory to userspace.
    
    It's a bit tricky to do this, since lseek() and pread() aren't allowed
    on these files, and write() doesn't update the position on them.  But
    writing to them with splice() *does* update the position:
    
            #define _GNU_SOURCE 1
            #include <fcntl.h>
            #include <stdio.h>
            #include <unistd.h>
            int main()
            {
                    int pipes[2], fd, n, i;
                    char buf[32];
    
                    pipe(pipes);
                    write(pipes[1], "0", 1);
                    fd = open("/sys/kernel/debug/fault_around_bytes", O_RDWR);
                    splice(pipes[0], NULL, fd, NULL, 1, 0);
                    n = read(fd, buf, sizeof(buf));
                    for (i = 0; i < n; i++)
                            printf("%02x", buf[i]);
                    printf("\n");
            }
    
    Output:
            5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a30
    
    Fix the infoleak by making simple_attr_read() always fill
    simple_attr::get_buf if it hasn't been filled yet.
    
    Reported-by: syzbot+fcab69d1ada3e8d6f06b@syzkaller.appspotmail.com
    Reported-by: Alexander Potapenko <glider@google.com>
    Fixes: acaefc25d21f ("[PATCH] libfs: add simple attribute files")
    Cc: stable@vger.kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Acked-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20200308023849.988264-1-ebiggers@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bd6c7cd12c7ece54e6531ae7c3195ac8578933f0
Author: Eric Biggers <ebiggers@google.com>
Date:   Sat Mar 7 18:38:49 2020 -0800

    libfs: fix infoleak in simple_attr_read()
    
    commit a65cab7d7f05c2061a3e2490257d3086ff3202c6 upstream.
    
    Reading from a debugfs file at a nonzero position, without first reading
    at position 0, leaks uninitialized memory to userspace.
    
    It's a bit tricky to do this, since lseek() and pread() aren't allowed
    on these files, and write() doesn't update the position on them.  But
    writing to them with splice() *does* update the position:
    
            #define _GNU_SOURCE 1
            #include <fcntl.h>
            #include <stdio.h>
            #include <unistd.h>
            int main()
            {
                    int pipes[2], fd, n, i;
                    char buf[32];
    
                    pipe(pipes);
                    write(pipes[1], "0", 1);
                    fd = open("/sys/kernel/debug/fault_around_bytes", O_RDWR);
                    splice(pipes[0], NULL, fd, NULL, 1, 0);
                    n = read(fd, buf, sizeof(buf));
                    for (i = 0; i < n; i++)
                            printf("%02x", buf[i]);
                    printf("\n");
            }
    
    Output:
            5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a30
    
    Fix the infoleak by making simple_attr_read() always fill
    simple_attr::get_buf if it hasn't been filled yet.
    
    Reported-by: syzbot+fcab69d1ada3e8d6f06b@syzkaller.appspotmail.com
    Reported-by: Alexander Potapenko <glider@google.com>
    Fixes: acaefc25d21f ("[PATCH] libfs: add simple attribute files")
    Cc: stable@vger.kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Acked-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20200308023849.988264-1-ebiggers@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf204158a8a66fe8bd1da65d23906b87d26bfccf
Author: Eric Biggers <ebiggers@google.com>
Date:   Sat Mar 7 18:38:49 2020 -0800

    libfs: fix infoleak in simple_attr_read()
    
    commit a65cab7d7f05c2061a3e2490257d3086ff3202c6 upstream.
    
    Reading from a debugfs file at a nonzero position, without first reading
    at position 0, leaks uninitialized memory to userspace.
    
    It's a bit tricky to do this, since lseek() and pread() aren't allowed
    on these files, and write() doesn't update the position on them.  But
    writing to them with splice() *does* update the position:
    
            #define _GNU_SOURCE 1
            #include <fcntl.h>
            #include <stdio.h>
            #include <unistd.h>
            int main()
            {
                    int pipes[2], fd, n, i;
                    char buf[32];
    
                    pipe(pipes);
                    write(pipes[1], "0", 1);
                    fd = open("/sys/kernel/debug/fault_around_bytes", O_RDWR);
                    splice(pipes[0], NULL, fd, NULL, 1, 0);
                    n = read(fd, buf, sizeof(buf));
                    for (i = 0; i < n; i++)
                            printf("%02x", buf[i]);
                    printf("\n");
            }
    
    Output:
            5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a30
    
    Fix the infoleak by making simple_attr_read() always fill
    simple_attr::get_buf if it hasn't been filled yet.
    
    Reported-by: syzbot+fcab69d1ada3e8d6f06b@syzkaller.appspotmail.com
    Reported-by: Alexander Potapenko <glider@google.com>
    Fixes: acaefc25d21f ("[PATCH] libfs: add simple attribute files")
    Cc: stable@vger.kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Acked-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20200308023849.988264-1-ebiggers@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f365ab31efacb70bed1e821f7435626e0b2528a6
Merge: 4646de87d325 59e7a8cc2dcf
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Apr 1 15:24:20 2020 -0700

    Merge tag 'drm-next-2020-04-01' of git://anongit.freedesktop.org/drm/drm
    
    Pull drm updates from Dave Airlie:
     "This is the main drm pull request for 5.7-rc1.
    
      Highlights:
    
       - i915 enables Tigerlake by default
    
       - i915 and amdgpu have initial OLED backlight support
    
         [ Jani Nikula pipes up and points out that we've had a bunch of
           "initial support" code for a long time already, but only now
           Lyude made it actually work on real world machines ]
    
       - vmwgfx add support to enable OpenGL 4 userspace
    
       - zero length arrays are mostly removed.
    
      Detailed summary:
    
      new driver:
       - tidss: TI Keystone platform display subsystem
    
      core:
       - new drm device warn macros
       - mode config valid for memory constrained devices
       - bridge bus format negotation
       - consolidated fake vblank event handling
       - dma_alloc related cleanups
       - drop get_crtc callback
       - dp: DP1.4 EDID corruption test
       - EDID CEA detailed timings improvements
       - relicense some code to dual GPL2/MIT
       - convert core vblank support to per-crtc support
       - rework drm_global_mutex
       - bridge rework to allow omap_dss custom driver removeal
       - remove drm_fb_helper connector interrfaces
       - zero-length array removal
    
      scheduler:
       - support for modifying the sched list
       - revert job distribution optimization
       - helper to pick least loaded scheduler
       - race condition fix
    
      mst:
       - various fixes
       - remove register_connector callback
    
      i915:
       - uapi to allows userspace specific CS ring buffer sizes
       - Tigerlake enablement patches + Tigerlake enabled by default
       - new sysfs entries for engine properties
       - display/logging refactors
       - eDP/DP fixes for DPCD
       - Gen7 back to aliasing-ppgtt
       - Gen8+ irq refactor
       - Avoid globals
       - GEM locking fixes and simplifications
       - Ice Lake and Elkhart Lake fixes and workarounds
       - Baytrail/Haswell instability fix
       - GVT - VFIO edid better support
    
      amdgpu:
       - Rework VM update handling in preparation for HMM support
       - drm load/unload removal fixups
       - USB-C PD firmware updates
       - HDCP srm support
       - Navi/renoir PM watermark fixes
       - OLED panel support
       - Optimize debugging vram access
       - Use BACO for runtime pm
       - DC clock programming optimizations and fixes
       - PSP fw loading sequence updates
       - Drop DRIVER_USE_AGP
       - Remove legacy drm load and unload callbacks
       - ACP Kconfig fix
       - Lots of fixes across the driver
    
      amdkfd:
       - runtime pm support
       - more gfx config details in amdgpu
    
      radeon:
       - drop DRIVER_USE_AGP
    
      vmwgfx:
       - Disable DMA when SEV encryption in use
       - Shader Model 5 support - needed for GL4 support
    
      msm:
       - DPU resource manager refactor
       - dpu using atomic global state
    
      mediatek:
       - MT8183 DPI support
    
      etnaviv:
       - out-of-bounds read fix
       - expose feature flags for GC400 STM32MP1 SoC
       - runtime suspend entry fix
       - dma32 zone fix
    
      hisilicon:
       - mode selection fixes
    
      meson:
       - YUV420 support
    
      lima:
       - add support for heap buffers
    
      tinydrm:
       - removal of owner field
       - explicit DT dependency removal
       - YAML schema conversion
    
      tegra:
       - misc cleanups
    
      tidss:
       - new driver
    
      virtio:
       - better batching of notifications to host
       - memory handling reworked
       - shmem + gpu context fixes
    
      hibmc:
       - add gamma_set support
       - improve DPMS support
    
      pl111:
       - Integrator IM-PD1 support
    
      sun4i:
       - LVDS support for A20 + A33
       - DSI panel handling improvements"
    
    * tag 'drm-next-2020-04-01' of git://anongit.freedesktop.org/drm/drm: (1537 commits)
      drm/i915/display: Fix mode private_flags comparison at atomic_check
      drm/i915/gt: Stage the transfer of the virtual breadcrumb
      drm/i915/gt: Select the deepest available parking mode for rc6
      drm/i915: Avoid live-lock with i915_vma_parked()
      drm/i915/gt: Treat idling as a RPS downclock event
      drm/i915/gt: Cancel a hung context if already closed
      drm/i915: Use explicit flag to mark unreachable intel_context
      drm/amdgpu: don't try to reserve training bo for sriov (v2)
      drm/amdgpu/smu11: add support for SMU AC/DC interrupts
      drm/amdgpu/swSMU: handle manual AC/DC notifications
      drm/amdgpu/swSMU: handle DC controlled by GPIO for navi1x
      drm/amdgpu/swSMU: set AC/DC mode based on the current system state (v2)
      drm/amdgpu/swSMU: correct the bootup power source for Navi1X (v2)
      drm/amdgpu/swSMU: use the smu11 power source helper for navi1x
      drm/amdgpu/smu11: add a helper to set the power source
      drm/amd/swSMU: add callback to set AC/DC power source (v2)
      drm/scheduler: fix rare NULL ptr race
      drm/amdgpu: fix the coverage issue to clear ArcVPGRs
      drm/amd/display: Fix pageflip event race condition for DCN.
      drm/[radeon|amdgpu]: Remove HAINAN board from max_sclk override check
      ...

commit b25af84517ded609901e06e63fbb7def72801707
Author: Eric Biggers <ebiggers@google.com>
Date:   Sat Mar 7 18:38:49 2020 -0800

    libfs: fix infoleak in simple_attr_read()
    
    commit a65cab7d7f05c2061a3e2490257d3086ff3202c6 upstream.
    
    Reading from a debugfs file at a nonzero position, without first reading
    at position 0, leaks uninitialized memory to userspace.
    
    It's a bit tricky to do this, since lseek() and pread() aren't allowed
    on these files, and write() doesn't update the position on them.  But
    writing to them with splice() *does* update the position:
    
            #define _GNU_SOURCE 1
            #include <fcntl.h>
            #include <stdio.h>
            #include <unistd.h>
            int main()
            {
                    int pipes[2], fd, n, i;
                    char buf[32];
    
                    pipe(pipes);
                    write(pipes[1], "0", 1);
                    fd = open("/sys/kernel/debug/fault_around_bytes", O_RDWR);
                    splice(pipes[0], NULL, fd, NULL, 1, 0);
                    n = read(fd, buf, sizeof(buf));
                    for (i = 0; i < n; i++)
                            printf("%02x", buf[i]);
                    printf("\n");
            }
    
    Output:
            5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a30
    
    Fix the infoleak by making simple_attr_read() always fill
    simple_attr::get_buf if it hasn't been filled yet.
    
    Reported-by: syzbot+fcab69d1ada3e8d6f06b@syzkaller.appspotmail.com
    Reported-by: Alexander Potapenko <glider@google.com>
    Fixes: acaefc25d21f ("[PATCH] libfs: add simple attribute files")
    Cc: stable@vger.kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Acked-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20200308023849.988264-1-ebiggers@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a3a89f879d1abea76c184b388c60fe9b461885bf
Author: Eric Biggers <ebiggers@google.com>
Date:   Sat Mar 7 18:38:49 2020 -0800

    libfs: fix infoleak in simple_attr_read()
    
    commit a65cab7d7f05c2061a3e2490257d3086ff3202c6 upstream.
    
    Reading from a debugfs file at a nonzero position, without first reading
    at position 0, leaks uninitialized memory to userspace.
    
    It's a bit tricky to do this, since lseek() and pread() aren't allowed
    on these files, and write() doesn't update the position on them.  But
    writing to them with splice() *does* update the position:
    
            #define _GNU_SOURCE 1
            #include <fcntl.h>
            #include <stdio.h>
            #include <unistd.h>
            int main()
            {
                    int pipes[2], fd, n, i;
                    char buf[32];
    
                    pipe(pipes);
                    write(pipes[1], "0", 1);
                    fd = open("/sys/kernel/debug/fault_around_bytes", O_RDWR);
                    splice(pipes[0], NULL, fd, NULL, 1, 0);
                    n = read(fd, buf, sizeof(buf));
                    for (i = 0; i < n; i++)
                            printf("%02x", buf[i]);
                    printf("\n");
            }
    
    Output:
            5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a30
    
    Fix the infoleak by making simple_attr_read() always fill
    simple_attr::get_buf if it hasn't been filled yet.
    
    Reported-by: syzbot+fcab69d1ada3e8d6f06b@syzkaller.appspotmail.com
    Reported-by: Alexander Potapenko <glider@google.com>
    Fixes: acaefc25d21f ("[PATCH] libfs: add simple attribute files")
    Cc: stable@vger.kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Acked-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20200308023849.988264-1-ebiggers@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bd02d910a22f90103f165f91a3e7304101acc3c4
Author: Eric Biggers <ebiggers@google.com>
Date:   Sat Mar 7 18:38:49 2020 -0800

    libfs: fix infoleak in simple_attr_read()
    
    commit a65cab7d7f05c2061a3e2490257d3086ff3202c6 upstream.
    
    Reading from a debugfs file at a nonzero position, without first reading
    at position 0, leaks uninitialized memory to userspace.
    
    It's a bit tricky to do this, since lseek() and pread() aren't allowed
    on these files, and write() doesn't update the position on them.  But
    writing to them with splice() *does* update the position:
    
            #define _GNU_SOURCE 1
            #include <fcntl.h>
            #include <stdio.h>
            #include <unistd.h>
            int main()
            {
                    int pipes[2], fd, n, i;
                    char buf[32];
    
                    pipe(pipes);
                    write(pipes[1], "0", 1);
                    fd = open("/sys/kernel/debug/fault_around_bytes", O_RDWR);
                    splice(pipes[0], NULL, fd, NULL, 1, 0);
                    n = read(fd, buf, sizeof(buf));
                    for (i = 0; i < n; i++)
                            printf("%02x", buf[i]);
                    printf("\n");
            }
    
    Output:
            5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a30
    
    Fix the infoleak by making simple_attr_read() always fill
    simple_attr::get_buf if it hasn't been filled yet.
    
    Reported-by: syzbot+fcab69d1ada3e8d6f06b@syzkaller.appspotmail.com
    Reported-by: Alexander Potapenko <glider@google.com>
    Fixes: acaefc25d21f ("[PATCH] libfs: add simple attribute files")
    Cc: stable@vger.kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Acked-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20200308023849.988264-1-ebiggers@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a65cab7d7f05c2061a3e2490257d3086ff3202c6
Author: Eric Biggers <ebiggers@google.com>
Date:   Sat Mar 7 18:38:49 2020 -0800

    libfs: fix infoleak in simple_attr_read()
    
    Reading from a debugfs file at a nonzero position, without first reading
    at position 0, leaks uninitialized memory to userspace.
    
    It's a bit tricky to do this, since lseek() and pread() aren't allowed
    on these files, and write() doesn't update the position on them.  But
    writing to them with splice() *does* update the position:
    
            #define _GNU_SOURCE 1
            #include <fcntl.h>
            #include <stdio.h>
            #include <unistd.h>
            int main()
            {
                    int pipes[2], fd, n, i;
                    char buf[32];
    
                    pipe(pipes);
                    write(pipes[1], "0", 1);
                    fd = open("/sys/kernel/debug/fault_around_bytes", O_RDWR);
                    splice(pipes[0], NULL, fd, NULL, 1, 0);
                    n = read(fd, buf, sizeof(buf));
                    for (i = 0; i < n; i++)
                            printf("%02x", buf[i]);
                    printf("\n");
            }
    
    Output:
            5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a30
    
    Fix the infoleak by making simple_attr_read() always fill
    simple_attr::get_buf if it hasn't been filled yet.
    
    Reported-by: syzbot+fcab69d1ada3e8d6f06b@syzkaller.appspotmail.com
    Reported-by: Alexander Potapenko <glider@google.com>
    Fixes: acaefc25d21f ("[PATCH] libfs: add simple attribute files")
    Cc: stable@vger.kernel.org
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Acked-by: Kees Cook <keescook@chromium.org>
    Link: https://lore.kernel.org/r/20200308023849.988264-1-ebiggers@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ac07a9a4de593a9a3d94aa92f98e09f979c9eb03
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Mar 4 17:24:31 2020 +0300

    net: nfc: fix bounds checking bugs on "pipe"
    
    [ Upstream commit a3aefbfe45751bf7b338c181b97608e276b5bb73 ]
    
    This is similar to commit 674d9de02aa7 ("NFC: Fix possible memory
    corruption when handling SHDLC I-Frame commands") and commit d7ee81ad09f0
    ("NFC: nci: Add some bounds checking in nci_hci_cmd_received()") which
    added range checks on "pipe".
    
    The "pipe" variable comes skb->data[0] in nfc_hci_msg_rx_work().
    It's in the 0-255 range.  We're using it as the array index into the
    hdev->pipes[] array which has NFC_HCI_MAX_PIPES (128) members.
    
    Fixes: 118278f20aa8 ("NFC: hci: Add pipes table to reference them with a tuple {gate, host}")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e5660ee1a35ba155cb2bee53c441fed07aa8de67
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Mar 4 17:24:31 2020 +0300

    net: nfc: fix bounds checking bugs on "pipe"
    
    [ Upstream commit a3aefbfe45751bf7b338c181b97608e276b5bb73 ]
    
    This is similar to commit 674d9de02aa7 ("NFC: Fix possible memory
    corruption when handling SHDLC I-Frame commands") and commit d7ee81ad09f0
    ("NFC: nci: Add some bounds checking in nci_hci_cmd_received()") which
    added range checks on "pipe".
    
    The "pipe" variable comes skb->data[0] in nfc_hci_msg_rx_work().
    It's in the 0-255 range.  We're using it as the array index into the
    hdev->pipes[] array which has NFC_HCI_MAX_PIPES (128) members.
    
    Fixes: 118278f20aa8 ("NFC: hci: Add pipes table to reference them with a tuple {gate, host}")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3587ae04df1df0a70bc2251b40ac3bb4f2a0730b
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Mar 4 17:24:31 2020 +0300

    net: nfc: fix bounds checking bugs on "pipe"
    
    [ Upstream commit a3aefbfe45751bf7b338c181b97608e276b5bb73 ]
    
    This is similar to commit 674d9de02aa7 ("NFC: Fix possible memory
    corruption when handling SHDLC I-Frame commands") and commit d7ee81ad09f0
    ("NFC: nci: Add some bounds checking in nci_hci_cmd_received()") which
    added range checks on "pipe".
    
    The "pipe" variable comes skb->data[0] in nfc_hci_msg_rx_work().
    It's in the 0-255 range.  We're using it as the array index into the
    hdev->pipes[] array which has NFC_HCI_MAX_PIPES (128) members.
    
    Fixes: 118278f20aa8 ("NFC: hci: Add pipes table to reference them with a tuple {gate, host}")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7287a6757825de78799731480ecccbc7c85cf45b
Author: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
Date:   Wed Jan 29 12:16:57 2020 -0500

    drm/amd/display: add on demand pipe merge logic for dcn2+
    
    Adds logic that will determine if pipes need merging during validation.
    
    Signed-off-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Reviewed-by: Chris Park <Chris.Park@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 71f15f769e0cdbcbe9b3c086d105495310642791
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Mar 4 17:24:31 2020 +0300

    net: nfc: fix bounds checking bugs on "pipe"
    
    [ Upstream commit a3aefbfe45751bf7b338c181b97608e276b5bb73 ]
    
    This is similar to commit 674d9de02aa7 ("NFC: Fix possible memory
    corruption when handling SHDLC I-Frame commands") and commit d7ee81ad09f0
    ("NFC: nci: Add some bounds checking in nci_hci_cmd_received()") which
    added range checks on "pipe".
    
    The "pipe" variable comes skb->data[0] in nfc_hci_msg_rx_work().
    It's in the 0-255 range.  We're using it as the array index into the
    hdev->pipes[] array which has NFC_HCI_MAX_PIPES (128) members.
    
    Fixes: 118278f20aa8 ("NFC: hci: Add pipes table to reference them with a tuple {gate, host}")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5afc3791c83eae228d154f9e38a29f6bcdd233ef
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Mar 4 17:24:31 2020 +0300

    net: nfc: fix bounds checking bugs on "pipe"
    
    [ Upstream commit a3aefbfe45751bf7b338c181b97608e276b5bb73 ]
    
    This is similar to commit 674d9de02aa7 ("NFC: Fix possible memory
    corruption when handling SHDLC I-Frame commands") and commit d7ee81ad09f0
    ("NFC: nci: Add some bounds checking in nci_hci_cmd_received()") which
    added range checks on "pipe".
    
    The "pipe" variable comes skb->data[0] in nfc_hci_msg_rx_work().
    It's in the 0-255 range.  We're using it as the array index into the
    hdev->pipes[] array which has NFC_HCI_MAX_PIPES (128) members.
    
    Fixes: 118278f20aa8 ("NFC: hci: Add pipes table to reference them with a tuple {gate, host}")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7e78a7fdcc8d8c854e5dc8441a452baca24dec67
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Mar 4 17:24:31 2020 +0300

    net: nfc: fix bounds checking bugs on "pipe"
    
    [ Upstream commit a3aefbfe45751bf7b338c181b97608e276b5bb73 ]
    
    This is similar to commit 674d9de02aa7 ("NFC: Fix possible memory
    corruption when handling SHDLC I-Frame commands") and commit d7ee81ad09f0
    ("NFC: nci: Add some bounds checking in nci_hci_cmd_received()") which
    added range checks on "pipe".
    
    The "pipe" variable comes skb->data[0] in nfc_hci_msg_rx_work().
    It's in the 0-255 range.  We're using it as the array index into the
    hdev->pipes[] array which has NFC_HCI_MAX_PIPES (128) members.
    
    Fixes: 118278f20aa8 ("NFC: hci: Add pipes table to reference them with a tuple {gate, host}")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a3aefbfe45751bf7b338c181b97608e276b5bb73
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Mar 4 17:24:31 2020 +0300

    net: nfc: fix bounds checking bugs on "pipe"
    
    This is similar to commit 674d9de02aa7 ("NFC: Fix possible memory
    corruption when handling SHDLC I-Frame commands") and commit d7ee81ad09f0
    ("NFC: nci: Add some bounds checking in nci_hci_cmd_received()") which
    added range checks on "pipe".
    
    The "pipe" variable comes skb->data[0] in nfc_hci_msg_rx_work().
    It's in the 0-255 range.  We're using it as the array index into the
    hdev->pipes[] array which has NFC_HCI_MAX_PIPES (128) members.
    
    Fixes: 118278f20aa8 ("NFC: hci: Add pipes table to reference them with a tuple {gate, host}")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit df8e34ac27e8a0d8dce364628226c5619693c3fd
Author: Wenjing Liu <Wenjing.Liu@amd.com>
Date:   Tue Feb 18 17:11:50 2020 -0500

    drm/amd/display: fix image corruption with ODM 2:1 DSC 2 slice
    
    [why]
    When combining two or more pipes in DSC mode, there will always be more
    than 1 slice per line.  In this case, as per DSC rules, the sink device
    is expecting that the ICH is reset at the end of each slice line (i.e.
    ICH_RESET_AT_END_OF_LINE must be configured based on the number of
    slices at the output of ODM).  It is recommended that software set
    ICH_RESET_AT_END_OF_LINE = 0xF for each DSC in the ODM combine.  However
    the current code only set ICH_RESET_AT_END_OF_LINE = 0xF when number of
    slice per DSC engine is greater than 1 instead of number of slice per
    output after ODM combine.
    
    [how]
    Add is_odm in dsc config. Set ICH_RESET_AT_END_OF_LINE = 0xF if either
    is_odm or number of slice per DSC engine is greater than 1.
    
    Signed-off-by: Wenjing Liu <Wenjing.Liu@amd.com>
    Reviewed-by: Nikola Cornij <Nikola.Cornij@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 05e8155afe35c61c55bad39eaa7178d4aaa729c8
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Tue Feb 25 19:11:09 2020 +0200

    drm/i915: Use a sentinel to terminate the dbuf slice arrays
    
    Make life a bit simpler by sticking a sentinel at the end of
    the dbuf slice arrays. This way we don't need to pass in the
    size. Also unify the types (u8 vs. u32) for active_pipes.
    
    Cc: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200225171125.28885-5-ville.syrjala@linux.intel.com
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>

commit b8b65ccda50d135ef3f9d920d3bfe353e63b129a
Author: Anshuman Gupta <anshuman.gupta@intel.com>
Date:   Mon Feb 24 18:09:58 2020 +0530

    drm/i915: Iterate over pipes and skip the disabled one
    
    It should not be assumed that a disabled display pipe will be
    always last the pipe.
    for_each_pipe() should iterate over I915_MAX_PIPES and check
    for the disabled pipe and skip that pipe so that it should not
    initialize the intel crtc for any disabled pipes.
    
    Due to changes in for_each_pipe() macro, it requires to handle
    the below compilation error.
    "suggest explicit braces to avoid ambiguous ‘else’
    [-Werror=dangling-else]"
    
    v2:
    - Cosmetic changes, removed unwanted parentheses. [Ville]
    
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Anshuman Gupta <anshuman.gupta@intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200224124004.26712-2-anshuman.gupta@intel.com

commit 56260cbff87dd27b33c33c50b18a056f6b8e3ba2
Author: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
Date:   Wed Dec 11 15:16:28 2019 -0500

    drm/amd/display: update dml input population function
    
    Update dcn20_populate_dml_pipes_from_context to correctly handle odm
    when no surface is provided.
    
    Signed-off-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Reviewed-by: Jun Lei <Jun.Lei@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Acked-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 36a36d16067e3c6b863e68837ef4046ed43bcdb5
Author: Sung Lee <sung.lee@amd.com>
Date:   Wed Dec 4 18:36:07 2019 -0500

    drm/amd/display: Lower DPP DTO only when safe
    
    [ Upstream commit 5479034576ec8b7166a66efe5de1d911feb43d4a ]
    
    [Why]
    A corner case currently exists where DPP DTO is lowered before
    pipes are updated to a higher viewport. This causes underflow
    as the DPPCLK is too low for the current viewport.
    
    [How]
    Only lower DPP DTO when it is safe to lower, or if
    the newer clocks are higher than the current ones.
    
    Signed-off-by: Sung Lee <sung.lee@amd.com>
    Reviewed-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f8226d02857b2d950e0f058d6e9c04a3e7df79cf
Author: Jani Nikula <jani.nikula@intel.com>
Date:   Wed Feb 19 17:45:42 2020 +0200

    drm/i915: make dbuf configurations const
    
    Ensure const data goes to rodata.
    
    Fixes: ff2cd8635e41 ("drm/i915: Correctly map DBUF slices to pipes")
    Cc: Matt Roper <matthew.d.roper@intel.com>
    Cc: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Matt Roper <matthew.d.roper@intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200219154542.19574-1-jani.nikula@intel.com

commit 0f8839f5f323da04a800e6ced1136e4b1e1689a9
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Thu Feb 13 16:04:12 2020 +0200

    drm/i915: Force state->modeset=true when distrust_bios_wm==true
    
    Currently when we load the driver we set distrust_bios_wm=true, which
    will cause active_pipe_changes to get flagged even when we're not
    toggling any pipes on/off. The reason being that we want to fully
    redistribute the dbuf among the active pipes and ignore whatever
    state the firmware left behind.
    
    Unfortunately when the code flags active_pipe_changes it doesn't
    set state->modeset to true, which means the hardware dbuf state
    won't actually get updated. Hence the hardware and software
    states go out of sync, which can result in planes trying to use a
    disabled dbuf slice. Suprisingly that only seems to corrupt the
    display rather than making the whole display engine keel over.
    
    Let's fix this for now by flagging state->modeset whenever
    distrust_bios_wm is set.
    
    Eventually we'll likely want to rip out all of this mess and
    introduce proper statye tracking for dbuf. But that requires
    more work. Toss in a FIXME to that effect.
    
    Cc: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Fixes: ff2cd8635e41 ("drm/i915: Correctly map DBUF slices to pipes")
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Reviewed-by: Matt Roper <matthew.d.roper@intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200213140412.32697-4-stanislav.lisovskiy@intel.com

commit b18e249bf6168d0cea736334187ef08a90dd8b43
Author: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
Date:   Thu Feb 13 16:04:10 2020 +0200

    drm/i915: Ensure no conflicts with BIOS when updating Dbuf
    
    TGL BIOS seems to enable both DBuf slices ocasionally, depending
    how many displays are connected, while i915 according to BSpec
    was powering on S1 DBuf slice, until a modeset was done.
    
    This was causing a brief flash during the boot as we were
    disabling slice, previously used by BIOS with that.
    
    To prevent this, now we are ensuring tht we are enabling
    _at least_ one slice, but if there are more, let's not
    power them off.
    
    Fixes: ff2cd8635e41 ("drm/i915: Correctly map DBUF slices to pipes")
    Reviewed-by: Matt Roper <matthew.d.roper@intel.com>
    Signed-off-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200213140412.32697-2-stanislav.lisovskiy@intel.com

commit c16b99d6c5a3f103ae45e33084055a2440d70544
Merge: 8bf5973a4ef0 9f880327160f
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Feb 7 12:46:08 2020 -0800

    Merge tag 'drm-next-2020-02-07' of git://anongit.freedesktop.org/drm/drm
    
    Pull drm fixes from Dave Airlie:
     "Just some fixes for this merge window: the tegra changes fix some
      regressions in the merge, nouveau has a few modesetting fixes.
    
      The amdgpu fixes are bit bigger, but they contain a couple of weeks of
      fixes, and don't seem to contain anything that isn't really a fix.
    
      Summary:
    
      tegra:
       - merge window regression fixes
    
      nouveau:
       - couple of volta/turing modesetting fixes
    
      amdgpu:
       - EDC fixes for Arcturus
       - GDDR6 memory training fixe
       - Fix for reading gfx clockgating registers while in GFXOFF state
       - i2c freq fixes
       - Misc display fixes
       - TLB invalidation fix when using semaphores
       - VCN 2.5 instancing fixes
       - Switch raven1 gfxoff to a blacklist
       - Coreboot workaround for KV/KB
       - Root cause dongle fixes for display and revert workaround
       - Enable GPU reset for renoir and navi
       - Navi overclocking fixes
       - Fix up confusing warnings in display clock validation on raven
    
      amdkfd:
       - SDMA fix
    
      radeon:
       - Misc LUT fixes"
    
    * tag 'drm-next-2020-02-07' of git://anongit.freedesktop.org/drm/drm: (90 commits)
      gpu: host1x: Set DMA direction only for DMA-mapped buffer objects
      drm/tegra: Reuse IOVA mapping where possible
      drm/tegra: Relax IOMMU usage criteria on old Tegra
      drm/amd/dm/mst: Ignore payload update failures
      drm/amdgpu: update default voltage for boot od table for navi1x
      drm/amdgpu/smu10: fix smu10_get_clock_by_type_with_voltage
      drm/amdgpu/smu10: fix smu10_get_clock_by_type_with_latency
      drm/amdgpu/display: handle multiple numbers of fclks in dcn_calcs.c (v2)
      drm/amdgpu: fetch default VDDC curve voltages (v2)
      drm/amdgpu/smu_v11_0: Correct behavior of restoring default tables (v2)
      drm/amdgpu/navi10: add OD_RANGE for navi overclocking
      drm/amdgpu/navi: fix index for OD MCLK
      drm/amd/display: Fix HW/SW state mismatch
      drm/amd/display: Fix a typo when computing dsc configuration
      drm/amd/powerplay: fix navi10 system intermittent reboot issue V2
      drm/amdkfd: Fix a bug in SDMA RLC queue counting under HWS mode
      drm/amd/display: Only enable cursor on pipes that need it
      drm/nouveau/kms/gv100-: avoid sending a core update until the first modeset
      drm/nouveau/kms/gv100-: move window ownership setup into modesetting path
      drm/nouveau/disp/gv100-: halt NV_PDISP_FE_RM_INTR_STAT_CTRL_DISP_ERROR storms
      ...

commit ff2cd8635e41e0cb375ae2ad1ec05728fcd56c49
Author: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
Date:   Mon Feb 3 01:06:30 2020 +0200

    drm/i915: Correctly map DBUF slices to pipes
    
    Added proper DBuf slice mapping to correspondent
    pipes, depending on pipe configuration as stated
    in BSpec.
    
    v2:
        - Remove unneeded braces
        - Stop using macro for DBuf assignments as
          it seems to reduce readability.
    
    v3: Start using enabled slices mask in dev_priv
    
    v4: Renamed "enabled_slices" used in dev_priv
        to "enabled_dbuf_slices_mask"(Matt Roper)
    
    v5: - Removed redundant parameters from
          intel_get_ddb_size function.(Matt Roper)
        - Made i915_possible_dbuf_slices static(Matt Roper)
        - Renamed total_width into total_width_in_range
          so that it now reflects that this is not
          a total pipe width but the one in current
          dbuf slice allowed range for pipe.(Matt Roper)
        - Removed 4th pipe for ICL in DBuf assignment
          table(Matt Roper)
        - Fixed wrong DBuf slice in DBuf table for TGL
          (Matt Roper)
        - Added comment regarding why we currently not
          using pipe ratio for DBuf assignment for ICL
    
    v6: - Changed u32 to unsigned int in
          icl_get_first_dbuf_slice_offset function signature
          (Ville Syrjälä)
        - Changed also u32 to u8 in dbuf slice mask structure
          (Ville Syrjälä)
        - Switched from DBUF_S1_BIT to enum + explicit
          BIT(DBUF_S1) access(Ville Syrjälä)
        - Switched to named initializers in DBuf assignment
          arrays(Ville Syrjälä)
        - DBuf assignment arrays now use autogeneration tool
          from
          https://patchwork.freedesktop.org/series/70493/
          to avoid typos.
        - Renamed i915_find_pipe_conf to *_compute_dbuf_slices
          (Ville Syrjälä)
        - Changed platforms ordering in skl_compute_dbuf_slices
          to be from newest to oldest(Ville Syrjälä)
    
    v7: - Now ORing assigned DBuf slice config always with DBUF_S1
          because slice 1 has to be constantly powered on.
          (Ville Syrjälä)
    
    v8: - Added pipe_name for neater printing(Ville Syrjälä)
        - Renamed width_before_pipe to width_before_pipe_in_range,
          to better reflect that now all the calculations are happening
          inside DBuf range allowed by current pipe configuration mask
          (Ville Syrjälä)
        - Shortened FIXME comment message, regarding constant ORing with
          DBUF_S1(Ville Syrjälä)
        - Added .dbuf_mask named initializer to pipe assignment array
          (Ville Syrjälä)
        - Edited pipe assignment array to use only single DBuf slice
          for gen11 single pipe configurations, until "pipe ratio"
          thing is finally sorted out(Ville Syrjälä)
        - Removed unused parameter crtc_state for now(Ville Syrjälä)
          from icl/tgl_compute_dbuf_slices function
    
    Reviewed-by: Matt Roper <matthew.d.roper@intel.com>
    Signed-off-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200202230630.8975-7-stanislav.lisovskiy@intel.com

commit 072fcc306be3a63923a3b25cbe7c1fff436f8838
Author: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
Date:   Mon Feb 3 01:06:25 2020 +0200

    drm/i915: Remove skl_ddl_allocation struct
    
    Current consensus that it is redundant as
    we already have skl_ddb_values struct out there,
    also this struct contains only single member
    which makes it unnecessary.
    
    v2: As dirty_pipes soon going to be nuked away
        from skl_ddb_values, evacuating enabled_slices
        to safer in dev_priv.
    
    v3: Changed "enabled_slices" to be "enabled_dbuf_slices_num"
        (Matt Roper)
    
    v4: - Wrapped the line getting number of dbuf slices(Matt Roper)
        - Removed indeed redundant skl_ddb_values declaration(Matt Roper)
    
    Reviewed-by: Matt Roper <matthew.d.roper@intel.com>
    Signed-off-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200202230630.8975-2-stanislav.lisovskiy@intel.com

commit c6a228be7f440ad5c341b3039f6033d4a8f070a4
Author: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
Date:   Thu Jan 30 13:29:05 2020 -0500

    drm/amd/display: Only enable cursor on pipes that need it
    
    [Why]
    In current code we're essentially drawing the cursor on every pipe
    that contains it. This only works when the planes have the same
    scaling for src to dest rect, otherwise we'll get "double cursor" where
    one cursor is incorrectly filtered and offset from the real position.
    
    [How]
    Without dedicated cursor planes on DCN we require at least one pipe
    that matches the scaling of the current timing.
    
    This is an optimization and workaround for the most common case where
    the top-most plane is not scaled but the bottom-most plane is scaled.
    
    Whenever a pipe has a parent pipe in the blending tree whose recout
    fully contains the current pipe we can disable the pipe.
    
    This only applies when the pipe is actually visible of course.
    
    Signed-off-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit def85091f228e29c6472076fbd6e3a57ece124a9
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Mon Feb 3 13:38:24 2020 +0000

    drm/i915/display: Fix NULL-crtc deref in calc_min_cdclk()
    
    [   23.419442] BUG: KASAN: null-ptr-deref in intel_plane_calc_min_cdclk+0x82/0x440 [i915]
    [   23.419527] Read of size 4 at addr 00000000000000f8 by task insmod/735
    [   23.419578]
    [   23.419644] CPU: 2 PID: 735 Comm: insmod Not tainted 5.5.0+ #114
    [   23.419716] Hardware name: ��������������������������������� ���������������������������������/���������������������������������, BIOS RYBDWi35.86A.0246.2
    [   23.419793] Call Trace:
    [   23.419864]  dump_stack+0xef/0x16e
    [   23.419927]  __kasan_report.cold+0x60/0x90
    [   23.420157]  ? intel_plane_calc_min_cdclk+0x82/0x440 [i915]
    [   23.420397]  intel_plane_calc_min_cdclk+0x82/0x440 [i915]
    [   23.420630]  intel_atomic_check+0x455f/0x65a0 [i915]
    [   23.420708]  ? mark_held_locks+0x90/0x90
    [   23.420929]  ? intel_crtc_duplicate_state+0x2e/0x1b0 [i915]
    [   23.421172]  ? intel_plane_duplicate_state+0x2d/0xc0 [i915]
    [   23.421239]  ? __drm_dbg+0xa4/0x120
    [   23.421303]  ? __kasan_kmalloc.constprop.0+0xc2/0xd0
    [   23.421355]  ? __kmalloc_track_caller+0x23a/0x320
    [   23.421602]  ? intel_calc_active_pipes+0x1c0/0x1c0 [i915]
    [   23.421852]  sanitize_watermarks+0x220/0x510 [i915]
    [   23.422092]  ? intel_atomic_check+0x65a0/0x65a0 [i915]
    [   23.422164]  ? drm_modeset_unlock_all+0x88/0x130
    [   23.422402]  intel_modeset_init+0x1b76/0x3c90 [i915]
    [   23.422647]  ? intel_finish_reset+0x2d0/0x2d0 [i915]
    [   23.422851]  ? intel_irq_install+0x12c/0x210 [i915]
    [   23.423076]  i915_driver_probe+0x13e7/0x2930 [i915]
    
    v2: No crtc is implied by an invisible plane, so the extra !crtc check
    is redundant.
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200203133824.198872-1-chris@chris-wilson.co.uk

commit 08e3ed3ae56bf235e46b8d5d2e36ef1712f14285
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Mon Feb 3 13:34:08 2020 +0000

    drm/i915/audio: Skip the cdclk modeset if no pipes attached
    
    If the display is not driving any pipes, we cannot change the bclk and
    doing so risks chasing NULL pointers:
    
    <6> [278.907105] snd_hda_intel 0000:00:0e.0: DSP detected with PCI class/subclass/prog-if info 0x040100
    <6> [278.909936] snd_hda_intel 0000:00:0e.0: bound 0000:00:02.0 (ops i915_audio_component_bind_ops [i915])
    <7> [278.910078] i915 0000:00:02.0: [drm:intel_power_well_enable [i915]] enabling power well 2
    <1> [278.910228] BUG: kernel NULL pointer dereference, address: 0000000000000080
    <1> [278.910243] #PF: supervisor read access in kernel mode
    <1> [278.910251] #PF: error_code(0x0000) - not-present page
    <6> [278.910260] PGD 0 P4D 0
    <4> [278.910267] Oops: 0000 [#1] PREEMPT SMP PTI
    <4> [278.910276] CPU: 0 PID: 5 Comm: kworker/0:0 Tainted: G     U            5.5.0-CI-CI_DRM_7853+ #1
    <4> [278.910289] Hardware name: Intel Corp. Geminilake/GLK RVP2 LP4SD (07), BIOS GELKRVPA.X64.0062.B30.1708222146 08/22/2017
    <4> [278.910312] Workqueue: events azx_probe_work [snd_hda_intel]
    <4> [278.910327] RIP: 0010:__ww_mutex_lock.constprop.15+0x5e/0x1090
    <4> [278.910338] Code: 75 88 be a7 03 00 00 65 48 8b 04 25 28 00 00 00 48 89 45 c8 31 c0 4c 89 c3 e8 5e b3 6d ff 44 8b 3d 2f 24 37 02 45 85 ff 75 0a <4d> 3b 6d 58 0f 85 3f 07 00 00 48 85 db 74 22 49 8b 95 80 00 00 00
    <4> [278.910362] RSP: 0018:ffffc9000008bc10 EFLAGS: 00010246
    <4> [278.910371] RAX: 0000000000000246 RBX: ffffc9000008bd30 RCX: 0000000000000001
    <4> [278.910382] RDX: 0000000000000000 RSI: ffffffff82647c60 RDI: ffff88817b27d848
    <4> [278.910393] RBP: ffffc9000008bcc0 R08: 0000000000000000 R09: 0000000000000001
    <4> [278.910404] R10: ffffc9000008bce0 R11: 0000000000000000 R12: ffffffff8168f0fc
    <4> [278.910414] R13: 0000000000000028 R14: ffffc9000008bd60 R15: 0000000000000000
    <4> [278.910425] FS:  0000000000000000(0000) GS:ffff88817bc00000(0000) knlGS:0000000000000000
    <4> [278.910437] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    <4> [278.910446] CR2: 0000000000000080 CR3: 00000001650da000 CR4: 0000000000340ef0
    <4> [278.910456] Call Trace:
    <4> [278.910468]  ? mark_held_locks+0x49/0x70
    <4> [278.910479]  ? ww_mutex_lock+0x39/0x70
    <4> [278.910487]  ww_mutex_lock+0x39/0x70
    <4> [278.910497]  drm_modeset_lock+0x6c/0x120
    <4> [278.910575]  glk_force_audio_cdclk+0x7d/0x140 [i915]
    <4> [278.910656]  i915_audio_component_get_power+0xf2/0x110 [i915]
    <4> [278.910673]  snd_hdac_display_power+0x7d/0x120 [snd_hda_core]
    <4> [278.910686]  azx_probe_work+0x88/0x7e0 [snd_hda_intel]
    
    v2: Reorder glk_force_audio_cdclk() parameters to fit in with the norm.
    
    Closes: https://gitlab.freedesktop.org/drm/intel/issues/1095
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200203133408.187493-1-chris@chris-wilson.co.uk

commit 0c2d55128f3397dac62539a5e215315edf64ac84
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Jan 20 19:47:28 2020 +0200

    drm/i915: Store active_pipes bitmask in cdclk state
    
    Let's add a copy of the active_pipes bitmask into the cdclk_state.
    While this is duplicating a bit of information we may already
    have elsewhere, I think it's worth it to decopule the cdclk stuff
    from whatever else wants to use that bitmask. Also we want to get
    rid of all the old ad-hoc global state which is what the current
    bitmask is, so this removes one obstacle.
    
    The one extra thing we have to remember is write locking the cdclk
    state whenever the bitmask changes.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200120174728.21095-19-ville.syrjala@linux.intel.com
    Reviewed-by: Imre Deak <imre.deak@intel.com>

commit aac978718bb480fee1b4a577727c0c06e7ae65db
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Jan 20 19:47:26 2020 +0200

    drm/i915: Introduce intel_calc_active_pipes()
    
    Extract a small helper to compute the active pipes bitmask
    based on the old bitmask + the crtcs in the atomic state.
    I want to decouple the cdclk state entirely from the current
    global state so I want to track the active pipes also inside
    the (to be introduced) full cdclk state.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200120174728.21095-17-ville.syrjala@linux.intel.com
    Reviewed-by: Imre Deak <imre.deak@intel.com>

commit 0ef1905ecf2e0e9b2ff8903ea3150b4dd2faa6c0
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Jan 20 19:47:24 2020 +0200

    drm/i915: Introduce better global state handling
    
    Our current global state handling is pretty ad-hoc. Let's try to
    make it better by imitating the standard drm core private object
    approach.
    
    The reason why we don't want to directly use the private objects
    is locking; Each private object has its own lock so if we
    introduce any global private objects we get serialized by that
    single lock across all pipes. The global state apporoach instead
    uses a read/write lock type of approach where each individual
    crtc lock counts as a read lock, and grabbing all the crtc locks
    allows one write access.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200120174728.21095-15-ville.syrjala@linux.intel.com
    Reviewed-by: Imre Deak <imre.deak@intel.com>

commit f119a5e2a4ca037c458e62f444d1b8cd51a140be
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Jan 20 19:47:13 2020 +0200

    drm/i915: Nuke skl wm.dirty_pipes bitmask
    
    The dirty_pipes bitmask is now unused. Get rid of it.
    
    Reviewed-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200120174728.21095-4-ville.syrjala@linux.intel.com

commit 6dcde04706d88284f6326a6b1bafe9cb9d50490d
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Jan 20 19:47:12 2020 +0200

    drm/i915: Move linetime wms into the crtc state
    
    The linetime watermarks really have very little in common with the
    plane watermarks. It looks to be cleaner to simply track them in
    the crtc_state and program them from the normal modeset/fastset
    paths.
    
    The only dark cloud comes from the fact that the register is
    still supposedly single buffered. So in theory it might still
    need some form of two stage programming. Note that even though
    HSW/BDWhave two stage programming we never computed any special
    intermediate values for the linetime watermarks, and on SKL+
    we don't even have the two stage stuff plugged in since everything
    else is double buffered. So let's assume it's all fine and
    continue doing what we've been doing.
    
    Actually on HSW/BDW the value should not even change without
    a full modeset since it doesn't account for pfit downscaling.
    Thus only fastboot might be affected. But on SKL+ the pfit
    scaling factor is take into consideration so the value may
    change during any fastset.
    
    As a bonus we'll plug this thing into the state
    checker/dump now.
    
    v2: Rebase due to bigjoiner prep
    v2: Only compute ips linetime for IPS capable pipes.
        Bspec says the register values is ignored for other
        pipes, but in fact it can't even be written so the
        state checker becomes unhappy if we don't compute
        it as zero.
    
    Cc: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200120174728.21095-3-ville.syrjala@linux.intel.com
    Reviewed-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>

commit 1567c3e3467cddeb019a7b53ec632f834b6a9239
Author: Giovanni Gherdovich <ggherdovich@suse.cz>
Date:   Wed Jan 22 16:16:12 2020 +0100

    x86, sched: Add support for frequency invariance
    
    Implement arch_scale_freq_capacity() for 'modern' x86. This function
    is used by the scheduler to correctly account usage in the face of
    DVFS.
    
    The present patch addresses Intel processors specifically and has positive
    performance and performance-per-watt implications for the schedutil cpufreq
    governor, bringing it closer to, if not on-par with, the powersave governor
    from the intel_pstate driver/framework.
    
    Large performance gains are obtained when the machine is lightly loaded and
    no regression are observed at saturation. The benchmarks with the largest
    gains are kernel compilation, tbench (the networking version of dbench) and
    shell-intensive workloads.
    
    1. FREQUENCY INVARIANCE: MOTIVATION
       * Without it, a task looks larger if the CPU runs slower
    
    2. PECULIARITIES OF X86
       * freq invariance accounting requires knowing the ratio freq_curr/freq_max
       2.1 CURRENT FREQUENCY
           * Use delta_APERF / delta_MPERF * freq_base (a.k.a "BusyMHz")
       2.2 MAX FREQUENCY
           * It varies with time (turbo). As an approximation, we set it to a
             constant, i.e. 4-cores turbo frequency.
    
    3. EFFECTS ON THE SCHEDUTIL FREQUENCY GOVERNOR
       * The invariant schedutil's formula has no feedback loop and reacts faster
         to utilization changes
    
    4. KNOWN LIMITATIONS
       * In some cases tasks can't reach max util despite how hard they try
    
    5. PERFORMANCE TESTING
       5.1 MACHINES
           * Skylake, Broadwell, Haswell
       5.2 SETUP
           * baseline Linux v5.2 w/ non-invariant schedutil. Tested freq_max = 1-2-3-4-8-12
             active cores turbo w/ invariant schedutil, and intel_pstate/powersave
       5.3 BENCHMARK RESULTS
           5.3.1 NEUTRAL BENCHMARKS
                 * NAS Parallel Benchmark (HPC), hackbench
           5.3.2 NON-NEUTRAL BENCHMARKS
                 * tbench (10-30% better), kernbench (10-15% better),
                   shell-intensive-scripts (30-50% better)
                 * no regressions
           5.3.3 SELECTION OF DETAILED RESULTS
           5.3.4 POWER CONSUMPTION, PERFORMANCE-PER-WATT
                 * dbench (5% worse on one machine), kernbench (3% worse),
                   tbench (5-10% better), shell-intensive-scripts (10-40% better)
    
    6. MICROARCH'ES ADDRESSED HERE
       * Xeon Core before Scalable Performance processors line (Xeon Gold/Platinum
         etc have different MSRs semantic for querying turbo levels)
    
    7. REFERENCES
       * MMTests performance testing framework, github.com/gormanm/mmtests
    
     +-------------------------------------------------------------------------+
     | 1. FREQUENCY INVARIANCE: MOTIVATION
     +-------------------------------------------------------------------------+
    
    For example; suppose a CPU has two frequencies: 500 and 1000 Mhz. When
    running a task that would consume 1/3rd of a CPU at 1000 MHz, it would
    appear to consume 2/3rd (or 66.6%) when running at 500 MHz, giving the
    false impression this CPU is almost at capacity, even though it can go
    faster [*]. In a nutshell, without frequency scale-invariance tasks look
    larger just because the CPU is running slower.
    
    [*] (footnote: this assumes a linear frequency/performance relation; which
    everybody knows to be false, but given realities its the best approximation
    we can make.)
    
     +-------------------------------------------------------------------------+
     | 2. PECULIARITIES OF X86
     +-------------------------------------------------------------------------+
    
    Accounting for frequency changes in PELT signals requires the computation of
    the ratio freq_curr / freq_max. On x86 neither of those terms is readily
    available.
    
    2.1 CURRENT FREQUENCY
    ====================
    
    Since modern x86 has hardware control over the actual frequency we run
    at (because amongst other things, Turbo-Mode), we cannot simply use
    the frequency as requested through cpufreq.
    
    Instead we use the APERF/MPERF MSRs to compute the effective frequency
    over the recent past. Also, because reading MSRs is expensive, don't
    do so every time we need the value, but amortize the cost by doing it
    every tick.
    
    2.2 MAX FREQUENCY
    =================
    
    Obtaining freq_max is also non-trivial because at any time the hardware can
    provide a frequency boost to a selected subset of cores if the package has
    enough power to spare (eg: Turbo Boost). This means that the maximum frequency
    available to a given core changes with time.
    
    The approach taken in this change is to arbitrarily set freq_max to a constant
    value at boot. The value chosen is the "4-cores (4C) turbo frequency" on most
    microarchitectures, after evaluating the following candidates:
    
        * 1-core (1C) turbo frequency (the fastest turbo state available)
        * around base frequency (a.k.a. max P-state)
        * something in between, such as 4C turbo
    
    To interpret these options, consider that this is the denominator in
    freq_curr/freq_max, and that ratio will be used to scale PELT signals such as
    util_avg and load_avg. A large denominator will undershoot (util_avg looks a
    bit smaller than it really is), viceversa with a smaller denominator PELT
    signals will tend to overshoot. Given that PELT drives frequency selection
    in the schedutil governor, we will have:
    
        freq_max set to     | effect on DVFS
        --------------------+------------------
        1C turbo            | power efficiency (lower freq choices)
        base freq           | performance (higher util_avg, higher freq requests)
        4C turbo            | a bit of both
    
    4C turbo proves to be a good compromise in a number of benchmarks (see below).
    
     +-------------------------------------------------------------------------+
     | 3. EFFECTS ON THE SCHEDUTIL FREQUENCY GOVERNOR
     +-------------------------------------------------------------------------+
    
    Once an architecture implements a frequency scale-invariant utilization (the
    PELT signal util_avg), schedutil switches its frequency selection formula from
    
        freq_next = 1.25 * freq_curr * util            [non-invariant util signal]
    
    to
    
        freq_next = 1.25 * freq_max * util             [invariant util signal]
    
    where, in the second formula, freq_max is set to the 1C turbo frequency (max
    turbo). The advantage of the second formula, whose usage we unlock with this
    patch, is that freq_next doesn't depend on the current frequency in an
    iterative fashion, but can jump to any frequency in a single update. This
    absence of feedback in the formula makes it quicker to react to utilization
    changes and more robust against pathological instabilities.
    
    Compare it to the update formula of intel_pstate/powersave:
    
        freq_next = 1.25 * freq_max * Busy%
    
    where again freq_max is 1C turbo and Busy% is the percentage of time not spent
    idling (calculated with delta_MPERF / delta_TSC); essentially the same as
    invariant schedutil, and largely responsible for intel_pstate/powersave good
    reputation. The non-invariant schedutil formula is derived from the invariant
    one by approximating util_inv with util_raw * freq_curr / freq_max, but this
    has limitations.
    
    Testing shows improved performances due to better frequency selections when
    the machine is lightly loaded, and essentially no change in behaviour at
    saturation / overutilization.
    
     +-------------------------------------------------------------------------+
     | 4. KNOWN LIMITATIONS
     +-------------------------------------------------------------------------+
    
    It's been shown that it is possible to create pathological scenarios where a
    CPU-bound task cannot reach max utilization, if the normalizing factor
    freq_max is fixed to a constant value (see [Lelli-2018]).
    
    If freq_max is set to 4C turbo as we do here, one needs to peg at least 5
    cores in a package doing some busywork, and observe that none of those task
    will ever reach max util (1024) because they're all running at less than the
    4C turbo frequency.
    
    While this concern still applies, we believe the performance benefit of
    frequency scale-invariant PELT signals outweights the cost of this limitation.
    
     [Lelli-2018]
     https://lore.kernel.org/lkml/20180517150418.GF22493@localhost.localdomain/
    
     +-------------------------------------------------------------------------+
     | 5. PERFORMANCE TESTING
     +-------------------------------------------------------------------------+
    
    5.1 MACHINES
    ============
    
    We tested the patch on three machines, with Skylake, Broadwell and Haswell
    CPUs. The details are below, together with the available turbo ratios as
    reported by the appropriate MSRs.
    
    * 8x-SKYLAKE-UMA:
      Single socket E3-1240 v5, Skylake 4 cores/8 threads
      Max EFFiciency, BASE frequency and available turbo levels (MHz):
    
        EFFIC    800 |********
        BASE    3500 |***********************************
        4C      3700 |*************************************
        3C      3800 |**************************************
        2C      3900 |***************************************
        1C      3900 |***************************************
    
    * 80x-BROADWELL-NUMA:
      Two sockets E5-2698 v4, 2x Broadwell 20 cores/40 threads
      Max EFFiciency, BASE frequency and available turbo levels (MHz):
    
        EFFIC   1200 |************
        BASE    2200 |**********************
        8C      2900 |*****************************
        7C      3000 |******************************
        6C      3100 |*******************************
        5C      3200 |********************************
        4C      3300 |*********************************
        3C      3400 |**********************************
        2C      3600 |************************************
        1C      3600 |************************************
    
    * 48x-HASWELL-NUMA
      Two sockets E5-2670 v3, 2x Haswell 12 cores/24 threads
      Max EFFiciency, BASE frequency and available turbo levels (MHz):
    
        EFFIC   1200 |************
        BASE    2300 |***********************
        12C     2600 |**************************
        11C     2600 |**************************
        10C     2600 |**************************
        9C      2600 |**************************
        8C      2600 |**************************
        7C      2600 |**************************
        6C      2600 |**************************
        5C      2700 |***************************
        4C      2800 |****************************
        3C      2900 |*****************************
        2C      3100 |*******************************
        1C      3100 |*******************************
    
    5.2 SETUP
    =========
    
    * The baseline is Linux v5.2 with schedutil (non-invariant) and the intel_pstate
      driver in passive mode.
    * The rationale for choosing the various freq_max values to test have been to
      try all the 1-2-3-4C turbo levels (note that 1C and 2C turbo are identical
      on all machines), plus one more value closer to base_freq but still in the
      turbo range (8C turbo for both 80x-BROADWELL-NUMA and 48x-HASWELL-NUMA).
    * In addition we've run all tests with intel_pstate/powersave for comparison.
    * The filesystem is always XFS, the userspace is openSUSE Leap 15.1.
    * 8x-SKYLAKE-UMA is capable of HWP (Hardware-Managed P-States), so the runs
      with active intel_pstate on this machine use that.
    
    This gives, in terms of combinations tested on each machine:
    
    * 8x-SKYLAKE-UMA
      * Baseline: Linux v5.2, non-invariant schedutil, intel_pstate passive
      * intel_pstate active + powersave + HWP
      * invariant schedutil, freq_max = 1C turbo
      * invariant schedutil, freq_max = 3C turbo
      * invariant schedutil, freq_max = 4C turbo
    
    * both 80x-BROADWELL-NUMA and 48x-HASWELL-NUMA
      * [same as 8x-SKYLAKE-UMA, but no HWP capable]
      * invariant schedutil, freq_max = 8C turbo
        (which on 48x-HASWELL-NUMA is the same as 12C turbo, or "all cores turbo")
    
    5.3 BENCHMARK RESULTS
    =====================
    
    5.3.1 NEUTRAL BENCHMARKS
    ------------------------
    
    Tests that didn't show any measurable difference in performance on any of the
    test machines between non-invariant schedutil and our patch are:
    
    * NAS Parallel Benchmarks (NPB) using either MPI or openMP for IPC, any
      computational kernel
    * flexible I/O (FIO)
    * hackbench (using threads or processes, and using pipes or sockets)
    
    5.3.2 NON-NEUTRAL BENCHMARKS
    ----------------------------
    
    What follow are summary tables where each benchmark result is given a score.
    
    * A tilde (~) means a neutral result, i.e. no difference from baseline.
    * Scores are computed with the ratio result_new / result_baseline, so a tilde
      means a score of 1.00.
    * The results in the score ratio are the geometric means of results running
      the benchmark with different parameters (eg: for kernbench: using 1, 2, 4,
      ... number of processes; for pgbench: varying the number of clients, and so
      on).
    * The first three tables show higher-is-better kind of tests (i.e. measured in
      operations/second), the subsequent three show lower-is-better kind of tests
      (i.e. the workload is fixed and we measure elapsed time, think kernbench).
    * "gitsource" is a name we made up for the test consisting in running the
      entire unit tests suite of the Git SCM and measuring how long it takes. We
      take it as a typical example of shell-intensive serialized workload.
    * In the "I_PSTATE" column we have the results for intel_pstate/powersave. Other
      columns show invariant schedutil for different values of freq_max. 4C turbo
      is circled as it's the value we've chosen for the final implementation.
    
    80x-BROADWELL-NUMA (comparison ratio; higher is better)
                                             +------+
                     I_PSTATE   1C     3C    | 4C   |  8C
    pgbench-ro           1.14   ~      ~     | 1.11 |  1.14
    pgbench-rw           ~      ~      ~     | ~    |  ~
    netperf-udp          1.06   ~      1.06  | 1.05 |  1.07
    netperf-tcp          ~      1.03   ~     | 1.01 |  1.02
    tbench4              1.57   1.18   1.22  | 1.30 |  1.56
                                             +------+
    
    8x-SKYLAKE-UMA (comparison ratio; higher is better)
                                             +------+
                 I_PSTATE/HWP   1C     3C    | 4C   |
    pgbench-ro           ~      ~      ~     | ~    |
    pgbench-rw           ~      ~      ~     | ~    |
    netperf-udp          ~      ~      ~     | ~    |
    netperf-tcp          ~      ~      ~     | ~    |
    tbench4              1.30   1.14   1.14  | 1.16 |
                                             +------+
    
    48x-HASWELL-NUMA (comparison ratio; higher is better)
                                             +------+
                     I_PSTATE   1C     3C    | 4C   |  12C
    pgbench-ro           1.15   ~      ~     | 1.06 |  1.16
    pgbench-rw           ~      ~      ~     | ~    |  ~
    netperf-udp          1.05   0.97   1.04  | 1.04 |  1.02
    netperf-tcp          0.96   1.01   1.01  | 1.01 |  1.01
    tbench4              1.50   1.05   1.13  | 1.13 |  1.25
                                             +------+
    
    In the table above we see that active intel_pstate is slightly better than our
    4C-turbo patch (both in reference to the baseline non-invariant schedutil) on
    read-only pgbench and much better on tbench. Both cases are notable in which
    it shows that lowering our freq_max (to 8C-turbo and 12C-turbo on
    80x-BROADWELL-NUMA and 48x-HASWELL-NUMA respectively) helps invariant
    schedutil to get closer.
    
    If we ignore active intel_pstate and focus on the comparison with baseline
    alone, there are several instances of double-digit performance improvement.
    
    80x-BROADWELL-NUMA (comparison ratio; lower is better)
                                             +------+
                     I_PSTATE   1C     3C    | 4C   |  8C
    dbench4              1.23   0.95   0.95  | 0.95 |  0.95
    kernbench            0.93   0.83   0.83  | 0.83 |  0.82
    gitsource            0.98   0.49   0.49  | 0.49 |  0.48
                                             +------+
    
    8x-SKYLAKE-UMA (comparison ratio; lower is better)
                                             +------+
                 I_PSTATE/HWP   1C     3C    | 4C   |
    dbench4              ~      ~      ~     | ~    |
    kernbench            ~      ~      ~     | ~    |
    gitsource            0.92   0.55   0.55  | 0.55 |
                                             +------+
    
    48x-HASWELL-NUMA (comparison ratio; lower is better)
                                             +------+
                     I_PSTATE   1C     3C    | 4C   |  8C
    dbench4              ~      ~      ~     | ~    |  ~
    kernbench            0.94   0.90   0.89  | 0.90 |  0.90
    gitsource            0.97   0.69   0.69  | 0.69 |  0.69
                                             +------+
    
    dbench is not very remarkable here, unless we notice how poorly active
    intel_pstate is performing on 80x-BROADWELL-NUMA: 23% regression versus
    non-invariant schedutil. We repeated that run getting consistent results. Out
    of scope for the patch at hand, but deserving future investigation. Other than
    that, we previously ran this campaign with Linux v5.0 and saw the patch doing
    better on dbench a the time. We haven't checked closely and can only speculate
    at this point.
    
    On the NUMA boxes kernbench gets 10-15% improvements on average; we'll see in
    the detailed tables that the gains concentrate on low process counts (lightly
    loaded machines).
    
    The test we call "gitsource" (running the git unit test suite, a long-running
    single-threaded shell script) appears rather spectacular in this table (gains
    of 30-50% depending on the machine). It is to be noted, however, that
    gitsource has no adjustable parameters (such as the number of jobs in
    kernbench, which we average over in order to get a single-number summary
    score) and is exactly the kind of low-parallelism workload that benefits the
    most from this patch. When looking at the detailed tables of kernbench or
    tbench4, at low process or client counts one can see similar numbers.
    
    5.3.3 SELECTION OF DETAILED RESULTS
    -----------------------------------
    
    Machine            : 48x-HASWELL-NUMA
    Benchmark          : tbench4 (i.e. dbench4 over the network, actually loopback)
    Varying parameter  : number of clients
    Unit               : MB/sec (higher is better)
    
                       5.2.0 vanilla (BASELINE)               5.2.0 intel_pstate                   5.2.0 1C-turbo
    - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    Hmean  1        126.73  +- 0.31% (        )      315.91  +- 0.66% ( 149.28%)      125.03  +- 0.76% (  -1.34%)
    Hmean  2        258.04  +- 0.62% (        )      614.16  +- 0.51% ( 138.01%)      269.58  +- 1.45% (   4.47%)
    Hmean  4        514.30  +- 0.67% (        )     1146.58  +- 0.54% ( 122.94%)      533.84  +- 1.99% (   3.80%)
    Hmean  8       1111.38  +- 2.52% (        )     2159.78  +- 0.38% (  94.33%)     1359.92  +- 1.56% (  22.36%)
    Hmean  16      2286.47  +- 1.36% (        )     3338.29  +- 0.21% (  46.00%)     2720.20  +- 0.52% (  18.97%)
    Hmean  32      4704.84  +- 0.35% (        )     4759.03  +- 0.43% (   1.15%)     4774.48  +- 0.30% (   1.48%)
    Hmean  64      7578.04  +- 0.27% (        )     7533.70  +- 0.43% (  -0.59%)     7462.17  +- 0.65% (  -1.53%)
    Hmean  128     6998.52  +- 0.16% (        )     6987.59  +- 0.12% (  -0.16%)     6909.17  +- 0.14% (  -1.28%)
    Hmean  192     6901.35  +- 0.25% (        )     6913.16  +- 0.10% (   0.17%)     6855.47  +- 0.21% (  -0.66%)
    
                                 5.2.0 3C-turbo                   5.2.0 4C-turbo                  5.2.0 12C-turbo
    - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    Hmean  1        128.43  +- 0.28% (   1.34%)      130.64  +- 3.81% (   3.09%)      153.71  +- 5.89% (  21.30%)
    Hmean  2        311.70  +- 6.15% (  20.79%)      281.66  +- 3.40% (   9.15%)      305.08  +- 5.70% (  18.23%)
    Hmean  4        641.98  +- 2.32% (  24.83%)      623.88  +- 5.28% (  21.31%)      906.84  +- 4.65% (  76.32%)
    Hmean  8       1633.31  +- 1.56% (  46.96%)     1714.16  +- 0.93% (  54.24%)     2095.74  +- 0.47% (  88.57%)
    Hmean  16      3047.24  +- 0.42% (  33.27%)     3155.02  +- 0.30% (  37.99%)     3634.58  +- 0.15% (  58.96%)
    Hmean  32      4734.31  +- 0.60% (   0.63%)     4804.38  +- 0.23% (   2.12%)     4674.62  +- 0.27% (  -0.64%)
    Hmean  64      7699.74  +- 0.35% (   1.61%)     7499.72  +- 0.34% (  -1.03%)     7659.03  +- 0.25% (   1.07%)
    Hmean  128     6935.18  +- 0.15% (  -0.91%)     6942.54  +- 0.10% (  -0.80%)     7004.85  +- 0.12% (   0.09%)
    Hmean  192     6901.62  +- 0.12% (   0.00%)     6856.93  +- 0.10% (  -0.64%)     6978.74  +- 0.10% (   1.12%)
    
    This is one of the cases where the patch still can't surpass active
    intel_pstate, not even when freq_max is as low as 12C-turbo. Otherwise, gains are
    visible up to 16 clients and the saturated scenario is the same as baseline.
    
    The scores in the summary table from the previous sections are ratios of
    geometric means of the results over different clients, as seen in this table.
    
    Machine            : 80x-BROADWELL-NUMA
    Benchmark          : kernbench (kernel compilation)
    Varying parameter  : number of jobs
    Unit               : seconds (lower is better)
    
                       5.2.0 vanilla (BASELINE)               5.2.0 intel_pstate                   5.2.0 1C-turbo
    - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    Amean  2        379.68  +- 0.06% (        )      330.20  +- 0.43% (  13.03%)      285.93  +- 0.07% (  24.69%)
    Amean  4        200.15  +- 0.24% (        )      175.89  +- 0.22% (  12.12%)      153.78  +- 0.25% (  23.17%)
    Amean  8        106.20  +- 0.31% (        )       95.54  +- 0.23% (  10.03%)       86.74  +- 0.10% (  18.32%)
    Amean  16        56.96  +- 1.31% (        )       53.25  +- 1.22% (   6.50%)       48.34  +- 1.73% (  15.13%)
    Amean  32        34.80  +- 2.46% (        )       33.81  +- 0.77% (   2.83%)       30.28  +- 1.59% (  12.99%)
    Amean  64        26.11  +- 1.63% (        )       25.04  +- 1.07% (   4.10%)       22.41  +- 2.37% (  14.16%)
    Amean  128       24.80  +- 1.36% (        )       23.57  +- 1.23% (   4.93%)       21.44  +- 1.37% (  13.55%)
    Amean  160       24.85  +- 0.56% (        )       23.85  +- 1.17% (   4.06%)       21.25  +- 1.12% (  14.49%)
    
                                 5.2.0 3C-turbo                   5.2.0 4C-turbo                   5.2.0 8C-turbo
    - - - - - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    Amean  2        284.08  +- 0.13% (  25.18%)      283.96  +- 0.51% (  25.21%)      285.05  +- 0.21% (  24.92%)
    Amean  4        153.18  +- 0.22% (  23.47%)      154.70  +- 1.64% (  22.71%)      153.64  +- 0.30% (  23.24%)
    Amean  8         87.06  +- 0.28% (  18.02%)       86.77  +- 0.46% (  18.29%)       86.78  +- 0.22% (  18.28%)
    Amean  16        48.03  +- 0.93% (  15.68%)       47.75  +- 1.99% (  16.17%)       47.52  +- 1.61% (  16.57%)
    Amean  32        30.23  +- 1.20% (  13.14%)       30.08  +- 1.67% (  13.57%)       30.07  +- 1.67% (  13.60%)
    Amean  64        22.59  +- 2.02% (  13.50%)       22.63  +- 0.81% (  13.32%)       22.42  +- 0.76% (  14.12%)
    Amean  128       21.37  +- 0.67% (  13.82%)       21.31  +- 1.15% (  14.07%)       21.17  +- 1.93% (  14.63%)
    Amean  160       21.68  +- 0.57% (  12.76%)       21.18  +- 1.74% (  14.77%)       21.22  +- 1.00% (  14.61%)
    
    The patch outperform active intel_pstate (and baseline) by a considerable
    margin; the summary table from the previous section says 4C turbo and active
    intel_pstate are 0.83 and 0.93 against baseline respectively, so 4C turbo is
    0.83/0.93=0.89 against intel_pstate (~10% better on average). There is no
    noticeable difference with regard to the value of freq_max.
    
    Machine            : 8x-SKYLAKE-UMA
    Benchmark          : gitsource (time to run the git unit test suite)
    Varying parameter  : none
    Unit               : seconds (lower is better)
    
                                5.2.0 vanilla           5.2.0 intel_pstate/hwp         5.2.0 1C-turbo
    - - - - - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    Amean         858.85  +- 1.16% (        )      791.94  +- 0.21% (   7.79%)      474.95 (  44.70%)
    
                               5.2.0 3C-turbo                   5.2.0 4C-turbo
    - - - - - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    Amean         475.26  +- 0.20% (  44.66%)      474.34  +- 0.13% (  44.77%)
    
    In this test, which is of interest as representing shell-intensive
    (i.e. fork-intensive) serialized workloads, invariant schedutil outperforms
    intel_pstate/powersave by a whopping 40% margin.
    
    5.3.4 POWER CONSUMPTION, PERFORMANCE-PER-WATT
    ---------------------------------------------
    
    The following table shows average power consumption in watt for each
    benchmark. Data comes from turbostat (package average), which in turn is read
    from the RAPL interface on CPUs. We know the patch affects CPU frequencies so
    it's reasonable to ignore other power consumers (such as memory or I/O). Also,
    we don't have a power meter available in the lab so RAPL is the best we have.
    
    turbostat sampled average power every 10 seconds for the entire duration of
    each benchmark. We took all those values and averaged them (i.e. with don't
    have detail on a per-parameter granularity, only on whole benchmarks).
    
    80x-BROADWELL-NUMA (power consumption, watts)
                                                        +--------+
                   BASELINE I_PSTATE       1C       3C  |     4C |      8C
    pgbench-ro       130.01   142.77   131.11   132.45  | 134.65 |  136.84
    pgbench-rw        68.30    60.83    71.45    71.70  |  71.65 |   72.54
    dbench4           90.25    59.06   101.43    99.89  | 101.10 |  102.94
    netperf-udp       65.70    69.81    66.02    68.03  |  68.27 |   68.95
    netperf-tcp       88.08    87.96    88.97    88.89  |  88.85 |   88.20
    tbench4          142.32   176.73   153.02   163.91  | 165.58 |  176.07
    kernbench         92.94   101.95   114.91   115.47  | 115.52 |  115.10
    gitsource         40.92    41.87    75.14    75.20  |  75.40 |   75.70
                                                        +--------+
    8x-SKYLAKE-UMA (power consumption, watts)
                                                        +--------+
                  BASELINE I_PSTATE/HWP    1C       3C  |     4C |
    pgbench-ro        46.49    46.68    46.56    46.59  |  46.52 |
    pgbench-rw        29.34    31.38    30.98    31.00  |  31.00 |
    dbench4           27.28    27.37    27.49    27.41  |  27.38 |
    netperf-udp       22.33    22.41    22.36    22.35  |  22.36 |
    netperf-tcp       27.29    27.29    27.30    27.31  |  27.33 |
    tbench4           41.13    45.61    43.10    43.33  |  43.56 |
    kernbench         42.56    42.63    43.01    43.01  |  43.01 |
    gitsource         13.32    13.69    17.33    17.30  |  17.35 |
                                                        +--------+
    48x-HASWELL-NUMA (power consumption, watts)
                                                        +--------+
                   BASELINE I_PSTATE       1C       3C  |     4C |     12C
    pgbench-ro       128.84   136.04   129.87   132.43  | 132.30 |  134.86
    pgbench-rw        37.68    37.92    37.17    37.74  |  37.73 |   37.31
    dbench4           28.56    28.73    28.60    28.73  |  28.70 |   28.79
    netperf-udp       56.70    60.44    56.79    57.42  |  57.54 |   57.52
    netperf-tcp       75.49    75.27    75.87    76.02  |  76.01 |   75.95
    tbench4          115.44   139.51   119.53   123.07  | 123.97 |  130.22
    kernbench         83.23    91.55    95.58    95.69  |  95.72 |   96.04
    gitsource         36.79    36.99    39.99    40.34  |  40.35 |   40.23
                                                        +--------+
    
    A lower power consumption isn't necessarily better, it depends on what is done
    with that energy. Here are tables with the ratio of performance-per-watt on
    each machine and benchmark. Higher is always better; a tilde (~) means a
    neutral ratio (i.e. 1.00).
    
    80x-BROADWELL-NUMA (performance-per-watt ratios; higher is better)
                                         +------+
                 I_PSTATE     1C     3C  |   4C |    8C
    pgbench-ro       1.04   1.06   0.94  | 1.07 |  1.08
    pgbench-rw       1.10   0.97   0.96  | 0.96 |  0.97
    dbench4          1.24   0.94   0.95  | 0.94 |  0.92
    netperf-udp      ~      1.02   1.02  | ~    |  1.02
    netperf-tcp      ~      1.02   ~     | ~    |  1.02
    tbench4          1.26   1.10   1.06  | 1.12 |  1.26
    kernbench        0.98   0.97   0.97  | 0.97 |  0.98
    gitsource        ~      1.11   1.11  | 1.11 |  1.13
                                         +------+
    
    8x-SKYLAKE-UMA (performance-per-watt ratios; higher is better)
                                         +------+
             I_PSTATE/HWP     1C     3C  |   4C |
    pgbench-ro       ~      ~      ~     | ~    |
    pgbench-rw       0.95   0.97   0.96  | 0.96 |
    dbench4          ~      ~      ~     | ~    |
    netperf-udp      ~      ~      ~     | ~    |
    netperf-tcp      ~      ~      ~     | ~    |
    tbench4          1.17   1.09   1.08  | 1.10 |
    kernbench        ~      ~      ~     | ~    |
    gitsource        1.06   1.40   1.40  | 1.40 |
                                         +------+
    
    48x-HASWELL-NUMA  (performance-per-watt ratios; higher is better)
                                         +------+
                 I_PSTATE     1C     3C  |   4C |   12C
    pgbench-ro       1.09   ~      1.09  | 1.03 |  1.11
    pgbench-rw       ~      0.86   ~     | ~    |  0.86
    dbench4          ~      1.02   1.02  | 1.02 |  ~
    netperf-udp      ~      0.97   1.03  | 1.02 |  ~
    netperf-tcp      0.96   ~      ~     | ~    |  ~
    tbench4          1.24   ~      1.06  | 1.05 |  1.11
    kernbench        0.97   0.97   0.98  | 0.97 |  0.96
    gitsource        1.03   1.33   1.32  | 1.32 |  1.33
                                         +------+
    
    These results are overall pleasing: in plenty of cases we observe
    performance-per-watt improvements. The few regressions (read/write pgbench and
    dbench on the Broadwell machine) are of small magnitude. kernbench loses a few
    percentage points (it has a 10-15% performance improvement, but apparently the
    increase in power consumption is larger than that). tbench4 and gitsource, which
    benefit the most from the patch, keep a positive score in this table which is
    a welcome surprise; that suggests that in those particular workloads the
    non-invariant schedutil (and active intel_pstate, too) makes some rather
    suboptimal frequency selections.
    
    +-------------------------------------------------------------------------+
    | 6. MICROARCH'ES ADDRESSED HERE
    +-------------------------------------------------------------------------+
    
    The patch addresses Xeon Core processors that use MSR_PLATFORM_INFO and
    MSR_TURBO_RATIO_LIMIT to advertise their base frequency and turbo frequencies
    respectively. This excludes the recent Xeon Scalable Performance processors
    line (Xeon Gold, Platinum etc) whose MSRs have to be parsed differently.
    
    Subsequent patches will address:
    
    * Xeon Scalable Performance processors and Atom Goldmont/Goldmont Plus
    * Xeon Phi (Knights Landing, Knights Mill)
    * Atom Silvermont
    
    +-------------------------------------------------------------------------+
    | 7. REFERENCES
    +-------------------------------------------------------------------------+
    
    Tests have been run with the help of the MMTests performance testing
    framework, see github.com/gormanm/mmtests. The configuration file names for
    the benchmark used are:
    
        db-pgbench-timed-ro-small-xfs
        db-pgbench-timed-rw-small-xfs
        io-dbench4-async-xfs
        network-netperf-unbound
        network-tbench
        scheduler-unbound
        workload-kerndevel-xfs
        workload-shellscripts-xfs
        hpc-nas-c-class-mpi-full-xfs
        hpc-nas-c-class-omp-full
    
    All those benchmarks are generally available on the web:
    
    pgbench: https://www.postgresql.org/docs/10/pgbench.html
    netperf: https://hewlettpackard.github.io/netperf/
    dbench/tbench: https://dbench.samba.org/
    gitsource: git unit test suite, github.com/git/git
    NAS Parallel Benchmarks: https://www.nas.nasa.gov/publications/npb.html
    hackbench: https://people.redhat.com/mingo/cfs-scheduler/tools/hackbench.c
    
    Suggested-by: Peter Zijlstra <peterz@infradead.org>
    Signed-off-by: Giovanni Gherdovich <ggherdovich@suse.cz>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Acked-by: Doug Smythies <dsmythies@telus.net>
    Acked-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Link: https://lkml.kernel.org/r/20200122151617.531-2-ggherdovich@suse.cz

commit cb724911f495b3e8c5c321776b6975689d26579e
Author: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
Date:   Fri Jan 24 19:23:01 2020 +0200

    drm/i915: Fix inconsistance between pfit.enable and scaler freeing
    
    Despite that during hw readout we seem to have scalers assigned
    to pipes, then call atomic_setup_scalers, at the commit stage in
    skl_update_scaler there is a check, that if we have fb src and
    dest of same size, we stage freeing of that scaler.
    
    However we don't update pfit.enabled flag then, which makes
    the state inconsistent, which in turn triggers a WARN_ON
    in skl_pfit_enable, because we have pfit enabled,
    but no assigned scaler.
    
    To me this looks weird that we kind of do the decision
    to use or not use the scaler at skl_update_scaler stage
    but not in intel_atomic_setup_scalers, moreover
    not updating the whole state consistently.
    
    This fix is to not free the scaler if we have pfit.enabled
    flag set, so that the state is now consistent
    and the warnings are gone.
    
    v2: - Put pfit.enable check into crtc specific place
          (Ville Syrjälä)
    
    Bugzilla: https://gitlab.freedesktop.org/drm/intel/issues/577
    Signed-off-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Tested-by: Tomi Sarvela <tomi.p.sarvela@intel.com>
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Link: https://patchwork.freedesktop.org/patch/msgid/20200124172301.16484-1-stanislav.lisovskiy@intel.com

commit 0b09f98987568842422610f6622068c14e79b707
Author: Bingbu Cao <bingbu.cao@intel.com>
Date:   Fri Jan 17 09:18:30 2020 +0100

    media: Revert "media: staging/intel-ipu3: make imgu use fixed running mode"
    
    This reverts commit e878742c83ec26ef256ebb6b36a4d44644548f25.
    
    Imgu should still keep the capability and flexibility to allow user to
    run 2 video pipes, as the user may use the video pipe to capture still
    frames with less system load and power than still pipe.
    
    Suggested-by: Tomasz Figa <tfiga@chromium.org>
    Signed-off-by: Bingbu Cao <bingbu.cao@intel.com>
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 4134aaa11bd9c3e65ec07a1fcd59f57d4c58c434
Author: Wenjing Liu <Wenjing.Liu@amd.com>
Date:   Tue Dec 17 12:38:54 2019 -0500

    drm/amd/display: wait for test pattern after when all pipes are programmed
    
    [why]
    Currently we wait for test pattern after each pipe is programmed.  For
    ODM combined scenario it will cause test pattern is shown on only half
    screen for 1 frame. This is not desirable.
    
    [how]
    No wait between odm pipe programming, only wait after all pipes are
    programmed.
    
    Signed-off-by: Wenjing Liu <Wenjing.Liu@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Harry Wentland <harry.wentland@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 225a3070cf4dfd16686dd2f2eca7512c4e758ca2
Author: Nikola Cornij <nikola.cornij@amd.com>
Date:   Thu Nov 7 13:06:48 2019 -0500

    drm/amd/display: Map DSC resources 1-to-1 if numbers of OPPs and DSCs are equal
    
    [ Upstream commit a1fc44b609b4e9c0941f0e4a1fc69d367af5ab69 ]
    
    [why]
    On ASICs where number of DSCs is the same as OPPs there's no need
    for DSC resource management. Mappping 1-to-1 fixes mode-set- or S3-
    -related issues for such platforms.
    
    [how]
    Map DSC resources 1-to-1 to pipes only if number of OPPs is the same
    as number of DSCs. This will still keep other ASICs working.
    A follow-up patch to fix mode-set issues on those ASICs will be
    required if testing shows issues with mode set.
    
    Signed-off-by: Nikola Cornij <nikola.cornij@amd.com>
    Reviewed-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 185563ec11956ec1237d62fae80eab593ee63ca9
Author: Jan Stancek <jstancek@redhat.com>
Date:   Mon Nov 11 12:58:24 2019 -0800

    iomap: fix return value of iomap_dio_bio_actor on 32bit systems
    
    [ Upstream commit e9f930ac88a8936ccc2d021110c98810cf5aa810 ]
    
    Naresh reported LTP diotest4 failing for 32bit x86 and arm -next
    kernels on ext4. Same problem exists in 5.4-rc7 on xfs.
    
    The failure comes down to:
      openat(AT_FDCWD, "testdata-4.5918", O_RDWR|O_DIRECT) = 4
      mmap2(NULL, 4096, PROT_READ, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7f7b000
      read(4, 0xb7f7b000, 4096)              = 0 // expects -EFAULT
    
    Problem is conversion at iomap_dio_bio_actor() return. Ternary
    operator has a return type and an attempt is made to convert each
    of operands to the type of the other. In this case "ret" (int)
    is converted to type of "copied" (unsigned long). Both have size
    of 4 bytes:
        size_t copied = 0;
        int ret = -14;
        long long actor_ret = copied ? copied : ret;
    
        On x86_64: actor_ret == -14;
        On x86   : actor_ret == 4294967282
    
    Replace ternary operator with 2 return statements to avoid this
    unwanted conversion.
    
    Fixes: 4721a6010990 ("iomap: dio data corruption and spurious errors when pipes fill")
    Reported-by: Naresh Kamboju <naresh.kamboju@linaro.org>
    Signed-off-by: Jan Stancek <jstancek@redhat.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e878742c83ec26ef256ebb6b36a4d44644548f25
Author: Bingbu Cao <bingbu.cao@intel.com>
Date:   Mon Dec 30 10:26:25 2019 +0100

    media: staging/intel-ipu3: make imgu use fixed running mode
    
    Currently, the imgu running mode need user to set by v4l2 ctrl.
    However, imgu only support 2 pipes and 2 operation modes - video and
    still. This patch make the first imgu subdev running as video and second
    one running as still, it will make the user understand easily, it can
    also cover current camera use cases requirement. The running mode is set
    during subdev registering, no race-condition after change, so it is safe
    to change the mode data type to integer.
    
    Signed-off-by: Bingbu Cao <bingbu.cao@intel.com>
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+huawei@kernel.org>

commit 19378ed7eb3a7649dc62502a776b6b3eb3054066
Author: Nikola Cornij <nikola.cornij@amd.com>
Date:   Wed Aug 28 18:30:43 2019 -0400

    drm/amd/display: Set number of pipes to 1 if the second pipe was disabled
    
    [ Upstream commit 2fef0faa1cdc5d41ce3ef83f7b8f7e7ecb02d700 ]
    
    [why]
    Some ODM-related register settings are inconsistently updated by VBIOS, causing
    the state in DC to be invalid, which would then end up crashing in certain
    use-cases (such as disable/enable device).
    
    [how]
    Check the enabled status of the second pipe when determining the number of
    OPTC sources. If the second pipe is disabled, set the number of sources to 1
    regardless of other settings (that may not be updated correctly).
    
    Signed-off-by: Nikola Cornij <nikola.cornij@amd.com>
    Reviewed-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8c4bba5ae24e1e76d82323592e5b850ab8db80f2
Author: José Roberto de Souza <jose.souza@intel.com>
Date:   Sun Dec 22 17:06:54 2019 -0800

    drm/i915/display: Add comment to a function that probably can be removed
    
    This function is only called from port sync and it is identical to
    what will be executed again in intel_update_crtc() over port sync
    pipes.
    If it is really necessary at least it deserves a better name and a
    comment, leaving it to people working on port sync.
    
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Cc: Manasi Navare <manasi.d.navare@intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: José Roberto de Souza <jose.souza@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191223010654.67037-7-jose.souza@intel.com

commit 080d47bfae80bffd7dd130fd721e91d29c9c0d0a
Author: José Roberto de Souza <jose.souza@intel.com>
Date:   Sun Dec 22 17:06:53 2019 -0800

    drm/i915/mst: Force modeset on MST slaves when master needs a modeset
    
    MST master can not be disabled while it have attached MST slaves, so
    it is necessary force a modeset in all of its slaves.
    
    v3:
    - moved handling to intel_atomic_check() this way is guarantee that
    all pipes will have its state computed
    
    v4:
    - added a function to return if MST master neeeds modeset to simply
    code in intel_atomic_check()
    
    v5:
    - fixed and moved code to check if MST master needs a modeset
    
    v6:
    - previons version of this patch was split into two patches
    
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Lucas De Marchi <lucas.demarchi@intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: José Roberto de Souza <jose.souza@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191223010654.67037-6-jose.souza@intel.com

commit 5cb5b370c1be2fab6f75aec1b2bce7d6fcdaed6a
Author: José Roberto de Souza <jose.souza@intel.com>
Date:   Sun Dec 22 17:06:52 2019 -0800

    drm/i915/display: Prepare for fastset external dependencies check
    
    MST and port sync have master and slaves pipes and it brings
    dependencies between pipes to allow fastset.
    For example if only MST master needs a modeset all of its slaves also
    needs to do a modeset.
    
    This patch adds the base for external dependencies check, the MST and
    port sync bits will be added in another patches.
    
    v3:
    - moved handling to intel_atomic_check() this way is guarantee that
    all pipes will have its state computed
    
    v4:
    - added a function to return if MST master neeeds modeset to simply
    code in intel_atomic_check()
    
    v5:
    - fixed and moved code to check if MST master needs a modeset
    
    v6:
    - previons version of this patch was split into two patches
    
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Lucas De Marchi <lucas.demarchi@intel.com>
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Cc: Manasi Navare <manasi.d.navare@intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: José Roberto de Souza <jose.souza@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191223010654.67037-5-jose.souza@intel.com

commit 659f14158f1f0d6d8b3246aa67898fd66b0d5cda
Author: José Roberto de Souza <jose.souza@intel.com>
Date:   Sun Dec 22 17:06:50 2019 -0800

    drm/i915/display: Always enables MST master pipe first
    
    Due to DDB overlaps the pipe enabling sequence is not always crescent.
    As the previous patch selects the smallest pipe/transcoder in the MST
    stream to be master and it needs to be enabled first, this changes
    were needed to guarantee that.
    
    So first lets enable all pipes that do not need a fullmodeset as
    those don't have any external dependency and those are the ones that
    can overlap with each other.
    
    Then on the second loop it will enable all the pipes that needs a
    modeset and don't depends on other pipes like MST master
    pipe/transcoder.
    
    Then finally all the pipes that needs a modeset and have dependency
    on other pipes, that at this point are alread enabled.
    
    v3: rebased
    
    v4:
    - added check for modeset_pipes too to decide if is necessary for a
    wait a vblank
    - added DDB allocation overlap check for pipes that needs a modeset
    
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Cc: Matt Roper <matthew.d.roper@intel.com>
    Cc: Manasi Navare <manasi.d.navare@intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: José Roberto de Souza <jose.souza@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191223010654.67037-3-jose.souza@intel.com

commit 6671c367a9beae742855317d278cf9922bf556fe
Author: José Roberto de Souza <jose.souza@intel.com>
Date:   Sun Dec 22 17:06:49 2019 -0800

    drm/i915/tgl: Select master transcoder for MST stream
    
    On TGL the blending of all the streams have moved from DDI to
    transcoder, so now every transcoder working over the same MST port must
    send its stream to a master transcoder and master will send to DDI
    respecting the time slots.
    
    So here adding all the CRTCs that shares the same MST stream if
    needed and computing their state again, it will pick the lowest
    pipe/transcoder among the ones in the same stream to be master.
    
    Most of the time skl_commit_modeset_enables() enables pipes in a
    crescent order but due DDB overlapping it might not happen, this
    scenarios will be handled in the next patch.
    
    v2:
    - Using recently added intel_crtc_state_reset() to set
    mst_master_transcoder to invalid transcoder for all non gen12 & MST
    code paths
    - Setting lowest pipe/transcoder as master, previously it was the
    first one but setting a predictable one will help in future MST e
    port sync integration
    - Moving to intel type as much as we can
    
    v3:
    - Now intel_dp_mst_master_trans_compute() returns the MST master transcoder
    - Replaced stdbool.h by linux/types.h
    - Skip the connector being checked in
    intel_dp_mst_atomic_master_trans_check()
    - Using pipe instead of transcoder to compute MST master
    
    v4:
    - renamed connector_state to conn_state
    
    v5:
    - Improved the parameters of intel_dp_mst_master_trans_compute() to
    simply code
    - Added call drm_atomic_add_affected_planes() in
    intel_dp_mst_atomic_master_trans_check() as helper could not do it
    for us
    - Removed "if (ret)" left over from v3 changes
    
    v6:
    - handled ret == I915_MAX_PIPES case in compute
    
    BSpec: 50493
    BSpec: 49190
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Lucas De Marchi <lucas.demarchi@intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: José Roberto de Souza <jose.souza@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191223010654.67037-2-jose.souza@intel.com

commit b3e57bccd68a166f1a0e40e482b5645af15525b4
Author: Dhinakaran Pandiyan <dhinakaran.pandiyan@intel.com>
Date:   Sat Dec 21 14:05:39 2019 +0200

    drm/i915/tgl: Gen-12 render decompression
    
    Gen-12 display decompression operates on Y-tiled compressed main surface.
    The CCS is linear and has 4 bits of metadata for each main surface cache
    line pair, a size ratio of 1:256. Gen-12 display decompression is
    incompatible with buffers compressed by earlier GPUs, so make use of a new
    modifier to identify gen-12 compression. Another notable change is that
    render decompression is supported on all planes except cursor and on all
    pipes. Start by adding render decompression support for [A,X]BGR888 pixel
    formats.
    
    v2: Fix checkpatch warnings (Lucas)
    v3:
    Rebase, disable color clear, styling changes and modify
    intel_tile_width_bytes and intel_tile_height to handle linear CCS
    v4:
    - Use format block descriptors and the i915 specific func to get the
      subsampling for each color plane.
    - Use helpers to convert between CCS and main planes.
    v5:
    - Fix subsampling returned by intel_fb_plane_get_subsampling() for
      the CCS plane of the first plane.
    v6:
    - Rebased on v2 of patch 4.
    v7:
    - Fix plane dimensions during FB check.
    
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Matt Roper <matthew.d.roper@intel.com>
    Cc: Nanley G Chery <nanley.g.chery@intel.com>
    Cc: Jason Ekstrand <jason@jlekstrand.net>
    Cc: Radhakrishna Sripada <radhakrishna.sripada@intel.com>
    Signed-off-by: Dhinakaran Pandiyan <dhinakaran.pandiyan@intel.com>
    Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Reviewed-by: Radhakrishna Sripada <radhakrishna.sripada@intel.com> (v6)
    Link: https://patchwork.freedesktop.org/patch/msgid/20191221120543.22816-7-imre.deak@intel.com

commit cabeacd4cc132873de212fcb0e8739b95e6f2a02
Author: Jani Nikula <jani.nikula@intel.com>
Date:   Thu Dec 12 15:47:28 2019 +0200

    drm/i915/dsc: fix DSC power domains for DSI
    
    Fix several issues with DSC power domains that did not take DSI
    transcoders into account:
    
    - On TGL+ we need to use PW2 for DSC on pipe A, not transcoder A. There
      is no longer an eDP transcoder, but there are two DSI transcoders
      which may be connected to pipe A.
    
    - On TGL+ we need to use the pipe, not transcoder, power domains for DSC
      on pipes other than A. Again, there are DSI transcoders.
    
    - On ICL we need to use PW2 for DSC also for DSI transcoders, not just
      for the eDP transcoder.
    
    Using is_pipe_dsc() also adds the warning about ICL pipe A DSC, which
    does not exist.
    
    Cc: José Roberto de Souza <jose.souza@intel.com>
    Cc: Manasi Navare <manasi.d.navare@intel.com>
    Cc: Vandita Kulkarni <vandita.kulkarni@intel.com>
    Reviewed-by: Vandita Kulkarni <vandita.kulkarni@intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191212134728.18432-1-jani.nikula@intel.com

commit 5479034576ec8b7166a66efe5de1d911feb43d4a
Author: Sung Lee <sung.lee@amd.com>
Date:   Wed Dec 4 18:36:07 2019 -0500

    drm/amd/display: Lower DPP DTO only when safe
    
    [Why]
    A corner case currently exists where DPP DTO is lowered before
    pipes are updated to a higher viewport. This causes underflow
    as the DPPCLK is too low for the current viewport.
    
    [How]
    Only lower DPP DTO when it is safe to lower, or if
    the newer clocks are higher than the current ones.
    
    Signed-off-by: Sung Lee <sung.lee@amd.com>
    Reviewed-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 1380c1bf5b9c31baf820ab545bbabf6b39bfdc0d
Author: Noah Abradjian <noah.abradjian@amd.com>
Date:   Fri Nov 29 13:48:36 2019 -0500

    drm/amd/display: Remove reliance on pipe indexing
    
    [Why]
    In certain instances, there was a reliance on pipe indexing being accurate. However, this
    assumption fails with harvesting of pipes 1 or 2, which can occur in production B6 parts.
    HW hang would occur as a result.
    
    [How]
    Use hubp index for mpcc, and do mpc_init for all theoretical pipes (including disabled ones).
    
    Signed-off-by: Noah Abradjian <noah.abradjian@amd.com>
    Reviewed-by: Yongqiang Sun <yongqiang.sun@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 6b5d7730d226bed8e87085d870e76fb9018ff0b1
Author: Noah Abradjian <noah.abradjian@amd.com>
Date:   Mon Nov 18 13:59:57 2019 -0500

    drm/amd/display: Add wait for flip not pending on pipe unlock
    
    [Why]
    Lack of proper timing caused intermittent underflow on unplug external DP.
    A previous fix was invalid and caused S0i3 regression, so had to be reverted.
    
    [How]
    When unlocking pipe, wait for no pipes to have flip pending before unlocking.
    
    Signed-off-by: Noah Abradjian <noah.abradjian@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 4c67dbea4d2b335634ab37daa148dca8e0e18555
Author: Darrick J. Wong <darrick.wong@oracle.com>
Date:   Sun Dec 2 08:38:07 2018 -0800

    iomap: partially revert 4721a601099 (simulated directio short read on EFAULT)
    
    [ Upstream commit 8f67b5adc030553fbc877124306f3f3bdab89aa8 ]
    
    In commit 4721a601099, we tried to fix a problem wherein directio reads
    into a splice pipe will bounce EFAULT/EAGAIN all the way out to
    userspace by simulating a zero-byte short read.  This happens because
    some directio read implementations (xfs) will call
    bio_iov_iter_get_pages to grab pipe buffer pages and issue asynchronous
    reads, but as soon as we run out of pipe buffers that _get_pages call
    returns EFAULT, which the splice code translates to EAGAIN and bounces
    out to userspace.
    
    In that commit, the iomap code catches the EFAULT and simulates a
    zero-byte read, but that causes assertion errors on regular splice reads
    because xfs doesn't allow short directio reads.  This causes infinite
    splice() loops and assertion failures on generic/095 on overlayfs
    because xfs only permit total success or total failure of a directio
    operation.  The underlying issue in the pipe splice code has now been
    fixed by changing the pipe splice loop to avoid avoid reading more data
    than there is space in the pipe.
    
    Therefore, it's no longer necessary to simulate the short directio, so
    remove the hack from iomap.
    
    Fixes: 4721a601099 ("iomap: dio data corruption and spurious errors when pipes fill")
    Reported-by: Murphy Zhou <jencce.kernel@gmail.com>
    Ranted-by: Amir Goldstein <amir73il@gmail.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 019b63253f8651ed305683368d3ddfe56082dcac
Author: Darrick J. Wong <darrick.wong@oracle.com>
Date:   Fri Nov 30 10:37:49 2018 -0800

    splice: don't read more than available pipe space
    
    [ Upstream commit 17614445576b6af24e9cf36607c6448164719c96 ]
    
    In commit 4721a601099, we tried to fix a problem wherein directio reads
    into a splice pipe will bounce EFAULT/EAGAIN all the way out to
    userspace by simulating a zero-byte short read.  This happens because
    some directio read implementations (xfs) will call
    bio_iov_iter_get_pages to grab pipe buffer pages and issue asynchronous
    reads, but as soon as we run out of pipe buffers that _get_pages call
    returns EFAULT, which the splice code translates to EAGAIN and bounces
    out to userspace.
    
    In that commit, the iomap code catches the EFAULT and simulates a
    zero-byte read, but that causes assertion errors on regular splice reads
    because xfs doesn't allow short directio reads.
    
    The brokenness is compounded by splice_direct_to_actor immediately
    bailing on do_splice_to returning <= 0 without ever calling ->actor
    (which empties out the pipe), so if userspace calls back we'll EFAULT
    again on the full pipe, and nothing ever gets copied.
    
    Therefore, teach splice_direct_to_actor to clamp its requests to the
    amount of free space in the pipe and remove the simulated short read
    from the iomap directio code.
    
    Fixes: 4721a601099 ("iomap: dio data corruption and spurious errors when pipes fill")
    Reported-by: Murphy Zhou <jencce.kernel@gmail.com>
    Ranted-by: Amir Goldstein <amir73il@gmail.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 807a59723109cf6e6bc4c081c8e9e505a9143bca
Author: Dave Chinner <dchinner@redhat.com>
Date:   Mon Nov 19 13:31:11 2018 -0800

    iomap: dio data corruption and spurious errors when pipes fill
    
    [ Upstream commit 4721a6010990971440b4ffefbdf014976b8eda2f ]
    
    When doing direct IO to a pipe for do_splice_direct(), then pipe is
    trivial to fill up and overflow as it can only hold 16 pages. At
    this point bio_iov_iter_get_pages() then returns -EFAULT, and we
    abort the IO submission process. Unfortunately, iomap_dio_rw()
    propagates the error back up the stack.
    
    The error is converted from the EFAULT to EAGAIN in
    generic_file_splice_read() to tell the splice layers that the pipe
    is full. do_splice_direct() completely fails to handle EAGAIN errors
    (it aborts on error) and returns EAGAIN to the caller.
    
    copy_file_write() then completely fails to handle EAGAIN as well,
    and so returns EAGAIN to userspace, having failed to copy the data
    it was asked to.
    
    Avoid this whole steaming pile of fail by having iomap_dio_rw()
    silently swallow EFAULT errors and so do short reads.
    
    To make matters worse, iomap_dio_actor() has a stale data exposure
    bug bio_iov_iter_get_pages() fails - it does not zero the tail block
    that it may have been left uncovered by partial IO. Fix the error
    handling case to drop to the sub-block zeroing rather than
    immmediately returning the -EFAULT error.
    
    Signed-off-by: Dave Chinner <dchinner@redhat.com>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 601a9ee0f0c71efdd36b7fe7b053e2fb42187c7e
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Tue Dec 10 16:41:02 2019 +0200

    drm/i915: Streamline skl_commit_modeset_enables()
    
    skl_commit_modeset_enables() is a bit of mess. Let's streamline
    it by simply tracking which pipes still need to be updated.
    As a bonus we get rid of the state->wm_results.dirty_pipes usage.
    
    v2: Rebase due to port sync
    
    Cc: José Roberto de Souza <jose.souza@intel.com>
    Reviewed-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com> #v1
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191210144105.3239-2-ville.syrjala@linux.intel.com

commit fb2d8e0cd4d76bdc4630defbd545de5ece594124
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Nov 27 22:12:10 2019 +0200

    drm/i915/fbc: Nuke bogus single pipe fbc1 restriction
    
    Not sure where the single pipe only restriction came for fbc1.
    Nothing I can see that would prevent this.
    
    v2: Nuke no_fbc_on_multiple_pipes() too
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191127201222.16669-3-ville.syrjala@linux.intel.com
    Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>

commit ad457191015a197b3daf1a259ed8e7f70bf68bb9
Author: José Roberto de Souza <jose.souza@intel.com>
Date:   Thu Dec 5 13:03:50 2019 -0800

    drm/i915/display: Refactor intel_commit_modeset_disables()
    
    Commit 9c722e17c1b9 ("drm/i915: Disable pipes in reverse order")
    reverted the order that pipes gets disabled because of TGL
    master/slave relationship between transcoders in MST mode.
    
    But as stated in a comment in skl_commit_modeset_enables() the
    enabling order is not always crescent, possibly causing previously
    selected slave transcoder being enabled before master so another
    approach will be needed to select a transcoder to master in MST mode.
    It will be similar to the approach taken in port sync.
    
    But instead of implement something like
    intel_trans_port_sync_modeset_disables() to MST lets simply it and
    iterate over all pipes 2 times, the first one disabling any slave and
    then disabling everything else.
    The MST bits will be added in another patch.
    
    v2:
    Not using crtc->active as it is deprecated
    
    v3:
    Removing is_trans_port_sync_mode() check, just check for
    is_trans_port_sync_master() is enough
    
    v4:
    Adding and using is_trans_port_sync_slave(), otherwise non-port sync
    pipes will be disabled in the first loop, what is not wrong but is
    not what patch description promises
    
    Cc: Lucas De Marchi <lucas.demarchi@intel.com>
    Cc: Manasi Navare <manasi.d.navare@intel.com>
    Cc: Matt Roper <matthew.d.roper@intel.com>
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com> (v2)
    Signed-off-by: José Roberto de Souza <jose.souza@intel.com>
    Reviewed-by: Matt Roper <matthew.d.roper@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191205210350.96795-3-jose.souza@intel.com

commit 1ac87297e50e5c6721b87711d4a0fff8423ab991
Author: José Roberto de Souza <jose.souza@intel.com>
Date:   Thu Dec 5 13:03:48 2019 -0800

    drm/i915/display: Do not check for the ddb allocations of turned off pipes
    
    It should not care about DDB allocations of pipes going through
    a fullmodeset, as at this point those pipes are disabled.
    The comment in the code also points to that but that was not what
    was being executed.
    
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: José Roberto de Souza <jose.souza@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191205210350.96795-1-jose.souza@intel.com

commit a1fc44b609b4e9c0941f0e4a1fc69d367af5ab69
Author: Nikola Cornij <nikola.cornij@amd.com>
Date:   Thu Nov 7 13:06:48 2019 -0500

    drm/amd/display: Map DSC resources 1-to-1 if numbers of OPPs and DSCs are equal
    
    [why]
    On ASICs where number of DSCs is the same as OPPs there's no need
    for DSC resource management. Mappping 1-to-1 fixes mode-set- or S3-
    -related issues for such platforms.
    
    [how]
    Map DSC resources 1-to-1 to pipes only if number of OPPs is the same
    as number of DSCs. This will still keep other ASICs working.
    A follow-up patch to fix mode-set issues on those ASICs will be
    required if testing shows issues with mode set.
    
    Signed-off-by: Nikola Cornij <nikola.cornij@amd.com>
    Reviewed-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit eab4bb97c8e7af219e12afc53f0def71a54d014b
Author: Nikola Cornij <nikola.cornij@amd.com>
Date:   Thu Nov 7 13:06:48 2019 -0500

    drm/amd/display: Map DSC resources 1-to-1 if numbers of OPPs and DSCs are equal
    
    [why]
    On ASICs where number of DSCs is the same as OPPs there's no need
    for DSC resource management. Mappping 1-to-1 fixes mode-set- or S3-
    -related issues for such platforms.
    
    [how]
    Map DSC resources 1-to-1 to pipes only if number of OPPs is the same
    as number of DSCs. This will still keep other ASICs working.
    A follow-up patch to fix mode-set issues on those ASICs will be
    required if testing shows issues with mode set.
    
    Signed-off-by: Nikola Cornij <nikola.cornij@amd.com>
    Reviewed-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 7181f5c5861013fc39fb51f3e8e804985d23250a
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Nov 27 21:05:54 2019 +0200

    drm/i915: Clean up the gen2 "no planes -> underrun" workaround
    
    We have the active_planes bitmask now so use it to properly
    determine when some planes are visible for the gen2 underrun
    workaround.
    
    This let's us almost eliminate intel_post_enable_primary().
    The manual underrun checks we can simply move into
    intel_atomic_commit_tail() since they loop over all the pipes
    already. No point in repeating the checks multiple times when
    there are multiple pipes in the commit.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191127190556.1574-6-ville.syrjala@linux.intel.com
    Reviewed-by: José Roberto de Souza <jose.souza@intel.com>

commit f0cfe98332d650f31b462207d63c496b4cedaee2
Author: Hui Peng <benquike@gmail.com>
Date:   Sat Oct 19 14:42:23 2019 +0300

    ath10k: Fix a NULL-ptr-deref bug in ath10k_usb_alloc_urb_from_pipe
    
    commit bfd6e6e6c5d2ee43a3d9902b36e01fc7527ebb27 upstream.
    
    The `ar_usb` field of `ath10k_usb_pipe_usb_pipe` objects
    are initialized to point to the containing `ath10k_usb` object
    according to endpoint descriptors read from the device side, as shown
    below in `ath10k_usb_setup_pipe_resources`:
    
    for (i = 0; i < iface_desc->desc.bNumEndpoints; ++i) {
            endpoint = &iface_desc->endpoint[i].desc;
    
            // get the address from endpoint descriptor
            pipe_num = ath10k_usb_get_logical_pipe_num(ar_usb,
                                                    endpoint->bEndpointAddress,
                                                    &urbcount);
            ......
            // select the pipe object
            pipe = &ar_usb->pipes[pipe_num];
    
            // initialize the ar_usb field
            pipe->ar_usb = ar_usb;
    }
    
    The driver assumes that the addresses reported in endpoint
    descriptors from device side  to be complete. If a device is
    malicious and does not report complete addresses, it may trigger
    NULL-ptr-deref `ath10k_usb_alloc_urb_from_pipe` and
    `ath10k_usb_free_urb_to_pipe`.
    
    This patch fixes the bug by preventing potential NULL-ptr-deref.
    
    Signed-off-by: Hui Peng <benquike@gmail.com>
    Reported-by: Hui Peng <benquike@gmail.com>
    Reported-by: Mathias Payer <mathias.payer@nebelwelt.net>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    [groeck: Add driver tag to subject, fix build warning]
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 19ba14ec43060a0646a5f1f366abf75478499500
Author: Hui Peng <benquike@gmail.com>
Date:   Sat Oct 19 14:42:23 2019 +0300

    ath10k: Fix a NULL-ptr-deref bug in ath10k_usb_alloc_urb_from_pipe
    
    commit bfd6e6e6c5d2ee43a3d9902b36e01fc7527ebb27 upstream.
    
    The `ar_usb` field of `ath10k_usb_pipe_usb_pipe` objects
    are initialized to point to the containing `ath10k_usb` object
    according to endpoint descriptors read from the device side, as shown
    below in `ath10k_usb_setup_pipe_resources`:
    
    for (i = 0; i < iface_desc->desc.bNumEndpoints; ++i) {
            endpoint = &iface_desc->endpoint[i].desc;
    
            // get the address from endpoint descriptor
            pipe_num = ath10k_usb_get_logical_pipe_num(ar_usb,
                                                    endpoint->bEndpointAddress,
                                                    &urbcount);
            ......
            // select the pipe object
            pipe = &ar_usb->pipes[pipe_num];
    
            // initialize the ar_usb field
            pipe->ar_usb = ar_usb;
    }
    
    The driver assumes that the addresses reported in endpoint
    descriptors from device side  to be complete. If a device is
    malicious and does not report complete addresses, it may trigger
    NULL-ptr-deref `ath10k_usb_alloc_urb_from_pipe` and
    `ath10k_usb_free_urb_to_pipe`.
    
    This patch fixes the bug by preventing potential NULL-ptr-deref.
    
    Signed-off-by: Hui Peng <benquike@gmail.com>
    Reported-by: Hui Peng <benquike@gmail.com>
    Reported-by: Mathias Payer <mathias.payer@nebelwelt.net>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    [groeck: Add driver tag to subject, fix build warning]
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6a965666b7e7475c2f8c8e724703db58b8a8a445
Merge: 32ef9553635a 3c0edea9b29f
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Nov 30 14:12:13 2019 -0800

    Merge tag 'notifications-pipe-prep-20191115' of git://git.kernel.org/pub/scm/linux/kernel/git/dhowells/linux-fs
    
    Pull pipe rework from David Howells:
     "This is my set of preparatory patches for building a general
      notification queue on top of pipes. It makes a number of significant
      changes:
    
       - It removes the nr_exclusive argument from __wake_up_sync_key() as
         this is always 1. This prepares for the next step:
    
       - Adds wake_up_interruptible_sync_poll_locked() so that poll can be
         woken up from a function that's holding the poll waitqueue
         spinlock.
    
       - Change the pipe buffer ring to be managed in terms of unbounded
         head and tail indices rather than bounded index and length. This
         means that reading the pipe only needs to modify one index, not
         two.
    
       - A selection of helper functions are provided to query the state of
         the pipe buffer, plus a couple to apply updates to the pipe
         indices.
    
       - The pipe ring is allowed to have kernel-reserved slots. This allows
         many notification messages to be spliced in by the kernel without
         allowing userspace to pin too many pages if it writes to the same
         pipe.
    
       - Advance the head and tail indices inside the pipe waitqueue lock
         and use wake_up_interruptible_sync_poll_locked() to poke poll
         without having to take the lock twice.
    
       - Rearrange pipe_write() to preallocate the buffer it is going to
         write into and then drop the spinlock. This allows kernel
         notifications to then be added the ring whilst it is filling the
         buffer it allocated. The read side is stalled because the pipe
         mutex is still held.
    
       - Don't wake up readers on a pipe if there was already data in it
         when we added more.
    
       - Don't wake up writers on a pipe if the ring wasn't full before we
         removed a buffer"
    
    * tag 'notifications-pipe-prep-20191115' of git://git.kernel.org/pub/scm/linux/kernel/git/dhowells/linux-fs:
      pipe: Remove sync on wake_ups
      pipe: Increase the writer-wakeup threshold to reduce context-switch count
      pipe: Check for ring full inside of the spinlock in pipe_write()
      pipe: Remove redundant wakeup from pipe_write()
      pipe: Rearrange sequence in pipe_write() to preallocate slot
      pipe: Conditionalise wakeup in pipe_read()
      pipe: Advance tail pointer inside of wait spinlock in pipe_read()
      pipe: Allow pipes to have kernel-reserved slots
      pipe: Use head and tail pointers for the ring, not cursor and length
      Add wake_up_interruptible_sync_poll_locked()
      Remove the nr_exclusive argument from __wake_up_sync_key()
      pipe: Reduce #inclusion of pipe_fs_i.h

commit 8d9875b47a5dae0690b04bbb9de68b0a0f1a2cce
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Oct 11 23:09:45 2019 +0300

    drm/i915: Don't set undefined bits in dirty_pipes
    
    skl_commit_modeset_enables() straight up compares dirty_pipes
    with a bitmask of already committed pipes. If we set bits in
    dirty_pipes for non-existent pipes that comparison will never
    work right. So let's limit ourselves to bits that exist.
    
    And we'll do the same for the active_pipes_changed bitmask.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191011200949.7839-5-ville.syrjala@linux.intel.com
    Reviewed-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>

commit 0126be140997f6d8080511c0dbbe9360b5632057
Author: Hui Peng <benquike@gmail.com>
Date:   Sat Oct 19 14:42:23 2019 +0300

    ath10k: Fix a NULL-ptr-deref bug in ath10k_usb_alloc_urb_from_pipe
    
    commit bfd6e6e6c5d2ee43a3d9902b36e01fc7527ebb27 upstream.
    
    The `ar_usb` field of `ath10k_usb_pipe_usb_pipe` objects
    are initialized to point to the containing `ath10k_usb` object
    according to endpoint descriptors read from the device side, as shown
    below in `ath10k_usb_setup_pipe_resources`:
    
    for (i = 0; i < iface_desc->desc.bNumEndpoints; ++i) {
            endpoint = &iface_desc->endpoint[i].desc;
    
            // get the address from endpoint descriptor
            pipe_num = ath10k_usb_get_logical_pipe_num(ar_usb,
                                                    endpoint->bEndpointAddress,
                                                    &urbcount);
            ......
            // select the pipe object
            pipe = &ar_usb->pipes[pipe_num];
    
            // initialize the ar_usb field
            pipe->ar_usb = ar_usb;
    }
    
    The driver assumes that the addresses reported in endpoint
    descriptors from device side  to be complete. If a device is
    malicious and does not report complete addresses, it may trigger
    NULL-ptr-deref `ath10k_usb_alloc_urb_from_pipe` and
    `ath10k_usb_free_urb_to_pipe`.
    
    This patch fixes the bug by preventing potential NULL-ptr-deref.
    
    Signed-off-by: Hui Peng <benquike@gmail.com>
    Reported-by: Hui Peng <benquike@gmail.com>
    Reported-by: Mathias Payer <mathias.payer@nebelwelt.net>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    [groeck: Add driver tag to subject, fix build warning]
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb211b52f576b14e12d44a57e4f7dc86145d063e
Author: Hui Peng <benquike@gmail.com>
Date:   Sat Oct 19 14:42:23 2019 +0300

    ath10k: Fix a NULL-ptr-deref bug in ath10k_usb_alloc_urb_from_pipe
    
    commit bfd6e6e6c5d2ee43a3d9902b36e01fc7527ebb27 upstream.
    
    The `ar_usb` field of `ath10k_usb_pipe_usb_pipe` objects
    are initialized to point to the containing `ath10k_usb` object
    according to endpoint descriptors read from the device side, as shown
    below in `ath10k_usb_setup_pipe_resources`:
    
    for (i = 0; i < iface_desc->desc.bNumEndpoints; ++i) {
            endpoint = &iface_desc->endpoint[i].desc;
    
            // get the address from endpoint descriptor
            pipe_num = ath10k_usb_get_logical_pipe_num(ar_usb,
                                                    endpoint->bEndpointAddress,
                                                    &urbcount);
            ......
            // select the pipe object
            pipe = &ar_usb->pipes[pipe_num];
    
            // initialize the ar_usb field
            pipe->ar_usb = ar_usb;
    }
    
    The driver assumes that the addresses reported in endpoint
    descriptors from device side  to be complete. If a device is
    malicious and does not report complete addresses, it may trigger
    NULL-ptr-deref `ath10k_usb_alloc_urb_from_pipe` and
    `ath10k_usb_free_urb_to_pipe`.
    
    This patch fixes the bug by preventing potential NULL-ptr-deref.
    
    Signed-off-by: Hui Peng <benquike@gmail.com>
    Reported-by: Hui Peng <benquike@gmail.com>
    Reported-by: Mathias Payer <mathias.payer@nebelwelt.net>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    [groeck: Add driver tag to subject, fix build warning]
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d6af906d8307a804a1af488564def0264ea57282
Author: Anilkumar Kolli <akolli@codeaurora.org>
Date:   Wed Nov 27 14:08:47 2019 +0000

    ath11k: qmi clean up ce and HTC service config update
    
    Copy CE and htc service configs for all pipes.
    
    Signed-off-by: Anilkumar Kolli <akolli@codeaurora.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit 0be0ee71816b2b6725e2b4f32ad6726c9d729777
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Nov 11 15:51:03 2019 -0800

    vfs: properly and reliably lock f_pos in fdget_pos()
    
    fdget_pos() is used by file operations that will read and update f_pos:
    things like "read()", "write()" and "lseek()" (but not, for example,
    "pread()/pwrite" that get their file positions elsewhere).
    
    However, it had two separate escape clauses for this, because not
    everybody wants or needs serialization of the file position.
    
    The first and most obvious case is the "file descriptor doesn't have a
    position at all", ie a stream-like file.  Except we didn't actually use
    FMODE_STREAM, but instead used FMODE_ATOMIC_POS.  The reason for that
    was that FMODE_STREAM didn't exist back in the days, but also that we
    didn't want to mark all the special cases, so we only marked the ones
    that _required_ position atomicity according to POSIX - regular files
    and directories.
    
    The case one was intentionally lazy, but now that we _do_ have
    FMODE_STREAM we could and should just use it.  With the change to use
    FMODE_STREAM, there are no remaining uses for FMODE_ATOMIC_POS, and all
    the code to set it is deleted.
    
    Any cases where we don't want the serialization because the driver (or
    subsystem) doesn't use the file position should just be updated to do
    "stream_open()".  We've done that for all the obvious and common
    situations, we may need a few more.  Quoting Kirill Smelkov in the
    original FMODE_STREAM thread (see link below for full email):
    
     "And I appreciate if people could help at least somehow with "getting
      rid of mixed case entirely" (i.e. always lock f_pos_lock on
      !FMODE_STREAM), because this transition starts to diverge from my
      particular use-case too far. To me it makes sense to do that
      transition as follows:
    
       - convert nonseekable_open -> stream_open via stream_open.cocci;
       - audit other nonseekable_open calls and convert left users that
         truly don't depend on position to stream_open;
       - extend stream_open.cocci to analyze alloc_file_pseudo as well (this
         will cover pipes and sockets), or maybe convert pipes and sockets
         to FMODE_STREAM manually;
       - extend stream_open.cocci to analyze file_operations that use
         no_llseek or noop_llseek, but do not use nonseekable_open or
         alloc_file_pseudo. This might find files that have stream semantic
         but are opened differently;
       - extend stream_open.cocci to analyze file_operations whose
         .read/.write do not use ppos at all (independently of how file was
         opened);
       - ...
       - after that remove FMODE_ATOMIC_POS and always take f_pos_lock if
         !FMODE_STREAM;
       - gather bug reports for deadlocked read/write and convert missed
         cases to FMODE_STREAM, probably extending stream_open.cocci along
         the road to catch similar cases
    
      i.e. always take f_pos_lock unless a file is explicitly marked as
      being stream, and try to find and cover all files that are streams"
    
    We have not done the "extend stream_open.cocci to analyze
    alloc_file_pseudo" as well, but the previous commit did manually handle
    the case of pipes and sockets.
    
    The other case where we can avoid locking f_pos is the "this file
    descriptor only has a single user and it is us, and thus there is no
    need to lock it".
    
    The second test was correct, although a bit subtle and worth just
    re-iterating here.  There are two kinds of other sources of references
    to the same file descriptor: file descriptors that have been explicitly
    shared across fork() or with dup(), and file tables having elevated
    reference counts due to threading (or explicit file sharing with
    clone()).
    
    The first case would have incremented the file count explicitly, and in
    the second case the previous __fdget() would have incremented it for us
    and set the FDPUT_FPUT flag.
    
    But in both cases the file count would be greater than one, so the
    "file_count(file) > 1" test catches both situations.  Also note that if
    file_count is 1, that also means that no other thread can have access to
    the file table, so there also cannot be races with concurrent calls to
    dup()/fork()/clone() that would increment the file count any other way.
    
    Link: https://lore.kernel.org/linux-fsdevel/20190413184404.GA13490@deco.navytux.spb.ru
    Cc: Kirill Smelkov <kirr@nexedi.com>
    Cc: Eic Dumazet <edumazet@google.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Cc: Marco Elver <elver@google.com>
    Cc: Andrea Parri <parri.andrea@gmail.com>
    Cc: Paul McKenney <paulmck@kernel.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit d8e464ecc17b4444e9a3e148a9748c4828c6328c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Nov 17 11:20:48 2019 -0800

    vfs: mark pipes and sockets as stream-like file descriptors
    
    In commit 3975b097e577 ("convert stream-like files -> stream_open, even
    if they use noop_llseek") Kirill used a coccinelle script to change
    "nonseekable_open()" to "stream_open()", which changed the trivial cases
    of stream-like file descriptors to the new model with FMODE_STREAM.
    
    However, the two big cases - sockets and pipes - don't actually have
    that trivial pattern at all, and were thus never converted to
    FMODE_STREAM even though it makes lots of sense to do so.
    
    That's particularly true when looking forward to the next change:
    getting rid of FMODE_ATOMIC_POS entirely, and just using FMODE_STREAM to
    decide whether f_pos updates are needed or not.  And if they are, we'll
    always do them atomically.
    
    This came up because KCSAN (correctly) noted that the non-locked f_pos
    updates are data races: they are clearly benign for the case where we
    don't care, but it would be good to just not have that issue exist at
    all.
    
    Note that the reason we used FMODE_ATOMIC_POS originally is that only
    doing it for the minimal required case is "safer" in that it's possible
    that the f_pos locking can cause unnecessary serialization across the
    whole write() call.  And in the worst case, that kind of serialization
    can cause deadlock issues: think writers that need readers to empty the
    state using the same file descriptor.
    
    [ Note that the locking is per-file descriptor - because it protects
      "f_pos", which is obviously per-file descriptor - so it only affects
      cases where you literally use the same file descriptor to both read
      and write.
    
      So a regular pipe that has separate reading and writing file
      descriptors doesn't really have this situation even though it's the
      obvious case of "reader empties what a bit writer concurrently fills"
    
      But we want to make pipes as being stream-line anyway, because we
      don't want the unnecessary overhead of locking, and because a named
      pipe can be (ab-)used by reading and writing to the same file
      descriptor. ]
    
    There are likely a lot of other cases that might want FMODE_STREAM, and
    looking for ".llseek = no_llseek" users and other cases that don't have
    an lseek file operation at all and making them use "stream_open()" might
    be a good idea.  But pipes and sockets are likely to be the two main
    cases.
    
    Cc: Kirill Smelkov <kirr@nexedi.com>
    Cc: Eic Dumazet <edumazet@google.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Cc: Marco Elver <elver@google.com>
    Cc: Andrea Parri <parri.andrea@gmail.com>
    Cc: Paul McKenney <paulmck@kernel.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 1aa4df7e41b6f37c677f0af8886c0900284e6ca1
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Oct 30 21:08:15 2019 +0200

    drm/i915: Preload LUTs if the hw isn't currently using them
    
    The LUTs are single buffered so in order to program them without
    tearing we'd have to do it during vblank (actually to be 100%
    effective it has to happen between start of vblank and frame start).
    We have no proper mechanism for that at the moment so we just
    defer loading them after the vblank waits have happened. That
    is not quite sufficient (especially when committing multiple pipes
    whose vblanks don't line up) so the LUT load will often leak into
    the following frame causing tearing.
    
    However in case the hardware wasn't previously using the LUT we
    can preload it before setting the enable bit (which is double
    buffered so won't tear). Let's determine if we can do such
    preloading and make it happen. Slight variation between the
    hardware requires some platforms specifics in the checks.
    
    Hans is seeing ugly colored flash on VLV/CHV macchines (GPD win
    and Asus T100HA) when the gamma LUT gets loaded for the first
    time as the BIOS has left some junk in the LUT memory.
    
    v2: Deal with uapi vs. hw crtc state split
        s/GCM/CGM/ typo fix
    
    Cc: Hans de Goede <hdegoede@redhat.com>
    Fixes: 051a6d8d3ca0 ("drm/i915: Move LUT programming to happen after vblank waits")
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191030190815.7359-1-ville.syrjala@linux.intel.com
    Tested-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    (cherry picked from commit 0ccc42a2fd5107a7f58e62c8b35b61de9a70ce82)
    Signed-off-by: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    (cherry picked from commit f77021372e2880237278e0ee57faadc077a8256a)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>

commit 6718b6f855a0b4962d54bd625be2718cb820cec6
Author: David Howells <dhowells@redhat.com>
Date:   Wed Oct 16 16:47:32 2019 +0100

    pipe: Allow pipes to have kernel-reserved slots
    
    Split pipe->ring_size into two numbers:
    
     (1) pipe->ring_size - indicates the hard size of the pipe ring.
    
     (2) pipe->max_usage - indicates the maximum number of pipe ring slots that
         userspace orchestrated events can fill.
    
    This allows for a pipe that is both writable by the general kernel
    notification facility and by userspace, allowing plenty of ring space for
    notifications to be added whilst preventing userspace from being able to
    pin too much unswappable kernel space.
    
    Signed-off-by: David Howells <dhowells@redhat.com>

commit 3e8e6f9a952c9a7e0be92518906dcdb7c8d1ca29
Author: Hui Peng <benquike@gmail.com>
Date:   Sat Aug 3 20:29:04 2019 -0400

    ath6kl: fix a NULL-ptr-deref bug in ath6kl_usb_alloc_urb_from_pipe()
    
    commit 39d170b3cb62ba98567f5c4f40c27b5864b304e5 upstream.
    
    The `ar_usb` field of `ath6kl_usb_pipe_usb_pipe` objects
    are initialized to point to the containing `ath6kl_usb` object
    according to endpoint descriptors read from the device side, as shown
    below in `ath6kl_usb_setup_pipe_resources`:
    
    for (i = 0; i < iface_desc->desc.bNumEndpoints; ++i) {
            endpoint = &iface_desc->endpoint[i].desc;
    
            // get the address from endpoint descriptor
            pipe_num = ath6kl_usb_get_logical_pipe_num(ar_usb,
                                                    endpoint->bEndpointAddress,
                                                    &urbcount);
            ......
            // select the pipe object
            pipe = &ar_usb->pipes[pipe_num];
    
            // initialize the ar_usb field
            pipe->ar_usb = ar_usb;
    }
    
    The driver assumes that the addresses reported in endpoint
    descriptors from device side  to be complete. If a device is
    malicious and does not report complete addresses, it may trigger
    NULL-ptr-deref `ath6kl_usb_alloc_urb_from_pipe` and
    `ath6kl_usb_free_urb_to_pipe`.
    
    This patch fixes the bug by preventing potential NULL-ptr-deref
    (CVE-2019-15098).
    
    Signed-off-by: Hui Peng <benquike@gmail.com>
    Reported-by: Hui Peng <benquike@gmail.com>
    Reported-by: Mathias Payer <mathias.payer@nebelwelt.net>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 4d89adc7b56faf56df032912f838c3cf8084492b
Author: José Roberto de Souza <jose.souza@intel.com>
Date:   Thu Nov 7 13:45:58 2019 -0800

    drm/i915/display/dsi: Add support to pipe D
    
    Adding pipe D support to DSI transcoder.
    Not adding it for EDP transcoder code paths as only TGL has 4 pipes
    and it do not have a EDP transcoder.
    
    Reviewed-by: Lucas De Marchi <lucas.demarchi@intel.com>
    Cc: Lucas De Marchi <lucas.demarchi@intel.com>
    Signed-off-by: José Roberto de Souza <jose.souza@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191107214559.77087-2-jose.souza@intel.com

commit e9f930ac88a8936ccc2d021110c98810cf5aa810
Author: Jan Stancek <jstancek@redhat.com>
Date:   Mon Nov 11 12:58:24 2019 -0800

    iomap: fix return value of iomap_dio_bio_actor on 32bit systems
    
    Naresh reported LTP diotest4 failing for 32bit x86 and arm -next
    kernels on ext4. Same problem exists in 5.4-rc7 on xfs.
    
    The failure comes down to:
      openat(AT_FDCWD, "testdata-4.5918", O_RDWR|O_DIRECT) = 4
      mmap2(NULL, 4096, PROT_READ, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7f7b000
      read(4, 0xb7f7b000, 4096)              = 0 // expects -EFAULT
    
    Problem is conversion at iomap_dio_bio_actor() return. Ternary
    operator has a return type and an attempt is made to convert each
    of operands to the type of the other. In this case "ret" (int)
    is converted to type of "copied" (unsigned long). Both have size
    of 4 bytes:
        size_t copied = 0;
        int ret = -14;
        long long actor_ret = copied ? copied : ret;
    
        On x86_64: actor_ret == -14;
        On x86   : actor_ret == 4294967282
    
    Replace ternary operator with 2 return statements to avoid this
    unwanted conversion.
    
    Fixes: 4721a6010990 ("iomap: dio data corruption and spurious errors when pipes fill")
    Reported-by: Naresh Kamboju <naresh.kamboju@linaro.org>
    Signed-off-by: Jan Stancek <jstancek@redhat.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>

commit f77021372e2880237278e0ee57faadc077a8256a
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Oct 30 21:08:15 2019 +0200

    drm/i915: Preload LUTs if the hw isn't currently using them
    
    The LUTs are single buffered so in order to program them without
    tearing we'd have to do it during vblank (actually to be 100%
    effective it has to happen between start of vblank and frame start).
    We have no proper mechanism for that at the moment so we just
    defer loading them after the vblank waits have happened. That
    is not quite sufficient (especially when committing multiple pipes
    whose vblanks don't line up) so the LUT load will often leak into
    the following frame causing tearing.
    
    However in case the hardware wasn't previously using the LUT we
    can preload it before setting the enable bit (which is double
    buffered so won't tear). Let's determine if we can do such
    preloading and make it happen. Slight variation between the
    hardware requires some platforms specifics in the checks.
    
    Hans is seeing ugly colored flash on VLV/CHV macchines (GPD win
    and Asus T100HA) when the gamma LUT gets loaded for the first
    time as the BIOS has left some junk in the LUT memory.
    
    v2: Deal with uapi vs. hw crtc state split
        s/GCM/CGM/ typo fix
    
    Cc: Hans de Goede <hdegoede@redhat.com>
    Fixes: 051a6d8d3ca0 ("drm/i915: Move LUT programming to happen after vblank waits")
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191030190815.7359-1-ville.syrjala@linux.intel.com
    Tested-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    (cherry picked from commit 0ccc42a2fd5107a7f58e62c8b35b61de9a70ce82)
    Signed-off-by: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>

commit 23f5932abd1c8f3066007d92192debb202b512aa
Author: Mihail Atanassov <Mihail.Atanassov@arm.com>
Date:   Thu Oct 10 10:30:07 2019 +0000

    drm/komeda: Don't flush inactive pipes
    
    [ Upstream commit b88639b8e3808c948169af390bd7e84e909bde8d ]
    
    HW doesn't allow flushing inactive pipes and raises an MERR interrupt
    if you try to do so. Stop triggering the MERR interrupt in the
    middle of a commit by calling drm_atomic_helper_commit_planes
    with the ACTIVE_ONLY flag.
    
    Reviewed-by: James Qian Wang (Arm Technology China) <james.qian.wang@arm.com>
    Signed-off-by: Mihail Atanassov <mihail.atanassov@arm.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191010102950.56253-1-mihail.atanassov@arm.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0ccc42a2fd5107a7f58e62c8b35b61de9a70ce82
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Oct 30 21:08:15 2019 +0200

    drm/i915: Preload LUTs if the hw isn't currently using them
    
    The LUTs are single buffered so in order to program them without
    tearing we'd have to do it during vblank (actually to be 100%
    effective it has to happen between start of vblank and frame start).
    We have no proper mechanism for that at the moment so we just
    defer loading them after the vblank waits have happened. That
    is not quite sufficient (especially when committing multiple pipes
    whose vblanks don't line up) so the LUT load will often leak into
    the following frame causing tearing.
    
    However in case the hardware wasn't previously using the LUT we
    can preload it before setting the enable bit (which is double
    buffered so won't tear). Let's determine if we can do such
    preloading and make it happen. Slight variation between the
    hardware requires some platforms specifics in the checks.
    
    Hans is seeing ugly colored flash on VLV/CHV macchines (GPD win
    and Asus T100HA) when the gamma LUT gets loaded for the first
    time as the BIOS has left some junk in the LUT memory.
    
    v2: Deal with uapi vs. hw crtc state split
        s/GCM/CGM/ typo fix
    
    Cc: Hans de Goede <hdegoede@redhat.com>
    Fixes: 051a6d8d3ca0 ("drm/i915: Move LUT programming to happen after vblank waits")
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191030190815.7359-1-ville.syrjala@linux.intel.com
    Tested-by: Hans de Goede <hdegoede@redhat.com>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>

commit 1e460bf9eaa59047183689ac28a772147eb747c9
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Tue Nov 5 19:14:46 2019 +0200

    drm/i915: Frob the correct crtc state in intel_crtc_disable_noatomic()
    
    The uapi vs. hw state split introduced a bug in
    intel_crtc_disable_noatomic() where it's now frobbing an already
    freed temp crtc state instead of adjusting the crtc state we
    are really left with. Fix that by making a cleaner separation
    beteen the two.
    
    This causes explosions on any machine that boots up with pipes
    already running but not hooked up to any encoder (typical
    behaviour for gen2-4 VBIOS).
    
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Fixes: 58d124ea2739 ("drm/i915: Complete crtc hw/uapi split, v6.")
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191105171447.22111-1-ville.syrjala@linux.intel.com
    Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>

commit 22d8d00c3346bf2443d995d1070da320d460e352
Author: Hui Peng <benquike@gmail.com>
Date:   Sat Aug 3 20:29:04 2019 -0400

    ath6kl: fix a NULL-ptr-deref bug in ath6kl_usb_alloc_urb_from_pipe()
    
    [ Upstream commit 39d170b3cb62ba98567f5c4f40c27b5864b304e5 ]
    
    The `ar_usb` field of `ath6kl_usb_pipe_usb_pipe` objects
    are initialized to point to the containing `ath6kl_usb` object
    according to endpoint descriptors read from the device side, as shown
    below in `ath6kl_usb_setup_pipe_resources`:
    
    for (i = 0; i < iface_desc->desc.bNumEndpoints; ++i) {
            endpoint = &iface_desc->endpoint[i].desc;
    
            // get the address from endpoint descriptor
            pipe_num = ath6kl_usb_get_logical_pipe_num(ar_usb,
                                                    endpoint->bEndpointAddress,
                                                    &urbcount);
            ......
            // select the pipe object
            pipe = &ar_usb->pipes[pipe_num];
    
            // initialize the ar_usb field
            pipe->ar_usb = ar_usb;
    }
    
    The driver assumes that the addresses reported in endpoint
    descriptors from device side  to be complete. If a device is
    malicious and does not report complete addresses, it may trigger
    NULL-ptr-deref `ath6kl_usb_alloc_urb_from_pipe` and
    `ath6kl_usb_free_urb_to_pipe`.
    
    This patch fixes the bug by preventing potential NULL-ptr-deref
    (CVE-2019-15098).
    
    Signed-off-by: Hui Peng <benquike@gmail.com>
    Reported-by: Hui Peng <benquike@gmail.com>
    Reported-by: Mathias Payer <mathias.payer@nebelwelt.net>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 696da02259463ea634821e117088f82afe7bf851
Author: Hui Peng <benquike@gmail.com>
Date:   Sat Aug 3 20:29:04 2019 -0400

    ath6kl: fix a NULL-ptr-deref bug in ath6kl_usb_alloc_urb_from_pipe()
    
    [ Upstream commit 39d170b3cb62ba98567f5c4f40c27b5864b304e5 ]
    
    The `ar_usb` field of `ath6kl_usb_pipe_usb_pipe` objects
    are initialized to point to the containing `ath6kl_usb` object
    according to endpoint descriptors read from the device side, as shown
    below in `ath6kl_usb_setup_pipe_resources`:
    
    for (i = 0; i < iface_desc->desc.bNumEndpoints; ++i) {
            endpoint = &iface_desc->endpoint[i].desc;
    
            // get the address from endpoint descriptor
            pipe_num = ath6kl_usb_get_logical_pipe_num(ar_usb,
                                                    endpoint->bEndpointAddress,
                                                    &urbcount);
            ......
            // select the pipe object
            pipe = &ar_usb->pipes[pipe_num];
    
            // initialize the ar_usb field
            pipe->ar_usb = ar_usb;
    }
    
    The driver assumes that the addresses reported in endpoint
    descriptors from device side  to be complete. If a device is
    malicious and does not report complete addresses, it may trigger
    NULL-ptr-deref `ath6kl_usb_alloc_urb_from_pipe` and
    `ath6kl_usb_free_urb_to_pipe`.
    
    This patch fixes the bug by preventing potential NULL-ptr-deref
    (CVE-2019-15098).
    
    Signed-off-by: Hui Peng <benquike@gmail.com>
    Reported-by: Hui Peng <benquike@gmail.com>
    Reported-by: Mathias Payer <mathias.payer@nebelwelt.net>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ce1dee3c1a88a534f561310f16e2eed3e686f28a
Author: Hui Peng <benquike@gmail.com>
Date:   Sat Aug 3 20:29:04 2019 -0400

    ath6kl: fix a NULL-ptr-deref bug in ath6kl_usb_alloc_urb_from_pipe()
    
    [ Upstream commit 39d170b3cb62ba98567f5c4f40c27b5864b304e5 ]
    
    The `ar_usb` field of `ath6kl_usb_pipe_usb_pipe` objects
    are initialized to point to the containing `ath6kl_usb` object
    according to endpoint descriptors read from the device side, as shown
    below in `ath6kl_usb_setup_pipe_resources`:
    
    for (i = 0; i < iface_desc->desc.bNumEndpoints; ++i) {
            endpoint = &iface_desc->endpoint[i].desc;
    
            // get the address from endpoint descriptor
            pipe_num = ath6kl_usb_get_logical_pipe_num(ar_usb,
                                                    endpoint->bEndpointAddress,
                                                    &urbcount);
            ......
            // select the pipe object
            pipe = &ar_usb->pipes[pipe_num];
    
            // initialize the ar_usb field
            pipe->ar_usb = ar_usb;
    }
    
    The driver assumes that the addresses reported in endpoint
    descriptors from device side  to be complete. If a device is
    malicious and does not report complete addresses, it may trigger
    NULL-ptr-deref `ath6kl_usb_alloc_urb_from_pipe` and
    `ath6kl_usb_free_urb_to_pipe`.
    
    This patch fixes the bug by preventing potential NULL-ptr-deref
    (CVE-2019-15098).
    
    Signed-off-by: Hui Peng <benquike@gmail.com>
    Reported-by: Hui Peng <benquike@gmail.com>
    Reported-by: Mathias Payer <mathias.payer@nebelwelt.net>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3c7f02d13b8d72dbb1dd9b0fe858459d263b1fbd
Author: Hui Peng <benquike@gmail.com>
Date:   Sat Aug 3 20:29:04 2019 -0400

    ath6kl: fix a NULL-ptr-deref bug in ath6kl_usb_alloc_urb_from_pipe()
    
    [ Upstream commit 39d170b3cb62ba98567f5c4f40c27b5864b304e5 ]
    
    The `ar_usb` field of `ath6kl_usb_pipe_usb_pipe` objects
    are initialized to point to the containing `ath6kl_usb` object
    according to endpoint descriptors read from the device side, as shown
    below in `ath6kl_usb_setup_pipe_resources`:
    
    for (i = 0; i < iface_desc->desc.bNumEndpoints; ++i) {
            endpoint = &iface_desc->endpoint[i].desc;
    
            // get the address from endpoint descriptor
            pipe_num = ath6kl_usb_get_logical_pipe_num(ar_usb,
                                                    endpoint->bEndpointAddress,
                                                    &urbcount);
            ......
            // select the pipe object
            pipe = &ar_usb->pipes[pipe_num];
    
            // initialize the ar_usb field
            pipe->ar_usb = ar_usb;
    }
    
    The driver assumes that the addresses reported in endpoint
    descriptors from device side  to be complete. If a device is
    malicious and does not report complete addresses, it may trigger
    NULL-ptr-deref `ath6kl_usb_alloc_urb_from_pipe` and
    `ath6kl_usb_free_urb_to_pipe`.
    
    This patch fixes the bug by preventing potential NULL-ptr-deref
    (CVE-2019-15098).
    
    Signed-off-by: Hui Peng <benquike@gmail.com>
    Reported-by: Hui Peng <benquike@gmail.com>
    Reported-by: Mathias Payer <mathias.payer@nebelwelt.net>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d7619be74f341630989c7edfd21a9ed8f51ab2d1
Author: Hui Peng <benquike@gmail.com>
Date:   Sat Aug 3 20:29:04 2019 -0400

    ath6kl: fix a NULL-ptr-deref bug in ath6kl_usb_alloc_urb_from_pipe()
    
    [ Upstream commit 39d170b3cb62ba98567f5c4f40c27b5864b304e5 ]
    
    The `ar_usb` field of `ath6kl_usb_pipe_usb_pipe` objects
    are initialized to point to the containing `ath6kl_usb` object
    according to endpoint descriptors read from the device side, as shown
    below in `ath6kl_usb_setup_pipe_resources`:
    
    for (i = 0; i < iface_desc->desc.bNumEndpoints; ++i) {
            endpoint = &iface_desc->endpoint[i].desc;
    
            // get the address from endpoint descriptor
            pipe_num = ath6kl_usb_get_logical_pipe_num(ar_usb,
                                                    endpoint->bEndpointAddress,
                                                    &urbcount);
            ......
            // select the pipe object
            pipe = &ar_usb->pipes[pipe_num];
    
            // initialize the ar_usb field
            pipe->ar_usb = ar_usb;
    }
    
    The driver assumes that the addresses reported in endpoint
    descriptors from device side  to be complete. If a device is
    malicious and does not report complete addresses, it may trigger
    NULL-ptr-deref `ath6kl_usb_alloc_urb_from_pipe` and
    `ath6kl_usb_free_urb_to_pipe`.
    
    This patch fixes the bug by preventing potential NULL-ptr-deref
    (CVE-2019-15098).
    
    Signed-off-by: Hui Peng <benquike@gmail.com>
    Reported-by: Hui Peng <benquike@gmail.com>
    Reported-by: Mathias Payer <mathias.payer@nebelwelt.net>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8cefc107ca54c8b06438b7dc9cc08bc0a11d5b98
Author: David Howells <dhowells@redhat.com>
Date:   Fri Nov 15 13:30:32 2019 +0000

    pipe: Use head and tail pointers for the ring, not cursor and length
    
    Convert pipes to use head and tail pointers for the buffer ring rather than
    pointer and length as the latter requires two atomic ops to update (or a
    combined op) whereas the former only requires one.
    
     (1) The head pointer is the point at which production occurs and points to
         the slot in which the next buffer will be placed.  This is equivalent
         to pipe->curbuf + pipe->nrbufs.
    
         The head pointer belongs to the write-side.
    
     (2) The tail pointer is the point at which consumption occurs.  It points
         to the next slot to be consumed.  This is equivalent to pipe->curbuf.
    
         The tail pointer belongs to the read-side.
    
     (3) head and tail are allowed to run to UINT_MAX and wrap naturally.  They
         are only masked off when the array is being accessed, e.g.:
    
            pipe->bufs[head & mask]
    
         This means that it is not necessary to have a dead slot in the ring as
         head == tail isn't ambiguous.
    
     (4) The ring is empty if "head == tail".
    
         A helper, pipe_empty(), is provided for this.
    
     (5) The occupancy of the ring is "head - tail".
    
         A helper, pipe_occupancy(), is provided for this.
    
     (6) The number of free slots in the ring is "pipe->ring_size - occupancy".
    
         A helper, pipe_space_for_user() is provided to indicate how many slots
         userspace may use.
    
     (7) The ring is full if "head - tail >= pipe->ring_size".
    
         A helper, pipe_full(), is provided for this.
    
    Signed-off-by: David Howells <dhowells@redhat.com>

commit f94df9890e98f2090c6a8d70c795134863b70201
Author: David Howells <dhowells@redhat.com>
Date:   Tue Sep 24 16:07:45 2019 +0100

    Add wake_up_interruptible_sync_poll_locked()
    
    Add a wakeup call for a case whereby the caller already has the waitqueue
    spinlock held.  This can be used by pipes to alter the ring buffer indices
    and issue a wakeup under the same spinlock.
    
    Signed-off-by: David Howells <dhowells@redhat.com>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>

commit 2b0b27418a72f9d61562269a1b3072657ae937d0
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Oct 2 19:25:01 2019 +0300

    drm/i915: Simplify LVDS crtc_mask setup
    
    We don't need to special case PCH vs. gen4 when setting up the LVDS
    crtc_mask. Just claim pipes A|B|C work and
    intel_encoder_possible_crtcs() will drop out any crtc that doesn't
    exist.
    
    v2: Put the special case first to match what most other encoders do
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191002162505.30716-2-ville.syrjala@linux.intel.com
    Reviewed-by: Juha-Pekka Heikkila <juhapekka.heikkila@gmail.com>

commit 1ea8751bd28d1ec2b36a56ec6bc1ac28903d09b4
Author: Noah Abradjian <noah.abradjian@amd.com>
Date:   Fri Sep 27 16:30:57 2019 -0400

    drm/amd/display: Make clk mgr the only dto update point
    
    [Why]
    
    * Clk Mgr DTO update point did not cover all needed updates, as it included a
      check for plane_state which does not exist yet when the updater is called on
      driver startup
    * This resulted in another update path in the pipe programming sequence, based
      on a dppclk update flag
    * However, this alternate path allowed for stray DTO updates, some of which would
      occur in the wrong order during dppclk lowering and cause underflow
    
    [How]
    
    * Remove plane_state check and use of plane_res.dpp->inst, getting rid
      of sequence dependencies (this results in extra dto programming for unused
      pipes but that doesn't cause issues and is a small cost)
    * Allow DTOs to be updated even if global clock is equal, to account for
      edge case exposed by diags tests
    * Remove update_dpp_dto call in pipe programming sequence (leave update to
      dppclk_control there, as that update is necessary and shouldn't occur in clk
      mgr)
    * Remove call to optimize_bandwidth when committing state, as it is not needed
      and resulted in sporadic underflows even with other fixes in place
    
    Signed-off-by: Noah Abradjian <noah.abradjian@amd.com>
    Reviewed-by: Jun Lei <Jun.Lei@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit ff86391ee626434180d6059352fbb292780b3efd
Author: Michael Strauss <michael.strauss@amd.com>
Date:   Tue Oct 1 11:24:32 2019 -0400

    drm/amd/display: Fix MPO & pipe split on 3-pipe dcn2x
    
    [WHY]
    DML is incorrectly initialized with 4 pipes on 3 pipe configs
    RequiredDPPCLK is halved on unsplit pipe due to an incorrectly handled 3 pipe
    case, causing underflow with 2 planes & pipe split (MPO, 8K + 2nd display)
    
    [HOW]
    Set correct number of DPP/OTGs for dml init to generate correct DPP topology
    Double RequiredDPPCLK after clock is halved for pipe split
    and find_secondary_pipe fails to fix underflow
    
    Signed-off-by: Michael Strauss <michael.strauss@amd.com>
    Reviewed-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 8caacaad78b69c4329c2ae9341ae7268ecfbf475
Merge: f64928480f7e 2a3608409f46
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Oct 25 15:41:14 2019 -0400

    Merge tag 'drm-fixes-2019-10-25' of git://anongit.freedesktop.org/drm/drm
    
    Pull drm fixes from Dave Airlie:
     "Quiet week this week, which I suspect means some people just didn't
      get around to sending me fixes pulls in time. This has 2 komeda and a
      bunch of amdgpu fixes in it:
    
      komeda:
       - typo fixes
       - flushing pipes fix
    
      amdgpu:
       - Fix suspend/resume issue related to multi-media engines
       - Fix memory leak in user ptr code related to hmm conversion
       - Fix possible VM faults when allocating page table memory
       - Fix error handling in bo list ioctl"
    
    * tag 'drm-fixes-2019-10-25' of git://anongit.freedesktop.org/drm/drm:
      drm/komeda: Fix typos in komeda_splitter_validate
      drm/komeda: Don't flush inactive pipes
      drm/amdgpu/vce: fix allocation size in enc ring test
      drm/amdgpu: fix error handling in amdgpu_bo_list_create
      drm/amdgpu: fix potential VM faults
      drm/amdgpu: user pages array memory leak fix
      drm/amdgpu/vcn: fix allocation size in enc ring test
      drm/amdgpu/uvd7: fix allocation size in enc ring test (v2)
      drm/amdgpu/uvd6: fix allocation size in enc ring test (v2)

commit 20975806eb6f22873785cfd3f33fea008155e7fa
Merge: 7d194c2100ad 8ae501e295cc
Author: Dave Airlie <airlied@redhat.com>
Date:   Fri Oct 25 14:45:12 2019 +1000

    Merge tag 'drm-misc-fixes-2019-10-23' of git://anongit.freedesktop.org/drm/drm-misc into drm-fixes
    
    Two fixes for komeda, one for typos and one to prevent an hardware issue
    when flushing inactive pipes
    
    Signed-off-by: Dave Airlie <airlied@redhat.com>
    
    From: Maxime Ripard <mripard@kernel.org>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191023112643.evpp6f23mpjwdsn4@gilmour

commit 6c066f4c99e1c7a481d8cefd0723e8feadbc1fa0
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Tue Oct 15 22:30:23 2019 +0300

    drm/i915: Add debugs to distingiush a cd2x update from a full cdclk pll update
    
    To make the logs a bit less confusing let's toss in some
    debug prints to indicate whether the cdclk reprogramming
    is going to happen with a single pipe active or whether we
    need to turn all pipes off for the duration.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191015193035.25982-2-ville.syrjala@linux.intel.com
    Reviewed-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>

commit bfd6e6e6c5d2ee43a3d9902b36e01fc7527ebb27
Author: Hui Peng <benquike@gmail.com>
Date:   Sat Oct 19 14:42:23 2019 +0300

    ath10k: Fix a NULL-ptr-deref bug in ath10k_usb_alloc_urb_from_pipe
    
    The `ar_usb` field of `ath10k_usb_pipe_usb_pipe` objects
    are initialized to point to the containing `ath10k_usb` object
    according to endpoint descriptors read from the device side, as shown
    below in `ath10k_usb_setup_pipe_resources`:
    
    for (i = 0; i < iface_desc->desc.bNumEndpoints; ++i) {
            endpoint = &iface_desc->endpoint[i].desc;
    
            // get the address from endpoint descriptor
            pipe_num = ath10k_usb_get_logical_pipe_num(ar_usb,
                                                    endpoint->bEndpointAddress,
                                                    &urbcount);
            ......
            // select the pipe object
            pipe = &ar_usb->pipes[pipe_num];
    
            // initialize the ar_usb field
            pipe->ar_usb = ar_usb;
    }
    
    The driver assumes that the addresses reported in endpoint
    descriptors from device side  to be complete. If a device is
    malicious and does not report complete addresses, it may trigger
    NULL-ptr-deref `ath10k_usb_alloc_urb_from_pipe` and
    `ath10k_usb_free_urb_to_pipe`.
    
    This patch fixes the bug by preventing potential NULL-ptr-deref.
    
    Signed-off-by: Hui Peng <benquike@gmail.com>
    Reported-by: Hui Peng <benquike@gmail.com>
    Reported-by: Mathias Payer <mathias.payer@nebelwelt.net>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    [groeck: Add driver tag to subject, fix build warning]
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit b88639b8e3808c948169af390bd7e84e909bde8d
Author: Mihail Atanassov <Mihail.Atanassov@arm.com>
Date:   Thu Oct 10 10:30:07 2019 +0000

    drm/komeda: Don't flush inactive pipes
    
    HW doesn't allow flushing inactive pipes and raises an MERR interrupt
    if you try to do so. Stop triggering the MERR interrupt in the
    middle of a commit by calling drm_atomic_helper_commit_planes
    with the ACTIVE_ONLY flag.
    
    Reviewed-by: James Qian Wang (Arm Technology China) <james.qian.wang@arm.com>
    Signed-off-by: Mihail Atanassov <mihail.atanassov@arm.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191010102950.56253-1-mihail.atanassov@arm.com

commit 73cefd903de77ac084b278e152248d6923d400e5
Author: Lucas De Marchi <lucas.demarchi@intel.com>
Date:   Thu Oct 10 18:09:05 2019 -0700

    drm/i915: add pipe id/name to pipe mismatch logs
    
    This way it's easier to figure out what didn't match when we have
    multiple pipes enabled.
    
    v2: pass drm_crtc and use the more common [CRTC:%d:%s] format
        (Ville)
    v3: use struct intel_crtc type to pass crtc around (Ville)
    
    Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191015164029.18431-5-lucas.demarchi@intel.com

commit 36b53a291b6a9213b7c053c7d72931bb89587440
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Oct 11 23:09:44 2019 +0300

    drm/i915: Make dirty_pipes refer to pipes
    
    Despite the its name dirty_pipes refers to crtc indexes. Let's
    change its behaviout to match the name.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191011200949.7839-4-ville.syrjala@linux.intel.com
    Reviewed-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>

commit 49e0ed3848d0e3ef22c3a458ded8847cbf08330e
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Oct 11 23:09:43 2019 +0300

    drm/i915: Nuke 'realloc_pipes'
    
    The 'realloc_pipes' bitmask is pointless. It is either:
    a) the set of pipes which are already part of the state,
       in which case adding them again is entirely redundant
    b) the set of all pipes which we then add to the state
    
    Also the fact that 'realloc_pipes' uses the crtc indexes is
    going to bite is at some point so best get rid of it quick.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191011200949.7839-3-ville.syrjala@linux.intel.com
    Reviewed-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>

commit d7a145849b680075ce94d8b341905104e2ee58d0
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Oct 11 23:09:42 2019 +0300

    drm/i915: Nuke the useless changed param from skl_ddb_add_affected_pipes()
    
    changed==true just means we have some crtcs in the state. All the
    stuff following this only operates on crtcs in the state anyway so
    there is no point in having this bool.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191011200949.7839-2-ville.syrjala@linux.intel.com
    Reviewed-by: Stanislav Lisovskiy <stanislav.lisovskiy@intel.com>

commit af9fbfa657c86dd0c5ee0e24da3e2da79353c0fb
Author: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
Date:   Fri Oct 4 13:34:53 2019 +0200

    drm/i915: Introduce and use intel_atomic_crtc_state_for_each_plane_state.
    
    Instead of looking at drm_plane_state, look at intel_plane_state directly.
    
    This will allow us to make the watermarks bigjoiner aware, when we make it
    work for bigjoiner slave pipes as well.
    
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20191004113514.17064-4-maarten.lankhorst@linux.intel.com
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Matt Roper <matthew.d.roper@intel.com>

commit 8bd436b006d4493964c310606f2eb8e56680126c
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Wed Oct 2 12:54:07 2019 -0300

    perf trace augmented_syscalls: Do not show syscalls when none was asked for
    
    When not using augmented syscalls, i.e. not passing thru the command
    line a eBPF source or object file event that provides the
    __augmented_syscalls__ BPF_MAP_TYPE_PERF_EVENT_ARRAY, etc, as with:
    
       perf trace -e tools/perf/examples/bpf/augmented_raw_syscalls.c
    
    or passing that augmented eBPF source/object via the trace.add_events in
    .perfconfig file, we were assuming that syscalls were asked for,
    differing from when not using augmented syscalls at all.
    
    This is confusing when using .perfconfig to hide the fact we're using
    the augmenter, i.e. using:
    
     # perf trace -e sched:* sleep 1
    
    Will show both the scheduler tracepoints and the syscalls, where what we
    want is to show just the scheduler tracepoints.
    
    To see the scheduler tracepoints and some specific syscall strace-like
    formatting, one has to use:
    
      # perf trace -e sched:*,nanosleep sleep 1
    
    Or, if wanting all the syscalls:
    
      # perf trace -e sched:* --syscalls sleep 1
    
    This way 'perf trace' can be used to trace just a set of tracepoints
    while allowing for mixing with strace-like when desired, by simply
    adding to the mix the name of the syscalls to show in addition to the
    tracepoints.
    
    Fix it so that the behaviour using the eBPF based syscall augmenter is
    the same as when not using one.
    
    Testing:
    
    Before this patch, with this ~/.perfconfig:
    
      # egrep -B1 ^[[:space:]]+add_events ~/.perfconfig
      [trace]
            add_events = /home/acme/git/perf/tools/perf/examples/bpf/augmented_raw_syscalls.o
      #
    
    That points to this pre-compiled eBPF syscall augmenter:
    
      # file /home/acme/git/perf/tools/perf/examples/bpf/augmented_raw_syscalls.o
      /home/acme/git/perf/tools/perf/examples/bpf/augmented_raw_syscalls.o: ELF 64-bit LSB relocatable, eBPF, version 1 (SYSV), with debug_info, not stripped
    
    And when asking for _only_ sched:sched_switch and sched:sched_wakeup we
    were unconditionally getting all the syscalls formatted strace-like:
    
      # perf trace -e sched:*switch,sched:*wakeup sleep 1 |& tail
         0.633 fstat(3, 0x7fe11d030ac0)                = 0
         0.635 mmap(NULL, 217750512, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fe10fec5000
         0.643 close(3)                                = 0
         0.668 nanosleep(0x7fff649a3a90, NULL)      ...
         0.672 sched:sched_switch:prev_comm=sleep prev_pid=4417 prev_prio=120 prev_state=S ==> next_comm=swapper/6 next_pid=0 next_prio=120
      1000.822 sched:sched_wakeup:comm=sleep pid=4417 prio=120 target_cpu=006
         0.668  ... [continued]: nanosleep())          = 0
      1000.923 close(1)                                = 0
      1000.941 close(2)                                = 0
      1000.974 exit_group(0)                           = ?
      #
    
    After the patch:
    
      # perf trace -e sched:*switch,sched:*wakeup sleep 1
         0.000 sched:sched_wakeup:comm=perf pid=5529 prio=120 target_cpu=005
         1.186 sched:sched_switch:prev_comm=sleep prev_pid=5529 prev_prio=120 prev_state=S ==> next_comm=swapper/5 next_pid=0 next_prio=120
      1001.573 sched:sched_wakeup:comm=sleep pid=5529 prio=120 target_cpu=005
      #
    
    If we add the "open*" syscalls to the mix then the eBPF augmented _will_
    be used and these syscalls will be traced together with the specified
    sched tracepoints:
    
      # cd /sys/kernel/debug/tracing/events/syscalls/
      # ls -1d sys_enter_open*
      sys_enter_open
      sys_enter_openat
      sys_enter_open_by_handle_at
      sys_enter_open_tree
      #
    
      # perf trace -e open*,sched:*switch,sched:*wakeup sleep 1
           0.000 sched:sched_wakeup:comm=perf pid=5580 prio=120 target_cpu=005
           0.590 openat(AT_FDCWD, "/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3
           0.616 openat(AT_FDCWD, "/lib64/libc.so.6", O_RDONLY|O_CLOEXEC) = 3
           0.846 openat(AT_FDCWD, "/usr/lib/locale/locale-archive", O_RDONLY|O_CLOEXEC) = 3
           0.891 sched:sched_switch:prev_comm=sleep prev_pid=5580 prev_prio=120 prev_state=S ==> next_comm=swapper/5 next_pid=0 next_prio=120
        1001.005 sched:sched_wakeup:comm=sleep pid=5580 prio=120 target_cpu=005
      #
    
    And as we can see, the pathnames were collected via the eBPF augmenters.
    
    If we don't specify anything it'll trace all syscalls:
    
      # perf trace sleep 1 |& tail
           0.299 brk(0x5597543a3000)                     = 0x5597543a3000
           0.302 brk(NULL)                               = 0x5597543a3000
           0.307 openat(AT_FDCWD, "/usr/lib/locale/locale-archive", O_RDONLY|O_CLOEXEC) = 3
           0.313 fstat(3, 0x7feece50cac0)                = 0
           0.315 mmap(NULL, 217750512, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7feec13a1000
           0.323 close(3)                                = 0
           0.354 nanosleep(0x7ffe338856e0, NULL)         = 0
        1000.641 close(1)                                = 0
        1000.655 close(2)                                = 0
        1000.673 exit_group(0)                           = ?
      #
    
    Ditto if we don't use .perfconfig's trace.add_events but instead pass
    just the augmenter as a command line event:
    
      # vim ~/.perfconfig
      # egrep -B1 ^[[:space:]]+add_events ~/.perfconfig
      # perf trace -e /home/acme/git/perf/tools/perf/examples/bpf/augmented_raw_syscalls.o sleep 1 |& tail
           0.294 brk(0x55ae08ec3000)                     = 0x55ae08ec3000
           0.297 brk(NULL)                               = 0x55ae08ec3000
           0.302 openat(AT_FDCWD, "/usr/lib/locale/locale-archive", O_RDONLY|O_CLOEXEC) = 3
           0.309 fstat(3, 0x7f726488fac0)                = 0
           0.311 mmap(NULL, 217750512, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f7257724000
           0.319 close(3)                                = 0
           0.347 nanosleep(0x7ffe23643a70, NULL)         = 0
        1000.560 close(1)                                = 0
        1000.575 close(2)                                = 0
        1000.593 exit_group(0)                           = ?
      #
    
    As well as that + some syscall names for strace-like formatting:
    
      # perf trace -e socket,connect,/home/acme/git/perf/tools/perf/examples/bpf/augmented_raw_syscalls.o ssh localhost
           0.000 socket(PF_LOCAL, SOCK_STREAM|CLOEXEC|NONBLOCK, 0) = 3
           0.021 connect(3, { .family: PF_LOCAL, path: /var/run/nscd/socket }, 110) = -1 ENOENT (No such file or directory)
           0.034 socket(PF_LOCAL, SOCK_STREAM|CLOEXEC|NONBLOCK, 0) = 3
           0.041 connect(3, { .family: PF_LOCAL, path: /var/run/nscd/socket }, 110) = -1 ENOENT (No such file or directory)
           0.163 socket(PF_LOCAL, SOCK_STREAM, 0)        = 4
           0.185 connect(4, { .family: PF_LOCAL, path: /var/lib/sss/pipes/nss }, 110) = 0
           0.670 socket(PF_LOCAL, SOCK_STREAM|CLOEXEC|NONBLOCK, 0) = 7
           0.684 connect(7, { .family: PF_LOCAL, path: /var/run/nscd/socket }, 110) = -1 ENOENT (No such file or directory)
           0.694 socket(PF_LOCAL, SOCK_STREAM|CLOEXEC|NONBLOCK, 0) = 7
           0.701 connect(7, { .family: PF_LOCAL, path: /var/run/nscd/socket }, 110) = -1 ENOENT (No such file or directory)
           0.994 socket(PF_LOCAL, SOCK_STREAM|CLOEXEC|NONBLOCK, 0) = 5
           1.006 connect(5, { .family: PF_LOCAL, path: /var/run/nscd/socket }, 110) = -1 ENOENT (No such file or directory)
           1.014 socket(PF_LOCAL, SOCK_STREAM|CLOEXEC|NONBLOCK, 0) = 5
           1.022 connect(5, { .family: PF_LOCAL, path: /var/run/nscd/socket }, 110) = -1 ENOENT (No such file or directory)
           1.068 socket(PF_INET, SOCK_STREAM, IPPROTO_TCP) = 5
           1.087 connect(5, { .family: PF_INET, port: 22, addr: 127.0.0.1 }, 16) = 0
          24.299 socket(PF_LOCAL, SOCK_STREAM, 0)        = 6
          24.337 connect(6, { .family: PF_LOCAL, path: /var/run/.heim_org.h5l.kcm-socket }, 110) = 0
          28.441 socket(PF_LOCAL, SOCK_STREAM, 0)        = 6
          28.516 connect(6, { .family: PF_LOCAL, path: /var/run/.heim_org.h5l.kcm-socket }, 110) = 0
      root@localhost's password:^C
      #
    
    Everything works without augmenters:
    
      # egrep -B1 ^[[:space:]]+add_events ~/.perfconfig
      # perf trace sleep 1 |& tail
           0.261 brk(0x5635068ac000)                     = 0x5635068ac000
           0.264 brk(NULL)                               = 0x5635068ac000
           0.268 openat(AT_FDCWD, 0xdce642a0, O_RDONLY|O_CLOEXEC) = 3
           0.275 fstat(3, 0x7f3fdce97ac0)                = 0
           0.277 mmap(NULL, 217750512, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f3fcfd2c000
           0.284 close(3)                                = 0
           0.310 nanosleep(0x7ffdaea6ecd0, NULL)         = 0
        1000.552 close(1)                                = 0
        1000.565 close(2)                                = 0
        1000.580 exit_group(0)                           = ?
      #
    
      # perf trace -e connect ssh localhost
           0.000 connect(3, 0x58266930, 110)             = -1 ENOENT (No such file or directory)
           0.022 connect(3, 0x58266af0, 110)             = -1 ENOENT (No such file or directory)
           0.150 connect(4, 0x58266b00, 110)             = 0
           0.490 connect(7, 0x58264150, 110)             = -1 ENOENT (No such file or directory)
           0.505 connect(7, 0x58264300, 110)             = -1 ENOENT (No such file or directory)
           0.832 connect(5, 0x58266220, 110)             = -1 ENOENT (No such file or directory)
           0.847 connect(5, 0x582663e0, 110)             = -1 ENOENT (No such file or directory)
           0.899 connect(5, 0x95ba0630, 16)              = 0
          25.619 connect(6, 0x58266360, 110)             = 0
          40.564 connect(6, 0x58266330, 110)             = 0
      root@localhost's password: ^C
      #
    
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Brendan Gregg <brendan.d.gregg@gmail.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Luis Cláudio Gonçalves <lclaudio@redhat.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Link: https://lkml.kernel.org/n/tip-624f6jxic04031tnt40va4dd@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

commit c33ffca13cb5f2b55f46204d9e404d3fa5a48b00
Author: Bjørn Mork <bjorn@mork.no>
Date:   Wed Sep 18 14:17:38 2019 +0200

    usbnet: ignore endpoints with invalid wMaxPacketSize
    
    [ Upstream commit 8d3d7c2029c1b360f1a6b0a2fca470b57eb575c0 ]
    
    Endpoints with zero wMaxPacketSize are not usable for transferring
    data. Ignore such endpoints when looking for valid in, out and
    status pipes, to make the drivers more robust against invalid and
    meaningless descriptors.
    
    The wMaxPacketSize of these endpoints are used for memory allocations
    and as divisors in many usbnet minidrivers. Avoiding zero is therefore
    critical.
    
    Signed-off-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf7665c17ad727ab056a55dbe6f670f285dd4864
Author: Bjørn Mork <bjorn@mork.no>
Date:   Wed Sep 18 14:01:46 2019 +0200

    cdc_ncm: fix divide-by-zero caused by invalid wMaxPacketSize
    
    [ Upstream commit 3fe4b3351301660653a2bc73f2226da0ebd2b95e ]
    
    Endpoints with zero wMaxPacketSize are not usable for transferring
    data. Ignore such endpoints when looking for valid in, out and
    status pipes, to make the driver more robust against invalid and
    meaningless descriptors.
    
    The wMaxPacketSize of the out pipe is used as divisor. So this change
    fixes a divide-by-zero bug.
    
    Reported-by: syzbot+ce366e2b8296e25d84f5@syzkaller.appspotmail.com
    Signed-off-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b5e57553acde4758ceb17d986129d62d5cbb8472
Author: Bjørn Mork <bjorn@mork.no>
Date:   Wed Sep 18 14:17:38 2019 +0200

    usbnet: ignore endpoints with invalid wMaxPacketSize
    
    [ Upstream commit 8d3d7c2029c1b360f1a6b0a2fca470b57eb575c0 ]
    
    Endpoints with zero wMaxPacketSize are not usable for transferring
    data. Ignore such endpoints when looking for valid in, out and
    status pipes, to make the drivers more robust against invalid and
    meaningless descriptors.
    
    The wMaxPacketSize of these endpoints are used for memory allocations
    and as divisors in many usbnet minidrivers. Avoiding zero is therefore
    critical.
    
    Signed-off-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 98f1a3a21500ad4fd8e9a24e0c7d8cfaf4ae56f2
Author: Bjørn Mork <bjorn@mork.no>
Date:   Wed Sep 18 14:01:46 2019 +0200

    cdc_ncm: fix divide-by-zero caused by invalid wMaxPacketSize
    
    [ Upstream commit 3fe4b3351301660653a2bc73f2226da0ebd2b95e ]
    
    Endpoints with zero wMaxPacketSize are not usable for transferring
    data. Ignore such endpoints when looking for valid in, out and
    status pipes, to make the driver more robust against invalid and
    meaningless descriptors.
    
    The wMaxPacketSize of the out pipe is used as divisor. So this change
    fixes a divide-by-zero bug.
    
    Reported-by: syzbot+ce366e2b8296e25d84f5@syzkaller.appspotmail.com
    Signed-off-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b7eeccc1c7864e08e0eee7fdc4e508b0f9bbe56b
Author: Bjørn Mork <bjorn@mork.no>
Date:   Wed Sep 18 14:17:38 2019 +0200

    usbnet: ignore endpoints with invalid wMaxPacketSize
    
    [ Upstream commit 8d3d7c2029c1b360f1a6b0a2fca470b57eb575c0 ]
    
    Endpoints with zero wMaxPacketSize are not usable for transferring
    data. Ignore such endpoints when looking for valid in, out and
    status pipes, to make the drivers more robust against invalid and
    meaningless descriptors.
    
    The wMaxPacketSize of these endpoints are used for memory allocations
    and as divisors in many usbnet minidrivers. Avoiding zero is therefore
    critical.
    
    Signed-off-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fd003468835870fa99e39b1581a66c6d1201b268
Author: Bjørn Mork <bjorn@mork.no>
Date:   Wed Sep 18 14:01:46 2019 +0200

    cdc_ncm: fix divide-by-zero caused by invalid wMaxPacketSize
    
    [ Upstream commit 3fe4b3351301660653a2bc73f2226da0ebd2b95e ]
    
    Endpoints with zero wMaxPacketSize are not usable for transferring
    data. Ignore such endpoints when looking for valid in, out and
    status pipes, to make the driver more robust against invalid and
    meaningless descriptors.
    
    The wMaxPacketSize of the out pipe is used as divisor. So this change
    fixes a divide-by-zero bug.
    
    Reported-by: syzbot+ce366e2b8296e25d84f5@syzkaller.appspotmail.com
    Signed-off-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6c95f6a3c9c313d46fbf7f466671e2523b0b171c
Author: Bjørn Mork <bjorn@mork.no>
Date:   Wed Sep 18 14:17:38 2019 +0200

    usbnet: ignore endpoints with invalid wMaxPacketSize
    
    [ Upstream commit 8d3d7c2029c1b360f1a6b0a2fca470b57eb575c0 ]
    
    Endpoints with zero wMaxPacketSize are not usable for transferring
    data. Ignore such endpoints when looking for valid in, out and
    status pipes, to make the drivers more robust against invalid and
    meaningless descriptors.
    
    The wMaxPacketSize of these endpoints are used for memory allocations
    and as divisors in many usbnet minidrivers. Avoiding zero is therefore
    critical.
    
    Signed-off-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 27febbf1fbd011c68140f2db7bd0455c02b24bc6
Author: Bjørn Mork <bjorn@mork.no>
Date:   Wed Sep 18 14:01:46 2019 +0200

    cdc_ncm: fix divide-by-zero caused by invalid wMaxPacketSize
    
    [ Upstream commit 3fe4b3351301660653a2bc73f2226da0ebd2b95e ]
    
    Endpoints with zero wMaxPacketSize are not usable for transferring
    data. Ignore such endpoints when looking for valid in, out and
    status pipes, to make the driver more robust against invalid and
    meaningless descriptors.
    
    The wMaxPacketSize of the out pipe is used as divisor. So this change
    fixes a divide-by-zero bug.
    
    Reported-by: syzbot+ce366e2b8296e25d84f5@syzkaller.appspotmail.com
    Signed-off-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 96f23cb83539bb569a02b5524a62c18c7b8c40e2
Author: Bjørn Mork <bjorn@mork.no>
Date:   Wed Sep 18 14:17:38 2019 +0200

    usbnet: ignore endpoints with invalid wMaxPacketSize
    
    [ Upstream commit 8d3d7c2029c1b360f1a6b0a2fca470b57eb575c0 ]
    
    Endpoints with zero wMaxPacketSize are not usable for transferring
    data. Ignore such endpoints when looking for valid in, out and
    status pipes, to make the drivers more robust against invalid and
    meaningless descriptors.
    
    The wMaxPacketSize of these endpoints are used for memory allocations
    and as divisors in many usbnet minidrivers. Avoiding zero is therefore
    critical.
    
    Signed-off-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 941b5eefb1f0429da6fe2107aae35a07e5440f76
Author: Bjørn Mork <bjorn@mork.no>
Date:   Wed Sep 18 14:01:46 2019 +0200

    cdc_ncm: fix divide-by-zero caused by invalid wMaxPacketSize
    
    [ Upstream commit 3fe4b3351301660653a2bc73f2226da0ebd2b95e ]
    
    Endpoints with zero wMaxPacketSize are not usable for transferring
    data. Ignore such endpoints when looking for valid in, out and
    status pipes, to make the driver more robust against invalid and
    meaningless descriptors.
    
    The wMaxPacketSize of the out pipe is used as divisor. So this change
    fixes a divide-by-zero bug.
    
    Reported-by: syzbot+ce366e2b8296e25d84f5@syzkaller.appspotmail.com
    Signed-off-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 608557096364a7307467e3f5b005630dd2835f3e
Author: Bjørn Mork <bjorn@mork.no>
Date:   Wed Sep 18 14:17:38 2019 +0200

    usbnet: ignore endpoints with invalid wMaxPacketSize
    
    [ Upstream commit 8d3d7c2029c1b360f1a6b0a2fca470b57eb575c0 ]
    
    Endpoints with zero wMaxPacketSize are not usable for transferring
    data. Ignore such endpoints when looking for valid in, out and
    status pipes, to make the drivers more robust against invalid and
    meaningless descriptors.
    
    The wMaxPacketSize of these endpoints are used for memory allocations
    and as divisors in many usbnet minidrivers. Avoiding zero is therefore
    critical.
    
    Signed-off-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b5f703829cf6bd81275a7a3ca31b3902f0a0f171
Author: Bjørn Mork <bjorn@mork.no>
Date:   Wed Sep 18 14:01:46 2019 +0200

    cdc_ncm: fix divide-by-zero caused by invalid wMaxPacketSize
    
    [ Upstream commit 3fe4b3351301660653a2bc73f2226da0ebd2b95e ]
    
    Endpoints with zero wMaxPacketSize are not usable for transferring
    data. Ignore such endpoints when looking for valid in, out and
    status pipes, to make the driver more robust against invalid and
    meaningless descriptors.
    
    The wMaxPacketSize of the out pipe is used as divisor. So this change
    fixes a divide-by-zero bug.
    
    Reported-by: syzbot+ce366e2b8296e25d84f5@syzkaller.appspotmail.com
    Signed-off-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2fef0faa1cdc5d41ce3ef83f7b8f7e7ecb02d700
Author: Nikola Cornij <nikola.cornij@amd.com>
Date:   Wed Aug 28 18:30:43 2019 -0400

    drm/amd/display: Set number of pipes to 1 if the second pipe was disabled
    
    [why]
    Some ODM-related register settings are inconsistently updated by VBIOS, causing
    the state in DC to be invalid, which would then end up crashing in certain
    use-cases (such as disable/enable device).
    
    [how]
    Check the enabled status of the second pipe when determining the number of
    OPTC sources. If the second pipe is disabled, set the number of sources to 1
    regardless of other settings (that may not be updated correctly).
    
    Signed-off-by: Nikola Cornij <nikola.cornij@amd.com>
    Reviewed-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 41266b6b31d2fa89ad385f2bc17c9eec48defa05
Author: Ladislav Michl <ladis@linux-mips.org>
Date:   Fri Nov 18 19:09:19 2016 +0100

    cdc-acm: store in and out pipes in acm structure
    
    commit 74bccc9b71dc41d37e73fcdbcbec85310a670751 upstream.
    
    Clearing stall needs pipe descriptor, store it in acm structure.
    
    Signed-off-by: Ladislav Michl <ladis@linux-mips.org>
    Acked-by: Oliver Neukum <oneukum@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 8d3d7c2029c1b360f1a6b0a2fca470b57eb575c0
Author: Bjørn Mork <bjorn@mork.no>
Date:   Wed Sep 18 14:17:38 2019 +0200

    usbnet: ignore endpoints with invalid wMaxPacketSize
    
    Endpoints with zero wMaxPacketSize are not usable for transferring
    data. Ignore such endpoints when looking for valid in, out and
    status pipes, to make the drivers more robust against invalid and
    meaningless descriptors.
    
    The wMaxPacketSize of these endpoints are used for memory allocations
    and as divisors in many usbnet minidrivers. Avoiding zero is therefore
    critical.
    
    Signed-off-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>

commit 3fe4b3351301660653a2bc73f2226da0ebd2b95e
Author: Bjørn Mork <bjorn@mork.no>
Date:   Wed Sep 18 14:01:46 2019 +0200

    cdc_ncm: fix divide-by-zero caused by invalid wMaxPacketSize
    
    Endpoints with zero wMaxPacketSize are not usable for transferring
    data. Ignore such endpoints when looking for valid in, out and
    status pipes, to make the driver more robust against invalid and
    meaningless descriptors.
    
    The wMaxPacketSize of the out pipe is used as divisor. So this change
    fixes a divide-by-zero bug.
    
    Reported-by: syzbot+ce366e2b8296e25d84f5@syzkaller.appspotmail.com
    Signed-off-by: Bjørn Mork <bjorn@mork.no>
    Signed-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>

commit 2d20411e25a3bf3d2914a2219f47ed48dc57aed5
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Sep 18 18:07:07 2019 +0300

    drm/i915: Don't advertise modes that exceed the max plane size
    
    Modern platforms allow the transcoders hdisplay/vdisplay to exceed the
    planes' max resolution. This has the nasty implication that modes on the
    connectors' mode list may not be usable when the user asks for a
    fullscreen plane. Seeing as that is the most common use case it seems
    prudent to filter out modes that don't allow for fullscreen planes to
    be enabled.
    
    Let's do that in the connetor .mode_valid() hook so that normally
    such modes are kept hidden but the user is still able to forcibly
    specify such a mode if they know they don't need fullscreen planes.
    
    This is in line with ealier policies regarding certain clock limits.
    The idea is to prevent the casual user from encountering a mode that
    would fail under typical conditions, but allow the expert user to
    force things if they so wish.
    
    Maybe in the future we should consider automagically using two
    planes when one can't cover the entire screen? Wouldn't be a
    great match for the current uapi with explicit planes though,
    but I guess no worse than using two pipes (which we apparently
    have to in the future anyway). Either that or we'd have to
    teach userspace to do it for us.
    
    v2: Fix icl+ max plane heigth (Manasi)
    
    Cc: Manasi Navare <manasi.d.navare@intel.com>
    Cc: Leho Kraav <leho@kraav.com>
    Cc: Sean Paul <sean@poorly.run>
    Cc: José Roberto de Souza <jose.souza@intel.com>
    Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Reviewed-by: Manasi Navare <manasi.d.navare@intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190918150707.32420-1-ville.syrjala@linux.intel.com

commit b6e881c947417e75272d3568cedf31f5ef016dcb
Author: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
Date:   Fri Sep 13 18:00:28 2019 -0500

    drm/amd/display: update navi to use new surface programming behaviour
    
    New behaviour will track global updates and update any hw that isn't
    related to current stream being updated.
    
    This should fix any issues caused by pipe split pipes being taken
    by other streams.
    
    Signed-off-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Reviewed-by: Charlene Liu <Charlene.Liu@amd.com>
    Acked-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit b2d92ac1c5eebcb0510939edfdfc2e87330f6679
Author: Pascal van Leeuwen <pascalvanl@gmail.com>
Date:   Fri Sep 6 16:31:52 2019 +0200

    crypto: inside-secure - Base RD fetchcount on actual RD FIFO size
    
    This patch derives the result descriptor fetch count from the actual
    FIFO size advertised by the hardware. Fetching result descriptors
    one at a time is a performance bottleneck for small blocks, especially
    on hardware with multiple pipes. Even moreso if the HW has few rings.
    
    Signed-off-by: Pascal van Leeuwen <pvanleeuwen@verimatrix.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit 35c0e6c375ac7a09d1b099ceea101a2258857afa
Author: Pascal van Leeuwen <pascalvanl@gmail.com>
Date:   Fri Sep 6 16:31:51 2019 +0200

    crypto: inside-secure - Base CD fetchcount on actual CD FIFO size
    
    This patch derives the command descriptor fetch count from the actual
    FIFO size advertised by the hardware. Fetching command descriptors
    one at a time is a performance bottleneck for small blocks, especially
    on hardware with multiple pipes. Even moreso if the HW has few rings.
    
    Signed-off-by: Pascal van Leeuwen <pvanleeuwen@verimatrix.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit 8d8b00318593e2852aef19b92f99851d50a203fc
Author: Jani Nikula <jani.nikula@intel.com>
Date:   Wed Sep 11 23:29:08 2019 +0300

    drm/i915: convert device info num_pipes to pipe_mask
    
    Replace device info number of pipes with a bit mask of available
    pipes. This will prove handy in the future. There's still a bunch of
    future work to do to actually allow a non-consecutive mask of pipes, but
    it's a start. No functional changes.
    
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: José Roberto de Souza <jose.souza@intel.com>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: José Roberto de Souza <jose.souza@intel.com>
    Acked-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190911202908.19631-1-jani.nikula@intel.com

commit 0a12e437049786b9c33542d16b6a03f46fab46f8
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Sep 11 16:31:27 2019 +0300

    drm/i915: Fix CD2X pipe select masking during cdclk sanitation
    
    We're forgetting to mask off all three pipe select bits from the
    CDCLK_CTL value on icl+ which may lead to the extra bit being
    left in. That will cause us to consider the current hardware
    cdclk state as invalid, and we proceed to sanitize it even
    though the hardware may have active pipes and whatnot.
    
    Fix up the mask so we get rid of all three pipe select bits
    and thus hopefully no longer sanitize cdclk when it's already
    correctly programmed.
    
    Cc: Matt Roper <matthew.d.roper@intel.com>
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=111641
    Fixes: 0c1279b58fc7 ("drm/i915: Consolidate {bxt,cnl,icl}_init_cdclk")
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Matt Roper <matthew.d.roper@intel.com>
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190911133129.27466-2-ville.syrjala@linux.intel.com

commit 249778704c01384d76984d83e6d6377ac96b2cc4
Author: Jani Nikula <jani.nikula@intel.com>
Date:   Wed Sep 11 12:26:08 2019 +0300

    drm/i915: add INTEL_NUM_PIPES() and use it
    
    Abstract away direct access to ->num_pipes to allow further
    refactoring. No functional changes.
    
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: José Roberto de Souza <jose.souza@intel.com>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: José Roberto de Souza <jose.souza@intel.com>
    Acked-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190911092608.13009-1-jani.nikula@intel.com

commit aaef851083ed577a4a6094dec3caf7f00f1fd0db
Author: José Roberto de Souza <jose.souza@intel.com>
Date:   Wed Sep 4 16:02:41 2019 -0700

    drm/i915/mst: Do not hardcoded the crtcs that encoder can connect
    
    Tiger Lake has up to 4 pipes so the mask would need to be 0xf instead of
    0x7. Do not hardcode the mask so it allows the fake MST encoders to
    connect to all pipes no matter how many the platform has.
    
    Iterating over all pipes to keep consistent with intel_ddi_init().
    
    Initialy this patch was replaced by commit 4eaceea3a00f ("drm/i915:
    Fix DP-MST crtc_mask") but userspace it not correctly using
    encoder.possible_crtcs and it was reverted by
    commit e838bfa8e170 ("Revert "drm/i915: Fix DP-MST crtc_mask"")
    
    Userspace should be fixed but it might take a while, so bringing this
    patch back for now.
    
    Cc: Lucas De Marchi <lucas.demarchi@intel.com>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: José Roberto de Souza <jose.souza@intel.com>
    Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190904230241.20638-2-jose.souza@intel.com

commit 39d170b3cb62ba98567f5c4f40c27b5864b304e5
Author: Hui Peng <benquike@gmail.com>
Date:   Sat Aug 3 20:29:04 2019 -0400

    ath6kl: fix a NULL-ptr-deref bug in ath6kl_usb_alloc_urb_from_pipe()
    
    The `ar_usb` field of `ath6kl_usb_pipe_usb_pipe` objects
    are initialized to point to the containing `ath6kl_usb` object
    according to endpoint descriptors read from the device side, as shown
    below in `ath6kl_usb_setup_pipe_resources`:
    
    for (i = 0; i < iface_desc->desc.bNumEndpoints; ++i) {
            endpoint = &iface_desc->endpoint[i].desc;
    
            // get the address from endpoint descriptor
            pipe_num = ath6kl_usb_get_logical_pipe_num(ar_usb,
                                                    endpoint->bEndpointAddress,
                                                    &urbcount);
            ......
            // select the pipe object
            pipe = &ar_usb->pipes[pipe_num];
    
            // initialize the ar_usb field
            pipe->ar_usb = ar_usb;
    }
    
    The driver assumes that the addresses reported in endpoint
    descriptors from device side  to be complete. If a device is
    malicious and does not report complete addresses, it may trigger
    NULL-ptr-deref `ath6kl_usb_alloc_urb_from_pipe` and
    `ath6kl_usb_free_urb_to_pipe`.
    
    This patch fixes the bug by preventing potential NULL-ptr-deref
    (CVE-2019-15098).
    
    Signed-off-by: Hui Peng <benquike@gmail.com>
    Reported-by: Hui Peng <benquike@gmail.com>
    Reported-by: Mathias Payer <mathias.payer@nebelwelt.net>
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit 5358e6e77490024aa13fc4e3ca94d7d1aad330d0
Merge: eea173097dfb 9eb4b5180d33
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Sep 1 10:39:25 2019 -0700

    Merge branch 'turbostat' of git://git.kernel.org/pub/scm/linux/kernel/git/lenb/linux
    
    Pull turbostat updates from Len Brown:
     "User-space turbostat (and x86_energy_perf_policy) patches.
    
      They are primarily bug fixes from users"
    
    * 'turbostat' of git://git.kernel.org/pub/scm/linux/kernel/git/lenb/linux:
      tools/power turbostat: update version number
      tools/power turbostat: Add support for Hygon Fam 18h (Dhyana) RAPL
      tools/power turbostat: Fix caller parameter of get_tdp_amd()
      tools/power turbostat: Fix CPU%C1 display value
      tools/power turbostat: do not enforce 1ms
      tools/power turbostat: read from pipes too
      tools/power turbostat: Add Ice Lake NNPI support
      tools/power turbostat: rename has_hsw_msrs()
      tools/power turbostat: Fix Haswell Core systems
      tools/power turbostat: add Jacobsville support
      tools/power turbostat: fix buffer overrun
      tools/power turbostat: fix file descriptor leaks
      tools/power turbostat: fix leak of file descriptor on error return path
      tools/power turbostat: Make interval calculation per thread to reduce jitter
      tools/power turbostat: remove duplicate pc10 column
      tools/power x86_energy_perf_policy: Fix argument parsing
      tools/power: Fix typo in man page
      tools/power/x86: Enable compiler optimisations and Fortify by default
      tools/power x86_energy_perf_policy: Fix "uninitialized variable" warnings at -O2

commit c026c23629b825100fd4b8223227d9a395f9a56b
Author: Artem Bityutskiy <artem.bityutskiy@linux.intel.com>
Date:   Wed Aug 14 20:12:55 2019 +0300

    tools/power turbostat: read from pipes too
    
    Commit '47936f944e78 tools/power turbostat: fix printing on input' make
    a valid fix, but it completely disabled piped stdin support, which is
    a valuable use-case. Indeed, if stdin is a pipe, turbostat won't read
    anything from it, so it becomes impossible to get turbostat output at
    user-defined moments, instead of the regular intervals.
    
    There is no reason why this should works for terminals, but not for
    pipes. This patch improves the situation. Instead of ignoring pipes, we
    read data from them but gracefully handle the EOF case.
    
    Signed-off-by: Artem Bityutskiy <artem.bityutskiy@linux.intel.com>
    Signed-off-by: Len Brown <len.brown@intel.com>

commit 9770f22077981cac2bd2f4dd6caa6269892cd3f7
Author: Madhumitha Tolakanahalli Pradeep <madhumitha.tolakanahalli.pradeep@intel.com>
Date:   Thu Aug 22 17:46:55 2019 -0700

    drm/i915/tgl: Enabling DSC on Pipe A for TGL
    
    DSC was not supported on Pipe A for previous platforms. Tigerlake onwards,
    all the pipes support DSC. Hence, the DSC and FEC restriction on
    Pipe A needs to be removed.
    
    v2: Changes in the logic around removing the restriction around
        Pipe A (Manasi, Lucas)
    
    Cc: Manasi Navare <manasi.d.navare@intel.com>
    Signed-off-by: Madhumitha Tolakanahalli Pradeep <madhumitha.tolakanahalli.pradeep@intel.com>
    Reviewed-by: Manasi Navare <manasi.d.navare@intel.com>
    Reviewed-by: Lucas De Marchi <lucas.demarchi@intel.com>
    Signed-off-by: Manasi Navare <manasi.d.navare@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190823004655.28905-1-madhumitha.tolakanahalli.pradeep@intel.com

commit 9c722e17c1b91d7dc5ec77cb4fcaaa6b30653fe3
Author: José Roberto de Souza <jose.souza@intel.com>
Date:   Fri Aug 23 01:20:44 2019 -0700

    drm/i915: Disable pipes in reverse order
    
    Disable CRTC/pipes in reverse order because some features (MST in
    TGL+) requires master and slave relationship between pipes, so it
    should always pick the lowest pipe as master as it will be enabled
    first and disable in the reverse order so the master will be the last
    one to be disabled.
    
    Cc: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: José Roberto de Souza <jose.souza@intel.com>
    Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>
    Reviewed-by: Mika Kahola <mika.kahola@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190823082055.5992-13-lucas.demarchi@intel.com

commit da26ded3b2fff646d28559004195abe353bce49b
Author: YueHaibing <yuehaibing@huawei.com>
Date:   Mon Aug 26 16:57:07 2019 +0800

    drm/amdgpu/display: fix build error without CONFIG_DRM_AMD_DC_DSC_SUPPORT
    
    If CONFIG_DRM_AMD_DC_DSC_SUPPORT is not set, build fails:
    
    drivers/gpu/drm/amd/amdgpu/../display/dc/dcn20/dcn20_hwseq.c: In function dcn20_hw_sequencer_construct:
    drivers/gpu/drm/amd/amdgpu/../display/dc/dcn20/dcn20_hwseq.c:2099:28:
     error: dcn20_dsc_pg_control undeclared (first use in this function); did you mean dcn20_dpp_pg_control?
      dc->hwss.dsc_pg_control = dcn20_dsc_pg_control;
                                ^~~~~~~~~~~~~~~~~~~~
                                dcn20_dpp_pg_control
    
    Use CONFIG_DRM_AMD_DC_DSC_SUPPORT to guard this.
    
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Fixes: 8a31820b1218 ("drm/amd/display: Make init_hw and init_pipes generic for seamless boot")
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: YueHaibing <yuehaibing@huawei.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit c08e91323920ec4b3a4d889af3988e300b1902f1
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Aug 21 20:30:32 2019 +0300

    drm/i915: s/num_active_crtcs/num_active_pipes/
    
    Set a good example and talk about pipes rather than crtcs.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190821173033.24123-4-ville.syrjala@linux.intel.com
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>

commit d06a79d33e0f97373a29decb66791758a6d2e968
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Aug 21 20:30:29 2019 +0300

    drm/i915: Use enum pipe instead of crtc index to track active pipes
    
    We may need to eliminate the crtc->index == pipe assumptions from
    the code to support arbitrary pipes being fused off. Start that by
    switching some bitmasks over to using pipe instead of the crtc index.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190821173033.24123-1-ville.syrjala@linux.intel.com
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>

commit 224980366d9d9c10797943cc16631c82a50855f8
Author: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
Date:   Tue Aug 6 16:09:07 2019 -0400

    drm/amd/display: fix odm stream release
    
    Need to memset all odm pipes when calling dc_remove_stream_from_ctx
    
    Signed-off-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Reviewed-by: Charlene Liu <Charlene.Liu@amd.com>
    Acked-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 75a543347c6be74b2636a1fec7f4ffd1ee4525b2
Author: Martin Leung <martin.leung@amd.com>
Date:   Fri Aug 2 11:01:05 2019 -0400

    drm/amd/display: cleaned up coding error in init_hw
    
    [why]
    during a refactor a redundant code that has unknown behaviour was added.
    
    [how]
    removed old bad code
    
    Fixes: 8a31820b1218 ("drm/amd/display: Make init_hw and init_pipes generic for seamless boot")
    Signed-off-by: Martin Leung <martin.leung@amd.com>
    Reviewed-by: Anthony Koo <Anthony.Koo@amd.com>
    Acked-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit b1f6d01c4a3b7eeb2eb035e79d425cd6a696fa45
Author: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
Date:   Tue Aug 6 17:17:28 2019 -0400

    drm/amd/display: re structure odm to allow 4 to 1 support
    
    Currently odm is handled using top_bottom pipe by special casing
    the differing opps to differentiate from mpc combine.
    
    Since top/bottom pipe list was made to track mpc muxing this creates
    difficulties in adding a 4 pipe odm case support.
    
    Rather than continue using mpc combine list, this change reworks odm
    to use it's own linked list to keep track of odm combine pipes. This
    also opens up options for using mpo with odm, if a practical use case
    is ever found.
    
    Signed-off-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Reviewed-by: Charlene Liu <Charlene.Liu@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 9288d74f3f58bdf778606a3eee67df89305752f4
Author: José Roberto de Souza <jose.souza@intel.com>
Date:   Sat Aug 17 02:38:25 2019 -0700

    drm/i915/tgl: Move transcoders to pipes' powerwells
    
    When trying to read registers from transcoder C and D while PG3 is ON it
    causes unclaimed access warnings. Adding the powerwells for the pipes
    fixes the issue, but doesn't match the spec.
    
    Signed-off-by: José Roberto de Souza <jose.souza@intel.com>
    Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>
    Reviewed-by: Imre Deak <imre.deak@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190817093902.2171-4-lucas.demarchi@intel.com

commit 14b54ac4fbb92f1a52966cc33477436de0f72965
Author: Vlad Buslov <vladbu@mellanox.com>
Date:   Mon Aug 19 10:52:08 2019 +0300

    tc-testing: concurrency: wrap piped rule update commands
    
    Concurrent tests use several commands to update rules in parallel: 'find'
    prints names of batch files in tmp directory and pipes result to 'xargs'
    which runs instance of tc per batch file in parallel. This breaks when used
    with ns plugin that adds 'ip netns exec $NS' prefix to the command, which
    causes only first command in pipe to be executed in namespace:
    
    =====> Test e41d: Add 1M flower filters with 10 parallel tc instances
    -----> prepare stage
    ns/SubPlugin.adjust_command
    adjust_command:  stage is setup; inserting netns stuff in command [/bin/mkdir tmp] list [['/bin/mkdir', 'tmp']]
    adjust_command:  return command [ip netns exec tcut /bin/mkdir tmp]
    command "ip netns exec tcut /bin/mkdir tmp"
    ns/SubPlugin.adjust_command
    adjust_command:  stage is setup; inserting netns stuff in command [/sbin/tc qdisc add dev ens1f0 ingress] list [['/sbin/tc', 'qdisc', 'add', 'dev', 'ens1f0', 'ingress']]
    adjust_command:  return command [ip netns exec tcut /sbin/tc qdisc add dev ens1f0 ingress]
    command "ip netns exec tcut /sbin/tc qdisc add dev ens1f0 ingress"
    ns/SubPlugin.adjust_command
    adjust_command:  stage is setup; inserting netns stuff in command [./tdc_multibatch.py ens1f0 tmp 100000 10 add] list [['./tdc_multibatch.py', 'ens1f0', 'tmp', '100000', '10', 'add']]
    adjust_command:  return command [ip netns exec tcut ./tdc_multibatch.py ens1f0 tmp 100000 10 add]
    command "ip netns exec tcut ./tdc_multibatch.py ens1f0 tmp 100000 10 add"
    -----> execute stage
    ns/SubPlugin.adjust_command
    adjust_command:  stage is execute; inserting netns stuff in command [find tmp/add* -print | xargs -n 1 -P 10 /sbin/tc -b] list [['find', 'tmp/add*', '-print', '|', 'xargs', '-n', '1', '-P', '10', '/sbin/tc', '-b']
    ]
    adjust_command:  return command [ip netns exec tcut find tmp/add* -print | xargs -n 1 -P 10 /sbin/tc -b]
    command "ip netns exec tcut find tmp/add* -print | xargs -n 1 -P 10 /sbin/tc -b"
    exit: 123
    exit: 0
    Cannot find device "ens1f0"
    Cannot find device "ens1f0"
    Command failed tmp/add_0:1
    Command failed tmp/add_1:1
    Cannot find device "ens1f0"
    Command failed tmp/add_2:1
    Cannot find device "ens1f0"
    Command failed tmp/add_4:1
    Cannot find device "ens1f0"
    Command failed tmp/add_3:1
    Cannot find device "ens1f0"
    Command failed tmp/add_5:1
    Cannot find device "ens1f0"
    Command failed tmp/add_6:1
    Cannot find device "ens1f0"
    Command failed tmp/add_8:1
    Cannot find device "ens1f0"
    Command failed tmp/add_7:1
    Cannot find device "ens1f0"
    Command failed tmp/add_9:1
    
    Fix the issue by executing whole compound command in namespace by wrapping
    it in 'bash -c' invocation.
    
    Fixes: 489ce2f42514 ("tc-testing: Restore original behaviour for namespaces in tdc")
    Signed-off-by: Vlad Buslov <vladbu@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 41f03a6d74c6f9c064b7edece13cd8716727f80a
Author: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
Date:   Fri Jul 26 17:32:02 2019 -0400

    drm/amd/display: fix dcn20 global sync dml param extraction
    
    Currently the paremeters are extracted as if dml is calculating
    using pipes as we pass them in. in reality, dml internally merges
    pipes into planes if pipe split is detected.
    
    This change adds reverse logic to dcn20_calculate_dlg_params so
    that the global sync parameters can be correctly extracted for
    all the pipes when pipe split is enabled.
    
    Signed-off-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Reviewed-by: Charlene Liu <Charlene.Liu@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit c681491a09213e6675c773a04f1e8801ffc201ff
Author: Jun Lei <Jun.Lei@amd.com>
Date:   Mon Jul 22 09:45:20 2019 -0400

    drm/amd/display: fix pipe selection logic in validate
    
    [why]
    Resource mapping done in dcn20_validate_bandwidth has a flaw:  When a full
    update is performed, the HWSS will only update the MPCC tree for the stream
    that is updated as opposed to all streams.  This means that when mapping pipes
    in validation, care must be taken to not change any existing mapping, otherwise it
    leads to partial hw programming
    
    [how]
    it's not strictly necessary to track which stream/mpcc tree is being updated, but
    rather it's sufficient to compare current and new state and just keep pipes that were
    previously already mapped unchanged.
    
    Signed-off-by: Jun Lei <Jun.Lei@amd.com>
    Reviewed-by: Eric Yang <eric.yang2@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 8a31820b12187c7e31c52e8a00075359d9efac52
Author: Martin Leung <martin.leung@amd.com>
Date:   Tue Jul 9 15:15:17 2019 -0400

    drm/amd/display: Make init_hw and init_pipes generic for seamless boot
    
    [Why]
    For seamless boot the init_hw sequence must be split into
    actual hardware vs pipes, in order to defer pipe initialization to set mode
    and skip of pipe-destructive sequences
    
    [How]
    made dcn10_init_hw and dcn10_init_pipes generic for future dcns to inherit
    deleted dcn20 specific versions. This is part 1 of a 2 partimplementation
    of seamless boot
    
    Signed-off-by: Martin Leung <martin.leung@amd.com>
    Reviewed-by: Jun Lei <Jun.Lei@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 6aa3bef15d6525198f584358055a4176eeca01af
Author: José Roberto de Souza <jose.souza@intel.com>
Date:   Wed Aug 7 17:49:34 2019 -0700

    drm/i915: Get transcoder power domain before reading its register
    
    When getting the pipes attached to encoder if it is not a eDP encoder
    it iterates over all pipes and read a transcoder register.
    But it should not read a transcoder register before get its power
    domain.
    
    It was not a issue in gens older than 12 because if it only had
    port A connected it would be attached to EDP and it would skip all
    the transcoders readout, if it had more than one port connected,
    pipe B would cause PG3 to be on and it contains all other
    transcoders.
    
    But on gen 12 there is no EDP transcoder so it is always iterating
    over all pipes and if only one sink is connected, PG3 is kept off
    and reading other transcoders registers would cause a
    unclaimed read warning.
    
    So here getting the power domain of the transcoder only if it is
    enabled, otherwise it is not connected to the DDI.
    
    Reviewed-by: Lucas De Marchi <lucas.demarchi@intel.com>
    Cc: Lucas De Marchi <lucas.demarchi@intel.com>
    Signed-off-by: José Roberto de Souza <jose.souza@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190808004935.1787-1-jose.souza@intel.com

commit 1d86275225b4c9db3fb426e992886df5051f0047
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Tue Jul 16 16:34:27 2019 -0300

    perf trace beauty: Make connect's addrlen be printed as an int, not hex
    
      # perf trace -e connec* ssh www.bla.com
      connect(3</var/lib/sss/mc/passwd>, { .family: PF_LOCAL, path: /var/run/nscd/socket }, 110) = -1 ENOENT (No such file or directory)
      connect(3</var/lib/sss/mc/passwd>, { .family: PF_LOCAL, path: /var/run/nscd/socket }, 110) = -1 ENOENT (No such file or directory)
      connect(4<socket:[16610959]>, { .family: PF_LOCAL, path: /var/lib/sss/pipes/nss }, 110) = 0
      connect(7, { .family: PF_LOCAL, path: /var/run/nscd/socket }, 110) = -1 ENOENT (No such file or directory)
      connect(7, { .family: PF_LOCAL, path: /var/run/nscd/socket }, 110) = -1 ENOENT (No such file or directory)
      connect(5, { .family: PF_LOCAL, path: /var/run/nscd/socket }, 110) = -1 ENOENT (No such file or directory)
      connect(5</usr/lib64/libnss_mdns4_minimal.so.2>, { .family: PF_LOCAL, path: /var/run/nscd/socket }, 110) = -1 ENOENT (No such file or directory)
      connect(5</usr/lib64/libnss_mdns4_minimal.so.2>, { .family: PF_INET, port: 53, addr: 192.168.44.1 }, 16) = 0
      connect(5</usr/lib64/libnss_mdns4_minimal.so.2>, { .family: PF_INET, port: 22, addr: 146.112.61.108 }, 16) = 0
      connect(5</usr/lib64/libnss_mdns4_minimal.so.2>, { .family: PF_INET6, port: 22, addr: ::ffff:146.112.61.108 }, 28) = 0
      ^Cconnect(5</usr/lib64/libnss_mdns4_minimal.so.2>, { .family: PF_INET, port: 22, addr: 146.112.61.108 }, 16) = -1 (unknown) (INTERNAL ERROR: strerror_r(512, [buf], 128)=22)
      #
    
    Argh, the SCA_FD needs to invalidate its cache when close is done...
    
    It works if the 'close' syscall is not filtered out ;-\
    
      # perf trace -e close,connec* ssh www.bla.com
      close(3)                                = 0
      close(3</usr/lib64/libpcre2-8.so.0.8.0>) = 0
      close(3)                                = 0
      close(3</usr/lib64/libkrb5.so.3.3>)     = 0
      close(3</usr/lib64/libkrb5.so.3.3>)     = 0
      close(3)                                = 0
      close(3</usr/lib64/libk5crypto.so.3.1>) = 0
      close(3</usr/lib64/libk5crypto.so.3.1>) = 0
      close(3</usr/lib64/libcom_err.so.2.1>)  = 0
      close(3</usr/lib64/libcom_err.so.2.1>)  = 0
      close(3)                                = 0
      close(3</usr/lib64/libkrb5support.so.0.1>) = 0
      close(3</usr/lib64/libkrb5support.so.0.1>) = 0
      close(3</usr/lib64/libkeyutils.so.1.8>) = 0
      close(3</usr/lib64/libkeyutils.so.1.8>) = 0
      close(3)                                = 0
      close(3)                                = 0
      close(3)                                = 0
      close(3)                                = 0
      close(4)                                = 0
      close(3)                                = 0
      close(3)                                = 0
      connect(3</etc/nsswitch.conf>, { .family: PF_LOCAL, path: /var/run/nscd/socket }, 110) = -1 ENOENT (No such file or directory)
      close(3</etc/nsswitch.conf>)            = 0
      connect(3</usr/lib64/libnss_sss.so.2>, { .family: PF_LOCAL, path: /var/run/nscd/socket }, 110) = -1 ENOENT (No such file or directory)
      close(3</usr/lib64/libnss_sss.so.2>)    = 0
      close(3</usr/lib64/libnss_sss.so.2>)    = 0
      close(3)                                = 0
      close(3)                                = 0
      connect(4<socket:[16616519]>, { .family: PF_LOCAL, path: /var/lib/sss/pipes/nss }, 110) = 0
      ^C
      #
    
    Will disable this beautifier when 'close' is filtered out...
    
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Luis Cláudio Gonçalves <lclaudio@redhat.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Link: https://lkml.kernel.org/n/tip-ekuiciyx4znchvy95c8p1yyi@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

commit 212b9ab6775b5f340de848b5b6eef6968ccf7f20
Author: Arnaldo Carvalho de Melo <acme@redhat.com>
Date:   Tue Jul 16 16:28:14 2019 -0300

    perf augmented_raw_syscalls: Augment sockaddr arg in 'connect'
    
    We already had a beautifier for an augmented sockaddr payload, but that
    was when we were hooking on each syscalls:sys_enter_foo tracepoints,
    since now we're almost doing that by doing a tail call from
    raw_syscalls:sys_enter, its almost the same, we can reuse it straight
    away.
    
      # perf trace -e connec* ssh www.bla.com
      connect(3</var/lib/sss/mc/passwd>, { .family: PF_LOCAL, path: /var/run/nscd/socket }, 0x6e) = -1 ENOENT (No such file or directory)
      connect(3</var/lib/sss/mc/passwd>, { .family: PF_LOCAL, path: /var/run/nscd/socket }, 0x6e) = -1 ENOENT (No such file or directory)
      connect(4<socket:[16604782]>, { .family: PF_LOCAL, path: /var/lib/sss/pipes/nss }, 0x6e) = 0
      connect(7, { .family: PF_LOCAL, path: /var/run/nscd/socket }, 0x6e) = -1 ENOENT (No such file or directory)
      connect(7, { .family: PF_LOCAL, path: /var/run/nscd/socket }, 0x6e) = -1 ENOENT (No such file or directory)
      connect(5</etc/hosts>, { .family: PF_LOCAL, path: /var/run/nscd/socket }, 0x6e) = -1 ENOENT (No such file or directory)
      connect(5</etc/hosts>, { .family: PF_LOCAL, path: /var/run/nscd/socket }, 0x6e) = -1 ENOENT (No such file or directory)
      connect(5</etc/hosts>, { .family: PF_INET, port: 53, addr: 192.168.44.1 }, 0x10) = 0
      connect(5</etc/hosts>, { .family: PF_INET, port: 22, addr: 146.112.61.108 }, 0x10) = 0
      connect(5</etc/hosts>, { .family: PF_INET6, port: 22, addr: ::ffff:146.112.61.108 }, 0x1c) = 0
      ^C#
    
    Cc: Adrian Hunter <adrian.hunter@intel.com>
    Cc: Jiri Olsa <jolsa@kernel.org>
    Cc: Luis Cláudio Gonçalves <lclaudio@redhat.com>
    Cc: Namhyung Kim <namhyung@kernel.org>
    Link: https://lkml.kernel.org/n/tip-5xkrbcpjsgnr3zt1aqdd7nvc@git.kernel.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

commit a2080098692173cf27282f686e341b184f9d68e3
Author: Vitaly Prosyak <vitaly.prosyak@amd.com>
Date:   Fri Jun 21 10:13:16 2019 -0500

    drm/amd/display: Add MPC 3DLUT resource management
    
    [Why & How]
    Number of 3DLUT's in MPC are not equal to number of pipes.
    Resource management is required.
    Activate on FPGA entire tm solution  which includes
    the following :hdr multiplier, shaper, 3dlut.
    
    Signed-off-by: Vitaly Prosyak <vitaly.prosyak@amd.com>
    Reviewed-by: Charlene Liu <Charlene.Liu@amd.com>
    Acked-by: Gary Kattan <Gary.Kattan@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 2ebe177344d79bc61294d4365376978610d316c3
Author: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
Date:   Tue Feb 26 14:38:59 2019 -0500

    drm/amd/display: add NAVI14 in resource construct
    
    Change the pipes to 5 if the asic is nv14
    
    This is a temp patch, there was some refactor in the dml part of the code.
    which is not in this branch. for now this is good, we can implement this
    properly once we have an updated branch.
    
    Signed-off-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 30fcc338bc66f930dc7f692205474edb7ca6a607
Author: Rodrigo Vivi <rodrigo.vivi@intel.com>
Date:   Thu Jul 11 10:31:10 2019 -0700

    drm/i915/gen12: MBUS B credit change
    
    Previously, the recommended B credit for all platforms was 24 / number
    of pipes, which would give 6 for newer platforms with 4 pipes. However 6
    is not enough and we need 12 on these cases.
    
    We also need a different BW credit for these platforms.
    
    Cc: Arthur J Runyan <arthur.j.runyan@intel.com>
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190711173115.28296-17-lucas.demarchi@intel.com

commit 6a64e985d242921a9b6050bddc5aa716c02aa6ef
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Jul 1 19:05:49 2019 +0300

    drm/i915: Use intel_ types in intel_{lock,modeset}_all_pipes()
    
    Streamline the code a bit by using intel_ types instead of the
    drm_ types.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190701160550.24205-5-ville.syrjala@linux.intel.com
    Reviewed-by: Imre Deak <imre.deak@intel.com>

commit 34e5e1c4874fdf8f1ac9280c8dd0e92e10b337be
Author: Hsin-Yi Wang <hsinyi@chromium.org>
Date:   Wed May 29 18:25:55 2019 +0800

    drm/mediatek: clear num_pipes when unbind driver
    
    [ Upstream commit a4cd1d2b016d5d043ab2c4b9c4ec50a5805f5396 ]
    
    num_pipes is used for mutex created in mtk_drm_crtc_create(). If we
    don't clear num_pipes count, when rebinding driver, the count will
    be accumulated. From mtk_disp_mutex_get(), there can only be at most
    10 mutex id. Clear this number so it starts from 0 in every rebind.
    
    Fixes: 119f5173628a ("drm/mediatek: Add DRM Driver for Mediatek SoC MT8173.")
    Signed-off-by: Hsin-Yi Wang <hsinyi@chromium.org>
    Signed-off-by: CK Hu <ck.hu@mediatek.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7dd1a64b8f8ca8c5aea66c92d7f35fbd2181b22f
Author: Hsin-Yi Wang <hsinyi@chromium.org>
Date:   Wed May 29 18:25:55 2019 +0800

    drm/mediatek: clear num_pipes when unbind driver
    
    [ Upstream commit a4cd1d2b016d5d043ab2c4b9c4ec50a5805f5396 ]
    
    num_pipes is used for mutex created in mtk_drm_crtc_create(). If we
    don't clear num_pipes count, when rebinding driver, the count will
    be accumulated. From mtk_disp_mutex_get(), there can only be at most
    10 mutex id. Clear this number so it starts from 0 in every rebind.
    
    Fixes: 119f5173628a ("drm/mediatek: Add DRM Driver for Mediatek SoC MT8173.")
    Signed-off-by: Hsin-Yi Wang <hsinyi@chromium.org>
    Signed-off-by: CK Hu <ck.hu@mediatek.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f337ef0ad9defe1b06f57f43ee3d106177ddb5a2
Author: Kirill Smelkov <kirr@nexedi.com>
Date:   Sun Jun 9 14:39:51 2019 +0000

    fs: stream_open - opener for stream-like files so that read and write can run simultaneously without deadlock
    
    commit 10dce8af34226d90fa56746a934f8da5dcdba3df upstream.
    
    [ while porting to 3.16 xenbus conflict was trivially resolved in a way
      that actually fixes /proc/xen/xenbus deadlock introduced in 3.14,
      because original upstream commit 581d21a2d02a to fix xenbus deadlock
      was not included into 3.16 . ]
    
    Commit 9c225f2655e3 ("vfs: atomic f_pos accesses as per POSIX") added
    locking for file.f_pos access and in particular made concurrent read and
    write not possible - now both those functions take f_pos lock for the
    whole run, and so if e.g. a read is blocked waiting for data, write will
    deadlock waiting for that read to complete.
    
    This caused regression for stream-like files where previously read and
    write could run simultaneously, but after that patch could not do so
    anymore. See e.g. commit 581d21a2d02a ("xenbus: fix deadlock on writes
    to /proc/xen/xenbus") which fixes such regression for particular case of
    /proc/xen/xenbus.
    
    The patch that added f_pos lock in 2014 did so to guarantee POSIX thread
    safety for read/write/lseek and added the locking to file descriptors of
    all regular files. In 2014 that thread-safety problem was not new as it
    was already discussed earlier in 2006.
    
    However even though 2006'th version of Linus's patch was adding f_pos
    locking "only for files that are marked seekable with FMODE_LSEEK (thus
    avoiding the stream-like objects like pipes and sockets)", the 2014
    version - the one that actually made it into the tree as 9c225f2655e3 -
    is doing so irregardless of whether a file is seekable or not.
    
    See
    
        https://lore.kernel.org/lkml/53022DB1.4070805@gmail.com/
        https://lwn.net/Articles/180387
        https://lwn.net/Articles/180396
    
    for historic context.
    
    The reason that it did so is, probably, that there are many files that
    are marked non-seekable, but e.g. their read implementation actually
    depends on knowing current position to correctly handle the read. Some
    examples:
    
            kernel/power/user.c             snapshot_read
            fs/debugfs/file.c               u32_array_read
            fs/fuse/control.c               fuse_conn_waiting_read + ...
            drivers/hwmon/asus_atk0110.c    atk_debugfs_ggrp_read
            arch/s390/hypfs/inode.c         hypfs_read_iter
            ...
    
    Despite that, many nonseekable_open users implement read and write with
    pure stream semantics - they don't depend on passed ppos at all. And for
    those cases where read could wait for something inside, it creates a
    situation similar to xenbus - the write could be never made to go until
    read is done, and read is waiting for some, potentially external, event,
    for potentially unbounded time -> deadlock.
    
    Besides xenbus, there are 14 such places in the kernel that I've found
    with semantic patch (see below):
    
            drivers/xen/evtchn.c:667:8-24: ERROR: evtchn_fops: .read() can deadlock .write()
            drivers/isdn/capi/capi.c:963:8-24: ERROR: capi_fops: .read() can deadlock .write()
            drivers/input/evdev.c:527:1-17: ERROR: evdev_fops: .read() can deadlock .write()
            drivers/char/pcmcia/cm4000_cs.c:1685:7-23: ERROR: cm4000_fops: .read() can deadlock .write()
            net/rfkill/core.c:1146:8-24: ERROR: rfkill_fops: .read() can deadlock .write()
            drivers/s390/char/fs3270.c:488:1-17: ERROR: fs3270_fops: .read() can deadlock .write()
            drivers/usb/misc/ldusb.c:310:1-17: ERROR: ld_usb_fops: .read() can deadlock .write()
            drivers/hid/uhid.c:635:1-17: ERROR: uhid_fops: .read() can deadlock .write()
            net/batman-adv/icmp_socket.c:80:1-17: ERROR: batadv_fops: .read() can deadlock .write()
            drivers/media/rc/lirc_dev.c:198:1-17: ERROR: lirc_fops: .read() can deadlock .write()
            drivers/leds/uleds.c:77:1-17: ERROR: uleds_fops: .read() can deadlock .write()
            drivers/input/misc/uinput.c:400:1-17: ERROR: uinput_fops: .read() can deadlock .write()
            drivers/infiniband/core/user_mad.c:985:7-23: ERROR: umad_fops: .read() can deadlock .write()
            drivers/gnss/core.c:45:1-17: ERROR: gnss_fops: .read() can deadlock .write()
    
    In addition to the cases above another regression caused by f_pos
    locking is that now FUSE filesystems that implement open with
    FOPEN_NONSEEKABLE flag, can no longer implement bidirectional
    stream-like files - for the same reason as above e.g. read can deadlock
    write locking on file.f_pos in the kernel.
    
    FUSE's FOPEN_NONSEEKABLE was added in 2008 in a7c1b990f715 ("fuse:
    implement nonseekable open") to support OSSPD. OSSPD implements /dev/dsp
    in userspace with FOPEN_NONSEEKABLE flag, with corresponding read and
    write routines not depending on current position at all, and with both
    read and write being potentially blocking operations:
    
    See
    
        https://github.com/libfuse/osspd
        https://lwn.net/Articles/308445
    
        https://github.com/libfuse/osspd/blob/14a9cff0/osspd.c#L1406
        https://github.com/libfuse/osspd/blob/14a9cff0/osspd.c#L1438-L1477
        https://github.com/libfuse/osspd/blob/14a9cff0/osspd.c#L1479-L1510
    
    Corresponding libfuse example/test also describes FOPEN_NONSEEKABLE as
    "somewhat pipe-like files ..." with read handler not using offset.
    However that test implements only read without write and cannot exercise
    the deadlock scenario:
    
        https://github.com/libfuse/libfuse/blob/fuse-3.4.2-3-ga1bff7d/example/poll.c#L124-L131
        https://github.com/libfuse/libfuse/blob/fuse-3.4.2-3-ga1bff7d/example/poll.c#L146-L163
        https://github.com/libfuse/libfuse/blob/fuse-3.4.2-3-ga1bff7d/example/poll.c#L209-L216
    
    I've actually hit the read vs write deadlock for real while implementing
    my FUSE filesystem where there is /head/watch file, for which open
    creates separate bidirectional socket-like stream in between filesystem
    and its user with both read and write being later performed
    simultaneously. And there it is semantically not easy to split the
    stream into two separate read-only and write-only channels:
    
        https://lab.nexedi.com/kirr/wendelin.core/blob/f13aa600/wcfs/wcfs.go#L88-169
    
    Let's fix this regression. The plan is:
    
    1. We can't change nonseekable_open to include &~FMODE_ATOMIC_POS -
       doing so would break many in-kernel nonseekable_open users which
       actually use ppos in read/write handlers.
    
    2. Add stream_open() to kernel to open stream-like non-seekable file
       descriptors. Read and write on such file descriptors would never use
       nor change ppos. And with that property on stream-like files read and
       write will be running without taking f_pos lock - i.e. read and write
       could be running simultaneously.
    
    3. With semantic patch search and convert to stream_open all in-kernel
       nonseekable_open users for which read and write actually do not
       depend on ppos and where there is no other methods in file_operations
       which assume @offset access.
    
    4. Add FOPEN_STREAM to fs/fuse/ and open in-kernel file-descriptors via
       steam_open if that bit is present in filesystem open reply.
    
       It was tempting to change fs/fuse/ open handler to use stream_open
       instead of nonseekable_open on just FOPEN_NONSEEKABLE flags, but
       grepping through Debian codesearch shows users of FOPEN_NONSEEKABLE,
       and in particular GVFS which actually uses offset in its read and
       write handlers
    
            https://codesearch.debian.net/search?q=-%3Enonseekable+%3D
            https://gitlab.gnome.org/GNOME/gvfs/blob/1.40.0-6-gcbc54396/client/gvfsfusedaemon.c#L1080
            https://gitlab.gnome.org/GNOME/gvfs/blob/1.40.0-6-gcbc54396/client/gvfsfusedaemon.c#L1247-1346
            https://gitlab.gnome.org/GNOME/gvfs/blob/1.40.0-6-gcbc54396/client/gvfsfusedaemon.c#L1399-1481
    
       so if we would do such a change it will break a real user.
    
    5. Add stream_open and FOPEN_STREAM handling to stable kernels starting
       from v3.14+ (the kernel where 9c225f2655 first appeared).
    
       This will allow to patch OSSPD and other FUSE filesystems that
       provide stream-like files to return FOPEN_STREAM | FOPEN_NONSEEKABLE
       in their open handler and this way avoid the deadlock on all kernel
       versions. This should work because fs/fuse/ ignores unknown open
       flags returned from a filesystem and so passing FOPEN_STREAM to a
       kernel that is not aware of this flag cannot hurt. In turn the kernel
       that is not aware of FOPEN_STREAM will be < v3.14 where just
       FOPEN_NONSEEKABLE is sufficient to implement streams without read vs
       write deadlock.
    
    This patch adds stream_open, converts /proc/xen/xenbus to it and adds
    semantic patch to automatically locate in-kernel places that are either
    required to be converted due to read vs write deadlock, or that are just
    safe to be converted because read and write do not use ppos and there
    are no other funky methods in file_operations.
    
    Regarding semantic patch I've verified each generated change manually -
    that it is correct to convert - and each other nonseekable_open instance
    left - that it is either not correct to convert there, or that it is not
    converted due to current stream_open.cocci limitations.
    
    The script also does not convert files that should be valid to convert,
    but that currently have .llseek = noop_llseek or generic_file_llseek for
    unknown reason despite file being opened with nonseekable_open (e.g.
    drivers/input/mousedev.c)
    
    Cc: Michael Kerrisk <mtk.manpages@gmail.com>
    Cc: Yongzhi Pan <panyongzhi@gmail.com>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: David Vrabel <david.vrabel@citrix.com>
    Cc: Juergen Gross <jgross@suse.com>
    Cc: Miklos Szeredi <miklos@szeredi.hu>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Kirill Tkhai <ktkhai@virtuozzo.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Julia Lawall <Julia.Lawall@lip6.fr>
    Cc: Nikolaus Rath <Nikolaus@rath.org>
    Cc: Han-Wen Nienhuys <hanwen@google.com>
    Signed-off-by: Kirill Smelkov <kirr@nexedi.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    [ backport to 3.16: actually fixed deadlock on /proc/xen/xenbus as 581d21a2d02a was not backported to 3.16 ]
    Signed-off-by: Kirill Smelkov <kirr@nexedi.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit f21ea27a927712e3586ac6bd45a5edc0a7fa1271
Author: Jann Horn <jannh@google.com>
Date:   Wed Jan 23 15:19:17 2019 +0100

    splice: don't merge into linked buffers
    
    commit a0ce2f0aa6ad97c3d4927bf2ca54bcebdf062d55 upstream.
    
    Before this patch, it was possible for two pipes to affect each other after
    data had been transferred between them with tee():
    
    ============
    $ cat tee_test.c
    
    int main(void) {
      int pipe_a[2];
      if (pipe(pipe_a)) err(1, "pipe");
      int pipe_b[2];
      if (pipe(pipe_b)) err(1, "pipe");
      if (write(pipe_a[1], "abcd", 4) != 4) err(1, "write");
      if (tee(pipe_a[0], pipe_b[1], 2, 0) != 2) err(1, "tee");
      if (write(pipe_b[1], "xx", 2) != 2) err(1, "write");
    
      char buf[5];
      if (read(pipe_a[0], buf, 4) != 4) err(1, "read");
      buf[4] = 0;
      printf("got back: '%s'\n", buf);
    }
    $ gcc -o tee_test tee_test.c
    $ ./tee_test
    got back: 'abxx'
    $
    ============
    
    As suggested by Al Viro, fix it by creating a separate type for
    non-mergeable pipe buffers, then changing the types of buffers in
    splice_pipe_to_pipe() and link_pipe().
    
    Fixes: 7c77f0b3f920 ("splice: implement pipe to pipe splicing")
    Fixes: 70524490ee2e ("[PATCH] splice: add support for sys_tee()")
    Suggested-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    [bwh: Backported to 3.16: Use generic_pipe_buf_steal(), as for other pipe
     types, since anon_pipe_buf_steal() does not exist here]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 501ec325f1ec4338c0b6d32001a6f4cdfc61a6b2
Author: Lucas De Marchi <lucas.demarchi@intel.com>
Date:   Tue Jun 25 10:54:11 2019 -0700

    drm/i915: rework reading pipe disable fuses
    
    This prepares to have possibly more than 3 pipes. I didn't want to
    continue the previous approach since the check for "are the disabled
    pipes the last ones" poses a combinatory explosion. We need that check
    because in several places of the code we have that assumption. If that
    ever becomes false in a new HW, other parts of the code would have to
    change.
    
    Now we start by considering we have info->num_pipes enabled and disable
    each pipe that is marked as disabled. Then it's a simple matter of
    checking if we have at least one pipe and that all the enabled ones are
    the first pipes, i.e. there are no holes in the bitmask.
    
    Cc: Jose Souza <jose.souza@intel.com>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190625175437.14840-3-lucas.demarchi@intel.com

commit d8cd587d2bfd13dfc0dce6b74c1a78333415f413
Author: Martin Leung <martin.leung@amd.com>
Date:   Wed May 15 15:50:51 2019 -0400

    drm/amd/display: removing MODULO change for dcn2
    
    [why]
    when resetting pipes from 480p to dual-pipe 8k, modulo reg write for
    video optimized rate updated one pipe without changing the other, causing
    sync error
    
    [how]
    removed code from dcn2
    
    Signed-off-by: Martin Leung <martin.leung@amd.com>
    Reviewed-by: Jun Lei <Jun.Lei@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit ed07237c0c480902a00cdf18a527849a4a9c75bf
Author: Ilya Bakoulin <Ilya.Bakoulin@amd.com>
Date:   Wed Apr 17 14:48:25 2019 -0400

    drm/amd/display: Fix LB BPP and Cursor width
    
    DCN2.0 LB BPP should be 48 or 16BPC and max cursor width should be 256.
    
    Also use populate_dml_pipes as functions pointer instead of using it directly
    
    Signed-off-by: Ilya Bakoulin <Ilya.Bakoulin@amd.com>
    Reviewed-by: Eric Bernstein <Eric.Bernstein@amd.com>
    Acked-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 6bd8d7d3f75be1c327f3fd63e6f03ca68faffb33
Author: Aric Cyr <aric.cyr@amd.com>
Date:   Mon Apr 22 17:45:11 2019 -0400

    drm/amd/display: Intermittent DCN2 pipe hang on mode change
    
    [Why]
    GSL is being used to synchronize pipes when vsync is off but
    on transition to vsync on during a mode change GSL is not
    being reset correctly.
    
    [How]
    Disable GSL on any plane that is disabled.
    
    Signed-off-by: Aric Cyr <aric.cyr@amd.com>
    Reviewed-by: Krunoslav Kovac <Krunoslav.Kovac@amd.com>
    Acked-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit c9ae6e1691cd1dcd5f7f76050b5eca16bc82445e
Author: Nikola Cornij <nikola.cornij@amd.com>
Date:   Tue Apr 2 12:40:22 2019 -0400

    drm/amd/display: Acquire DSC HW resource only if required by stream
    
    [why]
    There are ASICs that have fewer DSC engines than pipes, which makes
    DSC a resource that should be used only if required.
    
    [how]
    Acquire DSC HW resource if required by stream and release when not
    required anymore.
    
    Signed-off-by: Nikola Cornij <nikola.cornij@amd.com>
    Reviewed-by: Wenjing Liu <Wenjing.Liu@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Acked-by: Hawking Zhang <Hawking.Zhang@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 4e0cbbbfbc37fd5a8bdf653a1ebb7b271a506e2d
Author: Leo Li <sunpeng.li@amd.com>
Date:   Wed Mar 20 09:52:14 2019 -0400

    drm/amd/display: Clean up locking in dcn*_apply_ctx_for_surface()
    
    [Why]
    
    dcn*_disable_plane() doesn't unlock the pipe anymore, making the extra
    lock unnecessary.
    
    In addition - during full plane updates - all necessary pipes should be
    locked/unlocked together when modifying hubp to avoid tearing in
    pipesplit setups.
    
    [How]
    
    Remove redundant locks, and add function to lock all pipes. If an
    interdependent pipe update is required, lock down all pipes. Otherwise,
    lock only the top pipe for the updated pipe tree.
    
    Signed-off-by: Leo Li <sunpeng.li@amd.com>
    Acked-by: Hawking Zhang <Hawking.Zhang@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 3972c3508594310eb868f0e57c44cf0b6fccf7b2
Author: Joshua Aberback <joshua.aberback@amd.com>
Date:   Mon Apr 29 17:21:19 2019 -0400

    drm/amd/display: Program VTG params after programming Global Sync for DCN2
    
    [Why]
    VTG has a parameter FP2, which is defined as:
        if VSTARTUP is before VSYNC:
            FP2 = number of lines in between VSTARTUP and VSYNC
        else
            FP2 = 0
    Currently, FP2 is only programmed during "program_timing". However, the
    position of VSTARTUP is affected by the prefetching requirements on all pipes,
    so the position might change when we do memory request control on another pipe, so we need
    to make sure that FP2 stays up-to-date whenever we adjust VSTARTUP.
    
    [How]
     - refactor VTG_CONTROL programming into a new function "set_vtg_params"
     - call it after calling "program_global_sync"
       - make sure it's called after because it relies on the cached dlg params
    
    Signed-off-by: Joshua Aberback <joshua.aberback@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Acked-by: Jun Lei <Jun.Lei@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit df7ba8162ca13aa32a65b3a98bdaefbb44772966
Author: Alexander Lochmann <alexander.lochmann@tu-dortmund.de>
Date:   Fri Dec 14 11:55:52 2018 +0100

    Abort file_remove_privs() for non-reg. files
    
    commit f69e749a49353d96af1a293f56b5b56de59c668a upstream.
    
    file_remove_privs() might be called for non-regular files, e.g.
    blkdev inode. There is no reason to do its job on things
    like blkdev inodes, pipes, or cdevs. Hence, abort if
    file does not refer to a regular inode.
    
    AV: more to the point, for devices there might be any number of
    inodes refering to given device.  Which one to strip the permissions
    from, even if that made any sense in the first place?  All of them
    will be observed with contents modified, after all.
    
    Found by LockDoc (Alexander Lochmann, Horst Schirmeier and Olaf
    Spinczyk)
    
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Alexander Lochmann <alexander.lochmann@tu-dortmund.de>
    Signed-off-by: Horst Schirmeier <horst.schirmeier@tu-dortmund.de>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Zubin Mithra <zsm@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 77beb274790656702dbca6d1e698da522d56c069
Author: Alexander Lochmann <alexander.lochmann@tu-dortmund.de>
Date:   Fri Dec 14 11:55:52 2018 +0100

    Abort file_remove_privs() for non-reg. files
    
    commit f69e749a49353d96af1a293f56b5b56de59c668a upstream.
    
    file_remove_privs() might be called for non-regular files, e.g.
    blkdev inode. There is no reason to do its job on things
    like blkdev inodes, pipes, or cdevs. Hence, abort if
    file does not refer to a regular inode.
    
    AV: more to the point, for devices there might be any number of
    inodes refering to given device.  Which one to strip the permissions
    from, even if that made any sense in the first place?  All of them
    will be observed with contents modified, after all.
    
    Found by LockDoc (Alexander Lochmann, Horst Schirmeier and Olaf
    Spinczyk)
    
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Alexander Lochmann <alexander.lochmann@tu-dortmund.de>
    Signed-off-by: Horst Schirmeier <horst.schirmeier@tu-dortmund.de>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Zubin Mithra <zsm@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c54624255635a4f421fef9c7692f7fc9314b453
Author: Alexander Lochmann <alexander.lochmann@tu-dortmund.de>
Date:   Fri Dec 14 11:55:52 2018 +0100

    Abort file_remove_privs() for non-reg. files
    
    commit f69e749a49353d96af1a293f56b5b56de59c668a upstream.
    
    file_remove_privs() might be called for non-regular files, e.g.
    blkdev inode. There is no reason to do its job on things
    like blkdev inodes, pipes, or cdevs. Hence, abort if
    file does not refer to a regular inode.
    
    AV: more to the point, for devices there might be any number of
    inodes refering to given device.  Which one to strip the permissions
    from, even if that made any sense in the first place?  All of them
    will be observed with contents modified, after all.
    
    Found by LockDoc (Alexander Lochmann, Horst Schirmeier and Olaf
    Spinczyk)
    
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Alexander Lochmann <alexander.lochmann@tu-dortmund.de>
    Signed-off-by: Horst Schirmeier <horst.schirmeier@tu-dortmund.de>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Zubin Mithra <zsm@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e8e448b08450b05d54cf99eb4e3473b708c8fcc0
Author: Alexander Lochmann <alexander.lochmann@tu-dortmund.de>
Date:   Fri Dec 14 11:55:52 2018 +0100

    Abort file_remove_privs() for non-reg. files
    
    commit f69e749a49353d96af1a293f56b5b56de59c668a upstream.
    
    file_remove_privs() might be called for non-regular files, e.g.
    blkdev inode. There is no reason to do its job on things
    like blkdev inodes, pipes, or cdevs. Hence, abort if
    file does not refer to a regular inode.
    
    AV: more to the point, for devices there might be any number of
    inodes refering to given device.  Which one to strip the permissions
    from, even if that made any sense in the first place?  All of them
    will be observed with contents modified, after all.
    
    Found by LockDoc (Alexander Lochmann, Horst Schirmeier and Olaf
    Spinczyk)
    
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Alexander Lochmann <alexander.lochmann@tu-dortmund.de>
    Signed-off-by: Horst Schirmeier <horst.schirmeier@tu-dortmund.de>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Zubin Mithra <zsm@chromium.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 53b2fe415fb161b25efa685d89848db273e4ea42
Author: Hawking Zhang <Hawking.Zhang@amd.com>
Date:   Mon Mar 11 22:04:44 2019 +0800

    drm/amdgpu: enable gfx eop interrupt per gfx pipe
    
    Navi10 has 2 gfx pipe and need to enable gfx eop interrupt
    per pipe, instead of enable eop int for all gfx pipes at one
    time.
    
    Signed-off-by: Hawking Zhang <Hawking.Zhang@amd.com>
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 6aa7a22b97907851972d7f39aae79dc105eba78b
Merge: 406652440172 e14c5873d2a3
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Jun 14 17:34:45 2019 -1000

    Merge tag 'drm-fixes-2019-06-14' of git://anongit.freedesktop.org/drm/drm
    
    Pull drm fixes from Daniel Vetter:
     "Nothing unsettling here, also not aware of anything serious still
      pending.
    
      The edid override regression fix took a bit longer since this seems to
      be an area with an overabundance of bad options. But the fix we have
      now seems like a good path forward.
    
      Next week it should be back to Dave.
    
      Summary:
    
       - fix regression on amdgpu on SI
    
       - fix edid override regression
    
       - driver fixes: amdgpu, i915, mediatek, meson, panfrost
    
       - fix writecombine for vmap in gem-shmem helper (used by panfrost)
    
       - add more panel quirks"
    
    * tag 'drm-fixes-2019-06-14' of git://anongit.freedesktop.org/drm/drm: (25 commits)
      drm/amdgpu: return 0 by default in amdgpu_pm_load_smu_firmware
      drm/amdgpu: Fix bounds checking in amdgpu_ras_is_supported()
      drm: add fallback override/firmware EDID modes workaround
      drm/edid: abstract override/firmware EDID retrieval
      drm/i915/perf: fix whitelist on Gen10+
      drm/i915/sdvo: Implement proper HDMI audio support for SDVO
      drm/i915: Fix per-pixel alpha with CCS
      drm/i915/dmc: protect against reading random memory
      drm/i915/dsi: Use a fuzzy check for burst mode clock check
      drm/amdgpu/{uvd,vcn}: fetch ring's read_ptr after alloc
      drm/panfrost: Require the simple_ondemand governor
      drm/panfrost: make devfreq optional again
      drm/gem_shmem: Use a writecombine mapping for ->vaddr
      drm: panel-orientation-quirks: Add quirk for GPD MicroPC
      drm: panel-orientation-quirks: Add quirk for GPD pocket2
      drm/meson: fix G12A primary plane disabling
      drm/meson: fix primary plane disabling
      drm/meson: fix G12A HDMI PLL settings for 4K60 1000/1001 variations
      drm/mediatek: call mtk_dsi_stop() after mtk_drm_crtc_atomic_disable()
      drm/mediatek: clear num_pipes when unbind driver
      ...

commit 37fb6e8a96fbc9c809c58f9490267ffe7101ac33
Author: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
Date:   Fri Jun 7 11:16:55 2019 -0400

    drm/amd/display: Enable fast plane updates when state->allow_modeset = true
    
    [Why]
    Whenever the a modeset is allowed (but not neccessarily required) we
    currently recreate all the planes in the state. Most IGT tests and
    legacy IOCTLs create atomic commits with this flag set, so the pipes
    are often unnecessarily reprogrammed.
    
    Poor performance and stuttering can occur when many of these commits
    are frequently issued.
    
    This flag was needed when the appropriate conditions for checking
    whether the planes needed a reset were not in place, but
    should_reset_plane should cover everything needed now.
    
    [How]
    Drop the check for state->allow_modeset in should_reset_plane.
    
    All planes on a CRTC should reset in the following conditions:
    - The CRTC needs a modeset
    - The CRTC degamma changes
    - Planes are added or removed to the CRTC
    
    These conditions are all covered in should_reset_plane.
    
    We still can't drop the format change check in should_reset_plane since
    fill_dc_plane_info_and_addr isn't called when validating the state, so
    we can't tell if a FULL update is needed or not.
    
    Signed-off-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Reviewed-by: David Francis <david.francis@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 3bf0c459615ab0db33638cc64613bf682ffe9436
Author: Kirill Smelkov <kirr@nexedi.com>
Date:   Tue Mar 26 22:20:43 2019 +0000

    fs: stream_open - opener for stream-like files so that read and write can run simultaneously without deadlock
    
    commit 10dce8af34226d90fa56746a934f8da5dcdba3df upstream.
    
    Commit 9c225f2655e3 ("vfs: atomic f_pos accesses as per POSIX") added
    locking for file.f_pos access and in particular made concurrent read and
    write not possible - now both those functions take f_pos lock for the
    whole run, and so if e.g. a read is blocked waiting for data, write will
    deadlock waiting for that read to complete.
    
    This caused regression for stream-like files where previously read and
    write could run simultaneously, but after that patch could not do so
    anymore. See e.g. commit 581d21a2d02a ("xenbus: fix deadlock on writes
    to /proc/xen/xenbus") which fixes such regression for particular case of
    /proc/xen/xenbus.
    
    The patch that added f_pos lock in 2014 did so to guarantee POSIX thread
    safety for read/write/lseek and added the locking to file descriptors of
    all regular files. In 2014 that thread-safety problem was not new as it
    was already discussed earlier in 2006.
    
    However even though 2006'th version of Linus's patch was adding f_pos
    locking "only for files that are marked seekable with FMODE_LSEEK (thus
    avoiding the stream-like objects like pipes and sockets)", the 2014
    version - the one that actually made it into the tree as 9c225f2655e3 -
    is doing so irregardless of whether a file is seekable or not.
    
    See
    
        https://lore.kernel.org/lkml/53022DB1.4070805@gmail.com/
        https://lwn.net/Articles/180387
        https://lwn.net/Articles/180396
    
    for historic context.
    
    The reason that it did so is, probably, that there are many files that
    are marked non-seekable, but e.g. their read implementation actually
    depends on knowing current position to correctly handle the read. Some
    examples:
    
            kernel/power/user.c             snapshot_read
            fs/debugfs/file.c               u32_array_read
            fs/fuse/control.c               fuse_conn_waiting_read + ...
            drivers/hwmon/asus_atk0110.c    atk_debugfs_ggrp_read
            arch/s390/hypfs/inode.c         hypfs_read_iter
            ...
    
    Despite that, many nonseekable_open users implement read and write with
    pure stream semantics - they don't depend on passed ppos at all. And for
    those cases where read could wait for something inside, it creates a
    situation similar to xenbus - the write could be never made to go until
    read is done, and read is waiting for some, potentially external, event,
    for potentially unbounded time -> deadlock.
    
    Besides xenbus, there are 14 such places in the kernel that I've found
    with semantic patch (see below):
    
            drivers/xen/evtchn.c:667:8-24: ERROR: evtchn_fops: .read() can deadlock .write()
            drivers/isdn/capi/capi.c:963:8-24: ERROR: capi_fops: .read() can deadlock .write()
            drivers/input/evdev.c:527:1-17: ERROR: evdev_fops: .read() can deadlock .write()
            drivers/char/pcmcia/cm4000_cs.c:1685:7-23: ERROR: cm4000_fops: .read() can deadlock .write()
            net/rfkill/core.c:1146:8-24: ERROR: rfkill_fops: .read() can deadlock .write()
            drivers/s390/char/fs3270.c:488:1-17: ERROR: fs3270_fops: .read() can deadlock .write()
            drivers/usb/misc/ldusb.c:310:1-17: ERROR: ld_usb_fops: .read() can deadlock .write()
            drivers/hid/uhid.c:635:1-17: ERROR: uhid_fops: .read() can deadlock .write()
            net/batman-adv/icmp_socket.c:80:1-17: ERROR: batadv_fops: .read() can deadlock .write()
            drivers/media/rc/lirc_dev.c:198:1-17: ERROR: lirc_fops: .read() can deadlock .write()
            drivers/leds/uleds.c:77:1-17: ERROR: uleds_fops: .read() can deadlock .write()
            drivers/input/misc/uinput.c:400:1-17: ERROR: uinput_fops: .read() can deadlock .write()
            drivers/infiniband/core/user_mad.c:985:7-23: ERROR: umad_fops: .read() can deadlock .write()
            drivers/gnss/core.c:45:1-17: ERROR: gnss_fops: .read() can deadlock .write()
    
    In addition to the cases above another regression caused by f_pos
    locking is that now FUSE filesystems that implement open with
    FOPEN_NONSEEKABLE flag, can no longer implement bidirectional
    stream-like files - for the same reason as above e.g. read can deadlock
    write locking on file.f_pos in the kernel.
    
    FUSE's FOPEN_NONSEEKABLE was added in 2008 in a7c1b990f715 ("fuse:
    implement nonseekable open") to support OSSPD. OSSPD implements /dev/dsp
    in userspace with FOPEN_NONSEEKABLE flag, with corresponding read and
    write routines not depending on current position at all, and with both
    read and write being potentially blocking operations:
    
    See
    
        https://github.com/libfuse/osspd
        https://lwn.net/Articles/308445
    
        https://github.com/libfuse/osspd/blob/14a9cff0/osspd.c#L1406
        https://github.com/libfuse/osspd/blob/14a9cff0/osspd.c#L1438-L1477
        https://github.com/libfuse/osspd/blob/14a9cff0/osspd.c#L1479-L1510
    
    Corresponding libfuse example/test also describes FOPEN_NONSEEKABLE as
    "somewhat pipe-like files ..." with read handler not using offset.
    However that test implements only read without write and cannot exercise
    the deadlock scenario:
    
        https://github.com/libfuse/libfuse/blob/fuse-3.4.2-3-ga1bff7d/example/poll.c#L124-L131
        https://github.com/libfuse/libfuse/blob/fuse-3.4.2-3-ga1bff7d/example/poll.c#L146-L163
        https://github.com/libfuse/libfuse/blob/fuse-3.4.2-3-ga1bff7d/example/poll.c#L209-L216
    
    I've actually hit the read vs write deadlock for real while implementing
    my FUSE filesystem where there is /head/watch file, for which open
    creates separate bidirectional socket-like stream in between filesystem
    and its user with both read and write being later performed
    simultaneously. And there it is semantically not easy to split the
    stream into two separate read-only and write-only channels:
    
        https://lab.nexedi.com/kirr/wendelin.core/blob/f13aa600/wcfs/wcfs.go#L88-169
    
    Let's fix this regression. The plan is:
    
    1. We can't change nonseekable_open to include &~FMODE_ATOMIC_POS -
       doing so would break many in-kernel nonseekable_open users which
       actually use ppos in read/write handlers.
    
    2. Add stream_open() to kernel to open stream-like non-seekable file
       descriptors. Read and write on such file descriptors would never use
       nor change ppos. And with that property on stream-like files read and
       write will be running without taking f_pos lock - i.e. read and write
       could be running simultaneously.
    
    3. With semantic patch search and convert to stream_open all in-kernel
       nonseekable_open users for which read and write actually do not
       depend on ppos and where there is no other methods in file_operations
       which assume @offset access.
    
    4. Add FOPEN_STREAM to fs/fuse/ and open in-kernel file-descriptors via
       steam_open if that bit is present in filesystem open reply.
    
       It was tempting to change fs/fuse/ open handler to use stream_open
       instead of nonseekable_open on just FOPEN_NONSEEKABLE flags, but
       grepping through Debian codesearch shows users of FOPEN_NONSEEKABLE,
       and in particular GVFS which actually uses offset in its read and
       write handlers
    
            https://codesearch.debian.net/search?q=-%3Enonseekable+%3D
            https://gitlab.gnome.org/GNOME/gvfs/blob/1.40.0-6-gcbc54396/client/gvfsfusedaemon.c#L1080
            https://gitlab.gnome.org/GNOME/gvfs/blob/1.40.0-6-gcbc54396/client/gvfsfusedaemon.c#L1247-1346
            https://gitlab.gnome.org/GNOME/gvfs/blob/1.40.0-6-gcbc54396/client/gvfsfusedaemon.c#L1399-1481
    
       so if we would do such a change it will break a real user.
    
    5. Add stream_open and FOPEN_STREAM handling to stable kernels starting
       from v3.14+ (the kernel where 9c225f2655 first appeared).
    
       This will allow to patch OSSPD and other FUSE filesystems that
       provide stream-like files to return FOPEN_STREAM | FOPEN_NONSEEKABLE
       in their open handler and this way avoid the deadlock on all kernel
       versions. This should work because fs/fuse/ ignores unknown open
       flags returned from a filesystem and so passing FOPEN_STREAM to a
       kernel that is not aware of this flag cannot hurt. In turn the kernel
       that is not aware of FOPEN_STREAM will be < v3.14 where just
       FOPEN_NONSEEKABLE is sufficient to implement streams without read vs
       write deadlock.
    
    This patch adds stream_open, converts /proc/xen/xenbus to it and adds
    semantic patch to automatically locate in-kernel places that are either
    required to be converted due to read vs write deadlock, or that are just
    safe to be converted because read and write do not use ppos and there
    are no other funky methods in file_operations.
    
    Regarding semantic patch I've verified each generated change manually -
    that it is correct to convert - and each other nonseekable_open instance
    left - that it is either not correct to convert there, or that it is not
    converted due to current stream_open.cocci limitations.
    
    The script also does not convert files that should be valid to convert,
    but that currently have .llseek = noop_llseek or generic_file_llseek for
    unknown reason despite file being opened with nonseekable_open (e.g.
    drivers/input/mousedev.c)
    
    Cc: Michael Kerrisk <mtk.manpages@gmail.com>
    Cc: Yongzhi Pan <panyongzhi@gmail.com>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: David Vrabel <david.vrabel@citrix.com>
    Cc: Juergen Gross <jgross@suse.com>
    Cc: Miklos Szeredi <miklos@szeredi.hu>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Kirill Tkhai <ktkhai@virtuozzo.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Julia Lawall <Julia.Lawall@lip6.fr>
    Cc: Nikolaus Rath <Nikolaus@rath.org>
    Cc: Han-Wen Nienhuys <hanwen@google.com>
    [ backport to 4.4: actually fixed deadlock on /proc/xen/xenbus as 581d21a2d02a was not backported to 4.4 ]
    Signed-off-by: Kirill Smelkov <kirr@nexedi.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9c829b6e3fe2dfe25fccc6dc0477cf86661feeac
Author: Kirill Smelkov <kirr@nexedi.com>
Date:   Tue Mar 26 22:20:43 2019 +0000

    fs: stream_open - opener for stream-like files so that read and write can run simultaneously without deadlock
    
    commit 10dce8af34226d90fa56746a934f8da5dcdba3df upstream.
    
    Commit 9c225f2655e3 ("vfs: atomic f_pos accesses as per POSIX") added
    locking for file.f_pos access and in particular made concurrent read and
    write not possible - now both those functions take f_pos lock for the
    whole run, and so if e.g. a read is blocked waiting for data, write will
    deadlock waiting for that read to complete.
    
    This caused regression for stream-like files where previously read and
    write could run simultaneously, but after that patch could not do so
    anymore. See e.g. commit 581d21a2d02a ("xenbus: fix deadlock on writes
    to /proc/xen/xenbus") which fixes such regression for particular case of
    /proc/xen/xenbus.
    
    The patch that added f_pos lock in 2014 did so to guarantee POSIX thread
    safety for read/write/lseek and added the locking to file descriptors of
    all regular files. In 2014 that thread-safety problem was not new as it
    was already discussed earlier in 2006.
    
    However even though 2006'th version of Linus's patch was adding f_pos
    locking "only for files that are marked seekable with FMODE_LSEEK (thus
    avoiding the stream-like objects like pipes and sockets)", the 2014
    version - the one that actually made it into the tree as 9c225f2655e3 -
    is doing so irregardless of whether a file is seekable or not.
    
    See
    
        https://lore.kernel.org/lkml/53022DB1.4070805@gmail.com/
        https://lwn.net/Articles/180387
        https://lwn.net/Articles/180396
    
    for historic context.
    
    The reason that it did so is, probably, that there are many files that
    are marked non-seekable, but e.g. their read implementation actually
    depends on knowing current position to correctly handle the read. Some
    examples:
    
            kernel/power/user.c             snapshot_read
            fs/debugfs/file.c               u32_array_read
            fs/fuse/control.c               fuse_conn_waiting_read + ...
            drivers/hwmon/asus_atk0110.c    atk_debugfs_ggrp_read
            arch/s390/hypfs/inode.c         hypfs_read_iter
            ...
    
    Despite that, many nonseekable_open users implement read and write with
    pure stream semantics - they don't depend on passed ppos at all. And for
    those cases where read could wait for something inside, it creates a
    situation similar to xenbus - the write could be never made to go until
    read is done, and read is waiting for some, potentially external, event,
    for potentially unbounded time -> deadlock.
    
    Besides xenbus, there are 14 such places in the kernel that I've found
    with semantic patch (see below):
    
            drivers/xen/evtchn.c:667:8-24: ERROR: evtchn_fops: .read() can deadlock .write()
            drivers/isdn/capi/capi.c:963:8-24: ERROR: capi_fops: .read() can deadlock .write()
            drivers/input/evdev.c:527:1-17: ERROR: evdev_fops: .read() can deadlock .write()
            drivers/char/pcmcia/cm4000_cs.c:1685:7-23: ERROR: cm4000_fops: .read() can deadlock .write()
            net/rfkill/core.c:1146:8-24: ERROR: rfkill_fops: .read() can deadlock .write()
            drivers/s390/char/fs3270.c:488:1-17: ERROR: fs3270_fops: .read() can deadlock .write()
            drivers/usb/misc/ldusb.c:310:1-17: ERROR: ld_usb_fops: .read() can deadlock .write()
            drivers/hid/uhid.c:635:1-17: ERROR: uhid_fops: .read() can deadlock .write()
            net/batman-adv/icmp_socket.c:80:1-17: ERROR: batadv_fops: .read() can deadlock .write()
            drivers/media/rc/lirc_dev.c:198:1-17: ERROR: lirc_fops: .read() can deadlock .write()
            drivers/leds/uleds.c:77:1-17: ERROR: uleds_fops: .read() can deadlock .write()
            drivers/input/misc/uinput.c:400:1-17: ERROR: uinput_fops: .read() can deadlock .write()
            drivers/infiniband/core/user_mad.c:985:7-23: ERROR: umad_fops: .read() can deadlock .write()
            drivers/gnss/core.c:45:1-17: ERROR: gnss_fops: .read() can deadlock .write()
    
    In addition to the cases above another regression caused by f_pos
    locking is that now FUSE filesystems that implement open with
    FOPEN_NONSEEKABLE flag, can no longer implement bidirectional
    stream-like files - for the same reason as above e.g. read can deadlock
    write locking on file.f_pos in the kernel.
    
    FUSE's FOPEN_NONSEEKABLE was added in 2008 in a7c1b990f715 ("fuse:
    implement nonseekable open") to support OSSPD. OSSPD implements /dev/dsp
    in userspace with FOPEN_NONSEEKABLE flag, with corresponding read and
    write routines not depending on current position at all, and with both
    read and write being potentially blocking operations:
    
    See
    
        https://github.com/libfuse/osspd
        https://lwn.net/Articles/308445
    
        https://github.com/libfuse/osspd/blob/14a9cff0/osspd.c#L1406
        https://github.com/libfuse/osspd/blob/14a9cff0/osspd.c#L1438-L1477
        https://github.com/libfuse/osspd/blob/14a9cff0/osspd.c#L1479-L1510
    
    Corresponding libfuse example/test also describes FOPEN_NONSEEKABLE as
    "somewhat pipe-like files ..." with read handler not using offset.
    However that test implements only read without write and cannot exercise
    the deadlock scenario:
    
        https://github.com/libfuse/libfuse/blob/fuse-3.4.2-3-ga1bff7d/example/poll.c#L124-L131
        https://github.com/libfuse/libfuse/blob/fuse-3.4.2-3-ga1bff7d/example/poll.c#L146-L163
        https://github.com/libfuse/libfuse/blob/fuse-3.4.2-3-ga1bff7d/example/poll.c#L209-L216
    
    I've actually hit the read vs write deadlock for real while implementing
    my FUSE filesystem where there is /head/watch file, for which open
    creates separate bidirectional socket-like stream in between filesystem
    and its user with both read and write being later performed
    simultaneously. And there it is semantically not easy to split the
    stream into two separate read-only and write-only channels:
    
        https://lab.nexedi.com/kirr/wendelin.core/blob/f13aa600/wcfs/wcfs.go#L88-169
    
    Let's fix this regression. The plan is:
    
    1. We can't change nonseekable_open to include &~FMODE_ATOMIC_POS -
       doing so would break many in-kernel nonseekable_open users which
       actually use ppos in read/write handlers.
    
    2. Add stream_open() to kernel to open stream-like non-seekable file
       descriptors. Read and write on such file descriptors would never use
       nor change ppos. And with that property on stream-like files read and
       write will be running without taking f_pos lock - i.e. read and write
       could be running simultaneously.
    
    3. With semantic patch search and convert to stream_open all in-kernel
       nonseekable_open users for which read and write actually do not
       depend on ppos and where there is no other methods in file_operations
       which assume @offset access.
    
    4. Add FOPEN_STREAM to fs/fuse/ and open in-kernel file-descriptors via
       steam_open if that bit is present in filesystem open reply.
    
       It was tempting to change fs/fuse/ open handler to use stream_open
       instead of nonseekable_open on just FOPEN_NONSEEKABLE flags, but
       grepping through Debian codesearch shows users of FOPEN_NONSEEKABLE,
       and in particular GVFS which actually uses offset in its read and
       write handlers
    
            https://codesearch.debian.net/search?q=-%3Enonseekable+%3D
            https://gitlab.gnome.org/GNOME/gvfs/blob/1.40.0-6-gcbc54396/client/gvfsfusedaemon.c#L1080
            https://gitlab.gnome.org/GNOME/gvfs/blob/1.40.0-6-gcbc54396/client/gvfsfusedaemon.c#L1247-1346
            https://gitlab.gnome.org/GNOME/gvfs/blob/1.40.0-6-gcbc54396/client/gvfsfusedaemon.c#L1399-1481
    
       so if we would do such a change it will break a real user.
    
    5. Add stream_open and FOPEN_STREAM handling to stable kernels starting
       from v3.14+ (the kernel where 9c225f2655 first appeared).
    
       This will allow to patch OSSPD and other FUSE filesystems that
       provide stream-like files to return FOPEN_STREAM | FOPEN_NONSEEKABLE
       in their open handler and this way avoid the deadlock on all kernel
       versions. This should work because fs/fuse/ ignores unknown open
       flags returned from a filesystem and so passing FOPEN_STREAM to a
       kernel that is not aware of this flag cannot hurt. In turn the kernel
       that is not aware of FOPEN_STREAM will be < v3.14 where just
       FOPEN_NONSEEKABLE is sufficient to implement streams without read vs
       write deadlock.
    
    This patch adds stream_open, converts /proc/xen/xenbus to it and adds
    semantic patch to automatically locate in-kernel places that are either
    required to be converted due to read vs write deadlock, or that are just
    safe to be converted because read and write do not use ppos and there
    are no other funky methods in file_operations.
    
    Regarding semantic patch I've verified each generated change manually -
    that it is correct to convert - and each other nonseekable_open instance
    left - that it is either not correct to convert there, or that it is not
    converted due to current stream_open.cocci limitations.
    
    The script also does not convert files that should be valid to convert,
    but that currently have .llseek = noop_llseek or generic_file_llseek for
    unknown reason despite file being opened with nonseekable_open (e.g.
    drivers/input/mousedev.c)
    
    Cc: Michael Kerrisk <mtk.manpages@gmail.com>
    Cc: Yongzhi Pan <panyongzhi@gmail.com>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: David Vrabel <david.vrabel@citrix.com>
    Cc: Juergen Gross <jgross@suse.com>
    Cc: Miklos Szeredi <miklos@szeredi.hu>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Kirill Tkhai <ktkhai@virtuozzo.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Julia Lawall <Julia.Lawall@lip6.fr>
    Cc: Nikolaus Rath <Nikolaus@rath.org>
    Cc: Han-Wen Nienhuys <hanwen@google.com>
    Signed-off-by: Kirill Smelkov <kirr@nexedi.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b673f99cec0d9767ae7b98ab86ee6f58564efcd7
Author: Kirill Smelkov <kirr@nexedi.com>
Date:   Tue Mar 26 22:20:43 2019 +0000

    fs: stream_open - opener for stream-like files so that read and write can run simultaneously without deadlock
    
    commit 10dce8af34226d90fa56746a934f8da5dcdba3df upstream.
    
    Commit 9c225f2655e3 ("vfs: atomic f_pos accesses as per POSIX") added
    locking for file.f_pos access and in particular made concurrent read and
    write not possible - now both those functions take f_pos lock for the
    whole run, and so if e.g. a read is blocked waiting for data, write will
    deadlock waiting for that read to complete.
    
    This caused regression for stream-like files where previously read and
    write could run simultaneously, but after that patch could not do so
    anymore. See e.g. commit 581d21a2d02a ("xenbus: fix deadlock on writes
    to /proc/xen/xenbus") which fixes such regression for particular case of
    /proc/xen/xenbus.
    
    The patch that added f_pos lock in 2014 did so to guarantee POSIX thread
    safety for read/write/lseek and added the locking to file descriptors of
    all regular files. In 2014 that thread-safety problem was not new as it
    was already discussed earlier in 2006.
    
    However even though 2006'th version of Linus's patch was adding f_pos
    locking "only for files that are marked seekable with FMODE_LSEEK (thus
    avoiding the stream-like objects like pipes and sockets)", the 2014
    version - the one that actually made it into the tree as 9c225f2655e3 -
    is doing so irregardless of whether a file is seekable or not.
    
    See
    
        https://lore.kernel.org/lkml/53022DB1.4070805@gmail.com/
        https://lwn.net/Articles/180387
        https://lwn.net/Articles/180396
    
    for historic context.
    
    The reason that it did so is, probably, that there are many files that
    are marked non-seekable, but e.g. their read implementation actually
    depends on knowing current position to correctly handle the read. Some
    examples:
    
            kernel/power/user.c             snapshot_read
            fs/debugfs/file.c               u32_array_read
            fs/fuse/control.c               fuse_conn_waiting_read + ...
            drivers/hwmon/asus_atk0110.c    atk_debugfs_ggrp_read
            arch/s390/hypfs/inode.c         hypfs_read_iter
            ...
    
    Despite that, many nonseekable_open users implement read and write with
    pure stream semantics - they don't depend on passed ppos at all. And for
    those cases where read could wait for something inside, it creates a
    situation similar to xenbus - the write could be never made to go until
    read is done, and read is waiting for some, potentially external, event,
    for potentially unbounded time -> deadlock.
    
    Besides xenbus, there are 14 such places in the kernel that I've found
    with semantic patch (see below):
    
            drivers/xen/evtchn.c:667:8-24: ERROR: evtchn_fops: .read() can deadlock .write()
            drivers/isdn/capi/capi.c:963:8-24: ERROR: capi_fops: .read() can deadlock .write()
            drivers/input/evdev.c:527:1-17: ERROR: evdev_fops: .read() can deadlock .write()
            drivers/char/pcmcia/cm4000_cs.c:1685:7-23: ERROR: cm4000_fops: .read() can deadlock .write()
            net/rfkill/core.c:1146:8-24: ERROR: rfkill_fops: .read() can deadlock .write()
            drivers/s390/char/fs3270.c:488:1-17: ERROR: fs3270_fops: .read() can deadlock .write()
            drivers/usb/misc/ldusb.c:310:1-17: ERROR: ld_usb_fops: .read() can deadlock .write()
            drivers/hid/uhid.c:635:1-17: ERROR: uhid_fops: .read() can deadlock .write()
            net/batman-adv/icmp_socket.c:80:1-17: ERROR: batadv_fops: .read() can deadlock .write()
            drivers/media/rc/lirc_dev.c:198:1-17: ERROR: lirc_fops: .read() can deadlock .write()
            drivers/leds/uleds.c:77:1-17: ERROR: uleds_fops: .read() can deadlock .write()
            drivers/input/misc/uinput.c:400:1-17: ERROR: uinput_fops: .read() can deadlock .write()
            drivers/infiniband/core/user_mad.c:985:7-23: ERROR: umad_fops: .read() can deadlock .write()
            drivers/gnss/core.c:45:1-17: ERROR: gnss_fops: .read() can deadlock .write()
    
    In addition to the cases above another regression caused by f_pos
    locking is that now FUSE filesystems that implement open with
    FOPEN_NONSEEKABLE flag, can no longer implement bidirectional
    stream-like files - for the same reason as above e.g. read can deadlock
    write locking on file.f_pos in the kernel.
    
    FUSE's FOPEN_NONSEEKABLE was added in 2008 in a7c1b990f715 ("fuse:
    implement nonseekable open") to support OSSPD. OSSPD implements /dev/dsp
    in userspace with FOPEN_NONSEEKABLE flag, with corresponding read and
    write routines not depending on current position at all, and with both
    read and write being potentially blocking operations:
    
    See
    
        https://github.com/libfuse/osspd
        https://lwn.net/Articles/308445
    
        https://github.com/libfuse/osspd/blob/14a9cff0/osspd.c#L1406
        https://github.com/libfuse/osspd/blob/14a9cff0/osspd.c#L1438-L1477
        https://github.com/libfuse/osspd/blob/14a9cff0/osspd.c#L1479-L1510
    
    Corresponding libfuse example/test also describes FOPEN_NONSEEKABLE as
    "somewhat pipe-like files ..." with read handler not using offset.
    However that test implements only read without write and cannot exercise
    the deadlock scenario:
    
        https://github.com/libfuse/libfuse/blob/fuse-3.4.2-3-ga1bff7d/example/poll.c#L124-L131
        https://github.com/libfuse/libfuse/blob/fuse-3.4.2-3-ga1bff7d/example/poll.c#L146-L163
        https://github.com/libfuse/libfuse/blob/fuse-3.4.2-3-ga1bff7d/example/poll.c#L209-L216
    
    I've actually hit the read vs write deadlock for real while implementing
    my FUSE filesystem where there is /head/watch file, for which open
    creates separate bidirectional socket-like stream in between filesystem
    and its user with both read and write being later performed
    simultaneously. And there it is semantically not easy to split the
    stream into two separate read-only and write-only channels:
    
        https://lab.nexedi.com/kirr/wendelin.core/blob/f13aa600/wcfs/wcfs.go#L88-169
    
    Let's fix this regression. The plan is:
    
    1. We can't change nonseekable_open to include &~FMODE_ATOMIC_POS -
       doing so would break many in-kernel nonseekable_open users which
       actually use ppos in read/write handlers.
    
    2. Add stream_open() to kernel to open stream-like non-seekable file
       descriptors. Read and write on such file descriptors would never use
       nor change ppos. And with that property on stream-like files read and
       write will be running without taking f_pos lock - i.e. read and write
       could be running simultaneously.
    
    3. With semantic patch search and convert to stream_open all in-kernel
       nonseekable_open users for which read and write actually do not
       depend on ppos and where there is no other methods in file_operations
       which assume @offset access.
    
    4. Add FOPEN_STREAM to fs/fuse/ and open in-kernel file-descriptors via
       steam_open if that bit is present in filesystem open reply.
    
       It was tempting to change fs/fuse/ open handler to use stream_open
       instead of nonseekable_open on just FOPEN_NONSEEKABLE flags, but
       grepping through Debian codesearch shows users of FOPEN_NONSEEKABLE,
       and in particular GVFS which actually uses offset in its read and
       write handlers
    
            https://codesearch.debian.net/search?q=-%3Enonseekable+%3D
            https://gitlab.gnome.org/GNOME/gvfs/blob/1.40.0-6-gcbc54396/client/gvfsfusedaemon.c#L1080
            https://gitlab.gnome.org/GNOME/gvfs/blob/1.40.0-6-gcbc54396/client/gvfsfusedaemon.c#L1247-1346
            https://gitlab.gnome.org/GNOME/gvfs/blob/1.40.0-6-gcbc54396/client/gvfsfusedaemon.c#L1399-1481
    
       so if we would do such a change it will break a real user.
    
    5. Add stream_open and FOPEN_STREAM handling to stable kernels starting
       from v3.14+ (the kernel where 9c225f2655 first appeared).
    
       This will allow to patch OSSPD and other FUSE filesystems that
       provide stream-like files to return FOPEN_STREAM | FOPEN_NONSEEKABLE
       in their open handler and this way avoid the deadlock on all kernel
       versions. This should work because fs/fuse/ ignores unknown open
       flags returned from a filesystem and so passing FOPEN_STREAM to a
       kernel that is not aware of this flag cannot hurt. In turn the kernel
       that is not aware of FOPEN_STREAM will be < v3.14 where just
       FOPEN_NONSEEKABLE is sufficient to implement streams without read vs
       write deadlock.
    
    This patch adds stream_open, converts /proc/xen/xenbus to it and adds
    semantic patch to automatically locate in-kernel places that are either
    required to be converted due to read vs write deadlock, or that are just
    safe to be converted because read and write do not use ppos and there
    are no other funky methods in file_operations.
    
    Regarding semantic patch I've verified each generated change manually -
    that it is correct to convert - and each other nonseekable_open instance
    left - that it is either not correct to convert there, or that it is not
    converted due to current stream_open.cocci limitations.
    
    The script also does not convert files that should be valid to convert,
    but that currently have .llseek = noop_llseek or generic_file_llseek for
    unknown reason despite file being opened with nonseekable_open (e.g.
    drivers/input/mousedev.c)
    
    Cc: Michael Kerrisk <mtk.manpages@gmail.com>
    Cc: Yongzhi Pan <panyongzhi@gmail.com>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: David Vrabel <david.vrabel@citrix.com>
    Cc: Juergen Gross <jgross@suse.com>
    Cc: Miklos Szeredi <miklos@szeredi.hu>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Kirill Tkhai <ktkhai@virtuozzo.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Julia Lawall <Julia.Lawall@lip6.fr>
    Cc: Nikolaus Rath <Nikolaus@rath.org>
    Cc: Han-Wen Nienhuys <hanwen@google.com>
    Signed-off-by: Kirill Smelkov <kirr@nexedi.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 10d75f5428fd866df36a846a3007bd39bba9c1cf
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri May 17 22:31:32 2019 +0300

    drm/i915: Fix plane state dumps
    
    Stop dumping plane->state for planes. That is the old state most of the
    time and dumping stale information only serves to confuse people.
    Instead dump the new state just for the planes included in the
    operation. For now we'll include only the planes for the modeset/fastset
    pipes in the dumps. But probably we want to dump them all eventually,
    just not quite sure how to present that information nicely to the user.
    
    And while at it let's dump a few more interesting bits from the state.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190517193132.8140-14-ville.syrjala@linux.intel.com
    Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>

commit a0e701041c958a6667e9bdd050f06ffb2d4de1da
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri May 17 22:31:28 2019 +0300

    drm/i915: Move state dump to the end of atomic_check()
    
    Currently we're dumping the crtc states before they have
    been fully calculated. Move the dumping to the end of
    .atomic_check() so we get a fully up to date dump.
    
    Let's also do the dump for fully disabled pipes, but we'll
    limit that to just saying that the pipe is disabled since
    the rest of the state is going to be nonsense in that case.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190517193132.8140-10-ville.syrjala@linux.intel.com
    Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>

commit a4cd1d2b016d5d043ab2c4b9c4ec50a5805f5396
Author: Hsin-Yi Wang <hsinyi@chromium.org>
Date:   Wed May 29 18:25:55 2019 +0800

    drm/mediatek: clear num_pipes when unbind driver
    
    num_pipes is used for mutex created in mtk_drm_crtc_create(). If we
    don't clear num_pipes count, when rebinding driver, the count will
    be accumulated. From mtk_disp_mutex_get(), there can only be at most
    10 mutex id. Clear this number so it starts from 0 in every rebind.
    
    Fixes: 119f5173628a ("drm/mediatek: Add DRM Driver for Mediatek SoC MT8173.")
    Signed-off-by: Hsin-Yi Wang <hsinyi@chromium.org>
    Signed-off-by: CK Hu <ck.hu@mediatek.com>

commit 4b0ab7dd37a3beec35699f2a821d0474bd269c2d
Author: Su Sung Chung <Su.Chung@amd.com>
Date:   Fri May 10 15:16:45 2019 -0400

    drm/amd/display: fix crash on setmode when mode is close to bw limit
    
    [why]
    during It's possible to call dcn_validate_bandwidth with no plane.
    In that case, as we are only intersted in if output timing is supported or not,
    even if we cannot support native resolution, we still want to support lower
    resolution if it is valid
    
    [how]
    if there exist no surface, make viewport/rec_out size at max 1080p. It is
    already known that 1080p x 6(max # of pipes) is supported, so if we fail
    validation, it is because of the stream
    
    Signed-off-by: Su Sung Chung <Su.Chung@amd.com>
    Reviewed-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 313a9a21ff46d22ded2cfa8df8f3742227549627
Author: Krunoslav Kovac <Krunoslav.Kovac@amd.com>
Date:   Fri Mar 15 16:25:41 2019 -0400

    drm/amd/display: Add GSL source select registers
    
    GSL is a form of locking that can be used to synchronize pipes in a
    pipe-split configurations when async flip is used. Add the registers
    here.
    
    Signed-off-by: Krunoslav Kovac <Krunoslav.Kovac@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Aric Cyr <Aric.Cyr@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 70611b1b81c4ec8ce99d3c00107e89697ec1f495
Author: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
Date:   Thu Mar 7 13:26:13 2019 -0500

    drm/amd/display: fix releasing planes when exiting odm
    
    [ Upstream commit bc2193992b00488f5734613ac95b78ef2d2803ab ]
    
    Releasing planes should not release the 2nd odm pipe right away,
    this change leaves us with 2 pipes with null planes and same stream
    when planes are released during odm.
    
    Signed-off-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 192978ff7210d7e1f79d3c4fa41ff008e3512a34
Author: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
Date:   Thu Mar 7 13:26:13 2019 -0500

    drm/amd/display: fix releasing planes when exiting odm
    
    [ Upstream commit bc2193992b00488f5734613ac95b78ef2d2803ab ]
    
    Releasing planes should not release the 2nd odm pipe right away,
    this change leaves us with 2 pipes with null planes and same stream
    when planes are released during odm.
    
    Signed-off-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 234b70f0f8f83a34bcb2e1eb3218d82ef449b7e2
Author: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
Date:   Wed Feb 6 10:18:17 2019 -0500

    drm/amd/display: Reset planes that were disabled in init_pipes
    
    [ Upstream commit 4bc46da4a3aeeb4d55e83dd276cf72756e908286 ]
    
    [Why]
    Seamless boot tries to reuse planes that were enabled for the first
    commit applied.
    
    In the case where Raven is booting with two monitors connected and the
    first commit contains two streams the screen corruption would occur
    because the second stream was trying to re-use a tg and plane that
    weren't previously enabled.
    
    The state on the first commit looks something like the following:
    
    TG0: enabled=1
    TG1: enabled=0
    TG2: enabled=0
    TG3: enabled=0
    
    New state: pipe=0, stream=0,    plane=0,       new_tg=0
    New state: pipe=1, stream=1,    plane=1,       new_tg=1
    New state: pipe=2, stream=NULL, plane=NULL,    new_tg=NULL
    New state: pipe=3, stream=NULL, plane=NULL,    new_tg=NULL
    
    Only one plane/tg is setup before we enter accelerated mode so
    we really want to disabling everything but that first plane.
    
    [How]
    
    Check if the stream is not NULL and if the tg is enabled before
    deciding whether to skip the plane disable.
    
    Also ensure we're also disabling on the current state's pipe_ctx so
    we don't overwrite the fields in the new pending state.
    
    Signed-off-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Reviewed-by: Anthony Koo <Anthony.Koo@amd.com>
    Acked-by: Harry Wentland <Harry.Wentland@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 12fd94b117aae1527f61536fd7618e1f6f8b1617
Author: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
Date:   Thu Mar 7 13:26:13 2019 -0500

    drm/amd/display: fix releasing planes when exiting odm
    
    [ Upstream commit bc2193992b00488f5734613ac95b78ef2d2803ab ]
    
    Releasing planes should not release the 2nd odm pipe right away,
    this change leaves us with 2 pipes with null planes and same stream
    when planes are released during odm.
    
    Signed-off-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c457d9cf256e942138a54a2e80349ee7fe20c391
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri May 24 18:36:14 2019 +0300

    drm/i915: Make sure we have enough memory bandwidth on ICL
    
    ICL has so many planes that it can easily exceed the maximum
    effective memory bandwidth of the system. We must therefore check
    that we don't exceed that limit.
    
    The algorithm is very magic number heavy and lacks sufficient
    explanation for now. We also have no sane way to query the
    memory clock and timings, so we must rely on a combination of
    raw readout from the memory controller and hardcoded assumptions.
    The memory controller values obviously change as the system
    jumps between the different SAGV points, so we try to stabilize
    it first by disabling SAGV for the duration of the readout.
    
    The utilized bandwidth is tracked via a device wide atomic
    private object. That is actually not robust because we can't
    afford to enforce strict global ordering between the pipes.
    Thus I think I'll need to change this to simply chop up the
    available bandwidth between all the active pipes. Each pipe
    can then do whatever it wants as long as it doesn't exceed
    its budget. That scheme will also require that we assume that
    any number of planes could be active at any time.
    
    TODO: make it robust and deal with all the open questions
    
    v2: Sleep longer after disabling SAGV
    v3: Poll for the dclk to get raised (seen it take 250ms!)
        If the system has 2133MT/s memory then we pointlessly
        wait one full second :(
    v4: Use the new pcode interface to get the qgv points rather
        that using hardcoded numbers
    v5: Move the pcode stuff into intel_bw.c (Matt)
        s/intel_sagv_info/intel_qgv_info/
        Do the NV12/P010 as per spec for now (Matt)
        s/IS_ICELAKE/IS_GEN11/
    v6: Ignore bandwidth limits if the pcode query fails
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Matt Roper <matthew.d.roper@intel.com>
    Acked-by: Clint Taylor <Clinton.A.Taylor@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190524153614.32410-1-ville.syrjala@linux.intel.com

commit 1f58bb18f6f28d1df0b7144d90bc90ee5672416d
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Mon May 20 13:44:57 2019 +0100

    mount_pseudo(): drop 'name' argument, switch to d_make_root()
    
    Once upon a time we used to set ->d_name of e.g. pipefs root
    so that d_path() on pipes would work.  These days it's
    completely pointless - dentries of pipes are not even connected
    to pipefs root.  However, mount_pseudo() had set the root
    dentry name (passed as the second argument) and callers
    kept inventing names to pass to it.  Including those that
    didn't *have* any non-root dentries to start with...
    
    All of that had been pointless for about 8 years now; it's
    time to get rid of that cargo-culting...
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit c939121b5435e920d2cec3c664163eb81d41b233
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Fri Mar 15 22:23:19 2019 -0400

    dcache: sort the freeing-without-RCU-delay mess for good.
    
    commit 5467a68cbf6884c9a9d91e2a89140afb1839c835 upstream.
    
    For lockless accesses to dentries we don't have pinned we rely
    (among other things) upon having an RCU delay between dropping
    the last reference and actually freeing the memory.
    
    On the other hand, for things like pipes and sockets we neither
    do that kind of lockless access, nor want to deal with the
    overhead of an RCU delay every time a socket gets closed.
    
    So delay was made optional - setting DCACHE_RCUACCESS in ->d_flags
    made sure it would happen.  We tried to avoid setting it unless
    we knew we need it.  Unfortunately, that had led to recurring
    class of bugs, in which we missed the need to set it.
    
    We only really need it for dentries that are created by
    d_alloc_pseudo(), so let's not bother with trying to be smart -
    just make having an RCU delay the default.  The ones that do
    *not* get it set the replacement flag (DCACHE_NORCU) and we'd
    better use that sparingly.  d_alloc_pseudo() is the only
    such user right now.
    
    FWIW, the race that finally prompted that switch had been
    between __lock_parent() of immediate subdirectory of what's
    currently the root of a disconnected tree (e.g. from
    open-by-handle in progress) racing with d_splice_alias()
    elsewhere picking another alias for the same inode, either
    on outright corrupted fs image, or (in case of open-by-handle
    on NFS) that subdirectory having been just moved on server.
    It's not easy to hit, so the sky is not falling, but that's
    not the first race on similar missed cases and the logics
    for settinf DCACHE_RCUACCESS has gotten ridiculously
    convoluted.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 86901d0a34ab0496e7c3bda88f82e1dc03a11981
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Fri Mar 15 22:23:19 2019 -0400

    dcache: sort the freeing-without-RCU-delay mess for good.
    
    commit 5467a68cbf6884c9a9d91e2a89140afb1839c835 upstream.
    
    For lockless accesses to dentries we don't have pinned we rely
    (among other things) upon having an RCU delay between dropping
    the last reference and actually freeing the memory.
    
    On the other hand, for things like pipes and sockets we neither
    do that kind of lockless access, nor want to deal with the
    overhead of an RCU delay every time a socket gets closed.
    
    So delay was made optional - setting DCACHE_RCUACCESS in ->d_flags
    made sure it would happen.  We tried to avoid setting it unless
    we knew we need it.  Unfortunately, that had led to recurring
    class of bugs, in which we missed the need to set it.
    
    We only really need it for dentries that are created by
    d_alloc_pseudo(), so let's not bother with trying to be smart -
    just make having an RCU delay the default.  The ones that do
    *not* get it set the replacement flag (DCACHE_NORCU) and we'd
    better use that sparingly.  d_alloc_pseudo() is the only
    such user right now.
    
    FWIW, the race that finally prompted that switch had been
    between __lock_parent() of immediate subdirectory of what's
    currently the root of a disconnected tree (e.g. from
    open-by-handle in progress) racing with d_splice_alias()
    elsewhere picking another alias for the same inode, either
    on outright corrupted fs image, or (in case of open-by-handle
    on NFS) that subdirectory having been just moved on server.
    It's not easy to hit, so the sky is not falling, but that's
    not the first race on similar missed cases and the logics
    for settinf DCACHE_RCUACCESS has gotten ridiculously
    convoluted.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 86261d27b2a7c58c7b8a116288202699848d7d8b
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Fri Mar 15 22:23:19 2019 -0400

    dcache: sort the freeing-without-RCU-delay mess for good.
    
    commit 5467a68cbf6884c9a9d91e2a89140afb1839c835 upstream.
    
    For lockless accesses to dentries we don't have pinned we rely
    (among other things) upon having an RCU delay between dropping
    the last reference and actually freeing the memory.
    
    On the other hand, for things like pipes and sockets we neither
    do that kind of lockless access, nor want to deal with the
    overhead of an RCU delay every time a socket gets closed.
    
    So delay was made optional - setting DCACHE_RCUACCESS in ->d_flags
    made sure it would happen.  We tried to avoid setting it unless
    we knew we need it.  Unfortunately, that had led to recurring
    class of bugs, in which we missed the need to set it.
    
    We only really need it for dentries that are created by
    d_alloc_pseudo(), so let's not bother with trying to be smart -
    just make having an RCU delay the default.  The ones that do
    *not* get it set the replacement flag (DCACHE_NORCU) and we'd
    better use that sparingly.  d_alloc_pseudo() is the only
    such user right now.
    
    FWIW, the race that finally prompted that switch had been
    between __lock_parent() of immediate subdirectory of what's
    currently the root of a disconnected tree (e.g. from
    open-by-handle in progress) racing with d_splice_alias()
    elsewhere picking another alias for the same inode, either
    on outright corrupted fs image, or (in case of open-by-handle
    on NFS) that subdirectory having been just moved on server.
    It's not easy to hit, so the sky is not falling, but that's
    not the first race on similar missed cases and the logics
    for settinf DCACHE_RCUACCESS has gotten ridiculously
    convoluted.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6476a7c8f03156883bb52605fb84a8ec0147849f
Author: Joshua Aberback <joshua.aberback@amd.com>
Date:   Mon Apr 29 17:21:19 2019 -0400

    drm/amd/display: Program VTG params after programming Global Sync
    
    [Why]
    VTG has a parameter FP2, which is defined as:
        if VSTARTUP is before VSYNC:
            FP2 = number of lines in between VSTARTUP and VSYNC
        else
            FP2 = 0
    Currently, FP2 is only programmed during "program_timing". However, the
    position of VSTARTUP is affected by the prefetching requirements on all pipes,
    so the position might change when we do memory request control on another pipe, so we need
    to make sure that FP2 stays up-to-date whenever we adjust VSTARTUP.
    
    [How]
     - refactor VTG_CONTROL programming into a new function "set_vtg_params"
     - call it after calling "program_global_sync"
       - make sure it's called after because it relies on the cached dlg params
    
    Signed-off-by: Joshua Aberback <joshua.aberback@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Acked-by: Jun Lei <Jun.Lei@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 801b0f2624848e924de35870d2918aa72d26210b
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Apr 3 10:13:51 2019 +0300

    nfc: nci: Potential off by one in ->pipes[] array
    
    [ Upstream commit 6491d698396fd5da4941980a35ca7c162a672016 ]
    
    This is similar to commit e285d5bfb7e9 ("NFC: Fix the number of pipes")
    where we changed NFC_HCI_MAX_PIPES from 127 to 128.
    
    As the comment next to the define explains, the pipe identifier is 7
    bits long.  The highest possible pipe is 127, but the number of possible
    pipes is 128.  As the code is now, then there is potential for an
    out of bounds array access:
    
        net/nfc/nci/hci.c:297 nci_hci_cmd_received() warn: array off by one?
        'ndev->hci_dev->pipes[pipe]' '0-127 == 127'
    
    Fixes: 11f54f228643 ("NFC: nci: Add HCI over NCI protocol support")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>

commit 322a57551d0655fc4198d4b131ad77dd171af769
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Apr 3 10:13:51 2019 +0300

    nfc: nci: Potential off by one in ->pipes[] array
    
    [ Upstream commit 6491d698396fd5da4941980a35ca7c162a672016 ]
    
    This is similar to commit e285d5bfb7e9 ("NFC: Fix the number of pipes")
    where we changed NFC_HCI_MAX_PIPES from 127 to 128.
    
    As the comment next to the define explains, the pipe identifier is 7
    bits long.  The highest possible pipe is 127, but the number of possible
    pipes is 128.  As the code is now, then there is potential for an
    out of bounds array access:
    
        net/nfc/nci/hci.c:297 nci_hci_cmd_received() warn: array off by one?
        'ndev->hci_dev->pipes[pipe]' '0-127 == 127'
    
    Fixes: 11f54f228643 ("NFC: nci: Add HCI over NCI protocol support")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>

commit b556db17b0e7c439bb6113b6dc7185bd0b1bbbb4
Author: Masatake YAMATO <yamato@redhat.com>
Date:   Tue May 14 15:45:19 2019 -0700

    eventfd: present id to userspace via fdinfo
    
    Finding endpoints of an IPC channel is one of essential task to
    understand how a user program works.  Procfs and netlink socket provide
    enough hints to find endpoints for IPC channels like pipes, unix
    sockets, and pseudo terminals.  However, there is no simple way to find
    endpoints for an eventfd file from userland.  An inode number doesn't
    hint.  Unlike pipe, all eventfd files share the same inode object.
    
    To provide the way to find endpoints of an eventfd file, this patch adds
    "eventfd-id" field to /proc/PID/fdinfo of eventfd as identifier.
    Integers managed by an IDA are used as ids.
    
    A tool like lsof can utilize the information to print endpoints.
    
    Link: http://lkml.kernel.org/r/20190327181823.20222-1-yamato@redhat.com
    Signed-off-by: Masatake YAMATO <yamato@redhat.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Kees Cook <keescook@chromium.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit e42ae9c9b8640bc05a8ea1e223c7aae17eef3ef2
Author: Kirill Smelkov <kirr@nexedi.com>
Date:   Tue Mar 26 22:20:43 2019 +0000

    fs: stream_open - opener for stream-like files so that read and write can run simultaneously without deadlock
    
    [ Upstream commit 10dce8af34226d90fa56746a934f8da5dcdba3df ]
    
    Commit 9c225f2655e3 ("vfs: atomic f_pos accesses as per POSIX") added
    locking for file.f_pos access and in particular made concurrent read and
    write not possible - now both those functions take f_pos lock for the
    whole run, and so if e.g. a read is blocked waiting for data, write will
    deadlock waiting for that read to complete.
    
    This caused regression for stream-like files where previously read and
    write could run simultaneously, but after that patch could not do so
    anymore. See e.g. commit 581d21a2d02a ("xenbus: fix deadlock on writes
    to /proc/xen/xenbus") which fixes such regression for particular case of
    /proc/xen/xenbus.
    
    The patch that added f_pos lock in 2014 did so to guarantee POSIX thread
    safety for read/write/lseek and added the locking to file descriptors of
    all regular files. In 2014 that thread-safety problem was not new as it
    was already discussed earlier in 2006.
    
    However even though 2006'th version of Linus's patch was adding f_pos
    locking "only for files that are marked seekable with FMODE_LSEEK (thus
    avoiding the stream-like objects like pipes and sockets)", the 2014
    version - the one that actually made it into the tree as 9c225f2655e3 -
    is doing so irregardless of whether a file is seekable or not.
    
    See
    
        https://lore.kernel.org/lkml/53022DB1.4070805@gmail.com/
        https://lwn.net/Articles/180387
        https://lwn.net/Articles/180396
    
    for historic context.
    
    The reason that it did so is, probably, that there are many files that
    are marked non-seekable, but e.g. their read implementation actually
    depends on knowing current position to correctly handle the read. Some
    examples:
    
            kernel/power/user.c             snapshot_read
            fs/debugfs/file.c               u32_array_read
            fs/fuse/control.c               fuse_conn_waiting_read + ...
            drivers/hwmon/asus_atk0110.c    atk_debugfs_ggrp_read
            arch/s390/hypfs/inode.c         hypfs_read_iter
            ...
    
    Despite that, many nonseekable_open users implement read and write with
    pure stream semantics - they don't depend on passed ppos at all. And for
    those cases where read could wait for something inside, it creates a
    situation similar to xenbus - the write could be never made to go until
    read is done, and read is waiting for some, potentially external, event,
    for potentially unbounded time -> deadlock.
    
    Besides xenbus, there are 14 such places in the kernel that I've found
    with semantic patch (see below):
    
            drivers/xen/evtchn.c:667:8-24: ERROR: evtchn_fops: .read() can deadlock .write()
            drivers/isdn/capi/capi.c:963:8-24: ERROR: capi_fops: .read() can deadlock .write()
            drivers/input/evdev.c:527:1-17: ERROR: evdev_fops: .read() can deadlock .write()
            drivers/char/pcmcia/cm4000_cs.c:1685:7-23: ERROR: cm4000_fops: .read() can deadlock .write()
            net/rfkill/core.c:1146:8-24: ERROR: rfkill_fops: .read() can deadlock .write()
            drivers/s390/char/fs3270.c:488:1-17: ERROR: fs3270_fops: .read() can deadlock .write()
            drivers/usb/misc/ldusb.c:310:1-17: ERROR: ld_usb_fops: .read() can deadlock .write()
            drivers/hid/uhid.c:635:1-17: ERROR: uhid_fops: .read() can deadlock .write()
            net/batman-adv/icmp_socket.c:80:1-17: ERROR: batadv_fops: .read() can deadlock .write()
            drivers/media/rc/lirc_dev.c:198:1-17: ERROR: lirc_fops: .read() can deadlock .write()
            drivers/leds/uleds.c:77:1-17: ERROR: uleds_fops: .read() can deadlock .write()
            drivers/input/misc/uinput.c:400:1-17: ERROR: uinput_fops: .read() can deadlock .write()
            drivers/infiniband/core/user_mad.c:985:7-23: ERROR: umad_fops: .read() can deadlock .write()
            drivers/gnss/core.c:45:1-17: ERROR: gnss_fops: .read() can deadlock .write()
    
    In addition to the cases above another regression caused by f_pos
    locking is that now FUSE filesystems that implement open with
    FOPEN_NONSEEKABLE flag, can no longer implement bidirectional
    stream-like files - for the same reason as above e.g. read can deadlock
    write locking on file.f_pos in the kernel.
    
    FUSE's FOPEN_NONSEEKABLE was added in 2008 in a7c1b990f715 ("fuse:
    implement nonseekable open") to support OSSPD. OSSPD implements /dev/dsp
    in userspace with FOPEN_NONSEEKABLE flag, with corresponding read and
    write routines not depending on current position at all, and with both
    read and write being potentially blocking operations:
    
    See
    
        https://github.com/libfuse/osspd
        https://lwn.net/Articles/308445
    
        https://github.com/libfuse/osspd/blob/14a9cff0/osspd.c#L1406
        https://github.com/libfuse/osspd/blob/14a9cff0/osspd.c#L1438-L1477
        https://github.com/libfuse/osspd/blob/14a9cff0/osspd.c#L1479-L1510
    
    Corresponding libfuse example/test also describes FOPEN_NONSEEKABLE as
    "somewhat pipe-like files ..." with read handler not using offset.
    However that test implements only read without write and cannot exercise
    the deadlock scenario:
    
        https://github.com/libfuse/libfuse/blob/fuse-3.4.2-3-ga1bff7d/example/poll.c#L124-L131
        https://github.com/libfuse/libfuse/blob/fuse-3.4.2-3-ga1bff7d/example/poll.c#L146-L163
        https://github.com/libfuse/libfuse/blob/fuse-3.4.2-3-ga1bff7d/example/poll.c#L209-L216
    
    I've actually hit the read vs write deadlock for real while implementing
    my FUSE filesystem where there is /head/watch file, for which open
    creates separate bidirectional socket-like stream in between filesystem
    and its user with both read and write being later performed
    simultaneously. And there it is semantically not easy to split the
    stream into two separate read-only and write-only channels:
    
        https://lab.nexedi.com/kirr/wendelin.core/blob/f13aa600/wcfs/wcfs.go#L88-169
    
    Let's fix this regression. The plan is:
    
    1. We can't change nonseekable_open to include &~FMODE_ATOMIC_POS -
       doing so would break many in-kernel nonseekable_open users which
       actually use ppos in read/write handlers.
    
    2. Add stream_open() to kernel to open stream-like non-seekable file
       descriptors. Read and write on such file descriptors would never use
       nor change ppos. And with that property on stream-like files read and
       write will be running without taking f_pos lock - i.e. read and write
       could be running simultaneously.
    
    3. With semantic patch search and convert to stream_open all in-kernel
       nonseekable_open users for which read and write actually do not
       depend on ppos and where there is no other methods in file_operations
       which assume @offset access.
    
    4. Add FOPEN_STREAM to fs/fuse/ and open in-kernel file-descriptors via
       steam_open if that bit is present in filesystem open reply.
    
       It was tempting to change fs/fuse/ open handler to use stream_open
       instead of nonseekable_open on just FOPEN_NONSEEKABLE flags, but
       grepping through Debian codesearch shows users of FOPEN_NONSEEKABLE,
       and in particular GVFS which actually uses offset in its read and
       write handlers
    
            https://codesearch.debian.net/search?q=-%3Enonseekable+%3D
            https://gitlab.gnome.org/GNOME/gvfs/blob/1.40.0-6-gcbc54396/client/gvfsfusedaemon.c#L1080
            https://gitlab.gnome.org/GNOME/gvfs/blob/1.40.0-6-gcbc54396/client/gvfsfusedaemon.c#L1247-1346
            https://gitlab.gnome.org/GNOME/gvfs/blob/1.40.0-6-gcbc54396/client/gvfsfusedaemon.c#L1399-1481
    
       so if we would do such a change it will break a real user.
    
    5. Add stream_open and FOPEN_STREAM handling to stable kernels starting
       from v3.14+ (the kernel where 9c225f2655 first appeared).
    
       This will allow to patch OSSPD and other FUSE filesystems that
       provide stream-like files to return FOPEN_STREAM | FOPEN_NONSEEKABLE
       in their open handler and this way avoid the deadlock on all kernel
       versions. This should work because fs/fuse/ ignores unknown open
       flags returned from a filesystem and so passing FOPEN_STREAM to a
       kernel that is not aware of this flag cannot hurt. In turn the kernel
       that is not aware of FOPEN_STREAM will be < v3.14 where just
       FOPEN_NONSEEKABLE is sufficient to implement streams without read vs
       write deadlock.
    
    This patch adds stream_open, converts /proc/xen/xenbus to it and adds
    semantic patch to automatically locate in-kernel places that are either
    required to be converted due to read vs write deadlock, or that are just
    safe to be converted because read and write do not use ppos and there
    are no other funky methods in file_operations.
    
    Regarding semantic patch I've verified each generated change manually -
    that it is correct to convert - and each other nonseekable_open instance
    left - that it is either not correct to convert there, or that it is not
    converted due to current stream_open.cocci limitations.
    
    The script also does not convert files that should be valid to convert,
    but that currently have .llseek = noop_llseek or generic_file_llseek for
    unknown reason despite file being opened with nonseekable_open (e.g.
    drivers/input/mousedev.c)
    
    Cc: Michael Kerrisk <mtk.manpages@gmail.com>
    Cc: Yongzhi Pan <panyongzhi@gmail.com>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: David Vrabel <david.vrabel@citrix.com>
    Cc: Juergen Gross <jgross@suse.com>
    Cc: Miklos Szeredi <miklos@szeredi.hu>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Kirill Tkhai <ktkhai@virtuozzo.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Julia Lawall <Julia.Lawall@lip6.fr>
    Cc: Nikolaus Rath <Nikolaus@rath.org>
    Cc: Han-Wen Nienhuys <hanwen@google.com>
    Signed-off-by: Kirill Smelkov <kirr@nexedi.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin (Microsoft) <sashal@kernel.org>

commit 04b4d5f75ab04858a9b6dff94d74e4fdf0b9f194
Author: Kirill Smelkov <kirr@nexedi.com>
Date:   Tue Mar 26 22:20:43 2019 +0000

    fs: stream_open - opener for stream-like files so that read and write can run simultaneously without deadlock
    
    [ Upstream commit 10dce8af34226d90fa56746a934f8da5dcdba3df ]
    
    Commit 9c225f2655e3 ("vfs: atomic f_pos accesses as per POSIX") added
    locking for file.f_pos access and in particular made concurrent read and
    write not possible - now both those functions take f_pos lock for the
    whole run, and so if e.g. a read is blocked waiting for data, write will
    deadlock waiting for that read to complete.
    
    This caused regression for stream-like files where previously read and
    write could run simultaneously, but after that patch could not do so
    anymore. See e.g. commit 581d21a2d02a ("xenbus: fix deadlock on writes
    to /proc/xen/xenbus") which fixes such regression for particular case of
    /proc/xen/xenbus.
    
    The patch that added f_pos lock in 2014 did so to guarantee POSIX thread
    safety for read/write/lseek and added the locking to file descriptors of
    all regular files. In 2014 that thread-safety problem was not new as it
    was already discussed earlier in 2006.
    
    However even though 2006'th version of Linus's patch was adding f_pos
    locking "only for files that are marked seekable with FMODE_LSEEK (thus
    avoiding the stream-like objects like pipes and sockets)", the 2014
    version - the one that actually made it into the tree as 9c225f2655e3 -
    is doing so irregardless of whether a file is seekable or not.
    
    See
    
        https://lore.kernel.org/lkml/53022DB1.4070805@gmail.com/
        https://lwn.net/Articles/180387
        https://lwn.net/Articles/180396
    
    for historic context.
    
    The reason that it did so is, probably, that there are many files that
    are marked non-seekable, but e.g. their read implementation actually
    depends on knowing current position to correctly handle the read. Some
    examples:
    
            kernel/power/user.c             snapshot_read
            fs/debugfs/file.c               u32_array_read
            fs/fuse/control.c               fuse_conn_waiting_read + ...
            drivers/hwmon/asus_atk0110.c    atk_debugfs_ggrp_read
            arch/s390/hypfs/inode.c         hypfs_read_iter
            ...
    
    Despite that, many nonseekable_open users implement read and write with
    pure stream semantics - they don't depend on passed ppos at all. And for
    those cases where read could wait for something inside, it creates a
    situation similar to xenbus - the write could be never made to go until
    read is done, and read is waiting for some, potentially external, event,
    for potentially unbounded time -> deadlock.
    
    Besides xenbus, there are 14 such places in the kernel that I've found
    with semantic patch (see below):
    
            drivers/xen/evtchn.c:667:8-24: ERROR: evtchn_fops: .read() can deadlock .write()
            drivers/isdn/capi/capi.c:963:8-24: ERROR: capi_fops: .read() can deadlock .write()
            drivers/input/evdev.c:527:1-17: ERROR: evdev_fops: .read() can deadlock .write()
            drivers/char/pcmcia/cm4000_cs.c:1685:7-23: ERROR: cm4000_fops: .read() can deadlock .write()
            net/rfkill/core.c:1146:8-24: ERROR: rfkill_fops: .read() can deadlock .write()
            drivers/s390/char/fs3270.c:488:1-17: ERROR: fs3270_fops: .read() can deadlock .write()
            drivers/usb/misc/ldusb.c:310:1-17: ERROR: ld_usb_fops: .read() can deadlock .write()
            drivers/hid/uhid.c:635:1-17: ERROR: uhid_fops: .read() can deadlock .write()
            net/batman-adv/icmp_socket.c:80:1-17: ERROR: batadv_fops: .read() can deadlock .write()
            drivers/media/rc/lirc_dev.c:198:1-17: ERROR: lirc_fops: .read() can deadlock .write()
            drivers/leds/uleds.c:77:1-17: ERROR: uleds_fops: .read() can deadlock .write()
            drivers/input/misc/uinput.c:400:1-17: ERROR: uinput_fops: .read() can deadlock .write()
            drivers/infiniband/core/user_mad.c:985:7-23: ERROR: umad_fops: .read() can deadlock .write()
            drivers/gnss/core.c:45:1-17: ERROR: gnss_fops: .read() can deadlock .write()
    
    In addition to the cases above another regression caused by f_pos
    locking is that now FUSE filesystems that implement open with
    FOPEN_NONSEEKABLE flag, can no longer implement bidirectional
    stream-like files - for the same reason as above e.g. read can deadlock
    write locking on file.f_pos in the kernel.
    
    FUSE's FOPEN_NONSEEKABLE was added in 2008 in a7c1b990f715 ("fuse:
    implement nonseekable open") to support OSSPD. OSSPD implements /dev/dsp
    in userspace with FOPEN_NONSEEKABLE flag, with corresponding read and
    write routines not depending on current position at all, and with both
    read and write being potentially blocking operations:
    
    See
    
        https://github.com/libfuse/osspd
        https://lwn.net/Articles/308445
    
        https://github.com/libfuse/osspd/blob/14a9cff0/osspd.c#L1406
        https://github.com/libfuse/osspd/blob/14a9cff0/osspd.c#L1438-L1477
        https://github.com/libfuse/osspd/blob/14a9cff0/osspd.c#L1479-L1510
    
    Corresponding libfuse example/test also describes FOPEN_NONSEEKABLE as
    "somewhat pipe-like files ..." with read handler not using offset.
    However that test implements only read without write and cannot exercise
    the deadlock scenario:
    
        https://github.com/libfuse/libfuse/blob/fuse-3.4.2-3-ga1bff7d/example/poll.c#L124-L131
        https://github.com/libfuse/libfuse/blob/fuse-3.4.2-3-ga1bff7d/example/poll.c#L146-L163
        https://github.com/libfuse/libfuse/blob/fuse-3.4.2-3-ga1bff7d/example/poll.c#L209-L216
    
    I've actually hit the read vs write deadlock for real while implementing
    my FUSE filesystem where there is /head/watch file, for which open
    creates separate bidirectional socket-like stream in between filesystem
    and its user with both read and write being later performed
    simultaneously. And there it is semantically not easy to split the
    stream into two separate read-only and write-only channels:
    
        https://lab.nexedi.com/kirr/wendelin.core/blob/f13aa600/wcfs/wcfs.go#L88-169
    
    Let's fix this regression. The plan is:
    
    1. We can't change nonseekable_open to include &~FMODE_ATOMIC_POS -
       doing so would break many in-kernel nonseekable_open users which
       actually use ppos in read/write handlers.
    
    2. Add stream_open() to kernel to open stream-like non-seekable file
       descriptors. Read and write on such file descriptors would never use
       nor change ppos. And with that property on stream-like files read and
       write will be running without taking f_pos lock - i.e. read and write
       could be running simultaneously.
    
    3. With semantic patch search and convert to stream_open all in-kernel
       nonseekable_open users for which read and write actually do not
       depend on ppos and where there is no other methods in file_operations
       which assume @offset access.
    
    4. Add FOPEN_STREAM to fs/fuse/ and open in-kernel file-descriptors via
       steam_open if that bit is present in filesystem open reply.
    
       It was tempting to change fs/fuse/ open handler to use stream_open
       instead of nonseekable_open on just FOPEN_NONSEEKABLE flags, but
       grepping through Debian codesearch shows users of FOPEN_NONSEEKABLE,
       and in particular GVFS which actually uses offset in its read and
       write handlers
    
            https://codesearch.debian.net/search?q=-%3Enonseekable+%3D
            https://gitlab.gnome.org/GNOME/gvfs/blob/1.40.0-6-gcbc54396/client/gvfsfusedaemon.c#L1080
            https://gitlab.gnome.org/GNOME/gvfs/blob/1.40.0-6-gcbc54396/client/gvfsfusedaemon.c#L1247-1346
            https://gitlab.gnome.org/GNOME/gvfs/blob/1.40.0-6-gcbc54396/client/gvfsfusedaemon.c#L1399-1481
    
       so if we would do such a change it will break a real user.
    
    5. Add stream_open and FOPEN_STREAM handling to stable kernels starting
       from v3.14+ (the kernel where 9c225f2655 first appeared).
    
       This will allow to patch OSSPD and other FUSE filesystems that
       provide stream-like files to return FOPEN_STREAM | FOPEN_NONSEEKABLE
       in their open handler and this way avoid the deadlock on all kernel
       versions. This should work because fs/fuse/ ignores unknown open
       flags returned from a filesystem and so passing FOPEN_STREAM to a
       kernel that is not aware of this flag cannot hurt. In turn the kernel
       that is not aware of FOPEN_STREAM will be < v3.14 where just
       FOPEN_NONSEEKABLE is sufficient to implement streams without read vs
       write deadlock.
    
    This patch adds stream_open, converts /proc/xen/xenbus to it and adds
    semantic patch to automatically locate in-kernel places that are either
    required to be converted due to read vs write deadlock, or that are just
    safe to be converted because read and write do not use ppos and there
    are no other funky methods in file_operations.
    
    Regarding semantic patch I've verified each generated change manually -
    that it is correct to convert - and each other nonseekable_open instance
    left - that it is either not correct to convert there, or that it is not
    converted due to current stream_open.cocci limitations.
    
    The script also does not convert files that should be valid to convert,
    but that currently have .llseek = noop_llseek or generic_file_llseek for
    unknown reason despite file being opened with nonseekable_open (e.g.
    drivers/input/mousedev.c)
    
    Cc: Michael Kerrisk <mtk.manpages@gmail.com>
    Cc: Yongzhi Pan <panyongzhi@gmail.com>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: David Vrabel <david.vrabel@citrix.com>
    Cc: Juergen Gross <jgross@suse.com>
    Cc: Miklos Szeredi <miklos@szeredi.hu>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Kirill Tkhai <ktkhai@virtuozzo.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Julia Lawall <Julia.Lawall@lip6.fr>
    Cc: Nikolaus Rath <Nikolaus@rath.org>
    Cc: Han-Wen Nienhuys <hanwen@google.com>
    Signed-off-by: Kirill Smelkov <kirr@nexedi.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit bc92c06525e5865c94256ef0227bfe870c095823
Author: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
Date:   Thu Apr 4 11:00:53 2019 -0400

    drm/amd/display: Allow commits with no planes active
    
    [Why]
    Many userspace applications (and IGT) seem to expect that most drivers
    can keep a CRTC active and enabled if there are no primary or overlay
    planes.
    
    DC is setup to handle this but only in the case where there are
    absolutely no planes on the CRTC - no primary, cursor, or overlay.
    
    [How]
    Add a check to reject commits that have cursor planes enabled and
    nothing else on CRTCs since we can't handle that. The new helper
    does_crtc_have_active_cursor is used for this.
    
    In atomic commit tail, we need to let DC know that there are zero
    planes enabled when doing stream updates to let it disable and blank
    pipes as appropriate.
    
    Signed-off-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Reviewed-by: David Francis <David.Francis@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit b5e83f6fe1f003f95fcdbde8a3364f776c18d28d
Author: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
Date:   Mon Apr 8 11:18:31 2019 -0400

    drm/amd/display: Split enabling CRTC interrupts into two passes
    
    [Why]
    When disabling all the pipes for a CRTC the page-flip interrupt also
    gets disabled on Raven. We can't re-enable the page-flip interrupt
    unless we give DC at least one active DC plane.
    
    We currently enable interrupts after the call to dc_commit_state since
    there's currently no valid sequence that should disable all the planes
    or re-enable planes for a CRTC without first going through
    dc_commit_state.
    
    If we were to allow for a CRTC to be enabled with no primary plane this
    would not be the case - the call to dc_commit_updates_for_stream would
    enable the planes when going from zero to at least one active plane,
    but manage_dm_interrupts would have been called too early.
    
    This results in a page-flip timeout on any subsequent commits since we
    think the page-flip are now enabled when they're actually disabled.
    
    We need to enable interrupts after the call to
    dc_commit_updates_for_stream.
    
    [How]
    Split enabling interrupts into two passes. One pass before
    dc_commit_updates_for_stream and one after it.
    
    Shifting all the interrupts to be strictly below the call doesn't
    currently work even though it should in theory. We end up queuing
    off the vblank event to be handle by the flip handler before it's
    actually enabled in some cases, particularly:
    
    old_crtc_state->active = false -> new_crtc_state->active = true
    
    The framebuffer states haven't changed and we can technically still
    do a "pageflip" in this case and send back the event.
    
    Signed-off-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Reviewed-by: David Francis <David.Francis@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 8ad278062de4eae53f68ec835c20147efcec81a8
Author: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
Date:   Mon Apr 8 10:37:44 2019 -0400

    drm/amd/display: Disable cursors before disabling planes
    
    [Why]
    We can't do cursor programming after the planes have been disabled
    since there won't be any pipes - leading to lock warnings and the wrong
    cursor state being left in the registers.
    
    When we re-enable the planes after the previous cursor state will also
    remain if we don't have a cursor plane.
    
    [How]
    If we're disabling the planes then do the cursor programming first.
    If we're not disabling the planes then do the cursor programming after.
    
    Introduce the amdgpu_dm_commit_cursors helper to avoid code duplication
    for both of these cases.
    
    Signed-off-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Reviewed-by: David Francis <David.Francis@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit f69e749a49353d96af1a293f56b5b56de59c668a
Author: Alexander Lochmann <alexander.lochmann@tu-dortmund.de>
Date:   Fri Dec 14 11:55:52 2018 +0100

    Abort file_remove_privs() for non-reg. files
    
    file_remove_privs() might be called for non-regular files, e.g.
    blkdev inode. There is no reason to do its job on things
    like blkdev inodes, pipes, or cdevs. Hence, abort if
    file does not refer to a regular inode.
    
    AV: more to the point, for devices there might be any number of
    inodes refering to given device.  Which one to strip the permissions
    from, even if that made any sense in the first place?  All of them
    will be observed with contents modified, after all.
    
    Found by LockDoc (Alexander Lochmann, Horst Schirmeier and Olaf
    Spinczyk)
    
    Reviewed-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Alexander Lochmann <alexander.lochmann@tu-dortmund.de>
    Signed-off-by: Horst Schirmeier <horst.schirmeier@tu-dortmund.de>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit 5aa94a5b5641a3c2200be00c8bd9cc48ed5f6640
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Apr 3 10:13:51 2019 +0300

    nfc: nci: Potential off by one in ->pipes[] array
    
    [ Upstream commit 6491d698396fd5da4941980a35ca7c162a672016 ]
    
    This is similar to commit e285d5bfb7e9 ("NFC: Fix the number of pipes")
    where we changed NFC_HCI_MAX_PIPES from 127 to 128.
    
    As the comment next to the define explains, the pipe identifier is 7
    bits long.  The highest possible pipe is 127, but the number of possible
    pipes is 128.  As the code is now, then there is potential for an
    out of bounds array access:
    
        net/nfc/nci/hci.c:297 nci_hci_cmd_received() warn: array off by one?
        'ndev->hci_dev->pipes[pipe]' '0-127 == 127'
    
    Fixes: 11f54f228643 ("NFC: nci: Add HCI over NCI protocol support")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 41629f02c604546e24a911413b99cd9d80e842db
Author: Anthony Koo <Anthony.Koo@amd.com>
Date:   Wed Apr 3 16:59:56 2019 -0400

    drm/amd/display: Allow system to enter stutter on init
    
    [Why]
    Workaround was missing in one HW disable path,
    meaning when all pipes are power gated, stutter was
    not working
    
    [How]
    Add workaround for init_hw path for stutter
    workaround
    
    Signed-off-by: Anthony Koo <Anthony.Koo@amd.com>
    Reviewed-by: Aric Cyr <Aric.Cyr@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 09ded8af57bcef7287b8242087d3e7556380de62
Author: Noralf Trønnes <noralf@tronnes.org>
Date:   Sun Apr 7 18:52:34 2019 +0200

    drm/i915/fbdev: Move intel_fb_initial_config() to fbdev helper
    
    It is generic code and having it in the helper will let other drivers
    benefit from it.
    
    One change was necessary assuming this to be true:
    INTEL_INFO(dev_priv)->num_pipes == dev->mode_config.num_crtc
    
    Suggested-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: Jani Nikula <jani.nikula@linux.intel.com>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Cc: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Cc: intel-gfx@lists.freedesktop.org
    Signed-off-by: Noralf Trønnes <noralf@tronnes.org>
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190407165243.54043-4-noralf@tronnes.org

commit c7e557ab46a7395fd28936c24e12e06f1841279c
Author: Leo Li <sunpeng.li@amd.com>
Date:   Wed Mar 20 09:52:14 2019 -0400

    drm/amd/display: Clean up locking in dcn*_apply_ctx_for_surface()
    
    [Why]
    
    dcn*_disable_plane() doesn't unlock the pipe anymore, making the extra
    lock unnecessary.
    
    In addition - during full plane updates - all necessary pipes should be
    locked/unlocked together when modifying hubp to avoid tearing in
    pipesplit setups.
    
    [How]
    
    Remove redundant locks, and add function to lock all pipes. If an
    interdependent pipe update is required, lock down all pipes. Otherwise,
    lock only the top pipe for the updated pipe tree.
    
    Signed-off-by: Leo Li <sunpeng.li@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Nicholas Kazlauskas <Nicholas.Kazlauskas@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 5467a68cbf6884c9a9d91e2a89140afb1839c835
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Fri Mar 15 22:23:19 2019 -0400

    dcache: sort the freeing-without-RCU-delay mess for good.
    
    For lockless accesses to dentries we don't have pinned we rely
    (among other things) upon having an RCU delay between dropping
    the last reference and actually freeing the memory.
    
    On the other hand, for things like pipes and sockets we neither
    do that kind of lockless access, nor want to deal with the
    overhead of an RCU delay every time a socket gets closed.
    
    So delay was made optional - setting DCACHE_RCUACCESS in ->d_flags
    made sure it would happen.  We tried to avoid setting it unless
    we knew we need it.  Unfortunately, that had led to recurring
    class of bugs, in which we missed the need to set it.
    
    We only really need it for dentries that are created by
    d_alloc_pseudo(), so let's not bother with trying to be smart -
    just make having an RCU delay the default.  The ones that do
    *not* get it set the replacement flag (DCACHE_NORCU) and we'd
    better use that sparingly.  d_alloc_pseudo() is the only
    such user right now.
    
    FWIW, the race that finally prompted that switch had been
    between __lock_parent() of immediate subdirectory of what's
    currently the root of a disconnected tree (e.g. from
    open-by-handle in progress) racing with d_splice_alias()
    elsewhere picking another alias for the same inode, either
    on outright corrupted fs image, or (in case of open-by-handle
    on NFS) that subdirectory having been just moved on server.
    It's not easy to hit, so the sky is not falling, but that's
    not the first race on similar missed cases and the logics
    for settinf DCACHE_RCUACCESS has gotten ridiculously
    convoluted.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit 869e3305f23dfeacdaa234717c92ccb237815d90
Merge: a556810d8e06 e063f4598249
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 8 17:10:46 2019 -1000

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net
    
    Pull networking fixes from David Miller:
    
     1) Off by one and bounds checking fixes in NFC, from Dan Carpenter.
    
     2) There have been many weird regressions in r8169 since we turned ASPM
        support on, some are still not understood nor completely resolved.
        Let's turn this back off for now. From Heiner Kallweit.
    
     3) Signess fixes for ethtool speed value handling, from Michael
        Zhivich.
    
     4) Handle timestamps properly in macb driver, from Paul Thomas.
    
     5) Two erspan fixes, it's the usual "skb ->data potentially reallocated
        and we're holding a stale protocol header pointer". From Lorenzo
        Bianconi.
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net:
      bnxt_en: Reset device on RX buffer errors.
      bnxt_en: Improve RX consumer index validity check.
      net: macb driver, check for SKBTX_HW_TSTAMP
      qlogic: qlcnic: fix use of SPEED_UNKNOWN ethtool constant
      broadcom: tg3: fix use of SPEED_UNKNOWN ethtool constant
      ethtool: avoid signed-unsigned comparison in ethtool_validate_speed()
      net: ip6_gre: fix possible use-after-free in ip6erspan_rcv
      net: ip_gre: fix possible use-after-free in erspan_rcv
      r8169: disable ASPM again
      MAINTAINERS: ieee802154: update documentation file pattern
      net: vrf: Fix ping failed when vrf mtu is set to 0
      selftests: add a tc matchall test case
      nfc: nci: Potential off by one in ->pipes[] array
      NFC: nci: Add some bounds checking in nci_hci_cmd_received()

commit 6491d698396fd5da4941980a35ca7c162a672016
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Wed Apr 3 10:13:51 2019 +0300

    nfc: nci: Potential off by one in ->pipes[] array
    
    This is similar to commit e285d5bfb7e9 ("NFC: Fix the number of pipes")
    where we changed NFC_HCI_MAX_PIPES from 127 to 128.
    
    As the comment next to the define explains, the pipe identifier is 7
    bits long.  The highest possible pipe is 127, but the number of possible
    pipes is 128.  As the code is now, then there is potential for an
    out of bounds array access:
    
        net/nfc/nci/hci.c:297 nci_hci_cmd_received() warn: array off by one?
        'ndev->hci_dev->pipes[pipe]' '0-127 == 127'
    
    Fixes: 11f54f228643 ("NFC: nci: Add HCI over NCI protocol support")
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 10dce8af34226d90fa56746a934f8da5dcdba3df
Author: Kirill Smelkov <kirr@nexedi.com>
Date:   Tue Mar 26 22:20:43 2019 +0000

    fs: stream_open - opener for stream-like files so that read and write can run simultaneously without deadlock
    
    Commit 9c225f2655e3 ("vfs: atomic f_pos accesses as per POSIX") added
    locking for file.f_pos access and in particular made concurrent read and
    write not possible - now both those functions take f_pos lock for the
    whole run, and so if e.g. a read is blocked waiting for data, write will
    deadlock waiting for that read to complete.
    
    This caused regression for stream-like files where previously read and
    write could run simultaneously, but after that patch could not do so
    anymore. See e.g. commit 581d21a2d02a ("xenbus: fix deadlock on writes
    to /proc/xen/xenbus") which fixes such regression for particular case of
    /proc/xen/xenbus.
    
    The patch that added f_pos lock in 2014 did so to guarantee POSIX thread
    safety for read/write/lseek and added the locking to file descriptors of
    all regular files. In 2014 that thread-safety problem was not new as it
    was already discussed earlier in 2006.
    
    However even though 2006'th version of Linus's patch was adding f_pos
    locking "only for files that are marked seekable with FMODE_LSEEK (thus
    avoiding the stream-like objects like pipes and sockets)", the 2014
    version - the one that actually made it into the tree as 9c225f2655e3 -
    is doing so irregardless of whether a file is seekable or not.
    
    See
    
        https://lore.kernel.org/lkml/53022DB1.4070805@gmail.com/
        https://lwn.net/Articles/180387
        https://lwn.net/Articles/180396
    
    for historic context.
    
    The reason that it did so is, probably, that there are many files that
    are marked non-seekable, but e.g. their read implementation actually
    depends on knowing current position to correctly handle the read. Some
    examples:
    
            kernel/power/user.c             snapshot_read
            fs/debugfs/file.c               u32_array_read
            fs/fuse/control.c               fuse_conn_waiting_read + ...
            drivers/hwmon/asus_atk0110.c    atk_debugfs_ggrp_read
            arch/s390/hypfs/inode.c         hypfs_read_iter
            ...
    
    Despite that, many nonseekable_open users implement read and write with
    pure stream semantics - they don't depend on passed ppos at all. And for
    those cases where read could wait for something inside, it creates a
    situation similar to xenbus - the write could be never made to go until
    read is done, and read is waiting for some, potentially external, event,
    for potentially unbounded time -> deadlock.
    
    Besides xenbus, there are 14 such places in the kernel that I've found
    with semantic patch (see below):
    
            drivers/xen/evtchn.c:667:8-24: ERROR: evtchn_fops: .read() can deadlock .write()
            drivers/isdn/capi/capi.c:963:8-24: ERROR: capi_fops: .read() can deadlock .write()
            drivers/input/evdev.c:527:1-17: ERROR: evdev_fops: .read() can deadlock .write()
            drivers/char/pcmcia/cm4000_cs.c:1685:7-23: ERROR: cm4000_fops: .read() can deadlock .write()
            net/rfkill/core.c:1146:8-24: ERROR: rfkill_fops: .read() can deadlock .write()
            drivers/s390/char/fs3270.c:488:1-17: ERROR: fs3270_fops: .read() can deadlock .write()
            drivers/usb/misc/ldusb.c:310:1-17: ERROR: ld_usb_fops: .read() can deadlock .write()
            drivers/hid/uhid.c:635:1-17: ERROR: uhid_fops: .read() can deadlock .write()
            net/batman-adv/icmp_socket.c:80:1-17: ERROR: batadv_fops: .read() can deadlock .write()
            drivers/media/rc/lirc_dev.c:198:1-17: ERROR: lirc_fops: .read() can deadlock .write()
            drivers/leds/uleds.c:77:1-17: ERROR: uleds_fops: .read() can deadlock .write()
            drivers/input/misc/uinput.c:400:1-17: ERROR: uinput_fops: .read() can deadlock .write()
            drivers/infiniband/core/user_mad.c:985:7-23: ERROR: umad_fops: .read() can deadlock .write()
            drivers/gnss/core.c:45:1-17: ERROR: gnss_fops: .read() can deadlock .write()
    
    In addition to the cases above another regression caused by f_pos
    locking is that now FUSE filesystems that implement open with
    FOPEN_NONSEEKABLE flag, can no longer implement bidirectional
    stream-like files - for the same reason as above e.g. read can deadlock
    write locking on file.f_pos in the kernel.
    
    FUSE's FOPEN_NONSEEKABLE was added in 2008 in a7c1b990f715 ("fuse:
    implement nonseekable open") to support OSSPD. OSSPD implements /dev/dsp
    in userspace with FOPEN_NONSEEKABLE flag, with corresponding read and
    write routines not depending on current position at all, and with both
    read and write being potentially blocking operations:
    
    See
    
        https://github.com/libfuse/osspd
        https://lwn.net/Articles/308445
    
        https://github.com/libfuse/osspd/blob/14a9cff0/osspd.c#L1406
        https://github.com/libfuse/osspd/blob/14a9cff0/osspd.c#L1438-L1477
        https://github.com/libfuse/osspd/blob/14a9cff0/osspd.c#L1479-L1510
    
    Corresponding libfuse example/test also describes FOPEN_NONSEEKABLE as
    "somewhat pipe-like files ..." with read handler not using offset.
    However that test implements only read without write and cannot exercise
    the deadlock scenario:
    
        https://github.com/libfuse/libfuse/blob/fuse-3.4.2-3-ga1bff7d/example/poll.c#L124-L131
        https://github.com/libfuse/libfuse/blob/fuse-3.4.2-3-ga1bff7d/example/poll.c#L146-L163
        https://github.com/libfuse/libfuse/blob/fuse-3.4.2-3-ga1bff7d/example/poll.c#L209-L216
    
    I've actually hit the read vs write deadlock for real while implementing
    my FUSE filesystem where there is /head/watch file, for which open
    creates separate bidirectional socket-like stream in between filesystem
    and its user with both read and write being later performed
    simultaneously. And there it is semantically not easy to split the
    stream into two separate read-only and write-only channels:
    
        https://lab.nexedi.com/kirr/wendelin.core/blob/f13aa600/wcfs/wcfs.go#L88-169
    
    Let's fix this regression. The plan is:
    
    1. We can't change nonseekable_open to include &~FMODE_ATOMIC_POS -
       doing so would break many in-kernel nonseekable_open users which
       actually use ppos in read/write handlers.
    
    2. Add stream_open() to kernel to open stream-like non-seekable file
       descriptors. Read and write on such file descriptors would never use
       nor change ppos. And with that property on stream-like files read and
       write will be running without taking f_pos lock - i.e. read and write
       could be running simultaneously.
    
    3. With semantic patch search and convert to stream_open all in-kernel
       nonseekable_open users for which read and write actually do not
       depend on ppos and where there is no other methods in file_operations
       which assume @offset access.
    
    4. Add FOPEN_STREAM to fs/fuse/ and open in-kernel file-descriptors via
       steam_open if that bit is present in filesystem open reply.
    
       It was tempting to change fs/fuse/ open handler to use stream_open
       instead of nonseekable_open on just FOPEN_NONSEEKABLE flags, but
       grepping through Debian codesearch shows users of FOPEN_NONSEEKABLE,
       and in particular GVFS which actually uses offset in its read and
       write handlers
    
            https://codesearch.debian.net/search?q=-%3Enonseekable+%3D
            https://gitlab.gnome.org/GNOME/gvfs/blob/1.40.0-6-gcbc54396/client/gvfsfusedaemon.c#L1080
            https://gitlab.gnome.org/GNOME/gvfs/blob/1.40.0-6-gcbc54396/client/gvfsfusedaemon.c#L1247-1346
            https://gitlab.gnome.org/GNOME/gvfs/blob/1.40.0-6-gcbc54396/client/gvfsfusedaemon.c#L1399-1481
    
       so if we would do such a change it will break a real user.
    
    5. Add stream_open and FOPEN_STREAM handling to stable kernels starting
       from v3.14+ (the kernel where 9c225f2655 first appeared).
    
       This will allow to patch OSSPD and other FUSE filesystems that
       provide stream-like files to return FOPEN_STREAM | FOPEN_NONSEEKABLE
       in their open handler and this way avoid the deadlock on all kernel
       versions. This should work because fs/fuse/ ignores unknown open
       flags returned from a filesystem and so passing FOPEN_STREAM to a
       kernel that is not aware of this flag cannot hurt. In turn the kernel
       that is not aware of FOPEN_STREAM will be < v3.14 where just
       FOPEN_NONSEEKABLE is sufficient to implement streams without read vs
       write deadlock.
    
    This patch adds stream_open, converts /proc/xen/xenbus to it and adds
    semantic patch to automatically locate in-kernel places that are either
    required to be converted due to read vs write deadlock, or that are just
    safe to be converted because read and write do not use ppos and there
    are no other funky methods in file_operations.
    
    Regarding semantic patch I've verified each generated change manually -
    that it is correct to convert - and each other nonseekable_open instance
    left - that it is either not correct to convert there, or that it is not
    converted due to current stream_open.cocci limitations.
    
    The script also does not convert files that should be valid to convert,
    but that currently have .llseek = noop_llseek or generic_file_llseek for
    unknown reason despite file being opened with nonseekable_open (e.g.
    drivers/input/mousedev.c)
    
    Cc: Michael Kerrisk <mtk.manpages@gmail.com>
    Cc: Yongzhi Pan <panyongzhi@gmail.com>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: David Vrabel <david.vrabel@citrix.com>
    Cc: Juergen Gross <jgross@suse.com>
    Cc: Miklos Szeredi <miklos@szeredi.hu>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Kirill Tkhai <ktkhai@virtuozzo.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: Julia Lawall <Julia.Lawall@lip6.fr>
    Cc: Nikolaus Rath <Nikolaus@rath.org>
    Cc: Han-Wen Nienhuys <hanwen@google.com>
    Signed-off-by: Kirill Smelkov <kirr@nexedi.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit c0415c8722a43aa3f97f24ab54334107c34f9290
Author: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
Date:   Fri Mar 15 13:59:25 2019 -0400

    drm/amd/display: fix odm output gamma programming
    
    Currently only top pipe gets output tf programmed. This change
    makes all odm head pipes get output tf programmed.
    
    Signed-off-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Reviewed-by: Nikola Cornij <Nikola.Cornij@amd.com>
    Acked-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit ef02f9fe514878336f2440d4b0d06d2bd04096ee
Author: Jann Horn <jannh@google.com>
Date:   Wed Jan 23 15:19:17 2019 +0100

    splice: don't merge into linked buffers
    
    commit a0ce2f0aa6ad97c3d4927bf2ca54bcebdf062d55 upstream.
    
    Before this patch, it was possible for two pipes to affect each other after
    data had been transferred between them with tee():
    
    ============
    $ cat tee_test.c
    
    int main(void) {
      int pipe_a[2];
      if (pipe(pipe_a)) err(1, "pipe");
      int pipe_b[2];
      if (pipe(pipe_b)) err(1, "pipe");
      if (write(pipe_a[1], "abcd", 4) != 4) err(1, "write");
      if (tee(pipe_a[0], pipe_b[1], 2, 0) != 2) err(1, "tee");
      if (write(pipe_b[1], "xx", 2) != 2) err(1, "write");
    
      char buf[5];
      if (read(pipe_a[0], buf, 4) != 4) err(1, "read");
      buf[4] = 0;
      printf("got back: '%s'\n", buf);
    }
    $ gcc -o tee_test tee_test.c
    $ ./tee_test
    got back: 'abxx'
    $
    ============
    
    As suggested by Al Viro, fix it by creating a separate type for
    non-mergeable pipe buffers, then changing the types of buffers in
    splice_pipe_to_pipe() and link_pipe().
    
    Cc: <stable@vger.kernel.org>
    Fixes: 7c77f0b3f920 ("splice: implement pipe to pipe splicing")
    Fixes: 70524490ee2e ("[PATCH] splice: add support for sys_tee()")
    Suggested-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2af926fd52fc287a92fc782ce074f349d86966aa
Author: Jann Horn <jannh@google.com>
Date:   Wed Jan 23 15:19:17 2019 +0100

    splice: don't merge into linked buffers
    
    commit a0ce2f0aa6ad97c3d4927bf2ca54bcebdf062d55 upstream.
    
    Before this patch, it was possible for two pipes to affect each other after
    data had been transferred between them with tee():
    
    ============
    $ cat tee_test.c
    
    int main(void) {
      int pipe_a[2];
      if (pipe(pipe_a)) err(1, "pipe");
      int pipe_b[2];
      if (pipe(pipe_b)) err(1, "pipe");
      if (write(pipe_a[1], "abcd", 4) != 4) err(1, "write");
      if (tee(pipe_a[0], pipe_b[1], 2, 0) != 2) err(1, "tee");
      if (write(pipe_b[1], "xx", 2) != 2) err(1, "write");
    
      char buf[5];
      if (read(pipe_a[0], buf, 4) != 4) err(1, "read");
      buf[4] = 0;
      printf("got back: '%s'\n", buf);
    }
    $ gcc -o tee_test tee_test.c
    $ ./tee_test
    got back: 'abxx'
    $
    ============
    
    As suggested by Al Viro, fix it by creating a separate type for
    non-mergeable pipe buffers, then changing the types of buffers in
    splice_pipe_to_pipe() and link_pipe().
    
    Cc: <stable@vger.kernel.org>
    Fixes: 7c77f0b3f920 ("splice: implement pipe to pipe splicing")
    Fixes: 70524490ee2e ("[PATCH] splice: add support for sys_tee()")
    Suggested-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1bdc347e64e359e4383a08fdc8ed9f9a3ccb4a8d
Author: Jann Horn <jannh@google.com>
Date:   Wed Jan 23 15:19:17 2019 +0100

    splice: don't merge into linked buffers
    
    commit a0ce2f0aa6ad97c3d4927bf2ca54bcebdf062d55 upstream.
    
    Before this patch, it was possible for two pipes to affect each other after
    data had been transferred between them with tee():
    
    ============
    $ cat tee_test.c
    
    int main(void) {
      int pipe_a[2];
      if (pipe(pipe_a)) err(1, "pipe");
      int pipe_b[2];
      if (pipe(pipe_b)) err(1, "pipe");
      if (write(pipe_a[1], "abcd", 4) != 4) err(1, "write");
      if (tee(pipe_a[0], pipe_b[1], 2, 0) != 2) err(1, "tee");
      if (write(pipe_b[1], "xx", 2) != 2) err(1, "write");
    
      char buf[5];
      if (read(pipe_a[0], buf, 4) != 4) err(1, "read");
      buf[4] = 0;
      printf("got back: '%s'\n", buf);
    }
    $ gcc -o tee_test tee_test.c
    $ ./tee_test
    got back: 'abxx'
    $
    ============
    
    As suggested by Al Viro, fix it by creating a separate type for
    non-mergeable pipe buffers, then changing the types of buffers in
    splice_pipe_to_pipe() and link_pipe().
    
    Cc: <stable@vger.kernel.org>
    Fixes: 7c77f0b3f920 ("splice: implement pipe to pipe splicing")
    Fixes: 70524490ee2e ("[PATCH] splice: add support for sys_tee()")
    Suggested-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 943ebf4d8c50dcbd474483b023955f4716e0c5bb
Author: Jann Horn <jannh@google.com>
Date:   Wed Jan 23 15:19:17 2019 +0100

    splice: don't merge into linked buffers
    
    commit a0ce2f0aa6ad97c3d4927bf2ca54bcebdf062d55 upstream.
    
    Before this patch, it was possible for two pipes to affect each other after
    data had been transferred between them with tee():
    
    ============
    $ cat tee_test.c
    
    int main(void) {
      int pipe_a[2];
      if (pipe(pipe_a)) err(1, "pipe");
      int pipe_b[2];
      if (pipe(pipe_b)) err(1, "pipe");
      if (write(pipe_a[1], "abcd", 4) != 4) err(1, "write");
      if (tee(pipe_a[0], pipe_b[1], 2, 0) != 2) err(1, "tee");
      if (write(pipe_b[1], "xx", 2) != 2) err(1, "write");
    
      char buf[5];
      if (read(pipe_a[0], buf, 4) != 4) err(1, "read");
      buf[4] = 0;
      printf("got back: '%s'\n", buf);
    }
    $ gcc -o tee_test tee_test.c
    $ ./tee_test
    got back: 'abxx'
    $
    ============
    
    As suggested by Al Viro, fix it by creating a separate type for
    non-mergeable pipe buffers, then changing the types of buffers in
    splice_pipe_to_pipe() and link_pipe().
    
    Cc: <stable@vger.kernel.org>
    Fixes: 7c77f0b3f920 ("splice: implement pipe to pipe splicing")
    Fixes: 70524490ee2e ("[PATCH] splice: add support for sys_tee()")
    Suggested-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 29f3863d33d1e2ad6c87fe64a61538041bd965bd
Author: James Ausmus <james.ausmus@intel.com>
Date:   Fri Mar 22 10:58:42 2019 -0700

    drm/i915/ehl: Add EHL platform info and PCI IDs
    
    Add known EHL PCI IDs.
    
    v2 (Rodrigo): Removed x86 early quirk. To be sent in a separated
                  patch cc'ing the appropriated list and maintainers for
                  proper ack.
    v3: (Rodrigo): - Removed .num_pipes = 3 that is coming since GEN&_FEATURES.
                   - Added ppgtt type and size after rework from Bob and Chris
    v4: (Rodrigo): - remove ppgtt type added on v3. Jose pointed it is not
                     needed.
    
    Cc: Bob Paauwe <bob.j.paauwe@intel.com>
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: José Roberto de Souza <jose.souza@intel.com>
    Signed-off-by: James Ausmus <james.ausmus@intel.com>
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Reviewed-by: Bob Paauwe <bob.j.paauwe@intel.com>
    Reviewed-by: José Roberto de Souza <jose.souza@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190322175847.25707-1-rodrigo.vivi@intel.com

commit bc2193992b00488f5734613ac95b78ef2d2803ab
Author: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
Date:   Thu Mar 7 13:26:13 2019 -0500

    drm/amd/display: fix releasing planes when exiting odm
    
    Releasing planes should not release the 2nd odm pipe right away,
    this change leaves us with 2 pipes with null planes and same stream
    when planes are released during odm.
    
    Signed-off-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 0d579c7e25f514bc6e6db0a5e03d827718c1e4ac
Author: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
Date:   Fri Jan 18 13:57:14 2019 -0500

    drm/amd/display: Create overlay planes
    
    [Why]
    Raven has support for combining pipes for DRM_PLANE_TYPE_OVERLAY use
    but no overlays are exposed to userspace.
    
    [How]
    Expose overlay planes based on DC plane caps.
    
    If all the pipes are in use then the atomic commits can fail, but this
    is expected behavior for userspace.
    
    Only support RGB on overlays for now.
    
    Signed-off-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit e5c419709097e77e7f14a751591ea05f04cf5570
Author: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
Date:   Tue Feb 5 12:50:01 2019 -0500

    drm/amd/display: Add plane capabilities to dc_caps
    
    [Why]
    The current dc_caps doesn't provide the information needed to
    determine the count and type of each plane to be exposed to userspace.
    
    There are three types of DRM planes that are exposed to userspace:
    
    1. Primary planes (can be used for modesetting)
    2. Overlay planes (can be blended below or above a primary plane)
    3. Cursor planes (blended topmost)
    
    We need to know the number and type of each in amdgpu_dm to expose
    to userspace.
    
    Hardware supports blending planes below, above or both ways depending
    on the ASIC. Alpha support is also ASIC dependent. Some hardware has
    dedicated pipes for overlays and other hardware combines the pipes.
    
    All of this should be exposed in a way that DM can query and use.
    
    [How]
    Introduce the dc_plane_cap structure that describes the capabilities
    for the hw planes.
    
    It describes:
    - the type of the plane
    - whether the plane can blend with planes below it
    - whether the plane can blend with planes above it
    - whether the plane supports per pixel alpha blending
    - supported formats on the plane (partial list for now)
    
    Pre DCN ASICs don't have their full capabilities described for now.
    They can be updated as needed in the future.
    
    Signed-off-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 209d73530d7effed2acf7e5b88ea5cf8c73a800b
Author: Imre Deak <imre.deak@intel.com>
Date:   Thu Mar 7 12:32:35 2019 +0200

    drm/i915/icl: Prevent incorrect DBuf enabling
    
    Pretend that we have only 1 DBuf slice and that 1 slice is always
    enabled, until we have a proper way for on-demand toggling of the second
    slice.  Currently we'll try to incorrectly enable DBuf even when all
    pipes are disabled and we are already runtime suspended (as the computed
    number of DBuf slices will be 1 in that case).
    
    This also means we'll leave the second slice enabled redundantly (except
    when suspended), but that's an acceptable tradeoff until we have a
    proper solution.
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=108756
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Reviewed-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190307103235.23538-1-imre.deak@intel.com

commit 37fbbd49054b624400a65cf1a39f152a7f3f4749
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Tue Mar 5 21:29:05 2019 +0200

    drm/i915: Populate pipe_offsets[] & co. accurately
    
    At some point people have started to assume that
    pipe_offsets[] & co. are only populated for pipes and whatnot
    that actually exist. That is in fact not currently true, but
    we can easily make it so.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190305192905.7140-1-ville.syrjala@linux.intel.com
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>

commit 128c075ad4fc4139f47bcd38a5115573394a0e34
Author: Wesley Chalmers <Wesley.Chalmers@amd.com>
Date:   Wed Feb 6 13:19:08 2019 -0500

    drm/amd/display: Set flip pending for pipe split
    
    [WHY]
    When doing split pipe, if one pipe is pending on flip, the entire
    plane's status should be flip pending, otherwise corruption can occur
    when OS writes to a surface prematurely.
    
    [HOW]
    Clear the flip pending bit before checking pipes, then OR the flip
    pending bits from all pipes together to create the flip pending status
    of the entire plane.
    
    Signed-off-by: Wesley Chalmers <Wesley.Chalmers@amd.com>
    Reviewed-by: Jun Lei <Jun.Lei@amd.com>
    Acked-by: Eryk Brol <Eryk.Brol@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 4bc46da4a3aeeb4d55e83dd276cf72756e908286
Author: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
Date:   Wed Feb 6 10:18:17 2019 -0500

    drm/amd/display: Reset planes that were disabled in init_pipes
    
    [Why]
    Seamless boot tries to reuse planes that were enabled for the first
    commit applied.
    
    In the case where Raven is booting with two monitors connected and the
    first commit contains two streams the screen corruption would occur
    because the second stream was trying to re-use a tg and plane that
    weren't previously enabled.
    
    The state on the first commit looks something like the following:
    
    TG0: enabled=1
    TG1: enabled=0
    TG2: enabled=0
    TG3: enabled=0
    
    New state: pipe=0, stream=0,    plane=0,       new_tg=0
    New state: pipe=1, stream=1,    plane=1,       new_tg=1
    New state: pipe=2, stream=NULL, plane=NULL,    new_tg=NULL
    New state: pipe=3, stream=NULL, plane=NULL,    new_tg=NULL
    
    Only one plane/tg is setup before we enter accelerated mode so
    we really want to disabling everything but that first plane.
    
    [How]
    
    Check if the stream is not NULL and if the tg is enabled before
    deciding whether to skip the plane disable.
    
    Also ensure we're also disabling on the current state's pipe_ctx so
    we don't overwrite the fields in the new pending state.
    
    Signed-off-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Reviewed-by: Anthony Koo <Anthony.Koo@amd.com>
    Acked-by: Harry Wentland <Harry.Wentland@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit ee5e001196d1345b8fee25925ff5f1d67936081e
Author: Slavomir Kaslev <kaslevs@vmware.com>
Date:   Thu Feb 7 17:45:19 2019 +0200

    fs: Make splice() and tee() take into account O_NONBLOCK flag on pipes
    
    The current implementation of splice() and tee() ignores O_NONBLOCK set
    on pipe file descriptors and checks only the SPLICE_F_NONBLOCK flag for
    blocking on pipe arguments.  This is inconsistent since splice()-ing
    from/to non-pipe file descriptors does take O_NONBLOCK into
    consideration.
    
    Fix this by promoting O_NONBLOCK, when set on a pipe, to
    SPLICE_F_NONBLOCK.
    
    Some context for how the current implementation of splice() leads to
    inconsistent behavior.  In the ongoing work[1] to add VM tracing
    capability to trace-cmd we stream tracing data over named FIFOs or
    vsockets from guests back to the host.
    
    When we receive SIGINT from user to stop tracing, we set O_NONBLOCK on
    the input file descriptor and set SPLICE_F_NONBLOCK for the next call to
    splice().  If splice() was blocked waiting on data from the input FIFO,
    after SIGINT splice() restarts with the same arguments (no
    SPLICE_F_NONBLOCK) and blocks again instead of returning -EAGAIN when no
    data is available.
    
    This differs from the splice() behavior when reading from a vsocket or
    when we're doing a traditional read()/write() loop (trace-cmd's
    --nosplice argument).
    
    With this patch applied we get the same behavior in all situations after
    setting O_NONBLOCK which also matches the behavior of doing a
    read()/write() loop instead of splice().
    
    This change does have potential of breaking users who don't expect
    EAGAIN from splice() when SPLICE_F_NONBLOCK is not set.  OTOH programs
    that set O_NONBLOCK and don't anticipate EAGAIN are arguably buggy[2].
    
     [1] https://github.com/skaslev/trace-cmd/tree/vsock
     [2] https://github.com/torvalds/linux/blob/d47e3da1759230e394096fd742aad423c291ba48/fs/read_write.c#L1425
    
    Signed-off-by: Slavomir Kaslev <kaslevs@vmware.com>
    Reviewed-by: Steven Rostedt (VMware) <rostedt@goodmis.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 4ece61a22be5ab5d49cc5fc20a19a0afa24a019d
Author: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
Date:   Tue Feb 5 14:03:52 2019 -0500

    drm/amd/display: set clocks to 0 on suspend on dce80
    
    [Why]
    When a dce80 asic was suspended, the clocks were not set to 0.
    Upon resume, the new clock was compared to the existing clock,
    they were found to be the same, and so the clock was not set.
    This resulted in a blackscreen.
    
    [How]
    In atomic commit, check to see if there are any active pipes.
    If no, set clocks to 0
    
    Signed-off-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Reviewed-by: Nicholas Kazlauskas <Nicholas.Kazlauskas@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org

commit 80c218d56e309d46d9dc3f3d5e4396b277bdd0b5
Author: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
Date:   Fri Jan 25 15:30:24 2019 -0500

    drm/amd/display: Do cursor updates after stream updates
    
    [Why]
    Cursor updates used to happen after vblank/flip/stream updates before
    the stream update refactor. They now happen before stream updates
    which means that they're not going to be synced with fb changes
    and that they're going to programmed for pipes that we're disabling
    within the same commit.
    
    [How]
    Move them after stream updates.
    
    Signed-off-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Reviewed-by: David Francis <David.Francis@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit ce72741b53cdc70f9738c04920fefb93448f1f5e
Author: Anthony Koo <Anthony.Koo@amd.com>
Date:   Sun Jan 20 01:54:01 2019 -0500

    drm/amd/display: remove screen flashes on seamless boot
    
    [Why]
    We want boot to desktop to be seamless
    
    [How]
    During init pipes, avoid touching the pipes where GOP has already
    enabled the HW to the state we want.
    
    Signed-off-by: Anthony Koo <Anthony.Koo@amd.com>
    Reviewed-by: Aric Cyr <Aric.Cyr@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 2c7f9a4df9def07867087a520bc32169e2eec9f8
Author: Colin Xu <colin.xu@intel.com>
Date:   Thu Feb 14 12:56:33 2019 +0800

    drm/i915/gvt: Use consist max display pipe numbers as i915 definition
    
    GVT implements a homogeneous vGPU as host GPU so max vGPU display pipes
    can't exceed HW. The inconsistency definition has potential risks which
    could cause array indexing overflow.
    
    Remove the unnecessary define of INTEL_GVT_MAX_PIPE and align with i915.
    
    Reviewed-by: Zhenyu Wang <zhenyuw@linux.intel.com>
    Signed-off-by: Colin Xu <colin.xu@intel.com>
    Signed-off-by: Zhenyu Wang <zhenyuw@linux.intel.com>

commit 0b2599a43ca9ba63e4e213c2ae90d382d0b2340f
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Feb 6 22:49:08 2019 +0200

    drm/i915: Add pipe enable/disable tracepoints
    
    Add tracepoints for pipe enable/disable. We'll include the
    frame/scanline counters for all pipes in these tracepoints to
    help in diagnosing underruns and whatnot when enabling/disabling
    pipes in parallel with plane updates/flips on another pipe.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20190206204910.13965-2-ville.syrjala@linux.intel.com
    Reviewed-by: Rodrigo Vivi <rodrigo.vivi@intel.com>

commit 81a43d10b8ed0e165bbd1e134ca7261a9608f389
Author: Colin Ian King <colin.king@canonical.com>
Date:   Sat Dec 22 06:49:51 2018 -0500

    media: staging: intel-ipu3: fix unsigned comparison with < 0
    
    The comparison css->pipes[pipe].bindex < 0 is always false because
    bindex is an unsigned int.  Fix this by using a signed integer for
    the comparison.
    
    Detected by CoverityScan, CID#1476023 ("Unsigned compared against 0")
    
    Fixes: f5f2e4273518 ("media: staging/intel-ipu3: Add css pipeline programming")
    
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>

commit 8dac4e7d89ea3b09695c0948d375a62df9443ca0
Author: Su Sung Chung <Su.Chung@amd.com>
Date:   Mon Jan 21 12:01:53 2019 -0500

    drm/amd/display: store timing sync info in dc_stream_status
    
    in program_timing_sync, after all the pipes are
    grouped, store timing sync info in dc_stream_status
    
    Signed-off-by: Su Sung Chung <Su.Chung@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit a0ce2f0aa6ad97c3d4927bf2ca54bcebdf062d55
Author: Jann Horn <jannh@google.com>
Date:   Wed Jan 23 15:19:17 2019 +0100

    splice: don't merge into linked buffers
    
    Before this patch, it was possible for two pipes to affect each other after
    data had been transferred between them with tee():
    
    ============
    $ cat tee_test.c
    
    int main(void) {
      int pipe_a[2];
      if (pipe(pipe_a)) err(1, "pipe");
      int pipe_b[2];
      if (pipe(pipe_b)) err(1, "pipe");
      if (write(pipe_a[1], "abcd", 4) != 4) err(1, "write");
      if (tee(pipe_a[0], pipe_b[1], 2, 0) != 2) err(1, "tee");
      if (write(pipe_b[1], "xx", 2) != 2) err(1, "write");
    
      char buf[5];
      if (read(pipe_a[0], buf, 4) != 4) err(1, "read");
      buf[4] = 0;
      printf("got back: '%s'\n", buf);
    }
    $ gcc -o tee_test tee_test.c
    $ ./tee_test
    got back: 'abxx'
    $
    ============
    
    As suggested by Al Viro, fix it by creating a separate type for
    non-mergeable pipe buffers, then changing the types of buffers in
    splice_pipe_to_pipe() and link_pipe().
    
    Cc: <stable@vger.kernel.org>
    Fixes: 7c77f0b3f920 ("splice: implement pipe to pipe splicing")
    Fixes: 70524490ee2e ("[PATCH] splice: add support for sys_tee()")
    Suggested-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit f5c412ac596fbe1508514257fef3d48e263f40a7
Author: Roman Li <Roman.Li@amd.com>
Date:   Wed Dec 19 09:24:06 2018 -0500

    drm/amd/display: fix warning on raven hotplug
    
    [Why]
    Hotplug on raven results in REG_WAIT_TIMEOUT warning
    due to failing attempt to lock disabled otg for the hubp
    interdependent pipes programming.
    
    [How]
    Don't setup pipe interdependencies for disabled otg.
    Also removed the unnecessary duplicate logic checks.
    
    Signed-off-by: Roman Li <Roman.Li@amd.com>
    Reviewed-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 570744b98ca865d95bdf2da064a7a57f2655f889
Author: Roman Li <Roman.Li@amd.com>
Date:   Wed Dec 19 09:24:06 2018 -0500

    drm/amd/display: fix warning on raven hotplug
    
    [Why]
    Hotplug on raven results in REG_WAIT_TIMEOUT warning
    due to failing attempt to lock disabled otg for the hubp
    interdependent pipes programming.
    
    [How]
    Don't setup pipe interdependencies for disabled otg.
    Also removed the unnecessary duplicate logic checks.
    
    Signed-off-by: Roman Li <Roman.Li@amd.com>
    Reviewed-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 6fd3583b92318d6d8367cc3f325a81a222cdbc55
Author: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
Date:   Mon Nov 19 16:25:23 2018 -0500

    drm/amd/display: fix surface update sequence
    
    An earlier change added update of interdependent dlg/ttu params for pipes
    not being updated in the current call. The code fails to check if the other
    pipes are actually active yet causing an assert.
    
    This change adds a check for surface presence on the pipes before updating
    the interdepenednt params.
    
    Signed-off-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Reviewed-by: Nikola Cornij <Nikola.Cornij@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 51abe041c5ed56efbdd944cbd45d27e2cd711406
Author: Bingbu Cao <bingbu.cao@intel.com>
Date:   Thu Dec 6 20:03:39 2018 -0500

    media: staging/intel-ipu3: Add dual pipe support
    
    This patch adds support to run dual pipes simultaneously.
    A private ioctl to configure the pipe mode (video or still)
    is also implemented.
    
    IPU3 hardware supports a maximum of 2 streams per pipe.
    With the support of dual pipes, more than 2 stream outputs
    can be achieved.
    
    This helps to support advanced camera features like
    Continuous View Finder (CVF) and Snapshot During Video(SDV).
    
    Extend ipu3 IMGU driver to support dual pipes
    
        1. Extend current IMGU device to contain 2 groups
           of video nodes and 2 subdevs
        2. Extend current css to support 2 pipeline and make
           CSS APIs to support 2 pipe
        3. Add a v4l2 ctrl to allow user to specify the mode
           of the pipe
        4. Check media pipeline link status to get enabled
           pipes
    
    Signed-off-by: Bingbu Cao <bingbu.cao@intel.com>
    Signed-off-by: Tian Shu Qiu <tian.shu.qiu@intel.com>
    Signed-off-by: Yong Zhi <yong.zhi@intel.com>
    Signed-off-by: Sakari Ailus <sakari.ailus@linux.intel.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab+samsung@kernel.org>

commit bea68f4a5ff286a0febcb673f4c774f717d723a1
Author: Bob Paauwe <bob.j.paauwe@intel.com>
Date:   Tue Dec 11 11:25:45 2018 -0800

    drm/i915: DFSM pipe disable is valid from gen9 onwards (v2)
    
    It's not just GEN9 platforms that allow for pipes to be disabled via
    the DFSM register, but all later platforms as well.
    
    v2: drop pointless parentheses (Ville)
    
    Signed-off-by: Bob Paauwe <bob.j.paauwe@intel.com>
    Acked-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Matt Roper <matthew.d.roper@intel.com>
    Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20181211192545.140081-1-bob.j.paauwe@intel.com

commit 8f67b5adc030553fbc877124306f3f3bdab89aa8
Author: Darrick J. Wong <darrick.wong@oracle.com>
Date:   Sun Dec 2 08:38:07 2018 -0800

    iomap: partially revert 4721a601099 (simulated directio short read on EFAULT)
    
    In commit 4721a601099, we tried to fix a problem wherein directio reads
    into a splice pipe will bounce EFAULT/EAGAIN all the way out to
    userspace by simulating a zero-byte short read.  This happens because
    some directio read implementations (xfs) will call
    bio_iov_iter_get_pages to grab pipe buffer pages and issue asynchronous
    reads, but as soon as we run out of pipe buffers that _get_pages call
    returns EFAULT, which the splice code translates to EAGAIN and bounces
    out to userspace.
    
    In that commit, the iomap code catches the EFAULT and simulates a
    zero-byte read, but that causes assertion errors on regular splice reads
    because xfs doesn't allow short directio reads.  This causes infinite
    splice() loops and assertion failures on generic/095 on overlayfs
    because xfs only permit total success or total failure of a directio
    operation.  The underlying issue in the pipe splice code has now been
    fixed by changing the pipe splice loop to avoid avoid reading more data
    than there is space in the pipe.
    
    Therefore, it's no longer necessary to simulate the short directio, so
    remove the hack from iomap.
    
    Fixes: 4721a601099 ("iomap: dio data corruption and spurious errors when pipes fill")
    Reported-by: Murphy Zhou <jencce.kernel@gmail.com>
    Ranted-by: Amir Goldstein <amir73il@gmail.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>

commit 17614445576b6af24e9cf36607c6448164719c96
Author: Darrick J. Wong <darrick.wong@oracle.com>
Date:   Fri Nov 30 10:37:49 2018 -0800

    splice: don't read more than available pipe space
    
    In commit 4721a601099, we tried to fix a problem wherein directio reads
    into a splice pipe will bounce EFAULT/EAGAIN all the way out to
    userspace by simulating a zero-byte short read.  This happens because
    some directio read implementations (xfs) will call
    bio_iov_iter_get_pages to grab pipe buffer pages and issue asynchronous
    reads, but as soon as we run out of pipe buffers that _get_pages call
    returns EFAULT, which the splice code translates to EAGAIN and bounces
    out to userspace.
    
    In that commit, the iomap code catches the EFAULT and simulates a
    zero-byte read, but that causes assertion errors on regular splice reads
    because xfs doesn't allow short directio reads.
    
    The brokenness is compounded by splice_direct_to_actor immediately
    bailing on do_splice_to returning <= 0 without ever calling ->actor
    (which empties out the pipe), so if userspace calls back we'll EFAULT
    again on the full pipe, and nothing ever gets copied.
    
    Therefore, teach splice_direct_to_actor to clamp its requests to the
    amount of free space in the pipe and remove the simulated short read
    from the iomap directio code.
    
    Fixes: 4721a601099 ("iomap: dio data corruption and spurious errors when pipes fill")
    Reported-by: Murphy Zhou <jencce.kernel@gmail.com>
    Ranted-by: Amir Goldstein <amir73il@gmail.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>

commit e1bf094b3c7514934168dcb69f18b65aacb5a953
Author: José Roberto de Souza <jose.souza@intel.com>
Date:   Fri Nov 30 15:20:47 2018 -0800

    drm/i915: Add HAS_DISPLAY() and use it
    
    Right now it is decided if GEN has display by checking the num_pipes,
    so lets make it explicit and use a macro.
    
    Cc: Jani Nikula <jani.nikula@intel.com>
    Reviewed-by: Lucas De Marchi <lucas.demarchi@intel.com>
    Signed-off-by: José Roberto de Souza <jose.souza@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20181130232048.14216-1-jose.souza@intel.com

commit abe72ff4134028ff2189d29629c40a40bee0a989
Merge: 7c98a4261827 8c110d43c6bc
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Nov 24 09:11:52 2018 -0800

    Merge tag 'xfs-4.20-fixes-2' of git://git.kernel.org/pub/scm/fs/xfs/xfs-linux
    
    Pull xfs fixes from Darrick Wong:
     "Dave and I have continued our work fixing corruption problems that can
      be found when running long-term burn-in exercisers on xfs. Here are
      some patches fixing most of the problems, but there will likely be
      more. :/
    
       - Numerous corruption fixes for copy on write
    
       - Numerous corruption fixes for blocksize < pagesize writes
    
       - Don't miscalculate AG reservations for small final AGs
    
       - Fix page cache truncation to work properly for reflink and extent
         shifting
    
       - Fix use-after-free when retrying failed inode/dquot buffer logging
    
       - Fix corruptions seen when using copy_file_range in directio mode"
    
    * tag 'xfs-4.20-fixes-2' of git://git.kernel.org/pub/scm/fs/xfs/xfs-linux:
      iomap: readpages doesn't zero page tail beyond EOF
      vfs: vfs_dedupe_file_range() doesn't return EOPNOTSUPP
      iomap: dio data corruption and spurious errors when pipes fill
      iomap: sub-block dio needs to zeroout beyond EOF
      iomap: FUA is wrong for DIO O_DSYNC writes into unwritten extents
      xfs: delalloc -> unwritten COW fork allocation can go wrong
      xfs: flush removing page cache in xfs_reflink_remap_prep
      xfs: extent shifting doesn't fully invalidate page cache
      xfs: finobt AG reserves don't consider last AG can be a runt
      xfs: fix transient reference count error in xfs_buf_resubmit_failed_buffers
      xfs: uncached buffer tracing needs to print bno
      xfs: make xfs_file_remap_range() static
      xfs: fix shared extent data corruption due to missing cow reservation

commit 4721a6010990971440b4ffefbdf014976b8eda2f
Author: Dave Chinner <dchinner@redhat.com>
Date:   Mon Nov 19 13:31:11 2018 -0800

    iomap: dio data corruption and spurious errors when pipes fill
    
    When doing direct IO to a pipe for do_splice_direct(), then pipe is
    trivial to fill up and overflow as it can only hold 16 pages. At
    this point bio_iov_iter_get_pages() then returns -EFAULT, and we
    abort the IO submission process. Unfortunately, iomap_dio_rw()
    propagates the error back up the stack.
    
    The error is converted from the EFAULT to EAGAIN in
    generic_file_splice_read() to tell the splice layers that the pipe
    is full. do_splice_direct() completely fails to handle EAGAIN errors
    (it aborts on error) and returns EAGAIN to the caller.
    
    copy_file_write() then completely fails to handle EAGAIN as well,
    and so returns EAGAIN to userspace, having failed to copy the data
    it was asked to.
    
    Avoid this whole steaming pile of fail by having iomap_dio_rw()
    silently swallow EFAULT errors and so do short reads.
    
    To make matters worse, iomap_dio_actor() has a stale data exposure
    bug bio_iov_iter_get_pages() fails - it does not zero the tail block
    that it may have been left uncovered by partial IO. Fix the error
    handling case to drop to the sub-block zeroing rather than
    immmediately returning the -EFAULT error.
    
    Signed-off-by: Dave Chinner <dchinner@redhat.com>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>

commit 8f78df90d84acd7a0b22c2b44a258421063a972f
Author: Imre Deak <imre.deak@intel.com>
Date:   Tue Nov 20 11:23:25 2018 +0200

    drm/i915: Add code comment on assumption of pipe==transcoder
    
    Add a comment to the pipe and transcoder enum definitions about our
    assumption in the code about enum values for pipes and transcoders
    with a 1:1 transcoder -> pipe mapping.
    
    v2:
    - Clarify more what are the assumptions about the enum values. (Ville)
    v3: (Lucas)
    - s/->/ -> / so it looks less like pointer dereferencing.
    - Use pipe enums as initializers in the transcoder enum definition.
    
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Lucas De Marchi <lucas.demarchi@intel.com>
    Cc: Mika Kahola <mika.kahola@intel.com>
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com> (v2)
    Link: https://patchwork.freedesktop.org/patch/msgid/20181120092325.21249-3-imre.deak@intel.com

commit b9d3cae0b45150d68b7d93ea2a6d97c3a3ea3387
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Thu Oct 25 16:05:36 2018 +0300

    drm/i915: Fix ilk+ watermarks when disabling pipes
    
    commit df5e31c204b34e8d9e5ec33f5b28e960c4f25e14 upstream.
    
    We're no longer programming any watermarks when we're disabling
    a pipe. That means ilk_wm_merge() & co. will keep considering
    the any pipe that is getting disabled as still enabled. Thus we
    either get no LP1+ watermakrs (ilk-ivb), or we get suboptimal
    ones (hsw-bdw).
    
    This seems to have been broken by commit b6b178a77210 ("drm/i915:
    Calculate ironlake intermediate watermarks correctly, v2."). Before
    that we apparently had some difference between the intermediate
    and optimal watermarks and so we would program the optiomal ones.
    Now intermediate and optimal are identical for disabled pipes
    and so we don't program either.
    
    Fix this by programming the intermediate watermarks even for
    disabled pipes. We were already doing that for skl+. We'll
    leave out gmch platforms for now since those do the merging
    in a different manner and should work as is. We'll want to
    unify this eventually, but play it safe for now and just put
    in a FIXME.
    
    Cc: stable@vger.kernel.org
    Cc: Matt Roper <matthew.d.roper@intel.com>
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Fixes: b6b178a77210 ("drm/i915: Calculate ironlake intermediate watermarks correctly, v2.")
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20181025130536.29024-1-ville.syrjala@linux.intel.com
    Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com> #irc
    (cherry picked from commit a748faea3bfd7fd1d1485bc1c426c7d460cc6503)
    Signed-off-by: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a46a7350b1e85fe78580f6a4c809a876867a9df8
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Thu Oct 25 16:05:36 2018 +0300

    drm/i915: Fix ilk+ watermarks when disabling pipes
    
    commit df5e31c204b34e8d9e5ec33f5b28e960c4f25e14 upstream.
    
    We're no longer programming any watermarks when we're disabling
    a pipe. That means ilk_wm_merge() & co. will keep considering
    the any pipe that is getting disabled as still enabled. Thus we
    either get no LP1+ watermakrs (ilk-ivb), or we get suboptimal
    ones (hsw-bdw).
    
    This seems to have been broken by commit b6b178a77210 ("drm/i915:
    Calculate ironlake intermediate watermarks correctly, v2."). Before
    that we apparently had some difference between the intermediate
    and optimal watermarks and so we would program the optiomal ones.
    Now intermediate and optimal are identical for disabled pipes
    and so we don't program either.
    
    Fix this by programming the intermediate watermarks even for
    disabled pipes. We were already doing that for skl+. We'll
    leave out gmch platforms for now since those do the merging
    in a different manner and should work as is. We'll want to
    unify this eventually, but play it safe for now and just put
    in a FIXME.
    
    Cc: stable@vger.kernel.org
    Cc: Matt Roper <matthew.d.roper@intel.com>
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Fixes: b6b178a77210 ("drm/i915: Calculate ironlake intermediate watermarks correctly, v2.")
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20181025130536.29024-1-ville.syrjala@linux.intel.com
    Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com> #irc
    (cherry picked from commit a748faea3bfd7fd1d1485bc1c426c7d460cc6503)
    Signed-off-by: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1a1adf172f6a9747d5dd2d9236af28ccff8646a8
Author: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
Date:   Wed Oct 31 07:59:54 2018 -0400

    drm/amd/display: fix pipe interdependent hubp programming
    
    A number of registers need to be updated for all active
    pipes wherever any pipe causes a change in watermarks.
    
    This change separates programming of these registers into
    a separate function call that is called for all active pipes
    during a bw update.
    
    Signed-off-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 20ef6d06ef9a31a33516637a80521b9fc7f1f849
Merge: 1de4f2ef216d 73b6f96cbc01
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Nov 10 13:29:47 2018 -0600

    Merge tag 'drm-fixes-2018-11-11' of git://anongit.freedesktop.org/drm/drm
    
    Pull drm fixes from Dave Airlie:
     "drm: i915, amdgpu, sun4i, exynos and etnaviv fixes:
    
       - amdgpu has some display fixes, KFD ioctl fixes and a Vega20 bios
         interaction fix.
    
       - sun4i has some NULL checks added
    
       - i915 has a 32-bit system fix, LPE audio oops, and HDMI2.0 clock
         fixes.
    
       - Exynos has a 3 regression fixes (one frame counter, fbdev missing,
         dsi->panel check)
    
       - Etnaviv has a single fencing fix for GPU recovery"
    
    * tag 'drm-fixes-2018-11-11' of git://anongit.freedesktop.org/drm/drm: (39 commits)
      drm/amd/amdgpu/dm: Fix dm_dp_create_fake_mst_encoder()
      drm/amd/display: Drop reusing drm connector for MST
      drm/amd/display: Cleanup MST non-atomic code workaround
      drm/amd/powerplay: always use fast UCLK switching when UCLK DPM enabled
      drm/amd/powerplay: set a default fclk/gfxclk ratio
      drm/amdgpu/display/dce11: only enable FBC when selected
      drm/amdgpu/display/dm: handle FBC dc feature parameter
      drm/amdgpu/display/dc: add FBC to dc_config
      drm/amdgpu: add DC feature mask module parameter
      drm/amdgpu/display: check if fbc is available in set_static_screen_control (v2)
      drm/amdgpu/vega20: add CLK base offset
      drm/amd/display: Stop leaking planes
      drm/amd/display: Fix misleading buffer information
      Revert "drm/amd/display: set backlight level limit to 1"
      drm/amd: Update atom_smu_info_v3_3 structure
      drm/i915: Fix ilk+ watermarks when disabling pipes
      drm/sun4i: tcon: prevent tcon->panel dereference if NULL
      drm/sun4i: tcon: fix check of tcon->panel null pointer
      drm/i915: Don't oops during modeset shutdown after lpe audio deinit
      drm/i915: Mark pin flags as u64
      ...

commit 3dd952b45b3b6547b2f029035832e4845fccbbf7
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Wed Aug 9 19:55:24 2017 +0900

    usb: renesas_usbhs: gadget: fix spin_lock_init() for &uep->lock
    
    [ Upstream commit 14a8d4bfc2102f85ce097563d151370c91c1898a ]
    
    This patch fixes an issue that the spin_lock_init() is not called
    for almost all pipes. Otherwise, the lockdep output the following
    message when we connect a usb cable using g_ncm:
    
     INFO: trying to register non-static key.
     the code is fine but needs lockdep annotation.
     turning off the locking correctness validator.
    
    Reported-by: Kazuya Mizuguchi <kazuya.mizuguchi.ks@renesas.com>
    Fixes: b8b9c974afee ("usb: renesas_usbhs: gadget: disable all eps when the driver stops")
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Tested-by: Kazuya Mizuguchi <kazuya.mizuguchi.ks@renesas.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 593f79a236e11fbc570db509242c2b4ef0526c5d
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Fri Nov 2 10:51:50 2018 -0500

    drm/amdgpu/display: check if fbc is available in set_static_screen_control (v2)
    
    The value is dependent on whether fbc is available.
    
    v2: only check if num_pipes is valid
    
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 689e7b34234e29e5168894b27b752a4e16ef08c4
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Fri Nov 2 10:51:50 2018 -0500

    drm/amdgpu/display: check if fbc is available in set_static_screen_control (v2)
    
    The value is dependent on whether fbc is available.
    
    v2: only check if num_pipes is valid
    
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit df5e31c204b34e8d9e5ec33f5b28e960c4f25e14
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Thu Oct 25 16:05:36 2018 +0300

    drm/i915: Fix ilk+ watermarks when disabling pipes
    
    We're no longer programming any watermarks when we're disabling
    a pipe. That means ilk_wm_merge() & co. will keep considering
    the any pipe that is getting disabled as still enabled. Thus we
    either get no LP1+ watermakrs (ilk-ivb), or we get suboptimal
    ones (hsw-bdw).
    
    This seems to have been broken by commit b6b178a77210 ("drm/i915:
    Calculate ironlake intermediate watermarks correctly, v2."). Before
    that we apparently had some difference between the intermediate
    and optimal watermarks and so we would program the optiomal ones.
    Now intermediate and optimal are identical for disabled pipes
    and so we don't program either.
    
    Fix this by programming the intermediate watermarks even for
    disabled pipes. We were already doing that for skl+. We'll
    leave out gmch platforms for now since those do the merging
    in a different manner and should work as is. We'll want to
    unify this eventually, but play it safe for now and just put
    in a FIXME.
    
    Cc: stable@vger.kernel.org
    Cc: Matt Roper <matthew.d.roper@intel.com>
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Fixes: b6b178a77210 ("drm/i915: Calculate ironlake intermediate watermarks correctly, v2.")
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20181025130536.29024-1-ville.syrjala@linux.intel.com
    Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com> #irc
    (cherry picked from commit a748faea3bfd7fd1d1485bc1c426c7d460cc6503)
    Signed-off-by: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>

commit 6a255da783c64886ca5a8ecaeb751a736edcae9d
Author: Uma Shankar <uma.shankar@intel.com>
Date:   Fri Nov 2 00:40:19 2018 +0530

    drm/i915/icl: Define Plane Input CSC Coefficient Registers
    
    Defined the plane input csc coefficient registers and macros.
    6 registers are used to program a total of 9 coefficients,
    added macros to define each of them for all the planes
    supporting the feature on pipes. On ICL, bottom 3 planes
    have this capability.
    
    v2: Segregated the register macro definition as separate patch
    as per Maarten's suggestion.
    
    v3: Removed a redundant 3rd Pipe register definition and
    simplified the equally spaced register definition by adding an
    offset as per Matt's comment.
    
    v4: No Change
    
    v5: Renamed the register Macro as per Matt's suggestion.
    
    v6: No Change
    
    v7: No Change
    
    v8: No Change
    
    v9: No Change
    
    Signed-off-by: Uma Shankar <uma.shankar@intel.com>
    Reviewed-by: Matt Roper <matthew.d.roper@intel.com>
    Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/1541099420-12419-2-git-send-email-uma.shankar@intel.com

commit a748faea3bfd7fd1d1485bc1c426c7d460cc6503
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Thu Oct 25 16:05:36 2018 +0300

    drm/i915: Fix ilk+ watermarks when disabling pipes
    
    We're no longer programming any watermarks when we're disabling
    a pipe. That means ilk_wm_merge() & co. will keep considering
    the any pipe that is getting disabled as still enabled. Thus we
    either get no LP1+ watermakrs (ilk-ivb), or we get suboptimal
    ones (hsw-bdw).
    
    This seems to have been broken by commit b6b178a77210 ("drm/i915:
    Calculate ironlake intermediate watermarks correctly, v2."). Before
    that we apparently had some difference between the intermediate
    and optimal watermarks and so we would program the optiomal ones.
    Now intermediate and optimal are identical for disabled pipes
    and so we don't program either.
    
    Fix this by programming the intermediate watermarks even for
    disabled pipes. We were already doing that for skl+. We'll
    leave out gmch platforms for now since those do the merging
    in a different manner and should work as is. We'll want to
    unify this eventually, but play it safe for now and just put
    in a FIXME.
    
    Cc: stable@vger.kernel.org
    Cc: Matt Roper <matthew.d.roper@intel.com>
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Fixes: b6b178a77210 ("drm/i915: Calculate ironlake intermediate watermarks correctly, v2.")
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20181025130536.29024-1-ville.syrjala@linux.intel.com
    Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com> #irc

commit c99155230b677236f79edc226fca80392cc84787
Author: Nevenko Stupar <Nevenko.Stupar@amd.com>
Date:   Thu Oct 11 18:04:14 2018 -0400

    drm/amd/display: Add missing pipes registers for VGA enable/disable
    
    Signed-off-by: Nevenko Stupar <Nevenko.Stupar@amd.com>
    Reviewed-by: Aric Cyr <Aric.Cyr@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit ee66ad5896aef9b67b7b1e3db6fa9430b907fa58
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Nov 6 10:47:14 2017 +0100

    ALSA: usx2y: Fix invalid stream URBs
    
    commit f9a1c372299fed53d4b72bb601f7f3bfe6f9999c upstream
    
    The us122l driver creates URBs per the fixed endpoints, and this may
    end up with URBs with inconsistent pipes when a fuzzer or a malicious
    program deals with the manipulated endpoints.  It ends up with a
    kernel warning like:
    
      usb 1-1: BOGUS urb xfer, pipe 0 != type 3
      ------------[ cut here ]------------
      WARNING: CPU: 0 PID: 24 at drivers/usb/core/urb.c:471
      usb_submit_urb+0x113e/0x1400
      Call Trace:
       usb_stream_start+0x48a/0x9f0 sound/usb/usx2y/usb_stream.c:690
       us122l_start+0x116/0x290 sound/usb/usx2y/us122l.c:365
       us122l_create_card sound/usb/usx2y/us122l.c:502
       us122l_usb_probe sound/usb/usx2y/us122l.c:588
       ....
    
    For avoiding the bad access, this patch adds a few sanity checks of
    the validity of created URBs like previous similar fixes using the new
    usb_urb_ep_type_check() helper function.
    
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Tested-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>
    Signed-off-by: Sudip Mukherjee <sudipm.mukherjee@gmail.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ac435075892e3e651c667b4a9f2267cf3ef1d5a2
Merge: 9f51ae62c84a 2347e7e1aea4
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Oct 29 08:25:00 2018 -0700

    Merge tag 'csky-for-linus-4.20' of https://github.com/c-sky/csky-linux
    
    Pull C-SKY architecture port from Guo Ren:
     "This contains the Linux port for C-SKY(csky) based on linux-4.19
      Release, which has been through 10 rounds of review on mailing list.
    
      More information:
    
        http://en.c-sky.com
    
      The development repo:
    
        https://github.com/c-sky/csky-linux
    
      ABI Documentation:
    
        https://github.com/c-sky/csky-doc
    
      Here is the pre-built cross compiler for fast test from our CI:
    
        https://gitlab.com/c-sky/buildroot/-/jobs/101608095/artifacts/file/output/images/csky_toolchain_qemu_csky_ck807f_4.18_glibc_defconfig_482b221e52908be1c9b2ccb444255e1562bb7025.tar.xz
    
      We use buildroot as our CI-test enviornment. "LTP, Lmbench ..." will
      be tested for every commit. See here for more details:
    
        https://gitlab.com/c-sky/buildroot/pipelines
    
      We'll continouslly improve csky subsystem in future"
    
    Arnd acks, and adds the following notes:
     "I did a thorough review of the ABI, which as usual mainly consists of
      spotting any files that don't use the asm-generic ABI itself, and
      having it changed to it matches exactly what we do on other new
      architectures.
    
      I also looked at every other patch and commented on maybe half of them
      where I saw something that did not quite seem right. Others have
      reviewed specific patches in greater depth. I'm sure that one could
      fine more of the minor details, but as long as they are not ABI
      relevant, they can be fixed later.
    
      The only patch that is part of the ABI and that nobody reviewed is the
      signal handling. This is one of the areas I never worked on in much
      detail. I did not see anything wrong with it, but I also don't know
      what the problems with the other architectures are here, and we seem
      to be hitting issues occasionally, and we never managed to generalize
      this enough for new architectures to have a trivial implementation.
    
      I was originally hoping that we could have the 64-bit time_t
      interfaces ready in time to completely drop the 32-bit ones, but that
      did not happen. We might still remove them in the next merge window
      depending on whether the libc upstream people prefer to keep them or
      not.
    
      One more general comment: I think this may well be the last new CPU
      architecture we ever add to the kernel. Both nds32 and c-sky are made
      by companies that also work on risc-v, and generally speaking risc-v
      seems to be killing off any of the minor licensable instruction set
      projects, just like ARM has mostly killed off the custom
      vendor-specific instruction sets already.
    
      If we add another architecture in the future, it may instead be
      something like the LLVM bitcode or WebAssembly, who knows?"
    
    To which Geert Uytterhoeven pipes in about another architecture still in
    the pipeline: Kalray MPPA.
    
    * tag 'csky-for-linus-4.20' of https://github.com/c-sky/csky-linux: (24 commits)
      dt-bindings: interrupt-controller: C-SKY APB intc
      irqchip: add C-SKY APB bus interrupt controller
      dt-bindings: interrupt-controller: C-SKY SMP intc
      irqchip: add C-SKY SMP interrupt controller
      MAINTAINERS: Add csky
      dt-bindings: Add vendor prefix for csky
      dt-bindings: csky CPU Bindings
      csky: Misc headers
      csky: SMP support
      csky: Debug and Ptrace GDB
      csky: User access
      csky: Library functions
      csky: ELF and module probe
      csky: Atomic operations
      csky: IRQ handling
      csky: VDSO and rt_sigreturn
      csky: Process management and Signal
      csky: MMU and page table management
      csky: Cache and TLB routines
      csky: System Call
      ...

commit b585ebdb5912cf1438d4822f79aaebe36a2d123a
Author: Andi Kleen <ak@linux.intel.com>
Date:   Thu Sep 20 11:05:36 2018 -0700

    perf script: Add --insn-trace for instruction decoding
    
    Add a --insn-trace short hand option for decoding and disassembling
    instruction streams for intel_pt. This automatically pipes the output
    into the xed disassembler to generate disassembled instructions.  This
    just makes this use model much nicer to use.
    
    Before
    
      % perf record -e intel_pt// ...
      % perf script --itrace=i0ns --ns -F +insn,-event,-period | xed -F insn: -A -64
       swapper 0 [000] 17276.429606186: ffffffff81010486 pt_config ([kernel.kallsyms])    nopl  %eax, (%rax,%rax,1)
       swapper 0 [000] 17276.429606186: ffffffff8101048b pt_config ([kernel.kallsyms])    add $0x10, %rsp
       swapper 0 [000] 17276.429606186: ffffffff8101048f pt_config ([kernel.kallsyms])    popq  %rbx
       swapper 0 [000] 17276.429606186: ffffffff81010490 pt_config ([kernel.kallsyms])    popq  %rbp
       swapper 0 [000] 17276.429606186: ffffffff81010491 pt_config ([kernel.kallsyms])    popq  %r12
       swapper 0 [000] 17276.429606186: ffffffff81010493 pt_config ([kernel.kallsyms])    popq  %r13
       swapper 0 [000] 17276.429606186: ffffffff81010495 pt_config ([kernel.kallsyms])    popq  %r14
       swapper 0 [000] 17276.429606186: ffffffff81010497 pt_config ([kernel.kallsyms])    popq  %r15
       swapper 0 [000] 17276.429606186: ffffffff81010499 pt_config ([kernel.kallsyms])    retq
       swapper 0 [000] 17276.429606186: ffffffff8101063e pt_event_add ([kernel.kallsyms])         cmpl  $0x1, 0x1b0(%rbx)
       swapper 0 [000] 17276.429606186: ffffffff81010645 pt_event_add ([kernel.kallsyms])         mov $0xffffffea, %eax
       swapper 0 [000] 17276.429606186: ffffffff8101064a pt_event_add ([kernel.kallsyms])         mov $0x0, %edx
       swapper 0 [000] 17276.429606186: ffffffff8101064f pt_event_add ([kernel.kallsyms])         popq  %rbx
       swapper 0 [000] 17276.429606186: ffffffff81010650 pt_event_add ([kernel.kallsyms])         cmovnz %edx, %eax
       swapper 0 [000] 17276.429606186: ffffffff81010653 pt_event_add ([kernel.kallsyms])         jmp 0xffffffff81010635
       swapper 0 [000] 17276.429606186: ffffffff81010635 pt_event_add ([kernel.kallsyms])         retq
       swapper 0 [000] 17276.429606186: ffffffff8115e687 event_sched_in.isra.107 ([kernel.kallsyms])       test %eax, %eax
    
    Now:
    
      % perf record -e intel_pt// ...
      % perf script --insn-trace --xed
      ... same output ...
    
    XED needs to be installed with:
    
      $ git clone https://github.com/intelxed/mbuild.git mbuild
      $ git clone https://github.com/intelxed/xed
      $ cd xed
      $ ./mfile.py
      $ ./mfile.py examples
      $ sudo ./mfile.py --prefix=/usr/local install
      $ sudo cp obj/examples/xed /usr/local/bin
      $ xed | head -3
      ERROR: required argument(s) were missing
      Copyright (C) 2017, Intel Corporation. All rights reserved.
      XED version: [v10.0-328-g7d62c8c49b7b]
      $
    
    Signed-off-by: Andi Kleen <ak@linux.intel.com>
    Tested-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Acked-by: Jiri Olsa <jolsa@kernel.org>
    Link: http://lkml.kernel.org/r/20180920180540.14039-2-andi@firstfloor.org
    [ Fixed up whitespace damage, added the 'mfile.py examples + cp obj/examples/xed ... ]
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

commit 66f34aeec2510b755e8b928b0d8aec8a4095a227
Author: Hersen Wu <hersenxs.wu@amd.com>
Date:   Tue Oct 9 13:50:10 2018 -0400

    drm/amd/display: RV2 DP MST 2nd display within daisy chain not light up
    
    RV2 resource is limit to 3 pipes. Limitation should apply to all HW
    blocks instead of front pipe.
    
    Signed-off-by: Hersen Wu <hersenxs.wu@amd.com>
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Reviewed-by: Huang Rui <ray.huang@amd.com>
    Signed-off-by: Huang Rui <ray.huang@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 443d5e3973e8e774addd830bc1091498b49b4bf2
Author: Rodrigo Vivi <rodrigo.vivi@intel.com>
Date:   Thu Oct 4 08:18:14 2018 -0700

    drm/i915/icl: MBUS B credit change
    
    No functional change. But just a minor change to keep
    up with Spec, since it has changed since commit c3cc39c539d4
    ("drm/i915/icl: program mbus during pipe enable")
    
    The instructions previously said to program pipe's
    B credit = 24 / number of pipes, which is 8 for ICL.
    Now the spec gives us direct values independent of number
    of pipes. Let's keep in sync.
    
    Also just a reorder on fields to make easier to compare
    against spec's sequence: A -> BW -> B.
    
    Cc: Lucas De Marchi <lucas.demarchi@intel.com>
    Cc: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Cc: Mahesh Kumar <mahesh1.kumar@intel.com>
    Cc: Arthur J Runyan <arthur.j.runyan@intel.com>
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Reviewed-by: Mahesh Kumar <mahesh1.kumar@intel.com>
    Reviewed-by: Lucas De Marchi <lucas.demarchi@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20181004151814.6054-1-rodrigo.vivi@intel.com

commit 7a4a2a460458b48c282c017fc83f58b83fad1522
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Oct 3 17:50:52 2018 +0300

    drm/i915: Clean up early plane debugs
    
    Print the plane hw state readout results in the common format
    we already use for pipes and encoders. Also print some clearer
    debug messages when we disable planes during the early phases
    of state readout/sanitization.
    
    v2: Rebase
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20181003145052.4633-1-ville.syrjala@linux.intel.com
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit b413ee0476ea3426846a8139a71514bb627f7596
Author: Suren Baghdasaryan <surenb@google.com>
Date:   Mon Sep 17 15:51:41 2018 +0200

    NFC: Fix the number of pipes
    
    commit e285d5bfb7e9785d289663baef252dd315e171f8 upstream.
    
    According to ETSI TS 102 622 specification chapter 4.4 pipe identifier
    is 7 bits long which allows for 128 unique pipe IDs. Because
    NFC_HCI_MAX_PIPES is used as the number of pipes supported and not
    as the max pipe ID, its value should be 128 instead of 127.
    
    nfc_hci_recv_from_llc extracts pipe ID from packet header using
    NFC_HCI_FRAGMENT(0x7F) mask which allows for pipe ID value of 127.
    Same happens when NCI_HCP_MSG_GET_PIPE() is being used. With
    pipes array having only 127 elements and pipe ID of 127 the OOB memory
    access will result.
    
    Cc: Samuel Ortiz <sameo@linux.intel.com>
    Cc: Allen Pais <allen.pais@oracle.com>
    Cc: "David S. Miller" <davem@davemloft.net>
    Suggested-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Suren Baghdasaryan <surenb@google.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec56e98f80666644fa43f17092fdcd861348eea1
Author: Suren Baghdasaryan <surenb@google.com>
Date:   Mon Sep 17 15:51:40 2018 +0200

    NFC: Fix possible memory corruption when handling SHDLC I-Frame commands
    
    commit 674d9de02aa7d521ebdf66c3958758bdd9c64e11 upstream.
    
    When handling SHDLC I-Frame commands "pipe" field used for indexing
    into an array should be checked before usage. If left unchecked it
    might access memory outside of the array of size NFC_HCI_MAX_PIPES(127).
    
    Malformed NFC HCI frames could be injected by a malicious NFC device
    communicating with the device being attacked (remote attack vector),
    or even by an attacker with physical access to the I2C bus such that
    they could influence the data transfers on that bus (local attack vector).
    skb->data is controlled by the attacker and has only been sanitized in
    the most trivial ways (CRC check), therefore we can consider the
    create_info struct and all of its members to tainted. 'create_info->pipe'
    with max value of 255 (uint8) is used to take an offset of the
    hdev->pipes array of 127 elements which can lead to OOB write.
    
    Cc: Samuel Ortiz <sameo@linux.intel.com>
    Cc: Allen Pais <allen.pais@oracle.com>
    Cc: "David S. Miller" <davem@davemloft.net>
    Suggested-by: Kevin Deus <kdeus@google.com>
    Signed-off-by: Suren Baghdasaryan <surenb@google.com>
    Acked-by: Kees Cook <keescook@chromium.org>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c4989a153631ad38979bd8c1ce2f3275365bf294
Author: Suren Baghdasaryan <surenb@google.com>
Date:   Mon Sep 17 15:51:41 2018 +0200

    NFC: Fix the number of pipes
    
    commit e285d5bfb7e9785d289663baef252dd315e171f8 upstream.
    
    According to ETSI TS 102 622 specification chapter 4.4 pipe identifier
    is 7 bits long which allows for 128 unique pipe IDs. Because
    NFC_HCI_MAX_PIPES is used as the number of pipes supported and not
    as the max pipe ID, its value should be 128 instead of 127.
    
    nfc_hci_recv_from_llc extracts pipe ID from packet header using
    NFC_HCI_FRAGMENT(0x7F) mask which allows for pipe ID value of 127.
    Same happens when NCI_HCP_MSG_GET_PIPE() is being used. With
    pipes array having only 127 elements and pipe ID of 127 the OOB memory
    access will result.
    
    Cc: Samuel Ortiz <sameo@linux.intel.com>
    Cc: Allen Pais <allen.pais@oracle.com>
    Cc: "David S. Miller" <davem@davemloft.net>
    Suggested-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Suren Baghdasaryan <surenb@google.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 67084e26579b3f8b00c762e0cbae1f24d3ac11a0
Author: Suren Baghdasaryan <surenb@google.com>
Date:   Mon Sep 17 15:51:40 2018 +0200

    NFC: Fix possible memory corruption when handling SHDLC I-Frame commands
    
    commit 674d9de02aa7d521ebdf66c3958758bdd9c64e11 upstream.
    
    When handling SHDLC I-Frame commands "pipe" field used for indexing
    into an array should be checked before usage. If left unchecked it
    might access memory outside of the array of size NFC_HCI_MAX_PIPES(127).
    
    Malformed NFC HCI frames could be injected by a malicious NFC device
    communicating with the device being attacked (remote attack vector),
    or even by an attacker with physical access to the I2C bus such that
    they could influence the data transfers on that bus (local attack vector).
    skb->data is controlled by the attacker and has only been sanitized in
    the most trivial ways (CRC check), therefore we can consider the
    create_info struct and all of its members to tainted. 'create_info->pipe'
    with max value of 255 (uint8) is used to take an offset of the
    hdev->pipes array of 127 elements which can lead to OOB write.
    
    Cc: Samuel Ortiz <sameo@linux.intel.com>
    Cc: Allen Pais <allen.pais@oracle.com>
    Cc: "David S. Miller" <davem@davemloft.net>
    Suggested-by: Kevin Deus <kdeus@google.com>
    Signed-off-by: Suren Baghdasaryan <surenb@google.com>
    Acked-by: Kees Cook <keescook@chromium.org>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6ead7a8a4ec1c69c39951d96ba397010c7d14e26
Author: Suren Baghdasaryan <surenb@google.com>
Date:   Mon Sep 17 15:51:41 2018 +0200

    NFC: Fix the number of pipes
    
    commit e285d5bfb7e9785d289663baef252dd315e171f8 upstream.
    
    According to ETSI TS 102 622 specification chapter 4.4 pipe identifier
    is 7 bits long which allows for 128 unique pipe IDs. Because
    NFC_HCI_MAX_PIPES is used as the number of pipes supported and not
    as the max pipe ID, its value should be 128 instead of 127.
    
    nfc_hci_recv_from_llc extracts pipe ID from packet header using
    NFC_HCI_FRAGMENT(0x7F) mask which allows for pipe ID value of 127.
    Same happens when NCI_HCP_MSG_GET_PIPE() is being used. With
    pipes array having only 127 elements and pipe ID of 127 the OOB memory
    access will result.
    
    Cc: Samuel Ortiz <sameo@linux.intel.com>
    Cc: Allen Pais <allen.pais@oracle.com>
    Cc: "David S. Miller" <davem@davemloft.net>
    Suggested-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Suren Baghdasaryan <surenb@google.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4a16b3cd084df928ae2b19cf9cf61c406de8a80d
Author: Suren Baghdasaryan <surenb@google.com>
Date:   Mon Sep 17 15:51:40 2018 +0200

    NFC: Fix possible memory corruption when handling SHDLC I-Frame commands
    
    commit 674d9de02aa7d521ebdf66c3958758bdd9c64e11 upstream.
    
    When handling SHDLC I-Frame commands "pipe" field used for indexing
    into an array should be checked before usage. If left unchecked it
    might access memory outside of the array of size NFC_HCI_MAX_PIPES(127).
    
    Malformed NFC HCI frames could be injected by a malicious NFC device
    communicating with the device being attacked (remote attack vector),
    or even by an attacker with physical access to the I2C bus such that
    they could influence the data transfers on that bus (local attack vector).
    skb->data is controlled by the attacker and has only been sanitized in
    the most trivial ways (CRC check), therefore we can consider the
    create_info struct and all of its members to tainted. 'create_info->pipe'
    with max value of 255 (uint8) is used to take an offset of the
    hdev->pipes array of 127 elements which can lead to OOB write.
    
    Cc: Samuel Ortiz <sameo@linux.intel.com>
    Cc: Allen Pais <allen.pais@oracle.com>
    Cc: "David S. Miller" <davem@davemloft.net>
    Suggested-by: Kevin Deus <kdeus@google.com>
    Signed-off-by: Suren Baghdasaryan <surenb@google.com>
    Acked-by: Kees Cook <keescook@chromium.org>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 58be75ff08789de700a75a12a092f4a2b778296b
Author: Suren Baghdasaryan <surenb@google.com>
Date:   Mon Sep 17 15:51:41 2018 +0200

    NFC: Fix the number of pipes
    
    commit e285d5bfb7e9785d289663baef252dd315e171f8 upstream.
    
    According to ETSI TS 102 622 specification chapter 4.4 pipe identifier
    is 7 bits long which allows for 128 unique pipe IDs. Because
    NFC_HCI_MAX_PIPES is used as the number of pipes supported and not
    as the max pipe ID, its value should be 128 instead of 127.
    
    nfc_hci_recv_from_llc extracts pipe ID from packet header using
    NFC_HCI_FRAGMENT(0x7F) mask which allows for pipe ID value of 127.
    Same happens when NCI_HCP_MSG_GET_PIPE() is being used. With
    pipes array having only 127 elements and pipe ID of 127 the OOB memory
    access will result.
    
    Cc: Samuel Ortiz <sameo@linux.intel.com>
    Cc: Allen Pais <allen.pais@oracle.com>
    Cc: "David S. Miller" <davem@davemloft.net>
    Suggested-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Suren Baghdasaryan <surenb@google.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0ad778eeee6d42b61bbf4494c7de22e387a2a05e
Author: Suren Baghdasaryan <surenb@google.com>
Date:   Mon Sep 17 15:51:40 2018 +0200

    NFC: Fix possible memory corruption when handling SHDLC I-Frame commands
    
    commit 674d9de02aa7d521ebdf66c3958758bdd9c64e11 upstream.
    
    When handling SHDLC I-Frame commands "pipe" field used for indexing
    into an array should be checked before usage. If left unchecked it
    might access memory outside of the array of size NFC_HCI_MAX_PIPES(127).
    
    Malformed NFC HCI frames could be injected by a malicious NFC device
    communicating with the device being attacked (remote attack vector),
    or even by an attacker with physical access to the I2C bus such that
    they could influence the data transfers on that bus (local attack vector).
    skb->data is controlled by the attacker and has only been sanitized in
    the most trivial ways (CRC check), therefore we can consider the
    create_info struct and all of its members to tainted. 'create_info->pipe'
    with max value of 255 (uint8) is used to take an offset of the
    hdev->pipes array of 127 elements which can lead to OOB write.
    
    Cc: Samuel Ortiz <sameo@linux.intel.com>
    Cc: Allen Pais <allen.pais@oracle.com>
    Cc: "David S. Miller" <davem@davemloft.net>
    Suggested-by: Kevin Deus <kdeus@google.com>
    Signed-off-by: Suren Baghdasaryan <surenb@google.com>
    Acked-by: Kees Cook <keescook@chromium.org>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 434e6df2f7fd7e9b11feb0af23f1cb4dbab80b42
Author: Rex Zhu <Rex.Zhu@amd.com>
Date:   Tue Aug 28 18:20:19 2018 +0800

    drm/amdgpu: Refine function name
    
    change function name gfx_v6/7/8/9_0_gpu_init to
    gfx_v6/7/8/9_0_constants_init.
    this function is just for init gfx constants such
    as max pipes, render backends...
    
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Rex Zhu <Rex.Zhu@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 93b100ddda3be284be160e9ccba28c7f8f21ab73
Author: Harry Wentland <harry.wentland@amd.com>
Date:   Mon Jul 9 13:48:12 2018 -0400

    drm/amd/pp: Send khz clock values to DC for smu7/8
    
    [ Upstream commit c3cb424a086921f6bb0449b10d998352a756d6d5 ]
    
    The previous change wasn't covering smu 7 and 8 and therefore DC was
    seeing wrong clock values.
    
    This fixes an issue where the pipes seem to hang with a 4k DP and 1080p
    HDMI display.
    
    Fixes: c3df50abc84b ("drm/amd/pp: Convert clock unit to KHz as defined")
    Signed-off-by: Harry Wentland <harry.wentland@amd.com>
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Cc:rex.zhu@amd.com
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e285d5bfb7e9785d289663baef252dd315e171f8
Author: Suren Baghdasaryan <surenb@google.com>
Date:   Mon Sep 17 15:51:41 2018 +0200

    NFC: Fix the number of pipes
    
    According to ETSI TS 102 622 specification chapter 4.4 pipe identifier
    is 7 bits long which allows for 128 unique pipe IDs. Because
    NFC_HCI_MAX_PIPES is used as the number of pipes supported and not
    as the max pipe ID, its value should be 128 instead of 127.
    
    nfc_hci_recv_from_llc extracts pipe ID from packet header using
    NFC_HCI_FRAGMENT(0x7F) mask which allows for pipe ID value of 127.
    Same happens when NCI_HCP_MSG_GET_PIPE() is being used. With
    pipes array having only 127 elements and pipe ID of 127 the OOB memory
    access will result.
    
    Cc: Samuel Ortiz <sameo@linux.intel.com>
    Cc: Allen Pais <allen.pais@oracle.com>
    Cc: "David S. Miller" <davem@davemloft.net>
    Suggested-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Suren Baghdasaryan <surenb@google.com>
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 674d9de02aa7d521ebdf66c3958758bdd9c64e11
Author: Suren Baghdasaryan <surenb@google.com>
Date:   Mon Sep 17 15:51:40 2018 +0200

    NFC: Fix possible memory corruption when handling SHDLC I-Frame commands
    
    When handling SHDLC I-Frame commands "pipe" field used for indexing
    into an array should be checked before usage. If left unchecked it
    might access memory outside of the array of size NFC_HCI_MAX_PIPES(127).
    
    Malformed NFC HCI frames could be injected by a malicious NFC device
    communicating with the device being attacked (remote attack vector),
    or even by an attacker with physical access to the I2C bus such that
    they could influence the data transfers on that bus (local attack vector).
    skb->data is controlled by the attacker and has only been sanitized in
    the most trivial ways (CRC check), therefore we can consider the
    create_info struct and all of its members to tainted. 'create_info->pipe'
    with max value of 255 (uint8) is used to take an offset of the
    hdev->pipes array of 127 elements which can lead to OOB write.
    
    Cc: Samuel Ortiz <sameo@linux.intel.com>
    Cc: Allen Pais <allen.pais@oracle.com>
    Cc: "David S. Miller" <davem@davemloft.net>
    Suggested-by: Kevin Deus <kdeus@google.com>
    Signed-off-by: Suren Baghdasaryan <surenb@google.com>
    Acked-by: Kees Cook <keescook@chromium.org>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1e7e7a541e0812df95ebeb73828118a88283a35d
Author: Mikita Lipski <mikita.lipski@amd.com>
Date:   Thu Aug 2 09:45:09 2018 -0400

    drm/amd/display: Check if clock source in use before disabling
    
    commit ad8960a6cb06c446d0a391ce095f6f28edf36aff upstream.
    
    [why]
    We are disabling clock source while other pipes are still using
    it, because we don't verify the number of pipes that share it.
    
    [how]
    - Adding a function in resources to return the number of pipes
    sharing the clock source.
    - Checking that no one is sharing the clock source before disabling
    
    Signed-off-by: Mikita Lipski <mikita.lipski@amd.com>
    Reviewed-by: Harry Wentland <Harry.Wentland@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e8e4fbf8d8905071c045f2922de55adbe1a6abe
Author: Hersen Wu <hersenxs.wu@amd.com>
Date:   Tue Aug 21 09:35:47 2018 -0400

    drm/amd/display: num of sw i2c/aux engines less than num of connectors
    
    [why]
    AMD Stoney reference board, there are only 2 pipes (not include
    underlay), and 3 connectors. resource creation, only
    2 I2C/AUX engines are created. Within dc_link_aux_transfer, when
    pin_data_en =2, refer to enengines[ddc_pin->pin_data->en] = NULL.
    NULL point is referred later causing system crash.
    
    [how]
    each asic design has fixed number of ddc engines at hw side.
    for each ddc engine, create its i2x/aux engine at sw side.
    
    Signed-off-by: Hersen Wu <hersenxs.wu@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 795dbf0fd20cd351178358f90503b56f766ddc3d
Author: Lorenzo Bianconi <lorenzo.bianconi@redhat.com>
Date:   Sat Aug 25 12:40:45 2018 +0200

    mt76x0: use mt76u_init for bus initialization
    
    Use mt76u_init utility routine for usb initialization.
    Moreover remove following unused routines:
    - mt76x0_rr
    - mt76x0_wr
    - mt76x0_rmw
    - mt76x0_wr_copy
    - mt76x0_assign_pipes
    
    Signed-off-by: Lorenzo Bianconi <lorenzo.bianconi@redhat.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit 80ab316901bc4ae6dd0b5903dbe22766307eac9b
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Fri Aug 17 11:02:41 2018 +0100

    drm/i915/audio: Hook up component bindings even if displays are disabled
    
    If the display has been disabled by modparam, we still want to connect
    together the HW bits and bobs with the associated drivers so that we can
    continue to manage their runtime power gating.
    
    Fixes: 108109444ff6 ("drm/i915: Check num_pipes before initializing audio component")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Imre Deak <imre.deak@intel.com>
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Jani Nikula <jani.nikula@linux.intel.com>
    Cc: Elaine Wang <elaine.wang@intel.com>
    Reviewed-by: Imre Deak <imre.deak@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180817100241.4628-1-chris@chris-wilson.co.uk
    (cherry picked from commit 35a5fd9ebfa93758ca579e30f337b6c9126d995b)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>

commit 94a4ffd1d40b845dd19f9fdbb2cb6bf32de0946b
Author: Gloria Li <geling.li@amd.com>
Date:   Thu Jul 26 11:32:14 2018 -0400

    drm/amd/display: fix PIP bugs on Dal3
    
    [Why]
    There are outstanding bugs for PIP in Dal3:
    -Crash when toggling PIP visibility
    -Global Alpha is not working, Adjusting global alpha
     doesn’t have an effect
    -Cursor is not working with pip plane and pipe splits
    -One flash occurs when cursor enters PIP plane from
     top/bottom
    -Crash when moving PIP plane off the screen
    
    [How]
    Resolve divide by 0 error
    Implement global alpha
    Program cursor on all pipes
    Add dst rects' x and y offests into cursor position
    Disable cursor when it is beyond bottom/top edge
    
    Signed-off-by: Gloria Li <geling.li@amd.com>
    Reviewed-by: Aric Cyr <Aric.Cyr@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit d02e07948fcff46a7a48f8747260941d7290774b
Author: Nikola Cornij <nikola.cornij@amd.com>
Date:   Thu Jul 19 14:03:14 2018 -0400

    drm/amd/display: Print DPP DTN log info only for enabled pipes
    
    [why]
    There is currently a dependency on the order in which tests are executed.
    This is because the non-relevant state info is being printed, which results
    in the output based on the state from the previous test.
    
    [how]
    Print DPP DTN log only if the pipe is enabled.
    In addition to the affected per-submission DTN golden logs, included in this
    change is also DTN golden log update for pre-submission tests.
    The other DTN golden logs affected by this change will be updated upon
    nightly test run (which will generate the updated DTN logs).
    
    Signed-off-by: Nikola Cornij <nikola.cornij@amd.com>
    Reviewed-by: Nikola Cornij <Nikola.Cornij@amd.com>
    Acked-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit da9135048ed7ff854fda1e7cb5df5aa2273bb624
Author: David Francis <David.Francis@amd.com>
Date:   Thu Jul 12 10:07:49 2018 -0400

    amd/dc/dce100: On dce100, set clocks to 0 on suspend
    
    [ Upstream commit 8d4235f71513cdccd9dc52b674323c3591552bc1 ]
    
    [Why]
    When a dce100 asic was suspended, the clocks were not set to 0.
    Upon resume, the new clock was compared to the existing clock,
    they were found to be the same, and so the clock was not set.
    This resulted in a pernicious blackscreen.
    
    [How]
    In atomic commit, check to see if there are any active pipes.
    If no, set clocks to 0
    
    Signed-off-by: David Francis <David.Francis@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 002b343669c474151954266e7fcf727bf7faa851
Author: Davidlohr Bueso <dave@stgolabs.net>
Date:   Tue Aug 21 21:56:38 2018 -0700

    fs/epoll: loosen irq safety in ep_scan_ready_list()
    
    Patch series "fs/epoll: loosen irq safety when possible".
    
    Both patches replace saving+restoring interrupts when taking the ep->lock
    (now the waitqueue lock), with just disabling local irqs.  This shows
    immediate performance benefits in patch 1 for an epoll workload running on
    Xen.  The main concern we need to have with this sort of changes in epoll
    is the ep_poll_callback() which is passed to the wait queue wakeup and is
    done very often under irq context, this patch does not touch this call.
    
    Patches have been tested pretty heavily with the customer workload,
    microbenchmarks, ltp testcases and two high level workloads that use epoll
    under the hood: nginx and libevent benchmarks.
    
    This patch (of 2):
    
    Saving and restoring interrupts in ep_scan_ready_list() is an
    overkill as it is never called with interrupts disabled. Loosen
    this to simply disabling local irqs such that archs where managing
    irqs is expensive or virtual environments. This patch yields
    some throughput improvements on a workload that is epoll intensive
    running on a single Xen DomU.
    
    1 Job    7500   -->    8800 enq/s  (+17%)
    2 Jobs  14000   -->   15200 enq/s  (+8%)
    3 Jobs  20500   -->   22300 enq/s  (+8%)
    4 Jobs  25000   -->   28000 enq/s  (+8-12)%
    
    On bare metal:
    
    For a 2-socket 40-core (ht) IvyBridge on a few workloads, unfortunately I
    don't have a xen environment and the results for Xen I do have (which
    numbers are in patch 1) I don't have the actual workload, so cannot
    compare them directly.
    
    1) Different configurations were used for a epoll_wait (pipes io)
       microbench (http://linux-scalability.org/epoll/epoll-test.c) and shows
       around a 7-10% improvement in overall total number of times the
       epoll_wait() loops when using both regular and nested epolls, so very
       raw numbers, but measurable nonetheless.
    
    # threads       vanilla         dirty
         1          1677717         1805587
         2          1660510         1854064
         4          1610184         1805484
         8          1577696         1751222
         16         1568837         1725299
         32         1291532         1378463
         64          752584          787368
    
       Note that stddev is pretty small.
    
    2) Another pipe test, which shows no real measurable improvement.
       (http://www.xmailserver.org/linux-patches/pipetest.c)
    
    Link: http://lkml.kernel.org/r/20180720172956.2883-2-dave@stgolabs.net
    Signed-off-by: Davidlohr Bueso <dbueso@suse.de>
    Cc: Jason Baron <jbaron@akamai.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 35a5fd9ebfa93758ca579e30f337b6c9126d995b
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Fri Aug 17 11:02:41 2018 +0100

    drm/i915/audio: Hook up component bindings even if displays are disabled
    
    If the display has been disabled by modparam, we still want to connect
    together the HW bits and bobs with the associated drivers so that we can
    continue to manage their runtime power gating.
    
    Fixes: 108109444ff6 ("drm/i915: Check num_pipes before initializing audio component")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Imre Deak <imre.deak@intel.com>
    Cc: Takashi Iwai <tiwai@suse.de>
    Cc: Jani Nikula <jani.nikula@linux.intel.com>
    Cc: Elaine Wang <elaine.wang@intel.com>
    Reviewed-by: Imre Deak <imre.deak@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180817100241.4628-1-chris@chris-wilson.co.uk

commit ad8960a6cb06c446d0a391ce095f6f28edf36aff
Author: Mikita Lipski <mikita.lipski@amd.com>
Date:   Thu Aug 2 09:45:09 2018 -0400

    drm/amd/display: Check if clock source in use before disabling
    
    [why]
    We are disabling clock source while other pipes are still using
    it, because we don't verify the number of pipes that share it.
    
    [how]
    - Adding a function in resources to return the number of pipes
    sharing the clock source.
    - Checking that no one is sharing the clock source before disabling
    
    Signed-off-by: Mikita Lipski <mikita.lipski@amd.com>
    Reviewed-by: Harry Wentland <Harry.Wentland@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org

commit 41db645a33e775855aeeec1a437d5c1e24ff6c88
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Thu Jul 12 12:57:29 2018 +0100

    drm/i915: Bump priority of clean up work
    
    We require that we keep the list of outstanding work short so that we do
    not "leak" memory while pageflipping under stress. However that system
    stress may delay kernel workers virtually indefinitely, which incurs the
    pageflips stall and eventually hit a timeout waiting for the cleanup.
    
    Try to combat CPU starvation of our short-lived cleanup workers by
    switching to a high priority workqueue.
    
    Testcase: igt/kms_cursor_legacy/all-pipes-torture-move
    References: https://bugs.freedesktop.org/show_bug.cgi?id=107122
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Reviewed-by: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180712115729.3506-1-chris@chris-wilson.co.uk

commit cf1f697acb04d2e06c117436cc55e52760f1ea7c
Author: Mahesh Kumar <mahesh1.kumar@intel.com>
Date:   Wed Aug 1 20:41:13 2018 +0530

    drm/i915/skl: distribute DDB based on panel resolution
    
    We distribute DDB equally among all pipes irrespective of display
    buffer requirement of each pipe. This leads to a situation where high
    resolution y-tiled display can not be enabled with 2 low resolution
    displays.
    
    Main contributing factor for DDB requirement is width of the display.
    This patch make changes to distribute ddb based on display width.
    So display with higher width will get bigger chunk of DDB.
    
    Changes Since V1:
     - pipe_size/ddb_size will not overflow u16 so use appropriate
       data-types during computation (Chris)
    Changes Since V2:
     - avoid redundancy and possible truncation errors (Chris)
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=107113
    Cc: raviraj.p.sitaram@intel.com
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Mahesh Kumar <mahesh1.kumar@intel.com>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180801151113.5337-1-mahesh1.kumar@intel.com

commit a6f6cdefd408f4ab74060538931241a95fc2362b
Merge: 500775074f88 81f2b25addde
Author: Dave Airlie <airlied@redhat.com>
Date:   Fri Jul 27 12:20:04 2018 +1000

    Merge tag 'imx-drm-next-2018-07-20' of git://git.pengutronix.de/git/pza/linux into drm-next
    
    drm/imx: cleanup and csi improvements
    
    - Remove the unused struct imx_drm_crtc and the unused pipes field
      from imx_drm_device and replace drm_dev_unref with drm_dev_put.
    - Extend CSI configuration to support RGB888 and BGR888 capture,
      as well as 16-bit RGB565 capture via a parallel bus.
    - Add CPMEM support for negative interlace offsets, which is
      necessary to support writing captured bottom-top interlaced
      fields to memory with interleaved lines.
    
    Signed-off-by: Dave Airlie <airlied@redhat.com>
    
    Link: https://patchwork.freedesktop.org/patch/msgid/1532100583.3438.9.camel@pengutronix.de

commit 25fdd5933e4c0f5fe2ea5cd59994f8ac5fbe90ef
Author: Jeykumar Sankaran <jsanka@codeaurora.org>
Date:   Wed Jun 27 15:26:09 2018 -0400

    drm/msm: Add SDM845 DPU support
    
    SDM845 SoC includes the Mobile Display Sub System (MDSS) which is a
    top level wrapper consisting of Display Processing Unit (DPU) and
    display peripheral modules such as Display Serial Interface (DSI)
    and DisplayPort (DP).
    
    MDSS functions essentially as a back-end composition engine. It blends
    video and graphic images stored in the frame buffers and scans out the
    composed image to a display sink (over DSI/DP).
    
    The following diagram represents hardware blocks for a simple pipeline
    (two planes are present on a given crtc which is connected to a DSI
    connector):
    
           MDSS
          +---------------------------------+
          | +-----------------------------+ |
          | | DPU                         | |
          | |  +--------+  +--------+     | |
          | |  |  SSPP  |  |  SSPP  |     | |
          | |  +----+---+  +----+---+     | |
          | |       |           |         | |
          | |  +----v-----------v---+     | |
          | |  |  Layer Mixer (LM)  |     | |
          | |  +--------------------+     | |
          | |  +--------------------+     | |
          | |  |    PingPong (PP)   |     | |
          | |  +--------------------+     | |
          | |  +--------------------+     | |
          | |  |  INTERFACE (VIDEO) |     | |
          | |  +---+----------------+     | |
          | +------|----------------------+ |
          |        |                        |
          | +------|---------------------+  |
          | |      | DISPLAY PERIPHERALS |  |
          | |  +---v-+      +-----+      |  |
          | |  | DSI |      |  DP |      |  |
          | |  +-----+      +-----+      |  |
          | +----------------------------+  |
          +---------------------------------+
    
    The number of DPU sub-blocks (i.e. SSPPs, LMs, PP blocks and INTFs)
    depends on SoC capabilities.
    
    Overview of DPU sub-blocks:
    ---------------------------
    * Source Surface Processor (SSPP):
     Refers to any of hardware pipes like ViG, DMA etc. Only ViG pipes are
     capable of performing format conversion, scaling and quality improvement
     for source surfaces.
    
    * Layer Mixer (LM):
     Blend source surfaces together (in requested zorder)
    
    * PingPong (PP):
     This block controls frame done interrupt output, EOL and EOF generation,
     overflow/underflow control.
    
    * Display interface (INTF):
     Timing generator and interface connecting the display peripherals.
    
    DRM components mapping to DPU architecture:
    ------------------------------------------
    PLANEs maps to SSPPs
    CRTC maps to LMs
    Encoder maps to PPs, INTFs
    
    Data flow setup:
    ---------------
    MDSS hardware can support various data flows (e.g.):
      - Dual pipe: Output from two LMs combined to single display.
      - Split display: Output from two LMs connected to two separate
                       interfaces.
    
    The hardware capabilities determine the number of concurrent data paths
    possible. Any control path (i.e. pipeline w/i DPU) can be routed to any
    of the hardware data paths. A given control path can be triggered,
    flushed and controlled independently.
    
    Changes in v3:
    - Move msm_media_info.h from uapi to dpu/ subdir
    - Remove preclose callback dpu (it's handled in core)
    - Fix kbuild warnings with parent_ops
    - Remove unused functions from dpu_core_irq
    - Rename mdss_phys to mdss
    - Rename mdp_phys address space to mdp
    - Drop _phys from vbif and regdma binding names
    
    Signed-off-by: Abhinav Kumar <abhinavk@codeaurora.org>
    Signed-off-by: Archit Taneja <architt@codeaurora.org>
    Signed-off-by: Chandan Uddaraju <chandanu@codeaurora.org>
    Signed-off-by: Jeykumar Sankaran <jsanka@codeaurora.org>
    Signed-off-by: Jordan Crouse <jcrouse@codeaurora.org>
    Signed-off-by: Rajesh Yadav <ryadav@codeaurora.org>
    Signed-off-by: Sravanthi Kollukuduru <skolluku@codeaurora.org>
    Signed-off-by: Sean Paul <seanpaul@chromium.org>
    [robclark minor rebase]
    Signed-off-by: Rob Clark <robdclark@gmail.com>

commit 278ca8d677cf7bcecd2b2f287838e5f344f5911e
Author: David Francis <David.Francis@amd.com>
Date:   Wed Jul 11 16:20:13 2018 -0400

    drm/amd/display: On dce100, set clocks to 0 on suspend
    
    [Why]
    When a dce100 asic was suspended, the clocks were not set to 0.
    Upon resume, the new clock was compared to the existing clock,
    they were found to be the same, and so the clock was not set.
    This resulted in a pernicious blackscreen.
    
    [How]
    In atomic commit, check to see if there are any active pipes.
    If no, set clocks to 0
    
    Signed-off-by: David Francis <David.Francis@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Leo Li <sunpeng.li@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 81f2b25adddeff2fc7fdd1f23f889d018ba65466
Author: Leonard Crestez <leonard.crestez@nxp.com>
Date:   Tue Jul 17 15:11:28 2018 +0300

    drm/imx: Remove unused field imx_drm_device.pipes
    
    This has been unused since commit 44b460cfe554 ("drm: imx: remove struct
    imx_drm_crtc and imx_drm_crtc_helper_funcs")
    
    Signed-off-by: Leonard Crestez <leonard.crestez@nxp.com>
    Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>

commit ece4147fea152fe0761d67b825fb4b4b9f94349b
Author: Ken Chalmers <ken.chalmers@amd.com>
Date:   Wed Jun 27 12:48:21 2018 -0400

    drm/amd/display: Fix new stream count check in dc_add_stream_to_ctx
    
    [Why]
    The previous code could allow through attempts to enable more streams
    than there are timing generators, in designs where the number of pipes
    is greater than the number of timing generators.
    
    [How]
    Compare the new stream count to the resource pool's timing generator
    count, instead of its pipe count.  Also correct a typo in the error
    message.
    
    Signed-off-by: Ken Chalmers <ken.chalmers@amd.com>
    Reviewed-by: Charlene Liu <Charlene.Liu@amd.com>
    Acked-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit f88c5ee77496886071e76b5b9fdfee7158f6d079
Author: Jernej Skrabec <jernej.skrabec@siol.net>
Date:   Fri Jul 6 18:47:32 2018 +0200

    drm/sun4i: Implement zpos for DE2
    
    Initial implementation of DE2 planes only supported fixed zpos.
    
    Expand implementation with configurable zpos property.
    
    Implementation background:
    Channel in DE2 driver represents one DRM plane, whereas pipe is just
    mapped channel to known Z position. Pipe 0 will always be at the bottom,
    pipe 1 just above pipe 0 and so on. If, for example, channel 1 is mapped
    at pipe 0 and channel 0 at pipe 1, whatever is on channel 0 will appear
    on top.
    
    Before this commit, channel id was used for addressing channel related
    registers (prefixed with SUN8I_MIXER_CHAN_UI_ or SUN8I_MIXER_CHAN_VI_)
    and pipe registers (prefixed with SUN8I_MIXER_BLEND_). Additionally,
    register SUN8I_MIXER_BLEND_ROUTE, which takes care for mapping channels
    to pipes had fixed value. It mapped channel 0 to pipe 0, 1 to 1 and so
    on. Consequence of all that was fixed Z order of planes.
    
    With this commit, pipe registers are using zpos property as index and
    channel related registers still use channel id as index. Pipe mapping
    register is now set dynamically too and pipe enable register is rebuild
    every time to make sure only active pipes are enabled.
    
    Testing was done to confirm that there is no issues if bottom plane
    contains pixels with alpha value < 0xff and if it doesn't whole screen.
    
    Tested-by: Paul Kocialkowski <paul.kocialkowski@bootlin.com>
    Signed-off-by: Jernej Skrabec <jernej.skrabec@siol.net>
    Signed-off-by: Maxime Ripard <maxime.ripard@bootlin.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180706164732.24166-1-jernej.skrabec@siol.net

commit 8d4235f71513cdccd9dc52b674323c3591552bc1
Author: David Francis <David.Francis@amd.com>
Date:   Thu Jul 12 10:07:49 2018 -0400

    amd/dc/dce100: On dce100, set clocks to 0 on suspend
    
    [Why]
    When a dce100 asic was suspended, the clocks were not set to 0.
    Upon resume, the new clock was compared to the existing clock,
    they were found to be the same, and so the clock was not set.
    This resulted in a pernicious blackscreen.
    
    [How]
    In atomic commit, check to see if there are any active pipes.
    If no, set clocks to 0
    
    Signed-off-by: David Francis <David.Francis@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit c3cb424a086921f6bb0449b10d998352a756d6d5
Author: Harry Wentland <harry.wentland@amd.com>
Date:   Mon Jul 9 13:48:12 2018 -0400

    drm/amd/pp: Send khz clock values to DC for smu7/8
    
    The previous change wasn't covering smu 7 and 8 and therefore DC was
    seeing wrong clock values.
    
    This fixes an issue where the pipes seem to hang with a 4k DP and 1080p
    HDMI display.
    
    Fixes: c3df50abc84b ("drm/amd/pp: Convert clock unit to KHz as defined")
    Signed-off-by: Harry Wentland <harry.wentland@amd.com>
    Acked-by: Alex Deucher <alexander.deucher@amd.com>
    Cc:rex.zhu@amd.com
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 0aaa03fae25eaa40620434b87da86362a21a3cf1
Author: Eric Biggers <ebiggers@google.com>
Date:   Tue Feb 6 15:41:53 2018 -0800

    pipe: actually allow root to exceed the pipe buffer limits
    
    commit 85c2dd5473b2718b4b63e74bfeb1ca876868e11f upstream.
    
    pipe-user-pages-hard and pipe-user-pages-soft are only supposed to apply
    to unprivileged users, as documented in both Documentation/sysctl/fs.txt
    and the pipe(7) man page.
    
    However, the capabilities are actually only checked when increasing a
    pipe's size using F_SETPIPE_SZ, not when creating a new pipe.  Therefore,
    if pipe-user-pages-hard has been set, the root user can run into it and be
    unable to create pipes.  Similarly, if pipe-user-pages-soft has been set,
    the root user can run into it and have their pipes limited to 1 page each.
    
    Fix this by allowing the privileged override in both cases.
    
    Link: http://lkml.kernel.org/r/20180111052902.14409-4-ebiggers3@gmail.com
    Fixes: 759c01142a5d ("pipe: limit the per-user amount of pages allocated in pipes")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Acked-by: Kees Cook <keescook@chromium.org>
    Acked-by: Joe Lawrence <joe.lawrence@redhat.com>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: "Luis R . Rodriguez" <mcgrof@kernel.org>
    Cc: Michael Kerrisk <mtk.manpages@gmail.com>
    Cc: Mikulas Patocka <mpatocka@redhat.com>
    Cc: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 4fa253ccefc1f3ea800e81fac82c28c442328c1c
Author: Eric Biggers <ebiggers@google.com>
Date:   Tue Feb 6 15:41:45 2018 -0800

    pipe, sysctl: drop 'min' parameter from pipe-max-size converter
    
    commit 4c2e4befb3cc9ce42d506aa537c9ab504723e98c upstream.
    
    Patch series "pipe: buffer limits fixes and cleanups", v2.
    
    This series simplifies the sysctl handler for pipe-max-size and fixes
    another set of bugs related to the pipe buffer limits:
    
    - The root user wasn't allowed to exceed the limits when creating new
      pipes.
    
    - There was an off-by-one error when checking the limits, so a limit of
      N was actually treated as N - 1.
    
    - F_SETPIPE_SZ accepted values over UINT_MAX.
    
    - Reading the pipe buffer limits could be racy.
    
    This patch (of 7):
    
    Before validating the given value against pipe_min_size,
    do_proc_dopipe_max_size_conv() calls round_pipe_size(), which rounds the
    value up to pipe_min_size.  Therefore, the second check against
    pipe_min_size is redundant.  Remove it.
    
    Link: http://lkml.kernel.org/r/20180111052902.14409-2-ebiggers3@gmail.com
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Acked-by: Kees Cook <keescook@chromium.org>
    Acked-by: Joe Lawrence <joe.lawrence@redhat.com>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: "Luis R . Rodriguez" <mcgrof@kernel.org>
    Cc: Michael Kerrisk <mtk.manpages@gmail.com>
    Cc: Mikulas Patocka <mpatocka@redhat.com>
    Cc: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    [bwh: Backported to 3.16: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 968c7922b163c2dacce033d309c9d0f646d8baac
Author: Michael Kerrisk (man-pages) <mtk.manpages@gmail.com>
Date:   Tue Oct 11 13:53:43 2016 -0700

    pipe: cap initial pipe capacity according to pipe-max-size limit
    
    commit 086e774a57fba4695f14383c0818994c0b31da7c upstream.
    
    This is a patch that provides behavior that is more consistent, and
    probably less surprising to users. I consider the change optional, and
    welcome opinions about whether it should be applied.
    
    By default, pipes are created with a capacity of 64 kiB.  However,
    /proc/sys/fs/pipe-max-size may be set smaller than this value.  In this
    scenario, an unprivileged user could thus create a pipe whose initial
    capacity exceeds the limit. Therefore, it seems logical to cap the
    initial pipe capacity according to the value of pipe-max-size.
    
    The test program shown earlier in this patch series can be used to
    demonstrate the effect of the change brought about with this patch:
    
        # cat /proc/sys/fs/pipe-max-size
        1048576
        # sudo -u mtk ./test_F_SETPIPE_SZ 1
        Initial pipe capacity: 65536
        # echo 10000 > /proc/sys/fs/pipe-max-size
        # cat /proc/sys/fs/pipe-max-size
        16384
        # sudo -u mtk ./test_F_SETPIPE_SZ 1
        Initial pipe capacity: 16384
        # ./test_F_SETPIPE_SZ 1
        Initial pipe capacity: 65536
    
    The last two executions of 'test_F_SETPIPE_SZ' show that pipe-max-size
    caps the initial allocation for a new pipe for unprivileged users, but
    not for privileged users.
    
    Link: http://lkml.kernel.org/r/31dc7064-2a17-9c5b-1df1-4e3012ee992c@gmail.com
    Signed-off-by: Michael Kerrisk <mtk.manpages@gmail.com>
    Reviewed-by: Vegard Nossum <vegard.nossum@oracle.com>
    Cc: Willy Tarreau <w@1wt.eu>
    Cc: <socketpair@gmail.com>
    Cc: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Cc: Jens Axboe <axboe@fb.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 35f088bd4808e58ca6c644aaaeec033b4cc70092
Author: Michael Kerrisk (man-pages) <mtk.manpages@gmail.com>
Date:   Tue Oct 11 13:53:31 2016 -0700

    pipe: fix limit checking in pipe_set_size()
    
    commit b0b91d18e2e97b741b294af9333824ecc3fadfd8 upstream.
    
    The limit checking in pipe_set_size() (used by fcntl(F_SETPIPE_SZ))
    has the following problems:
    
    (1) When increasing the pipe capacity, the checks against the limits in
        /proc/sys/fs/pipe-user-pages-{soft,hard} are made against existing
        consumption, and exclude the memory required for the increased pipe
        capacity. The new increase in pipe capacity can then push the total
        memory used by the user for pipes (possibly far) over a limit. This
        can also trigger the problem described next.
    
    (2) The limit checks are performed even when the new pipe capacity is
        less than the existing pipe capacity. This can lead to problems if a
        user sets a large pipe capacity, and then the limits are lowered,
        with the result that the user will no longer be able to decrease the
        pipe capacity.
    
    (3) As currently implemented, accounting and checking against the
        limits is done as follows:
    
        (a) Test whether the user has exceeded the limit.
        (b) Make new pipe buffer allocation.
        (c) Account new allocation against the limits.
    
        This is racey. Multiple processes may pass point (a)
        simultaneously, and then allocate pipe buffers that are accounted
        for only in step (c).  The race means that the user's pipe buffer
        allocation could be pushed over the limit (by an arbitrary amount,
        depending on how unlucky we were in the race). [Thanks to Vegard
        Nossum for spotting this point, which I had missed.]
    
    This patch addresses the above problems as follows:
    
    * Perform checks against the limits only when increasing a pipe's
      capacity; an unprivileged user can always decrease a pipe's capacity.
    * Alter the checks against limits to include the memory required for
      the new pipe capacity.
    * Re-order the accounting step so that it precedes the buffer
      allocation. If the accounting step determines that a limit has
      been reached, revert the accounting and cause the operation to fail.
    
    The program below can be used to demonstrate problems 1 and 2, and the
    effect of the fix. The program takes one or more command-line arguments.
    The first argument specifies the number of pipes that the program should
    create. The remaining arguments are, alternately, pipe capacities that
    should be set using fcntl(F_SETPIPE_SZ), and sleep intervals (in
    seconds) between the fcntl() operations. (The sleep intervals allow the
    possibility to change the limits between fcntl() operations.)
    
    Problem 1
    =========
    
    Using the test program on an unpatched kernel, we first set some
    limits:
    
        # echo 0 > /proc/sys/fs/pipe-user-pages-soft
        # echo 1000000000 > /proc/sys/fs/pipe-max-size
        # echo 10000 > /proc/sys/fs/pipe-user-pages-hard    # 40.96 MB
    
    Then show that we can set a pipe with capacity (100MB) that is
    over the hard limit
    
        # sudo -u mtk ./test_F_SETPIPE_SZ 1 100000000
        Initial pipe capacity: 65536
            Loop 1: set pipe capacity to 100000000 bytes
                F_SETPIPE_SZ returned 134217728
    
    Now set the capacity to 100MB twice. The second call fails (which is
    probably surprising to most users, since it seems like a no-op):
    
        # sudo -u mtk ./test_F_SETPIPE_SZ 1 100000000 0 100000000
        Initial pipe capacity: 65536
            Loop 1: set pipe capacity to 100000000 bytes
                F_SETPIPE_SZ returned 134217728
            Loop 2: set pipe capacity to 100000000 bytes
                Loop 2, pipe 0: F_SETPIPE_SZ failed: fcntl: Operation not permitted
    
    With a patched kernel, setting a capacity over the limit fails at the
    first attempt:
    
        # echo 0 > /proc/sys/fs/pipe-user-pages-soft
        # echo 1000000000 > /proc/sys/fs/pipe-max-size
        # echo 10000 > /proc/sys/fs/pipe-user-pages-hard
        # sudo -u mtk ./test_F_SETPIPE_SZ 1 100000000
        Initial pipe capacity: 65536
            Loop 1: set pipe capacity to 100000000 bytes
                Loop 1, pipe 0: F_SETPIPE_SZ failed: fcntl: Operation not permitted
    
    There is a small chance that the change to fix this problem could
    break user-space, since there are cases where fcntl(F_SETPIPE_SZ)
    calls that previously succeeded might fail. However, the chances are
    small, since (a) the pipe-user-pages-{soft,hard} limits are new (in
    4.5), and the default soft/hard limits are high/unlimited.  Therefore,
    it seems warranted to make these limits operate more precisely (and
    behave more like what users probably expect).
    
    Problem 2
    =========
    
    Running the test program on an unpatched kernel, we first set some limits:
    
        # getconf PAGESIZE
        4096
        # echo 0 > /proc/sys/fs/pipe-user-pages-soft
        # echo 1000000000 > /proc/sys/fs/pipe-max-size
        # echo 10000 > /proc/sys/fs/pipe-user-pages-hard    # 40.96 MB
    
    Now perform two fcntl(F_SETPIPE_SZ) operations on a single pipe,
    first setting a pipe capacity (10MB), sleeping for a few seconds,
    during which time the hard limit is lowered, and then set pipe
    capacity to a smaller amount (5MB):
    
        # sudo -u mtk ./test_F_SETPIPE_SZ 1 10000000 15 5000000 &
        [1] 748
        # Initial pipe capacity: 65536
            Loop 1: set pipe capacity to 10000000 bytes
                F_SETPIPE_SZ returned 16777216
                Sleeping 15 seconds
    
        # echo 1000 > /proc/sys/fs/pipe-user-pages-hard      # 4.096 MB
        #     Loop 2: set pipe capacity to 5000000 bytes
                Loop 2, pipe 0: F_SETPIPE_SZ failed: fcntl: Operation not permitted
    
    In this case, the user should be able to lower the limit.
    
    With a kernel that has the patch below, the second fcntl()
    succeeds:
    
        # echo 0 > /proc/sys/fs/pipe-user-pages-soft
        # echo 1000000000 > /proc/sys/fs/pipe-max-size
        # echo 10000 > /proc/sys/fs/pipe-user-pages-hard
        # sudo -u mtk ./test_F_SETPIPE_SZ 1 10000000 15 5000000 &
        [1] 3215
        # Initial pipe capacity: 65536
        #     Loop 1: set pipe capacity to 10000000 bytes
                F_SETPIPE_SZ returned 16777216
                Sleeping 15 seconds
    
        # echo 1000 > /proc/sys/fs/pipe-user-pages-hard
    
        #     Loop 2: set pipe capacity to 5000000 bytes
                F_SETPIPE_SZ returned 8388608
    
    8x---8x---8x---8x---8x---8x---8x---8x---8x---8x---8x---8x---8x---8x---
    
    /* test_F_SETPIPE_SZ.c
    
       (C) 2016, Michael Kerrisk; licensed under GNU GPL version 2 or later
    
       Test operation of fcntl(F_SETPIPE_SZ) for setting pipe capacity
       and interactions with limits defined by /proc/sys/fs/pipe-* files.
    */
    
    #define _GNU_SOURCE
    #include <stdio.h>
    #include <stdlib.h>
    #include <fcntl.h>
    #include <unistd.h>
    
    int
    main(int argc, char *argv[])
    {
        int (*pfd)[2];
        int npipes;
        int pcap, rcap;
        int j, p, s, stime, loop;
    
        if (argc < 2) {
            fprintf(stderr, "Usage: %s num-pipes "
                    "[pipe-capacity sleep-time]...\n", argv[0]);
            exit(EXIT_FAILURE);
        }
    
        npipes = atoi(argv[1]);
    
        pfd = calloc(npipes, sizeof (int [2]));
        if (pfd == NULL) {
            perror("calloc");
            exit(EXIT_FAILURE);
        }
    
        for (j = 0; j < npipes; j++) {
            if (pipe(pfd[j]) == -1) {
                fprintf(stderr, "Loop %d: pipe() failed: ", j);
                perror("pipe");
                exit(EXIT_FAILURE);
            }
        }
    
        printf("Initial pipe capacity: %d\n", fcntl(pfd[0][0], F_GETPIPE_SZ));
    
        for (j = 2; j < argc; j += 2 ) {
            loop = j / 2;
            pcap = atoi(argv[j]);
            printf("    Loop %d: set pipe capacity to %d bytes\n", loop, pcap);
    
            for (p = 0; p < npipes; p++) {
                s = fcntl(pfd[p][0], F_SETPIPE_SZ, pcap);
                if (s == -1) {
                    fprintf(stderr, "        Loop %d, pipe %d: F_SETPIPE_SZ "
                            "failed: ", loop, p);
                    perror("fcntl");
                    exit(EXIT_FAILURE);
                }
    
                if (p == 0) {
                    printf("        F_SETPIPE_SZ returned %d\n", s);
                    rcap = s;
                } else {
                    if (s != rcap) {
                        fprintf(stderr, "        Loop %d, pipe %d: F_SETPIPE_SZ "
                                "unexpected return: %d\n", loop, p, s);
                        exit(EXIT_FAILURE);
                    }
                }
    
                stime = (j + 1 < argc) ? atoi(argv[j + 1]) : 0;
                if (stime > 0) {
                    printf("        Sleeping %d seconds\n", stime);
                    sleep(stime);
                }
            }
        }
    
        exit(EXIT_SUCCESS);
    }
    
    8x---8x---8x---8x---8x---8x---8x---8x---8x---8x---8x---8x---8x---8x---
    
    Patch history:
    
    v2
       * Switch order of test in 'if' statement to avoid function call
          (to capability()) in normal path. [This is a fix to a preexisting
          wart in the code. Thanks to Willy Tarreau]
        * Perform (size > pipe_max_size) check before calling
          account_pipe_buffers().  [Thanks to Vegard Nossum]
          Quoting Vegard:
    
            The potential problem happens if the user passes a very large number
            which will overflow pipe->user->pipe_bufs.
    
            On 32-bit, sizeof(int) == sizeof(long), so if they pass arg = INT_MAX
            then round_pipe_size() returns INT_MAX. Although it's true that the
            accounting is done in terms of pages and not bytes, so you'd need on
            the order of (1 << 13) = 8192 processes hitting the limit at the same
            time in order to make it overflow, which seems a bit unlikely.
    
            (See https://lkml.org/lkml/2016/8/12/215 for another discussion on the
            limit checking)
    
    Link: http://lkml.kernel.org/r/1e464945-536b-2420-798b-e77b9c7e8593@gmail.com
    Signed-off-by: Michael Kerrisk <mtk.manpages@gmail.com>
    Reviewed-by: Vegard Nossum <vegard.nossum@oracle.com>
    Cc: Willy Tarreau <w@1wt.eu>
    Cc: <socketpair@gmail.com>
    Cc: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Cc: Jens Axboe <axboe@fb.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    [bwh: Backported to 3.16: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit a7660dff7cf10fee3251f5f2b1cf3f3ca27cb50b
Author: Michael Kerrisk (man-pages) <mtk.manpages@gmail.com>
Date:   Tue Oct 11 13:53:22 2016 -0700

    pipe: relocate round_pipe_size() above pipe_set_size()
    
    commit f491bd71118beba608d39ac2d5f1530e1160cd2e upstream.
    
    Patch series "pipe: fix limit handling", v2.
    
    When changing a pipe's capacity with fcntl(F_SETPIPE_SZ), various limits
    defined by /proc/sys/fs/pipe-* files are checked to see if unprivileged
    users are exceeding limits on memory consumption.
    
    While documenting and testing the operation of these limits I noticed
    that, as currently implemented, these checks have a number of problems:
    
    (1) When increasing the pipe capacity, the checks against the limits
        in /proc/sys/fs/pipe-user-pages-{soft,hard} are made against
        existing consumption, and exclude the memory required for the
        increased pipe capacity. The new increase in pipe capacity can then
        push the total memory used by the user for pipes (possibly far) over
        a limit. This can also trigger the problem described next.
    
    (2) The limit checks are performed even when the new pipe capacity
        is less than the existing pipe capacity. This can lead to problems
        if a user sets a large pipe capacity, and then the limits are
        lowered, with the result that the user will no longer be able to
        decrease the pipe capacity.
    
    (3) As currently implemented, accounting and checking against the
        limits is done as follows:
    
        (a) Test whether the user has exceeded the limit.
        (b) Make new pipe buffer allocation.
        (c) Account new allocation against the limits.
    
        This is racey. Multiple processes may pass point (a) simultaneously,
        and then allocate pipe buffers that are accounted for only in step
        (c).  The race means that the user's pipe buffer allocation could be
        pushed over the limit (by an arbitrary amount, depending on how
        unlucky we were in the race). [Thanks to Vegard Nossum for spotting
        this point, which I had missed.]
    
    This patch series addresses these three problems.
    
    This patch (of 8):
    
    This is a minor preparatory patch.  After subsequent patches,
    round_pipe_size() will be called from pipe_set_size(), so place
    round_pipe_size() above pipe_set_size().
    
    Link: http://lkml.kernel.org/r/91a91fdb-a959-ba7f-b551-b62477cc98a1@gmail.com
    Signed-off-by: Michael Kerrisk <mtk.manpages@gmail.com>
    Reviewed-by: Vegard Nossum <vegard.nossum@oracle.com>
    Cc: Willy Tarreau <w@1wt.eu>
    Cc: <socketpair@gmail.com>
    Cc: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Cc: Jens Axboe <axboe@fb.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit e9522309efb31423a450c32f433dd95bfb8b5787
Author: Eric Bernstein <eric.bernstein@amd.com>
Date:   Fri May 18 10:49:33 2018 -0400

    drm/amd/display: Add num_opp to resource_caps
    
    Number of OPPs to be instantiated is based on number
    of timing generators, not number of pipes.
    
    Signed-off-by: Eric Bernstein <eric.bernstein@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 35ac40d8b65ab5bd09b683720bca96a1f5a0625b
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Tue Jun 12 09:18:14 2018 +0100

    drm/i915/gtt: Subclass gen6_hw_ppgtt
    
    The legacy gen6 ppgtt needs a little more hand holding than gen8+, and
    so requires a larger structure. As I intend to make this slightly more
    complicated in the future, separate the gen6 from the core gen8 hw
    struct by subclassing. This patch moves the gen6 only features out to
    gen6_hw_ppgtt and pipes the new type everywhere that needs it.
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Cc: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Cc: Matthew Auld <matthew.william.auld@gmail.com>
    Reviewed-by: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180612081815.3585-1-chris@chris-wilson.co.uk

commit 13d0464b3240429234c34b39b819fe6f088fc3c8
Author: Jani Nikula <jani.nikula@intel.com>
Date:   Fri Jun 8 15:33:29 2018 +0300

    drm/i915: be more strict about HAS_PCH_NOP() usage
    
    HAS_PCH_NOP() implies a PCH platform without south display, not generic
    disabled display. Prefer num_pipes == 0 for PCH independent checks.
    
    Cc: Ville Syrjala <ville.syrjala@linux.intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180608123330.31003-5-jani.nikula@intel.com

commit 66e58e0ef80a56a1d7857b6ce121141563cdd93e
Author: Alexei Starovoitov <ast@kernel.org>
Date:   Thu Jun 7 15:31:14 2018 -0700

    bpfilter: fix race in pipe access
    
    syzbot reported the following crash
    [  338.293946] bpfilter: read fail -512
    [  338.304515] kasan: GPF could be caused by NULL-ptr deref or user memory access
    [  338.311863] general protection fault: 0000 [#1] SMP KASAN
    [  338.344360] RIP: 0010:__vfs_write+0x4a6/0x960
    [  338.426363] Call Trace:
    [  338.456967]  __kernel_write+0x10c/0x380
    [  338.460928]  __bpfilter_process_sockopt+0x1d8/0x35b
    [  338.487103]  bpfilter_mbox_request+0x4d/0xb0
    [  338.491492]  bpfilter_ip_get_sockopt+0x6b/0x90
    
    This can happen when multiple cpus trying to talk to user mode process
    via bpfilter_mbox_request(). One cpu grabs the mutex while another goes to
    sleep on the same mutex. Then former cpu sees that umh pipe is down and
    shuts down the pipes. Later cpu finally acquires the mutex and crashes
    on freed pipe.
    Fix the race by using info.pid as an indicator that umh and pipes are healthy
    and check it after acquiring the mutex.
    
    Fixes: d2ba09c17a06 ("net: add skeleton of bpfilter kernel module")
    Reported-by: syzbot+7ade6c94abb2774c0fee@syzkaller.appspotmail.com
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8d58ef346f30cbbeb9213a7eb90c832abf903fa0
Author: Archit Taneja <architt@codeaurora.org>
Date:   Wed Feb 21 09:37:22 2018 -0500

    drm/msm/mdp5: Add global state as a private atomic object
    
    Global shared resources (hwpipes, hwmixers and SMP) for MDP5 are
    implemented as a part of atomic state by subclassing drm_atomic_state.
    
    The preferred approach is to use the drm_private_obj infrastructure
    available in the atomic core.
    
    mdp5_global_state is introduced as a drm atomic private object. The two
    funcs mdp5_get_global_state() and mdp5_get_existing_global_state() are
    the two variants that will be used to access mdp5_global_state.
    
    This will replace the existing mdp5_state struct (which subclasses
    drm_atomic_state) and the funcs around it. These will be removed later
    once we mdp5_global_state is put to use everywhere.
    
    Changes in v3:
    - Added glob_state_lock instead of pushing it into the core
    - Added to the msm atomic helper patch set
    Changes in v4:
    - None
    
    Signed-off-by: Archit Taneja <architt@codeaurora.org>
    Signed-off-by: Rob Clark <robdclark@gmail.com>
    Signed-off-by: Sean Paul <seanpaul@chromium.org>

commit eade6c894498c12c2940e7fbe598dc08a292994f
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Tue Jan 30 22:38:03 2018 +0200

    drm/i915: Have plane->get_hw_state() return the current pipe
    
    Like we do for encoder let's make the plane->get_hw_state() return
    the pipe to which the plane is currently attached. We don't currently
    allow planes to move between the pipes, but perhaps one day we will.
    
    In either case this makes the code more uniform and perhaps makes
    intel_plane_mapping_ok() slightly more clear.
    
    Note that for i965 and g4x planes A and B still have pipe select bits
    but they're hardwired to pipe A and B respectively. This means we can
    safely interpret those bits just like on gen2/3. This allows the
    same readout code work for plane C (which can still be assigned
    to eiter pipe on i965) should we ever expose it.
    
    g4x no longer allows moving the cursor planes between the pipes,
    but the pipe select bits can still be set in the register. Thus
    we have to ignore those bits. OTOH i965 still allows the cursors
    to move between pipes thus we have to trust the bits there.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180130203807.13721-3-ville.syrjala@linux.intel.com
    Reviewed-by: Mika Kahola <mika.kahola@intel.com>

commit 7d56aed52b52450181c7ba58cb680739cb7e5737
Author: Michael Kerrisk (man-pages) <mtk.manpages@gmail.com>
Date:   Tue Oct 11 13:53:43 2016 -0700

    pipe: cap initial pipe capacity according to pipe-max-size limit
    
    commit 086e774a57fba4695f14383c0818994c0b31da7c upstream.
    
    This is a patch that provides behavior that is more consistent, and
    probably less surprising to users. I consider the change optional, and
    welcome opinions about whether it should be applied.
    
    By default, pipes are created with a capacity of 64 kiB.  However,
    /proc/sys/fs/pipe-max-size may be set smaller than this value.  In this
    scenario, an unprivileged user could thus create a pipe whose initial
    capacity exceeds the limit. Therefore, it seems logical to cap the
    initial pipe capacity according to the value of pipe-max-size.
    
    The test program shown earlier in this patch series can be used to
    demonstrate the effect of the change brought about with this patch:
    
        # cat /proc/sys/fs/pipe-max-size
        1048576
        # sudo -u mtk ./test_F_SETPIPE_SZ 1
        Initial pipe capacity: 65536
        # echo 10000 > /proc/sys/fs/pipe-max-size
        # cat /proc/sys/fs/pipe-max-size
        16384
        # sudo -u mtk ./test_F_SETPIPE_SZ 1
        Initial pipe capacity: 16384
        # ./test_F_SETPIPE_SZ 1
        Initial pipe capacity: 65536
    
    The last two executions of 'test_F_SETPIPE_SZ' show that pipe-max-size
    caps the initial allocation for a new pipe for unprivileged users, but
    not for privileged users.
    
    Link: http://lkml.kernel.org/r/31dc7064-2a17-9c5b-1df1-4e3012ee992c@gmail.com
    Signed-off-by: Michael Kerrisk <mtk.manpages@gmail.com>
    Reviewed-by: Vegard Nossum <vegard.nossum@oracle.com>
    Cc: Willy Tarreau <w@1wt.eu>
    Cc: <socketpair@gmail.com>
    Cc: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Cc: Jens Axboe <axboe@fb.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Daniel Sangorrin <daniel.sangorrin@toshiba.co.jp>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 46736d5c61fe3d5d0b6b571ccdab778cf9670133
Author: Michael Kerrisk (man-pages) <mtk.manpages@gmail.com>
Date:   Tue Oct 11 13:53:43 2016 -0700

    pipe: cap initial pipe capacity according to pipe-max-size limit
    
    commit 086e774a57fba4695f14383c0818994c0b31da7c upstream.
    
    This is a patch that provides behavior that is more consistent, and
    probably less surprising to users. I consider the change optional, and
    welcome opinions about whether it should be applied.
    
    By default, pipes are created with a capacity of 64 kiB.  However,
    /proc/sys/fs/pipe-max-size may be set smaller than this value.  In this
    scenario, an unprivileged user could thus create a pipe whose initial
    capacity exceeds the limit. Therefore, it seems logical to cap the
    initial pipe capacity according to the value of pipe-max-size.
    
    The test program shown earlier in this patch series can be used to
    demonstrate the effect of the change brought about with this patch:
    
        # cat /proc/sys/fs/pipe-max-size
        1048576
        # sudo -u mtk ./test_F_SETPIPE_SZ 1
        Initial pipe capacity: 65536
        # echo 10000 > /proc/sys/fs/pipe-max-size
        # cat /proc/sys/fs/pipe-max-size
        16384
        # sudo -u mtk ./test_F_SETPIPE_SZ 1
        Initial pipe capacity: 16384
        # ./test_F_SETPIPE_SZ 1
        Initial pipe capacity: 65536
    
    The last two executions of 'test_F_SETPIPE_SZ' show that pipe-max-size
    caps the initial allocation for a new pipe for unprivileged users, but
    not for privileged users.
    
    Link: http://lkml.kernel.org/r/31dc7064-2a17-9c5b-1df1-4e3012ee992c@gmail.com
    Signed-off-by: Michael Kerrisk <mtk.manpages@gmail.com>
    Reviewed-by: Vegard Nossum <vegard.nossum@oracle.com>
    Cc: Willy Tarreau <w@1wt.eu>
    Cc: <socketpair@gmail.com>
    Cc: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Cc: Jens Axboe <axboe@fb.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Daniel Sangorrin <daniel.sangorrin@toshiba.co.jp>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e95a5f548945c1c212b92e3b88cfb571a7bb95ca
Merge: 1fe8c06c4a0d d2ba09c17a06
Author: David S. Miller <davem@davemloft.net>
Date:   Wed May 23 13:23:40 2018 -0400

    Merge branch 'bpfilter'
    
    Alexei Starovoitov says:
    
    ====================
    bpfilter
    
    v2->v3:
    - followed Luis's suggestion and significantly simplied first patch
      with shmem_kernel_file_setup+kernel_write. Added kdoc for new helper
    - fixed typos and race to access pipes with mutex
    - tested with bpfilter being 'builtin'. CONFIG_BPFILTER_UMH=y|m both work.
      Interesting to see a usermode executable being embedded inside vmlinux.
    - it doesn't hurt to enable bpfilter in .config.
      ip_setsockopt commands sent to usermode via pipes and -ENOPROTOOPT is
      returned from userspace, so kernel falls back to original iptables code
    
    v1->v2:
    this patch set is almost a full rewrite of the earlier umh modules approach
    The v1 of patches and follow up discussion was covered by LWN:
    https://lwn.net/Articles/749108/
    
    I believe the v2 addresses all issues brought up by Andy and others.
    Mainly there are zero changes to kernel/module.c
    Instead of teaching module loading logic to recognize special
    umh module, let normal kernel modules execute part of its own
    .init.rodata as a new user space process (Andy's idea)
    Patch 1 introduces this new helper:
    int fork_usermode_blob(void *data, size_t len, struct umh_info *info);
    Input:
      data + len == executable file
    Output:
      struct umh_info {
           struct file *pipe_to_umh;
           struct file *pipe_from_umh;
           pid_t pid;
      };
    
    Advantages vs v1:
    - the embedded user mode executable is stored as .init.rodata inside
      normal kernel module. These pages are freed when .ko finishes loading
    - the elf file is copied into tmpfs file. The user mode process is swappable.
    - the communication between user mode process and 'parent' kernel module
      is done via two unix pipes, hence protocol is not exposed to
      user space
    - impossible to launch umh on its own (that was the main issue of v1)
      and impossible to be man-in-the-middle due to pipes
    - bpfilter.ko consists of tiny kernel part that passes the data
      between kernel and umh via pipes and much bigger umh part that
      doing all the work
    - 'lsmod' shows bpfilter.ko as usual.
      'rmmod bpfilter' removes kernel module and kills corresponding umh
    - signed bpfilter.ko covers the whole image including umh code
    
    Few issues:
    - the user can still attach to the process and debug it with
      'gdb /proc/pid/exe pid', but 'gdb -p pid' doesn't work.
      (a bit worse comparing to v1)
    - tinyconfig will notice a small increase in .text
      +766 | TEXT | 7c8b94806bec umh: introduce fork_usermode_blob() helper
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 449325b52b7a6208f65ed67d3484fd7b7184477b
Author: Alexei Starovoitov <ast@kernel.org>
Date:   Mon May 21 19:22:29 2018 -0700

    umh: introduce fork_usermode_blob() helper
    
    Introduce helper:
    int fork_usermode_blob(void *data, size_t len, struct umh_info *info);
    struct umh_info {
           struct file *pipe_to_umh;
           struct file *pipe_from_umh;
           pid_t pid;
    };
    
    that GPLed kernel modules (signed or unsigned) can use it to execute part
    of its own data as swappable user mode process.
    
    The kernel will do:
    - allocate a unique file in tmpfs
    - populate that file with [data, data + len] bytes
    - user-mode-helper code will do_execve that file and, before the process
      starts, the kernel will create two unix pipes for bidirectional
      communication between kernel module and umh
    - close tmpfs file, effectively deleting it
    - the fork_usermode_blob will return zero on success and populate
      'struct umh_info' with two unix pipes and the pid of the user process
    
    As the first step in the development of the bpfilter project
    the fork_usermode_blob() helper is introduced to allow user mode code
    to be invoked from a kernel module. The idea is that user mode code plus
    normal kernel module code are built as part of the kernel build
    and installed as traditional kernel module into distro specified location,
    such that from a distribution point of view, there is
    no difference between regular kernel modules and kernel modules + umh code.
    Such modules can be signed, modprobed, rmmod, etc. The use of this new helper
    by a kernel module doesn't make it any special from kernel and user space
    tooling point of view.
    
    Such approach enables kernel to delegate functionality traditionally done
    by the kernel modules into the user space processes (either root or !root) and
    reduces security attack surface of the new code. The buggy umh code would crash
    the user process, but not the kernel. Another advantage is that umh code
    of the kernel module can be debugged and tested out of user space
    (e.g. opening the possibility to run clang sanitizers, fuzzers or
    user space test suites on the umh code).
    In case of the bpfilter project such architecture allows complex control plane
    to be done in the user space while bpf based data plane stays in the kernel.
    
    Since umh can crash, can be oom-ed by the kernel, killed by the admin,
    the kernel module that uses them (like bpfilter) needs to manage life
    time of umh on its own via two unix pipes and the pid of umh.
    
    The exit code of such kernel module should kill the umh it started,
    so that rmmod of the kernel module will cleanup the corresponding umh.
    Just like if the kernel module does kmalloc() it should kfree() it
    in the exit code.
    
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8ad63122f9f22dde172b98fe9c75818831e57f4b
Author: Jerry (Fangzhi) Zuo <Jerry.Zuo@amd.com>
Date:   Mon Mar 5 16:12:23 2018 -0500

    drm/amd/display: Add harvest IP support for Vega20
    
    Retrieve fuses to determine the availability of pipes, and
    eliminate pipes that cannot be used.
    
    Acked-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Jerry (Fangzhi) Zuo <Jerry.Zuo@amd.com>
    Reviewed-by: Hersen Wu <hersenxs.wu@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Feifei Xu <Feifei.Xu@amd.com>

commit aa9664ffe863f470efdbe40ea20ce96f2887ebcd
Author: Mahesh Kumar <mahesh1.kumar@intel.com>
Date:   Thu Apr 26 19:55:16 2018 +0530

    drm/i915/icl: Enable 2nd DBuf slice only when needed
    
    ICL has two slices of DBuf, each slice of size 1024 blocks.
    We should not always enable slice-2. It should be enabled only if
    display total required BW is > 12GBps OR more than 1 pipes are enabled.
    
    Changes since V1:
     - typecast total_data_rate to u64 before multiplication to solve any
       possible overflow (Rodrigo)
     - fix where skl_wm_get_hw_state was memsetting ddb, resulting
       enabled_slices to become zero
     - Fix the logic of calculating ddb_size
    Changes since V2:
     - If no-crtc is part of commit required_slices will have value "0",
       don't try to disable DBuf slice.
    Changes since V3:
     - Create a generic helper to enable/disable slice
     - don't return early if total_data_rate is 0, it may be cursor only
       commit, or atomic modeset without any plane.
    Changes since V4:
     - Solve checkpatch warnings
     - use kernel types u8/u64 instead of uint8_t/uint64_t
    Changes since V5:
     - Rebase
    
    Signed-off-by: Mahesh Kumar <mahesh1.kumar@intel.com>
    Reviewed-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180426142517.16643-3-mahesh1.kumar@intel.com

commit 211a36ec7c4e37263db342860a9163c54b3dc999
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Feb 14 21:23:23 2018 +0200

    drm/i915: Correctly handle limited range YCbCr data on VLV/CHV
    
    commit 5deae9191130db6b617c94fb261804597cf9b508 upstream.
    
    Turns out the VLV/CHV fixed function sprite CSC expects full range
    data as input. We've been feeding it limited range data to it all
    along. To expand the data out to full range we'll use the color
    correction registers (brightness, contrast, and saturation).
    
    On CHV pipe B we were actually doing the right thing already because we
    progammed the custom CSC matrix to do expect limited range input. Now
    that well pre-expand the data out with the color correction unit, we
    need to change the CSC matrix to operate with full range input instead.
    
    This should make the sprite output of the other pipes match the sprite
    output of pipe B reasonably well. Looking at the resulting pipe CRCs,
    there can be a slight difference in the output, but as I don't know
    the formula used by the fixed function CSC of the other pipes, I don't
    think it's worth the effort to try to match the output exactly. It
    might not even be possible due to difference in internal precision etc.
    
    One slight caveat here is that the color correction registers are single
    bufferred, so we should really be updating them during vblank, but we
    still don't have a mechanism for that, so just toss in another FIXME.
    
    v2: Rebase
    v3: s/bri/brightness/ s/con/contrast/ (Shashank)
    v4: Clarify the constants and math (Shashank)
    
    Cc: Harry Wentland <harry.wentland@amd.com>
    Cc: Daniel Vetter <daniel@ffwll.ch>
    Cc: Daniel Stone <daniel@fooishbar.org>
    Cc: Russell King - ARM Linux <linux@armlinux.org.uk>
    Cc: Ilia Mirkin <imirkin@alum.mit.edu>
    Cc: Hans Verkuil <hverkuil@xs4all.nl>
    Cc: Shashank Sharma <shashank.sharma@intel.com>
    Cc: Uma Shankar <uma.shankar@intel.com>
    Cc: Jyri Sarha <jsarha@ti.com>
    Cc: "Tang, Jun" <jun.tang@intel.com>
    Reported-by: "Tang, Jun" <jun.tang@intel.com>
    Cc: stable@vger.kernel.org
    Fixes: 7f1f3851feb0 ("drm/i915: sprite support for ValleyView v4")
    Reviewed-by: Shashank Sharma <shashank.sharma@intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180214192327.3250-5-ville.syrjala@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 22ec5ee71086284911b21339eaf4d2c2ec1df351
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Feb 14 21:23:23 2018 +0200

    drm/i915: Correctly handle limited range YCbCr data on VLV/CHV
    
    commit 5deae9191130db6b617c94fb261804597cf9b508 upstream.
    
    Turns out the VLV/CHV fixed function sprite CSC expects full range
    data as input. We've been feeding it limited range data to it all
    along. To expand the data out to full range we'll use the color
    correction registers (brightness, contrast, and saturation).
    
    On CHV pipe B we were actually doing the right thing already because we
    progammed the custom CSC matrix to do expect limited range input. Now
    that well pre-expand the data out with the color correction unit, we
    need to change the CSC matrix to operate with full range input instead.
    
    This should make the sprite output of the other pipes match the sprite
    output of pipe B reasonably well. Looking at the resulting pipe CRCs,
    there can be a slight difference in the output, but as I don't know
    the formula used by the fixed function CSC of the other pipes, I don't
    think it's worth the effort to try to match the output exactly. It
    might not even be possible due to difference in internal precision etc.
    
    One slight caveat here is that the color correction registers are single
    bufferred, so we should really be updating them during vblank, but we
    still don't have a mechanism for that, so just toss in another FIXME.
    
    v2: Rebase
    v3: s/bri/brightness/ s/con/contrast/ (Shashank)
    v4: Clarify the constants and math (Shashank)
    
    Cc: Harry Wentland <harry.wentland@amd.com>
    Cc: Daniel Vetter <daniel@ffwll.ch>
    Cc: Daniel Stone <daniel@fooishbar.org>
    Cc: Russell King - ARM Linux <linux@armlinux.org.uk>
    Cc: Ilia Mirkin <imirkin@alum.mit.edu>
    Cc: Hans Verkuil <hverkuil@xs4all.nl>
    Cc: Shashank Sharma <shashank.sharma@intel.com>
    Cc: Uma Shankar <uma.shankar@intel.com>
    Cc: Jyri Sarha <jsarha@ti.com>
    Cc: "Tang, Jun" <jun.tang@intel.com>
    Reported-by: "Tang, Jun" <jun.tang@intel.com>
    Cc: stable@vger.kernel.org
    Fixes: 7f1f3851feb0 ("drm/i915: sprite support for ValleyView v4")
    Reviewed-by: Shashank Sharma <shashank.sharma@intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180214192327.3250-5-ville.syrjala@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 84efe7f6ebc56dbeb18c3448a487f2265c647d91
Author: Govind Singh <govinds@codeaurora.org>
Date:   Tue Apr 10 18:01:20 2018 +0300

    ath10k: map HTC services to tx/rx pipes for wcn3990
    
    Add mapping of HTC endpoint services supported
    by wcn3990 target to tx/rx pipe.
    
    Signed-off-by: Govind Singh <govinds@codeaurora.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit e1f96a66e72569f6277262eef23614236cc6dc15
Author: Mahesh Kumar <mahesh1.kumar@intel.com>
Date:   Mon Apr 9 09:11:08 2018 +0530

    drm/i915/skl: split skl_compute_ddb function
    
    This patch splits skl_compute_wm/ddb functions into two parts.
    One adds all affected pipes after the commit to atomic_state structure
    and second part does compute the DDB.
    
    v2: Added reviewed by tag from Shashank Sharma
    
    v3: Added reviewed by from Juha-Pekka Heikkila
    
    v4: Rebased the series
    
    v5: Fixed checkpatch error. Changed *changed = true
    to (*changed) = true;
    
    Reviewed-by: Juha-Pekka Heikkila <juhapekka.heikkila@gmail.com>
    Reviewed-by: Shashank Sharma <shashank.sharma@intel.com>
    Signed-off-by: Mahesh Kumar <mahesh1.kumar@intel.com>
    Signed-off-by: Vidya Srinivas <vidya.srinivas@intel.com>
    Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/1523245273-30264-10-git-send-email-vidya.srinivas@intel.com

commit fde4dbd2a6cbec363d7a7738917c8679df610e8a
Author: Shirish S <shirish.s@amd.com>
Date:   Wed Feb 21 16:10:33 2018 +0530

    drm/amd/display: check for ipp before calling cursor operations
    
    commit d6b6669762898dfc99e9273b8d8603bc47014aa9 upstream.
    
    Currently all cursor related functions are made to all
    pipes that are attached to a particular stream.
    This is not applicable to pipes that do not have cursor plane
    initialised like underlay.
    Hence this patch allows cursor related operations on a pipe
    only if ipp in available on that particular pipe.
    
    The check is added to set_cursor_position & set_cursor_attribute.
    
    Signed-off-by: Shirish S <shirish.s@amd.com>
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 47f84ed164c919fae170cc26e7f966a4732d2eed
Author: Jani Nikula <jani.nikula@intel.com>
Date:   Wed Feb 14 19:38:40 2018 +0200

    drm/i915/audio: fix check for av_enc_map overflow
    
    commit 72a6d72c2cd03bba7b70117b63dea83d2de88057 upstream.
    
    Turns out -1 >= ARRAY_SIZE() is always true. Move the bounds check where
    we know pipe >= 0 and next to the array indexing where it makes most
    sense.
    
    Fixes: 9965db26ac05 ("drm/i915: Check for fused or unused pipes")
    Fixes: 0b7029b7e43f ("drm/i915: Check for fused or unused pipes")
    Cc: <stable@vger.kernel.org> # v4.10+
    Cc: Mika Kahola <mika.kahola@intel.com>
    Cc: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Cc: Jani Nikula <jani.nikula@linux.intel.com>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Cc: intel-gfx@lists.freedesktop.org
    Reviewed-by: Dhinakaran Pandiyan <dhinakaran.pandiyan@intel.com>
    Reviewed-by: Mika Kahola <mika.kahola@intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180214173840.25360-1-jani.nikula@intel.com
    (cherry picked from commit cdb3db8542d854bd678d60cd28861b042e191672)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 35a66d32de2c855345e0b3a49bacfd4f930bdaef
Author: Mika Kahola <mika.kahola@intel.com>
Date:   Mon Dec 18 10:04:03 2017 +0200

    drm/i915: Check for fused or unused pipes
    
    commit 9965db26ac0548648309f506dc155a92daa2158f upstream.
    
    We may have fused or unused pipes in our system. Let's check that the pipe
    in question is within limits of accessible pipes. In case, that we are not
    able to access the pipe, we return early with a warning.
    
    v2: Rephrasing of the commit message (Jani)
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=103206
    Reported-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Jaswinder Singh Rajput <jaswinder@perfectintelligent.com>
    Suggested-by: Jani Nikula <jani.nikula@intel.com>
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Mika Kahola <mika.kahola@intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/1513584243-12607-1-git-send-email-mika.kahola@intel.com
    (cherry picked from commit 0b7029b7e43fda1304c181a3ade0b429b9edcd9d)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Cc: <stable@vger.kernel.org> # v4.10+
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5deae9191130db6b617c94fb261804597cf9b508
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Feb 14 21:23:23 2018 +0200

    drm/i915: Correctly handle limited range YCbCr data on VLV/CHV
    
    Turns out the VLV/CHV fixed function sprite CSC expects full range
    data as input. We've been feeding it limited range data to it all
    along. To expand the data out to full range we'll use the color
    correction registers (brightness, contrast, and saturation).
    
    On CHV pipe B we were actually doing the right thing already because we
    progammed the custom CSC matrix to do expect limited range input. Now
    that well pre-expand the data out with the color correction unit, we
    need to change the CSC matrix to operate with full range input instead.
    
    This should make the sprite output of the other pipes match the sprite
    output of pipe B reasonably well. Looking at the resulting pipe CRCs,
    there can be a slight difference in the output, but as I don't know
    the formula used by the fixed function CSC of the other pipes, I don't
    think it's worth the effort to try to match the output exactly. It
    might not even be possible due to difference in internal precision etc.
    
    One slight caveat here is that the color correction registers are single
    bufferred, so we should really be updating them during vblank, but we
    still don't have a mechanism for that, so just toss in another FIXME.
    
    v2: Rebase
    v3: s/bri/brightness/ s/con/contrast/ (Shashank)
    v4: Clarify the constants and math (Shashank)
    
    Cc: Harry Wentland <harry.wentland@amd.com>
    Cc: Daniel Vetter <daniel@ffwll.ch>
    Cc: Daniel Stone <daniel@fooishbar.org>
    Cc: Russell King - ARM Linux <linux@armlinux.org.uk>
    Cc: Ilia Mirkin <imirkin@alum.mit.edu>
    Cc: Hans Verkuil <hverkuil@xs4all.nl>
    Cc: Shashank Sharma <shashank.sharma@intel.com>
    Cc: Uma Shankar <uma.shankar@intel.com>
    Cc: Jyri Sarha <jsarha@ti.com>
    Cc: "Tang, Jun" <jun.tang@intel.com>
    Reported-by: "Tang, Jun" <jun.tang@intel.com>
    Cc: stable@vger.kernel.org
    Fixes: 7f1f3851feb0 ("drm/i915: sprite support for ValleyView v4")
    Reviewed-by: Shashank Sharma <shashank.sharma@intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180214192327.3250-5-ville.syrjala@linux.intel.com

commit 5d447f09b8d8346c64f4c952a67c61f7ce88d3c1
Author: Shirish S <shirish.s@amd.com>
Date:   Wed Feb 21 16:10:33 2018 +0530

    drm/amd/display: check for ipp before calling cursor operations
    
    Currently all cursor related functions are made to all
    pipes that are attached to a particular stream.
    This is not applicable to pipes that do not have cursor plane
    initialised like underlay.
    Hence this patch allows cursor related operations on a pipe
    only if ipp in available on that particular pipe.
    
    The check is added to set_cursor_position & set_cursor_attribute.
    
    Signed-off-by: Shirish S <shirish.s@amd.com>
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org

commit d6b6669762898dfc99e9273b8d8603bc47014aa9
Author: Shirish S <shirish.s@amd.com>
Date:   Wed Feb 21 16:10:33 2018 +0530

    drm/amd/display: check for ipp before calling cursor operations
    
    Currently all cursor related functions are made to all
    pipes that are attached to a particular stream.
    This is not applicable to pipes that do not have cursor plane
    initialised like underlay.
    Hence this patch allows cursor related operations on a pipe
    only if ipp in available on that particular pipe.
    
    The check is added to set_cursor_position & set_cursor_attribute.
    
    Signed-off-by: Shirish S <shirish.s@amd.com>
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Cc: stable@vger.kernel.org

commit 72a6d72c2cd03bba7b70117b63dea83d2de88057
Author: Jani Nikula <jani.nikula@intel.com>
Date:   Wed Feb 14 19:38:40 2018 +0200

    drm/i915/audio: fix check for av_enc_map overflow
    
    Turns out -1 >= ARRAY_SIZE() is always true. Move the bounds check where
    we know pipe >= 0 and next to the array indexing where it makes most
    sense.
    
    Fixes: 9965db26ac05 ("drm/i915: Check for fused or unused pipes")
    Fixes: 0b7029b7e43f ("drm/i915: Check for fused or unused pipes")
    Cc: <stable@vger.kernel.org> # v4.10+
    Cc: Mika Kahola <mika.kahola@intel.com>
    Cc: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Cc: Jani Nikula <jani.nikula@linux.intel.com>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Cc: intel-gfx@lists.freedesktop.org
    Reviewed-by: Dhinakaran Pandiyan <dhinakaran.pandiyan@intel.com>
    Reviewed-by: Mika Kahola <mika.kahola@intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180214173840.25360-1-jani.nikula@intel.com
    (cherry picked from commit cdb3db8542d854bd678d60cd28861b042e191672)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>

commit 70d2850ee39d3be86b484cd1f15545e0038109ff
Author: Maxime Ripard <maxime.ripard@bootlin.com>
Date:   Fri Feb 16 18:39:33 2018 +0100

    drm/sun4i: Remove the plane description structure
    
    The plane description structure was mostly needed to differentiate the
    formats usable on the primary plane (because of its lowest position), and
    assign the pipes. Now that both are dynamically checked and assigned, we
    can remove the static definition.
    
    Reviewed-by: Chen-Yu Tsai <wens@csie.org>
    Signed-off-by: Maxime Ripard <maxime.ripard@bootlin.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/6b09e3698e692c3338f70a5ae1e5a580f9dd08ee.1518802627.git-series.maxime.ripard@bootlin.com

commit 8f1f25534fff09f54d75ea8fac4ea8f35fb385d6
Author: Maxime Ripard <maxime.ripard@bootlin.com>
Date:   Fri Feb 16 18:39:32 2018 +0100

    drm/sun4i: backend: Assign the pipes automatically
    
    Since we now have a way to enforce the zpos, check for the number of alpha
    planes, the only missing part is to assign our pipe automatically instead
    of hardcoding it.
    
    The algorithm is quite simple, but requires two iterations over the list of
    planes.
    
    In the first one (which is the same one that we've had to check for alpha,
    the frontend usage, and so on), we order the planes by their zpos.
    
    We can then do a second iteration over that array by ascending zpos
    starting with the pipe 0. When and if we encounter our alpha plane, we put
    it and all the other subsequent planes in the second pipe.
    
    Reviewed-by: Chen-Yu Tsai <wens@csie.org>
    Signed-off-by: Maxime Ripard <maxime.ripard@bootlin.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/e9caf21d831438d36a3ccc7cef229c9a7ea7f69f.1518802627.git-series.maxime.ripard@bootlin.com

commit 2c83362734dad8e48ccc0710b5cd2436a0323893
Author: Mel Gorman <mgorman@techsingularity.net>
Date:   Tue Feb 13 13:37:29 2018 +0000

    sched/fair: Consider SD_NUMA when selecting the most idle group to schedule on
    
    find_idlest_group() compares a local group with each other group to select
    the one that is most idle. When comparing groups in different NUMA domains,
    a very slight imbalance is enough to select a remote NUMA node even if the
    runnable load on both groups is 0 or close to 0. This ignores the cost of
    remote accesses entirely and is a problem when selecting the CPU for a
    newly forked task to run on.  This is problematic when a forking server
    is almost guaranteed to run on a remote node incurring numerous remote
    accesses and potentially causing automatic NUMA balancing to try migrate
    the task back or migrate the data to another node. Similar weirdness is
    observed if a basic shell command pipes output to another as each process
    in the pipeline is likely to start on different nodes and then get adjusted
    later by wake_affine().
    
    This patch adds imbalance to remote domains when considering whether to
    select CPUs from remote domains. If the local domain is selected, imbalance
    will still be used to try select a CPU from a lower scheduler domain's group
    instead of stacking tasks on the same CPU.
    
    A variety of workloads and machines were tested and as expected, there is no
    difference on UMA. The difference on NUMA can be dramatic. This is a comparison
    of elapsed times running the git regression test suite. It's fork-intensive with
    short-lived processes:
    
                                      4.15.0                 4.15.0
                                noexit-v1r23           sdnuma-v1r23
     Elapsed min          1706.06 (   0.00%)     1435.94 (  15.83%)
     Elapsed mean         1709.53 (   0.00%)     1436.98 (  15.94%)
     Elapsed stddev          2.16 (   0.00%)        1.01 (  53.38%)
     Elapsed coeffvar        0.13 (   0.00%)        0.07 (  44.54%)
     Elapsed max          1711.59 (   0.00%)     1438.01 (  15.98%)
    
                   4.15.0      4.15.0
             noexit-v1r23 sdnuma-v1r23
     User         5434.12     5188.41
     System       4878.77     3467.09
     Elapsed     10259.06     8624.21
    
    That shows a considerable reduction in elapsed times. It's important to
    note that automatic NUMA balancing does not affect this load as processes
    are too short-lived.
    
    There is also a noticable impact on hackbench such as this example using
    processes and pipes:
    
     hackbench-process-pipes
                                   4.15.0                 4.15.0
                             noexit-v1r23           sdnuma-v1r23
     Amean     1        1.0973 (   0.00%)      0.9393 (  14.40%)
     Amean     4        1.3427 (   0.00%)      1.3730 (  -2.26%)
     Amean     7        1.4233 (   0.00%)      1.6670 ( -17.12%)
     Amean     12       3.0250 (   0.00%)      3.3013 (  -9.13%)
     Amean     21       9.0860 (   0.00%)      9.5343 (  -4.93%)
     Amean     30      14.6547 (   0.00%)     13.2433 (   9.63%)
     Amean     48      22.5447 (   0.00%)     20.4303 (   9.38%)
     Amean     79      29.2010 (   0.00%)     26.7853 (   8.27%)
     Amean     110     36.7443 (   0.00%)     35.8453 (   2.45%)
     Amean     141     45.8533 (   0.00%)     42.6223 (   7.05%)
     Amean     172     55.1317 (   0.00%)     50.6473 (   8.13%)
     Amean     203     64.4420 (   0.00%)     58.3957 (   9.38%)
     Amean     234     73.2293 (   0.00%)     67.1047 (   8.36%)
     Amean     265     80.5220 (   0.00%)     75.7330 (   5.95%)
     Amean     296     88.7567 (   0.00%)     82.1533 (   7.44%)
    
    It's not a universal win as there are occasions when spreading wide and
    quickly is a benefit but it's more of a win than it is a loss. For other
    workloads, there is little difference but netperf is interesting. Without
    the patch, the server and client starts on different nodes but quickly get
    migrated due to wake_affine. Hence, the difference is overall performance
    is marginal but detectable:
    
                                          4.15.0                 4.15.0
                                    noexit-v1r23           sdnuma-v1r23
     Hmean     send-64         349.09 (   0.00%)      354.67 (   1.60%)
     Hmean     send-128        699.16 (   0.00%)      702.91 (   0.54%)
     Hmean     send-256       1316.34 (   0.00%)     1350.07 (   2.56%)
     Hmean     send-1024      5063.99 (   0.00%)     5124.38 (   1.19%)
     Hmean     send-2048      9705.19 (   0.00%)     9687.44 (  -0.18%)
     Hmean     send-3312     14359.48 (   0.00%)    14577.64 (   1.52%)
     Hmean     send-4096     16324.20 (   0.00%)    16393.62 (   0.43%)
     Hmean     send-8192     26112.61 (   0.00%)    26877.26 (   2.93%)
     Hmean     send-16384    37208.44 (   0.00%)    38683.43 (   3.96%)
     Hmean     recv-64         349.09 (   0.00%)      354.67 (   1.60%)
     Hmean     recv-128        699.16 (   0.00%)      702.91 (   0.54%)
     Hmean     recv-256       1316.34 (   0.00%)     1350.07 (   2.56%)
     Hmean     recv-1024      5063.99 (   0.00%)     5124.38 (   1.19%)
     Hmean     recv-2048      9705.16 (   0.00%)     9687.43 (  -0.18%)
     Hmean     recv-3312     14359.42 (   0.00%)    14577.59 (   1.52%)
     Hmean     recv-4096     16323.98 (   0.00%)    16393.55 (   0.43%)
     Hmean     recv-8192     26111.85 (   0.00%)    26876.96 (   2.93%)
     Hmean     recv-16384    37206.99 (   0.00%)    38682.41 (   3.97%)
    
    However, what is very interesting is how automatic NUMA balancing behaves.
    Each netperf instance runs long enough for balancing to activate:
    
     NUMA base PTE updates             4620        1473
     NUMA huge PMD updates                0           0
     NUMA page range updates           4620        1473
     NUMA hint faults                  4301        1383
     NUMA hint local faults            1309         451
     NUMA hint local percent             30          32
     NUMA pages migrated               1335         491
     AutoNUMA cost                      21%          6%
    
    There is an unfortunate number of remote faults although tracing indicated
    that the vast majority are in shared libraries. However, the tendency to
    start tasks on the same node if there is capacity means that there were
    far fewer PTE updates and faults incurred overall.
    
    Signed-off-by: Mel Gorman <mgorman@techsingularity.net>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Giovanni Gherdovich <ggherdovich@suse.cz>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Matt Fleming <matt@codeblueprint.co.uk>
    Cc: Mike Galbraith <efault@gmx.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/20180213133730.24064-6-mgorman@techsingularity.net
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit c154d1e0aabf77212a49f0cf3d54eecb0ae395a4
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Tue Jan 30 22:38:02 2018 +0200

    drm/i915: Set the primary plane pipe select bits on gen4
    
    i965 and g4x still have the pipe select bits in the plane control
    registers, they're just hardcoded to select a specific pipe. However
    plane C on i965 can still move between the pipes, thus we should
    program the pipe select bits on i965 if we want to expose plane C
    some day.
    
    Since there is no harm in programming the bits on any plane on
    i965/g4x let's just always set them. This will also make our
    pre-computed register value match what the hardware register
    would read, should we want to cross check the two.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180130203807.13721-2-ville.syrjala@linux.intel.com
    Reviewed-by: Mika Kahola <mika.kahola@intel.com>

commit aa81e2c334824d399f16e7cabe272ebf3c0e43df
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Jan 24 20:36:42 2018 +0200

    drm/i915: Assert that we don't overflow frontbuffer tracking bits
    
    Add some compile time assrts to the frontbuffer tracking to make sure
    that we have enough bits per pipe to cover all the planes, and that we
    have enough total bits to cover all the planes across all pipes.
    
    We'll ignore any potential clash between the overlay bit and the
    plane bits because that will allow us to keep using a total of 32
    bits for the foreseeable future.
    
    While at it change the macros to use BIT() and GENMASK(). The latter
    gets rid of the hardcoded 0xff and thus means we can change the
    number of bits per pipe by just changing
    INTEL_FRONTBUFFER_BITS_PER_PIPE.
    
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180124183642.32549-1-ville.syrjala@linux.intel.com
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>

commit e07f541f50a31541f761300aa8bf6e3008ac448b
Author: Yongqiang Sun <yongqiang.sun@amd.com>
Date:   Tue Dec 19 16:47:02 2017 -0500

    drm/amd/display: Use real BE and FE index to program regs.
    
    In case of some pipes are fused, pipe_idx should not
    be used to program pipe regs. Instead of that, BE and FE
    inst number should be used for reg index.
    
    Signed-off-by: Yongqiang Sun <yongqiang.sun@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit a705c24b5d5012be1165f0bc43997babd9ed2614
Author: Eric Biggers <ebiggers@google.com>
Date:   Tue Feb 6 15:41:53 2018 -0800

    pipe: actually allow root to exceed the pipe buffer limits
    
    commit 85c2dd5473b2718b4b63e74bfeb1ca876868e11f upstream.
    
    pipe-user-pages-hard and pipe-user-pages-soft are only supposed to apply
    to unprivileged users, as documented in both Documentation/sysctl/fs.txt
    and the pipe(7) man page.
    
    However, the capabilities are actually only checked when increasing a
    pipe's size using F_SETPIPE_SZ, not when creating a new pipe.  Therefore,
    if pipe-user-pages-hard has been set, the root user can run into it and be
    unable to create pipes.  Similarly, if pipe-user-pages-soft has been set,
    the root user can run into it and have their pipes limited to 1 page each.
    
    Fix this by allowing the privileged override in both cases.
    
    Link: http://lkml.kernel.org/r/20180111052902.14409-4-ebiggers3@gmail.com
    Fixes: 759c01142a5d ("pipe: limit the per-user amount of pages allocated in pipes")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Acked-by: Kees Cook <keescook@chromium.org>
    Acked-by: Joe Lawrence <joe.lawrence@redhat.com>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: "Luis R . Rodriguez" <mcgrof@kernel.org>
    Cc: Michael Kerrisk <mtk.manpages@gmail.com>
    Cc: Mikulas Patocka <mpatocka@redhat.com>
    Cc: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a125e9a42302c5dc3c85b88eebc32c43bb65dd07
Author: Eric Biggers <ebiggers@google.com>
Date:   Tue Feb 6 15:41:53 2018 -0800

    pipe: actually allow root to exceed the pipe buffer limits
    
    commit 85c2dd5473b2718b4b63e74bfeb1ca876868e11f upstream.
    
    pipe-user-pages-hard and pipe-user-pages-soft are only supposed to apply
    to unprivileged users, as documented in both Documentation/sysctl/fs.txt
    and the pipe(7) man page.
    
    However, the capabilities are actually only checked when increasing a
    pipe's size using F_SETPIPE_SZ, not when creating a new pipe.  Therefore,
    if pipe-user-pages-hard has been set, the root user can run into it and be
    unable to create pipes.  Similarly, if pipe-user-pages-soft has been set,
    the root user can run into it and have their pipes limited to 1 page each.
    
    Fix this by allowing the privileged override in both cases.
    
    Link: http://lkml.kernel.org/r/20180111052902.14409-4-ebiggers3@gmail.com
    Fixes: 759c01142a5d ("pipe: limit the per-user amount of pages allocated in pipes")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Acked-by: Kees Cook <keescook@chromium.org>
    Acked-by: Joe Lawrence <joe.lawrence@redhat.com>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: "Luis R . Rodriguez" <mcgrof@kernel.org>
    Cc: Michael Kerrisk <mtk.manpages@gmail.com>
    Cc: Mikulas Patocka <mpatocka@redhat.com>
    Cc: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 50018d09843cc4813f1c2b89ff8fbcdf883ab0a3
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Nov 17 21:19:09 2017 +0200

    drm/i915: Redo plane sanitation during readout
    
    commit 23ac12732825901b3fc6ac720958d8bff9a0d6ec upstream.
    
    Unify the plane disabling during state readout by pulling the code into
    a new helper intel_plane_disable_noatomic(). We'll also read out the
    state of all planes, so that we know which planes really need to be
    diabled.
    
    Additonally we change the plane<->pipe mapping sanitation to work by
    simply disabling the offending planes instead of entire pipes. And
    we do it before we otherwise sanitize the crtcs, which means we don't
    have to worry about misassigned planes during crtc sanitation anymore.
    
    v2: Reoder patches to not depend on enum old_plane_id
    v3: s/for_each_pipe/for_each_intel_crtc/
    
    Cc: Thierry Reding <thierry.reding@gmail.com>
    Cc: Alex Villacís Lasso <alexvillacislasso@hotmail.com>
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=103223
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Tested-by: Thierry Reding <thierry.reding@gmail.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20171117191917.11506-3-ville.syrjala@linux.intel.com
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    (cherry picked from commit b1e01595a66dc206a2c75401ec4c285740537f3f)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4f361f601c0498c6a36bc044f5df8b778cf4e586
Author: Eric Biggers <ebiggers@google.com>
Date:   Tue Feb 6 15:41:53 2018 -0800

    pipe: actually allow root to exceed the pipe buffer limits
    
    commit 85c2dd5473b2718b4b63e74bfeb1ca876868e11f upstream.
    
    pipe-user-pages-hard and pipe-user-pages-soft are only supposed to apply
    to unprivileged users, as documented in both Documentation/sysctl/fs.txt
    and the pipe(7) man page.
    
    However, the capabilities are actually only checked when increasing a
    pipe's size using F_SETPIPE_SZ, not when creating a new pipe.  Therefore,
    if pipe-user-pages-hard has been set, the root user can run into it and be
    unable to create pipes.  Similarly, if pipe-user-pages-soft has been set,
    the root user can run into it and have their pipes limited to 1 page each.
    
    Fix this by allowing the privileged override in both cases.
    
    Link: http://lkml.kernel.org/r/20180111052902.14409-4-ebiggers3@gmail.com
    Fixes: 759c01142a5d ("pipe: limit the per-user amount of pages allocated in pipes")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Acked-by: Kees Cook <keescook@chromium.org>
    Acked-by: Joe Lawrence <joe.lawrence@redhat.com>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: "Luis R . Rodriguez" <mcgrof@kernel.org>
    Cc: Michael Kerrisk <mtk.manpages@gmail.com>
    Cc: Mikulas Patocka <mpatocka@redhat.com>
    Cc: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cdb3db8542d854bd678d60cd28861b042e191672
Author: Jani Nikula <jani.nikula@intel.com>
Date:   Wed Feb 14 19:38:40 2018 +0200

    drm/i915/audio: fix check for av_enc_map overflow
    
    Turns out -1 >= ARRAY_SIZE() is always true. Move the bounds check where
    we know pipe >= 0 and next to the array indexing where it makes most
    sense.
    
    Fixes: 9965db26ac05 ("drm/i915: Check for fused or unused pipes")
    Fixes: 0b7029b7e43f ("drm/i915: Check for fused or unused pipes")
    Cc: <stable@vger.kernel.org> # v4.10+
    Cc: Mika Kahola <mika.kahola@intel.com>
    Cc: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Cc: Jani Nikula <jani.nikula@linux.intel.com>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Cc: intel-gfx@lists.freedesktop.org
    Reviewed-by: Dhinakaran Pandiyan <dhinakaran.pandiyan@intel.com>
    Reviewed-by: Mika Kahola <mika.kahola@intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20180214173840.25360-1-jani.nikula@intel.com

commit 85c2dd5473b2718b4b63e74bfeb1ca876868e11f
Author: Eric Biggers <ebiggers@google.com>
Date:   Tue Feb 6 15:41:53 2018 -0800

    pipe: actually allow root to exceed the pipe buffer limits
    
    pipe-user-pages-hard and pipe-user-pages-soft are only supposed to apply
    to unprivileged users, as documented in both Documentation/sysctl/fs.txt
    and the pipe(7) man page.
    
    However, the capabilities are actually only checked when increasing a
    pipe's size using F_SETPIPE_SZ, not when creating a new pipe.  Therefore,
    if pipe-user-pages-hard has been set, the root user can run into it and be
    unable to create pipes.  Similarly, if pipe-user-pages-soft has been set,
    the root user can run into it and have their pipes limited to 1 page each.
    
    Fix this by allowing the privileged override in both cases.
    
    Link: http://lkml.kernel.org/r/20180111052902.14409-4-ebiggers3@gmail.com
    Fixes: 759c01142a5d ("pipe: limit the per-user amount of pages allocated in pipes")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Acked-by: Kees Cook <keescook@chromium.org>
    Acked-by: Joe Lawrence <joe.lawrence@redhat.com>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: "Luis R . Rodriguez" <mcgrof@kernel.org>
    Cc: Michael Kerrisk <mtk.manpages@gmail.com>
    Cc: Mikulas Patocka <mpatocka@redhat.com>
    Cc: Willy Tarreau <w@1wt.eu>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 4c2e4befb3cc9ce42d506aa537c9ab504723e98c
Author: Eric Biggers <ebiggers@google.com>
Date:   Tue Feb 6 15:41:45 2018 -0800

    pipe, sysctl: drop 'min' parameter from pipe-max-size converter
    
    Patch series "pipe: buffer limits fixes and cleanups", v2.
    
    This series simplifies the sysctl handler for pipe-max-size and fixes
    another set of bugs related to the pipe buffer limits:
    
    - The root user wasn't allowed to exceed the limits when creating new
      pipes.
    
    - There was an off-by-one error when checking the limits, so a limit of
      N was actually treated as N - 1.
    
    - F_SETPIPE_SZ accepted values over UINT_MAX.
    
    - Reading the pipe buffer limits could be racy.
    
    This patch (of 7):
    
    Before validating the given value against pipe_min_size,
    do_proc_dopipe_max_size_conv() calls round_pipe_size(), which rounds the
    value up to pipe_min_size.  Therefore, the second check against
    pipe_min_size is redundant.  Remove it.
    
    Link: http://lkml.kernel.org/r/20180111052902.14409-2-ebiggers3@gmail.com
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Acked-by: Kees Cook <keescook@chromium.org>
    Acked-by: Joe Lawrence <joe.lawrence@redhat.com>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: "Luis R . Rodriguez" <mcgrof@kernel.org>
    Cc: Michael Kerrisk <mtk.manpages@gmail.com>
    Cc: Mikulas Patocka <mpatocka@redhat.com>
    Cc: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit d6a841a4598bf3a08e68c520f38adc87d3bf4941
Merge: 24b8ef699e82 751b01cb07eb
Author: Dave Airlie <airlied@redhat.com>
Date:   Tue Feb 6 06:31:01 2018 +1000

    Merge tag 'drm-intel-next-fixes-2018-02-01' of git://anongit.freedesktop.org/drm/drm-intel into drm-next
    
    Fixes for GPU hangs and other bugs around hangcheck and result;
    Fix for regression on suspend case with vgaswitcheroo;
    Fixes for eDP and HDMI blank screens
    Fix for protecting WC allocation to avoid overflow on page vec;
    Cleanup around unpublished GLK firmware blobs, and other small fixes.
    
    This also contains GVT pull request mostly with regression
    fixes on vGPU display dmabuf, mmio switch and other misc changes.
    
    * tag 'drm-intel-next-fixes-2018-02-01' of git://anongit.freedesktop.org/drm/drm-intel: (21 commits)
      drm/i915/ppgtt: Pin page directories before allocation
      drm/i915: Always run hangcheck while the GPU is busy
      Revert "drm/i915: mark all device info struct with __initconst"
      drm/i915/edp: Do not do link training fallback or prune modes on EDP
      drm/i915: Check for fused or unused pipes
      drm/i915: Protect WC stash allocation against direct reclaim
      drm/i915: Only attempt to scan the requested number of shrinker slabs
      drm/i915: Always call to intel_display_set_init_power() in resume_early.
      drm/i915/gvt: cancel scheduler timer when no vGPU exists
      drm/i915/gvt: cancel virtual vblank timer when no vGPU exists
      drm/i915/gvt: Keep obj->dma_buf link NULL during exporting
      drm/i915/pmu: Reconstruct active state on starting busy-stats
      drm/i915: Stop getting the fault address from RING_FAULT_REG
      drm/i915/guc: Add uc_fini_wq in gem_init unwind path
      drm/i915: Fix using BIT_ULL() vs. BIT() for power domain masks
      drm/i915: Try EDID bitbanging on HDMI after failed read
      drm/i915/glk: Disable Guc and HuC on GLK
      drm/i915/gvt: Do not use I915_NUM_ENGINES to iterate over the mocs regs array
      drm/i915/gvt: validate gfn before set shadow page entry
      drm/i915/gvt: add PLANE_KEYMAX regs to mmio track list
      ...

commit 9965db26ac0548648309f506dc155a92daa2158f
Author: Mika Kahola <mika.kahola@intel.com>
Date:   Mon Dec 18 10:04:03 2017 +0200

    drm/i915: Check for fused or unused pipes
    
    We may have fused or unused pipes in our system. Let's check that the pipe
    in question is within limits of accessible pipes. In case, that we are not
    able to access the pipe, we return early with a warning.
    
    v2: Rephrasing of the commit message (Jani)
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=103206
    Reported-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Jaswinder Singh Rajput <jaswinder@perfectintelligent.com>
    Suggested-by: Jani Nikula <jani.nikula@intel.com>
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Mika Kahola <mika.kahola@intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/1513584243-12607-1-git-send-email-mika.kahola@intel.com
    (cherry picked from commit 0b7029b7e43fda1304c181a3ade0b429b9edcd9d)
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Cc: <stable@vger.kernel.org> # v4.10+

commit 47a05f4a68f91c09d89d2a0231b7b8c7ebb808ca
Author: Maxime Ripard <maxime.ripard@free-electrons.com>
Date:   Mon May 1 10:52:32 2017 +0200

    drm/sun4i: backend: Add support for zpos
    
    Our various planes have a configurable zpos, that combined with the pipes
    allow to configure the composition.
    
    Since the interaction between the pipes, zpos and alphas framebuffers is
    not trivial, let's just enable the zpos as an immutable property for now,
    and use that zpos in our atomic_update part.
    
    Reviewed-by: Chen-Yu Tsai <wens@csie.org>
    Signed-off-by: Maxime Ripard <maxime.ripard@free-electrons.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/b006853e908bd06661c5bc1f2191121523bce0e4.1516617243.git-series.maxime.ripard@free-electrons.com

commit b327a717e506980399464e304e363f94f95eb7a1
Author: Aurelien Aptel <aaptel@suse.com>
Date:   Wed Jan 24 13:46:10 2018 +0100

    CIFS: make IPC a regular tcon
    
    * Remove ses->ipc_tid.
    * Make IPC$ regular tcon.
    * Add a direct pointer to it in ses->tcon_ipc.
    * Distinguish PIPE tcon from IPC tcon by adding a tcon->pipe flag. All
      IPC tcons are pipes but not all pipes are IPC.
    * All TreeConnect functions now cannot take a NULL tcon object.
    
    The IPC tcon has the same lifetime as the session it belongs to. It is
    created when the session is created and destroyed when the session is
    destroyed.
    
    Since no mounts directly refer to the IPC tcon, its refcount should
    always be set to initialisation value (1). Thus we make sure
    cifs_put_tcon() skips it.
    
    If the mount request resulting in a new session being created requires
    encryption, try to require it too for IPC.
    
    * set SERVER_NAME_LENGTH to serverName actual size
    
    The maximum length of an ipv6 string representation is defined in
    INET6_ADDRSTRLEN as 45+1 for null but lets keep what we know works.
    
    Signed-off-by: Aurelien Aptel <aaptel@suse.com>
    Signed-off-by: Steve French <smfrench@gmail.com>
    Reviewed-by: Pavel Shilovsky <pshilov@microsoft.com>

commit 0b7029b7e43fda1304c181a3ade0b429b9edcd9d
Author: Mika Kahola <mika.kahola@intel.com>
Date:   Mon Dec 18 10:04:03 2017 +0200

    drm/i915: Check for fused or unused pipes
    
    We may have fused or unused pipes in our system. Let's check that the pipe
    in question is within limits of accessible pipes. In case, that we are not
    able to access the pipe, we return early with a warning.
    
    v2: Rephrasing of the commit message (Jani)
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=103206
    Reported-by: Thomas Gleixner <tglx@linutronix.de>
    Tested-by: Jaswinder Singh Rajput <jaswinder@perfectintelligent.com>
    Suggested-by: Jani Nikula <jani.nikula@intel.com>
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Mika Kahola <mika.kahola@intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/1513584243-12607-1-git-send-email-mika.kahola@intel.com

commit 23ac12732825901b3fc6ac720958d8bff9a0d6ec
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Nov 17 21:19:09 2017 +0200

    drm/i915: Redo plane sanitation during readout
    
    Unify the plane disabling during state readout by pulling the code into
    a new helper intel_plane_disable_noatomic(). We'll also read out the
    state of all planes, so that we know which planes really need to be
    diabled.
    
    Additonally we change the plane<->pipe mapping sanitation to work by
    simply disabling the offending planes instead of entire pipes. And
    we do it before we otherwise sanitize the crtcs, which means we don't
    have to worry about misassigned planes during crtc sanitation anymore.
    
    v2: Reoder patches to not depend on enum old_plane_id
    v3: s/for_each_pipe/for_each_intel_crtc/
    
    Cc: Thierry Reding <thierry.reding@gmail.com>
    Cc: Alex Villacís Lasso <alexvillacislasso@hotmail.com>
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=103223
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Tested-by: Thierry Reding <thierry.reding@gmail.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20171117191917.11506-3-ville.syrjala@linux.intel.com
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    (cherry picked from commit b1e01595a66dc206a2c75401ec4c285740537f3f)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>

commit acaf662285ed5d12af2678116c8897a1171197da
Author: Michel Dänzer <michel.daenzer@amd.com>
Date:   Wed Dec 20 10:45:36 2017 +0100

    Revert "drm/radeon: reduce number of free VMIDs and pipes in KV"
    
    This reverts the remaining changes of commit
    62a7b7fbd08ef745bb51e8728e89125a0ba6327e, because radeon doesn't support
    amdkfd anymore. The number of VMIDs was already changed back when amdkfd
    support was removed.
    
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Michel Dänzer <michel@daenzer.net>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 7d752ea2dafcdbb2f1409fae6b48ef3426bb41fb
Author: Michel Dänzer <michel.daenzer@amd.com>
Date:   Wed Dec 20 10:45:36 2017 +0100

    Revert "drm/radeon/cik: Don't touch int of pipes 1-7"
    
    This reverts commit 28b57b856b635ea0d44f1281e2efdc963c100ea3. radeon
    doesn't support amdkfd anymore, so the latter doesn't set up interrupts
    for pipes 1-7.
    
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Michel Dänzer <michel@daenzer.net>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit cb6c13d914e0f5b7badc3ec455114e4b45177c2a
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Mon Nov 13 17:59:18 2017 +0900

    usb: gadget: udc: renesas_usb3: fix number of the pipes
    
    commit a58204ab91ad8cae4d8474aa0ba5d1fc504860c9 upstream.
    
    This controller on R-Car Gen3 has 6 pipes that included PIPE 0 for
    control actually. But, the datasheet has error in writing as it has
    31 pipes. (However, the previous code defined 30 pipes wrongly...)
    
    Anyway, this patch fixes it.
    
    Fixes: 746bfe63bba3 ("usb: gadget: renesas_usb3: add support for Renesas USB3.0 peripheral controller")
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fbe9a14180d6a57badfbca5986b1539db330a554
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Mon Nov 13 17:59:18 2017 +0900

    usb: gadget: udc: renesas_usb3: fix number of the pipes
    
    commit a58204ab91ad8cae4d8474aa0ba5d1fc504860c9 upstream.
    
    This controller on R-Car Gen3 has 6 pipes that included PIPE 0 for
    control actually. But, the datasheet has error in writing as it has
    31 pipes. (However, the previous code defined 30 pipes wrongly...)
    
    Anyway, this patch fixes it.
    
    Fixes: 746bfe63bba3 ("usb: gadget: renesas_usb3: add support for Renesas USB3.0 peripheral controller")
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3e64668d7926854b084f89831ecbe4ae75600db6
Author: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
Date:   Thu Nov 2 10:52:09 2017 -0400

    drm/amd/display: fix regamma programming
    
    When new coefficients match cached we would skip setting regamma mode
    Also, when doing a stream update we would program regamma for all pipes,
    even thos that are not yet powered on. This resulted in never setting
    regamma since we would cache before the pipe is powered.
    
    Signed-off-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit e6c258cb4e6fbc7500c493df22f52e1046c575b0
Author: Yongqiang Sun <yongqiang.sun@amd.com>
Date:   Mon Oct 30 17:32:14 2017 -0400

    drm/amd/display: Refactor disable front end pipes.
    
    There are different code to disable front end, it is
    difficult to debug and adding new process.
    This refactor makes all disable front end call the same
    functions.
    
    Signed-off-by: Yongqiang Sun <yongqiang.sun@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 6b0b3bda3d77c35fa9cf20067c0b62daff98c042
Merge: 54b9937082cd 80e457699a8d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Dec 5 08:50:04 2017 -0800

    Merge tag 'usb-4.15-rc3' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/usb
    
    Pull USB fixes from Greg KH:
     "Here are a few minor USB fixes for 4.15-rc3.
    
      The largest here is the Kconfig text and configuration changes for the
      USB TypeC build options that you reported during the -rc1 merge
      window. The others are all just small fixes for reported issues, as
      well as some new device ids.
    
      The most "interesting" of anything here is the usbip fixes as it seems
      lots of people are starting to pay attention to that driver at the
      moment. These fixes should resolve all of the reported problems as of
      now.
    
      Of course there are the usual xhci and gadget fixes as well, can't go
      a pull request without those...
    
      All of these have been in linux-next for a while with no reported
      issues"
    
    * tag 'usb-4.15-rc3' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/usb: (22 commits)
      usb: xhci: fix panic in xhci_free_virt_devices_depth_first
      xhci: Don't show incorrect WARN message about events for empty rings
      usbip: fix usbip attach to find a port that matches the requested speed
      usbip: Fix USB device hang due to wrong enabling of scatter-gather
      uas: Always apply US_FL_NO_ATA_1X quirk to Seagate devices
      usb: quirks: Add no-lpm quirk for KY-688 USB 3.1 Type-C Hub
      usb: build drivers/usb/common/ when USB_SUPPORT is set
      usb: hub: Cycle HUB power when initialization fails
      USB: core: Add type-specific length check of BOS descriptors
      usb: host: fix incorrect updating of offset
      USB: ulpi: fix bus-node lookup
      USB: usbfs: Filter flags passed in from user space
      usb: add user selectable option for the whole USB Type-C Support
      usb: f_fs: Force Reserved1=1 in OS_DESC_EXT_COMPAT
      usb: gadget: core: Fix ->udc_set_speed() speed handling
      usb: gadget: allow to enable legacy drivers without USB_ETH
      usb: gadget: udc: renesas_usb3: fix number of the pipes
      usb: gadget: don't dereference g until after it has been null checked
      USB: serial: usb_debug: add new USB device id
      usb: bdc: fix platform_no_drv_owner.cocci warnings
      ...

commit 7a5086a71e8228a91ed5e8c7ae73e64799b12b66
Author: Yongqiang Sun <yongqiang.sun@amd.com>
Date:   Fri Oct 20 14:12:35 2017 -0400

    drm/amd/display: Power down front end in init_hw.
    
    front end is initialized during init_hw, but not
    power gated. There are some left over valuse and will
    cause some diags test failed. Power gated all front
    end pipes will make sure every test has same starting
    point.
    
    Signed-off-by: Yongqiang Sun <yongqiang.sun@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit d5fb43cb7fffc8f6863d68456252bcf3f06a070a
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Nov 29 17:37:31 2017 +0200

    drm/i915: Wait for pipe to start on i830 as well
    
    We should make sure the pipe has fully started when we enable it from
    the i830 "power well". Otherwise theoretically i830 could also hit
    problems with vblank timestamps jumping around (since we skip the
    wait during modeset on i830). Additionally moving planes between the
    pipes etc. might not work correctly until both pipes are actually up and
    running.
    
    v2: Less pointless duplication in the code (Chris)
    
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20171129153732.3612-2-ville.syrjala@linux.intel.com

commit 05bcccebda44c4b0a78bb0b9b2f23dd28e95f56b
Merge: 7a38b2d107b4 a3acc696085e
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Nov 30 16:33:59 2017 +0000

    Merge tag 'fixes-for-v4.15-rc2' of git://git.kernel.org/pub/scm/linux/kernel/git/balbi/usb into usb-linus
    
    Felipe writes:
    
    usb: fixes for v4.15-rc2
    
    After a long time, we finally have a good solution for how to handle
    OS descriptor on FFS. From now on we will force the Reserved field to
    be 1 as mandated by the specification.
    
    Apart from that, we have a couple other smaller fixes:
    
    - FFS learned to not sleep in atomic context.
    - UDC-core has a fix for the way we set a UDC's operating speed.
    - Renesas USB3 has a fix for the maximum number of pipes supported
    - Allow legacy drivers to be compiled without USB_ETH
    - Fix some coccinelle warnings

commit a58204ab91ad8cae4d8474aa0ba5d1fc504860c9
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Mon Nov 13 17:59:18 2017 +0900

    usb: gadget: udc: renesas_usb3: fix number of the pipes
    
    This controller on R-Car Gen3 has 6 pipes that included PIPE 0 for
    control actually. But, the datasheet has error in writing as it has
    31 pipes. (However, the previous code defined 30 pipes wrongly...)
    
    Anyway, this patch fixes it.
    
    Fixes: 746bfe63bba3 ("usb: gadget: renesas_usb3: add support for Renesas USB3.0 peripheral controller")
    Cc: <stable@vger.kernel.org> # v4.5+
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>

commit 8f20f2dca8b390b4fe9e40ed6196c805a3f07b66
Author: Christian Gromm <christian.gromm@microchip.com>
Date:   Tue Nov 21 15:05:15 2017 +0100

    staging: most: usb: clear functional stall on OUT endpoint
    
    For the MOST packet channel there are two dedicated USB endpoints. But
    internally the hardware has actually one channel for data forwarding from
    and to MOST. To have the hardware clean up its state machine correctly in
    case of an error, both USB pipes need to be reset.  This patch triggers the
    host to also clear the OUT endpoint's halt condition in case an IN endpoint
    has signaled to be stalled.
    
    Signed-off-by: Christian Gromm <christian.gromm@microchip.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b1e01595a66dc206a2c75401ec4c285740537f3f
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Nov 17 21:19:09 2017 +0200

    drm/i915: Redo plane sanitation during readout
    
    Unify the plane disabling during state readout by pulling the code into
    a new helper intel_plane_disable_noatomic(). We'll also read out the
    state of all planes, so that we know which planes really need to be
    diabled.
    
    Additonally we change the plane<->pipe mapping sanitation to work by
    simply disabling the offending planes instead of entire pipes. And
    we do it before we otherwise sanitize the crtcs, which means we don't
    have to worry about misassigned planes during crtc sanitation anymore.
    
    v2: Reoder patches to not depend on enum old_plane_id
    v3: s/for_each_pipe/for_each_intel_crtc/
    
    Cc: Thierry Reding <thierry.reding@gmail.com>
    Cc: Alex Villacís Lasso <alexvillacislasso@hotmail.com>
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=103223
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Tested-by: Thierry Reding <thierry.reding@gmail.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20171117191917.11506-3-ville.syrjala@linux.intel.com
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>

commit 3657e92762c42b098cb7057ac86b1c7cd30336e5
Author: Mika Kahola <mika.kahola@intel.com>
Date:   Thu Nov 9 10:37:50 2017 +0200

    drm/i915: Generalize transcoder looping
    
    To make looping through transcoders in intel_ddi.c more generic, let's switch
    to use 'for_each_pipe()' macro to do this.
    
    v2: Add a notion that we are dealing with transcoders instead of pipes (Jani)
    
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Mika Kahola <mika.kahola@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/1510216670-16848-1-git-send-email-mika.kahola@intel.com
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>

commit f9a1c372299fed53d4b72bb601f7f3bfe6f9999c
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon Nov 6 10:47:14 2017 +0100

    ALSA: usx2y: Fix invalid stream URBs
    
    The us122l driver creates URBs per the fixed endpoints, and this may
    end up with URBs with inconsistent pipes when a fuzzer or a malicious
    program deals with the manipulated endpoints.  It ends up with a
    kernel warning like:
    
      usb 1-1: BOGUS urb xfer, pipe 0 != type 3
      ------------[ cut here ]------------
      WARNING: CPU: 0 PID: 24 at drivers/usb/core/urb.c:471
      usb_submit_urb+0x113e/0x1400
      Call Trace:
       usb_stream_start+0x48a/0x9f0 sound/usb/usx2y/usb_stream.c:690
       us122l_start+0x116/0x290 sound/usb/usx2y/us122l.c:365
       us122l_create_card sound/usb/usx2y/us122l.c:502
       us122l_usb_probe sound/usb/usx2y/us122l.c:588
       ....
    
    For avoiding the bad access, this patch adds a few sanity checks of
    the validity of created URBs like previous similar fixes using the new
    usb_urb_ep_type_check() helper function.
    
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Tested-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit 36a5fdf76d3281345e000e115f33817570a76420
Merge: bf6eb600e5b8 cdc1cdca2d91
Author: Dave Airlie <airlied@redhat.com>
Date:   Sat Nov 4 05:43:44 2017 +1000

    Merge tag 'drm-intel-next-2017-10-23' of git://anongit.freedesktop.org/drm/drm-intel into drm-next
    
    This time really the last i915 batch for v4.15:
    
    - PSR state tracking in crtc state (Ville)
    - Fix eviction when the GGTT is idle but full (Chris)
    - BDW DP aux channel timeout fix (James)
    - LSPCON detection fixes (Shashank)
    - Use for_each_pipe to iterate over pipes (Mika Kahola)
    - Replace *_reference/unreference() or *_ref/unref with _get/put() (Harsha)
    - Refactoring and preparation for DDI encoder type cleanup (Ville)
    - Broadwell DDI FDI buf translation fix (Chris)
    - Read CSB and CSB write pointer from HWSP in GVT-g VM if available (Weinan)
    - GuC/HuC firmware loader refactoring (Michal)
    - Make shrinking more effective and not stall so much (Chris)
    - Cannonlake PLL fixes (Rodrigo)
    - DP MST connector error propagation fixes (James)
    - Convert timers to use timer_setup (Kees Cook)
    - Skylake plane enable/disable unification (Juha-Pekka)
    - Fix to actually free driver internal objects when requested (Chris)
    - DDI buf trans refactoring (Ville)
    - Skip waking the device to service pwrite (Chris)
    - Improve DSI VBT backlight parsing abstraction (Madhav)
    - Cannonlake VBT DDC pin mapping fix (Rodrigo)
    
    * tag 'drm-intel-next-2017-10-23' of git://anongit.freedesktop.org/drm/drm-intel: (87 commits)
      drm/i915: Update DRIVER_DATE to 20171023
      drm/i915/cnl: Map VBT DDC Pin to BSpec DDC Pin.
      drm/i915: Let's use more enum intel_dpll_id pll_id.
      drm/i915: Use existing DSI backlight ports info
      drm/i915: Parse DSI backlight/cabc ports.
      drm/i915: Skip waking the device to service pwrite
      drm/i915/crt: split compute_config hook by platforms
      drm/i915: remove g4x lowfreq_avail and has_pipe_cxsr
      drm/i915: Drop the redundant hdmi prefix/suffix from a lot of variables
      drm/i915: Unify error handling for missing DDI buf trans tables
      drm/i915: Centralize the SKL DDI A/E vs. B/C/D buf trans handling
      drm/i915: Kill off the BXT buf_trans default_index
      drm/i915: Pass encoder type to cnl_ddi_vswing_sequence() explicitly
      drm/i915: Integrate BXT into intel_ddi_dp_voltage_max()
      drm/i915: Pass the level to intel_prepare_hdmi_ddi_buffers()
      drm/i915: Pass the encoder type explicitly to skl_set_iboost()
      drm/i915: Extract intel_ddi_get_buf_trans_hdmi()
      drm/i915: Relocate intel_ddi_get_buf_trans_*() functions
      drm/i915: Flush the idle-worker for debugfs/i915_drop_caches
      drm/i915: adjust get_crtc_fence_y_offset() to use base.y instead of crtc.y
      ...

commit b14892801078085cb54dcbe3389057e12c1746a2
Author: Archit Taneja <architt@codeaurora.org>
Date:   Fri Oct 27 16:27:30 2017 +0530

    drm/msm/mdp5: Update mdp5_pipe_assign to spit out both planes
    
    We currently call mdp5_pipe_assign() twice to assign the left and right
    hwpipes for our drm_plane. When merging 2 hwpipes, there are a few
    constraints that we need to keep in mind:
    
    - Only the same types of SSPPs are preferred. I.e, a RGB pipe should
      be paired with another RGB pipe, VIG with VIG etc.
    - The hwpipe staged on the left should have a higher priority than
      the hwpipe staged on the right. The priorities are as follows:
      VIG0 > VIG1 > VIG2 > VIG3
      RGB0 > RGB1 > RGB2 > RGB3
      DMA0 > DMA1
    
    We can't apply these constraints easily if mdp5_pipe_assign() is
    called twice. Update mdp5_pipe_assign() to find both hwpipes in
    one go, and add the extra constraints needed.
    
    Signed-off-by: Archit Taneja <architt@codeaurora.org>
    Signed-off-by: Rob Clark <robdclark@gmail.com>

commit 224a4c970987fc685bc04854c5fb2d94ef46b2ee
Author: Gustavo Padovan <gustavo.padovan@collabora.com>
Date:   Fri Jun 30 15:03:20 2017 -0300

    drm/msm: update cursors asynchronously through atomic
    
    Add support to async updates of cursors by using the new atomic
    interface for that. Basically what this commit does is do what
    mdp5_update_cursor_plane_legacy() did but through atomic.
    
    v5: call drm_atomic_helper_async_check() from the check hook
    
    v4: add missing atomic async commit call to msm_atomic_commit(Archit Taneja)
    
    v3: move size checks back to drivers (Ville Syrjälä)
    
    v2: move fb setting to core and use new state (Eric Anholt)
    
    Cc: Rob Clark <robdclark@gmail.com>
    Cc: Archit Taneja <architt@codeaurora.org>
    Signed-off-by: Gustavo Padovan <gustavo.padovan@collabora.com>
    Tested-by: Archit Taneja <architt@codeaurora.org> (v4)
    [added comment about not hitting async update path if hwpipes are
     re-assigned or global state is touched]
    Signed-off-by: Rob Clark <robdclark@gmail.com>

commit 62c933f9c6bf287b5b911a1eb838bc942eaa7202
Author: Yongqiang Sun <yongqiang.sun@amd.com>
Date:   Tue Oct 10 14:01:33 2017 -0400

    drm/amd/display: WA for 3 display play video hot plug.
    
            Three monitor connected and playing a video will
            occupy all 4 pipes, if hot plug forth display,
            commit streams will be failed due to no free pipe
            can be found.
            Work around:
            When forth monitor connected, mark video plane as
            a fake plane, remove it in dc, keep it in dm and
            report address to OS, until OS turn off MPO.
    
    Signed-off-by: Yongqiang Sun <yongqiang.sun@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Harry Wentland <Harry.Wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 4d58443dddf95e7f1de73f60b8490426eb300b10
Author: Mika Kahola <mika.kahola@intel.com>
Date:   Fri Oct 13 13:24:46 2017 +0300

    drm/i915: Get rid of hardcoded pipes
    
    Favor for_each_pipe() macro when looping through pipes.
    
    Signed-off-by: Mika Kahola <mika.kahola@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/1507890286-16214-1-git-send-email-mika.kahola@intel.com
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>

commit cfe057f7db1ff026c8db75469a3f9ba9736e1975
Author: Al Viro <viro@ZenIV.linux.org.uk>
Date:   Mon Sep 11 21:17:09 2017 +0100

    iomap_dio_actor(): fix iov_iter bugs
    
    1) Ignoring return value from iov_iter_zero() is wrong
    for iovec-backed case as well as for pipes - it can fail.
    
    2) Failure to fault destination pages in 25Mb into a 50Mb iovec
    should not act as if nothing in the area had been read, nevermind
    that the first 25Mb might have *already* been read by that point.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit 78619e32e57f9f9acd8653b569e48f2d52fa3304
Author: Mika Kahola <mika.kahola@intel.com>
Date:   Tue Oct 10 13:17:05 2017 +0300

    drm/i915: Favor for_each_pipe() macro
    
    Favor for_each_pipe() macro when looping through pipes.
    
    v2: use 'enum pipe pipe' instead of 'i'
    
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Mika Kahola <mika.kahola@intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/1507630626-23806-5-git-send-email-mika.kahola@intel.com

commit 0d5f662575e542ed22b5054c2b0887f42271be5e
Author: Mika Kahola <mika.kahola@intel.com>
Date:   Tue Oct 10 13:17:02 2017 +0300

    drm/i915: Don't relay on I915_MAX_PIPES
    
    Let's remove the dependency on I915_MAX_PIPES. Instead, get the number
    of pipes from platform information.
    
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Ramalingam C <ramalingam.c@intel.com>
    Signed-off-by: Mika Kahola <mika.kahola@intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/1507630626-23806-2-git-send-email-mika.kahola@intel.com

commit 35161bbc135a748dd0a3c822030b3341cdefbd33
Author: Andres Rodriguez <andresx7@gmail.com>
Date:   Tue Sep 26 17:43:14 2017 -0400

    drm/amdgpu: map compute rings by least recently used pipe
    
    This patch provides a guarantee that the first n queues allocated by
    an application will be on different pipes. Where n is the number of
    pipes available from the hardware.
    
    This helps avoid ring aliasing which can result in work executing in
    time-sliced mode instead of truly parallel mode.
    
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Andres Rodriguez <andresx7@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit ab8db3e1653c50ae19d1c31d82f94beb5115aeef
Author: Andrey Grodzovsky <Andrey.Grodzovsky@amd.com>
Date:   Mon Aug 28 14:25:01 2017 -0400

    drm/amd/display: Move dis_clk into dc_state.
    
    dis_clk is single instance across pipes.
    
    Signed-off-by: Andrey Grodzovsky <Andrey.Grodzovsky@amd.com>
    Reviewed-by: Harry Wentland <Harry.Wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 1dc904974eb7deef924650adc5af542878ce2040
Author: Andrey Grodzovsky <Andrey.Grodzovsky@amd.com>
Date:   Mon Jul 31 11:29:25 2017 -0400

    drm/amd/display: Per stream validate_context build v2.
    
    Until now new context would start as empty, then populated
    with exsisting pipes + new. Now we start with duplication
    of existing context and then add/delete from the context
    pipes as needed.
    
    This allows to do a per stream resource
    population, start discarding dc_validation_set
    and by this brings DC closer to to DRM.
    
    v2: Add some fixes and rebase.
    
    Signed-off-by: Andrey Grodzovsky <Andrey.Grodzovsky@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Harry Wentland <Harry.Wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 7992a6290a79afc1568c873d434f39234f7d3e26
Author: Alex Deucher <alexdeucher@gmail.com>
Date:   Thu Aug 10 14:39:51 2017 -0400

    drm/amd/disply/dc: add resource support for DCE8 APUs (v2)
    
    Add the appropriate resources for APUs:
    KV:    4 pipes, 7 dig, 3 PPLLs
    KB/ML: 2 pipes, 6 dig, 2 PPLLs
    
    v2: rebase changes
    
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Reviewed-by: Harry Wentland <harry.wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 96c50c0d0cead772001fd4ab1861594c059e7e0f
Author: Harry Wentland <harry.wentland@amd.com>
Date:   Sun Jul 30 15:58:26 2017 -0400

    drm/amd/display: Move encoder_info_frame to stream_res
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i
    's/pipes->encoder_info_frame/pipes->stream_res\.encoder_info_frame/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i
    's/pipe_with_clk_src->encoder_info_frame/pipe_with_clk_src->stream_res\.encoder_info_frame/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i
    's/ctx->encoder_info_frame->/ctx->stream_res\.encoder_info_frame->/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i
    's/pipe->encoder_info_frame/pipe->stream_res\.encoder_info_frame/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i
    's/pipe_ctx->encoder_info_frame/pipe_ctx->stream_res\.encoder_info_frame/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i \
    's/pipe_ctx\[pipe_offset\]\.encoder_info_frame/pipe_ctx\[pipe_offset\]\.stream_res\.encoder_info_frame/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i \
    's/grouped_pipes\[i\]->encoder_info_frame/grouped_pipes\[i\]->stream_^Cs\.encoder_info_frame/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i \
    's/grouped_pipes\[0\]->encoder_info_frame/grouped_pipes\[0\]->stream_res\.encoder_info_frame/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i \
    's/grouped_pipes\[1\]->encoder_info_frame/grouped_pipes\[1\]->stream_res\.encoder_info_frame/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i \
    's/pipe_ctx\[i\]->encoder_info_frame/pipe_ctx\[i\]->stream_res\.encoder_info_frame/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i \
    's/pipe_ctx_old->encoder_info_frame/pipe_ctx_old->stream_res\.encoder_info_frame/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i \
    's/pipe_set\[j\]->encoder_info_frame/pipe_set\[j\]->stream_res\.encoder_info_frame/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i \
    's/pipe_ctx\[i\]\.encoder_info_frame/pipe_ctx\[i\]\.stream_res\.encoder_info_frame/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i \
    's/pipes\[i\]\.encoder_info_frame/pipes\[i\]\.stream_res\.encoder_info_frame/g'
    
    Signed-off-by: Harry Wentland <harry.wentland@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Harry Wentland <Harry.Wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 10688217e3af3ec73892139bed3d23a6e1170a14
Author: Harry Wentland <harry.wentland@amd.com>
Date:   Sun Jul 30 15:17:43 2017 -0400

    drm/amd/display: Move pix_clk_params into stream_res
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i
    's/pipes->pix_clk_params/pipes->stream_res\.pix_clk_params/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i
    's/pipe_with_clk_src->pix_clk_params/pipe_with_clk_src->stream_res\.pix_clk_params/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i
    's/ctx->pix_clk_params->/ctx->stream_res\.pix_clk_params->/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i 's/pipe->pix_clk_params/pipe->stream_res\.pix_clk_params/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i
    's/pipe_ctx->pix_clk_params/pipe_ctx->stream_res\.pix_clk_params/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i \
    's/pipe_ctx\[pipe_offset\]\.pix_clk_params/pipe_ctx\[pipe_offset\]\.stream_res\.pix_clk_params/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i \
    's/grouped_pipes\[i\]->pix_clk_params/grouped_pipes\[i\]->stream_^Cs\.pix_clk_params/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i \
    's/grouped_pipes\[0\]->pix_clk_params/grouped_pipes\[0\]->stream_res\.pix_clk_params/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i \
    's/grouped_pipes\[1\]->pix_clk_params/grouped_pipes\[1\]->stream_res\.pix_clk_params/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i \
    's/pipe_ctx\[i\]->pix_clk_params/pipe_ctx\[i\]->stream_res\.pix_clk_params/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i \
    's/pipe_ctx_old->pix_clk_params/pipe_ctx_old->stream_res\.pix_clk_params/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i \
    's/pipe_set\[j\]->pix_clk_params/pipe_set\[j\]->stream_res\.pix_clk_params/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i \
    's/pipe_ctx\[i\]\.pix_clk_params/pipe_ctx\[i\]\.stream_res\.pix_clk_params/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i \
    's/pipes\[i\]\.pix_clk_params/pipes\[i\]\.stream_res\.pix_clk_params/g'
    
    Signed-off-by: Harry Wentland <harry.wentland@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Harry Wentland <Harry.Wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit afaacef482759215681ad0a8c6a8b60cc7d29592
Author: Harry Wentland <harry.wentland@amd.com>
Date:   Sun Jul 30 14:59:17 2017 -0400

    drm/amd/display: Move audio to stream_res
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i 's/pipes->audio/pipes->stream_res\.audio/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i
    's/pipe_with_clk_src->audio/pipe_with_clk_src->stream_res\.audio/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i 's/ctx->audio->/ctx->stream_res\.audio->/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i 's/pipe->audio/pipe->stream_res\.audio/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i 's/pipe_ctx->audio/pipe_ctx->stream_res\.audio/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i \
    's/pipe_ctx\[pipe_offset\]\.audio/pipe_ctx\[pipe_offset\]\.stream_res\.audio/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i \
    's/grouped_pipes\[i\]->audio/grouped_pipes\[i\]->stream_^Cs\.audio/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i \
    's/grouped_pipes\[0\]->audio/grouped_pipes\[0\]->stream_res\.audio/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i \
    's/grouped_pipes\[1\]->audio/grouped_pipes\[1\]->stream_res\.audio/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i \
    's/pipe_ctx\[i\]->audio/pipe_ctx\[i\]->stream_res\.audio/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i \
    's/pipe_ctx_old->audio/pipe_ctx_old->stream_res\.audio/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i \
    's/pipe_set\[j\]->audio/pipe_set\[j\]->stream_res\.audio/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i \
    's/pipe_ctx\[i\]\.audio/pipe_ctx\[i\]\.stream_res\.audio/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i \
    's/pipes\[i\]\.audio/pipes\[i\]\.stream_res\.audio/g'
    
    Signed-off-by: Harry Wentland <harry.wentland@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Harry Wentland <Harry.Wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 8e9c4c8cf35ff23aafc69f9ef4c9cc471dac4094
Author: Harry Wentland <harry.wentland@amd.com>
Date:   Sun Jul 30 14:36:12 2017 -0400

    drm/amd/display: Move stream_enc to stream_res
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i 's/pipes->stream_enc/pipes->stream_res\.stream_enc/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i 's/ctx->stream_enc->/ctx->stream_res\.stream_enc->/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i 's/pipe->stream_enc/pipe->stream_res\.stream_enc/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i 's/pipe_ctx->stream_enc/pipe_ctx->stream_res\.stream_enc/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i \
    's/pipe_ctx\[pipe_offset\]\.stream_enc/pipe_ctx\[pipe_offset\]\.stream_res\.stream_enc/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i \
    's/grouped_pipes\[i\]->stream_enc/grouped_pipes\[i\]->stream_^Cs\.stream_enc/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i \
    's/grouped_pipes\[0\]->stream_enc/grouped_pipes\[0\]->stream_res\.stream_enc/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i \
    's/grouped_pipes\[1\]->stream_enc/grouped_pipes\[1\]->stream_res\.stream_enc/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i \
    's/pipe_ctx\[i\]->stream_enc/pipe_ctx\[i\]->stream_res\.stream_enc/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i \
    's/pipe_ctx_old->stream_enc/pipe_ctx_old->stream_res\.stream_enc/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i \
    's/pipe_set\[j\]->stream_enc/pipe_set\[j\]->stream_res\.stream_enc/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i \
    's/pipe_ctx\[i\]\.stream_enc/pipe_ctx\[i\]\.stream_res\.stream_enc/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i \
    's/pipes\[i\]\.stream_enc/pipes\[i\]\.stream_res\.stream_enc/g'
    
    Signed-off-by: Harry Wentland <harry.wentland@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Harry Wentland <Harry.Wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 6b670fa965b620bf0131a0a339a388a0581bc466
Author: Harry Wentland <harry.wentland@amd.com>
Date:   Sun Jul 30 13:59:26 2017 -0400

    drm/amd/display: Move TG to stream_res
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i 's/pipes->tg/pipes->stream_res\.tg/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i 's/ctx->tg->/ctx->stream_res\.tg->/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i 's/pipe->tg/pipe->stream_res\.tg/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i 's/pipe_ctx->tg/pipe_ctx->stream_res\.tg/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i \
    's/pipe_ctx\[pipe_offset\]\.tg/pipe_ctx\[pipe_offset\]\.stream_res\.tg/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i
    's/grouped_pipes\[i\]->tg/grouped_pipes\[i\]->stream_^Cs\.tg/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i
    's/grouped_pipes\[0\]->tg/grouped_pipes\[0\]->stream_res\.tg/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i
    's/grouped_pipes\[1\]->tg/grouped_pipes\[1\]->stream_res\.tg/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i 's/pipe_ctx\[i\]->tg/pipe_ctx\[i\]->stream_res\.tg/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i 's/pipe_ctx_old->tg/pipe_ctx_old->stream_res\.tg/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i 's/pipe_set\[j\]->tg/pipe_set\[j\]->stream_res\.tg/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i 's/pipe_ctx\[i\]\.tg/pipe_ctx\[i\]\.stream_res\.tg/g'
    
    Signed-off-by: Harry Wentland <harry.wentland@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Harry Wentland <Harry.Wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit a6a6cb349e39ef23a341a17752eebf69a5c0d7ff
Author: Harry Wentland <harry.wentland@amd.com>
Date:   Sun Jul 30 13:55:28 2017 -0400

    drm/amd/display: Move OPP to stream_res
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i 's/pipes->opp/pipes->stream_res\.opp/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i 's/ctx->opp->/ctx->stream_res\.opp->/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i 's/pipe->opp/pipe->stream_res\.opp/g'
    
    find -name Makefile -o -name Kconfig -o -name "*.c" -o -name "*.h" \
    -o -name "*.cpp" -o -name "*.hpp" | \
    xargs sed -i 's/pipe_ctx->opp/pipe_ctx->stream_res\.opp/g'
    
    Signed-off-by: Harry Wentland <harry.wentland@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Harry Wentland <Harry.Wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit ee356d8f4fff35510b83aa71299ddc0ccb798d58
Author: Charlene Liu <charlene.liu@amd.com>
Date:   Mon Jul 24 21:41:28 2017 -0400

    drm/amd/display: single PSR display not allow CSTATE sw w/a
    
    Description:
    HW issue when all the pipes are off, DCE_allow_cstate is 0.
    New sequence : blank OTG only instead of previous OTG_master_en=0)
    
    Signed-off-by: Charlene Liu <charlene.liu@amd.com>
    Reviewed-by: Anthony Koo <Anthony.Koo@amd.com>
    Acked-by: Harry Wentland <Harry.Wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 4bdbab3efda297b2432ae4e722385deaa0089315
Author: Eric Yang <Eric.Yang2@amd.com>
Date:   Tue Jul 18 15:50:47 2017 -0400

    drm/amd/display: powergate fe of reused pipes to reset ttu
    
    When we exit MPO, disconnected pipes cannot be immediately powergated
    because registers are double buffered, and actual disconnection does
    not happen until VUPDATE. So it is differred for many flips.
    However in the case of exiting full screen, the transition from MPO
    to grph only back to MPO is very fast and also involves increasing of
    watermarks. Since the underlay pipe is never powergated in this
    scenario, it keeps its old TTU counter, which causes allowPstateSwitch
    signal to be de-asserted when compared to the new increased watermark.
    Since the new pipe is not enabled yet, the signal will be continously
    de-asserted and hangs SMU, who's waiting for the signal to do pstate
    switching.
    
    Signed-off-by: Eric Yang <Eric.Yang2@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Harry Wentland <Harry.Wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 5d11e9fca5b45191b531d8fa3b9dd6de1156fc2b
Author: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
Date:   Mon May 29 18:29:33 2017 -0400

    drm/amd/display: allow taking split pipes during resource mapping
    
    Signed-off-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Acked-by: Harry Wentland <Harry.Wentland@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 313bf4ff0180107b687dbd10dde8fd021247cd37
Author: Yongqiang Sun <yongqiang.sun@amd.com>
Date:   Thu Apr 6 16:21:58 2017 -0400

    drm/amd/display: Add same check as reset pipes for programing backend regs.
    
    Signed-off-by: Yongqiang Sun <yongqiang.sun@amd.com>
    Acked-by: Harry Wentland <Harry.Wentland@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit dff06ddd7f0d322a046fd4a34dec589fbb97adef
Author: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
Date:   Wed Mar 29 16:24:19 2017 -0400

    drm/amd/display: fix dce_calc surface pitch setting for non underlay pipes
    
    Signed-off-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
    Acked-by: Harry Wentland <Harry.Wentland@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 00f02019990d9020321c446a04044b6ca05d20f8
Author: Leon Elazar <leon.elazar@amd.com>
Date:   Fri Mar 17 12:02:58 2017 -0400

    drm/amd/display: Fix applying surface to underlay pipe
    
    1. Locking all pipes before doing any changes
    2. Applying surface for both top and bottom pipes
    
    Signed-off-by: Leon Elazar <leon.elazar@amd.com>
    Acked-by: Harry Wentland <Harry.Wentland@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit f196f0805b5b75f024481ab4dc65f60d86fe6441
Author: Yongqiang Sun <yongqiang.sun@amd.com>
Date:   Fri Mar 3 09:37:11 2017 -0500

    drm/amd/display: After program backend, also program front end regs.
    
    Issue:
    In case of two 4K@60 + one non-4k monitor, when unplug non-4k monitor,
    the remain two 4k monitor don't work properly.
    Reason:
    In that case, two 4k use two pipes and no split, when unplug happens,
    those two monitor will use 4 pipes and split, but on that time, frontend
    is not programed properly.
    Solution:
    After programed backend, front end should be programmed as per new pipe
    setting.
    
    Signed-off-by: Yongqiang Sun <yongqiang.sun@amd.com>
    Acked-by: Harry Wentland <Harry.Wentland@amd.com>
    Reviewed-by: Tony Cheng <Tony.Cheng@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 6b12ca569bb2f864892c41dbbb0f88f3f9952bf3
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Thu Sep 14 18:17:31 2017 +0300

    drm/i915: Don't rmw PIPESTAT enable bits
    
    i830 seems to occasionally forget the PIPESTAT enable bits when
    we read the register. These aren't the only registers on i830 that
    have problems with RMW, as reading the double buffered plane
    registers returns the latched value rather than the last written
    value. So something similar is perhaps going on with PIPESTAT.
    
    This corruption results on vblank interrupts occasionally turning off
    on their own, which leads to vblank timeouts and generally a stuck
    display subsystem.
    
    So let's not RMW the pipestat enable bits, and instead use the cached
    copy we have around.
    
    Cc: Imre Deak <imre.deak@intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20170914151731.5034-1-ville.syrjala@linux.intel.com
    Reviewed-by: Imre Deak <imre.deak@intel.com>

commit eb64343ca6dd03241579400e037f0e15e6831b0c
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Aug 18 21:36:59 2017 +0300

    drm/i915: Extract PIPESTAT irq handling into separate functions
    
    Extract the gen2-4 PIPESTAT irq handling into separate functions just
    like we already do on VLV/CHV.
    
    We can share valleyview_pipestat_irq_ack() on all gmch platforms to
    actually read and clear the PIPESTAT status bits, so let's rename
    it to i9xx_pipestat_irq_ack().
    
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20170818183705.27850-11-ville.syrjala@linux.intel.com

commit 44d9241e3e62a6938b5ae2ec6b3b4cd5abfdb717
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Aug 18 21:36:51 2017 +0300

    drm/i915: Clear pipestat consistently
    
    We have a lot of different ways of clearing the PIPESTAT registers.
    Let's unify it all into one function. There's no magic in PIPESTAT
    that would require any of the double clearing and whatnot that
    some of the code tries to do. All we can really do is clear the status
    bits and disable the enable bits. There is no way to mask anything
    so as soon as another event happens the status bit will become set
    again, and trying to clear them twice or something can't protect
    against that.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20170818183705.27850-3-ville.syrjala@linux.intel.com
    Reviewed-by: Imre Deak <imre.deak@intel.com>

commit d305e0614601aefc6011ec60fd28b8184db09409
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Aug 30 21:57:03 2017 +0300

    drm/i915: Track minimum acceptable cdclk instead of "minimum dotclock"
    
    Make the min_pixclk thing less confusing by changing it to track
    the minimum acceptable cdclk frequency instead. This means moving
    the application of the guardbands to a slightly higher level from
    the low level platform specific calc_cdclk() functions.
    
    The immediate benefit is elimination of the confusing 2x factors
    on GLK/CNL+ in the audio workarounds (which stems from the fact
    that the pipes produce two pixels per clock).
    
    v2: Keep cdclk higher on CNL to workaround missing DDI clock voltage handling
    v3: Squash with the CNL cdclk limits patch (DK)
    v4: s/intel_min_cdclk/intel_pixel_rate_to_cdclk/ (DK)
    
    Cc: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Cc: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Cc: Dhinakaran Pandiyan <dhinakaran.pandiyan@intel.com>
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Reviewed-by: Dhinakaran Pandiyan <dhinakaran.pandiyan@intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20170830185703.8189-1-ville.syrjala@linux.intel.com

commit a0aeb3b2ac3ff0608f1bc3fb46332148856d3276
Merge: 5fd27c2a1f75 5d71dbc3a588
Author: Dave Airlie <airlied@redhat.com>
Date:   Mon Aug 21 10:49:48 2017 +1000

    Merge tag 'drm-amdkfd-next-2017-08-18' of git://people.freedesktop.org/~gabbayo/linux into drm-next
    
    This is the amdkfd pull request for 4.14 merge window.
    AMD has started cleaning the pipe and sending patches from their internal
    development to the upstream community.
    
    The plan as I understand it is to first get all the non-dGPU patches to
    upstream and then move to upstream dGPU support.
    
    The patches here are relevant only for Kaveri and Carrizo.
    
    The following is a summary of the changes:
    - Add new IOCTL to set a Scratch memory VA
    - Update PM4 headers for new firmware that support scratch memory
    - Support image tiling mode
    - Remove all uses of BUG_ON
    - Various Bug fixes and coding style fixes
    
    * tag 'drm-amdkfd-next-2017-08-18' of git://people.freedesktop.org/~gabbayo/linux: (24 commits)
      drm/amdkfd: Implement image tiling mode support v2
      drm/amdgpu: Add kgd kfd interface get_tile_config() v2
      drm/amdkfd: Adding new IOCTL for scratch memory v2
      drm/amdgpu: Add kgd/kfd interface to support scratch memory v2
      drm/amdgpu: Program SH_STATIC_MEM_CONFIG globally, not per-VMID
      drm/amd: Update MEC HQD loading code for KFD
      drm/amdgpu: Disable GFX PG on CZ
      drm/amdkfd: Update PM4 packet headers
      drm/amdkfd: Clamp EOP queue size correctly on Gfx8
      drm/amdkfd: Add more error printing to help bringup v2
      drm/amdkfd: Handle remaining BUG_ONs more gracefully v2
      drm/amdkfd: Allocate gtt_sa_bitmap in long units
      drm/amdkfd: Fix doorbell initialization and finalization
      drm/amdkfd: Remove BUG_ONs for NULL pointer arguments
      drm/amdkfd: Remove usage of alloc(sizeof(struct...
      drm/amdkfd: Fix goto usage v2
      drm/amdkfd: Change x==NULL/false references to !x
      drm/amdkfd: Consolidate and clean up log commands
      drm/amdkfd: Clean up KFD style errors and warnings v2
      drm/amdgpu: Remove hard-coded assumptions about compute pipes
      ...

commit 438e29a25b451297a93ebd2b3c3004fa0f9ff4cd
Author: Felix Kuehling <Felix.Kuehling@amd.com>
Date:   Tue Aug 15 23:00:03 2017 -0400

    drm/amdgpu: Remove hard-coded assumptions about compute pipes
    
    Remove hard-coded assumption that the first compute pipe is
    reserved for amdgpu. Pipe 0 actually means pipe 0 now.
    
    Signed-off-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Reviewed-by: Oded Gabbay <oded.gabbay@gmail.com>
    Signed-off-by: Oded Gabbay <oded.gabbay@gmail.com>

commit 14a8d4bfc2102f85ce097563d151370c91c1898a
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Wed Aug 9 19:55:24 2017 +0900

    usb: renesas_usbhs: gadget: fix spin_lock_init() for &uep->lock
    
    This patch fixes an issue that the spin_lock_init() is not called
    for almost all pipes. Otherwise, the lockdep output the following
    message when we connect a usb cable using g_ncm:
    
     INFO: trying to register non-static key.
     the code is fine but needs lockdep annotation.
     turning off the locking correctness validator.
    
    Reported-by: Kazuya Mizuguchi <kazuya.mizuguchi.ks@renesas.com>
    Fixes: b8b9c974afee ("usb: renesas_usbhs: gadget: disable all eps when the driver stops")
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Tested-by: Kazuya Mizuguchi <kazuya.mizuguchi.ks@renesas.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>

commit d1d1ebf4120db07a6706faed970be7460303834e
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Fri Jul 21 13:32:33 2017 +0100

    drm/i915: Don't touch fence->error when resetting an innocent request
    
    If the request has been completed before the reset took effect, we don't
    need to mark it up as being a victim. Touching fence->error after the
    fence has been signaled is detected by dma_fence_set_error() and
    triggers a BUG:
    
    [  231.743133] kernel BUG at ./include/linux/dma-fence.h:434!
    [  231.743156] invalid opcode: 0000 [#1] SMP KASAN
    [  231.743172] Modules linked in: i915 drm_kms_helper drm iptable_nat nf_nat_ipv4 nf_nat x86_pkg_temp_thermal iosf_mbi i2c_algo_bit cfbfillrect syscopyarea cfbimgblt sysfillrect sysimgblt fb_sys_fops cfbcopyarea fb font fbdev [last unloaded: drm]
    [  231.743221] CPU: 2 PID: 20 Comm: kworker/2:0 Tainted: G     U          4.13.0-rc1+ #52
    [  231.743236] Hardware name: Hewlett-Packard HP EliteBook 8460p/161C, BIOS 68SCF Ver. F.01 03/11/2011
    [  231.743363] Workqueue: events_long i915_hangcheck_elapsed [i915]
    [  231.743382] task: ffff8801f42e9780 task.stack: ffff8801f42f8000
    [  231.743489] RIP: 0010:i915_gem_reset_engine+0x45a/0x460 [i915]
    [  231.743505] RSP: 0018:ffff8801f42ff770 EFLAGS: 00010202
    [  231.743521] RAX: 0000000000000007 RBX: ffff8801bf6b1880 RCX: ffffffffa02881a6
    [  231.743537] RDX: dffffc0000000000 RSI: dffffc0000000000 RDI: ffff8801bf6b18c8
    [  231.743551] RBP: ffff8801f42ff7c8 R08: 0000000000000001 R09: 0000000000000000
    [  231.743566] R10: 0000000000000000 R11: 0000000000000000 R12: ffff8801edb02d00
    [  231.743581] R13: ffff8801e19d4200 R14: 000000000000001d R15: ffff8801ce2a4000
    [  231.743599] FS:  0000000000000000(0000) GS:ffff8801f5a80000(0000) knlGS:0000000000000000
    [  231.743614] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    [  231.743629] CR2: 00007f0ebd1add10 CR3: 0000000002621000 CR4: 00000000000406e0
    [  231.743643] Call Trace:
    [  231.743752]  i915_gem_reset+0x6c/0x150 [i915]
    [  231.743853]  i915_reset+0x175/0x210 [i915]
    [  231.743958]  i915_reset_device+0x33b/0x350 [i915]
    [  231.744061]  ? valleyview_pipestat_irq_handler+0xe0/0xe0 [i915]
    [  231.744081]  ? trace_hardirqs_off_caller+0x70/0x110
    [  231.744102]  ? _raw_spin_unlock_irqrestore+0x46/0x50
    [  231.744120]  ? find_held_lock+0x119/0x150
    [  231.744138]  ? mark_lock+0x6d/0x850
    [  231.744241]  ? gen8_gt_irq_ack+0x1f0/0x1f0 [i915]
    [  231.744262]  ? work_on_cpu_safe+0x60/0x60
    [  231.744284]  ? rcu_read_lock_sched_held+0x57/0xa0
    [  231.744400]  ? gen6_read32+0x2ba/0x320 [i915]
    [  231.744506]  i915_handle_error+0x382/0x5f0 [i915]
    [  231.744611]  ? gen6_rps_reset_ei+0x20/0x20 [i915]
    [  231.744630]  ? vsnprintf+0x128/0x8e0
    [  231.744649]  ? pointer+0x6b0/0x6b0
    [  231.744667]  ? debug_check_no_locks_freed+0x1a0/0x1a0
    [  231.744688]  ? scnprintf+0x92/0xe0
    [  231.744706]  ? snprintf+0xb0/0xb0
    [  231.744820]  hangcheck_declare_hang+0x15a/0x1a0 [i915]
    [  231.744932]  ? engine_stuck+0x440/0x440 [i915]
    [  231.744951]  ? rcu_read_lock_sched_held+0x57/0xa0
    [  231.745062]  ? gen6_read32+0x2ba/0x320 [i915]
    [  231.745173]  ? gen6_read16+0x320/0x320 [i915]
    [  231.745284]  ? intel_engine_get_active_head+0x91/0x170 [i915]
    [  231.745401]  i915_hangcheck_elapsed+0x3d8/0x400 [i915]
    [  231.745424]  process_one_work+0x3e8/0xac0
    [  231.745444]  ? pwq_dec_nr_in_flight+0x110/0x110
    [  231.745464]  ? do_raw_spin_lock+0x8e/0x120
    [  231.745484]  worker_thread+0x8d/0x720
    [  231.745506]  kthread+0x19e/0x1f0
    [  231.745524]  ? process_one_work+0xac0/0xac0
    [  231.745541]  ? kthread_create_on_node+0xa0/0xa0
    [  231.745560]  ret_from_fork+0x27/0x40
    [  231.745581] Code: 8b 7d c8 e8 49 0d 02 e1 49 8b 7f 38 48 8b 75 b8 48 83 c7 10 e8 b8 89 be e1 e9 95 fc ff ff 4c 89 e7 e8 4b b9 ff ff e9 30 ff ff ff <0f> 0b 0f 1f 40 00 55 48 89 e5 41 57 41 56 41 55 41 54 49 89 fe
    [  231.745767] RIP: i915_gem_reset_engine+0x45a/0x460 [i915] RSP: ffff8801f42ff770
    
    At first glance this looks to be related to commit c64992e035d7
    ("drm/i915: Look for active requests earlier in the reset path"), but it
    could easily happen before as well. On the other hand, we no longer
    logged victims due to the active_request being dropped earlier.
    
    v2: Be trickier to unwind the incomplete request as we cannot rely on
    request retirement for the lockless per-engine reset.
    v3: Reprobe the active request at the time of the reset.
    
    Reported-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Fixes: c64992e035d7 ("drm/i915: Look for active requests earlier in the reset path")
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Michel Thierry <michel.thierry@intel.com>
    Cc: Mika Kuoppala <mika.kuoppala@linux.intel.com>
    Cc: Daniel Vetter <daniel.vetter@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20170721123238.16428-15-chris@chris-wilson.co.uk
    Reviewed-by: Joonas Lahtinen <joonas.lahtinen@linux.intel.com> #v1
    Reviewed-by: Michel Thierry <michel.thierry@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 120b56a2a7a262c0940299615c7bcf97d3982711
Author: Imre Deak <imre.deak@intel.com>
Date:   Tue Jul 11 23:42:31 2017 +0300

    drm/i915/gen2: Add an ID for the display pipes power well
    
    Make the I830 power well ID assignment explicit for consistency.
    
    v2:
    - s/GEN2/I830/ in the comment, since other GEN2s don't have the power
      well. (Ville)
    
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Reviewed-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20170711204236.5618-2-imre.deak@intel.com
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit f43aa31fe7dc43b808ec619b0d407180cd3725c0
Author: fred gao <fred.gao@intel.com>
Date:   Mon Jul 17 14:52:05 2017 +0800

    drm/i915/gvt: Fix the vblank timer close issue after shutdown VMs in reverse
    
    Once the Windows guest is shutdown, the display pipe will be disabled
    and intel_gvt_check_vblank_emulation will be called to check if the
    vblank timer is turned off. Given the scenario of creating VM1 ,VM2,
    destoying VM2 in current code, VM1 has pipe enabled and continues to
    check VM2, the flag have_enabled_pipe is always false since all the VM2
    pipes are disabled, so the vblank timer will be canceled and TDR happens
    in Windows VM1 guest due to the vsync timeout.
    
    In this patch the vblank timer will be never canceled once one pipe is
    enabled.
    
    v2:
    - remove have_enabled_pipe flag and check pipe enabled directly. (Zhenyu)
    
    Cc: Wang Hongbo <hongbo.wang@intel.com>
    Signed-off-by: fred gao <fred.gao@intel.com>
    Signed-off-by: Zhenyu Wang <zhenyuw@linux.intel.com>

commit 2ee0da163196baf9baa05b7464594342788213f2
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Thu Jun 1 17:36:16 2017 +0300

    drm/i915: Add i830 "pipes power well"
    
    830 more or less requires both pipes and DPLLs to remain on as long
    as either pipe is needed. However, when neither pipe is actually needed,
    we can save a bit of power by turning everything off. To do that we add
    a new "power well" that turns both pipes and DPLLs on and off in the
    right order. Seems to save ~50mW on my Fujitsu-Siemens Lifebook S6010.
    
    This also avoids having to abuse the load detection to force pipe A on
    at init time. That was never very robust, and it only worked for one
    pipe, whereas 830 really needs both pipes enabled. As a bonus the 830
    pipe quirk is now a bit more isolated from the rest of the mode setting
    infrastructure, which should mean that it's much less likely someone
    will accidentally break it in the future. The extra cost is of course
    slight code duplication, but that seems like a worthwile tradeoff here.
    
    v2; s/BIT/BIT_ULL/
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/20170601143619.27840-5-ville.syrjala@linux.intel.com
    Acked-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>

commit d0c55cdf4fc02483a4851f86e3f010a061d8c9cc
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Fri Jun 9 08:22:31 2017 -0400

    drm/amdgpu/gfx: fix MEC interrupt enablement for pipes != 0
    
    The interrupt registers are not indexed.
    
    Fixes: 763a47b8e (drm/amdgpu: teach amdgpu how to enable interrupts for any pipe v3)
    Acked-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit a7049de1e8ba21cf7d7645aa678debf38951838a
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Mon Jun 5 11:03:59 2017 -0400

    drm/amdgpu/gfx9: new queue policy, take first 2 queues of each pipe
    
    Instead of taking the first pipe and giving the rest to kfd, take the
    first 2 queues of each pipe.
    
    Effectively, amdgpu and amdkfd own the same number of queues. But
    because the queues are spread over multiple pipes the hardware will be
    able to better handle concurrent compute workloads.
    
    amdgpu goes from 1 pipe to 4 pipes, i.e. from 1 compute threads to 4
    amdkfd goes from 3 pipe to 4 pipes, i.e. from 3 compute threads to 4
    
    gfx9 was missed when this patch set was rebased to include gfx9.
    
    Acked-by: Tom St Denis <tom.stdenis@amd.com>
    Acked-by: Christian König <christian.koenig@amd.com>
    Reviewed-by: Andres Rodriguez <andresx7@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 1361f45531e7bd820182c70306f79234088d2a5b
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Mon Jun 5 10:58:56 2017 -0400

    drm/amdgpu/gfx9: allocate queues horizontally across pipes
    
    Pipes provide better concurrency than queues, therefore we want to make
    sure that apps use queues from different pipes whenever possible.
    
    Optimize for the trivial case where an app will consume rings in order,
    therefore we don't want adjacent rings to belong to the same pipe.
    
    gfx9 was missed when these patches were rebased.
    
    Reviewed-by: Tom St Denis <tom.stdenis@amd.com>
    Acked-by: Christian König <christian.koenig@amd.com>
    Reviewed-by: Andres Rodriguez <andresx7@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 0a281f5a2cba94a574167edadca88a3130a88612
Author: Andres Rodriguez <andresx7@gmail.com>
Date:   Fri Feb 3 23:30:04 2017 -0500

    drm/amdgpu: new queue policy, take first 2 queues of each pipe v2
    
    Instead of taking the first pipe and giving the rest to kfd, take the
    first 2 queues of each pipe.
    
    Effectively, amdgpu and amdkfd own the same number of queues. But
    because the queues are spread over multiple pipes the hardware will be
    able to better handle concurrent compute workloads.
    
    amdgpu goes from 1 pipe to 4 pipes, i.e. from 1 compute threads to 4
    amdkfd goes from 3 pipe to 4 pipes, i.e. from 3 compute threads to 4
    
    v2: fix policy comment
    
    Reviewed-by: Edward O'Callaghan <funfunctor@folklore1984.net>
    Reviewed-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Acked-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Andres Rodriguez <andresx7@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 7b2124a5dd99b5b794943e26dbcc8ed62aed8d01
Author: Andres Rodriguez <andresx7@gmail.com>
Date:   Thu Apr 6 00:10:53 2017 -0400

    drm/amdgpu: avoid KIQ clashing with compute or KFD queues v2
    
    Instead of picking an arbitrary queue for KIQ, search for one according
    to policy. The queue must be unused.
    
    Also report the KIQ as an unavailable resource to KFD.
    
    In testing I ran into KCQ initialization issues when using pipes 2/3 of
    MEC2 for the KIQ. Therefore the policy disallows grabbing one of these.
    
    v2: fix (ring.me + 1) to (ring.me -1) in amdgpu_amdkfd_device_init
    
    Reviewed-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Signed-off-by: Andres Rodriguez <andresx7@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit e33fec4835b9d2b1f8f8b1eb7c3415ab75a0faf5
Author: Andres Rodriguez <andresx7@gmail.com>
Date:   Fri Feb 3 17:31:38 2017 -0500

    drm/amdgpu: allocate queues horizontally across pipes
    
    Pipes provide better concurrency than queues, therefore we want to make
    sure that apps use queues from different pipes whenever possible.
    
    Optimize for the trivial case where an app will consume rings in order,
    therefore we don't want adjacent rings to belong to the same pipe.
    
    Reviewed-by: Edward O'Callaghan <funfunctor@folklore1984.net>
    Acked-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Acked-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Andres Rodriguez <andresx7@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit d0b63bb3385c5683c7531044425f4507ca5251b2
Author: Andres Rodriguez <andresx7@gmail.com>
Date:   Fri Feb 3 16:28:48 2017 -0500

    drm/amdkfd: allow split HQD on per-queue granularity v5
    
    Update the KGD to KFD interface to allow sharing pipes with queue
    granularity instead of pipe granularity.
    
    This allows for more interesting pipe/queue splits.
    
    v2: fix overflow check for res.queue_mask
    v3: fix shift overflow when setting res.queue_mask
    v4: fix comment in is_pipeline_enabled()
    v5: clamp res.queue_mask to the first MEC only
    
    Reviewed-by: Edward O'Callaghan <funfunctor@folklore1984.net>
    Reviewed-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Acked-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Andres Rodriguez <andresx7@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 42794b27cc628d44db28f62f3333bd12416b597f
Author: Andres Rodriguez <andresx7@gmail.com>
Date:   Wed Feb 1 19:08:23 2017 -0500

    drm/amdgpu: take ownership of per-pipe configuration v3
    
    Make amdgpu the owner of all per-pipe state of the HQDs.
    
    This change will allow us to split the queues between kfd and amdgpu
    with a queue granularity instead of pipe granularity.
    
    This patch fixes kfd allocating an HDP_EOP region for its 3 pipes which
    goes unused.
    
    v2: support for gfx9
    v3: fix gfx7 HPD intitialization
    
    Reviewed-by: Edward O'Callaghan <funfunctor@folklore1984.net>
    Reviewed-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Acked-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Andres Rodriguez <andresx7@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit d59095f7dd8810e67bdad7a65131903646ebc444
Author: Andres Rodriguez <andresx7@gmail.com>
Date:   Fri Feb 3 16:17:15 2017 -0500

    drm/radeon: take ownership of pipe initialization
    
    Take ownership of pipe initialization away from KFD.
    
    Note that hpd_eop_gpu_addr was already large enough to accomodate all
    pipes.
    
    Reviewed-by: Edward O'Callaghan <funfunctor@folklore1984.net>
    Reviewed-by: Felix Kuehling <Felix.Kuehling@amd.com>
    Acked-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Andres Rodriguez <andresx7@gmail.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 7ec27233e62b5efe795563896577de5340dc7473
Merge: bab1e2fe4b82 afa31879f0a6
Author: Dave Airlie <airlied@redhat.com>
Date:   Fri May 12 13:58:29 2017 +1000

    Merge branch 'drm-next-4.12' of git://people.freedesktop.org/~agd5f/linux into drm-next
    
    Fixes for 4.12.  This is a bit bigger than usual since it's 3 weeks
    worth of fixes and most of these changes are for vega10 which is
    new for 4.12 and still in a fair amount of flux.  It looks like
    you missed my last pull request, so those patches are included here
    as well.  Highlights:
    - Lots of vega10 fixes
    - Fix interruptable wait mixup
    - Fan control method fixes
    - Misc display fixes for radeon and amdgpu
    - Misc bug fixes
    
    * 'drm-next-4.12' of git://people.freedesktop.org/~agd5f/linux: (132 commits)
      drm/amd/powerplay: refine pwm1_enable callback functions for CI.
      drm/amd/powerplay: refine pwm1_enable callback functions for vi.
      drm/amd/powerplay: refine pwm1_enable callback functions for Vega10.
      drm/amdgpu: refine amdgpu pwm1_enable sysfs interface.
      drm/amdgpu: add amd fan ctrl mode enums.
      drm/amd/powerplay: add more smu message on Vega10.
      drm/amdgpu: fix dependency issue
      drm/amd: fix init order of sched job
      drm/amdgpu: add some additional vega10 pci ids
      drm/amdgpu/soc15: use atomfirmware for setting bios scratch for reset
      drm/amdgpu/atomfirmware: add function to update engine hang status
      drm/radeon: only warn once in radeon_ttm_bo_destroy if va list not empty
      drm/amdgpu: fix mutex list null pointer reference
      drm/amd/powerplay: fix bug sclk/mclk level can't be set on vega10.
      drm/amd/powerplay: Setup sw CTF to allow graceful exit when temperature exceeds maximum.
      drm/amd/powerplay: delete dead code in powerplay.
      drm/amdgpu: Use less generic enum definitions
      drm/amdgpu/gfx9: derive tile pipes from golden settings
      drm/amdgpu/gfx: drop max_gs_waves_per_vgt
      drm/amd/powerplay: disable engine spread spectrum feature on Vega10.
      ...

commit ad7d0ff3e79a100a24b66e8908a45402c20c3685
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Tue May 2 16:15:06 2017 -0400

    drm/amdgpu/gfx9: derive tile pipes from golden settings
    
    rather than hardcoding it.
    
    Acked-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 2f34c1231bfc9f2550f934acb268ac7315fb3837
Merge: a3719f34fdb6 8b03d1ed2c43
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed May 3 11:44:24 2017 -0700

    Merge tag 'drm-for-v4.12' of git://people.freedesktop.org/~airlied/linux
    
    Pull drm u pdates from Dave Airlie:
     "This is the main drm pull request for v4.12. Apart from two fixes
      pulls, everything should have been in drm-next for at least 2 weeks.
    
      The biggest thing in here is AMD released the public headers for their
      upcoming VEGA GPUs. These as always are quite a sizeable chunk of
      header files. They've also added initial non-display support for those
      GPUs, though they aren't available in production yet.
    
      Otherwise it's pretty much normal.
    
      New bridge drivers:
       - megachips-stdpxxxx-ge-b850v3-fw LVDS->DP++
       - generic LVDS bridge support.
    
      Core:
       - Displayport link train failure reporting to userspace
       - debugfs interface cleaned up
       - subsystem TODO in kerneldoc now
       - Extended fbdev support (flipping and vblank wait)
       - drm_platform removed
       - EDP CRC support in helper
       - HF-VSDB SCDC support in EDID parser
       - Lots of code cleanups and header extraction
       - Thunderbolt external GPU awareness
       - Atomic helper improvements
       - Documentation improvements
    
      panel:
       - Sitronix and Samsung new panel support
    
      amdgpu:
       - Preliminary vega10 support
       - Multi-level page table support
       - GPU sensor support for userspace
       - PRT support for sparse buffers
       - SR-IOV improvements
       - Non-contig VRAM CPU mapping
    
      i915:
       - Atomic modesetting enabled by default on Gen5+
       - LSPCON improvements
       - Atomic state handling for cdclk
       - GPU reset improvements
       - In-kernel unit tests
       - Geminilake improvements and color manager support
       - Designware i2c fixes
       - vblank evasion improvements
       - Hotplug safe connector iterators
       - GVT scheduler QoS support
       - GVT Kabylake support
    
      nouveau:
       - Acceleration support for Pascal (GP10x).
       - Rearchitecture of code handling proprietary signed firmware
       - Fix GTX 970 with odd MMU configuration
       - GP10B support
       - GP107 acceleration support
    
      vmwgfx:
       - Atomic modesetting support for vmwgfx
    
      omapdrm:
       - Support for render nodes
       - Refactor omapdss code
       - Fix some probe ordering issues
       - Fix too dark RGB565 rendering
    
      sunxi:
       - prelim rework for multiple pipes.
    
      mali-dp:
       - Color management support
       - Plane scaling
       - Power management improvements
    
      imx-drm:
       - Prefetch Resolve Engine/Gasket on i.MX6QP
       - Deferred plane disabling
       - Separate alpha support
    
      mediatek:
       - Mediatek SoC MT2701 support
    
      rcar-du:
       - Gen3 HDMI support
    
      msm:
       - 4k support for newer chips
       - OPP bindings for gpu
       - prep work for per-process pagetables
    
      vc4:
       - HDMI audio support
       - fixes
    
      qxl:
       - minor fixes.
    
      dw-hdmi:
       - PHY improvements
       - CSC fixes
       - Amlogic GX SoC support"
    
    * tag 'drm-for-v4.12' of git://people.freedesktop.org/~airlied/linux: (1778 commits)
      drm/nouveau/fb/gf100-: Fix 32 bit wraparound in new ram detection
      drm/nouveau/secboot/gm20b: fix the error return code in gm20b_secboot_tegra_read_wpr()
      drm/nouveau/kms: Increase max retries in scanout position queries.
      drm/nouveau/bios/bitP: check that table is long enough for optional pointers
      drm/nouveau/fifo/nv40: no ctxsw for pre-nv44 mpeg engine
      drm: mali-dp: use div_u64 for expensive 64-bit divisions
      drm/i915: Confirm the request is still active before adding it to the await
      drm/i915: Avoid busy-spinning on VLV_GLTC_PW_STATUS mmio
      drm/i915/selftests: Allocate inode/file dynamically
      drm/i915: Fix system hang with EI UP masked on Haswell
      drm/i915: checking for NULL instead of IS_ERR() in mock selftests
      drm/i915: Perform link quality check unconditionally during long pulse
      drm/i915: Fix use after free in lpe_audio_platdev_destroy()
      drm/i915: Use the right mapping_gfp_mask for final shmem allocation
      drm/i915: Make legacy cursor updates more unsynced
      drm/i915: Apply a cond_resched() to the saturated signaler
      drm/i915: Park the signaler before sleeping
      drm: mali-dp: Check the mclk rate and allow up/down scaling
      drm: mali-dp: Enable image enhancement when scaling
      drm: mali-dp: Add plane upscaling support
      ...

commit d455937ed1cff44b9e5567f0ab697ad486429c0f
Merge: df45eaca51f4 98db803f6413
Author: Dave Airlie <airlied@redhat.com>
Date:   Tue Apr 11 07:47:02 2017 +1000

    Merge branch 'msm-next' of git://people.freedesktop.org/~robclark/linux into drm-next
    
    Noteworthy changes this time:
    1) 4k support for newer chips (ganging up hwpipes and mixers)
    2) using OPP bindings for gpu
    3) more prep work towards per-process pagetables
    
    * 'msm-next' of git://people.freedesktop.org/~robclark/linux: (47 commits)
      msm/drm: gpu: Dynamically locate the clocks from the device tree
      drm/msm: gpu: Use OPP tables if we can
      drm/msm: Hard code the GPU "slow frequency"
      drm/msm: Add MSM_PARAM_GMEM_BASE
      drm/msm: Reference count address spaces
      drm/msm: Make sure to detach the MMU during GPU cleanup
      drm/msm/mdp5: Enable 3D mux in mdp5_ctl
      drm/msm/mdp5: Reset CTL blend registers before configuring them
      drm/msm/mdp5: Assign 'right' mixer to CRTC state
      drm/msm/mdp5: Stage border out on base stage if CRTC has 2 LMs
      drm/msm/mdp5: Stage right side hwpipes on Right-side Layer Mixer
      drm/msm/mdp5: Prepare Layer Mixers for source split
      drm/msm/mdp5: Configure 'right' hwpipe
      drm/msm/mdp5: Assign a 'right hwpipe' to plane state
      drm/msm/mdp5: Create mdp5_hwpipe_mode_set
      drm/msm/mdp5: Add optional 'right' Layer Mixer in CRTC state
      drm/msm/mdp5: Add a CAP for Source Split
      drm/msm/mdp5: Remove mixer/intf pointers from mdp5_ctl
      drm/msm/mdp5: Start using parameters from CRTC state
      drm/msm/mdp5: Add more stuff to CRTC state
      ...

commit 8480adacfd58c79d884aa17af77a7fa7efae7257
Author: Archit Taneja <architt@codeaurora.org>
Date:   Thu Mar 23 15:58:15 2017 +0530

    drm/msm/mdp5: Assign 'right' mixer to CRTC state
    
    Dynamically assign a right mixer to mdp5_crtc_state in the CRTC's
    atomic_check path. Assigning the right mixer has some constraints,
    i.e, only a few LMs can be paired together. Update mdp5_mixer_assign
    to handle these constraints.
    
    Firstly, we need to identify whether we need a right mixer or not.
    At the moment, there are 2 scenarios where a right mixer might be
    needed:
    - If any of the planes connected to this CRTC is too wide (i.e, is
      comprised of 2 hwpipes).
    - If the CRTC's mode itself is too wide (i.e, a 4K mode on HDMI).
    
    We implement both these checks in the mdp5_crtc_atomic_check(), and
    pass 'need_right_mixer' to mdp5_setup_pipeline.
    
    If a CRTC is already assigned a single mixer, and a new atomic commit
    brings in a drm_plane that needs 2 hwpipes, we can successfully commit
    this mode without requiring a full modeset, provided that we still use
    the previously assigned mixer as the left mixer. If such an assignment
    isn't possible, we'd need to do a full modeset. This scenario has been
    ignored for now.
    
    The mixer assignment code is a bit messy, considering we have at most
    4 LM instances in hardware. This can probably be re-visited later with
    simplified logic.
    
    Signed-off-by: Archit Taneja <architt@codeaurora.org>
    Signed-off-by: Rob Clark <robdclark@gmail.com>

commit bf8dc0a04e52ddccfaa47cf7a3238753344155fa
Author: Archit Taneja <architt@codeaurora.org>
Date:   Thu Mar 23 15:58:13 2017 +0530

    drm/msm/mdp5: Stage right side hwpipes on Right-side Layer Mixer
    
    Now that our mdp5_planes can consist of 2 hwpipes, update the
    blend_setup() code to stage the right hwpipe to the left and
    right LMs
    
    Signed-off-by: Archit Taneja <architt@codeaurora.org>
    Signed-off-by: Rob Clark <robdclark@gmail.com>

commit c26b4f6cfb2774d13f9ae41cbaaf30f30ac417c6
Author: Archit Taneja <architt@codeaurora.org>
Date:   Thu Mar 23 15:58:11 2017 +0530

    drm/msm/mdp5: Configure 'right' hwpipe
    
    Now that we have a right hwpipe in mdp5_plane_state, configure it
    mdp5_plane_mode_set(). The only parameters that vary between the
    left and right hwpipes are the src_w, src_img_w, src_x and crtc_x
    as we just even chop the fb into left and right halves.
    
    Add a mdp5_plane_right_pipe() which will be used by the crtc code
    to set up LM stages.
    
    Signed-off-by: Archit Taneja <architt@codeaurora.org>
    Signed-off-by: Rob Clark <robdclark@gmail.com>

commit 7a10ee9b579e04241f981d8e237124aa8762c4c4
Author: Archit Taneja <architt@codeaurora.org>
Date:   Thu Mar 23 15:58:10 2017 +0530

    drm/msm/mdp5: Assign a 'right hwpipe' to plane state
    
    If the drm_plane has a source width that's greater than the max width
    supported by a SSPP (2560 pixels on 8x96), then we assign a 'r_hwpipe'
    to it in mdp5_plane_atomic_check().
    
    TODO: There are a few scenarios where the hwpipe assignments aren't
    recommended by HW. For example, an assignment which results in a
    drm_plane to of two different types of hwpipes (say RGB0 on left
    and DMA1 on right) is not recommended.
    Also, hwpipes have a priority mapping, where the higher priority pipe
    needs to be staged on left LM, and the lower priority needs to be
    staged on the right LM. For example, the priority order for VIG pipes
    in decreasing order of priority is VIG0, VIG1, VIG2, and VIG3. So, VIG0
    on left and VIG1 on right is a correct configuration, but VIG1 on left
    and VIG0 on right isn't. These scenarios are ignored for now for the
    sake of simplicity.
    
    Signed-off-by: Archit Taneja <architt@codeaurora.org>
    Signed-off-by: Rob Clark <robdclark@gmail.com>

commit 821be43ff2424b13bc6152360eb6d5bacfbf8530
Author: Archit Taneja <architt@codeaurora.org>
Date:   Thu Mar 23 15:58:09 2017 +0530

    drm/msm/mdp5: Create mdp5_hwpipe_mode_set
    
    Refactor mdp5_plane_mode_set to call mdp5_hwpipe_mode_set. The latter
    func takes in only the hwpipe and the parameters that need to be
    programmed into the hwpipe registers. All the code that calculates these
    parameters is left as is in mdp5_plane_mode_set.
    
    In the future, when we let drm_plane be comprised of 2 hwpipes, this func
    allow us to configure each pipe without adding redundant code.
    
    Signed-off-by: Archit Taneja <architt@codeaurora.org>
    Signed-off-by: Rob Clark <robdclark@gmail.com>

commit b7621b2a081c2ac2c1c54070f6e88f774fe4b6b1
Author: Archit Taneja <architt@codeaurora.org>
Date:   Thu Mar 23 15:58:08 2017 +0530

    drm/msm/mdp5: Add optional 'right' Layer Mixer in CRTC state
    
    Add another mdp5_hw_mixer pointer (r_mixer) in mdp5_crtc_state.
    This mixer will be used to generate the right half of the scanout.
    
    With Source Split, a SSPP can now be connected to 2 Layer Mixers, but
    has to be at the same blend level (stage #) on both Layer Mixers.
    
    A drm_plane that has a lesser width than the max width supported, will
    comprise of a single SSPP/hwpipe, staged on both the Layer Mixers at
    the same blend level. A plane that is greater than max width will comprise
    of 2 SSPPs, with the 'left' SSPP staged on the left LM, and the 'right'
    SSPP staged on the right LM at the same blend level.
    
    For now, the drm_plane consists of only one SSPP, therefore, it
    needs to be staged on both the LMs in blend_setup() and mdp5_ctl_blend().
    We'll extend this logic to support 2 hwpipes per plane later.
    
    The crtc cursor ops (using the LM cursors, not SSPP cursors) simply
    return an error if they're called when the right mixer is assigned to
    the CRTC state. With source split is enabled, we're expected to only
    SSPP cursors.
    
    This commit adds code that configures the right mixer, but the r_mixer
    itself isn't assigned at the moment.
    
    Signed-off-by: Archit Taneja <architt@codeaurora.org>
    Signed-off-by: Rob Clark <robdclark@gmail.com>

commit 621da7d93ceca260c2a95ca240e58f08fe30b1dc
Author: Archit Taneja <architt@codeaurora.org>
Date:   Thu Mar 23 15:58:07 2017 +0530

    drm/msm/mdp5: Add a CAP for Source Split
    
    Some of the newer MDP5 versions support Source Split of SSPPs. It is a
    feature that allows us to route the output of a hwpipe to 2 Layer
    Mixers. This is required to achieve the following use cases:
    
    - Dual DSI: For high res DSI panels (such as 2560x1600 etc), a single
      DSI interface doesn't have the bandwidth to drive the required pixel
      clock. We use 2 DSI interfaces to drive the left and right halves
      of the panel (i.e, 1280x1600 each). The MDP5 pipeline here would look
      like:
    
             LM0 -- DSPP0 -- INTF1 -- DSI1
            /
    hwpipe--
            \
             LM1 -- DSPP1 -- INTF2 -- DSI2
    
      A single hwpipe is used to scan out the left and right halves to DSI1
      and DSI2 respectively. In order to do this, we need to configure the
      2 Layer Mixers in Source Split mode.
    
    - HDMI 4K: In order to support resolutions with width higher than the
      max width supported by a hwpipe, we club 2 hwpipes together:
    
    hwpipe1 --- LM0 -- DSPP0
           -   -             \
             -                -- 3D Mux -- INTF0 -- HDMI
           -   -             /
    hwpipe2 --- LM1 -- DSPP1
    
      hwpipe1 is staged on the 'left' Layer Mixer, and hwpipe2 is staged on
      the 'right' Layer Mixer. An additional block called the '3D Mux' is
      used to merge the output of the 2 DSPPs to a single interface.
      In this use case, it is possible that a 4K surface is downscaled and
      placed completely within one of the halves. In order to support such
      scenarios (and keep the programming simple), Layer Mixers with Source
      Split can be assigned 2 hw pipes per stage. While scanning out, the HW
      takes care of fetching the pixels fom the correct pipe.
    
    Add a MDP cap to tell whether the HW supports source split or not.
    Add a MDP LM cap that tells whether a LM instance can operate in
    source split mode (and generate the 'left' part of the display
    output).
    
    Signed-off-by: Archit Taneja <architt@codeaurora.org>
    Signed-off-by: Rob Clark <robdclark@gmail.com>

commit 502e3550c6f58f514d57f9e13ec9a98f6936b243
Author: Archit Taneja <architt@codeaurora.org>
Date:   Thu Mar 23 15:58:03 2017 +0530

    drm/msm/mdp5: Assign INTF and CTL in encoder's atomic_check()
    
    The INTF and CTL used in a display pipeline are going to be maintained as
    a part of the CRTC state (i.e, in mdp5_crtc_state).
    
    These entities, however, are currently statically assigned to drm_encoders
    (i.e. mdp5_encoder). Since these aren't directly visible to the CRTC, we
    assign them to the CRTC state in the encoder's atomic_check() op.
    
    With this approach, we assign portions of CRTC state in two different
    places: the layer mixer in CRTC's atomic_check(), and the INTF and CTL
    pieces in the encoder's atomic_check() op.
    
    We'd have more options here if the drm core maintained encoder state too,
    but the current approach of clubbing everything in CRTC's state works just
    fine.
    
    Unlike hwpipes and mixers, we don't need to keep a track of INTF/CTL
    assignments in the global atomic state. This is because they're currently
    not sharable resources. For example, INTF0 and CTL0 will always be assigned
    to one drm_encoder. This can change later when we implement writeback and
    want a CRTC to use a CTL for a while, and then release it for others to use
    it. Or, when a drm_encoder can switch between using a single INTF vs
    2 INTFs.
    
    Signed-off-by: Archit Taneja <architt@codeaurora.org>
    Signed-off-by: Rob Clark <robdclark@gmail.com>

commit 894558ec8c4f3e482299905d7f86b7d1c57e1c2f
Author: Archit Taneja <architt@codeaurora.org>
Date:   Thu Mar 23 15:58:02 2017 +0530

    drm/msm/mdp5: Prepare for dynamic assignment of mixers
    
    Add the stuff needed to allow dynamically assigning a mixer to a CRTC.
    
    Since mixers are a resource that can be shared across multiple CRTCs, we
    need to maintain a 'hwmixer_to_crtc' map in the global atomic state,
    acquire the mdp5_kms.state_lock modeset lock and so on.
    
    The mixer is assigned in the CRTC's atomic_check() func, a failure will
    result in the new state being cleanly rolled back.
    
    The mixer assignment itself is straightforward, and almost identical to
    what we do for hwpipes. We don't need to grab the old hwmixer_to_crtc
    state like we do in hwpipes since we don't need to compare anything
    with the old state at the moment.
    
    The only LM capability we care about at the moment is whether the mixer
    instance can be used to display stuff (i.e, connect to an INTF
    downstream).
    
    Signed-off-by: Archit Taneja <architt@codeaurora.org>
    Signed-off-by: Rob Clark <robdclark@gmail.com>

commit 36d1364abbedb405fe7395b2bacdf3f62f4cf7dc
Author: Archit Taneja <architt@codeaurora.org>
Date:   Thu Mar 23 15:57:59 2017 +0530

    drm/msm/mdp5: Clean up interface assignment
    
    mdp5_interface struct contains data corresponding to a INTF
    instance in MDP5 hardware. This sturct is memcpy'd to the
    mdp5_encoder struct, and then later to the mdp5_ctl struct.
    
    Instead of copying around interface data, create mdp5_interface
    instances in mdp5_init, like how it's done currently done for
    pipes and layer mixers. Pass around the interface pointers to
    mdp5_encoder and mdp5_ctl. This simplifies the code, and allows
    us to decouple encoders from INTFs in the future if needed.
    
    Signed-off-by: Archit Taneja <architt@codeaurora.org>
    Signed-off-by: Rob Clark <robdclark@gmail.com>

commit 6803c60630ac71269eb62a8efb29f8c7ca64f003
Author: Archit Taneja <architt@codeaurora.org>
Date:   Thu Mar 23 15:57:56 2017 +0530

    drm/msm/mdp5: Add structs for hw Layer Mixers
    
    Create a struct to represent MDP5 Layer Mixer instances. This will
    eventually allow us to detach CRTCs from the Layer Mixers, and
    generally clean things up a bit.
    
    This is very similar to how hwpipes were previously abstracted away
    from drm planes.
    
    Signed-off-by: Archit Taneja <architt@codeaurora.org>
    Signed-off-by: Rob Clark <robdclark@gmail.com>

commit 01f8a9696419133ff4305024f3211f095025d130
Author: Archit Taneja <architt@codeaurora.org>
Date:   Thu Mar 23 15:57:54 2017 +0530

    drm/msm/mdp5: Bring back pipe_lock to mdp5_plane struct
    
    We'd previously moved the pipe_lock spinlock to the hwpipe struct. Bring
    it back to mdp5_plane. We will need this because an mdp5_plane in the
    future could comprise of 2 hw pipes. It makes more sense to have a single
    lock to protect the registers for the hw pipes used by a plane, rather
    than trying to take individual locks per hwpipe when committing a
    configuration.
    
    Signed-off-by: Archit Taneja <architt@codeaurora.org>
    Signed-off-by: Rob Clark <robdclark@gmail.com>

commit 87878d2627a5fe1668591f7767306ee81693593f
Author: Archit Taneja <architt@codeaurora.org>
Date:   Fri Mar 17 09:09:48 2017 +0530

    drm/msm/mdp5: Update SSPP_MAX value
    
    'SSPP_MAX + 1' is the max number of hwpipes that can be present on a
    MDP5 platform. Recently, 2 new cursor hwpipes were added, which
    caused overflows in arrays that used SSPP_MAX to represent the number
    of elements. Update the SSPP_MAX value to incorporate the extra
    hwpipes.
    
    Signed-off-by: Archit Taneja <architt@codeaurora.org>
    Signed-off-by: Rob Clark <robdclark@gmail.com>

commit 30512040ed8e1982e5ba16bb3e3a7f000ff65427
Author: Archit Taneja <architt@codeaurora.org>
Date:   Fri Mar 17 09:09:48 2017 +0530

    drm/msm/mdp5: Update SSPP_MAX value
    
    'SSPP_MAX + 1' is the max number of hwpipes that can be present on a
    MDP5 platform. Recently, 2 new cursor hwpipes were added, which
    caused overflows in arrays that used SSPP_MAX to represent the number
    of elements. Update the SSPP_MAX value to incorporate the extra
    hwpipes.
    
    Signed-off-by: Archit Taneja <architt@codeaurora.org>
    Signed-off-by: Rob Clark <robdclark@gmail.com>

commit 5a8cf90d743f2d05433c6109f6c1b9b904b0cdb7
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Thu Feb 2 20:47:41 2017 +0000

    drm/i915: Drain the freed state from the tail of the next commit
    
    If we have any residual freed atomic state from earlier commits, flush
    the freed list after performing the current modeset. This prevents the
    freed list from ever-growing if userspace manages to starve the kernel
    threads (i.e. we are never able to run our free state worker and
    eventually the system may even oom).
    
    Fixes: 6f0f02dc56f1 ("drm/i915: Move atomic state free from out of fence release")
    Testcase: igt/kms_cursor/legacy/all-pipes-single-bo
    Reported-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: http://patchwork.freedesktop.org/patch/msgid/20170202204741.18231-1-chris@chris-wilson.co.uk
    Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    (cherry picked from commit ba318c61a9719577b6f451c055f364e4116874b2)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>

commit bff8fba48b52d77b39084743b6209b6442a9e622
Author: Archit Taneja <architt@codeaurora.org>
Date:   Fri Dec 16 12:00:30 2016 +0530

    drm/msm/mdp5: Add cursor planes
    
    Register cursor drm_planes. The loop in modeset_init that inits the
    planes and crtcs has to be refactored a bit. We first iterate all the
    hwpipes to find the cursor planes. Then, we loop again to create
    crtcs.
    
    In msm_atomic_wait_for_commit_done, remove the check which bypasses
    waiting for vsyncs if state->legacy_cursor_updates is true.
    
    We will later create a fast path for cursor position changes in the
    cursor plane's update_plane func that doesn't go via the regular
    atomic commit path. For rest of cursor related updates, we will have
    to wait for vsyncs, so ignore the legacy_cursor_updates flag.
    
    Signed-off-by: Archit Taneja <architt@codeaurora.org>
    Signed-off-by: Rob Clark <robdclark@gmail.com>

commit ba318c61a9719577b6f451c055f364e4116874b2
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Thu Feb 2 20:47:41 2017 +0000

    drm/i915: Drain the freed state from the tail of the next commit
    
    If we have any residual freed atomic state from earlier commits, flush
    the freed list after performing the current modeset. This prevents the
    freed list from ever-growing if userspace manages to starve the kernel
    threads (i.e. we are never able to run our free state worker and
    eventually the system may even oom).
    
    Fixes: eb955eee27d9 ("drm/i915: Move atomic state free from out of fence release")
    Testcase: igt/kms_cursor/legacy/all-pipes-single-bo
    Reported-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: http://patchwork.freedesktop.org/patch/msgid/20170202204741.18231-1-chris@chris-wilson.co.uk
    Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>

commit ce64645d86ac5550559f3dca07fd9ba42166e196
Author: Jani Nikula <jani.nikula@intel.com>
Date:   Fri Jan 27 17:57:06 2017 +0200

    drm/i915: use variadic macros and arrays to choose port/pipe based registers
    
    This allows the use of more than 3 ports/pipes/whatever without tricks,
    even if the register offsets are not evenly spaced.
    
    There's the risk of out of bounds access if we're not careful; currently
    that would "just" lead to the wrong register offset being used. It might
    be possible to add build bug ons for build time constant indexing.
    
    We already have ports defined up to E, not sure if we might have bugs
    related to them and the current _PORT3() macro.
    
       text    data     bss     dec     hex filename
    1239868   46199    4096 1290163  13afb3 drivers/gpu/drm/i915/i915.ko
    1238828   46199    4096 1289123  13aba3 drivers/gpu/drm/i915/i915.ko
    
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Tvrtko Ursulin <tursulin@ursulin.net>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Acked-by: Daniel Vetter <daniel@ffwll.ch>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1485532626-20923-1-git-send-email-jani.nikula@intel.com

commit 232892fb14265b07b7a50061f36aaa5a6b81fb9d
Author: Jerome Anand <jerome.anand@intel.com>
Date:   Wed Jan 25 04:27:53 2017 +0530

    ALSA: x86: hdmi: continue playback even when display resolution changes
    
    When the display resolution changes, the drm disables the
    display pipes due to which audio rendering stops. At this
    time, we need to ensure the existing audio pointers and
    buffers are cleared out so that the playback can restarted
    once the display pipe is enabled with a different N/CTS values
    
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Signed-off-by: Jerome Anand <jerome.anand@intel.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit 159e2ea9ed4996e3398cb9174921a4543c785ed2
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Nov 14 18:35:09 2016 +0200

    drm/i915: Fix cdclk vs. dev_cdclk mess when not recomputing things
    
    commit 14676ec6b1a6f2f7fa0bafd98ab42ce77be7a7d4 upstream.
    
    When we end up not recomputing the cdclk, we need to populate
    intel_state->cdclk with the "atomic_cdclk_freq" instead of the
    current cdclk_freq. When no pipes are active, the actual cdclk_freq
    may be lower than what the configuration of the planes and
    pipes would require from the point of view of the software state.
    
    This fixes bogus WARNS from skl_max_scale() which is trying to check
    the plane software state against the cdclk frequency. So any time
    it got called during DPMS off for instance, we might have tripped
    the warn if the current mode would have required a higher than
    minimum cdclk.
    
    v2: Drop the dev_cdclk stuff (Maarten)
    
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Cc: Mika Kahola <mika.kahola@intel.com>
    Cc: bruno.pagani@ens-lyon.org
    Cc: Daniel J Blueman <daniel.blueman@gmail.com>
    Cc: Paul Bolle <pebolle@tiscali.nl>
    Cc: Joseph Yasi <joe.yasi@gmail.com>
    Tested-by: Paul Bolle <pebolle@tiscali.nl>
    Tested-by: Joseph Yasi <joe.yasi@gmail.com> (v1)
    Fixes: 1a617b77658e ("drm/i915: Keep track of the cdclk as if all crtc's were active.")
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=98214
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1479141311-11904-2-git-send-email-ville.syrjala@linux.intel.com
    (cherry picked from commit e0ca7a6be38ce603d26df5707c22e53870a623e0)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 22aba475d97b52930d5e75529be35fd68aa576bc
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Nov 14 18:35:09 2016 +0200

    drm/i915: Fix cdclk vs. dev_cdclk mess when not recomputing things
    
    commit 14676ec6b1a6f2f7fa0bafd98ab42ce77be7a7d4 upstream.
    
    When we end up not recomputing the cdclk, we need to populate
    intel_state->cdclk with the "atomic_cdclk_freq" instead of the
    current cdclk_freq. When no pipes are active, the actual cdclk_freq
    may be lower than what the configuration of the planes and
    pipes would require from the point of view of the software state.
    
    This fixes bogus WARNS from skl_max_scale() which is trying to check
    the plane software state against the cdclk frequency. So any time
    it got called during DPMS off for instance, we might have tripped
    the warn if the current mode would have required a higher than
    minimum cdclk.
    
    v2: Drop the dev_cdclk stuff (Maarten)
    
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Cc: Mika Kahola <mika.kahola@intel.com>
    Cc: bruno.pagani@ens-lyon.org
    Cc: Daniel J Blueman <daniel.blueman@gmail.com>
    Cc: Paul Bolle <pebolle@tiscali.nl>
    Cc: Joseph Yasi <joe.yasi@gmail.com>
    Tested-by: Paul Bolle <pebolle@tiscali.nl>
    Tested-by: Joseph Yasi <joe.yasi@gmail.com> (v1)
    Fixes: 1a617b77658e ("drm/i915: Keep track of the cdclk as if all crtc's were active.")
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=98214
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1479141311-11904-2-git-send-email-ville.syrjala@linux.intel.com
    (cherry picked from commit e0ca7a6be38ce603d26df5707c22e53870a623e0)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 108109444ff64fb1a2976174ec23e9e2117b5709
Author: Elaine Wang <elaine.wang@intel.com>
Date:   Mon Dec 19 18:19:05 2016 +0800

    drm/i915: Check num_pipes before initializing audio component
    
    when num_pipes is zero, it indicates there is no display and HDMI
    audio doesn't exist.
    
    v2: Move the check from caller to callee for consistency.
    
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Cc: Jani Nikula <jani.nikula@linux.intel.com>
    Signed-off-by: Elaine Wang <elaine.wang@intel.com>
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1482142746-21663-1-git-send-email-elaine.wang@intel.com

commit b92e09bb5bf4db65aeb8ca0094fdd5142ed54451
Merge: c11a6cfb0103 aecec8b60422
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Dec 13 13:26:24 2016 -0800

    Merge branch 'for-4.10' of git://git.kernel.org/pub/scm/linux/kernel/git/tj/libata
    
    Pull libata updates from Tejun Heo:
    
     - Adam added opt-in ATA command priority support.
    
     - There are machines which hide multiple nvme devices behind an ahci
       BAR. Dan Williams proposed a solution to force-switch the mode but
       deemed too hackishd. People are gonna discuss the proper way to
       handle the situation in nvme standard meetings. For now, detect and
       warn about the situation.
    
     - Low level driver specific changes.
    
    Christoph Hellwig pipes in about the hidden nvme warning:
     "I wish that was the case. We've pretty much agreed that we'll want to
      implement it as a virtual PCIe root bridge, similar to Intels other
      'innovation' VMD that we work around that way.
    
      But Intel management has apparently decided that they don't want to
      spend more cycles on this now that Lenovo has an optional BIOS that
      doesn't force this broken mode anymore, and no one outside of Intel
      has enough information to implement something like this.
    
      So for now I guess this warning is it, until Intel reconsideres and
      spends resources on fixing up the damage their Chipset people caused"
    
    * 'for-4.10' of git://git.kernel.org/pub/scm/linux/kernel/git/tj/libata:
      ahci: warn about remapped NVMe devices
      ahci-remap.h: add ahci remapping definitions
      nvme: move NVMe class code to pci_ids.h
      pata: imx: support controller modes up to PIO4
      pata: imx: add support of setting timings for PIO modes
      pata: imx: set controller PIO mode with .set_piomode callback
      pata: imx: sort headers out
      ata: set ncq_prio_enabled iff device has support
      ata: ATA Command Priority Disabled By Default
      ata: Enabling ATA Command Priorities
      block: Add iocontext priority to request
      ahci: qoriq: added ls1046a platform support

commit 467a14d935c6d95b94e4197bf63e264eab4c5d06
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Dec 5 16:13:28 2016 +0200

    drm/i915: Protect DSPARB registers with a spinlock
    
    Each DSPARB register can house bits for two separate pipes, hence
    we must protect the registers during reprogramming so that parallel
    FIFO reconfigurations happening simultaneosly on multiple pipes won't
    corrupt each others values.
    
    We'll use a new spinlock for this instead of the wm_mutex since we'll
    have to move the DSPARB programming to happen from the vblank evade
    critical section, and we can't use mutexes in there.
    
    v2: Document why we use a spinlock instead of a mutex (Maarten)
    
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1480947208-18468-1-git-send-email-ville.syrjala@linux.intel.com
    Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>

commit 14676ec6b1a6f2f7fa0bafd98ab42ce77be7a7d4
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Nov 14 18:35:09 2016 +0200

    drm/i915: Fix cdclk vs. dev_cdclk mess when not recomputing things
    
    When we end up not recomputing the cdclk, we need to populate
    intel_state->cdclk with the "atomic_cdclk_freq" instead of the
    current cdclk_freq. When no pipes are active, the actual cdclk_freq
    may be lower than what the configuration of the planes and
    pipes would require from the point of view of the software state.
    
    This fixes bogus WARNS from skl_max_scale() which is trying to check
    the plane software state against the cdclk frequency. So any time
    it got called during DPMS off for instance, we might have tripped
    the warn if the current mode would have required a higher than
    minimum cdclk.
    
    v2: Drop the dev_cdclk stuff (Maarten)
    
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Cc: Mika Kahola <mika.kahola@intel.com>
    Cc: bruno.pagani@ens-lyon.org
    Cc: Daniel J Blueman <daniel.blueman@gmail.com>
    Cc: Paul Bolle <pebolle@tiscali.nl>
    Cc: Joseph Yasi <joe.yasi@gmail.com>
    Tested-by: Paul Bolle <pebolle@tiscali.nl>
    Tested-by: Joseph Yasi <joe.yasi@gmail.com> (v1)
    Cc: <stable@vger.kernel.org> # v4.6+
    Fixes: 1a617b77658e ("drm/i915: Keep track of the cdclk as if all crtc's were active.")
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=98214
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1479141311-11904-2-git-send-email-ville.syrjala@linux.intel.com
    (cherry picked from commit e0ca7a6be38ce603d26df5707c22e53870a623e0)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>

commit 09d093869feb09f098ac7bd28a8dbadccff79216
Author: Ander Conselvan de Oliveira <ander.conselvan.de.oliveira@intel.com>
Date:   Fri Dec 2 10:23:55 2016 +0200

    drm/i915/glk: Allow dotclock up to 2 * cdclk on geminilake
    
    Geminilake has double wide pipes so it can output two pixels per CD
    clock.
    
    Signed-off-by: Ander Conselvan de Oliveira <ander.conselvan.de.oliveira@intel.com>
    Reviewed-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1480667037-11215-8-git-send-email-ander.conselvan.de.oliveira@intel.com

commit f5590134365f6f23dba723f140f72effcc71773f
Merge: a90f58311f48 2401a0084614
Author: Dave Airlie <airlied@redhat.com>
Date:   Thu Dec 1 09:25:58 2016 +1000

    Merge branch 'msm-next' of git://people.freedesktop.org/~robclark/linux into drm-next
    
    On the userspace side, all the basics are working, and most of glmark2
    is working.  I've been working through deqp, and I've got a couple more
    things to fix (but we've gone from 70% to 80+% pass in last day, and
    current deqp run that is going should pick up another 5-10%).  I expect
    to push the mesa patches today or tomorrow.
    
    There are a couple more a5xx related patches to take the gpu out of
    secure mode (for the devices that come up in secure mode, like the hw
    I have), but those depend on an scm patch that would come in through
    another tree.  If that can land in the next day or two, there might
    be a second late pull request for drm/msm.
    
    In addition to the new-shiny, there have also been a lot of overlay/
    plane related fixes for issues found using drm-hwc2 (in the process of
    testing/debugging the atomic/kms fence patches), resulting in rework
    to assign hwpipes to kms planes dynamically (as part of global atomic
    state) and also handling SMP (fifo) block allocation atomically as
    part of the ->atomic_check() step.  All those patches should also help
    out atomic weston (when those patches eventually land).
    
    * 'msm-next' of git://people.freedesktop.org/~robclark/linux: (36 commits)
      drm/msm: gpu: Add support for the GPMU
      drm/msm: gpu: Add A5XX target support
      drm/msm: Disable interrupts during init
      drm/msm: Remove 'src_clk' from adreno configuration
      drm/msm: gpu: Add OUT_TYPE4 and OUT_TYPE7
      drm/msm: Add adreno_gpu_write64()
      drm/msm: gpu Add new gpu register read/write functions
      drm/msm: gpu: Return error on hw_init failure
      drm/msm: gpu: Cut down the list of "generic" registers to the ones we use
      drm/msm: update generated headers
      drm/msm/adreno: move scratch register dumping to per-gen code
      drm/msm/rd: support for 64b iova
      drm/msm: convert iova to 64b
      drm/msm: set dma_mask properly
      drm/msm: Remove bad calls to of_node_put()
      drm/msm/mdp5: move LM bounds check into plane->atomic_check()
      drm/msm/mdp5: dump smp state on errors too
      drm/msm/mdp5: add debugfs to show smp block status
      drm/msm/mdp5: handle SMP block allocations "atomically"
      drm/msm/mdp5: dynamically assign hw pipes to planes
      ...

commit ff6a9292e6f633d596826be5ba70d3ef90cc3300
Author: Christoph Hellwig <hch@lst.de>
Date:   Wed Nov 30 14:36:01 2016 +1100

    iomap: implement direct I/O
    
    This adds a full fledget direct I/O implementation using the iomap
    interface. Full fledged in this case means all features are supported:
    AIO, vectored I/O, any iov_iter type including kernel pointers, bvecs
    and pipes, support for hole filling and async apending writes.  It does
    not mean supporting all the warts of the old generic code.  We expect
    i_rwsem to be held over the duration of the call, and we expect to
    maintain i_dio_count ourselves, and we pass on any kinds of mapping
    to the file system for now.
    
    The algorithm used is very simple: We use iomap_apply to iterate over
    the range of the I/O, and then we use the new bio_iov_iter_get_pages
    helper to lock down the user range for the size of the extent.
    bio_iov_iter_get_pages can currently lock down twice as many pages as
    the old direct I/O code did, which means that we will have a better
    batch factor for everything but overwrites of badly fragmented files.
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Kent Overstreet <kent.overstreet@gmail.com>
    Tested-by: Jens Axboe <axboe@fb.com>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Dave Chinner <david@fromorbit.com>

commit 4a0f012da3e21174f34637ae3b6818c0da60f2f9
Author: Rob Clark <robdclark@gmail.com>
Date:   Tue Nov 1 11:56:54 2016 -0400

    drm/msm/mdp5: dynamically assign hw pipes to planes
    
    (re)assign the hw pipes to planes based on required caps, and to handle
    situations where we could not modify an in-use plane (ie. SMP block
    reallocation).
    
    This means all planes advertise the superset of formats and properties.
    Userspace must (as always) use atomic TEST_ONLY step for atomic updates,
    as not all planes may be available for use on every frame.
    
    The mapping of hwpipe to plane is stored in mdp5_state, so that state
    updates are atomically committed in the same way that plane/etc state
    updates are managed.  This is needed because the mdp5_plane_state keeps
    a pointer to the hwpipe, and we don't want global state to become out
    of sync with the plane state if an atomic update fails, we hit deadlock/
    backoff scenario, etc.  The use of state_lock keeps multiple parallel
    updates which both re-assign hwpipes properly serialized.
    
    Signed-off-by: Rob Clark <robdclark@gmail.com>

commit c056b55dc672cbc42e8814ef45726ca22e01ef9e
Author: Rob Clark <robdclark@gmail.com>
Date:   Tue Nov 1 09:56:51 2016 -0400

    drm/msm/mdp5: introduce mdp5_hw_pipe
    
    Split out the hardware pipe specifics from mdp5_plane.  To start, the hw
    pipes are statically assigned to planes, but next step is to assign the
    hw pipes during plane->atomic_check() based on requested caps (scaling,
    YUV, etc).  And then hw pipe re-assignment if required if required SMP
    blocks changes.
    
    Signed-off-by: Rob Clark <robdclark@gmail.com>
    Reviewed-by: Archit Taneja <architt@codeaurora.org>

commit 0002d30f3f824907af413d254f9363687095187b
Author: Rob Clark <robdclark@gmail.com>
Date:   Tue Nov 1 09:31:21 2016 -0400

    drm/msm/mdp5: drop mdp5_plane::name
    
    Just use plane->name now that it is a thing.  In a following patch, once
    we dynamically assign hw pipes to planes, it won't make sense to name
    planes the way we do, so this also partly reduces churn in following
    patch.
    
    Signed-off-by: Rob Clark <robdclark@gmail.com>

commit cee265886d1e7a7ea65c0181665e2be0167a454e
Author: Rob Clark <robdclark@gmail.com>
Date:   Mon Oct 31 16:05:22 2016 -0400

    drm/msm/mdp5: drop mdp5_crtc::name
    
    Plane's (pipes) can be assigned dynamically with atomic, so it doesn't
    make much sense to name the pipe after it's primary plane.
    
    Signed-off-by: Rob Clark <robdclark@gmail.com>

commit 2c381848833a9ede5818b918bb5ea0644e1f808a
Author: Rob Clark <robdclark@gmail.com>
Date:   Mon Oct 17 12:00:21 2016 -0400

    drm/msm/mdp5: no scaling support on RGBn pipes for 8x16
    
    Looks like cut/paste error from the other device cfgs (which do support
    scaling on RGBn pipes).
    
    Signed-off-by: Rob Clark <robdclark@gmail.com>

commit 9780aad59cf40db6a2ded69f91b11ba366dbd8cf
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Nov 14 18:35:11 2016 +0200

    drm/i915: Simplify error handling in intel_modeset_all_pipes()
    
    No need for the extra break statements and whatnot, just return the
    error directly. And tighten the scope of the local variables while at
    it.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1479141311-11904-4-git-send-email-ville.syrjala@linux.intel.com
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 8d96561a0a31974fec33bd3f3853d6211b7ab738
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Nov 14 18:35:10 2016 +0200

    drm/i915: Protect dev_priv->atomic_cdclk_freq with all the crtc locks
    
    A modeset on one pipe can update dev_priv->atomic_cdclk_freq without
    actually touching the hardware, in which case we won't force a modeset
    on all the pipes, and thus won't lock any of the other pipes either.
    That means a parallel plane update on another pipe could be looking at
    a stale dev_priv->atomic_cdcdlk_freq and thus fail to notice when the
    plane configuration is invalid, or potentially reject a valid update.
    
    To overcome this we must protect writes to atomic_cdclk_freq with
    all the crtc locks, and thus for reads any single crtc lock will
    be sufficient protection.
    
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1479141311-11904-3-git-send-email-ville.syrjala@linux.intel.com
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit e0ca7a6be38ce603d26df5707c22e53870a623e0
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Nov 14 18:35:09 2016 +0200

    drm/i915: Fix cdclk vs. dev_cdclk mess when not recomputing things
    
    When we end up not recomputing the cdclk, we need to populate
    intel_state->cdclk with the "atomic_cdclk_freq" instead of the
    current cdclk_freq. When no pipes are active, the actual cdclk_freq
    may be lower than what the configuration of the planes and
    pipes would require from the point of view of the software state.
    
    This fixes bogus WARNS from skl_max_scale() which is trying to check
    the plane software state against the cdclk frequency. So any time
    it got called during DPMS off for instance, we might have tripped
    the warn if the current mode would have required a higher than
    minimum cdclk.
    
    v2: Drop the dev_cdclk stuff (Maarten)
    
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Cc: Mika Kahola <mika.kahola@intel.com>
    Cc: bruno.pagani@ens-lyon.org
    Cc: Daniel J Blueman <daniel.blueman@gmail.com>
    Cc: Paul Bolle <pebolle@tiscali.nl>
    Cc: Joseph Yasi <joe.yasi@gmail.com>
    Tested-by: Paul Bolle <pebolle@tiscali.nl>
    Tested-by: Joseph Yasi <joe.yasi@gmail.com> (v1)
    Cc: stable@vger.kernel.org
    Fixes: 1a617b77658e ("drm/i915: Keep track of the cdclk as if all crtc's were active.")
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=98214
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1479141311-11904-2-git-send-email-ville.syrjala@linux.intel.com

commit 74bccc9b71dc41d37e73fcdbcbec85310a670751
Author: Ladislav Michl <ladis@linux-mips.org>
Date:   Fri Nov 18 19:09:19 2016 +0100

    cdc-acm: store in and out pipes in acm structure
    
    Clearing stall needs pipe descriptor, store it in acm structure.
    
    Signed-off-by: Ladislav Michl <ladis@linux-mips.org>
    Acked-by: Oliver Neukum <oneukum@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 512b552798bfa3c4e665c34b9618d05c71b753ad
Author: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
Date:   Tue Nov 8 13:55:34 2016 +0100

    drm/i915/gen9+: Preserve old allocation from crtc_state.
    
    This is the last bit required for making nonblocking modesets work
    correctly. The state in intel_crtc->hw_ddb is updated in the
    nonblocking part of a nonblocking commit.
    
    This means that even attempting a commit before a nonblocking modeset
    completes will fail, because intel_crtc->hw_ddb still has stale values.
    The stale values are 0 if the crtc is being enabled resulting in a
    failure during atomic check, but it may also result in double use of
    ddb allocations.
    
    Fix this by explicitly copying the ddb allocation from the old state.
    This has to be done explicitly, because a modeset that doesn't change
    active pipes, or a modeset converted to a fastset will will clear the
    current state.
    
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1478609742-13603-4-git-send-email-maarten.lankhorst@linux.intel.com
    [mlankhorst: Reword commit message.]
    Reviewed-by: Matt Roper <matthew.d.roper@intel.com>

commit 4fb68f9789cf80817c16462f070a9107febc1478
Merge: b8b73df3450c 24399f4f0b95
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Nov 11 16:25:28 2016 -0800

    Merge tag 'drm-fixes-for-v4.9-rc5' of git://people.freedesktop.org/~airlied/linux
    
    Pull drm fixes from Dave Airlie:
     "AMD, radeon, i915, imx, msm and udl fixes:
    
       - amdgpu/radeon have a number of power management regressions and
         fixes along with some better error checking
    
       - imx has a single regression fix
    
       - udl has a single kmalloc instead of stack for usb control msg fix
    
       - msm has some fixes for modesetting bugs and regressions
    
       - i915 has a one fix for a Sandybridge regression along with some
         others for DP audio.
    
      They all seem pretty okay at this stage, we've got one MST fix I know
      going through process for i915, but I expect it'll be next week"
    
    * tag 'drm-fixes-for-v4.9-rc5' of git://people.freedesktop.org/~airlied/linux: (30 commits)
      drm/udl: make control msg static const. (v2)
      drm/amd/powerplay: implement get_clock_by_type for iceland.
      drm/amd/powerplay/smu7: fix checks in smu7_get_evv_voltages (v2)
      drm/amd/powerplay: update phm_get_voltage_evv_on_sclk for iceland
      drm/amd/powerplay: propagate errors in phm_get_voltage_evv_on_sclk
      drm/imx: disable planes before DC
      drm/amd/powerplay: return false instead of -EINVAL
      drm/amdgpu/powerplay/smu7: fix unintialized data usage
      drm/amdgpu: fix crash in acp_hw_fini
      drm/i915: Limit Valleyview and earlier to only using mappable scanout
      drm/i915: Round tile chunks up for constructing partial VMAs
      drm/i915/dp: Extend BDW DP audio workaround to GEN9 platforms
      drm/i915/dp: BDW cdclk fix for DP audio
      drm/i915/vlv: Prevent enabling hpd polling in late suspend
      drm/i915: Respect alternate_ddc_pin for all DDI ports
      drm/msm: Fix error handling crashes seen when VRAM allocation fails
      drm/msm/mdp5: 8x16 actually has 8 mixer stages
      drm/msm/mdp5: no scaling support on RGBn pipes for 8x16
      drm/msm/mdp5: handle non-fullscreen base plane case
      drm/msm: Set CLK_IGNORE_UNUSED flag for PLL clocks
      ...

commit 968ef8de555bf3ff6dda467e53660b4144ba0ee1
Merge: c5e4ca6da93f ae65a21fb851
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Nov 11 09:44:23 2016 -0800

    Merge branch 'akpm' (patches from Andrew)
    
    Merge misc fixes from Andrew Morton:
     "15 fixes"
    
    * emailed patches from Andrew Morton <akpm@linux-foundation.org>:
      lib/stackdepot: export save/fetch stack for drivers
      mm: kmemleak: scan .data.ro_after_init
      memcg: prevent memcg caches to be both OFF_SLAB & OBJFREELIST_SLAB
      coredump: fix unfreezable coredumping task
      mm/filemap: don't allow partially uptodate page for pipes
      mm/hugetlb: fix huge page reservation leak in private mapping error paths
      ocfs2: fix not enough credit panic
      Revert "console: don't prefer first registered if DT specifies stdout-path"
      mm: hwpoison: fix thp split handling in memory_failure()
      swapfile: fix memory corruption via malformed swapfile
      mm/cma.c: check the max limit for cma allocation
      scripts/bloat-o-meter: fix SIGPIPE
      shmem: fix pageflags after swapping DMA32 object
      mm, frontswap: make sure allocated frontswap map is assigned
      mm: remove extra newline from allocation stall warning

commit c5e4ca6da93f69939542385ca23d7ccebddc3f7d
Merge: ef091b3cef2d e519e7774784
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Nov 11 09:19:01 2016 -0800

    Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs
    
    Pull VFS fixes from Al Viro:
     "Christoph's and Jan's aio fixes, fixup for generic_file_splice_read
      (removal of pointless detritus that actually breaks it when used for
      gfs2 ->splice_read()) and fixup for generic_file_read_iter()
      interaction with ITER_PIPE destinations."
    
    * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs:
      splice: remove detritus from generic_file_splice_read()
      mm/filemap: don't allow partially uptodate page for pipes
      aio: fix freeze protection of aio writes
      fs: remove aio_run_iocb
      fs: remove the never implemented aio_fsync file operation
      aio: hold an extra file reference over AIO read/write operations

commit 60da81ea61201f43387793d1cc3f501609d922ed
Author: Eryu Guan <guaneryu@gmail.com>
Date:   Thu Nov 10 10:46:35 2016 -0800

    mm/filemap: don't allow partially uptodate page for pipes
    
    Starting from 4.9-rc1 kernel, I started noticing some test failures of
    sendfile(2) and splice(2) (sendfile0N and splice01 from LTP) when
    testing on sub-page block size filesystems (tested both XFS and ext4),
    these syscalls start to return EIO in the tests.  e.g.
    
      sendfile02    1  TFAIL  :  sendfile02.c:133: sendfile(2) failed to return expected value, expected: 26, got: -1
      sendfile02    2  TFAIL  :  sendfile02.c:133: sendfile(2) failed to return expected value, expected: 24, got: -1
      sendfile02    3  TFAIL  :  sendfile02.c:133: sendfile(2) failed to return expected value, expected: 22, got: -1
      sendfile02    4  TFAIL  :  sendfile02.c:133: sendfile(2) failed to return expected value, expected: 20, got: -1
    
    This is because that in sub-page block size cases, we don't need the
    whole page to be uptodate, only the part we care about is uptodate is OK
    (if fs has ->is_partially_uptodate defined).
    
    But page_cache_pipe_buf_confirm() doesn't have the ability to check the
    partially-uptodate case, it needs the whole page to be uptodate.  So it
    returns EIO in this case.
    
    This is a regression introduced by commit 82c156f85384 ("switch
    generic_file_splice_read() to use of ->read_iter()").  Prior to the
    change, generic_file_splice_read() doesn't allow partially-uptodate page
    either, so it worked fine.
    
    Fix it by skipping the partially-uptodate check if we're working on a
    pipe in do_generic_file_read(), so we read the whole page from disk as
    long as the page is not uptodate.
    
    I think the other way to fix it is to add the ability to check & allow
    partially-uptodate page to page_cache_pipe_buf_confirm(), but that is
    much harder to do and seems gain little.
    
    Link: http://lkml.kernel.org/r/1477986187-12717-1-git-send-email-guaneryu@gmail.com
    Signed-off-by: Eryu Guan <guaneryu@gmail.com>
    Reviewed-by: Jan Kara <jack@suse.cz>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 020a0bbc0d89c15693e69ed2063584ef7ec2d811
Merge: 672c98915891 16976085a114
Author: Dave Airlie <airlied@redhat.com>
Date:   Mon Nov 7 09:41:10 2016 +1000

    Merge branch 'msm-fixes-4.9' of git://people.freedesktop.org/~robclark/linux into drm-fixes
    
    Fixes for some msm issues
    
    * 'msm-fixes-4.9' of git://people.freedesktop.org/~robclark/linux:
      drm/msm: Fix error handling crashes seen when VRAM allocation fails
      drm/msm/mdp5: 8x16 actually has 8 mixer stages
      drm/msm/mdp5: no scaling support on RGBn pipes for 8x16
      drm/msm/mdp5: handle non-fullscreen base plane case
      drm/msm: Set CLK_IGNORE_UNUSED flag for PLL clocks
      drm/msm/dsi: Queue HPD helper work in attach/detach callbacks

commit 6d6d36bc6e77f8b1f86d81884ad5149931bb4acd
Author: Eryu Guan <guaneryu@gmail.com>
Date:   Tue Nov 1 15:43:07 2016 +0800

    mm/filemap: don't allow partially uptodate page for pipes
    
    Starting from 4.9-rc1 kernel, I started noticing some test failures
    of sendfile(2) and splice(2) (sendfile0N and splice01 from LTP) when
    testing on sub-page block size filesystems (tested both XFS and
    ext4), these syscalls start to return EIO in the tests. e.g.
    
    sendfile02    1  TFAIL  :  sendfile02.c:133: sendfile(2) failed to return expected value, expected: 26, got: -1
    sendfile02    2  TFAIL  :  sendfile02.c:133: sendfile(2) failed to return expected value, expected: 24, got: -1
    sendfile02    3  TFAIL  :  sendfile02.c:133: sendfile(2) failed to return expected value, expected: 22, got: -1
    sendfile02    4  TFAIL  :  sendfile02.c:133: sendfile(2) failed to return expected value, expected: 20, got: -1
    
    This is because that in sub-page block size cases, we don't need the
    whole page to be uptodate, only the part we care about is uptodate
    is OK (if fs has ->is_partially_uptodate defined). But
    page_cache_pipe_buf_confirm() doesn't have the ability to check the
    partially-uptodate case, it needs the whole page to be uptodate. So
    it returns EIO in this case.
    
    This is a regression introduced by commit 82c156f85384 ("switch
    generic_file_splice_read() to use of ->read_iter()"). Prior to the
    change, generic_file_splice_read() doesn't allow partially-uptodate
    page either, so it worked fine.
    
    Fix it by skipping the partially-uptodate check if we're working on
    a pipe in do_generic_file_read(), so we read the whole page from
    disk as long as the page is not uptodate.
    
    Signed-off-by: Eryu Guan <guaneryu@gmail.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit 07cd2e36263af34f7f0b48e36eff5d4b77d5756a
Author: Rob Clark <robdclark@gmail.com>
Date:   Mon Oct 17 12:00:21 2016 -0400

    drm/msm/mdp5: no scaling support on RGBn pipes for 8x16
    
    Looks like cut/paste error from the other device cfgs (which do support
    scaling on RGBn pipes).
    
    Signed-off-by: Rob Clark <robdclark@gmail.com>

commit f81d46c4e159d777e078160f104f217fd249b59b
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Sep 26 11:30:46 2016 +0300

    drm/i915: Allow PCH DPLL sharing regardless of DPLL_SDVO_HIGH_SPEED
    
    commit a3fd4c67af3d8a81d241b3d51b3525f36f1d68bb upstream.
    
    DPLL_SDVO_HIGH_SPEED must be set for SDVO/HDMI/DP, but nowhere is it
    forbidden to set it for LVDS/CRT as well. So let's also set it on
    CRT to make it possible to share the DPLL between HDMI and CRT.
    
    What that bit apparently does is enable the x5 clock to the port,
    which then pumps out the bits on both edges of the clock. The DAC
    doesn't need that clock since it's not pumping out bits, but I don't
    think it hurts to have the DPLL output that clock anyway.
    
    This is fairly important on IVB since it has only two DPLLs with three
    pipes. So trying to drive three or more PCH ports with three pipes
    is only possible when at least one of the DPLLs gets shared between
    two of the pipes.
    
    SNB doesn't really need to do this since it has only two pipes. It could
    be done to avoid enabling the second DPLL at all in certain cases, but
    I'm not sure that's such a huge win. So let's not do it for SNB, at
    least for now. On ILK it never makes sense as the DPLLs can't be shared.
    
    v2: Just always enable the high speed clock to keep things simple (Daniel)
        Beef up the commit message a bit (Daniel)
    
    Cc: Nick Yamane <nick.diego@gmail.com>
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Tested-by: Nick Yamane <nick.diego@gmail.com>
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=97204
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1474878646-17711-1-git-send-email-ville.syrjala@linux.intel.com
    Reviewed-by: Ander Conselvan de Oliveira <conselvan2@gmail.com>
    (cherry picked from commit 7d7f8633a82763577727762ff3ac1df3017cb8fe)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1e599a0d3f71a5e7d821796c269f07e6d022ad5c
Author: Lyude <cpaul@redhat.com>
Date:   Wed Aug 17 15:55:57 2016 -0400

    drm/i915/skl: Ensure pipes with changed wms get added to the state
    
    commit 05a76d3d6ad1ee9f9814f88949cc9305fc165460 upstream.
    
    If we're enabling a pipe, we'll need to modify the watermarks on all
    active planes. Since those planes won't be added to the state on
    their own, we need to add them ourselves.
    
    Signed-off-by: Lyude <cpaul@redhat.com>
    Reviewed-by: Matt Roper <matthew.d.roper@intel.com>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Daniel Vetter <daniel.vetter@intel.com>
    Cc: Radhakrishna Sripada <radhakrishna.sripada@intel.com>
    Cc: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1471463761-26796-6-git-send-email-cpaul@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3dd241580298a56fcba209fdc9b677bae31bcdee
Author: Paulo Zanoni <paulo.r.zanoni@intel.com>
Date:   Thu Sep 29 16:36:48 2016 -0300

    drm/i915/gen9: only add the planes actually affected by ddb changes
    
    commit be5c571b2ff3a164d2e14ccc100cb5b2b3d3fb7c upstream.
    
    We were previously adding all the planes owned by the CRTC even when
    the ddb partitioning didn't change for them. As a consequence, a lot
    of functions were being called when we were just moving the cursor
    around the screen, such as skylake_update_primary_plane().
    
    This was causing flickering on the primary plane when moving the
    cursor. I'm not 100% sure which operation caused the flickering, but
    we were writing to a lot of registers, so it could be any of these
    writes. With this patch, just moving the mouse won't add the primary
    plane to the commit since it won't trigger a change in DDB
    partitioning.
    
    v2: Use skl_ddb_entry_equal() (Lyude).
    v3: Change Reported-and-bisected-by: to Reported-by: for checkpatch
    
    Fixes: 05a76d3d6ad1 ("drm/i915/skl: Ensure pipes with changed wms get added to the state")
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=97888
    Cc: Mike Lothian <mike@fireburn.co.uk>
    Reported-by: Mike Lothian <mike@fireburn.co.uk>
    Signed-off-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Signed-off-by: Lyude <cpaul@redhat.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1475177808-29955-1-git-send-email-paulo.r.zanoni@intel.com
    (cherry picked from commit 7f60e200e254cd53ad1bd74a56bdd23e813ac4b7)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 44e97ca6fb778ba7586cd5ad34afa0f789f88e17
Author: Lyude <cpaul@redhat.com>
Date:   Mon Aug 29 12:31:27 2016 -0400

    drm/i915/skl: Don't try to update plane watermarks if they haven't changed
    
    commit ccebc23b57c313229526dc76383ce82f5e0b9001 upstream.
    
    i915 sometimes needs to disable planes in the middle of an atomic
    commit, and then reenable them later in the same commit. Because of
    this, we can't make the assumption that the state of the plane actually
    changed. Since the state of the plane hasn't actually changed, neither
    have it's watermarks. And if the watermarks hasn't changed then we
    haven't populated skl_results with anything, which means we'll end up
    zeroing out a plane's watermarks in the middle of the atomic commit
    without restoring them later.
    
    Simple reproduction recipe:
     - Get a SKL laptop, launch any kind of X session
     - Get two extra monitors
     - Keep hotplugging both displays (so that the display configuration
       jumps from 1 active pipe to 3 active pipes and back)
     - Eventually underrun
    
    Changes since v1:
     - Fix incorrect use of "it's"
    Changes since v2:
     - Add reproduction recipe
    
    Signed-off-by: Lyude <cpaul@redhat.com>
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Fixes: 62e0fb880123 ("drm/i915/skl: Update plane watermarks atomically during plane updates")
    Signed-off-by: Lyude <cpaul@redhat.com>
    Testcase: kms_plane
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1472488288-27280-1-git-send-email-cpaul@redhat.com
    Cc: drm-intel-fixes@lists.freedesktop.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d64cdbd9291fbc569ba6a5ccef1dd697a10f8d20
Author: Lyude <cpaul@redhat.com>
Date:   Wed Aug 24 07:48:10 2016 +0200

    drm/i915/skl: Update DDB values atomically with wms/plane attrs
    
    commit 27082493e9c6371b05370a619ab9d2877c5f4726 upstream.
    
    Now that we can hook into update_crtcs and control the order in which we
    update CRTCs at each modeset, we can finish the final step of fixing
    Skylake's watermark handling by performing DDB updates at the same time
    as plane updates and watermark updates.
    
    The first major change in this patch is skl_update_crtcs(), which
    handles ensuring that we order each CRTC update in our atomic commits
    properly so that they honor the DDB flush order.
    
    The second major change in this patch is the order in which we flush the
    pipes. While the previous order may have worked, it can't be used in
    this approach since it no longer will do the right thing. For example,
    using the old ddb flush order:
    
    We have pipes A, B, and C enabled, and we're disabling C. Initial ddb
    allocation looks like this:
    
    |   A   |   B   |xxxxxxx|
    
    Since we're performing the ddb updates after performing any CRTC
    disablements in intel_atomic_commit_tail(), the space to the right of
    pipe B is unallocated.
    
    1. Flush pipes with new allocation contained into old space. None
       apply, so we skip this
    2. Flush pipes having their allocation reduced, but overlapping with a
       previous allocation. None apply, so we also skip this
    3. Flush pipes that got more space allocated. This applies to A and B,
       giving us the following update order: A, B
    
    This is wrong, since updating pipe A first will cause it to overlap with
    B and potentially burst into flames. Our new order (see the code
    comments for details) would update the pipes in the proper order: B, A.
    
    As well, we calculate the order for each DDB update during the check
    phase, and reference it later in the commit phase when we hit
    skl_update_crtcs().
    
    This long overdue patch fixes the rest of the underruns on Skylake.
    
    Changes since v1:
     - Add skl_ddb_entry_write() for cursor into skl_write_cursor_wm()
    Changes since v2:
     - Use the method for updating CRTCs that Ville suggested
     - In skl_update_wm(), only copy the watermarks for the crtc that was
       passed to us
    Changes since v3:
     - Small comment fix in skl_ddb_allocation_overlaps()
    Changes since v4:
     - Remove the second loop in intel_update_crtcs() and use Ville's
       suggestion for updating the ddb allocations in the right order
     - Get rid of the second loop and just use the ddb state as it updates
       to determine what order to update everything in (thanks for the
       suggestion Ville)
     - Simplify skl_ddb_allocation_overlaps()
     - Split actual overlap checking into it's own helper
    
    Fixes: 0e8fb7ba7ca5 ("drm/i915/skl: Flush the WM configuration")
    Fixes: 8211bd5bdf5e ("drm/i915/skl: Program the DDB allocation")
    [omitting CC for stable, since this patch will need to be changed for
    such backports first]
    
    Testcase: kms_cursor_legacy
    Testcase: plane-all-modeset-transition
    Signed-off-by: Lyude <cpaul@redhat.com>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Daniel Vetter <daniel.vetter@intel.com>
    Cc: Radhakrishna Sripada <radhakrishna.sripada@intel.com>
    Cc: Hans de Goede <hdegoede@redhat.com>
    Cc: Matt Roper <matthew.d.roper@intel.com>
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1471961565-28540-2-git-send-email-cpaul@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 00dcbda55115994c1feb6bbfe2c4ef21de7c59fb
Author: Lyude <cpaul@redhat.com>
Date:   Mon Aug 22 12:50:08 2016 -0400

    drm/i915/skl: Update plane watermarks atomically during plane updates
    
    commit 62e0fb880123c98793e5c3ba8355501b0305e92e upstream.
    
    Thanks to Ville for suggesting this as a potential solution to pipe
    underruns on Skylake.
    
    On Skylake all of the registers for configuring planes, including the
    registers for configuring their watermarks, are double buffered. New
    values written to them won't take effect until said registers are
    "armed", which is done by writing to the PLANE_SURF (or in the case of
    cursor planes, the CURBASE register) register.
    
    With this in mind, up until now we've been updating watermarks on skl
    like this:
    
      non-modeset {
       - calculate (during atomic check phase)
       - finish_atomic_commit:
         - intel_pre_plane_update:
            - intel_update_watermarks()
         - {vblank happens; new watermarks + old plane values => underrun }
         - drm_atomic_helper_commit_planes_on_crtc:
            - start vblank evasion
            - write new plane registers
            - end vblank evasion
      }
    
      or
    
      modeset {
       - calculate (during atomic check phase)
       - finish_atomic_commit:
         - crtc_enable:
            - intel_update_watermarks()
         - {vblank happens; new watermarks + old plane values => underrun }
         - drm_atomic_helper_commit_planes_on_crtc:
            - start vblank evasion
            - write new plane registers
            - end vblank evasion
      }
    
    Now we update watermarks atomically like this:
    
      non-modeset {
       - calculate (during atomic check phase)
       - finish_atomic_commit:
         - intel_pre_plane_update:
            - intel_update_watermarks() (wm values aren't written yet)
         - drm_atomic_helper_commit_planes_on_crtc:
            - start vblank evasion
            - write new plane registers
            - write new wm values
            - end vblank evasion
      }
    
      modeset {
       - calculate (during atomic check phase)
       - finish_atomic_commit:
         - crtc_enable:
            - intel_update_watermarks() (actual wm values aren't written
              yet)
         - drm_atomic_helper_commit_planes_on_crtc:
            - start vblank evasion
            - write new plane registers
            - write new wm values
            - end vblank evasion
      }
    
    So this patch moves all of the watermark writes into the right place;
    inside of the vblank evasion where we update all of the registers for
    each plane. While this patch doesn't fix everything, it does allow us to
    update the watermark values in the way the hardware expects us to.
    
    Changes since original patch series:
     - Remove mutex_lock/mutex_unlock since they don't do anything and we're
       not touching global state
     - Move skl_write_cursor_wm/skl_write_plane_wm functions into
       intel_pm.c, make externally visible
     - Add skl_write_plane_wm calls to skl_update_plane
     - Fix conditional for for loop in skl_write_plane_wm (level < max_level
       should be level <= max_level)
     - Make diagram in commit more accurate to what's actually happening
     - Add Fixes:
    
    Changes since v1:
     - Use IS_GEN9() instead of IS_SKYLAKE() since these fixes apply to more
       then just Skylake
     - Update description to make it clear this patch doesn't fix everything
     - Check if pipes were actually changed before writing watermarks
    
    Changes since v2:
     - Write PIPE_WM_LINETIME during vblank evasion
    
    Changes since v3:
     - Rebase against new SAGV patch changes
    
    Changes since v4:
     - Add a parameter to choose what skl_wm_values struct to use when
       writing new plane watermarks
    
    Changes since v5:
     - Remove cursor ddb entry write in skl_write_cursor_wm(), defer until
       patch 6
     - Write WM_LINETIME in intel_begin_crtc_commit()
    
    Changes since v6:
     - Remove redundant dirty_pipes check in skl_write_plane_wm (we check
       this in all places where we call this function, and it was supposed
       to have been removed earlier anyway)
     - In i9xx_update_cursor(), use dev_priv->info.gen >= 9 instead of
       IS_GEN9(dev_priv). We do this everywhere else and I'd imagine this
       needs to be done for gen10 as well
    
    Changes since v7:
     - Fix rebase fail (unused variable obj)
     - Make struct skl_wm_values *wm const
     - Fix indenting
     - Use INTEL_GEN() instead of dev_priv->info.gen
    
    Changes since v8:
     - Don't forget calls to skl_write_plane_wm() when disabling planes
     - Use INTEL_GEN(), not INTEL_INFO()->gen in intel_begin_crtc_commit()
    
    Fixes: 2d41c0b59afc ("drm/i915/skl: SKL Watermark Computation")
    Signed-off-by: Lyude <cpaul@redhat.com>
    Reviewed-by: Matt Roper <matthew.d.roper@intel.com>
    Cc: stable@vger.kernel.org
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Daniel Vetter <daniel.vetter@intel.com>
    Cc: Radhakrishna Sripada <radhakrishna.sripada@intel.com>
    Cc: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1471884608-10671-1-git-send-email-cpaul@redhat.com
    Link: http://patchwork.freedesktop.org/patch/msgid/1471884608-10671-1-git-send-email-cpaul@redhat.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 86e83e35d190a9b553384e0e711091a4e9643998
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Fri Oct 7 20:49:52 2016 +0100

    drm/i915: Merge duplicate gen4 and vlv/chv enable vblank callbacks
    
    gen4/vlv/chv all use the same bits in pipestat to enable the vblank
    interrupt, so they can share the same callbacks to enable/disable.
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/20161007194953.15616-1-chris@chris-wilson.co.uk
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 086e774a57fba4695f14383c0818994c0b31da7c
Author: Michael Kerrisk (man-pages) <mtk.manpages@gmail.com>
Date:   Tue Oct 11 13:53:43 2016 -0700

    pipe: cap initial pipe capacity according to pipe-max-size limit
    
    This is a patch that provides behavior that is more consistent, and
    probably less surprising to users. I consider the change optional, and
    welcome opinions about whether it should be applied.
    
    By default, pipes are created with a capacity of 64 kiB.  However,
    /proc/sys/fs/pipe-max-size may be set smaller than this value.  In this
    scenario, an unprivileged user could thus create a pipe whose initial
    capacity exceeds the limit. Therefore, it seems logical to cap the
    initial pipe capacity according to the value of pipe-max-size.
    
    The test program shown earlier in this patch series can be used to
    demonstrate the effect of the change brought about with this patch:
    
        # cat /proc/sys/fs/pipe-max-size
        1048576
        # sudo -u mtk ./test_F_SETPIPE_SZ 1
        Initial pipe capacity: 65536
        # echo 10000 > /proc/sys/fs/pipe-max-size
        # cat /proc/sys/fs/pipe-max-size
        16384
        # sudo -u mtk ./test_F_SETPIPE_SZ 1
        Initial pipe capacity: 16384
        # ./test_F_SETPIPE_SZ 1
        Initial pipe capacity: 65536
    
    The last two executions of 'test_F_SETPIPE_SZ' show that pipe-max-size
    caps the initial allocation for a new pipe for unprivileged users, but
    not for privileged users.
    
    Link: http://lkml.kernel.org/r/31dc7064-2a17-9c5b-1df1-4e3012ee992c@gmail.com
    Signed-off-by: Michael Kerrisk <mtk.manpages@gmail.com>
    Reviewed-by: Vegard Nossum <vegard.nossum@oracle.com>
    Cc: Willy Tarreau <w@1wt.eu>
    Cc: <socketpair@gmail.com>
    Cc: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Cc: Jens Axboe <axboe@fb.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit b0b91d18e2e97b741b294af9333824ecc3fadfd8
Author: Michael Kerrisk (man-pages) <mtk.manpages@gmail.com>
Date:   Tue Oct 11 13:53:31 2016 -0700

    pipe: fix limit checking in pipe_set_size()
    
    The limit checking in pipe_set_size() (used by fcntl(F_SETPIPE_SZ))
    has the following problems:
    
    (1) When increasing the pipe capacity, the checks against the limits in
        /proc/sys/fs/pipe-user-pages-{soft,hard} are made against existing
        consumption, and exclude the memory required for the increased pipe
        capacity. The new increase in pipe capacity can then push the total
        memory used by the user for pipes (possibly far) over a limit. This
        can also trigger the problem described next.
    
    (2) The limit checks are performed even when the new pipe capacity is
        less than the existing pipe capacity. This can lead to problems if a
        user sets a large pipe capacity, and then the limits are lowered,
        with the result that the user will no longer be able to decrease the
        pipe capacity.
    
    (3) As currently implemented, accounting and checking against the
        limits is done as follows:
    
        (a) Test whether the user has exceeded the limit.
        (b) Make new pipe buffer allocation.
        (c) Account new allocation against the limits.
    
        This is racey. Multiple processes may pass point (a)
        simultaneously, and then allocate pipe buffers that are accounted
        for only in step (c).  The race means that the user's pipe buffer
        allocation could be pushed over the limit (by an arbitrary amount,
        depending on how unlucky we were in the race). [Thanks to Vegard
        Nossum for spotting this point, which I had missed.]
    
    This patch addresses the above problems as follows:
    
    * Perform checks against the limits only when increasing a pipe's
      capacity; an unprivileged user can always decrease a pipe's capacity.
    * Alter the checks against limits to include the memory required for
      the new pipe capacity.
    * Re-order the accounting step so that it precedes the buffer
      allocation. If the accounting step determines that a limit has
      been reached, revert the accounting and cause the operation to fail.
    
    The program below can be used to demonstrate problems 1 and 2, and the
    effect of the fix. The program takes one or more command-line arguments.
    The first argument specifies the number of pipes that the program should
    create. The remaining arguments are, alternately, pipe capacities that
    should be set using fcntl(F_SETPIPE_SZ), and sleep intervals (in
    seconds) between the fcntl() operations. (The sleep intervals allow the
    possibility to change the limits between fcntl() operations.)
    
    Problem 1
    =========
    
    Using the test program on an unpatched kernel, we first set some
    limits:
    
        # echo 0 > /proc/sys/fs/pipe-user-pages-soft
        # echo 1000000000 > /proc/sys/fs/pipe-max-size
        # echo 10000 > /proc/sys/fs/pipe-user-pages-hard    # 40.96 MB
    
    Then show that we can set a pipe with capacity (100MB) that is
    over the hard limit
    
        # sudo -u mtk ./test_F_SETPIPE_SZ 1 100000000
        Initial pipe capacity: 65536
            Loop 1: set pipe capacity to 100000000 bytes
                F_SETPIPE_SZ returned 134217728
    
    Now set the capacity to 100MB twice. The second call fails (which is
    probably surprising to most users, since it seems like a no-op):
    
        # sudo -u mtk ./test_F_SETPIPE_SZ 1 100000000 0 100000000
        Initial pipe capacity: 65536
            Loop 1: set pipe capacity to 100000000 bytes
                F_SETPIPE_SZ returned 134217728
            Loop 2: set pipe capacity to 100000000 bytes
                Loop 2, pipe 0: F_SETPIPE_SZ failed: fcntl: Operation not permitted
    
    With a patched kernel, setting a capacity over the limit fails at the
    first attempt:
    
        # echo 0 > /proc/sys/fs/pipe-user-pages-soft
        # echo 1000000000 > /proc/sys/fs/pipe-max-size
        # echo 10000 > /proc/sys/fs/pipe-user-pages-hard
        # sudo -u mtk ./test_F_SETPIPE_SZ 1 100000000
        Initial pipe capacity: 65536
            Loop 1: set pipe capacity to 100000000 bytes
                Loop 1, pipe 0: F_SETPIPE_SZ failed: fcntl: Operation not permitted
    
    There is a small chance that the change to fix this problem could
    break user-space, since there are cases where fcntl(F_SETPIPE_SZ)
    calls that previously succeeded might fail. However, the chances are
    small, since (a) the pipe-user-pages-{soft,hard} limits are new (in
    4.5), and the default soft/hard limits are high/unlimited.  Therefore,
    it seems warranted to make these limits operate more precisely (and
    behave more like what users probably expect).
    
    Problem 2
    =========
    
    Running the test program on an unpatched kernel, we first set some limits:
    
        # getconf PAGESIZE
        4096
        # echo 0 > /proc/sys/fs/pipe-user-pages-soft
        # echo 1000000000 > /proc/sys/fs/pipe-max-size
        # echo 10000 > /proc/sys/fs/pipe-user-pages-hard    # 40.96 MB
    
    Now perform two fcntl(F_SETPIPE_SZ) operations on a single pipe,
    first setting a pipe capacity (10MB), sleeping for a few seconds,
    during which time the hard limit is lowered, and then set pipe
    capacity to a smaller amount (5MB):
    
        # sudo -u mtk ./test_F_SETPIPE_SZ 1 10000000 15 5000000 &
        [1] 748
        # Initial pipe capacity: 65536
            Loop 1: set pipe capacity to 10000000 bytes
                F_SETPIPE_SZ returned 16777216
                Sleeping 15 seconds
    
        # echo 1000 > /proc/sys/fs/pipe-user-pages-hard      # 4.096 MB
        #     Loop 2: set pipe capacity to 5000000 bytes
                Loop 2, pipe 0: F_SETPIPE_SZ failed: fcntl: Operation not permitted
    
    In this case, the user should be able to lower the limit.
    
    With a kernel that has the patch below, the second fcntl()
    succeeds:
    
        # echo 0 > /proc/sys/fs/pipe-user-pages-soft
        # echo 1000000000 > /proc/sys/fs/pipe-max-size
        # echo 10000 > /proc/sys/fs/pipe-user-pages-hard
        # sudo -u mtk ./test_F_SETPIPE_SZ 1 10000000 15 5000000 &
        [1] 3215
        # Initial pipe capacity: 65536
        #     Loop 1: set pipe capacity to 10000000 bytes
                F_SETPIPE_SZ returned 16777216
                Sleeping 15 seconds
    
        # echo 1000 > /proc/sys/fs/pipe-user-pages-hard
    
        #     Loop 2: set pipe capacity to 5000000 bytes
                F_SETPIPE_SZ returned 8388608
    
    8x---8x---8x---8x---8x---8x---8x---8x---8x---8x---8x---8x---8x---8x---
    
    /* test_F_SETPIPE_SZ.c
    
       (C) 2016, Michael Kerrisk; licensed under GNU GPL version 2 or later
    
       Test operation of fcntl(F_SETPIPE_SZ) for setting pipe capacity
       and interactions with limits defined by /proc/sys/fs/pipe-* files.
    */
    
    #define _GNU_SOURCE
    #include <stdio.h>
    #include <stdlib.h>
    #include <fcntl.h>
    #include <unistd.h>
    
    int
    main(int argc, char *argv[])
    {
        int (*pfd)[2];
        int npipes;
        int pcap, rcap;
        int j, p, s, stime, loop;
    
        if (argc < 2) {
            fprintf(stderr, "Usage: %s num-pipes "
                    "[pipe-capacity sleep-time]...\n", argv[0]);
            exit(EXIT_FAILURE);
        }
    
        npipes = atoi(argv[1]);
    
        pfd = calloc(npipes, sizeof (int [2]));
        if (pfd == NULL) {
            perror("calloc");
            exit(EXIT_FAILURE);
        }
    
        for (j = 0; j < npipes; j++) {
            if (pipe(pfd[j]) == -1) {
                fprintf(stderr, "Loop %d: pipe() failed: ", j);
                perror("pipe");
                exit(EXIT_FAILURE);
            }
        }
    
        printf("Initial pipe capacity: %d\n", fcntl(pfd[0][0], F_GETPIPE_SZ));
    
        for (j = 2; j < argc; j += 2 ) {
            loop = j / 2;
            pcap = atoi(argv[j]);
            printf("    Loop %d: set pipe capacity to %d bytes\n", loop, pcap);
    
            for (p = 0; p < npipes; p++) {
                s = fcntl(pfd[p][0], F_SETPIPE_SZ, pcap);
                if (s == -1) {
                    fprintf(stderr, "        Loop %d, pipe %d: F_SETPIPE_SZ "
                            "failed: ", loop, p);
                    perror("fcntl");
                    exit(EXIT_FAILURE);
                }
    
                if (p == 0) {
                    printf("        F_SETPIPE_SZ returned %d\n", s);
                    rcap = s;
                } else {
                    if (s != rcap) {
                        fprintf(stderr, "        Loop %d, pipe %d: F_SETPIPE_SZ "
                                "unexpected return: %d\n", loop, p, s);
                        exit(EXIT_FAILURE);
                    }
                }
    
                stime = (j + 1 < argc) ? atoi(argv[j + 1]) : 0;
                if (stime > 0) {
                    printf("        Sleeping %d seconds\n", stime);
                    sleep(stime);
                }
            }
        }
    
        exit(EXIT_SUCCESS);
    }
    
    8x---8x---8x---8x---8x---8x---8x---8x---8x---8x---8x---8x---8x---8x---
    
    Patch history:
    
    v2
       * Switch order of test in 'if' statement to avoid function call
          (to capability()) in normal path. [This is a fix to a preexisting
          wart in the code. Thanks to Willy Tarreau]
        * Perform (size > pipe_max_size) check before calling
          account_pipe_buffers().  [Thanks to Vegard Nossum]
          Quoting Vegard:
    
            The potential problem happens if the user passes a very large number
            which will overflow pipe->user->pipe_bufs.
    
            On 32-bit, sizeof(int) == sizeof(long), so if they pass arg = INT_MAX
            then round_pipe_size() returns INT_MAX. Although it's true that the
            accounting is done in terms of pages and not bytes, so you'd need on
            the order of (1 << 13) = 8192 processes hitting the limit at the same
            time in order to make it overflow, which seems a bit unlikely.
    
            (See https://lkml.org/lkml/2016/8/12/215 for another discussion on the
            limit checking)
    
    Link: http://lkml.kernel.org/r/1e464945-536b-2420-798b-e77b9c7e8593@gmail.com
    Signed-off-by: Michael Kerrisk <mtk.manpages@gmail.com>
    Reviewed-by: Vegard Nossum <vegard.nossum@oracle.com>
    Cc: Willy Tarreau <w@1wt.eu>
    Cc: <socketpair@gmail.com>
    Cc: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Cc: Jens Axboe <axboe@fb.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit f491bd71118beba608d39ac2d5f1530e1160cd2e
Author: Michael Kerrisk (man-pages) <mtk.manpages@gmail.com>
Date:   Tue Oct 11 13:53:22 2016 -0700

    pipe: relocate round_pipe_size() above pipe_set_size()
    
    Patch series "pipe: fix limit handling", v2.
    
    When changing a pipe's capacity with fcntl(F_SETPIPE_SZ), various limits
    defined by /proc/sys/fs/pipe-* files are checked to see if unprivileged
    users are exceeding limits on memory consumption.
    
    While documenting and testing the operation of these limits I noticed
    that, as currently implemented, these checks have a number of problems:
    
    (1) When increasing the pipe capacity, the checks against the limits
        in /proc/sys/fs/pipe-user-pages-{soft,hard} are made against
        existing consumption, and exclude the memory required for the
        increased pipe capacity. The new increase in pipe capacity can then
        push the total memory used by the user for pipes (possibly far) over
        a limit. This can also trigger the problem described next.
    
    (2) The limit checks are performed even when the new pipe capacity
        is less than the existing pipe capacity. This can lead to problems
        if a user sets a large pipe capacity, and then the limits are
        lowered, with the result that the user will no longer be able to
        decrease the pipe capacity.
    
    (3) As currently implemented, accounting and checking against the
        limits is done as follows:
    
        (a) Test whether the user has exceeded the limit.
        (b) Make new pipe buffer allocation.
        (c) Account new allocation against the limits.
    
        This is racey. Multiple processes may pass point (a) simultaneously,
        and then allocate pipe buffers that are accounted for only in step
        (c).  The race means that the user's pipe buffer allocation could be
        pushed over the limit (by an arbitrary amount, depending on how
        unlucky we were in the race). [Thanks to Vegard Nossum for spotting
        this point, which I had missed.]
    
    This patch series addresses these three problems.
    
    This patch (of 8):
    
    This is a minor preparatory patch.  After subsequent patches,
    round_pipe_size() will be called from pipe_set_size(), so place
    round_pipe_size() above pipe_set_size().
    
    Link: http://lkml.kernel.org/r/91a91fdb-a959-ba7f-b551-b62477cc98a1@gmail.com
    Signed-off-by: Michael Kerrisk <mtk.manpages@gmail.com>
    Reviewed-by: Vegard Nossum <vegard.nossum@oracle.com>
    Cc: Willy Tarreau <w@1wt.eu>
    Cc: <socketpair@gmail.com>
    Cc: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Cc: Jens Axboe <axboe@fb.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit be5c571b2ff3a164d2e14ccc100cb5b2b3d3fb7c
Author: Paulo Zanoni <paulo.r.zanoni@intel.com>
Date:   Thu Sep 29 16:36:48 2016 -0300

    drm/i915/gen9: only add the planes actually affected by ddb changes
    
    We were previously adding all the planes owned by the CRTC even when
    the ddb partitioning didn't change for them. As a consequence, a lot
    of functions were being called when we were just moving the cursor
    around the screen, such as skylake_update_primary_plane().
    
    This was causing flickering on the primary plane when moving the
    cursor. I'm not 100% sure which operation caused the flickering, but
    we were writing to a lot of registers, so it could be any of these
    writes. With this patch, just moving the mouse won't add the primary
    plane to the commit since it won't trigger a change in DDB
    partitioning.
    
    v2: Use skl_ddb_entry_equal() (Lyude).
    v3: Change Reported-and-bisected-by: to Reported-by: for checkpatch
    
    Fixes: 05a76d3d6ad1 ("drm/i915/skl: Ensure pipes with changed wms get added to the state")
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=97888
    Cc: Mike Lothian <mike@fireburn.co.uk>
    Cc: stable@vger.kernel.org
    Reported-by: Mike Lothian <mike@fireburn.co.uk>
    Signed-off-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Signed-off-by: Lyude <cpaul@redhat.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1475177808-29955-1-git-send-email-paulo.r.zanoni@intel.com
    (cherry picked from commit 7f60e200e254cd53ad1bd74a56bdd23e813ac4b7)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>

commit a3fd4c67af3d8a81d241b3d51b3525f36f1d68bb
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Sep 26 11:30:46 2016 +0300

    drm/i915: Allow PCH DPLL sharing regardless of DPLL_SDVO_HIGH_SPEED
    
    DPLL_SDVO_HIGH_SPEED must be set for SDVO/HDMI/DP, but nowhere is it
    forbidden to set it for LVDS/CRT as well. So let's also set it on
    CRT to make it possible to share the DPLL between HDMI and CRT.
    
    What that bit apparently does is enable the x5 clock to the port,
    which then pumps out the bits on both edges of the clock. The DAC
    doesn't need that clock since it's not pumping out bits, but I don't
    think it hurts to have the DPLL output that clock anyway.
    
    This is fairly important on IVB since it has only two DPLLs with three
    pipes. So trying to drive three or more PCH ports with three pipes
    is only possible when at least one of the DPLLs gets shared between
    two of the pipes.
    
    SNB doesn't really need to do this since it has only two pipes. It could
    be done to avoid enabling the second DPLL at all in certain cases, but
    I'm not sure that's such a huge win. So let's not do it for SNB, at
    least for now. On ILK it never makes sense as the DPLLs can't be shared.
    
    v2: Just always enable the high speed clock to keep things simple (Daniel)
        Beef up the commit message a bit (Daniel)
    
    Cc: Nick Yamane <nick.diego@gmail.com>
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: stable@vger.kernel.org
    Tested-by: Nick Yamane <nick.diego@gmail.com>
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=97204
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1474878646-17711-1-git-send-email-ville.syrjala@linux.intel.com
    Reviewed-by: Ander Conselvan de Oliveira <conselvan2@gmail.com>
    (cherry picked from commit 7d7f8633a82763577727762ff3ac1df3017cb8fe)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>

commit 7f60e200e254cd53ad1bd74a56bdd23e813ac4b7
Author: Paulo Zanoni <paulo.r.zanoni@intel.com>
Date:   Thu Sep 29 16:36:48 2016 -0300

    drm/i915/gen9: only add the planes actually affected by ddb changes
    
    We were previously adding all the planes owned by the CRTC even when
    the ddb partitioning didn't change for them. As a consequence, a lot
    of functions were being called when we were just moving the cursor
    around the screen, such as skylake_update_primary_plane().
    
    This was causing flickering on the primary plane when moving the
    cursor. I'm not 100% sure which operation caused the flickering, but
    we were writing to a lot of registers, so it could be any of these
    writes. With this patch, just moving the mouse won't add the primary
    plane to the commit since it won't trigger a change in DDB
    partitioning.
    
    v2: Use skl_ddb_entry_equal() (Lyude).
    v3: Change Reported-and-bisected-by: to Reported-by: for checkpatch
    
    Fixes: 05a76d3d6ad1 ("drm/i915/skl: Ensure pipes with changed wms get added to the state")
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=97888
    Cc: Mike Lothian <mike@fireburn.co.uk>
    Cc: stable@vger.kernel.org
    Reported-by: Mike Lothian <mike@fireburn.co.uk>
    Signed-off-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Signed-off-by: Lyude <cpaul@redhat.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1475177808-29955-1-git-send-email-paulo.r.zanoni@intel.com

commit 7d7f8633a82763577727762ff3ac1df3017cb8fe
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Sep 26 11:30:46 2016 +0300

    drm/i915: Allow PCH DPLL sharing regardless of DPLL_SDVO_HIGH_SPEED
    
    DPLL_SDVO_HIGH_SPEED must be set for SDVO/HDMI/DP, but nowhere is it
    forbidden to set it for LVDS/CRT as well. So let's also set it on
    CRT to make it possible to share the DPLL between HDMI and CRT.
    
    What that bit apparently does is enable the x5 clock to the port,
    which then pumps out the bits on both edges of the clock. The DAC
    doesn't need that clock since it's not pumping out bits, but I don't
    think it hurts to have the DPLL output that clock anyway.
    
    This is fairly important on IVB since it has only two DPLLs with three
    pipes. So trying to drive three or more PCH ports with three pipes
    is only possible when at least one of the DPLLs gets shared between
    two of the pipes.
    
    SNB doesn't really need to do this since it has only two pipes. It could
    be done to avoid enabling the second DPLL at all in certain cases, but
    I'm not sure that's such a huge win. So let's not do it for SNB, at
    least for now. On ILK it never makes sense as the DPLLs can't be shared.
    
    v2: Just always enable the high speed clock to keep things simple (Daniel)
        Beef up the commit message a bit (Daniel)
    
    Cc: Nick Yamane <nick.diego@gmail.com>
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: stable@vger.kernel.org
    Tested-by: Nick Yamane <nick.diego@gmail.com>
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=97204
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1474878646-17711-1-git-send-email-ville.syrjala@linux.intel.com
    Reviewed-by: Ander Conselvan de Oliveira <conselvan2@gmail.com>

commit 3c97f5de1f282492335a6aec1f94b77f7f899b8c
Author: Rajkumar Manoharan <rmanohar@qti.qualcomm.com>
Date:   Fri Sep 2 19:46:09 2016 +0300

    ath10k: implement NAPI support
    
    Add NAPI support for rx and tx completion. NAPI poll is scheduled
    from interrupt handler. The design is as below
    
     - on interrupt
         - schedule napi and mask interrupts
     - on poll
       - process all pipes (no actual Tx/Rx)
       - process Rx within budget
       - if quota exceeds budget reschedule napi poll by returning budget
       - process Tx completions and update budget if necessary
       - process Tx fetch indications (pull-push)
       - push any other pending Tx (if possible)
       - before resched or napi completion replenish htt rx ring buffer
       - if work done < budget, complete napi poll and unmask interrupts
    
    This change also get rid of two tasklets (intr_tq and txrx_compl_task).
    
    Measured peak throughput with NAPI on IPQ4019 platform in controlled
    environment. No noticeable reduction in throughput is seen and also
    observed improvements in CPU usage. Approx. 15% CPU usage got reduced
    in UDP uplink case.
    
    DL: AP DUT Tx
    UL: AP DUT Rx
    
    IPQ4019 (avg. cpu usage %)
    
    ========
                    TOT              +NAPI
                  ===========      =============
    TCP DL       644 Mbps (42%)    645 Mbps (36%)
    TCP UL       673 Mbps (30%)    675 Mbps (26%)
    UDP DL       682 Mbps (49%)    680 Mbps (49%)
    UDP UL       720 Mbps (28%)    717 Mbps (11%)
    
    Signed-off-by: Rajkumar Manoharan <rmanohar@qti.qualcomm.com>
    Signed-off-by: Kalle Valo <kvalo@qca.qualcomm.com>

commit ccebc23b57c313229526dc76383ce82f5e0b9001
Author: Lyude <cpaul@redhat.com>
Date:   Mon Aug 29 12:31:27 2016 -0400

    drm/i915/skl: Don't try to update plane watermarks if they haven't changed
    
    i915 sometimes needs to disable planes in the middle of an atomic
    commit, and then reenable them later in the same commit. Because of
    this, we can't make the assumption that the state of the plane actually
    changed. Since the state of the plane hasn't actually changed, neither
    have it's watermarks. And if the watermarks hasn't changed then we
    haven't populated skl_results with anything, which means we'll end up
    zeroing out a plane's watermarks in the middle of the atomic commit
    without restoring them later.
    
    Simple reproduction recipe:
     - Get a SKL laptop, launch any kind of X session
     - Get two extra monitors
     - Keep hotplugging both displays (so that the display configuration
       jumps from 1 active pipe to 3 active pipes and back)
     - Eventually underrun
    
    Changes since v1:
     - Fix incorrect use of "it's"
    Changes since v2:
     - Add reproduction recipe
    
    Signed-off-by: Lyude <cpaul@redhat.com>
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Fixes: 62e0fb880123 ("drm/i915/skl: Update plane watermarks atomically during plane updates")
    Signed-off-by: Lyude <cpaul@redhat.com>
    Testcase: kms_plane
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1472488288-27280-1-git-send-email-cpaul@redhat.com
    Cc: drm-intel-fixes@lists.freedesktop.org

commit 6720ce18d45987b1a57edb0e36123d1bc9bc85a2
Author: Jani Nikula <jani.nikula@intel.com>
Date:   Thu Aug 25 15:04:11 2016 +0300

    drm/i915: remove leftover for_each_intel_crtc_masked
    
    The last user of for_each_intel_crtc_masked macro was removed in
    
    commit 0a9ab303b87a94115e361a7f3a15d9f481bc453b
    Author: Ander Conselvan de Oliveira <ander.conselvan.de.oliveira@intel.com>
    Date:   Tue Apr 21 17:13:04 2015 +0300
    
        drm/i915: Remove all *_pipes flags from modeset
    
    Get rid of the unused macro.
    
    Cc: Ander Conselvan de Oliveira <ander.conselvan.de.oliveira@intel.com>
    Reviewed-by: Ander Conselvan de Oliveira <conselvan2@gmail.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1472126651-13825-1-git-send-email-jani.nikula@intel.com

commit 315486c665333a49be20643c9137d9641f32e2b7
Author: Andrea Merello <andrea.merello@gmail.com>
Date:   Thu Aug 25 11:04:34 2016 +0200

    drm: simple_kms_helper: add support for bridges
    
    Introduce drm_simple_display_pipe_attach_bridge() and
    drm_simple_display_pipe_detach_bridge() in order to make it possible to use
    drm encoders with the simple display pipes managed by simple_kms_helpers
    
    Suggested-by: Daniel Vetter <daniel@ffwll.ch>
    Signed-off-by: Andrea Merello <andrea.merello@gmail.com>
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: Noralf Trønnes <noralf@tronnes.org>
    Cc: Daniel Vetter <daniel@ffwll.ch>
    Cc: David Airlie <airlied@linux.ie>
    Signed-off-by: Archit Taneja <architt@codeaurora.org>
    Link: http://patchwork.freedesktop.org/patch/msgid/1472115874-6219-3-git-send-email-andrea.merello@gmail.com

commit 25d0d91af77089ddf378568fd858b22612c52aff
Merge: 908e373f1c81 add1fa751012
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Aug 28 14:31:36 2016 -0700

    Merge tag 'drm-fixes-for-4.8-rc4' of git://people.freedesktop.org/~airlied/linux
    
    Pull drm fixes from Dave Airlie:
     "A bunch of fixes covering i915, amdgpu, one tegra and some core DRM
      ones.  Nothing too strange at this point"
    
    * tag 'drm-fixes-for-4.8-rc4' of git://people.freedesktop.org/~airlied/linux: (21 commits)
      drm/atomic: Don't potentially reset color_mgmt_changed on successive property updates.
      drm: Protect fb_defio in drivers with CONFIG_KMS_FBDEV_EMULATION
      drm/amdgpu: skip TV/CV in display parsing
      drm/amdgpu: avoid a possible array overflow
      drm/amdgpu: fix lru size grouping v2
      drm/tegra: dsi: Enhance runtime power management
      drm/i915: Fix botched merge that downgrades CSR versions.
      drm/i915/skl: Ensure pipes with changed wms get added to the state
      drm/i915/gen9: Only copy WM results for changed pipes to skl_hw
      drm/i915/skl: Add support for the SAGV, fix underrun hangs
      drm/i915/gen6+: Interpret mailbox error flags
      drm/i915: Reattach comment, complete type specification
      drm/i915: Unconditionally flush any chipset buffers before execbuf
      drm/i915/gen9: Drop invalid WARN() during data rate calculation
      drm/i915/gen9: Initialize intel_state->active_crtcs during WM sanitization (v2)
      drm: Reject page_flip for !DRIVER_MODESET
      drm/amdgpu: fix timeout value check in amd_sched_job_recovery
      drm/amdgpu: fix sdma_v2_4_ring_test_ib
      drm/amdgpu: fix amdgpu_move_blit on 32bit systems
      drm/radeon: fix radeon_move_blit on 32bit systems
      ...

commit 742d555a529c3dbbf7d326620082f7cbb510ac7e
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Tue Jun 7 21:26:55 2016 -0400

    fix d_walk()/non-delayed __d_free() race
    
    commit 3d56c25e3bb0726a5c5e16fc2d9e38f8ed763085 upstream.
    
    Ascend-to-parent logics in d_walk() depends on all encountered child
    dentries not getting freed without an RCU delay.  Unfortunately, in
    quite a few cases it is not true, with hard-to-hit oopsable race as
    the result.
    
    Fortunately, the fix is simiple; right now the rule is "if it ever
    been hashed, freeing must be delayed" and changing it to "if it
    ever had a parent, freeing must be delayed" closes that hole and
    covers all cases the old rule used to cover.  Moreover, pipes and
    sockets remain _not_ covered, so we do not introduce RCU delay in
    the cases which are the reason for having that delay conditional
    in the first place.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    [wt: add the required change to __d_materialise_dentry() for kernels
      older than v3.17]
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 969af80f770a86e65bf8be1f72b218b5f8556b56
Merge: 2b721f20770c 177d91aaea4b
Author: Dave Airlie <airlied@redhat.com>
Date:   Fri Aug 26 05:18:40 2016 +1000

    Merge tag 'drm-intel-fixes-2016-08-25' of git://anongit.freedesktop.org/drm-intel into drm-fixes
    
    i915 fixes queue.
    
    * tag 'drm-intel-fixes-2016-08-25' of git://anongit.freedesktop.org/drm-intel:
      drm/i915: Fix botched merge that downgrades CSR versions.
      drm/i915/skl: Ensure pipes with changed wms get added to the state
      drm/i915/gen9: Only copy WM results for changed pipes to skl_hw
      drm/i915/skl: Add support for the SAGV, fix underrun hangs
      drm/i915/gen6+: Interpret mailbox error flags
      drm/i915: Reattach comment, complete type specification
      drm/i915: Unconditionally flush any chipset buffers before execbuf
      drm/i915/gen9: Drop invalid WARN() during data rate calculation
      drm/i915/gen9: Initialize intel_state->active_crtcs during WM sanitization (v2)

commit 27082493e9c6371b05370a619ab9d2877c5f4726
Author: Lyude <cpaul@redhat.com>
Date:   Wed Aug 24 07:48:10 2016 +0200

    drm/i915/skl: Update DDB values atomically with wms/plane attrs
    
    Now that we can hook into update_crtcs and control the order in which we
    update CRTCs at each modeset, we can finish the final step of fixing
    Skylake's watermark handling by performing DDB updates at the same time
    as plane updates and watermark updates.
    
    The first major change in this patch is skl_update_crtcs(), which
    handles ensuring that we order each CRTC update in our atomic commits
    properly so that they honor the DDB flush order.
    
    The second major change in this patch is the order in which we flush the
    pipes. While the previous order may have worked, it can't be used in
    this approach since it no longer will do the right thing. For example,
    using the old ddb flush order:
    
    We have pipes A, B, and C enabled, and we're disabling C. Initial ddb
    allocation looks like this:
    
    |   A   |   B   |xxxxxxx|
    
    Since we're performing the ddb updates after performing any CRTC
    disablements in intel_atomic_commit_tail(), the space to the right of
    pipe B is unallocated.
    
    1. Flush pipes with new allocation contained into old space. None
       apply, so we skip this
    2. Flush pipes having their allocation reduced, but overlapping with a
       previous allocation. None apply, so we also skip this
    3. Flush pipes that got more space allocated. This applies to A and B,
       giving us the following update order: A, B
    
    This is wrong, since updating pipe A first will cause it to overlap with
    B and potentially burst into flames. Our new order (see the code
    comments for details) would update the pipes in the proper order: B, A.
    
    As well, we calculate the order for each DDB update during the check
    phase, and reference it later in the commit phase when we hit
    skl_update_crtcs().
    
    This long overdue patch fixes the rest of the underruns on Skylake.
    
    Changes since v1:
     - Add skl_ddb_entry_write() for cursor into skl_write_cursor_wm()
    Changes since v2:
     - Use the method for updating CRTCs that Ville suggested
     - In skl_update_wm(), only copy the watermarks for the crtc that was
       passed to us
    Changes since v3:
     - Small comment fix in skl_ddb_allocation_overlaps()
    Changes since v4:
     - Remove the second loop in intel_update_crtcs() and use Ville's
       suggestion for updating the ddb allocations in the right order
     - Get rid of the second loop and just use the ddb state as it updates
       to determine what order to update everything in (thanks for the
       suggestion Ville)
     - Simplify skl_ddb_allocation_overlaps()
     - Split actual overlap checking into it's own helper
    
    Fixes: 0e8fb7ba7ca5 ("drm/i915/skl: Flush the WM configuration")
    Fixes: 8211bd5bdf5e ("drm/i915/skl: Program the DDB allocation")
    [omitting CC for stable, since this patch will need to be changed for
    such backports first]
    
    Testcase: kms_cursor_legacy
    Testcase: plane-all-modeset-transition
    Signed-off-by: Lyude <cpaul@redhat.com>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Daniel Vetter <daniel.vetter@intel.com>
    Cc: Radhakrishna Sripada <radhakrishna.sripada@intel.com>
    Cc: Hans de Goede <hdegoede@redhat.com>
    Cc: Matt Roper <matthew.d.roper@intel.com>
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1471961565-28540-2-git-send-email-cpaul@redhat.com

commit 62e0fb880123c98793e5c3ba8355501b0305e92e
Author: Lyude <cpaul@redhat.com>
Date:   Mon Aug 22 12:50:08 2016 -0400

    drm/i915/skl: Update plane watermarks atomically during plane updates
    
    Thanks to Ville for suggesting this as a potential solution to pipe
    underruns on Skylake.
    
    On Skylake all of the registers for configuring planes, including the
    registers for configuring their watermarks, are double buffered. New
    values written to them won't take effect until said registers are
    "armed", which is done by writing to the PLANE_SURF (or in the case of
    cursor planes, the CURBASE register) register.
    
    With this in mind, up until now we've been updating watermarks on skl
    like this:
    
      non-modeset {
       - calculate (during atomic check phase)
       - finish_atomic_commit:
         - intel_pre_plane_update:
            - intel_update_watermarks()
         - {vblank happens; new watermarks + old plane values => underrun }
         - drm_atomic_helper_commit_planes_on_crtc:
            - start vblank evasion
            - write new plane registers
            - end vblank evasion
      }
    
      or
    
      modeset {
       - calculate (during atomic check phase)
       - finish_atomic_commit:
         - crtc_enable:
            - intel_update_watermarks()
         - {vblank happens; new watermarks + old plane values => underrun }
         - drm_atomic_helper_commit_planes_on_crtc:
            - start vblank evasion
            - write new plane registers
            - end vblank evasion
      }
    
    Now we update watermarks atomically like this:
    
      non-modeset {
       - calculate (during atomic check phase)
       - finish_atomic_commit:
         - intel_pre_plane_update:
            - intel_update_watermarks() (wm values aren't written yet)
         - drm_atomic_helper_commit_planes_on_crtc:
            - start vblank evasion
            - write new plane registers
            - write new wm values
            - end vblank evasion
      }
    
      modeset {
       - calculate (during atomic check phase)
       - finish_atomic_commit:
         - crtc_enable:
            - intel_update_watermarks() (actual wm values aren't written
              yet)
         - drm_atomic_helper_commit_planes_on_crtc:
            - start vblank evasion
            - write new plane registers
            - write new wm values
            - end vblank evasion
      }
    
    So this patch moves all of the watermark writes into the right place;
    inside of the vblank evasion where we update all of the registers for
    each plane. While this patch doesn't fix everything, it does allow us to
    update the watermark values in the way the hardware expects us to.
    
    Changes since original patch series:
     - Remove mutex_lock/mutex_unlock since they don't do anything and we're
       not touching global state
     - Move skl_write_cursor_wm/skl_write_plane_wm functions into
       intel_pm.c, make externally visible
     - Add skl_write_plane_wm calls to skl_update_plane
     - Fix conditional for for loop in skl_write_plane_wm (level < max_level
       should be level <= max_level)
     - Make diagram in commit more accurate to what's actually happening
     - Add Fixes:
    
    Changes since v1:
     - Use IS_GEN9() instead of IS_SKYLAKE() since these fixes apply to more
       then just Skylake
     - Update description to make it clear this patch doesn't fix everything
     - Check if pipes were actually changed before writing watermarks
    
    Changes since v2:
     - Write PIPE_WM_LINETIME during vblank evasion
    
    Changes since v3:
     - Rebase against new SAGV patch changes
    
    Changes since v4:
     - Add a parameter to choose what skl_wm_values struct to use when
       writing new plane watermarks
    
    Changes since v5:
     - Remove cursor ddb entry write in skl_write_cursor_wm(), defer until
       patch 6
     - Write WM_LINETIME in intel_begin_crtc_commit()
    
    Changes since v6:
     - Remove redundant dirty_pipes check in skl_write_plane_wm (we check
       this in all places where we call this function, and it was supposed
       to have been removed earlier anyway)
     - In i9xx_update_cursor(), use dev_priv->info.gen >= 9 instead of
       IS_GEN9(dev_priv). We do this everywhere else and I'd imagine this
       needs to be done for gen10 as well
    
    Changes since v7:
     - Fix rebase fail (unused variable obj)
     - Make struct skl_wm_values *wm const
     - Fix indenting
     - Use INTEL_GEN() instead of dev_priv->info.gen
    
    Changes since v8:
     - Don't forget calls to skl_write_plane_wm() when disabling planes
     - Use INTEL_GEN(), not INTEL_INFO()->gen in intel_begin_crtc_commit()
    
    Fixes: 2d41c0b59afc ("drm/i915/skl: SKL Watermark Computation")
    Signed-off-by: Lyude <cpaul@redhat.com>
    Reviewed-by: Matt Roper <matthew.d.roper@intel.com>
    Cc: stable@vger.kernel.org
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Daniel Vetter <daniel.vetter@intel.com>
    Cc: Radhakrishna Sripada <radhakrishna.sripada@intel.com>
    Cc: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1471884608-10671-1-git-send-email-cpaul@redhat.com
    Link: http://patchwork.freedesktop.org/patch/msgid/1471884608-10671-1-git-send-email-cpaul@redhat.com

commit 5b12e395b079e5bf495d54f916ed586ab403d182
Author: Lyude <cpaul@redhat.com>
Date:   Tue Jun 14 11:04:09 2016 -0400

    drm/i915/ilk: Don't disable SSC source if it's in use
    
    commit 476490a945e1f0f6bd58e303058d2d8ca93a974c upstream.
    
    Thanks to Ville Syrjälä for pointing me towards the cause of this issue.
    
    Unfortunately one of the sideaffects of having the refclk for a DPLL set
    to SSC is that as long as it's set to SSC, the GPU will prevent us from
    powering down any of the pipes or transcoders using it. A couple of
    BIOSes enable SSC in both PCH_DREF_CONTROL and in the DPLL
    configurations. This causes issues on the first modeset, since we don't
    expect SSC to be left on and as a result, can't successfully power down
    the pipes or the transcoders using it. Here's an example from this Dell
    OptiPlex 990:
    
    [drm:intel_modeset_init] SSC enabled by BIOS, overriding VBT which says disabled
    [drm:intel_modeset_init] 2 display pipes available.
    [drm:intel_update_cdclk] Current CD clock rate: 400000 kHz
    [drm:intel_update_max_cdclk] Max CD clock rate: 400000 kHz
    [drm:intel_update_max_cdclk] Max dotclock rate: 360000 kHz
    vgaarb: device changed decodes: PCI:0000:00:02.0,olddecodes=io+mem,decodes=io+mem:owns=io+mem
    [drm:intel_crt_reset] crt adpa set to 0xf40000
    [drm:intel_dp_init_connector] Adding DP connector on port C
    [drm:intel_dp_aux_init] registering DPDDC-C bus for card0-DP-1
    [drm:ironlake_init_pch_refclk] has_panel 0 has_lvds 0 has_ck505 0
    [drm:ironlake_init_pch_refclk] Disabling SSC entirely
    … later we try committing the first modeset …
    [drm:intel_dump_pipe_config] [CRTC:26][modeset] config ffff88041b02e800 for pipe A
    [drm:intel_dump_pipe_config] cpu_transcoder: A
    …
    [drm:intel_dump_pipe_config] dpll_hw_state: dpll: 0xc4016001, dpll_md: 0x0, fp0: 0x20e08, fp1: 0x30d07
    [drm:intel_dump_pipe_config] planes on this crtc
    [drm:intel_dump_pipe_config] STANDARD PLANE:23 plane: 0.0 idx: 0 enabled
    [drm:intel_dump_pipe_config]     FB:42, fb = 800x600 format = 0x34325258
    [drm:intel_dump_pipe_config]     scaler:0 src (0, 0) 800x600 dst (0, 0) 800x600
    [drm:intel_dump_pipe_config] CURSOR PLANE:25 plane: 0.1 idx: 1 disabled, scaler_id = 0
    [drm:intel_dump_pipe_config] STANDARD PLANE:27 plane: 0.1 idx: 2 disabled, scaler_id = 0
    [drm:intel_get_shared_dpll] CRTC:26 allocated PCH DPLL A
    [drm:intel_get_shared_dpll] using PCH DPLL A for pipe A
    [drm:ilk_audio_codec_disable] Disable audio codec on port C, pipe A
    [drm:intel_disable_pipe] disabling pipe A
    ------------[ cut here ]------------
    WARNING: CPU: 1 PID: 130 at drivers/gpu/drm/i915/intel_display.c:1146 intel_disable_pipe+0x297/0x2d0 [i915]
    pipe_off wait timed out
    …
    ---[ end trace 94fc8aa03ae139e8 ]---
    [drm:intel_dp_link_down]
    [drm:ironlake_crtc_disable [i915]] *ERROR* failed to disable transcoder A
    
    Later modesets succeed since they reset the DPLL's configuration anyway,
    but this is enough to get stuck with a big fat warning in dmesg.
    
    A better solution would be to add refcounts for the SSC source, but for
    now leaving the source clock on should suffice.
    
    Changes since v4:
     - Fix calculation of final for systems with LVDS panels (fixes BUG() on
       CI test suite)
    Changes since v3:
     - Move temp variable into loop
     - Move checks for using_ssc_source to after we've figured out has_ck505
     - Add using_ssc_source to debug output
    Changes since v2:
     - Fix debug output for when we disable the CPU source
    Changes since v1:
     - Leave the SSC source clock on instead of just shutting it off on all
       of the DPLL configurations.
    
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Lyude <cpaul@redhat.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: http://patchwork.freedesktop.org/patch/msgid/1465916649-10228-1-git-send-email-cpaul@redhat.com
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit cb3a638b68024004b4ee6b3d74d1d0057577781b
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Tue Jun 7 21:26:55 2016 -0400

    fix d_walk()/non-delayed __d_free() race
    
    commit 3d56c25e3bb0726a5c5e16fc2d9e38f8ed763085 upstream.
    
    Ascend-to-parent logics in d_walk() depends on all encountered child
    dentries not getting freed without an RCU delay.  Unfortunately, in
    quite a few cases it is not true, with hard-to-hit oopsable race as
    the result.
    
    Fortunately, the fix is simiple; right now the rule is "if it ever
    been hashed, freeing must be delayed" and changing it to "if it
    ever had a parent, freeing must be delayed" closes that hole and
    covers all cases the old rule used to cover.  Moreover, pipes and
    sockets remain _not_ covered, so we do not introduce RCU delay in
    the cases which are the reason for having that delay conditional
    in the first place.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    [bwh: Backported to 3.16:
     - Adjust context
     - Also set the flag in __d_materialise_dentry())]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 37f4f9e677576c8f8add9f43844c6c468caf8252
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Tue Jun 7 21:26:55 2016 -0400

    fix d_walk()/non-delayed __d_free() race
    
    commit 3d56c25e3bb0726a5c5e16fc2d9e38f8ed763085 upstream.
    
    Ascend-to-parent logics in d_walk() depends on all encountered child
    dentries not getting freed without an RCU delay.  Unfortunately, in
    quite a few cases it is not true, with hard-to-hit oopsable race as
    the result.
    
    Fortunately, the fix is simiple; right now the rule is "if it ever
    been hashed, freeing must be delayed" and changing it to "if it
    ever had a parent, freeing must be delayed" closes that hole and
    covers all cases the old rule used to cover.  Moreover, pipes and
    sockets remain _not_ covered, so we do not introduce RCU delay in
    the cases which are the reason for having that delay conditional
    in the first place.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    [bwh: Backported to 3.2:
     - Adjust context
     - Also set the flag in __d_materialise_dentry())]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 762c60ab0257d25eea8db3e3fec85ed53b5330fe
Author: Lyude <cpaul@redhat.com>
Date:   Wed Aug 17 15:55:57 2016 -0400

    drm/i915/skl: Ensure pipes with changed wms get added to the state
    
    If we're enabling a pipe, we'll need to modify the watermarks on all
    active planes. Since those planes won't be added to the state on
    their own, we need to add them ourselves.
    
    Signed-off-by: Lyude <cpaul@redhat.com>
    Reviewed-by: Matt Roper <matthew.d.roper@intel.com>
    Cc: stable@vger.kernel.org
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Daniel Vetter <daniel.vetter@intel.com>
    Cc: Radhakrishna Sripada <radhakrishna.sripada@intel.com>
    Cc: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1471463761-26796-6-git-send-email-cpaul@redhat.com
    (cherry picked from commit 05a76d3d6ad1ee9f9814f88949cc9305fc165460)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>

commit 9909113cc48a7ce6e772573e3cc82a3f03ffa8ef
Author: Matt Roper <matthew.d.roper@intel.com>
Date:   Wed Aug 17 15:55:55 2016 -0400

    drm/i915/gen9: Only copy WM results for changed pipes to skl_hw
    
    When we write watermark values to the hardware, those values are stored
    in dev_priv->wm.skl_hw.  However with recent watermark changes, the
    results structure we're copying from only contains valid watermark and
    DDB values for the pipes that are actually changing; the values for
    other pipes remain 0.  Thus a blind copy of the entire skl_wm_values
    structure will clobber the values for unchanged pipes...we need to be
    more selective and only copy over the values for the changing pipes.
    
    This mistake was hidden until recently due to another bug that caused us
    to erroneously re-calculate watermarks for all active pipes rather than
    changing pipes.  Only when that bug was fixed was the impact of this bug
    discovered (e.g., modesets failing with "Requested display configuration
    exceeds system watermark limitations" messages and leaving watermarks
    non-functional, even ones initiated by intel_fbdev_restore_mode).
    
    Changes since v1:
     - Add a function for copying a pipe's wm values
       (skl_copy_wm_for_pipe()) so we can reuse this later
    
    Fixes: 734fa01f3a17 ("drm/i915/gen9: Calculate watermarks during atomic 'check' (v2)")
    Fixes: 9b6130227495 ("drm/i915/gen9: Re-allocate DDB only for changed pipes")
    Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
    Signed-off-by: Lyude <cpaul@redhat.com>
    Reviewed-by: Matt Roper <matthew.d.roper@intel.com>
    Cc: stable@vger.kernel.org
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Daniel Vetter <daniel.vetter@intel.com>
    Cc: Radhakrishna Sripada <radhakrishna.sripada@intel.com>
    Cc: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1471463761-26796-4-git-send-email-cpaul@redhat.com
    (cherry picked from commit 2722efb90b3420dee54b4cb3cdc7917efacc2dce)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>

commit f403372658fc7b652a77885a4141e58e57d9c75a
Author: Lyude <cpaul@redhat.com>
Date:   Wed Aug 17 15:55:54 2016 -0400

    drm/i915/skl: Add support for the SAGV, fix underrun hangs
    
    Since the watermark calculations for Skylake are still broken, we're apt
    to hitting underruns very easily under multi-monitor configurations.
    While it would be lovely if this was fixed, it's not. Another problem
    that's been coming from this however, is the mysterious issue of
    underruns causing full system hangs. An easy way to reproduce this with
    a skylake system:
    
    - Get a laptop with a skylake GPU, and hook up two external monitors to
      it
    - Move the cursor from the built-in LCD to one of the external displays
      as quickly as you can
    - You'll get a few pipe underruns, and eventually the entire system will
      just freeze.
    
    After doing a lot of investigation and reading through the bspec, I
    found the existence of the SAGV, which is responsible for adjusting the
    system agent voltage and clock frequencies depending on how much power
    we need. According to the bspec:
    
    "The display engine access to system memory is blocked during the
     adjustment time. SAGV defaults to enabled. Software must use the
     GT-driver pcode mailbox to disable SAGV when the display engine is not
     able to tolerate the blocking time."
    
    The rest of the bspec goes on to explain that software can simply leave
    the SAGV enabled, and disable it when we use interlaced pipes/have more
    then one pipe active.
    
    Sure enough, with this patchset the system hangs resulting from pipe
    underruns on Skylake have completely vanished on my T460s. Additionally,
    the bspec mentions turning off the SAGV with more then one pipe enabled
    as a workaround for display underruns. While this patch doesn't entirely
    fix that, it looks like it does improve the situation a little bit so
    it's likely this is going to be required to make watermarks on Skylake
    fully functional.
    
    This will still need additional work in the future: we shouldn't be
    enabling the SAGV if any of the currently enabled planes can't enable WM
    levels that introduce latencies >= 30 µs.
    
    Changes since v11:
     - Add skl_can_enable_sagv()
     - Make sure we don't enable SAGV when not all planes can enable
       watermarks >= the SAGV engine block time. I was originally going to
       save this for later, but I recently managed to run into a machine
       that was having problems with a single pipe configuration + SAGV.
     - Make comparisons to I915_SKL_SAGV_NOT_CONTROLLED explicit
     - Change I915_SAGV_DYNAMIC_FREQ to I915_SAGV_ENABLE
     - Move printks outside of mutexes
     - Don't print error messages twice
    Changes since v10:
     - Apparently sandybridge_pcode_read actually writes values and reads
       them back, despite it's misleading function name. This means we've
       been doing this mostly wrong and have been writing garbage to the
       SAGV control. Because of this, we no longer attempt to read the SAGV
       status during initialization (since there are no helpers for this).
     - mlankhorst noticed that this patch was breaking on some very early
       pre-release Skylake machines, which apparently don't allow you to
       disable the SAGV. To prevent machines from failing tests due to SAGV
       errors, if the first time we try to control the SAGV results in the
       mailbox indicating an invalid command, we just disable future attempts
       to control the SAGV state by setting dev_priv->skl_sagv_status to
       I915_SKL_SAGV_NOT_CONTROLLED and make a note of it in dmesg.
     - Move mutex_unlock() a little higher in skl_enable_sagv(). This
       doesn't actually fix anything, but lets us release the lock a little
       sooner since we're finished with it.
    Changes since v9:
     - Only enable/disable sagv on Skylake
    Changes since v8:
     - Add intel_state->modeset guard to the conditional for
       skl_enable_sagv()
    Changes since v7:
     - Remove GEN9_SAGV_LOW_FREQ, replace with GEN9_SAGV_IS_ENABLED (that's
       all we use it for anyway)
     - Use GEN9_SAGV_IS_ENABLED instead of 0x1 for clarification
     - Fix a styling error that snuck past me
    Changes since v6:
     - Protect skl_enable_sagv() with intel_state->modeset conditional in
       intel_atomic_commit_tail()
    Changes since v5:
     - Don't use is_power_of_2. Makes things confusing
     - Don't use the old state to figure out whether or not to
       enable/disable the sagv, use the new one
     - Split the loop in skl_disable_sagv into it's own function
     - Move skl_sagv_enable/disable() calls into intel_atomic_commit_tail()
    Changes since v4:
     - Use is_power_of_2 against active_crtcs to check whether we have > 1
       pipe enabled
     - Fix skl_sagv_get_hw_state(): (temp & 0x1) indicates disabled, 0x0
       enabled
     - Call skl_sagv_enable/disable() from pre/post-plane updates
    Changes since v3:
     - Use time_before() to compare timeout to jiffies
    Changes since v2:
     - Really apply minor style nitpicks to patch this time
    Changes since v1:
     - Added comments about this probably being one of the requirements to
       fixing Skylake's watermark issues
     - Minor style nitpicks from Matt Roper
     - Disable these functions on Broxton, since it doesn't have an SAGV
    
    Signed-off-by: Lyude <cpaul@redhat.com>
    Cc: Matt Roper <matthew.d.roper@intel.com>
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1471463761-26796-3-git-send-email-cpaul@redhat.com
    [mlankhorst: ENOSYS -> ENXIO, whitespace fixes]
    
    (cherry picked from commit 656d1b89e5ffb83036ab0e2a24be7558f34365c7)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>

commit 05a76d3d6ad1ee9f9814f88949cc9305fc165460
Author: Lyude <cpaul@redhat.com>
Date:   Wed Aug 17 15:55:57 2016 -0400

    drm/i915/skl: Ensure pipes with changed wms get added to the state
    
    If we're enabling a pipe, we'll need to modify the watermarks on all
    active planes. Since those planes won't be added to the state on
    their own, we need to add them ourselves.
    
    Signed-off-by: Lyude <cpaul@redhat.com>
    Reviewed-by: Matt Roper <matthew.d.roper@intel.com>
    Cc: stable@vger.kernel.org
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Daniel Vetter <daniel.vetter@intel.com>
    Cc: Radhakrishna Sripada <radhakrishna.sripada@intel.com>
    Cc: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1471463761-26796-6-git-send-email-cpaul@redhat.com

commit 2722efb90b3420dee54b4cb3cdc7917efacc2dce
Author: Matt Roper <matthew.d.roper@intel.com>
Date:   Wed Aug 17 15:55:55 2016 -0400

    drm/i915/gen9: Only copy WM results for changed pipes to skl_hw
    
    When we write watermark values to the hardware, those values are stored
    in dev_priv->wm.skl_hw.  However with recent watermark changes, the
    results structure we're copying from only contains valid watermark and
    DDB values for the pipes that are actually changing; the values for
    other pipes remain 0.  Thus a blind copy of the entire skl_wm_values
    structure will clobber the values for unchanged pipes...we need to be
    more selective and only copy over the values for the changing pipes.
    
    This mistake was hidden until recently due to another bug that caused us
    to erroneously re-calculate watermarks for all active pipes rather than
    changing pipes.  Only when that bug was fixed was the impact of this bug
    discovered (e.g., modesets failing with "Requested display configuration
    exceeds system watermark limitations" messages and leaving watermarks
    non-functional, even ones initiated by intel_fbdev_restore_mode).
    
    Changes since v1:
     - Add a function for copying a pipe's wm values
       (skl_copy_wm_for_pipe()) so we can reuse this later
    
    Fixes: 734fa01f3a17 ("drm/i915/gen9: Calculate watermarks during atomic 'check' (v2)")
    Fixes: 9b6130227495 ("drm/i915/gen9: Re-allocate DDB only for changed pipes")
    Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
    Signed-off-by: Lyude <cpaul@redhat.com>
    Reviewed-by: Matt Roper <matthew.d.roper@intel.com>
    Cc: stable@vger.kernel.org
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Daniel Vetter <daniel.vetter@intel.com>
    Cc: Radhakrishna Sripada <radhakrishna.sripada@intel.com>
    Cc: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1471463761-26796-4-git-send-email-cpaul@redhat.com

commit 656d1b89e5ffb83036ab0e2a24be7558f34365c7
Author: Lyude <cpaul@redhat.com>
Date:   Wed Aug 17 15:55:54 2016 -0400

    drm/i915/skl: Add support for the SAGV, fix underrun hangs
    
    Since the watermark calculations for Skylake are still broken, we're apt
    to hitting underruns very easily under multi-monitor configurations.
    While it would be lovely if this was fixed, it's not. Another problem
    that's been coming from this however, is the mysterious issue of
    underruns causing full system hangs. An easy way to reproduce this with
    a skylake system:
    
    - Get a laptop with a skylake GPU, and hook up two external monitors to
      it
    - Move the cursor from the built-in LCD to one of the external displays
      as quickly as you can
    - You'll get a few pipe underruns, and eventually the entire system will
      just freeze.
    
    After doing a lot of investigation and reading through the bspec, I
    found the existence of the SAGV, which is responsible for adjusting the
    system agent voltage and clock frequencies depending on how much power
    we need. According to the bspec:
    
    "The display engine access to system memory is blocked during the
     adjustment time. SAGV defaults to enabled. Software must use the
     GT-driver pcode mailbox to disable SAGV when the display engine is not
     able to tolerate the blocking time."
    
    The rest of the bspec goes on to explain that software can simply leave
    the SAGV enabled, and disable it when we use interlaced pipes/have more
    then one pipe active.
    
    Sure enough, with this patchset the system hangs resulting from pipe
    underruns on Skylake have completely vanished on my T460s. Additionally,
    the bspec mentions turning off the SAGV with more then one pipe enabled
    as a workaround for display underruns. While this patch doesn't entirely
    fix that, it looks like it does improve the situation a little bit so
    it's likely this is going to be required to make watermarks on Skylake
    fully functional.
    
    This will still need additional work in the future: we shouldn't be
    enabling the SAGV if any of the currently enabled planes can't enable WM
    levels that introduce latencies >= 30 µs.
    
    Changes since v11:
     - Add skl_can_enable_sagv()
     - Make sure we don't enable SAGV when not all planes can enable
       watermarks >= the SAGV engine block time. I was originally going to
       save this for later, but I recently managed to run into a machine
       that was having problems with a single pipe configuration + SAGV.
     - Make comparisons to I915_SKL_SAGV_NOT_CONTROLLED explicit
     - Change I915_SAGV_DYNAMIC_FREQ to I915_SAGV_ENABLE
     - Move printks outside of mutexes
     - Don't print error messages twice
    Changes since v10:
     - Apparently sandybridge_pcode_read actually writes values and reads
       them back, despite it's misleading function name. This means we've
       been doing this mostly wrong and have been writing garbage to the
       SAGV control. Because of this, we no longer attempt to read the SAGV
       status during initialization (since there are no helpers for this).
     - mlankhorst noticed that this patch was breaking on some very early
       pre-release Skylake machines, which apparently don't allow you to
       disable the SAGV. To prevent machines from failing tests due to SAGV
       errors, if the first time we try to control the SAGV results in the
       mailbox indicating an invalid command, we just disable future attempts
       to control the SAGV state by setting dev_priv->skl_sagv_status to
       I915_SKL_SAGV_NOT_CONTROLLED and make a note of it in dmesg.
     - Move mutex_unlock() a little higher in skl_enable_sagv(). This
       doesn't actually fix anything, but lets us release the lock a little
       sooner since we're finished with it.
    Changes since v9:
     - Only enable/disable sagv on Skylake
    Changes since v8:
     - Add intel_state->modeset guard to the conditional for
       skl_enable_sagv()
    Changes since v7:
     - Remove GEN9_SAGV_LOW_FREQ, replace with GEN9_SAGV_IS_ENABLED (that's
       all we use it for anyway)
     - Use GEN9_SAGV_IS_ENABLED instead of 0x1 for clarification
     - Fix a styling error that snuck past me
    Changes since v6:
     - Protect skl_enable_sagv() with intel_state->modeset conditional in
       intel_atomic_commit_tail()
    Changes since v5:
     - Don't use is_power_of_2. Makes things confusing
     - Don't use the old state to figure out whether or not to
       enable/disable the sagv, use the new one
     - Split the loop in skl_disable_sagv into it's own function
     - Move skl_sagv_enable/disable() calls into intel_atomic_commit_tail()
    Changes since v4:
     - Use is_power_of_2 against active_crtcs to check whether we have > 1
       pipe enabled
     - Fix skl_sagv_get_hw_state(): (temp & 0x1) indicates disabled, 0x0
       enabled
     - Call skl_sagv_enable/disable() from pre/post-plane updates
    Changes since v3:
     - Use time_before() to compare timeout to jiffies
    Changes since v2:
     - Really apply minor style nitpicks to patch this time
    Changes since v1:
     - Added comments about this probably being one of the requirements to
       fixing Skylake's watermark issues
     - Minor style nitpicks from Matt Roper
     - Disable these functions on Broxton, since it doesn't have an SAGV
    
    Signed-off-by: Lyude <cpaul@redhat.com>
    Cc: Matt Roper <matthew.d.roper@intel.com>
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1471463761-26796-3-git-send-email-cpaul@redhat.com
    [mlankhorst: ENOSYS -> ENXIO, whitespace fixes]

commit f474c525b4f412522cd092b6c8bffb6a0fd9a4de
Author: Willy Tarreau <w@1wt.eu>
Date:   Fri Jul 15 14:26:27 2016 -0400

    pipe: limit the per-user amount of pages allocated in pipes
    
    commit 759c01142a5d0f364a462346168a56de28a80f52 upstream.
    
    On no-so-small systems, it is possible for a single process to cause an
    OOM condition by filling large pipes with data that are never read. A
    typical process filling 4000 pipes with 1 MB of data will use 4 GB of
    memory. On small systems it may be tricky to set the pipe max size to
    prevent this from happening.
    
    This patch makes it possible to enforce a per-user soft limit above
    which new pipes will be limited to a single page, effectively limiting
    them to 4 kB each, as well as a hard limit above which no new pipes may
    be created for this user. This has the effect of protecting the system
    against memory abuse without hurting other users, and still allowing
    pipes to work correctly though with less data at once.
    
    The limit are controlled by two new sysctls : pipe-user-pages-soft, and
    pipe-user-pages-hard. Both may be disabled by setting them to zero. The
    default soft limit allows the default number of FDs per process (1024)
    to create pipes of the default size (64kB), thus reaching a limit of 64MB
    before starting to create only smaller pipes. With 256 processes limited
    to 1024 FDs each, this results in 1024*64kB + (256*1024 - 1024) * 4kB =
    1084 MB of memory allocated for a user. The hard limit is disabled by
    default to avoid breaking existing applications that make intensive use
    of pipes (eg: for splicing).
    
    CVE-2016-2847
    
    Reported-by: socketpair@gmail.com
    Reported-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Mitigates: CVE-2013-4312 (Linux 2.0+)
    Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Luis Henriques <luis.henriques@canonical.com>
    Signed-off-by: Chas Williams <3chas3@gmail.com>

commit fb3bb94dfbb975e4953ae6cce32eba53df8bdc7b
Author: Lyude <cpaul@redhat.com>
Date:   Tue Jun 14 11:04:09 2016 -0400

    drm/i915/ilk: Don't disable SSC source if it's in use
    
    commit 476490a945e1f0f6bd58e303058d2d8ca93a974c upstream.
    
    Thanks to Ville Syrjälä for pointing me towards the cause of this issue.
    
    Unfortunately one of the sideaffects of having the refclk for a DPLL set
    to SSC is that as long as it's set to SSC, the GPU will prevent us from
    powering down any of the pipes or transcoders using it. A couple of
    BIOSes enable SSC in both PCH_DREF_CONTROL and in the DPLL
    configurations. This causes issues on the first modeset, since we don't
    expect SSC to be left on and as a result, can't successfully power down
    the pipes or the transcoders using it. Here's an example from this Dell
    OptiPlex 990:
    
    [drm:intel_modeset_init] SSC enabled by BIOS, overriding VBT which says disabled
    [drm:intel_modeset_init] 2 display pipes available.
    [drm:intel_update_cdclk] Current CD clock rate: 400000 kHz
    [drm:intel_update_max_cdclk] Max CD clock rate: 400000 kHz
    [drm:intel_update_max_cdclk] Max dotclock rate: 360000 kHz
    vgaarb: device changed decodes: PCI:0000:00:02.0,olddecodes=io+mem,decodes=io+mem:owns=io+mem
    [drm:intel_crt_reset] crt adpa set to 0xf40000
    [drm:intel_dp_init_connector] Adding DP connector on port C
    [drm:intel_dp_aux_init] registering DPDDC-C bus for card0-DP-1
    [drm:ironlake_init_pch_refclk] has_panel 0 has_lvds 0 has_ck505 0
    [drm:ironlake_init_pch_refclk] Disabling SSC entirely
    … later we try committing the first modeset …
    [drm:intel_dump_pipe_config] [CRTC:26][modeset] config ffff88041b02e800 for pipe A
    [drm:intel_dump_pipe_config] cpu_transcoder: A
    …
    [drm:intel_dump_pipe_config] dpll_hw_state: dpll: 0xc4016001, dpll_md: 0x0, fp0: 0x20e08, fp1: 0x30d07
    [drm:intel_dump_pipe_config] planes on this crtc
    [drm:intel_dump_pipe_config] STANDARD PLANE:23 plane: 0.0 idx: 0 enabled
    [drm:intel_dump_pipe_config]     FB:42, fb = 800x600 format = 0x34325258
    [drm:intel_dump_pipe_config]     scaler:0 src (0, 0) 800x600 dst (0, 0) 800x600
    [drm:intel_dump_pipe_config] CURSOR PLANE:25 plane: 0.1 idx: 1 disabled, scaler_id = 0
    [drm:intel_dump_pipe_config] STANDARD PLANE:27 plane: 0.1 idx: 2 disabled, scaler_id = 0
    [drm:intel_get_shared_dpll] CRTC:26 allocated PCH DPLL A
    [drm:intel_get_shared_dpll] using PCH DPLL A for pipe A
    [drm:ilk_audio_codec_disable] Disable audio codec on port C, pipe A
    [drm:intel_disable_pipe] disabling pipe A
    ------------[ cut here ]------------
    WARNING: CPU: 1 PID: 130 at drivers/gpu/drm/i915/intel_display.c:1146 intel_disable_pipe+0x297/0x2d0 [i915]
    pipe_off wait timed out
    …
    ---[ end trace 94fc8aa03ae139e8 ]---
    [drm:intel_dp_link_down]
    [drm:ironlake_crtc_disable [i915]] *ERROR* failed to disable transcoder A
    
    Later modesets succeed since they reset the DPLL's configuration anyway,
    but this is enough to get stuck with a big fat warning in dmesg.
    
    A better solution would be to add refcounts for the SSC source, but for
    now leaving the source clock on should suffice.
    
    Changes since v4:
     - Fix calculation of final for systems with LVDS panels (fixes BUG() on
       CI test suite)
    Changes since v3:
     - Move temp variable into loop
     - Move checks for using_ssc_source to after we've figured out has_ck505
     - Add using_ssc_source to debug output
    Changes since v2:
     - Fix debug output for when we disable the CPU source
    Changes since v1:
     - Leave the SSC source clock on instead of just shutting it off on all
       of the DPLL configurations.
    
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Lyude <cpaul@redhat.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: http://patchwork.freedesktop.org/patch/msgid/1465916649-10228-1-git-send-email-cpaul@redhat.com
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 3a70dcaee04b82960f7c9d0047459b9e50da4f46
Author: Lyude <cpaul@redhat.com>
Date:   Tue Jun 14 11:04:09 2016 -0400

    drm/i915/ilk: Don't disable SSC source if it's in use
    
    commit 476490a945e1f0f6bd58e303058d2d8ca93a974c upstream.
    
    Thanks to Ville Syrjälä for pointing me towards the cause of this issue.
    
    Unfortunately one of the sideaffects of having the refclk for a DPLL set
    to SSC is that as long as it's set to SSC, the GPU will prevent us from
    powering down any of the pipes or transcoders using it. A couple of
    BIOSes enable SSC in both PCH_DREF_CONTROL and in the DPLL
    configurations. This causes issues on the first modeset, since we don't
    expect SSC to be left on and as a result, can't successfully power down
    the pipes or the transcoders using it. Here's an example from this Dell
    OptiPlex 990:
    
    [drm:intel_modeset_init] SSC enabled by BIOS, overriding VBT which says disabled
    [drm:intel_modeset_init] 2 display pipes available.
    [drm:intel_update_cdclk] Current CD clock rate: 400000 kHz
    [drm:intel_update_max_cdclk] Max CD clock rate: 400000 kHz
    [drm:intel_update_max_cdclk] Max dotclock rate: 360000 kHz
    vgaarb: device changed decodes: PCI:0000:00:02.0,olddecodes=io+mem,decodes=io+mem:owns=io+mem
    [drm:intel_crt_reset] crt adpa set to 0xf40000
    [drm:intel_dp_init_connector] Adding DP connector on port C
    [drm:intel_dp_aux_init] registering DPDDC-C bus for card0-DP-1
    [drm:ironlake_init_pch_refclk] has_panel 0 has_lvds 0 has_ck505 0
    [drm:ironlake_init_pch_refclk] Disabling SSC entirely
    … later we try committing the first modeset …
    [drm:intel_dump_pipe_config] [CRTC:26][modeset] config ffff88041b02e800 for pipe A
    [drm:intel_dump_pipe_config] cpu_transcoder: A
    …
    [drm:intel_dump_pipe_config] dpll_hw_state: dpll: 0xc4016001, dpll_md: 0x0, fp0: 0x20e08, fp1: 0x30d07
    [drm:intel_dump_pipe_config] planes on this crtc
    [drm:intel_dump_pipe_config] STANDARD PLANE:23 plane: 0.0 idx: 0 enabled
    [drm:intel_dump_pipe_config]     FB:42, fb = 800x600 format = 0x34325258
    [drm:intel_dump_pipe_config]     scaler:0 src (0, 0) 800x600 dst (0, 0) 800x600
    [drm:intel_dump_pipe_config] CURSOR PLANE:25 plane: 0.1 idx: 1 disabled, scaler_id = 0
    [drm:intel_dump_pipe_config] STANDARD PLANE:27 plane: 0.1 idx: 2 disabled, scaler_id = 0
    [drm:intel_get_shared_dpll] CRTC:26 allocated PCH DPLL A
    [drm:intel_get_shared_dpll] using PCH DPLL A for pipe A
    [drm:ilk_audio_codec_disable] Disable audio codec on port C, pipe A
    [drm:intel_disable_pipe] disabling pipe A
    ------------[ cut here ]------------
    WARNING: CPU: 1 PID: 130 at drivers/gpu/drm/i915/intel_display.c:1146 intel_disable_pipe+0x297/0x2d0 [i915]
    pipe_off wait timed out
    …
    ---[ end trace 94fc8aa03ae139e8 ]---
    [drm:intel_dp_link_down]
    [drm:ironlake_crtc_disable [i915]] *ERROR* failed to disable transcoder A
    
    Later modesets succeed since they reset the DPLL's configuration anyway,
    but this is enough to get stuck with a big fat warning in dmesg.
    
    A better solution would be to add refcounts for the SSC source, but for
    now leaving the source clock on should suffice.
    
    Changes since v4:
     - Fix calculation of final for systems with LVDS panels (fixes BUG() on
       CI test suite)
    Changes since v3:
     - Move temp variable into loop
     - Move checks for using_ssc_source to after we've figured out has_ck505
     - Add using_ssc_source to debug output
    Changes since v2:
     - Fix debug output for when we disable the CPU source
    Changes since v1:
     - Leave the SSC source clock on instead of just shutting it off on all
       of the DPLL configurations.
    
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Lyude <cpaul@redhat.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: http://patchwork.freedesktop.org/patch/msgid/1465916649-10228-1-git-send-email-cpaul@redhat.com
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b17d254d755aabaff680bb09a896bac62a238082
Author: Lyude <cpaul@redhat.com>
Date:   Tue Jun 14 11:04:09 2016 -0400

    drm/i915/ilk: Don't disable SSC source if it's in use
    
    commit 476490a945e1f0f6bd58e303058d2d8ca93a974c upstream.
    
    Thanks to Ville Syrjälä for pointing me towards the cause of this issue.
    
    Unfortunately one of the sideaffects of having the refclk for a DPLL set
    to SSC is that as long as it's set to SSC, the GPU will prevent us from
    powering down any of the pipes or transcoders using it. A couple of
    BIOSes enable SSC in both PCH_DREF_CONTROL and in the DPLL
    configurations. This causes issues on the first modeset, since we don't
    expect SSC to be left on and as a result, can't successfully power down
    the pipes or the transcoders using it. Here's an example from this Dell
    OptiPlex 990:
    
    [drm:intel_modeset_init] SSC enabled by BIOS, overriding VBT which says disabled
    [drm:intel_modeset_init] 2 display pipes available.
    [drm:intel_update_cdclk] Current CD clock rate: 400000 kHz
    [drm:intel_update_max_cdclk] Max CD clock rate: 400000 kHz
    [drm:intel_update_max_cdclk] Max dotclock rate: 360000 kHz
    vgaarb: device changed decodes: PCI:0000:00:02.0,olddecodes=io+mem,decodes=io+mem:owns=io+mem
    [drm:intel_crt_reset] crt adpa set to 0xf40000
    [drm:intel_dp_init_connector] Adding DP connector on port C
    [drm:intel_dp_aux_init] registering DPDDC-C bus for card0-DP-1
    [drm:ironlake_init_pch_refclk] has_panel 0 has_lvds 0 has_ck505 0
    [drm:ironlake_init_pch_refclk] Disabling SSC entirely
    … later we try committing the first modeset …
    [drm:intel_dump_pipe_config] [CRTC:26][modeset] config ffff88041b02e800 for pipe A
    [drm:intel_dump_pipe_config] cpu_transcoder: A
    …
    [drm:intel_dump_pipe_config] dpll_hw_state: dpll: 0xc4016001, dpll_md: 0x0, fp0: 0x20e08, fp1: 0x30d07
    [drm:intel_dump_pipe_config] planes on this crtc
    [drm:intel_dump_pipe_config] STANDARD PLANE:23 plane: 0.0 idx: 0 enabled
    [drm:intel_dump_pipe_config]     FB:42, fb = 800x600 format = 0x34325258
    [drm:intel_dump_pipe_config]     scaler:0 src (0, 0) 800x600 dst (0, 0) 800x600
    [drm:intel_dump_pipe_config] CURSOR PLANE:25 plane: 0.1 idx: 1 disabled, scaler_id = 0
    [drm:intel_dump_pipe_config] STANDARD PLANE:27 plane: 0.1 idx: 2 disabled, scaler_id = 0
    [drm:intel_get_shared_dpll] CRTC:26 allocated PCH DPLL A
    [drm:intel_get_shared_dpll] using PCH DPLL A for pipe A
    [drm:ilk_audio_codec_disable] Disable audio codec on port C, pipe A
    [drm:intel_disable_pipe] disabling pipe A
    ------------[ cut here ]------------
    WARNING: CPU: 1 PID: 130 at drivers/gpu/drm/i915/intel_display.c:1146 intel_disable_pipe+0x297/0x2d0 [i915]
    pipe_off wait timed out
    …
    ---[ end trace 94fc8aa03ae139e8 ]---
    [drm:intel_dp_link_down]
    [drm:ironlake_crtc_disable [i915]] *ERROR* failed to disable transcoder A
    
    Later modesets succeed since they reset the DPLL's configuration anyway,
    but this is enough to get stuck with a big fat warning in dmesg.
    
    A better solution would be to add refcounts for the SSC source, but for
    now leaving the source clock on should suffice.
    
    Changes since v4:
     - Fix calculation of final for systems with LVDS panels (fixes BUG() on
       CI test suite)
    Changes since v3:
     - Move temp variable into loop
     - Move checks for using_ssc_source to after we've figured out has_ck505
     - Add using_ssc_source to debug output
    Changes since v2:
     - Fix debug output for when we disable the CPU source
    Changes since v1:
     - Leave the SSC source clock on instead of just shutting it off on all
       of the DPLL configurations.
    
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Lyude <cpaul@redhat.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: http://patchwork.freedesktop.org/patch/msgid/1465916649-10228-1-git-send-email-cpaul@redhat.com
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fc26f6e0e1862e72021232fd693819d5d29f6bd5
Author: Lyude <cpaul@redhat.com>
Date:   Tue Jun 14 11:04:09 2016 -0400

    drm/i915/ilk: Don't disable SSC source if it's in use
    
    commit 476490a945e1f0f6bd58e303058d2d8ca93a974c upstream.
    
    Thanks to Ville Syrjälä for pointing me towards the cause of this issue.
    
    Unfortunately one of the sideaffects of having the refclk for a DPLL set
    to SSC is that as long as it's set to SSC, the GPU will prevent us from
    powering down any of the pipes or transcoders using it. A couple of
    BIOSes enable SSC in both PCH_DREF_CONTROL and in the DPLL
    configurations. This causes issues on the first modeset, since we don't
    expect SSC to be left on and as a result, can't successfully power down
    the pipes or the transcoders using it. Here's an example from this Dell
    OptiPlex 990:
    
    [drm:intel_modeset_init] SSC enabled by BIOS, overriding VBT which says disabled
    [drm:intel_modeset_init] 2 display pipes available.
    [drm:intel_update_cdclk] Current CD clock rate: 400000 kHz
    [drm:intel_update_max_cdclk] Max CD clock rate: 400000 kHz
    [drm:intel_update_max_cdclk] Max dotclock rate: 360000 kHz
    vgaarb: device changed decodes: PCI:0000:00:02.0,olddecodes=io+mem,decodes=io+mem:owns=io+mem
    [drm:intel_crt_reset] crt adpa set to 0xf40000
    [drm:intel_dp_init_connector] Adding DP connector on port C
    [drm:intel_dp_aux_init] registering DPDDC-C bus for card0-DP-1
    [drm:ironlake_init_pch_refclk] has_panel 0 has_lvds 0 has_ck505 0
    [drm:ironlake_init_pch_refclk] Disabling SSC entirely
    … later we try committing the first modeset …
    [drm:intel_dump_pipe_config] [CRTC:26][modeset] config ffff88041b02e800 for pipe A
    [drm:intel_dump_pipe_config] cpu_transcoder: A
    …
    [drm:intel_dump_pipe_config] dpll_hw_state: dpll: 0xc4016001, dpll_md: 0x0, fp0: 0x20e08, fp1: 0x30d07
    [drm:intel_dump_pipe_config] planes on this crtc
    [drm:intel_dump_pipe_config] STANDARD PLANE:23 plane: 0.0 idx: 0 enabled
    [drm:intel_dump_pipe_config]     FB:42, fb = 800x600 format = 0x34325258
    [drm:intel_dump_pipe_config]     scaler:0 src (0, 0) 800x600 dst (0, 0) 800x600
    [drm:intel_dump_pipe_config] CURSOR PLANE:25 plane: 0.1 idx: 1 disabled, scaler_id = 0
    [drm:intel_dump_pipe_config] STANDARD PLANE:27 plane: 0.1 idx: 2 disabled, scaler_id = 0
    [drm:intel_get_shared_dpll] CRTC:26 allocated PCH DPLL A
    [drm:intel_get_shared_dpll] using PCH DPLL A for pipe A
    [drm:ilk_audio_codec_disable] Disable audio codec on port C, pipe A
    [drm:intel_disable_pipe] disabling pipe A
    ------------[ cut here ]------------
    WARNING: CPU: 1 PID: 130 at drivers/gpu/drm/i915/intel_display.c:1146 intel_disable_pipe+0x297/0x2d0 [i915]
    pipe_off wait timed out
    …
    ---[ end trace 94fc8aa03ae139e8 ]---
    [drm:intel_dp_link_down]
    [drm:ironlake_crtc_disable [i915]] *ERROR* failed to disable transcoder A
    
    Later modesets succeed since they reset the DPLL's configuration anyway,
    but this is enough to get stuck with a big fat warning in dmesg.
    
    A better solution would be to add refcounts for the SSC source, but for
    now leaving the source clock on should suffice.
    
    Changes since v4:
     - Fix calculation of final for systems with LVDS panels (fixes BUG() on
       CI test suite)
    Changes since v3:
     - Move temp variable into loop
     - Move checks for using_ssc_source to after we've figured out has_ck505
     - Add using_ssc_source to debug output
    Changes since v2:
     - Fix debug output for when we disable the CPU source
    Changes since v1:
     - Leave the SSC source clock on instead of just shutting it off on all
       of the DPLL configurations.
    
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Lyude <cpaul@redhat.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: http://patchwork.freedesktop.org/patch/msgid/1465916649-10228-1-git-send-email-cpaul@redhat.com
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 760bd1ade1ebe9b3882009f4c4cda7745908822d
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Tue Jun 7 21:26:55 2016 -0400

    fix d_walk()/non-delayed __d_free() race
    
    commit 3d56c25e3bb0726a5c5e16fc2d9e38f8ed763085 upstream.
    
    Ascend-to-parent logics in d_walk() depends on all encountered child
    dentries not getting freed without an RCU delay.  Unfortunately, in
    quite a few cases it is not true, with hard-to-hit oopsable race as
    the result.
    
    Fortunately, the fix is simiple; right now the rule is "if it ever
    been hashed, freeing must be delayed" and changing it to "if it
    ever had a parent, freeing must be delayed" closes that hole and
    covers all cases the old rule used to cover.  Moreover, pipes and
    sockets remain _not_ covered, so we do not introduce RCU delay in
    the cases which are the reason for having that delay conditional
    in the first place.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit be65d29ff7b6246afa8309063cc77ba030d98d17
Author: Willy Tarreau <w@1wt.eu>
Date:   Mon Jan 18 16:36:09 2016 +0100

    pipe: limit the per-user amount of pages allocated in pipes
    
    [ Upstream commit 759c01142a5d0f364a462346168a56de28a80f52 ]
    
    On no-so-small systems, it is possible for a single process to cause an
    OOM condition by filling large pipes with data that are never read. A
    typical process filling 4000 pipes with 1 MB of data will use 4 GB of
    memory. On small systems it may be tricky to set the pipe max size to
    prevent this from happening.
    
    This patch makes it possible to enforce a per-user soft limit above
    which new pipes will be limited to a single page, effectively limiting
    them to 4 kB each, as well as a hard limit above which no new pipes may
    be created for this user. This has the effect of protecting the system
    against memory abuse without hurting other users, and still allowing
    pipes to work correctly though with less data at once.
    
    The limit are controlled by two new sysctls : pipe-user-pages-soft, and
    pipe-user-pages-hard. Both may be disabled by setting them to zero. The
    default soft limit allows the default number of FDs per process (1024)
    to create pipes of the default size (64kB), thus reaching a limit of 64MB
    before starting to create only smaller pipes. With 256 processes limited
    to 1024 FDs each, this results in 1024*64kB + (256*1024 - 1024) * 4kB =
    1084 MB of memory allocated for a user. The hard limit is disabled by
    default to avoid breaking existing applications that make intensive use
    of pipes (eg: for splicing).
    
    Reported-by: socketpair@gmail.com
    Reported-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Mitigates: CVE-2013-4312 (Linux 2.0+)
    Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Sasha Levin <sasha.levin@oracle.com>

commit bcb6659242e610b715fcfced0d048c01aec47960
Author: Lyude <cpaul@redhat.com>
Date:   Tue Jun 14 11:04:09 2016 -0400

    drm/i915/ilk: Don't disable SSC source if it's in use
    
    [ Upstream commit 476490a945e1f0f6bd58e303058d2d8ca93a974c ]
    
    Thanks to Ville Syrjälä for pointing me towards the cause of this issue.
    
    Unfortunately one of the sideaffects of having the refclk for a DPLL set
    to SSC is that as long as it's set to SSC, the GPU will prevent us from
    powering down any of the pipes or transcoders using it. A couple of
    BIOSes enable SSC in both PCH_DREF_CONTROL and in the DPLL
    configurations. This causes issues on the first modeset, since we don't
    expect SSC to be left on and as a result, can't successfully power down
    the pipes or the transcoders using it. Here's an example from this Dell
    OptiPlex 990:
    
    [drm:intel_modeset_init] SSC enabled by BIOS, overriding VBT which says disabled
    [drm:intel_modeset_init] 2 display pipes available.
    [drm:intel_update_cdclk] Current CD clock rate: 400000 kHz
    [drm:intel_update_max_cdclk] Max CD clock rate: 400000 kHz
    [drm:intel_update_max_cdclk] Max dotclock rate: 360000 kHz
    vgaarb: device changed decodes: PCI:0000:00:02.0,olddecodes=io+mem,decodes=io+mem:owns=io+mem
    [drm:intel_crt_reset] crt adpa set to 0xf40000
    [drm:intel_dp_init_connector] Adding DP connector on port C
    [drm:intel_dp_aux_init] registering DPDDC-C bus for card0-DP-1
    [drm:ironlake_init_pch_refclk] has_panel 0 has_lvds 0 has_ck505 0
    [drm:ironlake_init_pch_refclk] Disabling SSC entirely
    … later we try committing the first modeset …
    [drm:intel_dump_pipe_config] [CRTC:26][modeset] config ffff88041b02e800 for pipe A
    [drm:intel_dump_pipe_config] cpu_transcoder: A
    …
    [drm:intel_dump_pipe_config] dpll_hw_state: dpll: 0xc4016001, dpll_md: 0x0, fp0: 0x20e08, fp1: 0x30d07
    [drm:intel_dump_pipe_config] planes on this crtc
    [drm:intel_dump_pipe_config] STANDARD PLANE:23 plane: 0.0 idx: 0 enabled
    [drm:intel_dump_pipe_config]     FB:42, fb = 800x600 format = 0x34325258
    [drm:intel_dump_pipe_config]     scaler:0 src (0, 0) 800x600 dst (0, 0) 800x600
    [drm:intel_dump_pipe_config] CURSOR PLANE:25 plane: 0.1 idx: 1 disabled, scaler_id = 0
    [drm:intel_dump_pipe_config] STANDARD PLANE:27 plane: 0.1 idx: 2 disabled, scaler_id = 0
    [drm:intel_get_shared_dpll] CRTC:26 allocated PCH DPLL A
    [drm:intel_get_shared_dpll] using PCH DPLL A for pipe A
    [drm:ilk_audio_codec_disable] Disable audio codec on port C, pipe A
    [drm:intel_disable_pipe] disabling pipe A
    ------------[ cut here ]------------
    WARNING: CPU: 1 PID: 130 at drivers/gpu/drm/i915/intel_display.c:1146 intel_disable_pipe+0x297/0x2d0 [i915]
    pipe_off wait timed out
    …
    ---[ end trace 94fc8aa03ae139e8 ]---
    [drm:intel_dp_link_down]
    [drm:ironlake_crtc_disable [i915]] *ERROR* failed to disable transcoder A
    
    Later modesets succeed since they reset the DPLL's configuration anyway,
    but this is enough to get stuck with a big fat warning in dmesg.
    
    A better solution would be to add refcounts for the SSC source, but for
    now leaving the source clock on should suffice.
    
    Changes since v4:
     - Fix calculation of final for systems with LVDS panels (fixes BUG() on
       CI test suite)
    Changes since v3:
     - Move temp variable into loop
     - Move checks for using_ssc_source to after we've figured out has_ck505
     - Add using_ssc_source to debug output
    Changes since v2:
     - Fix debug output for when we disable the CPU source
    Changes since v1:
     - Leave the SSC source clock on instead of just shutting it off on all
       of the DPLL configurations.
    
    Cc: stable@vger.kernel.org
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Lyude <cpaul@redhat.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: http://patchwork.freedesktop.org/patch/msgid/1465916649-10228-1-git-send-email-cpaul@redhat.com
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Sasha Levin <sasha.levin@oracle.com>

commit 2612a949cf5c2a868adee1ca6bcbf01cd4e2f01e
Author: Willy Tarreau <w@1wt.eu>
Date:   Mon Jan 18 16:36:09 2016 +0100

    pipe: limit the per-user amount of pages allocated in pipes
    
    [ Upstream commit 759c01142a5d0f364a462346168a56de28a80f52 ]
    
    On no-so-small systems, it is possible for a single process to cause an
    OOM condition by filling large pipes with data that are never read. A
    typical process filling 4000 pipes with 1 MB of data will use 4 GB of
    memory. On small systems it may be tricky to set the pipe max size to
    prevent this from happening.
    
    This patch makes it possible to enforce a per-user soft limit above
    which new pipes will be limited to a single page, effectively limiting
    them to 4 kB each, as well as a hard limit above which no new pipes may
    be created for this user. This has the effect of protecting the system
    against memory abuse without hurting other users, and still allowing
    pipes to work correctly though with less data at once.
    
    The limit are controlled by two new sysctls : pipe-user-pages-soft, and
    pipe-user-pages-hard. Both may be disabled by setting them to zero. The
    default soft limit allows the default number of FDs per process (1024)
    to create pipes of the default size (64kB), thus reaching a limit of 64MB
    before starting to create only smaller pipes. With 256 processes limited
    to 1024 FDs each, this results in 1024*64kB + (256*1024 - 1024) * 4kB =
    1084 MB of memory allocated for a user. The hard limit is disabled by
    default to avoid breaking existing applications that make intensive use
    of pipes (eg: for splicing).
    
    Reported-by: socketpair@gmail.com
    Reported-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Mitigates: CVE-2013-4312 (Linux 2.0+)
    Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Sasha Levin <sasha.levin@oracle.com>

commit 5a6c735c13e0ad34cdb4fc24a782924b64efec92
Author: Lyude <cpaul@redhat.com>
Date:   Tue Jun 14 11:04:09 2016 -0400

    drm/i915/ilk: Don't disable SSC source if it's in use
    
    [ Upstream commit 476490a945e1f0f6bd58e303058d2d8ca93a974c ]
    
    Thanks to Ville Syrjälä for pointing me towards the cause of this issue.
    
    Unfortunately one of the sideaffects of having the refclk for a DPLL set
    to SSC is that as long as it's set to SSC, the GPU will prevent us from
    powering down any of the pipes or transcoders using it. A couple of
    BIOSes enable SSC in both PCH_DREF_CONTROL and in the DPLL
    configurations. This causes issues on the first modeset, since we don't
    expect SSC to be left on and as a result, can't successfully power down
    the pipes or the transcoders using it. Here's an example from this Dell
    OptiPlex 990:
    
    [drm:intel_modeset_init] SSC enabled by BIOS, overriding VBT which says disabled
    [drm:intel_modeset_init] 2 display pipes available.
    [drm:intel_update_cdclk] Current CD clock rate: 400000 kHz
    [drm:intel_update_max_cdclk] Max CD clock rate: 400000 kHz
    [drm:intel_update_max_cdclk] Max dotclock rate: 360000 kHz
    vgaarb: device changed decodes: PCI:0000:00:02.0,olddecodes=io+mem,decodes=io+mem:owns=io+mem
    [drm:intel_crt_reset] crt adpa set to 0xf40000
    [drm:intel_dp_init_connector] Adding DP connector on port C
    [drm:intel_dp_aux_init] registering DPDDC-C bus for card0-DP-1
    [drm:ironlake_init_pch_refclk] has_panel 0 has_lvds 0 has_ck505 0
    [drm:ironlake_init_pch_refclk] Disabling SSC entirely
    … later we try committing the first modeset …
    [drm:intel_dump_pipe_config] [CRTC:26][modeset] config ffff88041b02e800 for pipe A
    [drm:intel_dump_pipe_config] cpu_transcoder: A
    …
    [drm:intel_dump_pipe_config] dpll_hw_state: dpll: 0xc4016001, dpll_md: 0x0, fp0: 0x20e08, fp1: 0x30d07
    [drm:intel_dump_pipe_config] planes on this crtc
    [drm:intel_dump_pipe_config] STANDARD PLANE:23 plane: 0.0 idx: 0 enabled
    [drm:intel_dump_pipe_config]     FB:42, fb = 800x600 format = 0x34325258
    [drm:intel_dump_pipe_config]     scaler:0 src (0, 0) 800x600 dst (0, 0) 800x600
    [drm:intel_dump_pipe_config] CURSOR PLANE:25 plane: 0.1 idx: 1 disabled, scaler_id = 0
    [drm:intel_dump_pipe_config] STANDARD PLANE:27 plane: 0.1 idx: 2 disabled, scaler_id = 0
    [drm:intel_get_shared_dpll] CRTC:26 allocated PCH DPLL A
    [drm:intel_get_shared_dpll] using PCH DPLL A for pipe A
    [drm:ilk_audio_codec_disable] Disable audio codec on port C, pipe A
    [drm:intel_disable_pipe] disabling pipe A
    ------------[ cut here ]------------
    WARNING: CPU: 1 PID: 130 at drivers/gpu/drm/i915/intel_display.c:1146 intel_disable_pipe+0x297/0x2d0 [i915]
    pipe_off wait timed out
    …
    ---[ end trace 94fc8aa03ae139e8 ]---
    [drm:intel_dp_link_down]
    [drm:ironlake_crtc_disable [i915]] *ERROR* failed to disable transcoder A
    
    Later modesets succeed since they reset the DPLL's configuration anyway,
    but this is enough to get stuck with a big fat warning in dmesg.
    
    A better solution would be to add refcounts for the SSC source, but for
    now leaving the source clock on should suffice.
    
    Changes since v4:
     - Fix calculation of final for systems with LVDS panels (fixes BUG() on
       CI test suite)
    Changes since v3:
     - Move temp variable into loop
     - Move checks for using_ssc_source to after we've figured out has_ck505
     - Add using_ssc_source to debug output
    Changes since v2:
     - Fix debug output for when we disable the CPU source
    Changes since v1:
     - Leave the SSC source clock on instead of just shutting it off on all
       of the DPLL configurations.
    
    Cc: stable@vger.kernel.org
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Lyude <cpaul@redhat.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: http://patchwork.freedesktop.org/patch/msgid/1465916649-10228-1-git-send-email-cpaul@redhat.com
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Sasha Levin <sasha.levin@oracle.com>

commit 9b6130227495fdaf17f8b3b28db083666b113c84
Author: Matt Roper <matthew.d.roper@intel.com>
Date:   Mon Jun 27 16:42:44 2016 -0700

    drm/i915/gen9: Re-allocate DDB only for changed pipes
    
    When a display update triggers a DDB re-allocation, we should start by
    assuming that only the updated pipes need to be re-allocated (we have
    logic later that may add additional pipes if, e.g., a modeset triggers a
    change to the global allocation).
    
    We were erroneously using the _active_ pipes as our starting point
    rather than the changed pipes.  This causes us to grab CRTC locks that
    we didn't actually need, reducing parallelism.  Given the recent
    non-blocking atomic changes, it also causes legacy pageflips against one
    CRTC to return -EBUSY if there's an outstanding pageflip against a
    different CRTC (a situation easily triggered via compositors like
    Weston).
    
    Fixes: 98d39494d3 ("drm/i915/gen9: Compute DDB allocation at atomic check time (v4)")
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1467070964-14864-1-git-send-email-matthew.d.roper@intel.com
    Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>

commit 21ceba1bc304d20334391da62f4d446c0ad3db1f
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Tue Jun 7 21:26:55 2016 -0400

    fix d_walk()/non-delayed __d_free() race
    
    commit 3d56c25e3bb0726a5c5e16fc2d9e38f8ed763085 upstream.
    
    Ascend-to-parent logics in d_walk() depends on all encountered child
    dentries not getting freed without an RCU delay.  Unfortunately, in
    quite a few cases it is not true, with hard-to-hit oopsable race as
    the result.
    
    Fortunately, the fix is simiple; right now the rule is "if it ever
    been hashed, freeing must be delayed" and changing it to "if it
    ever had a parent, freeing must be delayed" closes that hole and
    covers all cases the old rule used to cover.  Moreover, pipes and
    sockets remain _not_ covered, so we do not introduce RCU delay in
    the cases which are the reason for having that delay conditional
    in the first place.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2b11d80e1aa70b56c6431e4dc3c686ffc61a73bf
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Tue Jun 7 21:26:55 2016 -0400

    fix d_walk()/non-delayed __d_free() race
    
    commit 3d56c25e3bb0726a5c5e16fc2d9e38f8ed763085 upstream.
    
    Ascend-to-parent logics in d_walk() depends on all encountered child
    dentries not getting freed without an RCU delay.  Unfortunately, in
    quite a few cases it is not true, with hard-to-hit oopsable race as
    the result.
    
    Fortunately, the fix is simiple; right now the rule is "if it ever
    been hashed, freeing must be delayed" and changing it to "if it
    ever had a parent, freeing must be delayed" closes that hole and
    covers all cases the old rule used to cover.  Moreover, pipes and
    sockets remain _not_ covered, so we do not introduce RCU delay in
    the cases which are the reason for having that delay conditional
    in the first place.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c098acd272f1323e47ca52ec016f1a62d26b6573
Author: Willy Tarreau <w@1wt.eu>
Date:   Tue Jun 14 10:31:11 2016 -0400

    pipe: limit the per-user amount of pages allocated in pipes
    
    commit 759c01142a5d0f364a462346168a56de28a80f52 upstream.
    
    On no-so-small systems, it is possible for a single process to cause an
    OOM condition by filling large pipes with data that are never read. A
    typical process filling 4000 pipes with 1 MB of data will use 4 GB of
    memory. On small systems it may be tricky to set the pipe max size to
    prevent this from happening.
    
    This patch makes it possible to enforce a per-user soft limit above
    which new pipes will be limited to a single page, effectively limiting
    them to 4 kB each, as well as a hard limit above which no new pipes may
    be created for this user. This has the effect of protecting the system
    against memory abuse without hurting other users, and still allowing
    pipes to work correctly though with less data at once.
    
    The limit are controlled by two new sysctls : pipe-user-pages-soft, and
    pipe-user-pages-hard. Both may be disabled by setting them to zero. The
    default soft limit allows the default number of FDs per process (1024)
    to create pipes of the default size (64kB), thus reaching a limit of 64MB
    before starting to create only smaller pipes. With 256 processes limited
    to 1024 FDs each, this results in 1024*64kB + (256*1024 - 1024) * 4kB =
    1084 MB of memory allocated for a user. The hard limit is disabled by
    default to avoid breaking existing applications that make intensive use
    of pipes (eg: for splicing).
    
    Reported-by: socketpair@gmail.com
    Reported-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Mitigates: CVE-2013-4312 (Linux 2.0+)
    Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Luis Henriques <luis.henriques@canonical.com>
    Signed-off-by: Chas Williams <3chas3@gmail.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9db6c45bb3858dffba95afec2ccb8d05805cdff1
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Tue Jun 7 21:26:55 2016 -0400

    fix d_walk()/non-delayed __d_free() race
    
    commit 3d56c25e3bb0726a5c5e16fc2d9e38f8ed763085 upstream.
    
    Ascend-to-parent logics in d_walk() depends on all encountered child
    dentries not getting freed without an RCU delay.  Unfortunately, in
    quite a few cases it is not true, with hard-to-hit oopsable race as
    the result.
    
    Fortunately, the fix is simiple; right now the rule is "if it ever
    been hashed, freeing must be delayed" and changing it to "if it
    ever had a parent, freeing must be delayed" closes that hole and
    covers all cases the old rule used to cover.  Moreover, pipes and
    sockets remain _not_ covered, so we do not introduce RCU delay in
    the cases which are the reason for having that delay conditional
    in the first place.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 34558d3f213b5d95253aba97b529d46f20b757cb
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Tue Jun 7 21:26:55 2016 -0400

    fix d_walk()/non-delayed __d_free() race
    
    [ Upstream commit 3d56c25e3bb0726a5c5e16fc2d9e38f8ed763085 ]
    
    Ascend-to-parent logics in d_walk() depends on all encountered child
    dentries not getting freed without an RCU delay.  Unfortunately, in
    quite a few cases it is not true, with hard-to-hit oopsable race as
    the result.
    
    Fortunately, the fix is simiple; right now the rule is "if it ever
    been hashed, freeing must be delayed" and changing it to "if it
    ever had a parent, freeing must be delayed" closes that hole and
    covers all cases the old rule used to cover.  Moreover, pipes and
    sockets remain _not_ covered, so we do not introduce RCU delay in
    the cases which are the reason for having that delay conditional
    in the first place.
    
    Cc: stable@vger.kernel.org # v3.2+ (and watch out for __d_materialise_dentry())
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Sasha Levin <sasha.levin@oracle.com>

commit 7296467cfbe04536b8ccec5345a1fd0a2cab1cdc
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Tue Jun 7 21:26:55 2016 -0400

    fix d_walk()/non-delayed __d_free() race
    
    [ Upstream commit 3d56c25e3bb0726a5c5e16fc2d9e38f8ed763085 ]
    
    Ascend-to-parent logics in d_walk() depends on all encountered child
    dentries not getting freed without an RCU delay.  Unfortunately, in
    quite a few cases it is not true, with hard-to-hit oopsable race as
    the result.
    
    Fortunately, the fix is simiple; right now the rule is "if it ever
    been hashed, freeing must be delayed" and changing it to "if it
    ever had a parent, freeing must be delayed" closes that hole and
    covers all cases the old rule used to cover.  Moreover, pipes and
    sockets remain _not_ covered, so we do not introduce RCU delay in
    the cases which are the reason for having that delay conditional
    in the first place.
    
    Cc: stable@vger.kernel.org # v3.2+ (and watch out for __d_materialise_dentry())
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Sasha Levin <sasha.levin@oracle.com>

commit 476490a945e1f0f6bd58e303058d2d8ca93a974c
Author: Lyude <cpaul@redhat.com>
Date:   Tue Jun 14 11:04:09 2016 -0400

    drm/i915/ilk: Don't disable SSC source if it's in use
    
    Thanks to Ville Syrjälä for pointing me towards the cause of this issue.
    
    Unfortunately one of the sideaffects of having the refclk for a DPLL set
    to SSC is that as long as it's set to SSC, the GPU will prevent us from
    powering down any of the pipes or transcoders using it. A couple of
    BIOSes enable SSC in both PCH_DREF_CONTROL and in the DPLL
    configurations. This causes issues on the first modeset, since we don't
    expect SSC to be left on and as a result, can't successfully power down
    the pipes or the transcoders using it. Here's an example from this Dell
    OptiPlex 990:
    
    [drm:intel_modeset_init] SSC enabled by BIOS, overriding VBT which says disabled
    [drm:intel_modeset_init] 2 display pipes available.
    [drm:intel_update_cdclk] Current CD clock rate: 400000 kHz
    [drm:intel_update_max_cdclk] Max CD clock rate: 400000 kHz
    [drm:intel_update_max_cdclk] Max dotclock rate: 360000 kHz
    vgaarb: device changed decodes: PCI:0000:00:02.0,olddecodes=io+mem,decodes=io+mem:owns=io+mem
    [drm:intel_crt_reset] crt adpa set to 0xf40000
    [drm:intel_dp_init_connector] Adding DP connector on port C
    [drm:intel_dp_aux_init] registering DPDDC-C bus for card0-DP-1
    [drm:ironlake_init_pch_refclk] has_panel 0 has_lvds 0 has_ck505 0
    [drm:ironlake_init_pch_refclk] Disabling SSC entirely
    … later we try committing the first modeset …
    [drm:intel_dump_pipe_config] [CRTC:26][modeset] config ffff88041b02e800 for pipe A
    [drm:intel_dump_pipe_config] cpu_transcoder: A
    …
    [drm:intel_dump_pipe_config] dpll_hw_state: dpll: 0xc4016001, dpll_md: 0x0, fp0: 0x20e08, fp1: 0x30d07
    [drm:intel_dump_pipe_config] planes on this crtc
    [drm:intel_dump_pipe_config] STANDARD PLANE:23 plane: 0.0 idx: 0 enabled
    [drm:intel_dump_pipe_config]     FB:42, fb = 800x600 format = 0x34325258
    [drm:intel_dump_pipe_config]     scaler:0 src (0, 0) 800x600 dst (0, 0) 800x600
    [drm:intel_dump_pipe_config] CURSOR PLANE:25 plane: 0.1 idx: 1 disabled, scaler_id = 0
    [drm:intel_dump_pipe_config] STANDARD PLANE:27 plane: 0.1 idx: 2 disabled, scaler_id = 0
    [drm:intel_get_shared_dpll] CRTC:26 allocated PCH DPLL A
    [drm:intel_get_shared_dpll] using PCH DPLL A for pipe A
    [drm:ilk_audio_codec_disable] Disable audio codec on port C, pipe A
    [drm:intel_disable_pipe] disabling pipe A
    ------------[ cut here ]------------
    WARNING: CPU: 1 PID: 130 at drivers/gpu/drm/i915/intel_display.c:1146 intel_disable_pipe+0x297/0x2d0 [i915]
    pipe_off wait timed out
    …
    ---[ end trace 94fc8aa03ae139e8 ]---
    [drm:intel_dp_link_down]
    [drm:ironlake_crtc_disable [i915]] *ERROR* failed to disable transcoder A
    
    Later modesets succeed since they reset the DPLL's configuration anyway,
    but this is enough to get stuck with a big fat warning in dmesg.
    
    A better solution would be to add refcounts for the SSC source, but for
    now leaving the source clock on should suffice.
    
    Changes since v4:
     - Fix calculation of final for systems with LVDS panels (fixes BUG() on
       CI test suite)
    Changes since v3:
     - Move temp variable into loop
     - Move checks for using_ssc_source to after we've figured out has_ck505
     - Add using_ssc_source to debug output
    Changes since v2:
     - Fix debug output for when we disable the CPU source
    Changes since v1:
     - Leave the SSC source clock on instead of just shutting it off on all
       of the DPLL configurations.
    
    Cc: stable@vger.kernel.org
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Lyude <cpaul@redhat.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: http://patchwork.freedesktop.org/patch/msgid/1465916649-10228-1-git-send-email-cpaul@redhat.com
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 1c1a24d2db35d9e1b6d2a012a7d51af8be8011ac
Author: Lyude <cpaul@redhat.com>
Date:   Tue Jun 14 11:04:09 2016 -0400

    drm/i915/ilk: Don't disable SSC source if it's in use
    
    Thanks to Ville Syrjälä for pointing me towards the cause of this issue.
    
    Unfortunately one of the sideaffects of having the refclk for a DPLL set
    to SSC is that as long as it's set to SSC, the GPU will prevent us from
    powering down any of the pipes or transcoders using it. A couple of
    BIOSes enable SSC in both PCH_DREF_CONTROL and in the DPLL
    configurations. This causes issues on the first modeset, since we don't
    expect SSC to be left on and as a result, can't successfully power down
    the pipes or the transcoders using it. Here's an example from this Dell
    OptiPlex 990:
    
    [drm:intel_modeset_init] SSC enabled by BIOS, overriding VBT which says disabled
    [drm:intel_modeset_init] 2 display pipes available.
    [drm:intel_update_cdclk] Current CD clock rate: 400000 kHz
    [drm:intel_update_max_cdclk] Max CD clock rate: 400000 kHz
    [drm:intel_update_max_cdclk] Max dotclock rate: 360000 kHz
    vgaarb: device changed decodes: PCI:0000:00:02.0,olddecodes=io+mem,decodes=io+mem:owns=io+mem
    [drm:intel_crt_reset] crt adpa set to 0xf40000
    [drm:intel_dp_init_connector] Adding DP connector on port C
    [drm:intel_dp_aux_init] registering DPDDC-C bus for card0-DP-1
    [drm:ironlake_init_pch_refclk] has_panel 0 has_lvds 0 has_ck505 0
    [drm:ironlake_init_pch_refclk] Disabling SSC entirely
    … later we try committing the first modeset …
    [drm:intel_dump_pipe_config] [CRTC:26][modeset] config ffff88041b02e800 for pipe A
    [drm:intel_dump_pipe_config] cpu_transcoder: A
    …
    [drm:intel_dump_pipe_config] dpll_hw_state: dpll: 0xc4016001, dpll_md: 0x0, fp0: 0x20e08, fp1: 0x30d07
    [drm:intel_dump_pipe_config] planes on this crtc
    [drm:intel_dump_pipe_config] STANDARD PLANE:23 plane: 0.0 idx: 0 enabled
    [drm:intel_dump_pipe_config]     FB:42, fb = 800x600 format = 0x34325258
    [drm:intel_dump_pipe_config]     scaler:0 src (0, 0) 800x600 dst (0, 0) 800x600
    [drm:intel_dump_pipe_config] CURSOR PLANE:25 plane: 0.1 idx: 1 disabled, scaler_id = 0
    [drm:intel_dump_pipe_config] STANDARD PLANE:27 plane: 0.1 idx: 2 disabled, scaler_id = 0
    [drm:intel_get_shared_dpll] CRTC:26 allocated PCH DPLL A
    [drm:intel_get_shared_dpll] using PCH DPLL A for pipe A
    [drm:ilk_audio_codec_disable] Disable audio codec on port C, pipe A
    [drm:intel_disable_pipe] disabling pipe A
    ------------[ cut here ]------------
    WARNING: CPU: 1 PID: 130 at drivers/gpu/drm/i915/intel_display.c:1146 intel_disable_pipe+0x297/0x2d0 [i915]
    pipe_off wait timed out
    …
    ---[ end trace 94fc8aa03ae139e8 ]---
    [drm:intel_dp_link_down]
    [drm:ironlake_crtc_disable [i915]] *ERROR* failed to disable transcoder A
    
    Later modesets succeed since they reset the DPLL's configuration anyway,
    but this is enough to get stuck with a big fat warning in dmesg.
    
    A better solution would be to add refcounts for the SSC source, but for
    now leaving the source clock on should suffice.
    
    Changes since v4:
     - Fix calculation of final for systems with LVDS panels (fixes BUG() on
       CI test suite)
    Changes since v3:
     - Move temp variable into loop
     - Move checks for using_ssc_source to after we've figured out has_ck505
     - Add using_ssc_source to debug output
    Changes since v2:
     - Fix debug output for when we disable the CPU source
    Changes since v1:
     - Leave the SSC source clock on instead of just shutting it off on all
       of the DPLL configurations.
    
    Cc: stable@vger.kernel.org
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Lyude <cpaul@redhat.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: http://patchwork.freedesktop.org/patch/msgid/1465916649-10228-1-git-send-email-cpaul@redhat.com

commit 143aaef8aae2b53a5ab2d0e9d48c4ff368e82b16
Author: Ander Conselvan de Oliveira <ander.conselvan.de.oliveira@intel.com>
Date:   Fri May 20 15:47:06 2016 +0300

    drm/i915: Fix NULL pointer deference when out of PLLs in IVB
    
    In commit f9476a6c6d0c ("drm/i915: Refactor platform specifics out of
    intel_get_shared_dpll()"), the ibx_get_dpll() function lacked an error
    check, that can lead to a NULL pointer dereference when trying to enable
    three pipes.
    
    BUG: unable to handle kernel NULL pointer dereference at 0000000000000068
    IP: [<ffffffffa0482275>] intel_reference_shared_dpll+0x15/0x100 [i915]
    PGD cec87067 PUD d30ce067 PMD 0
    Oops: 0000 [#1] PREEMPT SMP
    Modules linked in: snd_hda_intel i915 drm_kms_helper drm intel_gtt sch_fq_codel cfg80211 binfmt_misc i2c_algo_bit cfbfillrect syscopyarea cfbimgblt sysfillrect sysimgblt fb_sys_fops cfbcopyarea intel_rapl iosf_mbi x86_pkg_temp_thermal coretemp agpgart kvm_intel snd_hda_codec_hdmi kvm iTCO_wdt snd_hda_codec_realtek snd_hda_codec_generic irqbypass aesni_intel aes_x86_64 glue_helper lrw gf128mul ablk_helper cryptd psmouse pcspkr snd_hda_codec i2c_i801 snd_hwdep snd_hda_core snd_pcm snd_timer lpc_ich mfd_core snd soundcore wmi evdev tpm_tis tpm [last unloaded: drm]
    CPU: 3 PID: 5810 Comm: kms_flip Tainted: G     U  W       4.6.0-test+ #3
    Hardware name:                  /DZ77BH-55K, BIOS BHZ7710H.86A.0100.2013.0517.0942 05/17/2013
    task: ffff8800d3908040 ti: ffff8801166c8000 task.ti: ffff8801166c8000
    RIP: 0010:[<ffffffffa0482275>]  [<ffffffffa0482275>] intel_reference_shared_dpll+0x15/0x100 [i915]
    RSP: 0018:ffff8801166cba60  EFLAGS: 00010246
    RAX: 0000000000000000 RBX: 0000000000000000 RCX: 0000000000000002
    RDX: 0000000000000001 RSI: ffff8800d07f1bf8 RDI: 0000000000000000
    RBP: ffff8801166cba88 R08: 0000000000000002 R09: ffff8800d32e5698
    R10: 0000000000000001 R11: ffff8800cc89ac88 R12: ffff8800d07f1bf8
    R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000
    FS:  00007f4c3fc8d8c0(0000) GS:ffff88011bcc0000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000000000000068 CR3: 00000000d3b4c000 CR4: 00000000001406e0
    Stack:
     0000000000000000 ffff8800d07f1bf8 0000000000000000 ffff8800d04c0000
     0000000000000000 ffff8801166cbaa8 ffffffffa04823a7 ffff8800d07f1bf8
     ffff8800d32e5698 ffff8801166cbab8 ffffffffa04840cf ffff8801166cbaf0
    Call Trace:
     [<ffffffffa04823a7>] ibx_get_dpll+0x47/0xa0 [i915]
     [<ffffffffa04840cf>] intel_get_shared_dpll+0x1f/0x50 [i915]
     [<ffffffffa046d080>] ironlake_crtc_compute_clock+0x280/0x430 [i915]
     [<ffffffffa0472ac0>] intel_crtc_atomic_check+0x240/0x320 [i915]
     [<ffffffffa03da18e>] drm_atomic_helper_check_planes+0x14e/0x1d0 [drm_kms_helper]
     [<ffffffffa0474a0c>] intel_atomic_check+0x5dc/0x1110 [i915]
     [<ffffffffa029d3aa>] drm_atomic_check_only+0x14a/0x660 [drm]
     [<ffffffffa029d086>] ? drm_atomic_set_crtc_for_connector+0x96/0x100 [drm]
     [<ffffffffa029d8d7>] drm_atomic_commit+0x17/0x60 [drm]
     [<ffffffffa03dc3b7>] restore_fbdev_mode+0x237/0x260 [drm_kms_helper]
     [<ffffffffa029c65a>] ? drm_modeset_lock_all_ctx+0x9a/0xb0 [drm]
     [<ffffffffa03de9b3>] drm_fb_helper_restore_fbdev_mode_unlocked+0x33/0x80 [drm_kms_helper]
     [<ffffffffa03dea2d>] drm_fb_helper_set_par+0x2d/0x50 [drm_kms_helper]
     [<ffffffffa03de93a>] drm_fb_helper_hotplug_event+0xaa/0xf0 [drm_kms_helper]
     [<ffffffffa03de9d6>] drm_fb_helper_restore_fbdev_mode_unlocked+0x56/0x80 [drm_kms_helper]
     [<ffffffffa0490f72>] intel_fbdev_restore_mode+0x22/0x80 [i915]
     [<ffffffffa04ba45e>] i915_driver_lastclose+0xe/0x20 [i915]
     [<ffffffffa02810de>] drm_lastclose+0x2e/0x130 [drm]
     [<ffffffffa028148c>] drm_release+0x2ac/0x4b0 [drm]
     [<ffffffff811a6b2d>] __fput+0xed/0x1f0
     [<ffffffff811a6c6e>] ____fput+0xe/0x10
     [<ffffffff81079156>] task_work_run+0x76/0xb0
     [<ffffffff8105aaab>] do_exit+0x3ab/0xc60
     [<ffffffff810a145f>] ? trace_hardirqs_on_caller+0x12f/0x1c0
     [<ffffffff8105c67e>] do_group_exit+0x4e/0xc0
     [<ffffffff8105c704>] SyS_exit_group+0x14/0x20
     [<ffffffff8158bb25>] entry_SYSCALL_64_fastpath+0x18/0xa8
    Code: 14 80 48 8d 34 90 b8 01 00 00 00 d3 e0 09 04 b3 5b 41 5c 5d c3 90 0f 1f 44 00 00 55 48 89 e5 41 57 41 56 49 89 fe 41 55 41 54 53 <44> 8b 67 68 48 89 f3 48 8b be 08 02 00 00 4c 8b 2e e8 15 9d fd
    RIP  [<ffffffffa0482275>] intel_reference_shared_dpll+0x15/0x100 [i915]
     RSP <ffff8801166cba60>
    CR2: 0000000000000068
    
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: drm-intel-fixes@lists.freedesktop.org
    Reported-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Fixes: f9476a6c6d0c ("drm/i915: Refactor platform specifics out of intel_get_shared_dpll()")
    Signed-off-by: Ander Conselvan de Oliveira <ander.conselvan.de.oliveira@intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Tested-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1463748426-5956-1-git-send-email-ander.conselvan.de.oliveira@intel.com
    (cherry picked from commit bb143165510661feda06fd99298b8b3a94af3046)
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>

commit c8ae067f2635be0f8c7e5db1bb74b757d623e05b
Merge: 2051877c4c85 1607f09c226d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Jun 7 20:41:36 2016 -0700

    Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs
    
    Pull vfs fixes from Al Viro:
     "Fixes for crap of assorted ages: EOPENSTALE one is 4.2+, autofs one is
      4.6, d_walk - 3.2+.
    
      The atomic_open() and coredump ones are regressions from this window"
    
    * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs:
      coredump: fix dumping through pipes
      fix a regression in atomic_open()
      fix d_walk()/non-delayed __d_free() race
      autofs braino fix for do_last()
      fix EOPENSTALE bug in do_last()

commit 1607f09c226d1378439c411baaaa020042750338
Author: Mateusz Guzik <mguzik@redhat.com>
Date:   Sun Jun 5 23:14:14 2016 +0200

    coredump: fix dumping through pipes
    
    The offset in the core file used to be tracked with ->written field of
    the coredump_params structure. The field was retired in favour of
    file->f_pos.
    
    However, ->f_pos is not maintained for pipes which leads to breakage.
    
    Restore explicit tracking of the offset in coredump_params. Introduce
    ->pos field for this purpose since ->written was already reused.
    
    Fixes: a00839395103 ("get rid of coredump_params->written").
    
    Reported-by: Zbigniew Jędrzejewski-Szmek <zbyszek@in.waw.pl>
    Signed-off-by: Mateusz Guzik <mguzik@redhat.com>
    Reviewed-by: Omar Sandoval <osandov@fb.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit 3d56c25e3bb0726a5c5e16fc2d9e38f8ed763085
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Tue Jun 7 21:26:55 2016 -0400

    fix d_walk()/non-delayed __d_free() race
    
    Ascend-to-parent logics in d_walk() depends on all encountered child
    dentries not getting freed without an RCU delay.  Unfortunately, in
    quite a few cases it is not true, with hard-to-hit oopsable race as
    the result.
    
    Fortunately, the fix is simiple; right now the rule is "if it ever
    been hashed, freeing must be delayed" and changing it to "if it
    ever had a parent, freeing must be delayed" closes that hole and
    covers all cases the old rule used to cover.  Moreover, pipes and
    sockets remain _not_ covered, so we do not introduce RCU delay in
    the cases which are the reason for having that delay conditional
    in the first place.
    
    Cc: stable@vger.kernel.org # v3.2+ (and watch out for __d_materialise_dentry())
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit fa6d0ba12a8eb6a2e9a1646c5816da307c1f93a7
Author: Willy Tarreau <w@1wt.eu>
Date:   Mon Jan 18 16:36:09 2016 +0100

    pipe: limit the per-user amount of pages allocated in pipes
    
    commit 759c01142a5d0f364a462346168a56de28a80f52 upstream.
    
    On no-so-small systems, it is possible for a single process to cause an
    OOM condition by filling large pipes with data that are never read. A
    typical process filling 4000 pipes with 1 MB of data will use 4 GB of
    memory. On small systems it may be tricky to set the pipe max size to
    prevent this from happening.
    
    This patch makes it possible to enforce a per-user soft limit above
    which new pipes will be limited to a single page, effectively limiting
    them to 4 kB each, as well as a hard limit above which no new pipes may
    be created for this user. This has the effect of protecting the system
    against memory abuse without hurting other users, and still allowing
    pipes to work correctly though with less data at once.
    
    The limit are controlled by two new sysctls : pipe-user-pages-soft, and
    pipe-user-pages-hard. Both may be disabled by setting them to zero. The
    default soft limit allows the default number of FDs per process (1024)
    to create pipes of the default size (64kB), thus reaching a limit of 64MB
    before starting to create only smaller pipes. With 256 processes limited
    to 1024 FDs each, this results in 1024*64kB + (256*1024 - 1024) * 4kB =
    1084 MB of memory allocated for a user. The hard limit is disabled by
    default to avoid breaking existing applications that make intensive use
    of pipes (eg: for splicing).
    
    Reported-by: socketpair@gmail.com
    Reported-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Mitigates: CVE-2013-4312 (Linux 2.0+)
    Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Moritz Muehlenhoff <moritz@wikimedia.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb143165510661feda06fd99298b8b3a94af3046
Author: Ander Conselvan de Oliveira <ander.conselvan.de.oliveira@intel.com>
Date:   Fri May 20 15:47:06 2016 +0300

    drm/i915: Fix NULL pointer deference when out of PLLs in IVB
    
    In commit f9476a6c6d0c ("drm/i915: Refactor platform specifics out of
    intel_get_shared_dpll()"), the ibx_get_dpll() function lacked an error
    check, that can lead to a NULL pointer dereference when trying to enable
    three pipes.
    
    BUG: unable to handle kernel NULL pointer dereference at 0000000000000068
    IP: [<ffffffffa0482275>] intel_reference_shared_dpll+0x15/0x100 [i915]
    PGD cec87067 PUD d30ce067 PMD 0
    Oops: 0000 [#1] PREEMPT SMP
    Modules linked in: snd_hda_intel i915 drm_kms_helper drm intel_gtt sch_fq_codel cfg80211 binfmt_misc i2c_algo_bit cfbfillrect syscopyarea cfbimgblt sysfillrect sysimgblt fb_sys_fops cfbcopyarea intel_rapl iosf_mbi x86_pkg_temp_thermal coretemp agpgart kvm_intel snd_hda_codec_hdmi kvm iTCO_wdt snd_hda_codec_realtek snd_hda_codec_generic irqbypass aesni_intel aes_x86_64 glue_helper lrw gf128mul ablk_helper cryptd psmouse pcspkr snd_hda_codec i2c_i801 snd_hwdep snd_hda_core snd_pcm snd_timer lpc_ich mfd_core snd soundcore wmi evdev tpm_tis tpm [last unloaded: drm]
    CPU: 3 PID: 5810 Comm: kms_flip Tainted: G     U  W       4.6.0-test+ #3
    Hardware name:                  /DZ77BH-55K, BIOS BHZ7710H.86A.0100.2013.0517.0942 05/17/2013
    task: ffff8800d3908040 ti: ffff8801166c8000 task.ti: ffff8801166c8000
    RIP: 0010:[<ffffffffa0482275>]  [<ffffffffa0482275>] intel_reference_shared_dpll+0x15/0x100 [i915]
    RSP: 0018:ffff8801166cba60  EFLAGS: 00010246
    RAX: 0000000000000000 RBX: 0000000000000000 RCX: 0000000000000002
    RDX: 0000000000000001 RSI: ffff8800d07f1bf8 RDI: 0000000000000000
    RBP: ffff8801166cba88 R08: 0000000000000002 R09: ffff8800d32e5698
    R10: 0000000000000001 R11: ffff8800cc89ac88 R12: ffff8800d07f1bf8
    R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000
    FS:  00007f4c3fc8d8c0(0000) GS:ffff88011bcc0000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 0000000000000068 CR3: 00000000d3b4c000 CR4: 00000000001406e0
    Stack:
     0000000000000000 ffff8800d07f1bf8 0000000000000000 ffff8800d04c0000
     0000000000000000 ffff8801166cbaa8 ffffffffa04823a7 ffff8800d07f1bf8
     ffff8800d32e5698 ffff8801166cbab8 ffffffffa04840cf ffff8801166cbaf0
    Call Trace:
     [<ffffffffa04823a7>] ibx_get_dpll+0x47/0xa0 [i915]
     [<ffffffffa04840cf>] intel_get_shared_dpll+0x1f/0x50 [i915]
     [<ffffffffa046d080>] ironlake_crtc_compute_clock+0x280/0x430 [i915]
     [<ffffffffa0472ac0>] intel_crtc_atomic_check+0x240/0x320 [i915]
     [<ffffffffa03da18e>] drm_atomic_helper_check_planes+0x14e/0x1d0 [drm_kms_helper]
     [<ffffffffa0474a0c>] intel_atomic_check+0x5dc/0x1110 [i915]
     [<ffffffffa029d3aa>] drm_atomic_check_only+0x14a/0x660 [drm]
     [<ffffffffa029d086>] ? drm_atomic_set_crtc_for_connector+0x96/0x100 [drm]
     [<ffffffffa029d8d7>] drm_atomic_commit+0x17/0x60 [drm]
     [<ffffffffa03dc3b7>] restore_fbdev_mode+0x237/0x260 [drm_kms_helper]
     [<ffffffffa029c65a>] ? drm_modeset_lock_all_ctx+0x9a/0xb0 [drm]
     [<ffffffffa03de9b3>] drm_fb_helper_restore_fbdev_mode_unlocked+0x33/0x80 [drm_kms_helper]
     [<ffffffffa03dea2d>] drm_fb_helper_set_par+0x2d/0x50 [drm_kms_helper]
     [<ffffffffa03de93a>] drm_fb_helper_hotplug_event+0xaa/0xf0 [drm_kms_helper]
     [<ffffffffa03de9d6>] drm_fb_helper_restore_fbdev_mode_unlocked+0x56/0x80 [drm_kms_helper]
     [<ffffffffa0490f72>] intel_fbdev_restore_mode+0x22/0x80 [i915]
     [<ffffffffa04ba45e>] i915_driver_lastclose+0xe/0x20 [i915]
     [<ffffffffa02810de>] drm_lastclose+0x2e/0x130 [drm]
     [<ffffffffa028148c>] drm_release+0x2ac/0x4b0 [drm]
     [<ffffffff811a6b2d>] __fput+0xed/0x1f0
     [<ffffffff811a6c6e>] ____fput+0xe/0x10
     [<ffffffff81079156>] task_work_run+0x76/0xb0
     [<ffffffff8105aaab>] do_exit+0x3ab/0xc60
     [<ffffffff810a145f>] ? trace_hardirqs_on_caller+0x12f/0x1c0
     [<ffffffff8105c67e>] do_group_exit+0x4e/0xc0
     [<ffffffff8105c704>] SyS_exit_group+0x14/0x20
     [<ffffffff8158bb25>] entry_SYSCALL_64_fastpath+0x18/0xa8
    Code: 14 80 48 8d 34 90 b8 01 00 00 00 d3 e0 09 04 b3 5b 41 5c 5d c3 90 0f 1f 44 00 00 55 48 89 e5 41 57 41 56 49 89 fe 41 55 41 54 53 <44> 8b 67 68 48 89 f3 48 8b be 08 02 00 00 4c 8b 2e e8 15 9d fd
    RIP  [<ffffffffa0482275>] intel_reference_shared_dpll+0x15/0x100 [i915]
     RSP <ffff8801166cba60>
    CR2: 0000000000000068
    
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: drm-intel-fixes@lists.freedesktop.org
    Reported-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Fixes: f9476a6c6d0c ("drm/i915: Refactor platform specifics out of intel_get_shared_dpll()")
    Signed-off-by: Ander Conselvan de Oliveira <ander.conselvan.de.oliveira@intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Tested-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1463748426-5956-1-git-send-email-ander.conselvan.de.oliveira@intel.com

commit f165d2834ceb3d5c29bebadadc27629bebf402ac
Author: Lyude <cpaul@redhat.com>
Date:   Wed May 25 14:11:02 2016 -0400

    drm/i915/ilk: Don't disable SSC source if it's in use
    
    Thanks to Ville Syrjälä for pointing me towards the cause of this issue.
    
    Unfortunately one of the sideaffects of having the refclk for a DPLL set
    to SSC is that as long as it's set to SSC, the GPU will prevent us from
    powering down any of the pipes or transcoders using it. A couple of
    BIOSes enable SSC in both PCH_DREF_CONTROL and in the DPLL
    configurations. This causes issues on the first modeset, since we don't
    expect SSC to be left on and as a result, can't successfully power down
    the pipes or the transcoders using it. Here's an example from this Dell
    OptiPlex 990:
    
    [drm:intel_modeset_init] SSC enabled by BIOS, overriding VBT which says disabled
    [drm:intel_modeset_init] 2 display pipes available.
    [drm:intel_update_cdclk] Current CD clock rate: 400000 kHz
    [drm:intel_update_max_cdclk] Max CD clock rate: 400000 kHz
    [drm:intel_update_max_cdclk] Max dotclock rate: 360000 kHz
    vgaarb: device changed decodes: PCI:0000:00:02.0,olddecodes=io+mem,decodes=io+mem:owns=io+mem
    [drm:intel_crt_reset] crt adpa set to 0xf40000
    [drm:intel_dp_init_connector] Adding DP connector on port C
    [drm:intel_dp_aux_init] registering DPDDC-C bus for card0-DP-1
    [drm:ironlake_init_pch_refclk] has_panel 0 has_lvds 0 has_ck505 0
    [drm:ironlake_init_pch_refclk] Disabling SSC entirely
    … later we try committing the first modeset …
    [drm:intel_dump_pipe_config] [CRTC:26][modeset] config ffff88041b02e800 for pipe A
    [drm:intel_dump_pipe_config] cpu_transcoder: A
    …
    [drm:intel_dump_pipe_config] dpll_hw_state: dpll: 0xc4016001, dpll_md: 0x0, fp0: 0x20e08, fp1: 0x30d07
    [drm:intel_dump_pipe_config] planes on this crtc
    [drm:intel_dump_pipe_config] STANDARD PLANE:23 plane: 0.0 idx: 0 enabled
    [drm:intel_dump_pipe_config]     FB:42, fb = 800x600 format = 0x34325258
    [drm:intel_dump_pipe_config]     scaler:0 src (0, 0) 800x600 dst (0, 0) 800x600
    [drm:intel_dump_pipe_config] CURSOR PLANE:25 plane: 0.1 idx: 1 disabled, scaler_id = 0
    [drm:intel_dump_pipe_config] STANDARD PLANE:27 plane: 0.1 idx: 2 disabled, scaler_id = 0
    [drm:intel_get_shared_dpll] CRTC:26 allocated PCH DPLL A
    [drm:intel_get_shared_dpll] using PCH DPLL A for pipe A
    [drm:ilk_audio_codec_disable] Disable audio codec on port C, pipe A
    [drm:intel_disable_pipe] disabling pipe A
    ------------[ cut here ]------------
    WARNING: CPU: 1 PID: 130 at drivers/gpu/drm/i915/intel_display.c:1146 intel_disable_pipe+0x297/0x2d0 [i915]
    pipe_off wait timed out
    …
    ---[ end trace 94fc8aa03ae139e8 ]---
    [drm:intel_dp_link_down]
    [drm:ironlake_crtc_disable [i915]] *ERROR* failed to disable transcoder A
    
    Later modesets succeed since they reset the DPLL's configuration anyway,
    but this is enough to get stuck with a big fat warning in dmesg.
    
    A better solution would be to add refcounts for the SSC source, but for
    now leaving the source clock on should suffice.
    
    Changes since v3:
     - Move temp variable into loop
     - Move checks for using_ssc_source to after we've figured out has_ck505
     - Add using_ssc_source to debug output
    Changes since v2:
     - Fix debug output for when we disable the CPU source
    Changes since v1:
     - Leave the SSC source clock on instead of just shutting it off on all
       of the DPLL configurations.
    
    Cc: stable@vger.kernel.org
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Lyude <cpaul@redhat.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Link: http://patchwork.freedesktop.org/patch/msgid/1464199863-9397-1-git-send-email-cpaul@redhat.com

commit 9bd18728a3f2edee33d4d241d20f394c798fb414
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri May 13 10:10:42 2016 -0700

    drm/i915: Ignore stale wm register values on resume on ilk-bdw (v2)
    
    When we resume the watermark register may contain some BIOS leftovers,
    or just the hardware reset values. We should ignore those as the
    pipes will be off anyway, and so frobbing around with intermediate
    watermarks doesn't make much sense.
    
    In fact I think we should just throw the skip_intermediate_wm flag
    out, and instead properly sanitize the "active" watermarks to match
    the current plane and pipe states. The actual wm state readout might
    also need a bit of work. But for now, let's continue with the
    skip_intermediate_wm to keep the fix more minimal.
    
    Fixes this sort of errors on resume
    [drm:ilk_validate_pipe_wm] LP0 watermark invalid
    [drm:intel_crtc_atomic_check] No valid intermediate pipe watermarks are possible
    [drm:intel_display_resume [i915]] *ERROR* Restoring old state failed with -22
    and a boatload of subsequent modeset BAT fails on my ILK.
    
    v2:
     - Rebase; the SKL atomic WM patches that just landed changed the WM
       structure fields in intel_crtc_state slightly.  (Matt)
    
    Cc: Matt Roper <matthew.d.roper@intel.com>
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Fixes: ed4a6a7ca853 ("drm/i915: Add two-stage ILK-style watermark programming (v11)")
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Matt Roper <matthew.d.roper@intel.com>
    Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1463159442-20478-1-git-send-email-matthew.d.roper@intel.com
    (cherry picked from commit e3d5457c7caabb77b3f1d0b09c4a63362e9b04d2)
    [Jani: rebase on drm-next while cherry-picking]
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>

commit e3d5457c7caabb77b3f1d0b09c4a63362e9b04d2
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri May 13 10:10:42 2016 -0700

    drm/i915: Ignore stale wm register values on resume on ilk-bdw (v2)
    
    When we resume the watermark register may contain some BIOS leftovers,
    or just the hardware reset values. We should ignore those as the
    pipes will be off anyway, and so frobbing around with intermediate
    watermarks doesn't make much sense.
    
    In fact I think we should just throw the skip_intermediate_wm flag
    out, and instead properly sanitize the "active" watermarks to match
    the current plane and pipe states. The actual wm state readout might
    also need a bit of work. But for now, let's continue with the
    skip_intermediate_wm to keep the fix more minimal.
    
    Fixes this sort of errors on resume
    [drm:ilk_validate_pipe_wm] LP0 watermark invalid
    [drm:intel_crtc_atomic_check] No valid intermediate pipe watermarks are possible
    [drm:intel_display_resume [i915]] *ERROR* Restoring old state failed with -22
    and a boatload of subsequent modeset BAT fails on my ILK.
    
    v2:
     - Rebase; the SKL atomic WM patches that just landed changed the WM
       structure fields in intel_crtc_state slightly.  (Matt)
    
    Cc: Matt Roper <matthew.d.roper@intel.com>
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Fixes: ed4a6a7ca853 ("drm/i915: Add two-stage ILK-style watermark programming (v11)")
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Matt Roper <matthew.d.roper@intel.com>
    Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1463159442-20478-1-git-send-email-matthew.d.roper@intel.com

commit 734fa01f3a17ac80d2d53cee0b05b246c03df0e4
Author: Matt Roper <matthew.d.roper@intel.com>
Date:   Thu May 12 15:11:40 2016 -0700

    drm/i915/gen9: Calculate watermarks during atomic 'check' (v2)
    
    Moving watermark calculation into the check phase will allow us to to
    reject display configurations for which there are no valid watermark
    values before we start trying to program the hardware (although those
    tests will come in a subsequent patch).
    
    Another advantage of moving this calculation to the check phase is that
    we can calculate the watermarks in a single shot as part of the atomic
    transaction.  The watermark interfaces we inherited from our legacy
    modesetting days are a bit broken in the atomic design because they use
    per-crtc entry points but actually re-calculate and re-program something
    that is really more of a global state.  That worked okay in the legacy
    modesetting world because operations only ever updated a single CRTC at
    a time.  However in the atomic world, a transaction can involve multiple
    CRTC's, which means we wind up computing and programming the watermarks
    NxN times (where N is the number of CRTC's involved).  With this patch
    we eliminate the redundant re-calculation of watermark data for atomic
    states (which was the cause of the WARN_ON(!wm_changed) problems that
    have plagued us for a while).
    
    We still need to work on the 'commit' side of watermark handling so that
    we aren't doing redundant NxN programming of watermarks, but that's
    content for future patches.
    
    v2:
     - Bail out of skl_write_wm_values() if the CRTC isn't active.  Now that
       we set dirty_pipes to ~0 if the active pipes change (because
       we need to deal with DDB changes), we can now wind up here for
       disabled pipes, whereas we couldn't before.
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=89055
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=92181
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
    Tested-by: Daniel Stone <daniels@collabora.com>
    Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1463091100-13747-1-git-send-email-matthew.d.roper@intel.com

commit 98d39494d3759f84ce50e505059bc80f54c1c47b
Author: Matt Roper <matthew.d.roper@intel.com>
Date:   Thu May 12 07:06:03 2016 -0700

    drm/i915/gen9: Compute DDB allocation at atomic check time (v4)
    
    Calculate the DDB blocks needed to satisfy the current atomic
    transaction at atomic check time.  This is a prerequisite to calculating
    SKL watermarks during the 'check' phase and rejecting any configurations
    that we can't find valid watermarks for.
    
    Due to the nature of DDB allocation, it's possible for the addition of a
    new CRTC to make the watermark configuration already in use on another,
    unchanged CRTC become invalid.  A change in which CRTC's are active
    triggers a recompute of the entire DDB, which unfortunately means we
    need to disallow any other atomic commits from racing with such an
    update.  If the active CRTC's change, we need to grab the lock on all
    CRTC's and run all CRTC's through their 'check' handler to recompute and
    re-check their per-CRTC DDB allocations.
    
    Note that with this patch we only compute the DDB allocation but we
    don't actually use the computed values during watermark programming yet.
    For ease of review/testing/bisecting, we still recompute the DDB at
    watermark programming time and just WARN() if it doesn't match the
    precomputed values.  A future patch will switch over to using the
    precomputed values once we're sure they're being properly computed.
    
    Another clarifying note:  DDB allocation itself shouldn't ever fail with
    the algorithm we use today (i.e., we have enough DDB blocks on BXT to
    support the minimum needs of the worst-case scenario of every pipe/plane
    enabled at full size).  However the watermarks calculations based on the
    DDB may fail and we'll be moving those to the atomic check as well in
    future patches.
    
    v2:
     - Skip DDB calculations in the rare case where our transaction doesn't
       actually touch any CRTC's at all.  Assuming at least one CRTC state
       is present in our transaction, then it means we can't race with any
       transactions that would update dev_priv->active_crtcs (which requires
       _all_ CRTC locks).
    
    v3:
     - Also calculate DDB during initial hw readout, to prevent using
       incorrect bios values. (Maarten)
    
    v4:
     - Use new distrust_bios_wm flag instead of skip_initial_wm (which was
       never actually set).
     - Set intel_state->active_pipe_changes instead of just realloc_pipes
    
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Cc: Lyude Paul <cpaul@redhat.com>
    Cc: Radhakrishna Sripada <radhakrishna.sripada@intel.com>
    Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1463061971-19638-10-git-send-email-matthew.d.roper@intel.com

commit ac208a8b9a5553acace164870b8b7e86f024b99f
Author: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
Date:   Tue May 10 10:57:07 2016 +0100

    drm/i915: Do not use a bitfield for INTEL_INFO->num_pipes
    
    It just makes more work for the compiler and generates more code.
    
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>

commit e49734bb47000aba674b7720ffa8ba37a31d7098
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Thu Jan 14 14:53:35 2016 +0200

    drm/i915: Use the active wm config for merging on ILK-BDW
    
    commit d890565c44447db08fd9d07f5b02928a07a88c7e upstream.
    
    ilk_program_watermarks() is supposed to merge the active watermarks from
    all pipes. Thus we need to use the active config too instead of some
    precomputed stuff.
    
    Fixes: aa363136866c ("drm/i915: Calculate watermark configuration during atomic check (v2)")
    Cc: Matt Roper <matthew.d.roper@intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Matt Roper <matthew.d.roper@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1452776015-22076-2-git-send-email-ville.syrjala@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9a655db0201ef523683d700cb3f4508c08bc9d8c
Author: Jeeja KP <jeeja.kp@intel.com>
Date:   Thu Apr 28 18:45:28 2016 +0530

    ASoC: Intel: Skylake: Suspend PCMs when marked as active suspend
    
    For 'ignore_suspend' cases we need to keep DSP and pipes On, but
    can suspend the stream and pause the DMA as we are not rendering
    data during the suspended time.
    
    For this we can check the dai widget ignore_suspend flag in
    trigger suspend/resume, and start and stop the host DMA and host
    copier pipelines.
    
    Signed-off-by: Jeeja KP <jeeja.kp@intel.com>
    Signed-off-by: Vinod Koul <vinod.koul@intel.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 2a032e307d35402306c6464537b8bc6a0a3ac91d
Author: Willy Tarreau <w@1wt.eu>
Date:   Mon Jan 18 16:36:09 2016 +0100

    pipe: limit the per-user amount of pages allocated in pipes
    
    commit 759c01142a5d0f364a462346168a56de28a80f52 upstream.
    
    On no-so-small systems, it is possible for a single process to cause an
    OOM condition by filling large pipes with data that are never read. A
    typical process filling 4000 pipes with 1 MB of data will use 4 GB of
    memory. On small systems it may be tricky to set the pipe max size to
    prevent this from happening.
    
    This patch makes it possible to enforce a per-user soft limit above
    which new pipes will be limited to a single page, effectively limiting
    them to 4 kB each, as well as a hard limit above which no new pipes may
    be created for this user. This has the effect of protecting the system
    against memory abuse without hurting other users, and still allowing
    pipes to work correctly though with less data at once.
    
    The limit are controlled by two new sysctls : pipe-user-pages-soft, and
    pipe-user-pages-hard. Both may be disabled by setting them to zero. The
    default soft limit allows the default number of FDs per process (1024)
    to create pipes of the default size (64kB), thus reaching a limit of 64MB
    before starting to create only smaller pipes. With 256 processes limited
    to 1024 FDs each, this results in 1024*64kB + (256*1024 - 1024) * 4kB =
    1084 MB of memory allocated for a user. The hard limit is disabled by
    default to avoid breaking existing applications that make intensive use
    of pipes (eg: for splicing).
    
    Reported-by: socketpair@gmail.com
    Reported-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Mitigates: CVE-2013-4312 (Linux 2.0+)
    Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 3f10e82fe10d87d2fd558ef51c34abaf2ee538d2
Author: Jani Nikula <jani.nikula@intel.com>
Date:   Thu Apr 7 12:48:17 2016 +0300

    drm/i915: add INTEL_GEN() helper shorthand for INTEL_INFO()->gen
    
    Sudden realization:
    
    $ grep -ho "INTEL_INFO([^)]*)->[a-zA-Z0-9_]*" *.[ch] | sed 's/.*->//' |\
      sort | uniq -c | sort -rn | head -5
      446 gen
       24 num_pipes
       10 ring_mask
        9 color
        4 subslice_per_slice
    
    Acked-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1460022497-29304-1-git-send-email-jani.nikula@intel.com

commit ad22d10654ea0e5eb46fa46ae3f716bfc1d43ce3
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Tue Apr 12 18:56:14 2016 +0300

    drm/i915: Fix up vlv/chv display irq setup
    
    The vlv/chv display irq setup was a bit of mess after I ran out of steam
    when working on it last. Fix it up so that we just have a _reset() and
    _postinstall() hooks for the display irqs, and use those consistently.
    
    v2: Clear out pipestat_irq_mask[] and PIPE_FIFO_UNDERRUN_STATUS in
        vlv_display_irq_reset() (Imre)
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Imre Deak <imre.deak@intel.com> (v1)
    Link: http://patchwork.freedesktop.org/patch/msgid/1460476574-1921-1-git-send-email-ville.syrjala@linux.intel.com

commit 1204d5baa8781a1bf968244bd2b0f15ed861e573
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Apr 1 21:53:18 2016 +0300

    drm/i915: Make sure LP1+ watermarks levels are preserved when going from 1 to 2 pipes
    
    Once again ILK is unhappy if we clear out the LP1+ watermark levels
    outright, and instead we must disable the levels we don't want while
    still leaving the actual programmed watermark levels intact.
    
    Fixes underruns on the already enabled pipe when programming watermarks
    while enabling the second pipe.
    
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: Matt Roper <matthew.d.roper@intel.com>
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=93787
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1459536799-18109-3-git-send-email-ville.syrjala@linux.intel.com
    Reviewed-by: Patrik Jakobsson <patrik.jakobsson@linux.intel.com>

commit c231775c2df845abc193666a5aec552c3ad3740f
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Tue Mar 15 16:39:56 2016 +0200

    drm/i915: Implement WaPixelRepeatModeFixForC0:chv
    
    DPLL_MD(PIPE_C) is AWOL on CHV. Instead of fixing it someone added
    chicken bits to propagate the pixel multiplier from DPLL_MD(PIPE_B)
    to either pipe B or C. So do that to make pixel repeat work on pipes
    B and C. Pipe A is fine without any tricks.
    
    Fortunately the pixel repeat propagation appears to be a oneshot
    operation, so once the value has been written we can clear the
    chicken bits. So it is still possible to drive pipe B and C with
    different pixel multipliers simultaneosly.
    
    Looks like DPLL_VGA_MODE_DIS must also be set in DPLL(PIPE_B)
    for this to work. But since we keep that bit always set in all
    DPLLs there's no problem.
    
    This of course means we can't reliably read out the pixel multiplier
    for pipes B and C. That would make the state checker unhappy, so I
    added shadow copies of those registers in to dev_priv. The other
    option would have been to skip pixel multiplier, dpll_md an dotclock
    checks entirely on CHV, but that feels like a serious loss of cross
    checking, so just pretending that we have working DPLL MD registers
    seemed better. Obviously with the shadow copies we can't detect if
    the pixel multiplier was properly configured, nor can we take over
    its state from the BIOS, but hopefully people won't have displays
    that would be limitd to such crappy modes.
    
    There is one strange flicker still remaining. It's visible on
    pipe C/HDMID when HDMIB is enabled while driven by pipe B.
    It doesn't occur if pipe A drives HDMIB, nor is there any glitch
    on pipe B/HDMIB when port C/HDMID starts up. I don't have a board
    with HDMIC so not sure if it happens there too. So I'm not sure
    if it's somehow tied in with this strange linkage between pipe B
    and C. Sadly I was unable to find an enable sequence that would
    avoid the glitch, but at least it's not fatal ie. the output
    recovers afterwards.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1458052809-23426-4-git-send-email-ville.syrjala@linux.intel.com
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>

commit 2e85ab4fed5762f86ae12c0347e64b89412191ca
Author: Jani Nikula <jani.nikula@intel.com>
Date:   Fri Mar 18 17:05:44 2016 +0200

    drm/i915/bxt: allow dsi on any pipe
    
    BXT isn't as limited as BYT and CHT regarding DSI pipes and ports.
    
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/0375f1e237092d0ae3f39ecfc5702024918acbfd.1458313400.git.jani.nikula@intel.com

commit 6b93e9c89ee553c1f062cd5c7dcd35e06846568f
Author: Jani Nikula <jani.nikula@intel.com>
Date:   Tue Mar 15 21:51:12 2016 +0200

    drm/i915/bxt: fix dsi hw state pipe readout
    
    BXT isn't as limited as BYT and CHT regarding DSI pipes and ports.
    
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/8bea85b86aaf7a15f854a656bf8d3208a3afe0bd.1458070700.git.jani.nikula@intel.com

commit 842e03076ffb655e35c72f6c95fe216cc856f42b
Author: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
Date:   Wed Mar 2 15:48:01 2016 +0100

    drm/i915: Update state before setting watermarks, v2.
    
    When intel_update_watermarks is called on skylake from the hw
    state readout disable function it calls intel_update_watermarks.
    intel_update_watermarks inspects crtc->state, which should be
    set to disabled.
    
    This wasn't the case, and this resulted in a divide-by-zero in
    skl_update_wm when intel_update_watermarks got called.
    
     ------------[ cut here ]------------
     WARNING: CPU: 1 PID: 295 at drivers/gpu/drm/i915/intel_pm.c:2834
    skl_update_pipe_wm+0x102/0x8c0 [i915]()
     WARN_ON(!config->num_pipes_active)
     Modules linked in: coretemp i915(+)
    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     CPU: 1 PID: 295 Comm: systemd-udevd Tainted: G     U  W       4.5.0-rc4
    -xxxxxx #25
     Hardware name: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      0000000000000000 ffff88003777f5a8 ffffffff813485c2 ffff88003777f5f0
      ffffffffa0236240 ffff88003777f5e0 ffffffff81050fce ffff8800aa420000
      ffff8800aba18000 ffff8800aba18000 ffff880037304c00 ffff8800aa420000
     Call Trace:
      [<ffffffff813485c2>] dump_stack+0x67/0x95
      [<ffffffff81050fce>] warn_slowpath_common+0x9e/0xc0
      [<ffffffff8105103c>] warn_slowpath_fmt+0x4c/0x50
      [<ffffffff8106945e>] ? flush_work+0x8e/0x280
      [<ffffffff810693d5>] ? flush_work+0x5/0x280
      [<ffffffffa016add2>] skl_update_pipe_wm+0x102/0x8c0 [i915]
      [<ffffffffa016b96f>] skl_update_wm+0xff/0x5f0 [i915]
      [<ffffffff810928ee>] ? trace_hardirqs_on_caller+0x15e/0x1d0
      [<ffffffff8109296d>] ? trace_hardirqs_on+0xd/0x10
      [<ffffffffa016ce6e>] intel_update_watermarks+0x1e/0x30 [i915]
      [<ffffffffa01d3ee2>] intel_crtc_disable_noatomic+0xd2/0x150 [i915]
      [<ffffffffa01dd3d2>] intel_modeset_setup_hw_state+0xdd2/0xde0 [i915]
      [<ffffffffa01dfd83>] intel_modeset_init+0x15a3/0x1950 [i915]
      [<ffffffffa02160b6>] i915_driver_load+0x13c6/0x1720 [i915]
      [<ffffffff81522160>] ? add_sysfs_fw_map_entry+0x9b/0x9b
      [<ffffffffa00b15ef>] drm_dev_register+0x6f/0xb0 [drm]
      [<ffffffffa00b3b3a>] drm_get_pci_dev+0x10a/0x1d0 [drm]
      [<ffffffffa01582d9>] i915_pci_probe+0x49/0x50 [i915]
      [<ffffffff8138ae30>] pci_device_probe+0x80/0xf0
      [<ffffffff8143e2ac>] driver_probe_device+0x1bc/0x3d0
      [<ffffffff8143e526>] __driver_attach+0x66/0x90
      [<ffffffff8143e4c0>] ? driver_probe_device+0x3d0/0x3d0
      [<ffffffff8143be3b>] bus_for_each_dev+0x5b/0xa0
      [<ffffffff8143db3e>] driver_attach+0x1e/0x20
      [<ffffffff8143d461>] bus_add_driver+0x151/0x270
      [<ffffffff8143eabc>] driver_register+0x8c/0xd0
      [<ffffffff8138a2ed>] __pci_register_driver+0x5d/0x60
      [<ffffffffa00b3c58>] drm_pci_init+0x58/0xf0 [drm]
      [<ffffffff8109296d>] ? trace_hardirqs_on+0xd/0x10
      [<ffffffffa02aa000>] ? 0xffffffffa02aa000
      [<ffffffffa02aa094>] i915_init+0x94/0x9b [i915]
      [<ffffffff81000423>] do_one_initcall+0x113/0x1f0
      [<ffffffff810a4b21>] ? rcu_read_lock_sched_held+0x61/0x90
      [<ffffffff811601dc>] ? kmem_cache_alloc_trace+0x1cc/0x280
      [<ffffffff8111110a>] do_init_module+0x60/0x1c8
      [<ffffffff810c731b>] load_module+0x1ceb/0x2410
      [<ffffffff810c3a60>] ? store_uevent+0x40/0x40
      [<ffffffff811763d1>] ? kernel_read+0x41/0x60
      [<ffffffff810c7c1d>] SYSC_finit_module+0x8d/0xa0
      [<ffffffff810c7c4e>] SyS_finit_module+0xe/0x10
      [<ffffffff815f1e97>] entry_SYSCALL_64_fastpath+0x12/0x6f
     ---[ end trace 1149e9ab3695a423 ]---
     ------------[ cut here ]------------
    
    Changes since v1:
    - Clear state before calling any function after .crtc_disable.
    
    Reported-by: Tvrtko Ursulin <tvrtko.ursulin@linux.intel.com>
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/56D6FD21.7020907@linux.intel.com
    Tested-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Reviewed-by: Ander Conselvan de Oliveira <conselvan2@gmail.com>

commit ac7f11c6106507f1e09a970a03904c323ae741b8
Author: Ander Conselvan de Oliveira <ander.conselvan.de.oliveira@intel.com>
Date:   Tue Mar 8 17:46:19 2016 +0200

    drm/i915: Move shared dpll struct definitions to separate header file
    
    Move the declarations related to shared dplls from i915_drv.h to their
    own header file.
    
    The code that became the shared dpll infrastructre was first introcude
    in commit ee7b9f93fd96 ("drm/i915: manage PCH PLLs separately from
    pipes"), hence the 2012-2016 copyright years in the new header file.
    
    Signed-off-by: Ander Conselvan de Oliveira <ander.conselvan.de.oliveira@intel.com>
    Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1457451987-17466-6-git-send-email-ander.conselvan.de.oliveira@intel.com

commit acad889f9eb86ba8830de33cc7a391e9f68ca5ea
Author: Jani Nikula <jani.nikula@intel.com>
Date:   Tue Mar 8 21:00:56 2016 +0200

    drm/i915/bxt: add missing DSI power domain to power well 1
    
    The DSI power domain was missing from BXT power well 1 definitions,
    failing to get the power well for DSI transcoders. As pipe A is in the
    same power well as DSI transcoders, the problem should only occur with
    pipes B and C.
    
    According to Ville, this is basically a nop since pw1 is under dmc
    control. But given that we still have this stuff defined here, it's
    clearly correct to include DSI here.
    
    Cc: Ramalingam C <ramalingam.c@intel.com>
    Cc: Deepak M <m.deepak@intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1457463656-29357-1-git-send-email-jani.nikula@intel.com

commit 92375b85b70395c8180991084c05e8d78e55d066
Author: Willy Tarreau <w@1wt.eu>
Date:   Mon Jan 18 16:36:09 2016 +0100

    pipe: limit the per-user amount of pages allocated in pipes
    
    commit 759c01142a5d0f364a462346168a56de28a80f52 upstream.
    
    On no-so-small systems, it is possible for a single process to cause an
    OOM condition by filling large pipes with data that are never read. A
    typical process filling 4000 pipes with 1 MB of data will use 4 GB of
    memory. On small systems it may be tricky to set the pipe max size to
    prevent this from happening.
    
    This patch makes it possible to enforce a per-user soft limit above
    which new pipes will be limited to a single page, effectively limiting
    them to 4 kB each, as well as a hard limit above which no new pipes may
    be created for this user. This has the effect of protecting the system
    against memory abuse without hurting other users, and still allowing
    pipes to work correctly though with less data at once.
    
    The limit are controlled by two new sysctls : pipe-user-pages-soft, and
    pipe-user-pages-hard. Both may be disabled by setting them to zero. The
    default soft limit allows the default number of FDs per process (1024)
    to create pipes of the default size (64kB), thus reaching a limit of 64MB
    before starting to create only smaller pipes. With 256 processes limited
    to 1024 FDs each, this results in 1024*64kB + (256*1024 - 1024) * 4kB =
    1084 MB of memory allocated for a user. The hard limit is disabled by
    default to avoid breaking existing applications that make intensive use
    of pipes (eg: for splicing).
    
    Reported-by: socketpair@gmail.com
    Reported-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Mitigates: CVE-2013-4312 (Linux 2.0+)
    Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    [bwh: Backported to 3.2: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 74f8c94db4565dc3b89bc9571e999227a98e972f
Author: Willy Tarreau <w@1wt.eu>
Date:   Mon Jan 18 16:36:09 2016 +0100

    pipe: limit the per-user amount of pages allocated in pipes
    
    commit 759c01142a5d0f364a462346168a56de28a80f52 upstream.
    
    On no-so-small systems, it is possible for a single process to cause an
    OOM condition by filling large pipes with data that are never read. A
    typical process filling 4000 pipes with 1 MB of data will use 4 GB of
    memory. On small systems it may be tricky to set the pipe max size to
    prevent this from happening.
    
    This patch makes it possible to enforce a per-user soft limit above
    which new pipes will be limited to a single page, effectively limiting
    them to 4 kB each, as well as a hard limit above which no new pipes may
    be created for this user. This has the effect of protecting the system
    against memory abuse without hurting other users, and still allowing
    pipes to work correctly though with less data at once.
    
    The limit are controlled by two new sysctls : pipe-user-pages-soft, and
    pipe-user-pages-hard. Both may be disabled by setting them to zero. The
    default soft limit allows the default number of FDs per process (1024)
    to create pipes of the default size (64kB), thus reaching a limit of 64MB
    before starting to create only smaller pipes. With 256 processes limited
    to 1024 FDs each, this results in 1024*64kB + (256*1024 - 1024) * 4kB =
    1084 MB of memory allocated for a user. The hard limit is disabled by
    default to avoid breaking existing applications that make intensive use
    of pipes (eg: for splicing).
    
    Reported-by: socketpair@gmail.com
    Reported-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Mitigates: CVE-2013-4312 (Linux 2.0+)
    Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Luis Henriques <luis.henriques@canonical.com>

commit 6831f3e3c640ad4ca3f93601a26ee4ecf210aefa
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Feb 19 20:47:31 2016 +0200

    drm/i915: Add for_each_pipe_masked()
    
    for_each_pipe_masked() can be used to iterate over the pipes
    included in the user provided pipe mask. Removes a few lines of
    duplicated code.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1455907651-16397-2-git-send-email-ville.syrjala@linux.intel.com
    Reviewed-by: Imre Deak <imre.deak@intel.com>

commit aae8ba844495473cb11298ad263e26e656e6e4b4
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Feb 19 20:47:30 2016 +0200

    drm/i915: Make sure pipe interrupts are processed before turning off power well on BDW+
    
    Starting from BDW the DE_PIPE interrupts for pipe B and C belong to the
    relevant display power well. So we should make sure we've finished
    processing them before turning off the power well.
    
    The pipe interrupts shouldn't really happen at this point anymore since
    we've already shut down the planes/pipes/whatnot, but being a bit
    paranoid shouldn't hurt.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1455907651-16397-1-git-send-email-ville.syrjala@linux.intel.com
    Reviewed-by: Imre Deak <imre.deak@intel.com>

commit cb2517653fccaf9f9b4ae968c7ee005c1bbacdc5
Author: Mel Gorman <mgorman@techsingularity.net>
Date:   Fri Feb 5 09:08:36 2016 +0000

    sched/debug: Make schedstats a runtime tunable that is disabled by default
    
    schedstats is very useful during debugging and performance tuning but it
    incurs overhead to calculate the stats. As such, even though it can be
    disabled at build time, it is often enabled as the information is useful.
    
    This patch adds a kernel command-line and sysctl tunable to enable or
    disable schedstats on demand (when it's built in). It is disabled
    by default as someone who knows they need it can also learn to enable
    it when necessary.
    
    The benefits are dependent on how scheduler-intensive the workload is.
    If it is then the patch reduces the number of cycles spent calculating
    the stats with a small benefit from reducing the cache footprint of the
    scheduler.
    
    These measurements were taken from a 48-core 2-socket
    machine with Xeon(R) E5-2670 v3 cpus although they were also tested on a
    single socket machine 8-core machine with Intel i7-3770 processors.
    
    netperf-tcp
                               4.5.0-rc1             4.5.0-rc1
                                 vanilla          nostats-v3r1
    Hmean    64         560.45 (  0.00%)      575.98 (  2.77%)
    Hmean    128        766.66 (  0.00%)      795.79 (  3.80%)
    Hmean    256        950.51 (  0.00%)      981.50 (  3.26%)
    Hmean    1024      1433.25 (  0.00%)     1466.51 (  2.32%)
    Hmean    2048      2810.54 (  0.00%)     2879.75 (  2.46%)
    Hmean    3312      4618.18 (  0.00%)     4682.09 (  1.38%)
    Hmean    4096      5306.42 (  0.00%)     5346.39 (  0.75%)
    Hmean    8192     10581.44 (  0.00%)    10698.15 (  1.10%)
    Hmean    16384    18857.70 (  0.00%)    18937.61 (  0.42%)
    
    Small gains here, UDP_STREAM showed nothing intresting and neither did
    the TCP_RR tests. The gains on the 8-core machine were very similar.
    
    tbench4
                                     4.5.0-rc1             4.5.0-rc1
                                       vanilla          nostats-v3r1
    Hmean    mb/sec-1         500.85 (  0.00%)      522.43 (  4.31%)
    Hmean    mb/sec-2         984.66 (  0.00%)     1018.19 (  3.41%)
    Hmean    mb/sec-4        1827.91 (  0.00%)     1847.78 (  1.09%)
    Hmean    mb/sec-8        3561.36 (  0.00%)     3611.28 (  1.40%)
    Hmean    mb/sec-16       5824.52 (  0.00%)     5929.03 (  1.79%)
    Hmean    mb/sec-32      10943.10 (  0.00%)    10802.83 ( -1.28%)
    Hmean    mb/sec-64      15950.81 (  0.00%)    16211.31 (  1.63%)
    Hmean    mb/sec-128     15302.17 (  0.00%)    15445.11 (  0.93%)
    Hmean    mb/sec-256     14866.18 (  0.00%)    15088.73 (  1.50%)
    Hmean    mb/sec-512     15223.31 (  0.00%)    15373.69 (  0.99%)
    Hmean    mb/sec-1024    14574.25 (  0.00%)    14598.02 (  0.16%)
    Hmean    mb/sec-2048    13569.02 (  0.00%)    13733.86 (  1.21%)
    Hmean    mb/sec-3072    12865.98 (  0.00%)    13209.23 (  2.67%)
    
    Small gains of 2-4% at low thread counts and otherwise flat.  The
    gains on the 8-core machine were slightly different
    
    tbench4 on 8-core i7-3770 single socket machine
    Hmean    mb/sec-1        442.59 (  0.00%)      448.73 (  1.39%)
    Hmean    mb/sec-2        796.68 (  0.00%)      794.39 ( -0.29%)
    Hmean    mb/sec-4       1322.52 (  0.00%)     1343.66 (  1.60%)
    Hmean    mb/sec-8       2611.65 (  0.00%)     2694.86 (  3.19%)
    Hmean    mb/sec-16      2537.07 (  0.00%)     2609.34 (  2.85%)
    Hmean    mb/sec-32      2506.02 (  0.00%)     2578.18 (  2.88%)
    Hmean    mb/sec-64      2511.06 (  0.00%)     2569.16 (  2.31%)
    Hmean    mb/sec-128     2313.38 (  0.00%)     2395.50 (  3.55%)
    Hmean    mb/sec-256     2110.04 (  0.00%)     2177.45 (  3.19%)
    Hmean    mb/sec-512     2072.51 (  0.00%)     2053.97 ( -0.89%)
    
    In constract, this shows a relatively steady 2-3% gain at higher thread
    counts. Due to the nature of the patch and the type of workload, it's
    not a surprise that the result will depend on the CPU used.
    
    hackbench-pipes
                             4.5.0-rc1             4.5.0-rc1
                               vanilla          nostats-v3r1
    Amean    1        0.0637 (  0.00%)      0.0660 ( -3.59%)
    Amean    4        0.1229 (  0.00%)      0.1181 (  3.84%)
    Amean    7        0.1921 (  0.00%)      0.1911 (  0.52%)
    Amean    12       0.3117 (  0.00%)      0.2923 (  6.23%)
    Amean    21       0.4050 (  0.00%)      0.3899 (  3.74%)
    Amean    30       0.4586 (  0.00%)      0.4433 (  3.33%)
    Amean    48       0.5910 (  0.00%)      0.5694 (  3.65%)
    Amean    79       0.8663 (  0.00%)      0.8626 (  0.43%)
    Amean    110      1.1543 (  0.00%)      1.1517 (  0.22%)
    Amean    141      1.4457 (  0.00%)      1.4290 (  1.16%)
    Amean    172      1.7090 (  0.00%)      1.6924 (  0.97%)
    Amean    192      1.9126 (  0.00%)      1.9089 (  0.19%)
    
    Some small gains and losses and while the variance data is not included,
    it's close to the noise. The UMA machine did not show anything particularly
    different
    
    pipetest
                                 4.5.0-rc1             4.5.0-rc1
                                   vanilla          nostats-v2r2
    Min         Time        4.13 (  0.00%)        3.99 (  3.39%)
    1st-qrtle   Time        4.38 (  0.00%)        4.27 (  2.51%)
    2nd-qrtle   Time        4.46 (  0.00%)        4.39 (  1.57%)
    3rd-qrtle   Time        4.56 (  0.00%)        4.51 (  1.10%)
    Max-90%     Time        4.67 (  0.00%)        4.60 (  1.50%)
    Max-93%     Time        4.71 (  0.00%)        4.65 (  1.27%)
    Max-95%     Time        4.74 (  0.00%)        4.71 (  0.63%)
    Max-99%     Time        4.88 (  0.00%)        4.79 (  1.84%)
    Max         Time        4.93 (  0.00%)        4.83 (  2.03%)
    Mean        Time        4.48 (  0.00%)        4.39 (  1.91%)
    Best99%Mean Time        4.47 (  0.00%)        4.39 (  1.91%)
    Best95%Mean Time        4.46 (  0.00%)        4.38 (  1.93%)
    Best90%Mean Time        4.45 (  0.00%)        4.36 (  1.98%)
    Best50%Mean Time        4.36 (  0.00%)        4.25 (  2.49%)
    Best10%Mean Time        4.23 (  0.00%)        4.10 (  3.13%)
    Best5%Mean  Time        4.19 (  0.00%)        4.06 (  3.20%)
    Best1%Mean  Time        4.13 (  0.00%)        4.00 (  3.39%)
    
    Small improvement and similar gains were seen on the UMA machine.
    
    The gain is small but it stands to reason that doing less work in the
    scheduler is a good thing. The downside is that the lack of schedstats and
    tracepoints may be surprising to experts doing performance analysis until
    they find the existence of the schedstats= parameter or schedstats sysctl.
    It will be automatically activated for latencytop and sleep profiling to
    alleviate the problem. For tracepoints, there is a simple warning as it's
    not safe to activate schedstats in the context when it's known the tracepoint
    may be wanted but is unavailable.
    
    Signed-off-by: Mel Gorman <mgorman@techsingularity.net>
    Reviewed-by: Matt Fleming <matt@codeblueprint.co.uk>
    Reviewed-by: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mike Galbraith <mgalbraith@suse.de>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/1454663316-22048-1-git-send-email-mgorman@techsingularity.net
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 718a42b5eaddb3180e2589590732d61e047858fb
Author: Dharageswari.R <dharageswari.r@intel.com>
Date:   Fri Feb 5 12:19:06 2016 +0530

    ASoC: Intel: Skylake: Add skl_tplg_be_get_cpr_module() helper
    
    An I2S port can be connected to multiple BE pipes, get module config
    only for the active BE pipe.
    
    This helpers helps to do that and is used in subsequent patches
    
    Signed-off-by: Dharageswari R <dharageswari.r@intel.com>
    Signed-off-by: Vinod Koul <vinod.koul@intel.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 9946f70906eebf2a305d0b189de52eec8ba39649
Author: Jeeja KP <jeeja.kp@intel.com>
Date:   Wed Feb 3 17:59:50 2016 +0530

    ASoC: Intel: Skylake: Fix not to stop sink pipe in pga pmd event
    
    We should not stop the sink pipe in it's pmd handler for a mixin
    module as this module may still be connected to other pipes.
    
    This will be stopped and freed by current implementation on last
    connected pipe unbind.
    
    Signed-off-by: Jeeja KP <jeeja.kp@intel.com>
    Signed-off-by: Vinod Koul <vinod.koul@intel.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 9cf3049e21e4e6873aae45df19c11f7243e2f03f
Author: Jeeja KP <jeeja.kp@intel.com>
Date:   Wed Feb 3 17:59:48 2016 +0530

    ASoC: Intel: Skylake: Fix return of skl_get_queue_index
    
    In unbind modules, the skl_get_queue_index() can return error
    if the pin is dynamic and module is not bound yet. So instead
    of returning error this check should return success as modules
    is not yet bound. This will let the module be bound when connected
    pipes are enabled and will bind this as well.
    
    So change the return value to 0
    
    Signed-off-by: Jeeja KP <jeeja.kp@intel.com>
    Signed-off-by: Vinod Koul <vinod.koul@intel.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit bf4f2fb05f89ac50de024b1a5dd0cd0db4a8f845
Author: Patrik Jakobsson <patrik.jakobsson@linux.intel.com>
Date:   Wed Jan 20 15:31:20 2016 +0100

    drm/i915/skl/kbl: Add support for pipe fusing
    
    On SKL and KBL we can have pipe A/B/C disabled by fuse settings. The
    pipes must be fused in descending order (e.g. C, B+C, A+B+C). We simply
    decrease info->num_pipes if we find a valid fused out config.
    
    v2: Don't store the pipe disabled mask in device info (Damien)
    
    v3: Don't check FUSE_STRAP register for pipe c disabled
    
    Cc: Damien Lespiau <damien.lespiau@intel.com>
    Signed-off-by: Patrik Jakobsson <patrik.jakobsson@linux.intel.com>
    Reviewed-by: Damien Lespiau <damien.lespiau@intel.com>
    [Jani: fixed some checkpatch indentation complaints]
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1453300280-10661-1-git-send-email-patrik.jakobsson@linux.intel.com

commit 010cf73d4648df35585c0c326123b04ab79e4573
Author: Paulo Zanoni <paulo.r.zanoni@intel.com>
Date:   Tue Jan 19 11:35:48 2016 -0200

    drm/i915/fbc: rewrite the multiple_pipes_ok() code for locking
    
    Older FBC platforms have this restriction where FBC can't be enabled
    if multiple pipes are enabled. In the current code, we disable FBC
    before the second pipe becomes visible.
    
    One of the problems with this code is that the current
    multiple_pipes_ok() implementation just iterates through all CRTCs
    looking at their states, but it doesn't make sure that the state
    locks are grabbed. It also can't just grab the locks for every CRTC
    since this would kill one of the biggest advantages of atomic
    modesetting.
    
    After the recent FBC changes, we now have the appropriate locks for
    the given CRTC, so we can just try to maintain the state of each CRTC
    and update it once intel_fbc_pre_update is called.
    
    As a last note, I don't have gen 2/3 machines to test this code. My
    current plan is to enable FBC on just the newer platforms, so this
    patch is just an attempt to get the gen 2/3 code at least looking
    sane, so if one day someone decide to fix FBC on these platforms, they
    may have less work to do.
    
    Not-tested-by: Paulo Zanoni <paulo.r.zanoni@intel.com> (only on HSW+)
    Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Signed-off-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1453210558-7875-16-git-send-email-paulo.r.zanoni@intel.com

commit eadee0ce6fd33defe449c97e671bf83fa230b5de
Merge: 6fb11e6508ea 117aa41e8020
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Jan 22 10:24:03 2016 -0800

    Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs
    
    Pull more vfs updates from Al Viro:
     "Embarrassing braino fix + pipe page accounting + fixing an eyesore in
      find_filesystem() (checking that s1 is equal to prefix of s2 of given
      length can be done in many ways, but "compare strlen(s1) with length
      and then do strncmp()" is not a good one...)"
    
    * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs:
      [regression] fix braino in fs/dlm/user.c
      pipe: limit the per-user amount of pages allocated in pipes
      find_filesystem(): simplify comparison

commit 759c01142a5d0f364a462346168a56de28a80f52
Author: Willy Tarreau <w@1wt.eu>
Date:   Mon Jan 18 16:36:09 2016 +0100

    pipe: limit the per-user amount of pages allocated in pipes
    
    On no-so-small systems, it is possible for a single process to cause an
    OOM condition by filling large pipes with data that are never read. A
    typical process filling 4000 pipes with 1 MB of data will use 4 GB of
    memory. On small systems it may be tricky to set the pipe max size to
    prevent this from happening.
    
    This patch makes it possible to enforce a per-user soft limit above
    which new pipes will be limited to a single page, effectively limiting
    them to 4 kB each, as well as a hard limit above which no new pipes may
    be created for this user. This has the effect of protecting the system
    against memory abuse without hurting other users, and still allowing
    pipes to work correctly though with less data at once.
    
    The limit are controlled by two new sysctls : pipe-user-pages-soft, and
    pipe-user-pages-hard. Both may be disabled by setting them to zero. The
    default soft limit allows the default number of FDs per process (1024)
    to create pipes of the default size (64kB), thus reaching a limit of 64MB
    before starting to create only smaller pipes. With 256 processes limited
    to 1024 FDs each, this results in 1024*64kB + (256*1024 - 1024) * 4kB =
    1084 MB of memory allocated for a user. The hard limit is disabled by
    default to avoid breaking existing applications that make intensive use
    of pipes (eg: for splicing).
    
    Reported-by: socketpair@gmail.com
    Reported-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Mitigates: CVE-2013-4312 (Linux 2.0+)
    Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit d890565c44447db08fd9d07f5b02928a07a88c7e
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Thu Jan 14 14:53:35 2016 +0200

    drm/i915: Use the active wm config for merging on ILK-BDW
    
    ilk_program_watermarks() is supposed to merge the active watermarks from
    all pipes. Thus we need to use the active config too instead of some
    precomputed stuff.
    
    Fixes: aa363136866c ("drm/i915: Calculate watermark configuration during atomic check (v2)")
    Cc: Matt Roper <matthew.d.roper@intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Matt Roper <matthew.d.roper@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1452776015-22076-2-git-send-email-ville.syrjala@linux.intel.com

commit 0dbf5f20652108106cb822ad7662c786baaa03ff
Author: Stanislav Kinsburskiy <skinsbursky@virtuozzo.com>
Date:   Tue Dec 15 19:41:31 2015 +0400

    fcntl: allow to set O_DIRECT flag on pipe
    
    With packetized mode for pipes, it's not possible to set O_DIRECT on pipe file
    via sys_fcntl, because of unsupported sanity checks.
    Ability to set this flag will be used by CRIU to migrate packetized pipes.
    
    v2:
    Fixed typos and mode variable to check.
    
    Signed-off-by: Stanislav Kinsburskiy <skinsbursky@virtuozzo.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit 746bfe63bba37ad55956b7377c9af494e7e28929
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Mon Dec 21 18:40:04 2015 +0900

    usb: gadget: renesas_usb3: add support for Renesas USB3.0 peripheral controller
    
    R-Car H3 has USB3.0 peripheral controllers. This controller's has the
    following features:
     - Supports super, high and full speed
     - Contains 30 pipes for bulk or interrupt transfer
     - Contains dedicated DMA controller
    
    This driver doesn't support the dedicated DMAC for now.
    
    Acked-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

commit 565602d7501a3e83580289d7d6da9b15838cfbe3
Author: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
Date:   Thu Dec 10 12:33:57 2015 +0100

    drm/i915: Do not acquire crtc state to check clock during modeset, v4.
    
    Parallel modesets are still not allowed, but this will allow updating
    a different crtc during a modeset if the clock is not changed.
    
    Additionally when all pipes are DPMS off the cdclk will be lowered
    to the minimum allowed.
    
    Changes since v1:
    - Add dev_priv->active_crtcs for tracking which crtcs are active.
    - Rename min_cdclk to min_pixclk and move to dev_priv.
    - Add a active_crtcs mask which is updated atomically.
    - Add intel_atomic_state->modeset which is set on modesets.
    - Commit new pixclk/active_crtcs right after state swap.
    Changes since v2:
    - Make the changes related to max_pixel_rate calculations more readable.
    Changes since v3:
    - Add cherryview and missing WARN_ON to readout.
    
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Reviewed-by: Mika Kahola <mika.kahola@intel.com>

commit d2ab8ad9713de1bd5e0da187263e35b2eea57e1c
Author: Thierry Reding <treding@nvidia.com>
Date:   Tue Dec 15 12:20:51 2015 +0100

    drm/imx: Make pipe number unsigned
    
    There's no reason whatsoever why this should ever be negative. The same
    goes for the number of pipes added to the DRM device.
    
    Cc: Philipp Zabel <p.zabel@pengutronix.de>
    Acked-by: Philipp Zabel <p.zabel@pengutronix.de>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Boris Brezillon <boris.brezillon@free-electrons.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1450178476-26284-4-git-send-email-boris.brezillon@free-electrons.com
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 51bce5bc38bdb79c0f7ab33f1fe91a68ef1afa77
Merge: eb227c554ee6 03a97d825573
Author: Dave Airlie <airlied@redhat.com>
Date:   Tue Dec 15 11:01:04 2015 +1000

    Merge tag 'drm-intel-next-2015-12-04-1' of git://anongit.freedesktop.org/drm-intel into drm-next
    
    This is the "fix igt basic test set issues" edition.
    - more PSR fixes from Rodrigo, getting closer
    - tons of fifo underrun fixes from Ville
    - runtime pm fixes from Imre, Daniel Stone
    - fix SDE interrupt handling properly (Jani Nikula)
    - hsw/bdw fdi modeset sequence fixes (Ville)
    - "don't register bad VGA connectors and fall over" fixes (Ville)
    - more fbc fixes from Paulo
    - and a grand total of exactly one feature item: Implement dma-buf/fence based
      cross-driver sync in the i915 pageflip path (Alex Goins)
    
    * tag 'drm-intel-next-2015-12-04-1' of git://anongit.freedesktop.org/drm-intel: (70 commits)
      drm/i915: Update DRIVER_DATE to 20151204
      drm/i915/skl: Add SKL GT4 PCI IDs
      Revert "drm/i915: Extend LRC pinning to cover GPU context writeback"
      drm/i915: Correct the Ref clock value for BXT
      drm/i915: Restore skl_gt3 device info
      drm/i915: Fix RPS pointer passed from wait_ioctl to i915_wait_request
      Revert "drm/i915: Remove superfluous NULL check"
      drm/i915: Clean up device info structure definitions
      drm/i915: Remove superfluous NULL check
      drm/i915: Handle cdclk limits on broadwell.
      i915: wait for fence in prepare_plane_fb
      i915: wait for fence in mmio_flip_work_func
      drm/i915: Extend LRC pinning to cover GPU context writeback
      drm/i915/guc: Clean up locks in GuC
      drm/i915: only recompress FBC after flushing a drawing operation
      drm/i915: get rid of FBC {,de}activation messages
      drm/i915: kill fbc.uncompressed_size
      drm/i915: use a single intel_fbc_work struct
      drm/i915: check for FBC planes in the same place as the pipes
      drm/i915: alloc/free the FBC CFB during enable/disable
      ...

commit e6cd6dc104fc3611326bf69df92090b6b7c78f60
Author: Paulo Zanoni <paulo.r.zanoni@intel.com>
Date:   Fri Oct 16 17:55:40 2015 -0300

    drm/i915: check for FBC planes in the same place as the pipes
    
    This moves the pre-gen4 check from update() to enable(). The HAS_DDI
    in the original code is not needed since only gen 2/3 have the plane
    swapping code.
    
    v2: Rebase.
    v3: Extract fbc_on_plane_a_only() (Chris).
    
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/

commit e6d900239e7aee6e4c4cd863b2b9bbcc62ec71e1
Author: Kumar, Mahesh <mahesh1.kumar@intel.com>
Date:   Fri Oct 23 09:41:34 2015 -0700

    drm/i915/skl: Correct other-pipe watermark update condition check (v2)
    
    If ddb allocation for planes in current CRTC is changed, that doesn't
    lead to ddb allocation change for other CRTCs, because our DDB allocation
    is not dynamic according to plane parameters, ddb is allocated according
    to number of CRTC enabled, & divided equally among CTRC's.
    
    In current condition check during Watermark calculation, if number of
    plane/ddb allocation changes for current CRTC, Watermark for other pipes
    are recalculated. But there is no change in DDB allocation of other pipe
    so watermark is also not changed, This leads to warning messages.
    WARN_ON(!wm_changed)
    
    This patch corrects this and check if DDB allocation for pipes is changed,
    then only recalculate watermarks.
    
    v2 (by Matt): Rebased to latest -nightly and fixed a typo
    
    Signed-off-by: Kumar, Mahesh <mahesh1.kumar@intel.com>
    Reviewed-by(v1): Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Matt Roper <matthew.d.roper@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 6fec766283333f1a29066ceddab0d2c18410a71e
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Tue Nov 10 16:16:17 2015 +0200

    drm/i915: Use intel_dp->DP in eDP PLL setup
    
    Use intel_dp->DP in the eDP PLL setup, instead of doing RMWs.
    
    To do this we need to move DP_AUDIO_OUTPUT_ENABLE setup to happen later,
    so that we don't enable audio accidentally while configuring the PLL.
    
    Note that actually we already enabled audio before the port due to
    the double port register write magic required by VLV/CHV from
    7b713f50d78b6 ("drm/i915: Fix eDP link training when switching pipes on VLV/CHV")
    So that gets changed now to keep audio off as long as the port is off.
    
    Also intel_dp_link_down() must be made to update intel_dp->DP so that we
    don't re-enable the port by accident when turning off the PLL. This is
    safe now that we don't call intel_dp_link_down() during link retraining.
    
    v2: Add a note about the audio vs. port enable (Daniel)
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/1447164977-32315-1-git-send-email-ville.syrjala@linux.intel.com
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>

commit 81b088ca87d76d7edacd0f1e3468fd24e6434b2b
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Oct 30 19:21:31 2015 +0200

    drm/i915: Re-enable PCH FIO underrun reporting after pipe has been disabled
    
    Some hardware (IVB/HSW and CPT/PPT) have a shared error interrupt for
    all the relevant underrun bits, so in order to keep the error interrupt
    enabled, we need to have underrun reporting enabled on all PCH
    transocders. Currently we leave the underrun reporting disabled when
    the pipe is off, which means we won't get any underrun interrupts
    when only a subset of the pipes are active.
    
    Fix the problem by re-enabling the underrun reporting after the pipe has
    been disabled. And to avoid the spurious underruns during pipe enable,
    disable the underrun reporting before embarking on the pipe enable
    sequence. So this way we have the error reporting disabled while
    running through the modeset sequence.
    
    v2: Re-enable PCH FIFO underrun reporting unconditionally on pre-HSW
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Jesse Barnes <jbarnes@virtuousgeek.org> (v1)
    Link: http://patchwork.freedesktop.org/patch/msgid/1446225691-10928-1-git-send-email-ville.syrjala@linux.intel.com

commit 15d17170b4e44c5768c3d32b093cd393c4dbc158
Author: Christophe Ricard <christophe.ricard@gmail.com>
Date:   Mon Oct 26 07:50:11 2015 +0100

    NFC: st21nfca: Add support for proprietary commands
    
    Add support for proprietary commands useful mainly
    for factory testings.
    
    Here is a list:
    
    - FACTORY_MODE: Allow to set the driver into a mode where no
      secure element are activated. It does not consider any
      NFC_ATTR_VENDOR_DATA.
    - HCI_CLEAR_ALL_PIPES: Allow to execute a HCI clear all pipes
      command. It does not consider any NFC_ATTR_VENDOR_DATA.
    - HCI_DM_PUT_DATA: Allow to configure specific CLF registry as
      for example RF trimmings or low level drivers configurations
      (I2C, SPI, SWP).
    - HCI_DM_UPDATE_AID: Allow to configure an AID routing into the
      CLF routing table following RF technology, CLF mode or protocol.
    - HCI_DM_GET_INFO: Allow to retrieve CLF information.
    - HCI_DM_GET_DATA: Allow to retrieve CLF configurable data such as
      low level drivers configurations or RF trimmings.
    - HCI_DM_LOAD: Allow to load a firmware into the CLF. A complete
      packet can be more than 8KB.
    - HCI_DM_RESET: Allow to run a CLF reset in order to "commit" CLF
      configuration changes without CLF power off.
    - HCI_GET_PARAM: Allow to retrieve an HCI CLF parameter (for example
      the white list).
    - HCI_DM_FIELD_GENERATOR: Allow to generate different kind of RF
      technology. When using this command to anti-collision is done.
    - HCI_LOOPBACK: Allow to echo a command and test the Dh to CLF
      connectivity.
    
    Signed-off-by: Christophe Ricard <christophe-h.ricard@st.com>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

commit b1fa4dc4ffef843bda17f26bbf54fb5d8bc23d2b
Author: Christophe Ricard <christophe.ricard@gmail.com>
Date:   Sun Oct 25 22:54:36 2015 +0100

    NFC: st-nci: Add support for proprietary commands
    
    Add support for proprietary commands useful mainly for
    factory testings. Here is a list:
    
    - FACTORY_MODE: Allow to set the driver into a mode where
      no secure element are activated. It does not consider any
      NFC_ATTR_VENDOR_DATA.
    - HCI_CLEAR_ALL_PIPES: Allow to execute a HCI clear all pipes
      command. It does not consider any NFC_ATTR_VENDOR_DATA.
    - HCI_DM_PUT_DATA: Allow to configure specific CLF registry
      like for example RF trimmings or low level drivers
      configurations (I2C, SPI, SWP).
    - HCI_DM_UPDATE_AID: Allow to configure an AID routing into the
      CLF routing table following RF technology, CLF mode or protocol.
    - HCI_DM_GET_INFO: Allow to retrieve CLF information.
    - HCI_DM_GET_DATA: Allow to retrieve CLF configurable data such as
      low level drivers configurations or RF trimmings.
    - HCI_DM_DIRECT_LOAD: Allow to load a firmware into the CLF.
      A complete packet can be more than 8KB.
    - HCI_DM_RESET: Allow to run a CLF reset in order to "commit" CLF
      configuration changes without CLF power off.
    - HCI_GET_PARAM: Allow to retrieve an HCI CLF parameter (for example
      the white list).
    - HCI_DM_FIELD_GENERATOR: Allow to generate different kind of RF
      technology. When using this command to anti-collision is done.
    - HCI_LOOPBACK: Allow to echo a command and test the Dh to CLF
      connectivity.
    - HCI_DM_VDC_MEASUREMENT_VALUE: Allow to measure the field applied
      on the CLF antenna. A value between 0 and 0x0f is returned. 0 is
      maximum.
    - HCI_DM_FWUPD_START: Allow to put CLF into firmware update mode.
      It is a specific CLF command as there is no GPIO for this.
    - HCI_DM_FWUPD_END:  Allow to complete firmware update.
    - HCI_DM_VDC_VALUE_COMPARISON: Allow to compare the field applied
      on the CLF antenna to a reference value.
    - MANUFACTURER_SPECIFIC: Allow to retrieve manufacturer specific data
      received during a NCI_CORE_INIT_CMD.
    
    Signed-off-by: Christophe Ricard <christophe-h.ricard@st.com>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

commit ba723199d18eeb5021cd6ace4aaf90670d6b3133
Author: Christophe Ricard <christophe.ricard@gmail.com>
Date:   Sun Oct 25 22:54:35 2015 +0100

    NFC: st21nfca: Fix st21nfca_gates offset
    
    It is useless to start from index 0 when looking for a gate
    because only dynamic pipes are retrieved with
    ST21NFCA_DM_GETINFO(ST21NFCA_DM_GETINFO_PIPE_LIST).
    
    The first dynamic pipe is present at index 3.
    
    Signed-off-by: Christophe Ricard <christophe-h.ricard@st.com>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

commit d3f13c558f2501d4bd0212030f692bc56fbcb755
Author: Christophe Ricard <christophe.ricard@gmail.com>
Date:   Sun Oct 25 22:54:34 2015 +0100

    NFC: st-nci: Fix st_nci_gates offset
    
    It is useless to start from index 0 when looking for a gate
    because only dynamic pipes are retrieved with
    ST_NCI_DM_GETINFO(ST_NCI_DM_GETINFO_PIPE_LIST).
    
    The first dynamic pipe is present at index 3.
    
    Signed-off-by: Christophe Ricard <christophe-h.ricard@st.com>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

commit 92d108b6f4fcabf45df5fa9631cfc4ada35e9ab1
Author: Christophe Ricard <christophe.ricard@gmail.com>
Date:   Sun Oct 25 22:54:31 2015 +0100

    NFC: st21nfca: Keep st21nfca_gates unchanged in load_session
    
    We need to keep initial st_nci_gates values in order for
    nfc_hci_dev_connect_gates to create and open pipe when necessary.
    
    For example after a firmware update CLF pipes are cleared. Changing
    pipe values in st21nfca_gates was causing nfc_hci_dev_connect_gates
    not using accurate pipes value.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Christophe Ricard <christophe-h.ricard@st.com>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

commit 22c84c5b23932161546b7b16c61a6eb85bf587b8
Author: Christophe Ricard <christophe.ricard@gmail.com>
Date:   Sun Oct 25 22:54:30 2015 +0100

    NFC: st-nci: Keep st_nci_gates unchanged in load_session
    
    We need to keep initial st_nci_gates values in order for
    nci_hci_dev_connect_gates to create and open pipe when necessary.
    
    For example after a firmware update CLF pipes are cleared. Changing
    pipe values in st_nci_gates was causing nci_hci_dev_connect_gates
    not using accurate pipes value.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Christophe Ricard <christophe-h.ricard@st.com>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

commit a1b0b9415817c14d207921582f269d03f848b69f
Author: Christophe Ricard <christophe.ricard@gmail.com>
Date:   Sun Oct 25 22:54:25 2015 +0100

    NFC: nci: Create pipe on specific gate in nci_hci_connect_gate
    
    Some gates might need to have their pipes explicitly created.
    Add a call to nci_hci_create_pipe in nci_hci_connect_gate for
    every gate that is different than NCI_HCI_LINK_MGMT_GATE or
    NCI_HCI_ADMIN_GATE.
    
    In case of an error when opening a pipe, like in hci layer,
    delete the pipe if it was created.
    
    Signed-off-by: Christophe Ricard <christophe-h.ricard@st.com>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

commit 8a49943f5bc5ff4f835d50451ecf2380eab44d2e
Author: Christophe Ricard <christophe.ricard@gmail.com>
Date:   Sun Oct 25 22:54:24 2015 +0100

    NFC: nci: Call nci_hci_clear_all_pipes at HCI initial activation.
    
    When session_id is filled to 0xff, the pipe configuration is
    probably incorrect and needs to be cleared.
    
    Signed-off-by: Christophe Ricard <christophe-h.ricard@st.com>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

commit fa6fbadea5d3618339fae8f9d5136a470bad4fa7
Author: Christophe Ricard <christophe.ricard@gmail.com>
Date:   Sun Oct 25 22:54:23 2015 +0100

    NFC: nci: add nci_hci_clear_all_pipes functions
    
    nci_hci_clear_all_pipes might be use full in some cases
    for example after a firmware update.
    
    Signed-off-by: Christophe Ricard <christophe-h.ricard@st.com>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

commit 468f9d2903bcf23e50663679eab5a18da5b886f6
Author: Javier Martinez Canillas <javier@osg.samsung.com>
Date:   Thu Oct 8 09:54:44 2015 +0200

    drm/i915/irq: Fix kernel-doc warnings
    
    Add the dev parameter for the functions i915_enable_asle_pipestat() and
    i915_reset_and_wakeup() to the kernel-doc to fix the following warnings:
    
    .//drivers/gpu/drm/i915/i915_irq.c:586: warning: No description found for parameter 'dev'
    .//drivers/gpu/drm/i915/i915_irq.c:2400: warning: No description found for parameter 'dev'
    
    Signed-off-by: Javier Martinez Canillas <javier@osg.samsung.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit d93f8e550f44ed1f54285f77f40f7962a3f25267
Author: Vinod Koul <vinod.koul@intel.com>
Date:   Wed Oct 7 11:31:54 2015 +0100

    ASoC: Intel: Skylake: add DSP platform widget event handlers
    
    The Skylake driver topology model tries to model the firmware
    rule for pipeline and module creation.
    The creation rule is:
     - Create Pipe
     - Add modules to Pipe
     - Connect the modules (bind)
     - Start the pipes
    
    Similarly destroy rule is:
     - Stop the pipe
     - Disconnect it (unbind)
     - Delete the pipe
    
    In driver we use Mixer, as there will always be ONE mixer in a
    pipeline to model a pipe. The modules in pipe are modelled as PGA
    widgets.  The DAPM sequencing rules (mixer and then PGA) are used
    to create the sequence DSP expects as depicted above, and then
    widget handlers for PMU and PMD events help in that.
    
    This patch adds widget event handlers for PRE/POST PMU and
    PRE/POST PMD event for mixer and pga modules.  These event
    handlers invoke pipeline creation, destroy, module creation,
    module bind, unbind and pipeline bind unbind
    
    Event handler sequencing is implement to target the DSP FW
    sequence expectations to enable path from source to sink pipe for
    Playback/Capture.
    
    Signed-off-by: Jeeja KP <jeeja.kp@intel.com>
    Signed-off-by: Hardik T Shah <hardik.t.shah@intel.com>
    Signed-off-by: Subhransu S. Prusty <subhransu.s.prusty@intel.com>
    Signed-off-by: Vinod Koul <vinod.koul@intel.com>
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 5119dd1e3f7e84073dea4d53322f2fd99f0d0d8b
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Tue Sep 29 18:21:19 2015 +0900

    usb: renesas_usbhs: Add support for R-Car H3
    
    This patch adds a compatible string to support for R-Car H3.
    
    Since the HS-USB controller of R-Car H3 is almost the same specification
    with R-Car Gen2 (these have 16 pipes and usb-dmac), this patch
    sets the "type" of renesas_usbhs_driver_param to USBHS_TYPE_RCAR_GEN2.
    
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Acked-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f5f6afa85aa82a8ee59072f2d09f2b381f24c871
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Tue Sep 29 18:21:19 2015 +0900

    usb: renesas_usbhs: Add support for R-Car H3
    
    This patch adds a compatible string to support for R-Car H3.
    
    Since the HS-USB controller of R-Car H3 is almost the same specification
    with R-Car Gen2 (these have 16 pipes and usb-dmac), this patch
    sets the "type" of renesas_usbhs_driver_param to USBHS_TYPE_RCAR_GEN2.
    
    Acked-by: Geert Uytterhoeven <geert+renesas@glider.be>
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

commit adda50b8b32bd559906d82fa32caeaf6c9306f59
Author: Bob Paauwe <bob.j.paauwe@intel.com>
Date:   Tue Jul 21 10:42:53 2015 -0700

    drm/i915/skl: Don't clear all watermarks when updating. (v2)
    
    Clearing the watermarks for all pipes/planes when updating the
    watermarks for a single CRTC change seems like the wrong thing to
    do here. As is, this code will ony update any pipe/plane watermarks
    that need updating and leave the remaining set to zero.  Later, the
    watermark checks in check_wm_state() will flag these zero'd out pipe/plane
    watermarks and throw errors.
    
    By clearing only the watermark values associated with the specific crtc
    the other watermark values may remain unchanged.
    
    v2: Make sure all the dirty flags are cleared. Damien
        Clear all values assoicated with crtc/pipe being updated.  Damien
    
    Signed-off-by: Bob Paauwe <bob.j.paauwe@intel.com>
    Reviewed-by: Damien Lespiau <damien.lespiau@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 0f64614dde172e4f4b2734a55091a4d307863cbb
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Aug 26 19:39:18 2015 +0300

    drm/i915: Fix clock readout when pipes are enabled w/o ports
    
    The BIOS sometimes likes to enable pipes w/o any ports, at least on
    older machines. Currently we fail to assign anything sensible to
    crtc->hwmode.crtc_clock which leads to complaints from the vblank code.
    Deal with active pipes w/o ports and assign something sensible to
    crtc_clock in i9xx_get_pipe_config(). The encoder .get_config() will
    override this if the port is enabled.
    
    Gets rid of rest of these on my gen4:
    [drm:drm_calc_timestamping_constants [drm]] *ERROR* crtc 24: Can't calculate constants, dotclock = 0!
    [drm:i915_get_vblank_timestamp] crtc 1 is disabled
    
    v2: Fill out crtc_clock already in i9xx_get_pipe_config() (Maarten)
    
    Cc: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit f8bcbe62acd0e1ce9004b83e98a4af87ae385dcf
Author: Robert Jarzmik <robert.jarzmik@free.fr>
Date:   Sat Aug 8 10:44:10 2015 +0200

    lib: scatterlist: add sg splitting function
    
    Sometimes a scatter-gather has to be split into several chunks, or sub
    scatter lists. This happens for example if a scatter list will be
    handled by multiple DMA channels, each one filling a part of it.
    
    A concrete example comes with the media V4L2 API, where the scatter list
    is allocated from userspace to hold an image, regardless of the
    knowledge of how many DMAs will fill it :
     - in a simple RGB565 case, one DMA will pump data from the camera ISP
       to memory
     - in the trickier YUV422 case, 3 DMAs will pump data from the camera
       ISP pipes, one for pipe Y, one for pipe U and one for pipe V
    
    For these cases, it is necessary to split the original scatter list into
    multiple scatter lists, which is the purpose of this patch.
    
    The guarantees that are required for this patch are :
     - the intersection of spans of any couple of resulting scatter lists is
       empty.
     - the union of spans of all resulting scatter lists is a subrange of
       the span of the original scatter list.
     - streaming DMA API operations (mapping, unmapping) should not happen
       both on both the resulting and the original scatter list. It's either
       the first or the later ones.
     - the caller is reponsible to call kfree() on the resulting
       scatterlists.
    
    Signed-off-by: Robert Jarzmik <robert.jarzmik@free.fr>
    Signed-off-by: Jens Axboe <axboe@fb.com>

commit 8155ad4ce67d2f3418a4a72144c10114d21f0ece
Author: jilai wang <jilaiw@codeaurora.org>
Date:   Tue Jul 7 17:17:28 2015 -0400

    drm/msm/mdp5: Add DMA pipe planes for MDP5
    
    This change is to add planes which use DMA pipes for MDP5.
    
    Signed-off-by: Jilai Wang <jilaiw@codeaurora.org>
    [slight comment adjust to s/Construct public planes/Construct video
    planes/ since DMA planes are public planes too, they just can't scale
    or CSC]
    Signed-off-by: Rob Clark <robdclark@gmail.com>

commit 3498409f0315b93f969f87c31d014a9819f6fa7d
Author: jilai wang <jilaiw@codeaurora.org>
Date:   Wed Jul 8 18:12:40 2015 -0400

    drm/msm/mdp: Add capabilities to MDP planes (v2)
    
    MDP planes can be implemented using different type of HW pipes,
    RGB/VIG/DMA pipes for MDP5 and RGB/VG/DMA pipes for MDP4. Each type
    of pipe has different HW capabilities such as scaling, color space
    conversion, decimation... Add a variable in plane data structure
    to specify the difference of each plane which comes from mdp5_cfg data
    and use it to differenciate the plane operation.
    V1: Initial change
    V2: Fix a typo in mdp4_kms.h
    
    Signed-off-by: Jilai Wang <jilaiw@codeaurora.org>
    Signed-off-by: Rob Clark <robdclark@gmail.com>

commit b96b3a06d1211ba86674db99a6aafe39ef4cbed2
Author: Hai Li <hali@codeaurora.org>
Date:   Fri Jun 26 16:03:26 2015 -0400

    drm/msm/mdp5: Allocate CTL0/1 for dual DSI single FLUSH
    
    This change takes advantage of a HW feature that synchronize
    flush operation on CTL1 to CTL0, to keep dual DSI pipes in
    sync.
    
    Signed-off-by: Hai Li <hali@codeaurora.org>
    Signed-off-by: Rob Clark <robdclark@gmail.com>

commit 7c4cbc81127b31fa179578e8b17b422efc16d966
Author: Mario Kleiner <mario.kleiner.de@gmail.com>
Date:   Fri Jul 3 06:03:06 2015 +0200

    drm/radeon: Handle irqs only based on irq ring, not irq status regs.
    
    commit 07f18f0bb8d8d65badd8b4988b40d329fc0cc6dc upstream.
    
    Trying to resolve issues with missed vblanks and impossible
    values inside delivered kms pageflip completion events showed
    that radeon's irq handling sometimes doesn't handle valid irqs,
    but silently skips them. This was observed for vblank interrupts.
    
    Although those irqs have corresponding events queued in the gpu's
    irq ring at time of interrupt, and therefore the corresponding
    handling code gets triggered by these events, the handling code
    sometimes silently skipped processing the irq. The reason for those
    skips is that the handling code double-checks for each irq event if
    the corresponding irq status bits in the irq status registers
    are set. Sometimes those bits are not set at time of check
    for valid irqs, maybe due to some hardware race on some setups?
    
    The problem only seems to happen on some machine + card combos
    sometimes, e.g., never happened during my testing of different PC
    cards of the DCE-2/3/4 generation a year ago, but happens consistently
    now on two different Apple Mac cards (RV730, DCE-3, Apple iMac and
    Evergreen JUNIPER, DCE-4 in a Apple MacPro). It also doesn't happen
    at each interrupt but only occassionally every couple of
    hundred or thousand vblank interrupts.
    
    This results in XOrg warning messages like
    
    "[  7084.472] (WW) RADEON(0): radeon_dri2_flip_event_handler:
    Pageflip completion event has impossible msc 420120 < target_msc 420121"
    
    as well as skipped frames and problems for applications that
    use kms pageflip events or vblank events, e.g., users of DRI2 and
    DRI3/Present, Waylands Weston compositor, etc. See also
    
    https://bugs.freedesktop.org/show_bug.cgi?id=85203
    
    After some talking to Alex and Michel, we decided to fix this
    by turning the double-check for asserted irq status bits into a
    warning. Whenever a irq event is queued in the IH ring, always
    execute the corresponding interrupt handler. Still check the irq
    status bits, but only to log a DRM_DEBUG message on a mismatch.
    
    This fixed the problems reliably on both previously failing
    cards, RV-730 dual-head tested on both crtcs (pipes D1 and D2)
    and a triple-output Juniper HD-5770 card tested on all three
    available crtcs (D1/D2/D3). The r600 and evergreen irq handling
    is therefore tested, but the cik an si handling is only compile
    tested due to lack of hw.
    
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Mario Kleiner <mario.kleiner.de@gmail.com>
    CC: Michel Dänzer <michel.daenzer@amd.com>
    CC: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit df93d3feec75d9c4fcf8bcd4ef3172f4665c0b06
Author: Mario Kleiner <mario.kleiner.de@gmail.com>
Date:   Fri Jul 3 06:03:06 2015 +0200

    drm/radeon: Handle irqs only based on irq ring, not irq status regs.
    
    commit 07f18f0bb8d8d65badd8b4988b40d329fc0cc6dc upstream.
    
    Trying to resolve issues with missed vblanks and impossible
    values inside delivered kms pageflip completion events showed
    that radeon's irq handling sometimes doesn't handle valid irqs,
    but silently skips them. This was observed for vblank interrupts.
    
    Although those irqs have corresponding events queued in the gpu's
    irq ring at time of interrupt, and therefore the corresponding
    handling code gets triggered by these events, the handling code
    sometimes silently skipped processing the irq. The reason for those
    skips is that the handling code double-checks for each irq event if
    the corresponding irq status bits in the irq status registers
    are set. Sometimes those bits are not set at time of check
    for valid irqs, maybe due to some hardware race on some setups?
    
    The problem only seems to happen on some machine + card combos
    sometimes, e.g., never happened during my testing of different PC
    cards of the DCE-2/3/4 generation a year ago, but happens consistently
    now on two different Apple Mac cards (RV730, DCE-3, Apple iMac and
    Evergreen JUNIPER, DCE-4 in a Apple MacPro). It also doesn't happen
    at each interrupt but only occassionally every couple of
    hundred or thousand vblank interrupts.
    
    This results in XOrg warning messages like
    
    "[  7084.472] (WW) RADEON(0): radeon_dri2_flip_event_handler:
    Pageflip completion event has impossible msc 420120 < target_msc 420121"
    
    as well as skipped frames and problems for applications that
    use kms pageflip events or vblank events, e.g., users of DRI2 and
    DRI3/Present, Waylands Weston compositor, etc. See also
    
    https://bugs.freedesktop.org/show_bug.cgi?id=85203
    
    After some talking to Alex and Michel, we decided to fix this
    by turning the double-check for asserted irq status bits into a
    warning. Whenever a irq event is queued in the IH ring, always
    execute the corresponding interrupt handler. Still check the irq
    status bits, but only to log a DRM_DEBUG message on a mismatch.
    
    This fixed the problems reliably on both previously failing
    cards, RV-730 dual-head tested on both crtcs (pipes D1 and D2)
    and a triple-output Juniper HD-5770 card tested on all three
    available crtcs (D1/D2/D3). The r600 and evergreen irq handling
    is therefore tested, but the cik an si handling is only compile
    tested due to lack of hw.
    
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Mario Kleiner <mario.kleiner.de@gmail.com>
    CC: Michel Dänzer <michel.daenzer@amd.com>
    CC: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    [ luis: backported to 3.16:
      - dropped changes related with short HPD irqs as these are not
        supported in the 3.16 kernel ]
    Signed-off-by: Luis Henriques <luis.henriques@canonical.com>

commit 07f18f0bb8d8d65badd8b4988b40d329fc0cc6dc
Author: Mario Kleiner <mario.kleiner.de@gmail.com>
Date:   Fri Jul 3 06:03:06 2015 +0200

    drm/radeon: Handle irqs only based on irq ring, not irq status regs.
    
    Trying to resolve issues with missed vblanks and impossible
    values inside delivered kms pageflip completion events showed
    that radeon's irq handling sometimes doesn't handle valid irqs,
    but silently skips them. This was observed for vblank interrupts.
    
    Although those irqs have corresponding events queued in the gpu's
    irq ring at time of interrupt, and therefore the corresponding
    handling code gets triggered by these events, the handling code
    sometimes silently skipped processing the irq. The reason for those
    skips is that the handling code double-checks for each irq event if
    the corresponding irq status bits in the irq status registers
    are set. Sometimes those bits are not set at time of check
    for valid irqs, maybe due to some hardware race on some setups?
    
    The problem only seems to happen on some machine + card combos
    sometimes, e.g., never happened during my testing of different PC
    cards of the DCE-2/3/4 generation a year ago, but happens consistently
    now on two different Apple Mac cards (RV730, DCE-3, Apple iMac and
    Evergreen JUNIPER, DCE-4 in a Apple MacPro). It also doesn't happen
    at each interrupt but only occassionally every couple of
    hundred or thousand vblank interrupts.
    
    This results in XOrg warning messages like
    
    "[  7084.472] (WW) RADEON(0): radeon_dri2_flip_event_handler:
    Pageflip completion event has impossible msc 420120 < target_msc 420121"
    
    as well as skipped frames and problems for applications that
    use kms pageflip events or vblank events, e.g., users of DRI2 and
    DRI3/Present, Waylands Weston compositor, etc. See also
    
    https://bugs.freedesktop.org/show_bug.cgi?id=85203
    
    After some talking to Alex and Michel, we decided to fix this
    by turning the double-check for asserted irq status bits into a
    warning. Whenever a irq event is queued in the IH ring, always
    execute the corresponding interrupt handler. Still check the irq
    status bits, but only to log a DRM_DEBUG message on a mismatch.
    
    This fixed the problems reliably on both previously failing
    cards, RV-730 dual-head tested on both crtcs (pipes D1 and D2)
    and a triple-output Juniper HD-5770 card tested on all three
    available crtcs (D1/D2/D3). The r600 and evergreen irq handling
    is therefore tested, but the cik an si handling is only compile
    tested due to lack of hw.
    
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Mario Kleiner <mario.kleiner.de@gmail.com>
    CC: Michel Dänzer <michel.daenzer@amd.com>
    CC: Alex Deucher <alexander.deucher@amd.com>
    CC: <stable@vger.kernel.org> # v3.16+
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 232fd934a4b458e5a0dacdd17efc1faffb9df615
Author: Paulo Zanoni <paulo.r.zanoni@intel.com>
Date:   Tue Jul 7 15:26:07 2015 -0300

    drm/i915: extract FBC_MULTIPLE_PIPES check
    
    I have two separate refactor ideas that require extracting this to a
    separate function. I'm not sure which idea I'll end choosing, but
    since both will require extracting this function, let's do this now.
    
    Notice that this is just code moving. Any possible problems with the
    current multiple pipes check should be fixed in later commits.
    
    Signed-off-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 050af069de03489947023544bfed1977952b8215
Author: Vasanthakumar Thiagarajan <vthiagar@qti.qualcomm.com>
Date:   Thu Jun 18 12:31:04 2015 +0530

    ath10k: Copy Engine related changes for QCA99X0
    
    QCA99X0 supports upto 12 Copy engines. Host and target
    CE configuration table is updated to support new copy engine
    pipes. This also fixes the assumption of diagnostic CE by making
    CE_7 as the one instead of CE_COUNT - 1.
    
    Signed-off-by: Vasanthakumar Thiagarajan <vthiagar@qti.qualcomm.com>
    Signed-off-by: Kalle Valo <kvalo@qca.qualcomm.com>

commit 6f9c784b7ec2cc9fc9fd7c5a8634b70aadd76015
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Jun 24 22:00:08 2015 +0300

    drm/i915: Don't do PM5/DDR DVFS with multiple pipes
    
    Enabling PM5/DDR DVFS with multiple active pipes isn't a validated
    configuration. It does seem to work most of the time at least, but
    there is clearly an additional risk of underruns, so let's not play
    with fire.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Clint Taylor <Clinton.A.Taylor@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 54f1b6e15db87722aa21035169ce811af9d971fd
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Jun 24 22:00:05 2015 +0300

    drm/i915: Compute display FIFO split dynamically for CHV
    
    Consider which planes are active and compute the FIFO split based on the
    relative data rates. Since we only consider the pipe src width rather
    than the plane width when computing watermarks it seems best to do the
    same when computing the FIFO split as well. This means the only thing we
    actually have to consider for the FIFO splut is the bpp, and we can
    ignore the rest.
    
    I've just stuffed the logic into the watermark code for now. Eventually
    it'll need to move into the atomic update for the crtc.
    
    There's also one extra complication I've not yet considered; Some of the
    DSPARB registers contain bits related to multiple pipes. The registers
    are double buffered but apparently they update on the vblank of any
    active pipe. So doing the FIFO reconfiguration properly when multiple
    pipes are active is not going to be fun. But let's ignore that mess for
    now.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Clint Taylor <Clinton.A.Taylor@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 262cd2e154c29dc3a235f68cc91e13d8f48e8002
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Jun 24 22:00:04 2015 +0300

    drm/i915: CHV DDR DVFS support and another watermark rewrite
    
    Turns out the VLV/CHV system agent doesn't understand memory
    latencies, so trying to rely on the PND deadline mechanism is not
    going to fly especially when DDR DVFS is enabled. Currently we try to
    avoid the problems by lying to the system agent about the deadlines
    and setting the FIFO watermarks to 8 cachelines. This however leads to
    bad memory self refresh residency.
    
    So in order to satosfy everyone we'll just give up on the deadline
    scheme and program the watermarks old school based on the worst case
    memory latency.
    
    I've modelled this a bit on the ILK+ approach where we compute multiple
    sets of watermarks for each pipe (PM2,PM5,DDR DVFS) and when merge thet
    appropriate one later with the watermarks from other pipes. There isn't
    too much to merge actually since each pipe has a totally independent
    FIFO (well apart from the mess with the partially shared DSPARB
    registers), but still decopuling the pipes from each other seems like a
    good idea.
    
    Eventually we'll want to perform the watermark update in two phases
    around the plane update to avoid underruns due to the single buffered
    watermark registers. But that's still in limbo for ILK+ too, so I've not
    gone that far yet for VLV/CHV either.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Clint Taylor <Clinton.A.Taylor@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit ec76d62999b73f818f7d777ce037157bd2d4af02
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Thu Jun 18 10:30:26 2015 +0200

    drm/i915/psr: Restrict buffer tracking to the PSR pipe
    
    The current code tracks business across all pipes, but we're only
    really interested in the one pipe DRRS is enabled on. Fairly tiny
    optimization, but something I noticed while reading the code. But it
    might matter a bit when e.g. showing a video or something only on the
    external screen, while the panel is kept static.
    
    Also regroup the code slightly: First compute new bitmasks, then take
    appropriate actions.
    
    Cc: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Cc: Durgadoss R <durgadoss.r@intel.com>
    Reviewed-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>

commit c1d038c6e2fe1a07b23d8908bb2edfc95ca571cd
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Thu Jun 18 10:30:25 2015 +0200

    drm/i915/drrs: Restrict buffer tracking to the DRRS pipe
    
    The current code tracks business across all pipes, but we're only
    really interested in the one pipe DRRS is enabled on. Fairly tiny
    optimization, but something I noticed while reading the code. But it
    might matter a bit when e.g. showing a video or something only on the
    external screen, while the panel is kept static.
    
    Also regroup the code slightly: First compute new bitmasks, then take
    appropriate actions.
    
    Cc: Ramalingam C <ramalingam.c@intel.com>
    Cc: Sivakumar Thulasimani <sivakumar.thulasimani@intel.com>
    Reviewed-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>

commit 0d26fb891a119d78d8e4b345cfd0be0f2112cb7a
Author: Ander Conselvan de Oliveira <ander.conselvan.de.oliveira@intel.com>
Date:   Tue Jun 16 11:49:44 2015 +0300

    drm/i915: Don't update staged config during force restore modesets
    
    The force restore path relies on the staged config to preserve the
    configuration used before a suspend/resume cycle. The update done to it
    in intel_modeset_fixup_state() would cause that information to be lost
    after the first modeset, making it impossible to restore the modes for
    pipes B and C.
    
    References: https://bugs.freedesktop.org/show_bug.cgi?id=90468
    Signed-off-by: Ander Conselvan de Oliveira <ander.conselvan.de.oliveira@intel.com>
    Reviewed-by: Matt Roper <matthew.d.roper@intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>

commit 5da76e94c4b8d40465a907fc3a151051e8021cdc
Author: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
Date:   Mon Jun 1 12:50:04 2015 +0200

    drm/i915: Implement intel_crtc_control using atomic state, v4
    
    Assume the callers lock everything with drm_modeset_lock_all.
    
    This change had to be done after converting suspend/resume to
    use atomic_state so the atomic state is preserved, otherwise
    all transitional state is erased.
    
    Now all callers of .crtc_enable and .crtc_disable go through
    atomic modeset! :-D
    
    Changes since v1:
    - Only check for crtc_state->active in valleyview_modeset_global_pipes.
    - Only check for crtc_state->active in modeset_update_crtc_power_domains.
    Changes since v2:
    - Rework on top of the changed patch order.
    Changes since v3:
    - Rename intel_crtc_toggle in description to *_control
    - Change return value to int.
    - Do not add plane state, should be done implicitly already.
    
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Reviewed-by: Matt Roper <matthew.d.roper@intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>

commit 568c634a2af62e07ed248a6e7fe9770173f9d9b2
Author: Ander Conselvan de Oliveira <ander.conselvan.de.oliveira@intel.com>
Date:   Mon Jun 1 12:49:57 2015 +0200

    drm/i915: Support modeset across multiple pipes
    
    Compute new pipe_configs for all crtcs in the atomic state. The commit
    part of the mode set (__intel_set_mode()) is already enabled to support
    multiple pipes, the only thing missing was calculating a new pipe_config
    for every crtc.
    
    Signed-off-by: Ander Conselvan de Oliveira <ander.conselvan.de.oliveira@intel.com>
    Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Reviewed-by: Matt Roper <matthew.d.roper@intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>

commit fde61e4b80ff23a379210a5780e59ace4bd915e6
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Tue May 26 20:22:39 2015 +0300

    drm/i915: Throw out WIP CHV power well definitions
    
    Expecting CHV power wells to be just an extended versions of the VLV
    power wells, a bunch of commented out power wells were added in
    anticipation when Punit folks would implement it all. Turns out they
    never did, and instead CHV has fewer power wells than VLV. Rip out all
    the #if 0'ed junk that's not needed.
    
    v2: Rename the "pipe-a" well to "display" to match VLV
        Clarify the pipe A power well relationship to pipes B and C (Deepak)
    
    Reviewed-by: Deepak S <deepak.s@linux.intel.com>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit e0213bc5467ca5fe44ab04527f0e47998f30c046
Author: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
Date:   Mon May 18 20:04:14 2015 +0900

    usb: renesas_usbhs: Change USBHS_TYPE_R8A779x to USBHS_TYPE_RCAR_GEN2
    
    Since the HSUSB controllers of R-Car Gen2 are the same specification
    (they have 16 pipes and usb-dmac), this patch changes USBHS_TYPE_R8A7790
    and USBHS_TYPE_R8A7791 to USBHS_TYPE_RCAR_GEN2.
    
    Signed-off-by: Yoshihiro Shimoda <yoshihiro.shimoda.uh@renesas.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>

commit 0a9ab303b87a94115e361a7f3a15d9f481bc453b
Author: Ander Conselvan de Oliveira <ander.conselvan.de.oliveira@intel.com>
Date:   Tue Apr 21 17:13:04 2015 +0300

    drm/i915: Remove all *_pipes flags from modeset
    
    Set the mode_changed field on the crtc_states and use that instead.
    
    Note that even though this patch doesn't completely replace the logic in
    intel_modeset_affected_pipes(), that logic was never fully used to its
    full extent. Since the commit mentioned below, modeset_pipes and
    prepare_pipes would only contain at most the pipe for which the set_crtc
    ioctl was called. We can grow back that logic when the time comes.
    
    commit b6c5164d7bf624f3e1b750787ddb983150c5117c
    Author: Daniel Vetter <daniel.vetter@ffwll.ch>
    Date:   Fri Apr 12 18:48:43 2013 +0200
    
        drm/i915: Fixup Oops in the pipe config computation
    
    v2: Don't set mode_changed unconditionally for modeset_crtc. (Ander)
        Check for needs_modeset() before trying to allocate a PLL. (Ander)
        Only call .crtc_enable() for pipes that were disabled. (Maarten)
    
    Signed-off-by: Ander Conselvan de Oliveira <ander.conselvan.de.oliveira@intel.com>
    Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 4fed33f6485be65b1e8155c843987030a2ae74fa
Author: Ander Conselvan de Oliveira <ander.conselvan.de.oliveira@intel.com>
Date:   Tue Apr 21 17:13:03 2015 +0300

    drm/i915: Calculate a new pipe_config based on new enabled state
    
    With the current implementation of intel_modeset_affected_pipes(), if a
    pipe will be enabled then it is in modeset_pipes. We'll remove that mask
    in a follow up patch, but want to preserve this behavior, so just make
    that explicit.
    
    Signed-off-by: Ander Conselvan de Oliveira <ander.conselvan.de.oliveira@intel.com>
    Reviewed-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 6b457d31ea0465fcadcf6d5044f5f71398954727
Author: A.Sunil Kamath <sunil.kamath@intel.com>
Date:   Thu Apr 16 14:22:09 2015 +0530

    drm/i915/skl: Implement enable/disable for Display C5 state.
    
    This patch just implements the basic enable and disable
    functions of DC5 state which is needed for both SKL and BXT.
    
    Its important to load respective CSR program before calling
    enable, which anyways will happen as CSR program is executed
    during boot.
    
    DC5 is a power saving state where hardware dynamically disables
    power well 1 and the CDCLK PLL and saves the associated registers.
    
    DC5 can be entered when software allows it, power well 2 is
    disabled, and hardware detects that all pipes are disabled
    or pipe A is enabled with PSR active.
    
    Its better to configure display engine to have power well 2 disabled before
    getting into DC5 enable function. Hence rpm framework will have to
    ensure to check status of power well 2 before calling gen9_enable_dc5.
    
    Rather dc5 entry criteria should be decided based on power well 2 status.
    If disabled, then call gen9_enable_dc5.
    
    v2: Replace HAS_ with IS_ check as per Daniel's review comments
    
    v3: Cleared the bits dc5/dc6 enable of DC_STATE_EN register
    before setting them as per Satheesh's review comments.
    
    v4: call POSTING_READ for every write to a register to ensure that
    its written immediately.
    
    v5: Modified as per review comments from Imre.
    - Squashed register definitions into this patch.
    - Finetuned comments and functions.
    
    v6:
    Avoid redundant writes in gen9_set_dc_state_debugmask_memory_up function.
    
    v7:
    - Rebase to latest.
    - Move all runtime PM functions defined in intel_display.c to
      intel_runtime_pm.c.
    
    v8: Rebased to drm-intel-nightly. (Animesh)
    
    Issue: VIZ-2819
    Signed-off-by: A.Sunil Kamath <sunil.kamath@intel.com>
    Signed-off-by: Damien Lespiau <damien.lespiau@intel.com>
    Signed-off-by: Animesh Manna <animesh.manna@intel.com>
    Reviewed-by: Imre Deak <imre.deak@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit f8437dd1b5a5a084302ba8e9fa29f76cdfc2f945
Author: Vandana Kannan <vandana.kannan@intel.com>
Date:   Mon Nov 24 13:37:39 2014 +0530

    drm/i915/bxt: add display initialize/uninitialize sequence (CDCLK)
    
    Add CDCLK specific display clock initialization sequence as per BSpec.
    
    Note that the CDCLK initialization/uninitialization are done at their
    current place only for simplicity, in a future patch - when more of the
    runtime PM features will be enabled - these will be moved to power
    well#1 and modeset encoder enabling/disabling hooks respectively. This
    also means that atm dynamic power gating power well #1 is effectively
    disabled.
    
    The call to uninitialize CDCLK during system/runtime suspend will be
    added later in this patchset.
    
    v1: Added function definitions in header files
    v2: Imre's review comments addressed
    - Moved CDCLK related definitions to i915_reg.h
    - Removed defintions for CDCLK frequency
    - Split uninit_cdclk() by adding a phy_uninit function
    - Calculate freq and decimal based on input frequency
    - Program SSA precharge based on input frequency
    - Use wait_for 1ms instead 200us udelay for DE PLL locking
    - Removed initial value for divider, freq, decimal, ratio.
    - Replaced polling loops with wait_for
    - Parameterized latency optim setting
    - Fix the parts where DE PLL has to be disabled.
    - Call CDCLK selection from mode set
    
    v3: (imre)
    - add note about the plan to move the cdclk/phy init to a better place
    - take rps.hw_lock around pcode access
    - move DE PLL register macros here from another patch since they are
      used here first
    - add BXT_ prefix to CDCLK flags
    - add missing masking when programming CDCLK_FREQ_DECIMAL
    
    v4: (ville)
    - split the CDCLK/PHY parts into two patches, update commit message
      accordingly
    - s/DISPLAY_PCU_CONTROL/HSW_PCODE_DE_WRITE_FREQ_REQ/
    - simplify BXT_DE_PLL_RATIO macros
    - fix BXT_DE_PLL_RATIO_MASK
    - s/bxt_select_cdclk_freq/broxton_set_cdclk_freq/
    - move cdclk init/uninit/set code from intel_ddi.c to intel_display.c
    - remove redundant code comments for broxton_set_cdclk_freq()
    - sanitize fixed point<->integer frequency value conversion
    - use DRM_ERROR instead of WARN
    - do RMW when programming BXT_DE_PLL_CTL for safety
    - add note about PLL lock timeout being exactly 200us
    - make PCU error messages more descriptive
    - instead of using 0 freq to mean PLL off/bypass freq use 19200
      for clarity, as the latter one is the actual rate
    - simplify pcode programming, removing duplicated
      sandybridge_pcode_write() call
    - sanitize code flow, remove unnecessary scratch vars in
      broxton_set_cdclk() (imre)
    - Remove bound check for maxmimum freq to match current code.
      This check will be added later at a more proper platform
      independent place once atomic support lands.
    - add note to remove freq guard band which isn't needed on BXT
    - add note to reduce freq to minimum if no pipe is enabled
    - combine broxton_modeset_global_pipes() with
      valleyview_modeset_global_pipes()
    
    Signed-off-by: Vandana Kannan <vandana.kannan@intel.com> (v2)
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 1f74f323e2c30b7fd53f6ad16c1990f2c80bbfc0
Author: Christophe Ricard <christophe.ricard@gmail.com>
Date:   Tue Mar 31 08:02:21 2015 +0200

    nfc: nci: Add comment to explain NCI_HCI_MAX_PIPES
    
    According to specification etsi 102 622 chapter 4.4 pipes
    identifier is 7 bits long giving a 127 possible pipes value.
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Christophe Ricard <christophe-h.ricard@st.com>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

commit 0b040964a01ccfd880207ddc498e55e6c990a5d5
Author: Christophe Ricard <christophe.ricard@gmail.com>
Date:   Tue Mar 31 08:02:18 2015 +0200

    nfc: hci: Add comment to explain NFC_HCI_MAX_PIPES
    
    According to specification etsi 102 622 chapter 4.4 pipes identifier
    is 7 bits long giving a 127 possible pipes value.
    
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Christophe Ricard <christophe-h.ricard@st.com>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

commit 6d293983d4d2d1c233fff94f7b2c4603bdab0170
Author: Ander Conselvan de Oliveira <ander.conselvan.de.oliveira@intel.com>
Date:   Mon Mar 30 08:33:12 2015 +0300

    drm/i915: Check lane sharing between pipes B & C using atomic state
    
    Makes that code atomic ready.
    
    v2: Acquire crtc_state for the "other" pipe only when needed. (Daniel)
    
    v3: Really only acquire the other state if necessary. (Daniel)
    
    Signed-off-by: Ander Conselvan de Oliveira <ander.conselvan.de.oliveira@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 83a57153f5de299c7672d0cb241289c349b784d4
Author: Ander Conselvan de Oliveira <ander.conselvan.de.oliveira@intel.com>
Date:   Fri Mar 20 16:18:03 2015 +0200

    drm/i915: Allocate a drm_atomic_state for the legacy modeset code
    
    For the atomic conversion, the mode set paths need to be changed to rely
    on an atomic state instead of using the staged config. By using an
    atomic state for the legacy code, we will be able to convert the code
    base in small chunks.
    
    v2: Squash patch that adds stat argument to intel_set_mode(). (Ander)
        Make every caller of intel_set_mode() allocate state. (Daniel)
        Call drm_atomic_state_clear() in set config's error path. (Daniel)
    
    v3: Copy staged config to atomic state in force restore path. (Ander)
    
    v4: Don't update ->new_config for disabled pipes in __intel_set_mode(),
        since it is expected to be NULL in that case. (Ander)
    
    v5: Don't change return type of intel_modeset_pipe_config(). (Chandra)
    
    Signed-off-by: Ander Conselvan de Oliveira <ander.conselvan.de.oliveira@intel.com>
    [danvet: Remove spurious ret local variable due to changes in v5.]
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit d272ddfa30b088870a925decba3c4a7f1a45badc
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Mar 11 18:52:31 2015 +0200

    drm/i915: Rewrite IVB FDI bifurcation conflict checks
    
    Ignore the current state of the pipe and just check crtc_state->enable
    and the number of FDI lanes required. This means we don't accidentally
    mistake the FDI lanes as being available of one of the pipes just
    happens to be disabled at the time of the check. Also we no longer
    consider pipe C to require FDI lanes when it's driving the eDP
    transcoder.
    
    We also take the opportunity to make the code a bit nicer looking by
    hiding the ugly bits in the new pipe_required_fdi_lanes() function.
    
    Cc: Ander Conselvan de Oliveira <ander.conselvan.de.oliveira@intel.com>
    Cc: Daniel Vetter <daniel@ffwll.ch>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Ander Conselvan de Oliveira <conselvan2@gmail.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 003632d9cf626dadcd48ddba375302c0537f81e5
Author: Ander Conselvan de Oliveira <ander.conselvan.de.oliveira@intel.com>
Date:   Wed Mar 11 13:35:43 2015 +0200

    drm/i915: Simplify the way BC bifurcation state consistency is kept
    
    Remove the global modeset resource function that would disable the
    bifurcation bit, and instead enable/disable it when enabling the pch
    transcoder. The mode set consistency check should prevent us from
    disabling the bit if pipe C is enabled so the change should be safe.
    
    Note that this doens't affect the logic that prevents the bit being
    set while a pipe is active, since the patch retains the behavior of
    only chaging the bit if necessary. Because of the checks during mode
    set, the first change would necessarily happen with both pipes B and
    C disabled, and any subsequent write would be skipped.
    
    v2: Only change the bit during pch trancoder enable. (Ville)
    
    Signed-off-by: Ander Conselvan de Oliveira <ander.conselvan.de.oliveira@intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 8dd0eb3566711d81bfbe2b4421b33f0dd723cec4
Merge: d136dfeec84b f89fe1ffe698
Author: Dave Airlie <airlied@redhat.com>
Date:   Mon Mar 9 19:41:15 2015 +1000

    Merge tag 'drm-intel-next-2015-02-27' of git://anongit.freedesktop.org/drm-intel into drm-next
    
    - Y tiling support for scanout from Tvrtko&Damien
    - Remove more UMS support
    - some small prep patches for OLR removal from John Harrison
    - first few patches for dynamic pagetable allocation from Ben Widawsky, rebased
      by tons of other people
    - DRRS support patches (Sonika&Vandana)
    - fbc patches from Paulo
    - make sure our vblank callbacks aren't called when the pipes are off
    - various patches all over
    
    * tag 'drm-intel-next-2015-02-27' of git://anongit.freedesktop.org/drm-intel: (61 commits)
      drm/i915: Update DRIVER_DATE to 20150227
      drm/i915: Clarify obj->map_and_fenceable
      drm/i915/skl: Allow Y (and Yf) frame buffer creation
      drm/i915/skl: Update watermarks for Y tiling
      drm/i915/skl: Updated watermark programming
      drm/i915/skl: Adjust get_plane_config() to support Yb/Yf tiling
      drm/i915/skl: Teach pin_and_fence_fb_obj() about Y tiling constraints
      drm/i915/skl: Adjust intel_fb_align_height() for Yb/Yf tiling
      drm/i915/skl: Allow scanning out Y and Yf fbs
      drm/i915/skl: Add new displayable tiling formats
      drm/i915: Remove DRIVER_MODESET checks from modeset code
      drm/i915: Remove regfile code&data for UMS suspend/resume
      drm/i915: Remove DRIVER_MODESET checks from gem code
      drm/i915: Remove DRIVER_MODESET checks in the gpu reset code
      drm/i915: Remove DRIVER_MODESET checks from suspend/resume code
      drm/i915: Remove DRIVER_MODESET checks in load/unload/close code
      drm/i915: fix a printk format
      drm/i915: Add media rc6 residency file to sysfs
      drm/i915: Add missing description to parameter in alloc_pt_range
      drm/i915: Removed the read of RP_STATE_CAP from sysfs/debugfs functions
      ...

commit 5b49afd60a850acca321a87eb83ab0c387725206
Merge: 8ee351625e9b 64ea8f4af57c
Author: Dave Airlie <airlied@redhat.com>
Date:   Tue Feb 24 11:10:14 2015 +1000

    Merge tag 'drm-amdkfd-fixes-2015-02-23' of git://people.freedesktop.org/~gabbayo/linux into drm-fixes
    
    - Fix a bug that caused 15% CPU performance drop in Kaveri. This was caused
      because we overwritten the initialization of the first pipe (out of eight),
      which is dedicated to radeon operation. The fix was tested by Michel Dänzer.
      This bug was introduced by a patch I prepared (yeah, my bad) and was merged
      to 3.19-rc6. Therefore, I also marked it as Cc:stable.
    
    - Fix sparse warning
    * tag 'drm-amdkfd-fixes-2015-02-23' of git://people.freedesktop.org/~gabbayo/linux:
      drm/amdkfd: don't set get_pipes_num() as inline
      drm/amdkfd: Initialize only amdkfd's assigned pipelines

commit e489e38e3f880ec3ff3281c5ceafa3b750600556
Author: Paulo Zanoni <paulo.r.zanoni@intel.com>
Date:   Fri Feb 13 17:23:43 2015 -0200

    drm/i915: gen5+ can have FBC with multiple pipes
    
    So allow it.
    
    Reviewed-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 9625604cebcb3f5be2e692408274734e8ae63979
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Fri Feb 13 21:03:42 2015 +0100

    drm/irq: Add drm_crtc_vblank_reset
    
    At driver load we need to tell the vblank code about the state of the
    pipes, so that the logic around reject vblank_get when the pipe is off
    works correctly.
    
    Thus far i915 used drm_vblank_off, but one of the side-effects of it
    is that it also saves the vblank counter. And for that it calls down
    into the ->get_vblank_counter hook. Which isn't really a good idea
    when the pipe is off for a few reasons:
    - With runtime pm the register might not respond.
    - If the pipe is off some datastructures might not be around or
      unitialized.
    
    The later is what blew up on gen3: We look at intel_crtc->config to
    compute the vblank counter, and for a disabled pipe at boot-up that's
    just not there. Thus far this was papered over by a check for
    intel_crtc->active, but I want to get rid of that (since it's fairly
    race, vblank hooks are called from all kinds of places).
    
    So prep for that by adding a _reset functions which only does what we
    really need to be done at driver load: Mark the vblank pipe as off,
    but don't do any vblank counter saving or event flushing - neither of
    that is required.
    
    v2: Clarify the code flow slightly as suggested by Ville.
    
    v3: Fix kerneldoc spelling, spotted by Laurent.
    
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Cc: Imre Deak <imre.deak@intel.com>
    Reviewed-by: Imre Deak <imre.deak@intel.com> (v2)
    Acked-by: Dave Airlie <airlied@redhat.com>
    Acked-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>

commit 64ea8f4af57cee9f8b0bf542819b41ee82acfcb9
Author: Oded Gabbay <oded.gabbay@amd.com>
Date:   Tue Feb 17 11:30:31 2015 +0200

    drm/amdkfd: don't set get_pipes_num() as inline
    
    get_pipes_num() calls BUG_ON so we can't set it as inline because it produces a
    warning as BUG_ON() uses static variables when it is expanded.
    
    Signed-off-by: Oded Gabbay <oded.gabbay@amd.com>

commit 0b1ce1a8ca14478bc6748c18434c523fb0ae8225
Merge: bdfeb5a10471 43c6116573ca
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Feb 7 11:10:40 2015 -0800

    Merge tag 'rdma-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/roland/infiniband
    
    Pull one more infiniband revert from Roland Dreier:
     "One more last-second RDMA change for 3.19: Yann realized that the
      previous revert of new userspace ABI did not go far enough, and we're
      still exposing a change that we don't want.  Revert even closer to
      3.18 interface to make sure we get things right in the long run"
    
    Yann Droneaud pipes up:
     "I hope this could go in v3.19 as, at this stage, we don't want to
      expose any bits of this ABI in a released kernel"
    
    * tag 'rdma-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/roland/infiniband:
      Revert "IB/core: Add support for extended query device caps"

commit 2437138ea9c87cdcf24a6ec9abe3b2e8fd8c854c
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Sat Dec 27 09:48:28 2014 +0000

    drm/i915: Ban Haswell from using RCS flips
    
    commit 48bf5b2d00bfeb681f6500c626189c7cd2c964d2 upstream.
    
    Like Ivybridge, we have reports that we get random hangs when flipping
    with multiple pipes. Extend
    
    commit 2a92d5bca1999b69c78f3c3e97b5484985b094b9
    Author: Chris Wilson <chris@chris-wilson.co.uk>
    Date:   Tue Jul 8 10:40:29 2014 +0100
    
        drm/i915: Disable RCS flips on Ivybridge
    
    to also apply to Haswell.
    
    Reported-and-tested-by: Scott Tsai <scottt.tw@gmail.com>
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=87759
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    [ luis: backported to 3.16: adjusted context ]
    Signed-off-by: Luis Henriques <luis.henriques@canonical.com>

commit 00647dbf5150fa2f3279d9be534cb06e24d537f4
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Sat Dec 27 09:48:28 2014 +0000

    drm/i915: Ban Haswell from using RCS flips
    
    commit 48bf5b2d00bfeb681f6500c626189c7cd2c964d2 upstream.
    
    Like Ivybridge, we have reports that we get random hangs when flipping
    with multiple pipes. Extend
    
    commit 2a92d5bca1999b69c78f3c3e97b5484985b094b9
    Author: Chris Wilson <chris@chris-wilson.co.uk>
    Date:   Tue Jul 8 10:40:29 2014 +0100
    
        drm/i915: Disable RCS flips on Ivybridge
    
    to also apply to Haswell.
    
    Reported-and-tested-by: Scott Tsai <scottt.tw@gmail.com>
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=87759
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ec14b6c93c2f804f302b8ea1736539d39b9c544b
Author: Christophe Ricard <christophe.ricard@gmail.com>
Date:   Tue Jan 27 01:18:18 2015 +0100

    NFC: hci: Remove nfc_hci_pipe2gate function
    
    With the newly introduced pipes table hci_dev fields,
    the nfc_hci_pipe2gate routine is no longer needed.
    
    Signed-off-by: Christophe Ricard <christophe-h.ricard@st.com>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

commit 615b524aca0bff52ce6654ddf26546546eb02e93
Author: Christophe Ricard <christophe.ricard@gmail.com>
Date:   Tue Jan 27 01:18:14 2015 +0100

    NFC: hci: Reference every pipe information according to notification
    
    We update the tracked pipes status when receiving HCI commands.
    Also we forward HCI errors and we reply to any HCI command, even though
    we don't support it.
    
    Signed-off-by: Christophe Ricard <christophe-h.ricard@st.com>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

commit af77522320aa0e5b4b52dce615ad067d92e15fbf
Author: Christophe Ricard <christophe.ricard@gmail.com>
Date:   Tue Jan 27 01:18:13 2015 +0100

    NFC: hci: Change nfc_hci_send_response gate parameter to pipe
    
    As there can be several pipes connected to the same gate, we need
    to know which pipe ID to use when sending an HCI response. A gate
    ID is not enough.
    
    Instead of changing the nfc_hci_send_response() API to something
    not aligned with the rest of the HCI API, we call nfc_hci_hcp_message_tx
    directly.
    
    Signed-off-by: Christophe Ricard <christophe-h.ricard@st.com>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

commit 988427829bcd230c78106d28dbfa85d45d182909
Author: Josh Poimboeuf <jpoimboe@redhat.com>
Date:   Tue Jan 27 12:10:04 2015 -0600

    ktest: Restore tty settings after closing console
    
    When ktest runs the console program as a child process, the parent and
    child share the same tty for stdin and stderr.  This is problematic when
    using a libvirt target.  The "virsh console" program makes a lot of
    changes to the tty settings, making ktest's output hard to read
    (carriage returns don't work).  After ktest exits, the terminal is
    unusable (CRs broken, stdin isn't echoed).
    
    I think the best way to fix this issue would be to create a
    pseudoterminal (pty pair) so the child process would have a dedicated
    tty, and then use pipes to connect the two ttys.  I'm not sure if that's
    overkill, but it's far beyond my current Perl abilities.
    
    This patch is a much easier way to (partially) fix this issue.  It saves
    the tty settings before opening the console and restores them after
    closing it.  There are still a few places where ktest prints mangled
    output while the console is open, but the output is much more legible
    overall, and the terminal works just fine after ktest exits.
    
    Link: http://lkml.kernel.org/r/1bb89abc0025cf1d6da657c7ba58bbeb4381a515.1422382008.git.jpoimboe@redhat.com
    
    Signed-off-by: Josh Poimboeuf <jpoimboe@redhat.com>
    Signed-off-by: Steven Rostedt <rostedt@goodmis.org>

commit 118278f20aa89efe45fa1e2b1829f198d557f8fe
Author: Christophe Ricard <christophe.ricard@gmail.com>
Date:   Tue Jan 27 01:18:12 2015 +0100

    NFC: hci: Add pipes table to reference them with a tuple {gate, host}
    
    In order to keep host source information on specific hci event (such as
    evt_connectivity or evt_transaction) and because 2 pipes can be connected
    to the same gate, it is necessary to add a table referencing every pipe
    with a {gate, host} tuple.
    
    Signed-off-by: Christophe Ricard <christophe-h.ricard@st.com>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

commit fda7a49cb991e9da15f5955d1ea292f8ec74f27a
Author: Christophe Ricard <christophe.ricard@gmail.com>
Date:   Tue Jan 27 01:18:11 2015 +0100

    NFC: hci: Change event_received handler gate parameter to pipe
    
    Several pipes may point to the same CLF gate, so getting the gate ID
    as an input is not enough.
    For example dual secure element may have 2 pipes (1 for uicc and
    1 for eSE) pointing to the connectivity gate.
    
    As resolving gate and host IDs can be done from a pipe, we now pass
    the pipe ID to the event received handler.
    
    Signed-off-by: Christophe Ricard <christophe-h.ricard@st.com>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

commit 2844a9214759901f382086644842e39ad6f7d894
Author: Damien Lespiau <damien.lespiau@intel.com>
Date:   Tue Jan 20 12:51:48 2015 +0000

    drm/i915: Use pipe_name() in the get_plane_config() functions
    
    We may as well try to be consistent everywhere and know the pipes by
    their name.
    
    Reviewed-By: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Signed-off-by: Damien Lespiau <damien.lespiau@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit f0ec5b9905ca8dfc44c6419dc068a335208398a7
Author: Ben Goz <ben.goz@amd.com>
Date:   Tue Jan 13 11:18:06 2015 +0200

    drm/amdkfd: Fix for-loop when allocating HQD (non-HWS)
    
    This patch fixes a minor bug in allocate_hqd(), where the loop run from the
    next-to-allocate pipe until the number of pipes.
    
    This is wrong because we need to consider the possibility where
    next-to-allocate pipe is not 0, and thus, the for-loop only checks part of the
    pipes and doesn't wrap-around, as it supposed to do.
    
    Therefore, we add another counting variable to make sure we go over all the
    pipes, regardless of where we start to look at the first iteration of the loop.
    
    This bug only affected non-HWS mode. In HWS mode, the CP fw is responsible for
    allocating the HQD.
    
    Signed-off-by: Ben Goz <ben.goz@amd.com>
    Signed-off-by: Oded Gabbay <oded.gabbay@amd.com>
    Acked-by: Alex Deucher <alexander.deucher@amd.com>

commit 48bf5b2d00bfeb681f6500c626189c7cd2c964d2
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Sat Dec 27 09:48:28 2014 +0000

    drm/i915: Ban Haswell from using RCS flips
    
    Like Ivybridge, we have reports that we get random hangs when flipping
    with multiple pipes. Extend
    
    commit 2a92d5bca1999b69c78f3c3e97b5484985b094b9
    Author: Chris Wilson <chris@chris-wilson.co.uk>
    Date:   Tue Jul 8 10:40:29 2014 +0100
    
        drm/i915: Disable RCS flips on Ivybridge
    
    to also apply to Haswell.
    
    Reported-and-tested-by: Scott Tsai <scottt.tw@gmail.com>
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=87759
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Cc: stable@vger.kernel.org # 2a92d5bca199 drm/i915: Disable RCS flips on Ivybridge
    Cc: stable@vger.kernel.org
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>

commit 6baff9ed39547e4dba50a0687871937660446370
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Mon Nov 24 17:02:45 2014 +0100

    drm/i915: More cautious with pch fifo underruns
    
    commit b68362278af94e1171f5be9d4e44988601fb0439 upstream.
    
    Apparently PCH fifo underruns are tricky, we have plenty reports that
    we see the occasional underrun (especially at boot-up).
    
    So for a change let's see what happens when we don't re-enable pch
    fifo underrun reporting when the pipe is disabled. This means that the
    kernel can't catch pch fifo underruns when they happen (except when
    all pipes are on on the pch). But we'll still catch underruns when
    disabling the pipe again. So not a terrible reduction in test
    coverage.
    
    Since the DRM_ERROR is new and hence a regression plan B would be to
    revert it back to a debug output. Which would be a lot worse than this
    hack for underrun test coverage in the wild. See the referenced
    discussions for more.
    
    References: http://mid.gmane.org/CA+gsUGRfGe3t4NcjdeA=qXysrhLY3r4CEu7z4bjTwxi1uOfy+g@mail.gmail.com
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=85898
    References: https://bugs.freedesktop.org/show_bug.cgi?id=85898
    References: https://bugs.freedesktop.org/show_bug.cgi?id=86233
    References: https://bugs.freedesktop.org/show_bug.cgi?id=86478
    Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>
    Tested-by: lu hua <huax.lu@intel.com>
    Reviewed-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit f9fff2487c58743ebbefe5e4a455e7d839f863ea
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Mon Nov 24 17:02:45 2014 +0100

    drm/i915: More cautious with pch fifo underruns
    
    commit b68362278af94e1171f5be9d4e44988601fb0439 upstream.
    
    Apparently PCH fifo underruns are tricky, we have plenty reports that
    we see the occasional underrun (especially at boot-up).
    
    So for a change let's see what happens when we don't re-enable pch
    fifo underrun reporting when the pipe is disabled. This means that the
    kernel can't catch pch fifo underruns when they happen (except when
    all pipes are on on the pch). But we'll still catch underruns when
    disabling the pipe again. So not a terrible reduction in test
    coverage.
    
    Since the DRM_ERROR is new and hence a regression plan B would be to
    revert it back to a debug output. Which would be a lot worse than this
    hack for underrun test coverage in the wild. See the referenced
    discussions for more.
    
    References: http://mid.gmane.org/CA+gsUGRfGe3t4NcjdeA=qXysrhLY3r4CEu7z4bjTwxi1uOfy+g@mail.gmail.com
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=85898
    References: https://bugs.freedesktop.org/show_bug.cgi?id=85898
    References: https://bugs.freedesktop.org/show_bug.cgi?id=86233
    References: https://bugs.freedesktop.org/show_bug.cgi?id=86478
    Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>
    Tested-by: lu hua <huax.lu@intel.com>
    Reviewed-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 227cd6819d6a94aa48f0397dce726d24a9ef4078
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Mon Nov 24 17:02:45 2014 +0100

    drm/i915: More cautious with pch fifo underruns
    
    commit b68362278af94e1171f5be9d4e44988601fb0439 upstream.
    
    Apparently PCH fifo underruns are tricky, we have plenty reports that
    we see the occasional underrun (especially at boot-up).
    
    So for a change let's see what happens when we don't re-enable pch
    fifo underrun reporting when the pipe is disabled. This means that the
    kernel can't catch pch fifo underruns when they happen (except when
    all pipes are on on the pch). But we'll still catch underruns when
    disabling the pipe again. So not a terrible reduction in test
    coverage.
    
    Since the DRM_ERROR is new and hence a regression plan B would be to
    revert it back to a debug output. Which would be a lot worse than this
    hack for underrun test coverage in the wild. See the referenced
    discussions for more.
    
    References: http://mid.gmane.org/CA+gsUGRfGe3t4NcjdeA=qXysrhLY3r4CEu7z4bjTwxi1uOfy+g@mail.gmail.com
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=85898
    References: https://bugs.freedesktop.org/show_bug.cgi?id=85898
    References: https://bugs.freedesktop.org/show_bug.cgi?id=86233
    References: https://bugs.freedesktop.org/show_bug.cgi?id=86478
    Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>
    Tested-by: lu hua <huax.lu@intel.com>
    Reviewed-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fa4ab6d15257bfd5d9943bdb0c200cc942d4c794
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Mon Nov 24 17:02:45 2014 +0100

    drm/i915: More cautious with pch fifo underruns
    
    commit b68362278af94e1171f5be9d4e44988601fb0439 upstream.
    
    Apparently PCH fifo underruns are tricky, we have plenty reports that
    we see the occasional underrun (especially at boot-up).
    
    So for a change let's see what happens when we don't re-enable pch
    fifo underrun reporting when the pipe is disabled. This means that the
    kernel can't catch pch fifo underruns when they happen (except when
    all pipes are on on the pch). But we'll still catch underruns when
    disabling the pipe again. So not a terrible reduction in test
    coverage.
    
    Since the DRM_ERROR is new and hence a regression plan B would be to
    revert it back to a debug output. Which would be a lot worse than this
    hack for underrun test coverage in the wild. See the referenced
    discussions for more.
    
    References: http://mid.gmane.org/CA+gsUGRfGe3t4NcjdeA=qXysrhLY3r4CEu7z4bjTwxi1uOfy+g@mail.gmail.com
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=85898
    References: https://bugs.freedesktop.org/show_bug.cgi?id=85898
    References: https://bugs.freedesktop.org/show_bug.cgi?id=86233
    References: https://bugs.freedesktop.org/show_bug.cgi?id=86478
    Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>
    Tested-by: lu hua <huax.lu@intel.com>
    Reviewed-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Luis Henriques <luis.henriques@canonical.com>

commit e7d7cad08d35329a5a783a0aa620560223fe0eb8
Author: Jani Nikula <jani.nikula@intel.com>
Date:   Fri Nov 14 16:54:21 2014 +0200

    drm/i915/dsi: clean up MIPI DSI pipe vs. port usage
    
    MIPI DSI works on ports A and C, which map to pipes A and B,
    respectively. Things are going to get more complicated with the
    introduction of dual link DSI support, so clean up the register defines
    and code to match reality.
    
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Reviewed-by: Gaurav K Singh <gaurav.k.singh@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit b68362278af94e1171f5be9d4e44988601fb0439
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Mon Nov 24 17:02:45 2014 +0100

    drm/i915: More cautious with pch fifo underruns
    
    Apparently PCH fifo underruns are tricky, we have plenty reports that
    we see the occasional underrun (especially at boot-up).
    
    So for a change let's see what happens when we don't re-enable pch
    fifo underrun reporting when the pipe is disabled. This means that the
    kernel can't catch pch fifo underruns when they happen (except when
    all pipes are on on the pch). But we'll still catch underruns when
    disabling the pipe again. So not a terrible reduction in test
    coverage.
    
    Since the DRM_ERROR is new and hence a regression plan B would be to
    revert it back to a debug output. Which would be a lot worse than this
    hack for underrun test coverage in the wild. See the referenced
    discussions for more.
    
    References: http://mid.gmane.org/CA+gsUGRfGe3t4NcjdeA=qXysrhLY3r4CEu7z4bjTwxi1uOfy+g@mail.gmail.com
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=85898
    References: https://bugs.freedesktop.org/show_bug.cgi?id=85898
    References: https://bugs.freedesktop.org/show_bug.cgi?id=86233
    References: https://bugs.freedesktop.org/show_bug.cgi?id=86478
    Signed-off-by: Daniel Vetter <daniel.vetter@intel.com>
    Tested-by: lu hua <huax.lu@intel.com>
    Reviewed-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>

commit bfcdfb0e62639732339c85371a8c07e915bf0941
Author: Stephane Viau <sviau@codeaurora.org>
Date:   Tue Nov 18 12:49:47 2014 -0500

    drm/msm/mdp5: make SMP module dynamically configurable
    
    The Shared Memory Pool (SMP) has its own limitation, features and
    state. Some examples are:
     - the number of Memory Macro Block (MMB) and their size
     - the number of lines that can be fetched
     - the state of MMB currently allocated
     - the computation of number of blocks required per plane
     - client IDs ...
    
    In order to avoid private data to be overwritten by other modules,
    let's make these private to the SMP module.
    
    Some of these depend on the hardware configuration, let's add them
    to the mdp5_config struct.
    
    In some hw configurations, some MMBs are statically tied to RGB
    pipes and cannot be re-allocated dynamically. This change
    introduces the concept of MMB static usage and makes sure that
    dynamic MMB requests are dimensioned accordingly.
    
    A note on passing a pipe pointer, instead of client IDs:
    Client IDs are SMP-related information. Passing PIPE information
    to SMP lets SMP module to find out which SMP client(s) are used.
    This allows the SMP module to access the PIPE pointer, which can
    be used for FIFO watermark configuration.
    By the way, even though REG_MDP5_PIPE_REQPRIO_FIFO_WM_* registers
    are part of the PIPE registers, their functionality is to reflect
    the behavior of the SMP block. These registers access is now
    restricted to the SMP module.
    
    Signed-off-by: Stephane Viau <sviau@codeaurora.org>
    Signed-off-by: Rob Clark <robdclark@gmail.com>

commit fd172d0c47fddff801d998e38c3efdd236ed082f
Merge: b853fdb3c0e7 e1f234bde6ed
Author: Dave Airlie <airlied@redhat.com>
Date:   Sat Nov 15 09:33:40 2014 +1000

    Merge tag 'drm-intel-next-2014-11-07-fixups' of git://anongit.freedesktop.org/drm-intel into drm-next
    
    - skl watermarks code (Damien, Vandana, Pradeep)
    - reworked audio codec /eld handling code (Jani)
    - rework the mmio_flip code to use the vblank evade logic and wait for rendering
      using the standard wait_seqno interface (Ander)
    - skl forcewake support (Zhe Wang)
    - refactor the chv interrupt code to use functions shared with vlv (Ville)
    - prep work for different global gtt views (Tvrtko Ursulin)
    - precompute the display PLL config before touching hw state (Ander)
    - completely reworked panel power sequencer code for chv/vlv (Ville)
    - pre work to split the plane update code into a prepare and commit phase
      (Gustavo Padovan)
    - golden context for skl (Armin Reese)
    - as usual tons of fixes and improvements all over
    
    * tag 'drm-intel-next-2014-11-07-fixups' of git://anongit.freedesktop.org/drm-intel: (135 commits)
      drm/i915: Use correct pipe config to update pll dividers. V2
      drm/i915: Plug memory leak in intel_shared_dpll_start_config()
      drm/i915: Update DRIVER_DATE to 20141107
      drm/i915: Add gen to the gpu hang ecode
      drm/i915: Cache HPLL frequency on VLV/CHV
      Revert "drm/i915/vlv: Remove check for Old Ack during forcewake"
      drm/i915: Make mmio flip wait for seqno in the work function
      drm/i915: Make __wait_seqno non-static and rename to __i915_wait_seqno
      drm/i915: Move the .global_resources() hook call into modeset_update_crtc_power_domains()
      drm/i915/audio: add DOC comment describing HDA over HDMI/DP
      drm/i915: make pipe/port based audio valid accessors easier to use
      drm/i915/audio: add audio codec enable debug log for g4x
      drm/i915/audio: add audio codec disable on g4x
      drm/i915: enable audio codec after port
      drm/i915/audio: add vlv/chv/gen5-7 audio codec disable sequence
      drm/i915/audio: rewrite vlv/chv and gen 5-7 audio codec enable sequence
      drm/i915/skl: Enable Gen9 RC6
      drm/i915/skl: Gen9 Forcewake
      drm/i915/skl: Log the order in which we flush the pipes in the WM code
      drm/i915/skl: Flush the WM configuration
      ...

commit 6517d2734d22b09d3c9dc44fe6879f013a716d19
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Nov 7 11:16:02 2014 +0200

    drm/i915: Pass the current pipe from eDP init to backlight setup
    
    On VLV/CHV both pipes A and B have their own backlight control
    registers. In order to correctly read out the current hardware state at
    init we need to know which pipe is driving the eDP port. Pass that
    information down from the eDP init code into the backlight code.
    
    To determine the correct pipe we first look at which pipe is currently
    configured in the port control register, if that look invalid we look
    at which pipe's PPS is currently controlling the port, and if that
    too looks invalid we just assume pipe A.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 23ec0a8835f38c6e43570b54a786e058a9b9a268
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Nov 7 11:15:59 2014 +0200

    drm/i915: Warn if trying to poke a VLV backlight on invalid pipe
    
    VLV/CHV have backlight controls only on pipes A and B. Bail out
    without touching registers that don't exist, and print a warning.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit d649a7a81f3b5bacb1d60abd7529894d8234a666
Author: Eric Dumazet <edumazet@google.com>
Date:   Thu Nov 13 09:45:22 2014 -0800

    tcp: limit GSO packets to half cwnd
    
    In DC world, GSO packets initially cooked by tcp_sendmsg() are usually
    big, as sk_pacing_rate is high.
    
    When network is congested, cwnd can be smaller than the GSO packets
    found in socket write queue. tcp_write_xmit() splits GSO packets
    using the available cwnd, and we end up sending a single GSO packet,
    consuming all available cwnd.
    
    With GRO aggregation on the receiver, we might handle a single GRO
    packet, sending back a single ACK.
    
    1) This single ACK might be lost
       TLP or RTO are forced to attempt a retransmit.
    2) This ACK releases a full cwnd, sender sends another big GSO packet,
       in a ping pong mode.
    
    This behavior does not fill the pipes in the best way, because of
    scheduling artifacts.
    
    Make sure we always have at least two GSO packets in flight.
    
    This allows us to safely increase GRO efficiency without risking
    spurious retransmits.
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Neal Cardwell <ncardwell@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d21b795c419a7f59b4921b1ab5ff40d9a5eef05a
Author: Damien Lespiau <damien.lespiau@intel.com>
Date:   Tue Nov 4 17:07:03 2014 +0000

    drm/i915/skl: Log the order in which we flush the pipes in the WM code
    
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Damien Lespiau <damien.lespiau@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 0e8fb7ba7ca5410b2a8adc7f19eeb229ed01a32e
Author: Damien Lespiau <damien.lespiau@intel.com>
Date:   Tue Nov 4 17:07:02 2014 +0000

    drm/i915/skl: Flush the WM configuration
    
    When we write new values for the DDB allocation and WM parameters, we now
    need to trigger the double buffer update for the pipe to take the new
    configuration into account.
    
    As the DDB is a global resource shared between planes, enabling or
    disabling one plane will result in changes for all planes that are
    currently in use, thus the need write PLANE_SURF/CUR_BASE for more than
    the plane we're touching.
    
    v2: Don't wait for pipes that are off
    
    v3: Split the staging results structure to not exceed the 1Kb stack
        allocation in skl_update_wm()
    
    v4: Rework and document the algorithm after Ville found that it was all
        wrong.
    
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Damien Lespiau <damien.lespiau@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 08db665203d5e587efc391afc405a9317d29fe17
Author: Damien Lespiau <damien.lespiau@intel.com>
Date:   Tue Nov 4 17:06:52 2014 +0000

    drm/i915/skl: Check the DDB state at modeset
    
    v2: Don't check DDB on pre-SKL platforms
        Don't check DDB state on disabled pipes
    
    v3: Squash "Expose skl_ddb_get_hw_state()"
    
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Damien Lespiau <damien.lespiau@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 2d41c0b59afcdd87d689212cdb929709ffc27d08
Author: Pradeep Bhat <pradeep.bhat@intel.com>
Date:   Tue Nov 4 17:06:42 2014 +0000

    drm/i915/skl: SKL Watermark Computation
    
    This patch implements the watermark algorithm and its necessary
    functions. Two function pointers skl_update_wm and
    skl_update_sprite_wm are provided. The skl_update_wm will update
    the watermarks for the crtc provided as an argument and then
    checks for change in DDB allocation for other active pipes and
    recomputes the watermarks for those Pipes and planes as well.
    Finally it does the register programming for all dirty pipes.
    The trigger of the Watermark double buffer registers will have
    to be once the plane configurations are done by the caller.
    
    v2: fixed the divide-by-0 error in the results computation func.
        Also reworked the PLANE_WM register values computation func to
        make it more compact. Incorporated all other review comments
        from Damien.
    
    v3: Changed the skl_compute_plane_wm function to now return success
        or failure. Also the result blocks and lines are computed here
        instead of in skl_compute_wm_results function.
    
    v4: Adjust skl_ddb_alloc_changed() to the new planes/cursor split
        (Damien)
    
    v5: Reworked the affected functions to implement new plane/cursor
        split.
    
    v6: Rework the logic that triggers the DDB allocation and WM computation
        of skl_update_other_pipe_wm() to not depend on non-computed DDB
        values.
        Always give a valid cursor_width (at boot it's 0) to keep the
        invariant that we consider the cursor plane always enabled.
        Otherwise we end up dividing by 0 in skl_compute_plane_wm()
        (Damien Lespiau)
    
    v7: Spell out allocation
        skl_ddb_ functions should have the ddb as first argument
        Make the skl_ddb_alloc_changed() parameters const
        (Damien)
    
    v8: Rebase on top of the crtc->primary changes
    
    v9: Split the staging results structure to not exceed the 1Kb stack
        allocation in skl_update_wm()
    
    v10: Make skl_pipe_pixel_rate() take a pointer to the pipe config
         Add a comment about overflow considerations for skl_wm_method1()
         Various additions of const
         Various use of sizeof(variable) instead of sizeof(type)
         Various move of variable definitons to a narrower scope
         Zero initialize some stack allocated structures to make sure we
         don't have garbage in case we don't write all the values
         (Ville)
    
    v11: Remove non-necessary default number of blocks/lines when the plane
         is disabled (Ville)
    
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Pradeep Bhat <pradeep.bhat@intel.com>
    Signed-off-by: Damien Lespiau <damien.lespiau@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 2ac96d2a6e102ec64a568a470a6d9c50b9c02e59
Author: Pradeep Bhat <pradeep.bhat@intel.com>
Date:   Tue Nov 4 17:06:40 2014 +0000

    drm/i915/skl: Definition of SKL WM param structs for pipe/plane
    
    This patch defines the structures needed for computation of
    watermarks of pipes and planes for SKL.
    
    v2: Incorporated Damien's review comments and removed unused fields
        in structs for future features like rotation, drrs and scaling.
        The skl_wm_values struct is now made more generic across planes
        and cursor planes for all pipes.
    
    v3: implemented the plane/cursor split.
    
    v4: Change the wm union back to a structure (Ville, Daniel)
    
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Pradeep Bhat <pradeep.bhat@intel.com>
    Signed-off-by: Damien Lespiau <damien.lespiau@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 6ca2aeb27b4a8451052baa61c11c33bd5de8a71c
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Oct 20 19:47:53 2014 +0300

    drm/i915: Add support for CHV pipe B sprite CSC
    
    CHV has a programmable CSC unit on the pipe B sprites. Program the unit
    appropriately for BT.601 limited range YCbCr to full range RGB color
    conversion. This matches the programming we currently do for sprites
    on the other pipes and on other platforms.
    
    It seems the CSC only works when the input data is YCbCr. For RGB
    pixel formats it doesn't matter what we program into the CSC registers.
    Doesn't make much sense to me especially since the register names give
    the impression that RGB input data would also work. But that's how
    it behaves here.
    
    In the review discussions there's been some nice math to explain the
    values obtained here. First about the YCbCr->RGB matrix:
    
    "I had the RGB->YCbCr matrix, inverted it and the values came out. But they
    should match the wikipedia article. Also keep in mind that the coefficients
    are in .12 in fixed point format, hence we need a 1<<12 factor. So let's
    try it:
    
    Kb=.114
    Kr=.299
    (1<<12) * 255/219 ~= 4769
    -(1<<12) * 255/112*(1-Kb)*Kb/(1-Kb-Kr) ~= -1605
    -(1<<12) * 255/112*(1-Kr)*Kr/(1-Kb-Kr) ~= -3330
    (1<<12) * 255/112*(1-Kr) ~= 6537
    (1<<12) * 255/112*(1-Kb) ~= 8263
    
    "Looks like the same values to me."
    
    And then about the limits used for clamping:
    
    "> where did you get these min/max?
    
    "The hardware apparently deals in 10bit values, so we need to multiply everything
    by 4 when we start with the 8bit min/max values.
    
    Y = [16:235] * 4 = [64:940]
    CbCr = ([16:240] - 128) * 4 = [-112:112] * 4 = [-448:448]
    
    "The -128 being the -0.5 bias that the hardware already applied before
    the data entered the CSC unit."
    
    Raw data is also supplied in 10bpc in the registers.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by Rodrigo Vivi <rodrigo.vivi@intel.com>
    [danvet: Copypaste explanations&math from the review discussion.]
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 034e43c6c0dc7e70a6edc96987758237cb92f0cd
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Thu Oct 16 21:27:28 2014 +0300

    drm/i915: Warn if stealing power sequencer from an active eDP port
    
    eDP ports need the power seqeuncer whenever the port is active. Warn if
    we accidentally steal the power sequener from an active eDP port. This
    should not happen unless there's a bug somewhere else, but it's best to
    scream loudly if it happens to help with debugging.
    
    Note that this only checks for active pipes and not for enabled pipes
    which are turned off with dpms. Which means we might run the risk that
    the pps might get stolen and we can't reacquire one when enabling the
    pipe again with dpms on. But on current platforms that's impossible
    since we only support two edp ports with just two panel power
    sequencers. So a more elaborate scheme which reserves the pps even
    when the pipe is inactive isn't required.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Imre Deak <imre.deak@intel.com>
    [danvet: Summarize my discussion with Ville about dpms on/off issues.]
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit ac3c12e4e5a31b75b2621f8f23336bebbe3dbff4
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Thu Oct 16 21:29:56 2014 +0300

    drm/i915: Warn if stealing non pipe A/B power sequencer
    
    There's no power sequencer on pipe C on VLV/CHV so scream a bit if we
    try to steal one from pipes other than A and B.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Imre Deak <imre.deak@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 7b713f50d78b68c04c86eb21e59faf7247aa2cd1
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Thu Oct 16 21:27:35 2014 +0300

    drm/i915: Fix eDP link training when switching pipes on VLV/CHV
    
    When switching from one pipe to another, the power sequencer of the new
    pipe seems to need a bit of kicking to lock into the port. Even the vdd
    force bit doesn't work before the power sequencer has been sufficiently
    kicked, so this must be done before any AUX transactions are attempted.
    
    After extensive experimentation I've determined that it's sufficient
    to first write the port register with the correct values except the
    port must remain disabled, then we can do a second write to enable the
    port, after which the power sequencer is operational and allows the port
    to start up properly.
    
    Contrary to my earlier theories we don't need to enable the port with
    the idle pattern, so let's just use training pattern 1 as that's what
    other platforms use here.
    
    v2: Refine the kick procedure
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Imre Deak <imre.deak@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 099ac7ce2e23cc19382afbd3c192f2c6925851b9
Author: Michal Kazior <michal.kazior@tieto.com>
Date:   Tue Oct 28 10:32:05 2014 +0100

    ath10k: change ce ring cleanup logic
    
    Make ath10k_pci_init_pipes() effectively only
    alter shared target-host data.
    
    The per_transfer_context is a host-only thing.
    It is necessary to preserve it's contents for a
    more robust ring cleanup.
    
    This is required for future warm reset fixes.
    
    Signed-off-by: Michal Kazior <michal.kazior@tieto.com>
    Signed-off-by: Kalle Valo <kvalo@qca.qualcomm.com>

commit 0b44ffc73efd56f7c07276252a0cbf94dbc2fb78
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Tue Jul 8 10:40:29 2014 +0100

    drm/i915: Disable RCS flips on Ivybridge
    
    commit 2a92d5bca1999b69c78f3c3e97b5484985b094b9 upstream.
    
    We currently see random GPU hangs when using RCS flips with multiple
    pipes on Ivybridge. Now that we have mmio flips, we can fairly cheaply
    fallback to using CPU driven flips instead.
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=77104
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 84139d1e39265c20a79daace16ef4b6a9a644d9a
Author: Damien Lespiau <damien.lespiau@intel.com>
Date:   Fri Mar 28 00:18:32 2014 +0530

    drm/i915/skl: Introduce a I915_MAX_PLANES macro
    
    This can be useful to declare structures around pipes and planes and
    don't have to go back auditing the code if the next platorm bump that
    number.
    
    Reviewed-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Damien Lespiau <damien.lespiau@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 133217869ea7f328acedab2ed2ec1ad41b6390bd
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Mon Sep 15 14:55:29 2014 +0200

    drm/i915: Clarify irq_lock locking, special cases
    
    Grab bag for all the special cases:
    - i9xx_check_fifo_underruns is only called from crtc_enable hooks,
      i.e. process context.
    - i915_enable_asle_pipestat is only called from interrupt postinstall
      hooks. So again process context.
    - gen8_irq_power_well_post_enable is called from the runtime pm code,
      which again means process context.
    - The open-coded hpd_irq_setup loop in _thaw is also running in process
      context.
    
    So for all of them the plain _irq variant is sufficient.
    
    Reviewed-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 950eabaf5a87257040e0c207be09487954113f54
Author: Imre Deak <imre.deak@intel.com>
Date:   Mon Sep 8 15:21:09 2014 +0300

    drm/i915: vlv: fix display IRQ enable/disable
    
    We want to enable/disable display IRQs only if global i915 IRQs are
    enabled. To check the latter it's not enough to consult the DRM
    dev->irq_enabled flag, since runtime PM can disable/enable IRQs
    and it won't adjust this flag only the i915 specific
    dev_priv->pm._irqs_disabled flag. Fix this by using the proper
    intel_irqs_enabled() helper instead.
    
    Fortunately this didn't cause an actual problem since even if we enabled
    display IRQs too early (before enabling global i915 IRQs) the
    VLV_MASTER_IER would still be clear masking all IRQs.
    
    This issue was caught by
    
    commit 920dd15a2b2fc60d054646a8a1ffd6aeb6090e05
    Author: Daniel Vetter <daniel.vetter@ffwll.ch>
    Date:   Wed Aug 27 10:43:37 2014 +0200
    
        drm/i915: WARN if interrupts aren't on in en/disable_pipestat
    
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Cc: Jesse Barnes <jbarnes@virtuousgeek.org>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit d518ce50e7c5bbdf0f1ff404b40cd073930af5a2
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Wed Aug 27 10:43:37 2014 +0200

    drm/i915: WARN if interrupts aren't on in en/disable_pipestat
    
    Now that vlv has runtime pm we kinda should check for that like on the
    pch split platforms. Looks like this was simply lost in the vlv rpm
    enabling.
    
    Cc: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Cc: Imre Deak <imre.deak@intel.com>
    Cc: Jesse Barnes <jbarnes@virtuousgeek.org>
    Reviewed-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 1c4e02746147cef8853142a7c71efcb2b9660aed
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Sep 5 21:52:42 2014 +0300

    drm/i915: Fix DVO 2x clock enable on 830M
    
    The spec says:
    "For the correct operation of the muxed DVO pins (GDEVSELB/ I2Cdata,
    GIRDBY/I2CClk) and (GFRAMEB/DVI_Data, GTRDYB/DVI_Clk): Bit 31
    (DPLL VCO Enable) and Bit 30 (2X Clock Enable) must be set to “1” in
    both the DPLL A Control Register (06014h-06017h) and DPLL B Control
    Register (06018h-0601Bh)."
    
    The pipe A and B force quirks take care of DPLL_VCO_ENABLE, so we
    just need a bit of special care to handle DPLL_DVO_2X_MODE.
    
    v2: Recompute num_dvo_pipes on the spot, use PIPE_A/PIPE_B instead
        of pipe/!pipe for the register offsets in disable (Daniel)
        Add a comment about the ordering in enable and another one
        about filtering out the DVO 2x bit in state readout
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Tested-by: Thomas Richter <richter@rus.uni-stuttgart.de> (v1)
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit b6b5d049780c29fe6073b6ecbb712dd8dcb27ebc
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Aug 15 01:22:07 2014 +0300

    drm/i915: Add pipe B force quirk for 830M
    
    830M has problems when some of the pipes are disabled. Namely if a
    plane, DVO port etc. is currently assigned to a disabled pipe, it
    can't moved to the other pipe until the current pipe is also enabled.
    To keep things simple just leave both pipes running all the time.
    
    Ideally I think should turn the pipes off if neither is active, and
    when either becomes active we enable both. But that would reuquire
    proper atomic modeset support, and probably a bit of extra care in
    the order things get enabled.
    
    v2: Reorder wrt. double wide handling changes
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Tested-by: Thomas Richter <richter@rus.uni-stuttgart.de>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 5f080c0f4bd526b36361dd15c4d22f6bbad95af9
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Aug 15 01:22:06 2014 +0300

    Revert "drm/i915: Nuke pipe A quirk on i830M"
    
    830 really does want the pipe A quirk. The planes and ports don't
    react to any register writes unless the pipe currently attached
    to them is running, so it's impossible to move them to the other
    pipe unless both pipes are running.
    
    Also it's documented that the DPLL must be enabled on both pipes
    whenever it's needed.
    
    This reverts commit ac6696d3236bd61503f89a1a99680fd7894d5d53.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Tested-by: Thomas Richter <richter@rus.uni-stuttgart.de>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 728f95eef5238bffdb20e511f5cd553321d404c3
Author: Michal Kazior <michal.kazior@tieto.com>
Date:   Fri Aug 22 14:33:14 2014 +0200

    ath10k: rework posting pci rx buffers
    
    It was possible on a host system running low on
    memory to end up with no rx buffers on pci pipes.
    
    This makes the driver more robust as it won't fail
    to start if it can't allocate all rx buffers right
    away. If it is fatal then upper layers will notice
    trouble anyway.
    
    Signed-off-by: Michal Kazior <michal.kazior@tieto.com>
    Signed-off-by: Kalle Valo <kvalo@qca.qualcomm.com>

commit 3d47fd47f28903f5a9167e95f32a906bd53e13e6
Author: Stephane Viau <sviau@codeaurora.org>
Date:   Mon Jul 7 10:34:01 2014 -0400

    drm/msm/mdp5: add support for MDP5 v1.3
    
    MDP5 has several functional blocks (ie: VIG/RGB pipes, LMs, ...).
    From one revision to another, these blocks' base addresses might
    change due to the number of instances present in the MDP5 hw.
    A way of dealing with these offset changes is to introduce
    dynamic offsets 'per block'.
    
    This change adds support for the new revision of MDP5: v1.3.
    The idea is to define one hw config per MDP version and select
    either one of them at runtime, after reading the MDP5 version.
    
    Once the MDP version is known, 'per block' dynamic offsets
    are initialized through a global pointer, which is then used for
    read/write register access.
    
    Signed-off-by: Stephane Viau <sviau@codeaurora.org>
    Signed-off-by: Rob Clark <robdclark@gmail.com>

commit 813bde438c575e2c84eed9702143d915702847e3
Author: Paulo Zanoni <paulo.r.zanoni@intel.com>
Date:   Fri Jul 4 11:50:29 2014 -0300

    drm/i915: don't write powered down IRQ registers on Gen 8
    
    If we enable unclaimed register reporting on Gen 8, we will discover
    that the IRQ registers for pipes B and C are also on the power well,
    so writes to them when the power well is disabled result in unclaimed
    register errors.
    
    Also, hsw_power_well_post_enable() already takes care of re-enabling
    them once the power well is enabled.
    
    Testcase: igt/pm_rpm/rte
    Signed-off-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Reviewed-by: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit d57d74eb7626a2aeefad47a8d4246e9daf2199f5
Author: Christophe Ricard <christophe.ricard@gmail.com>
Date:   Tue May 20 22:21:58 2014 +0200

    NFC: st21nfca: Implement stop_poll HCI hook
    
    Send DM_DISCONNECT command to disconnect Terminal Host from the HCI network.
    
    - The persistent states of the terminal host pipes, including registry values,
    are not modifies. Therefore, there is no NVRAM update to disconnect the
    terminal host.
    - The terminal host RF card gates are disabled which means that there will be no event
    related to card RF gates until communication has been restored.
    - The terminal host RF reader request is reset so the RF reader polling for terminal
    host is disabled.
    
    To restore the communication, the terminal host can send any HCI command or event.
    
    Signed-off-by: Christophe Ricard <christophe-h.ricard@st.com>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

commit a62d149758d714be4bf0d70b9bd5328e7995c552
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Sat Jun 28 02:04:01 2014 +0300

    drm/i915: Call encoder->post_disable() in intel_sanitize_encoder()
    
    VLV and CHV disable the DP port only in the .post_disable() hook, so we
    need to make intel_sanitize_encoder() call that when it's trying to
    disable encoders without an active pipes.
    
    My bsw actaully hits this when an external display is connected. The
    BIOS still likes to turn on the eDP port, but leaves the pipe disabled.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Rafael Barbalho <rafael.barbalho@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 6b295013155ab6cd4cf29dcf741f198aa36e931e
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Jun 9 16:20:46 2014 +0300

    drm/i915: Avoid div-by-zero when pixel_multiplier is zero
    
    commit 2b85886a5457f5c5dbcd32edbd4e6bba0f4e8678 upstream.
    
    On certain platforms pixel_multiplier is read out in
    .get_pipe_config(), but it also gets used to calculate the
    pixel clock in intel_sdvo_get_config(). If the pipe is disable
    but some SDVO outputs are active, we may end up dividing by zero
    in intel_sdvo_get_config().
    
    To avoid the problem simply check for zero pixel_multiplier and skip
    the division. Another attempt at fixing this involved populating
    pixel_multiplier to 1 even for disabled pipes, but that triggered a
    WARN because SDVO_CMD_GET_CLOCK_RATE_MULT command failed and thus
    encoder_pixel_multiplier was left at zero and didn't match
    pipe_config->pixel_multiplier.
    
    The "divide by pixel_multiplier" operation got introduced here:
     commit 18442d08786472c63a0a80c27f92b033dffc26de
     Author: Ville SyrjÃ¤lÃ¤ <ville.syrjala@linux.intel.com>
     Date:   Fri Sep 13 16:00:08 2013 +0300
    
        drm/i915: Fix port_clock and adjusted_mode.clock readout all over
    
    and it has caused a regression on certain machines since they would
    hit the div-by-zero during resume.
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=76520
    Tested-by: Tim Richardson <tim@tim-richardson.net>
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 87536bfea3d962fd0f2dcba1e5fc029d5c2b27d7
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Jun 9 16:20:46 2014 +0300

    drm/i915: Avoid div-by-zero when pixel_multiplier is zero
    
    commit 2b85886a5457f5c5dbcd32edbd4e6bba0f4e8678 upstream.
    
    On certain platforms pixel_multiplier is read out in
    .get_pipe_config(), but it also gets used to calculate the
    pixel clock in intel_sdvo_get_config(). If the pipe is disable
    but some SDVO outputs are active, we may end up dividing by zero
    in intel_sdvo_get_config().
    
    To avoid the problem simply check for zero pixel_multiplier and skip
    the division. Another attempt at fixing this involved populating
    pixel_multiplier to 1 even for disabled pipes, but that triggered a
    WARN because SDVO_CMD_GET_CLOCK_RATE_MULT command failed and thus
    encoder_pixel_multiplier was left at zero and didn't match
    pipe_config->pixel_multiplier.
    
    The "divide by pixel_multiplier" operation got introduced here:
     commit 18442d08786472c63a0a80c27f92b033dffc26de
     Author: Ville SyrjÃ¤lÃ¤ <ville.syrjala@linux.intel.com>
     Date:   Fri Sep 13 16:00:08 2013 +0300
    
        drm/i915: Fix port_clock and adjusted_mode.clock readout all over
    
    and it has caused a regression on certain machines since they would
    hit the div-by-zero during resume.
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=76520
    Tested-by: Tim Richardson <tim@tim-richardson.net>
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a799a9780eb5c874d9d7ca0bbee66401ca98c013
Author: Shobhit Kumar <shobhit.kumar@intel.com>
Date:   Thu Jul 3 16:35:40 2014 +0530

    drm/i915/vlv: DPI FIFO empty check is not needed
    
    While sending DPI SHUTDOWN command, we cannot wait for FIFO empty as
    pipes are not disabled at that time. In case of MIPI we disable port
    first and send SHUTDOWN command while pipe is still running and FIFOs
    will not be empty, causing spurious error log
    
    Signed-off-by: Shobhit Kumar <shobhit.kumar@intel.com>
    Tested-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>

commit 2a92d5bca1999b69c78f3c3e97b5484985b094b9
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Tue Jul 8 10:40:29 2014 +0100

    drm/i915: Disable RCS flips on Ivybridge
    
    We currently see random GPU hangs when using RCS flips with multiple
    pipes on Ivybridge. Now that we have mmio flips, we can fairly cheaply
    fallback to using CPU driven flips instead.
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=77104
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit a877e8015c0d8f308fee925ee72dc6451de616ce
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Jun 13 13:37:52 2014 +0300

    drm/i915: Wait for cdclk change to occure when going for 400MHz
    
    VLV Punit doesn't support the 400MHz cdclk option, so we bypass the
    Punit and poke at CCK directly. However we forgot to wait for the
    frequeency change to complete. Poll the CCK clock status to make sure
    the clock has changed before we fire up any pipes.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit e37c67a1c5743ac7fc7f946290fee96f84248ca7
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Jun 13 13:37:51 2014 +0300

    drm/i915: Use 200MHz cdclk on vlv when all pipes are off
    
    Drop the cdclk frequency to 200MHz on vlv when all pipes are off. In
    theory we should be able to use 200MHz also when the pixel clock is at
    most 90% of 200MHz. However in practice all we seem to get is a solid
    color picture or an otherwise corrupted display.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit a071fa00647bc9a3c53f917b236fff9aea175e3a
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Wed Jun 18 23:28:09 2014 +0200

    drm/i915: Introduce accurate frontbuffer tracking
    
    So from just a quick look we seem to have enough information to
    accurately figure out whether a given gem bo is used as a frontbuffer
    and where exactly: We have obj->pin_count as a first check with no
    false negatives and only negligible false positives. And then we can
    just walk the modeset objects and figure out where exactly a buffer is
    used as scanout.
    
    Except that we can't due to locking order: If we already hold
    dev->struct_mutex we can't acquire any modeset locks, so could
    potential chase freed pointers and other evil stuff.
    
    So we need something else. For that introduce a new set of bits
    obj->frontbuffer_bits to track where a buffer object is used. That we
    can then chase without grabbing any modeset locks.
    
    Of course the consumers of this (DRRS, PSR, FBC, ...) still need to be
    able to do their magic both when called from modeset and from gem
    code. But that can be easily achieved by adding locks for these
    specific subsystems which always nest within either kms or gem
    locking.
    
    This patch just adds the relevant update code to all places.
    
    Note that if we ever support multi-planar scanout targets then we need
    one frontbuffer tracking bit per attachment point that we expose to
    userspace.
    
    v2:
    - Fix more oopsen. Oops.
    - WARN if we leak obj->frontbuffer_bits when freeing a gem buffer. Fix
      the bugs this brought to light.
    - s/update_frontbuffer_bits/update_fb_bits/. More consistent with the
      fb tracking functions (fb for gem object, frontbuffer for raw bits).
      And the function name was way too long.
    
    v3: Size obj->frontbuffer_bits correctly so that all pipes fit in.
    
    v4: Don't update fb bits in set_base on failure. Noticed by Chris.
    
    v5: s/i915_gem_update_fb_bits/i915_gem_track_fb/ Also remove a few
    local enum pipe variables which are now no longer needed to make the
    function arguments no drop over the 80 char limit.
    
    Cc: Rodrigo Vivi <rodrigo.vivi@intel.com>
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 27b6c122512ca30399bb1b39cc42eda83901f304
Author: Oscar Mateo <oscar.mateo@intel.com>
Date:   Mon Jun 16 16:11:00 2014 +0100

    drm/i915/chv: Ack interrupts before handling them (CHV)
    
    Otherwise, we might receive a new interrupt before we have time to
    ack the first one, eventually missing it.
    
    Without an atomic XCHG operation with mmio space, this patch merely
    reduces the window in which we can miss an interrupt (especially when
    you consider how heavyweight the I915_READ/I915_WRITE operations are).
    
    Notice that, before clearing a port-sourced interrupt in the IIR, the
    corresponding interrupt source status in the PORT_HOTPLUG_STAT must be
    cleared.
    
    Spotted by Bob Beckett <robert.beckett@intel.com>.
    
    v2:
    - Add warning to commit message and comments to the code as per Chris
      Wilson's request.
    - Imre Deak pointed out that the pipe underrun flag might not be signaled
      in IIR, so do not make valleyview_pipestat_irq_handler depend on it.
    
    v3: Improve the source code comment.
    
    Signed-off-by: Oscar Mateo <oscar.mateo@intel.com>
    Reviewed-by: Imre Deak <imre.deak@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 3ff60f89bc4836583f5bd195062f16c563bd97aa
Author: Oscar Mateo <oscar.mateo@intel.com>
Date:   Mon Jun 16 16:10:58 2014 +0100

    drm/i915/vlv: Ack interrupts before handling them (VLV)
    
    Otherwise, we might receive a new interrupt before we have time to
    ack the first one, eventually missing it.
    
    Without an atomic XCHG operation with mmio space, this patch merely
    reduces the window in which we can miss an interrupt (especially when
    you consider how heavyweight the I915_READ/I915_WRITE operations are).
    
    Notice that, before clearing a port-sourced interrupt in the IIR, the
    corresponding interrupt source status in the PORT_HOTPLUG_STAT must be
    cleared.
    
    Spotted by Bob Beckett <robert.beckett@intel.com>.
    
    v2:
    - Reorder the IIR clearing to reduce the window even further.
    - Add warning to commit message and comments to the code as per Chris
      Wilson's request.
    - Imre Deak pointed out that the pipe underrun flag might not be signaled
      in IIR, so do not make valleyview_pipestat_irq_handler depend on it.
    
    v3: Improve the source code comment.
    
    Signed-off-by: Oscar Mateo <oscar.mateo@intel.com>
    Reviewed-by: Imre Deak <imre.deak@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit a2560a66af86f19f3e84122a1887cca81e83dec3
Author: Shashank Sharma <shashank.sharma@intel.com>
Date:   Mon Jun 2 18:07:48 2014 +0530

    drm/i915: Use transcoder as index to MIPI regs
    
    Conceptually, the MIPI registers are addressed by the MIPI transcoder
    index, not the pipe. It doesn't matter right now, because there's a
    1:1 relationship between pipes and MIPI transcoders, but that change
    allows us to break that link in the future
    
    V1: Created new patch to address Damien's review comment.
    Replacing _PIPE calls to _TRANSCODER calls
    V2: Re-basing on patch 2
    V3: Re-basing on patch 2
    V4: Re-basing on patch 2
    
    Signed-off-by: Shashank Sharma <shashank.sharma@intel.com>
    Reviewed-by: Damien Lespiau <damien.lespiau@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 2dcbc34d12ba463d5c0be5d96762911707844098
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Apr 9 13:29:09 2014 +0300

    drm/i915/chv: Handle video DIP registers on CHV
    
    The DIP registers are a mess on VLV and CHV. The register block on pipe
    A is different than the register block on pipes B and C. In order to
    handle that using the pipe offsets, we'd need a new pipe offset per
    register, which seems wasteful. So instead just use the _PIPE3() macro
    to handle these registers.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Damien Lespiau <damien.lespiau@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 2b85886a5457f5c5dbcd32edbd4e6bba0f4e8678
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Jun 9 16:20:46 2014 +0300

    drm/i915: Avoid div-by-zero when pixel_multiplier is zero
    
    On certain platforms pixel_multiplier is read out in
    .get_pipe_config(), but it also gets used to calculate the
    pixel clock in intel_sdvo_get_config(). If the pipe is disable
    but some SDVO outputs are active, we may end up dividing by zero
    in intel_sdvo_get_config().
    
    To avoid the problem simply check for zero pixel_multiplier and skip
    the division. Another attempt at fixing this involved populating
    pixel_multiplier to 1 even for disabled pipes, but that triggered a
    WARN because SDVO_CMD_GET_CLOCK_RATE_MULT command failed and thus
    encoder_pixel_multiplier was left at zero and didn't match
    pipe_config->pixel_multiplier.
    
    The "divide by pixel_multiplier" operation got introduced here:
     commit 18442d08786472c63a0a80c27f92b033dffc26de
     Author: Ville SyrjÃ¤lÃ¤ <ville.syrjala@linux.intel.com>
     Date:   Fri Sep 13 16:00:08 2013 +0300
    
        drm/i915: Fix port_clock and adjusted_mode.clock readout all over
    
    and it has caused a regression on certain machines since they would
    hit the div-by-zero during resume.
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=76520
    Cc: <stable@vger.kernel.org> # 3.13+
    Tested-by: Tim Richardson <tim@tim-richardson.net>
    Reviewed-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>

commit 3991cd6eb52b67ff57b9531dcf48f496bad28146
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Sun Apr 13 12:00:33 2014 +0200

    drm/i915: Don't check gmch state on inherited configs
    
    commit 9953599bc02dbc1d3330e6a0bfc6c50e9dffcac6 upstream.
    
    ... our current modeset code isn't good enough yet to handle this. The
    scenario is:
    
    1. BIOS sets up a cloned config with lvds+external screen on the same
    pipe, e.g. pipe B.
    
    2. We read out that state for pipe B and assign the gmch_pfit state to
    it.
    
    3. The initial modeset switches the lvds to pipe A but due to lack of
    atomic modeset we don't recompute the config of pipe B.
    
    -> both pipes now claim (in the sw pipe config structure) to use the
    gmch_pfit, which just won't work.
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=74081
    Tested-by: max <manikulin@gmail.com>
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 45087225dbb035f7507270f3f07eea0bfc777af2
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Sun Apr 13 12:00:33 2014 +0200

    drm/i915: Don't check gmch state on inherited configs
    
    commit 9953599bc02dbc1d3330e6a0bfc6c50e9dffcac6 upstream.
    
    ... our current modeset code isn't good enough yet to handle this. The
    scenario is:
    
    1. BIOS sets up a cloned config with lvds+external screen on the same
    pipe, e.g. pipe B.
    
    2. We read out that state for pipe B and assign the gmch_pfit state to
    it.
    
    3. The initial modeset switches the lvds to pipe A but due to lack of
    atomic modeset we don't recompute the config of pipe B.
    
    -> both pipes now claim (in the sw pipe config structure) to use the
    gmch_pfit, which just won't work.
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=74081
    Tested-by: max <manikulin@gmail.com>
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit 2ae2a50c956665da82cf9e9582ae1ade082fee75
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Thu May 22 17:56:32 2014 +0200

    drm/i915: Fix up fifo underrun tracking, take N
    
    So apparently this is tricky.
    
    We need to consider:
    - We start out with all the hw enabling bits disabled, both the
      individual fifo underrun interrupts and the shared display error
      interrupts masked. Otherwise if the bios config is broken we'll blow
      up with a NULL deref in our interrupt handler since the crtc
      structures aren't set up yet at driver load time.
    - On gmch we need to mask fifo underruns on the sw side, so always
      need to set that in sanitize_crtc for those platforms.
    - On other platforms we try to set the sw tracking so that it reflects
      the real state. But since a few platforms have shared bits we must
      _not_ disable fifo underrun reporting. Otherwise we'll never enable
      the shared error interrupt.
    
    This is the state before out patch, but unfortunately this is not good
    enough. But after a suspend resume operation this is broken:
    1. We don't enable the hw interrupts since the same code runs on
    resume as on driver load.
    2. The fifo underrun state adjustments we do in sanitize_crtc doesn't
    fire on resume since (except for hilarious firmware) all pipes are off
    at that point. But they also don't hurt since the subsequent crtc
    enabling due to force_restore will enable fifo underruns.
    
    Which means when we enable fifo underrun reporting we notice that the
    per-crtc state is already correct and short-circuit everthing out. And
    the interrupt doesn't get enabled.
    
    A similar problem would happen if the bios doesn't light up anything
    when the driver loads. Which is exactly what happens when we reload
    the driver since our unload functions disables all outputs.
    
    Now we can't just rip out the short-circuit logic and unconditionally
    update the fifo underrun reporting interrupt masking: We have some
    checks for shared error interrupts to catch issues that happened when
    the shared error interrupt was disabled.
    
    The right fix is to push down this logic so that we can always update
    the hardware state, but only check for missed fifo underruns on a real
    enabled->disabled transition and ignore them when we're already
    disabled.
    
    On platforms with shared error interrupt the pipe CRC interrupts are
    grouped together with the fifo underrun reporting this fixes pipe CRC
    support after suspend and driver reloads.
    
    Testcase: igt/kms_pipe_crc_basic/suspend-*
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 4a3436e85ccc2925f4ee7e363131107bb00aab77
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri May 16 19:40:25 2014 +0300

    drm/i915: Shuffle fifo underrun disable/enable points for gmch platforms
    
    Gen2 reports FIFO underruns whenever no planes are enabled on the pipe.
    So in order to avoid false positives we must enable the FIFO underrun
    reporting only when at least one plane is enabled on the pipe. For
    now just move the underrun reporting enable/disable points to the
    other side of the plane enable/disable point. That doesn't cover cases
    when we turn off all the planes for the pipe but leave the pipe running
    on purpose, but it's better than the current situation.
    
    On gen4+ we can actually move the underrun reporting enable/disable to
    the opposite ends of the crtc enable/disable hooks. I suppose in theory
    we could leave the underrun reporting enabled all the time, except on
    VLV where PIPESTAT stops working when the display power well is down.
    If we ever get around to unifying the PIPESTAT irq handling for all
    gmch platforms, we should still follow the VLV route for other platforms.
    It would also micro-optimize the irq handler a bit since we could then
    skip the PIPESTAT reads for all disabled pipes.
    
    Gen3 is still a mystery, but for now I'm going to assume it behaves
    like gen4+.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Thomas Wood <thomas.wood@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 56b80e1f0022e34f8f92aee867aa8982889cda00
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri May 16 19:40:22 2014 +0300

    drm/i915: Check for FIFO underruns at the end of modeset on gmch
    
    FIFO underruns don't generate interrupts on gmch platforms, so
    if we want to know whether a modeset triggered FIFO underruns we
    need to explicitly check for them.
    
    As a modeset on one pipe could cause underruns on other pipes,
    check for underruns on all pipes.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Thomas Wood <thomas.wood@intel.com>
    [danvet: Fix up merge error, kudos to Ville for noticing it.]
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit d3eaf8843da6c3aa0d6b5b480820382c7bd1a89d
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Tue May 20 17:20:05 2014 +0300

    drm/i915: Re-enable vblank irqs for already active pipes
    
    If a pipe is already active when we init/resume there might not be a
    full modeset afterwards so drm_vblank_on() may not get called. In such
    a case if someone is holding a vblank reference across a suspend/resume
    cycle drm_vblank_get() called after resuming won't re-enable the vblank
    interrupts.
    
    So in order to make sure vblank interrupts get re-enabled post-resume,
    call drm_vblank_on() in intel_sanitize_crtc() if the crtc is already
    active.
    
    v2: Also drm_vblank_off() if the pipe got disabled magically
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Testecase: igt/kms_flip/vblank-vs-suspend
    Tested-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit c5ab3bc07e252a32b170ab4797142ef117c367a0
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Wed May 14 15:40:34 2014 +0200

    drm/i915: Accurately initialize fifo underrun state on gmch platforms
    
    We don't have hardware based disable bits on gmch platforms, so need
    to block spurious underrun reports in software. Which means that we
    _must_ start out with fifo underrun reporting disabled everywhere.
    
    This is in big contrast to ilk/hsw/cpt where there's only _one_
    disable bit for all platforms and hence we must allow underrun
    reporting on disabled pipes. Otherwise nothing really works,
    especially the CRC support since that's key'ed off the same irq
    disable bit.
    
    This allows us to ditch the fifo underrun reporting hack from the vlv
    runtime pm code and unexport the internal function from i915_irq.c
    again. Yay!
    
    v2: Keep the display irq disabling, spotted by Imre.
    
    Cc: Imre Deak <imre.deak@intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 07fddb14c0fb7d6ed4e8269c69e8f028f4782349
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Apr 9 13:28:54 2014 +0300

    drm/i915/chv: Bump num_pipes to 3
    
    CHV has three pipes so let's expose them all.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Antti Koskipää <antti.koskipaa@linux.intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 882ec3846e1f88b2893bea5e5920576f1d79bbee
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Apr 28 14:07:43 2014 +0300

    drm/i915/chv: Configure crtc_mask correctly for CHV
    
    On CHV pipe C can driver only port D, and pipes A and B can drivbe only
    ports B and C. Configure the crtc_mask appropriately to reflect that.
    
    v2: Moar braces (Jani)
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Antti Koskipää <antti.koskipaa@linux.intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 3278f67fa7c99d6739304ffe3c04fadd6d74ff80
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Apr 9 13:28:49 2014 +0300

    drrm/i915/chv: Use valleyview_pipestat_irq_handler() for CHV
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Antti Koskipää <antti.koskipaa@linux.intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 823c690958ca3792f5450e8e3167409f4ea7ba7c
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri May 16 19:40:23 2014 +0300

    drm/i915: Convert uncleared FIFO underrun message to errors
    
    Some platforms have a shared error interrupt, so if FIFO underrun
    reporting gets disabled for one pipe/transcoder it gets disabled
    for all pipes/transcoders.
    
    When we disable FIFO underrun reporting we check whether the
    interrupt was enabled or not. If it wasn't we might have missed
    an underrun and we perform one last check right there. Currently
    we print a debug message when an underrun is detect using this
    mechanism. Promote the message to DRM_ERROR() to match the other
    underrun error messages.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 44f37d1f528a5b7c4703e77a710c7fa8a0e452f9
Author: Chon Ming Lee <chon.ming.lee@intel.com>
Date:   Wed Apr 9 13:28:21 2014 +0300

    drm/i915/chv: Pipe select change for DP and HDMI
    
    With additional of pipe C, current 1 bit registers for pipe select
    for HDMI and DP are no longer able to gather for 3 pipes. As a result,
    new bits location in the same registers are added.
    
    For HDMI, VLV uses bit 30, CHV uses bit 24-25.
    
    For DP, VLV uses bit 30, CHV uses bit 16-17.
    
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Chon Ming Lee <chon.ming.lee@intel.com>
    Reviewed-by: Imre Deak <imre.deak@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit eb69b0e59ac845666b7b284ca83a1fef17ebaa9f
Author: Chon Ming Lee <chon.ming.lee@intel.com>
Date:   Wed Apr 9 13:28:16 2014 +0300

    drm/i915/chv: Add vlv_pipe_to_channel
    
    Cherryview has 3 pipes.  Some of the pll dpio offset calculation is
    based on pipe number.  Need to use vlv_pipe_to_channel to calculate the
    correct phy channel to use for the pipe.
    
    Signed-off-by: Chon Ming Lee <chon.ming.lee@intel.com>
    Reviewed-by: Imre Deak <imre.deak@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 7d87a7f709650bde4d7d63117f25ee1c095da5dd
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Apr 9 18:19:04 2014 +0300

    srm/i915/chv: Add Cherryview PCI IDs
    
    v2: Update to also fill in the new num_pipes field.
    
    v3: Rebase on top of the pciid extraction.
    
    v4: Switch from info->has*ring to info->ring mask. Also add VEBOX support whiel
    at it.
    
    v5: s/CHV_PCI_IDS/CHV_IDS/, and drop the trailing '\'
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 43f328d77b853e57a008ad2677f19961c5edff4d
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Apr 9 20:40:52 2014 +0300

    drm/i915/chv: Preliminary interrupt support for Cherryview
    
    CHV has the Gen8 master interrupt register, as well as Gen8
    GT/PCU interrupt registers.
    
    The display block is based on VLV, with the main difference
    of adding pipe C.
    
    v2: Rewrite the order of operations to make more sense
        Don't bail out if MASTER_CTL register doesn't show an interrupt,
        as display interrupts aren't reported there.
    
    v3: Rebase on top of Egbert Eich's hpd irq handling rework by using
    the relevant port hotplug logic like for vlv.
    
    v4: Rebase on top of Ben's gt irq #define refactoring.
    
    v5: Squash in gen8_gt_irq_handler refactoring from Zhao Yakui
    <yakui.zhao@intel.com>
    
    v6: Adapt to upstream changes, dev_priv->irq_received is gone.
    
    v7: Enable 3 the commented-out 3 pipe support.
    
    v8: Rebase on top of Paulo's irq setup rework, use the renamed macros from
    upstream.
    
    v9: Grab irq_lock around i915_enable_pipestat()
    
    FIXME: There's probably some potential for more shared code between bdw and chv.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com> (v2)
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    [danvet: Drop the unnecessary cast Jani spotted.]
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 9953599bc02dbc1d3330e6a0bfc6c50e9dffcac6
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Sun Apr 13 12:00:33 2014 +0200

    drm/i915: Don't check gmch state on inherited configs
    
    ... our current modeset code isn't good enough yet to handle this. The
    scenario is:
    
    1. BIOS sets up a cloned config with lvds+external screen on the same
    pipe, e.g. pipe B.
    
    2. We read out that state for pipe B and assign the gmch_pfit state to
    it.
    
    3. The initial modeset switches the lvds to pipe A but due to lack of
    atomic modeset we don't recompute the config of pipe B.
    
    -> both pipes now claim (in the sw pipe config structure) to use the
    gmch_pfit, which just won't work.
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=74081
    Tested-by: max <manikulin@gmail.com>
    Cc: Alan Stern <stern@rowland.harvard.edu>
    Cc: stable@vger.kernel.org
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>

commit fe392efdae2982243e3a560b8f41c8e4c89b5d51
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Mar 7 18:32:10 2014 +0200

    drm/i915: Skip watermark merging for inactive pipes
    
    Even though the inactive pipes should have their watermarks set to all 0
    with enable=true, we can possibly shave off a few cycles by completely
    skipping the merge procedure for inactive pipes.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 2a44b76bb5a1f520371432825c91fa46c63bde84
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Mar 7 18:32:09 2014 +0200

    drm/i915: Add some more tracked state to intel_pipe_wm
    
    intel_pipe_wm will be used to track the state in different stages
    of the watermark update process. For that we need to keep a bit
    more state in intel_pipe_wm.
    
    We also need to separate the multi-pipe intel_wm_config computation
    from ilk_compute_wm_parameters() as that one deals with the future
    state, and we need the intel_wm_config to match the current hardware
    state at the time we do the watermark merging for multiple pipes.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    [danvet: Frob conflict.]
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 9f97ba806a9cb8e828baca71eca8b684939053d8
Merge: 82c68b6ccd54 10b6ee4a8781
Author: Dave Airlie <airlied@redhat.com>
Date:   Sat Apr 5 16:14:21 2014 +1000

    Merge tag 'drm-intel-fixes-2014-04-04' of git://anongit.freedesktop.org/drm-intel into drm-next
    
     Merge window -fixes pull request as usual. Well, I did sneak in Jani's
    drm_i915_private_t typedef removal, need to have fun with a big sed job
    too ;-)
    
    Otherwise:
    - hdmi interlaced fixes (Jesse&Ville)
    - pipe error/underrun/crc tracking fixes, regression in late 3.14-rc (but
      not cc: stable since only really relevant for igt runs)
    - large cursor wm fixes (Chris)
    - fix gpu turbo boost/throttle again, was getting stuck due to vlv rps
      patches (Chris+Imre)
    - fix runtime pm fallout (Paulo)
    - bios framebuffer inherit fix (Chris)
    - a few smaller things
    
    * tag 'drm-intel-fixes-2014-04-04' of git://anongit.freedesktop.org/drm-intel: (196 commits)
      Skip intel_crt_init for Dell XPS 8700
      drm/i915: vlv: fix RPS interrupt mask setting
      Revert "drm/i915/vlv: fixup DDR freq detection per Punit spec"
      drm/i915: move power domain init earlier during system resume
      drm/i915: Fix the computation of required fb size for pipe
      drm/i915: don't get/put runtime PM at the debugfs forcewake file
      drm/i915: fix WARNs when reading DDI state while suspended
      drm/i915: don't read cursor registers on powered down pipes
      drm/i915: get runtime PM at i915_display_info
      drm/i915: don't read pp_ctrl_reg if we're suspended
      drm/i915: get runtime PM at i915_reg_read_ioctl
      drm/i915: don't schedule force_wake_timer at gen6_read
      drm/i915: vlv: reserve the GT power context only once during driver init
      drm/i915: prefer struct drm_i915_private to drm_i915_private_t
      drm/i915/overlay: prefer struct drm_i915_private to drm_i915_private_t
      drm/i915/ringbuffer: prefer struct drm_i915_private to drm_i915_private_t
      drm/i915/display: prefer struct drm_i915_private to drm_i915_private_t
      drm/i915/irq: prefer struct drm_i915_private to drm_i915_private_t
      drm/i915/gem: prefer struct drm_i915_private to drm_i915_private_t
      drm/i915/dma: prefer struct drm_i915_private to drm_i915_private_t
      ...

commit 04feced98a434c7046108671dc5b6f50f3b63ed7
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Thu Apr 3 13:28:33 2014 +0300

    drm/i915: Provide a bit more info when pipestat bits are wrong
    
    Print the enable_mask and status_mask from
    __i915_{enable,disable}_pipestat() when the caller has messed them up
    somehow.
    
    v2: Use pipe_name() (Damien)
        Fix a typo in the commit message
    
    Reviewed-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Damien Lespiau <damien.lespiau@intel.com>
    Reviewed-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 5812d07d6f8704c1af5372f03ce5332629d57e53
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Mar 31 21:29:41 2014 +0300

    drm/i915: Kill crtc->plane checks from the primary plane update hooks
    
    These were apparently meant to protect the SAREA which only has
    room for two pipes, but things clearly went a bit wonky when
    first the .update_plane() hooks were split up and then pipe C
    got introduced.
    
    The checks actually protecting the SAREA live in
    intel_crtc_update_sarea() these days, so the checks in the primary
    plane update hooks are just historical leftovers which are to be
    eliminated.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit a23dc6584f2961b0888e24270a29d67a2f22a75b
Author: Paulo Zanoni <paulo.r.zanoni@intel.com>
Date:   Tue Apr 1 14:55:11 2014 -0300

    drm/i915: don't read cursor registers on powered down pipes
    
    At i915_display_info, don't call cursor_position() for a disabled
    CRTC, since the CRTC may be on a powered down pipe, and this will
    cause "Unclaimed register before interrupt" error messages.
    
    Testcase: igt/pm_pc8/debugfs-read
    Signed-off-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit b52bcddf0634fc1c70f5c3668f2ab2557f3fce11
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Fri Mar 7 20:34:46 2014 +0100

    drm/i915: Don't enable display error interrupts from the start
    
    commit 5c673b60a9b3b23486f4eda75c72e91d31d26a2b upstream.
    
    We need to enable interrupt processing before all the modeset
    state is set up. But that means we can fall over when we get a pipe
    underrun. This shouldn't happen as long as the bios works correctly
    but as usual this turns out to be wishful thinking.
    
    So disable error interrupts at irq install time and rely on the
    re-enabling code in the modeset functions to take care of this.
    
    Note that due to the SDE interrupt handling race we must
    uncondtionally enable all interrupt sources in SDEIER, hence no need
    to enable the SERR bit specifically.
    
    On gmch platforms we don't have an explicit enable/mask bit for fifo
    underruns. Fixing this up would require a bit of software tracking,
    hence is material for a separate patch. To make this possible we need
    to switch all gmch platforms to the new pipestat interrupt handling
    scheme Imre implemented for vlv, and then also add a safe form of sw
    state checking to __cpu_fifo_underrun_reporting_enabled a bit.
    
    v2: Also handle the ilk/snb cpu fifo underrun bits accordingly.
    Spotted by Ville.
    
    v3: Also handle the south interrupt underrun bits on ibx. Again
    spotted by Ville.
    
    Reported-by: Rob Clark <robdclark@gmail.com>
    Cc: Rob Clark <robdclark@gmail.com>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Tested-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4cc314893064dd3166708242dd0836ef47805d5c
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Mon Mar 24 00:01:41 2014 +0100

    drm/i915: Fix initial pipe underrun state tracking
    
    Since
    
    commit 5c673b60a9b3b23486f4eda75c72e91d31d26a2b
    Author: Daniel Vetter <daniel.vetter@ffwll.ch>
    Date:   Fri Mar 7 20:34:46 2014 +0100
    
        drm/i915: Don't enable display error interrupts from the start
    
    we don't enable underrun interrupts any more at takeover time.
    Unfortunately I've forgotten to also adjust the sw-side tracking.
    
    Since the code assumes that disabled pipes have underrun reporting
    enabled set the disable flag only on all pipes which are active at
    takeover time. Without this underrun reporting wasn't enabled
    correctly on the first modeset. Note that for fastboot this is another
    piece of state that needs to be fixed up by enabling the underrung
    reporting after watermarks have beend fixed up.
    
    On ivb/hsw an additional effect of this regression was that also all
    cpu crc reporting stopped working since the master error interrupt it
    shared across all pipes and sources.
    
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: Jani Nikula <jani.nikula@intel.com>
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=76150
    [danvet: Augment the code comment and polish the commit message a bit,
    as discussed with Jani.]
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    Tested-by: lu hua <huax.lu@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 9b7946975ae8ba68367eb6a13e98dbd19f82ebe5
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Wed Jan 29 14:05:51 2014 -0800

    mm/readahead.c: fix do_readahead() for no readpage(s)
    
    commit 58d5640ebdb273cc817b0d0cda7bcf2efbbc2ff7 upstream.
    
    Commit 63d0f0a3c7e1 ("mm/readahead.c:do_readhead(): don't check for
    ->readpage") unintentionally made do_readahead return 0 for all valid
    files regardless of whether readahead was supported, rather than the
    expected -EINVAL.  This gets forwarded on to userspace, and results in
    sys_readahead appearing to succeed in cases that don't make sense (e.g.
    when called on pipes or sockets).  This issue is detected by the LTP
    readahead01 testcase.
    
    As the exact return value of force_page_cache_readahead is currently
    never used, we can simplify it to return only 0 or -EINVAL (when
    readpage or readpages is missing).  With that in place we can simply
    forward on the return value of force_page_cache_readahead in
    do_readahead.
    
    This patch performs said change, restoring the expected semantics.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Josh Boyer <jwboyer@fedoraproject.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4b4052699ae4e913c4d2b965061f10eec122e558
Author: Sean Paul <seanpaul@chromium.org>
Date:   Thu Jan 30 16:19:19 2014 -0500

    drm/exynos: Implement mode_fixup manager operation
    
    This patch adds a new manager callback for mode_fixup and pipes it
    through exynos_drm_crtc. This will allow the manager drivers to
    alter the mode during modeset.
    
    Signed-off-by: Sean Paul <seanpaul@chromium.org>
    Signed-off-by: Inki Dae <inki.dae@samsung.com>

commit 5c673b60a9b3b23486f4eda75c72e91d31d26a2b
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Fri Mar 7 20:34:46 2014 +0100

    drm/i915: Don't enable display error interrupts from the start
    
    We need to enable interrupt processing before all the modeset
    state is set up. But that means we can fall over when we get a pipe
    underrun. This shouldn't happen as long as the bios works correctly
    but as usual this turns out to be wishful thinking.
    
    So disable error interrupts at irq install time and rely on the
    re-enabling code in the modeset functions to take care of this.
    
    Note that due to the SDE interrupt handling race we must
    uncondtionally enable all interrupt sources in SDEIER, hence no need
    to enable the SERR bit specifically.
    
    On gmch platforms we don't have an explicit enable/mask bit for fifo
    underruns. Fixing this up would require a bit of software tracking,
    hence is material for a separate patch. To make this possible we need
    to switch all gmch platforms to the new pipestat interrupt handling
    scheme Imre implemented for vlv, and then also add a safe form of sw
    state checking to __cpu_fifo_underrun_reporting_enabled a bit.
    
    v2: Also handle the ilk/snb cpu fifo underrun bits accordingly.
    Spotted by Ville.
    
    v3: Also handle the south interrupt underrun bits on ibx. Again
    spotted by Ville.
    
    Reported-by: Rob Clark <robdclark@gmail.com>
    Cc: Rob Clark <robdclark@gmail.com>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: stable@vger.kernel.org
    Tested-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>

commit 6c7fba04ecfddd634751239a52df0eccffc8700b
Author: Imre Deak <imre.deak@intel.com>
Date:   Mon Mar 10 19:44:48 2014 +0200

    drm/i915: fix typo in display IRQ mask when disabling IRQs
    
    Introduced in
    commit e0e33f8ff6f0b6d286afc314802be4993341bd47
    Author: Imre Deak <imre.deak@intel.com>
    Date:   Tue Mar 4 19:23:07 2014 +0200
    
    The impact was luckily minimal, due to the extra check we do against a
    software pipestat IRQ mask.
    
    Caught by Fengguang's 0-day tester.
    
    Cc: Fengguang Wu <fengguang.wu@intel.com>
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit d978ef14456a38034f6c0e94a794129501f89200
Author: Jesse Barnes <jbarnes@virtuousgeek.org>
Date:   Fri Mar 7 08:57:51 2014 -0800

    drm/i915: Wrap the preallocated BIOS framebuffer and preserve for KMS fbcon v12
    
    Retrieve current framebuffer config info from the regs and create an fb
    object for the buffer the BIOS or boot loader left us.  This should
    allow for smooth transitions to userspace apps once we finish the
    initial configuration construction.
    
    v2: check for non-native modes and adjust (Jesse)
        fixup aperture and cmap frees (Imre)
        use unlocked unref if init_bios fails (Jesse)
        fix curly brace around DSPADDR check (Imre)
        comment failure path for pin_and_fence (Imre)
    v3: fixup fixup of aperture frees (Chris)
    v4: update to current bits (locking & pin_and_fence hack) (Jesse)
    v5: move fb config fetch to display code (Jesse)
        re-order hw state readout on initial load to suit fb inherit (Jesse)
        re-add pin_and_fence in fbdev code to make sure we refcount properly (Je
    v6: rename to plane_config (Daniel)
        check for valid object when initializing BIOS fb (Jesse)
        split from plane_config readout and other display changes (Jesse)
        drop use_bios_fb option (Chris)
        update comments (Jesse)
        rework fbdev_init_bios for clarity (Jesse)
        drop fb obj ref under lock (Chris)
    v7: use fb object from plane_config instead (Ville)
        take ref on fb object (Jesse)
    v8: put under i915_fastboot option (Jesse)
        fix fb ptr checking (Jesse)
        inform drm_fb_helper if we fail to enable a connector (Jesse)
        drop unnecessary enabled[] modifications in failure cases (Chris)
        split from BIOS connector config readout (Daniel)
        don't memset the fb buffer if preallocated (Chris)
        alloc ifbdev up front and pass to init_bios (Chris)
        check for bad ifbdev in restore_mode too (Chris)
    v9: fix up !fastboot bpp setting (Jesse)
        fix up !fastboot helper alloc (Jesse)
        make sure BIOS fb is sufficient for biggest active pipe (Jesse)
    v10:fix up size calculation for proposed fbs (Chris)
        go back to two pass pipe fb assignment (Chris)
        add warning for active pipes w/o fbs (Chris)
        clean up num_pipes checks in fbdev_init and fbdev_restore_mode (Chris)
        move i915.fastboot into fbdev_init (Chris)
    v11:make BIOS connector config usage unconditional (Daniel)
    v12:fix up fb vs pipe size checking (Chris)
    
    Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 1ad292b51e358c8b6e9b8966889c21f1fe705489
Author: Jesse Barnes <jbarnes@virtuousgeek.org>
Date:   Fri Mar 7 08:57:49 2014 -0800

    drm/i915: get_plane_config for i9xx v13
    
    Read out the current plane configuration at init time into a new
    plane_config structure.  This allows us to track any existing
    framebuffers attached to the plane and potentially re-use them in our
    fbdev code for a smooth handoff.
    
    v2: update for new pitch_for_width function (Jesse)
        comment how get_plane_config works with shared fbs (Jesse)
    v3: s/ARGB/XRGB (Ville)
        use pipesrc width/height (Ville)
        fix fourcc comment (Bob)
        use drm_format_plane_cpp (Ville)
    v4: use fb for tracking fb data object (Ville)
    v5: fix up gen2 pitch limits (Ville)
    v6: read out stride as well (Daniel)
    v7: split out init ordering changes (Daniel)
        don't fetch config if !CONFIG_FB
    v8: use proper height in get_plane_config (Chris)
    v9: fix CONFIG_FB check for modular configs (Jani)
    v10: add comment about stolen allocation stomping
    v11: drop hw state readout hunk (Daniel)
    v12: handle tiled BIOS fbs (Kristian)
         pull out common bits (Jesse)
    v13: move fb obj alloc out to _init
    
    Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit dd7c0b66e5414c54a9af8f100cc904240bab5102
Author: Imre Deak <imre.deak@intel.com>
Date:   Tue Mar 4 19:23:03 2014 +0200

    drm/i915: factor out reset_vblank_counter
    
    We need to do the same for other platforms in upcoming patches.
    
    v2:
    - s/p/pipe (Ville)
    - Call the new helper with the vbl_lock already held. The part it
      protects is short, so releasing it between pipes only makes proving
      correctness more difficult.
    
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Reviewed-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    [danvet: Resolve conflict with Damien's s/p/pipe/ change.]
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 07d27e20bc4ab2c8f969df8ebd7622320a0cdd92
Author: Damien Lespiau <damien.lespiau@intel.com>
Date:   Mon Mar 3 17:31:46 2014 +0000

    drm/i915: Replace a few for_each_pipe(i) by for_each_pipe(pipe)
    
    Consistency throughout the code base is good and remove some room for
    mistakes (as explained in the "drm/i915: Use a pipe variable to cycle
    through the pipes" commit)
    
    So, let's replace the for_each_pipe(i) occurences by for_each_pipe(pipe)
    when it's reasonable and practical to do so (eg. when there isn't another
    pipe variable already).
    
    Suggested-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Damien Lespiau <damien.lespiau@intel.com>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 8cc87b7549969e532317077d325233779f8b96b6
Author: Damien Lespiau <damien.lespiau@intel.com>
Date:   Mon Mar 3 17:31:44 2014 +0000

    drm/i915: Use a pipe variable to cycle through the pipes
    
    I recently fumbled a patch because I wrote twice num_sprites[i], and it
    was the right thing to do in only 50% of the cases.
    
    This patch ensures I need to write num_sprites[pipe], ie it should be
    self-documented that it's per-pipe number of sprites without having to
    look at what is 'i' this time around.
    
    It's all a lame excuse, but it does make it harder to redo the same
    mistake.
    
    Signed-off-by: Damien Lespiau <damien.lespiau@intel.com>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 4d33f3aa1cc7869c5ea4d57f3715b37bdcf515db
Merge: 4d538b791979 4c0e55288211
Author: Dave Airlie <airlied@redhat.com>
Date:   Tue Mar 4 07:51:41 2014 +1000

    Merge tag 'drm-intel-next-2014-02-14' of ssh://git.freedesktop.org/git/drm-intel into drm-next
    
    - Fix the execbuf rebind performance regression due to topic/ppgtt (Chris).
    - Fix up the connector cleanup ordering for sdvod i2c and dp aux devices (Imre).
    - Try to preserve the firmware modeset config on driver load. And a bit of prep
      work for smooth takeover of the fb contents (Jesse).
    - Prep cleanup for larger gtt address spaces on bdw (Ben).
    - Improve our vblank_wait code to make hsw modesets faster (Paulo).
    - Display debugfs file (Jesse).
    - DRRS prep work from Vandana Kannan.
    - pipestat interrupt handler to fix a few races around vblank/pageflip handling
      on byt (Imre).
    - Improve display fuse handling for display-less SKUs (Damien).
    - Drop locks while stalling for the gpu when serving pagefaults to improve
      interactivity (Chris).
    - And as usual piles of other improvements and small fixes all over.
    
    * tag 'drm-intel-next-2014-02-14' of ssh://git.freedesktop.org/git/drm-intel: (65 commits)
      drm/i915: fix NULL deref in the load detect code
      drm/i915: Only bind each object rather than for every execbuffer
      drm/i915: Directly return the vma from bind_to_vm
      drm/i915: Simplify i915_gem_object_ggtt_unpin
      drm/i915: Allow blocking in the PDE alloc when running low on gtt space
      drm/i915: Don't allocate context pages as mappable
      drm/i915: Handle set_cache_level errors in the status page setup
      drm/i915: Don't pin the status page as mappable
      drm/i915: Don't set PIN_MAPPABLE for legacy ringbuffers
      drm/i915: Handle set_cache_level errors in the pipe control scratch setup
      drm/i915: split PIN_GLOBAL out from PIN_MAPPABLE
      drm/i915: Consolidate binding parameters into flags
      drm/i915: sdvo: add i2c sysfs symlink to the connector's directory
      drm/i915: sdvo: fix error path in sdvo_connector_init
      drm/i915: dp: fix order of dp aux i2c device cleanup
      drm/i915: add unregister callback to connector
      drm/i915: don't reference null pointer at i915_sink_crc
      drm/i915/lvds: Remove dead code from failing case
      drm/i915: don't preserve inherited configs with nothing on v2
      drm/i915/bdw: Split up PPGTT cleanup
      ...

commit 3e09dcd5bde5c1c3bf6aa3f848fe065f0c8fae9c
Merge: 6ba6b7cdaf1a b8a5ff8d7c67
Author: Dave Airlie <airlied@redhat.com>
Date:   Thu Feb 27 14:36:01 2014 +1000

    Merge tag 'drm-intel-next-2014-02-07' of ssh://git.freedesktop.org/git/drm-intel into drm-next
    
    - Yet more steps towards atomic modeset from Ville.
    - DP panel power sequencing improvements from Paulo.
    - irq code cleanups from Ville.
    - 5.4 GHz dp lane clock support for bdw/hsw from Todd.
    - Clock readout support for hsw/bdw (aka fastboot) from Jesse.
    - Make pipe underruns report at ERROR level (Ville). This is to check our
      improved watermarks code.
    - Full ppgtt support from Ben for gen7.
    - More fbc fixes and improvements from Ville all over the place, unfortunately
      not yet enabled by default on more platforms.
    - w/a cleanups from Ville.
    - HiZ stall optimization settings (Chia-I Wu).
    - Display register mmio offset refactor patch from Antti.
    - RPS improvements for corner-cases from Jeff McGee.
    
    * tag 'drm-intel-next-2014-02-07' of ssh://git.freedesktop.org/git/drm-intel: (166 commits)
      drm/i915: Update rps interrupt limits
      drm/i915: Restore rps/rc6 on reset
      drm/i915: Prevent recursion by retiring requests when the ring is full
      drm/i915: Generate a hang error code
      drm/i915: unify FLIP_DONE macro names
      drm/i915: vlv: s/spin_lock_irqsave/spin_lock/ in irq handler
      drm/i915: factor out valleyview_pipestat_irq_handler
      drm/i915: vlv: don't unmask IIR[DISPLAY_PIPE_A/B_VBLANK] interrupt
      drm/i915: Reorganize display pipe register accesses
      drm/i915: Treat using a purged buffer as a source of EFAULT
      drm/i915: Convert EFAULT into a silent SIGBUS
      drm/i915: release mutex in i915_gem_init()'s error path
      drm/i915: check for oom when allocating private_default_ctx
      drm/i915/vlv: WA to fix Voltage not getting dropped to Vmin when Gfx is power gated.
      drm/i915: Get rid of acthd based guilty batch search
      drm/i915: Use hangcheck score to find guilty context
      drm/i915: Drop WaDisablePSDDualDispatchEnable:ivb for IVB GT2
      drm/i915: Fix IVB GT2 WaDisableDopClockGating and WaDisablePSDDualDispatchEnable
      drm/i915: Don't access snooped pages through the GTT (even for error capture)
      drm/i915: Only print information for filing bug reports once
      ...
    
    Conflicts:
            drivers/gpu/drm/i915/intel_dp.c

commit eb1bfe807cb7b62a326fa20df5e3118a32c6f923
Author: Jesse Barnes <jbarnes@virtuousgeek.org>
Date:   Wed Feb 12 12:26:25 2014 -0800

    drm/i915: allow re-use BIOS connector config for initial fbdev config v3
    
    The BIOS or boot loader will generally create an initial display
    configuration for us that includes some set of active pipes and
    displays.  This routine tries to figure out which pipes and connectors
    are active and stuffs them into the crtcs and modes array given to us by
    the drm_fb_helper code.
    
    The overall sequence is:
      intel_fbdev_init - from driver load
        intel_fbdev_init_bios - initialize the intel_fbdev using BIOS data
        drm_fb_helper_init - build fb helper structs
        drm_fb_helper_single_add_all_connectors - more fb helper structs
      intel_fbdev_initial_config - apply the config
        drm_fb_helper_initial_config - call ->probe then register_framebuffer()
            drm_setup_crtcs - build crtc config for fbdev
              intel_fb_initial_config - find active connectors etc
            drm_fb_helper_single_fb_probe - set up fbdev
              intelfb_create - re-use or alloc fb, build out fbdev structs
    
    v2: use BIOS connector config unconditionally if possible (Daniel)
        check for crtc cloning and reject (Daniel)
        fix up comments (Daniel)
    v3: use command line args and preferred modes first (Ville)
    
    Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Tested-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    [danvet: Re-add the WARN_ON for a missing encoder crtc - the state
    sanitizer should take care of this. And spell-ocd the comments.]
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit bbb5eebf034be22fb4de6e9879a0933d3292cf2f
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Wed Feb 12 17:55:36 2014 +0100

    drm/i915: Some polish for the new pipestat_irq_handler
    
    Just a bit of polish which I hope will help me with massaging some
    internal patches to use Imre's reworked pipestat handling:
    - Don't check for underrun reporting or enable pipestat interrupts
      twice.
    - Frob the comments a bit.
    - Do the iir PIPE_EVENT to pipe mapping explicitly with a switch. We
      only have one place which does this, so better to make it explicit.
    
    v2: Ville noticed that I've broken the logic a bit with trying to
    avoid checking whether we're interested in a given pipe twice. push
    the PIPESTAT read down after we've computed the mask of interesting
    bits first to avoid that duplication properly.
    
    v3: Squash in fixups from Imre on irc.
    
    Cc: Imre Deak <imre.deak@intel.com>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Imre Deak <imre.deak@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 658ac4c6a29cfe7cedd494fb4b74acc3643dabab
Author: Damien Lespiau <damien.lespiau@intel.com>
Date:   Mon Feb 10 17:19:45 2014 +0000

    drm/i915: Disable display when fused off
    
    FUSE_STRAP has a bit to inform us that the display has been fused off.
    Use it to setup the definitive number of pipes at run-time.
    
    v2: actually tweak num_pipes, not num_planes
    v3: also tests SFUSE_STRAP bit 7
    v4: rebase on top of drm-nightly
        use DRM_INFO() for the message telling display is fused off
        try to read the FUSE_LOCK bit to determine if PCH display is disabled
    v5: Don't read SFUSE_STRAP (register on the PCH) if num_pipes is already 0
        from the initial device info struct (to prevent hangs) (Daniel Vetter)
    
    Reviewed-by: Mika Kuoppala <mika.kuoppala@intel.com> (for v3)
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com> (for v3)
    Signed-off-by: Damien Lespiau <damien.lespiau@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 91d181ddb310e7ad59da353263b7c35eaa6921b9
Author: Imre Deak <imre.deak@intel.com>
Date:   Mon Feb 10 18:42:49 2014 +0200

    drm/i915: vlv: handle only enabled pipestat interrupt events
    
    Atm we call the handlers for pending pipestat interrupt events even if
    they aren't explicitly enabled by i915_enable_pipestat(). This isn't an
    issue for events other than the vblank start event, since those are
    always enabled anyways. Otoh, we enable the vblank start event
    on-demand, so we'll end up calling the vblank handler at times when they
    are disabled.
    
    I haven't checked if this causes any real problem, but for consistency
    and to remove some overhead we should still fix this by clearing /
    handling only the enabled interrupt events. Also this is a dependency
    for the upcoming VLV power domain patchset where we need to disable all
    the pipestat interrupts whenever the display power well is off.
    
    v2:
    - inline the status->enable mask mapping (Ville)
    - don't check for invalid PSR bit on platforms other than VLV (Ville)
    
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    [danvet: Frob conflict due to different merge order.]
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 10c59c511101bb0726967c9f3a297c83f1b4203d
Author: Imre Deak <imre.deak@intel.com>
Date:   Mon Feb 10 18:42:48 2014 +0200

    drm/i915: vlv: fix mapping of pipestat enable to status bits
    
    At least on VLV we can't get at the pipestat status bits by simply right
    shifting the corresponding enable bits. The mapping between enable and
    status bits for the sprite0,1 flip done and the PSR events don't follow
    this rule, so we need to map them separately.
    
    The PSR enable for pipe A is DPFLIPSTAT[22], but I haven't added support
    for this, since there is no user of it atm. Until support is added WARN
    if someone tries to enable PSR interrupts, or tries to enable the same
    (1 << 6) bit on pipe B, which MBZ.
    
    v2:
    - inline the status->enable mask mapping (Ville)
    - fix bogus use of status bits in enable mask (Ville)
    
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 755e901964a979ea0e1a823ac8c5d477fe8fd108
Author: Imre Deak <imre.deak@intel.com>
Date:   Mon Feb 10 18:42:47 2014 +0200

    drm/i915: pass status instead of enable flags to i915_enable_pipestat
    
    There isn't any PSR interrupt enable bit for pipe A, so we couldn't
    enable it through the current API. Passing the corresponding status bits
    solves this and also makes the mapping between enable and status bits
    simpler on VLV (addressed in an upcoming patch).
    
    Except of checking for invalid status bit arguments, no functional
    change.
    
    v2: split out the low level parts of i915_enable_pipestat accepting
        separate enabled and status masks, to make the non-standard mapping
        between those masks stand out more (added in the next patch)
        (Jesse,Daniel)
    
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 22d3fd4600fcb3da3df63157234a241485b58157
Author: Damien Lespiau <damien.lespiau@intel.com>
Date:   Fri Feb 7 19:12:49 2014 +0000

    drm/i915: Move num_plane to the intel_device_info structure
    
    And rename it to num_sprites as this value doesn't count the primary
    plane.
    
    This limit lives with num_pipes really, and now that dev_priv->info is
    writable we can put it there instead.
    
    While at it, introduce a intel_device_info_runtime_init() where we'll be
    able to gather the device info fields at run-time.
    
    v2: rename num_plane to num_sprites (Ville Syrjälä)
    v3: rebase on top of latest drm-nightly
    
    Reviewed-by: Mika Kuoppala <mika.kuoppala@intel.com> (for v2)
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com> (for v2)
    Signed-off-by: Damien Lespiau <damien.lespiau@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 5c969aa7e152e9eafd8cb3c2788649d168c2ebac
Author: Damien Lespiau <damien.lespiau@intel.com>
Date:   Fri Feb 7 19:12:48 2014 +0000

    drm/i915: Make the intel_device_info structure kept in dev_priv writable
    
    Turns out it'd be nice to change some device information at run-time or simply
    have some code to fill in the info struct instead of having to declare the
    values in 30+ structures.
    
    What prompted this change is handling fused out display/pipe and tweaking
    num_pipes at run-time, but I'm quite sure we'll find other flags/limits to
    stick into dev_priv->info.
    
    Most of the changes were done with a sed:
    sed -i -e 's/dev_priv->info->/dev_priv->info./g' drivers/gpu/drm/i915/*[ch]
    
    with a few tweaks to make it all work:
    - Change the field definition in struct drm_i915_private
    - adjust i915_dump_device_info()
    - adjust i915_driver_load()
    - adjust the INTEL_INFO() macro
    
    v2: cast the info pointer returned by INTEL_INFO() to be const to catch
        uses that would modify the structure post-initialization.
        (Ville Syrjälä)
    
    v3: Redo the patch onto latest drm-nightly,
        Keep the info field const to catch post initialization writes
        instead of the v2 solution,
        Use a direct structure copy for the initial info initialization to
        use the compiler type safety (Ville Syrjälä)
    
    Reviewed-by: Mika Kuoppala <mika.kuoppala@intel.com> (for v2)
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com> (for v2)
    Signed-off-by: Damien Lespiau <damien.lespiau@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit c1874ed7c987664176bd00301f844e91609fe535
Author: Imre Deak <imre.deak@intel.com>
Date:   Tue Feb 4 21:35:46 2014 +0200

    drm/i915: factor out valleyview_pipestat_irq_handler
    
    This will be used by other platforms too, so factor it out.
    
    The only functional change is the reordeing of gmbus_irq_handler() wrt.
    the hotplug handling, but since it only schedules a work, it isn't an
    issue.
    
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Reviewed-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    [danvet: Don't keep on using the private_t typedef.]
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit b7e634cc8dcd320123199a18bae0937b40dc28b8
Author: Imre Deak <imre.deak@intel.com>
Date:   Tue Feb 4 21:35:45 2014 +0200

    drm/i915: vlv: don't unmask IIR[DISPLAY_PIPE_A/B_VBLANK] interrupt
    
    Bspec and the code suggests that the interrupt signaled by IIR[7,5]
    (DISPLAY_PIPE_A/B_VBLANK) is a first level IRQ flag for the second
    level PIPEA/BSTAT[2] (Start of Vertical Blank) interrupt. Measuring
    the relative timings of when IIR[7] and PIPEASTAT[1,2] get set and
    checking the effect of unmasking different pipestat and IIR events
    shows that this isn't so:
    
    First, ISR/IIR[7] gets set independently of PIPEASTAT[18] (Start of
    Vertical Blank Enable) or any other pipestat enable bit, so it isn't
    a first level IRQ bit showing the state of PIPEASTAT[2], but is
    connected directly to the timing generator.
    
    Second, setting only PIPEASTAT[18] and leaving all other pipestat events
    disabled, IIR[6] (DISPLAY_PIPE_A_EVENT) gets set close to the moment when
    PIPEASTAT[2] gets set, so the former is a first level interrupt flag for
    the latter. The bspec is rather unclear about this, but I also assume
    that IIR[6] signals all pipestat A events, except PIPEASTAT[31] (FIFO
    Under-run Status).
    
    Third, IIR[7] is set close to the moment when PIPEASTAT[1] (Framestart
    Interrupt) gets set, in the mode I used about 12usec after PIPEASTAT[2]
    and IIR[6] gets set. This means the IIR[7] isn't marking the start of
    vblank, but rather signals the framestart event.
    
    Based on the above, we don't need to unmask IIR[7] when waiting for
    start of vblank events, but we can rely on IIR[6] being always unmasked,
    which will signal when PIPEASTAT[2] gets set. Doing this will also get
    rid of the overhead of getting an interrupt and servicing IIR[7], which
    is atm raised always some time after IIR[6]/PIPEASTAT[2] is raised.
    
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Reviewed-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 58d5640ebdb273cc817b0d0cda7bcf2efbbc2ff7
Author: Mark Rutland <mark.rutland@arm.com>
Date:   Wed Jan 29 14:05:51 2014 -0800

    mm/readahead.c: fix do_readahead() for no readpage(s)
    
    Commit 63d0f0a3c7e1 ("mm/readahead.c:do_readhead(): don't check for
    ->readpage") unintentionally made do_readahead return 0 for all valid
    files regardless of whether readahead was supported, rather than the
    expected -EINVAL.  This gets forwarded on to userspace, and results in
    sys_readahead appearing to succeed in cases that don't make sense (e.g.
    when called on pipes or sockets).  This issue is detected by the LTP
    readahead01 testcase.
    
    As the exact return value of force_page_cache_readahead is currently
    never used, we can simplify it to return only 0 or -EINVAL (when
    readpage or readpages is missing).  With that in place we can simply
    forward on the return value of force_page_cache_readahead in
    do_readahead.
    
    This patch performs said change, restoring the expected semantics.
    
    Signed-off-by: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 28b57b856b635ea0d44f1281e2efdc963c100ea3
Author: Oded Gabbay <oded.gabbay@amd.com>
Date:   Tue Feb 11 18:28:24 2014 +0200

    drm/radeon/cik: Don't touch int of pipes 1-7
    
    amdkfd should set interrupts for pipes 1-7.
    
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Oded Gabbay <oded.gabbay@amd.com>

commit 6ba844b090b62ef4f67432d118c17ec0aa75d82d
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Wed Jan 22 23:39:30 2014 +0100

    drm/i915: GEN7_MSG_CONTROL is ivb-only
    
    At least I couldn't find it in the Haswell Bspec any more and we've
    tried to test-boot a Haswell machine with num_pipes forced to 0 (i.e.
    hit the PCH_NOP path) and the unclaimed register logic complained.
    
    So restrict this dance to just ivb platforms.
    
    v2: Art pointed out that the bits simply moved on hsw+
    
    v3: Buy code terseneness with a notch of sublety as suggested by
    Chris.
    
    v4: Frob the right bit, spotted by Art.
    
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: Arthur Ranyan <arthur.j.runyan@intel.com>
    Cc: Dave Airlie <airlied@gmail.com>
    Reviewed-by: Art Runyan <arthur.j.runyan@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 7bd0a8e74acc608b77008a6ee9c0198c684ea38b
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Tue Jan 14 14:31:38 2014 +0200

    drm/i915: Set crtc->new_config to NULL for pipes that are about to be disabled
    
    crtc->new_config is only relevant for pipes that are going to be active
    post-modeset. Set the pointer to NULL for all pipes that are going to
    be disabled. This is done to help catch bugs where some piece of code
    would go looking at crtc->new_config even if the data there is stale.
    
    v2: Clear new_config in disable_crtc_nofb() too (Imre)
    
    Suggested-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Imre Deak <imre.deak@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 7668851fec5c207d1d62c4c9311e083edf940bcc
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Jan 10 11:28:06 2014 +0200

    drm/i915: Pre-compute pipe enabled state
    
    Add 'new_enabled' to intel_crtc and precompute it alongside new_encoder
    and new_crtc. This will allow making decisions about shared resources
    that are affected by the set of active pipes, before we've clobbered
    anything for real.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Imre Deak <imre.deak@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 62a7b7fbd08ef745bb51e8728e89125a0ba6327e
Author: Oded Gabbay <oded.gabbay@amd.com>
Date:   Thu Jan 16 17:35:44 2014 +0200

    drm/radeon: reduce number of free VMIDs and pipes in KV
    
    To support HSA on KV, we need to limit the number of vmids and pipes
    that are available for radeon's use with KV.
    
    This patch reserves VMIDs 8-15 for amdkfd (so radeon can only use VMIDs
    0-7) and also makes radeon thinks that KV has only a single MEC with a single
    pipe in it
    
    v3: Use define for static vmid allocation in radeon
    
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Oded Gabbay <oded.gabbay@amd.com>

commit e5cbfbfb2e0e44ed18cbadc02e0247bd1e60fb39
Author: Imre Deak <imre.deak@intel.com>
Date:   Thu Jan 9 17:08:16 2014 +0200

    drm/i915: vlv: W/a for hotplug/manual VGA detection
    
    VGA detection requires the reference clock to be on, so make sure this
    is the case.
    
    This fixes VGA hotplug/manual detection where all pipes are off and so
    we would normally disable all clocks.
    
    v2:
    - Instead of disabling PSR clock gating, force the reference clock on
      through the DPLL_A register. (Kin Chan S <kin.s.chan@intel.com>)
    
    v3:
    - Move enabling of the clock to intel_reset_dpio() and use the DPLL_B
      register instead, where we already have a similar tweak for the CRI
      clock. (Ville)
    
    Reported-by: Joonas Lahtinen <joonas.lahtinen@linux.intel.com>
    Signed-off-by: Imre Deak <imre.deak@intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 2bdfed0205227201fcb442ee4bea4ba20f34526a
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Dec 2 11:08:06 2013 +0200

    drm/i915: Take modeset locks around intel_modeset_setup_hw_state()
    
    commit 027476642811f8559cbe00ef6cc54db230e48a20 upstream.
    
    Some lower level things get angry if we don't have modeset locks
    during intel_modeset_setup_hw_state(). Actually the resume and
    lid_notify codepaths alreday hold the locks, but the init codepath
    doesn't, so fix that.
    
    Note: This slipped through since we only disable pipes if the
    plane/pipe linking doesn't match. Which is only relevant on older
    gen3 mobile machines, if the BIOS fails to set up our preferred
    linking.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Tested-and-reported-by: Paul Bolle <pebolle@tiscali.nl>
    [danvet: Add note now that I could confirm my theory with the log
    files Paul Bolle provided.]
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5c9dce6be58638a8457cf8ad6e84c5d4fe7431d6
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Dec 2 11:08:06 2013 +0200

    drm/i915: Take modeset locks around intel_modeset_setup_hw_state()
    
    commit 027476642811f8559cbe00ef6cc54db230e48a20 upstream.
    
    Some lower level things get angry if we don't have modeset locks
    during intel_modeset_setup_hw_state(). Actually the resume and
    lid_notify codepaths alreday hold the locks, but the init codepath
    doesn't, so fix that.
    
    Note: This slipped through since we only disable pipes if the
    plane/pipe linking doesn't match. Which is only relevant on older
    gen3 mobile machines, if the BIOS fails to set up our preferred
    linking.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Tested-and-reported-by: Paul Bolle <pebolle@tiscali.nl>
    [danvet: Add note now that I could confirm my theory with the log
    files Paul Bolle provided.]
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 06c0dd96bfbba8a9368ffd7c4b12d3bfed37001d
Author: Rob Clark <robdclark@gmail.com>
Date:   Sat Nov 30 17:51:47 2013 -0500

    drm/msm: add mdp5/apq8x74
    
    Add support for the new MDP5 display controller block.  The mapping
    between parts of the display controller and KMS is:
    
      plane   -> PIPE{RGBn,VIGn}             \
      crtc    -> LM (layer mixer)            |-> MDP "device"
      encoder -> INTF                        /
      connector -> HDMI/DSI/eDP/etc          --> other device(s)
    
    Unlike MDP4, it appears we can get by with a single encoder, rather
    than needing a different implementation for DTV, DSI, etc.  (Ie. the
    register interface is same, just different bases.)
    
    Also unlike MDP4, all the IRQs for other blocks (HDMI, DSI, etc) are
    routed through MDP.
    
    And finally, MDP5 has this "Shared Memory Pool" (called "SMP"), from
    which blocks need to be allocated to the active pipes based on fetch
    stride.
    
    Signed-off-by: Rob Clark <robdclark@gmail.com>

commit 7e0d96bc03c140cb8183955ad6f0290caa731e64
Author: Ben Widawsky <ben@bwidawsk.net>
Date:   Fri Dec 6 14:11:26 2013 -0800

    drm/i915: Use multiple VMs -- the point of no return
    
    As with processes which run on the CPU, the goal of multiple VMs is to
    provide process isolation. Specific to GEN, there is also the ability to
    map more objects per process (2GB each instead of 2Gb-2k total).
    
    For the most part, all the pipes have been laid, and all we need to do
    is remove asserts and actually start changing address spaces with the
    context switch. Since prior to this we've converted the setting of the
    page tables to a streamed version, this is quite easy.
    
    One important thing to point out (since it'd been hotly contested) is
    that with this patch, every context created will have it's own address
    space (provided the HW can do it).
    
    v2: Disable BDW on rebase
    
    NOTE: I tried to make this commit as small as possible. I needed one
    place where I could "turn everything on" and that is here. It could be
    split into finer commits, but I didn't really see much point.
    
    Cc: Eric Anholt <eric@anholt.net>
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Ben Widawsky <ben@bwidawsk.net>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 0ba22e26fe47b2a216e5438292aeeb8e015e9d64
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Thu Dec 5 15:51:34 2013 +0200

    drm/i915: Don't merge LP1+ watermarks on ILK/SNB/IVB when multiple pipes are enabled
    
    Multi-pipe LP1+ watermarks are a HSW+ feature, so let's not do it on
    earlier generations.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Imre Deak <imre.deak@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 027476642811f8559cbe00ef6cc54db230e48a20
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Mon Dec 2 11:08:06 2013 +0200

    drm/i915: Take modeset locks around intel_modeset_setup_hw_state()
    
    Some lower level things get angry if we don't have modeset locks
    during intel_modeset_setup_hw_state(). Actually the resume and
    lid_notify codepaths alreday hold the locks, but the init codepath
    doesn't, so fix that.
    
    Note: This slipped through since we only disable pipes if the
    plane/pipe linking doesn't match. Which is only relevant on older
    gen3 mobile machines, if the BIOS fails to set up our preferred
    linking.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Cc: stable@vger.kernel.org
    Tested-and-reported-by: Paul Bolle <pebolle@tiscali.nl>
    [danvet: Add note now that I could confirm my theory with the log
    files Paul Bolle provided.]
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 0694001b27efe5878ba5bd273e39b384821d865e
Author: Paulo Zanoni <paulo.r.zanoni@intel.com>
Date:   Wed Oct 30 18:27:43 2013 -0200

    drm/i915: reuse WRPLL when possible
    
    It seems we do have machines with 3 HDMI/DVI outputs, so sharing
    WRPLLs is the only way to get 3 pipes working.
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=68485
    Signed-off-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Reviewed-by: Damien Lespiau <damien.lespiau@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 7eb1c496f7ac0f386552c0cd9144f6965fc61da5
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Thu Nov 14 11:30:43 2013 +0100

    drm/i915: Reject opening of pipe crc files for invalid pipes
    
    We don't init the lock nor set up all the other state. And it doesn't
    make sense anyway.
    
    This appeases lockdep when running the igt/drv_debugfs_reader test.
    
    Reviewed-by: Damien Lespiau <damien.lespiau@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 51528f7f9d6795fa67accdc5543a51949c416a42
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Tue Oct 29 12:04:08 2013 +0100

    drm/i915: Fix the PPT fdi lane bifurcate state handling on ivb
    
    commit 1fbc0d789d12fec313c91912fc11733fdfbab863 upstream.
    
    Originally I've thought that this is leftover hw state dirt from the
    BIOS. But after way too much helpless flailing around on my part I've
    noticed that the actual bug is when we change the state of an already
    active pipe.
    
    For example when we change the fdi lines from 2 to 3 without switching
    off outputs in-between we'll never see the crucial on->off transition
    in the ->modeset_global_resources hook the current logic relies on.
    
    Patch version 2 got this right by instead also checking whether the
    pipe is indeed active. But that in turn broke things when pipes have
    been turned off through dpms since the bifurcate enabling is done in
    the ->crtc_mode_set callback.
    
    To address this issues discussed with Ville in the patch review move
    the setting of the bifurcate bit into the ->crtc_enable hook. That way
    we won't wreak havoc with this state when userspace puts all other
    outputs into dpms off state. This also moves us forward with our
    overall goal to unify the modeset and dpms on paths (which we need to
    have to allow runtime pm in the dpms off state).
    
    Unfortunately this requires us to move the bifurcate helpers around a
    bit.
    
    Also update the commit message, I've misanalyzed the bug rather badly.
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=70507
    Tested-by: Jan-Michael Brummer <jan.brummer@tabos.org>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4b30553d89c1477f86ef4207fe61a1effdcdacd3
Author: Damien Lespiau <damien.lespiau@intel.com>
Date:   Sat Nov 2 21:07:32 2013 -0700

    drm/i915/bdw: Broadwell has 3 pipes
    
    v2: Rebase (Paulo Zanoni)
    
    v3: Rebase on top of num_pipes having moved to intel_device_info.
    
    Signed-off-by: Damien Lespiau <damien.lespiau@intel.com> (v1)
    Signed-off-by: Paulo Zanoni <paulo.r.zanoni@intel.com> (v2)
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit abd58f0175915bed644aa67c8f69dc571b8280e0
Author: Ben Widawsky <benjamin.widawsky@intel.com>
Date:   Sat Nov 2 21:07:09 2013 -0700

    drm/i915/bdw: Implement interrupt changes
    
    The interrupt handling implementation remains the same as previous
    generations with the 4 types of registers, status, identity, mask, and
    enable. However the layout of where the bits go have changed entirely.
    To address these changes, all of the interrupt vfuncs needed special
    gen8 code.
    
    The way it works is there is a top level status register now which
    informs the interrupt service routine which unit caused the interrupt,
    and therefore which interrupt registers to read to process the
    interrupt. For display the division is quite logical, a set of interrupt
    registers for each pipe, and in addition to those, a set each for "misc"
    and port.
    
    For GT the things get a bit hairy, as seen by the code. Each of the GT
    units has it's own bits defined. They all look *very similar* and
    resides in 16 bits of a GT register. As an example, RCS and BCS share
    register 0. To compact the code a bit, at a slight expense to
    complexity, this is exactly how the code works as well. 2 structures are
    added to the ring buffer so that our ring buffer interrupt handling code
    knows which ring shares the interrupt registers, and a shift value (ie.
    the top or bottom 16 bits of the register).
    
    The above allows us to kept the interrupt register caching scheme, the
    per interrupt enables, and the code to mask and unmask interrupts
    relatively clean (again at the cost of some more complexity).
    
    Most of the GT units mentioned above are command streamers, and so the
    symmetry should work quite well for even the yet to be implemented rings
    which Broadwell adds.
    
    v2: Fixes up a couple of bugs, and is more verbose about errors in the
    Broadwell interrupt handler.
    
    v3: fix DE_MISC IER offset
    
    v4: Simplify interrupts:
    I totally misread the docs the first time I implemented interrupts, and
    so this should greatly simplify the mess. Unlike GEN6, we never touch
    the regular mask registers in irq_get/put.
    
    v5: Rebased on to of recent pch hotplug setup changes.
    
    v6: Fixup on top of moving num_pipes to intel_info.
    
    v7: Rebased on top of Egbert Eich's hpd irq handling rework. Also
    wired up ibx_hpd_irq_setup for gen8.
    
    v8: Rebase on top of Jani's asle handling rework.
    
    v9: Rebase on top of Ben's VECS enabling for Haswell, where he
    unfortunately went OCD on the gt irq #defines. Not that they're still
    not yet fully consistent:
    - Used the GT_RENDER_ #defines + bdw shifts.
    - Dropped the shift from the L3_PARITY stuff, seemed clearer.
    - s/irq_refcount/irq_refcount.gt/
    
    v10: Squash in VECS enabling patches and the gen8_gt_irq_handler
    refactoring from Zhao Yakui <yakui.zhao@intel.com>
    
    v11: Rebase on top of the interrupt cleanups in upstream.
    
    v12: Rebase on top of Ben's DPF changes in upstream.
    
    v13: Drop bdw from the HAS_L3_DPF feature flag for now, it's unclear what
    exactly needs to be done. Requested by Ben.
    
    v14: Fix the patch.
    - Drop the mask of reserved bits and assorted logic, it doesn't match
      the spec.
    - Do the posting read inconditionally instead of commenting it out.
    - Add a GEN8_MASTER_IRQ_CONTROL definition and use it.
    - Fix up the GEN8_PIPE interrupt defines and give the GEN8_ prefixes -
      we actually will need to use them.
    - Enclose macros in do {} while (0) (checkpatch).
    - Clear DE_MISC interrupt bits only after having processed them.
    - Fix whitespace fail (checkpatch).
    - Fix overtly long lines where appropriate (checkpatch).
    - Don't use typedef'ed private_t (maintainer-scripts).
    - Align the function parameter list correctly.
    
    Signed-off-by: Ben Widawsky <ben@bwidawsk.net> (v4)
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    
    bikeshed

commit b97b8287a39d1fe6f8aa1b83405f669634ff8401
Author: Patrik Jakobsson <patrik.r.jakobsson@gmail.com>
Date:   Thu Nov 7 00:14:18 2013 +0100

    drm/gma500/mrst: Add aux register writes when programming pipe
    
    On SDVO pipes (always Pipe B on mrst) we have to sequentially write the
    aux vdc. We might be able to skip programming the primary vdc in
    some/most places but we don't care about that now.
    
    Signed-off-by: Patrik Jakobsson <patrik.r.jakobsson@gmail.com>

commit c164f833cc842b427f817c3a6f30d806b1d57ef1
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Tue Nov 5 22:34:12 2013 +0200

    drm/i915: Sanitize prepare_pipes after valleyview_modeset_global_pipes()
    
    valleyview_modeset_global_pipes() may add pipes that are getting fully
    disabled to prepare_pipes bitmask. The rest of the code doesn't expect
    this, so clear out any such pipes from the prepare_pipes bitmask.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 30a970c6a6ff734eda7cefe7e88f030157a6c939
Author: Jesse Barnes <jbarnes@virtuousgeek.org>
Date:   Mon Nov 4 13:48:12 2013 -0800

    drm/i915/vlv: modeset_global_* for VLV v7
    
    On VLV/BYT, we can adjust the CDclk frequency up or down based on the
    max pixel clock we need to drive.  Lowering it can save power, while
    raising it is necessary to support high resolution.
    
    Add a new callback in modeset_affected_pipes and a
    modeset_global_resources function to perform this adjustment as
    necessary.
    
    v2: use punit interface for 320 and 266 MHz CDclk adjustments (Ville)
    v3: reset GMBUS dividers too, since we changed CDclk (Ville)
    v4: jump to highest voltage when going to 400MHz CDclk (Jesse)
    v5: drop duplicate define (Ville)
        use shifts by 1 for fixed point (Ville)
        drop new callback (Daniel)
    v6: fixup adjusted_mode.clock -> adjusted_mode.crtc_clock again (Ville)
        document Bunit reg access better (Ville)
    v7: pass modeset_pipes and pipe_config to global_pipes so we get the right
        clock data (Ville)
    
    Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 1fbc0d789d12fec313c91912fc11733fdfbab863
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Tue Oct 29 12:04:08 2013 +0100

    drm/i915: Fix the PPT fdi lane bifurcate state handling on ivb
    
    Originally I've thought that this is leftover hw state dirt from the
    BIOS. But after way too much helpless flailing around on my part I've
    noticed that the actual bug is when we change the state of an already
    active pipe.
    
    For example when we change the fdi lines from 2 to 3 without switching
    off outputs in-between we'll never see the crucial on->off transition
    in the ->modeset_global_resources hook the current logic relies on.
    
    Patch version 2 got this right by instead also checking whether the
    pipe is indeed active. But that in turn broke things when pipes have
    been turned off through dpms since the bifurcate enabling is done in
    the ->crtc_mode_set callback.
    
    To address this issues discussed with Ville in the patch review move
    the setting of the bifurcate bit into the ->crtc_enable hook. That way
    we won't wreak havoc with this state when userspace puts all other
    outputs into dpms off state. This also moves us forward with our
    overall goal to unify the modeset and dpms on paths (which we need to
    have to allow runtime pm in the dpms off state).
    
    Unfortunately this requires us to move the bifurcate helpers around a
    bit.
    
    Also update the commit message, I've misanalyzed the bug rather badly.
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=70507
    Tested-by: Jan-Michael Brummer <jan.brummer@tabos.org>
    Cc: stable@vger.kernel.org
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit e309a9977087fa0f2cb16d0a0790f7c05ccb5171
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Wed Oct 16 22:55:51 2013 +0200

    drm/i915: fix CRC debugfs setup
    
    We've set up all files, but removed only those for which we have a
    pipe. Which leaves the one for pipe C on machines with less than 2
    pipes, breaking module reload.
    
    v2: We can't get at the drm device this early (wtf), so just register
    all the files and also remove them all again.
    
    Reviewed-by: Damien Lespiau <damien.lespiau@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 7c4a395ff8f441acb7876281c6777624e6410349
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Oct 9 19:17:56 2013 +0300

    drm/i915: Don't re-compute pipe watermarks except for the affected pipe
    
    No point in re-computing the watermarks for all pipes, when only one
    pipe has changed. The watermarks stored under intel_crtc.wm.active are
    still valid for the other pipes. We just need to redo the merging.
    
    We can also skip the merge/update procedure completely if the new
    watermarks for the affected pipe come out unchanged.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 0b2ae6d72e445b58ae39cfa6ec0b8d3f53ff7a6f
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Oct 9 19:17:55 2013 +0300

    drm/i915: Add intel_pipe_wm and prepare for watermark pre-compute
    
    Introduce a new struct intel_pipe_wm which contains all the
    watermarks for a single pipe. Use it to unify the LP0 and LP1+
    watermark computations so that we can just iterate through the
    watermark levels neatly and call ilk_compute_wm_level() for each.
    
    Also add another tool ilk_wm_merge() that merges the LP1+ watermarks
    from all pipes. For that, embed one intel_pipe_wm inside intel_crtc that
    contains the currently valid watermarks for each pipe.
    
    This is mainly preparatory work for pre-computing the watermarks for
    each pipe and merging them at a later time. For now the merging still
    happens immediately.
    
    v2: Add some comments about level 0 DDB split and intel_wm_config
        Add WARN_ON for level 0 being disabled
        s/lp_wm/merged
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 4a23ee1bd7869c09364916b1ce33804d319a347f
Author: Aaro Koskinen <aaro.koskinen@iki.fi>
Date:   Thu Oct 10 23:25:35 2013 +0300

    staging: octeon-usb: use list.h for pipes
    
    Use list.h helpers for pipes.
    
    Signed-off-by: Aaro Koskinen <aaro.koskinen@iki.fi>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d2695a8a3de7247a4a034a6bb1ad332261db47d7
Author: Aaro Koskinen <aaro.koskinen@iki.fi>
Date:   Thu Oct 10 23:25:32 2013 +0300

    staging: octeon-usb: use dynamic allocation for pipes
    
    Use dynamic memory allocation for pipes.
    
    Signed-off-by: Aaro Koskinen <aaro.koskinen@iki.fi>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2e4e7cb96933d2c9794125b038bd9ea9cba9bcfc
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Jun 12 15:24:40 2012 +0200

    splice: fix racy pipe->buffers uses
    
    commit 047fe3605235888f3ebcda0c728cb31937eadfe6 upstream.
    
    Dave Jones reported a kernel BUG at mm/slub.c:3474! triggered
    by splice_shrink_spd() called from vmsplice_to_pipe()
    
    commit 35f3d14dbbc5 (pipe: add support for shrinking and growing pipes)
    added capability to adjust pipe->buffers.
    
    Problem is some paths don't hold pipe mutex and assume pipe->buffers
    doesn't change for their duration.
    
    Fix this by adding nr_pages_max field in struct splice_pipe_desc, and
    use it in place of pipe->buffers where appropriate.
    
    splice_shrink_spd() loses its struct pipe_inode_info argument.
    
    Reported-by: Dave Jones <davej@redhat.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: Tom Herbert <therbert@google.com>
    Cc: stable <stable@vger.kernel.org> # 2.6.35
    Tested-by: Dave Jones <davej@redhat.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 40e9cf649a88abea96d5756aa6f86e89cfabde6e
Author: Jesse Barnes <jbarnes@virtuousgeek.org>
Date:   Thu Oct 3 11:35:46 2013 -0700

    drm/i915/vlv: reset DPIO on load and resume v2
    
    DPIO needs to have common reset de-asserted on soft resets like boot and
    S3.  In some cases, the BIOS will have done this for us, but it should
    be safe to do at runtime as well, as long as we do it when the pipes are
    otherwise off.
    
    v2: update bit name to match docs better (Ville)
        reset after CRI clock select (Ville)
    
    References: https://bugs.freedesktop.org/show_bug.cgi?id=69166
    Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit ce352550327b394f3072a07c9cd9d27af9276f15
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Fri Sep 20 10:14:23 2013 +0300

    drm/i915: Fix unclaimed register access due to delayed VGA memory disable
    
    VGA registers live inside the power well on HSW, so in order to write
    the VGA MSR register we need the power well to be on.
    
    We really must write to the register to properly clear the
    VGA_MSR_MEM_EN enable bit, even if all VGA registers get zeroed when
    the power well is down. It seems that the implicit zeroing done by
    the power well is not enough to propagate the VGA_MSR_MEM_EN bit to
    whomever is actually responsible for the memory decode ranges.
    
    If we leave VGA memory decode enabled, and then turn off the power well,
    all VGA memory reads will return zeroes. But if we first disable VGA
    memory deocde and then turn off the power well, VGA memory reads
    return all ones, indicating that the access wasn't claimed by anyone.
    For the vga arbiter to function correctly the IGD must not claim the
    VGA memory accesses.
    
    Previously we were doing the VGA_MSR register access while the power well
    was excplicitly powered up during driver init. But ever since
    
     commit 6e1b4fdad5157bb9e88777d525704aba24389bee
     Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
     Date:   Thu Sep 5 20:40:52 2013 +0300
    
        drm/i915: Delay disabling of VGA memory until vgacon->fbcon handoff is done
    
    we delay the VGA memory disable until fbcon has initialized, and so
    there's a possibility that the power well got turned off during the
    fbcon modeset. Also vgacon_save_screen() will need the power well to be
    on to be able to read the VGA memory.
    
    So immediately after enabling the power well during init grab a refence
    for VGA purposes, and after all the VGA handling is done, release it.
    
    v2: Add intel_display_power_put() for the num_pipes==0 case
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    [danvet: Fix up the patch wiggle screw-up that I've done and which
    Paulo catched. Also polish spelling in the patch headline.]
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit ad3a44799510e778a6b4bf7999618634bdd6615d
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Sep 4 18:30:04 2013 +0300

    drm/i915: Check pixel clock limits on pre-gen4
    
    We don't want to try to push the hardware beyond it's capabilities,
    so check the pixel clock against the display core clock limit. Do
    it for pre-gen4 for now since that's where we alread have the double
    wide pixel clock limit check.
    
    Let's assume that when double wide mode is enabled the max
    pixel clock limit is also doubled.
    
    FIXME: panel fitter downscaling probably affects the limit on
    non-pch platforms too, so we'd need another version of
    ilk_pipe_pixel_rate() to figure that out.
    
    FIXME: should check the limits on all platforms. Also sprites
    affect the max allowed pixel rate on some platforms, so we need
    to eventually tie all the planes and pipes into one check in
    the future. But we need plane state pre-compute before that can
    happen.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 38f7d6edbf91693bb679bb29901c8296e7838cd9
Author: Nicholas Bellinger <nab@linux-iscsi.org>
Date:   Thu Sep 5 15:04:22 2013 -0700

    iscsi-target; Bump default CmdSN Depth to 64
    
    This patch bumps the default TA_DEFAULT_CMDSN_DEPTH from 16 -> 64,
    which is closer to a sane default for larger pipes @ 10 Gb/sec
    with traditional iSCSI, or @ 40/56 Gb/sec Ethernet/Infiniband with
    iSCSI Extentions for RDMA.
    
    There is really no downside to increasing this default value for
    1 Gb/sec.
    
    Signed-off-by: Nicholas Bellinger <nab@linux-iscsi.org>

commit 414a629598409497c05f2387c22c77dee143b4ff
Author: Trond Myklebust <Trond.Myklebust@netapp.com>
Date:   Tue Aug 27 16:52:16 2013 -0400

    RPCSEC_GSS: Share rpc_pipes when an rpc_clnt owns multiple rpcsec auth caches
    
    Ensure that if an rpc_clnt owns more than one RPCSEC_GSS-based authentication
    mechanism, then those caches will share the same 'gssd' upcall pipe.
    
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit 6b2fddd3e7f7cd437fb234407d7504fd22caf064
Author: Trond Myklebust <Trond.Myklebust@netapp.com>
Date:   Mon Aug 26 16:05:11 2013 -0400

    RPCSEC_GSS: Fix an Oopsable condition when creating/destroying pipefs objects
    
    If an error condition occurs on rpc_pipefs creation, or the user mounts
    rpc_pipefs and then unmounts it, then the dentries in struct gss_auth
    need to be reset to NULL so that a second call to gss_pipes_dentries_destroy
    doesn't try to free them again.
    
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit 63b66e5ba54b15a6592be00555d762db6db739ce
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Thu Aug 8 15:12:06 2013 +0200

    drm/i915: Don't deref pipe->cpu_transcoder in the hangcheck code
    
    If we get an error event really early in the driver setup sequence,
    which gen3 is especially prone to with various display GTT faults we
    Oops. So try to avoid this.
    
    Additionally with Haswell the transcoders are a separate bank of
    registers from the pipes (4 transcoders, 3 pipes). In event of an
    error, we want to be sure we have a complete and accurate picture of
    the machine state, so record all the transcoders in addition to all
    the active pipes.
    
    This regression has been introduced in
    
    commit 702e7a56af3780d8b3a717f698209bef44187bb0
    Author: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Date:   Tue Oct 23 18:29:59 2012 -0200
    
        drm/i915: convert PIPECONF to use transcoder instead of pipe
    
    Based on the patch "drm/i915: Dump all transcoder registers on error"
    from Chris Wilson:
    
    v2: Rebase so that we don't try to be clever and try to figure out the
    cpu transcoder from hw state. That exercise should be done when we
    analyze the error state offline.
    
    The actual bugfix is to not call intel_pipe_to_cpu_transcoder in the
    error state capture code in case the pipes aren't fully set up yet.
    
    v3: Simplifiy the err->num_transcoders computation a bit. While at it
    make the error capture stuff save on systems without a display block.
    
    v4: Fix fail, spotted by Jani.
    
    v5: Completely new commit message, cc: stable.
    
    Cc: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Cc: Damien Lespiau <damien.lespiau@intel.com>
    Cc: Jani Nikula <jani.nikula@intel.com>
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=60021
    Cc: stable@vger.kernel.org
    Tested-by: Dustin King <daking@rescomp.stanford.edu>
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 240264f49edbe02eb96b472ae1c518cc413f9d01
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Aug 7 13:29:12 2013 +0300

    drm/i915: Pull some watermarks state into a separate structure
    
    There is a bunch of global state that needs to be considered when
    checking watermarks for validity. Move most of that to a new
    structure intel_wm_config, to avoid having to pass around so
    many variables.
    
    One notable thing left out is the DDB partitioning information,
    since we often anyway need to check the same watermarks against
    both 1/2 and 5/6 DDB partitioning layouts.
    
    v2: s/pipes_active/num_pipes_active
    
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 158ae64f820939473012dacfc0ae1ec782b45b60
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Aug 7 13:28:19 2013 +0300

    drm/i915: Calculate max watermark levels for ILK+
    
    There are quite a few variables we need to take into account to
    determine the maximum watermark levels, so it feels a bit cleaner
    to calculate those rather than just have a bunch of what look like
    magic numbers.
    
    v2: s/pipes_active/num_pipes_active
        s/othwewise/otherwise
    
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 29ebf90f8157f9d01dda2b1555b4a08e9e542b21
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Sat Jul 27 17:23:55 2013 +0100

    drm/i915: Squelch repeated reasoning for why FBC cannot be activated
    
    Almost invariably the reason why FBC cannot be turned on is the same
    every time (disabled via parameter, too many pipes, pipe too large etc)
    as modesetting and framebuffer configuration changes less frequently
    than trying to enable FBC.
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Ben Widawsky <ben@bwidawsk.net>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit eeee245268c951262b861bc1be4e9dc812352499
Author: Trond Myklebust <Trond.Myklebust@netapp.com>
Date:   Wed Jul 10 15:33:01 2013 -0400

    SUNRPC: Fix a deadlock in rpc_client_register()
    
    Commit 384816051ca9125cd54750e59c780c2a2655fa4f (SUNRPC: fix races on
    PipeFS MOUNT notifications) introduces a regression when we call
    rpc_setup_pipedir() with RPCSEC_GSS as the auth flavour.
    
    By calling rpcauth_create() while holding the sn->pipefs_sb_lock, we
    end up deadlocking in gss_pipes_dentries_create_net().
    Fix is to register the client and release the mutex before calling
    rpcauth_create().
    
    Reported-by: Weston Andros Adamson <dros@netapp.com>
    Tested-by: Weston Andros Adamson <dros@netapp.com>
    Cc: Stanislav Kinsbursky <skinsbursky@parallels.com>
    Cc: <stable@vger.kernel.org> # : 3848160: SUNRPC: fix races on PipeFS MOUNT
    Cc: <stable@vger.kernel.org> # : e73f4cc: SUNRPC: split client creation
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit b79480ba5074ae81d1c32073bce3981652e0f717
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Thu Jun 27 17:52:10 2013 +0200

    drm/i915: assert_spin_locked for pipestat interrupt enable/disable
    
    Just to keep the paranoia equal also sprinkle locking asserts over the
    pipestat interrupt enable/disable functions.
    
    Again this results in false positives in the interrupt setup. Add
    bogo-locking for these and a big comment explaining why it's there and
    that it's indeed unnecessary.
    
    v2: Fix up the spelling fail Paulo spotted in comments.
    
    Reviewed-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit b5ea2d5681522f1b8ef886b5ac039903bf1d39fe
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Thu Jun 27 17:52:15 2013 +0200

    drm/i915: fix hpd interrupt register locking
    
    Our interrupt handler (in hardirq context) could race with the timer
    (in softirq context), hence we need to hold the spinlock around the
    call to ->hdp_irq_setup in intel_hpd_irq_handler, too.
    
    But as an optimization (and more so to clarify things) we don't need
    to do the irqsave/restore dance in the hardirq context.
    
    Note also that on ilk+ the race isn't just against the hotplug
    reenable timer, but also against the fifo underrun reporting. That one
    also modifies the SDEIMR register (again protected by the same
    dev_priv->irq_lock).
    
    To lock things down again sprinkle a assert_spin_locked. But exclude
    the functions touching SDEIMR for now, I want to extract them all into
    a new helper function (like we do already for pipestate, display
    interrupts and all the various gt interrupts).
    
    v2: Add the missing 't' Egbert spotted in a comment.
    
    v3: Actually fix the right misspelled comment (Paulo).
    
    Cc: Egbert Eich <eich@suse.de>
    Reviewed-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 4f6bb246f69443549fbbd0f2abaf863243cb35e9
Author: Stanislav Kinsbursky <skinsbursky@parallels.com>
Date:   Mon Jun 24 11:52:59 2013 +0400

    SUNRPC: PipeFS MOUNT notification optimization for dying clients
    
    Not need to create pipes for dying client. So just skip them.
    
    Note: we can safely dereference the client structure, because notification
    caller is holding sn->pipefs_sb_lock.
    
    Signed-off-by: Stanislav Kinsbursky <skinsbursky@parallels.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit adb6fa7ffe9031857ec14b8aab75c9ab65556cbc
Author: Stanislav Kinsbursky <skinsbursky@parallels.com>
Date:   Wed Jun 26 10:15:14 2013 +0400

    SUNRPC: fix races on PipeFS UMOUNT notifications
    
    CPU#0                                   CPU#1
    -----------------------------           -----------------------------
    rpc_kill_sb
    sn->pipefs_sb = NULL                    rpc_release_client
    (UMOUNT_EVENT)                          rpc_free_auth
    rpc_pipefs_event
    rpc_get_client_for_event
    !atomic_inc_not_zero(cl_count)
    <skip the client>
                                            atomic_inc(cl_count)
                                            rpc_free_client
                                            rpc_clnt_remove_pipedir
                                            <skip client dir removing>
    
    To fix this, this patch does the following:
    
    1) Calls RPC_PIPEFS_UMOUNT notification with sn->pipefs_sb_lock being held.
    2) Removes SUNRPC client from the list AFTER pipes destroying.
    3) Doesn't hold RPC client on notification: if client in the list, then it
    can't be destroyed while sn->pipefs_sb_lock in hold by notification caller.
    
    Signed-off-by: Stanislav Kinsbursky <skinsbursky@parallels.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit 384816051ca9125cd54750e59c780c2a2655fa4f
Author: Stanislav Kinsbursky <skinsbursky@parallels.com>
Date:   Mon Jun 24 11:52:38 2013 +0400

    SUNRPC: fix races on PipeFS MOUNT notifications
    
    Below are races, when RPC client can be created without PiepFS dentries
    
    CPU#0                                   CPU#1
    -----------------------------           -----------------------------
    rpc_new_client                          rpc_fill_super
    rpc_setup_pipedir
    mutex_lock(&sn->pipefs_sb_lock)
    rpc_get_sb_net == NULL
    (no per-net PipeFS superblock)
                                            sn->pipefs_sb = sb;
                                            notifier_call_chain(MOUNT)
                                            (client is not in the list)
    rpc_register_client
    (client without pipes dentries)
    
    To fix this patch:
    1) makes PipeFS mount notification call with pipefs_sb_lock being held.
    2) releases pipefs_sb_lock on new SUNRPC client creation only after
    registration.
    
    Signed-off-by: Stanislav Kinsbursky <skinsbursky@parallels.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit 963e81f9e060113d3bec1aa95eac76a7d3810879
Author: Alex Deucher <alexander.deucher@amd.com>
Date:   Wed Jun 26 17:37:11 2013 -0400

    drm/radeon/cik: Add support for compute queues (v4)
    
    On CIK, the compute rings work slightly differently than
    on previous asics, however the basic concepts are the same.
    
    The main differences:
    - New MEC engines for compute queues
    - Multiple queues per MEC:
      - CI/KB: 1 MEC, 4 pipes per MEC, 8 queues per pipe = 32 queues
      -    KV: 2 MEC, 4 pipes per MEC, 8 queues per pipe = 64 queues
    - Queues can be allocated and scheduled by another queue
    - New doorbell aperture allows you to assign space in the aperture
      for the wptr which allows for userspace access to queues
    
    v2: add wptr shadow, fix eop setup
    v3: fix comment
    v4: switch to new callback method
    
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
    Reviewed-by: Jerome Glisse <jglisse@redhat.com>

commit c0d43d62233b3d4523a62fe88896bfc7a609e572
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Fri Jun 7 23:11:08 2013 +0200

    drm/i915: hw state readout for shared pch plls
    
    Well, the first step of a long road at least, it only reads out
    the pipe -> shared dpll association thus far. Other state which needs
    to follow:
    
    - hw state of the dpll (on/off + dpll registers). Currently we just
      read that out from the hw state, but that doesn't work too well when
      the dpll is in use, but not yet fully enabled. We get away since
      most likely it already has been enabled and so the correct state is
      left behind in the registers. But that doesn't hold for atomic
      modesets when we want to enable all pipes at once.
    
    - Refcount reconstruction for each dpll.
    
    - Cross-checking of all the above. For that we need to keep the dpll
      register state both in the pipe and in the shared_dpll struct, so
      that we can check that every pipe is still connected to a correctly
      configured dpll.
    
    Note that since the refcount resconstruction isn't done yet this will
    spill a few WARNs at boot-up while trying to disable pch plls which
    have bogus refcounts. But since there's still a pile of refactoring to
    do I'd like to lock down the state handling as soon as possible hence
    decided against reordering the patches to quiet these WARNs - after
    all the issues they're complaining about have existed since forever,
    as Jesse can testify by having pch pll states blow up consistently in
    his fastboot patches ...
    
    v2: We need to preserve the old shared_dpll since currently the
    shared dpll refcount dropping/getting is done in ->mode_set. With
    the usual pipe_config infrastructure the old dpll id is already lost
    at that point, hence preserve it in the new config.
    
    v3: Rebase on top of the ips patch from Paulo.
    
    v4: We need to unconditionally take over the shared_dpll id from the
    old pipe config when e.g. doing a direct pch port -> cpu edp
    transition.
    
    v5: Move the saving of the old shared_dpll id to an ealier patch.
    
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit e2b78267421c2b407409772119a4aa500da56cc8
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Fri Jun 7 23:10:03 2013 +0200

    drm/i915: switch crtc->shared_dpll from a pointer to an enum
    
    Dealing with discrete enum values is simpler for hw state readout and
    pipe config computations than pointers - having neat names instead of
    chasing pointers should look better in the code.
    
    This isn't a that good reason for pch plls, but on haswell we actually
    have 3 different types of plls: WRPLL, SPLL and the DP clocks. Having
    explicit names should help there.
    
    Since this also adds the intel_crtc_to_shared_dpll helper to further
    abstract away the crtc -> dpll relationship this will also help to
    make the next patch simpler, which moves the shared dpll into the pipe
    configuration.
    
    Also note that for uniformity we have two special dpll ids: NONE for
    pipes which need a shared pll but don't have one (yet) and private for
    when there's a non-shared pll (e.g. per-pipe or per-port pll).
    
    I've thought whether we should also add a 2nd enum for the type of the
    pll we want (for really generic pll selection code) but thrown that
    idea out again - likely there's too much platform craziness going on
    to be able to share the pll selection logic much.
    
    Since this touched all the shared_pll functions a bit I've also done
    an s/intel_crtc/crtc/ replacement on a few of them.
    
    v2: Kill DPLL_ID_NONE. It's probably better to call it DPLL_ID_INVALID and use
    it to check that the compute config stage assigns a dpll to every pipe.
    But since that code isn't ready yet until we move the dpll selection out
    of the ->mode_set callback, there's no use for it.
    
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit ac645c6469dcc5a4bdbce8ed98e40182e8e54140
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Tue May 21 15:25:11 2013 +0530

    ARC: copy_(to|from)_user() to honor usermode-access permissions
    
    commit a950549c675f2c8c504469dec7d780da8a6433dc upstream.
    
    This manifested as grep failing psuedo-randomly:
    
    -------------->8---------------------
    [ARCLinux]$ ip address show lo | grep inet
    [ARCLinux]$ ip address show lo | grep inet
    [ARCLinux]$ ip address show lo | grep inet
    [ARCLinux]$
    [ARCLinux]$ ip address show lo | grep inet
        inet 127.0.0.1/8 scope host lo
    -------------->8---------------------
    
    ARC700 MMU provides fully orthogonal permission bits per page:
    Ur, Uw, Ux, Kr, Kw, Kx
    
    The user mode page permission templates used to have all Kernel mode
    access bits enabled.
    This caused a tricky race condition observed with uClibc buffered file
    read and UNIX pipes.
    
    1. Read access to an anon mapped page in libc .bss: write-protected
       zero_page mapped: TLB Entry installed with Ur + K[rwx]
    
    2. grep calls libc:getc() -> buffered read layer calls read(2) with the
       internal read buffer in same .bss page.
       The read() call is on STDIN which has been redirected to a pipe.
       read(2) => sys_read() => pipe_read() => copy_to_user()
    
    3. Since page has Kernel-write permission (despite being user-mode
       write-protected), copy_to_user() suceeds w/o taking a MMU TLB-Miss
       Exception (page-fault for ARC). core-MM is unaware that kernel
       erroneously wrote to the reserved read-only zero-page (BUG #1)
    
    4. Control returns to userspace which now does a write to same .bss page
       Since Linux MM is not aware that page has been modified by kernel, it
       simply reassigns a new writable zero-init page to mapping, loosing the
       prior write by kernel - effectively zero'ing out the libc read buffer
       under the hood - hence grep doesn't see right data (BUG #2)
    
    The fix is to make all kernel-mode access permissions mirror the
    user-mode ones. Note that the kernel still has full access to pages,
    when accessed directly (w/o MMU) - this fix ensures that kernel-mode
    access in copy_to_from() path uses the same faulting access model as for
    pure user accesses to keep MM fully aware of page state.
    
    The issue is peudo-random because it only shows up if the TLB entry
    installed in #1 is present at the time of #3. If it is evicted out, due
    to TLB pressure or some-such, then copy_to_user() does take a TLB Miss
    Exception, with a routine write-to-anon COW processing installing a
    fresh page for kernel writes and also usable as it is in userspace.
    
    Further the issue was dormant for so long as it depends on where the
    libc internal read buffer (in .bss) is mapped at runtime.
    If it happens to reside in file-backed data mapping of libc (in the
    page-aligned slack space trailing the file backed data), loader zero
    padding the slack space, does the early cow page replacement, setting
    things up at the very beginning itself.
    
    With gcc 4.8 based builds, the libc buffer got pushed out to a real
    anon mapping which triggers the issue.
    
    Reported-by: Anton Kolesov <akolesov@synopsys.com>
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 653e10266df8319d6003fbf46ec34865a5a363f6
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Tue Jun 4 13:49:05 2013 +0300

    drm/i915: Improve assert_planes_disabled()
    
    Ever since gen4 primary planes were fixed to pipes.
    
    And for gen2-3, don't check plane B if it doesn't exist.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Rodrigo Vivi <rodrigo.vivi@gmail.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit cb8b2a30b32cde5ac9053d399d084c487598976a
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Sat Jun 1 17:16:23 2013 +0200

    drm/i915: check for strange pfit pipe assignemnt on ivb/hsw
    
    Panel fitters on ivb/hsw are not created equal since not all of them
    support the new high-quality upscaling mode. To offset this the hw
    allows us to freely assign the pfits to pipes.
    
    Since our code currently doesn't support this we might fall over when
    taking over firmware state. So check for this case and WARN about it.
    We can then improve the code once we've hit this in the wild. Or once
    we decide to support the improved upscale modes, though that requires
    global arbitrage of modeset resources across crtcs.
    
    v2: Check for IS_GEN7 instead of IS_IVB || IS_HSW as suggested by
    Paulo in his review comment.
    
    Suggested-by: Mika Kuoppala <mika.kuoppala@intel.com>
    Cc: Mika Kuoppala <mika.kuoppala@intel.com>
    Reviewed-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit c0b0341121f2e2b329e60986aee766e4d1d80fde
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Tue May 28 12:05:54 2013 +0200

    drm/i915: add basic pipe config dump support
    
    All this pipe config abstraction adds another layer of complexity, so
    it's good to have better visibility into what's going on exactly.
    Doesn't dump out everything yet, and some bits are a bit duplicated
    but this should be a good start.
    
    Note that at boot-up a lot of the fields are 0 even for enabled pipes,
    this is simply because our hw state readout code doesn't support
    everything.
    
    v2: Remove a few more now redudant debug output lines.
    
    v3: Review from Paulo
    - use transcoder_name
    - fix up format specifiers
    - add missing ':' in debug output
    
    Cc: Paulo Zanoni <przanoni@gmail.com>
    Reviewed-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit eccb140bca6727f2ef849e8811d5fe4c9fbfd5dd
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Wed May 22 00:50:22 2013 +0200

    drm/i915: hw state readout&check support for cpu_transcoder
    
    This allows us to drop a bunch of ugly hacks and finally implement
    what
    
    commit cc464b2a17c59adedbdc02cc54341d630354edc3
    Author: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Date:   Fri Jan 25 16:59:16 2013 -0200
    
        drm/i915: set TRANSCODER_EDP even earlier
    
    tried to achieve, but that was reverted again in
    
    commit bba2181c49f1dddf8b592804a1b53cc1a3cf408a
    Author: Daniel Vetter <daniel.vetter@ffwll.ch>
    Date:   Fri Mar 22 10:53:40 2013 +0100
    
        Revert "drm/i915: set TRANSCODER_EDP even earlier"
    
    Now we should always have a consistent cpu_transcoder in the
    pipe_config.
    
    v2: Fix up the code as spotted by Paulo:
    - read the register for real
    - assign the right pipes
    - break out if the hw state doesn't make sense
    
    v3: Shut up gcc.
    
    Cc: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Reviewed-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit a01025afa89ccaf1b0521f5862cbfcc73f970481
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Wed May 22 00:50:23 2013 +0200

    drm/i915: fixup i915_pipe_enabled check in i915_irq.c
    
    Well, as well as we can without completely revamping the drm vblank
    code. The issue are that
    - The vblank code needs to work on both ums and kms.
    - It deals always deals with pipes.
    - It doesn't take any of the kms locks.
    
    The last part is not really fixable without revamping the drm vblank
    code, since the drm core <-> driver interactions is a veritable pile
    of spaghettis. But the other pieces can be fixed by switching on the
    MODESET driver flag and either checking the hw state directly (ums
    case) or just querying our sw tracking (with broken locking, but
    that's not worse than what we've had).
    
    Note that this essentially reverts
    
    commit 702e7a56af3780d8b3a717f698209bef44187bb0
    Author: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Date:   Tue Oct 23 18:29:59 2012 -0200
    
        drm/i915: convert PIPECONF to use transcoder instead of pipe
    
    for the ums case, which will fix a NULL deref (since we really don't
    have any crtcs set up).
    
    But the real reason to do this is to drop our reliance on the
    cpu_transcoder: By only checking intel_crtc->active we don't need to
    make sure that the pipe_config (or at least the cpu_transcoder)
    contain safe values even when the pipe is off.
    
    Cc: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Cc: Damien Lespiau <damien.lespiau@intel.com>
    Reviewed-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit a950549c675f2c8c504469dec7d780da8a6433dc
Author: Vineet Gupta <vgupta@synopsys.com>
Date:   Tue May 21 15:25:11 2013 +0530

    ARC: copy_(to|from)_user() to honor usermode-access permissions
    
    This manifested as grep failing psuedo-randomly:
    
    -------------->8---------------------
    [ARCLinux]$ ip address show lo | grep inet
    [ARCLinux]$ ip address show lo | grep inet
    [ARCLinux]$ ip address show lo | grep inet
    [ARCLinux]$
    [ARCLinux]$ ip address show lo | grep inet
        inet 127.0.0.1/8 scope host lo
    -------------->8---------------------
    
    ARC700 MMU provides fully orthogonal permission bits per page:
    Ur, Uw, Ux, Kr, Kw, Kx
    
    The user mode page permission templates used to have all Kernel mode
    access bits enabled.
    This caused a tricky race condition observed with uClibc buffered file
    read and UNIX pipes.
    
    1. Read access to an anon mapped page in libc .bss: write-protected
       zero_page mapped: TLB Entry installed with Ur + K[rwx]
    
    2. grep calls libc:getc() -> buffered read layer calls read(2) with the
       internal read buffer in same .bss page.
       The read() call is on STDIN which has been redirected to a pipe.
       read(2) => sys_read() => pipe_read() => copy_to_user()
    
    3. Since page has Kernel-write permission (despite being user-mode
       write-protected), copy_to_user() suceeds w/o taking a MMU TLB-Miss
       Exception (page-fault for ARC). core-MM is unaware that kernel
       erroneously wrote to the reserved read-only zero-page (BUG #1)
    
    4. Control returns to userspace which now does a write to same .bss page
       Since Linux MM is not aware that page has been modified by kernel, it
       simply reassigns a new writable zero-init page to mapping, loosing the
       prior write by kernel - effectively zero'ing out the libc read buffer
       under the hood - hence grep doesn't see right data (BUG #2)
    
    The fix is to make all kernel-mode access permissions mirror the
    user-mode ones. Note that the kernel still has full access to pages,
    when accessed directly (w/o MMU) - this fix ensures that kernel-mode
    access in copy_to_from() path uses the same faulting access model as for
    pure user accesses to keep MM fully aware of page state.
    
    The issue is peudo-random because it only shows up if the TLB entry
    installed in #1 is present at the time of #3. If it is evicted out, due
    to TLB pressure or some-such, then copy_to_user() does take a TLB Miss
    Exception, with a routine write-to-anon COW processing installing a
    fresh page for kernel writes and also usable as it is in userspace.
    
    Further the issue was dormant for so long as it depends on where the
    libc internal read buffer (in .bss) is mapped at runtime.
    If it happens to reside in file-backed data mapping of libc (in the
    page-aligned slack space trailing the file backed data), loader zero
    padding the slack space, does the early cow page replacement, setting
    things up at the very beginning itself.
    
    With gcc 4.8 based builds, the libc buffer got pushed out to a real
    anon mapping which triggers the issue.
    
    Reported-by: Anton Kolesov <akolesov@synopsys.com>
    Cc: <stable@vger.kernel.org> # 3.9
    Signed-off-by: Vineet Gupta <vgupta@synopsys.com>

commit 9f75bb3137659e678ccdfe353f73adb0d7f6cb68
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Fri Apr 12 18:48:43 2013 +0200

    drm/i915: Fixup Oops in the pipe config computation
    
    commit b6c5164d7bf624f3e1b750787ddb983150c5117c upstream.
    
    Yet again our current confusion between doing the modeset globally,
    but only having the new parameters for one crtc at a time.
    
    So that intel_set_mode essentially already does a global modeset:
    intel_modeset_affected_pipes compares the current state with where we
    want to go to (which is carefully set up by intel_crtc_set_config) and
    then goes through the modeset sequence for any crtc which needs
    updating.
    
    Now the issue is that the actual interface with the remaining code
    still only works on one crtc, and so we only pass in one fb and one
    mode. In intel_set_mode we also only compute one intel_crtc_config
    (which should be the one for the crtc we're doing a modeset on).
    
    The reason for that mismatch is twofold:
    - We want to eventually do all modeset as global state changes, so
    it's just infrastructure prep.
    - But even the old semantics can change more than one crtc when you
    e.g. move a connector from crtc A to crtc B, then both crtc A and B
    need to be updated. Usually that means one pipe is disabled and the
    other enabled. This is also the reason why the hack doesn't touch the
    disable_pipes mask.
    
    Now hilarity ensued in our kms config restore paths when we actually
    try to do a modeset on all crtcs: If the first crtc should be off and
    the second should be on, then the call on the first crtc will notice
    that the 2nd one should be switched on and so tries to compute the
    pipe_config. But due to a lack of passed-in fb (crtc 1 should be off
    after all) it only results in tears.
    
    This case is ridiculously easy to hit on gen2/3 where the lvds output
    is restricted to pipe B. Note that before the pipe_config bpp rework
    gen2/3 didn't care really about the fb->depth, so this is a regression
    brought to light with
    
    commit 4e53c2e010e531b4a014692199e978482d471c7e
    Author: Daniel Vetter <daniel.vetter@ffwll.ch>
    Date:   Wed Mar 27 00:44:58 2013 +0100
    
        drm/i915: precompute pipe bpp before touching the hw
    
    But apparently Ajax also managed to blow up pch platforms, probably
    with some randomized configs, and pch platforms trip up over the lack
    of an fb even in the old code. So this actually goes back to the first
    introduction of the new modeset restore code in
    
    commit 45e2b5f640b3766da3eda48f6c35f088155c06f3
    Author: Daniel Vetter <daniel.vetter@ffwll.ch>
    Date:   Fri Nov 23 18:16:34 2012 +0100
    
        drm/i915: force restore on lid open
    
    Fix this mess by now by justing shunting all the cool new global
    modeset logic in intel_modeset_affected_pipes.
    
    v2: Improve commit message and clean up all the comments in
    intel_modeset_affected_pipes - since the introduction of the modeset
    restore code they've been a bit outdated.
    
    Bugzill: https://bugzilla.redhat.com/show_bug.cgi?id=917725
    References: http://www.mail-archive.com/stable@vger.kernel.org/msg38084.html
    Tested-by: Richard Cochran <richardcochran@gmail.com>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ff2c7b8f232d4fdeabec85a0139019696db1c10a
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Fri Apr 12 18:48:43 2013 +0200

    drm/i915: Fixup Oops in the pipe config computation
    
    commit b6c5164d7bf624f3e1b750787ddb983150c5117c upstream.
    
    Yet again our current confusion between doing the modeset globally,
    but only having the new parameters for one crtc at a time.
    
    So that intel_set_mode essentially already does a global modeset:
    intel_modeset_affected_pipes compares the current state with where we
    want to go to (which is carefully set up by intel_crtc_set_config) and
    then goes through the modeset sequence for any crtc which needs
    updating.
    
    Now the issue is that the actual interface with the remaining code
    still only works on one crtc, and so we only pass in one fb and one
    mode. In intel_set_mode we also only compute one intel_crtc_config
    (which should be the one for the crtc we're doing a modeset on).
    
    The reason for that mismatch is twofold:
    - We want to eventually do all modeset as global state changes, so
    it's just infrastructure prep.
    - But even the old semantics can change more than one crtc when you
    e.g. move a connector from crtc A to crtc B, then both crtc A and B
    need to be updated. Usually that means one pipe is disabled and the
    other enabled. This is also the reason why the hack doesn't touch the
    disable_pipes mask.
    
    Now hilarity ensued in our kms config restore paths when we actually
    try to do a modeset on all crtcs: If the first crtc should be off and
    the second should be on, then the call on the first crtc will notice
    that the 2nd one should be switched on and so tries to compute the
    pipe_config. But due to a lack of passed-in fb (crtc 1 should be off
    after all) it only results in tears.
    
    This case is ridiculously easy to hit on gen2/3 where the lvds output
    is restricted to pipe B. Note that before the pipe_config bpp rework
    gen2/3 didn't care really about the fb->depth, so this is a regression
    brought to light with
    
    commit 4e53c2e010e531b4a014692199e978482d471c7e
    Author: Daniel Vetter <daniel.vetter@ffwll.ch>
    Date:   Wed Mar 27 00:44:58 2013 +0100
    
        drm/i915: precompute pipe bpp before touching the hw
    
    But apparently Ajax also managed to blow up pch platforms, probably
    with some randomized configs, and pch platforms trip up over the lack
    of an fb even in the old code. So this actually goes back to the first
    introduction of the new modeset restore code in
    
    commit 45e2b5f640b3766da3eda48f6c35f088155c06f3
    Author: Daniel Vetter <daniel.vetter@ffwll.ch>
    Date:   Fri Nov 23 18:16:34 2012 +0100
    
        drm/i915: force restore on lid open
    
    Fix this mess by now by justing shunting all the cool new global
    modeset logic in intel_modeset_affected_pipes.
    
    v2: Improve commit message and clean up all the comments in
    intel_modeset_affected_pipes - since the introduction of the modeset
    restore code they've been a bit outdated.
    
    Bugzill: https://bugzilla.redhat.com/show_bug.cgi?id=917725
    References: http://www.mail-archive.com/stable@vger.kernel.org/msg38084.html
    Tested-by: Richard Cochran <richardcochran@gmail.com>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 51cea1f469ad473c8d8b7d4a227640b8c02bf167
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Thu Mar 21 13:10:44 2013 +0200

    drm/i915: Fix pipe enabled mask for pipe C in WM calculations
    
    Fix the incorrect enabled pipes mask for pipe C in the WM calculations.
    
    Additionally, in an effort to make the code easier to understand,
    populate the mask with 1 << PIPE_[ABC] instead of raw numbers.
    
    v2: Use 1 << PIPE_[ABC] (ickle/danvet)
    v3: Pass PIPE_[ABC] to g4x_compute_wm0() (ickle)
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit f49e38dd23d28d4fceea1e84ae444b4c25fc0407
Author: Jani Nikula <jani.nikula@intel.com>
Date:   Mon Apr 29 13:02:54 2013 +0300

    drm/i915: cleanup opregion asle pipestat enable
    
    Both intel_opregion_enable_asle() and intel_enable_asle() have shrunk
    considerably. Merge them together into a static function in i915_irq.c,
    and rename to better reflect the purpose and the related platforms.
    
    No functional changes.
    
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Reviewed-by: Damien Lespiau <damien.lespiau@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 2cc7aa29143b1276db3e87d2a2d50d3625b77d60
Author: Jani Nikula <jani.nikula@intel.com>
Date:   Mon Apr 29 13:02:52 2013 +0300

    drm/i915: untie opregion init and asle irq/pipestat enable
    
    Stop calling intel_opregion_enable_asle() and consequently
    intel_enable_asle() on opregion init. It should not be necessary for
    these reasons:
    
    1) On PCH split platforms, it only enables GSE interrupt, which is
       enabled in irq postinstall anyway. Moreover, the irq enable uses the
       wrong bit on IVB+.
    
    2) On gen 2, it would enable a reserved pipestat bit. If there were gen
       2 systems with opregion asle support, that is. And the gen 2 irq
       handler won't handle it anyway.
    
    3) On gen 3-4, the irq postinstall will call
       intel_opregion_enable_asle() to enable the pipestat.
    
    In short, move the asle irq/pipestat enable responsibility to irq
    postinstall, which already happens to be in place.
    
    This should not cause any functional changes, but only do the one line
    change here for easier bisectability, just in case, and leave all the
    cleanups this allows to followup patches.
    
    Signed-off-by: Jani Nikula <jani.nikula@intel.com>
    Reviewed-by: Damien Lespiau <damien.lespiau@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit e29c22c0c4fefeb48a0157811930f7e9df0bb3f3
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Thu Feb 21 00:00:16 2013 +0100

    drm/i915: implement fdi auto-dithering
    
    So on a bunch of setups we only have 2 fdi lanes available, e.g. hsw
    VGA or 3 pipes on ivb. And seemingly a lot of modes don't quite fit
    into this, among them the default 1080p mode.
    
    The solution is to dither down the pipe a bit so that everything fits,
    which this patch implements.
    
    But ports compute their state under the assumption that the bpp they
    pick will be the one selected, e.g. the display port bw computations
    won't work otherwise. Now we could adjust our code to again up-dither
    to the computed DP link parameters, but that's pointless.
    
    So instead when the pipe needs to adjust parameters we need to retry
    the pipe_config computation at the encoder stage. Furthermore we need
    to inform encoders that they should not increase bandwidth
    requirements if possible. This is required for the hdmi code, which
    prefers the pipe to up-dither to either of the two possible hdmi bpc
    values.
    
    LVDS has a similar requirement, although that's probably only
    theoretical in nature: It's unlikely that we'll ever see an 8bpc
    high-res lvds panel (which is required to hit the 2 fdi lane limit).
    
    eDP is the only thing which could increase the pipe_bpp setting again,
    even when in the retry-loop. This could hit the WARN. Two reasons for
    not bothering:
    - On many eDP panels we'll get a black screen if the bpp settings
      don't match vbt. So failing the modeset is the right thing to do.
      But since that also means it's the only way to light up the panel,
      it should work. So we shouldn't be able to hit this WARN.
    - There are still opens around the eDP panel handling, and maybe we
      need additional tricks. Before that happens it's imo no use trying
      to be too clever.
    Worst case we just need to kill that WARN or maybe fail the compute
    config stage if the eDP connector can't get the bpp setting it wants.
    And since this can only happen with an fdi link in between and so for
    pch eDP panels it's rather unlikely to blow up, if ever.
    
    v2: Rebased on top of a bikeshed from Paulo.
    
    v3: Improve commit message around eDP handling with the stuff
    things with Imre.
    
    Reviewed-by: Imre Deak <imre.deak@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 1857e1daa0695d45b2639ac9e3cfcdaede4a7f8a
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Mon Apr 29 19:34:16 2013 +0200

    drm/i915: move fdi lane configuration checks ahead
    
    This nicely allows us to drop some hacks which have only been used
    to work around modeset failures due to lack of fdi lanes.
    
    v2: Implement proper checking for Haswell platforms - the fdi link to
    the LPT PCH has only 2 lanes. Note that we already filter out
    impossible modes in intel_crt_mode_valid. Unfortunately LPT does not
    support 6bpc on the fdi rx, so we can't pull clever tricks to squeeze
    in a few more modes.
    
    v2: Rebased on top of Ben Widawsky's num_pipes reorg.
    
    v3: Rebase on top of Ville's pipe debug output ocd rampage.
    
    v4: Fixup rebase fail spotted by Ville.
    
    v5: Fixup rebase fail spotted by Imre Deak. I suck.
    
    Cc: Imre Deak <imre.deak@intel.com>
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Imre Deak <imre.deak@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit ff9ce46ed6878d6be08660f7d75897d500a4fe9e
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Wed Apr 24 14:57:17 2013 +0200

    drm/i915: implement high-bpc + pipeconf-dither support for g4x/vlv
    
    The current code is rather ... ugly. The only thing it managed to pull
    off is getting 6bpc on DP working on g4x. Then someone added another
    custom hack for 6bpc eDP on vlv. Fix up this entire mess by properly
    implementing the PIPECONF-based dither/bpc controls on g4x/vlv.
    
    Note that compared to pch based platforms g4x/vlv don't support 12bpc
    modes. g4x is already caught, extend the check for vlv.
    
    The other fixup is to restrict the lvds-specific dithering to early
    gen4 devices - g4x should use the pipeconf dither controls. Note that
    on gen2/3 the dither control is in the panel fitter even.
    
    v2: Don't enable dithering when the pipe is in 10 bpc mode. Quoting
    from Bspec "PIPEACONF - Pipe A Configuration Register, bit 4":
    
    "Programming note: Dithering should only be enabled for 8 bpc or 6
    bpc."
    
    v3: Actually drop the old ugly dither code.
    
    v4: Explain in a short comment why g4x/vlv shouldn't dither for 30 bpp
    pipes (Jesse).
    
    v5: Also clear the dither type correctly as spotted by Ville.
    
    v6: As Ville pointed out we need to indeed set the dithering both in
    the pipeconf register (for DP outputs) and in the LVDS port register
    (for LVDS ouputs). Otherwise LVDS panel will not get properly
    dithered. The old patch got away with this since it forgot to clear
    the LVDS dither bit ...
    
    v7: Remove redundant BPC_MASK clearing, spotted by Ville.
    
    Cc: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit cece5d58d5568e4a7986e43981d21a80ea189a82
Author: Jesse Barnes <jbarnes@virtuousgeek.org>
Date:   Fri Apr 19 08:46:35 2013 -0700

    drm/i915: use vlv_dport_to_channel in vlv_signal_levels
    
    Minor cleanup.  Would be nice to use an enum for channel in the DPIO
    macros so we don't mix up pipes and channels, but that's for another
    patch.
    
    Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 89b667f86a62a99a7b484a7e1b3f8f7a108a7dee
Author: Jesse Barnes <jbarnes@virtuousgeek.org>
Date:   Thu Apr 18 14:51:36 2013 -0700

    drm/i915: update VLV PLL and DPIO code v11
    
    In Valleyview voltage swing, pre-emphasis and lane control registers can
    be programmed only through the h/w side band fabric.  Update
    vlv_update_pll, i9xx_crtc_enable, and intel_enable_pll with the
    appropriate programming.
    
    We need to make sure that the tx lane reset occurs in both the full mode
    set and DPMS paths, so factor things out to allow that.
    
    v2: use different DPIO_DIVISOR values for VGA and DisplayPort
    v3: Fix update pll logic to use same DPIO_DIVISOR & DPIO_REFSFR values
            for all display interfaces
    v4: collapse with various updates
    v5: squash with crtc enable/pll enable bits
    v6: split out DP code (jbarnes)
        put phyready check under IS_VALLEYVIEW (jbarnes)
        remove unneeded check in 9xx pll div update (Jani)
        wrap VLV pll update call in IS_VALLEYVIEW (Jani)
        move port enable back to end of crtc enable (jbarnes)
        put phyready check under IS_VALLEYVIEW (jbarnes)
    v7: fix up conflicts against latest drm-intel-next-queued
    v8: use DPIO reg names, fix pipes (Jani)
        from mPhy_registers_VLV2_ww20p5 doc
    v9: update to latest info from driver enabling notes doc
        driver_vbios_notes_9
    v10: fixup a bit of pipe/port confusion to allow eDP and HDMI to work
         simultaneously (Jesse)
    v11: use pll/port callbacks for DPIO port activity (Daniel)
         use separate VLV CRTC enable function (Daniel)
         move around port ready checks (Jesse)
    
    Signed-off-by: Pallavi G <pallavi.g@intel.com>
    Signed-off-by: Vijay Purushothaman <vijay.a.purushothaman@intel.com>
    Signed-off-by: Gajanan Bhat <gajanan.bhat@intel.com>
    Signed-off-by: Ben Widawsky <benjamin.widawsky@intel.com>
    Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    [danvet: Drop pfit changes and add a little comment explaining that
    vlv has a different enable sequence and so needs it's own crtc_enable
    callback. Also apply a fixup patch from Wu Fengguang to shut up some
    compiler warnings.]
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 06da8da2b014d6cc98fa86e72b605e525e6d6884
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Apr 17 17:48:51 2013 +0300

    drm/i915: Use alphabetical names for sprites
    
    Add sprite_name() macro which should be used with the kind of sprites
    that are fixed to pipes (gen4.5+).
    
    Also use dev_priv->num_plane to calculate the sprite index insted
    assuming two sprites per pipe. This should make it print the right
    name.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 84f44ce795b3da9a08dc2041ecd60550d34c123e
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Apr 17 17:48:49 2013 +0300

    drm/i915: Print plane, pipe, port names as alphabetical insted of decimal
    
    Alway use the alphabetical names in debug/error messages for planes,
    pipes and ports, instead of using decimal numbers occasionally.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit b6c5164d7bf624f3e1b750787ddb983150c5117c
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Fri Apr 12 18:48:43 2013 +0200

    drm/i915: Fixup Oops in the pipe config computation
    
    Yet again our current confusion between doing the modeset globally,
    but only having the new parameters for one crtc at a time.
    
    So that intel_set_mode essentially already does a global modeset:
    intel_modeset_affected_pipes compares the current state with where we
    want to go to (which is carefully set up by intel_crtc_set_config) and
    then goes through the modeset sequence for any crtc which needs
    updating.
    
    Now the issue is that the actual interface with the remaining code
    still only works on one crtc, and so we only pass in one fb and one
    mode. In intel_set_mode we also only compute one intel_crtc_config
    (which should be the one for the crtc we're doing a modeset on).
    
    The reason for that mismatch is twofold:
    - We want to eventually do all modeset as global state changes, so
    it's just infrastructure prep.
    - But even the old semantics can change more than one crtc when you
    e.g. move a connector from crtc A to crtc B, then both crtc A and B
    need to be updated. Usually that means one pipe is disabled and the
    other enabled. This is also the reason why the hack doesn't touch the
    disable_pipes mask.
    
    Now hilarity ensued in our kms config restore paths when we actually
    try to do a modeset on all crtcs: If the first crtc should be off and
    the second should be on, then the call on the first crtc will notice
    that the 2nd one should be switched on and so tries to compute the
    pipe_config. But due to a lack of passed-in fb (crtc 1 should be off
    after all) it only results in tears.
    
    This case is ridiculously easy to hit on gen2/3 where the lvds output
    is restricted to pipe B. Note that before the pipe_config bpp rework
    gen2/3 didn't care really about the fb->depth, so this is a regression
    brought to light with
    
    commit 4e53c2e010e531b4a014692199e978482d471c7e
    Author: Daniel Vetter <daniel.vetter@ffwll.ch>
    Date:   Wed Mar 27 00:44:58 2013 +0100
    
        drm/i915: precompute pipe bpp before touching the hw
    
    But apparently Ajax also managed to blow up pch platforms, probably
    with some randomized configs, and pch platforms trip up over the lack
    of an fb even in the old code. So this actually goes back to the first
    introduction of the new modeset restore code in
    
    commit 45e2b5f640b3766da3eda48f6c35f088155c06f3
    Author: Daniel Vetter <daniel.vetter@ffwll.ch>
    Date:   Fri Nov 23 18:16:34 2012 +0100
    
        drm/i915: force restore on lid open
    
    Fix this mess by now by justing shunting all the cool new global
    modeset logic in intel_modeset_affected_pipes.
    
    v2: Improve commit message and clean up all the comments in
    intel_modeset_affected_pipes - since the introduction of the modeset
    restore code they've been a bit outdated.
    
    Bugzill: https://bugzilla.redhat.com/show_bug.cgi?id=917725
    Cc: stable@vger.kernel.org
    References: http://www.mail-archive.com/stable@vger.kernel.org/msg38084.html
    Tested-by: Richard Cochran <richardcochran@gmail.com>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 4b49f58fff00e6e9b24eaa31d4c6324393d76b0a
Author: Ming Lei <ming.lei@canonical.com>
Date:   Thu Apr 11 04:40:40 2013 +0000

    usbnet: handle link change
    
    The link change is detected via the interrupt pipe, and bulk
    pipes are responsible for transfering packets, so it is reasonable
    to stop bulk transfer after link is reported as off.
    
    Two adavantages may be obtained with stopping bulk transfer
    after link becomes off:
    
    - USB bus bandwidth is saved(USB bus is shared bus except for
    USB3.0), for example, lots of 'IN' token packets and 'NYET'
    handshake packets is transfered on 2.0 bus.
    
    - probabaly power might be saved for usb host controller since
    cancelling bulk transfer may disable the asynchronous schedule of
    host controller.
    
    With this patch, when link becomes off, about ~10% performance
    boost can be found on bulk transfer of anther usb device which
    is attached to same bus with the usbnet device, see below
    test on next-20130410:
    
    - read from usb mass storage(Sandisk Extreme USB 3.0) on pandaboard
    with below command after unplugging ethernet cable:
    
            dd if=/dev/sda iflag=direct of=/dev/null bs=1M count=800
    
    - without the patch
    1, 838860800 bytes (839 MB) copied, 36.2216 s, 23.2 MB/s
    2, 838860800 bytes (839 MB) copied, 35.8368 s, 23.4 MB/s
    3, 838860800 bytes (839 MB) copied, 35.823 s, 23.4 MB/s
    4, 838860800 bytes (839 MB) copied, 35.937 s, 23.3 MB/s
    5, 838860800 bytes (839 MB) copied, 35.7365 s, 23.5 MB/s
    average: 23.6MB/s
    
    - with the patch
    1, 838860800 bytes (839 MB) copied, 32.3817 s, 25.9 MB/s
    2, 838860800 bytes (839 MB) copied, 31.7389 s, 26.4 MB/s
    3, 838860800 bytes (839 MB) copied, 32.438 s, 25.9 MB/s
    4, 838860800 bytes (839 MB) copied, 32.5492 s, 25.8 MB/s
    5, 838860800 bytes (839 MB) copied, 31.6178 s, 26.5 MB/s
    average: 26.1MB/s
    
    Signed-off-by: Ming Lei <ming.lei@canonical.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d0df9a2c8f856b290407dec1069eb320b4bbb705
Author: Archit Taneja <archit@ti.com>
Date:   Tue Mar 26 19:15:25 2013 +0530

    OMAPDSS: DISPC: Revert to older DISPC Smart Standby mechanism for OMAP5
    
    DISPC on OMAP5 has a more optimised mechanism of asserting Mstandby to achieve
    more power savings when DISPC is configured in Smart Standby mode. This
    mechanism leads to underflows when multiple DISPC pipes are enabled.
    
    There is a register field which can let us revert to the older mechanism of
    asserting Mstandby. Configure this field to prevent underflows.
    
    Signed-off-by: Archit Taneja <archit@ti.com>
    Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>

commit 6447a3cf19da8c4653283d1c491e2e775633f348
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Thu Mar 21 11:01:38 2013 -0400

    get rid of pipe->inode
    
    it's used only as a flag to distinguish normal pipes/FIFOs from the
    internal per-task one used by file-to-file splice.  And pipe->files
    would work just as well for that purpose...
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit ebec73f4752b777b79b384bd52e5240203cb9b00
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Thu Mar 21 12:24:01 2013 -0400

    introduce variants of pipe_lock/pipe_unlock for real pipes/FIFOs
    
    fs/pipe.c file_operations methods *know* that pipe is not an internal one;
    no need to check pipe->inode for those callers.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit ce1bb329795c3efc4bfd8846ee4ef1798536307a
Author: Ben Widawsky <ben@bwidawsk.net>
Date:   Fri Apr 5 13:12:44 2013 -0700

    drm/i915: Set PCH_NOP
    
    Set up PCH_NOP when we match a certain platform.
    
    v2: Just do a num_pipes check + comment instead of trying to check the
    platform (Daniel)
    
    Signed-off-by: Ben Widawsky <ben@bwidawsk.net>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 40c7ead980945ac96eadbd6d99b050458d797e2b
Author: Ben Widawsky <ben@bwidawsk.net>
Date:   Fri Apr 5 13:12:40 2013 -0700

    drm/i915: PCH_NOP
    
    Given certain fusing options discussed in the previous patch, it's
    possible to end up with platforms that normally have PCH but that PCH
    doesn't actually exist. In many cases, this is easily remedied with
    setting 0 pipes. This covers the other corners.
    
    Requiring this is a symptom of improper code splitting (using
    HAS_PCH_SPLIT instead of proper GEN checking, basically). I do not want
    to fix this.
    
    v2: Remove PCH reflck after change in previous patch (Daniel)
    
    Signed-off-by: Ben Widawsky <ben@bwidawsk.net>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit e3c74757c23cbbbb0c64b34c107732f3e2d67fa3
Author: Ben Widawsky <ben@bwidawsk.net>
Date:   Fri Apr 5 13:12:39 2013 -0700

    drm/i915: Support PCH no display
    
    GEN supports a fusing option which subtracts the PCH display (making the
    CPU display also useless). In this configuration MMIO which gets decoded
    to a certain range will hang the CPU.
    
    For us, this is sort of the equivalent of having no pipes, and we can
    easily modify some code to not do certain things with no pipes.
    
    v2: Moved the num pipes check up in the call chain, and removed extra
    checks noted by Daniel. For more details, see:
    http://lists.freedesktop.org/archives/intel-gfx/2013-March/025746.html
    
    v3: Drop the intel_setup_overlay check (Daniel)
    
    Signed-off-by: Ben Widawsky <ben@bwidawsk.net>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 399403c7cebb4dcd42491e511e1ec91442ecaf80
Merge: b6a9b7f6b1f2 e3dff5855086
Author: Dave Airlie <airlied@redhat.com>
Date:   Fri Apr 5 10:18:13 2013 +1000

    Merge tag 'drm-intel-next-2013-03-23' of git://people.freedesktop.org/~danvet/drm-intel into drm-next
    
    Daniel writes:
    Highlights:
    - Imre's for_each_sg_pages rework (now also with the stolen mem backed
      case fixed with a hack) plus the drm prime sg list coalescing patch from
      Rahul Sharma. I have some follow-up cleanups pending, already acked by
      Andrew Morton.
    - Some prep-work for the crazy no-pch/display-less platform by Ben.
    - Some vlv patches, by far not all (Jesse et al).
    - Clean up the HDMI/SDVO #define confusion (Paulo)
    - gen2-4 vblank fixes from Ville.
    - Unclaimed register warning fixes for hsw (Paulo). More still to come ...
    - Complete pageflips which have been stuck in a gpu hang, should prevent
      stuck gl compositors (Ville).
    - pm patches for vt-switchless resume (Jesse). Note that the i915 enabling
      is not (yet) included, that took a bit longer to settle. PM patches are
      acked by Rafael Wysocki.
    - Minor fixlets all over from various people.
    
    * tag 'drm-intel-next-2013-03-23' of git://people.freedesktop.org/~danvet/drm-intel: (79 commits)
      drm/i915: Implement WaSwitchSolVfFArbitrationPriority
      drm/i915: Set the VIC in AVI infoframe for SDVO
      drm/i915: Kill a strange comment about DPMS functions
      drm/i915: Correct sandybrige overclocking
      drm/i915: Introduce GEN7_FEATURES for device info
      drm/i915: Move num_pipes to intel info
      drm/i915: fixup pd vs pt confusion in gen6 ppgtt code
      style nit: Align function parameter continuation properly.
      drm/i915: VLV doesn't have HDMI on port C
      drm/i915: DSPFW and BLC regs are in the display offset range
      drm/i915: set conservative clock gating values on VLV v2
      drm/i915: fix WaDisablePSDDualDispatchEnable on VLV v2
      drm/i915: add more VLV IDs
      drm/i915: use VLV DIP routines on VLV v2
      drm/i915: add media well to VLV force wake routines v2
      drm/i915: don't use plane pipe select on VLV
      drm: modify pages_to_sg prime helper to create optimized SG table
      drm/i915: use for_each_sg_page for setting up the gtt ptes
      drm/i915: create compact dma scatter lists for gem objects
      drm/i915: handle walking compact dma scatter lists
      ...

commit 5d2d38ddcac991f71c19d03d95bde8e14abc0352
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Wed Mar 27 00:45:01 2013 +0100

    drm/i915: clean up pipe bpp confusion
    
    - gen4 and earlier (save for g4x) only really have a 8bpc pipe, with
      the possibility to dither to 6bpc using the panel fitter
    - g4x has hdmi, but no 12 bpc pipe ... !? Clamp hdmi accordingly.
    - TV/SDVO out are the only connectors available on platforms with
      a pipe bpp != 8, add code to force the pipe to 8bpc unconditionally.
    
    <rant>
    The dither handling on gmch platforms is one giant disaster. I'm hoping
    somewhat that vlv enabling will fix this up, but given that the 6bpc
    handling for edp was simply added with another quick hack, I don't have
    high hopes ...
    </rant>
    
    v2: Neither vlv nor g4x have 12bpc pipes. Still set pipe_bpp to 12*3,
    but let the crtc code clamp things down to 10bpc on these platforms.
    
    v3: Fix a bpc vs. bpp mixup in the gen4 and earlier pipe_bpp limiter
    code.
    
    v4: Drop the hunk in intel_hdmi.c about g4x/vlv 12bpc, it was wrong.
    
    Reviewed-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 4e53c2e010e531b4a014692199e978482d471c7e
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Wed Mar 27 00:44:58 2013 +0100

    drm/i915: precompute pipe bpp before touching the hw
    
    The procedure has now 3 steps:
    
    1. Compute the bpp that the plane will output, this is done in
       pipe_config_set_bpp and stored into pipe_config->pipe_bpp. Also,
       this function clamps the pipe_bpp to whatever limit the EDID of any
       connected output specifies.
    2. Adjust the pipe_bpp in the encoder and crtc functions, according to
       whatever constraints there are.
    3. Decide whether to use dither by comparing the stored plane bpp with
       computed pipe_bpp.
    
    There are a few slight functional changes in this patch:
    - LVDS connector are now also going through the EDID clamping. But in
      a 2nd change we now unconditionally force the lvds bpc value - this
      shouldn't matter in reality when the panel setup is consistent, but
      better safe than sorry.
    - HDMI now forces the pipe_bpp to the selected value - I think that's
      what we actually want, since otherwise at least the pixelclock
      computations are wrong (I'm not sure whether the port would accept
      e.g. 10 bpc when in 12bpc mode). Contrary to the old code, we pick
      the next higher bpc value, since otherwise there's no way to make
      use of the 12 bpc mode (since the next patch will remove the 12bpc
      plane format, it doesn't exist).
    
    Both of these changes are due to the removal of the
    
            pipe_bpp = min(display_bpp, plane_bpp);
    
    statement.
    
    Another slight change is the reworking of the dp bpc code:
    - For the mode_valid callback it's sufficient to only check whether
      the mode would fit at the lowest bpc.
    - The bandwidth computation code is a bit restructured: It now walks
      all available bpp values in an outer loop and the codeblock that
      computes derived values (once a good configuration is found) has been
      moved out of the for loop maze. This is prep work to allow us to
      successively fall back on bpc values, and also correctly support bpc
      values != 8 or 6.
    
    v2: Rebased on top of Paulo Zanoni's little refactoring to use more
    drm dp helper functions.
    
    v3: Rebased on top of Jani's eDP bpp fix and Ville's limited color
    range work.
    
    v4: Remove the INTEL_MODE_DP_FORCE_6BPC #define, no longer needed.
    
    v5: Remove intel_crtc->bpp, too, and fix up the 12bpc check in the
    hdmi code. Also fixup the bpp check in intel_dp.c, it'll get reworked
    in a later patch though again.
    
    v6: Fix spelling in a comment.
    
    v7: Debug output improvements for the bpp computation.
    
    v8: Fixup 6bpc lvds check - dual-link and 8bpc mode are different
    things!
    
    v9: Reinstate the fix to properly ignore the firmware edp bpp ... this
    was lost in a rebase.
    
    v10: Both g4x and vlv lack 12bpc pipes, so don't enforce that we have
    that. Still unsure whether this is the way to go, but at least 6bpc
    for a 8bpc hdmi output seems to work.
    
    v11: And g4x/vlv also lack 12bpc hdmi support, so only support high
    depth on DP. Adjust the code.
    
    v12: Rebased.
    
    v13: Split out the introduction of pipe_config->dither|pipe_bpp, as
    requested from Jesse Barnes.
    
    v14: Split out the special 6BPC handling for DP, as requested by Jesse
    Barnes.
    
    Reviewed-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 460da91617d870972a7ae300fad3e13731b67757
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Wed Mar 27 00:44:51 2013 +0100

    drm/i915: compute pipe_config earlier
    
    To make decent modeset state checking possible (e.g. for the check
    mode with atomic modesetting) we want to have the full pipe
    configuration and state checks done before we touch the hw.
    
    To ensure that all the little bits&pieces that are now moved to the
    pipe_config handle this correctly, move its computation to the right
    spot now, before we touch the hw in the disable_pipes step.
    
    Reviewed-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Reviewed-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit bba2181c49f1dddf8b592804a1b53cc1a3cf408a
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Fri Mar 22 10:53:40 2013 +0100

    Revert "drm/i915: set TRANSCODER_EDP even earlier"
    
    This reverts commit cc464b2a17c59adedbdc02cc54341d630354edc3.
    
    The reason is that Takashi Iwai reported a regression bisected to this
    commit:
    
    http://www.mail-archive.com/intel-gfx@lists.freedesktop.org/msg18788.html
    
    His machine has eDP on port D (usual desktop all-in-on setup), which
    intel_dp.c identifies as an eDP panel, but the hsw ddi code
    mishandles.
    
    Closer inspection of the code reveals that haswell_crtc_mode_set also
    checks intel_encoder_is_pch_edp when setting is_cpu_edp. On haswell
    that doesn't make much sense (since there's no edp on the pch), but
    what this function _really_ checks is whether that edp connector is on
    port A or port D. It's just that on ilk-ivb port D was on the pch ...
    
    So that explains why this seemingly innocent change killed eDP on port
    D. Furthermore it looks like everything else accidentally works, since
    we've never enabled eDP on port D support for hsw intentionally (e.g.
    we still register the HDMI output for port D in that case).
    
    But in retrospective I also don't like that this leaks highly platform
    specific details into common code, and the reason is that the drm
    vblank layer sucks. So instead I think we should:
    - move the cpu_transcoder into the dynamic pipe_config tracking (once
      that's merged).
    - fix up the drm vblank layer to finally deal with kms crtc objects
      instead of int pipes.
    
    v2: Pimp commit message with the better diagnosis as discussed with
    Paulo on irc.
    
    Cc: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Cc: Takashi Iwai <tiwai@suse.de>
    Reviewed-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 7eb552aeae058a88eece91b902dd51fde45b1f41
Author: Ben Widawsky <ben@bwidawsk.net>
Date:   Wed Mar 13 14:05:41 2013 -0700

    drm/i915: Move num_pipes to intel info
    
    Requested by Daniel.
    
    v2: Fix incorrect num_pipe settings. (Chris)
    
    Cc: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Ben Widawsky <ben@bwidawsk.net>
    Reviewed-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit da6ecc5decf6243a93dd0ecae4a4a773bf21dcce
Author: Jesse Barnes <jbarnes@virtuousgeek.org>
Date:   Fri Mar 8 10:46:00 2013 -0800

    drm/i915: don't use plane pipe select on VLV
    
    Planes are fixed to pipes in VLV.
    
    Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Reviewed-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 7d9bcebe13397f6621a44b998860ae0c8049b10c
Author: Rodrigo Vivi <rodrigo.vivi@gmail.com>
Date:   Mon Feb 25 19:55:16 2013 -0300

    drm/i915: Use cpu_transcoder for HSW_TVIDEO_DIP_* instead of pipe
    
    While old platforms had 3 transcoders and 3 pipes (1:1), HSW has
    4 transcoders and 3 pipes.
    These regs were being used only by HDMI code where pipe is always the same
    thing as cpu_transcoder.
    This patch allow us to use them for DP, specially for TRANSCODER_EDP.
    
    v2: Adding HSW_TVIDEO_DIP_VSC_DATA to transmit vsc to eDP.
    
    Signed-off-by: Rodrigo Vivi <rodrigo.vivi@gmail.com>
    Reviewed-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 46c06a30dfd63b1200dda2337c145e262798b9cf
Author: Ville Syrjälä <ville.syrjala@linux.intel.com>
Date:   Wed Feb 20 21:16:18 2013 +0200

    drm/i915: Kill pipestat[] cache
    
    Caching the PIPESTAT enable bits has been deemed pointless. Just
    read them from the register itself.
    
    Signed-off-by: Ville Syrjälä <ville.syrjala@linux.intel.com>
    Reviewed-by: Jani Nikula <jani.nikula@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit b81e059ec5a7128622ab5d74d78e9b4f361b54ae
Merge: 35f8badc1cf6 210561ffd72d
Author: Dave Airlie <airlied@redhat.com>
Date:   Wed Feb 20 11:40:49 2013 +1000

    Merge branch 'drm-intel-fixes' of git://people.freedesktop.org/~danvet/drm-intel into drm-next
    
    So here's my promised pile of fixes for 3.9. I've dropped the core prep
    patches for vt-switchless suspend/resume as discussed on irc. Highlights:
    - Fix dmar on g4x. Not really gfx related, but I'm fed up with getting
      blamed for dmar crapouts.
    - Disable wc ptes updates on ilk when dmar is enabled (Chris). So again,
      dmar, but this time gfx related :(
    - Reduced range support for hsw, using the pipe CSC (Ville).
    - Fixup pll limits for gen3/4 (Patrick Jakobsson). The sdvo patch is
      already confirmed to fix 2 bug reports, so added cc: stable on that one.
    - Regression fix for 8bit fb console (Ville).
    - Preserve lane reversal bits on DDI/FDI ports (Damien).
    - Page flip vs. gpu hang fixes (Ville). Unfortuntely not quite all of
      them, need to decide what to do with the currently still in-flight ones.
    - Panel fitter regression fix from Mika Kuoppala (was accidentally left on
      on some pipes with the new modset code since 3.7). This also improves
      the modeset sequence and might help a few other unrelated issues with
      lvds.
    - Write backlight regs even harder ... another installement in our eternal
      fight against the BIOS and backlights.
    - Fixup lid notifier vs. suspend/resume races (Zhang Rui). Prep work for
      new ACPI stuff, but closing the race itself seems worthwile on its own.
    - A few other small fixes and tiny cleanups all over.
    
    Lots of the patches are cc: stable since I've stalled on a few
    not-so-important fixes for 3.8 due to the grumpy noise Linus made.
    
    * 'drm-intel-fixes' of git://people.freedesktop.org/~danvet/drm-intel: (33 commits)
      intel/iommu: force writebuffer-flush quirk on Gen 4 Chipsets
      drm/i915: Disable WC PTE updates to w/a buggy IOMMU on ILK
      drm/i915: Implement pipe CSC based limited range RGB output
      drm/i915: inverted brightness quirk for Acer Aspire 4736Z
      drm/i915: Print the hw context status is debugfs
      drm/i915: Use HAS_L3_GPU_CACHE in i915_gem_l3_remap
      drm/i915: Fix PIPE_CONTROL DW/QW write through global GTT on IVB+
      drm/i915: Set i9xx sdvo clock limits according to specifications
      drm/i915: Set i9xx lvds clock limits according to specifications
      drm/i915: Preserve the DDI link reversal configuration
      drm/i915: Preserve the FDI line reversal override bit on CPT
      drm/i915: add missing \n to UTS_RELEASE in the error_state
      drm: Use C8 instead of RGB332 when determining the format from depth/bpp
      drm: Fill depth/bits_per_pixel for C8 format
      drm/i915: don't clflush gem objects in stolen memory
      drm/i915: Don't wait for page flips if there was GPU reset
      drm/i915: Kill obj->pending_flip
      drm/i915: Fix a typo in a intel_modeset_stage_output_state() comment
      drm/i915: remove bogus mutex_unlock from error-path
      drm/i915: Print the pipe control page GTT address
      ...

commit 70730bca1331fc50c3caacaea00439de1325bd6e
Author: H. Peter Anvin <hpa@zytor.com>
Date:   Thu Feb 14 15:13:55 2013 -0800

    kernel: Replace timeconst.pl with a bc script
    
    bc is the standard tool for multi-precision arithmetic.  We switched
    to Perl because akpm reported a hard-to-reproduce build hang, which
    was very odd because affected and unaffected machines were all running
    the same version of GNU bc.
    
    Unfortunately switching to Perl required a really ugly "canning"
    mechanism to support Perl < 5.8 installations lacking the Math::BigInt
    module.
    
    It was recently pointed out to me that some very old versions of GNU
    make had problems with pipes in subshells, which was indeed the
    construct used in the Makefile rules in that version of the patch;
    Perl didn't need it so switching to Perl fixed the problem for
    unrelated reasons.  With the problem (hopefully) root-caused, we can
    switch back to bc and do the arbitrary-precision arithmetic naturally.
    
    Signed-off-by: H. Peter Anvin <hpa@zytor.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: Sam Ravnborg <sam@ravnborg.org>
    Signed-off-by: Michal Marek <mmarek@suse.cz>

commit dac35663cef4ca7f572d430bb54b14be8f03cb10
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Sun Dec 2 15:24:10 2012 +0100

    drm: only take the crtc lock for ->cursor_move
    
    ->cursor_move uses mostly the same facilities in drivers as
    ->cursor_set, so pretty much nothing to fix up:
    
    - ast/gma500/i915: They all use per-crtc registers to update the
      cursor position. ast again touches the global cursor cache, but
      that's ok since there's only one crtc.
    
    - nouveau: nv50+ is again special, updates happen through the per-crtc
      channel (without pushbufs), so it's not protected by the new evo
      lock introduced earlier. But since this channel is per-crtc, we
      should be fine anyway.
    
    - radeon: A bit a mess: avivo asics need a workaround when both output
      pipes are enabled, which means it'll access the crtc list. Just
      reading that flag is ok though as long as radeon _always_ grabs all
      locks when changing the crtc configuration. Which means with the
      current scheme it cannot do an optimized modeset which only locks
      the relevant crtcs. This can be fixed though by introducing a bit of
      global state with separate locks and ensure in the modeset code that
      the cursor will be updated appropriately when enabling the 2nd pipe
      (on affected asics).
    
    - vmwgfx: I still don't understand what it's doing exactly, so apply
      the same trick for now.
    
    v2: Fixup unlocking for the error cases, spotted by Richard Wilbur.
    
    v3: Another error-case fixup.
    
    Reviewed-by: Rob Clark <rob@ti.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 29494c174dc4793ebd236aa522a2a1ed73b7180e
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Sun Dec 2 02:18:25 2012 +0100

    drm: add per-crtc locks
    
    *drumroll*
    
    The basic idea is to protect per-crtc state which can change without
    touching the output configuration with separate mutexes, i.e.  all the
    input side state to a crtc like framebuffers, cursor settings or plane
    configuration. Holding such a crtc lock gives a read-lock on all the
    other crtc state which can be changed by e.g. a modeset.
    
    All non-crtc state is still protected by the mode_config mutex.
    Callers that need to change modeset state of a crtc (e.g. dpms or
    set_mode) need to grab both the mode_config lock and nested within any
    crtc locks.
    
    Note that since there can only ever be one holder of the mode_config
    lock we can grab the subordinate crtc locks in any order (if we need
    to grab more than one of them). Lockdep can handle such nesting with
    the mutex_lock_nest_lock call correctly.
    
    With this functions that only touch connectors/encoders but not crtcs
    only need to take the mode_config lock. The biggest such case is the
    output probing, which means that we can now pageflip and move cursors
    while the output probe code is reading an edid.
    
    Most cases neatly fall into the three buckets:
    - Only touches connectors and similar output state and so only needs
      the mode_config lock.
    - Touches the global configuration and so needs all locks.
    - Only touches the crtc input side and so only needs the crtc lock.
    
    But a few cases that need special consideration:
    
    - Load detection which requires a crtc. The mode_config lock already
      prevents a modeset change, so we can use any unused crtc as we like
      to do load detection. The only thing to consider is that such
      temporary state changes don't leak out to userspace through ioctls
      that only take the crtc look (like a pageflip). Hence the load
      detect code needs to grab the crtc of any output pipes it touches
      (but only if it touches state used by the pageflip or cursor
      ioctls).
    
    - Atomic pageflip when moving planes. The first case is sane hw, where
      planes have a fixed association with crtcs - nothing needs to be
      done there. More insane^Wflexible hw needs to have plane->crtc
      mapping which is separately protect with a lock that nests within
      the crtc lock. If the plane is unused we can just assign it to the
      current crtc and continue. But if a plane is already in use by
      another crtc we can't just reassign it.
    
      Two solution present themselves: Either go back to a slow-path which
      takes all modeset locks, potentially incure quite a hefty delay. Or
      simply disallowing such changes in one atomic pageflip - in general
      the vblanks of two crtcs are not synced, so there's no sane way to
      atomically flip such plane changes accross more than one crtc. I'd
      heavily favour the later approach, going as far as mandating it as
      part of the ABI of such a new a nuclear pageflip.
    
      And if we _really_ want such semantics, we can always get them by
      introducing another pageflip mutex between the mode_config.mutex and
      the individual crtc locks. Pageflips crossing more than one crtc
      would then need to take that lock first, to lock out concurrent
      multi-crtc pageflips.
    
    - Optimized global modeset operations: We could just take the
      mode_config lock and then lazily lock all crtc which are affected by
      a modeset operation. This has the advantage that pageflip could
      continue unhampered on unaffected crtc. But if e.g. global resources
      like plls need to be reassigned and so affect unrelated crtcs we can
      still do that - nested locking works in any order.
    
    This patch just adds the locks and takes them in drm_modeset_lock_all,
    no real locking changes yet.
    
    v2: Need to initialize the new lock in crtc_init and lock it righ
    away, for otherwise the modeset_unlock_all below will try to unlock a
    not-locked mutex.
    
    Reviewed-by: Rob Clark <rob@ti.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 1d35b4e271f56cad111b7150a1de57954e441765
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Tue Oct 2 17:54:35 2012 +0200

    drm/i915: call drm_handle_vblank before finish_page_flip
    
    commit 74d44445afb9f50126eba052adeb89827cee88f3 upstream.
    
    ... since finish_page_flip needs the vblank timestamp generated
    in drm_handle_vblank. Somehow all the gmch platforms get it right,
    but all the pch platform irq handlers get is wrong. Hooray for copy&
    pasting!
    
    Currently this gets papered over by a gross hack in finish_page_flip.
    A second patch will remove that.
    
    Note that without this, the new timestamp sanity checks in flip_test
    occasionally get tripped up, hence the cc: stable tag.
    
    Reviewed-by: mario.kleiner@tuebingen.mpg.de
    Tested-by: Imre Deak <imre.deak@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    [bwh: Backported to 3.2: no loop over pipes in ivybridge_irq_handler(),
     so make a similar change to that in ironlake_irq_handler()]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: Julien Cristau <jcristau@debian.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 297456d8fe2b141f0f05b5d6ff48a4cd0b5f5889
Author: Paulo Zanoni <paulo.r.zanoni@intel.com>
Date:   Tue Nov 20 13:27:41 2012 -0200

    drm/i915: make the panel fitter work on pipes B and C on IVB
    
    commit 13888d78c664a1f61d7b09d282f5916993827a40 upstream.
    
    I actually found this problem on Haswell, but then discovered Ivy
    Bridge also has it by reading the spec.
    
    I don't have the hardware to test this.
    
    Signed-off-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Reviewed-by: Damien Lespiau <damien.lespiau@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c49060cc36e8238d9b923e7523ff66195aba10f9
Author: Paulo Zanoni <paulo.r.zanoni@intel.com>
Date:   Tue Nov 20 13:27:41 2012 -0200

    drm/i915: make the panel fitter work on pipes B and C on IVB
    
    commit 13888d78c664a1f61d7b09d282f5916993827a40 upstream.
    
    I actually found this problem on Haswell, but then discovered Ivy
    Bridge also has it by reading the spec.
    
    I don't have the hardware to test this.
    
    Signed-off-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Reviewed-by: Damien Lespiau <damien.lespiau@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f03ef102300ce1ac5744f2cee8e48825d6350222
Author: Paulo Zanoni <paulo.r.zanoni@intel.com>
Date:   Tue Nov 20 13:27:41 2012 -0200

    drm/i915: make the panel fitter work on pipes B and C on IVB
    
    commit 13888d78c664a1f61d7b09d282f5916993827a40 upstream.
    
    I actually found this problem on Haswell, but then discovered Ivy
    Bridge also has it by reading the spec.
    
    I don't have the hardware to test this.
    
    Signed-off-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Reviewed-by: Damien Lespiau <damien.lespiau@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5b0cff535c7c9c2f1de8bf3589afa57975ba6481
Author: Paulo Zanoni <paulo.r.zanoni@intel.com>
Date:   Tue Nov 20 13:27:41 2012 -0200

    drm/i915: make the panel fitter work on pipes B and C on IVB
    
    commit 13888d78c664a1f61d7b09d282f5916993827a40 upstream.
    
    I actually found this problem on Haswell, but then discovered Ivy
    Bridge also has it by reading the spec.
    
    I don't have the hardware to test this.
    
    Signed-off-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Reviewed-by: Damien Lespiau <damien.lespiau@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 515ac2bb95f609bc4a0d2ad5f7011b3264b2bb21
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Sat Dec 1 13:53:44 2012 +0100

    drm/i915: wire up gmbus irq handler
    
    Only enables the interrupt and puts a irq handler into place, doesn't
    do anything yet.
    
    Unfortunately there's no gmbus interrupt support for gen2/3 (safe for
    pnv, but there the irq is marked as "Test mode").
    
    v2: Wire up the irq handler for vlv and gen4 properly.
    
    v3: i915_enable_pipestat expects the mask bit, not the status bits ... and
    for added hilarity those are rather inconsistently named.
    
    Reviewed-by: Imre Deak <imre.deak@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 7136470d4b37b46565b29b8b9425a8361421483b
Merge: bd3b49f25a3e 2ff4aeac39db
Author: Dave Airlie <airlied@redhat.com>
Date:   Thu Nov 29 20:23:56 2012 +1000

    Merge branch 'for-airlied' of git://people.freedesktop.org/~danvet/drm-intel into drm-next
    
    Daniel writes:
    Besides the big item of lifting the "preliminary hw support" tag from the
     Haswell code, just small bits&pieces all over:
     - Leftover Haswell patches and some fixes from Paulo
     - LyncPoint PCH support (for hsw)
     - OOM handling improvements from Chris Wilson
     - connector property and send_vblank_event refactorings from Rob Clark
     - random pile of small fixes
    
     Note that the send_vblank refactorings will cause some locking WARNs to
     show up. Imre has fixed that up, but since all the driver changes outside
     of the drm core have been for exonys, those four patches are merged
     through the exonys-next tree.
    
    Meh, I've forgotten to cherry-pick an important fix from Ben for a
    regression in the 3.8 gen6+ gtt code. New pull request below. While I'm at
    it, the hdmi VIC patch for the drm edid code is still in my queue, I'll
    send you that in the next 3.8-fixes pull.
    
    * 'for-airlied' of git://people.freedesktop.org/~danvet/drm-intel: (33 commits)
      drm/i915: Fix pte updates in ggtt clear range
      drm/i915: promote Haswell to full support
      drm/i915: Report the origin of the LVDS fixed panel mode
      drm/i915: LVDS fallback to fixed-mode if EDID not present
      drm/i915/sdvo: kfree the intel_sdvo_connector, not drm_connector, on destroy
      drm/i915: drm_connector_property -> drm_object_property
      drm/i915: use drm_send_vblank_event() helper
      drm/i915: Use pci_resource functions for BARs.
      drm/i915: Borrow our struct_mutex for the direct reclaim
      drm/i915: Defer assignment of obj->gtt_space until after all possible mallocs
      drm/i915: Apply the IBX transcoder A w/a for HDMI to SDVO as well
      drm/i915: implement WaMbcDriverBootEnable on Haswell
      drm/i915: fix intel_ddi_get_cdclk_freq for ULT machines
      drm/i915: make the panel fitter work on pipes B and C on Haswell
      drm/i915: make the panel fitter work on pipes B and C on IVB
      drm/i915: don't intel_crt_init if DDI A has 4 lanes
      drm/i915: make DP work on LPT-LP machines
      drm/i915: fix false positive "Unclaimed write" messages
      drm/i915: use cpu/pch transcoder on intel_enable_pipe
      drm/i915: don't limit Haswell CRT encoder to pipe A
      ...

commit 54075a7d75732147c32f7a99af5218f7d0f62596
Author: Paulo Zanoni <paulo.r.zanoni@intel.com>
Date:   Tue Nov 20 13:27:42 2012 -0200

    drm/i915: make the panel fitter work on pipes B and C on Haswell
    
    This goes on a separate patch since it won't apply on the stable
    trees and there's nothing using panel fitter on HSW on the older
    Kernels.
    
    Signed-off-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Reviewed-by: Damien Lespiau <damien.lespiau@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 13888d78c664a1f61d7b09d282f5916993827a40
Author: Paulo Zanoni <paulo.r.zanoni@intel.com>
Date:   Tue Nov 20 13:27:41 2012 -0200

    drm/i915: make the panel fitter work on pipes B and C on IVB
    
    I actually found this problem on Haswell, but then discovered Ivy
    Bridge also has it by reading the spec.
    
    I don't have the hardware to test this.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Reviewed-by: Damien Lespiau <damien.lespiau@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 07887e92205c5808820de0be53bf326b4019d060
Author: Eric Lapuyade <eric.lapuyade@linux.intel.com>
Date:   Wed Oct 17 16:47:13 2012 +0200

    NFC: Fix hci_connect_gate() when a pre-opened pipe is passed
    
    In some cases, pre-opened pipes don't stay open when a clear all pipes
    command is sent. They stay created however. Therefore, one can never
    assume that such a pipe is already open. As re-opening a pipe seems not
    to be a problem, we do that now.
    
    Signed-off-by: Eric Lapuyade <eric.lapuyade@intel.com>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

commit 4b85c62411f7a95db33025b3aba29f7525c214d5
Author: Boyan Nedeltchev <boyan@ti.com>
Date:   Mon Nov 12 13:06:06 2012 +0200

    usb: misc: usbtest: send ISO packets for g_zero
    
    since commit b4036cc (usb: gadget: add
    isochronous support to gadget zero), g_zero
    has learned about isochronous transfers, which
    allows us to use usbtest.ko to exercise
    isochronous pipes.
    
    All we need to do to enable that functionality
    on usbtest.ko, is set the "iso" to 1 on
    struct usbtest_info
    
    Signed-off-by: Boyan Nedeltchev <boyan@ti.com>
    Signed-off-by: Felipe Balbi <balbi@ti.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6be0d73e2a5de2e6a2570a48e6e11bbc4563f5e3
Author: Archit Taneja <archit@ti.com>
Date:   Wed Nov 7 11:45:04 2012 +0530

    OMAPDSS: DISPC: Use output width and height to calculate row/pix inc for writeback
    
    When calculating row and pixel increments for graphics and video pipes, we need
    to consider the dimensions of the input frame to know how to read from the
    buffer. Hence, we need to calculate these parameters from the input to the
    pipeline.
    
    For writeback, the row and pixel increments need to be calculated based on the
    output of the writeback pipeline, i.e, the dimensions of the frame after
    scaling. Ensure that dispc driver uses values of out_width and out_height when
    calling calc_dma/calc_tiler_rotation_offset.
    
    For graphics and video pipes, the original code passed the original height as
    frame_height to calc_dma_rotation_offset, and not the predecimated height. This
    is left as it is for now. We need to figure out why pre decimated height isn't
    needed.
    
    Signed-off-by: Archit Taneja <archit@ti.com>
    Signed-off-by: Tomi Valkeinen <tomi.valkeinen@ti.com>

commit 049456416f74a4a66d058cf9a46075f0051c6383
Author: Paulo Zanoni <paulo.r.zanoni@intel.com>
Date:   Thu Nov 1 21:00:59 2012 -0200

    drm/i915: fix Haswell FDI link training code
    
    This commit makes hsw_fdi_link_train responsible for implementing
    everything described in the "Enable and train FDI" section from the
    Hawell CRT mode set sequence documentation. We completely rewrite
    hsw_fdi_link_train to match the documentation and we also call it in
    the right place.
    
    This patch was initially sent as a series of tiny patches fixing every
    little problem of the function, but since there were too many patches
    fixing the same function it got a little difficult to get the "big
    picture" of how the function would be in the end, so here we amended
    all the patches into a single big patch fixing the whole function.
    
    Problems we fixed:
    
      1 - Train Haswell FDI at the right time.
    
        We need to train the FDI before enabling the pipes and planes, so
        we're moving the call from lpt_pch_enable to haswell_crtc_enable
        directly.
    
        We are also removing ironlake_fdi_pll_enable since the PLL
        enablement on Haswell is completely different and is also done
        during the link training steps.
    
      2 - Use the right FDI_RX_CTL register on Haswell
    
        There is only one PCH transcoder, so it's always _FDI_RXA_CTL.
        Using "pipe" here is wrong.
    
      3 - Don't rely on DDI_BUF_CTL previous values
    
        Just set the bits we want, everything else is zero. Also
        POSTING_READ the register before sleeping.
    
      4 - Program the FDI RX TUSIZE register on hsw_fdi_link_train
    
        According to the mode set sequence documentation, this is the
        right place. According to the FDI_RX_TUSIZE register description,
        this is the value we should set.
    
        Also remove the code that sets this register from the old
        location: lpt_pch_enable.
    
      5 - Properly program FDI_RX_MISC pwrdn lane values on HSW
    
      6 - Wait only 35us for the FDI link training
    
        First we wait 30us for the FDI receiver lane calibration, then we
        wait 5us for the FDI auto training time.
    
      7 - Remove an useless indentation level on hsw_fdi_link_train
    
        We already "break" when the link training succeeds.
    
      8 - Disable FDI_RX_ENABLE, not FDI_RX_PLL_ENABLE
    
        When we fail the training.
    
      9 - Change Haswell FDI link training error messages
    
        We shouldn't call DRM_ERROR when still looping through voltage
        levels since this is expected and not really a failure. So in this
        commit we adjust the error path to only DRM_ERROR when we really
        fail after trying everything.
    
        While at it, replace DRM_DEBUG_DRIVER with DRM_DEBUG_KMS since
        it's what we use everywhere.
    
      10 - Try each voltage twice at hsw_fdi_link_train
    
        Now with Daniel Vetter's suggestion to use "/2" instead of ">>1".
    
    Signed-off-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    [danvet: Applied tiny bikesheds:
    - mention in comment that we test each voltage/emphasis level twice
    - realing arguments of the only untouched reg write, it spilled over
      the 80 char limit ...]
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 01a415fd026c1a413a7016ee880fff7a113af6c8
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Sat Oct 27 15:58:40 2012 +0200

    drm/i915: check fdi B/C lane sharing constraint
    
    And properly toggle the chicken bit in the pch to enable/disable fdi C
    rx. If we don't set this bit correctly, the rx gets confused in link
    training, which can result in an fdi link that silently fails to train
    the link (since the corresponding register reports success). Note that
    both fdi link B and C can suffer when this bit is not set correctly.
    
    The code as-is has a few deficiencies:
    - We presume all pipes use the pch which is not the case for cpu edp.
    - We don't bother with disabling both pipes when we could make things
      work, e.g. when pipe B switched from 4 to 2 lanes due to a mode
      change, we don't bother updating the w/a bit.
    - It's ugly.
    
    All of these are because we compute ->fdi_lanes way too late, when
    we're already setting up individual pipes. We need to have this
    information in ->modeset_global_resources already, to set things up
    correctly. But that is a much larger reorg of the code.
    
    Note that we actually hit the 2 lanes limit in practice rather
    quickly: Even though the 1920x1200 mode native mode of my screen fits
    into 2 lanes, it needs 3 lanes for the 1920x1080 (since that somehow
    has much more blanking ...). Not obeying this restriction seems to
    results in cute-looking digital noise.
    
    v2: Only ever clear the chicken bit when both pipes are off.
    
    v3: Use the new ->modeset_global_resources callback.
    
    v4: Move the WARNs to the right place. Oh how I hate hacks.
    
    v5: Fix spelling, noticed by Paulo Zanoni.
    
    Reviewed-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 47fab7370b45c6708e57430831839261d0d63f53
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Fri Oct 26 10:58:18 2012 +0200

    drm/i915: add ->display.modeset_global_resources callback
    
    After all relevant pipes are disabled and after we've updated all the
    state with the staged state, but before we call the per-crtc
    ->mode_set functions there's a very natural point to set up any
    shared/global resources like
    - shared plls (obviously only the setup, the enabling needs to be
      separately handling with a separate refcount)
    - global watermark state like the DSPARB on gmch platforms
    - workaround bits that depend upon the exact global output
      configuration
    - enabling the right set of refclocks
    - enabling/disabling manual power wells.
    
    Now for a lot of these things we can't move them into this function
    yet, most often because we only compute the required information in
    the per-crtc ->mode_set callback. Which is too late. But due to a
    bunch of reasons (check-only atomic modeset, fastboot&hw state checks,
    ...) we need to separate the computation of that state from the actual
    hw frobbery anyway. So we can move things into this new callback step-
    by-step.
    
    Others can't be moved here (or implemented at all) because our code
    lacks the smarts to properly update them. E.g. the DSPARB can only be
    updated when all pipes are disabled, so if we decide to change it's
    value, we need to disable _all_ pipes. The infrastructure for that is
    already in place (with the various pipe masks that driver the modeset
    logic). But again we need to move a few things out of ->mode_set
    first before we can even implement the correct decision making.
    
    In any case, we need to start somewhere, so let's start with the
    callback: Some small follow-up patches will make immediate good use of
    it.
    
    Reviewed-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit cd986abbac6044c76b95fd512bc62329ef9959d0
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Fri Oct 26 10:58:12 2012 +0200

    drm/i915: Write the FDI RX TU size reg at the right time
    
    According to "Graphics BSpec: vol4g North Display Engine Registers [IVB],
    Display Mode Set Sequence" We need to write the TU size register
    of the fdi RX unit _before_ starting to train the link.
    
    Note: The current code is actually correct as Paulo mentioned in
    review, but it's a bit confusion since only the fdi rx/tx plls need to
    be enabled before the cpu pipes/planes. Hence it's still a good idea
    to move the TU_SIZE setting to the "right" spot in the sequence, to
    better match Bspec.
    
    Reviewed-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 0250ffc578ac26acbc8a43e8018f00b0b3989b84
Author: Szymon Janc <szymon.janc@tieto.com>
Date:   Thu Oct 4 15:15:49 2012 +0200

    NFC: Fix not propagating return code in nfc_hci_clear_all_pipes
    
    Return code from nfc_hci_execute_cmd was not propagated to caller.
    
    Signed-off-by: Szymon Janc <szymon.janc@tieto.com>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

commit e28d54cbf97ca1f8cd49a9756e57ed614d64368d
Author: Paulo Zanoni <paulo.r.zanoni@intel.com>
Date:   Wed Oct 24 16:09:25 2012 -0200

    drm/i915: check TRANSCODER_EDP on intel_modeset_setup_hw_state
    
    We need to check if any of the pipes is using TRANSCODER_EDP.
    
    V2: DDI_BUF_CTL was renamed, so fix the usage here.
    
    Signed-off-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Reviewed-by: Damien Lespiau <damien.lespiau@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit a5c961d1f3a9ab5ba0e5706e866192f8108143fe
Author: Paulo Zanoni <paulo.r.zanoni@intel.com>
Date:   Wed Oct 24 15:59:34 2012 -0200

    drm/i915: add TRANSCODER_EDP
    
    Before Haswell we used to have the CPU pipes and the PCH transcoders.
    We had the same amount of pipes and transcoders, and there was a 1:1
    mapping between them. After Haswell what we used to call CPU pipe was
    split into CPU pipe and CPU transcoder. So now we have 3 CPU pipes (A,
    B and C), 4 CPU transcoders (A, B, C and EDP) and 1 PCH transcoder
    (only used for VGA).
    
    For all the outputs except for EDP we have an 1:1 mapping on the CPU
    pipes and CPU transcoders, so if you're using CPU pipe A you have to
    use CPU transcoder A. When have an eDP output you have to use
    transcoder EDP and you can attach this CPU transcoder to any of the 3
    CPU pipes. When using VGA you need to select a pair of matching CPU
    pipes/transcoders (A/A, B/B, C/C) and you also need to enable/use the
    PCH transcoder.
    
    For now we're just creating the cpu_transcoder definitions and setting
    cpu_transcoder to TRANSCODER_EDP on DDI eDP code, but none of the
    registers was ported to use transcoder instead of pipe. The goal is to
    keep the code backwards-compatible since on all cases except when
    using eDP we must have pipe == cpu_transcoder.
    
    V2: Comment the haswell_crtc_off chunk, suggested by Damien Lespiau
    and Daniel Vetter.
    
    We currently need the haswell_crtc_off chunk because TRANSCODER_EDP
    can be used by any CRTC, so when you stop using it you have to stop
    saying you're using it, otherwise you may have at some point 2 CRTCs
    claiming they're using TRANSCODER_EDP (a disabled CRTC and an enabled
    one), then the HW state readout code will get completely confused.
    
    In other words:
    
    Imagine the following case:
      xrandr --output eDP1 --auto --crtc 0
      xrandr --output eDP1 --off
      xrandr --output eDP1 --auto --crtc 2
    
    After the last command you could get a "pipe A assertion failure
    (expected off, current on)" because CRTC 0 still claims it's using
    TRANSCODER_EDP, so the HW state readout function will read it
    (through PIPECONF) and expect it to be off, when it's actually on
    because it's being used by CRTC 2.
    
    So when we make "intel_crtc->cpu_transcoder = intel_crtc->pipe" we
    make sure we're pointing to our own original CRTC which is certainly
    not used by any other CRTC.
    
    Signed-off-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Reviewed-by: Damien Lespiau <damien.lespiau@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 77565794eb69cf73a5808c04b01bc2a97ebf32d3
Author: Vasanthakumar Thiagarajan <vthiagar@qca.qualcomm.com>
Date:   Wed Aug 29 19:40:28 2012 +0530

    ath6kl: Recover from "wmi ctrl ep is full" condition
    
    In some error conditions, fw pauses HTC pipes which would
    result in control endpoint full condition. When we hit this
    case, most of the time the device will be unusable. Re-initialize
    the target to recover from this situation.
    
    Signed-off-by: Vasanthakumar Thiagarajan <vthiagar@qca.qualcomm.com>
    Signed-off-by: Kalle Valo <kvalo@qca.qualcomm.com>

commit 40a0ab597cbc4d09d17e5af410c7df7b1b915f2e
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Tue Oct 2 17:54:35 2012 +0200

    drm/i915: call drm_handle_vblank before finish_page_flip
    
    commit 74d44445afb9f50126eba052adeb89827cee88f3 upstream.
    
    ... since finish_page_flip needs the vblank timestamp generated
    in drm_handle_vblank. Somehow all the gmch platforms get it right,
    but all the pch platform irq handlers get is wrong. Hooray for copy&
    pasting!
    
    Currently this gets papered over by a gross hack in finish_page_flip.
    A second patch will remove that.
    
    Note that without this, the new timestamp sanity checks in flip_test
    occasionally get tripped up, hence the cc: stable tag.
    
    Reviewed-by: mario.kleiner@tuebingen.mpg.de
    Tested-by: Imre Deak <imre.deak@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>
    [bwh: Backported to 3.2: no loop over pipes in ivybridge_irq_handler(),
     so make a similar change to that in ironlake_irq_handler()]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit fa55583797d12b10928a1813f3dcf066637caf5e
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Wed Oct 10 23:14:00 2012 +0200

    drm/i915: fixup the plane->pipe fixup code
    
    We need to check whether the _other plane is on our pipe, not whether
    our plane is on the other pipe. Otherwise if not both pipes/planes are
    active, we won't properly clean up the mess and set up our desired
    plane->pipe mapping.
    
    v2: Fixup the logic, I've totally fumbled it. Noticed by Chris Wilson.
    
    v3: I've checked Bspec, and the flexible plane->pipe mapping is a
    gen2/3 feature, so test for that instead of PCH_SPLIT
    
    v4: Check whether we indeed have 2 pipes before checking the other
    pipe, to avoid upsetting i845g/i865g. Noticed by Chris Wilson.
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=51265
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=49838
    Tested-by: Dave Airlie <airlied@gmail.com>
    Tested-by: Chris Wilson <chris@chris-wilson.co.uk> #855gm
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit ba9b584c1dc37851d9c6ca6d0d2ccba55d9aad04
Author: Chuck Lever <chuck.lever@oracle.com>
Date:   Fri Sep 14 17:24:02 2012 -0400

    SUNRPC: Introduce rpc_clone_client_set_auth()
    
    An ULP is supposed to be able to replace a GSS rpc_auth object with
    another GSS rpc_auth object using rpcauth_create().  However,
    rpcauth_create() in 3.5 reliably fails with -EEXIST in this case.
    This is because when gss_create() attempts to create the upcall pipes,
    sometimes they are already there.  For example if a pipe FS mount
    event occurs, or a previous GSS flavor was in use for this rpc_clnt.
    
    It turns out that's not the only problem here.  While working on a
    fix for the above problem, we noticed that replacing an rpc_clnt's
    rpc_auth is not safe, since dereferencing the cl_auth field is not
    protected in any way.
    
    So we're deprecating the ability of rpcauth_create() to switch an
    rpc_clnt's security flavor during normal operation.  Instead, let's
    add a fresh API that clones an rpc_clnt and gives the clone a new
    flavor before it's used.
    
    This makes immediate use of the new __rpc_clone_client() helper.
    
    This can be used in a similar fashion to rpcauth_create() when a
    client is hunting for the correct security flavor.  Instead of
    replacing an rpc_clnt's security flavor in a loop, the ULP replaces
    the whole rpc_clnt.
    
    To fix the -EEXIST problem, any ULP logic that relies on replacing
    an rpc_clnt's rpc_auth with rpcauth_create() must be changed to use
    this API instead.
    
    Signed-off-by: Chuck Lever <chuck.lever@oracle.com>
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit 78b687fc4ffa27d48c793f9669d53a6f4351e239
Author: Archit Taneja <archit@ti.com>
Date:   Fri Sep 21 14:51:49 2012 +0530

    OMAPDSS: DISPC: Simplify function names for setting pipeline input and output sizes
    
    The DISPC pipeline register names in the TRM for setting the buffer size and
    the output size are a bit misleading, for example, there are different register
    names for setting the buffer size for VID and GFX pipes. Things get more
    confusing when considering writeback pipeline.
    
    Rename the functions so that they tell whether they are configuring the input
    to the scalar or the output. These will be extended later to support writeback
    registers.
    
    Signed-off-by: Archit Taneja <archit@ti.com>

commit a1ceb677518a16903c3656c7079f9611315a0422
Merge: 8c3f929b6147 b980514c9adf
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Thu Sep 6 22:51:48 2012 +0200

    Merge the modeset-rework, basic conversion into drm-intel-next
    
    As a quick reference I'll detail the motivation and design of the new code a
    bit here (mostly stitched together from patchbomb announcements and commits
    introducing the new concepts).
    
    The crtc helper code has the fundamental assumption that encoders and crtcs can
    be enabled/disabled in any order, as long as we take care of depencies (which
    means that enabled encoders need an enabled crtc to feed them data,
    essentially).
    
    Our hw works differently. We already have tons of ugly cases where crtc code
    enables encoder hw (or encoder->mode_set enables stuff that should only be
    enabled in enocder->commit) to work around these issues. But on the disable
    side we can't pull off similar tricks - there we actually need to rework the
    modeset sequence that controls all this. And this is also the real motivation
    why I've finally undertaken this rewrite: eDP on my shiny new Ivybridge
    Ultrabook is broken, and it's broken due to the wrong disable sequence ...
    
    The new code introduces a few interfaces and concepts:
    
    - Add new encoder->enable/disable functions which are directly called from the
    crtc->enable/disable function. This ensures that the encoder's can be
    enabled/disabled at a very specific in the modeset sequence, controlled by our
    platform specific code (instead of the crtc helper code calling them at a time
    it deems convenient).
    
    - Rework the dpms code - our code has mostly 1:1 connector:encoder mappings and
    does support cloning on only a few encoders, so we can simplify things quite a
    bit.
    
    - Also only ever disable/enable the entire output pipeline. This ensures that
    we obey the right sequence of enabling/disabling things, trying to be clever
    here mostly just complicates the code and results in bugs. For cloneable
    encoders this requires a bit of special handling to ensure that outputs can
    still be disabled individually, but it simplifies the common case.
    
    - Add infrastructure to read out the current hw state. No amount of careful
    ordering will help us if we brick the hw on the initial modeset setup. Which
    could happen if we just randomly disable things, oblivious to the state set up
    by the bios. Hence we need to be able to read that out. As a benefit, we grow a
    few generic functions useful to cross-check our modeset code with actual hw
    state.
    
    With all this in place, we can copy&paste the crtc helper code into the
    drm/i915 driver and start to rework it:
    
    - As detailed above, the new code only disables/enables an entire output pipe.
    As a preparation for global mode-changes (e.g. reassigning shared resources) it
    keeps track of which pipes need to be touched by a set of bitmasks.
    
    - To ensure that we correctly disable the current display pipes, we need to
    know the currently active connector/encoder/crtc linking. The old crtc helper
    simply overwrote these links with the new setup, the new code stages the new
    links in ->new_* pointers. Those get commited to the real linking pointers once
    the old output configuration has been torn down, before the ->mode_set
    callbacks are called.
    
    - Finally the code adds tons of self-consistency checks by employing the new hw
    state readout functions to cross-check the actual hw state with what the
    datastructure think it should be. These checks are done both after every
    modeset and after the hw state has been read out and sanitized at boot/resume
    time. All these checks greatly helped in tracking down regressions and bugs in
    the new code.
    
    With this new basis, a lot of cleanups and improvements to the code are now
    possible (besides the DP fixes that ultimately made me write this), but not yet
    done:
    
    - I think we should create struct intel_mode and use it as the adjusted mode
    everywhere to store little pieces like needs_tvclock, pipe dithering values or
    dp link parameters. That would still be a layering violation, but at least we
    wouldn't need to recompute these kinds of things in intel_display.c. Especially
    the port bpc computation needed for selecting the pipe bpc and dithering
    settings in intel_display.c is rather gross.
    
    - In a related rework we could implement ->mode_valid in terms of ->mode_fixup
    in a generic way - I've hunted down too many bugs where ->mode_valid did the
    right thing, but ->mode_fixup didn't. Or vice versa, resulting in funny bugs
    for user-supplied modes.
    
    - Ditch the idea to rework the hdp handling in the common crtc helper code and
    just move things to i915.ko. Which would rid us of the ->detect crtc helper
    dependencies.
    
    - LVDS wire pair and pll enabling is all done in the crtc->mode_set function
    currently. We should be able to move this to the crtc_enable callbacks (or in
    the case of the LVDS wire pair enabling, into some encoder callback).
    
    Last, but not least, this new code should also help in enabling a few neat
    features: The hw state readout code prepares (but there are still big pieces
    missing) for fastboot, i.e. avoiding the inital modeset at boot-up and just
    taking over the configuration left behind by the bios. We also should be able
    to extend the configuration checks in the beginning of the modeset sequence and
    make better decisions about shared resources (which is the entire point behind
    the atomic/global modeset ioctl).
    
    Tested-by: Jani Nikula <jani.nikula@intel.com>
    Tested-by: Ben Widawsky <ben@bwidawsk.net>
    Tested-by: Damien Lespiau <damien.lespiau@intel.com>
    Tested-by: Rodrigo Vivi <rodrigo.vivi@gmail.com>
    Acked-by: Chris Wilson <chris@chris-wilson.co.uk>
    Tested-by: Vijay Purushothaman <vijay.a.purushothaman@intel.com>
    Acked-by: Vijay Purushothaman <vijay.a.purushothaman@intel.com>
    Tested-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Acked-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Tested-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit a261b246ebd552fd5d5a8ed84cc931bb821c427f
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Thu Jul 26 19:21:47 2012 +0200

    drm/i915: disable all crtcs at suspend time
    
    We need this to avoid confusing the hw state readout code with the cpt
    pch plls at resume time: We'd read the new pipe state (which is
    disabled), but still believe that we have a life pll connected to that
    pipe (from before the suspend). Hence properly disable pipes to clear
    out all the residual state.
    
    This has the neat side-effect that we don't enable ports prematurely
    by restoring bogus state from the saved register values.
    
    Reviewed-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Signed-Off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 25c5b2665fe4cc5a93edd29b62e7c05c15dddd26
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Sun Jul 8 22:08:04 2012 +0200

    drm/i915: implement new set_mode code flow
    
    ... using the pipe masks from the previous patch.
    
    Well, not quite:
    - We still need to call the disable_unused_functions helper, until
      we've moved the call to commit_output_state further down and
      adjusted intel_crtc_disable a bit. The next patch will do that.
    - Because we don't support (yet) mode changes on more than one crtc at
      a time, some of the modeset_pipes checks are a bit hackish - but
      that only needs fixing once we incorporate global modeset support.
    
    Reviewed-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Signed-Off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 24929352481f085c5f85d4d4cbc919ddf106d381
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Mon Jul 2 20:28:59 2012 +0200

    drm/i915: read out the modeset hw state at load and resume time
    
    ... instead of resetting a few things and hoping that this will work
    out.
    
    To properly disable the output pipelines at the initial modeset after
    resume or boot up we need to have an accurate picture of which outputs
    are enabled and connected to which crtcs. Otherwise we risk disabling
    things at the wrong time, which can lead to hangs (or at least royally
    confused panels), both requiring a walk to the reset button to fix.
    
    Hence read out the hw state with the freshly introduce get_hw_state
    functions and then sanitize it afterwards.
    
    For a full modeset readout (which would allow us to avoid the initial
    modeset at boot up) a few things are still missing:
    - Reading out the mode from the pipe, especially the dotclock
      computation is quite some fun.
    - Reading out the parameters for the stolen memory framebuffer and
      wrapping it up.
    - Reading out the pch pll connections - luckily the disable code
      simply bails out if the crtc doesn't have a pch pll attached (even
      for configurations that would need one).
    
    This patch here turned up tons of smelly stuff around resume: We
    restore tons of register in seemingly random way (well, not quite, but
    we're not too careful either), which leaves the hw in a rather
    ill-defined state: E.g. the port registers are sometimes
    unconditionally restore (lvds, crt), leaving us with an active
    encoder/connector but no active pipe connected to it. Luckily the hw
    state sanitizer detects this madness and fixes things up a bit.
    
    v2: When checking whether an encoder with active connectors has a crtc
    wire up to it, check for both the crtc _and_ it's active state.
    
    v3:
    - Extract intel_sanitize_encoder.
    - Manually disable active encoders without an active pipe.
    
    v4: Correclty fix up the pipe<->plane mapping on machines where we
    switch pipes/planes. Noticed by Chris Wilson, who also provided the
    fixup.
    
    v5: Spelling fix in a comment, noticed by Paulo Zanoni
    
    Reviewed-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Signed-Off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit e8cb455876fa8f67c6aba394d0a14b697bf04cc3
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Sun Jul 1 13:05:48 2012 +0200

    drm/i915/dp: convert to encoder disable/enable
    
    DP is the first encoder which isn't simple. As
    
    commit d240f20f545fa4ed78ce48d1eb62ab529f2b1467
    Author: Jesse Barnes <jbarnes@virtuousgeek.org>
    Date:   Fri Aug 13 15:43:26 2010 -0700
    
        drm/i915: make sure eDP PLL is enabled at the right time
    
    discovered, we need to enable the eDP PLL for the cpu port _before_ we
    enable the pipes and planes. After a few more commits the current
    solution is to enable the PLL in the dp mode_set function (because
    this is the only encoder callback the crtc helper code calls before it
    calls the crtc's commit function).
    
    Now I suspect that we actually should enable/disable the entire cpu
    eDP port before/after planes, but thanks to how the crtc helper code
    assumes that you can disable an encoder without disabling it's crtc
    right away, this won't work.
    
    The result is that the current prepare/commit hooks don't touch the
    eDP PLL, but instead it get's frobbed in dp_mode_set and in the dp
    dpms function. Hence we need to keep things (at least for now)
    bug-for-bug compatible by using our own special dp dpms function and
    keep everything else more-or-less as-is (just using our own
    infrastrucutre now).
    
    This mess can only be cleaned up once we control the entire modeset
    sequence and can move things around freely.
    
    v2: Squash unsupported dpms modes to OFF at the beginning of the DP
    dpms function.
    
    v3: Need to set the dpms state to off in dp_disable, otherwise this
    breaks the newly added WARNs ...
    
    v4: Rebased against edp panel off sequence changes in 3.6-rc2
    
    Reviewed-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Signed-Off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 523313092abffb21bfe7cd8d37615402b2228850
Author: Damien Lespiau <damien.lespiau@intel.com>
Date:   Wed Aug 15 19:23:25 2012 +0100

    drm/i915: Don't hardcode the number of pipes in the error state dump
    
    New-ish devices have 3 pipes, so let's not just hardcode 2 but use the
    for_each_pipe() macro and make struct intel_display_error_state is big
    enough.
    
    V2: Also add the number of pipes emitted (Chris Wilson)
    
    Signed-off-by: Damien Lespiau <damien.lespiau@intel.com>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 072bb0aa5e062902968c5c1007bba332c7820cf4
Author: Mel Gorman <mgorman@suse.de>
Date:   Tue Jul 31 16:43:58 2012 -0700

    mm: sl[au]b: add knowledge of PFMEMALLOC reserve pages
    
    When a user or administrator requires swap for their application, they
    create a swap partition and file, format it with mkswap and activate it
    with swapon.  Swap over the network is considered as an option in diskless
    systems.  The two likely scenarios are when blade servers are used as part
    of a cluster where the form factor or maintenance costs do not allow the
    use of disks and thin clients.
    
    The Linux Terminal Server Project recommends the use of the Network Block
    Device (NBD) for swap according to the manual at
    https://sourceforge.net/projects/ltsp/files/Docs-Admin-Guide/LTSPManual.pdf/download
    There is also documentation and tutorials on how to setup swap over NBD at
    places like https://help.ubuntu.com/community/UbuntuLTSP/EnableNBDSWAP The
    nbd-client also documents the use of NBD as swap.  Despite this, the fact
    is that a machine using NBD for swap can deadlock within minutes if swap
    is used intensively.  This patch series addresses the problem.
    
    The core issue is that network block devices do not use mempools like
    normal block devices do.  As the host cannot control where they receive
    packets from, they cannot reliably work out in advance how much memory
    they might need.  Some years ago, Peter Zijlstra developed a series of
    patches that supported swap over an NFS that at least one distribution is
    carrying within their kernels.  This patch series borrows very heavily
    from Peter's work to support swapping over NBD as a pre-requisite to
    supporting swap-over-NFS.  The bulk of the complexity is concerned with
    preserving memory that is allocated from the PFMEMALLOC reserves for use
    by the network layer which is needed for both NBD and NFS.
    
    Patch 1 adds knowledge of the PFMEMALLOC reserves to SLAB and SLUB to
            preserve access to pages allocated under low memory situations
            to callers that are freeing memory.
    
    Patch 2 optimises the SLUB fast path to avoid pfmemalloc checks
    
    Patch 3 introduces __GFP_MEMALLOC to allow access to the PFMEMALLOC
            reserves without setting PFMEMALLOC.
    
    Patch 4 opens the possibility for softirqs to use PFMEMALLOC reserves
            for later use by network packet processing.
    
    Patch 5 only sets page->pfmemalloc when ALLOC_NO_WATERMARKS was required
    
    Patch 6 ignores memory policies when ALLOC_NO_WATERMARKS is set.
    
    Patches 7-12 allows network processing to use PFMEMALLOC reserves when
            the socket has been marked as being used by the VM to clean pages. If
            packets are received and stored in pages that were allocated under
            low-memory situations and are unrelated to the VM, the packets
            are dropped.
    
            Patch 11 reintroduces __skb_alloc_page which the networking
            folk may object to but is needed in some cases to propogate
            pfmemalloc from a newly allocated page to an skb. If there is a
            strong objection, this patch can be dropped with the impact being
            that swap-over-network will be slower in some cases but it should
            not fail.
    
    Patch 13 is a micro-optimisation to avoid a function call in the
            common case.
    
    Patch 14 tags NBD sockets as being SOCK_MEMALLOC so they can use
            PFMEMALLOC if necessary.
    
    Patch 15 notes that it is still possible for the PFMEMALLOC reserve
            to be depleted. To prevent this, direct reclaimers get throttled on
            a waitqueue if 50% of the PFMEMALLOC reserves are depleted.  It is
            expected that kswapd and the direct reclaimers already running
            will clean enough pages for the low watermark to be reached and
            the throttled processes are woken up.
    
    Patch 16 adds a statistic to track how often processes get throttled
    
    Some basic performance testing was run using kernel builds, netperf on
    loopback for UDP and TCP, hackbench (pipes and sockets), iozone and
    sysbench.  Each of them were expected to use the sl*b allocators
    reasonably heavily but there did not appear to be significant performance
    variances.
    
    For testing swap-over-NBD, a machine was booted with 2G of RAM with a
    swapfile backed by NBD.  8*NUM_CPU processes were started that create
    anonymous memory mappings and read them linearly in a loop.  The total
    size of the mappings were 4*PHYSICAL_MEMORY to use swap heavily under
    memory pressure.
    
    Without the patches and using SLUB, the machine locks up within minutes
    and runs to completion with them applied.  With SLAB, the story is
    different as an unpatched kernel run to completion.  However, the patched
    kernel completed the test 45% faster.
    
    MICRO
                                             3.5.0-rc2 3.5.0-rc2
                                             vanilla     swapnbd
    Unrecognised test vmscan-anon-mmap-write
    MMTests Statistics: duration
    Sys Time Running Test (seconds)             197.80    173.07
    User+Sys Time Running Test (seconds)        206.96    182.03
    Total Elapsed Time (seconds)               3240.70   1762.09
    
    This patch: mm: sl[au]b: add knowledge of PFMEMALLOC reserve pages
    
    Allocations of pages below the min watermark run a risk of the machine
    hanging due to a lack of memory.  To prevent this, only callers who have
    PF_MEMALLOC or TIF_MEMDIE set and are not processing an interrupt are
    allowed to allocate with ALLOC_NO_WATERMARKS.  Once they are allocated to
    a slab though, nothing prevents other callers consuming free objects
    within those slabs.  This patch limits access to slab pages that were
    alloced from the PFMEMALLOC reserves.
    
    When this patch is applied, pages allocated from below the low watermark
    are returned with page->pfmemalloc set and it is up to the caller to
    determine how the page should be protected.  SLAB restricts access to any
    page with page->pfmemalloc set to callers which are known to able to
    access the PFMEMALLOC reserve.  If one is not available, an attempt is
    made to allocate a new page rather than use a reserve.  SLUB is a bit more
    relaxed in that it only records if the current per-CPU page was allocated
    from PFMEMALLOC reserve and uses another partial slab if the caller does
    not have the necessary GFP or process flags.  This was found to be
    sufficient in tests to avoid hangs due to SLUB generally maintaining
    smaller lists than SLAB.
    
    In low-memory conditions it does mean that !PFMEMALLOC allocators can fail
    a slab allocation even though free objects are available because they are
    being preserved for callers that are freeing pages.
    
    [a.p.zijlstra@chello.nl: Original implementation]
    [sebastian@breakpoint.cc: Correct order of page flag clearing]
    Signed-off-by: Mel Gorman <mgorman@suse.de>
    Cc: David Miller <davem@davemloft.net>
    Cc: Neil Brown <neilb@suse.de>
    Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
    Cc: Mike Christie <michaelc@cs.wisc.edu>
    Cc: Eric B Munson <emunson@mgebm.net>
    Cc: Eric Dumazet <eric.dumazet@gmail.com>
    Cc: Sebastian Andrzej Siewior <sebastian@breakpoint.cc>
    Cc: Mel Gorman <mgorman@suse.de>
    Cc: Christoph Lameter <cl@linux.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 2c07f25ea7800adb36cd8da9b58c4ecd3fc3d064
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Jun 12 15:24:40 2012 +0200

    splice: fix racy pipe->buffers uses
    
    commit 047fe3605235888f3ebcda0c728cb31937eadfe6 upstream.
    
    Dave Jones reported a kernel BUG at mm/slub.c:3474! triggered
    by splice_shrink_spd() called from vmsplice_to_pipe()
    
    commit 35f3d14dbbc5 (pipe: add support for shrinking and growing pipes)
    added capability to adjust pipe->buffers.
    
    Problem is some paths don't hold pipe mutex and assume pipe->buffers
    doesn't change for their duration.
    
    Fix this by adding nr_pages_max field in struct splice_pipe_desc, and
    use it in place of pipe->buffers where appropriate.
    
    splice_shrink_spd() loses its struct pipe_inode_info argument.
    
    Reported-by: Dave Jones <davej@redhat.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: Tom Herbert <therbert@google.com>
    Tested-by: Dave Jones <davej@redhat.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    [bwh: Backported to 3.2:
     - Adjust context in vmsplice_to_pipe()
     - Update one more call to splice_shrink_spd(), from skb_splice_bits()]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9558b2ab1db5e94fcb7d5ab111a32e423a016c09
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Jun 12 15:24:40 2012 +0200

    splice: fix racy pipe->buffers uses
    
    commit 047fe3605235888f3ebcda0c728cb31937eadfe6 upstream.
    
    Dave Jones reported a kernel BUG at mm/slub.c:3474! triggered
    by splice_shrink_spd() called from vmsplice_to_pipe()
    
    commit 35f3d14dbbc5 (pipe: add support for shrinking and growing pipes)
    added capability to adjust pipe->buffers.
    
    Problem is some paths don't hold pipe mutex and assume pipe->buffers
    doesn't change for their duration.
    
    Fix this by adding nr_pages_max field in struct splice_pipe_desc, and
    use it in place of pipe->buffers where appropriate.
    
    splice_shrink_spd() loses its struct pipe_inode_info argument.
    
    Reported-by: Dave Jones <davej@redhat.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: Tom Herbert <therbert@google.com>
    Tested-by: Dave Jones <davej@redhat.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>
    [bwh: Backported to 3.2:
     - Adjust context in vmsplice_to_pipe()
     - Update one more call to splice_shrink_spd(), from skb_splice_bits()]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit a10d595b1074d04446f77161eea165e5809e163c
Author: Eric Lapuyade <eric.lapuyade@linux.intel.com>
Date:   Tue Jun 5 14:42:11 2012 +0200

    NFC: Allow HCI driver to pre-open pipes to some gates
    
    Some NFC chips will statically create and open pipes for both standard
    and proprietary gates. The driver can now pass this information to HCI
    such that HCI will not attempt to create and open them, but will instead
    directly use the passed pipe ids.
    
    Signed-off-by: Eric Lapuyade <eric.lapuyade@intel.com>
    Signed-off-by: Samuel Ortiz <sameo@linux.intel.com>

commit a8f78b582236a7e518ebcad8161b5599d3c92f5b
Author: Eugeni Dodonov <eugeni.dodonov@intel.com>
Date:   Thu Jun 28 15:55:35 2012 -0300

    drm/i915: re-initialize DDI buffer translations after resume
    
    This is necessary for the modesetting to work correctly after a
    suspend-resume cycle. Without this, the pipes and clocks got the correct
    configuration, but the underlying DDI buffers configuration was lost.
    
    Signed-off-by: Eugeni Dodonov <eugeni.dodonov@intel.com>
    Reviewed-by: Paulo Zanoni <paulo.r.zanoni@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 1544d9d57396d5c0c6b7644ed5ae1f4d6caad07a
Author: Eugeni Dodonov <eugeni.dodonov@intel.com>
Date:   Mon Jul 2 11:51:10 2012 -0300

    drm/i915: enable RC6 workaround on Haswell
    
    For Haswell, on some of the early hardware revisions, it is possible to
    run into issues when RC6 state is enabled and when pipes change state.
    
    v2: add comment saying that this is for early revisions only.
    
    v3: beautify as suggested by Daniel Vetter.
    
    Signed-off-by: Eugeni Dodonov <eugeni.dodonov@intel.com>
    Acked-by: Ben Widawsky <ben@bwidawsk.net>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 31acc7f59aac34477423a7dde654ae998b48d666
Author: Jesse Barnes <jbarnes@virtuousgeek.org>
Date:   Wed Jun 20 10:53:11 2012 -0700

    drm/i915: support page flipping on ValleyView
    
    And restructure the IRQ handling a little.  We can use pipestat for most
    things, and make sure we don't affect pipe events when enabling and
    disabling vblank interupts.
    
    We can leave vblank interrupts masked but enabled so we're not dependent
    on the first client to toggle the disable timer.  We can also mask all
    render based interrupts, since the ring code will handle unmasking them
    for us.
    
    v2: roll in vblank masking, remove unneeded variable (Daniel)
    
    Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 047fe3605235888f3ebcda0c728cb31937eadfe6
Author: Eric Dumazet <edumazet@google.com>
Date:   Tue Jun 12 15:24:40 2012 +0200

    splice: fix racy pipe->buffers uses
    
    Dave Jones reported a kernel BUG at mm/slub.c:3474! triggered
    by splice_shrink_spd() called from vmsplice_to_pipe()
    
    commit 35f3d14dbbc5 (pipe: add support for shrinking and growing pipes)
    added capability to adjust pipe->buffers.
    
    Problem is some paths don't hold pipe mutex and assume pipe->buffers
    doesn't change for their duration.
    
    Fix this by adding nr_pages_max field in struct splice_pipe_desc, and
    use it in place of pipe->buffers where appropriate.
    
    splice_shrink_spd() loses its struct pipe_inode_info argument.
    
    Reported-by: Dave Jones <davej@redhat.com>
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: Tom Herbert <therbert@google.com>
    Cc: stable <stable@vger.kernel.org> # 2.6.35
    Tested-by: Dave Jones <davej@redhat.com>
    Signed-off-by: Jens Axboe <axboe@kernel.dk>

commit 98b6bd998ae057611d2bc040ace1fc847f575b84
Author: Daniel Vetter <daniel.vetter@ffwll.ch>
Date:   Sun May 20 20:00:25 2012 +0200

    drm/i915: IBX has a fixed pch pll to pch pipe mapping
    
    This should fix breakage introduced in
    
    commit ee7b9f93fd96a72e5d09e2b44024c11880873c6b
    Author: Jesse Barnes <jbarnes@virtuousgeek.org>
    Date:   Fri Apr 20 17:11:53 2012 +0100
    
        drm/i915: manage PCH PLLs separately from pipes
    
    v2: Add a DRM_DEBUG_KMS message to explain why a given pll was
    selected, suggested by Chris Wilson.
    
    v3: Actually run git add.
    
    Cc: Jesse Barnes <jbarnes@virtuousgeek.org>
    Cc: Chris Wilson <chris@chris-wilson.co.uk>
    Reviewed-by: Chris Wilson <chris@chris-wilson.co.uk>
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=49712
    Signed-Off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 461bc9b587389586edf9315b337fb136f33594ad
Author: Eugeni Dodonov <eugeni.dodonov@intel.com>
Date:   Wed May 9 15:37:11 2012 -0300

    drm/i915: calculate watermarks for devices that have 3 pipes
    
    This adds proper support for calculating those watermarks, checking for
    number of available pipes instead of specific GPU variants when deciding
    if watermarks for 3rd pipe are necessary.
    
    Reviewed-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Signed-off-by: Eugeni Dodonov <eugeni.dodonov@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 39bcf98adc9432136e3b6a54881dcf703b7fcb63
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Apr 29 13:12:42 2012 -0700

    pipes: add a "packetized pipe" mode for writing
    
    commit 9883035ae7edef3ec62ad215611cb8e17d6a1a5d upstream.
    
    The actual internal pipe implementation is already really about
    individual packets (called "pipe buffers"), and this simply exposes that
    as a special packetized mode.
    
    When we are in the packetized mode (marked by O_DIRECT as suggested by
    Alan Cox), a write() on a pipe will not merge the new data with previous
    writes, so each write will get a pipe buffer of its own.  The pipe
    buffer is then marked with the PIPE_BUF_FLAG_PACKET flag, which in turn
    will tell the reader side to break the read at that boundary (and throw
    away any partial packet contents that do not fit in the read buffer).
    
    End result: as long as you do writes less than PIPE_BUF in size (so that
    the pipe doesn't have to split them up), you can now treat the pipe as a
    packet interface, where each read() system call will read one packet at
    a time.  You can just use a sufficiently big read buffer (PIPE_BUF is
    sufficient, since bigger than that doesn't guarantee atomicity anyway),
    and the return value of the read() will naturally give you the size of
    the packet.
    
    NOTE! We do not support zero-sized packets, and zero-sized reads and
    writes to a pipe continue to be no-ops.  Also note that big packets will
    currently be split at write time, but that the size at which that
    happens is not really specified (except that it's bigger than PIPE_BUF).
    Currently that limit is the system page size, but we might want to
    explicitly support bigger packets some day.
    
    The main user for this is going to be the autofs packet interface,
    allowing us to stop having to care so deeply about exact packet sizes
    (which have had bugs with 32/64-bit compatibility modes).  But user
    space can create packetized pipes with "pipe2(fd, O_DIRECT)", which will
    fail with an EINVAL on kernels that do not support this interface.
    
    Tested-by: Michael Tokarev <mjt@tls.msk.ru>
    Cc: Alan Cox <alan@lxorguk.ukuu.org.uk>
    Cc: David Miller <davem@davemloft.net>
    Cc: Ian Kent <raven@themaw.net>
    Cc: Thomas Meyer <thomas@m3y3r.de>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 72f1409d18618284d29f22823270ad8c370911a0
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Apr 28 08:29:56 2012 -0700

    Revert "autofs: work around unhappy compat problem on x86-64"
    
    commit fcbf94b9dedd2ce08e798a99aafc94fec8668161 upstream.
    
    This reverts commit a32744d4abae24572eff7269bc17895c41bd0085.
    
    While that commit was technically the right thing to do, and made the
    x86-64 compat mode work identically to native 32-bit mode (and thus
    fixing the problem with a 32-bit systemd install on a 64-bit kernel), it
    turns out that the automount binaries had workarounds for this compat
    problem.
    
    Now, the workarounds are disgusting: doing an "uname()" to find out the
    architecture of the kernel, and then comparing it for the 64-bit cases
    and fixing up the size of the read() in automount for those.  And they
    were confused: it's not actually a generic 64-bit issue at all, it's
    very much tied to just x86-64, which has different alignment for an
    'u64' in 64-bit mode than in 32-bit mode.
    
    But the end result is that fixing the compat layer actually breaks the
    case of a 32-bit automount on a x86-64 kernel.
    
    There are various approaches to fix this (including just doing a
    "strcmp()" on current->comm and comparing it to "automount"), but I
    think that I will do the one that teaches pipes about a special "packet
    mode", which will allow user space to not have to care too deeply about
    the padding at the end of the autofs packet.
    
    That change will make the compat workaround unnecessary, so let's revert
    it first, and get automount working again in compat mode.  The
    packetized pipes will then fix autofs for systemd.
    
    Reported-and-requested-by: Michael Tokarev <mjt@tls.msk.ru>
    Cc: Ian Kent <raven@themaw.net>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    [bwh: Backported to 3.2: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit beed6c2e00e0dde6722b590e6a02c20248224c68
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Apr 29 13:12:42 2012 -0700

    pipes: add a "packetized pipe" mode for writing
    
    commit 9883035ae7edef3ec62ad215611cb8e17d6a1a5d upstream.
    
    The actual internal pipe implementation is already really about
    individual packets (called "pipe buffers"), and this simply exposes that
    as a special packetized mode.
    
    When we are in the packetized mode (marked by O_DIRECT as suggested by
    Alan Cox), a write() on a pipe will not merge the new data with previous
    writes, so each write will get a pipe buffer of its own.  The pipe
    buffer is then marked with the PIPE_BUF_FLAG_PACKET flag, which in turn
    will tell the reader side to break the read at that boundary (and throw
    away any partial packet contents that do not fit in the read buffer).
    
    End result: as long as you do writes less than PIPE_BUF in size (so that
    the pipe doesn't have to split them up), you can now treat the pipe as a
    packet interface, where each read() system call will read one packet at
    a time.  You can just use a sufficiently big read buffer (PIPE_BUF is
    sufficient, since bigger than that doesn't guarantee atomicity anyway),
    and the return value of the read() will naturally give you the size of
    the packet.
    
    NOTE! We do not support zero-sized packets, and zero-sized reads and
    writes to a pipe continue to be no-ops.  Also note that big packets will
    currently be split at write time, but that the size at which that
    happens is not really specified (except that it's bigger than PIPE_BUF).
    Currently that limit is the system page size, but we might want to
    explicitly support bigger packets some day.
    
    The main user for this is going to be the autofs packet interface,
    allowing us to stop having to care so deeply about exact packet sizes
    (which have had bugs with 32/64-bit compatibility modes).  But user
    space can create packetized pipes with "pipe2(fd, O_DIRECT)", which will
    fail with an EINVAL on kernels that do not support this interface.
    
    Tested-by: Michael Tokarev <mjt@tls.msk.ru>
    Cc: Alan Cox <alan@lxorguk.ukuu.org.uk>
    Cc: David Miller <davem@davemloft.net>
    Cc: Ian Kent <raven@themaw.net>
    Cc: Thomas Meyer <thomas@m3y3r.de>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d25895e8f1e5e29823d373096d8f3d271bf11821
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Apr 28 08:29:56 2012 -0700

    Revert "autofs: work around unhappy compat problem on x86-64"
    
    commit fcbf94b9dedd2ce08e798a99aafc94fec8668161 upstream.
    
    This reverts commit a32744d4abae24572eff7269bc17895c41bd0085.
    
    While that commit was technically the right thing to do, and made the
    x86-64 compat mode work identically to native 32-bit mode (and thus
    fixing the problem with a 32-bit systemd install on a 64-bit kernel), it
    turns out that the automount binaries had workarounds for this compat
    problem.
    
    Now, the workarounds are disgusting: doing an "uname()" to find out the
    architecture of the kernel, and then comparing it for the 64-bit cases
    and fixing up the size of the read() in automount for those.  And they
    were confused: it's not actually a generic 64-bit issue at all, it's
    very much tied to just x86-64, which has different alignment for an
    'u64' in 64-bit mode than in 32-bit mode.
    
    But the end result is that fixing the compat layer actually breaks the
    case of a 32-bit automount on a x86-64 kernel.
    
    There are various approaches to fix this (including just doing a
    "strcmp()" on current->comm and comparing it to "automount"), but I
    think that I will do the one that teaches pipes about a special "packet
    mode", which will allow user space to not have to care too deeply about
    the padding at the end of the autofs packet.
    
    That change will make the compat workaround unnecessary, so let's revert
    it first, and get automount working again in compat mode.  The
    packetized pipes will then fix autofs for systemd.
    
    Reported-and-requested-by: Michael Tokarev <mjt@tls.msk.ru>
    Cc: Ian Kent <raven@themaw.net>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7de43e0010642025df683878f24e318ebb600ede
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Apr 29 13:12:42 2012 -0700

    pipes: add a "packetized pipe" mode for writing
    
    commit 9883035ae7edef3ec62ad215611cb8e17d6a1a5d upstream.
    
    The actual internal pipe implementation is already really about
    individual packets (called "pipe buffers"), and this simply exposes that
    as a special packetized mode.
    
    When we are in the packetized mode (marked by O_DIRECT as suggested by
    Alan Cox), a write() on a pipe will not merge the new data with previous
    writes, so each write will get a pipe buffer of its own.  The pipe
    buffer is then marked with the PIPE_BUF_FLAG_PACKET flag, which in turn
    will tell the reader side to break the read at that boundary (and throw
    away any partial packet contents that do not fit in the read buffer).
    
    End result: as long as you do writes less than PIPE_BUF in size (so that
    the pipe doesn't have to split them up), you can now treat the pipe as a
    packet interface, where each read() system call will read one packet at
    a time.  You can just use a sufficiently big read buffer (PIPE_BUF is
    sufficient, since bigger than that doesn't guarantee atomicity anyway),
    and the return value of the read() will naturally give you the size of
    the packet.
    
    NOTE! We do not support zero-sized packets, and zero-sized reads and
    writes to a pipe continue to be no-ops.  Also note that big packets will
    currently be split at write time, but that the size at which that
    happens is not really specified (except that it's bigger than PIPE_BUF).
    Currently that limit is the system page size, but we might want to
    explicitly support bigger packets some day.
    
    The main user for this is going to be the autofs packet interface,
    allowing us to stop having to care so deeply about exact packet sizes
    (which have had bugs with 32/64-bit compatibility modes).  But user
    space can create packetized pipes with "pipe2(fd, O_DIRECT)", which will
    fail with an EINVAL on kernels that do not support this interface.
    
    Tested-by: Michael Tokarev <mjt@tls.msk.ru>
    Cc: Alan Cox <alan@lxorguk.ukuu.org.uk>
    Cc: David Miller <davem@davemloft.net>
    Cc: Ian Kent <raven@themaw.net>
    Cc: Thomas Meyer <thomas@m3y3r.de>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 967174faed55cea3a0b0d86dbe5349a8c200b30b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Apr 28 08:29:56 2012 -0700

    Revert "autofs: work around unhappy compat problem on x86-64"
    
    commit fcbf94b9dedd2ce08e798a99aafc94fec8668161 upstream.
    
    This reverts commit a32744d4abae24572eff7269bc17895c41bd0085.
    
    While that commit was technically the right thing to do, and made the
    x86-64 compat mode work identically to native 32-bit mode (and thus
    fixing the problem with a 32-bit systemd install on a 64-bit kernel), it
    turns out that the automount binaries had workarounds for this compat
    problem.
    
    Now, the workarounds are disgusting: doing an "uname()" to find out the
    architecture of the kernel, and then comparing it for the 64-bit cases
    and fixing up the size of the read() in automount for those.  And they
    were confused: it's not actually a generic 64-bit issue at all, it's
    very much tied to just x86-64, which has different alignment for an
    'u64' in 64-bit mode than in 32-bit mode.
    
    But the end result is that fixing the compat layer actually breaks the
    case of a 32-bit automount on a x86-64 kernel.
    
    There are various approaches to fix this (including just doing a
    "strcmp()" on current->comm and comparing it to "automount"), but I
    think that I will do the one that teaches pipes about a special "packet
    mode", which will allow user space to not have to care too deeply about
    the padding at the end of the autofs packet.
    
    That change will make the compat workaround unnecessary, so let's revert
    it first, and get automount working again in compat mode.  The
    packetized pipes will then fix autofs for systemd.
    
    Reported-and-requested-by: Michael Tokarev <mjt@tls.msk.ru>
    Cc: Ian Kent <raven@themaw.net>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b615b57a124a4af7b68196bc2fb8acc236041fa2
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Wed May 2 09:52:12 2012 +0100

    drm/i915: Support pageflipping interrupts for all 3-pipes on IVB
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Reviewed-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Signed-Off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit e04c735029bc133466b89265a0745a226d0eac23
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Wed May 2 20:43:56 2012 +0100

    drm/i915: Wait for the clocks to stabilise before updating PLLs
    
    When initialising the PLL registers we may have to clear existing state
    from the BIOS - that is the PLL may already be enabled. So we need to
    disable it, wait for the clocks to settle and then rewrite it.
    
    The issue came to light when Ben tested
    
    commit 88ca4bb7974277793e602d88739d4e8f56b89e64
    Author: Jesse Barnes <jbarnes@virtuousgeek.org>
    Date:   Fri Apr 20 17:11:53 2012 +0100
    
        drm/i915: manage PCH PLLs separately from pipes
    
    and found that booting into a VGA monitor was no longer working. Closer
    inspection suggests that it was a pre-existing bug now being hit by the
    rearranged code. Perhaps Ben was not even the first person to stumble
    upon this bug, https://bugs.freedesktop.org/show_bug.cgi?id=37029.
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Reported-and-Tested-by: Ben Widawsky <ben@bwidawsk.net>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 7001f22f7c96bfcaa7d043dbb75b12c27880607d
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Mon Apr 30 19:17:35 2012 +0100

    drm/i915: Remove unused dev_priv->vblank_pipe
    
    vblank_pipe was intended to be used for tracking DRI1 state. However,
    the vblank_pipe reported to DRI1 is fixed to umask both pipes, and the
    dev_priv->vblank_pipe unused and superfluous.
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit ee7b9f93fd96a72e5d09e2b44024c11880873c6b
Author: Jesse Barnes <jbarnes@virtuousgeek.org>
Date:   Fri Apr 20 17:11:53 2012 +0100

    drm/i915: manage PCH PLLs separately from pipes
    
    PCH PLLs aren't required for outputs on the CPU, so we shouldn't just
    treat them as part of the pipe.
    
    So split the code out and manage PCH PLLs separately, allocating them
    when needed or trying to re-use existing PCH PLL setups when the timings
    match.
    
    v2: add num_pch_pll field to dev_priv (Daniel)
        don't NULL the pch_pll pointer in disable or DPMS will fail (Jesse)
        put register offsets in pll struct (Chris)
    
    v3: Decouple enable/disable of PLLs from get/put.
    v4: Track temporary PLL disabling during modeset
    v5: Tidy PLL initialisation by only checking for num_pch_pll == 0 (Eugeni)
    v6: Avoid mishandling allocation failure by embedding the small array of
        PLLs into the device struct
    
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=44309
    Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org> (up to v2)
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk> (v3+)
    Reviewed-by: Eugeni Dodonov <eugeni.dodonov@intel.com>
    Tested-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Reviewed-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 9883035ae7edef3ec62ad215611cb8e17d6a1a5d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Apr 29 13:12:42 2012 -0700

    pipes: add a "packetized pipe" mode for writing
    
    The actual internal pipe implementation is already really about
    individual packets (called "pipe buffers"), and this simply exposes that
    as a special packetized mode.
    
    When we are in the packetized mode (marked by O_DIRECT as suggested by
    Alan Cox), a write() on a pipe will not merge the new data with previous
    writes, so each write will get a pipe buffer of its own.  The pipe
    buffer is then marked with the PIPE_BUF_FLAG_PACKET flag, which in turn
    will tell the reader side to break the read at that boundary (and throw
    away any partial packet contents that do not fit in the read buffer).
    
    End result: as long as you do writes less than PIPE_BUF in size (so that
    the pipe doesn't have to split them up), you can now treat the pipe as a
    packet interface, where each read() system call will read one packet at
    a time.  You can just use a sufficiently big read buffer (PIPE_BUF is
    sufficient, since bigger than that doesn't guarantee atomicity anyway),
    and the return value of the read() will naturally give you the size of
    the packet.
    
    NOTE! We do not support zero-sized packets, and zero-sized reads and
    writes to a pipe continue to be no-ops.  Also note that big packets will
    currently be split at write time, but that the size at which that
    happens is not really specified (except that it's bigger than PIPE_BUF).
    Currently that limit is the system page size, but we might want to
    explicitly support bigger packets some day.
    
    The main user for this is going to be the autofs packet interface,
    allowing us to stop having to care so deeply about exact packet sizes
    (which have had bugs with 32/64-bit compatibility modes).  But user
    space can create packetized pipes with "pipe2(fd, O_DIRECT)", which will
    fail with an EINVAL on kernels that do not support this interface.
    
    Tested-by: Michael Tokarev <mjt@tls.msk.ru>
    Cc: Alan Cox <alan@lxorguk.ukuu.org.uk>
    Cc: David Miller <davem@davemloft.net>
    Cc: Ian Kent <raven@themaw.net>
    Cc: Thomas Meyer <thomas@m3y3r.de>
    Cc: stable@kernel.org  # needed for systemd/autofs interaction fix
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit fcbf94b9dedd2ce08e798a99aafc94fec8668161
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Apr 28 08:29:56 2012 -0700

    Revert "autofs: work around unhappy compat problem on x86-64"
    
    This reverts commit a32744d4abae24572eff7269bc17895c41bd0085.
    
    While that commit was technically the right thing to do, and made the
    x86-64 compat mode work identically to native 32-bit mode (and thus
    fixing the problem with a 32-bit systemd install on a 64-bit kernel), it
    turns out that the automount binaries had workarounds for this compat
    problem.
    
    Now, the workarounds are disgusting: doing an "uname()" to find out the
    architecture of the kernel, and then comparing it for the 64-bit cases
    and fixing up the size of the read() in automount for those.  And they
    were confused: it's not actually a generic 64-bit issue at all, it's
    very much tied to just x86-64, which has different alignment for an
    'u64' in 64-bit mode than in 32-bit mode.
    
    But the end result is that fixing the compat layer actually breaks the
    case of a 32-bit automount on a x86-64 kernel.
    
    There are various approaches to fix this (including just doing a
    "strcmp()" on current->comm and comparing it to "automount"), but I
    think that I will do the one that teaches pipes about a special "packet
    mode", which will allow user space to not have to care too deeply about
    the padding at the end of the autofs packet.
    
    That change will make the compat workaround unnecessary, so let's revert
    it first, and get automount working again in compat mode.  The
    packetized pipes will then fix autofs for systemd.
    
    Reported-and-requested-by: Michael Tokarev <mjt@tls.msk.ru>
    Cc: Ian Kent <raven@themaw.net>
    Cc: stable@kernel.org # for 3.3
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 41c73a0d44c902e92397552acce181295eaa448b
Author: Eric Dumazet <edumazet@google.com>
Date:   Sun Apr 22 12:26:16 2012 +0000

    net: speedup skb_splice_bits()
    
    Commit 35f3d14db (pipe: add support for shrinking and growing pipes)
    added a slowdown for splice(socket -> pipe), as we might grow the spd
    used in skb_splice_bits() for each skb we process in splice() syscall.
    
    Its not needed since skb lengths are capped. The default on-stack arrays
    are more than enough.
    
    Use MAX_SKB_FRAGS instead of PIPE_DEF_BUFFERS to describe the reasonable
    limit per skb.
    
    Add coalescing support to help splicing of GRO skbs built from linear
    skbs (linked into frag_list)
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: Tom Herbert <therbert@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c51ed787f6c49de7c2180c0f78e1d0e1360c7e86
Author: Eugeni Dodonov <eugeni.dodonov@intel.com>
Date:   Fri Apr 13 17:08:45 2012 -0300

    drm/i915: haswell has 3 pipes as well
    
    They work differently, but the count is the same.
    
    Reviewed-by: Rodrigo Vivi <rodrigo.vivi@gmail.com>
    Signed-off-by: Eugeni Dodonov <eugeni.dodonov@intel.com>
    Signed-off-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit 609c1e15a44c25f722fb93e18668da30179a172f
Author: Tom Stellard <tstellar@gmail.com>
Date:   Tue Mar 20 17:17:55 2012 -0400

    drm/radeon/kms: add info query for max pipes
    
    The maximum number of pipes is needed by the user space compute
    driver to calculate the number of wavefronts per thread group.
    
    Signed-off-by: Tom Stellard <thomas.stellard@amd.com>
    Signed-off-by: Dave Airlie <airlied@redhat.com>

commit b66848eb85c2a646c852ea4644f43e1a86517245
Author: Rob Clark <rob@ti.com>
Date:   Sun Mar 11 21:11:20 2012 -0500

    staging: drm/omap: avoid multiple planes having same z-order
    
    Multiple video pipes on same output with same z-order is an undefined
    behavior.  Set a unique z-order value based on overlay number/id.
    
    Signed-off-by: Rob Clark <rob@ti.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb5c2d9aaaa26a55e684c175c431df95aa178233
Author: Rob Clark <rob@ti.com>
Date:   Mon Jan 16 12:51:16 2012 -0600

    staging: drm/omap: add drm_plane support
    
    Because framebuffer layer and overlay scanout video pipes are basically
    thing in OMAP display subsystem (the only difference being that the first
    video pipe does not support scaling or YUV formats), much of the CRTC
    code is pulled into the plane implementation, and a private plane object
    is used by the CRTC object.  This avoids code duplication between the
    plane and CRTC.
    
    Signed-off-by: Rob Clark <rob@ti.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 2561d618ffb615f92fe17f0cf6b03f8e5cddb2cb
Author: Stanislav Kinsbursky <skinsbursky@parallels.com>
Date:   Tue Jan 10 17:04:40 2012 +0400

    NFS: remove RPC PipeFS mount point reference from blocklayout routines
    
    This is a cleanup patch. We don't need this reference anymore, because
    blocklayout pipes dentries now creates and destroys in per-net operations and
    on PipeFS mount/umount notification.
    Note that nfs4blocklayout_register_net() now returns 0 instead of -ENOENT in
    case of PipeFS superblock absence. This is ok, because blocklayout pipe dentry
    will be created on PipeFS mount event.
    
    Signed-off-by: Stanislav Kinsbursky <skinsbursky@parallels.com>
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit 627f30668fac12f5bd555a2cc22af2323762fe8d
Author: Stanislav Kinsbursky <skinsbursky@parallels.com>
Date:   Tue Jan 10 17:04:32 2012 +0400

    NFS: blocklayout PipeFS notifier introduced
    
    This patch subscribes blocklayout pipes to RPC pipefs notifications. Notifier
    is registering on blocklayout module load. This notifier callback is
    responsible for creation/destruction of PipeFS blocklayout pipe dentry.
    Note that no locking required in notifier callback because PipeFS superblock
    pointer is passed as an argument from it's creation or destruction routine and
    thus we can be sure about it's validity.
    
    Signed-off-by: Stanislav Kinsbursky <skinsbursky@parallels.com>
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit 4929d1d33fdbe8385cdd49ccd23563e9ff247ff8
Author: Stanislav Kinsbursky <skinsbursky@parallels.com>
Date:   Tue Jan 10 16:13:11 2012 +0400

    NFS: handle NFS idmap pipe PipeFS dentries by network namespace aware routines
    
    This patch makes NFS idmap pipes dentries allocated and destroyed in network
    namespace context by PipeFS network namespace aware routines.
    Network namespace context is obtained from nfs_client structure.
    
    Signed-off-by: Stanislav Kinsbursky <skinsbursky@parallels.com>
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit ad6b134008f4e765dd19976552b929273ae523bd
Author: Stanislav Kinsbursky <skinsbursky@parallels.com>
Date:   Tue Jan 10 16:12:38 2012 +0400

    SUNRPC: fix pipe->ops cleanup on pipe dentry unlink
    
    This patch looks late due to GSS AUTH patches sent already. But it fixes a flaw
    in RPC PipeFS pipes handling.
    I've added this patch in the series, because this series related to pipes. But
    it should be a part of previous series named "SUNPRC: cleanup PipeFS for
    network-namespace-aware users".
    
    Pipe dentry can be created and destroyed many times during pipe life cycle.
    This actually means, that we can't set pipe->ops to NULL in rpc_close_pipes()
    and use this variable as a flag, indicating, that pipe's dentry is unlinking.
    To follow this restriction, this patch replaces "pipe->ops = NULL" assignment
    and checks for NULL with "pipe->dentry = NULL" assignment and checks for
    NULL respectively.
    This patch also removes check for non-NULL pipe->ops (or pipe->dentry) in
    rpc_close_pipes() because it always non-NULL now.
    
    Signed-off-by: Stanislav Kinsbursky <skinsbursky@parallels.com>
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit 80df9d202255071c8ec610a6a3fdca5cac69f7bd
Author: Stanislav Kinsbursky <skinsbursky@parallels.com>
Date:   Wed Jan 11 19:18:17 2012 +0400

    SUNRPC: subscribe RPC clients to pipefs notifications
    
    This patch subscribes RPC clients to RPC pipefs notifications. RPC clients
    notifier block is registering with pipefs initialization during SUNRPC module
    init.
    This notifier callback is responsible for RPC client PipeFS directory and GSS
    pipes creation. For pipes creation and destruction two additional callbacks
    were added to struct rpc_authops.
    Note that no locking required in notifier callback because PipeFS superblock
    pointer is passed as an argument from it's creation or destruction routine and
    thus we can be sure about it's validity.
    
    Signed-off-by: Stanislav Kinsbursky <skinsbursky@parallels.com>
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit ccdc28f81c91f7ef2dc6c28d27f50264b19e4dd5
Author: Stanislav Kinsbursky <skinsbursky@parallels.com>
Date:   Wed Jan 11 19:18:09 2012 +0400

    SUNRPC: handle GSS AUTH pipes by network namespace aware routines
    
    This patch makes RPC GSS PipeFs pipes allocated in it's RPC client owner
    network namespace context.
    Pipes creation and destruction now done in separated functions, which takes
    care about PipeFS superblock locking.
    
    Signed-off-by: Stanislav Kinsbursky <skinsbursky@parallels.com>
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit 9beae4677de76cfa4ce8899dc8cd1a1cf8cd8332
Author: Stanislav Kinsbursky <skinsbursky@parallels.com>
Date:   Mon Dec 26 15:43:57 2011 +0300

    SUNRPC: cleanup GSS pipes usage
    
    Currently gss auth holds RPC inode pointer which is now redundant since it
    requires only pipes operations which takes private pipe data as an argument.
    Thus this code can be cleaned and all references to RPC inode can be replaced
    with privtae pipe data references.
    
    Signed-off-by: Stanislav Kinsbursky <skinsbursky@parallels.com>
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit d706ed1f50d3f7fae61a177183562179abe8e4bb
Author: Stanislav Kinsbursky <skinsbursky@parallels.com>
Date:   Mon Dec 26 15:43:49 2011 +0300

    SUNPRC: cleanup RPC PipeFS pipes upcall interface
    
    RPC pipe upcall doesn't requires only private pipe data. Thus RPC inode
    references in this code can be removed.
    
    Signed-off-by: Stanislav Kinsbursky <skinsbursky@parallels.com>
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit d0fe13ba9178d3bb78bbd8577bdedc00f76b7a66
Author: Stanislav Kinsbursky <skinsbursky@parallels.com>
Date:   Mon Dec 26 15:43:41 2011 +0300

    SUNRPC: cleanup PipeFS redundant RPC inode usage
    
    This patch removes redundant RPC inode references from PipeFS. These places are
    actually where pipes operations are performed.
    
    Signed-off-by: Stanislav Kinsbursky <skinsbursky@parallels.com>
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit ba9e097593f371ebd102580a0c5b1b2cf55636a0
Author: Stanislav Kinsbursky <skinsbursky@parallels.com>
Date:   Mon Dec 26 15:43:32 2011 +0300

    SUNRPC: split SUNPRC PipeFS pipe data and inode creation
    
    Generally, pipe data is used only for pipes, and thus allocating space for it
    on every RPC inode allocation is redundant. This patch splits private SUNRPC
    PipeFS pipe data and inode, makes pipe data allocated only for pipe inodes.
    This patch is also is a next step towards to to removing PipeFS inode
    references from kernel code other than PipeFS itself.
    
    Signed-off-by: Stanislav Kinsbursky <skinsbursky@parallels.com>
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit 766347bec3490111e1c4482af7c7394868c2aed1
Author: Stanislav Kinsbursky <skinsbursky@parallels.com>
Date:   Mon Dec 26 15:43:23 2011 +0300

    SUNRPC: replace inode lock with pipe lock for RPC PipeFS operations
    
    Currenly, inode i_lock is used to provide concurrent access to SUNPRC PipeFS
    pipes. It looks redundant, since now other use of inode is present in most of
    these places and thus can be easely replaced, which will allow to remove most
    of inode references from PipeFS code. This is a first step towards to removing
    PipeFS inode references from kernel code other than PipeFS itself.
    
    Signed-off-by: Stanislav Kinsbursky <skinsbursky@parallels.com>
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit c21a588f35b1c50304e505fad542b3aab0814266
Author: Stanislav Kinsbursky <skinsbursky@parallels.com>
Date:   Mon Dec 26 15:39:39 2011 +0300

    SUNRPC: pipefs per-net operations helper introduced
    
    During per-net pipes creation and destruction we have to make sure, that pipefs
    sb exists for the whole creation/destruction cycle. This is done by using
    special mutex which controls pipefs sb reference on network namespace context.
    Helper consists of two parts: first of them (rpc_get_dentry_net) searches for
    dentry with specified name and returns with mutex taken on success. When pipe
    creation or destructions is completed, caller should release this mutex by
    rpc_put_dentry_net call.
    
    Signed-off-by: Stanislav Kinsbursky <skinsbursky@parallels.com>
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit 90c4e82999c517e0cd00d0782c68d186cb18b784
Author: Stanislav Kinsbursky <skinsbursky@parallels.com>
Date:   Mon Dec 26 15:39:30 2011 +0300

    SUNRPC: put pipefs superblock link on network namespace
    
    We have modules (like, pNFS blocklayout module) which creates pipes on
    rpc_pipefs. Thus we need per-net operations for them. To make it possible we
    require appropriate super block. So we have to put sb link on network namespace
    context. Note, that it's not strongly required to create pipes in per-net
    operations. IOW, if pipefs wasn't mounted yet, that no sb link reference will
    present on network namespace and in this case we need just need to pass through
    pipe creation. Pipe dentry will be created during pipefs mount notification.
    
    Signed-off-by: Stanislav Kinsbursky <skinsbursky@parallels.com>
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit 5bff0386305461021bbef2d958fa0f0151f56a6f
Author: Stanislav Kinsbursky <skinsbursky@parallels.com>
Date:   Tue Nov 8 15:09:19 2011 +0300

    SUNRPC: remove non-exclusive pipe creation from RPC pipefs
    
    This patch-set was created in context of clone of git branch:
    git://git.linux-nfs.org/projects/trondmy/nfs-2.6.git.
    
    v2:
    1) Rebased of current repo state (i.e. all commits were pulled before apply)
    
    I feel it is ready for inclusion if no objections will appear.
    
    SUNRPC pipefs non-exclusive pipe creation code looks obsolete. IOW, as I see
    it, all pipes are creating with unique full path and only once.
    
    Signed-off-by: Stanislav Kinsbursky <skinsbursky@parallels.com>
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit 6b520e0565422966cdf1c3759bd73df77b0f248c
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Mon Dec 12 15:51:45 2011 -0500

    vfs: fix the stupidity with i_dentry in inode destructors
    
    Seeing that just about every destructor got that INIT_LIST_HEAD() copied into
    it, there is no point whatsoever keeping this INIT_LIST_HEAD in inode_init_once();
    the cost of taking it into inode_init_always() will be negligible for pipes
    and sockets and negative for everything else.  Not to mention the removal of
    boilerplate code from ->destroy_inode() instances...
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit d70ef97baf048412c395bb5d65791d8fe133a52b
Author: Pavel Emelyanov <xemul@parallels.com>
Date:   Mon Oct 31 17:10:04 2011 -0700

    fs/pipe.c: add ->statfs callback for pipefs
    
    Currently a statfs on a pipe's /proc/<pid>/fd/ link returns -ENOSYS.  Wire
    pipfs up so that the statfs succeeds.
    
    This is required by checkpoint-restart in the userspace to make it
    possible to distinguish pipes from fifos.
    
    When we dump information about task's open files we use the /proc/pid/fd
    directoy's symlinks and the fact that opening any of them gives us exactly
    the same dentry->inode pair as the original process has.  Now if a task
    we're dumping has opened pipe and fifo we need to detect this and act
    accordingly.  Knowing that an fd with type S_ISFIFO resides on a pipefs is
    the most precise way.
    
    Signed-off-by: Pavel Emelyanov <xemul@parallels.com>
    Reviewed-by: Tejun Heo <tj@kernel.org>
    Acked-by: Serge Hallyn <serge.hallyn@canonical.com>
    Signed-off-by: Cyrill Gorcunov <gorcunov@openvz.org>
    Cc: Al Viro <viro@ZenIV.linux.org.uk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 9b553f72869584cc14d5724fbbc09f88de0f08de
Merge: c5c42360bc1c 82d165557ef0
Author: Dave Airlie <airlied@redhat.com>
Date:   Mon Oct 24 05:48:39 2011 +0100

    Merge branch 'drm-intel-next' of git://people.freedesktop.org/~keithp/linux into drm-core-next
    
    * 'drm-intel-next' of git://people.freedesktop.org/~keithp/linux: (72 commits)
      drm/i915/dp: Fix eDP on PCH DP on CPT/PPT
      drm/i915/dp: Introduce is_cpu_edp()
      drm/i915: use correct SPD type value
      drm/i915: fix ILK+ infoframe support
      drm/i915: add DP test request handling
      drm/i915: read full receiver capability field during DP hot plug
      drm/i915/dp: Remove eDP special cases from bandwidth checks
      drm/i915/dp: Fix the math in intel_dp_link_required
      drm/i915/panel: Always record the backlight level again (but cleverly)
      i915: Move i915_read/write out of line
      drm/i915: remove transcoder PLL mashing from mode_set per specs
      drm/i915: if transcoder disable fails, say which
      drm/i915: set watermarks for third pipe on IVB
      drm/i915: export a CPT mode set verification function
      drm/i915: fix transcoder PLL select masking
      drm/i915: fix IVB cursor support
      drm/i915: fix debug output for 3 pipe configs
      drm/i915: add PLL sharing support to handle 3 pipes
      drm/i915: fix PCH PLL assertion check for 3 pipes
      drm/i915: use transcoder select bits on VGA and HDMI on CPT
      ...

commit 4b645f14021871e06ce96c359bbdf0b48248c26e
Author: Jesse Barnes <jbarnes@virtuousgeek.org>
Date:   Wed Oct 12 09:51:31 2011 -0700

    drm/i915: add PLL sharing support to handle 3 pipes
    
    Add two new fields to the intel_crtc struct for 3 pipe support: no_pll
    and use_pll_a.  The no_pll field is only set on the 3rd pipe to indicate
    that it doesn't have a PLL of its own and so shouldn't try to write the
    main PLL regs.  The use_pll_a field controls which PLL pipe 3 will
    share, A or B.  The core code will try to share PLLs with whichever pipe
    has the same timings, rejecting the mode set if none is found.  This
    means that pipe 3 must always be set after one of the other pipes has
    been configured with real PLL settings.
    
    Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Tested-By: Eugeni Dodonov <eugeni.dodonov@intel.com>
    Reviewed-By: Eugeni Dodonov <eugeni.dodonov@intel.com>
    Signed-off-by: Keith Packard <keithp@keithp.com>

commit d3ccbe8670520fc61cbe974c97761b0dfc57f6df
Author: Jesse Barnes <jbarnes@virtuousgeek.org>
Date:   Wed Oct 12 09:27:42 2011 -0700

    drm/i915: fix PCH PLL assertion check for 3 pipes
    
    Add a couple of checks now that we're using the 3rd transcoder:
      1) make sure the transcoder PLL enable bit is set for the transcoder
         in question
      2) when checking actual PLL enable, use the selected PLL number rather
         than the transcoder number (they could be different now)
    
    Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Tested-By: Eugeni Dodonov <eugeni.dodonov@intel.com>
    Reviewed-By: Eugeni Dodonov <eugeni.dodonov@intel.com>
    Signed-off-by: Keith Packard <keithp@keithp.com>

commit 27f8227b1e2b326a9a0995dd9c1f14893c61ee01
Author: Jesse Barnes <jbarnes@virtuousgeek.org>
Date:   Fri Sep 2 12:54:37 2011 -0700

    drm/i915: support 3 pipes on IVB+
    
    Well almost anyway.  IVB has 3 planes, pipes, transcoders, and FDI
    interfaces, but only 2 pipe PLLs.  So two of the pipes must use the same
    pipe timings (e.g. 2 DP plus one other, or two HDMI with the same mode
    and one other, etc.).
    
    Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Tested-By: Eugeni Dodonov <eugeni.dodonov@intel.com>
    Reviewed-By: Eugeni Dodonov <eugeni.dodonov@intel.com>
    Signed-off-by: Keith Packard <keithp@keithp.com>

commit 1b8e94993c4752d98c33903aa836acc15f7e6d5c
Merge: 12ff47e7f5fb 206d440f6403
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Aug 1 13:48:31 2011 -1000

    Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs-2.6
    
    * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs-2.6:
      xfs: Fix build breakage in xfs_iops.c when CONFIG_FS_POSIX_ACL is not set
      VFS: Reorganise shrink_dcache_for_umount_subtree() after demise of dcache_lock
      VFS: Remove dentry->d_lock locking from shrink_dcache_for_umount_subtree()
      VFS: Remove detached-dentry counter from shrink_dcache_for_umount_subtree()
      switch posix_acl_chmod() to umode_t
      switch posix_acl_from_mode() to umode_t
      switch posix_acl_equiv_mode() to umode_t *
      switch posix_acl_create() to umode_t *
      block: initialise bd_super in bdget()
      vfs: avoid call to inode_lru_list_del() if possible
      vfs: avoid taking inode_hash_lock on pipes and sockets
      vfs: conditionally call inode_wb_list_del()
      VFS: Fix automount for negative autofs dentries
      Btrfs: load the key from the dir item in readdir into a fake dentry
      devtmpfs: missing initialialization in never-hit case
      hppfs: missing include

commit f2ee7abf4c40c8e6bffced923a7c01ea2d1f6c97
Author: Eric Dumazet <eric.dumazet@gmail.com>
Date:   Thu Jul 28 06:41:09 2011 +0200

    vfs: avoid taking inode_hash_lock on pipes and sockets
    
    Some inodes (pipes, sockets, ...) are not hashed, no need to take
    contended inode_hash_lock at dismantle time.
    
    nice speedup on SMP machines on socket intensive workloads.
    
    Signed-off-by: Eric Dumazet <eric.dumazet@gmail.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit b12362bdb61a230a67daa77bcd2a11e59b2802e1
Author: Eric Dumazet <eric.dumazet@gmail.com>
Date:   Thu Jul 28 06:11:47 2011 +0200

    vfs: conditionally call inode_wb_list_del()
    
    Some inodes (pipes, sockets, ...) are not in bdi writeback list.
    
    evict() can avoid calling inode_wb_list_del() and its expensive spinlock
    by checking inode i_wb_list being empty or not.
    
    At this point, no other cpu/user can concurrently manipulate this inode
    i_wb_list
    
    Signed-off-by: Eric Dumazet <eric.dumazet@gmail.com>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit a209dfc7b0d94bd6fa94553c097836a2e6d0f0ba
Author: Eric Dumazet <eric.dumazet@gmail.com>
Date:   Tue Jul 26 11:36:34 2011 +0200

    vfs: dont chain pipe/anon/socket on superblock s_inodes list
    
    Workloads using pipes and sockets hit inode_sb_list_lock contention.
    
    superblock s_inodes list is needed for quota, dirty, pagecache and
    fsnotify management. pipe/anon/socket fs are clearly not candidates for
    these.
    
    Signed-off-by: Eric Dumazet <eric.dumazet@gmail.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit a95dfc1e1ce6d50129252d70078813a31ff7cc56
Author: Alan Cox <alan@linux.intel.com>
Date:   Tue Jul 5 15:40:16 2011 +0100

    gma500: move configuration bits into the psb_ops structure
    
    We can stuff things like the number of pipes and the SGX offset away in
    here as well and clean up more conditional code.
    
    Signed-off-by: Alan Cox <alan@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit fafc9929c668f8bae6dd1f109f33a86d2cb3c460
Merge: 0dee0e7fbf44 e8e7a2b8ccfd
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 28 13:14:02 2011 -0700

    Merge branch 'drm-fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/airlied/drm-2.6
    
    * 'drm-fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/airlied/drm-2.6:
      drm/i915: restore only the mode of this driver on lastclose (v2)
      drm/radeon/kms: add info query for tile pipes
      drm/radeon/kms: add missing safe regs for 6xx/7xx
      drm: select FRAMEBUFFER_CONSOLE_PRIMARY if we have FRAMEBUFFER_CONSOLE

commit 6565945b60922211c299968ba66a66617af32c9f
Author: Alex Deucher <alexdeucher@gmail.com>
Date:   Tue Apr 26 13:27:43 2011 -0400

    drm/radeon/kms: add info query for tile pipes
    
    needed by mesa for htile setup.
    
    Signed-off-by: Alex Deucher <alexdeucher@gmail.com>
    Signed-off-by: Dave Airlie <airlied@redhat.com>

commit 25b210371f76ac63b30d998549f5f4891d805f3b
Merge: ec616048ea21 5c72d064f7ea
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Apr 21 09:57:13 2011 -0700

    Merge branch 'drm-intel-fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/keithp/linux-2.6
    
    * 'drm-intel-fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/keithp/linux-2.6:
      drm/i915: Initialise g4x watermarks for disabled pipes
      drm/i915: Sanitize the output registers after resume
      drm/i915/tv: Fix modeset flickering introduced in 7f58aabc3
      drm/i915/tv: Only poll for TV connections
      drm/i915/tv: Remember the detected TV type

commit 5c72d064f7ead1126bed6faab0c2bfb7418036e2
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Wed Apr 13 09:28:23 2011 +0100

    drm/i915: Initialise g4x watermarks for disabled pipes
    
    We were using uninitialised watermarks values for disabled pipes which
    were combined into a single WM register and so corrupting the values for
    the enabled pipe and upsetting the display hardware.
    
    Reported-by: Riccardo Magliocchetti <riccardo.magliocchetti@gmail.com>
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=32612
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Keith Packard <keithp@keithp.com>

commit e285c1746accb80620e511f9c72e9893beeedc0e
Merge: 6c5103890057 51eab416c9b4
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Mar 24 17:27:20 2011 -0700

    Merge branch 'drm-core-next' of git://git.kernel.org/pub/scm/linux/kernel/git/airlied/drm-2.6
    
    * 'drm-core-next' of git://git.kernel.org/pub/scm/linux/kernel/git/airlied/drm-2.6:
      drm/vblank: update recently added vbl interface to be more future proof.
      drm radeon: Return -EINVAL on wrong pm sysfs access
      drm/radeon/kms: fix hardcoded EDID handling
      Revert "drm/i915: Don't save/restore hardware status page address register"
      drm/i915: Avoid unmapping pages from a NULL address space
      drm/i915: Fix use after free within tracepoint
      drm/i915: Restore missing command flush before interrupt on BLT ring
      drm/i915: Disable pagefaults along execbuffer relocation fast path
      drm/i915: Fix computation of pitch for dumb bo creator
      drm/i915: report correct render clock frequencies on SNB
      drm/i915/dp: Correct the order of deletion for ghost eDP devices
      drm/i915: Fix tiling corruption from pipelined fencing
      drm/i915: Re-enable self-refresh
      drm/i915: Prevent racy removal of request from client list
      drm/i915: skip redundant operations whilst enabling pipes and planes
      drm/i915: Remove surplus POSTING_READs before wait_for_vblank
      drm/radeon/kms: prefer legacy pll algo for tv-out
      drm: check for modesetting on modeset ioctls
      drm/kernel: vblank wait on crtc > 1
      drm: Fix use-after-free in drm_gem_vm_close()

commit 2d370f502ac872dc9b4cd05f9922b260e2874ec1
Merge: 64146f8b2af1 f0c860246472
Author: Dave Airlie <airlied@redhat.com>
Date:   Thu Mar 24 20:21:45 2011 +1000

    Merge remote branch 'intel/drm-intel-fixes' of ../drm-next into drm-core-next
    
    * 'intel/drm-intel-fixes' of ../drm-next:
      Revert "drm/i915: Don't save/restore hardware status page address register"
      drm/i915: Avoid unmapping pages from a NULL address space
      drm/i915: Fix use after free within tracepoint
      drm/i915: Restore missing command flush before interrupt on BLT ring
      drm/i915: Disable pagefaults along execbuffer relocation fast path
      drm/i915: Fix computation of pitch for dumb bo creator
      drm/i915: report correct render clock frequencies on SNB
      drm/i915/dp: Correct the order of deletion for ghost eDP devices
      drm/i915: Fix tiling corruption from pipelined fencing
      drm/i915: Re-enable self-refresh
      drm/i915: Prevent racy removal of request from client list
      drm/i915: skip redundant operations whilst enabling pipes and planes
      drm/i915: Remove surplus POSTING_READs before wait_for_vblank

commit 00d70b15125030391d17baab2c2f70f93b3339a6
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Thu Mar 17 07:18:29 2011 +0000

    drm/i915: skip redundant operations whilst enabling pipes and planes
    
    If the pipe or plane is already enabled, then we do not need to enable
    it again and can skip the delay. Similarly if it is already disabled
    when we want to disable it, we can also skip it.
    
    This fixes a regression from b24e717988, which caused the LVDS
    output on one PineView machine to become corrupt after changing
    orientation several times.
    
    References: https://bugs.freedesktop.org/show_bug.cgi?id=34601
    Cc: Jesse Barnes <jbarnes@virtuousgeek.org>
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Reviewed-by: Keith Packard <keithp@keithp.com>
    Tested-by: mengmeng.meng@intel.com

commit 19ec135838f032ad1aa0610b173ad78c16d53d47
Author: Jesse Barnes <jbarnes@virtuousgeek.org>
Date:   Wed Feb 2 12:28:02 2011 -0800

    drm/i915: don't check plane vs pipe enable on ILK+
    
    These bits have a different meaning on ILK+, where planes are hardwired
    to pipes.  Fixing this avoid some spurious assertion failures.
    
    Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>

commit 0dc79fb2a36efcadbb39bd8b28933d8aa40408b1
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Wed Jan 5 10:32:24 2011 +0000

    drm/i915: Make the ring IMR handling private
    
    As the IMR for the USER interrupts are not modified elsewhere, we can
    separate the spinlock used for these from that of hpd and pipestats.
    Those two IMR are manipulated under an IRQ and so need heavier locking.
    
    Reported-and-tested-by: Alexey Fisher <bug-track@fisher-privat.net>
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>

commit 23076bfefeb871c22c40f8abad5b5ea7065a265f
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Nov 28 14:09:57 2010 -0800

    Export 'get_pipe_info()' to other users
    
    commit c66fb347946ebdd5b10908866ecc9fa05ee2cf3d upstream.
    
    And in particular, use it in 'pipe_fcntl()'.
    
    The other pipe functions do not need to use the 'careful' version, since
    they are only ever called for things that are already known to be pipes.
    
    The normal read/write/ioctl functions are called through the file
    operations structures, so if a file isn't a pipe, they'd never get
    called.  But pipe_fcntl() is special, and called directly from the
    generic fcntl code, and needs to use the same careful function that the
    splice code is using.
    
    Cc: Jens Axboe <jaxboe@fusionio.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Dave Jones <davej@redhat.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
    Signed-off-by: Andi Kleen <ak@linux.intel.com>

commit de6b16236165008032ee3ed7db24b9ad9600e0eb
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Nov 28 14:09:57 2010 -0800

    Export 'get_pipe_info()' to other users
    
    commit c66fb347946ebdd5b10908866ecc9fa05ee2cf3d upstream.
    
    And in particular, use it in 'pipe_fcntl()'.
    
    The other pipe functions do not need to use the 'careful' version, since
    they are only ever called for things that are already known to be pipes.
    
    The normal read/write/ioctl functions are called through the file
    operations structures, so if a file isn't a pipe, they'd never get
    called.  But pipe_fcntl() is special, and called directly from the
    generic fcntl code, and needs to use the same careful function that the
    splice code is using.
    
    Cc: Jens Axboe <jaxboe@fusionio.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Dave Jones <davej@redhat.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 47f1c6c9ffdec0c0e5a2c2709bd63c7380b325c4
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Fri Dec 3 15:37:31 2010 +0000

    drm/i915: Clean conflicting modesetting registers upon init
    
    If we leave the registers in a conflicting state then when we attempt
    to teardown the active mode, we will not disable the pipes and planes
    in the correct order -- leaving a plane reading from a disabled pipe and
    possibly leading to undefined behaviour.
    
    Reported-and-tested-by: Andy Whitcroft <apw@canonical.com>
    Bugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=32078
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Cc: stable@kernel.org

commit c66fb347946ebdd5b10908866ecc9fa05ee2cf3d
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Nov 28 14:09:57 2010 -0800

    Export 'get_pipe_info()' to other users
    
    And in particular, use it in 'pipe_fcntl()'.
    
    The other pipe functions do not need to use the 'careful' version, since
    they are only ever called for things that are already known to be pipes.
    
    The normal read/write/ioctl functions are called through the file
    operations structures, so if a file isn't a pipe, they'd never get
    called.  But pipe_fcntl() is special, and called directly from the
    generic fcntl code, and needs to use the same careful function that the
    splice code is using.
    
    Cc: Jens Axboe <jaxboe@fusionio.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Dave Jones <davej@redhat.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 490b3f4eacab3220383d2db49255a73995ecdf25
Author: Rajkumar Manoharan <rmanoharan@atheros.com>
Date:   Mon Nov 8 12:49:12 2010 +0530

    ath9k_htc: Fix probe failure if CONFIG_USB_DEBUG enabled
    
    Since the endpoint descriptors (EP3 & EP4) were changed from Interrupt
    to Bulk type by firmware, the urb submission done on Bulk pipes.
    And the recent commit "check the endpoint type against the pipe type"
    added aditional error checking against pipe types under CONFIG_USB_DEBUG.
    
    So bmAttribute has to be updated for both EP3 & EP4 before submitting
    urbs on that pipe. This patch resolves the following failure.
    
    [ 2215.710936] usb 1-1: usb_probe_device
    [ 2215.710945] usb 1-1: configuration #1 chosen from 1 choice
    [ 2215.711152] usb 1-1: adding 1-1:1.0 (config #1, interface 0)
    [ 2215.711252] ath9k_hif_usb 1-1:1.0: usb_probe_interface
    [ 2215.711255] ath9k_hif_usb 1-1:1.0: usb_probe_interface - got id
    [ 2215.712780] usb 1-1: BOGUS urb xfer, pipe 3 != type 1
    [ 2215.713782] usb 1-1: ath9k_htc: Unable to allocate URBs
    [ 2215.713801] ath9k_hif_usb: probe of 1-1:1.0 failed with error -22
    
    Reported-by: Ming Lei <tom.leiming@gmail.com>
    Signed-off-by: Rajkumar Manoharan <rmanoharan@atheros.com>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit 6c2754c28f2388a276fe21edde826f2113c8f60e
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Oct 23 08:14:12 2010 -0700

    Revert "tty: Add a new file /proc/tty/consoles"
    
    This reverts commit f4a3e0bceb57466c31757f25e4e0ed108d1299ec.  Jiri
    Sladby points out that the tty structure we're using may already be
    gone, and Al Viro doesn't hold back in complaining about the random
    loading of 'filp->private_data' which doesn't have to be a pointer at
    all, nor does checking the magic field for TTY_MAGIC prove anything.
    
    Belated review by Al:
    
     "a) global variable depending on stdin of the last opener? Affecting
         output of read(2)? Really?
    
      b) iterator is broken; list should be locked in ->start(), unlocked in
         ->stop() and *NOT* unlocked/relocked in ->next()
    
      c) ->show() ought to do nothing in case of ->device == NULL, instead
         of skipping those in ->next()/->start()
    
      d) regardless of the merits of the bright idea about asterisk at that
         line in output *and* regardless of (a), the implementation is not
         only atrociously ugly, it's actually very likely to be a roothole.
         Verifying that Cthulhu knows what number happens to be address of a
         tty_struct by blindly dereferencing memory at that address...
         Ouch.
    
      Please revert that crap."
    
    And Christoph pipes in and NAK's the approach of walking fd tables etc
    too.  So it's pretty unanimous.
    
    Noticed-by: Jri Slaby <jslaby@suse.cz>
    Requested-by: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Greg Kroah-Hartman <gregkh@suse.de>
    Cc: Werner Fink <werner@suse.de>
    Cc: Alan Cox <alan@lxorguk.ukuu.org.uk>
    Cc: Christoph Hellwig <hch@infradead.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 5c5313c8db9bfb549e080fc4cb0a4c3c2aa7a73d
Author: Jesse Barnes <jbarnes@virtuousgeek.org>
Date:   Thu Oct 7 16:01:11 2010 -0700

    drm/i915: fix CPU vs PCH eDP confusion
    
    FDI training needs to done and idle for PCH eDP and before we turn the
    pipes on, and various eDP checks need to account for PCH attached eDP.
    
    Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>

commit 6482f554e2b9cbe733d63124765104f29cf0c9ad
Author: Rémi Denis-Courmont <remi.denis-courmont@nokia.com>
Date:   Wed Sep 15 12:19:53 2010 +0000

    Phonet: remove dangling pipe if an endpoint is closed early
    
    Closing a pipe endpoint is not normally allowed by the Phonet pipe,
    other than as a side after-effect of removing the pipe between two
    endpoints. But there is no way to prevent Linux userspace processes
    from being killed or suffering from bugs, so this can still happen.
    We might as well forcefully close Phonet pipe endpoints then.
    
    The cellular modem supports only a few existing pipes at a time. So we
    really should not leak them. This change instructs the modem to destroy
    the pipe if either of the pipe's endpoint (Linux socket) is closed too
    early.
    
    Signed-off-by: Rémi Denis-Courmont <remi.denis-courmont@nokia.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e65d9305f528d4f354378690135ee8d1c60ec0a5
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Mon Sep 13 16:58:39 2010 +0100

    drm/i915: Initialize intel_crtc->active
    
    Fix a regression in the previous regression fix...
    
    In order to turn off the pipes entirely upon the first modeset, we
    pretend that BIOS (or earlier module incarnation) left them active.
    The first task performed by setup_initial_configuration() is to disable
    all pipes and so to avoid skipping that step and so to ensure a known
    configuration we need to mark all the crtcs as active.
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>

commit d240f20f545fa4ed78ce48d1eb62ab529f2b1467
Author: Jesse Barnes <jbarnes@virtuousgeek.org>
Date:   Fri Aug 13 15:43:26 2010 -0700

    drm/i915: make sure eDP PLL is enabled at the right time
    
    We need to make sure the eDP PLL is enabled before the pipes or planes,
    so do it as part of the DP prepare mode set function.
    
    Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>

commit 2bff8ebf32a7c5ec9e5f5eeffef94a8cb622f5f0
Author: Christian Lamparter <chunkeey@googlemail.com>
Date:   Thu Aug 5 01:36:41 2010 +0200

    mac80211: AMPDU rx reorder timeout timer
    
    This patch introduces a new timer, which will release
    queued-up MPDUs from the reorder buffer, whenever
    they've waited for more than HT_RX_REORDER_BUF_TIMEOUT
    (which is at around 100 ms).
    
    The advantage of having a dedicated timer, instead of
    relying on a constant stream of freshly arriving aMPDUs
    to release the old ones, is particularly observable when
    even a small fraction of MPDUs are forever lost at
    low network speeds.
    
    Previously under these circumstances frames would become
    stuck in the reorder buffer and the network stack of both
    HT peers throttled back, instead of revving up and
    gunning the pipes.
    
    Signed-off-by: Christian Lamparter <chunkeey@googlemail.com>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit debcaddcbd92387137b87f2c1c640571753915e0
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Sat Aug 7 11:01:33 2010 +0100

    drm/i915: Update watermarks for Ironlake after dpms changes
    
    Previously, we only remembered to update the watermarks for i9xx, and
    incorrectly assumed that the crtc->enabled flag was valid at that point
    in the dpms cycle.
    
    Note that on my x201s this makes a SR bug on pipe 1 much easier to hit.
    (Since before this patch when disabling pipe 0, we either didn't update
    the watermarks at all, or when we did we still thought we had two pipes
    enabled and so disabled SR.)
    
    References:
    
      Bug 28969 - [Arrandale] Screen flickers, suspect Self-Refresh
      https://bugs.freedesktop.org/show_bug.cgi?id=28969
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Signed-off-by: Eric Anholt <eric@anholt.net>

commit dd3bb14f44a6382de2508ec387c7e5569ad2d4f1
Author: Miklos Szeredi <mszeredi@suse.cz>
Date:   Tue May 25 15:06:06 2010 +0200

    fuse: support splice() writing to fuse device
    
    Allow userspace filesystem implementation to use splice() to write to
    the fuse device.  The semantics of using splice() are:
    
     1) buffer the message header and data in a temporary pipe
     2) with a *single* splice() call move the message from the temporary pipe
        to the fuse device
    
    The READ reply message has the most interesting use for this, since
    now the data from an arbitrary file descriptor (which could be a
    regular file, a block device or a socket) can be tranferred into the
    fuse device without having to go through a userspace buffer.  It will
    also allow zero copy moving of pages.
    
    One caveat is that the protocol on the fuse device requires the length
    of the whole message to be written into the header.  But the length of
    the data transferred into the temporary pipe may not be known in
    advance.  The current library implementation works around this by
    using vmplice to write the header and modifying the header after
    splicing the data into the pipe (error handling omitted):
    
            struct fuse_out_header out;
    
            iov.iov_base = &out;
            iov.iov_len = sizeof(struct fuse_out_header);
            vmsplice(pip[1], &iov, 1, 0);
            len = splice(input_fd, input_offset, pip[1], NULL, len, 0);
            /* retrospectively modify the header: */
            out.len = len + sizeof(struct fuse_out_header);
            splice(pip[0], NULL, fuse_chan_fd(req->ch), NULL, out.len, flags);
    
    This works since vmsplice only saves a pointer to the data, it does
    not copy the data itself.
    
    Since pipes are currently limited to 16 pages and messages need to be
    spliced atomically, the length of the data is limited to 15 pages (or
    60kB for 4k pages).
    
    Signed-off-by: Miklos Szeredi <mszeredi@suse.cz>

commit 6e80e8ed5eb92d0112674aabe82951266a6a1051
Merge: 6969a434737d ee9a3607fb03
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri May 21 15:25:33 2010 -0700

    Merge branch 'for-2.6.35' of git://git.kernel.dk/linux-2.6-block
    
    * 'for-2.6.35' of git://git.kernel.dk/linux-2.6-block: (86 commits)
      pipe: set lower and upper limit on max pages in the pipe page array
      pipe: add support for shrinking and growing pipes
      drbd: This is now equivalent to drbd release 8.3.8rc1
      drbd: Do not free p_uuid early, this is done in the exit code of the receiver
      drbd: Null pointer deref fix to the large "multi bio rewrite"
      drbd: Fix: Do not detach, if a bio with a barrier fails
      drbd: Ensure to not trigger late-new-UUID creation multiple times
      drbd: Do not Oops when C_STANDALONE when uuid gets generated
      writeback: fix mixed up arguments to bdi_start_writeback()
      writeback: fix problem with !CONFIG_BLOCK compilation
      block: improve automatic native capacity unlocking
      block: use struct parsed_partitions *state universally in partition check code
      block,ide: simplify bdops->set_capacity() to ->unlock_native_capacity()
      block: restart partition scan after resizing a device
      buffer: make invalidate_bdev() drain all percpu LRU add caches
      block: remove all rcu head initializations
      writeback: fixups for !dirty_writeback_centisecs
      writeback: bdi_writeback_task() must set task state before calling schedule()
      writeback: ensure that WB_SYNC_NONE writeback with sb pinned is sync
      drivers/block/drbd: Use kzalloc
      ...

commit 35f3d14dbbc58447c61e38a162ea10add6b31dc7
Author: Jens Axboe <jens.axboe@oracle.com>
Date:   Thu May 20 10:43:18 2010 +0200

    pipe: add support for shrinking and growing pipes
    
    This patch adds F_GETPIPE_SZ and F_SETPIPE_SZ fcntl() actions for
    growing and shrinking the size of a pipe and adjusts pipe.c and splice.c
    (and relay and network splice) usage to work with these larger (or smaller)
    pipes.
    
    Signed-off-by: Jens Axboe <jens.axboe@oracle.com>

commit 454c407ec17a0c63e4023ac0877d687945a7df4a
Author: Tom Zanussi <tzanussi@gmail.com>
Date:   Sat May 1 01:41:20 2010 -0500

    perf: add perf-inject builtin
    
    Currently, perf 'live mode' writes build-ids at the end of the
    session, which isn't actually useful for processing live mode events.
    
    What would be better would be to have the build-ids sent before any of
    the samples that reference them, which can be done by processing the
    event stream and retrieving the build-ids on the first hit.  Doing
    that in perf-record itself, however, is off-limits.
    
    This patch introduces perf-inject, which does the same job while
    leaving perf-record untouched.  Normal mode perf still records the
    build-ids at the end of the session as it should, but for live mode,
    perf-inject can be injected in between the record and report steps
    e.g.:
    
    perf record -o - ./hackbench 10 | perf inject -v -b | perf report -v -i -
    
    perf-inject reads a perf-record event stream and repipes it to stdout.
    At any point the processing code can inject other events into the
    event stream - in this case build-ids (-b option) are read and
    injected as needed into the event stream.
    
    Build-ids are just the first user of perf-inject - potentially
    anything that needs userspace processing to augment the trace stream
    with additional information could make use of this facility.
    
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Cc: Frédéric Weisbecker <fweisbec@gmail.com>
    LKML-Reference: <1272696080-16435-3-git-send-email-tzanussi@gmail.com>
    Signed-off-by: Tom Zanussi <tzanussi@gmail.com>
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

commit 6afa5c708e7f6acf6fe5e47262a6e2c95d2deaa3
Author: Neil Horman <nhorman@tuxdriver.com>
Date:   Fri Mar 5 13:44:16 2010 -0800

    coredump: suppress uid comparison test if core output files are pipes
    
    commit 76595f79d76fbe6267a51b3a866a028d150f06d4 upstream.
    
    Modify uid check in do_coredump so as to not apply it in the case of
    pipes.
    
    This just got noticed in testing.  The end of do_coredump validates the
    uid of the inode for the created file against the uid of the crashing
    process to ensure that no one can pre-create a core file with different
    ownership and grab the information contained in the core when they
    shouldn' tbe able to.  This causes failures when using pipes for a core
    dumps if the crashing process is not root, which is the uid of the pipe
    when it is created.
    
    The fix is simple.  Since the check for matching uid's isn't relevant for
    pipes (a process can't create a pipe that the uermodehelper code will open
    anyway), we can just just skip it in the event ispipe is non-zero
    
    Reverts a pipe-affecting change which was accidentally made in
    
    : commit c46f739dd39db3b07ab5deb4e3ec81e1c04a91af
    : Author:     Ingo Molnar <mingo@elte.hu>
    : AuthorDate: Wed Nov 28 13:59:18 2007 +0100
    : Commit:     Linus Torvalds <torvalds@woody.linux-foundation.org>
    : CommitDate: Wed Nov 28 10:58:01 2007 -0800
    :
    :     vfs: coredumping fix
    
    Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
    Cc: Andi Kleen <andi@firstfloor.org>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Alan Cox <alan@lxorguk.ukuu.org.uk>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: maximilian attems <max@stro.at>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit e88e473bf3124044738f44a6e40e4a03a13ecbe7
Author: Neil Horman <nhorman@tuxdriver.com>
Date:   Fri Mar 5 13:44:16 2010 -0800

    coredump: suppress uid comparison test if core output files are pipes
    
    commit 76595f79d76fbe6267a51b3a866a028d150f06d4 upstream.
    
    Modify uid check in do_coredump so as to not apply it in the case of
    pipes.
    
    This just got noticed in testing.  The end of do_coredump validates the
    uid of the inode for the created file against the uid of the crashing
    process to ensure that no one can pre-create a core file with different
    ownership and grab the information contained in the core when they
    shouldn' tbe able to.  This causes failures when using pipes for a core
    dumps if the crashing process is not root, which is the uid of the pipe
    when it is created.
    
    The fix is simple.  Since the check for matching uid's isn't relevant for
    pipes (a process can't create a pipe that the uermodehelper code will open
    anyway), we can just just skip it in the event ispipe is non-zero
    
    Reverts a pipe-affecting change which was accidentally made in
    
    : commit c46f739dd39db3b07ab5deb4e3ec81e1c04a91af
    : Author:     Ingo Molnar <mingo@elte.hu>
    : AuthorDate: Wed Nov 28 13:59:18 2007 +0100
    : Commit:     Linus Torvalds <torvalds@woody.linux-foundation.org>
    : CommitDate: Wed Nov 28 10:58:01 2007 -0800
    :
    :     vfs: coredumping fix
    
    Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
    Cc: Andi Kleen <andi@firstfloor.org>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Alan Cox <alan@lxorguk.ukuu.org.uk>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: maximilian attems <max@stro.at>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit b2f2bf429aa7da6e0c06f38f44583690f1c4dce3
Author: Neil Horman <nhorman@tuxdriver.com>
Date:   Fri Mar 5 13:44:16 2010 -0800

    coredump: suppress uid comparison test if core output files are pipes
    
    commit 76595f79d76fbe6267a51b3a866a028d150f06d4 upstream.
    
    Modify uid check in do_coredump so as to not apply it in the case of
    pipes.
    
    This just got noticed in testing.  The end of do_coredump validates the
    uid of the inode for the created file against the uid of the crashing
    process to ensure that no one can pre-create a core file with different
    ownership and grab the information contained in the core when they
    shouldn' tbe able to.  This causes failures when using pipes for a core
    dumps if the crashing process is not root, which is the uid of the pipe
    when it is created.
    
    The fix is simple.  Since the check for matching uid's isn't relevant for
    pipes (a process can't create a pipe that the uermodehelper code will open
    anyway), we can just just skip it in the event ispipe is non-zero
    
    Reverts a pipe-affecting change which was accidentally made in
    
    : commit c46f739dd39db3b07ab5deb4e3ec81e1c04a91af
    : Author:     Ingo Molnar <mingo@elte.hu>
    : AuthorDate: Wed Nov 28 13:59:18 2007 +0100
    : Commit:     Linus Torvalds <torvalds@woody.linux-foundation.org>
    : CommitDate: Wed Nov 28 10:58:01 2007 -0800
    :
    :     vfs: coredumping fix
    
    Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
    Cc: Andi Kleen <andi@firstfloor.org>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Alan Cox <alan@lxorguk.ukuu.org.uk>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: maximilian attems <max@stro.at>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit cf1322b5bad073b5c39e2915d7cdbb15b6874321
Author: Neil Horman <nhorman@tuxdriver.com>
Date:   Fri Mar 5 13:44:16 2010 -0800

    coredump: suppress uid comparison test if core output files are pipes
    
    commit 76595f79d76fbe6267a51b3a866a028d150f06d4 upstream.
    
    Modify uid check in do_coredump so as to not apply it in the case of
    pipes.
    
    This just got noticed in testing.  The end of do_coredump validates the
    uid of the inode for the created file against the uid of the crashing
    process to ensure that no one can pre-create a core file with different
    ownership and grab the information contained in the core when they
    shouldn' tbe able to.  This causes failures when using pipes for a core
    dumps if the crashing process is not root, which is the uid of the pipe
    when it is created.
    
    The fix is simple.  Since the check for matching uid's isn't relevant for
    pipes (a process can't create a pipe that the uermodehelper code will open
    anyway), we can just just skip it in the event ispipe is non-zero
    
    Reverts a pipe-affecting change which was accidentally made in
    
    : commit c46f739dd39db3b07ab5deb4e3ec81e1c04a91af
    : Author:     Ingo Molnar <mingo@elte.hu>
    : AuthorDate: Wed Nov 28 13:59:18 2007 +0100
    : Commit:     Linus Torvalds <torvalds@woody.linux-foundation.org>
    : CommitDate: Wed Nov 28 10:58:01 2007 -0800
    :
    :     vfs: coredumping fix
    
    Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
    Cc: Andi Kleen <andi@firstfloor.org>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Alan Cox <alan@lxorguk.ukuu.org.uk>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: maximilian attems <max@stro.at>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 76595f79d76fbe6267a51b3a866a028d150f06d4
Author: Neil Horman <nhorman@tuxdriver.com>
Date:   Fri Mar 5 13:44:16 2010 -0800

    coredump: suppress uid comparison test if core output files are pipes
    
    Modify uid check in do_coredump so as to not apply it in the case of
    pipes.
    
    This just got noticed in testing.  The end of do_coredump validates the
    uid of the inode for the created file against the uid of the crashing
    process to ensure that no one can pre-create a core file with different
    ownership and grab the information contained in the core when they
    shouldn' tbe able to.  This causes failures when using pipes for a core
    dumps if the crashing process is not root, which is the uid of the pipe
    when it is created.
    
    The fix is simple.  Since the check for matching uid's isn't relevant for
    pipes (a process can't create a pipe that the uermodehelper code will open
    anyway), we can just just skip it in the event ispipe is non-zero
    
    Reverts a pipe-affecting change which was accidentally made in
    
    : commit c46f739dd39db3b07ab5deb4e3ec81e1c04a91af
    : Author:     Ingo Molnar <mingo@elte.hu>
    : AuthorDate: Wed Nov 28 13:59:18 2007 +0100
    : Commit:     Linus Torvalds <torvalds@woody.linux-foundation.org>
    : CommitDate: Wed Nov 28 10:58:01 2007 -0800
    :
    :     vfs: coredumping fix
    
    Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
    Cc: Andi Kleen <andi@firstfloor.org>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Alan Cox <alan@lxorguk.ukuu.org.uk>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 815e173e1d71742f1135fb4d4931e8115a3ca0ef
Author: Jason Wessel <jason.wessel@windriver.com>
Date:   Fri Feb 5 11:49:05 2010 -0600

    USB: ehci-dbgp: split PID register updates for IN and OUT pipes
    
    This patch addresses two problems:
    
    1) Bulk reads should always use the DATA0 for the pid, and the write
       PID should toggle between DATA0 and DATA1.  The fix is using
       dbgp_pid_write_update() and dbgp_pid_read_update().
    
    2) The delay loop for waiting for a transaction was not long enough to
       always complete the initial handshake inside dbgp_wait_until_done().
       After the initial handshake the maximum delay length is never reached.
    
    The combined result of these two changes allows for the removal of the
    forced resynchronization where a bulk write was issued with a dummy
    data payload only to get the device to start accepting data writes
    again.
    
    CC: Eric Biederman <ebiederm@xmission.com>
    CC: Yinghai Lu <yhlu.kernel@gmail.com>
    Signed-off-by: Jason Wessel <jason.wessel@windriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit cfbd646fe060f70fe6618be2f9c25f739c067e29
Author: Krzysztof Helt <krzysztof.h1@wp.pl>
Date:   Tue Dec 15 16:46:45 2009 -0800

    intelfb: fix setting of active pipe with LVDS displays
    
    The intelfb driver sets color map depending on currently active pipe.
    However, if an LVDS display is attached (like in laptop) the active pipe
    variable is never set.  The default value is PIPE_A and can be wrong.  Set
    up the pipe variable during driver initialization after hardware state was
    read.
    
    Also, the detection of the active display (and hence the pipe) is wrong.
    The pipes are assigned to so called planes.  Both pipes are always enabled
    on my laptop but only one plane is enabled (the plane A for the CRT or the
    plane B for the LVDS).  Change active pipe detection code to take into
    account a status of the plane assigned to each pipe.
    
    The problem is visible in the 8 bpp mode if colors above 15 are used.  The
    first 16 color entries are displayed correctly.
    
    The graphics chip description is here (G45 vol. 3):
    http://intellinuxgraphics.org/documentation.html
    
    Addresses http://bugzilla.kernel.org/show_bug.cgi?id=13285
    
    Signed-off-by: Krzysztof Helt <krzysztof.h1@wp.pl>
    Cc: Michal Suchanek <hramrach@centrum.cz>
    Cc: Dean Menezes <samanddeanus@yahoo.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 92608badc519a8c1f65d93743396517aaa582b53
Author: Wu Fengguang <fengguang.wu@intel.com>
Date:   Fri Oct 30 11:40:03 2009 +0100

    ALSA: hda - allow up to 4 HDMI devices
    
    The new Intel HDMI codec supports 2 independant HDMI/DisplayPort pipes.
    We'll be exporting them as 2 pcm devices. So bump up the allowed number
    of HDMI devices.
    
    Signed-off-by: Wu Fengguang <fengguang.wu@intel.com>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit c2315b4ea9ac9c3f8caf03c3511d86fabe4a5fcd
Author: Inaky Perez-Gonzalez <inaky@linux.intel.com>
Date:   Wed Sep 16 17:10:55 2009 -0700

    wimax/i2400m: clarify and fix i2400m->{ready,updown}
    
    The i2400m driver uses two different bits to distinguish how much the
    driver is up. i2400m->ready is used to denote that the infrastructure
    to communicate with the device is up and running. i2400m->updown is
    used to indicate if 'ready' and the device is up and running, ready to
    take control and data traffic.
    
    However, all this was pretty dirty and not clear, with many open spots
    where race conditions were present.
    
    This commit cleans up the situation by:
    
     - documenting the usage of both bits
    
     - setting them only in specific, well controlled places
       (i2400m_dev_start, i2400m_dev_stop)
    
     - ensuring the i2400m workqueue can't get in the middle of the
       setting by flushing it when i2400m->ready is set to zero. This
       allows the report hook not having to check again for the bit to be
       set [rx.c:i2400m_report_hook_work()].
    
     - using i2400m->updown to determine if the device is up and running
       instead of the wimax state in i2400m_dev_reset_handle().
    
     - not loosing missed messages sent by the hardware before
       i2400m->ready is set. In rx.c, whatever the device sends can be
       sent to user space over the message pipes as soon as the wimax
       device is registered, so don't wait for i2400m->ready to be set.
    
    Signed-off-by: Inaky Perez-Gonzalez <inaky@linux.intel.com>

commit 61be228a06dc6e8662f30e89eda3c12083c1f379
Author: Neil Horman <nhorman@tuxdriver.com>
Date:   Wed Sep 23 15:56:58 2009 -0700

    exec: allow do_coredump() to wait for user space pipe readers to complete
    
    Allow core_pattern pipes to wait for user space to complete
    
    One of the things that user space processes like to do is look at metadata
    for a crashing process in their /proc/<pid> directory.  this is racy
    however, since do_coredump in the kernel doesn't wait for the user space
    process to complete before it reaps the crashing process.  This patch
    corrects that.  Allowing the kernel to wait for the user space process to
    complete before cleaning up the crashing process.  This is a bit tricky to
    do for a few reasons:
    
    1) The user space process isn't our child, so we can't sys_wait4 on it
    2) We need to close the pipe before waiting for the user process to complete,
    since the user process may rely on an EOF condition
    
    I've discussed several solutions with Oleg Nesterov off-list about this,
    and this is the one we've come up with.  We add ourselves as a pipe reader
    (to prevent premature cleanup of the pipe_inode_info), and remove
    ourselves as a writer (to provide an EOF condition to the writer in user
    space), then we iterate until the user space process exits (which we
    detect by pipe->readers == 1, hence the > 1 check in the loop).  When we
    exit the loop, we restore the proper reader/writer values, then we return
    and let filp_close in do_coredump clean up the pipe data properly.
    
    Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
    Reported-by: Earl Chew <earl_chew@agilent.com>
    Cc: Oleg Nesterov <oleg@tv-sign.ru>
    Cc: Andi Kleen <andi@firstfloor.org>
    Cc: Alan Cox <alan@lxorguk.ukuu.org.uk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit a293980c2e261bd5b0d2a77340dd04f684caff58
Author: Neil Horman <nhorman@tuxdriver.com>
Date:   Wed Sep 23 15:56:56 2009 -0700

    exec: let do_coredump() limit the number of concurrent dumps to pipes
    
    Introduce core pipe limiting sysctl.
    
    Since we can dump cores to pipe, rather than directly to the filesystem,
    we create a condition in which a user can create a very high load on the
    system simply by running bad applications.
    
    If the pipe reader specified in core_pattern is poorly written, we can
    have lots of ourstandig resources and processes in the system.
    
    This sysctl introduces an ability to limit that resource consumption.
    core_pipe_limit defines how many in-flight dumps may be run in parallel,
    dumps beyond this value are skipped and a note is made in the kernel log.
    A special value of 0 in core_pipe_limit denotes unlimited core dumps may
    be handled (this is the default value).
    
    [akpm@linux-foundation.org: coding-style fixes]
    Signed-off-by: Neil Horman <nhorman@tuxdriver.com>
    Reported-by: Earl Chew <earl_chew@agilent.com>
    Cc: Oleg Nesterov <oleg@tv-sign.ru>
    Cc: Andi Kleen <andi@firstfloor.org>
    Cc: Alan Cox <alan@lxorguk.ukuu.org.uk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit e87b2c42b397ae64ac13a390011931f7ef222321
Author: Jesse Barnes <jbarnes@virtuousgeek.org>
Date:   Thu Sep 17 18:14:41 2009 -0700

    drm: fix drm_fb_helper handling of kernel crtcs
    
    The drm_fb_helper shouldn't mess with CRTCs that aren't enabled or in
    its initial config. Ideally it shouldn't even include CRTCs in its
    initial config if they're not in use, but my old fix for that no longer
    works.  At any rate, this fixes a real bug I was seeing where after a
    console blank, both pipes would come back on, even though only one had
    been enabled before that.  Since the other pipe had a bogus config,
    this led to some screen corruption.
    
    Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Signed-off-by: Dave Airlie <airlied@redhat.com>

commit 06891e27a9b5dba5268bb80e41a283f51335afe7
Author: Jesse Barnes <jbarnes@virtuousgeek.org>
Date:   Mon Sep 14 10:58:48 2009 -0700

    drm/i915: fix suspend/resume breakage in lid notifier
    
    We now unconditionally restore the mode at lid open time since some
    platforms turn off the panel, pipes or other display elements when the
    lid is closed.  There's a problem with doing this at resume time
    however.
    
    At resume time, we'll get a lid event, but restoring the mode at that
    time may not be safe (e.g. if we get the lid event before global state
    has been restored), so check the suspended state and make sure our
    restore is locked against other mode updates.
    
    Tested-by: Ben Gamari <bgamari.foss@gmail.com>
    Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>

commit 723590ed52d244b025f10a8e2f54c2f57ed02b4d
Author: Miklos Szeredi <mszeredi@suse.cz>
Date:   Sat Aug 15 08:43:22 2009 +0200

    splice: update mtime and atime on files
    
    Splice should update the modification and access times on regular
    files just like read and write. Not updating mtime will confuse
    backup tools, etc...
    
    This patch only adds the time updates for regular files.  For pipes
    and other special files that splice touches the need for updating the
    times is less clear.  Let's discuss and fix that separately.
    
    Signed-off-by: Miklos Szeredi <mszeredi@suse.cz>
    Signed-off-by: Jens Axboe <jens.axboe@oracle.com>

commit c1c7af60892070e4b82ad63bbfb95ae745056de0
Author: Jesse Barnes <jbarnes@virtuousgeek.org>
Date:   Thu Sep 10 15:28:03 2009 -0700

    drm/i915: force mode set at lid open time
    
    Some laptop platforms will disable pipes and/or planes at lid close time
    and not restore them when the lid is opened again.  So catch the lid
    event, and if the lid was opened, force a mode restore.
    
    Fixes fdo bug #21230.
    
    Acked-by: Matthew Garrett <mjg@redhat.com>
    Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Signed-off-by: Eric Anholt <eric@anholt.net>

commit 4dfd79e7b42bff334128907e28c3b41f1ef1cec8
Merge: b57f92157e65 f779b3e51347
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Aug 21 10:45:09 2009 -0700

    Merge branch 'drm-fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/airlied/drm-2.6
    
    * 'drm-fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/airlied/drm-2.6:
      drm/radeon: add GET_PARAM/INFO support for Z pipes
      drm/radeon/kms: add r100/r200 OQ support.
      drm: Fix sysfs device confusion.
      drm/radeon/kms: implement the bo busy ioctl properly.

commit f779b3e513478218cbaaaa0a506d7801cab6fd14
Author: Alex Deucher <alexdeucher@gmail.com>
Date:   Wed Aug 19 19:11:39 2009 -0400

    drm/radeon: add GET_PARAM/INFO support for Z pipes
    
    Needed for occlusion queries on rv530 chips.
    
    Signed-off-by: Alex Deucher <alexdeucher@gmail.com>
    Signed-off-by: Dave Airlie <airlied@redhat.com>

commit ef5ce3b69028ea32aa87e98c9a3802e7c9f824b6
Author: Magnus Damm <damm@igel.co.jp>
Date:   Wed Aug 19 14:19:08 2009 +0000

    usb: r8a66597-udc buffer management update
    
    This patch updates the r8a66597-udc buffer management code.
    
    Use fixed buffers for bulk and isochronous pipes, also make
    sure to handle the isochronous-as-bulk case. With fixed buffers
    there is no need to keep track of used buffers with bi_bufnum.
    
    Also, this fixes a potential buffer offset problem where the
    base offset incorrectly varies with the number of pipes used.
    
    The m66592 driver recently got fixed in a similar way.
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit de4376c2846bb5a8fc6fe8dbd0e4ff30905493e6
Author: Anton Blanchard <anton@samba.org>
Date:   Mon Jul 13 20:53:53 2009 +0000

    powerpc: Preload application text segment instead of TASK_UNMAPPED_BASE
    
    TASK_UNMAPPED_BASE is not used with the new top down mmap layout. We can
    reuse this preload slot by loading in the segment at 0x10000000, where almost
    all PowerPC binaries are linked at.
    
    On a microbenchmark that bounces a token between two 64bit processes over pipes
    and calls gettimeofday each iteration (to access the VDSO), both the 32bit and
    64bit context switch rate improves (tested on a 4GHz POWER6):
    
    32bit: 273k/sec -> 283k/sec
    64bit: 277k/sec -> 284k/sec
    
    Signed-off-by: Anton Blanchard <anton@samba.org>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>

commit 30d0b3682887a81f0335b42f20116fd40d743371
Author: Anton Blanchard <anton@samba.org>
Date:   Mon Jul 13 20:53:51 2009 +0000

    powerpc: Move 64bit VDSO to improve context switch performance
    
    On 64bit applications the VDSO is the only thing in segment 0. Since the VDSO
    is position independent we can remove the hint and let get_unmapped_area pick
    an area. This will mean the vdso will be near other mmaps and will share
    an SLB entry:
    
    10000000-10001000 r-xp 00000000 08:06 5778459        /root/context_switch_64
    10010000-10011000 r--p 00000000 08:06 5778459        /root/context_switch_64
    10011000-10012000 rw-p 00001000 08:06 5778459        /root/context_switch_64
    fffa92ae000-fffa92b0000 rw-p 00000000 00:00 0
    fffa92b0000-fffa9453000 r-xp 00000000 08:06 4334051  /lib64/power6/libc-2.9.so
    fffa9453000-fffa9462000 ---p 001a3000 08:06 4334051  /lib64/power6/libc-2.9.so
    fffa9462000-fffa9466000 r--p 001a2000 08:06 4334051  /lib64/power6/libc-2.9.so
    fffa9466000-fffa947c000 rw-p 001a6000 08:06 4334051  /lib64/power6/libc-2.9.so
    fffa947c000-fffa9480000 rw-p 00000000 00:00 0
    fffa9480000-fffa94a8000 r-xp 00000000 08:06 4333852  /lib64/ld-2.9.so
    fffa94b3000-fffa94b4000 rw-p 00000000 00:00 0
    
    fffa94b4000-fffa94b7000 r-xp 00000000 00:00 0        [vdso] <----- here I am
    
    fffa94b7000-fffa94b8000 r--p 00027000 08:06 4333852  /lib64/ld-2.9.so
    fffa94b8000-fffa94bb000 rw-p 00028000 08:06 4333852  /lib64/ld-2.9.so
    fffa94bb000-fffa94bc000 rw-p 00000000 00:00 0
    fffe4c10000-fffe4c25000 rw-p 00000000 00:00 0        [stack]
    
    On a microbenchmark that bounces a token between two 64bit processes over pipes
    and calls gettimeofday each iteration (to access the VDSO), our context switch
    rate goes from 268k to 277k ctx switches/sec (tested on a 4GHz POWER6).
    
    Signed-off-by: Anton Blanchard <anton@samba.org>
    Signed-off-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>

commit 4048e5ca29afbd747a16245f2bc4d1d521a6d0d0
Author: Magnus Damm <damm@igel.co.jp>
Date:   Fri Jun 26 06:59:17 2009 +0000

    usb: m66592-udc buffer management update
    
    This patch updates the m66592-udc buffer management code.
    
    Use fixed buffers for bulk and isochronous pipes, also make
    sure to handle the isochronous-as-bulk case. With fixed buffers
    there is no need to keep track of used buffers with bi_bufnum.
    
    Also, this fixes a potential buffer offset problem where the
    base offset incorrectly varies with the number of pipes used.
    
    With this patch applied it is possible to use m66592-udc for
    both Ethernet and Serial using CONFIG_USB_CDC_COMPOSITE.
    
    Signed-off-by: Magnus Damm <damm@igel.co.jp>
    Acked-by: Yoshihiro Shimoda <shimoda.yoshihiro@renesas.com>
    Acked-by: Greg Kroah-Hartman <gregkh@suse.de>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 7662c8bd6545c12ac7b2b39e4554c3ba34789c50
Author: Shaohua Li <shaohua.li@intel.com>
Date:   Fri Jun 26 11:23:55 2009 +0800

    drm/i915: add FIFO watermark support
    
    This patch from jbarnes and myself adds FIFO watermark control to the
    driver.  This is needed for both power saving features on new platforms
    with the so-called "big FIFO" and for controlling FIFO allocation
    between pipes in multi-head configurations.
    
    It's also necessary infrastructure to support things like framebuffer
    compression and configuration supportability checks (i.e. checking a
    configuration against available bandwidth).
    
    Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Signed-off-by: Shaohua Li <shaohua.li@intel.com>
    Signed-off-by: Eric Anholt <eric@anholt.net>

commit 051ae7f7344f453616b6b10332d4d8e1d40ed823
Author: Paul Mackerras <paulus@samba.org>
Date:   Mon Jun 29 21:13:21 2009 +1000

    perf_counter tools: Reduce perf stat measurement overhead/skew
    
    Vince Weaver reported a 'perf stat' measurement overhead in the
    count of retired instructions, which can amount to a +6000
    instructions inflated count in the reported count.
    
    At present, perf stat creates its counters on the perf process.  Thus
    the counters count the fork and various other activity in both the
    parent and child, such as the resolver overhead for resolving PLT
    entries for any libc functions that haven't been called before, such
    as execvp.
    
    This reduces the overhead by creating the counters on the child process
    after the fork, using a couple of pipes to synchronize so that the
    child process waits until the parent has created the counters before
    doing the exec.  To eliminate the PLT resolution overhead on calling
    execvp, this does a dummy execvp first which will always fail.
    
    With this, the overhead of executing a program goes down from over
    4800 instructions to about 90 instructions on powerpc (32-bit).
    This was measured with a statically-linked program written in
    assembler which only does the 3 instructions needed to call _exit(0).
    
    Before:
    
    $ perf stat -e 0:1:u ./three
    
     Performance counter stats for './three':
    
               4858  instructions
    
        0.001274523  seconds time elapsed
    
    After:
    
    $ perf stat -e 0:1:u ./three
    
     Performance counter stats for './three':
    
                 92  instructions
    
        0.000468153  seconds time elapsed
    
    Reported-by: Vince Weaver <vince@deater.net>
    Signed-off-by: Paul Mackerras <paulus@samba.org>
    Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
    LKML-Reference: <19016.41425.814043.870352@cargo.ozlabs.ibm.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

commit c9fb15f60eb517c958dec64dca9357bf62bf2201
Author: Keith Packard <keithp@keithp.com>
Date:   Sat May 30 20:42:28 2009 -0700

    drm: Hook up DPMS property handling in drm_crtc.c. Add drm_helper_connector_dpms.
    
    Making the drm_crtc.c code recognize the DPMS property and invoke the
    connector->dpms function doesn't remove any capability from the driver while
    reducing code duplication.
    
    That just highlighted the problem with the existing DPMS functions which
    could turn off the connector, but failed to turn off any relevant crtcs. The
    new drm_helper_connector_dpms function manages all of that, using the
    drm_helper-specific crtc and encoder dpms functions, automatically computing
    the appropriate DPMS level for each object in the system.
    
    This fixes the current troubles in the i915 driver which left PLLs, pipes
    and planes running while in DPMS_OFF mode or even while they were unused.
    
    Signed-off-by: Keith Packard <keithp@keithp.com>
    Signed-off-by: Dave Airlie <airlied@redhat.com>

commit 2b1ccc0ee918a653d0483fdad9dd6112ce8e9043
Author: Jens Axboe <jens.axboe@oracle.com>
Date:   Tue May 12 11:11:48 2009 +0200

    splice: fix misleading comment
    
    Splice is tied to pipes by design, it'll not change. And now that
    the splice stuff is in splice.h (and note pipe.h), the rest of the comment
    is out-of-date as well.
    
    Signed-off-by: Jens Axboe <jens.axboe@oracle.com>

commit 7c77f0b3f9208c339a4b40737bb2cb0f0319bb8d
Author: Miklos Szeredi <miklos@szeredi.hu>
Date:   Thu May 7 15:37:35 2009 +0200

    splice: implement pipe to pipe splicing
    
    Allow splice(2) to work when both the input and the output is a pipe.
    
    Based on the impementation of the tee(2) syscall, but instead of
    duplicating the buffer references move the buffers from the input pipe
    to the output pipe.
    
    Moving the whole buffer only succeeds if the full length of the buffer
    is spliced.  Otherwise duplicate the buffer, just like tee(2), set the
    length of the output buffer and advance the offset on the input
    buffer.
    
    Since splice is operating on two pipes, special care needs to be taken
    with locking to prevent AN ABBA deadlock.  Again this is done
    similarly to the tee(2) syscall, first preparing the input and output
    pipes so there's data to consume and space for that data, and then
    doing the move operation while holding both locks.
    
    If other processes are doing I/O on the same pipes parallel to the
    splice, then by the time both inodes are locked there might be no
    buffers left to move, or no space to move them to.  In this case retry
    the whole operation, including the preparation phase.  This could lead
    to starvation, but I'm not sure if that's serious enough to worry
    about.
    
    Signed-off-by: Miklos Szeredi <mszeredi@suse.cz>
    Signed-off-by: Jens Axboe <jens.axboe@oracle.com>

commit c4b5a614316c505922a522b2e35ba05ea3e08a7c
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Fri Apr 24 18:45:35 2009 -0400

    ext4: Do not try to validate extents on special files
    
    The EXTENTS_FL flag should never be set on special files, but if it
    is, don't bother trying to validate that the extents tree is valid,
    since only files, directories, and non-fast symlinks will ever have an
    extent data structure.  We perhaps should flag the filesystem as being
    corrupted if we see a special file (named pipes, device nodes, Unix
    domain sockets, etc.) with the EXTENTS_FL flag, but e2fsck doesn't
    currently check this case, so we'll just ignore this for now, since
    it's harmless.
    
    Without this fix, a special device with the extents flag is flagged as
    an error by the kernel, so it is impossible to access or delete the
    inode, but e2fsck doesn't see it as a problem, leading to
    confused/frustrated users.
    
    Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>

commit bcd0b235bf3808dec5115c381cd55568f63b85f0
Author: Davide Libenzi <davidel@xmailserver.org>
Date:   Tue Mar 31 15:24:18 2009 -0700

    eventfd: improve support for semaphore-like behavior
    
    People started using eventfd in a semaphore-like way where before they
    were using pipes.
    
    That is, counter-based resource access.  Where a "wait()" returns
    immediately by decrementing the counter by one, if counter is greater than
    zero.  Otherwise will wait.  And where a "post(count)" will add count to
    the counter releasing the appropriate amount of waiters.  If eventfd the
    "post" (write) part is fine, while the "wait" (read) does not dequeue 1,
    but the whole counter value.
    
    The problem with eventfd is that a read() on the fd returns and wipes the
    whole counter, making the use of it as semaphore a little bit more
    cumbersome.  You can do a read() followed by a write() of COUNTER-1, but
    IMO it's pretty easy and cheap to make this work w/out extra steps.  This
    patch introduces a new eventfd flag that tells eventfd to only dequeue 1
    from the counter, allowing simple read/write to make it behave like a
    semaphore.  Simple test here:
    
    http://www.xmailserver.org/eventfd-sem.c
    
    To be back-compatible with earlier kernels, userspace applications should
    probe for the availability of this feature via
    
    #ifdef EFD_SEMAPHORE
            fd = eventfd2 (CNT, EFD_SEMAPHORE);
            if (fd == -1 && errno == EINVAL)
                    <fallback>
    #else
                    <fallback>
    #endif
    
    Signed-off-by: Davide Libenzi <davidel@xmailserver.org>
    Cc: <linux-api@vger.kernel.org>
    Tested-by: Michael Kerrisk <mtk.manpages@gmail.com>
    Cc: Ulrich Drepper <drepper@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit d60104ad4ede25a065bddcd3b34befdc68f59444
Author: Jesse Barnes <jbarnes@virtuousgeek.org>
Date:   Thu Jan 8 10:42:15 2009 -0800

    drm/i915: don't enable vblanks on disabled pipes
    
    commit 71e0ffa599f54058d9b8724b4b14d0486751681d upstream.
    
    In some cases userland may be confused and try to wait on vblank events from
    pipes that aren't actually enabled.  We shouldn't allow this, so return
    -EINVAL if the pipe isn't on.
    
    Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Signed-off-by: Eric Anholt <eric@anholt.net>
    Signed-off-by: Dave Airlie <airlied@linux.ie>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 4c44323db15f26f4c744f06179daa43711cdb708
Merge: 50246dd41ccb 34b8686e12ea
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Jan 16 08:39:52 2009 -0800

    Merge branch 'drm-next' of git://git.kernel.org/pub/scm/linux/kernel/git/airlied/drm-2.6
    
    * 'drm-next' of git://git.kernel.org/pub/scm/linux/kernel/git/airlied/drm-2.6:
      drm/i915: lock correct mutex around object unreference.
      drm/i915: add support for physical memory objects
      drm/i915: make LVDS fixed mode a preferred mode
      drm: handle depth & bpp changes correctly
      drm: initial KMS config fixes
      drm/i915: setup sarea properly in master_priv
      drm/i915: set vblank enabled flag correctly across IRQ install/uninstall
      drm/i915: don't enable vblanks on disabled pipes

commit 71e0ffa599f54058d9b8724b4b14d0486751681d
Author: Jesse Barnes <jbarnes@virtuousgeek.org>
Date:   Thu Jan 8 10:42:15 2009 -0800

    drm/i915: don't enable vblanks on disabled pipes
    
    In some cases userland may be confused and try to wait on vblank events from
    pipes that aren't actually enabled.  We shouldn't allow this, so return
    -EINVAL if the pipe isn't on.
    
    Signed-off-by: Jesse Barnes <jbarnes@virtuousgeek.org>
    Signed-off-by: Eric Anholt <eric@anholt.net>
    Signed-off-by: Dave Airlie <airlied@linux.ie>

commit 34769fc488b463cb753fc632f8f5ba56c918b7cb
Author: \"J. Bruce Fields\ <bfields@citi.umich.edu>
Date:   Tue Dec 23 16:16:37 2008 -0500

    rpc: implement new upcall
    
    Implement the new upcall.  We decide which version of the upcall gssd
    will use (new or old), by creating both pipes (the new one named "gssd",
    the old one named after the mechanism (e.g., "krb5")), and then waiting
    to see which version gssd actually opens.
    
    We don't permit pipes of the two different types to be opened at once.
    
    Signed-off-by: J. Bruce Fields <bfields@citi.umich.edu>
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit 5b7ddd4a7b19f913901140ef7807dbf5e2b301cd
Author: \"J. Bruce Fields\ <bfields@citi.umich.edu>
Date:   Tue Dec 23 16:15:44 2008 -0500

    rpc: store pointer to pipe inode in gss upcall message
    
    Keep a pointer to the inode that the message is queued on in the struct
    gss_upcall_msg.  This will be convenient, especially after we have a
    choice of two pipes that an upcall could be queued on.
    
    Signed-off-by: J. Bruce Fields <bfields@citi.umich.edu>
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit 79a3f20b641f9f93787ada49d1d7cfa98ee5a11e
Author: \"J. Bruce Fields\ <bfields@citi.umich.edu>
Date:   Tue Dec 23 16:10:52 2008 -0500

    rpc: use count of pipe openers to wait for first open
    
    Introduce a global variable pipe_version which will eventually be used
    to keep track of which version of the upcall gssd is using.
    
    For now, though, it only keeps track of whether any pipe is open or not;
    it is negative if not, zero if one is opened.  We use this to wait for
    the first gssd to open a pipe.
    
    (Minor digression: note this waits only for the very first open of any
    pipe, not for the first open of a pipe for a given auth; thus we still
    need the RPC_PIPE_WAIT_FOR_OPEN behavior to wait for gssd to open new
    pipes that pop up on subsequent mounts.)
    
    Signed-off-by: J. Bruce Fields <bfields@citi.umich.edu>
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit cf81939d6fcdf381fcb069d780c29eceb516bccd
Author: \"J. Bruce Fields\ <bfields@citi.umich.edu>
Date:   Tue Dec 23 16:10:19 2008 -0500

    rpc: track number of users of the gss upcall pipe
    
    Keep a count of the number of pipes open plus the number of messages on
    a pipe.  This count isn't used yet.
    
    Signed-off-by: J. Bruce Fields <bfields@citi.umich.edu>
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit e712804ae4bd858bd89272aa3fc1a577294c0940
Author: \"J. Bruce Fields\ <bfields@citi.umich.edu>
Date:   Tue Dec 23 16:09:47 2008 -0500

    rpc: call release_pipe only on last close
    
    I can't see any reason we need to call this until either the kernel or
    the last gssd closes the pipe.
    
    Also, this allows to guarantee that open_pipe and release_pipe are
    called strictly in pairs; open_pipe on gssd's first open, release_pipe
    on gssd's last close (or on the close of the kernel side of the pipe, if
    that comes first).
    
    That will make it very easy for the gss code to keep track of which
    pipes gssd is using.
    
    Signed-off-by: J. Bruce Fields <bfields@citi.umich.edu>
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit c381060869317b3c84430d4f54965d409cbfe65f
Author: \"J. Bruce Fields\ <bfields@citi.umich.edu>
Date:   Tue Dec 23 16:08:32 2008 -0500

    rpc: add an rpc_pipe_open method
    
    We want to transition to a new gssd upcall which is text-based and more
    easily extensible.
    
    To simplify upgrades, as well as testing and debugging, it will help if
    we can upgrade gssd (to a version which understands the new upcall)
    without having to choose at boot (or module-load) time whether we want
    the new or the old upcall.
    
    We will do this by providing two different pipes: one named, as
    currently, after the mechanism (normally "krb5"), and supporting the
    old upcall.  One named "gssd" and supporting the new upcall version.
    
    We allow gssd to indicate which version it supports by its choice of
    which pipe to open.
    
    As we have no interest in supporting *simultaneous* use of both
    versions, we'll forbid opening both pipes at the same time.
    
    So, add a new pipe_open callback to the rpc_pipefs api, which the gss
    code can use to track which pipes have been open, and to refuse opens of
    incompatible pipes.
    
    We only need this to be called on the first open of a given pipe.
    
    Signed-off-by: J. Bruce Fields <bfields@citi.umich.edu>
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit 9c84ba4e502184d95ab75128d3166f595ea2dea0
Author: Andrew Morton <akpm@linux-foundation.org>
Date:   Mon Dec 1 13:14:08 2008 -0800

    drivers/gpu/drm/i915/i915_irq.c: fix warning
    
    drivers/gpu/drm/i915/i915_irq.c: In function 'i915_disable_pipestat':
    drivers/gpu/drm/i915/i915_irq.c:101: warning: control may reach end of non-void function 'i915_pipestat' being inlined
    
    Cc: Dave Airlie <airlied@linux.ie>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 8639dad84e4fe83577006e8e2bd9da79c6c2c41e
Merge: 9297524f6a28 461cba2d294f
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Nov 30 13:00:21 2008 -0800

    Merge branch 'drm-fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/airlied/drm-2.6
    
    * 'drm-fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/airlied/drm-2.6:
      drm/i915: Save/restore HWS_PGA on suspend/resume
      drm: move drm vblank initialization/cleanup to driver load/unload
      drm/i915: execbuffer pins objects, no need to ensure they're still in the GTT
      drm/i915: Always read pipestat in irq_handler
      drm/i915: Subtract total pinned bytes from available aperture size
      drm/i915: Avoid BUG_ONs on VT switch with a wedged chipset.
      drm/i915: Remove IMR masking during interrupt handler, and restart it if needed.
      drm/i915: Manage PIPESTAT to control vblank interrupts instead of IMR.

commit 05eff845a28499762075d3a72e238a31f4d2407c
Author: Keith Packard <keithp@keithp.com>
Date:   Wed Nov 19 14:03:05 2008 -0800

    drm/i915: Always read pipestat in irq_handler
    
    Because we write pipestat before iir, it's possible that a pipestat
    interrupt will occur between the pipestat write and the iir write. This
    leaves pipestat with an interrupt status not visible in iir. This may cause
    an interrupt flood as we never clear the pipestat event.
    
    Signed-off-by: Keith Packard <keithp@keithp.com>
    Signed-off-by: Eric Anholt <eric@anholt.net>
    Signed-off-by: Dave Airlie <airlied@redhat.com>

commit 7c463586427bbbad726ba561bae4ba5acada2481
Author: Keith Packard <keithp@keithp.com>
Date:   Tue Nov 4 02:03:27 2008 -0800

    drm/i915: Manage PIPESTAT to control vblank interrupts instead of IMR.
    
    The pipestat fields affect reporting of all vblank-related interrupts, so we
    have to reset them during the irq_handler, and while enabling vblank
    interrupts.  Otherwise, if a pipe status field had been set to non-zero
    before enabling reporting, we would never see an interrupt again.
    
    This patch adds i915_enable_pipestat and i915_disable_pipestat to abstract
    out the steps needed to change the reported interrupts.
    
    Signed-off-by: Keith Packard <keithp@keithp.com>
    Signed-off-by: Eric Anholt <eric@anholt.net>
    Signed-off-by: Dave Airlie <airlied@redhat.com>

commit 70740d6c93030b339b4ad17fd58ee135dfc13913
Merge: a3415dc34f4a 7e78f72524b7
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Oct 23 10:18:40 2008 -0700

    Merge branch 'drm-next' of git://git.kernel.org/pub/scm/linux/kernel/git/airlied/drm-2.6
    
    * 'drm-next' of git://git.kernel.org/pub/scm/linux/kernel/git/airlied/drm-2.6:
      drm: Avoid oops in DRM_IOCTL_RM_DRAW if a bad handle is supplied.
      drm: Add 32-bit compatibility for DRM_IOCTL_UPDATE_DRAW.
      drm/i915: use pipes, not planes to label vblank data
      drm/i915: hold dev->struct_mutex and DRM lock during vblank ring operations
      i915: Fix format string warnings on x86-64.
      i915: Don't dereference HWS in /proc debug files when it isn't initialized.
      i915: Enable IMR passthrough of vblank events before enabling it in pipestat.
      drm: Remove two leaks of vblank reference count in error paths.
      drm: fix leak of cliprects in drm_rmdraw()
      i915: Disable MSI on GM965 (errata says it doesn't work)
      drm: Set cliprects to NULL when changing drawable to having 0 cliprects.
      i915: Protect vblank IRQ reg access with spinlock

commit 42f52ef8d96b1434f12ad9f895b5412fda392847
Author: Keith Packard <keithp@keithp.com>
Date:   Sat Oct 18 19:39:29 2008 -0700

    drm/i915: use pipes, not planes to label vblank data
    
    vblank in the kernel is far simpler if it deals with pipes instead of
    planes, so we're changing both user and kernel side.
    
    Signed-off-by: Keith Packard <keithp@keithp.com>
    Signed-off-by: Eric Anholt <eric@anholt.net>
    Signed-off-by: Dave Airlie <airlied@redhat.com>

commit 053d7f244a8739d96d316c77a97cd063804c8e35
Author: Eric Anholt <eric@anholt.net>
Date:   Fri Oct 17 15:41:26 2008 -0700

    i915: Enable IMR passthrough of vblank events before enabling it in pipestat.
    
    Otherwise, if we lost the race, the pipestat bit would be set without being
    reflected in IIR, and we would never clear the pipestat bit so the pipe
    event would never be generated again, and all vblank waits would time out.
    
    Signed-off-by: Eric Anholt <eric@anholt.net>
    Acked-by: Keith Packard <keithp@keithp.com>
    Signed-off-by: Dave Airlie <airlied@redhat.com>

commit 5b92c4045eaa42441b7ec249a406e4110ea400d4
Author: Alex Deucher <alexdeucher@gmail.com>
Date:   Wed May 28 11:57:40 2008 +1000

    drm/radeon: init pipe setup in kernel code.
    
    This inits the card pipes in the kernel and lets userspace getparam
    the correct setup.
    
    Signed-off-by: Dave Airlie <airlied@redhat.com>

commit 073b86dacc3c0fa79c71f3519169ea18d5521227
Author: Randy Dunlap <randy.dunlap@oracle.com>
Date:   Wed Feb 13 15:03:23 2008 -0800

    docbook: move pipe and splice to filesystems docbook
    
    Move pipes and splice docbook to filesystems book.
    kernel-api book is huge (10x most other books) & slow to process.
    
    Signed-off-by: Randy Dunlap <randy.dunlap@oracle.com>
    Cc: Jens Axboe <jens.axboe@oracle.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 50e437d522a6cc34a882b2f740297f1b6b4c3af3
Author: Trond Myklebust <Trond.Myklebust@netapp.com>
Date:   Thu Jun 7 22:44:34 2007 -0400

    SUNRPC: Convert rpc_pipefs to use the generic filesystem notification hooks
    
    This will allow rpc.gssd to use inotify instead of dnotify in order to
    locate new rpc upcall pipes.
    
    This also requires the exporting of __audit_inode_child(), which is used by
    fsnotify_create() and fsnotify_mkdir(). Ccing David Woodhouse.
    
    Cc: David Woodhouse <dwmw2@infradead.org>
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit 7f8ed420f80c91176dfd27c8089f22cab5c9ba78
Author: Steve French <sfrench@us.ibm.com>
Date:   Fri Sep 28 22:28:55 2007 +0000

    [CIFS] CIFS support for named pipes (part 1)
    
    This allows cifs to mount to ipc shares (IPC$)
    which will allow user space applications to
    layer over authenticated cifs connections
    (useful for Wine and others that would want
    to put DCE/RPC over CIFS or run CIFS named
    pipes)
    
    Acked-by: Rob Shearman <rob@codeweavers.com>
    Signed-off-by: Steve French <sfrench@us.ibm.com>

commit 8e8ef2971b0fd6dcf1a66014fb74b41938eecb4e
Merge: 933a6208d84c 79685b8deea4
Author: Linus Torvalds <torvalds@woody.linux-foundation.org>
Date:   Sat Jul 28 19:31:13 2007 -0700

    Merge branch 'for-linus' of git://git.kernel.dk/linux-2.6-block
    
    * 'for-linus' of git://git.kernel.dk/linux-2.6-block:
      docbook: add pipes, other fixes
      blktrace: use cpu_clock() instead of sched_clock()
      bsg: Fix build for CONFIG_BLOCK=n
      [patch] QUEUE_FLAG_READFULL QUEUE_FLAG_WRITEFULL comment fix

commit 79685b8deea4541d18882d8c07d0e99e788292ab
Author: Randy Dunlap <randy.dunlap@oracle.com>
Date:   Fri Jul 27 08:08:51 2007 +0200

    docbook: add pipes, other fixes
    
    Fix some typos in pipe.c and splice.c.
    Add pipes API to kernel-api.tmpl.
    
    Signed-off-by: Randy Dunlap <randy.dunlap@oracle.com>
    Signed-off-by: Jens Axboe <jens.axboe@oracle.com>

commit 89df6bfc04059716de2eb2fe529f05b3e124fafd
Author: Eduard-Gabriel Munteanu <maxdamage@aladin.ro>
Date:   Sun Jul 15 23:38:51 2007 -0700

    uml: DEBUG_SHIRQ fixes
    
    DEBUG_SHIRQ generates spurious interrupts, triggering handlers such as
    mconsole_interrupt() or line_interrupt().  They expect data to be available to
    be read from their sockets/pipes, but in the case of spurious interrupts, the
    host didn't actually send anything, so UML hangs in read() and friends.
    Setting those fd's as O_NONBLOCK makes DEBUG_SHIRQ-enabled UML kernels boot
    and run correctly.
    
    Signed-off-by: Eduard-Gabriel Munteanu <maxdamage@aladin.ro>
    Signed-off-by: Jeff Dike <jdike@linux.intel.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 6e84c7b66a0aa0be16a7728d1e687c57978dac2c
Author: Trond Myklebust <Trond.Myklebust@netapp.com>
Date:   Thu Jun 7 15:31:36 2007 -0400

    SUNRPC: Add a downcall queue to struct rpc_inode
    
    Currently, the downcall queue is tied to the struct gss_auth, which means
    that different RPCSEC_GSS pseudoflavours must use different upcall pipes.
    Add a list to struct rpc_inode that can be used instead.
    
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit e1ad7468c77ddb94b0615d5f50fa255525fde0f0
Author: Davide Libenzi <davidel@xmailserver.org>
Date:   Thu May 10 22:23:19 2007 -0700

    signal/timer/event: eventfd core
    
    This is a very simple and light file descriptor, that can be used as event
    wait/dispatch by userspace (both wait and dispatch) and by the kernel
    (dispatch only).  It can be used instead of pipe(2) in all cases where those
    would simply be used to signal events.  Their kernel overhead is much lower
    than pipes, and they do not consume two fds.  When used in the kernel, it can
    offer an fd-bridge to enable, for example, functionalities like KAIO or
    syslets/threadlets to signal to an fd the completion of certain operations.
    But more in general, an eventfd can be used by the kernel to signal readiness,
    in a POSIX poll/select way, of interfaces that would otherwise be incompatible
    with it.  The API is:
    
    int eventfd(unsigned int count);
    
    The eventfd API accepts an initial "count" parameter, and returns an eventfd
    fd.  It supports poll(2) (POLLIN, POLLOUT, POLLERR), read(2) and write(2).
    
    The POLLIN flag is raised when the internal counter is greater than zero.
    
    The POLLOUT flag is raised when at least a value of "1" can be written to the
    internal counter.
    
    The POLLERR flag is raised when an overflow in the counter value is detected.
    
    The write(2) operation can never overflow the counter, since it blocks (unless
    O_NONBLOCK is set, in which case -EAGAIN is returned).
    
    But the eventfd_signal() function can do it, since it's supposed to not sleep
    during its operation.
    
    The read(2) function reads the __u64 counter value, and reset the internal
    value to zero.  If the value read is equal to (__u64) -1, an overflow happened
    on the internal counter (due to 2^64 eventfd_signal() posts that has never
    been retired - unlickely, but possible).
    
    The write(2) call writes an __u64 count value, and adds it to the current
    counter.  The eventfd fd supports O_NONBLOCK also.
    
    On the kernel side, we have:
    
    struct file *eventfd_fget(int fd);
    int eventfd_signal(struct file *file, unsigned int n);
    
    The eventfd_fget() should be called to get a struct file* from an eventfd fd
    (this is an fget() + check of f_op being an eventfd fops pointer).
    
    The kernel can then call eventfd_signal() every time it wants to post an event
    to userspace.  The eventfd_signal() function can be called from any context.
    An eventfd() simple test and bench is available here:
    
    http://www.xmailserver.org/eventfd-bench.c
    
    This is the eventfd-based version of pipetest-4 (pipe(2) based):
    
    http://www.xmailserver.org/pipetest-4.c
    
    Not that performance matters much in the eventfd case, but eventfd-bench
    shows almost as double as performance than pipetest-4.
    
    [akpm@linux-foundation.org: fix i386 build]
    [akpm@linux-foundation.org: add sys_eventfd to sys_ni.c]
    Signed-off-by: Davide Libenzi <davidel@xmailserver.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 866b04fccbf125cd39f2bdbcfeaa611d39a061a8
Author: Jeff Layton <jlayton@redhat.com>
Date:   Tue May 8 00:32:29 2007 -0700

    inode numbering: make static counters in new_inode and iunique be 32 bits
    
    The problems are:
    
    - on filesystems w/o permanent inode numbers, i_ino values can be larger
      than 32 bits, which can cause problems for some 32 bit userspace programs on
      a 64 bit kernel.  We can't do anything for filesystems that have actual
      >32-bit inode numbers, but on filesystems that generate i_ino values on the
      fly, we should try to have them fit in 32 bits.  We could trivially fix this
      by making the static counters in new_inode and iunique 32 bits, but...
    
    - many filesystems call new_inode and assume that the i_ino values they are
      given are unique.  They are not guaranteed to be so, since the static
      counter can wrap.  This problem is exacerbated by the fix for #1.
    
    - after allocating a new inode, some filesystems call iunique to try to get
      a unique i_ino value, but they don't actually add their inodes to the
      hashtable, and so they're still not guaranteed to be unique if that counter
      wraps.
    
    This patch set takes the simpler approach of simply using iunique and hashing
    the inodes afterward.  Christoph H.  previously mentioned that he thought that
    this approach may slow down lookups for filesystems that currently hash their
    inodes.
    
    The questions are:
    
    1) how much would this slow down lookups for these filesystems?
    2) is it enough to justify adding more infrastructure to avoid it?
    
    What might be best is to start with this approach and then only move to using
    IDR or some other scheme if these extra inodes in the hashtable prove to be
    problematic.
    
    I've done some cursory testing with this patch and the overhead of hashing and
    unhashing the inodes with pipefs is pretty low -- just a few seconds of system
    time added on to the creation and destruction of 10 million pipes (very
    similar to the overhead that the IDR approach would add).
    
    The hard thing to measure is what effect this has on other filesystems. I'm
    open to ways to try and gauge this.
    
    Again, I've only converted pipefs as an example. If this approach is
    acceptable then I'll start work on patches to convert other filesystems.
    
    With a pretty-much-worst-case microbenchmark provided by Eric Dumazet
    <dada1@cosmosbay.com>:
    
    hashing patch (pipebench):
    sys     1m15.329s
    sys     1m16.249s
    sys     1m17.169s
    
    unpatched (pipebench):
    sys     1m9.836s
    sys     1m12.541s
    sys     1m14.153s
    
    Which works out to 1.05642174294555027017.  So ~5-6% slowdown.
    
    This patch:
    
    When a 32-bit program that was not compiled with large file offsets does a
    stat and gets a st_ino value back that won't fit in the 32 bit field, glibc
    (correctly) generates an EOVERFLOW error.  We can't do anything about fs's
    with larger permanent inode numbers, but when we generate them on the fly, we
    ought to try and have them fit within a 32 bit field.
    
    This patch takes the first step toward this by making the static counters in
    these two functions be 32 bits.
    
    [jlayton@redhat.com: mention that it's only the case for 32bit, non-LFS stat]
    Signed-off-by: Jeff Layton <jlayton@redhat.com>
    Cc: Christoph Hellwig <hch@lst.de>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit c23fbb6bcb3eb9cdf39a103edadf57bde8ce309c
Author: Eric Dumazet <dada1@cosmosbay.com>
Date:   Tue May 8 00:26:18 2007 -0700

    VFS: delay the dentry name generation on sockets and pipes
    
    1) Introduces a new method in 'struct dentry_operations'.  This method
       called d_dname() might be called from d_path() to build a pathname for
       special filesystems.  It is called without locks.
    
       Future patches (if we succeed in having one common dentry for all
       pipes/sockets) may need to change prototype of this method, but we now
       use : char *d_dname(struct dentry *dentry, char *buffer, int buflen);
    
    2) Adds a dynamic_dname() helper function that eases d_dname() implementations
    
    3) Defines d_dname method for sockets : No more sprintf() at socket
       creation.  This is delayed up to the moment someone does an access to
       /proc/pid/fd/...
    
    4) Defines d_dname method for pipes : No more sprintf() at pipe
       creation.  This is delayed up to the moment someone does an access to
       /proc/pid/fd/...
    
    A benchmark consisting of 1.000.000 calls to pipe()/close()/close() gives a
    *nice* speedup on my Pentium(M) 1.6 Ghz :
    
    3.090 s instead of 3.450 s
    
    Signed-off-by: Eric Dumazet <dada1@cosmosbay.com>
    Acked-by: Christoph Hellwig <hch@infradead.org>
    Acked-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 1d21632d366b33b3adf4fa26144edf3162a9715d
Author: Trond Myklebust <Trond.Myklebust@netapp.com>
Date:   Fri Feb 2 15:56:06 2007 -0800

    NFSv4: Ensure non-root user can trigger a referral automount
    
    Currently only root can trigger a referral automount because only root
    can access rpc_pipefs directories. Enabling read access to non-root
    should be harmless (they can still not access the pipes themselves)
    and will suffice to fix this problem.
    
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit b3423415fbc2e5461605826317da1c8dbbf21f97
Author: Eric Dumazet <dada1@cosmosbay.com>
Date:   Wed Dec 6 20:38:48 2006 -0800

    [PATCH] dcache: avoid RCU for never-hashed dentries
    
    Some dentries don't need to be globally visible in dentry hashtable.
    (pipes & sockets)
    
    Such dentries dont need to wait for a RCU grace period at delete time.
    Being able to free them permits a better CPU cache use (hot cache)
    
    This patch combined with (dont insert pipe dentries into dentry_hashtable)
    reduced time of { pipe(p); close(p[0]); close(p[1]);} on my UP machine (1.6
    GHz Pentium-M) from 3.23 us to 2.86 us (But this patch does not depend on
    other patches, only bench results)
    
    Signed-off-by: Eric Dumazet <dada1@cosmosbay.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Maneesh Soni <maneesh@in.ibm.com>
    Cc: "Paul E. McKenney" <paulmck@us.ibm.com>
    Cc: Dipankar Sarma <dipankar@in.ibm.com>
    Acked-by: David Miller <davem@davemloft.net>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit 68815bad7239989d92f315c10d9ef65a11945a75
Author: =?utf-8?q?Michel_D=C3=A4nzer?= <michel@tungstengraphics.com>
Date:   Tue Oct 24 22:28:51 2006 +1000

    drm: add support for secondary vertical blank interrupt to i915
    
    When the vertical blank interrupt is enabled for both pipes, pipe A is
    considered primary and pipe B secondary. When it's only enabled for one pipe,
    it's always considered primary for backwards compatibility.
    
    Signed-off-by: Dave Airlie <airlied@linux.ie>

commit 2bdfe0baeca0e2750037b8fba71905c00ac3c515
Author: Stephen Hemminger <shemminger@osdl.org>
Date:   Thu Oct 26 15:46:54 2006 -0700

    netpoll retry cleanup
    
    The netpoll beast was still not happy. If the beast got
    clogged pipes, it tended to stare blankly off in space
    for a long time.
    
    The problem couldn't be completely fixed because the
    beast talked with irq's disabled. But it could be made
    less painful and shorter.
    
    Signed-off-by: Stephen Hemminger <shemminger@osdl.org>

commit b6cd27ed33886a5ffaf0925a6d98e13e18e8a1af
Author: Stephen Hemminger <shemminger@osdl.org>
Date:   Thu Oct 26 15:46:51 2006 -0700

    netpoll per device txq
    
    When the netpoll beast got really busy, it tended to clog
    things, so it stored them for later. But the beast was putting
    all it's skb's in one basket. This was bad because maybe some
    pipes were clogged and others were not.
    
    Signed-off-by: Stephen Hemminger <shemminger@osdl.org>

commit d025c9db7f31fc0554ce7fb2dfc78d35a77f3487
Author: Andi Kleen <ak@suse.de>
Date:   Sat Sep 30 23:29:28 2006 -0700

    [PATCH] Support piping into commands in /proc/sys/kernel/core_pattern
    
    Using the infrastructure created in previous patches implement support to
    pipe core dumps into programs.
    
    This is done by overloading the existing core_pattern sysctl
    with a new syntax:
    
    |program
    
    When the first character of the pattern is a '|' the kernel will instead
    threat the rest of the pattern as a command to run.  The core dump will be
    written to the standard input of that program instead of to a file.
    
    This is useful for having automatic core dump analysis without filling up
    disks.  The program can do some simple analysis and save only a summary of
    the core dump.
    
    The core dump proces will run with the privileges and in the name space of
    the process that caused the core dump.
    
    I also increased the core pattern size to 128 bytes so that longer command
    lines fit.
    
    Most of the changes comes from allowing core dumps without seeks.  They are
    fairly straight forward though.
    
    One small incompatibility is that if someone had a core pattern previously
    that started with '|' they will get suddenly new behaviour.  I think that's
    unlikely to be a real problem though.
    
    Additional background:
    
    > Very nice, do you happen to have a program that can accept this kind of
    > input for crash dumps?  I'm guessing that the embedded people will
    > really want this functionality.
    
    I had a cheesy demo/prototype.  Basically it wrote the dump to a file again,
    ran gdb on it to get a backtrace and wrote the summary to a shared directory.
    Then there was a simple CGI script to generate a "top 10" crashes HTML
    listing.
    
    Unfortunately this still had the disadvantage to needing full disk space for a
    dump except for deleting it afterwards (in fact it was worse because over the
    pipe holes didn't work so if you have a holey address map it would require
    more space).
    
    Fortunately gdb seems to be happy to handle /proc/pid/fd/xxx input pipes as
    cores (at least it worked with zsh's =(cat core) syntax), so it would be
    likely possible to do it without temporary space with a simple wrapper that
    calls it in the right way.  I ran out of time before doing that though.
    
    The demo prototype scripts weren't very good.  If there is really interest I
    can dig them out (they are currently on a laptop disk on the desk with the
    laptop itself being in service), but I would recommend to rewrite them for any
    serious application of this and fix the disk space problem.
    
    Also to be really useful it should probably find a way to automatically fetch
    the debuginfos (I cheated and just installed them in advance).  If nobody else
    does it I can probably do the rewrite myself again at some point.
    
    My hope at some point was that desktops would support it in their builtin
    crash reporters, but at least the KDE people I talked too seemed to be happy
    with their user space only solution.
    
    Alan sayeth:
    
      I don't believe that piping as such as neccessarily the right model, but
      the ability to intercept and processes core dumps from user space is asked
      for by many enterprise users as well.  They want to know about, capture,
      analyse and process core dumps, often centrally and in automated form.
    
    [akpm@osdl.org: loff_t != unsigned long]
    Signed-off-by: Andi Kleen <ak@suse.de>
    Cc: Alan Cox <alan@lxorguk.ukuu.org.uk>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit 68adb0af51ebccb72ffb14d49cb8121b1afc4259
Author: Trond Myklebust <Trond.Myklebust@netapp.com>
Date:   Thu Aug 10 17:51:46 2006 -0400

    SUNRPC: rpc_unlink() must check for unhashed dentries
    
    A prior call to rpc_depopulate() by rpc_rmdir() on the parent directory may
    have already called simple_unlink() on this entry.
    Add the same check to rpc_rmdir(). Also remove a redundant call to
    rpc_close_pipes() in rpc_rmdir.
    
    Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>
    (cherry picked from 0bbfb9d20f6437c4031aa3bf9b4d311a053e58e3 commit)

commit 5b5daf77a6250f2b1983d092d8237cb169488774
Author: Inaky Perez-Gonzalez <inaky.perez-gonzalez@intel.com>
Date:   Mon Jun 19 18:19:01 2006 -0700

    [PATCH] USB: Add some basic WUSB definitions
    
    This patch adds basic Wireless USB 1.0 definitions to usb_ch9.h that
    fit into the existing set of declarations. Boils down to two new
    recipients for requests (ports and remote pipes), rpipe reset and
    abort request codes and wire adapter and remote pipe descriptor
    types.
    
    Wire adapters are the USB <-> Wireless USB adaptors; remote pipes
    are used by those adapters to pipe the host <-> endpoint traffic.
    
    Signed-off-by: Inaky Perez-Gonzalez <inaky.perez-gonzalez@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit abb1cf3cb9532d824c8bda00a111adb106dd457d
Merge: b464f5794619 c499aeb08cb2
Author: Linus Torvalds <torvalds@g5.osdl.org>
Date:   Sat Jun 24 14:48:43 2006 -0700

    Merge branch 'drm-patches' of git://git.kernel.org/pub/scm/linux/kernel/git/airlied/drm-2.6
    
    * 'drm-patches' of git://git.kernel.org/pub/scm/linux/kernel/git/airlied/drm-2.6:
      drm: radeon constify radeon microcode
      Add i915 ioctls to configure pipes for vblank interrupt.
      drm: update radeon to 1.25 add r200 vertex program support
      drm: radeon add a tcl state flush before accessing tcl vector space

commit 702880f24373dfb31edb0bcd997ff924d07decc3
Author: Dave Airlie <airlied@linux.ie>
Date:   Sat Jun 24 17:07:34 2006 +1000

    Add i915 ioctls to configure pipes for vblank interrupt.
    
    i915 vblanks can be generated from either pipe a or b, however a disabled
    pipe generates no interrupts. This change allows the X server to select
    which pipe generates vblank interrupts.
    
    From: Keith Packard <keith.packard@intel.com> via DRM CVS
    Signed-off-by: Dave Airlie <airlied@linux.ie>

commit 46e678c96bbd775abd05d3ddbe2fd334794f9157
Author: Jens Axboe <axboe@suse.de>
Date:   Sun Apr 30 16:36:32 2006 +0200

    [PATCH] splice: fix bugs with stealing regular pipe pages
    
    - Check that page has suitable count for stealing in the regular pipes.
    - pipe_to_file() assumes that the page is locked on succesful steal, so
      do that in the pipe steal hook
    - Missing unlock_page() in add_to_page_cache() failure.
    
    Signed-off-by: Jens Axboe <axboe@suse.de>

commit 912d35f86781e64d73be1ef358f703c08905ac37
Author: Jens Axboe <axboe@suse.de>
Date:   Wed Apr 26 10:59:21 2006 +0200

    [PATCH] Add support for the sys_vmsplice syscall
    
    sys_splice() moves data to/from pipes with a file input/output. sys_vmsplice()
    moves data to a pipe, with the input being a user address range instead.
    
    This uses an approach suggested by Linus, where we can hold partial ranges
    inside the pages[] map. Hopefully this will be useful for network
    receive support as well.
    
    Signed-off-by: Jens Axboe <axboe@suse.de>

commit 3a326a2ce88e71d00ac0d133e314a3342a7709f8
Author: Ingo Molnar <mingo@elte.hu>
Date:   Mon Apr 10 15:18:35 2006 +0200

    [PATCH] introduce a "kernel-internal pipe object" abstraction
    
    separate out the 'internal pipe object' abstraction, and make it
    usable to splice. This cleans up and fixes several aspects of the
    internal splice APIs and the pipe code:
    
     - pipes: the allocation and freeing of pipe_inode_info is now more symmetric
       and more streamlined with existing kernel practices.
    
     - splice: small micro-optimization: less pointer dereferencing in splice
       methods
    
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
    
    Update XFS for the ->splice_read/->splice_write changes.
    
    Signed-off-by: Jens Axboe <axboe@suse.de>

commit e7c38cb49c6cc05bc11f70d9e9889da1c4a0d37f
Author: Con Kolivas <kernel@kolivas.org>
Date:   Fri Mar 31 02:31:25 2006 -0800

    [PATCH] sched: make task_noninteractive use sleep_type
    
    Alterations to the pipe code in the kernel made it possible for relative
    starvation to occur with tasks that slept waiting on a pipe getting unfair
    priority bonuses even if they were otherwise fully cpu bound so the
    TASK_NONINTERACTIVE flag was introduced which prevented any change to
    sleep_avg while sleeping waiting on a pipe.  This change also leads to the
    converse though, preventing any priority boost from occurring in truly
    interactive tasks that wait on pipes.
    
    Convert the TASK_NONINTERACTIVE flag to set sleep_type to SLEEP_NONINTERACTIVE
    which will allow a linear bonus to priority based on sleep time thus allowing
    interactive tasks to get high priority if they sleep enough.
    
    Signed-off-by: Con Kolivas <kernel@kolivas.org>
    Acked-by: Ingo Molnar <mingo@elte.hu>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit bb184f3356adbbb1605df2f7c570b4c92231fa3a
Author: Trond Myklebust <Trond.Myklebust@netapp.com>
Date:   Sat Dec 3 15:20:10 2005 -0500

    SUNRPC: Fix Oopsable condition in rpc_pipefs
    
     The elements on rpci->in_upcall are tracked by the filp->private_data,
     which will ensure that they get released when the file is closed.
    
     The exception is if rpc_close_pipes() gets called first, since that
     sets rpci->ops to NULL.
    
     Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit 6070fe6f82c67021367092855c0812a98becf0fa
Author: Trond Myklebust <Trond.Myklebust@netapp.com>
Date:   Thu Oct 27 22:12:46 2005 -0400

    RPC: Ensure that nobody can queue up new upcalls after rpc_close_pipes()
    
     Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>

commit 5d58bec5b7a8b8303df0a4dcb9a18feeefac6091
Author: Eric Van Hensbergen <ericvh@gmail.com>
Date:   Fri Sep 9 13:04:27 2005 -0700

    [PATCH] v9fs: Fix support for special files (devices, named pipes, etc.)
    
    Fix v9fs special files (block, char devices) support.
    
    Signed-off-by: Latchesar Ionkov <lucho@ionkov.net>
    Signed-off-by: Eric Van Hensbergen <ericvh@gmail.com>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit 0f7e663dea7f0e22f3b2d07156c5e9d2e8656610
Author: Bodo Stroesser <bstroesser@fujitsu-siemens.com>
Date:   Fri May 6 21:30:54 2005 -0700

    [PATCH] uml: Fix process exit race
    
    tt-mode closes switch_pipes in exit_thread_tt and kills processes in
    switch_to_tt, if the exit_state is EXIT_DEAD or EXIT_ZOMBIE.
    
    In very rare cases the exiting process can be scheduled out after having set
    exit_state and closed switch_pipes (from release_task it calls proc_pid_flush,
    which might sleep).  If this process is to be restarted, UML failes in
    switch_to_tt with:
    
       write of switch_pipe failed, err = 9
    
    We fix this by closing switch_pipes not in exit_thread_tt, but later in
    release_thread_tt.  Additionally, we set switch_pipe[0] = 0 after closing.
    switch_to_tt must not kill "from" process depending on its exit_state, but
    must kill it after release_thread was processed only, so it examines
    switch_pipe[0] for its decision.
    
    Signed-off-by: Bodo Stroesser <bstroesser@fujitsu-siemens.com>
    Signed-off-by: Jeff Dike <jdike@addtoit.com>
    Cc: Paolo 'Blaisorblade' Giarrusso <blaisorblade@yahoo.it>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>
