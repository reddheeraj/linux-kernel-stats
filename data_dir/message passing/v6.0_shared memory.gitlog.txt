commit d807aff1910c81fa20c78edde7523a01be9669f1
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Thu Dec 22 18:38:21 2022 +0000

    firmware: arm_scmi: Harden shared memory access in fetch_notification
    
    [ Upstream commit 9bae076cd4e3e3c3dc185cae829d80b2dddec86e ]
    
    A misbheaving SCMI platform firmware could reply with out-of-spec
    notifications, shorter than the mimimum size comprising a header.
    
    Fixes: d5141f37c42e ("firmware: arm_scmi: Add notifications support in transport layer")
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    Link: https://lore.kernel.org/r/20221222183823.518856-4-cristian.marussi@arm.com
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3463203d109608f24b75b24c90db260c7c192064
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Thu Dec 22 18:38:20 2022 +0000

    firmware: arm_scmi: Harden shared memory access in fetch_response
    
    [ Upstream commit ad78b81a1077f7d956952cd8bdfe1e61504e3eb8 ]
    
    A misbheaving SCMI platform firmware could reply with out-of-spec messages,
    shorter than the mimimum size comprising a header and a status field.
    
    Harden shmem_fetch_response to properly truncate such a bad messages.
    
    Fixes: 5c8a47a5a91d ("firmware: arm_scmi: Make scmi core independent of the transport type")
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    Link: https://lore.kernel.org/r/20221222183823.518856-3-cristian.marussi@arm.com
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7dfe83ecc341bd30922c00054fd14dfe48f29bdb
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Thu Dec 22 18:38:21 2022 +0000

    firmware: arm_scmi: Harden shared memory access in fetch_notification
    
    [ Upstream commit 9bae076cd4e3e3c3dc185cae829d80b2dddec86e ]
    
    A misbheaving SCMI platform firmware could reply with out-of-spec
    notifications, shorter than the mimimum size comprising a header.
    
    Fixes: d5141f37c42e ("firmware: arm_scmi: Add notifications support in transport layer")
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    Link: https://lore.kernel.org/r/20221222183823.518856-4-cristian.marussi@arm.com
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a653dbb70cceb6f881b30827711436104d8858c4
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Thu Dec 22 18:38:20 2022 +0000

    firmware: arm_scmi: Harden shared memory access in fetch_response
    
    [ Upstream commit ad78b81a1077f7d956952cd8bdfe1e61504e3eb8 ]
    
    A misbheaving SCMI platform firmware could reply with out-of-spec messages,
    shorter than the mimimum size comprising a header and a status field.
    
    Harden shmem_fetch_response to properly truncate such a bad messages.
    
    Fixes: 5c8a47a5a91d ("firmware: arm_scmi: Make scmi core independent of the transport type")
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    Link: https://lore.kernel.org/r/20221222183823.518856-3-cristian.marussi@arm.com
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6813d8ba7dac2de37670e04cbe25dd7071d612fd
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Thu Dec 22 18:38:21 2022 +0000

    firmware: arm_scmi: Harden shared memory access in fetch_notification
    
    [ Upstream commit 9bae076cd4e3e3c3dc185cae829d80b2dddec86e ]
    
    A misbheaving SCMI platform firmware could reply with out-of-spec
    notifications, shorter than the mimimum size comprising a header.
    
    Fixes: d5141f37c42e ("firmware: arm_scmi: Add notifications support in transport layer")
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    Link: https://lore.kernel.org/r/20221222183823.518856-4-cristian.marussi@arm.com
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit e85df1db28dc93d3177f5770a8b2f2bb3b3eb863
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Thu Dec 22 18:38:20 2022 +0000

    firmware: arm_scmi: Harden shared memory access in fetch_response
    
    [ Upstream commit ad78b81a1077f7d956952cd8bdfe1e61504e3eb8 ]
    
    A misbheaving SCMI platform firmware could reply with out-of-spec messages,
    shorter than the mimimum size comprising a header and a status field.
    
    Harden shmem_fetch_response to properly truncate such a bad messages.
    
    Fixes: 5c8a47a5a91d ("firmware: arm_scmi: Make scmi core independent of the transport type")
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    Link: https://lore.kernel.org/r/20221222183823.518856-3-cristian.marussi@arm.com
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a1193de562f54c7c9f60ca9f2db96e50a7608de1
Author: Suren Baghdasaryan <surenb@google.com>
Date:   Wed Jan 4 16:02:40 2023 -0800

    mm: fix vma->anon_name memory leak for anonymous shmem VMAs
    
    free_anon_vma_name() is missing a check for anonymous shmem VMA which
    leads to a memory leak due to refcount not being dropped.  Fix this by
    calling anon_vma_name_put() unconditionally.  It will free vma->anon_name
    whenever it's non-NULL.
    
    Link: https://lkml.kernel.org/r/20230105000241.1450843-1-surenb@google.com
    Fixes: d09e8ca6cb93 ("mm: anonymous shared memory naming")
    Signed-off-by: Suren Baghdasaryan <surenb@google.com>
    Suggested-by: David Hildenbrand <david@redhat.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Reported-by: syzbot+91edf9178386a07d06a7@syzkaller.appspotmail.com
    Cc: Hugh Dickins <hughd@google.com>
    Cc: Pasha Tatashin <pasha.tatashin@soleen.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>

commit a316877372f4f3062b132437cbc16f2fab8cc4c5
Merge: dc43354cb768 e325285de2cd
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Jan 9 23:15:08 2023 +0100

    Merge tag 'scmi-fixes-6.2' of git://git.kernel.org/pub/scm/linux/kernel/git/sudeep.holla/linux into arm/fixes
    
    Arm SCMI fixes for v6.2
    
    Few fixes addressing:
    1. Possible compromise with the shorter message size from a misbheaving
       SCMI platform firmware. The shmem accesses are now hardened to handle
       the same in fetch_notification and fetch_response.
    
    2. Possible unsafe locking scenario which is solved by calling
       virtio_break_device() before getting hold of vioch->lock.
    
    3. Possible stale error status reported from a previous message being
       used again as it is not cleared.
    
    * tag 'scmi-fixes-6.2' of git://git.kernel.org/pub/scm/linux/kernel/git/sudeep.holla/linux:
      firmware: arm_scmi: Fix virtio channels cleanup on shutdown
      firmware: arm_scmi: Harden shared memory access in fetch_notification
      firmware: arm_scmi: Harden shared memory access in fetch_response
      firmware: arm_scmi: Clear stale xfer->hdr.status
    
    Link: https://lore.kernel.org/r/20230106093909.652657-1-sudeep.holla@arm.com
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 9bae076cd4e3e3c3dc185cae829d80b2dddec86e
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Thu Dec 22 18:38:21 2022 +0000

    firmware: arm_scmi: Harden shared memory access in fetch_notification
    
    A misbheaving SCMI platform firmware could reply with out-of-spec
    notifications, shorter than the mimimum size comprising a header.
    
    Fixes: d5141f37c42e ("firmware: arm_scmi: Add notifications support in transport layer")
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    Link: https://lore.kernel.org/r/20221222183823.518856-4-cristian.marussi@arm.com
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>

commit ad78b81a1077f7d956952cd8bdfe1e61504e3eb8
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Thu Dec 22 18:38:20 2022 +0000

    firmware: arm_scmi: Harden shared memory access in fetch_response
    
    A misbheaving SCMI platform firmware could reply with out-of-spec messages,
    shorter than the mimimum size comprising a header and a status field.
    
    Harden shmem_fetch_response to properly truncate such a bad messages.
    
    Fixes: 5c8a47a5a91d ("firmware: arm_scmi: Make scmi core independent of the transport type")
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    Link: https://lore.kernel.org/r/20221222183823.518856-3-cristian.marussi@arm.com
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>

commit 8a06127602de70541e751a8c64a06995ee281f22
Author: Sven Peter <sven@svenpeter.dev>
Date:   Fri Nov 4 22:13:03 2022 +0100

    Bluetooth: hci_bcm4377: Add new driver for BCM4377 PCIe boards
    
    Broadcom BCM4377/4378/4387 are dual WiFi/Bluetooth boards found in Apple
    machines. This driver adds support for the Bluetooth function which
    exposes a shared memory IPC protocol over PCIe to tunnel HCI traffic.
    
    Signed-off-by: Sven Peter <sven@svenpeter.dev>
    Signed-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>

commit 1506fba28b53fd159c7028c4809a4a3143a38eb7
Author: Sumit Garg <sumit.garg@linaro.org>
Date:   Thu Nov 10 16:41:40 2022 +0530

    KEYS: trusted: tee: Make registered shm dependency explicit
    
    TEE trusted keys support depends on registered shared memory support
    since the key buffers are needed to be registered with OP-TEE. So make
    that dependency explicit to not register trusted keys support if
    underlying implementation doesn't support registered shared memory.
    
    Signed-off-by: Sumit Garg <sumit.garg@linaro.org>
    Tested-by: Jerome Forissier <jerome.forissier@linaro.org>
    Reviewed-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>

commit 7d68b73349e3c9c9e05f48882ca0a7bf9aed80b4
Author: M Chetan Kumar <m.chetan.kumar@linux.intel.com>
Date:   Thu Nov 24 16:08:03 2022 +0530

    net: wwan: iosm: fix dma_alloc_coherent incompatible pointer type
    
    [ Upstream commit 4a99e3c8ed888577b947cbed97d88c9706896105 ]
    
    Fix build error reported on armhf while preparing 6.1-rc5
    for Debian.
    
    iosm_ipc_protocol.c:244:36: error: passing argument 3 of
    'dma_alloc_coherent' from incompatible pointer type.
    
    Change phy_ap_shm type from phys_addr_t to dma_addr_t.
    
    Fixes: faed4c6f6f48 ("net: iosm: shared memory protocol")
    Reported-by: Bonaccorso Salvatore <carnil@debian.org>
    Signed-off-by: M Chetan Kumar <m.chetan.kumar@linux.intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 766086ea8ca7c866b276bebde7abf9c711462c81
Author: M Chetan Kumar <m.chetan.kumar@linux.intel.com>
Date:   Thu Nov 24 16:08:03 2022 +0530

    net: wwan: iosm: fix dma_alloc_coherent incompatible pointer type
    
    [ Upstream commit 4a99e3c8ed888577b947cbed97d88c9706896105 ]
    
    Fix build error reported on armhf while preparing 6.1-rc5
    for Debian.
    
    iosm_ipc_protocol.c:244:36: error: passing argument 3 of
    'dma_alloc_coherent' from incompatible pointer type.
    
    Change phy_ap_shm type from phys_addr_t to dma_addr_t.
    
    Fixes: faed4c6f6f48 ("net: iosm: shared memory protocol")
    Reported-by: Bonaccorso Salvatore <carnil@debian.org>
    Signed-off-by: M Chetan Kumar <m.chetan.kumar@linux.intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d09e8ca6cb93bb4b97517a18fbbf7eccb0e9ff43
Author: Pasha Tatashin <pasha.tatashin@soleen.com>
Date:   Tue Nov 15 02:06:01 2022 +0000

    mm: anonymous shared memory naming
    
    Since commit 9a10064f5625 ("mm: add a field to store names for private
    anonymous memory"), name for private anonymous memory, but not shared
    anonymous, can be set.  However, naming shared anonymous memory just as
    useful for tracking purposes.
    
    Extend the functionality to be able to set names for shared anon.
    
    There are two ways to create anonymous shared memory, using memfd or
    directly via mmap():
    1. fd = memfd_create(...)
       mem = mmap(..., MAP_SHARED, fd, ...)
    2. mem = mmap(..., MAP_SHARED | MAP_ANONYMOUS, -1, ...)
    
    In both cases the anonymous shared memory is created the same way by
    mapping an unlinked file on tmpfs.
    
    The memfd way allows to give a name for anonymous shared memory, but
    not useful when parts of shared memory require to have distinct names.
    
    Example use case: The VMM maps VM memory as anonymous shared memory (not
    private because VMM is sandboxed and drivers are running in their own
    processes).  However, the VM tells back to the VMM how parts of the memory
    are actually used by the guest, how each of the segments should be backed
    (i.e.  4K pages, 2M pages), and some other information about the segments.
    The naming allows us to monitor the effective memory footprint for each
    of these segments from the host without looking inside the guest.
    
    Sample output:
      /* Create shared anonymous segmenet */
      anon_shmem = mmap(NULL, SIZE, PROT_READ | PROT_WRITE,
                        MAP_SHARED | MAP_ANONYMOUS, -1, 0);
      /* Name the segment: "MY-NAME" */
      rv = prctl(PR_SET_VMA, PR_SET_VMA_ANON_NAME,
                 anon_shmem, SIZE, "MY-NAME");
    
    cat /proc/<pid>/maps (and smaps):
    7fc8e2b4c000-7fc8f2b4c000 rw-s 00000000 00:01 1024 [anon_shmem:MY-NAME]
    
    If the segment is not named, the output is:
    7fc8e2b4c000-7fc8f2b4c000 rw-s 00000000 00:01 1024 /dev/zero (deleted)
    
    Link: https://lkml.kernel.org/r/20221115020602.804224-1-pasha.tatashin@soleen.com
    Signed-off-by: Pasha Tatashin <pasha.tatashin@soleen.com>
    Acked-by: David Hildenbrand <david@redhat.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Bagas Sanjaya <bagasdotme@gmail.com>
    Cc: Colin Cross <ccross@google.com>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: "Kirill A . Shutemov" <kirill@shutemov.name>
    Cc: Liam Howlett <liam.howlett@oracle.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Mike Rapoport <rppt@kernel.org>
    Cc: Paul Gortmaker <paul.gortmaker@windriver.com>
    Cc: Peter Xu <peterx@redhat.com>
    Cc: Sean Christopherson <seanjc@google.com>
    Cc: Vincent Whitchurch <vincent.whitchurch@axis.com>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: xu xin <cgel.zte@gmail.com>
    Cc: Yang Shi <shy828301@gmail.com>
    Cc: Yu Zhao <yuzhao@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>

commit 4a99e3c8ed888577b947cbed97d88c9706896105
Author: M Chetan Kumar <m.chetan.kumar@linux.intel.com>
Date:   Thu Nov 24 16:08:03 2022 +0530

    net: wwan: iosm: fix dma_alloc_coherent incompatible pointer type
    
    Fix build error reported on armhf while preparing 6.1-rc5
    for Debian.
    
    iosm_ipc_protocol.c:244:36: error: passing argument 3 of
    'dma_alloc_coherent' from incompatible pointer type.
    
    Change phy_ap_shm type from phys_addr_t to dma_addr_t.
    
    Fixes: faed4c6f6f48 ("net: iosm: shared memory protocol")
    Reported-by: Bonaccorso Salvatore <carnil@debian.org>
    Signed-off-by: M Chetan Kumar <m.chetan.kumar@linux.intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 583cc50f30005df85c9bd3a7eae9967c1ceafc1a
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Fri Oct 28 15:08:28 2022 +0100

    firmware: arm_scmi: Make tx_prepare time out eventually
    
    [ Upstream commit 59172b212ec0dbb97ceb5671d912e6e61fa802d5 ]
    
    SCMI transports based on shared memory, at start of transmissions, have
    to wait for the shared Tx channel area to be eventually freed by the
    SCMI platform before accessing the channel. In fact the channel is owned
    by the SCMI platform until marked as free by the platform itself and,
    as such, cannot be used by the agent until relinquished.
    
    As a consequence a badly misbehaving SCMI platform firmware could lock
    the channel indefinitely and make the kernel side SCMI stack loop
    forever waiting for such channel to be freed, possibly hanging the
    whole boot sequence.
    
    Add a timeout to the existent Tx waiting spin-loop so that, when the
    system ends up in this situation, the SCMI stack can at least bail-out,
    nosily warn the user, and abort the transmission.
    
    Reported-by: YaxiongTian <iambestgod@outlook.com>
    Suggested-by: YaxiongTian <iambestgod@outlook.com>
    Cc: Vincent Guittot <vincent.guittot@linaro.org>
    Cc: Etienne Carriere <etienne.carriere@linaro.org>
    Cc: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    Link: https://lore.kernel.org/r/20221028140833.280091-3-cristian.marussi@arm.com
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b6305049f30652f1efcf78d627fc6656151a7929
Author: Mike Kravetz <mike.kravetz@oracle.com>
Date:   Mon Nov 14 13:00:18 2022 -0800

    ipc/shm: call underlying open/close vm_ops
    
    Shared memory segments can be created that are backed by hugetlb pages.
    When this happens, the vmas associated with any mappings (shmat) are
    marked VM_HUGETLB, yet the vm_ops for such mappings are provided by
    ipc/shm (shm_vm_ops).  There is a mechanism to call the underlying hugetlb
    vm_ops, and this is done for most operations.  However, it is not done for
    open and close.
    
    This was not an issue until the introduction of the hugetlb vma_lock.
    This lock structure is pointed to by vm_private_data and the open/close
    vm_ops help maintain this structure.  The special hugetlb routine called
    at fork took care of structure updates at fork time.  However,
    vma_splitting is not properly handled for ipc shared memory mappings
    backed by hugetlb pages.  This can result in a "kernel NULL pointer
    dereference" BUG or use after free as two vmas point to the same lock
    structure.
    
    Update the shm open and close routines to always call the underlying open
    and close routines.
    
    Link: https://lkml.kernel.org/r/20221114210018.49346-1-mike.kravetz@oracle.com
    Fixes: 8d9bfb260814 ("hugetlb: add vma based lock for pmd sharing")
    Signed-off-by: Mike Kravetz <mike.kravetz@oracle.com>
    Reported-by: Doug Nelson <doug.nelson@intel.com>
    Reported-by: <syzbot+83b4134621b7c326d950@syzkaller.appspotmail.com>
    Cc: Alexander Mikhalitsyn <alexander.mikhalitsyn@virtuozzo.com>
    Cc: "Eric W . Biederman" <ebiederm@xmission.com>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Miaohe Lin <linmiaohe@huawei.com>
    Cc: Michal Hocko <mhocko@suse.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>

commit a6eeafba1141c48b0b38e96f1aa715de4035b6d5
Merge: 2a26daeeb851 198d4649b0b8
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Tue Nov 22 22:14:31 2022 +0100

    Merge tag 'tegra-for-6.2-firmware-v2' of git://git.kernel.org/pub/scm/linux/kernel/git/tegra/linux into soc/drivers
    
    firmware: tegra: Changes for v6.2-rc1
    
    This adds new BPMP ABI so that newer features can be enabled.
    Furthermore, the BPMP driver is updated to use iosys-map helpers to
    allow working with shared memory regions that are located in system
    memory.
    
    Apart from that, several minor cleanups are included.
    
    * tag 'tegra-for-6.2-firmware-v2' of git://git.kernel.org/pub/scm/linux/kernel/git/tegra/linux:
      firmware: tegra: Remove surplus dev_err() when using platform_get_irq_byname()
      firmware: tegra: Update BPMP ABI
      firmware: tegra: bpmp: Do not support big-endian
      firmware: tegra: bpmp: Use iosys-map helpers
      firmware: tegra: bpmp: Prefer u32 over uint32_t
    
    Link: https://lore.kernel.org/r/20221121171239.2041835-2-thierry.reding@gmail.com
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 1056d314709d0607a22e589c54b1e47e0da57b9d
Author: Perry Yuan <Perry.Yuan@amd.com>
Date:   Thu Nov 17 15:35:41 2022 +0800

    Documentation: add amd-pstate kernel command line options
    
    Add a new amd pstate driver command line option to enable driver passive
    working mode via MSR and shared memory interface to request desired
    performance within abstract scale and the power management firmware
    (SMU) convert the perf requests into actual hardware pstates.
    
    Also the `disable` parameter can disable the pstate driver loading by
    adding `amd_pstate=disable` to kernel command line.
    
    Acked-by: Huang Rui <ray.huang@amd.com>
    Reviewed-by: Gautham R. Shenoy <gautham.shenoy@amd.com>
    Tested-by: Wyes Karny <wyes.karny@amd.com>
    Signed-off-by: Perry Yuan <Perry.Yuan@amd.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit 202e683df37cdf4c38e06e56ac91cc170ef49058
Author: Perry Yuan <Perry.Yuan@amd.com>
Date:   Thu Nov 17 15:35:39 2022 +0800

    cpufreq: amd-pstate: add amd-pstate driver parameter for mode selection
    
    When the amd_pstate driver is built-in users still need a method to be
    able enable or disable it depending upon their circumstance.
    Add support for an early parameter to do this.
    
    There is some performance degradation on a number of ASICs in the
    passive mode. This performance issue was originally discovered in
    shared memory systems but it has been proven that certain workloads
    on MSR systems also suffer performance issues.
    Set the amd-pstate driver as disabled by default to temporarily
    mitigate the performance problem.
    
     1) with `amd_pstate=disable`, pstate driver will be disabled to load at
        kernel booting.
    
     2) with `amd_pstate=passive`, pstate driver will be enabled and loaded
        as non-autonomous working mode supported in the low-level power
        management firmware.
    
     3) If neither parameter is specified, the driver will be disabled by
        default to avoid triggering performance regressions in certain ASICs
    
    Acked-by: Huang Rui <ray.huang@amd.com>
    Reviewed-by: Gautham R. Shenoy <gautham.shenoy@amd.com>
    Tested-by: Wyes Karny <wyes.karny@amd.com>
    Signed-off-by: Perry Yuan <Perry.Yuan@amd.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit 38abcb0d68767ac64e5650cbf7daafb428002590
Author: Jonathan Neuschäfer <j.neuschaefer@gmx.net>
Date:   Sat Nov 5 19:59:08 2022 +0100

    ARM: dts: wpcm450: Add FIU SPI controller node
    
    Add the SPI controller (FIU, Flash Interface Unit) to the WPCM450
    devicetree, according to the newly defined binding, as well as the SHM
    (shared memory interface) syscon.
    
    Signed-off-by: Jonathan Neuschäfer <j.neuschaefer@gmx.net>
    Link: https://lore.kernel.org/r/20221105185911.1547847-6-j.neuschaefer@gmx.net
    Signed-off-by: Joel Stanley <joel@jms.id.au>

commit 836686e1a01d7e2fda6a5a18252243ff30a6e196
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Thu Sep 2 14:55:31 2021 -0700

    memcg: enable accounting of ipc resources
    
    commit 18319498fdd4cdf8c1c2c48cd432863b1f915d6f upstream.
    
    When user creates IPC objects it forces kernel to allocate memory for
    these long-living objects.
    
    It makes sense to account them to restrict the host's memory consumption
    from inside the memcg-limited container.
    
    This patch enables accounting for IPC shared memory segments, messages
    semaphores and semaphore's undo lists.
    
    Link: https://lkml.kernel.org/r/d6507b06-4df6-78f8-6c54-3ae86e3b5339@virtuozzo.com
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Reviewed-by: Shakeel Butt <shakeelb@google.com>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: Alexey Dobriyan <adobriyan@gmail.com>
    Cc: Andrei Vagin <avagin@gmail.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: Christian Brauner <christian.brauner@ubuntu.com>
    Cc: Dmitry Safonov <0x7f454c46@gmail.com>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: "J. Bruce Fields" <bfields@fieldses.org>
    Cc: Jeff Layton <jlayton@kernel.org>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: Jiri Slaby <jirislaby@kernel.org>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Kirill Tkhai <ktkhai@virtuozzo.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Roman Gushchin <guro@fb.com>
    Cc: Serge Hallyn <serge@hallyn.com>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vladimir Davydov <vdavydov.dev@gmail.com>
    Cc: Yutian Yang <nglaive@gmail.com>
    Cc: Zefan Li <lizefan.x@bytedance.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Luiz Capitulino <luizcap@amazon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bad83d55134e647a739ebef2082541963f2cbc92
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Thu Sep 2 14:55:31 2021 -0700

    memcg: enable accounting of ipc resources
    
    commit 18319498fdd4cdf8c1c2c48cd432863b1f915d6f upstream.
    
    When user creates IPC objects it forces kernel to allocate memory for
    these long-living objects.
    
    It makes sense to account them to restrict the host's memory consumption
    from inside the memcg-limited container.
    
    This patch enables accounting for IPC shared memory segments, messages
    semaphores and semaphore's undo lists.
    
    Link: https://lkml.kernel.org/r/d6507b06-4df6-78f8-6c54-3ae86e3b5339@virtuozzo.com
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Reviewed-by: Shakeel Butt <shakeelb@google.com>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: Alexey Dobriyan <adobriyan@gmail.com>
    Cc: Andrei Vagin <avagin@gmail.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: Christian Brauner <christian.brauner@ubuntu.com>
    Cc: Dmitry Safonov <0x7f454c46@gmail.com>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: "J. Bruce Fields" <bfields@fieldses.org>
    Cc: Jeff Layton <jlayton@kernel.org>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: Jiri Slaby <jirislaby@kernel.org>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Kirill Tkhai <ktkhai@virtuozzo.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Roman Gushchin <guro@fb.com>
    Cc: Serge Hallyn <serge@hallyn.com>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vladimir Davydov <vdavydov.dev@gmail.com>
    Cc: Yutian Yang <nglaive@gmail.com>
    Cc: Zefan Li <lizefan.x@bytedance.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Luiz Capitulino <luizcap@amazon.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fe4c63c1a4fa1be40102b9280e30dd0504de801b
Author: Moudy Ho <moudy.ho@mediatek.com>
Date:   Fri Oct 7 17:22:30 2022 +0800

    media: platform: mtk-mdp3: extend shared memory structure to 4-byte aligned
    
    The communication between MDP3 kernel driver and SCP is pass through
    a shared memory, and the data structure is defined in the "mtk-img-ipi.h".
    However, there is a 4-byte read limit in further SCP hardware, so the
    data structure should be in 4-byte aligned.
    
    Signed-off-by: Moudy Ho <moudy.ho@mediatek.com>
    Signed-off-by: Hans Verkuil <hverkuil-cisco@xs4all.nl>

commit 59172b212ec0dbb97ceb5671d912e6e61fa802d5
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Fri Oct 28 15:08:28 2022 +0100

    firmware: arm_scmi: Make tx_prepare time out eventually
    
    SCMI transports based on shared memory, at start of transmissions, have
    to wait for the shared Tx channel area to be eventually freed by the
    SCMI platform before accessing the channel. In fact the channel is owned
    by the SCMI platform until marked as free by the platform itself and,
    as such, cannot be used by the agent until relinquished.
    
    As a consequence a badly misbehaving SCMI platform firmware could lock
    the channel indefinitely and make the kernel side SCMI stack loop
    forever waiting for such channel to be freed, possibly hanging the
    whole boot sequence.
    
    Add a timeout to the existent Tx waiting spin-loop so that, when the
    system ends up in this situation, the SCMI stack can at least bail-out,
    nosily warn the user, and abort the transmission.
    
    Reported-by: YaxiongTian <iambestgod@outlook.com>
    Suggested-by: YaxiongTian <iambestgod@outlook.com>
    Cc: Vincent Guittot <vincent.guittot@linaro.org>
    Cc: Etienne Carriere <etienne.carriere@linaro.org>
    Cc: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    Link: https://lore.kernel.org/r/20221028140833.280091-3-cristian.marussi@arm.com
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>

commit 4c1e0a97351a5e88e7e503b40cdbe0f220039a5e
Author: Thierry Reding <treding@nvidia.com>
Date:   Thu Sep 22 15:41:24 2022 +0200

    firmware: tegra: bpmp: Use iosys-map helpers
    
    The shared memory used for inter-processor communication between the CPU
    and the BPMP can reside either in system memory or in I/O memory. Use
    the iosys-map helpers to abstract these differences away.
    
    Signed-off-by: Thierry Reding <treding@nvidia.com>

commit b7e2ce42f61bd72e903952427538e2411b3a1429
Author: Johan Hovold <johan+linaro@kernel.org>
Date:   Wed Sep 21 10:00:50 2022 +0200

    arm64: dts: qcom: sc8280xp: add rpmh-stats node
    
    Add a node describing the RPMh shared memory that can be used to
    retrieve statistics for the SoC low-power modes.
    
    Signed-off-by: Johan Hovold <johan+linaro@kernel.org>
    Reviewed-by: Krzysztof Kozlowski <krzysztof.kozlowski@linaro.org>
    Signed-off-by: Bjorn Andersson <andersson@kernel.org>
    Link: https://lore.kernel.org/r/20220921080050.21383-1-johan+linaro@kernel.org

commit c23f864dc7ef37655021c43beae98321436cbd9a
Merge: 78effb4a9b8c b83699ea1e62
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Aug 26 11:21:18 2022 -0700

    Merge tag 'loongarch-fixes-6.0-1' of git://git.kernel.org/pub/scm/linux/kernel/git/chenhuacai/linux-loongson
    
    Pull LoongArch fixes from Huacai Chen:
     "Fix a bunch of build errors/warnings, a poweroff error and an
      unbalanced locking in do_page_fault()"
    
    * tag 'loongarch-fixes-6.0-1' of git://git.kernel.org/pub/scm/linux/kernel/git/chenhuacai/linux-loongson:
      LoongArch: mm: Avoid unnecessary page fault retires on shared memory types
      LoongArch: Add subword xchg/cmpxchg emulation
      LoongArch: Cleanup headers to avoid circular dependency
      LoongArch: Cleanup reset routines with new API
      LoongArch: Fix build warnings in VDSO
      LoongArch: Select PCI_QUIRKS to avoid build error

commit b83699ea1e62951857c2d8648bd93a4744899eb7
Author: Huacai Chen <chenhuacai@loongson.cn>
Date:   Thu Aug 25 19:34:59 2022 +0800

    LoongArch: mm: Avoid unnecessary page fault retires on shared memory types
    
    Commit d92725256b4f22d0 ("mm: avoid unnecessary page fault retires on
    shared memory types") modifies do_page_fault() to handle the VM_FAULT_
    COMPLETED case, but forget to change for LoongArch, so fix it as other
    architectures does.
    
    Fixes: d92725256b4f22d0 ("mm: avoid unnecessary page fault retires on shared memory types")
    Reviewed-by: Guo Ren <guoren@kernel.org>
    Signed-off-by: Huacai Chen <chenhuacai@loongson.cn>

commit 778b6531fe2466ac049b8f89c6a160404a349030
Author: Mikko Perttunen <mperttunen@nvidia.com>
Date:   Fri Nov 12 13:35:39 2021 +0100

    arm64: tegra: Update Tegra234 BPMP channel addresses
    
    [ Upstream commit 98094be152d34f8014ca67fbdc210e5261c4b09d ]
    
    On final Tegra234 systems, shared memory for communication with BPMP is
    located at offset 0x70000 in SYSRAM.
    
    Signed-off-by: Mikko Perttunen <mperttunen@nvidia.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3e3114ac460e94825e34d1fed6a48a9ce4b07689
Author: Alexander Sverdlin <alexander.sverdlin@nokia.com>
Date:   Mon Jul 25 11:17:39 2022 +0200

    MIPS: Introduce CAVIUM_RESERVE32 Kconfig option
    
    This options is used to reserve a shared memory region for user processes
    to use for hardware memory buffers. The actual code to support the option
    comes in the following patch.
    
    Signed-off-by: Corey Minyard <cminyard@mvista.com>
    Signed-off-by: Alexander Sverdlin <alexander.sverdlin@nokia.com>
    Signed-off-by: Thomas Bogendoerfer <tsbogend@alpha.franken.de>

commit 89c3c9dd7e0331d4e2529e91f273bc31e3c04f33
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Wed Jul 13 12:53:46 2022 -0500

    ACPI: CPPC: Fix enabling CPPC on AMD systems with shared memory
    
    commit fbd74d16890b9f5d08ea69b5282b123c894f8860 upstream.
    
    When commit 72f2ecb7ece7 ("ACPI: bus: Set CPPC _OSC bits for all
    and when CPPC_LIB is supported") was introduced, we found collateral
    damage that a number of AMD systems that supported CPPC but
    didn't advertise support in _OSC stopped having a functional
    amd-pstate driver. The _OSC was only enforced on Intel systems at that
    time.
    
    This was fixed for the MSR based designs by commit 8b356e536e69f
    ("ACPI: CPPC: Don't require _OSC if X86_FEATURE_CPPC is supported")
    but some shared memory based designs also support CPPC but haven't
    advertised support in the _OSC.  Add support for those designs as well by
    hardcoding the list of systems.
    
    Fixes: 72f2ecb7ece7 ("ACPI: bus: Set CPPC _OSC bits for all and when CPPC_LIB is supported")
    Fixes: 8b356e536e69f ("ACPI: CPPC: Don't require _OSC if X86_FEATURE_CPPC is supported")
    Link: https://lore.kernel.org/all/3559249.JlDtxWtqDm@natalenko.name/
    Cc: 5.18+ <stable@vger.kernel.org> # 5.18+
    Reported-and-tested-by: Oleksandr Natalenko <oleksandr@natalenko.name>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 16c957f089d520893b0b08e06641329fbcec492d
Merge: be9b7b6acfea fbd74d16890b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat Jul 16 10:52:41 2022 -0700

    Merge tag 'acpi-5.19-rc7' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm
    
    Pull ACPI fix from Rafael Wysocki:
     "Fix more fallout from recent changes of the ACPI CPPC handling on AMD
      platforms (Mario Limonciello)"
    
    * tag 'acpi-5.19-rc7' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm:
      ACPI: CPPC: Fix enabling CPPC on AMD systems with shared memory

commit fbd74d16890b9f5d08ea69b5282b123c894f8860
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Wed Jul 13 12:53:46 2022 -0500

    ACPI: CPPC: Fix enabling CPPC on AMD systems with shared memory
    
    When commit 72f2ecb7ece7 ("ACPI: bus: Set CPPC _OSC bits for all
    and when CPPC_LIB is supported") was introduced, we found collateral
    damage that a number of AMD systems that supported CPPC but
    didn't advertise support in _OSC stopped having a functional
    amd-pstate driver. The _OSC was only enforced on Intel systems at that
    time.
    
    This was fixed for the MSR based designs by commit 8b356e536e69f
    ("ACPI: CPPC: Don't require _OSC if X86_FEATURE_CPPC is supported")
    but some shared memory based designs also support CPPC but haven't
    advertised support in the _OSC.  Add support for those designs as well by
    hardcoding the list of systems.
    
    Fixes: 72f2ecb7ece7 ("ACPI: bus: Set CPPC _OSC bits for all and when CPPC_LIB is supported")
    Fixes: 8b356e536e69f ("ACPI: CPPC: Don't require _OSC if X86_FEATURE_CPPC is supported")
    Link: https://lore.kernel.org/all/3559249.JlDtxWtqDm@natalenko.name/
    Cc: 5.18+ <stable@vger.kernel.org> # 5.18+
    Reported-and-tested-by: Oleksandr Natalenko <oleksandr@natalenko.name>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit 2783414e6ef725bac946dc5d4d9288e34b6f5a13
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Tue Jul 5 13:29:15 2022 -0500

    ACPI: CPPC: Don't require _OSC if X86_FEATURE_CPPC is supported
    
    [ Upstream commit 8b356e536e69f3a4d6778ae9f0858a1beadabb1f ]
    
    commit 72f2ecb7ece7 ("ACPI: bus: Set CPPC _OSC bits for all and
    when CPPC_LIB is supported") added support for claiming to
    support CPPC in _OSC on non-Intel platforms.
    
    This unfortunately caused a regression on a vartiety of AMD
    platforms in the field because a number of AMD platforms don't set
    the `_OSC` bit 5 or 6 to indicate CPPC or CPPC v2 support.
    
    As these AMD platforms already claim CPPC support via a dedicated
    MSR from `X86_FEATURE_CPPC`, use this enable this feature rather
    than requiring the `_OSC` on platforms with a dedicated MSR.
    
    If there is additional breakage on the shared memory designs also
    missing this _OSC, additional follow up changes may be needed.
    
    Fixes: 72f2ecb7ece7 ("Set CPPC _OSC bits for all and when CPPC_LIB is supported")
    Reported-by: Perry Yuan <perry.yuan@amd.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8b356e536e69f3a4d6778ae9f0858a1beadabb1f
Author: Mario Limonciello <mario.limonciello@amd.com>
Date:   Tue Jul 5 13:29:15 2022 -0500

    ACPI: CPPC: Don't require _OSC if X86_FEATURE_CPPC is supported
    
    commit 72f2ecb7ece7 ("ACPI: bus: Set CPPC _OSC bits for all and
    when CPPC_LIB is supported") added support for claiming to
    support CPPC in _OSC on non-Intel platforms.
    
    This unfortunately caused a regression on a vartiety of AMD
    platforms in the field because a number of AMD platforms don't set
    the `_OSC` bit 5 or 6 to indicate CPPC or CPPC v2 support.
    
    As these AMD platforms already claim CPPC support via a dedicated
    MSR from `X86_FEATURE_CPPC`, use this enable this feature rather
    than requiring the `_OSC` on platforms with a dedicated MSR.
    
    If there is additional breakage on the shared memory designs also
    missing this _OSC, additional follow up changes may be needed.
    
    Fixes: 72f2ecb7ece7 ("Set CPPC _OSC bits for all and when CPPC_LIB is supported")
    Reported-by: Perry Yuan <perry.yuan@amd.com>
    Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit e699eb9b4f1b98be08197d699e5c34a8b576b26f
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Mon Jul 4 11:22:39 2022 +0100

    include: trace: Add SCMI fast channel tracing
    
    All the currently defined SCMI events are meant to trace only regular SCMI
    transfers based on SCMI messages exchanges; SCMI transactions based on
    fast channels, where used, are completely invisible from the tracing point
    of view.
    
    Add support to trace fast channel transactions; while doing that avoid
    exposing full shared memory location addresses.
    
    Link: https://lore.kernel.org/r/20220704102241.2988447-6-cristian.marussi@arm.com
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>

commit e378b965330d99e8622eb369021d0dac01591046
Author: Rohit Agarwal <quic_rohiagar@quicinc.com>
Date:   Mon May 2 14:07:45 2022 +0530

    ARM: dts: qcom: sdx65: Add Shared memory manager support
    
    Add smem node to support shared memory manager on SDX65 platform.
    
    Signed-off-by: Rohit Agarwal <quic_rohiagar@quicinc.com>
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Link: https://lore.kernel.org/r/1651480665-14978-5-git-send-email-quic_rohiagar@quicinc.com

commit 75c8f430d8596cf16634337fec8aec50e7b0feed
Author: Vincent Guittot <vincent.guittot@linaro.org>
Date:   Fri Jun 24 09:45:49 2022 +0200

    firmware: arm_scmi: Fix response size warning for OPTEE transport
    
    Some protocols check the response size with the expected value but optee
    shared memory doesn't return such size whereas it is available in the
    optee output buffer.
    
    As an example, the base protocol compares the response size with the
    expected result when requesting the list of protocol which triggers a
    warning with optee shared memory:
    
    arm-scmi firmware:scmi0: Malformed reply - real_sz:116  calc_sz:4  (loop_num_ret:4)
    
    Save the output buffer length and use it when fetching the answer.
    
    Link: https://lore.kernel.org/r/20220624074549.3298-1-vincent.guittot@linaro.org
    Reviewed-by: Etienne Carriere <etienne.carriere@linaro.org>
    Reviewed-by: Cristian Marussi <cristian.marussi@arm.com>
    Signed-off-by: Vincent Guittot <vincent.guittot@linaro.org>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>

commit d92725256b4f22d084b813b37ddc394da79aacab
Author: Peter Xu <peterx@redhat.com>
Date:   Mon May 30 14:34:50 2022 -0400

    mm: avoid unnecessary page fault retires on shared memory types
    
    I observed that for each of the shared file-backed page faults, we're very
    likely to retry one more time for the 1st write fault upon no page.  It's
    because we'll need to release the mmap lock for dirty rate limit purpose
    with balance_dirty_pages_ratelimited() (in fault_dirty_shared_page()).
    
    Then after that throttling we return VM_FAULT_RETRY.
    
    We did that probably because VM_FAULT_RETRY is the only way we can return
    to the fault handler at that time telling it we've released the mmap lock.
    
    However that's not ideal because it's very likely the fault does not need
    to be retried at all since the pgtable was well installed before the
    throttling, so the next continuous fault (including taking mmap read lock,
    walk the pgtable, etc.) could be in most cases unnecessary.
    
    It's not only slowing down page faults for shared file-backed, but also add
    more mmap lock contention which is in most cases not needed at all.
    
    To observe this, one could try to write to some shmem page and look at
    "pgfault" value in /proc/vmstat, then we should expect 2 counts for each
    shmem write simply because we retried, and vm event "pgfault" will capture
    that.
    
    To make it more efficient, add a new VM_FAULT_COMPLETED return code just to
    show that we've completed the whole fault and released the lock.  It's also
    a hint that we should very possibly not need another fault immediately on
    this page because we've just completed it.
    
    This patch provides a ~12% perf boost on my aarch64 test VM with a simple
    program sequentially dirtying 400MB shmem file being mmap()ed and these are
    the time it needs:
    
      Before: 650.980 ms (+-1.94%)
      After:  569.396 ms (+-1.38%)
    
    I believe it could help more than that.
    
    We need some special care on GUP and the s390 pgfault handler (for gmap
    code before returning from pgfault), the rest changes in the page fault
    handlers should be relatively straightforward.
    
    Another thing to mention is that mm_account_fault() does take this new
    fault as a generic fault to be accounted, unlike VM_FAULT_RETRY.
    
    I explicitly didn't touch hmm_vma_fault() and break_ksm() because they do
    not handle VM_FAULT_RETRY even with existing code, so I'm literally keeping
    them as-is.
    
    Link: https://lkml.kernel.org/r/20220530183450.42886-1-peterx@redhat.com
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Acked-by: Geert Uytterhoeven <geert@linux-m68k.org>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Acked-by: Johannes Weiner <hannes@cmpxchg.org>
    Acked-by: Vineet Gupta <vgupta@kernel.org>
    Acked-by: Guo Ren <guoren@kernel.org>
    Acked-by: Max Filippov <jcmvbkbc@gmail.com>
    Acked-by: Christian Borntraeger <borntraeger@linux.ibm.com>
    Acked-by: Michael Ellerman <mpe@ellerman.id.au> (powerpc)
    Acked-by: Catalin Marinas <catalin.marinas@arm.com>
    Reviewed-by: Alistair Popple <apopple@nvidia.com>
    Reviewed-by: Ingo Molnar <mingo@kernel.org>
    Acked-by: Russell King (Oracle) <rmk+kernel@armlinux.org.uk>    [arm part]
    Acked-by: Heiko Carstens <hca@linux.ibm.com>
    Cc: Vasily Gorbik <gor@linux.ibm.com>
    Cc: Stafford Horne <shorne@gmail.com>
    Cc: David S. Miller <davem@davemloft.net>
    Cc: Johannes Berg <johannes@sipsolutions.net>
    Cc: Brian Cain <bcain@quicinc.com>
    Cc: Richard Henderson <rth@twiddle.net>
    Cc: Richard Weinberger <richard@nod.at>
    Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Janosch Frank <frankja@linux.ibm.com>
    Cc: Albert Ou <aou@eecs.berkeley.edu>
    Cc: Anton Ivanov <anton.ivanov@cambridgegreys.com>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Sven Schnelle <svens@linux.ibm.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: James Bottomley <James.Bottomley@HansenPartnership.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Alexander Gordeev <agordeev@linux.ibm.com>
    Cc: Jonas Bonn <jonas@southpole.se>
    Cc: Will Deacon <will@kernel.org>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: Michal Simek <monstr@monstr.eu>
    Cc: Matt Turner <mattst88@gmail.com>
    Cc: Paul Mackerras <paulus@samba.org>
    Cc: David Hildenbrand <david@redhat.com>
    Cc: Nicholas Piggin <npiggin@gmail.com>
    Cc: Palmer Dabbelt <palmer@dabbelt.com>
    Cc: Stefan Kristiansson <stefan.kristiansson@saunalahti.fi>
    Cc: Paul Walmsley <paul.walmsley@sifive.com>
    Cc: Ivan Kokshaysky <ink@jurassic.park.msu.ru>
    Cc: Chris Zankel <chris@zankel.net>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: Dinh Nguyen <dinguyen@kernel.org>
    Cc: Rich Felker <dalias@libc.org>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Cc: Helge Deller <deller@gmx.de>
    Cc: Yoshinori Sato <ysato@users.osdn.me>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>

commit f24d3317b5509baf8707e0c8e78456d573d0ca3c
Author: Kristen Carlson Accardi <kristen@linux.intel.com>
Date:   Fri May 20 10:42:47 2022 -0700

    x86/sgx: Set active memcg prior to shmem allocation
    
    commit 0c9782e204d3cc5625b9e8bf4e8625d38dfe0139 upstream.
    
    When the system runs out of enclave memory, SGX can reclaim EPC pages
    by swapping to normal RAM. These backing pages are allocated via a
    per-enclave shared memory area. Since SGX allows unlimited over
    commit on EPC memory, the reclaimer thread can allocate a large
    number of backing RAM pages in response to EPC memory pressure.
    
    When the shared memory backing RAM allocation occurs during
    the reclaimer thread context, the shared memory is charged to
    the root memory control group, and the shmem usage of the enclave
    is not properly accounted for, making cgroups ineffective at
    limiting the amount of RAM an enclave can consume.
    
    For example, when using a cgroup to launch a set of test
    enclaves, the kernel does not properly account for 50% - 75% of
    shmem page allocations on average. In the worst case, when
    nearly all allocations occur during the reclaimer thread, the
    kernel accounts less than a percent of the amount of shmem used
    by the enclave's cgroup to the correct cgroup.
    
    SGX stores a list of mm_structs that are associated with
    an enclave. Pick one of them during reclaim and charge that
    mm's memcg with the shmem allocation. The one that gets picked
    is arbitrary, but this list almost always only has one mm. The
    cases where there is more than one mm with different memcg's
    are not worth considering.
    
    Create a new function - sgx_encl_alloc_backing(). This function
    is used whenever a new backing storage page needs to be
    allocated. Previously the same function was used for page
    allocation as well as retrieving a previously allocated page.
    Prior to backing page allocation, if there is a mm_struct associated
    with the enclave that is requesting the allocation, it is set
    as the active memory control group.
    
    [ dhansen: - fix merge conflict with ELDU fixes
               - check against actual ksgxd_tsk, not ->mm ]
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Kristen Carlson Accardi <kristen@linux.intel.com>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Reviewed-by: Shakeel Butt <shakeelb@google.com>
    Acked-by: Roman Gushchin <roman.gushchin@linux.dev>
    Link: https://lkml.kernel.org/r/20220520174248.4918-1-kristen@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 05b0cf0b4a114821d5c1dee867afa8a3d09895f1
Author: Kristen Carlson Accardi <kristen@linux.intel.com>
Date:   Fri May 20 10:42:47 2022 -0700

    x86/sgx: Set active memcg prior to shmem allocation
    
    commit 0c9782e204d3cc5625b9e8bf4e8625d38dfe0139 upstream.
    
    When the system runs out of enclave memory, SGX can reclaim EPC pages
    by swapping to normal RAM. These backing pages are allocated via a
    per-enclave shared memory area. Since SGX allows unlimited over
    commit on EPC memory, the reclaimer thread can allocate a large
    number of backing RAM pages in response to EPC memory pressure.
    
    When the shared memory backing RAM allocation occurs during
    the reclaimer thread context, the shared memory is charged to
    the root memory control group, and the shmem usage of the enclave
    is not properly accounted for, making cgroups ineffective at
    limiting the amount of RAM an enclave can consume.
    
    For example, when using a cgroup to launch a set of test
    enclaves, the kernel does not properly account for 50% - 75% of
    shmem page allocations on average. In the worst case, when
    nearly all allocations occur during the reclaimer thread, the
    kernel accounts less than a percent of the amount of shmem used
    by the enclave's cgroup to the correct cgroup.
    
    SGX stores a list of mm_structs that are associated with
    an enclave. Pick one of them during reclaim and charge that
    mm's memcg with the shmem allocation. The one that gets picked
    is arbitrary, but this list almost always only has one mm. The
    cases where there is more than one mm with different memcg's
    are not worth considering.
    
    Create a new function - sgx_encl_alloc_backing(). This function
    is used whenever a new backing storage page needs to be
    allocated. Previously the same function was used for page
    allocation as well as retrieving a previously allocated page.
    Prior to backing page allocation, if there is a mm_struct associated
    with the enclave that is requesting the allocation, it is set
    as the active memory control group.
    
    [ dhansen: - fix merge conflict with ELDU fixes
               - check against actual ksgxd_tsk, not ->mm ]
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Kristen Carlson Accardi <kristen@linux.intel.com>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Reviewed-by: Shakeel Butt <shakeelb@google.com>
    Acked-by: Roman Gushchin <roman.gushchin@linux.dev>
    Link: https://lkml.kernel.org/r/20220520174248.4918-1-kristen@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 260650ddc864e73cacc5f2f610935d76beb4019f
Author: Kristen Carlson Accardi <kristen@linux.intel.com>
Date:   Fri May 20 10:42:47 2022 -0700

    x86/sgx: Set active memcg prior to shmem allocation
    
    commit 0c9782e204d3cc5625b9e8bf4e8625d38dfe0139 upstream.
    
    When the system runs out of enclave memory, SGX can reclaim EPC pages
    by swapping to normal RAM. These backing pages are allocated via a
    per-enclave shared memory area. Since SGX allows unlimited over
    commit on EPC memory, the reclaimer thread can allocate a large
    number of backing RAM pages in response to EPC memory pressure.
    
    When the shared memory backing RAM allocation occurs during
    the reclaimer thread context, the shared memory is charged to
    the root memory control group, and the shmem usage of the enclave
    is not properly accounted for, making cgroups ineffective at
    limiting the amount of RAM an enclave can consume.
    
    For example, when using a cgroup to launch a set of test
    enclaves, the kernel does not properly account for 50% - 75% of
    shmem page allocations on average. In the worst case, when
    nearly all allocations occur during the reclaimer thread, the
    kernel accounts less than a percent of the amount of shmem used
    by the enclave's cgroup to the correct cgroup.
    
    SGX stores a list of mm_structs that are associated with
    an enclave. Pick one of them during reclaim and charge that
    mm's memcg with the shmem allocation. The one that gets picked
    is arbitrary, but this list almost always only has one mm. The
    cases where there is more than one mm with different memcg's
    are not worth considering.
    
    Create a new function - sgx_encl_alloc_backing(). This function
    is used whenever a new backing storage page needs to be
    allocated. Previously the same function was used for page
    allocation as well as retrieving a previously allocated page.
    Prior to backing page allocation, if there is a mm_struct associated
    with the enclave that is requesting the allocation, it is set
    as the active memory control group.
    
    [ dhansen: - fix merge conflict with ELDU fixes
               - check against actual ksgxd_tsk, not ->mm ]
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Kristen Carlson Accardi <kristen@linux.intel.com>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Reviewed-by: Shakeel Butt <shakeelb@google.com>
    Acked-by: Roman Gushchin <roman.gushchin@linux.dev>
    Link: https://lkml.kernel.org/r/20220520174248.4918-1-kristen@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0c9782e204d3cc5625b9e8bf4e8625d38dfe0139
Author: Kristen Carlson Accardi <kristen@linux.intel.com>
Date:   Fri May 20 10:42:47 2022 -0700

    x86/sgx: Set active memcg prior to shmem allocation
    
    When the system runs out of enclave memory, SGX can reclaim EPC pages
    by swapping to normal RAM. These backing pages are allocated via a
    per-enclave shared memory area. Since SGX allows unlimited over
    commit on EPC memory, the reclaimer thread can allocate a large
    number of backing RAM pages in response to EPC memory pressure.
    
    When the shared memory backing RAM allocation occurs during
    the reclaimer thread context, the shared memory is charged to
    the root memory control group, and the shmem usage of the enclave
    is not properly accounted for, making cgroups ineffective at
    limiting the amount of RAM an enclave can consume.
    
    For example, when using a cgroup to launch a set of test
    enclaves, the kernel does not properly account for 50% - 75% of
    shmem page allocations on average. In the worst case, when
    nearly all allocations occur during the reclaimer thread, the
    kernel accounts less than a percent of the amount of shmem used
    by the enclave's cgroup to the correct cgroup.
    
    SGX stores a list of mm_structs that are associated with
    an enclave. Pick one of them during reclaim and charge that
    mm's memcg with the shmem allocation. The one that gets picked
    is arbitrary, but this list almost always only has one mm. The
    cases where there is more than one mm with different memcg's
    are not worth considering.
    
    Create a new function - sgx_encl_alloc_backing(). This function
    is used whenever a new backing storage page needs to be
    allocated. Previously the same function was used for page
    allocation as well as retrieving a previously allocated page.
    Prior to backing page allocation, if there is a mm_struct associated
    with the enclave that is requesting the allocation, it is set
    as the active memory control group.
    
    [ dhansen: - fix merge conflict with ELDU fixes
               - check against actual ksgxd_tsk, not ->mm ]
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Kristen Carlson Accardi <kristen@linux.intel.com>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Reviewed-by: Shakeel Butt <shakeelb@google.com>
    Acked-by: Roman Gushchin <roman.gushchin@linux.dev>
    Link: https://lkml.kernel.org/r/20220520174248.4918-1-kristen@linux.intel.com

commit 3a755ebcc2557e22b895b8976257f682c653db1d
Merge: 5b828263b180 c796f02162e4
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon May 23 17:51:12 2022 -0700

    Merge tag 'x86_tdx_for_v5.19_rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull Intel TDX support from Borislav Petkov:
     "Intel Trust Domain Extensions (TDX) support.
    
      This is the Intel version of a confidential computing solution called
      Trust Domain Extensions (TDX). This series adds support to run the
      kernel as part of a TDX guest. It provides similar guest protections
      to AMD's SEV-SNP like guest memory and register state encryption,
      memory integrity protection and a lot more.
    
      Design-wise, it differs from AMD's solution considerably: it uses a
      software module which runs in a special CPU mode called (Secure
      Arbitration Mode) SEAM. As the name suggests, this module serves as
      sort of an arbiter which the confidential guest calls for services it
      needs during its lifetime.
    
      Just like AMD's SNP set, this series reworks and streamlines certain
      parts of x86 arch code so that this feature can be properly
      accomodated"
    
    * tag 'x86_tdx_for_v5.19_rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (34 commits)
      x86/tdx: Fix RETs in TDX asm
      x86/tdx: Annotate a noreturn function
      x86/mm: Fix spacing within memory encryption features message
      x86/kaslr: Fix build warning in KASLR code in boot stub
      Documentation/x86: Document TDX kernel architecture
      ACPICA: Avoid cache flush inside virtual machines
      x86/tdx/ioapic: Add shared bit for IOAPIC base address
      x86/mm: Make DMA memory shared for TD guest
      x86/mm/cpa: Add support for TDX shared memory
      x86/tdx: Make pages shared in ioremap()
      x86/topology: Disable CPU online/offline control for TDX guests
      x86/boot: Avoid #VE during boot for TDX platforms
      x86/boot: Set CR0.NE early and keep it set during the boot
      x86/acpi/x86/boot: Add multiprocessor wake-up support
      x86/boot: Add a trampoline for booting APs via firmware handoff
      x86/tdx: Wire up KVM hypercalls
      x86/tdx: Port I/O: Add early boot support
      x86/tdx: Port I/O: Add runtime hypercalls
      x86/boot: Port I/O: Add decompression-time support for TDX
      x86/boot: Port I/O: Allow to hook up alternative helpers
      ...

commit 46ee6bcac9838b7f74ff91f9cf38511c901ea9c5
Merge: bcfa9546500a 13b9b814da2d
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu May 19 16:55:13 2022 +0200

    Merge tag 'mhi-for-v5.19' of git://git.kernel.org/pub/scm/linux/kernel/git/mani/mhi into char-work-next
    
    Manivannan writes:
    
    MHI changes for v5.19
    
    MHI Host
    --------
    
    Support for new modems:
    
     - Foxconn Cinterion MV32-WA/MV32-WB based on SDX62/SDX65
     - Telit FN980 v1 based on SDX55
     - Telit FN990 based on SDX65
     - Foxconn T99W373/T99W368 based on SDX62/SDX65
    
    Core changes:
    
     - During the recycle of event ring elements, compute the ctxt_wp based on the
       local cached value instead of reading from shared memory. This is to prevent
       the possible corruption of the ctxt_wp as some of the endpoint devices could
       modify the value in shared memory.
    
     - Add sysfs support for resetting the endpoint based on the MHI spec. The MHI
       spec allows the host to hard reset the device in the case of an unrecoverable
       error and all other reset mechanisms have failed.
    
     - During MHI shutdown, wait for the endpoint device to enter the ready state
       post reset before proceeding. This is to avoid a possible race where host
       would remove the interrupt handler and device will send ready state
       interrupt, resulting in IOMMU fault.
    
     - Bail out updating the MHI register if the read has failed during
       read/modify/write.
    
     - Use mhi_write_reg() instead of mhi_write_reg_field() for writing the whole
       register fields in mhi_init_mmio().
    
    MAINTAINERS change:
    
     - Since Qualcomm has moved the email domain for its employess from codeaurora
       domain to quicinc, update the same for Hemant.
    
    * tag 'mhi-for-v5.19' of git://git.kernel.org/pub/scm/linux/kernel/git/mani/mhi: (29 commits)
      bus: mhi: host: Add support for Foxconn T99W373 and T99W368
      bus: mhi: host: pci_generic: add Telit FN990
      bus: mhi: host: pci_generic: add Telit FN980 v1 hardware revision
      bus: mhi: host: Add support for Cinterion MV32-WA/MV32-WB
      bus: mhi: host: Optimize and update MMIO register write method
      bus: mhi: host: Bail on writing register fields if read fails
      bus: mhi: host: Wait for ready state after reset
      bus: mhi: host: Add soc_reset sysfs
      bus: mhi: host: pci_generic: Sort mhi_pci_id_table based on the PID
      bus: mhi: host: Use cached values for calculating the shared write pointer
      MAINTAINERS: Update Hemant's email id
      bus: mhi: ep: Add uevent support for module autoloading
      bus: mhi: ep: Add support for suspending and resuming channels
      bus: mhi: ep: Add support for queueing SKBs to the host
      bus: mhi: ep: Add support for processing channel rings
      bus: mhi: ep: Add support for reading from the host
      bus: mhi: ep: Add support for processing command rings
      bus: mhi: ep: Add support for handling SYS_ERR condition
      bus: mhi: ep: Add support for handling MHI_RESET
      bus: mhi: ep: Add support for powering down the MHI endpoint stack
      ...

commit 152555b39cebda84a02e2553fde3a5ab5c51e741
Author: Filipe Manana <fdmanana@suse.com>
Date:   Tue May 17 11:47:30 2022 +0100

    btrfs: send: avoid trashing the page cache
    
    A send operation reads extent data using the buffered IO path for getting
    extent data to send in write commands and this is both because it's simple
    and to make use of the generic readahead infrastructure, which results in
    a massive speedup.
    
    However this fills the page cache with data that, most of the time, is
    really only used by the send operation - once the write commands are sent,
    it's not useful to have the data in the page cache anymore. For large
    snapshots, bringing all data into the page cache eventually leads to the
    need to evict other data from the page cache that may be more useful for
    applications (and kernel subsystems).
    
    Even if extents are shared with the subvolume on which a snapshot is based
    on and the data is currently on the page cache due to being read through
    the subvolume, attempting to read the data through the snapshot will
    always result in bringing a new copy of the data into another location in
    the page cache (there's currently no shared memory for shared extents).
    
    So make send evict the data it has read before if when it first opened
    the inode, its mapping had no pages currently loaded: when
    inode->i_mapping->nr_pages has a value of 0. Do this instead of deciding
    based on the return value of filemap_range_has_page() before reading an
    extent because the generic readahead mechanism may read pages beyond the
    range we request (and it very often does it), which means a call to
    filemap_range_has_page() will return true due to the readahead that was
    triggered when processing a previous extent - we don't have a simple way
    to distinguish this case from the case where the data was brought into
    the page cache through someone else. So checking for the mapping number
    of pages being 0 when we first open the inode is simple, cheap and it
    generally accomplishes the goal of not trashing the page cache - the
    only exception is if part of data was previously loaded into the page
    cache through the snapshot by some other process, in that case we end
    up not evicting any data send brings into the page cache, just like
    before this change - but that however is not the common case.
    
    Example scenario, on a box with 32G of RAM:
    
      $ btrfs subvolume create /mnt/sv1
      $ xfs_io -f -c "pwrite 0 4G" /mnt/sv1/file1
    
      $ btrfs subvolume snapshot -r /mnt/sv1 /mnt/snap1
    
      $ free -m
                     total        used        free      shared  buff/cache   available
      Mem:           31937         186       26866           0        4883       31297
      Swap:           8188           0        8188
    
      # After this we get less 4G of free memory.
      $ btrfs send /mnt/snap1 >/dev/null
    
      $ free -m
                     total        used        free      shared  buff/cache   available
      Mem:           31937         186       22814           0        8935       31297
      Swap:           8188           0        8188
    
    The same, obviously, applies to an incremental send.
    
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Reviewed-by: David Sterba <dsterba@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>

commit 8794b4f510f722f37ae6b583e4b12b1af2fb692a
Merge: ec2cff6cbdbe 20492a62b99b
Author: Marc Zyngier <maz@kernel.org>
Date:   Mon May 16 17:48:36 2022 +0100

    Merge branch kvm-arm64/per-vcpu-host-pmu-data into kvmarm-master/next
    
    * kvm-arm64/per-vcpu-host-pmu-data:
      : .
      : Pass the host PMU state in the vcpu to avoid the use of additional
      : shared memory between EL1 and EL2 (this obviously only applies
      : to nVHE and Protected setups).
      :
      : Patches courtesy of Fuad Tabba.
      : .
      KVM: arm64: pmu: Restore compilation when HW_PERF_EVENTS isn't selected
      KVM: arm64: Reenable pmu in Protected Mode
      KVM: arm64: Pass pmu events to hyp via vcpu
      KVM: arm64: Repack struct kvm_pmu to reduce size
      KVM: arm64: Wrapper for getting pmu_events
    
    Signed-off-by: Marc Zyngier <maz@kernel.org>

commit 9db69df4bdd37eb1f65b6931ee067fb15b9a4d5c
Author: TingHan Shen <tinghan.shen@mediatek.com>
Date:   Thu May 12 16:22:13 2022 +0800

    firmware: mediatek: Add adsp ipc protocol interface
    
    Some of mediatek processors contain
    the Tensilica HiFix DSP for audio processing.
    
    The communication between Host CPU and DSP firmware is
    taking place using a shared memory area for message passing.
    
    ADSP IPC protocol offers (send/recv) interfaces using
    mediatek-mailbox APIs.
    
    We use two mbox channels to implement a request-reply protocol.
    
    Signed-off-by: Allen-KH Cheng <allen-kh.cheng@mediatek.com>
    Signed-off-by: TingHan Shen <tinghan.shen@mediatek.com>
    Reviewed-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Reviewed-by: Curtis Malainey <cujomalainey@chromium.org>
    Reviewed-by: Tzung-Bi Shih <tzungbi@google.com>
    Reviewed-by: YC Hung <yc.hung@mediatek.com>
    Reviewed-by: AngeloGioacchino Del Regno <angelogioacchino.delregno@collabora.com>
    Link: https://lore.kernel.org/r/20220512082215.3018-2-tinghan.shen@mediatek.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 6c6012ab96fd9e9ffbd90ece0e7e41255d634a3c
Merge: a4f7f93180a7 5b4018b95914
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu May 5 16:01:21 2022 +0200

    Merge tag 'optee-rpc-arg-for-v5.19' of https://git.linaro.org/people/jens.wiklander/linux-tee into arm/drivers
    
    OP-TEE RPC argument cache
    
    Adds caching of the OP-TEE argument structure used to pass request to
    secure world. This reduces quite a bit of unnecessary alloc/free and
    possibly switching back and forth to secure work in order to register
    the buffers in some configurations, most notably FF-A.
    
    * tag 'optee-rpc-arg-for-v5.19' of https://git.linaro.org/people/jens.wiklander/linux-tee:
      optee: cache argument shared memory structs
      optee: add FF-A capability OPTEE_FFA_SEC_CAP_ARG_OFFSET
      optee: add OPTEE_SMC_CALL_WITH_RPC_ARG and OPTEE_SMC_CALL_WITH_REGD_ARG
      optee: rename rpc_arg_count to rpc_param_count
    
    Link: https://lore.kernel.org/r/20220504201759.GA180315@jade
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit a4f7f93180a725d85a1156c7dbb86addd4e48fc3
Merge: 91f92d70387b c7f8852d4216
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu May 5 16:00:19 2022 +0200

    Merge tag 'scmi-updates-5.19' of git://git.kernel.org/pub/scm/linux/kernel/git/sudeep.holla/linux into arm/drivers
    
    Arm SCMI firmware driver updates/fixes for v5.19
    
    The main theme for most of the changes this time is around the addition
    of the support for SCMI v3.1 specification changes. Though one of the main
    addition in the specification is the powercap protocol, that is still
    work in progress and this set includes all other changes bit and pieces
    scattered all around the different parts of the specification. There are
    few bugs discovered during the process and associated fixes and some
    refactoring to simplify the addition of v3.1 support. It mainly includes
    the support for extended names, few newly added notifications and async
    command support.
    
    Apart from v3.1 SCMI changes, OPTEE transport gets support for dynamic
    shared memory.
    
    * tag 'scmi-updates-5.19' of git://git.kernel.org/pub/scm/linux/kernel/git/sudeep.holla/linux: (24 commits)
      firmware: arm_scmi: Fix late checks on pointer dereference
      firmware: arm_scmi: Support optee shared memory in the optee transport
      firmware: arm_scmi: Add SCMI v3.1 VOLTAGE_LEVEL_SET_COMPLETE
      firmware: arm_scmi: Add SCMI v3.1 clock notifications
      firmware: arm_scmi: Add checks for min/max limits in PERFORMANCE_LIMITS_SET
      firmware: arm_scmi: Add SCMI v3.1 perf power-cost in microwatts
      firmware: arm_scmi: Use common iterators in the perf protocol
      firmware: arm_scmi: Use common iterators in the voltage protocol
      firmware: arm_scmi: Use common iterators in the clock protocol
      firmware: arm_scmi: Add SCMI v3.1 SENSOR_AXIS_NAME_GET support
      firmware: arm_scmi: Use common iterators in the sensor protocol
      firmware: arm_scmi: Add iterators for multi-part commands
      firmware: arm_scmi: Parse clock_enable_latency conditionally
      firmware: arm_scmi: Set clock latency to U32_MAX if it is not supported
      firmware: arm_scmi: Add SCMI v3.1 protocol extended names support
      firmware: arm_scmi: Introduce a common SCMI v3.1 .extended_name_get helper
      firmware: arm_scmi: Split protocol specific definitions in a dedicated header
      firmware: arm_scmi: Remove unneeded NULL termination of clk name
      firmware: arm_scmi: Check CLOCK_RATE_SET_COMPLETE async response
      firmware: arm_scmi: Make name_get operations return a const
      ...
    
    Link: https://lore.kernel.org/r/20220504112906.3491985-1-sudeep.holla@arm.com
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 9bd1d9a0d8bb1a549831fd98fcc3105960f7068b
Author: Sven Peter <sven@svenpeter.dev>
Date:   Sun May 1 16:55:06 2022 +0200

    soc: apple: Add RTKit IPC library
    
    Apple SoCs such as the M1 come with multiple embedded co-processors
    running proprietary firmware. Communication with those is established
    over a simple mailbox using the RTKit IPC protocol.
    
    This cannot be implemented inside the mailbox subsystem since on top
    of communication over channels we also need support for starting,
    hibernating and resetting these co-processors. We also need to
    handle shared memory allocations differently depending on the
    co-processor and don't want to split that across multiple drivers.
    
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Sven Peter <sven@svenpeter.dev>

commit 5e114ad984c220fcc5c08b6bf3b458ce95f46f43
Author: Etienne Carriere <etienne.carriere@linaro.org>
Date:   Mon Apr 25 10:51:27 2022 +0200

    firmware: arm_scmi: Support optee shared memory in the optee transport
    
    Add support for TEE shared memory in optee scmi transport. When using
    tee shared memory, scmi optee transport manages SCMI messages using
    msg protocol(from msg.c) in shared memory, whereas smt(from shmem.c)
    protocol is used with static IOMEM based shared buffers.
    
    Link: https://lore.kernel.org/r/20220425085127.2009-1-etienne.carriere@linaro.org
    Reviewed-by: Cristian Marussi <cristian.marussi@arm.com>
    Signed-off-by: Etienne Carriere <etienne.carriere@linaro.org>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>

commit 5b4018b959149eb5b5f3004fc0339674af67516b
Author: Jens Wiklander <jens.wiklander@linaro.org>
Date:   Tue Jan 25 21:26:42 2022 +0100

    optee: cache argument shared memory structs
    
    Implements a cache to handle shared memory used to pass the argument
    struct needed when doing a normal yielding call into secure world.
    
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

commit e565d3efd894f0fba844cf3eafd098d66c266333
Author: Jeffrey Hugo <quic_jhugo@quicinc.com>
Date:   Wed Apr 13 10:41:53 2022 -0600

    bus: mhi: host: Use cached values for calculating the shared write pointer
    
    mhi_recycle_ev_ring() computes the shared write pointer for the ring
    (ctxt_wp) using a read/modify/write pattern where the ctxt_wp value in the
    shared memory is read, incremented, and written back.  There are no checks
    on the read value, it is assumed that it is kept in sync with the locally
    cached value.  Per the MHI spec, this is correct.  The device should only
    read ctxt_wp, never write it.
    
    However, there are devices in the wild that violate the spec, and can
    update the ctxt_wp in a specific scenario.  This can cause corruption, and
    violate the above assumption that the ctxt_wp is in sync with the cached
    value.
    
    This can occur when the device has loaded firmware from the host, and is
    transitioning from the SBL EE to the AMSS EE.  As part of shutting down
    SBL, the SBL flushes it's local MHI context to the shared memory since
    the local context will not persist across an EE change.  In the case of
    the event ring, SBL will flush its entire context, not just the parts that
    it is allowed to update.  This means SBL will write to ctxt_wp, and
    possibly corrupt it.
    
    An example:
    
    Host                            Device
    ----                            ---
    Update ctxt_wp to 0x1f0
                                    SBL observes 0x1f0
    Update ctxt_wp to 0x0
                                    Starts transition to AMSS EE
                                    Context flush, writes 0x1f0 to ctxt_wp
    Update ctxt_wp to 0x200
    Update ctxt_wp to 0x210
                                    AMSS observes 0x210
                                    0x210 exceeds ring size
                                    AMSS signals syserr
    
    The reason the ctxt_wp goes off the end of the ring is that the rollover
    check is only performed on the cached wp, which is out of sync with
    ctxt_wp.
    
    Since the host is the authority of the value of ctxt_wp per the MHI spec,
    we can fix this issue by not reading ctxt_wp from the shared memory, and
    instead compute it based on the cached value.  If SBL corrupts ctxt_wp,
    the host won't observe it, and will correct the value at some point later.
    
    Signed-off-by: Jeffrey Hugo <quic_jhugo@quicinc.com>
    Reviewed-by: Hemant Kumar <quic_hemantk@quicinc.com>
    Reviewed-by: Bhaumik Bhatt <quic_bbhatt@quicinc.com>
    Reviewed-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Link: https://lore.kernel.org/r/1649868113-18826-1-git-send-email-quic_jhugo@quicinc.com
    [mani: used the quicinc domain for Hemant and Bhaumik]
    Signed-off-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>

commit a639b2b18a240d497109631d48016b620fb354f9
Author: Jens Wiklander <jens.wiklander@linaro.org>
Date:   Wed Jan 12 17:06:32 2022 +0100

    optee: add FF-A capability OPTEE_FFA_SEC_CAP_ARG_OFFSET
    
    Adds the secure capability OPTEE_FFA_SEC_CAP_ARG_OFFSET to indicate that
    OP-TEE with FF-A can support an argument struct at a non-zero offset into
    a passed shared memory object.
    
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

commit ed8faf6c8f8c1f7e9ee88342a915ce5f09ca9736
Author: Jens Wiklander <jens.wiklander@linaro.org>
Date:   Wed Nov 3 11:42:30 2021 +0100

    optee: add OPTEE_SMC_CALL_WITH_RPC_ARG and OPTEE_SMC_CALL_WITH_REGD_ARG
    
    Adds OPTEE_SMC_CALL_WITH_RPC_ARG and OPTEE_SMC_CALL_WITH_REGD_ARG where
    the struct optee_msg_arg to be used for RPC is appended in the memory
    following the normal argument struct optee_msg_arg. This is an
    optimization to avoid caching the RPC argument struct while still
    maintaining similar performance as if it was cached.
    
    OPTEE_SMC_CALL_WITH_REGD_ARG optimized one step further by using a
    registered shared memory object instead. It's in other aspects identical
    to OPTEE_SMC_CALL_WITH_RPC_ARG.
    
    The presence of OPTEE_SMC_CALL_WITH_RPC_ARG and
    OPTEE_SMC_CALL_WITH_REGD_ARG is indicated by the new
    OPTEE_SMC_SEC_CAP_RPC_ARG bit returned by
    OPTEE_SMC_EXCHANGE_CAPABILITIES. OPTEE_SMC_EXCHANGE_CAPABILITIES also
    reports the number of arguments that the RPC argument struct must have
    room for.
    
    OPTEE_SMC_CALL_WITH_RPC_ARG and OPTEE_SMC_CALL_WITH_ARG can be used
    interleaved with difference that when OPTEE_SMC_CALL_WITH_RPC_ARG is
    used the RPC argument struct to be used is the one appended to the
    normal argument struct. The same is true for
    OPTEE_SMC_CALL_WITH_REGD_ARG.
    
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

commit f1383348ad0fe0d568dfd37f2552b0b4f044dbe5
Author: Deepak Kumar Singh <quic_deesin@quicinc.com>
Date:   Tue Mar 1 20:48:33 2022 +0530

    soc: qcom: smem: validate fields of shared structures
    
    Structures in shared memory that can be modified by remote
    processors may have untrusted values, they should be validated
    before use.
    
    Adding proper validation before using fields of shared
    structures.
    
    Signed-off-by: Deepak Kumar Singh <quic_deesin@quicinc.com>
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Link: https://lore.kernel.org/r/1646147913-15791-2-git-send-email-quic_deesin@quicinc.com

commit b9c7ba58777acfd0892b808aea25074d46e0618f
Author: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>
Date:   Wed Apr 6 02:29:39 2022 +0300

    Documentation/x86: Document TDX kernel architecture
    
    Document the TDX guest architecture details like #VE support,
    shared memory, etc.
    
    [ dhansen: made some wording changes, including removing
               all the plural "#VE's" and "#VEs". ]
    
    Signed-off-by: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>
    Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Reviewed-by: Dave Hansen <dave.hansen@linux.intel.com>
    Link: https://lkml.kernel.org/r/20220405232939.73860-31-kirill.shutemov@linux.intel.com

commit 968b493173ac5205fe75f6330ee767f96bf88e57
Author: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
Date:   Wed Apr 6 02:29:36 2022 +0300

    x86/mm: Make DMA memory shared for TD guest
    
    Intel TDX doesn't allow VMM to directly access guest private memory.
    Any memory that is required for communication with the VMM must be
    shared explicitly. The same rule applies for any DMA to and from the
    TDX guest. All DMA pages have to be marked as shared pages. A generic way
    to achieve this without any changes to device drivers is to use the
    SWIOTLB framework.
    
    The previous patch ("Add support for TDX shared memory") gave TDX guests
    the _ability_ to make some pages shared, but did not make any pages
    shared. This actually marks SWIOTLB buffers *as* shared.
    
    Start returning true for cc_platform_has(CC_ATTR_GUEST_MEM_ENCRYPT) in
    TDX guests.  This has several implications:
    
     - Allows the existing mem_encrypt_init() to be used for TDX which
       sets SWIOTLB buffers shared (aka. "decrypted").
     - Ensures that all DMA is routed via the SWIOTLB mechanism (see
       pci_swiotlb_detect())
    
    Stop selecting DYNAMIC_PHYSICAL_MASK directly. It will get set
    indirectly by selecting X86_MEM_ENCRYPT.
    
    mem_encrypt_init() is currently under an AMD-specific #ifdef. Move it to
    a generic area of the header.
    
    Co-developed-by: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>
    Signed-off-by: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>
    Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Reviewed-by: Andi Kleen <ak@linux.intel.com>
    Reviewed-by: Tony Luck <tony.luck@intel.com>
    Reviewed-by: Dave Hansen <dave.hansen@linux.intel.com>
    Link: https://lkml.kernel.org/r/20220405232939.73860-28-kirill.shutemov@linux.intel.com

commit 7dbde7631629896b478bc5b1f4c3e52e6d518d12
Author: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
Date:   Wed Apr 6 02:29:35 2022 +0300

    x86/mm/cpa: Add support for TDX shared memory
    
    Intel TDX protects guest memory from VMM access. Any memory that is
    required for communication with the VMM must be explicitly shared.
    
    It is a two-step process: the guest sets the shared bit in the page
    table entry and notifies VMM about the change. The notification happens
    using MapGPA hypercall.
    
    Conversion back to private memory requires clearing the shared bit,
    notifying VMM with MapGPA hypercall following with accepting the memory
    with AcceptPage hypercall.
    
    Provide a TDX version of x86_platform.guest.* callbacks. It makes
    __set_memory_enc_pgtable() work right in TDX guest.
    
    Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/20220405232939.73860-27-kirill.shutemov@linux.intel.com

commit 31d58c4e557d46fa7f8557714250fb6f89c941ae
Author: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
Date:   Wed Apr 6 02:29:20 2022 +0300

    x86/tdx: Handle in-kernel MMIO
    
    In non-TDX VMs, MMIO is implemented by providing the guest a mapping
    which will cause a VMEXIT on access and then the VMM emulating the
    instruction that caused the VMEXIT. That's not possible for TDX VM.
    
    To emulate an instruction an emulator needs two things:
    
      - R/W access to the register file to read/modify instruction arguments
        and see RIP of the faulted instruction.
    
      - Read access to memory where instruction is placed to see what to
        emulate. In this case it is guest kernel text.
    
    Both of them are not available to VMM in TDX environment:
    
      - Register file is never exposed to VMM. When a TD exits to the module,
        it saves registers into the state-save area allocated for that TD.
        The module then scrubs these registers before returning execution
        control to the VMM, to help prevent leakage of TD state.
    
      - TDX does not allow guests to execute from shared memory. All executed
        instructions are in TD-private memory. Being private to the TD, VMMs
        have no way to access TD-private memory and no way to read the
        instruction to decode and emulate it.
    
    In TDX the MMIO regions are instead configured by VMM to trigger a #VE
    exception in the guest.
    
    Add #VE handling that emulates the MMIO instruction inside the guest and
    converts it into a controlled hypercall to the host.
    
    This approach is bad for performance. But, it has (virtually) no impact
    on the size of the kernel image and will work for a wide variety of
    drivers. This allows TDX deployments to use arbitrary devices and device
    drivers, including virtio. TDX customers have asked for the capability
    to use random devices in their deployments.
    
    In other words, even if all of the work was done to paravirtualize all
    x86 MMIO users and virtio, this approach would still be needed. There
    is essentially no way to get rid of this code.
    
    This approach is functional for all in-kernel MMIO users current and
    future and does so with a minimal amount of code and kernel image bloat.
    
    MMIO addresses can be used with any CPU instruction that accesses
    memory. Address only MMIO accesses done via io.h helpers, such as
    'readl()' or 'writeq()'.
    
    Any CPU instruction that accesses memory can also be used to access
    MMIO.  However, by convention, MMIO access are typically performed via
    io.h helpers such as 'readl()' or 'writeq()'.
    
    The io.h helpers intentionally use a limited set of instructions when
    accessing MMIO.  This known, limited set of instructions makes MMIO
    instruction decoding and emulation feasible in KVM hosts and SEV guests
    today.
    
    MMIO accesses performed without the io.h helpers are at the mercy of the
    compiler.  Compilers can and will generate a much more broad set of
    instructions which can not practically be decoded and emulated.  TDX
    guests will oops if they encounter one of these decoding failures.
    
    This means that TDX guests *must* use the io.h helpers to access MMIO.
    
    This requirement is not new.  Both KVM hosts and AMD SEV guests have the
    same limitations on MMIO access.
    
    === Potential alternative approaches ===
    
    == Paravirtualizing all MMIO ==
    
    An alternative to letting MMIO induce a #VE exception is to avoid
    the #VE in the first place. Similar to the port I/O case, it is
    theoretically possible to paravirtualize MMIO accesses.
    
    Like the exception-based approach offered here, a fully paravirtualized
    approach would be limited to MMIO users that leverage common
    infrastructure like the io.h macros.
    
    However, any paravirtual approach would be patching approximately 120k
    call sites. Any paravirtual approach would need to replace a bare memory
    access instruction with (at least) a function call. With a conservative
    overhead estimation of 5 bytes per call site (CALL instruction),
    it leads to bloating code by 600k.
    
    Many drivers will never be used in the TDX environment and the bloat
    cannot be justified.
    
    == Patching TDX drivers ==
    
    Rather than touching the entire kernel, it might also be possible to
    just go after drivers that use MMIO in TDX guests *and* are performance
    critical to justify the effrort. Right now, that's limited only to virtio.
    
    All virtio MMIO appears to be done through a single function, which
    makes virtio eminently easy to patch.
    
    This approach will be adopted in the future, removing the bulk of
    MMIO #VEs. The #VE-based MMIO will remain serving non-virtio use cases.
    
    Co-developed-by: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>
    Signed-off-by: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>
    Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Reviewed-by: Andi Kleen <ak@linux.intel.com>
    Reviewed-by: Tony Luck <tony.luck@intel.com>
    Reviewed-by: Dave Hansen <dave.hansen@linux.intel.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/20220405232939.73860-12-kirill.shutemov@linux.intel.com

commit 9a22bf6debbf5169f750af53c7f86eb4e3cd6712
Author: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
Date:   Wed Apr 6 02:29:16 2022 +0300

    x86/traps: Add #VE support for TDX guest
    
    Virtualization Exceptions (#VE) are delivered to TDX guests due to
    specific guest actions which may happen in either user space or the
    kernel:
    
     * Specific instructions (WBINVD, for example)
     * Specific MSR accesses
     * Specific CPUID leaf accesses
     * Access to specific guest physical addresses
    
    Syscall entry code has a critical window where the kernel stack is not
    yet set up. Any exception in this window leads to hard to debug issues
    and can be exploited for privilege escalation. Exceptions in the NMI
    entry code also cause issues. Returning from the exception handler with
    IRET will re-enable NMIs and nested NMI will corrupt the NMI stack.
    
    For these reasons, the kernel avoids #VEs during the syscall gap and
    the NMI entry code. Entry code paths do not access TD-shared memory,
    MMIO regions, use #VE triggering MSRs, instructions, or CPUID leaves
    that might generate #VE. VMM can remove memory from TD at any point,
    but access to unaccepted (or missing) private memory leads to VM
    termination, not to #VE.
    
    Similarly to page faults and breakpoints, #VEs are allowed in NMI
    handlers once the kernel is ready to deal with nested NMIs.
    
    During #VE delivery, all interrupts, including NMIs, are blocked until
    TDGETVEINFO is called. It prevents #VE nesting until the kernel reads
    the VE info.
    
    TDGETVEINFO retrieves the #VE info from the TDX module, which also
    clears the "#VE valid" flag.  This must be done before anything else as
    any #VE that occurs while the valid flag is set escalates to #DF by TDX
    module. It will result in an oops.
    
    Virtual NMIs are inhibited if the #VE valid flag is set. NMI will not be
    delivered until TDGETVEINFO is called.
    
    For now, convert unhandled #VE's (everything, until later in this
    series) so that they appear just like a #GP by calling the
    ve_raise_fault() directly. The ve_raise_fault() function is similar
    to #GP handler and is responsible for sending SIGSEGV to userspace
    and CPU die and notifying debuggers and other die chain users.
    
    Co-developed-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Co-developed-by: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>
    Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
    Signed-off-by: Kuppuswamy Sathyanarayanan <sathyanarayanan.kuppuswamy@linux.intel.com>
    Signed-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Reviewed-by: Andi Kleen <ak@linux.intel.com>
    Reviewed-by: Tony Luck <tony.luck@intel.com>
    Reviewed-by: Dave Hansen <dave.hansen@linux.intel.com>
    Link: https://lkml.kernel.org/r/20220405232939.73860-8-kirill.shutemov@linux.intel.com

commit 248c6347720200b9e5f79a4339ddbe4ef0074d36
Author: Jarkko Sakkinen <jarkko@kernel.org>
Date:   Fri Mar 4 00:38:58 2022 +0200

    x86/sgx: Free backing memory after faulting the enclave page
    
    commit 08999b2489b4c9b939d7483dbd03702ee4576d96 upstream.
    
    There is a limited amount of SGX memory (EPC) on each system.  When that
    memory is used up, SGX has its own swapping mechanism which is similar
    in concept but totally separate from the core mm/* code.  Instead of
    swapping to disk, SGX swaps from EPC to normal RAM.  That normal RAM
    comes from a shared memory pseudo-file and can itself be swapped by the
    core mm code.  There is a hierarchy like this:
    
            EPC <-> shmem <-> disk
    
    After data is swapped back in from shmem to EPC, the shmem backing
    storage needs to be freed.  Currently, the backing shmem is not freed.
    This effectively wastes the shmem while the enclave is running.  The
    memory is recovered when the enclave is destroyed and the backing
    storage freed.
    
    Sort this out by freeing memory with shmem_truncate_range(), as soon as
    a page is faulted back to the EPC.  In addition, free the memory for
    PCMD pages as soon as all PCMD's in a page have been marked as unused
    by zeroing its contents.
    
    Cc: stable@vger.kernel.org
    Fixes: 1728ab54b4be ("x86/sgx: Add a page reclaimer")
    Reported-by: Dave Hansen <dave.hansen@linux.intel.com>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Link: https://lkml.kernel.org/r/20220303223859.273187-1-jarkko@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ce91f0f023adfc239b44261f6dccb4a883d44d92
Author: Jarkko Sakkinen <jarkko@kernel.org>
Date:   Fri Mar 4 00:38:58 2022 +0200

    x86/sgx: Free backing memory after faulting the enclave page
    
    commit 08999b2489b4c9b939d7483dbd03702ee4576d96 upstream.
    
    There is a limited amount of SGX memory (EPC) on each system.  When that
    memory is used up, SGX has its own swapping mechanism which is similar
    in concept but totally separate from the core mm/* code.  Instead of
    swapping to disk, SGX swaps from EPC to normal RAM.  That normal RAM
    comes from a shared memory pseudo-file and can itself be swapped by the
    core mm code.  There is a hierarchy like this:
    
            EPC <-> shmem <-> disk
    
    After data is swapped back in from shmem to EPC, the shmem backing
    storage needs to be freed.  Currently, the backing shmem is not freed.
    This effectively wastes the shmem while the enclave is running.  The
    memory is recovered when the enclave is destroyed and the backing
    storage freed.
    
    Sort this out by freeing memory with shmem_truncate_range(), as soon as
    a page is faulted back to the EPC.  In addition, free the memory for
    PCMD pages as soon as all PCMD's in a page have been marked as unused
    by zeroing its contents.
    
    Cc: stable@vger.kernel.org
    Fixes: 1728ab54b4be ("x86/sgx: Add a page reclaimer")
    Reported-by: Dave Hansen <dave.hansen@linux.intel.com>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Link: https://lkml.kernel.org/r/20220303223859.273187-1-jarkko@kernel.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 08999b2489b4c9b939d7483dbd03702ee4576d96
Author: Jarkko Sakkinen <jarkko@kernel.org>
Date:   Fri Mar 4 00:38:58 2022 +0200

    x86/sgx: Free backing memory after faulting the enclave page
    
    There is a limited amount of SGX memory (EPC) on each system.  When that
    memory is used up, SGX has its own swapping mechanism which is similar
    in concept but totally separate from the core mm/* code.  Instead of
    swapping to disk, SGX swaps from EPC to normal RAM.  That normal RAM
    comes from a shared memory pseudo-file and can itself be swapped by the
    core mm code.  There is a hierarchy like this:
    
            EPC <-> shmem <-> disk
    
    After data is swapped back in from shmem to EPC, the shmem backing
    storage needs to be freed.  Currently, the backing shmem is not freed.
    This effectively wastes the shmem while the enclave is running.  The
    memory is recovered when the enclave is destroyed and the backing
    storage freed.
    
    Sort this out by freeing memory with shmem_truncate_range(), as soon as
    a page is faulted back to the EPC.  In addition, free the memory for
    PCMD pages as soon as all PCMD's in a page have been marked as unused
    by zeroing its contents.
    
    Cc: stable@vger.kernel.org
    Fixes: 1728ab54b4be ("x86/sgx: Add a page reclaimer")
    Reported-by: Dave Hansen <dave.hansen@linux.intel.com>
    Signed-off-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Dave Hansen <dave.hansen@linux.intel.com>
    Link: https://lkml.kernel.org/r/20220303223859.273187-1-jarkko@kernel.org

commit 2922aff4339712ef004451715e94bdbd55fe38ed
Author: Jens Wiklander <jens.wiklander@linaro.org>
Date:   Thu Jan 27 15:29:39 2022 +0100

    optee: use driver internal tee_context for some rpc
    
    commit aceeafefff736057e8f93f19bbfbef26abd94604 upstream.
    
    Adds a driver private tee_context by moving the tee_context in struct
    optee_notif to struct optee. This tee_context was previously used when
    doing internal calls to secure world to deliver notification.
    
    The new driver internal tee_context is now also when allocating driver
    private shared memory. This decouples the shared memory object from its
    original tee_context. This is needed when the life time of such a memory
    allocation outlives the client tee_context.
    
    This patch fixes the problem described below:
    
    The addition of a shutdown hook by commit f25889f93184 ("optee: fix tee out
    of memory failure seen during kexec reboot") introduced a kernel shutdown
    regression that can be triggered after running the OP-TEE xtest suites.
    
    Once the shutdown hook is called it is not possible to communicate any more
    with the supplicant process because the system is not scheduling task any
    longer. Thus if the optee driver shutdown path receives a supplicant RPC
    request from the OP-TEE we will deadlock the kernel's shutdown.
    
    Fixes: f25889f93184 ("optee: fix tee out of memory failure seen during kexec reboot")
    Fixes: 217e0250cccb ("tee: use reference counting for tee_context")
    Reported-by: Lars Persson <larper@axis.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    [JW: backport to 5.15-stable + update commit message]
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5da17865c7f31b52743536dbcb417fb804dc667a
Author: Jens Wiklander <jens.wiklander@linaro.org>
Date:   Thu Jan 27 15:29:39 2022 +0100

    optee: use driver internal tee_context for some rpc
    
    commit aceeafefff736057e8f93f19bbfbef26abd94604 upstream.
    
    Adds a driver private tee_context by moving the tee_context in struct
    optee_notif to struct optee. This tee_context was previously used when
    doing internal calls to secure world to deliver notification.
    
    The new driver internal tee_context is now also when allocating driver
    private shared memory. This decouples the shared memory object from its
    original tee_context. This is needed when the life time of such a memory
    allocation outlives the client tee_context.
    
    This patch fixes the problem described below:
    
    The addition of a shutdown hook by commit f25889f93184 ("optee: fix tee out
    of memory failure seen during kexec reboot") introduced a kernel shutdown
    regression that can be triggered after running the OP-TEE xtest suites.
    
    Once the shutdown hook is called it is not possible to communicate any more
    with the supplicant process because the system is not scheduling task any
    longer. Thus if the optee driver shutdown path receives a supplicant RPC
    request from the OP-TEE we will deadlock the kernel's shutdown.
    
    Fixes: f25889f93184 ("optee: fix tee out of memory failure seen during kexec reboot")
    Fixes: 217e0250cccb ("tee: use reference counting for tee_context")
    Reported-by: Lars Persson <larper@axis.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    [JW: backport to 5.10-stable + update commit message]
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5d76e0b69da9e9c310359b3e96604c676c564516
Author: Jens Wiklander <jens.wiklander@linaro.org>
Date:   Thu Jan 27 15:29:39 2022 +0100

    optee: use driver internal tee_context for some rpc
    
    commit aceeafefff736057e8f93f19bbfbef26abd94604 upstream.
    
    Adds a driver private tee_context by moving the tee_context in struct
    optee_notif to struct optee. This tee_context was previously used when
    doing internal calls to secure world to deliver notification.
    
    The new driver internal tee_context is now also when allocating driver
    private shared memory. This decouples the shared memory object from its
    original tee_context. This is needed when the life time of such a memory
    allocation outlives the client tee_context.
    
    This patch fixes the problem described below:
    
    The addition of a shutdown hook by commit f25889f93184 ("optee: fix tee out
    of memory failure seen during kexec reboot") introduced a kernel shutdown
    regression that can be triggered after running the OP-TEE xtest suites.
    
    Once the shutdown hook is called it is not possible to communicate any more
    with the supplicant process because the system is not scheduling task any
    longer. Thus if the optee driver shutdown path receives a supplicant RPC
    request from the OP-TEE we will deadlock the kernel's shutdown.
    
    Fixes: f25889f93184 ("optee: fix tee out of memory failure seen during kexec reboot")
    Fixes: 217e0250cccb ("tee: use reference counting for tee_context")
    Reported-by: Lars Persson <larper@axis.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    [JW: backport to 5.4-stable + update commit message]
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 25b67f373b49e395ccffa840aa5ba1b81c2d2991
Merge: bc5ede20b8ec a45ea4efa358
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Feb 25 17:05:11 2022 +0100

    Merge tag 'tee-shm-for-v5.18' of git://git.linaro.org:/people/jens.wiklander/linux-tee into arm/drivers
    
    TEE shared memory cleanup for v5.18
    
    - The TEE shared memory pool based on two pools is replaced with a single
      somewhat more capable pool.
    - Replaces tee_shm_alloc() and tee_shm_register() with new functions
      easier to use and maintain.  The TEE subsystem and the TEE drivers are
      updated to use the new functions instead.
    - The TEE based Trusted keys routines are updated to use the new
      simplified functions above.
    - The OP-TEE based rng driver is updated to use the new simplified
      functions above.
    - The TEE_SHM-flags are refactored to better match their usage
    
    * tag 'tee-shm-for-v5.18' of git://git.linaro.org:/people/jens.wiklander/linux-tee:
      tee: refactor TEE_SHM_* flags
      tee: replace tee_shm_register()
      KEYS: trusted: tee: use tee_shm_register_kernel_buf()
      tee: add tee_shm_register_{user,kernel}_buf()
      optee: add optee_pool_op_free_helper()
      tee: replace tee_shm_alloc()
      tee: simplify shm pool handling
      tee: add tee_shm_alloc_user_buf()
      tee: remove unused tee_shm_pool_alloc_res_mem()
      hwrng: optee-rng: use tee_shm_alloc_kernel_buf()
      optee: use driver internal tee_context for some rpc
    
    Link: https://lore.kernel.org/r/20220218184802.GA968155@jade
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 1b29d1c1faf3809c166bd1adbeebf1011d793177
Merge: 52e71a47e82b 96bb0954860a
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Feb 25 16:09:24 2022 +0100

    Merge tag 'juno-update-5.18' of git://git.kernel.org/pub/scm/linux/kernel/git/sudeep.holla/linux into arm/dt
    
    Arm Juno update for v5.18
    
    Just a single update adding long waited support for SCMI firmware variant
    as separate devicetrees. I wanted to deal with this differences in the
    firmware interface within the bootloader for long time. But with variety
    of bootloaders (u-boot, UEFI, ..etc) and need to add SCMI and SCPI
    support for sake of discovery with discrepancies in shared memory layout,
    it turned out difficult.
    
    So, finally we are adding it as separate files so that we don't break
    support for older SCPI firmware interface.
    
    * tag 'juno-update-5.18' of git://git.kernel.org/pub/scm/linux/kernel/git/sudeep.holla/linux:
      arm64: dts: juno: Add separate SCMI variants
      arm64: dts: juno: Remove GICv2m dma-range
    
    Link: https://lore.kernel.org/r/20220222201812.3338619-1-sudeep.holla@arm.com
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit f333857e0f857d69aea6c1fb49fbfb7cfdb69b1b
Author: Jens Wiklander <jens.wiklander@linaro.org>
Date:   Thu Jan 27 15:29:39 2022 +0100

    optee: use driver internal tee_context for some rpc
    
    commit aceeafefff736057e8f93f19bbfbef26abd94604 upstream.
    
    Adds a driver private tee_context by moving the tee_context in struct
    optee_notif to struct optee. This tee_context was previously used when
    doing internal calls to secure world to deliver notification.
    
    The new driver internal tee_context is now also when allocating driver
    private shared memory. This decouples the shared memory object from its
    original tee_context. This is needed when the life time of such a memory
    allocation outlives the client tee_context.
    
    This patch fixes the problem described below:
    
    The addition of a shutdown hook by commit f25889f93184 ("optee: fix tee out
    of memory failure seen during kexec reboot") introduced a kernel shutdown
    regression that can be triggered after running the OP-TEE xtest suites.
    
    Once the shutdown hook is called it is not possible to communicate any more
    with the supplicant process because the system is not scheduling task any
    longer. Thus if the optee driver shutdown path receives a supplicant RPC
    request from the OP-TEE we will deadlock the kernel's shutdown.
    
    Fixes: f25889f93184 ("optee: fix tee out of memory failure seen during kexec reboot")
    Fixes: 217e0250cccb ("tee: use reference counting for tee_context")
    Reported-by: Lars Persson <larper@axis.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    [JW: backport to 5.16-stable + update commit message]
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d88e0493a054c9fe72ade41a42d42e958ee6503d
Author: Jens Wiklander <jens.wiklander@linaro.org>
Date:   Fri Feb 4 10:33:53 2022 +0100

    tee: simplify shm pool handling
    
    Replaces the shared memory pool based on two pools with a single pool.
    The alloc() function pointer in struct tee_shm_pool_ops gets another
    parameter, align. This makes it possible to make less than page aligned
    allocations from the optional reserved shared memory pool while still
    making user space allocations page aligned. With in practice unchanged
    behaviour using only a single pool for bookkeeping.
    
    The allocation algorithm in the static OP-TEE shared memory pool is
    changed from best-fit to first-fit since only the latter supports an
    alignment parameter. The best-fit algorithm was previously the default
    choice and not a conscious one.
    
    The optee and amdtee drivers are updated as needed to work with this
    changed pool handling.
    
    This also removes OPTEE_SHM_NUM_PRIV_PAGES which becomes obsolete with
    this change as the private pages can be mixed with the payload pages.
    
    The OP-TEE driver changes minimum alignment for argument struct from 8
    bytes to 512 bytes. A typical OP-TEE private shm allocation is 224 bytes
    (argument struct with 6 parameters, needed for open session). So with an
    alignment of 512 well waste a bit more than 50%. Before this we had a
    single page reserved for this so worst case usage compared to that would
    be 3 pages instead of 1 page. However, this worst case only occurs if
    there is a high pressure from multiple threads on secure world. All in
    all this should scale up and down better than fixed boundaries.
    
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

commit aceeafefff736057e8f93f19bbfbef26abd94604
Author: Jens Wiklander <jens.wiklander@linaro.org>
Date:   Thu Jan 27 15:29:39 2022 +0100

    optee: use driver internal tee_context for some rpc
    
    Adds a driver private tee_context by moving the tee_context in struct
    optee_notif to struct optee. This tee_context was previously used when
    doing internal calls to secure world to deliver notification.
    
    The new driver internal tee_context is now also when allocating driver
    private shared memory. This decouples the shared memory object from its
    original tee_context. This is needed when the life time of such a memory
    allocation outlives the client tee_context.
    
    This patch fixes the problem described below:
    
    The addition of a shutdown hook by commit f25889f93184 ("optee: fix tee out
    of memory failure seen during kexec reboot") introduced a kernel shutdown
    regression that can be triggered after running the OP-TEE xtest suites.
    
    Once the shutdown hook is called it is not possible to communicate any more
    with the supplicant process because the system is not scheduling task any
    longer. Thus if the optee driver shutdown path receives a supplicant RPC
    request from the OP-TEE we will deadlock the kernel's shutdown.
    
    Fixes: f25889f93184 ("optee: fix tee out of memory failure seen during kexec reboot")
    Fixes: 217e0250cccb ("tee: use reference counting for tee_context")
    Reported-by: Lars Persson <larper@axis.com>
    Cc: stable@vger.kernel.org
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

commit 7d73c602154df56802a9e75ac212505fc1e9a2b6
Author: Umesh Nerlige Ramappa <umesh.nerlige.ramappa@intel.com>
Date:   Mon Jan 24 18:01:24 2022 -0800

    drm/i915/pmu: Fix KMD and GuC race on accessing busyness
    
    GuC updates shared memory and KMD reads it. Since this is not
    synchronized, we run into a race where the value read is inconsistent.
    Sometimes the inconsistency is in reading the upper MSB bytes of the
    last_switch_in value. 2 types of cases are seen - upper 8 bits are zero
    and upper 24 bits are zero. Since these are non-zero values, it is
    not trivial to determine validity of these values. Instead we read the
    values multiple times until they are consistent. In test runs, 3
    attempts results in consistent values. The upper bound is set to 6
    attempts and may need to be tuned as per any new occurences.
    
    Since the duration that gt is parked can vary, the patch also updates
    the gt timestamp on unpark before starting the worker.
    
    v2:
    - Initialize i
    - Use READ_ONCE to access engine record
    
    Fixes: 77cdd054dd2c ("drm/i915/pmu: Connect engine busyness stats from GuC to pmu")
    Signed-off-by: Umesh Nerlige Ramappa <umesh.nerlige.ramappa@intel.com>
    Reviewed-by: Alan Previn <alan.previn.teres.alexis@intel.com>
    Signed-off-by: John Harrison <John.C.Harrison@Intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220125020124.788679-2-umesh.nerlige.ramappa@intel.com
    (cherry picked from commit 512712a824de9b856a4e61343e3e4390eba2c391)
    Signed-off-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>

commit 512712a824de9b856a4e61343e3e4390eba2c391
Author: Umesh Nerlige Ramappa <umesh.nerlige.ramappa@intel.com>
Date:   Mon Jan 24 18:01:24 2022 -0800

    drm/i915/pmu: Fix KMD and GuC race on accessing busyness
    
    GuC updates shared memory and KMD reads it. Since this is not
    synchronized, we run into a race where the value read is inconsistent.
    Sometimes the inconsistency is in reading the upper MSB bytes of the
    last_switch_in value. 2 types of cases are seen - upper 8 bits are zero
    and upper 24 bits are zero. Since these are non-zero values, it is
    not trivial to determine validity of these values. Instead we read the
    values multiple times until they are consistent. In test runs, 3
    attempts results in consistent values. The upper bound is set to 6
    attempts and may need to be tuned as per any new occurences.
    
    Since the duration that gt is parked can vary, the patch also updates
    the gt timestamp on unpark before starting the worker.
    
    v2:
    - Initialize i
    - Use READ_ONCE to access engine record
    
    Fixes: 77cdd054dd2c ("drm/i915/pmu: Connect engine busyness stats from GuC to pmu")
    Signed-off-by: Umesh Nerlige Ramappa <umesh.nerlige.ramappa@intel.com>
    Reviewed-by: Alan Previn <alan.previn.teres.alexis@intel.com>
    Signed-off-by: John Harrison <John.C.Harrison@Intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20220125020124.788679-2-umesh.nerlige.ramappa@intel.com

commit f47761999052b1cc987dd3e3d3adf47997358fc0
Author: Mina Almasry <almasrymina@google.com>
Date:   Fri Jan 14 14:07:48 2022 -0800

    hugetlb: add hugetlb.*.numa_stat file
    
    For hugetlb backed jobs/VMs it's critical to understand the numa
    information for the memory backing these jobs to deliver optimal
    performance.
    
    Currently this technically can be queried from /proc/self/numa_maps, but
    there are significant issues with that.  Namely:
    
    1. Memory can be mapped or unmapped.
    
    2. numa_maps are per process and need to be aggregated across all
       processes in the cgroup.  For shared memory this is more involved as
       the userspace needs to make sure it doesn't double count shared
       mappings.
    
    3. I believe querying numa_maps needs to hold the mmap_lock which adds
       to the contention on this lock.
    
    For these reasons I propose simply adding hugetlb.*.numa_stat file,
       which shows the numa information of the cgroup similarly to
       memory.numa_stat.
    
    On cgroup-v2:
       cat /sys/fs/cgroup/unified/test/hugetlb.2MB.numa_stat
       total=2097152 N0=2097152 N1=0
    
    On cgroup-v1:
       cat /sys/fs/cgroup/hugetlb/test/hugetlb.2MB.numa_stat
       total=2097152 N0=2097152 N1=0
       hierarichal_total=2097152 N0=2097152 N1=0
    
    This patch was tested manually by allocating hugetlb memory and querying
    the hugetlb.*.numa_stat file of the cgroup and its parents.
    
    [colin.i.king@googlemail.com: fix spelling mistake "hierarichal" -> "hierarchical"]
      Link: https://lkml.kernel.org/r/20211125090635.23508-1-colin.i.king@gmail.com
    [keescook@chromium.org: fix copy/paste array assignment]
      Link: https://lkml.kernel.org/r/20211203065647.2819707-1-keescook@chromium.org
    
    Link: https://lkml.kernel.org/r/20211123001020.4083653-1-almasrymina@google.com
    Signed-off-by: Mina Almasry <almasrymina@google.com>
    Signed-off-by: Colin Ian King <colin.i.king@gmail.com>
    Signed-off-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: Shakeel Butt <shakeelb@google.com>
    Reviewed-by: Muchun Song <songmuchun@bytedance.com>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: Shuah Khan <shuah@kernel.org>
    Cc: Miaohe Lin <linmiaohe@huawei.com>
    Cc: Oscar Salvador <osalvador@suse.de>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Jue Wang <juew@google.com>
    Cc: Yang Yao <ygyao@google.com>
    Cc: Joanna Li <joannali@google.com>
    Cc: Cannon Matthews <cannonmatthews@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit b35b6d4d71365fbfb6f2cc8edc331b3882ca817e
Merge: bca21755b9fc 78e6e4dfd8f0
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Jan 10 20:34:00 2022 -0800

    Merge tag 'pm-5.17-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm
    
    Pull power management updates from Rafael Wysocki:
     "The most signigicant change here is the addition of a new cpufreq
      'P-state' driver for AMD processors as a better replacement for the
      venerable acpi-cpufreq driver.
    
      There are also other cpufreq updates (in the core, intel_pstate, ARM
      drivers), PM core updates (mostly related to adding new macros for
      declaring PM operations which should make the lives of driver
      developers somewhat easier), and a bunch of assorted fixes and
      cleanups.
    
      Summary:
    
       - Add new P-state driver for AMD processors (Huang Rui).
    
       - Fix initialization of min and max frequency QoS requests in the
         cpufreq core (Rafael Wysocki).
    
       - Fix EPP handling on Alder Lake in intel_pstate (Srinivas
         Pandruvada).
    
       - Make intel_pstate update cpuinfo.max_freq when notified of HWP
         capabilities changes and drop a redundant function call from that
         driver (Rafael Wysocki).
    
       - Improve IRQ support in the Qcom cpufreq driver (Ard Biesheuvel,
         Stephen Boyd, Vladimir Zapolskiy).
    
       - Fix double devm_remap() in the Mediatek cpufreq driver (Hector
         Yuan).
    
       - Introduce thermal pressure helpers for cpufreq CPU cooling (Lukasz
         Luba).
    
       - Make cpufreq use default_groups in kobj_type (Greg Kroah-Hartman).
    
       - Make cpuidle use default_groups in kobj_type (Greg Kroah-Hartman).
    
       - Fix two comments in cpuidle code (Jason Wang, Yang Li).
    
       - Allow model-specific normal EPB value to be used in the intel_epb
         sysfs attribute handling code (Srinivas Pandruvada).
    
       - Simplify locking in pm_runtime_put_suppliers() (Rafael Wysocki).
    
       - Add safety net to supplier device release in the runtime PM core
         code (Rafael Wysocki).
    
       - Capture device status before disabling runtime PM for it (Rafael
         Wysocki).
    
       - Add new macros for declaring PM operations to allow drivers to
         avoid guarding them with CONFIG_PM #ifdefs or __maybe_unused and
         update some drivers to use these macros (Paul Cercueil).
    
       - Allow ACPI hardware signature to be honoured during restore from
         hibernation (David Woodhouse).
    
       - Update outdated operating performance points (OPP) documentation
         (Tang Yizhou).
    
       - Reduce log severity for informative message regarding frequency
         transition failures in devfreq (Tzung-Bi Shih).
    
       - Add DRAM frequency controller devfreq driver for Allwinner sunXi
         SoCs (Samuel Holland).
    
       - Add missing COMMON_CLK dependency to sun8i devfreq driver (Arnd
         Bergmann).
    
       - Add support for new layout of Psys PowerLimit Register on SPR to
         the Intel RAPL power capping driver (Zhang Rui).
    
       - Fix typo in a comment in idle_inject.c (Jason Wang).
    
       - Remove unused function definition from the DTPM (Dynamit Thermal
         Power Management) power capping framework (Daniel Lezcano).
    
       - Reduce DTPM trace verbosity (Daniel Lezcano)"
    
    * tag 'pm-5.17-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/rafael/linux-pm: (53 commits)
      x86, sched: Fix undefined reference to init_freq_invariance_cppc() build error
      cpufreq: amd-pstate: Fix Kconfig dependencies for AMD P-State
      cpufreq: amd-pstate: Fix struct amd_cpudata kernel-doc comment
      cpuidle: use default_groups in kobj_type
      x86: intel_epb: Allow model specific normal EPB value
      MAINTAINERS: Add AMD P-State driver maintainer entry
      Documentation: amd-pstate: Add AMD P-State driver introduction
      cpufreq: amd-pstate: Add AMD P-State performance attributes
      cpufreq: amd-pstate: Add AMD P-State frequencies attributes
      cpufreq: amd-pstate: Add boost mode support for AMD P-State
      cpufreq: amd-pstate: Add trace for AMD P-State module
      cpufreq: amd-pstate: Introduce the support for the processors with shared memory solution
      cpufreq: amd-pstate: Add fast switch function for AMD P-State
      cpufreq: amd-pstate: Introduce a new AMD P-State driver to support future processors
      ACPI: CPPC: Add CPPC enable register function
      ACPI: CPPC: Check present CPUs for determining _CPC is valid
      ACPI: CPPC: Implement support for SystemIO registers
      x86/msr: Add AMD CPPC MSR definitions
      x86/cpufeatures: Add AMD Collaborative Processor Performance Control feature flag
      cpufreq: use default_groups in kobj_type
      ...

commit 5561f25beb30bfd95559972858125320411e00d9
Merge: 4ecc933b7d1f 6c4ab1b86dac
Author: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
Date:   Mon Jan 10 17:54:45 2022 +0100

    Merge branch 'pm-cpufreq'
    
    Merge cpufreq updates for 5.17-rc1:
    
     - Add new P-state driver for AMD processors (Huang Rui).
    
     - Fix initialization of min and max frequency QoS requests in the
       cpufreq core (Rafael Wysocki).
    
     - Fix EPP handling on Alder Lake in intel_pstate (Srinivas Pandruvada).
    
     - Make intel_pstate update cpuinfo.max_freq when notified of HWP
       capabilities changes and drop a redundant function call from that
       driver (Rafael Wysocki).
    
     - Improve IRQ support in the Qcom cpufreq driver (Ard Biesheuvel,
       Stephen Boyd, Vladimir Zapolskiy).
    
     - Fix double devm_remap() in the Mediatek cpufreq driver (Hector Yuan).
    
     - Introduce thermal pressure helpers for cpufreq CPU cooling (Lukasz
       Luba).
    
     - Make cpufreq use default_groups in kobj_type (Greg Kroah-Hartman).
    
    * pm-cpufreq: (32 commits)
      x86, sched: Fix undefined reference to init_freq_invariance_cppc() build error
      cpufreq: amd-pstate: Fix Kconfig dependencies for AMD P-State
      cpufreq: amd-pstate: Fix struct amd_cpudata kernel-doc comment
      MAINTAINERS: Add AMD P-State driver maintainer entry
      Documentation: amd-pstate: Add AMD P-State driver introduction
      cpufreq: amd-pstate: Add AMD P-State performance attributes
      cpufreq: amd-pstate: Add AMD P-State frequencies attributes
      cpufreq: amd-pstate: Add boost mode support for AMD P-State
      cpufreq: amd-pstate: Add trace for AMD P-State module
      cpufreq: amd-pstate: Introduce the support for the processors with shared memory solution
      cpufreq: amd-pstate: Add fast switch function for AMD P-State
      cpufreq: amd-pstate: Introduce a new AMD P-State driver to support future processors
      ACPI: CPPC: Add CPPC enable register function
      ACPI: CPPC: Check present CPUs for determining _CPC is valid
      ACPI: CPPC: Implement support for SystemIO registers
      x86/msr: Add AMD CPPC MSR definitions
      x86/cpufeatures: Add AMD Collaborative Processor Performance Control feature flag
      cpufreq: use default_groups in kobj_type
      cpufreq: mediatek-hw: Fix double devm_remap in hotplug case
      cpufreq: intel_pstate: Update cpuinfo.max_freq on HWP_CAP changes
      ...

commit 940e68e57ab69248fabba5889e615305789db8a7
Author: Jens Wiklander <jens.wiklander@linaro.org>
Date:   Thu Dec 9 15:59:37 2021 +0100

    tee: handle lookup of shm with reference count 0
    
    commit dfd0743f1d9ea76931510ed150334d571fbab49d upstream.
    
    Since the tee subsystem does not keep a strong reference to its idle
    shared memory buffers, it races with other threads that try to destroy a
    shared memory through a close of its dma-buf fd or by unmapping the
    memory.
    
    In tee_shm_get_from_id() when a lookup in teedev->idr has been
    successful, it is possible that the tee_shm is in the dma-buf teardown
    path, but that path is blocked by the teedev mutex. Since we don't have
    an API to tell if the tee_shm is in the dma-buf teardown path or not we
    must find another way of detecting this condition.
    
    Fix this by doing the reference counting directly on the tee_shm using a
    new refcount_t refcount field. dma-buf is replaced by using
    anon_inode_getfd() instead, this separates the life-cycle of the
    underlying file from the tee_shm. tee_shm_put() is updated to hold the
    mutex when decreasing the refcount to 0 and then remove the tee_shm from
    teedev->idr before releasing the mutex. This means that the tee_shm can
    never be found unless it has a refcount larger than 0.
    
    Fixes: 967c9cca2cc5 ("tee: generic TEE subsystem")
    Cc: stable@vger.kernel.org
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Reviewed-by: Lars Persson <larper@axis.com>
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Reported-by: Patrik Lantz <patrik.lantz@axis.com>
    [JW: backport to 5.4-stable]
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b4a661b4212b8fac8853ec3b68e4a909dccc88a1
Author: Jens Wiklander <jens.wiklander@linaro.org>
Date:   Thu Dec 9 15:59:37 2021 +0100

    tee: handle lookup of shm with reference count 0
    
    commit dfd0743f1d9ea76931510ed150334d571fbab49d upstream.
    
    Since the tee subsystem does not keep a strong reference to its idle
    shared memory buffers, it races with other threads that try to destroy a
    shared memory through a close of its dma-buf fd or by unmapping the
    memory.
    
    In tee_shm_get_from_id() when a lookup in teedev->idr has been
    successful, it is possible that the tee_shm is in the dma-buf teardown
    path, but that path is blocked by the teedev mutex. Since we don't have
    an API to tell if the tee_shm is in the dma-buf teardown path or not we
    must find another way of detecting this condition.
    
    Fix this by doing the reference counting directly on the tee_shm using a
    new refcount_t refcount field. dma-buf is replaced by using
    anon_inode_getfd() instead, this separates the life-cycle of the
    underlying file from the tee_shm. tee_shm_put() is updated to hold the
    mutex when decreasing the refcount to 0 and then remove the tee_shm from
    teedev->idr before releasing the mutex. This means that the tee_shm can
    never be found unless it has a refcount larger than 0.
    
    Fixes: 967c9cca2cc5 ("tee: generic TEE subsystem")
    Cc: stable@vger.kernel.org
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Reviewed-by: Lars Persson <larper@axis.com>
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Reported-by: Patrik Lantz <patrik.lantz@axis.com>
    [JW: backport to 4.19-stable]
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3d556a28bbfe34a80b014db49908b0f1bcb1ae80
Author: Jens Wiklander <jens.wiklander@linaro.org>
Date:   Thu Dec 9 15:59:37 2021 +0100

    tee: handle lookup of shm with reference count 0
    
    commit dfd0743f1d9ea76931510ed150334d571fbab49d upstream.
    
    Since the tee subsystem does not keep a strong reference to its idle
    shared memory buffers, it races with other threads that try to destroy a
    shared memory through a close of its dma-buf fd or by unmapping the
    memory.
    
    In tee_shm_get_from_id() when a lookup in teedev->idr has been
    successful, it is possible that the tee_shm is in the dma-buf teardown
    path, but that path is blocked by the teedev mutex. Since we don't have
    an API to tell if the tee_shm is in the dma-buf teardown path or not we
    must find another way of detecting this condition.
    
    Fix this by doing the reference counting directly on the tee_shm using a
    new refcount_t refcount field. dma-buf is replaced by using
    anon_inode_getfd() instead, this separates the life-cycle of the
    underlying file from the tee_shm. tee_shm_put() is updated to hold the
    mutex when decreasing the refcount to 0 and then remove the tee_shm from
    teedev->idr before releasing the mutex. This means that the tee_shm can
    never be found unless it has a refcount larger than 0.
    
    Fixes: 967c9cca2cc5 ("tee: generic TEE subsystem")
    Cc: stable@vger.kernel.org
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Reviewed-by: Lars Persson <larper@axis.com>
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Reported-by: Patrik Lantz <patrik.lantz@axis.com>
    [JW: backported to 4.14-stable]
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e059c184da47e92c6236f26b0fdaf9e92f0d55b5
Author: Huang Rui <ray.huang@amd.com>
Date:   Fri Dec 24 09:05:02 2021 +0800

    cpufreq: amd-pstate: Introduce the support for the processors with shared memory solution
    
    In some of Zen2 and Zen3 based processors, they are using the shared
    memory that exposed from ACPI SBIOS. In this kind of the processors,
    there is no MSR support, so we add acpi cppc function as the backend for
    them.
    
    It is using a module param (shared_mem) to enable related processors
    manually. We will enable this by default once we address performance
    issue on this solution.
    
    Signed-off-by: Jinzhou Su <Jinzhou.Su@amd.com>
    Signed-off-by: Huang Rui <ray.huang@amd.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit ec437d71db77a181227bf6d0ac9d4a80e58ecf0f
Author: Huang Rui <ray.huang@amd.com>
Date:   Fri Dec 24 09:05:00 2021 +0800

    cpufreq: amd-pstate: Introduce a new AMD P-State driver to support future processors
    
    AMD P-State is the AMD CPU performance scaling driver that introduces a
    new CPU frequency control mechanism on AMD Zen based CPU series in Linux
    kernel. The new mechanism is based on Collaborative processor
    performance control (CPPC) which is finer grain frequency management
    than legacy ACPI hardware P-States. Current AMD CPU platforms are using
    the ACPI P-states driver to manage CPU frequency and clocks with
    switching only in 3 P-states. AMD P-State is to replace the ACPI
    P-states controls, allows a flexible, low-latency interface for the
    Linux kernel to directly communicate the performance hints to hardware.
    
    AMD P-State leverages the Linux kernel governors such as *schedutil*,
    *ondemand*, etc. to manage the performance hints which are provided by CPPC
    hardware functionality. The first version for AMD P-State is to support one
    of the Zen3 processors, and we will support more in future after we verify
    the hardware and SBIOS functionalities.
    
    There are two types of hardware implementations for AMD P-State: one is full
    MSR support and another is shared memory support. It can use
    X86_FEATURE_CPPC feature flag to distinguish the different types.
    
    Using the new AMD P-State method + kernel governors (*schedutil*,
    *ondemand*, ...) to manage the frequency update is the most appropriate
    bridge between AMD Zen based hardware processor and Linux kernel, the
    processor is able to adjust to the most efficiency frequency according to
    the kernel scheduler loading.
    
    Please check the detailed CPU feature and MSR register description in
    Processor Programming Reference (PPR) for AMD Family 19h Model 51h,
    Revision A1 Processors:
    
    https://www.amd.com/system/files/TechDocs/56569-A1-PUB.zip
    
    Signed-off-by: Huang Rui <ray.huang@amd.com>
    Signed-off-by: Rafael J. Wysocki <rafael.j.wysocki@intel.com>

commit 492eb7afe858d60408b2da09adc78540c4d16543
Author: Jens Wiklander <jens.wiklander@linaro.org>
Date:   Thu Dec 9 15:59:37 2021 +0100

    tee: handle lookup of shm with reference count 0
    
    commit dfd0743f1d9ea76931510ed150334d571fbab49d upstream.
    
    Since the tee subsystem does not keep a strong reference to its idle
    shared memory buffers, it races with other threads that try to destroy a
    shared memory through a close of its dma-buf fd or by unmapping the
    memory.
    
    In tee_shm_get_from_id() when a lookup in teedev->idr has been
    successful, it is possible that the tee_shm is in the dma-buf teardown
    path, but that path is blocked by the teedev mutex. Since we don't have
    an API to tell if the tee_shm is in the dma-buf teardown path or not we
    must find another way of detecting this condition.
    
    Fix this by doing the reference counting directly on the tee_shm using a
    new refcount_t refcount field. dma-buf is replaced by using
    anon_inode_getfd() instead, this separates the life-cycle of the
    underlying file from the tee_shm. tee_shm_put() is updated to hold the
    mutex when decreasing the refcount to 0 and then remove the tee_shm from
    teedev->idr before releasing the mutex. This means that the tee_shm can
    never be found unless it has a refcount larger than 0.
    
    Fixes: 967c9cca2cc5 ("tee: generic TEE subsystem")
    Cc: stable@vger.kernel.org
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Reviewed-by: Lars Persson <larper@axis.com>
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Reported-by: Patrik Lantz <patrik.lantz@axis.com>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c05d8f66ec3470e5212c4d08c46d6cb5738d600d
Author: Jens Wiklander <jens.wiklander@linaro.org>
Date:   Thu Dec 9 15:59:37 2021 +0100

    tee: handle lookup of shm with reference count 0
    
    commit dfd0743f1d9ea76931510ed150334d571fbab49d upstream.
    
    Since the tee subsystem does not keep a strong reference to its idle
    shared memory buffers, it races with other threads that try to destroy a
    shared memory through a close of its dma-buf fd or by unmapping the
    memory.
    
    In tee_shm_get_from_id() when a lookup in teedev->idr has been
    successful, it is possible that the tee_shm is in the dma-buf teardown
    path, but that path is blocked by the teedev mutex. Since we don't have
    an API to tell if the tee_shm is in the dma-buf teardown path or not we
    must find another way of detecting this condition.
    
    Fix this by doing the reference counting directly on the tee_shm using a
    new refcount_t refcount field. dma-buf is replaced by using
    anon_inode_getfd() instead, this separates the life-cycle of the
    underlying file from the tee_shm. tee_shm_put() is updated to hold the
    mutex when decreasing the refcount to 0 and then remove the tee_shm from
    teedev->idr before releasing the mutex. This means that the tee_shm can
    never be found unless it has a refcount larger than 0.
    
    Fixes: 967c9cca2cc5 ("tee: generic TEE subsystem")
    Cc: stable@vger.kernel.org
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Reviewed-by: Lars Persson <larper@axis.com>
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Reported-by: Patrik Lantz <patrik.lantz@axis.com>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf322084fec30b92423911db0169a3610008fc15
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Mon Dec 20 19:56:40 2021 +0000

    firmware: arm_scmi: Make optee support sync_cmds_completed_on_ret
    
    Declare each OPTEE SCMI channel as not having a completion_irq so as to
    enable polling mode and then enable also .sync_cmds_completed_on_ret flag
    in the OPTEE transport descriptor so that real polling is itself
    effectively bypassed on the rx path: once the optee command invocation has
    successfully returned the core will directly fetch the response from the
    shared memory area.
    
    Remove OPTEE SCMI transport specific .poll_done callback support since
    real polling is effectively bypassed when .sync_cmds_completed_on_ret is
    set.
    
    Add OPTEE SCMI transport specific .mark_txdone callback support in order to
    properly handle channel locking along the tx path.
    
    Link: https://lore.kernel.org/r/20211220195646.44498-6-cristian.marussi@arm.com
    Cc: Etienne Carriere <etienne.carriere@linaro.org>
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>

commit 846da38de0e8224f2f94b885125cf1fd2d7b0d39
Author: Tianyu Lan <Tianyu.Lan@microsoft.com>
Date:   Mon Dec 13 02:14:06 2021 -0500

    net: netvsc: Add Isolation VM support for netvsc driver
    
    In Isolation VM, all shared memory with host needs to mark visible
    to host via hvcall. vmbus_establish_gpadl() has already done it for
    netvsc rx/tx ring buffer. The page buffer used by vmbus_sendpacket_
    pagebuffer() stills need to be handled. Use DMA API to map/umap
    these memory during sending/receiving packet and Hyper-V swiotlb
    bounce buffer dma address will be returned. The swiotlb bounce buffer
    has been masked to be visible to host during boot up.
    
    rx/tx ring buffer is allocated via vzalloc() and they need to be
    mapped into unencrypted address space(above vTOM) before sharing
    with host and accessing. Add hv_map/unmap_memory() to map/umap rx
    /tx ring buffer.
    
    Signed-off-by: Tianyu Lan <Tianyu.Lan@microsoft.com>
    Reviewed-by: Haiyang Zhang <haiyangz@microsoft.com>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Link: https://lore.kernel.org/r/20211213071407.314309-6-ltykernel@gmail.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>

commit 743b237c3a7b0f5b44aa704aae8a1058877b6322
Author: Tianyu Lan <Tianyu.Lan@microsoft.com>
Date:   Mon Dec 13 02:14:05 2021 -0500

    scsi: storvsc: Add Isolation VM support for storvsc driver
    
    In Isolation VM, all shared memory with host needs to mark visible
    to host via hvcall. vmbus_establish_gpadl() has already done it for
    storvsc rx/tx ring buffer. The page buffer used by vmbus_sendpacket_
    mpb_desc() still needs to be handled. Use DMA API(scsi_dma_map/unmap)
    to map these memory during sending/receiving packet and return swiotlb
    bounce buffer dma address. In Isolation VM, swiotlb  bounce buffer is
    marked to be visible to host and the swiotlb force mode is enabled.
    
    Set device's dma min align mask to HV_HYP_PAGE_SIZE - 1 in order to
    keep the original data offset in the bounce buffer.
    
    Signed-off-by: Tianyu Lan <Tianyu.Lan@microsoft.com>
    Reviewed-by: Long Li <longli@microsoft.com>
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Link: https://lore.kernel.org/r/20211213071407.314309-5-ltykernel@gmail.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>

commit a6a476878ea9f774a5e7794eaa7c19f7a6fffd26
Merge: 2585cf9dfaad 6add87fdae9b
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Dec 17 15:51:15 2021 +0100

    Merge tag 'fixes-for-v5.16' of https://git.linaro.org/people/jens.wiklander/linux-tee into arm/fixes
    
    TEE and OP-TEE fixes for v5.16
    
    - Fixes a race when a tee_shm reaches reference count 0 and is about to
      be teared down
    - Fixes an incorrect page free bug in an error path of the OP-TEE shared
      memory pool handling
    - Suppresses a false positive kmemleak report when allocating driver
      private shared memory buffers for OP-TEE
    
    * tag 'fixes-for-v5.16' of https://git.linaro.org/people/jens.wiklander/linux-tee:
      optee: Suppress false positive kmemleak report in optee_handle_rpc()
      tee: optee: Fix incorrect page free bug
      tee: handle lookup of shm with reference count 0
    
    Link: https://lore.kernel.org/r/20211216150745.GA3347954@jade
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 60ded273e4c047aec364f70195aced71a4082f90
Author: Karol Trzcinski <karolx.trzcinski@linux.intel.com>
Date:   Thu Dec 16 17:24:22 2021 -0600

    ipc: debug: Add shared memory heap to memory scan
    
    Newly added shared heap zones should be taken into account during
    memory usage scanning.
    
    Reviewed-by: Kai Vehmanen <kai.vehmanen@linux.intel.com>
    Reviewed-by: Liam Girdwood <liam.r.girdwood@intel.com>
    Signed-off-by: Karol Trzcinski <karolx.trzcinski@linux.intel.com>
    Signed-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
    Link: https://lore.kernel.org/r/20211216232422.345164-4-pierre-louis.bossart@linux.intel.com
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 98094be152d34f8014ca67fbdc210e5261c4b09d
Author: Mikko Perttunen <mperttunen@nvidia.com>
Date:   Fri Nov 12 13:35:39 2021 +0100

    arm64: tegra: Update Tegra234 BPMP channel addresses
    
    On final Tegra234 systems, shared memory for communication with BPMP is
    located at offset 0x70000 in SYSRAM.
    
    Signed-off-by: Mikko Perttunen <mperttunen@nvidia.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>

commit 376a240f037959c2b9a2486e53bcd8d388cbec17
Author: Will Deacon <will@kernel.org>
Date:   Wed Dec 15 16:12:29 2021 +0000

    KVM: arm64: Implement do_unshare() helper for unsharing memory
    
    Tearing down a previously shared memory region results in the borrower
    losing access to the underlying pages and returning them to the "owned"
    state in the owner.
    
    Implement a do_unshare() helper, along the same lines as do_share(), to
    provide this functionality for the host-to-hyp case.
    
    Reviewed-by: Andrew Walbran <qwandor@google.com>
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Quentin Perret <qperret@google.com>
    Signed-off-by: Marc Zyngier <maz@kernel.org>
    Link: https://lore.kernel.org/r/20211215161232.1480836-13-qperret@google.com

commit dfd0743f1d9ea76931510ed150334d571fbab49d
Author: Jens Wiklander <jens.wiklander@linaro.org>
Date:   Thu Dec 9 15:59:37 2021 +0100

    tee: handle lookup of shm with reference count 0
    
    Since the tee subsystem does not keep a strong reference to its idle
    shared memory buffers, it races with other threads that try to destroy a
    shared memory through a close of its dma-buf fd or by unmapping the
    memory.
    
    In tee_shm_get_from_id() when a lookup in teedev->idr has been
    successful, it is possible that the tee_shm is in the dma-buf teardown
    path, but that path is blocked by the teedev mutex. Since we don't have
    an API to tell if the tee_shm is in the dma-buf teardown path or not we
    must find another way of detecting this condition.
    
    Fix this by doing the reference counting directly on the tee_shm using a
    new refcount_t refcount field. dma-buf is replaced by using
    anon_inode_getfd() instead, this separates the life-cycle of the
    underlying file from the tee_shm. tee_shm_put() is updated to hold the
    mutex when decreasing the refcount to 0 and then remove the tee_shm from
    teedev->idr before releasing the mutex. This means that the tee_shm can
    never be found unless it has a refcount larger than 0.
    
    Fixes: 967c9cca2cc5 ("tee: generic TEE subsystem")
    Cc: stable@vger.kernel.org
    Reviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Reviewed-by: Lars Persson <larper@axis.com>
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Reported-by: Patrik Lantz <patrik.lantz@axis.com>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

commit afc9c1e26bc7d3145bd1112d74bbe8d0152da934
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Thu Nov 25 15:07:30 2021 +0000

    firmware: arm_scmi: optee: Drop the support for the OPTEE shared dynamic buffer
    
    The shared memory buffer allocated by the optee driver is normal cached
    memory and can't be used with IOMEM APIs used in shmem_*.
    
    We currently support only IO memory for shared memory and supporting
    normal cached memory needs more changes and needs to be thought through
    properly. So for now, let us drop the support for this OPTEE shared buffer.
    
    Link: https://lore.kernel.org/r/20211125150730.188487-1-sudeep.holla@arm.com
    Cc: Cristian Marussi <cristian.marussi@arm.com>
    Cc: Etienne Carriere <etienne.carriere@linaro.org>
    Reviewed-by: Etienne Carriere <etienne.carriere@linaro.org>
    Reviewed-by: Cristian Marussi <cristian.marussi@arm.com>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>

commit 5969e2435cbd7f0ce8c28d717bfc39987ee8d8f1
Author: Tom Lendacky <thomas.lendacky@amd.com>
Date:   Mon May 24 12:48:57 2021 -0500

    KVM: x86: Assume a 64-bit hypercall for guests with protected state
    
    commit b5aead0064f33ae5e693a364e3204fe1c0ac9af2 upstream.
    
    When processing a hypercall for a guest with protected state, currently
    SEV-ES guests, the guest CS segment register can't be checked to
    determine if the guest is in 64-bit mode. For an SEV-ES guest, it is
    expected that communication between the guest and the hypervisor is
    performed to shared memory using the GHCB. In order to use the GHCB, the
    guest must have been in long mode, otherwise writes by the guest to the
    GHCB would be encrypted and not be able to be comprehended by the
    hypervisor.
    
    Create a new helper function, is_64_bit_hypercall(), that assumes the
    guest is in 64-bit mode when the guest has protected state, and returns
    true, otherwise invoking is_64_bit_mode() to determine the mode. Update
    the hypercall related routines to use is_64_bit_hypercall() instead of
    is_64_bit_mode().
    
    Add a WARN_ON_ONCE() to is_64_bit_mode() to catch occurences of calls to
    this helper function for a guest running with protected state.
    
    Fixes: f1c6366e3043 ("KVM: SVM: Add required changes to support intercepts under SEV-ES")
    Reported-by: Sean Christopherson <seanjc@google.com>
    Signed-off-by: Tom Lendacky <thomas.lendacky@amd.com>
    Message-Id: <e0b20c770c9d0d1403f23d83e785385104211f74.1621878537.git.thomas.lendacky@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5979873ebbb57b72a8f88ba26d3bd405981cd844
Author: Umesh Nerlige Ramappa <umesh.nerlige.ramappa@intel.com>
Date:   Mon Nov 15 14:16:40 2021 -0800

    drm/i915/pmu: Increase the live_engine_busy_stats sample period
    
    Irrespective of the backend for request submissions, busyness for an
    engine with an active context is calculated using:
    
    busyness = total + (current_time - context_switch_in_time)
    
    In execlists mode of operation, the context switch events are handled
    by the CPU. Context switch in/out time and current_time are captured
    in CPU time domain using ktime_get().
    
    In GuC mode of submission, context switch events are handled by GuC and
    the times in the above formula are captured in GT clock domain. This
    information is shared with the CPU through shared memory. This results
    in 2 caveats:
    
    1) The time taken between start of a batch and the time that CPU is able
    to see the context_switch_in_time in shared memory is dependent on GuC
    and memory bandwidth constraints.
    
    2) Determining current_time requires an MMIO read that can take anywhere
    between a few us to a couple ms. A reference CPU time is captured soon
    after reading the MMIO so that the caller can compare the cpu delta
    between 2 busyness samples. The issue here is that the CPU delta and the
    busyness delta can be skewed because of the time taken to read the
    register.
    
    These 2 factors affect the accuracy of the selftest -
    live_engine_busy_stats. For (1) the selftest waits until busyness stats
    are visible to the CPU. The effects of (2) are more prominent for the
    current busyness sample period of 100 us. Increase the busyness sample
    period from 100 us to 10 ms to overccome (2).
    
    v2: Fix checkpatch issues
    
    Signed-off-by: Umesh Nerlige Ramappa <umesh.nerlige.ramappa@intel.com>
    Reviewed-by: Matthew Brost <matthew.brost@intel.com>
    Signed-off-by: John Harrison <John.C.Harrison@Intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20211115221640.30793-1-umesh.nerlige.ramappa@intel.com

commit b5aead0064f33ae5e693a364e3204fe1c0ac9af2
Author: Tom Lendacky <thomas.lendacky@amd.com>
Date:   Mon May 24 12:48:57 2021 -0500

    KVM: x86: Assume a 64-bit hypercall for guests with protected state
    
    When processing a hypercall for a guest with protected state, currently
    SEV-ES guests, the guest CS segment register can't be checked to
    determine if the guest is in 64-bit mode. For an SEV-ES guest, it is
    expected that communication between the guest and the hypervisor is
    performed to shared memory using the GHCB. In order to use the GHCB, the
    guest must have been in long mode, otherwise writes by the guest to the
    GHCB would be encrypted and not be able to be comprehended by the
    hypervisor.
    
    Create a new helper function, is_64_bit_hypercall(), that assumes the
    guest is in 64-bit mode when the guest has protected state, and returns
    true, otherwise invoking is_64_bit_mode() to determine the mode. Update
    the hypercall related routines to use is_64_bit_hypercall() instead of
    is_64_bit_mode().
    
    Add a WARN_ON_ONCE() to is_64_bit_mode() to catch occurences of calls to
    this helper function for a guest running with protected state.
    
    Fixes: f1c6366e3043 ("KVM: SVM: Add required changes to support intercepts under SEV-ES")
    Reported-by: Sean Christopherson <seanjc@google.com>
    Signed-off-by: Tom Lendacky <thomas.lendacky@amd.com>
    Message-Id: <e0b20c770c9d0d1403f23d83e785385104211f74.1621878537.git.thomas.lendacky@amd.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

commit 5f90f189a052f6fc46048f6ce29a37b709548b81
Author: Etienne Carriere <etienne.carriere@linaro.org>
Date:   Thu Oct 28 16:00:09 2021 +0200

    firmware: arm_scmi: Add optee transport
    
    Add a new transport channel to the SCMI firmware interface driver for
    SCMI message exchange based on optee transport channel. The optee
    transport is realized by connecting and invoking OP-TEE SCMI service
    interface PTA.
    
    Optee transport support (CONFIG_ARM_SCMI_TRANSPORT_OPTEE) is default
    enabled when optee driver (CONFIG_OPTEE) is enabled. Effective optee
    transport is setup upon OP-TEE SCMI service discovery at optee
    device initialization. For this SCMI UUID is registered to the optee
    bus for probing. This is done from the link_supplier operator of the
    SCMI optee transport.
    
    The optee transport can use a statically defined shared memory in
    which case SCMI device tree node defines it using an "arm,scmi-shmem"
    compatible phandle through property shmem. Alternatively, optee transport
    allocates the shared memory buffer from the optee driver when no shmem
    property is defined.
    
    The protocol used to exchange SCMI message over that shared memory is
    negotiated between optee transport driver and the OP-TEE service through
    capabilities exchange.
    
    OP-TEE SCMI service is integrated in OP-TEE since its release tag 3.13.0.
    The service interface is published in [1].
    
    Link: [1] https://github.com/OP-TEE/optee_os/blob/3.13.0/lib/libutee/include/pta_scmi_client.h
    Link: https://lore.kernel.org/r/20211028140009.23331-2-etienne.carriere@linaro.org
    Cc: Cristian Marussi <cristian.marussi@arm.com>
    Cc: Sudeep Holla <sudeep.holla@arm.com>
    Reviewed-by: Cristian Marussi <cristian.marussi@arm.com>
    Signed-off-by: Etienne Carriere <etienne.carriere@linaro.org>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>

commit cbbb69d3c432da9d4afe734ca451fa2c012c05e2
Author: Tiberiu A Georgescu <tiberiu.georgescu@nutanix.com>
Date:   Fri Nov 5 13:38:44 2021 -0700

    Documentation: update pagemap with shmem exceptions
    
    This patch follows the discussions on previous documentation patch
    threads [1][2].  It presents the exception case of shared memory
    management from the pagemap's point of view.  It briefly describes what
    is missing, why it is missing and alternatives to the pagemap for page
    info retrieval in user space.
    
    In short, the kernel does not keep track of PTEs for swapped out shared
    pages within the processes that references them.  Thus, the
    proc/pid/pagemap tool cannot print the swap destination of the shared
    memory pages, instead setting the pagemap entry to zero for both
    non-allocated and swapped out pages.  This can create confusion for
    users who need information on swapped out pages.
    
    The reasons why maintaining the PTEs of all swapped out shared pages
    among all processes while maintaining similar performance is not a
    trivial task, or a desirable change, have been discussed extensively
    [1][3][4][5].  There are also arguments for why this arguably missing
    information should eventually be exposed to the user in either a future
    pagemap patch, or by an alternative tool.
    
    [1]: https://marc.info/?m=162878395426774
    [2]: https://lore.kernel.org/lkml/20210920164931.175411-1-tiberiu.georgescu@nutanix.com/
    [3]: https://lore.kernel.org/lkml/20210730160826.63785-1-tiberiu.georgescu@nutanix.com/
    [4]: https://lore.kernel.org/lkml/20210807032521.7591-1-peterx@redhat.com/
    [5]: https://lore.kernel.org/lkml/20210715201651.212134-1-peterx@redhat.com/
    
    Mention the current missing information in the pagemap and alternatives
    on how to retrieve it, in case someone stumbles upon unexpected
    behaviour.
    
    Link: https://lkml.kernel.org/r/20210923064618.157046-1-tiberiu.georgescu@nutanix.com
    Link: https://lkml.kernel.org/r/20210923064618.157046-2-tiberiu.georgescu@nutanix.com
    Signed-off-by: Tiberiu A Georgescu <tiberiu.georgescu@nutanix.com>
    Reviewed-by: Ivan Teterevkov <ivan.teterevkov@nutanix.com>
    Reviewed-by: Florian Schmidt <florian.schmidt@nutanix.com>
    Reviewed-by: Carl Waldspurger <carl.waldspurger@nutanix.com>
    Reviewed-by: Jonathan Davies <jonathan.davies@nutanix.com>
    Reviewed-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: David Hildenbrand <david@redhat.com>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 44261f8e287d1b02a2e4bfbd7399fb8d37d1ee24
Merge: 0aaa58eca65a 285f68afa8b2
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Nov 2 10:56:49 2021 -0700

    Merge tag 'hyperv-next-signed-20211102' of git://git.kernel.org/pub/scm/linux/kernel/git/hyperv/linux
    
    Pull hyperv updates from Wei Liu:
    
     - Initial patch set for Hyper-V isolation VM support (Tianyu Lan)
    
     - Fix a warning on preemption (Vitaly Kuznetsov)
    
     - A bunch of misc cleanup patches
    
    * tag 'hyperv-next-signed-20211102' of git://git.kernel.org/pub/scm/linux/kernel/git/hyperv/linux:
      x86/hyperv: Protect set_hv_tscchange_cb() against getting preempted
      Drivers: hv : vmbus: Adding NULL pointer check
      x86/hyperv: Remove duplicate include
      x86/hyperv: Remove duplicated include in hv_init
      Drivers: hv: vmbus: Remove unused code to check for subchannels
      Drivers: hv: vmbus: Initialize VMbus ring buffer for Isolation VM
      Drivers: hv: vmbus: Add SNP support for VMbus channel initiate message
      x86/hyperv: Add ghcb hvcall support for SNP VM
      x86/hyperv: Add Write/Read MSR registers via ghcb page
      Drivers: hv: vmbus: Mark vmbus ring buffer visible to host in Isolation VM
      x86/hyperv: Add new hvcall guest address host visibility support
      x86/hyperv: Initialize shared memory boundary in the Isolation VM.
      x86/hyperv: Initialize GHCB page in Isolation VM

commit 247ee3e7b7c9ada8fd55f306c63352ef33b5d2e3
Merge: 8a73c77c809a 97961f78e8bc
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Nov 1 18:58:13 2021 -0700

    Merge tag 'mailbox-v5.16' of git://git.linaro.org/landing-teams/working/fujitsu/integration
    
    Pull mailbox updates from Jassi Brar:
     "qcom:
       - add support for qcm2290
       - consolidate msm8994 type apcs_data
    
      mtk:
       - fix clock id usage
    
      apple:
       - add driver for ASC/M3 controllers
    
      pcc:
       - reorganise PCC pcc_mbox_request_channel
       - add support for PCCT extended PCC subspaces
    
      misc:
       - make use of devm_platform_ioremap_resource()
       - change Altera, PCC and Apple mailbox maintainers"
    
    * tag 'mailbox-v5.16' of git://git.linaro.org/landing-teams/working/fujitsu/integration: (38 commits)
      mailbox: imx: support i.MX8ULP S4 MU
      dt-bindings: mailbox: imx-mu: add i.MX8ULP S400 MU support
      ACPI/PCC: Add maintainer for PCC mailbox driver
      mailbox: pcc: Move bulk of PCCT parsing into pcc_mbox_probe
      mailbox: pcc: Add support for PCCT extended PCC subspaces(type 3/4)
      mailbox: pcc: Drop handling invalid bit-width in {read,write}_register
      mailbox: pcc: Avoid accessing PCCT table in pcc_send_data and pcc_mbox_irq
      mailbox: pcc: Add PCC register bundle and associated accessor functions
      mailbox: pcc: Rename doorbell ack to platform interrupt ack register
      mailbox: pcc: Use PCC mailbox channel pointer instead of standard
      mailbox: pcc: Add pcc_mbox_chan structure to hold shared memory region info
      mailbox: pcc: Consolidate subspace doorbell register parsing
      mailbox: pcc: Consolidate subspace interrupt information parsing
      mailbox: pcc: Refactor all PCC channel information into a structure
      mailbox: pcc: Fix kernel doc warnings
      mailbox: apple: Add driver for Apple mailboxes
      dt-bindings: mailbox: Add Apple mailbox bindings
      MAINTAINERS: Add Apple mailbox files
      mailbox: mtk-cmdq: Fix local clock ID usage
      mailbox: mtk-cmdq: Validate alias_id on probe
      ...

commit 7b6da7fe7bba1cdccdda871bf393b855e59404c3
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Fri Sep 17 14:33:50 2021 +0100

    mailbox: pcc: Use PCC mailbox channel pointer instead of standard
    
    Now that we have all the shared memory region information populated in
    the pcc_mbox_chan, let us propagate the pointer to the same as the
    return value to pcc_mbox_request channel.
    
    This eliminates the need for the individual users of PCC mailbox to
    parse the PCCT subspace entries and fetch the shmem information. This
    also eliminates the need for PCC mailbox controller to set con_priv to
    PCCT subspace entries. This is required as con_priv is private to the
    controller driver to attach private data associated with the channel and
    not meant to be used by the mailbox client/users.
    
    Let us convert all the users of pcc_mbox_{request,free}_channel to use
    new interface.
    
    Cc: Jean Delvare <jdelvare@suse.com>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Acked-by: Wolfram Sang <wsa@kernel.org>
    Acked-by: Guenter Roeck <linux@roeck-us.net>
    Signed-off-by: Jassi Brar <jaswinder.singh@linaro.org>

commit 0f2591e21b2e85c05e2aa74d4703189fd3a57526
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Fri Sep 17 14:33:49 2021 +0100

    mailbox: pcc: Add pcc_mbox_chan structure to hold shared memory region info
    
    Currently PCC mailbox controller sets con_priv in each channel to hold
    the pointer to pcct subspace entry it corresponds to. The mailbox user
    will then fetch this pointer from the channel descriptor they get when
    they request for the channel. Using that pointer they then parse the
    pcct entry again to fetch all the information about shared memory region.
    
    In order to remove individual users of PCC mailbox parsing the PCCT
    subspace entries to fetch same information, let us consolidate the same
    in pcc mailbox controller by parsing all the shared memory region
    information into a structure that can also hold the mbox_chan pointer it
    represent.
    
    This can then be used as main PCC mailbox channel pointer that we can
    return as part of pcc_mbox_request_channel instead of standard mailbox
    channel pointer.
    
    Reviewed-by: Cristian Marussi <cristian.marussi@arm.com>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Jassi Brar <jaswinder.singh@linaro.org>

commit 77cdd054dd2ced6cb6f3420a998d6a0a65d6076e
Author: Umesh Nerlige Ramappa <umesh.nerlige.ramappa@intel.com>
Date:   Tue Oct 26 17:48:21 2021 -0700

    drm/i915/pmu: Connect engine busyness stats from GuC to pmu
    
    With GuC handling scheduling, i915 is not aware of the time that a
    context is scheduled in and out of the engine. Since i915 pmu relies on
    this info to provide engine busyness to the user, GuC shares this info
    with i915 for all engines using shared memory. For each engine, this
    info contains:
    
    - total busyness: total time that the context was running (total)
    - id: id of the running context (id)
    - start timestamp: timestamp when the context started running (start)
    
    At the time (now) of sampling the engine busyness, if the id is valid
    (!= ~0), and start is non-zero, then the context is considered to be
    active and the engine busyness is calculated using the below equation
    
            engine busyness = total + (now - start)
    
    All times are obtained from the gt clock base. For inactive contexts,
    engine busyness is just equal to the total.
    
    The start and total values provided by GuC are 32 bits and wrap around
    in a few minutes. Since perf pmu provides busyness as 64 bit
    monotonically increasing values, there is a need for this implementation
    to account for overflows and extend the time to 64 bits before returning
    busyness to the user. In order to do that, a worker runs periodically at
    frequency = 1/8th the time it takes for the timestamp to wrap. As an
    example, that would be once in 27 seconds for a gt clock frequency of
    19.2 MHz.
    
    Note:
    There might be an over-accounting of busyness due to the fact that GuC
    may be updating the total and start values while kmd is reading them.
    (i.e kmd may read the updated total and the stale start). In such a
    case, user may see higher busyness value followed by smaller ones which
    would eventually catch up to the higher value.
    
    v2: (Tvrtko)
    - Include details in commit message
    - Move intel engine busyness function into execlist code
    - Use union inside engine->stats
    - Use natural type for ping delay jiffies
    - Drop active_work condition checks
    - Use for_each_engine if iterating all engines
    - Drop seq locking, use spinlock at GuC level to update engine stats
    - Document worker specific details
    
    v3: (Tvrtko/Umesh)
    - Demarcate GuC and execlist stat objects with comments
    - Document known over-accounting issue in commit
    - Provide a consistent view of GuC state
    - Add hooks to gt park/unpark for GuC busyness
    - Stop/start worker in gt park/unpark path
    - Drop inline
    - Move spinlock and worker inits to GuC initialization
    - Drop helpers that are called only once
    
    v4: (Tvrtko/Matt/Umesh)
    - Drop addressed opens from commit message
    - Get runtime pm in ping, remove from the park path
    - Use cancel_delayed_work_sync in disable_submission path
    - Update stats during reset prepare
    - Skip ping if reset in progress
    - Explicitly name execlists and GuC stats objects
    - Since disable_submission is called from many places, move resetting
      stats to intel_guc_submission_reset_prepare
    
    v5: (Tvrtko)
    - Add a trylock helper that does not sleep and synchronize PMU event
      callbacks and worker with gt reset
    
    v6: (CI BAT failures)
    - DUTs using execlist submission failed to boot since __gt_unpark is
      called during i915 load. This ends up calling the GuC busyness unpark
      hook and results in kick-starting an uninitialized worker. Let
      park/unpark hooks check if GuC submission has been initialized.
    - drop cant_sleep() from trylock helper since rcu_read_lock takes care
      of that.
    
    v7: (CI) Fix igt@i915_selftest@live@gt_engines
    - For GuC mode of submission the engine busyness is derived from gt time
      domain. Use gt time elapsed as reference in the selftest.
    - Increase busyness calculation to 10ms duration to ensure batch runs
      longer and falls within the busyness tolerances in selftest.
    
    v8:
    - Use ktime_get in selftest as before
    - intel_reset_trylock_no_wait results in a lockdep splat that is not
      trivial to fix since the PMU callback runs in irq context and the
      reset paths are tightly knit into the driver. The test that uncovers
      this is igt@perf_pmu@faulting-read. Drop intel_reset_trylock_no_wait,
      instead use the reset_count to synchronize with gt reset during pmu
      callback. For the ping, continue to use intel_reset_trylock since ping
      is not run in irq context.
    
    - GuC PM timestamp does not tick when GuC is idle. This can potentially
      result in wrong busyness values when a context is active on the
      engine, but GuC is idle. Use the RING TIMESTAMP as GPU timestamp to
      process the GuC busyness stats. This works since both GuC timestamp and
      RING timestamp are synced with the same clock.
    
    - The busyness stats may get updated after the batch starts running.
      This delay causes the busyness reported for 100us duration to fall
      below 95% in the selftest. The only option at this time is to wait for
      GuC busyness to change from idle to active before we sample busyness
      over a 100us period.
    
    Signed-off-by: John Harrison <John.C.Harrison@Intel.com>
    Signed-off-by: Umesh Nerlige Ramappa <umesh.nerlige.ramappa@intel.com>
    Acked-by: Tvrtko Ursulin <tvrtko.ursulin@intel.com>
    Reviewed-by: Matthew Brost <matthew.brost@intel.com>
    Link: https://patchwork.freedesktop.org/patch/msgid/20211027004821.66097-2-umesh.nerlige.ramappa@intel.com

commit af788f355e343373490b7d2e361016e7c24a0ffa
Author: Tianyu Lan <Tianyu.Lan@microsoft.com>
Date:   Mon Oct 25 08:21:07 2021 -0400

    x86/hyperv: Initialize shared memory boundary in the Isolation VM.
    
    Hyper-V exposes shared memory boundary via cpuid
    HYPERV_CPUID_ISOLATION_CONFIG and store it in the
    shared_gpa_boundary of ms_hyperv struct. This prepares
    to share memory with host for SNP guest.
    
    Reviewed-by: Michael Kelley <mikelley@microsoft.com>
    Signed-off-by: Tianyu Lan <Tianyu.Lan@microsoft.com>
    Link: https://lore.kernel.org/r/20211025122116.264793-3-ltykernel@gmail.com
    Signed-off-by: Wei Liu <wei.liu@kernel.org>

commit 9028b2463c1ea96f51c3ba53e2479346019ff6ad
Author: Jens Wiklander <jens.wiklander@linaro.org>
Date:   Thu Mar 25 15:08:44 2021 +0100

    tee: add sec_world_id to struct tee_shm
    
    Adds sec_world_id to struct tee_shm which describes a shared memory
    object. sec_world_id can be used by a driver to store an id assigned by
    secure world.
    
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

commit 7a99e87e2e6bce689d77185c1a127b777b2b20f4
Author: Bjorn Andersson <bjorn.andersson@linaro.org>
Date:   Thu Sep 30 11:21:09 2021 -0700

    dt-bindings: soc: smem: Make indirection optional
    
    In the olden days the Qualcomm shared memory (SMEM) region consisted of
    multiple chunks of memory, so SMEM was described as a standalone node
    with references to its various memory regions.
    
    But practically all modern Qualcomm platforms has a single reserved memory
    region used for SMEM. So rather than having to use two nodes to describe
    the one SMEM region, update the binding to allow the reserved-memory
    region alone to describe SMEM.
    
    The olden format is preserved as valid, as this is widely used already.
    
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Reviewed-by: Rob Herring <robh@kernel.org>
    Reviewed-by: Vladimir Zapolskiy <vladimir.zapolskiy@linaro.org>
    Link: https://lore.kernel.org/r/20210930182111.57353-3-bjorn.andersson@linaro.org

commit cd7f5ca33585918febe5e2f6dc090a21cfa775b0
Author: Gurchetan Singh <gurchetansingh@chromium.org>
Date:   Tue Sep 21 16:20:23 2021 -0700

    drm/virtio: implement context init: add virtio_gpu_fence_event
    
    Similar to DRM_VMW_EVENT_FENCE_SIGNALED.  Sends a pollable event
    to the DRM file descriptor when a fence on a specific ring is
    signaled.
    
    One difference is the event is not exposed via the UAPI -- this is
    because host responses are on a shared memory buffer of type
    BLOB_MEM_GUEST [this is the common way to receive responses with
    virtgpu].  As such, there is no context specific read(..)
    implementation either -- just a poll(..) implementation.
    
    Signed-off-by: Gurchetan Singh <gurchetansingh@chromium.org>
    Acked-by: Nicholas Verne <nverne@chromium.org>
    Link: http://patchwork.freedesktop.org/patch/msgid/20210921232024.817-12-gurchetansingh@chromium.org
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>

commit 18319498fdd4cdf8c1c2c48cd432863b1f915d6f
Author: Vasily Averin <vvs@virtuozzo.com>
Date:   Thu Sep 2 14:55:31 2021 -0700

    memcg: enable accounting of ipc resources
    
    When user creates IPC objects it forces kernel to allocate memory for
    these long-living objects.
    
    It makes sense to account them to restrict the host's memory consumption
    from inside the memcg-limited container.
    
    This patch enables accounting for IPC shared memory segments, messages
    semaphores and semaphore's undo lists.
    
    Link: https://lkml.kernel.org/r/d6507b06-4df6-78f8-6c54-3ae86e3b5339@virtuozzo.com
    Signed-off-by: Vasily Averin <vvs@virtuozzo.com>
    Reviewed-by: Shakeel Butt <shakeelb@google.com>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: Alexey Dobriyan <adobriyan@gmail.com>
    Cc: Andrei Vagin <avagin@gmail.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: Christian Brauner <christian.brauner@ubuntu.com>
    Cc: Dmitry Safonov <0x7f454c46@gmail.com>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: "J. Bruce Fields" <bfields@fieldses.org>
    Cc: Jeff Layton <jlayton@kernel.org>
    Cc: Jens Axboe <axboe@kernel.dk>
    Cc: Jiri Slaby <jirislaby@kernel.org>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Kirill Tkhai <ktkhai@virtuozzo.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Roman Gushchin <guro@fb.com>
    Cc: Serge Hallyn <serge@hallyn.com>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Vladimir Davydov <vdavydov.dev@gmail.com>
    Cc: Yutian Yang <nglaive@gmail.com>
    Cc: Zefan Li <lizefan.x@bytedance.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 1b6fc6f739d412d42f64c8dcaf817ba831bb198a
Author: Eli Cohen <elic@nvidia.com>
Date:   Wed Aug 11 08:37:13 2021 +0300

    vdpa/mlx5: Avoid destroying MR on empty iotlb
    
    [ Upstream commit 08dbd5660232bede7916d8568003012c1182cc9a ]
    
    The current code treats an empty iotlb provdied in set_map() as a
    special case and destroy the memory region object. This must not be done
    since the virtqueue objects reference this MR. Doing so will cause the
    driver unload to emit errors and log timeouts caused by the firmware
    complaining on busy resources.
    
    This patch treats an empty iotlb as any other change of mapping. In this
    case, mlx5_vdpa_create_mr() will fail and the entire set_map() call to
    fail.
    
    This issue has not been encountered before but was seen to occur in a
    non-official version of qemu. Since qemu is a userspace program, the
    driver must protect against such case.
    
    Fixes: 94abbccdf291 ("vdpa/mlx5: Add shared memory registration code")
    Signed-off-by: Eli Cohen <elic@nvidia.com>
    Link: https://lore.kernel.org/r/20210811053713.66658-1-elic@nvidia.com
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c903a1fd0968a09b9a4df8e0bd24d6030ede6604
Author: Eli Cohen <elic@nvidia.com>
Date:   Wed Aug 11 08:37:13 2021 +0300

    vdpa/mlx5: Avoid destroying MR on empty iotlb
    
    [ Upstream commit 08dbd5660232bede7916d8568003012c1182cc9a ]
    
    The current code treats an empty iotlb provdied in set_map() as a
    special case and destroy the memory region object. This must not be done
    since the virtqueue objects reference this MR. Doing so will cause the
    driver unload to emit errors and log timeouts caused by the firmware
    complaining on busy resources.
    
    This patch treats an empty iotlb as any other change of mapping. In this
    case, mlx5_vdpa_create_mr() will fail and the entire set_map() call to
    fail.
    
    This issue has not been encountered before but was seen to occur in a
    non-official version of qemu. Since qemu is a userspace program, the
    driver must protect against such case.
    
    Fixes: 94abbccdf291 ("vdpa/mlx5: Add shared memory registration code")
    Signed-off-by: Eli Cohen <elic@nvidia.com>
    Link: https://lore.kernel.org/r/20210811053713.66658-1-elic@nvidia.com
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ce97f37be8957a7f3f42eafaa9469b0ab941e63b
Author: Candice Li <candice.li@amd.com>
Date:   Mon Aug 16 23:28:55 2021 +0800

    drm/amd: consolidate TA shared memory structures
    
    Signed-off-by: Candice Li <candice.li@amd.com>
    Reviewed-by: John Clements <john.clements@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 5c785014b67fb25d8e2a36d24940dad0c416a005
Merge: 63db5acb4adf e3d457195505
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Aug 18 15:33:01 2021 +0200

    Merge tag 'qcom-drivers-for-5.15' of git://git.kernel.org/pub/scm/linux/kernel/git/qcom/linux into arm/drivers
    
    Qualcomm driver updates for v5.15
    
    This fixes the "shared memory state machine" (SMSM) interrupt logic to
    avoid missing transitions happening while the interrupts are masked.
    
    SM6115 support is added to smd-rpm and rpmpd.
    
    The Qualcomm SCM firmware driver is once again made possible to compile
    and load as a kernel module.
    
    An out-of-bounds error related to the cooling devices of the AOSS driver
    is corrected. The binding is converted to YAML and a generic compatible
    is introduced to reduce the driver churn.
    
    The GENI wrapper gains a helper function used in I2C and SPI for
    switching the serial engine hardware to use the wrapper's DMA-engine.
    
    Lastly it contains a number of cleanups and smaller fixes for rpmhpd,
    socinfo, CPR, mdt_loader and the GENI DT binding.
    
    * tag 'qcom-drivers-for-5.15' of git://git.kernel.org/pub/scm/linux/kernel/git/qcom/linux:
      soc: qcom: smsm: Fix missed interrupts if state changes while masked
      soc: qcom: smsm: Implement support for get_irqchip_state
      soc: qcom: mdt_loader: be more informative on errors
      dt-bindings: qcom: geni-se: document iommus
      soc: qcom: smd-rpm: Add SM6115 compatible
      soc: qcom: geni: Add support for gpi dma
      soc: qcom: geni: move GENI_IF_DISABLE_RO to common header
      PM: AVS: qcom-cpr: Use nvmem_cell_read_variable_le_u32()
      drivers: soc: qcom: rpmpd: Add SM6115 RPM Power Domains
      dt-bindings: power: rpmpd: Add SM6115 to rpmpd binding
      dt-bindings: soc: qcom: smd-rpm: Add SM6115 compatible
      soc: qcom: aoss: Fix the out of bound usage of cooling_devs
      firmware: qcom_scm: Allow qcom_scm driver to be loadable as a permenent module
      soc: qcom: socinfo: Don't print anything if nothing found
      soc: qcom: rpmhpd: Use corner in power_off
      soc: qcom: aoss: Add generic compatible
      dt-bindings: soc: qcom: aoss: Convert to YAML
      dt-bindings: soc: qcom: aoss: Add SC8180X and generic compatible
      firmware: qcom_scm: remove a duplicative condition
      firmware: qcom_scm: Mark string array const
    
    Link: https://lore.kernel.org/r/20210816214840.581244-1-bjorn.andersson@linaro.org
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit ea56b15b909c65f8c65f93b02820eaf2682ef18c
Author: Allen Pais <apais@linux.microsoft.com>
Date:   Mon Jun 14 17:33:17 2021 -0500

    firmware: tee_bnxt: Release TEE shm, session, and context during kexec
    
    [ Upstream commit 914ab19e471d8fb535ed50dff108b0a615f3c2d8 ]
    
    Implement a .shutdown hook that will be called during a kexec operation
    so that the TEE shared memory, session, and context that were set up
    during .probe can be properly freed/closed.
    
    Additionally, don't use dma-buf backed shared memory for the
    fw_shm_pool. dma-buf backed shared memory cannot be reliably freed and
    unregistered during a kexec operation even when tee_shm_free() is called
    on the shm from a .shutdown hook. The problem occurs because
    dma_buf_put() calls fput() which then uses task_work_add(), with the
    TWA_RESUME parameter, to queue tee_shm_release() to be called before the
    current task returns to user mode. However, the current task never
    returns to user mode before the kexec completes so the memory is never
    freed nor unregistered.
    
    Use tee_shm_alloc_kernel_buf() to avoid dma-buf backed shared memory
    allocation so that tee_shm_free() can directly call tee_shm_release().
    This will ensure that the shm can be freed and unregistered during a
    kexec operation.
    
    Fixes: 246880958ac9 ("firmware: broadcom: add OP-TEE based BNXT f/w manager")
    Cc: stable@vger.kernel.org
    Signed-off-by: Allen Pais <apais@linux.microsoft.com>
    Co-developed-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Signed-off-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5b5064ea9a9451972fc28ee8e326e8ea3ac101ed
Author: Allen Pais <apais@linux.microsoft.com>
Date:   Mon Jun 14 17:33:17 2021 -0500

    firmware: tee_bnxt: Release TEE shm, session, and context during kexec
    
    [ Upstream commit 914ab19e471d8fb535ed50dff108b0a615f3c2d8 ]
    
    Implement a .shutdown hook that will be called during a kexec operation
    so that the TEE shared memory, session, and context that were set up
    during .probe can be properly freed/closed.
    
    Additionally, don't use dma-buf backed shared memory for the
    fw_shm_pool. dma-buf backed shared memory cannot be reliably freed and
    unregistered during a kexec operation even when tee_shm_free() is called
    on the shm from a .shutdown hook. The problem occurs because
    dma_buf_put() calls fput() which then uses task_work_add(), with the
    TWA_RESUME parameter, to queue tee_shm_release() to be called before the
    current task returns to user mode. However, the current task never
    returns to user mode before the kexec completes so the memory is never
    freed nor unregistered.
    
    Use tee_shm_alloc_kernel_buf() to avoid dma-buf backed shared memory
    allocation so that tee_shm_free() can directly call tee_shm_release().
    This will ensure that the shm can be freed and unregistered during a
    kexec operation.
    
    Fixes: 246880958ac9 ("firmware: broadcom: add OP-TEE based BNXT f/w manager")
    Cc: stable@vger.kernel.org
    Signed-off-by: Allen Pais <apais@linux.microsoft.com>
    Co-developed-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Signed-off-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit c5a625c6a4aca90ef85947dd0ee813e31af8af5c
Author: Sumit Garg <sumit.garg@linaro.org>
Date:   Mon Jun 14 17:33:15 2021 -0500

    tee: Correct inappropriate usage of TEE_SHM_DMA_BUF flag
    
    [ Upstream commit 376e4199e327a5cf29b8ec8fb0f64f3d8b429819 ]
    
    Currently TEE_SHM_DMA_BUF flag has been inappropriately used to not
    register shared memory allocated for private usage by underlying TEE
    driver: OP-TEE in this case. So rather add a new flag as TEE_SHM_PRIV
    that can be utilized by underlying TEE drivers for private allocation
    and usage of shared memory.
    
    With this corrected, allow tee_shm_alloc_kernel_buf() to allocate a
    shared memory region without the backing of dma-buf.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Sumit Garg <sumit.garg@linaro.org>
    Co-developed-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Signed-off-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Reviewed-by: Jens Wiklander <jens.wiklander@linaro.org>
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 236aca70929db3aa87dfb8fbc5329aa027a62e91
Author: Sumit Garg <sumit.garg@linaro.org>
Date:   Mon Jun 14 17:33:15 2021 -0500

    tee: Correct inappropriate usage of TEE_SHM_DMA_BUF flag
    
    [ Upstream commit 376e4199e327a5cf29b8ec8fb0f64f3d8b429819 ]
    
    Currently TEE_SHM_DMA_BUF flag has been inappropriately used to not
    register shared memory allocated for private usage by underlying TEE
    driver: OP-TEE in this case. So rather add a new flag as TEE_SHM_PRIV
    that can be utilized by underlying TEE drivers for private allocation
    and usage of shared memory.
    
    With this corrected, allow tee_shm_alloc_kernel_buf() to allocate a
    shared memory region without the backing of dma-buf.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Sumit Garg <sumit.garg@linaro.org>
    Co-developed-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Signed-off-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Reviewed-by: Jens Wiklander <jens.wiklander@linaro.org>
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7a4e7a65d088df2f59c378668f8c10b500861aa8
Author: Tyler Hicks <tyhicks@linux.microsoft.com>
Date:   Mon Jun 14 17:33:16 2021 -0500

    tpm_ftpm_tee: Free and unregister TEE shared memory during kexec
    
    commit dfb703ad2a8d366b829818a558337be779746575 upstream.
    
    dma-buf backed shared memory cannot be reliably freed and unregistered
    during a kexec operation even when tee_shm_free() is called on the shm
    from a .shutdown hook. The problem occurs because dma_buf_put() calls
    fput() which then uses task_work_add(), with the TWA_RESUME parameter,
    to queue tee_shm_release() to be called before the current task returns
    to user mode. However, the current task never returns to user mode
    before the kexec completes so the memory is never freed nor
    unregistered.
    
    Use tee_shm_alloc_kernel_buf() to avoid dma-buf backed shared memory
    allocation so that tee_shm_free() can directly call tee_shm_release().
    This will ensure that the shm can be freed and unregistered during a
    kexec operation.
    
    Fixes: 09e574831b27 ("tpm/tpm_ftpm_tee: A driver for firmware TPM running inside TEE")
    Fixes: 1760eb689ed6 ("tpm/tpm_ftpm_tee: add shutdown call back")
    Cc: stable@vger.kernel.org
    Signed-off-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Acked-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 55dac0db5316c881f72bce871c2eb1244506e13d
Author: Sumit Garg <sumit.garg@linaro.org>
Date:   Mon Jun 14 17:33:15 2021 -0500

    tee: Correct inappropriate usage of TEE_SHM_DMA_BUF flag
    
    commit 376e4199e327a5cf29b8ec8fb0f64f3d8b429819 upstream.
    
    Currently TEE_SHM_DMA_BUF flag has been inappropriately used to not
    register shared memory allocated for private usage by underlying TEE
    driver: OP-TEE in this case. So rather add a new flag as TEE_SHM_PRIV
    that can be utilized by underlying TEE drivers for private allocation
    and usage of shared memory.
    
    With this corrected, allow tee_shm_alloc_kernel_buf() to allocate a
    shared memory region without the backing of dma-buf.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Sumit Garg <sumit.garg@linaro.org>
    Co-developed-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Signed-off-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Reviewed-by: Jens Wiklander <jens.wiklander@linaro.org>
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a256c244187a2c80783ea639b0f614e847930f87
Author: Jens Wiklander <jens.wiklander@linaro.org>
Date:   Mon Jun 14 17:33:14 2021 -0500

    tee: add tee_shm_alloc_kernel_buf()
    
    commit dc7019b7d0e188d4093b34bd0747ed0d668c63bf upstream.
    
    Adds a new function tee_shm_alloc_kernel_buf() to allocate shared memory
    from a kernel driver. This function can later be made more lightweight
    by unnecessary dma-buf export.
    
    Cc: stable@vger.kernel.org
    Reviewed-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit dca5025908f7bda0ad12e0accd6a7f39e67da704
Author: Tyler Hicks <tyhicks@linux.microsoft.com>
Date:   Mon Jun 14 17:33:13 2021 -0500

    optee: Clear stale cache entries during initialization
    
    commit b5c10dd04b7418793517e3286cde5c04759a86de upstream.
    
    The shm cache could contain invalid addresses if
    optee_disable_shm_cache() was not called from the .shutdown hook of the
    previous kernel before a kexec. These addresses could be unmapped or
    they could point to mapped but unintended locations in memory.
    
    Clear the shared memory cache, while being careful to not translate the
    addresses returned from OPTEE_SMC_DISABLE_SHM_CACHE, during driver
    initialization. Once all pre-cache shm objects are removed, proceed with
    enabling the cache so that we know that we can handle cached shm objects
    with confidence later in the .shutdown hook.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Reviewed-by: Jens Wiklander <jens.wiklander@linaro.org>
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1628b64efb3638ae959cc81ff2b293eba92ee2e0
Author: Tyler Hicks <tyhicks@linux.microsoft.com>
Date:   Mon Jun 14 17:33:16 2021 -0500

    tpm_ftpm_tee: Free and unregister TEE shared memory during kexec
    
    commit dfb703ad2a8d366b829818a558337be779746575 upstream.
    
    dma-buf backed shared memory cannot be reliably freed and unregistered
    during a kexec operation even when tee_shm_free() is called on the shm
    from a .shutdown hook. The problem occurs because dma_buf_put() calls
    fput() which then uses task_work_add(), with the TWA_RESUME parameter,
    to queue tee_shm_release() to be called before the current task returns
    to user mode. However, the current task never returns to user mode
    before the kexec completes so the memory is never freed nor
    unregistered.
    
    Use tee_shm_alloc_kernel_buf() to avoid dma-buf backed shared memory
    allocation so that tee_shm_free() can directly call tee_shm_release().
    This will ensure that the shm can be freed and unregistered during a
    kexec operation.
    
    Fixes: 09e574831b27 ("tpm/tpm_ftpm_tee: A driver for firmware TPM running inside TEE")
    Fixes: 1760eb689ed6 ("tpm/tpm_ftpm_tee: add shutdown call back")
    Cc: stable@vger.kernel.org
    Signed-off-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Acked-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6b2ded93d35caa31e4349c3fee7d6b5f8b15e622
Author: Jens Wiklander <jens.wiklander@linaro.org>
Date:   Mon Jun 14 17:33:14 2021 -0500

    tee: add tee_shm_alloc_kernel_buf()
    
    commit dc7019b7d0e188d4093b34bd0747ed0d668c63bf upstream.
    
    Adds a new function tee_shm_alloc_kernel_buf() to allocate shared memory
    from a kernel driver. This function can later be made more lightweight
    by unnecessary dma-buf export.
    
    Cc: stable@vger.kernel.org
    Reviewed-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 5e9d8202142577b3cef54d536bd4c2fc5102b171
Author: Tyler Hicks <tyhicks@linux.microsoft.com>
Date:   Mon Jun 14 17:33:13 2021 -0500

    optee: Clear stale cache entries during initialization
    
    commit b5c10dd04b7418793517e3286cde5c04759a86de upstream.
    
    The shm cache could contain invalid addresses if
    optee_disable_shm_cache() was not called from the .shutdown hook of the
    previous kernel before a kexec. These addresses could be unmapped or
    they could point to mapped but unintended locations in memory.
    
    Clear the shared memory cache, while being careful to not translate the
    addresses returned from OPTEE_SMC_DISABLE_SHM_CACHE, during driver
    initialization. Once all pre-cache shm objects are removed, proceed with
    enabling the cache so that we know that we can handle cached shm objects
    with confidence later in the .shutdown hook.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Reviewed-by: Jens Wiklander <jens.wiklander@linaro.org>
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bbdd4a51629ab5f4a09f036f1c142751a9d35645
Author: Tyler Hicks <tyhicks@linux.microsoft.com>
Date:   Mon Jun 14 17:33:16 2021 -0500

    tpm_ftpm_tee: Free and unregister TEE shared memory during kexec
    
    commit dfb703ad2a8d366b829818a558337be779746575 upstream.
    
    dma-buf backed shared memory cannot be reliably freed and unregistered
    during a kexec operation even when tee_shm_free() is called on the shm
    from a .shutdown hook. The problem occurs because dma_buf_put() calls
    fput() which then uses task_work_add(), with the TWA_RESUME parameter,
    to queue tee_shm_release() to be called before the current task returns
    to user mode. However, the current task never returns to user mode
    before the kexec completes so the memory is never freed nor
    unregistered.
    
    Use tee_shm_alloc_kernel_buf() to avoid dma-buf backed shared memory
    allocation so that tee_shm_free() can directly call tee_shm_release().
    This will ensure that the shm can be freed and unregistered during a
    kexec operation.
    
    Fixes: 09e574831b27 ("tpm/tpm_ftpm_tee: A driver for firmware TPM running inside TEE")
    Fixes: 1760eb689ed6 ("tpm/tpm_ftpm_tee: add shutdown call back")
    Cc: stable@vger.kernel.org
    Signed-off-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Acked-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0572199b78b39d09757688217245fb933d2e4752
Author: Jens Wiklander <jens.wiklander@linaro.org>
Date:   Mon Jun 14 17:33:14 2021 -0500

    tee: add tee_shm_alloc_kernel_buf()
    
    commit dc7019b7d0e188d4093b34bd0747ed0d668c63bf upstream.
    
    Adds a new function tee_shm_alloc_kernel_buf() to allocate shared memory
    from a kernel driver. This function can later be made more lightweight
    by unnecessary dma-buf export.
    
    Cc: stable@vger.kernel.org
    Reviewed-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b247bf412cc235c0d9e33407364f620be5a43d56
Author: Tyler Hicks <tyhicks@linux.microsoft.com>
Date:   Mon Jun 14 17:33:13 2021 -0500

    optee: Clear stale cache entries during initialization
    
    commit b5c10dd04b7418793517e3286cde5c04759a86de upstream.
    
    The shm cache could contain invalid addresses if
    optee_disable_shm_cache() was not called from the .shutdown hook of the
    previous kernel before a kexec. These addresses could be unmapped or
    they could point to mapped but unintended locations in memory.
    
    Clear the shared memory cache, while being careful to not translate the
    addresses returned from OPTEE_SMC_DISABLE_SHM_CACHE, during driver
    initialization. Once all pre-cache shm objects are removed, proceed with
    enabling the cache so that we know that we can handle cached shm objects
    with confidence later in the .shutdown hook.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Reviewed-by: Jens Wiklander <jens.wiklander@linaro.org>
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 78264dfb6fafa8efff024a473dfbeec3bb861f18
Author: Tyler Hicks <tyhicks@linux.microsoft.com>
Date:   Mon Jun 14 17:33:13 2021 -0500

    optee: Clear stale cache entries during initialization
    
    commit b5c10dd04b7418793517e3286cde5c04759a86de upstream.
    
    The shm cache could contain invalid addresses if
    optee_disable_shm_cache() was not called from the .shutdown hook of the
    previous kernel before a kexec. These addresses could be unmapped or
    they could point to mapped but unintended locations in memory.
    
    Clear the shared memory cache, while being careful to not translate the
    addresses returned from OPTEE_SMC_DISABLE_SHM_CACHE, during driver
    initialization. Once all pre-cache shm objects are removed, proceed with
    enabling the cache so that we know that we can handle cached shm objects
    with confidence later in the .shutdown hook.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Reviewed-by: Jens Wiklander <jens.wiklander@linaro.org>
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 08dbd5660232bede7916d8568003012c1182cc9a
Author: Eli Cohen <elic@nvidia.com>
Date:   Wed Aug 11 08:37:13 2021 +0300

    vdpa/mlx5: Avoid destroying MR on empty iotlb
    
    The current code treats an empty iotlb provdied in set_map() as a
    special case and destroy the memory region object. This must not be done
    since the virtqueue objects reference this MR. Doing so will cause the
    driver unload to emit errors and log timeouts caused by the firmware
    complaining on busy resources.
    
    This patch treats an empty iotlb as any other change of mapping. In this
    case, mlx5_vdpa_create_mr() will fail and the entire set_map() call to
    fail.
    
    This issue has not been encountered before but was seen to occur in a
    non-official version of qemu. Since qemu is a userspace program, the
    driver must protect against such case.
    
    Fixes: 94abbccdf291 ("vdpa/mlx5: Add shared memory registration code")
    Signed-off-by: Eli Cohen <elic@nvidia.com>
    Link: https://lore.kernel.org/r/20210811053713.66658-1-elic@nvidia.com
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

commit f301bba0ca7392d16a6ea4f1d264a91f1fadea1a
Author: Peter Hilber <peter.hilber@opensynergy.com>
Date:   Tue Aug 3 14:10:20 2021 +0100

    firmware: arm_scmi: Add message passing abstractions for transports
    
    Add abstractions for future transports using message passing, such as
    virtio. Derive the abstractions from the shared memory abstractions.
    
    Abstract the transport SDU through the opaque struct scmi_msg_payld.
    Also enable the transport to determine all other required information
    about the transport SDU.
    
    Link: https://lore.kernel.org/r/20210803131024.40280-12-cristian.marussi@arm.com
    Signed-off-by: Peter Hilber <peter.hilber@opensynergy.com>
    [ Cristian: Adapted to new SCMI Kconfig layout, updated Copyrights ]
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>

commit a7b1138b921dc19f859296b2eb3daa7c5e22c354
Author: Igor Skalkin <igor.skalkin@opensynergy.com>
Date:   Tue Aug 3 14:10:18 2021 +0100

    firmware: arm_scmi: Make shmem support optional for transports
    
    Upcoming new SCMI transports won't need any kind of shared memory support.
    Compile shmem.c only if a shmem based transport is selected.
    
    Link: https://lore.kernel.org/r/20210803131024.40280-10-cristian.marussi@arm.com
    Co-developed-by: Peter Hilber <peter.hilber@opensynergy.com>
    Signed-off-by: Igor Skalkin <igor.skalkin@opensynergy.com>
    [ Peter: Adapted patch for submission to upstream. ]
    Signed-off-by: Peter Hilber <peter.hilber@opensynergy.com>
    [ Cristian: Adapted patch/commit_msg to new SCMI Kconfig layout ]
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>

commit 64429b9e0e1dc05cbe4f88076909fe0c4d2d29dc
Merge: bee757485161 914ab19e471d
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Aug 2 14:35:17 2021 +0200

    Merge tag 'tee-kexec-fixes-for-v5.14' of git://git.linaro.org:/people/jens.wiklander/linux-tee into arm/fixes
    
    tee: Improve support for kexec and kdump
    
    This fixes several bugs uncovered while exercising the OP-TEE, ftpm
    (firmware TPM), and tee_bnxt_fw (Broadcom BNXT firmware manager) drivers
    with kexec and kdump (emergency kexec) based workflows.
    
    * tag 'tee-kexec-fixes-for-v5.14' of git://git.linaro.org:/people/jens.wiklander/linux-tee:
      firmware: tee_bnxt: Release TEE shm, session, and context during kexec
      tpm_ftpm_tee: Free and unregister TEE shared memory during kexec
      tee: Correct inappropriate usage of TEE_SHM_DMA_BUF flag
      tee: add tee_shm_alloc_kernel_buf()
      optee: Clear stale cache entries during initialization
      optee: fix tee out of memory failure seen during kexec reboot
      optee: Refuse to load the driver under the kdump kernel
      optee: Fix memory leak when failing to register shm pages
    
    Link: https://lore.kernel.org/r/20210726081039.GA2482361@jade
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 914ab19e471d8fb535ed50dff108b0a615f3c2d8
Author: Allen Pais <apais@linux.microsoft.com>
Date:   Mon Jun 14 17:33:17 2021 -0500

    firmware: tee_bnxt: Release TEE shm, session, and context during kexec
    
    Implement a .shutdown hook that will be called during a kexec operation
    so that the TEE shared memory, session, and context that were set up
    during .probe can be properly freed/closed.
    
    Additionally, don't use dma-buf backed shared memory for the
    fw_shm_pool. dma-buf backed shared memory cannot be reliably freed and
    unregistered during a kexec operation even when tee_shm_free() is called
    on the shm from a .shutdown hook. The problem occurs because
    dma_buf_put() calls fput() which then uses task_work_add(), with the
    TWA_RESUME parameter, to queue tee_shm_release() to be called before the
    current task returns to user mode. However, the current task never
    returns to user mode before the kexec completes so the memory is never
    freed nor unregistered.
    
    Use tee_shm_alloc_kernel_buf() to avoid dma-buf backed shared memory
    allocation so that tee_shm_free() can directly call tee_shm_release().
    This will ensure that the shm can be freed and unregistered during a
    kexec operation.
    
    Fixes: 246880958ac9 ("firmware: broadcom: add OP-TEE based BNXT f/w manager")
    Cc: stable@vger.kernel.org
    Signed-off-by: Allen Pais <apais@linux.microsoft.com>
    Co-developed-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Signed-off-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Acked-by: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

commit dfb703ad2a8d366b829818a558337be779746575
Author: Tyler Hicks <tyhicks@linux.microsoft.com>
Date:   Mon Jun 14 17:33:16 2021 -0500

    tpm_ftpm_tee: Free and unregister TEE shared memory during kexec
    
    dma-buf backed shared memory cannot be reliably freed and unregistered
    during a kexec operation even when tee_shm_free() is called on the shm
    from a .shutdown hook. The problem occurs because dma_buf_put() calls
    fput() which then uses task_work_add(), with the TWA_RESUME parameter,
    to queue tee_shm_release() to be called before the current task returns
    to user mode. However, the current task never returns to user mode
    before the kexec completes so the memory is never freed nor
    unregistered.
    
    Use tee_shm_alloc_kernel_buf() to avoid dma-buf backed shared memory
    allocation so that tee_shm_free() can directly call tee_shm_release().
    This will ensure that the shm can be freed and unregistered during a
    kexec operation.
    
    Fixes: 09e574831b27 ("tpm/tpm_ftpm_tee: A driver for firmware TPM running inside TEE")
    Fixes: 1760eb689ed6 ("tpm/tpm_ftpm_tee: add shutdown call back")
    Cc: stable@vger.kernel.org
    Signed-off-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Acked-by: Jarkko Sakkinen <jarkko@kernel.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

commit 376e4199e327a5cf29b8ec8fb0f64f3d8b429819
Author: Sumit Garg <sumit.garg@linaro.org>
Date:   Mon Jun 14 17:33:15 2021 -0500

    tee: Correct inappropriate usage of TEE_SHM_DMA_BUF flag
    
    Currently TEE_SHM_DMA_BUF flag has been inappropriately used to not
    register shared memory allocated for private usage by underlying TEE
    driver: OP-TEE in this case. So rather add a new flag as TEE_SHM_PRIV
    that can be utilized by underlying TEE drivers for private allocation
    and usage of shared memory.
    
    With this corrected, allow tee_shm_alloc_kernel_buf() to allocate a
    shared memory region without the backing of dma-buf.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Sumit Garg <sumit.garg@linaro.org>
    Co-developed-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Signed-off-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Reviewed-by: Jens Wiklander <jens.wiklander@linaro.org>
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

commit dc7019b7d0e188d4093b34bd0747ed0d668c63bf
Author: Jens Wiklander <jens.wiklander@linaro.org>
Date:   Mon Jun 14 17:33:14 2021 -0500

    tee: add tee_shm_alloc_kernel_buf()
    
    Adds a new function tee_shm_alloc_kernel_buf() to allocate shared memory
    from a kernel driver. This function can later be made more lightweight
    by unnecessary dma-buf export.
    
    Cc: stable@vger.kernel.org
    Reviewed-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

commit b5c10dd04b7418793517e3286cde5c04759a86de
Author: Tyler Hicks <tyhicks@linux.microsoft.com>
Date:   Mon Jun 14 17:33:13 2021 -0500

    optee: Clear stale cache entries during initialization
    
    The shm cache could contain invalid addresses if
    optee_disable_shm_cache() was not called from the .shutdown hook of the
    previous kernel before a kexec. These addresses could be unmapped or
    they could point to mapped but unintended locations in memory.
    
    Clear the shared memory cache, while being careful to not translate the
    addresses returned from OPTEE_SMC_DISABLE_SHM_CACHE, during driver
    initialization. Once all pre-cache shm objects are removed, proceed with
    enabling the cache so that we know that we can handle cached shm objects
    with confidence later in the .shutdown hook.
    
    Cc: stable@vger.kernel.org
    Signed-off-by: Tyler Hicks <tyhicks@linux.microsoft.com>
    Reviewed-by: Jens Wiklander <jens.wiklander@linaro.org>
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

commit cc10a352e29c1936150b0379db504cf01345cbcd
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Tue Jun 1 11:24:17 2021 +0100

    firmware: arm_scmi: Reset Rx buffer to max size during async commands
    
    [ Upstream commit 0cb7af474e0dbb2f500c67aa62b6db9fafa74de2 ]
    
    During an async commands execution the Rx buffer length is at first set
    to max_msg_sz when the synchronous part of the command is first sent.
    However once the synchronous part completes the transport layer waits
    for the delayed response which will be processed using the same xfer
    descriptor initially allocated. Since synchronous response received at
    the end of the xfer will shrink the Rx buffer length to the effective
    payload response length, it needs to be reset again.
    
    Raise the Rx buffer length again to max_msg_sz before fetching the
    delayed response to ensure full response is read correctly from the
    shared memory.
    
    Link: https://lore.kernel.org/r/20210601102421.26581-2-cristian.marussi@arm.com
    Fixes: 58ecdf03dbb9 ("firmware: arm_scmi: Add support for asynchronous commands and delayed response")
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    [sudeep.holla: moved reset to scmi_handle_response as it could race with
                   do_xfer_with_response]
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 4b4c61049ec52fc5bf31e5e36c979d543bc4c1e0
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Tue Jun 1 11:24:17 2021 +0100

    firmware: arm_scmi: Reset Rx buffer to max size during async commands
    
    [ Upstream commit 0cb7af474e0dbb2f500c67aa62b6db9fafa74de2 ]
    
    During an async commands execution the Rx buffer length is at first set
    to max_msg_sz when the synchronous part of the command is first sent.
    However once the synchronous part completes the transport layer waits
    for the delayed response which will be processed using the same xfer
    descriptor initially allocated. Since synchronous response received at
    the end of the xfer will shrink the Rx buffer length to the effective
    payload response length, it needs to be reset again.
    
    Raise the Rx buffer length again to max_msg_sz before fetching the
    delayed response to ensure full response is read correctly from the
    shared memory.
    
    Link: https://lore.kernel.org/r/20210601102421.26581-2-cristian.marussi@arm.com
    Fixes: 58ecdf03dbb9 ("firmware: arm_scmi: Add support for asynchronous commands and delayed response")
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    [sudeep.holla: moved reset to scmi_handle_response as it could race with
                   do_xfer_with_response]
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 3819aedd4533bda0483572630316266be1b05ecb
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Tue Jun 1 11:24:17 2021 +0100

    firmware: arm_scmi: Reset Rx buffer to max size during async commands
    
    [ Upstream commit 0cb7af474e0dbb2f500c67aa62b6db9fafa74de2 ]
    
    During an async commands execution the Rx buffer length is at first set
    to max_msg_sz when the synchronous part of the command is first sent.
    However once the synchronous part completes the transport layer waits
    for the delayed response which will be processed using the same xfer
    descriptor initially allocated. Since synchronous response received at
    the end of the xfer will shrink the Rx buffer length to the effective
    payload response length, it needs to be reset again.
    
    Raise the Rx buffer length again to max_msg_sz before fetching the
    delayed response to ensure full response is read correctly from the
    shared memory.
    
    Link: https://lore.kernel.org/r/20210601102421.26581-2-cristian.marussi@arm.com
    Fixes: 58ecdf03dbb9 ("firmware: arm_scmi: Add support for asynchronous commands and delayed response")
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    [sudeep.holla: moved reset to scmi_handle_response as it could race with
                   do_xfer_with_response]
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit b6e42191c0abf82f78ce35e2b681aa3a563722bf
Author: Caleb Connolly <caleb@connolly.tech>
Date:   Sun May 2 01:42:57 2021 +0000

    arm64: dts: qcom: sdm845-oneplus-common: guard rmtfs-mem
    
    [ Upstream commit e60fd5ac1f6851be5b2c042b39584bfcf8a66f57 ]
    
    The rmtfs_mem region is a weird one, downstream allocates it
    dynamically, and supports a "qcom,guard-memory" property which when set
    will reserve 4k above and below the rmtfs memory.
    
    A common from qcom 4.9 kernel msm_sharedmem driver:
    
    /*
     * If guard_memory is set, then the shared memory region
     * will be guarded by SZ_4K at the start and at the end.
     * This is needed to overcome the XPU limitation on few
     * MSM HW, so as to make this memory not contiguous with
     * other allocations that may possibly happen from other
     * clients in the system.
    */
    
    When the kernel tries to touch memory that is too close the
    rmtfs region it may cause an XPU violation. Such is the case on the
    OnePlus 6 where random crashes would occur usually after boot.
    
    Reserve 4k above and below the rmtfs_mem to avoid hitting these XPU
    Violations.
    
    This doesn't entirely solve the random crashes on the OnePlus 6/6T but
    it does seem to prevent the ones which happen shortly after modem
    bringup.
    
    Fixes: 288ef8a42612 ("arm64: dts: sdm845: add oneplus6/6t devices")
    Signed-off-by: Caleb Connolly <caleb@connolly.tech>
    Link: https://lore.kernel.org/r/20210502014146.85642-4-caleb@connolly.tech
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 365987eb0d0ee3aed11424729e02857d7d7fd51e
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Tue Jun 1 11:24:17 2021 +0100

    firmware: arm_scmi: Reset Rx buffer to max size during async commands
    
    [ Upstream commit 0cb7af474e0dbb2f500c67aa62b6db9fafa74de2 ]
    
    During an async commands execution the Rx buffer length is at first set
    to max_msg_sz when the synchronous part of the command is first sent.
    However once the synchronous part completes the transport layer waits
    for the delayed response which will be processed using the same xfer
    descriptor initially allocated. Since synchronous response received at
    the end of the xfer will shrink the Rx buffer length to the effective
    payload response length, it needs to be reset again.
    
    Raise the Rx buffer length again to max_msg_sz before fetching the
    delayed response to ensure full response is read correctly from the
    shared memory.
    
    Link: https://lore.kernel.org/r/20210601102421.26581-2-cristian.marussi@arm.com
    Fixes: 58ecdf03dbb9 ("firmware: arm_scmi: Add support for asynchronous commands and delayed response")
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    [sudeep.holla: moved reset to scmi_handle_response as it could race with
                   do_xfer_with_response]
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d1b67a18629234664f3afd65bb3559fb8a3c49b8
Author: Caleb Connolly <caleb@connolly.tech>
Date:   Sun May 2 01:42:57 2021 +0000

    arm64: dts: qcom: sdm845-oneplus-common: guard rmtfs-mem
    
    [ Upstream commit e60fd5ac1f6851be5b2c042b39584bfcf8a66f57 ]
    
    The rmtfs_mem region is a weird one, downstream allocates it
    dynamically, and supports a "qcom,guard-memory" property which when set
    will reserve 4k above and below the rmtfs memory.
    
    A common from qcom 4.9 kernel msm_sharedmem driver:
    
    /*
     * If guard_memory is set, then the shared memory region
     * will be guarded by SZ_4K at the start and at the end.
     * This is needed to overcome the XPU limitation on few
     * MSM HW, so as to make this memory not contiguous with
     * other allocations that may possibly happen from other
     * clients in the system.
    */
    
    When the kernel tries to touch memory that is too close the
    rmtfs region it may cause an XPU violation. Such is the case on the
    OnePlus 6 where random crashes would occur usually after boot.
    
    Reserve 4k above and below the rmtfs_mem to avoid hitting these XPU
    Violations.
    
    This doesn't entirely solve the random crashes on the OnePlus 6/6T but
    it does seem to prevent the ones which happen shortly after modem
    bringup.
    
    Fixes: 288ef8a42612 ("arm64: dts: sdm845: add oneplus6/6t devices")
    Signed-off-by: Caleb Connolly <caleb@connolly.tech>
    Link: https://lore.kernel.org/r/20210502014146.85642-4-caleb@connolly.tech
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0afadba435892c8d330e3238b9cc7f9ee8b20e90
Author: Suman Anna <s-anna@ti.com>
Date:   Tue Jun 15 14:57:17 2021 -0500

    arm64: dts: ti: k3-am642-evm/sk: Add mailboxes to R5Fs
    
    Add the required 'mboxes' property to all the R5F processors for the
    TI AM642 EVM and SK boards. The mailboxes and some shared memory are
    required for running the Remote Processor Messaging (RPMsg) stack
    between the host processor and each of the R5Fs.
    
    The chosen sub-mailboxes match the values used in the current firmware
    images. This can be changed, if needed, as per the system integration
    needs after making appropriate changes on the firmware side as well.
    
    Note that any R5F Core1 resources are needed and used only when that
    R5F cluster is configured for Split-mode.
    
    Signed-off-by: Suman Anna <s-anna@ti.com>
    Reviewed-by: Praneeth Bajjuri <praneeth@ti.com>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Link: https://lore.kernel.org/r/20210615195718.15898-3-s-anna@ti.com

commit a4f221cd68b306d6311237e47b531d21fab8dfa4
Author: Suman Anna <s-anna@ti.com>
Date:   Tue Jun 15 14:57:16 2021 -0500

    arm64: dts: ti: k3-am64-main: Add MAIN domain R5F cluster nodes
    
    The AM64x SoCs have 2 dual-core Arm Cortex-R5F processor (R5FSS)
    subsystems/clusters. Both the R5F clusters are present within the
    MAIN domain (MAIN_R5FSS0 & MAIN_R5FSS1). Each of these can be
    configured at boot time to be either run in a new "Single-CPU" mode
    or in an Asymmetric Multi Processing (AMP) fashion in Split-mode.
    The mode is restricted to "Single-CPU" on some devices with the
    appropriate eFuse bit set, but the most common devices support both
    modes. These subsystems have 64 KB each Tightly-Coupled Memory (TCM)
    internal memories for each core split between two banks - ATCM and
    BTCM (further interleaved into two banks). The TCMs of both Cores
    are combined in Single-CPU mode to provide a larger 128 KB of memory.
    The other notable difference is that the TCMs are spaced 1 MB apart
    on these SoCs unlike the existing SoCs.
    
    Add the DT nodes for both these MAIN domain R5F cluster/subsystems,
    the two R5F cores are added as child nodes to each of the corresponding
    R5F cluster node. Both the clusters are configured to run in Split mode
    by default, with the ATCMs enabled to allow the R5 cores to execute
    code from DDR with boot-strapping code from ATCM. The inter-processor
    communication between the main A72 cores and these processors is
    achieved through shared memory and Mailboxes.
    
    The following firmware names are used by default for these cores, and
    can be overridden in a board dts file if desired:
      MAIN R5FSS0 Core0: am64-main-r5f0_0-fw (both in Single-CPU & Split modes)
      MAIN R5FSS0 Core1: am64-main-r5f0_1-fw (needed only in Split mode)
      MAIN R5FSS1 Core0: am64-main-r5f1_0-fw (both in Single-CPU & Split modes)
      MAIN R5FSS1 Core1: am64-main-r5f1_1-fw (needed only in Split mode)
    
    NOTE:
    A R5FSS cluster can be configured in "Single-CPU" mode by using a
    value of 2 for the "ti,cluster-mode" property. Value of 1 is not
    permitted (fails the dtbs_check).
    
    Signed-off-by: Suman Anna <s-anna@ti.com>
    Reviewed-by: Praneeth Bajjuri <praneeth@ti.com>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Link: https://lore.kernel.org/r/20210615195718.15898-2-s-anna@ti.com

commit a212d9f33ed0b8399bd9829a779c4024068742a2
Merge: ffbbc5e5c717 f7af616c632e
Author: David S. Miller <davem@davemloft.net>
Date:   Sun Jun 13 13:49:39 2021 -0700

    Merge branch 'iosm-driver'
    
    M Chetan Kumar says:
    
    ====================
    net: iosm: PCIe Driver for Intel M.2 Modem
    
    The IOSM (IPC over Shared Memory) driver is a PCIe host driver implemented
    for linux or chrome platform for data exchange over PCIe interface between
    Host platform & Intel M.2 Modem. The driver exposes interface conforming to
    the MBIM protocol. Any front end application ( eg: Modem Manager) could
    easily manage the MBIM interface to enable data communication towards WWAN.
    
    Intel M.2 modem uses 2 BAR regions. The first region is dedicated to Doorbell
    register for IRQs and the second region is used as scratchpad area for book
    keeping modem execution stage details along with host system shared memory
    region context details. The upper edge of the driver exposes the control and
    data channels for user space application interaction. At lower edge these data
    and control channels are associated to pipes. The pipes are lowest level
    interfaces used over PCIe as a logical channel for message exchange. A single
    channel maps to UL and DL pipe and are initialized on device open.
    
    On UL path, driver copies application sent data to SKBs associate it with
    transfer descriptor and puts it on to ring buffer for DMA transfer. Once
    information has been updated in shared memory region, host gives a Doorbell
    to modem to perform DMA and modem uses MSI to communicate back to host.
    For receiving data in DL path, SKBs are pre-allocated during pipe open and
    transfer descriptors are given to modem for DMA transfer.
    
    The driver exposes two types of ports, namely "wwan0mbim0", a char device node
    which is used for MBIM control operation and "wwan0-x",(x = 0,1,2..7) network
    interfaces for IP data communication.
    1) MBIM Control Interface:
    This node exposes an interface between modem and application using char device
    exposed by "IOSM" driver to establish and manage the MBIM data communication
    with PCIe based Intel M.2 Modems.
    
    2) MBIM Data Interface:
    The IOSM driver exposes IP link interface "wwan0-x" of type "wwan" for IP traffic.
    Iproute network utility is used for creating "wwan0-x" network interface and for
    associating it with MBIM IP session. The Driver supports upto 8 IP sessions for
    simultaneous IP communication.
    
    This applies on top of WWAN core rtnetlink series posted here:
    https://lore.kernel.org/netdev/1623486057-13075-1-git-send-email-loic.poulain@linaro.org/
    
    Also driver has been compiled and tested on top of netdev net-next tree.
    https://git.kernel.org/pub/scm/linux/kernel/git/netdev/net-next.git/
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit faed4c6f6f486fbd0bde233dd46beb26ebdb1ab2
Author: M Chetan Kumar <m.chetan.kumar@intel.com>
Date:   Sun Jun 13 18:20:19 2021 +0530

    net: iosm: shared memory protocol
    
    1) Defines messaging protocol for handling Transfer Descriptor
       in both UL/DL direction.
    2) Ring buffer management.
    
    Signed-off-by: M Chetan Kumar <m.chetan.kumar@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit edf6423c04037040c7e0549fdebc903d68979515
Author: M Chetan Kumar <m.chetan.kumar@intel.com>
Date:   Sun Jun 13 18:20:12 2021 +0530

    net: iosm: shared memory I/O operations
    
    1) Binds logical channel between host-device for communication.
    2) Implements device specific(Char/Net) IO operations.
    
    Signed-off-by: M Chetan Kumar <m.chetan.kumar@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 3670970dd8c661c10c10c300d726f59428eaad32
Author: M Chetan Kumar <m.chetan.kumar@intel.com>
Date:   Sun Jun 13 18:20:11 2021 +0530

    net: iosm: shared memory IPC interface
    
    1) Initializes shared memory for host-device communication.
    2) Allocate resources required for control & data operations.
    3) Transfers the Device IRQ to IPC execution thread.
    4) Defines the timer cbs for async events.
    
    Signed-off-by: M Chetan Kumar <m.chetan.kumar@intel.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 507cd4d2c5eb2d647d27b1047e1a8c73c4890cf3
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Wed Jun 2 08:38:51 2021 +0100

    firmware: arm_scmi: Add compatibility checks for shmem node
    
    The shared memory node used for communication between the firmware and
    the OS should be compatible with "arm,scmi-shmem". Add the check for the
    same while parsing the node before fetching the memory regions.
    
    Link: https://lore.kernel.org/r/20210602073851.1005607-2-sudeep.holla@arm.com
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: Cristian Marussi <cristian.marussi@arm.com>
    Cc: Florian Fainelli <f.fainelli@gmail.com>
    Cc: Jim Quinlan <jim2101024@gmail.com>
    Cc: Etienne Carriere <etienne.carriere@linaro.org>
    Reviewed-by: Florian Fainelli <f.fainelli@gmail.com>
    Tested-by: Florian Fainelli <f.fainelli@gmail.com>
    Reviewed-by: Cristian Marussi <cristian.marussi@arm.com>
    Tested-by: Cristian Marussi <cristian.marussi@arm.com>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>

commit 23d51b818151273125e35b1a1ce1b294f7d8c073
Author: Matt Hsiao <matt.hsiao@hpe.com>
Date:   Mon May 31 16:55:51 2021 +0800

    misc: hpilo: map iLO shared memory by PCI revision id
    
    Starting from iLO ASIC 'Neches' with subsystem device id 0x00E4,
    bar 5 is used for shared memory region mapping instead of bar 2
    because bar 2 is made inaccessible after system POST for security
    reason.
    
    As this holds true for future iLO ASIC generations, it does not
    make sense to map shared memory region according to the subsystem
    device id of each following generations.
    
    Map iLO shared memory region with PCI revision id that maps to the
    iLO ASIC generation, starting from Neches (Rev 7).
    
    Signed-off-by: Matt Hsiao <matt.hsiao@hpe.com>
    Link: https://lore.kernel.org/r/20210531085551.26421-1-matt.hsiao@hpe.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit ed7ecb8839010150e3adb41800d218ef3d62e269
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Wed Jun 2 08:38:50 2021 +0100

    firmware: arm_scpi: Add compatibility checks for shmem node
    
    The shared memory node used for communication between the firmware and
    the OS should be compatible with one of the following:
            - amlogic,meson-gxbb-scp-shmem
            - amlogic,meson-axg-scp-shmem
            - arm,juno-scp-shmem
            - arm,scp-shmem
    Add the check for the same while parsing the node before fetching the memory
    regions.
    
    Link: https://lore.kernel.org/r/20210602073851.1005607-1-sudeep.holla@arm.com
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: Kevin Hilman <khilman@baylibre.com>
    Cc: Neil Armstrong <narmstrong@baylibre.com>
    Cc: Jerome Brunet <jbrunet@baylibre.com>
    Reviewed-by: Cristian Marussi <cristian.marussi@arm.com>
    Tested-by: Cristian Marussi <cristian.marussi@arm.com>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>

commit 4041e842e2a96d12e311f27c6a7f0f446e45f0b5
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Tue Jun 1 23:48:58 2021 +0100

    dt-bindings: firmware: arm,scmi: Move arm,scmi-shmem to json schema
    
    Move the SRAM and shared memory binding for SCMI into the existing
    Generic on-chip SRAM. We just need to update the compatible list and
    there-by remove the whole old text format binding for the same.
    
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: Cristian Marussi <cristian.marussi@arm.com>
    Cc: Florian Fainelli <f.fainelli@gmail.com>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Link: https://lore.kernel.org/r/20210601224904.917990-3-sudeep.holla@arm.com
    Signed-off-by: Rob Herring <robh@kernel.org>

commit 7bf063a1cea9841a32507bb291b4539c5247ab45
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Tue Jun 1 23:48:57 2021 +0100

    dt-bindings: firmware: arm,scpi: Move arm,scp-shmem to json schema
    
    Move the SRAM and shared memory binding for SCPI into the existing
    Generic on-chip SRAM. We just need to update the compatible list and
    there-by remove the whole old text format binding for the same.
    
    Cc: Rob Herring <robh+dt@kernel.org>
    Cc: Kevin Hilman <khilman@baylibre.com>
    Cc: Neil Armstrong <narmstrong@baylibre.com>
    Cc: Jerome Brunet <jbrunet@baylibre.com>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Link: https://lore.kernel.org/r/20210601224904.917990-2-sudeep.holla@arm.com
    Signed-off-by: Rob Herring <robh@kernel.org>

commit 0cb7af474e0dbb2f500c67aa62b6db9fafa74de2
Author: Cristian Marussi <cristian.marussi@arm.com>
Date:   Tue Jun 1 11:24:17 2021 +0100

    firmware: arm_scmi: Reset Rx buffer to max size during async commands
    
    During an async commands execution the Rx buffer length is at first set
    to max_msg_sz when the synchronous part of the command is first sent.
    However once the synchronous part completes the transport layer waits
    for the delayed response which will be processed using the same xfer
    descriptor initially allocated. Since synchronous response received at
    the end of the xfer will shrink the Rx buffer length to the effective
    payload response length, it needs to be reset again.
    
    Raise the Rx buffer length again to max_msg_sz before fetching the
    delayed response to ensure full response is read correctly from the
    shared memory.
    
    Link: https://lore.kernel.org/r/20210601102421.26581-2-cristian.marussi@arm.com
    Fixes: 58ecdf03dbb9 ("firmware: arm_scmi: Add support for asynchronous commands and delayed response")
    Signed-off-by: Cristian Marussi <cristian.marussi@arm.com>
    [sudeep.holla: moved reset to scmi_handle_response as it could race with
                   do_xfer_with_response]
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>

commit a105f642ad621fe060d7153b66099e14603a9eaf
Author: Takashi Sakamoto <o-takashi@sakamocchi.jp>
Date:   Mon May 31 11:50:59 2021 +0900

    ALSA: fireworks: perform sequence replay for media clock recovery
    
    Echo Digital Audio Corporation had US patent US7599388B2 titled as
    'System and method for high-bandwidth serial bus data transfer'. In the
    patent, dual-banked shared memory is used to deliver data between
    serial bus transmission and processor in FIFO way. The patent seems to be
    used for Fireworks board module. The mechanism is not compliant to
    synchronization based on presentation time expressed in syt field
    of CIP header. Fireworks board module takes care of the sequence of
    the number of data blocks per packet and just ignores the value of syt
    field.
    
    This commit takes fireworks driver to performs sequence replay for media
    clock recovery. As long as I tested, Audiofire 2 and 4 have a quirk to
    skip an isochronous cycle several thousands after starting packet
    transmission.
    
    The sequence replay is tested with below models:
     * Loud Technology Mackie 400f
     * Echo Audio Audiofire 12 (DSP model)
     * Echo Audio Audiofire 12 (FPGA model)
     * Echo Audio Audiofire 8 (DSP model)
     * Echo Audio Audiofire 8 (FPGA model)
     * Echo Audio Audiofire Pre8
     * Echo Audio Audiofire 4
     * Echo Audio Audiofire 2
    
    Signed-off-by: Takashi Sakamoto <o-takashi@sakamocchi.jp>
    Link: https://lore.kernel.org/r/20210531025103.17880-3-o-takashi@sakamocchi.jp
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit 224478289ca0e7abf06a3bc63b06c42a2bf84c69
Merge: 866c4b8a18e2 000ac4295339
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sat May 29 06:02:25 2021 -1000

    Merge tag 'for-linus' of git://git.kernel.org/pub/scm/virt/kvm/kvm
    
    Pull KVM fixes from Paolo Bonzini:
     "ARM fixes:
    
       - Another state update on exit to userspace fix
    
       - Prevent the creation of mixed 32/64 VMs
    
       - Fix regression with irqbypass not restarting the guest on failed
         connect
    
       - Fix regression with debug register decoding resulting in
         overlapping access
    
       - Commit exception state on exit to usrspace
    
       - Fix the MMU notifier return values
    
       - Add missing 'static' qualifiers in the new host stage-2 code
    
      x86 fixes:
    
       - fix guest missed wakeup with assigned devices
    
       - fix WARN reported by syzkaller
    
       - do not use BIT() in UAPI headers
    
       - make the kvm_amd.avic parameter bool
    
      PPC fixes:
    
       - make halt polling heuristics consistent with other architectures
    
      selftests:
    
       - various fixes
    
       - new performance selftest memslot_perf_test
    
       - test UFFD minor faults in demand_paging_test"
    
    * tag 'for-linus' of git://git.kernel.org/pub/scm/virt/kvm/kvm: (44 commits)
      selftests: kvm: fix overlapping addresses in memslot_perf_test
      KVM: X86: Kill off ctxt->ud
      KVM: X86: Fix warning caused by stale emulation context
      KVM: X86: Use kvm_get_linear_rip() in single-step and #DB/#BP interception
      KVM: x86/mmu: Fix comment mentioning skip_4k
      KVM: VMX: update vcpu posted-interrupt descriptor when assigning device
      KVM: rename KVM_REQ_PENDING_TIMER to KVM_REQ_UNBLOCK
      KVM: x86: add start_assignment hook to kvm_x86_ops
      KVM: LAPIC: Narrow the timer latency between wait_lapic_expire and world switch
      selftests: kvm: do only 1 memslot_perf_test run by default
      KVM: X86: Use _BITUL() macro in UAPI headers
      KVM: selftests: add shared hugetlbfs backing source type
      KVM: selftests: allow using UFFD minor faults for demand paging
      KVM: selftests: create alias mappings when using shared memory
      KVM: selftests: add shmem backing source type
      KVM: selftests: refactor vm_mem_backing_src_type flags
      KVM: selftests: allow different backing source types
      KVM: selftests: compute correct demand paging size
      KVM: selftests: simplify setup_demand_paging error handling
      KVM: selftests: Print a message if /dev/kvm is missing
      ...

commit 94f3f2b31a8a9e8bd30bf6f4903ff84acc612e0e
Author: Axel Rasmussen <axelrasmussen@google.com>
Date:   Wed May 19 13:03:37 2021 -0700

    KVM: selftests: create alias mappings when using shared memory
    
    When a memory region is added with a src_type specifying that it should
    use some kind of shared memory, also create an alias mapping to the same
    underlying physical pages.
    
    And, add an API so tests can get access to these alias addresses.
    Basically, for a guest physical address, let us look up the analogous
    host *alias* address.
    
    In a future commit, we'll modify the demand paging test to take
    advantage of this to exercise UFFD minor faults. The idea is, we
    pre-fault the underlying pages *via the alias*. When the *guest*
    faults, it gets a "minor" fault (PTEs don't exist yet, but a page is
    already in the page cache). Then, the userfaultfd theads can handle the
    fault: they could potentially modify the underlying memory *via the
    alias* if they wanted to, and then they install the PTEs and let the
    guest carry on via a UFFDIO_CONTINUE ioctl.
    
    Reviewed-by: Ben Gardon <bgardon@google.com>
    Signed-off-by: Axel Rasmussen <axelrasmussen@google.com>
    Message-Id: <20210519200339.829146-9-axelrasmussen@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

commit e60fd5ac1f6851be5b2c042b39584bfcf8a66f57
Author: Caleb Connolly <caleb@connolly.tech>
Date:   Sun May 2 01:42:57 2021 +0000

    arm64: dts: qcom: sdm845-oneplus-common: guard rmtfs-mem
    
    The rmtfs_mem region is a weird one, downstream allocates it
    dynamically, and supports a "qcom,guard-memory" property which when set
    will reserve 4k above and below the rmtfs memory.
    
    A common from qcom 4.9 kernel msm_sharedmem driver:
    
    /*
     * If guard_memory is set, then the shared memory region
     * will be guarded by SZ_4K at the start and at the end.
     * This is needed to overcome the XPU limitation on few
     * MSM HW, so as to make this memory not contiguous with
     * other allocations that may possibly happen from other
     * clients in the system.
    */
    
    When the kernel tries to touch memory that is too close the
    rmtfs region it may cause an XPU violation. Such is the case on the
    OnePlus 6 where random crashes would occur usually after boot.
    
    Reserve 4k above and below the rmtfs_mem to avoid hitting these XPU
    Violations.
    
    This doesn't entirely solve the random crashes on the OnePlus 6/6T but
    it does seem to prevent the ones which happen shortly after modem
    bringup.
    
    Fixes: 288ef8a42612 ("arm64: dts: sdm845: add oneplus6/6t devices")
    Signed-off-by: Caleb Connolly <caleb@connolly.tech>
    Link: https://lore.kernel.org/r/20210502014146.85642-4-caleb@connolly.tech
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>

commit 4a064cb49d382331a3f3a6cc53418f0362ee5566
Author: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
Date:   Tue Mar 2 18:57:56 2021 +0530

    mtd: Handle possible -EPROBE_DEFER from parse_mtd_partitions()
    
    [ Upstream commit 08608adb520e51403be7592c2214846fa440a23a ]
    
    There are chances that the parse_mtd_partitions() function will return
    -EPROBE_DEFER in mtd_device_parse_register(). This might happen when
    the dependency is not available for the parser. For instance, on SDX55
    the MTD_QCOMSMEM_PARTS parser depends on the QCOM_SMEM driver to parse
    the partitions defined in the shared memory region. With the current
    flow, the error returned from parse_mtd_partitions() will be discarded
    in favor of trying to add the fallback partition.
    
    This will prevent the driver to end up in probe deferred pool and the
    partitions won't be parsed even after the QCOM_SMEM driver is available.
    
    Fix this issue by bailing out of mtd_device_parse_register() when
    -EPROBE_DEFER error is returned from parse_mtd_partitions() function and
    propagate the error code to the driver core for probing later.
    
    Fixes: 5ac67ce36cfe ("mtd: move code adding (registering) partitions to the parse_mtd_partitions()")
    Signed-off-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit f386d162c20c6adbd97c3a8f4240be7aba956f96
Author: Jerome Forissier <jerome@forissier.org>
Date:   Mon Mar 22 11:40:37 2021 +0100

    tee: optee: do not check memref size on return from Secure World
    
    [ Upstream commit c650b8dc7a7910eb25af0aac1720f778b29e679d ]
    
    When Secure World returns, it may have changed the size attribute of the
    memory references passed as [in/out] parameters. The GlobalPlatform TEE
    Internal Core API specification does not restrict the values that this
    size can take. In particular, Secure World may increase the value to be
    larger than the size of the input buffer to indicate that it needs more.
    
    Therefore, the size check in optee_from_msg_param() is incorrect and
    needs to be removed. This fixes a number of failed test cases in the
    GlobalPlatform TEE Initial Configuratiom Test Suite v2_0_0_0-2017_06_09
    when OP-TEE is compiled without dynamic shared memory support
    (CFG_CORE_DYN_SHM=n).
    
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Suggested-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Jerome Forissier <jerome@forissier.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 90b1c3d1dbdbb2d74df42fefbf98049697e291bf
Author: Jerome Forissier <jerome@forissier.org>
Date:   Mon Mar 22 11:40:37 2021 +0100

    tee: optee: do not check memref size on return from Secure World
    
    [ Upstream commit c650b8dc7a7910eb25af0aac1720f778b29e679d ]
    
    When Secure World returns, it may have changed the size attribute of the
    memory references passed as [in/out] parameters. The GlobalPlatform TEE
    Internal Core API specification does not restrict the values that this
    size can take. In particular, Secure World may increase the value to be
    larger than the size of the input buffer to indicate that it needs more.
    
    Therefore, the size check in optee_from_msg_param() is incorrect and
    needs to be removed. This fixes a number of failed test cases in the
    GlobalPlatform TEE Initial Configuratiom Test Suite v2_0_0_0-2017_06_09
    when OP-TEE is compiled without dynamic shared memory support
    (CFG_CORE_DYN_SHM=n).
    
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Suggested-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Jerome Forissier <jerome@forissier.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 64a06f195d3b2d65141b32c80d6b7f0db4df6cb5
Author: Takashi Iwai <tiwai@suse.de>
Date:   Mon May 17 15:15:42 2021 +0200

    ALSA: usx2y: Fix shmem initialization
    
    Currently us428ctls_shmem pages are allocated dynamically upon the
    mmap call, but this is quite racy.  Since the shared memory itself is
    mandatory for the mmap, let's allocate it at the beginning of the card
    initialization.  Also, fix the initialization of the wait queue, too.
    
    Link: https://lore.kernel.org/r/20210517131545.27252-9-tiwai@suse.de
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

commit 82bcabce34d90f7ff7b1d9b8c8e3ccc5afbcd5eb
Author: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
Date:   Tue Mar 2 18:57:56 2021 +0530

    mtd: Handle possible -EPROBE_DEFER from parse_mtd_partitions()
    
    [ Upstream commit 08608adb520e51403be7592c2214846fa440a23a ]
    
    There are chances that the parse_mtd_partitions() function will return
    -EPROBE_DEFER in mtd_device_parse_register(). This might happen when
    the dependency is not available for the parser. For instance, on SDX55
    the MTD_QCOMSMEM_PARTS parser depends on the QCOM_SMEM driver to parse
    the partitions defined in the shared memory region. With the current
    flow, the error returned from parse_mtd_partitions() will be discarded
    in favor of trying to add the fallback partition.
    
    This will prevent the driver to end up in probe deferred pool and the
    partitions won't be parsed even after the QCOM_SMEM driver is available.
    
    Fix this issue by bailing out of mtd_device_parse_register() when
    -EPROBE_DEFER error is returned from parse_mtd_partitions() function and
    propagate the error code to the driver core for probing later.
    
    Fixes: 5ac67ce36cfe ("mtd: move code adding (registering) partitions to the parse_mtd_partitions()")
    Signed-off-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit dc249005840567e28208f7295e20ac91cc777736
Author: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
Date:   Tue Mar 2 18:57:56 2021 +0530

    mtd: Handle possible -EPROBE_DEFER from parse_mtd_partitions()
    
    [ Upstream commit 08608adb520e51403be7592c2214846fa440a23a ]
    
    There are chances that the parse_mtd_partitions() function will return
    -EPROBE_DEFER in mtd_device_parse_register(). This might happen when
    the dependency is not available for the parser. For instance, on SDX55
    the MTD_QCOMSMEM_PARTS parser depends on the QCOM_SMEM driver to parse
    the partitions defined in the shared memory region. With the current
    flow, the error returned from parse_mtd_partitions() will be discarded
    in favor of trying to add the fallback partition.
    
    This will prevent the driver to end up in probe deferred pool and the
    partitions won't be parsed even after the QCOM_SMEM driver is available.
    
    Fix this issue by bailing out of mtd_device_parse_register() when
    -EPROBE_DEFER error is returned from parse_mtd_partitions() function and
    propagate the error code to the driver core for probing later.
    
    Fixes: 5ac67ce36cfe ("mtd: move code adding (registering) partitions to the parse_mtd_partitions()")
    Signed-off-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ca28e6a013b2e1765926a63ea5e8e1e8abb22b72
Author: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
Date:   Tue Mar 2 18:57:56 2021 +0530

    mtd: Handle possible -EPROBE_DEFER from parse_mtd_partitions()
    
    [ Upstream commit 08608adb520e51403be7592c2214846fa440a23a ]
    
    There are chances that the parse_mtd_partitions() function will return
    -EPROBE_DEFER in mtd_device_parse_register(). This might happen when
    the dependency is not available for the parser. For instance, on SDX55
    the MTD_QCOMSMEM_PARTS parser depends on the QCOM_SMEM driver to parse
    the partitions defined in the shared memory region. With the current
    flow, the error returned from parse_mtd_partitions() will be discarded
    in favor of trying to add the fallback partition.
    
    This will prevent the driver to end up in probe deferred pool and the
    partitions won't be parsed even after the QCOM_SMEM driver is available.
    
    Fix this issue by bailing out of mtd_device_parse_register() when
    -EPROBE_DEFER error is returned from parse_mtd_partitions() function and
    propagate the error code to the driver core for probing later.
    
    Fixes: 5ac67ce36cfe ("mtd: move code adding (registering) partitions to the parse_mtd_partitions()")
    Signed-off-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 73744fcb4eb06fa1f14e50915814de1912b72b22
Author: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
Date:   Tue Mar 2 18:57:56 2021 +0530

    mtd: Handle possible -EPROBE_DEFER from parse_mtd_partitions()
    
    [ Upstream commit 08608adb520e51403be7592c2214846fa440a23a ]
    
    There are chances that the parse_mtd_partitions() function will return
    -EPROBE_DEFER in mtd_device_parse_register(). This might happen when
    the dependency is not available for the parser. For instance, on SDX55
    the MTD_QCOMSMEM_PARTS parser depends on the QCOM_SMEM driver to parse
    the partitions defined in the shared memory region. With the current
    flow, the error returned from parse_mtd_partitions() will be discarded
    in favor of trying to add the fallback partition.
    
    This will prevent the driver to end up in probe deferred pool and the
    partitions won't be parsed even after the QCOM_SMEM driver is available.
    
    Fix this issue by bailing out of mtd_device_parse_register() when
    -EPROBE_DEFER error is returned from parse_mtd_partitions() function and
    propagate the error code to the driver core for probing later.
    
    Fixes: 5ac67ce36cfe ("mtd: move code adding (registering) partitions to the parse_mtd_partitions()")
    Signed-off-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 464461886367226f1f0c915db9e5a01bb8942289
Author: Jerome Forissier <jerome@forissier.org>
Date:   Mon Mar 22 11:40:37 2021 +0100

    tee: optee: do not check memref size on return from Secure World
    
    [ Upstream commit c650b8dc7a7910eb25af0aac1720f778b29e679d ]
    
    When Secure World returns, it may have changed the size attribute of the
    memory references passed as [in/out] parameters. The GlobalPlatform TEE
    Internal Core API specification does not restrict the values that this
    size can take. In particular, Secure World may increase the value to be
    larger than the size of the input buffer to indicate that it needs more.
    
    Therefore, the size check in optee_from_msg_param() is incorrect and
    needs to be removed. This fixes a number of failed test cases in the
    GlobalPlatform TEE Initial Configuratiom Test Suite v2_0_0_0-2017_06_09
    when OP-TEE is compiled without dynamic shared memory support
    (CFG_CORE_DYN_SHM=n).
    
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Suggested-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Jerome Forissier <jerome@forissier.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 76879a980cd5ede4cb9a638999fb80d37bc09db5
Author: Jeffrey Hugo <jhugo@codeaurora.org>
Date:   Wed Mar 10 14:30:55 2021 -0700

    bus: mhi: core: Sanity check values from remote device before use
    
    commit ec32332df7645e0ba463a08d483fe97665167071 upstream.
    
    When parsing the structures in the shared memory, there are values which
    come from the remote device.  For example, a transfer completion event
    will have a pointer to the tre in the relevant channel's transfer ring.
    As another example, event ring elements may specify a channel in which
    the event occurred, however the specified channel value may not be valid
    as no channel is defined at that index even though the index may be less
    than the maximum allowed index.  Such values should be considered to be
    untrusted, and validated before use.  If we blindly use such values, we
    may access invalid data or crash if the values are corrupted.
    
    If validation fails, drop the relevant event.
    
    Signed-off-by: Jeffrey Hugo <jhugo@codeaurora.org>
    Reviewed-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Reviewed-by: Hemant Kumar <hemantk@codeaurora.org>
    Link: https://lore.kernel.org/r/1615411855-15053-1-git-send-email-jhugo@codeaurora.org
    Signed-off-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d53a1433fd040f254082783f3562045dc4eb84fa
Author: Jerome Forissier <jerome@forissier.org>
Date:   Mon Mar 22 11:40:37 2021 +0100

    tee: optee: do not check memref size on return from Secure World
    
    [ Upstream commit c650b8dc7a7910eb25af0aac1720f778b29e679d ]
    
    When Secure World returns, it may have changed the size attribute of the
    memory references passed as [in/out] parameters. The GlobalPlatform TEE
    Internal Core API specification does not restrict the values that this
    size can take. In particular, Secure World may increase the value to be
    larger than the size of the input buffer to indicate that it needs more.
    
    Therefore, the size check in optee_from_msg_param() is incorrect and
    needs to be removed. This fixes a number of failed test cases in the
    GlobalPlatform TEE Initial Configuratiom Test Suite v2_0_0_0-2017_06_09
    when OP-TEE is compiled without dynamic shared memory support
    (CFG_CORE_DYN_SHM=n).
    
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Suggested-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Jerome Forissier <jerome@forissier.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fd5f40fc887485a8b9a6806a640a0d8e0ef1afb6
Author: Jeffrey Hugo <jhugo@codeaurora.org>
Date:   Wed Mar 10 14:30:55 2021 -0700

    bus: mhi: core: Sanity check values from remote device before use
    
    commit ec32332df7645e0ba463a08d483fe97665167071 upstream.
    
    When parsing the structures in the shared memory, there are values which
    come from the remote device.  For example, a transfer completion event
    will have a pointer to the tre in the relevant channel's transfer ring.
    As another example, event ring elements may specify a channel in which
    the event occurred, however the specified channel value may not be valid
    as no channel is defined at that index even though the index may be less
    than the maximum allowed index.  Such values should be considered to be
    untrusted, and validated before use.  If we blindly use such values, we
    may access invalid data or crash if the values are corrupted.
    
    If validation fails, drop the relevant event.
    
    Signed-off-by: Jeffrey Hugo <jhugo@codeaurora.org>
    Reviewed-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Reviewed-by: Hemant Kumar <hemantk@codeaurora.org>
    Link: https://lore.kernel.org/r/1615411855-15053-1-git-send-email-jhugo@codeaurora.org
    Signed-off-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9584ce366cc9a363fb5972e3d1003598583ba343
Author: Jerome Forissier <jerome@forissier.org>
Date:   Mon Mar 22 11:40:37 2021 +0100

    tee: optee: do not check memref size on return from Secure World
    
    [ Upstream commit c650b8dc7a7910eb25af0aac1720f778b29e679d ]
    
    When Secure World returns, it may have changed the size attribute of the
    memory references passed as [in/out] parameters. The GlobalPlatform TEE
    Internal Core API specification does not restrict the values that this
    size can take. In particular, Secure World may increase the value to be
    larger than the size of the input buffer to indicate that it needs more.
    
    Therefore, the size check in optee_from_msg_param() is incorrect and
    needs to be removed. This fixes a number of failed test cases in the
    GlobalPlatform TEE Initial Configuratiom Test Suite v2_0_0_0-2017_06_09
    when OP-TEE is compiled without dynamic shared memory support
    (CFG_CORE_DYN_SHM=n).
    
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Suggested-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Jerome Forissier <jerome@forissier.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a1d2bd164c1c78f87968b7883964175ec41c32ae
Author: Jeffrey Hugo <jhugo@codeaurora.org>
Date:   Wed Mar 10 14:30:55 2021 -0700

    bus: mhi: core: Sanity check values from remote device before use
    
    commit ec32332df7645e0ba463a08d483fe97665167071 upstream.
    
    When parsing the structures in the shared memory, there are values which
    come from the remote device.  For example, a transfer completion event
    will have a pointer to the tre in the relevant channel's transfer ring.
    As another example, event ring elements may specify a channel in which
    the event occurred, however the specified channel value may not be valid
    as no channel is defined at that index even though the index may be less
    than the maximum allowed index.  Such values should be considered to be
    untrusted, and validated before use.  If we blindly use such values, we
    may access invalid data or crash if the values are corrupted.
    
    If validation fails, drop the relevant event.
    
    Signed-off-by: Jeffrey Hugo <jhugo@codeaurora.org>
    Reviewed-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Reviewed-by: Hemant Kumar <hemantk@codeaurora.org>
    Link: https://lore.kernel.org/r/1615411855-15053-1-git-send-email-jhugo@codeaurora.org
    Signed-off-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fe53f8fd64d7ef200a189a4430e9cd6bc7f5d537
Author: Jerome Forissier <jerome@forissier.org>
Date:   Mon Mar 22 11:40:37 2021 +0100

    tee: optee: do not check memref size on return from Secure World
    
    [ Upstream commit c650b8dc7a7910eb25af0aac1720f778b29e679d ]
    
    When Secure World returns, it may have changed the size attribute of the
    memory references passed as [in/out] parameters. The GlobalPlatform TEE
    Internal Core API specification does not restrict the values that this
    size can take. In particular, Secure World may increase the value to be
    larger than the size of the input buffer to indicate that it needs more.
    
    Therefore, the size check in optee_from_msg_param() is incorrect and
    needs to be removed. This fixes a number of failed test cases in the
    GlobalPlatform TEE Initial Configuratiom Test Suite v2_0_0_0-2017_06_09
    when OP-TEE is compiled without dynamic shared memory support
    (CFG_CORE_DYN_SHM=n).
    
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Suggested-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Jerome Forissier <jerome@forissier.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7677f7fd8be76659cd2d0db8ff4093bbb51c20e5
Author: Axel Rasmussen <axelrasmussen@google.com>
Date:   Tue May 4 18:35:36 2021 -0700

    userfaultfd: add minor fault registration mode
    
    Patch series "userfaultfd: add minor fault handling", v9.
    
    Overview
    ========
    
    This series adds a new userfaultfd feature, UFFD_FEATURE_MINOR_HUGETLBFS.
    When enabled (via the UFFDIO_API ioctl), this feature means that any
    hugetlbfs VMAs registered with UFFDIO_REGISTER_MODE_MISSING will *also*
    get events for "minor" faults.  By "minor" fault, I mean the following
    situation:
    
    Let there exist two mappings (i.e., VMAs) to the same page(s) (shared
    memory).  One of the mappings is registered with userfaultfd (in minor
    mode), and the other is not.  Via the non-UFFD mapping, the underlying
    pages have already been allocated & filled with some contents.  The UFFD
    mapping has not yet been faulted in; when it is touched for the first
    time, this results in what I'm calling a "minor" fault.  As a concrete
    example, when working with hugetlbfs, we have huge_pte_none(), but
    find_lock_page() finds an existing page.
    
    We also add a new ioctl to resolve such faults: UFFDIO_CONTINUE.  The idea
    is, userspace resolves the fault by either a) doing nothing if the
    contents are already correct, or b) updating the underlying contents using
    the second, non-UFFD mapping (via memcpy/memset or similar, or something
    fancier like RDMA, or etc...).  In either case, userspace issues
    UFFDIO_CONTINUE to tell the kernel "I have ensured the page contents are
    correct, carry on setting up the mapping".
    
    Use Case
    ========
    
    Consider the use case of VM live migration (e.g. under QEMU/KVM):
    
    1. While a VM is still running, we copy the contents of its memory to a
       target machine. The pages are populated on the target by writing to the
       non-UFFD mapping, using the setup described above. The VM is still running
       (and therefore its memory is likely changing), so this may be repeated
       several times, until we decide the target is "up to date enough".
    
    2. We pause the VM on the source, and start executing on the target machine.
       During this gap, the VM's user(s) will *see* a pause, so it is desirable to
       minimize this window.
    
    3. Between the last time any page was copied from the source to the target, and
       when the VM was paused, the contents of that page may have changed - and
       therefore the copy we have on the target machine is out of date. Although we
       can keep track of which pages are out of date, for VMs with large amounts of
       memory, it is "slow" to transfer this information to the target machine. We
       want to resume execution before such a transfer would complete.
    
    4. So, the guest begins executing on the target machine. The first time it
       touches its memory (via the UFFD-registered mapping), userspace wants to
       intercept this fault. Userspace checks whether or not the page is up to date,
       and if not, copies the updated page from the source machine, via the non-UFFD
       mapping. Finally, whether a copy was performed or not, userspace issues a
       UFFDIO_CONTINUE ioctl to tell the kernel "I have ensured the page contents
       are correct, carry on setting up the mapping".
    
    We don't have to do all of the final updates on-demand. The userfaultfd manager
    can, in the background, also copy over updated pages once it receives the map of
    which pages are up-to-date or not.
    
    Interaction with Existing APIs
    ==============================
    
    Because this is a feature, a registered VMA could potentially receive both
    missing and minor faults.  I spent some time thinking through how the
    existing API interacts with the new feature:
    
    UFFDIO_CONTINUE cannot be used to resolve non-minor faults, as it does not
    allocate a new page.  If UFFDIO_CONTINUE is used on a non-minor fault:
    
    - For non-shared memory or shmem, -EINVAL is returned.
    - For hugetlb, -EFAULT is returned.
    
    UFFDIO_COPY and UFFDIO_ZEROPAGE cannot be used to resolve minor faults.
    Without modifications, the existing codepath assumes a new page needs to
    be allocated.  This is okay, since userspace must have a second
    non-UFFD-registered mapping anyway, thus there isn't much reason to want
    to use these in any case (just memcpy or memset or similar).
    
    - If UFFDIO_COPY is used on a minor fault, -EEXIST is returned.
    - If UFFDIO_ZEROPAGE is used on a minor fault, -EEXIST is returned (or -EINVAL
      in the case of hugetlb, as UFFDIO_ZEROPAGE is unsupported in any case).
    - UFFDIO_WRITEPROTECT simply doesn't work with shared memory, and returns
      -ENOENT in that case (regardless of the kind of fault).
    
    Future Work
    ===========
    
    This series only supports hugetlbfs.  I have a second series in flight to
    support shmem as well, extending the functionality.  This series is more
    mature than the shmem support at this point, and the functionality works
    fully on hugetlbfs, so this series can be merged first and then shmem
    support will follow.
    
    This patch (of 6):
    
    This feature allows userspace to intercept "minor" faults.  By "minor"
    faults, I mean the following situation:
    
    Let there exist two mappings (i.e., VMAs) to the same page(s).  One of the
    mappings is registered with userfaultfd (in minor mode), and the other is
    not.  Via the non-UFFD mapping, the underlying pages have already been
    allocated & filled with some contents.  The UFFD mapping has not yet been
    faulted in; when it is touched for the first time, this results in what
    I'm calling a "minor" fault.  As a concrete example, when working with
    hugetlbfs, we have huge_pte_none(), but find_lock_page() finds an existing
    page.
    
    This commit adds the new registration mode, and sets the relevant flag on
    the VMAs being registered.  In the hugetlb fault path, if we find that we
    have huge_pte_none(), but find_lock_page() does indeed find an existing
    page, then we have a "minor" fault, and if the VMA has the userfaultfd
    registration flag, we call into userfaultfd to handle it.
    
    This is implemented as a new registration mode, instead of an API feature.
    This is because the alternative implementation has significant drawbacks
    [1].
    
    However, doing it this was requires we allocate a VM_* flag for the new
    registration mode.  On 32-bit systems, there are no unused bits, so this
    feature is only supported on architectures with
    CONFIG_ARCH_USES_HIGH_VMA_FLAGS.  When attempting to register a VMA in
    MINOR mode on 32-bit architectures, we return -EINVAL.
    
    [1] https://lore.kernel.org/patchwork/patch/1380226/
    
    [peterx@redhat.com: fix minor fault page leak]
      Link: https://lkml.kernel.org/r/20210322175132.36659-1-peterx@redhat.com
    
    Link: https://lkml.kernel.org/r/20210301222728.176417-1-axelrasmussen@google.com
    Link: https://lkml.kernel.org/r/20210301222728.176417-2-axelrasmussen@google.com
    Signed-off-by: Axel Rasmussen <axelrasmussen@google.com>
    Reviewed-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Cc: Alexey Dobriyan <adobriyan@gmail.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Anshuman Khandual <anshuman.khandual@arm.com>
    Cc: Catalin Marinas <catalin.marinas@arm.com>
    Cc: Chinwen Chang <chinwen.chang@mediatek.com>
    Cc: Huang Ying <ying.huang@intel.com>
    Cc: Ingo Molnar <mingo@redhat.com>
    Cc: Jann Horn <jannh@google.com>
    Cc: Jerome Glisse <jglisse@redhat.com>
    Cc: Lokesh Gidra <lokeshgidra@google.com>
    Cc: "Matthew Wilcox (Oracle)" <willy@infradead.org>
    Cc: Michael Ellerman <mpe@ellerman.id.au>
    Cc: "Michal Koutn" <mkoutny@suse.com>
    Cc: Michel Lespinasse <walken@google.com>
    Cc: Mike Rapoport <rppt@linux.vnet.ibm.com>
    Cc: Nicholas Piggin <npiggin@gmail.com>
    Cc: Peter Xu <peterx@redhat.com>
    Cc: Shaohua Li <shli@fb.com>
    Cc: Shawn Anastasio <shawn@anastas.io>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Cc: Steven Price <steven.price@arm.com>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: Adam Ruprecht <ruprecht@google.com>
    Cc: Axel Rasmussen <axelrasmussen@google.com>
    Cc: Cannon Matthews <cannonmatthews@google.com>
    Cc: "Dr . David Alan Gilbert" <dgilbert@redhat.com>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Mina Almasry <almasrymina@google.com>
    Cc: Oliver Upton <oupton@google.com>
    Cc: Kirill A. Shutemov <kirill@shutemov.name>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 0a269a008f837e76ce285679ab3005059fadc2a6
Author: Vitaly Kuznetsov <vkuznets@redhat.com>
Date:   Wed Apr 14 14:35:40 2021 +0200

    x86/kvm: Fix pr_info() for async PF setup/teardown
    
    'pr_fmt' already has 'kvm-guest: ' so 'KVM' prefix is redundant.
    "Unregister pv shared memory" is very ambiguous, it's hard to
    say which particular PV feature it relates to.
    
    Signed-off-by: Vitaly Kuznetsov <vkuznets@redhat.com>
    Message-Id: <20210414123544.1060604-2-vkuznets@redhat.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

commit d219743da96cc097d021559c1f15243e02d900df
Author: Eli Cohen <elic@nvidia.com>
Date:   Sun Apr 11 11:36:46 2021 +0300

    vdpa/mlx5: Set err = -ENOMEM in case dma_map_sg_attrs fails
    
    [ Upstream commit be286f84e33da1a7f83142b64dbd86f600e73363 ]
    
    Set err = -ENOMEM if dma_map_sg_attrs() fails so the function reutrns
    error.
    
    Fixes: 94abbccdf291 ("vdpa/mlx5: Add shared memory registration code")
    Signed-off-by: Eli Cohen <elic@nvidia.com>
    Reported-by: kernel test robot <lkp@intel.com>
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/20210411083646.910546-1-elic@nvidia.com
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Reviewed-by: Stefano Garzarella <sgarzare@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit a8cd07e4400d66c3304a38c5796a41c10ad76743
Author: Eli Cohen <elic@nvidia.com>
Date:   Sun Apr 11 11:36:46 2021 +0300

    vdpa/mlx5: Set err = -ENOMEM in case dma_map_sg_attrs fails
    
    [ Upstream commit be286f84e33da1a7f83142b64dbd86f600e73363 ]
    
    Set err = -ENOMEM if dma_map_sg_attrs() fails so the function reutrns
    error.
    
    Fixes: 94abbccdf291 ("vdpa/mlx5: Add shared memory registration code")
    Signed-off-by: Eli Cohen <elic@nvidia.com>
    Reported-by: kernel test robot <lkp@intel.com>
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/20210411083646.910546-1-elic@nvidia.com
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Reviewed-by: Stefano Garzarella <sgarzare@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit be286f84e33da1a7f83142b64dbd86f600e73363
Author: Eli Cohen <elic@nvidia.com>
Date:   Sun Apr 11 11:36:46 2021 +0300

    vdpa/mlx5: Set err = -ENOMEM in case dma_map_sg_attrs fails
    
    Set err = -ENOMEM if dma_map_sg_attrs() fails so the function reutrns
    error.
    
    Fixes: 94abbccdf291 ("vdpa/mlx5: Add shared memory registration code")
    Signed-off-by: Eli Cohen <elic@nvidia.com>
    Reported-by: kernel test robot <lkp@intel.com>
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Link: https://lore.kernel.org/r/20210411083646.910546-1-elic@nvidia.com
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Reviewed-by: Stefano Garzarella <sgarzare@redhat.com>

commit 436d35bdd9fd4dd50d852d5376eafd2f10a86bde
Author: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
Date:   Thu Apr 8 22:39:29 2021 +0530

    ARM: configs: qcom_defconfig: Enable GLINK SMEM driver
    
    Enable the Qualcomm GLINK SMEM driver to support GLINK protocol over
    shared memory.
    
    Signed-off-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Link: https://lore.kernel.org/r/20210408170930.91834-7-manivannan.sadhasivam@linaro.org
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>

commit ec32332df7645e0ba463a08d483fe97665167071
Author: Jeffrey Hugo <jhugo@codeaurora.org>
Date:   Wed Mar 10 14:30:55 2021 -0700

    bus: mhi: core: Sanity check values from remote device before use
    
    When parsing the structures in the shared memory, there are values which
    come from the remote device.  For example, a transfer completion event
    will have a pointer to the tre in the relevant channel's transfer ring.
    As another example, event ring elements may specify a channel in which
    the event occurred, however the specified channel value may not be valid
    as no channel is defined at that index even though the index may be less
    than the maximum allowed index.  Such values should be considered to be
    untrusted, and validated before use.  If we blindly use such values, we
    may access invalid data or crash if the values are corrupted.
    
    If validation fails, drop the relevant event.
    
    Signed-off-by: Jeffrey Hugo <jhugo@codeaurora.org>
    Reviewed-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Reviewed-by: Hemant Kumar <hemantk@codeaurora.org>
    Link: https://lore.kernel.org/r/1615411855-15053-1-git-send-email-jhugo@codeaurora.org
    Signed-off-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>

commit c650b8dc7a7910eb25af0aac1720f778b29e679d
Author: Jerome Forissier <jerome@forissier.org>
Date:   Mon Mar 22 11:40:37 2021 +0100

    tee: optee: do not check memref size on return from Secure World
    
    When Secure World returns, it may have changed the size attribute of the
    memory references passed as [in/out] parameters. The GlobalPlatform TEE
    Internal Core API specification does not restrict the values that this
    size can take. In particular, Secure World may increase the value to be
    larger than the size of the input buffer to indicate that it needs more.
    
    Therefore, the size check in optee_from_msg_param() is incorrect and
    needs to be removed. This fixes a number of failed test cases in the
    GlobalPlatform TEE Initial Configuratiom Test Suite v2_0_0_0-2017_06_09
    when OP-TEE is compiled without dynamic shared memory support
    (CFG_CORE_DYN_SHM=n).
    
    Reviewed-by: Sumit Garg <sumit.garg@linaro.org>
    Suggested-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Jerome Forissier <jerome@forissier.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

commit dec991e4722d763130c8ccd92523f2a173f8a7cd
Author: Kyung Min Park <kyung.min.park@intel.com>
Date:   Sun Mar 14 13:15:34 2021 -0700

    iommu/vt-d: Disable SVM when ATS/PRI/PASID are not enabled in the device
    
    Currently, the Intel VT-d supports Shared Virtual Memory (SVM) only when
    IO page fault is supported. Otherwise, shared memory pages can not be
    swapped out and need to be pinned. The device needs the Address Translation
    Service (ATS), Page Request Interface (PRI) and Process Address Space
    Identifier (PASID) capabilities to be enabled to support IO page fault.
    
    Disable SVM when ATS, PRI and PASID are not enabled in the device.
    
    Signed-off-by: Kyung Min Park <kyung.min.park@intel.com>
    Acked-by: Lu Baolu <baolu.lu@linux.intel.com>
    Link: https://lore.kernel.org/r/20210314201534.918-1-kyung.min.park@intel.com
    Signed-off-by: Joerg Roedel <jroedel@suse.de>

commit 08608adb520e51403be7592c2214846fa440a23a
Author: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
Date:   Tue Mar 2 18:57:56 2021 +0530

    mtd: Handle possible -EPROBE_DEFER from parse_mtd_partitions()
    
    There are chances that the parse_mtd_partitions() function will return
    -EPROBE_DEFER in mtd_device_parse_register(). This might happen when
    the dependency is not available for the parser. For instance, on SDX55
    the MTD_QCOMSMEM_PARTS parser depends on the QCOM_SMEM driver to parse
    the partitions defined in the shared memory region. With the current
    flow, the error returned from parse_mtd_partitions() will be discarded
    in favor of trying to add the fallback partition.
    
    This will prevent the driver to end up in probe deferred pool and the
    partitions won't be parsed even after the QCOM_SMEM driver is available.
    
    Fix this issue by bailing out of mtd_device_parse_register() when
    -EPROBE_DEFER error is returned from parse_mtd_partitions() function and
    propagate the error code to the driver core for probing later.
    
    Fixes: 5ac67ce36cfe ("mtd: move code adding (registering) partitions to the parse_mtd_partitions()")
    Signed-off-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Signed-off-by: Miquel Raynal <miquel.raynal@bootlin.com>

commit b2576c3bf4ce9b992e1c1fbb1cffe0d606702621
Author: Sonny Jiang <sonny.jiang@amd.com>
Date:   Sun Jan 31 09:44:51 2021 -0500

    drm/amdgpu/vcn3.0: add wptr/rptr reset/update for share memory
    
    Because of dpg, the rptr/wptr need to be saved on fw shared memory,
    and restore them back in RBC_RB_RPTR/WPTR in kernel at power up.
    
    Signed-off-by: Sonny Jiang <sonny.jiang@amd.com>
    Reviewed-by: Leo Liu <leo.liu@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 28ad17a5e93635e8e538eb9df094ee177691183a
Author: Eli Cohen <elic@nvidia.com>
Date:   Thu Jan 7 09:18:45 2021 +0200

    vdpa/mlx5: Fix memory key MTT population
    
    [ Upstream commit 710eb8e32d04714452759f2b66884bfa7e97d495 ]
    
    map_direct_mr() assumed that the number of scatter/gather entries
    returned by dma_map_sg_attrs() was equal to the number of segments in
    the sgl list. This led to wrong population of the mkey object. Fix this
    by properly referring to the returned value.
    
    The hardware expects each MTT entry to contain the DMA address of a
    contiguous block of memory of size (1 << mr->log_size) bytes.
    dma_map_sg_attrs() can coalesce several sg entries into a single
    scatter/gather entry of contiguous DMA range so we need to scan the list
    and refer to the size of each s/g entry.
    
    In addition, get rid of fill_sg() which effect is overwritten by
    populate_mtts().
    
    Fixes: 94abbccdf291 ("vdpa/mlx5: Add shared memory registration code")
    Signed-off-by: Eli Cohen <elic@nvidia.com>
    Link: https://lore.kernel.org/r/20210107071845.GA224876@mtl-vdi-166.wap.labs.mlnx
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit ca29e14506bd66d50733c1f3e4448aba54e70cc7
Author: Sean Christopherson <seanjc@google.com>
Date:   Wed Feb 3 16:01:12 2021 -0800

    KVM: x86: SEV: Treat C-bit as legal GPA bit regardless of vCPU mode
    
    Rename cr3_lm_rsvd_bits to reserved_gpa_bits, and use it for all GPA
    legality checks.  AMD's APM states:
    
      If the C-bit is an address bit, this bit is masked from the guest
      physical address when it is translated through the nested page tables.
    
    Thus, any access that can conceivably be run through NPT should ignore
    the C-bit when checking for validity.
    
    For features that KVM emulates in software, e.g. MTRRs, there is no
    clear direction in the APM for how the C-bit should be handled.  For
    such cases, follow the SME behavior inasmuch as possible, since SEV is
    is essentially a VM-specific variant of SME.  For SME, the APM states:
    
      In this case the upper physical address bits are treated as reserved
      when the feature is enabled except where otherwise indicated.
    
    Collecting the various relavant SME snippets in the APM and cross-
    referencing the omissions with Linux kernel code, this leaves MTTRs and
    APIC_BASE as the only flows that KVM emulates that should _not_ ignore
    the C-bit.
    
    Note, this means the reserved bit checks in the page tables are
    technically broken.  This will be remedied in a future patch.
    
    Although the page table checks are technically broken, in practice, it's
    all but guaranteed to be irrelevant.  NPT is required for SEV, i.e.
    shadowing page tables isn't needed in the common case.  Theoretically,
    the checks could be in play for nested NPT, but it's extremely unlikely
    that anyone is running nested VMs on SEV, as doing so would require L1
    to expose sensitive data to L0, e.g. the entire VMCB.  And if anyone is
    running nested VMs, L0 can't read the guest's encrypted memory, i.e. L1
    would need to put its NPT in shared memory, in which case the C-bit will
    never be set.  Or, L1 could use shadow paging, but again, if L0 needs to
    read page tables, e.g. to load PDPTRs, the memory can't be encrypted if
    L1 has any expectation of L0 doing the right thing.
    
    Cc: Tom Lendacky <thomas.lendacky@amd.com>
    Cc: Brijesh Singh <brijesh.singh@amd.com>
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-Id: <20210204000117.3303214-8-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

commit 710eb8e32d04714452759f2b66884bfa7e97d495
Author: Eli Cohen <elic@nvidia.com>
Date:   Thu Jan 7 09:18:45 2021 +0200

    vdpa/mlx5: Fix memory key MTT population
    
    map_direct_mr() assumed that the number of scatter/gather entries
    returned by dma_map_sg_attrs() was equal to the number of segments in
    the sgl list. This led to wrong population of the mkey object. Fix this
    by properly referring to the returned value.
    
    The hardware expects each MTT entry to contain the DMA address of a
    contiguous block of memory of size (1 << mr->log_size) bytes.
    dma_map_sg_attrs() can coalesce several sg entries into a single
    scatter/gather entry of contiguous DMA range so we need to scan the list
    and refer to the size of each s/g entry.
    
    In addition, get rid of fill_sg() which effect is overwritten by
    populate_mtts().
    
    Fixes: 94abbccdf291 ("vdpa/mlx5: Add shared memory registration code")
    Signed-off-by: Eli Cohen <elic@nvidia.com>
    Link: https://lore.kernel.org/r/20210107071845.GA224876@mtl-vdi-166.wap.labs.mlnx
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Acked-by: Jason Wang <jasowang@redhat.com>

commit 7a3b0c2ad3b0cfac5cb8820b8961f0956ff863fb
Author: Suman Anna <s-anna@ti.com>
Date:   Mon Jan 11 12:45:53 2021 -0600

    arm64: dts: ti: k3-j7200-som-p0: Add mailboxes to R5Fs
    
    Add the required 'mboxes' property to all the R5F processors for the
    TI J7200 common processor board. The mailboxes and some shared memory
    are required for running the Remote Processor Messaging (RPMsg) stack
    between the host processor and each of the R5Fs. The nodes are therefore
    added in the common k3-j7200-som-p0.dtsi file so that all of these can
    be co-located.
    
    The chosen sub-mailboxes match the values used in the current firmware
    images. This can be changed, if needed, as per the system integration
    needs after making appropriate changes on the firmware side as well.
    
    Note that any R5F Core1 resources are needed and used only when that
    R5F cluster is configured for Split-mode.
    
    Signed-off-by: Suman Anna <s-anna@ti.com>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Reviewed-by: Lokesh Vutla <lokeshvutla@ti.com>
    Link: https://lore.kernel.org/r/20210111184554.6748-3-s-anna@ti.com

commit eb6f3655d3ed4ee093b484b7a7246a61ae2bc30f
Author: Suman Anna <s-anna@ti.com>
Date:   Mon Jan 11 12:45:52 2021 -0600

    arm64: dts: ti: k3-j7200: Add R5F cluster nodes
    
    The J7200 SoCs have 2 dual-core Arm Cortex-R5F processor (R5FSS)
    subsystems/clusters. One R5F cluster is present within the MCU
    domain (MCU_R5FSS0), and the other one is present within the MAIN
    domain (MAIN_R5FSS0). Each of these can be configured at boot time
    to be either run in a LockStep mode or in an Asymmetric Multi
    Processing (AMP) fashion in Split-mode. These subsystems have 64 KB
    each Tightly-Coupled Memory (TCM) internal memories for each core
    split between two banks - ATCM and BTCM (further interleaved into
    two banks). The TCMs of both Cores are combined in LockStep-mode
    to provide a larger 128 KB of memory, but otherwise are functionally
    similar to those on J721E SoCs.
    
    Add the DT nodes for both the MCU and MAIN domain R5F cluster/subsystems,
    the two R5F cores are added as child nodes to each of the R5F cluster
    nodes. The clusters are configured to run in LockStep mode by default,
    with the ATCMs enabled to allow the R5 cores to execute code from DDR
    with boot-strapping code from ATCM. The inter-processor communication
    between the main A72 cores and these processors is achieved through
    shared memory and Mailboxes.
    
    The following firmware names are used by default for these cores, and
    can be overridden in a board dts file if desired:
       MCU R5FSS0 Core0: j7200-mcu-r5f0_0-fw (both in LockStep and Split modes)
       MCU R5FSS0 Core1: j7200-mcu-r5f0_1-fw (needed only in Split mode)
       MAIN R5FSS0 Core0: j7200-main-r5f0_0-fw (both in LockStep & Split modes)
       MAIN R5FSS0 Core1: j7200-main-r5f0_1-fw (needed only in Split mode)
    
    Signed-off-by: Suman Anna <s-anna@ti.com>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Reviewed-by: Lokesh Vutla <lokeshvutla@ti.com>
    Link: https://lore.kernel.org/r/20210111184554.6748-2-s-anna@ti.com

commit 8cf74d0565cf96cb6b154b6c49244ec47db1af5e
Author: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
Date:   Wed Jan 6 18:23:12 2021 +0530

    ARM: dts: qcom: sdx55: Add Shared memory manager support
    
    Add smem node to support shared memory manager on SDX55 platform.
    
    Signed-off-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Reviewed-by: Vinod Koul <vkoul@kernel.org>
    Link: https://lore.kernel.org/r/20210106125322.61840-9-manivannan.sadhasivam@linaro.org
    [bjorn: Moved smem node out from /soc]
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>

commit e42dd87e70e66a54144bf75b62aa21bb518b3ba3
Author: Sonny Jiang <sonny.jiang@amd.com>
Date:   Fri Nov 27 17:15:18 2020 -0500

    drm/amdgpu: VCN 3.0 multiple queue ring reset
    
    Add firmware write/read point reset sync through shared memory, port from vcn2.5.
    
    Signed-off-by: Sonny Jiang <sonny.jiang@amd.com>
    Reviewed-by: James Zhu <James.Zhu@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 68a9159c832b34f55c9612d492028a589d8e5985
Author: Rui Miguel Silva <rui.silva@linaro.org>
Date:   Fri Nov 13 15:06:04 2020 +0000

    optee: add writeback to valid memory type
    
    [ Upstream commit 853735e404244f5496cdb6188c5ed9a0f9627ee6 ]
    
    Only in smp systems the cache policy is setup as write alloc, in
    single cpu systems the cache policy is set as writeback and it is
    normal memory, so, it should pass the is_normal_memory check in the
    share memory registration.
    
    Add the right condition to make it work in no smp systems.
    
    Fixes: cdbcf83d29c1 ("tee: optee: check type of registered shared memory")
    Signed-off-by: Rui Miguel Silva <rui.silva@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5c4c6b2be717f1bcec6f6b0373f93761a76375ba
Author: Rui Miguel Silva <rui.silva@linaro.org>
Date:   Fri Nov 13 15:06:04 2020 +0000

    optee: add writeback to valid memory type
    
    [ Upstream commit 853735e404244f5496cdb6188c5ed9a0f9627ee6 ]
    
    Only in smp systems the cache policy is setup as write alloc, in
    single cpu systems the cache policy is set as writeback and it is
    normal memory, so, it should pass the is_normal_memory check in the
    share memory registration.
    
    Add the right condition to make it work in no smp systems.
    
    Fixes: cdbcf83d29c1 ("tee: optee: check type of registered shared memory")
    Signed-off-by: Rui Miguel Silva <rui.silva@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit d6172283a4706aef3136d704e27b8446e879f010
Author: Rui Miguel Silva <rui.silva@linaro.org>
Date:   Fri Nov 13 15:06:04 2020 +0000

    optee: add writeback to valid memory type
    
    [ Upstream commit 853735e404244f5496cdb6188c5ed9a0f9627ee6 ]
    
    Only in smp systems the cache policy is setup as write alloc, in
    single cpu systems the cache policy is set as writeback and it is
    normal memory, so, it should pass the is_normal_memory check in the
    share memory registration.
    
    Add the right condition to make it work in no smp systems.
    
    Fixes: cdbcf83d29c1 ("tee: optee: check type of registered shared memory")
    Signed-off-by: Rui Miguel Silva <rui.silva@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 303bc934722b53163bfb1c25da7db5d35c0e51b6
Merge: 79c0c1f0389d ae597565d13f
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Nov 27 14:48:03 2020 -0800

    Merge tag 'arm-soc-fixes-v5.10-3' of git://git.kernel.org/pub/scm/linux/kernel/git/soc/soc
    
    Pull ARM SoC fixes from Arnd Bergmann:
     "Another set of patches for devicetree files and Arm SoC specific
      drivers:
    
       - A fix for OP-TEE shared memory on non-SMP systems
    
       - multiple code fixes for the OMAP platform, including one regression
         for the CPSW network driver and a few runtime warning fixes
    
       - Some DT patches for the Rockchip RK3399 platform, in particular
         fixing the MMC device ordering that recently became
         nondeterministic with async probe.
    
       - Multiple DT fixes for the Tegra platform, including a regression
         fix for suspend/resume on TX2
    
       - A regression fix for a user-triggered fault in the NXP dpio driver
    
       - A regression fix for a bug caused by an earlier bug fix in the
         xilinx firmware driver
    
       - Two more DTC warning fixes
    
       - Sylvain Lemieux steps down as maintainer for the NXP LPC32xx
         platform"
    
    * tag 'arm-soc-fixes-v5.10-3' of git://git.kernel.org/pub/scm/linux/kernel/git/soc/soc: (24 commits)
      arm64: tegra: Fix Tegra234 VDK node names
      arm64: tegra: Wrong AON HSP reg property size
      arm64: tegra: Fix USB_VBUS_EN0 regulator on Jetson TX1
      arm64: tegra: Correct the UART for Jetson Xavier NX
      arm64: tegra: Disable the ACONNECT for Jetson TX2
      optee: add writeback to valid memory type
      firmware: xilinx: Use hash-table for api feature check
      firmware: xilinx: Fix SD DLL node reset issue
      soc: fsl: dpio: Get the cpumask through cpumask_of(cpu)
      ARM: dts: dra76x: m_can: fix order of clocks
      bus: ti-sysc: suppress err msg for timers used as clockevent/source
      MAINTAINERS: Remove myself as LPC32xx maintainers
      arm64: dts: qcom: clear the warnings caused by empty dma-ranges
      arm64: dts: broadcom: clear the warnings caused by empty dma-ranges
      ARM: dts: am437x-l4: fix compatible for cpsw switch dt node
      arm64: dts: rockchip: Reorder LED triggers from mmc devices on rk3399-roc-pc.
      arm64: dts: rockchip: Assign a fixed index to mmc devices on rk3399 boards.
      arm64: dts: rockchip: Remove system-power-controller from pmic on Odroid Go Advance
      arm64: dts: rockchip: fix NanoPi R2S GMAC clock name
      ARM: OMAP2+: Manage MPU state properly for omap_enter_idle_coupled()
      ...

commit ae597565d13febc73b9066c05935c1003a57a03e
Merge: 454a079b381a 853735e40424
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Nov 27 17:45:45 2020 +0100

    Merge tag 'optee-valid-memory-type-for-v5.11' of git://git.linaro.org/people/jens.wiklander/linux-tee into arm/fixes
    
    Add writeback to valid OP-TEE shared memory types
    
    Allows OP-TEE to work with ARMv7 based single CPU systems by allowing
    writeback cache policy for shared memory.
    
    * tag 'optee-valid-memory-type-for-v5.11' of git://git.linaro.org/people/jens.wiklander/linux-tee:
      optee: add writeback to valid memory type
    
    Link: https://lore.kernel.org/r/20201125120134.GA1642471@jade
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit ed5da80873a792b9b2b560a6417bc60679ba5126
Author: Bjorn Andersson <bjorn.andersson@linaro.org>
Date:   Sat Nov 21 21:41:34 2020 -0800

    remoteproc: qcom: q6v5: Query sysmon before graceful shutdown
    
    Requesting a graceful shutdown through the shared memory state signals
    will not be acked in the event that sysmon has already successfully shut
    down the remote firmware. So extend the stop request API to optionally
    take the remoteproc's sysmon instance and query if there's already been
    a successful shutdown attempt, before doing the signal dance.
    
    Tested-by: Steev Klimaszewski <steev@kali.org>
    Reviewed-by: Rishabh Bhatnagar <rishabhb@codeaurora.org>
    Link: https://lore.kernel.org/r/20201122054135.802935-4-bjorn.andersson@linaro.org
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>

commit 5c212aaf5457ca5bd99aba3ad29a4a17f8129939
Author: Bjorn Andersson <bjorn.andersson@linaro.org>
Date:   Sat Nov 21 21:41:33 2020 -0800

    remoteproc: sysmon: Expose the shutdown result
    
    A graceful shutdown of the Qualcomm remote processors where
    traditionally performed by invoking a shared memory state signal and
    waiting for the associated ack.
    
    This was later superseded by the "sysmon" mechanism, where some form of
    shared memory bus is used to send a "graceful shutdown request" message
    and one of more signals comes back to indicate its success.
    
    But when this newer mechanism is in effect the firmware is shut down by
    the time the older mechanism, implemented in the remoteproc drivers,
    attempts to perform a graceful shutdown - and as such it will never
    receive an ack back.
    
    This patch therefor track the success of the latest shutdown attempt in
    sysmon and exposes a new function in the API that the remoteproc driver
    can use to query the success and the necessity of invoking the older
    mechanism.
    
    Tested-by: Steev Klimaszewski <steev@kali.org>
    Reviewed-by: Rishabh Bhatnagar <rishabhb@codeaurora.org>
    Link: https://lore.kernel.org/r/20201122054135.802935-3-bjorn.andersson@linaro.org
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>

commit 853735e404244f5496cdb6188c5ed9a0f9627ee6
Author: Rui Miguel Silva <rui.silva@linaro.org>
Date:   Fri Nov 13 15:06:04 2020 +0000

    optee: add writeback to valid memory type
    
    Only in smp systems the cache policy is setup as write alloc, in
    single cpu systems the cache policy is set as writeback and it is
    normal memory, so, it should pass the is_normal_memory check in the
    share memory registration.
    
    Add the right condition to make it work in no smp systems.
    
    Fixes: cdbcf83d29c1 ("tee: optee: check type of registered shared memory")
    Signed-off-by: Rui Miguel Silva <rui.silva@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

commit cb03bd50f557a46f2f68af75d5614e76ab9f2cc8
Author: Rijo Thomas <Rijo-john.Thomas@amd.com>
Date:   Wed Nov 4 11:56:10 2020 +0530

    tee: amdtee: synchronize access to shm list
    
    [ Upstream commit be353be27874f40837327d9a39e3ad2149ab66d3 ]
    
    Synchronize access to shm or shared memory buffer list to prevent
    race conditions due to concurrent updates to shared shm list by
    multiple threads.
    
    Fixes: 757cc3e9ff1d ("tee: add AMD-TEE driver")
    Reviewed-by: Devaraj Rangasamy <Devaraj.Rangasamy@amd.com>
    Signed-off-by: Rijo Thomas <Rijo-john.Thomas@amd.com>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5d53c196c84c2f83a04f712b71eda8a994c98ad3
Author: Rijo Thomas <Rijo-john.Thomas@amd.com>
Date:   Wed Nov 4 11:56:09 2020 +0530

    tee: amdtee: fix memory leak due to reset of global shm list
    
    [ Upstream commit ff1f855804cdbbb6db7b9b6df6cab783d1a40d66 ]
    
    The driver maintains a list of shared memory buffers along with their
    mapped buffer id's in a global linked list. These buffers need to be
    unmapped after use by the user-space client.
    
    The global shared memory list is initialized to zero entries in the
    function amdtee_open(). This clearing of list entries can be a source
    for memory leak on secure side if the global linked list previously
    held some mapped buffer entries allocated from another TEE context.
    
    Fix potential memory leak issue by moving global shared memory list
    to AMD-TEE driver context data structure.
    
    Fixes: 757cc3e9ff1d ("tee: add AMD-TEE driver")
    Reviewed-by: Devaraj Rangasamy <Devaraj.Rangasamy@amd.com>
    Signed-off-by: Rijo Thomas <Rijo-john.Thomas@amd.com>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 0a5096ec2a3501bd468853153a8129bb682e4f09
Author: Alex Elder <elder@linaro.org>
Date:   Thu Nov 12 06:20:00 2020 -0600

    net: ipa: ignore the microcontroller log event
    
    The IPA-resident microcontroller has the ability to log various
    activity in an area of IPA shared memory.  When the microcontroller
    starts it generates an event to the AP to provide information about
    the log.
    
    We don't support reading this log, and we can safely ignore the
    event.  So do that rather than treating the log info event we
    receive as "unsupported."
    
    Signed-off-by: Alex Elder <elder@linaro.org>
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

commit 0461a1ae98bc3045492333bebf6e79d4e859d3a1
Merge: 53bf2776e313 be353be27874
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Nov 13 13:44:03 2020 +0100

    Merge tag 'amdtee-fixes-for-5.10' of git://git.linaro.org:/people/jens.wiklander/linux-tee into arm/fixes
    
    AMD-TEE driver bug fixes
    
    AMD-TEE driver keeps track of shared memory buffers and their
    corresponding buffer id's in a global linked list. These buffers are
    used to share data between x86 and AMD Secure Processor. This pull
    request fixes issues related to maintaining mapped buffers in a shared
    linked list.
    
    * tag 'amdtee-fixes-for-5.10' of git://git.linaro.org:/people/jens.wiklander/linux-tee:
      tee: amdtee: synchronize access to shm list
      tee: amdtee: fix memory leak due to reset of global shm list
    
    Link: https://lore.kernel.org/r/20201109080809.GA3862873@jade
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 2879b593c3784e5eafc67cae915d8b7d680455f3
Author: Suman Anna <s-anna@ti.com>
Date:   Wed Oct 28 22:38:01 2020 -0500

    arm64: dts: ti: k3-j721e-som-p0: Add mailboxes to R5Fs
    
    Add the required 'mboxes' property to all the R5F processors for the
    TI J721E common processor board. The mailboxes and some shared memory
    are required for running the Remote Processor Messaging (RPMsg) stack
    between the host processor and each of the R5Fs. The nodes are therefore
    added in the common k3-j721e-som-p0.dtsi file so that all of these can
    be co-located.
    
    The chosen sub-mailboxes match the values used in the current firmware
    images. This can be changed, if needed, as per the system integration
    needs after making appropriate changes on the firmware side as well.
    
    Note that any R5F Core1 resources are needed and used only when that
    R5F cluster is configured for Split-mode.
    
    Signed-off-by: Suman Anna <s-anna@ti.com>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Reviewed-by: Lokesh Vutla <lokeshvutla@ti.com>
    Link: https://lore.kernel.org/r/20201029033802.15366-8-s-anna@ti.com

commit df445ff9de893146107d37e0cd5e542f800d9b39
Author: Suman Anna <s-anna@ti.com>
Date:   Wed Oct 28 22:38:00 2020 -0500

    arm64: dts: ti: k3-j721e-main: Add MAIN domain R5F cluster nodes
    
    The J721E SoCs have 3 dual-core Arm Cortex-R5F processor (R5FSS)
    subsystems/clusters. One R5F cluster (MCU_R5FSS0) is present within
    the MCU domain, and the remaining two clusters are present in the
    MAIN domain (MAIN_R5FSS0 & MAIN_R5FSS1). Each of these can be
    configured at boot time to be either run in a LockStep mode or in
    an Asymmetric Multi Processing (AMP) fashion in Split-mode. These
    subsystems have 64 KB each Tightly-Coupled Memory (TCM) internal
    memories for each core split between two banks - ATCM and BTCM
    (further interleaved into two banks). There are some IP integration
    differences from standard Arm R5 clusters such as the absence of
    an ACP port, presence of an additional TI-specific Region Address
    Translater (RAT) module for translating 32-bit CPU addresses into
    larger system bus addresses etc.
    
    Add the DT nodes for these two MAIN domain R5F cluster/subsystems,
    the two R5F cores are each added as child nodes to the corresponding
    main cluster node. Both the clusters are configured to run in LockStep
    mode by default, with the ATCMs enabled to allow the R5 cores to execute
    code from DDR with boot-strapping code from ATCM. The inter-processor
    communication between the main A72 cores and these processors is
    achieved through shared memory and Mailboxes.
    
    The following firmware names are used by default for these cores, and
    can be overridden in a board dts file if needed:
        MAIN R5FSS0 Core0: j7-main-r5f0_0-fw (both in LockStep and Split modes)
        MAIN R5FSS0 Core1: j7-main-r5f0_1-fw (needed only in Split mode)
        MAIN R5FSS1 Core0: j7-main-r5f1_0-fw (both in LockStep and Split modes)
        MAIN R5FSS1 Core1: j7-main-r5f1_1-fw (needed only in Split mode)
    
    Signed-off-by: Suman Anna <s-anna@ti.com>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Reviewed-by: Lokesh Vutla <lokeshvutla@ti.com>
    Link: https://lore.kernel.org/r/20201029033802.15366-7-s-anna@ti.com

commit dd74c9459cf2c87c3143b4b9005b7c9056fccdb0
Author: Suman Anna <s-anna@ti.com>
Date:   Wed Oct 28 22:37:59 2020 -0500

    arm64: dts: ti: k3-j721e-mcu: Add MCU domain R5F cluster node
    
    The J721E SoCs have 3 dual-core Arm Cortex-R5F processor (R5FSS)
    subsystems/clusters. One R5F cluster (MCU_R5FSS0) is present within
    the MCU domain, and the remaining two clusters are present in the
    MAIN domain (MAIN_R5FSS0 & MAIN_R5FSS1). Each of these can be
    configured at boot time to be either run in a LockStep mode or in
    an Asymmetric Multi Processing (AMP) fashion in Split-mode. These
    subsystems have 64 KB each Tightly-Coupled Memory (TCM) internal
    memories for each core split between two banks - ATCM and BTCM
    (further interleaved into two banks). There are some IP integration
    differences from standard Arm R5 clusters such as the absence of
    an ACP port, presence of an additional TI-specific Region Address
    Translater (RAT) module for translating 32-bit CPU addresses into
    larger system bus addresses etc.
    
    Add the DT node for the MCU domain R5F cluster/subsystem, the two
    R5F cores are added as child nodes to the main cluster/subsystem node.
    The cluster is configured to run in LockStep mode by default, with the
    ATCMs enabled to allow the R5 cores to execute code from DDR with
    boot-strapping code from ATCM. The inter-processor communication
    between the main A72 cores and these processors is achieved through
    shared memory and Mailboxes.
    
    The following firmware names are used by default for these cores, and
    can be overridden in a board dts file if needed:
        MCU R5FSS0 Core0: j7-mcu-r5f0_0-fw (both in LockStep and Split modes)
        MCU R5FSS0 Core1: j7-mcu-r5f0_1-fw (needed only in Split mode)
    
    Signed-off-by: Suman Anna <s-anna@ti.com>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Reviewed-by: Lokesh Vutla <lokeshvutla@ti.com>
    Link: https://lore.kernel.org/r/20201029033802.15366-6-s-anna@ti.com

commit 10332cd6bcf287e22dac875d121b73adb762f96b
Author: Suman Anna <s-anna@ti.com>
Date:   Wed Oct 28 22:37:56 2020 -0500

    arm64: dts: ti: k3-am654-base-board: Add mailboxes to R5Fs
    
    Add the required 'mboxes' property to both the R5F processors on all the
    TI K3 AM65x boards. The mailboxes and some shared memory are required
    for running the Remote Processor Messaging (RPMsg) stack between the
    host processor and each of the R5Fs. The chosen sub-mailboxes match the
    values used in the current firmware images. This can be changed, if
    needed, as per the system integration needs after making appropriate
    changes on the firmware side as well.
    
    Note that the R5F Core1 resources are needed and used only when the
    R5F cluster is configured for Split-mode.
    
    Signed-off-by: Suman Anna <s-anna@ti.com>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Reviewed-by: Lokesh Vutla <lokeshvutla@ti.com>
    Link: https://lore.kernel.org/r/20201029033802.15366-3-s-anna@ti.com

commit 5bb9e0f6e8505e31159963150104569d9b8a8911
Author: Suman Anna <s-anna@ti.com>
Date:   Wed Oct 28 22:37:55 2020 -0500

    arm64: dts: ti: k3-am65-mcu: Add MCU domain R5F cluster node
    
    The AM65x SoCs have a single dual-core Arm Cortex-R5F processor (R5FSS)
    subsystem/cluster. This R5F cluster (MCU_R5FSS0) is present within the
    MCU domain, and can be configured at boot time to be either run in a
    LockStep mode or in an Asymmetric Multi Processing (AMP) fashion in
    Split-mode. This subsystem has 64 KB each Tightly-Coupled Memory (TCM)
    internal memories for each core split between two banks - TCMA and TCMB
    (further interleaved into two banks). There are some IP integration
    differences from standard Arm R5F clusters such as the absence of an ACP
    port, presence of an additional TI-specific Region Address Translater
    (RAT) module for translating 32-bit CPU addresses into larger system
    bus addresses etc.
    
    Add the DT node for this R5F cluster/subsystem, the two R5F cores are
    added as child nodes to the main cluster node. The cluster is configured
    to run in LockStep mode by default, with the ATCMs enabled to allow the
    R5 cores to execute code from DDR with boot-strapping code from ATCM.
    The inter-processor communication between the main A53 cores and these
    processors is achieved through shared memory and Mailboxes.
    
    The following firmware names are used by default for these cores, and
    can be overridden in a board dts file if needed:
        am65x-mcu-r5f0_0-fw (LockStep mode and for Core0 in Split mode)
        am65x-mcu-r5f0_1-fw (Core1 in Split mode)
    
    Signed-off-by: Suman Anna <s-anna@ti.com>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Reviewed-by: Lokesh Vutla <lokeshvutla@ti.com>
    Link: https://lore.kernel.org/r/20201029033802.15366-2-s-anna@ti.com

commit be353be27874f40837327d9a39e3ad2149ab66d3
Author: Rijo Thomas <Rijo-john.Thomas@amd.com>
Date:   Wed Nov 4 11:56:10 2020 +0530

    tee: amdtee: synchronize access to shm list
    
    Synchronize access to shm or shared memory buffer list to prevent
    race conditions due to concurrent updates to shared shm list by
    multiple threads.
    
    Fixes: 757cc3e9ff1d ("tee: add AMD-TEE driver")
    Reviewed-by: Devaraj Rangasamy <Devaraj.Rangasamy@amd.com>
    Signed-off-by: Rijo Thomas <Rijo-john.Thomas@amd.com>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

commit ff1f855804cdbbb6db7b9b6df6cab783d1a40d66
Author: Rijo Thomas <Rijo-john.Thomas@amd.com>
Date:   Wed Nov 4 11:56:09 2020 +0530

    tee: amdtee: fix memory leak due to reset of global shm list
    
    The driver maintains a list of shared memory buffers along with their
    mapped buffer id's in a global linked list. These buffers need to be
    unmapped after use by the user-space client.
    
    The global shared memory list is initialized to zero entries in the
    function amdtee_open(). This clearing of list entries can be a source
    for memory leak on secure side if the global linked list previously
    held some mapped buffer entries allocated from another TEE context.
    
    Fix potential memory leak issue by moving global shared memory list
    to AMD-TEE driver context data structure.
    
    Fixes: 757cc3e9ff1d ("tee: add AMD-TEE driver")
    Reviewed-by: Devaraj Rangasamy <Devaraj.Rangasamy@amd.com>
    Signed-off-by: Rijo Thomas <Rijo-john.Thomas@amd.com>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

commit dd616e2ae016cf0f1b09be45f00932f579e38598
Author: Jing Xiangfeng <jingxiangfeng@huawei.com>
Date:   Mon Oct 26 15:06:37 2020 +0800

    vdpa/mlx5: Fix error return in map_direct_mr()
    
    commit 7ba08e81cb4aec9724ab7674a5de49e7a341062c upstream.
    
    Fix to return the variable "err" from the error handling case instead
    of "ret".
    
    Fixes: 94abbccdf291 ("vdpa/mlx5: Add shared memory registration code")
    Signed-off-by: Jing Xiangfeng <jingxiangfeng@huawei.com>
    Link: https://lore.kernel.org/r/20201026070637.164321-1-jingxiangfeng@huawei.com
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Acked-by: Eli Cohen <elic@nvidia.com>
    Cc: stable@vger.kernel.org
    Acked-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3a2b9c8da21bc27b24e01e8d486240a76811bd02
Author: Etienne Carriere <etienne.carriere@linaro.org>
Date:   Thu Oct 8 16:37:21 2020 +0200

    firmware: arm_scmi: Expand SMC/HVC message pool to more than one
    
    [ Upstream commit 7adb2c8aaaa6a387af7140e57004beba2c04a4c6 ]
    
    SMC/HVC can transmit only one message at the time as the shared memory
    needs to be protected and the calls are synchronous.
    
    However, in order to allow multiple threads to send SCMI messages
    simultaneously, we need a larger poll of memory.
    
    Let us just use value of 20 to keep it in sync mailbox transport
    implementation. Any other value must work perfectly.
    
    Link: https://lore.kernel.org/r/20201008143722.21888-4-etienne.carriere@linaro.org
    Fixes: 1dc6558062da ("firmware: arm_scmi: Add smc/hvc transport")
    Cc: Peng Fan <peng.fan@nxp.com>
    Signed-off-by: Etienne Carriere <etienne.carriere@linaro.org>
    [sudeep.holla: reworded the commit message to indicate the practicality]
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 7ba08e81cb4aec9724ab7674a5de49e7a341062c
Author: Jing Xiangfeng <jingxiangfeng@huawei.com>
Date:   Mon Oct 26 15:06:37 2020 +0800

    vdpa/mlx5: Fix error return in map_direct_mr()
    
    Fix to return the variable "err" from the error handling case instead
    of "ret".
    
    Fixes: 94abbccdf291 ("vdpa/mlx5: Add shared memory registration code")
    Signed-off-by: Jing Xiangfeng <jingxiangfeng@huawei.com>
    Link: https://lore.kernel.org/r/20201026070637.164321-1-jingxiangfeng@huawei.com
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Acked-by: Eli Cohen <elic@nvidia.com>
    Cc: stable@vger.kernel.org
    Acked-by: Jason Wang <jasowang@redhat.com>

commit 6dedbd1d544389d6ab1727423348572a11e9df5d
Author: Suman Anna <s-anna@ti.com>
Date:   Fri Oct 2 18:42:32 2020 -0500

    remoteproc: k3-r5: Add a remoteproc driver for R5F subsystem
    
    The TI K3 family of SoCs typically have one or more dual-core Arm Cortex
    R5F processor clusters/subsystems (R5FSS). This R5F subsystem/cluster
    can be configured at boot time to be either run in a LockStep mode or in
    an Asymmetric Multi Processing (AMP) fashion in Split-mode. This subsystem
    has 64 KB each Tightly-Coupled Memory (TCM) internal memories for each
    core split between two banks - TCMA and TCMB (further interleaved into
    two banks). The subsystem does not have an MMU, but has a Region Address
    Translater (RAT) module that is accessible only from the R5Fs for providing
    translations between 32-bit CPU addresses into larger system bus addresses.
    
    Add a remoteproc driver to support this subsystem to be able to load and
    boot the R5F cores primarily in LockStep mode. The code also includes the
    base support for Split mode. Error Recovery and Power Management features
    are not currently supported. Loading support includes the internal TCMs
    and DDR. RAT support is left for a future patch, and as such the reserved
    memory carveout regions are all expected to be using memory regions within
    the first 2 GB.
    
    The R5F remote processors do not have an MMU, and so require fixed memory
    carveout regions matching the firmware image addresses. Support for this
    is provided by mandating multiple memory regions to be attached to the
    remoteproc device. The first memory region will be used to serve as the
    DMA pool for all dynamic allocations like the vrings and vring buffers.
    The remaining memory regions are mapped into the kernel at device probe
    time, and are used to provide address translations for firmware image
    segments without the need for any RSC_CARVEOUT entries. Any firmware
    image using memory outside of the supplied reserved memory carveout
    regions will be errored out.
    
    The R5F processors on TI K3 SoCs require a specific sequence for booting
    and shutting down the processors. This sequence is also dependent on the
    mode (LockStep or Split) the R5F cluster is configured for. The R5F cores
    have a Memory Protection Unit (MPU) that has a default configuration that
    does not allow the cores to run out of DDR out of reset. This is resolved
    by using the TCMs for boot-strapping code that applies the appropriate
    executable permissions on desired DDR memory. The loading into the TCMs
    requires that the resets be released first with the cores in halted state.
    The Power Sleep Controller (PSC) module on K3 SoCs requires that the cores
    be in WFI/WFE states with no active bus transactions before the cores can
    be put back into reset. Support for this is provided by using the newly
    introduced .prepare() and .unprepare() ops in the remoteproc core. The
    .prepare() ops is invoked before any loading, and the .unprepare() ops
    is invoked after the remoteproc resource cleanup. The R5F core resets
    are deasserted in .prepare() and asserted in .unprepare(), and the cores
    themselves are started and halted in .start() and .stop() ops. This
    ensures symmetric usage and allows the R5F cores state machine to be
    maintained properly between using the sysfs 'state' variable, bind/unbind
    and regular module load/unload flows.
    
    The subsystem is represented as a single remoteproc in LockStep mode, and
    as two remoteprocs in Split mode. The driver uses various TI-SCI interfaces
    to talk to the System Controller (DMSC) for managing configuration, power
    and reset management of these cores. IPC between the A53 cores and the R5
    cores is supported through the virtio rpmsg stack using shared memory and
    OMAP Mailboxes.
    
    The AM65x SoCs typically have a single R5FSS in the MCU voltage domain. The
    J721E SoCs uses a slightly revised IP and typically have three R5FSSs, with
    one cluster present within the MCU voltage domain (MCU_R5FSS0), and the
    remaining two clusters present in the MAIN voltage domain (MAIN_R5FSS0 and
    MAIN_R5FSS1). The integration of these clusters on J721E SoC is also
    slightly different in that these IPs do support an actual local reset line,
    while they are a no-op on AM65x SoCs.
    
    Signed-off-by: Suman Anna <s-anna@ti.com>
    Reviewed-by: Mathieu Poirier <mathieu.poirier@linaro.org>
    Link: https://lore.kernel.org/r/20201002234234.20704-3-s-anna@ti.com
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>

commit 7adb2c8aaaa6a387af7140e57004beba2c04a4c6
Author: Etienne Carriere <etienne.carriere@linaro.org>
Date:   Thu Oct 8 16:37:21 2020 +0200

    firmware: arm_scmi: Expand SMC/HVC message pool to more than one
    
    SMC/HVC can transmit only one message at the time as the shared memory
    needs to be protected and the calls are synchronous.
    
    However, in order to allow multiple threads to send SCMI messages
    simultaneously, we need a larger poll of memory.
    
    Let us just use value of 20 to keep it in sync mailbox transport
    implementation. Any other value must work perfectly.
    
    Link: https://lore.kernel.org/r/20201008143722.21888-4-etienne.carriere@linaro.org
    Fixes: 1dc6558062da ("firmware: arm_scmi: Add smc/hvc transport")
    Cc: Peng Fan <peng.fan@nxp.com>
    Signed-off-by: Etienne Carriere <etienne.carriere@linaro.org>
    [sudeep.holla: reworded the commit message to indicate the practicality]
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>

commit e5cd6cbe025570f6135f48538cb450254f8fbdd3
Author: Gerd Hoffmann <kraxel@redhat.com>
Date:   Wed Sep 23 17:31:59 2020 -0700

    virtio-gpu api: host visible feature
    
    This patch adds a new virtgpu feature that allows directly
    mapping host allocated resources.
    
    This is based on virtio shared memory regions, which allows
    querying for memory regions using PCI transport. Each shared
    memory region has an associated "shmid", the meaning of which
    is device specific.
    
    For virtio-gpu, we can define the shared memory region with id
    VIRTIO_GPU_SHM_ID_HOST_VISIBLE to be the "host visible memory
    region".
    
    The presence of the host visible memory region means the following
    hypercalls are supported:
    
    1) VIRTIO_GPU_CMD_RESOURCE_MAP_BLOB
    
    This hypercall tells the host to inject the host resource's
    mapping in an offset into virtio-gpu's PCI address space.
    This is typically done via KVM_SET_USER_MEMORY_REGION on Linux
    hosts.
    
    On success, VIRTIO_GPU_RESP_OK_MAP_INFO is returned, which
    specifies the host buffer's caching type and possibly in the
    future performance hints about the buffer..
    
    2) VIRTIO_GPU_CMD_RESOURCE_UNMAP_BLOB
    
    This hypercall tells the host to remove the host resource's
    mapping from the guest VM.
    
    Signed-off-by: Gerd Hoffmann <kraxel@redhat.com>
    Acked-by: Tomeu Vizoso <tomeu.vizoso@collabora.com>
    Acked-by: Lingfeng Yang <lfy@google.com>
    Link: http://patchwork.freedesktop.org/patch/msgid/20200924003214.662-4-gurchetansingh@chromium.org
    Co-developed-by: Gurchetan Singh <gurchetansingh@chromium.org>
    Signed-off-by: Gurchetan Singh <gurchetansingh@chromium.org>

commit b042dc742440edeb3e405cc79039edf7f5ff5fd1
Merge: dc47f7e7729d 6e043c658e79
Author: Olof Johansson <olof@lixom.net>
Date:   Sat Sep 26 09:48:12 2020 -0700

    Merge tag 'socfpga_dts_update_for_v5.10' of git://git.kernel.org/pub/scm/linux/kernel/git/dinguyen/linux into arm/dt
    
    SoCFPGA DTS updates for v5.10
    - Increase shared-dma-pool size to 32MB
    - Add ptp_ref clock properties to the ethernet nodes on Stratix10 and Agilex
    
    * tag 'socfpga_dts_update_for_v5.10' of git://git.kernel.org/pub/scm/linux/kernel/git/dinguyen/linux:
      arm64: dts: stratix10/agilex: add the ptp_ref clock
      arm64: dts: agilex: increase shared memory size to 32Mb
    
    Link: https://lore.kernel.org/r/20200916204422.30897-1-dinguyen@kernel.org
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 27bd6129a4c5b1269540c925bfda1c280cbb9f1d
Merge: c1b0c6271510 38e895487afc
Author: Miklos Szeredi <mszeredi@redhat.com>
Date:   Thu Sep 10 11:34:14 2020 +0200

    Merge branch 'virtio-shm' into for-next
    
    Pull virtio shared memory region patches for virtiofs shared memory
    (DAX) support.

commit 5bfe37ca8ac8e9176bfd923d0a83802b7305d2f5
Author: Sebastien Boeuf <sebastien.boeuf@intel.com>
Date:   Wed Aug 19 18:19:41 2020 -0400

    virtio: Add get_shm_region method
    
    Virtio defines 'shared memory regions' that provide a continuously
    shared region between the host and guest.
    
    Provide a method to find a particular region on a device.
    
    Signed-off-by: Sebastien Boeuf <sebastien.boeuf@intel.com>
    Signed-off-by: Dr. David Alan Gilbert <dgilbert@redhat.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Cc: kvm@vger.kernel.org
    Cc: virtualization@lists.linux-foundation.org
    Cc: "Michael S. Tsirkin" <mst@redhat.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>

commit cf53928fa0d9120d9c5336504e1c836e453f446a
Author: Suman Anna <s-anna@ti.com>
Date:   Tue Aug 25 12:21:43 2020 -0500

    arm64: dts: ti: k3-j721e-som-p0: Add mailboxes to C71x DSP
    
    Add the required 'mboxes' property to the C71x DSP processor for the TI
    J721E common processor board. The mailboxes and some shared memory are
    required for running the Remote Processor Messaging (RPMsg) stack between
    the host processor and each of the DSPs. The nodes are therefore added
    in the common k3-j721e-som-p0.dtsi file so that all of these can be
    co-located.
    
    The chosen sub-mailboxes match the values used in the current firmware
    images. This can be changed, if needed, as per the system integration
    needs after making appropriate changes on the firmware side as well.
    
    Signed-off-by: Suman Anna <s-anna@ti.com>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Reviewed-by: Lokesh Vutla <lokeshvutla@ti.com>
    Link: https://lore.kernel.org/r/20200825172145.13186-7-s-anna@ti.com

commit 804a4cc7fe3cc7207b25c63f21ea82f1b77d19ae
Author: Suman Anna <s-anna@ti.com>
Date:   Tue Aug 25 12:21:42 2020 -0500

    arm64: dts: ti: k3-j721e-main: Add C71x DSP node
    
    The J721E SoCs have a single TMS320C71x DSP Subsystem in the MAIN
    voltage domain containing the next-generation C711 CPU core. The
    subsystem has 32 KB of L1D configurable SRAM/Cache and 512 KB of
    L2 configurable SRAM/Cache. This subsystem has a CMMU but is not
    used currently. The inter-processor communication between the main
    A72 cores and the C711 processor is achieved through shared memory
    and a Mailbox. Add the DT node for this DSP processor sub-system
    in the common k3-j721e-main.dtsi file.
    
    The following firmware name is used by default for the C71x core,
    and can be overridden in a board dts file if desired:
        C71x_0 DSP: j7-c71_0-fw
    
    Signed-off-by: Suman Anna <s-anna@ti.com>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Reviewed-by: Lokesh Vutla <lokeshvutla@ti.com>
    Link: https://lore.kernel.org/r/20200825172145.13186-6-s-anna@ti.com

commit a55babbf00d71f285bbd52433a859862cc3223fb
Author: Suman Anna <s-anna@ti.com>
Date:   Tue Aug 25 12:21:40 2020 -0500

    arm64: dts: ti: k3-j721e-som-p0: Add mailboxes to C66x DSPs
    
    Add the required 'mboxes' property to both the C66x DSP processors for the
    TI J721E common processor board. The mailboxes and some shared memory are
    required for running the Remote Processor Messaging (RPMsg) stack between
    the host processor and each of the DSPs. The nodes are therefore added
    in the common k3-j721e-som-p0.dtsi file so that all of these can be
    co-located.
    
    The chosen sub-mailboxes match the values used in the current firmware
    images. This can be changed, if needed, as per the system integration
    needs after making appropriate changes on the firmware side as well.
    
    Signed-off-by: Suman Anna <s-anna@ti.com>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Reviewed-by: Lokesh Vutla <lokeshvutla@ti.com>
    Link: https://lore.kernel.org/r/20200825172145.13186-4-s-anna@ti.com

commit eb9a2a637ae5b23d7881f28fb83d11c88a371229
Author: Suman Anna <s-anna@ti.com>
Date:   Tue Aug 25 12:21:39 2020 -0500

    arm64: dts: ti: k3-j721e-main: Add C66x DSP nodes
    
    The J721E SoCs have two TMS320C66x DSP Core Subsystems (C66x CorePacs)
    in the MAIN voltage domain, each with a C66x Fixed/Floating-Point DSP
    Core, and 32 KB of L1P & L1D configurable SRAMs/Cache and an additional
    288 KB of L2 configurable SRAM/Cache. These subsystems do not have
    an MMU but contain a Region Address Translator (RAT) sub-module for
    translating 32-bit processor addresses into larger bus addresses.
    The inter-processor communication between the main A72 cores and
    these processors is achieved through shared memory and Mailboxes.
    Add the DT nodes for these DSP processor sub-systems in the common
    k3-j721e-main.dtsi file.
    
    The following firmware names are used by default for these cores, and
    can be overridden in a board dts file if desired:
        C66x_0 DSP: j7-c66_0-fw
        C66x_1 DSP: j7-c66_1-fw
    
    Signed-off-by: Suman Anna <s-anna@ti.com>
    Signed-off-by: Nishanth Menon <nm@ti.com>
    Reviewed-by: Lokesh Vutla <lokeshvutla@ti.com>
    Link: https://lore.kernel.org/r/20200825172145.13186-3-s-anna@ti.com

commit ba171d3f0850003216fd1a85190d17b1feddb961
Author: Cedric Neveux <cedric.neveux@nxp.com>
Date:   Mon Mar 4 08:54:23 2019 +0100

    driver: tee: Handle NULL pointer indication from client
    
    TEE Client introduce a new capability "TEE_GEN_CAP_MEMREF_NULL"
    to handle the support of the shared memory buffer with a NULL pointer.
    
    This capability depends on TEE Capabilities and driver support.
    Driver and TEE exchange capabilities at driver initialization.
    
    Signed-off-by: Michael Whitfield <michael.whitfield@nxp.com>
    Signed-off-by: Cedric Neveux <cedric.neveux@nxp.com>
    Reviewed-by: Joakim Bech <joakim.bech@linaro.org>
    Tested-by: Joakim Bech <joakim.bech@linaro.org> (QEMU)
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

commit 2232aeb1160bb45cd93d47faf02b083502b31532
Author: Richard Gong <richard.gong@intel.com>
Date:   Tue Aug 4 17:01:32 2020 -0500

    arm64: dts: agilex: increase shared memory size to 32Mb
    
    Increase the shared memory size from 16Mb to 32Mb so that we can properly
    handle the image authorization for 12+ Mb RBF/JIC files.
    
    Signed-off-by: Richard Gong <richard.gong@intel.com>
    Signed-off-by: Dinh Nguyen <dinguyen@kernel.org>

commit 57b077939287835b9396a1c3b40d35609cf2fcb8
Merge: ce13266d97b1 8a7c3213db06
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Aug 11 14:34:17 2020 -0700

    Merge tag 'for_linus' of git://git.kernel.org/pub/scm/linux/kernel/git/mst/vhost
    
    Pull virtio updates from Michael Tsirkin:
    
     - IRQ bypass support for vdpa and IFC
    
     - MLX5 vdpa driver
    
     - Endianness fixes for virtio drivers
    
     - Misc other fixes
    
    * tag 'for_linus' of git://git.kernel.org/pub/scm/linux/kernel/git/mst/vhost: (71 commits)
      vdpa/mlx5: fix up endian-ness for mtu
      vdpa: Fix pointer math bug in vdpasim_get_config()
      vdpa/mlx5: Fix pointer math in mlx5_vdpa_get_config()
      vdpa/mlx5: fix memory allocation failure checks
      vdpa/mlx5: Fix uninitialised variable in core/mr.c
      vdpa_sim: init iommu lock
      virtio_config: fix up warnings on parisc
      vdpa/mlx5: Add VDPA driver for supported mlx5 devices
      vdpa/mlx5: Add shared memory registration code
      vdpa/mlx5: Add support library for mlx5 VDPA implementation
      vdpa/mlx5: Add hardware descriptive header file
      vdpa: Modify get_vq_state() to return error code
      net/vdpa: Use struct for set/get vq state
      vdpa: remove hard coded virtq num
      vdpasim: support batch updating
      vhost-vdpa: support IOTLB batching hints
      vhost-vdpa: support get/set backend features
      vhost: generialize backend features setting/getting
      vhost-vdpa: refine ioctl pre-processing
      vDPA: dont change vq irq after DRIVER_OK
      ...

commit 05acc4beb24c7e5ed3ae20a3d3ab2b29b40cb385
Author: Alex Dewar <alex.dewar@gmx.co.uk>
Date:   Thu Aug 6 19:56:15 2020 +0100

    vdpa/mlx5: Fix uninitialised variable in core/mr.c
    
    If the kernel is unable to allocate memory for the variable dmr then
    err will be returned without being set. Set err to -ENOMEM in this
    case.
    
    Fixes: 94abbccdf291 ("vdpa/mlx5: Add shared memory registration code")
    Addresses-Coverity: ("Uninitialized variables")
    Signed-off-by: Alex Dewar <alex.dewar@gmx.co.uk>
    Link: https://lore.kernel.org/r/20200806185625.67344-1-alex.dewar@gmx.co.uk
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Acked-by: Eli Cohen <eli@mellanox.com>

commit 94abbccdf2916cb03f9626f2d36c6e9971490c12
Author: Eli Cohen <eli@mellanox.com>
Date:   Tue Aug 4 19:20:47 2020 +0300

    vdpa/mlx5: Add shared memory registration code
    
    Add code to support registering address space region for the device. The
    virtio driver can run as either:
    1. Guest virtio driver
    2. Userspace virtio driver on the host
    3. Kernel virtio driver on the host
    
    In any case a memory key object is required to provide access to memory
    for the device.
    
    This code will be shared by network or block driver implementations.
    
    Reviewed-by: Parav Pandit <parav@mellanox.com>
    Signed-off-by: Eli Cohen <eli@mellanox.com>
    Link: https://lore.kernel.org/r/20200804162048.22587-12-eli@mellanox.com
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

commit 6edbe024ba17777b065e0d0b8aeca9789a4d880b
Author: Suman Anna <s-anna@ti.com>
Date:   Tue Jul 21 17:36:16 2020 -0500

    remoteproc: k3-dsp: Add a remoteproc driver of K3 C66x DSPs
    
    The Texas Instrument's K3 J721E SoCs have two C66x DSP Subsystems in MAIN
    voltage domain that are based on the TI's standard TMS320C66x DSP CorePac
    module. Each subsystem has a Fixed/Floating-Point DSP CPU, with 32 KB each
    of L1P & L1D SRAMs that can be configured and partitioned as either RAM
    and/or Cache, and 288 KB of L2 SRAM with 256 KB of memory configurable as
    either RAM and/or Cache. The CorePac also includes an Internal DMA (IDMA),
    External Memory Controller (EMC), Extended Memory Controller (XMC) with a
    Region Address Translator (RAT) unit for 32-bit to 48-bit address
    extension/translations, an Interrupt Controller (INTC) and a Powerdown
    Controller (PDC).
    
    A new remoteproc module is added to perform the device management of
    these DSP devices. The support is limited to images using only external
    DDR memory at the moment, the loading support to internal memories and
    any on-chip RAM memories will be added in a subsequent patch. RAT support
    is also left for a future patch, and as such the reserved memory carveout
    regions are all expected to be using memory regions within the first 2 GB.
    Error Recovery and Power Management features are not currently supported.
    
    The C66x remote processors do not have an MMU, and so require fixed memory
    carveout regions matching the firmware image addresses. Support for this
    is provided by mandating multiple memory regions to be attached to the
    remoteproc device. The first memory region will be used to serve as the
    DMA pool for all dynamic allocations like the vrings and vring buffers.
    The remaining memory regions are mapped into the kernel at device probe
    time, and are used to provide address translations for firmware image
    segments without the need for any RSC_CARVEOUT entries. Any firmware
    image using memory outside of the supplied reserved memory carveout
    regions will be errored out.
    
    The driver uses various TI-SCI interfaces to talk to the System Controller
    (DMSC) for managing configuration, power and reset management of these
    cores. IPC between the A72 cores and the DSP cores is supported through
    the virtio rpmsg stack using shared memory and OMAP Mailboxes.
    
    Signed-off-by: Suman Anna <s-anna@ti.com>
    Reviewed-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Reviewed-by: Mathieu Poirier <mathieu.poirier@linaro.org>
    Link: https://lore.kernel.org/r/20200721223617.20312-6-s-anna@ti.com
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>

commit 2e0612e1ec09f4d86f521b5155dfcde3fb9d45a4
Author: Satheesh Rajendran <sathnaga@linux.vnet.ibm.com>
Date:   Fri Jun 19 12:31:13 2020 +0530

    powerpc/pseries/svm: Fix incorrect check for shared_lppaca_size
    
    commit b710d27bf72068b15b2f0305d825988183e2ff28 upstream.
    
    Early secure guest boot hits the below crash while booting with
    vcpus numbers aligned with page boundary for PAGE size of 64k
    and LPPACA size of 1k i.e 64, 128 etc.
    
      Partition configured for 64 cpus.
      CPU maps initialized for 1 thread per core
      ------------[ cut here ]------------
      kernel BUG at arch/powerpc/kernel/paca.c:89!
      Oops: Exception in kernel mode, sig: 5 [#1]
      LE PAGE_SIZE=64K MMU=Radix SMP NR_CPUS=2048 NUMA pSeries
    
    This is due to the BUG_ON() for shared_lppaca_total_size equal to
    shared_lppaca_size. Instead the code should only BUG_ON() if we have
    exceeded the total_size, which indicates we've overflowed the array.
    
    Fixes: bd104e6db6f0 ("powerpc/pseries/svm: Use shared memory for LPPACA structures")
    Cc: stable@vger.kernel.org # v5.4+
    Signed-off-by: Satheesh Rajendran <sathnaga@linux.vnet.ibm.com>
    Reviewed-by: Laurent Dufour <ldufour@linux.ibm.com>
    Reviewed-by: Thiago Jung Bauermann <bauerman@linux.ibm.com>
    [mpe: Reword change log to clarify we're fixing not removing the check]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200619070113.16696-1-sathnaga@linux.vnet.ibm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c5ce2060f487754f3d1eee36bda5743be22352dd
Author: Satheesh Rajendran <sathnaga@linux.vnet.ibm.com>
Date:   Fri Jun 19 12:31:13 2020 +0530

    powerpc/pseries/svm: Fix incorrect check for shared_lppaca_size
    
    commit b710d27bf72068b15b2f0305d825988183e2ff28 upstream.
    
    Early secure guest boot hits the below crash while booting with
    vcpus numbers aligned with page boundary for PAGE size of 64k
    and LPPACA size of 1k i.e 64, 128 etc.
    
      Partition configured for 64 cpus.
      CPU maps initialized for 1 thread per core
      ------------[ cut here ]------------
      kernel BUG at arch/powerpc/kernel/paca.c:89!
      Oops: Exception in kernel mode, sig: 5 [#1]
      LE PAGE_SIZE=64K MMU=Radix SMP NR_CPUS=2048 NUMA pSeries
    
    This is due to the BUG_ON() for shared_lppaca_total_size equal to
    shared_lppaca_size. Instead the code should only BUG_ON() if we have
    exceeded the total_size, which indicates we've overflowed the array.
    
    Fixes: bd104e6db6f0 ("powerpc/pseries/svm: Use shared memory for LPPACA structures")
    Cc: stable@vger.kernel.org # v5.4+
    Signed-off-by: Satheesh Rajendran <sathnaga@linux.vnet.ibm.com>
    Reviewed-by: Laurent Dufour <ldufour@linux.ibm.com>
    Reviewed-by: Thiago Jung Bauermann <bauerman@linux.ibm.com>
    [mpe: Reword change log to clarify we're fixing not removing the check]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200619070113.16696-1-sathnaga@linux.vnet.ibm.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4908d02637b34e604efbe77aadecb510338d92c9
Author: James Zhu <James.Zhu@amd.com>
Date:   Thu Jul 16 09:56:52 2020 -0400

    drm/amdgpu/vcn: merge shared memory into vcpu
    
    Merge vcn firmware shared memory bo into vcn vcpu bo.
    
    Signed-off-by: James Zhu <James.Zhu@amd.com>
    Reviewed-by: Leo Liu <leo.liu@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit d10985f46e484eebf77eaa05eb614d76ec12a9a1
Author: James Zhu <James.Zhu@amd.com>
Date:   Thu Jul 16 09:47:35 2020 -0400

    Revert "drm/amdgpu/vcn: add shared memory restore after wake up from sleep."
    
    This reverts commit 21b704d78352c289d31697824ceea7ad0ff4ce59.
    To merge vcn firmware shared memory bo into vcn vcpu bo.
    
    Signed-off-by: James Zhu <James.Zhu@amd.com>
    Reviewed-by: Leo Liu <leo.liu@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit b710d27bf72068b15b2f0305d825988183e2ff28
Author: Satheesh Rajendran <sathnaga@linux.vnet.ibm.com>
Date:   Fri Jun 19 12:31:13 2020 +0530

    powerpc/pseries/svm: Fix incorrect check for shared_lppaca_size
    
    Early secure guest boot hits the below crash while booting with
    vcpus numbers aligned with page boundary for PAGE size of 64k
    and LPPACA size of 1k i.e 64, 128 etc.
    
      Partition configured for 64 cpus.
      CPU maps initialized for 1 thread per core
      ------------[ cut here ]------------
      kernel BUG at arch/powerpc/kernel/paca.c:89!
      Oops: Exception in kernel mode, sig: 5 [#1]
      LE PAGE_SIZE=64K MMU=Radix SMP NR_CPUS=2048 NUMA pSeries
    
    This is due to the BUG_ON() for shared_lppaca_total_size equal to
    shared_lppaca_size. Instead the code should only BUG_ON() if we have
    exceeded the total_size, which indicates we've overflowed the array.
    
    Fixes: bd104e6db6f0 ("powerpc/pseries/svm: Use shared memory for LPPACA structures")
    Cc: stable@vger.kernel.org # v5.4+
    Signed-off-by: Satheesh Rajendran <sathnaga@linux.vnet.ibm.com>
    Reviewed-by: Laurent Dufour <ldufour@linux.ibm.com>
    Reviewed-by: Thiago Jung Bauermann <bauerman@linux.ibm.com>
    [mpe: Reword change log to clarify we're fixing not removing the check]
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20200619070113.16696-1-sathnaga@linux.vnet.ibm.com

commit 722208ea3e2a19f927cd507366547b2546444697
Author: Alex Elder <elder@linaro.org>
Date:   Tue Jun 30 07:58:46 2020 -0500

    net: ipa: kill IPA_MEM_UC_OFFSET
    
    The microcontroller shared memory area is at the beginning of the
    IPA resident memory.  IPA_MEM_UC_OFFSET was defined as the offset
    within that region where it's found, but it's 0, and it's never
    actually used.  Just get rid of the definition, and move some of the
    description it had to be above the definition of the ipa_uc_mem_area
    structure.
    
    Signed-off-by: Alex Elder <elder@linaro.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 86e0da2bb8ed934d3dce5a337895f1118f59c087
Author: Paul E. McKenney <paulmck@kernel.org>
Date:   Tue May 26 11:40:52 2020 -0700

    refperf: More closely synchronize reader start times
    
    Currently, readers are awakened individually.  On most systems, this
    results in significant wakeup delay from one reader to the next, which
    can result in the first and last reader having sole access to the
    synchronization primitive in question.  If that synchronization primitive
    involves shared memory, those readers will rack up a huge number of
    operations in a very short time, causing large perturbations in the
    results.
    
    This commit therefore has the readers busy-wait after being awakened,
    and uses a new n_started variable to synchronize their start times.
    
    Cc: Joel Fernandes (Google) <joel@joelfernandes.org>
    Signed-off-by: Paul E. McKenney <paulmck@kernel.org>

commit fff4a87f4419c52120ad5375f3f4b80c44a28ca3
Merge: 8222d4c31576 10b200668133
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon May 25 16:51:11 2020 +0200

    Merge tag 'tegra-for-5.8-firmware-v2' of git://git.kernel.org/pub/scm/linux/kernel/git/tegra/linux into arm/drivers
    
    firmware: tegra: Changes for v5.8-rc1
    
    This contains a change that makes the BPMP driver a regular driver,
    which fixes some weird suspend/resume ordering issues. Another fix is
    also included to implement another way of enabling the L2 cache after
    LP2 suspend.
    
    * tag 'tegra-for-5.8-firmware-v2' of git://git.kernel.org/pub/scm/linux/kernel/git/tegra/linux:
      firmware: tegra: Defer BPMP probe if shared memory not available
      firmware: tf: Different way of L2 cache enabling after LP2 suspend
      firmware: tegra: Make BPMP a regular driver
    
    Link: https://lore.kernel.org/r/20200515145311.1580134-6-thierry.reding@gmail.com
    Link: https://lore.kernel.org/r/20200522142846.2376224-1-thierry.reding@gmail.com
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 10b2006681333a14a907a06a0e213c568fa8e7f4
Author: Jon Hunter <jonathanh@nvidia.com>
Date:   Wed May 20 16:12:06 2020 +0100

    firmware: tegra: Defer BPMP probe if shared memory not available
    
    Since commit 93d2e4322aa7 ("of: platform: Batch fwnode parsing when
    adding all top level devices") was added, the probing of the Tegra
    SRAM device has occurred later in the boot sequence, after the BPMP
    has been probed. The BPMP uses sections of the SRAM for shared memory
    and if the BPMP is probed before the SRAM then it fails to probe and
    never tries again. This is causing a boot failure on Tegra186 and
    Tegra194. Fix this by allowing the probe of the BPMP to be deferred if
    the SRAM is not available yet.
    
    Signed-off-by: Jon Hunter <jonathanh@nvidia.com>
    Signed-off-by: Thierry Reding <treding@nvidia.com>

commit 1e83d5a1066800985e95737e7a8a19ea3270b558
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Wed May 13 09:42:29 2020 +0200

    s390/ism: fix error return code in ism_probe()
    
    [ Upstream commit 29b74cb75e3572d83708745e81e24d37837415f9 ]
    
    Fix to return negative error code -ENOMEM from the smcd_alloc_dev()
    error handling case instead of 0, as done elsewhere in this function.
    
    Fixes: 684b89bc39ce ("s390/ism: add device driver for internal shared memory")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Signed-off-by: Ursula Braun <ubraun@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 46a22f3ea146648288ee71fd42bcd2629405e9f4
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Wed May 13 09:42:29 2020 +0200

    s390/ism: fix error return code in ism_probe()
    
    [ Upstream commit 29b74cb75e3572d83708745e81e24d37837415f9 ]
    
    Fix to return negative error code -ENOMEM from the smcd_alloc_dev()
    error handling case instead of 0, as done elsewhere in this function.
    
    Fixes: 684b89bc39ce ("s390/ism: add device driver for internal shared memory")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Signed-off-by: Ursula Braun <ubraun@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 29b74cb75e3572d83708745e81e24d37837415f9
Author: Wei Yongjun <weiyongjun1@huawei.com>
Date:   Wed May 13 09:42:29 2020 +0200

    s390/ism: fix error return code in ism_probe()
    
    Fix to return negative error code -ENOMEM from the smcd_alloc_dev()
    error handling case instead of 0, as done elsewhere in this function.
    
    Fixes: 684b89bc39ce ("s390/ism: add device driver for internal shared memory")
    Reported-by: Hulk Robot <hulkci@huawei.com>
    Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
    Signed-off-by: Ursula Braun <ubraun@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 624e8c8703b5236e000f447d69d183f2c7c28355
Author: John Clements <john.clements@amd.com>
Date:   Thu May 7 18:25:13 2020 +0800

    drm/amdgpu: Fix bug in RAS invoke
    
    Invoke sequence should abort when ras interrupt is detected before reading TA host shared memory
    
    Reviewed-by: Hawking Zhang <Hawking.Zhang@amd.com>
    Signed-off-by: John Clements <john.clements@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 18988265b87615b93cd4cf15001c8c883236a137
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Fri Mar 27 16:36:51 2020 +0000

    firmware: arm_scmi: Make mutex channel specific
    
    In order to support multiple SMC/HVC transport channels with associated
    shared memory, it is better to maintain the mutex per channel instead of
    existing global one.
    
    Move the smc_mutex into the scmi_smc structure and also rename it to
    shmem_lock which is more appropriate for it's use.
    
    Link: https://lore.kernel.org/r/20200327163654.13389-2-sudeep.holla@arm.com
    Tested-by: Peng Fan <peng.fan@nxp.com>
    Reviewed-by: Peng Fan <peng.fan@nxp.com>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>

commit 21b704d78352c289d31697824ceea7ad0ff4ce59
Author: James Zhu <James.Zhu@amd.com>
Date:   Thu Apr 2 23:25:45 2020 -0400

    drm/amdgpu/vcn: add shared memory restore after wake up from sleep.
    
    VCN shared memory needs restore after wake up during S3 test.
    
    v2: Allocate shared memory saved_bo at sw_init and free it in sw_fini.
    
    Signed-off-by: James Zhu <James.Zhu@amd.com>
    Reviewed-by: Feifei Xu <Feifei.Xu@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit c97e3076eb7ace8adc51ed9fe646c2e7cd0941ca
Author: James Zhu <James.Zhu@amd.com>
Date:   Sun Mar 29 20:15:44 2020 -0400

    drm/amdgpu/vcn2.5: Add firmware w/r ptr reset sync
    
    Add firmware write/read point reset sync through shared memory
    
    Signed-off-by: James Zhu <James.Zhu@amd.com>
    Reviewed-by: Leo Liu <leo.liu@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 9352141027afd8230846c1ca3a0b91ce8855677c
Author: James Zhu <James.Zhu@amd.com>
Date:   Sun Mar 29 20:11:34 2020 -0400

    drm/amdgpu/vcn2.0: Add firmware w/r ptr reset sync
    
    Add firmware write/read point reset sync through shared memory
    
    Signed-off-by: James Zhu <James.Zhu@amd.com>
    Reviewed-by: Leo Liu <leo.liu@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 021249ec6f9623dc79e3874f6a68eba7fe91a3d3
Merge: 3a3052f1fcd0 758ecf13a41a
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu Mar 26 14:30:44 2020 +0100

    Merge tag 'tee-cleanup-for-5.7' of https://git.linaro.org/people/jens.wiklander/linux-tee into arm/drivers
    
    Cleanup shared memory handing in TEE subsystem
    The highlights are:
    - Removing redundant or unused fields in struct tee_shm
    - Only assign userspace shm IDs for shared memory objects originating from
      user space
    
    * tag 'tee-cleanup-for-5.7' of https://git.linaro.org/people/jens.wiklander/linux-tee:
      tee: tee_shm_op_mmap(): use TEE_SHM_USER_MAPPED
      tee: remove redundant teedev in struct tee_shm
      tee: don't assign shm id for private shms
      tee: remove unused tee_shm_priv_alloc()
      tee: remove linked list of struct tee_shm
    
    Link: https://lore.kernel.org/r/20200228140925.GA12393@jade
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>

commit 9435dc3b5e62557eea57cea922020ab3a41aaf7b
Author: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
Date:   Thu Feb 20 15:28:39 2020 +0530

    docs: Add documentation for MHI bus
    
    MHI (Modem Host Interface) is a communication protocol used by the
    host processors to control and communicate with modems over a high
    speed peripheral bus or shared memory. The MHI protocol has been
    designed and developed by Qualcomm Innovation Center, Inc., for use
    in their modems. This commit adds the documentation for the bus and
    the implementation in Linux kernel.
    
    This is based on the patch submitted by Sujeev Dias:
    https://lkml.org/lkml/2018/7/9/987
    
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: linux-doc@vger.kernel.org
    Signed-off-by: Sujeev Dias <sdias@codeaurora.org>
    Signed-off-by: Siddartha Mohanadoss <smohanad@codeaurora.org>
    [mani: converted to .rst and splitted the patch]
    Signed-off-by: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
    Reviewed-by: Jeffrey Hugo <jhugo@codeaurora.org>
    Link: https://lore.kernel.org/r/20200220095854.4804-2-manivannan.sadhasivam@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 758ecf13a41a9dc4f019c1381566132ef46c08ee
Author: Jens Wiklander <jens.wiklander@linaro.org>
Date:   Thu Nov 7 11:43:02 2019 +0100

    tee: tee_shm_op_mmap(): use TEE_SHM_USER_MAPPED
    
    tee_shm_op_mmap() uses the TEE_SHM_USER_MAPPED flag instead of the
    TEE_SHM_REGISTER flag to tell if a shared memory object is originating
    from registered user space memory.
    
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

commit f1bbacedb0af640a93e47799203e556be2825da3
Author: Jens Wiklander <jens.wiklander@linaro.org>
Date:   Thu Nov 7 11:42:56 2019 +0100

    tee: don't assign shm id for private shms
    
    Private shared memory object must not be referenced from user space. To
    guarantee that, don't assign an id to shared memory objects which are
    driver private.
    
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

commit 95c892061e903e612a2e2fe3ba29c3d0ad273df5
Author: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date:   Wed Dec 11 11:17:12 2019 -0500

    rseq: Unregister rseq for clone CLONE_VM
    
    [ Upstream commit 463f550fb47bede3a5d7d5177f363a6c3b45d50b ]
    
    It has been reported by Google that rseq is not behaving properly
    with respect to clone when CLONE_VM is used without CLONE_THREAD.
    
    It keeps the prior thread's rseq TLS registered when the TLS of the
    thread has moved, so the kernel can corrupt the TLS of the parent.
    
    The approach of clearing the per task-struct rseq registration
    on clone with CLONE_THREAD flag is incomplete. It does not cover
    the use-case of clone with CLONE_VM set, but without CLONE_THREAD.
    
    Here is the rationale for unregistering rseq on clone with CLONE_VM
    flag set:
    
    1) CLONE_THREAD requires CLONE_SIGHAND, which requires CLONE_VM to be
       set. Therefore, just checking for CLONE_VM covers all CLONE_THREAD
       uses. There is no point in checking for both CLONE_THREAD and
       CLONE_VM,
    
    2) There is the possibility of an unlikely scenario where CLONE_SETTLS
       is used without CLONE_VM. In order to be an issue, it would require
       that the rseq TLS is in a shared memory area.
    
       I do not plan on adding CLONE_SETTLS to the set of clone flags which
       unregister RSEQ, because it would require that we also unregister RSEQ
       on set_thread_area(2) and arch_prctl(2) ARCH_SET_FS for completeness.
       So rather than doing a partial solution, it appears better to let
       user-space explicitly perform rseq unregistration across clone if
       needed in scenarios where CLONE_VM is not set.
    
    Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/20191211161713.4490-3-mathieu.desnoyers@efficios.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6fb761dbbabc62c28e10910523eae7810b390f68
Author: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date:   Wed Dec 11 11:17:12 2019 -0500

    rseq: Unregister rseq for clone CLONE_VM
    
    [ Upstream commit 463f550fb47bede3a5d7d5177f363a6c3b45d50b ]
    
    It has been reported by Google that rseq is not behaving properly
    with respect to clone when CLONE_VM is used without CLONE_THREAD.
    
    It keeps the prior thread's rseq TLS registered when the TLS of the
    thread has moved, so the kernel can corrupt the TLS of the parent.
    
    The approach of clearing the per task-struct rseq registration
    on clone with CLONE_THREAD flag is incomplete. It does not cover
    the use-case of clone with CLONE_VM set, but without CLONE_THREAD.
    
    Here is the rationale for unregistering rseq on clone with CLONE_VM
    flag set:
    
    1) CLONE_THREAD requires CLONE_SIGHAND, which requires CLONE_VM to be
       set. Therefore, just checking for CLONE_VM covers all CLONE_THREAD
       uses. There is no point in checking for both CLONE_THREAD and
       CLONE_VM,
    
    2) There is the possibility of an unlikely scenario where CLONE_SETTLS
       is used without CLONE_VM. In order to be an issue, it would require
       that the rseq TLS is in a shared memory area.
    
       I do not plan on adding CLONE_SETTLS to the set of clone flags which
       unregister RSEQ, because it would require that we also unregister RSEQ
       on set_thread_area(2) and arch_prctl(2) ARCH_SET_FS for completeness.
       So rather than doing a partial solution, it appears better to let
       user-space explicitly perform rseq unregistration across clone if
       needed in scenarios where CLONE_VM is not set.
    
    Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/20191211161713.4490-3-mathieu.desnoyers@efficios.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 5c179c003b45909df8bf55c072df897bcb2ef0e0
Author: Sumit Garg <sumit.garg@linaro.org>
Date:   Fri Nov 8 16:57:14 2019 +0530

    tee: optee: Fix dynamic shm pool allocations
    
    [ Upstream commit a249dd200d03791cab23e47571f3e13d9c72af6c ]
    
    In case of dynamic shared memory pool, kernel memory allocated using
    dmabuf_mgr pool needs to be registered with OP-TEE prior to its usage
    during optee_open_session() or optee_invoke_func().
    
    So fix dmabuf_mgr pool allocations via an additional call to
    optee_shm_register().
    
    Also, allow kernel pages to be registered as shared memory with OP-TEE.
    
    Fixes: 9733b072a12a ("optee: allow to work without static shared memory")
    Signed-off-by: Sumit Garg <sumit.garg@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 40ce9798794f972961b5a1c54773ae3daf42cf29
Author: Anirudh Ghayal <aghayal@codeaurora.org>
Date:   Thu Jan 16 16:11:00 2020 +0000

    nvmem: add QTI SDAM driver
    
    QTI SDAM driver allows PMIC peripherals to access the shared memory
    that is available on QTI PMICs.
    
    Use subsys_initcall as PMIC SDAM NV memory is accessed by multiple PMIC
    drivers (charger, fuel gauge) to store/restore data across reboots
    required during their initialization.
    
    Signed-off-by: Anirudh Ghayal <aghayal@codeaurora.org>
    Signed-off-by: Shyam Kumar Thella <sthella@codeaurora.org>
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Link: https://lore.kernel.org/r/20200116161100.30637-4-srinivas.kandagatla@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9664a6b54c57c920e345a621f42d1eb006a7fb73
Author: Shyam Kumar Thella <sthella@codeaurora.org>
Date:   Thu Jan 16 16:10:59 2020 +0000

    dt-bindings: nvmem: add binding for QTI SPMI SDAM
    
    QTI SDAM allows PMIC peripherals to access the shared memory that is
    available on QTI PMICs. Add documentation for it.
    
    Signed-off-by: Shyam Kumar Thella <sthella@codeaurora.org>
    Reviewed-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Srinivas Kandagatla <srinivas.kandagatla@linaro.org>
    Link: https://lore.kernel.org/r/20200116161100.30637-3-srinivas.kandagatla@linaro.org
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 757cc3e9ff1d72d014096399d6e2bf03974d9da1
Author: Rijo Thomas <Rijo-john.Thomas@amd.com>
Date:   Fri Dec 27 10:54:01 2019 +0530

    tee: add AMD-TEE driver
    
    Adds AMD-TEE driver.
    * targets AMD APUs which has AMD Secure Processor with software-based
      Trusted Execution Environment (TEE) support
    * registers with TEE subsystem
    * defines tee_driver_ops function callbacks
    * kernel allocated memory is used as shared memory between normal
      world and secure world.
    * acts as REE (Rich Execution Environment) communication agent, which
      uses the services of AMD Secure Processor driver to submit commands
      for processing in TEE environment
    
    Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Cc: Tom Lendacky <thomas.lendacky@amd.com>
    Acked-by: Jens Wiklander <jens.wiklander@linaro.org>
    Co-developed-by: Devaraj Rangasamy <Devaraj.Rangasamy@amd.com>
    Signed-off-by: Devaraj Rangasamy <Devaraj.Rangasamy@amd.com>
    Signed-off-by: Rijo Thomas <Rijo-john.Thomas@amd.com>
    Reviewed-by: Gary R Hook <gary.hook@amd.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit 729d3530a50417a88f3f485ba2dc88ff8adfeacb
Author: Lukasz Luba <lukasz.luba@arm.com>
Date:   Tue Dec 17 13:43:45 2019 +0000

    drivers: firmware: scmi: Extend SCMI transport layer by trace events
    
    The SCMI transport layer communicates via mailboxes and shared memory with
    firmware running on a microcontroller. It is platform specific how long it
    takes to pass a SCMI message. The most sensitive requests are coming from
    CPUFreq subsystem, which might be used by the scheduler.
    Thus, there is a need to measure these delays and capture anomalies.
    This change introduces trace events wrapped around transfer code.
    
    According to Jim's suggestion a unique transfer_id is to distinguish
    similar entries which might have the same message id, protocol id and
    sequence. This is a case then there are some timeouts in transfers.
    
    Suggested-by: Jim Quinlan <james.quinlan@broadcom.com>
    Signed-off-by: Lukasz Luba <lukasz.luba@arm.com>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>

commit 463f550fb47bede3a5d7d5177f363a6c3b45d50b
Author: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date:   Wed Dec 11 11:17:12 2019 -0500

    rseq: Unregister rseq for clone CLONE_VM
    
    It has been reported by Google that rseq is not behaving properly
    with respect to clone when CLONE_VM is used without CLONE_THREAD.
    
    It keeps the prior thread's rseq TLS registered when the TLS of the
    thread has moved, so the kernel can corrupt the TLS of the parent.
    
    The approach of clearing the per task-struct rseq registration
    on clone with CLONE_THREAD flag is incomplete. It does not cover
    the use-case of clone with CLONE_VM set, but without CLONE_THREAD.
    
    Here is the rationale for unregistering rseq on clone with CLONE_VM
    flag set:
    
    1) CLONE_THREAD requires CLONE_SIGHAND, which requires CLONE_VM to be
       set. Therefore, just checking for CLONE_VM covers all CLONE_THREAD
       uses. There is no point in checking for both CLONE_THREAD and
       CLONE_VM,
    
    2) There is the possibility of an unlikely scenario where CLONE_SETTLS
       is used without CLONE_VM. In order to be an issue, it would require
       that the rseq TLS is in a shared memory area.
    
       I do not plan on adding CLONE_SETTLS to the set of clone flags which
       unregister RSEQ, because it would require that we also unregister RSEQ
       on set_thread_area(2) and arch_prctl(2) ARCH_SET_FS for completeness.
       So rather than doing a partial solution, it appears better to let
       user-space explicitly perform rseq unregistration across clone if
       needed in scenarios where CLONE_VM is not set.
    
    Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: https://lkml.kernel.org/r/20191211161713.4490-3-mathieu.desnoyers@efficios.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 632b0b5301f67ce54b840d55950707003a489151
Author: Rijo Thomas <Rijo-john.Thomas@amd.com>
Date:   Wed Dec 4 11:49:03 2019 +0530

    crypto: ccp - provide in-kernel API to submit TEE commands
    
    Extend the functionality of AMD Secure Processor (SP) driver by
    providing an in-kernel API to submit commands to TEE ring buffer for
    processing by Trusted OS running on AMD Secure Processor.
    
    Following TEE commands are supported by Trusted OS:
    
    * TEE_CMD_ID_LOAD_TA : Load Trusted Application (TA) binary into
      TEE environment
    * TEE_CMD_ID_UNLOAD_TA : Unload TA binary from TEE environment
    * TEE_CMD_ID_OPEN_SESSION : Open session with loaded TA
    * TEE_CMD_ID_CLOSE_SESSION : Close session with loaded TA
    * TEE_CMD_ID_INVOKE_CMD : Invoke a command with loaded TA
    * TEE_CMD_ID_MAP_SHARED_MEM : Map shared memory
    * TEE_CMD_ID_UNMAP_SHARED_MEM : Unmap shared memory
    
    Linux AMD-TEE driver will use this API to submit command buffers
    for processing in Trusted Execution Environment. The AMD-TEE driver
    shall be introduced in a separate patch.
    
    Cc: Jens Wiklander <jens.wiklander@linaro.org>
    Cc: Tom Lendacky <thomas.lendacky@amd.com>
    Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Co-developed-by: Devaraj Rangasamy <Devaraj.Rangasamy@amd.com>
    Signed-off-by: Devaraj Rangasamy <Devaraj.Rangasamy@amd.com>
    Signed-off-by: Rijo Thomas <Rijo-john.Thomas@amd.com>
    Acked-by: Gary R Hook <gary.hook@amd.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit 33960acccfbd7f24d443cb3d0312ac28abe62bae
Author: Rijo Thomas <Rijo-john.Thomas@amd.com>
Date:   Wed Dec 4 11:49:02 2019 +0530

    crypto: ccp - add TEE support for Raven Ridge
    
    Adds a PCI device entry for Raven Ridge. Raven Ridge is an APU with a
    dedicated AMD Secure Processor having Trusted Execution Environment (TEE)
    support. The TEE provides a secure environment for running Trusted
    Applications (TAs) which implement security-sensitive parts of a feature.
    
    This patch configures AMD Secure Processor's TEE interface by initializing
    a ring buffer (shared memory between Rich OS and Trusted OS) which can hold
    multiple command buffer entries. The TEE interface is facilitated by a set
    of CPU to PSP mailbox registers.
    
    The next patch will address how commands are submitted to the ring buffer.
    
    Cc: Jens Wiklander <jens.wiklander@linaro.org>
    Cc: Tom Lendacky <thomas.lendacky@amd.com>
    Cc: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Co-developed-by: Devaraj Rangasamy <Devaraj.Rangasamy@amd.com>
    Signed-off-by: Devaraj Rangasamy <Devaraj.Rangasamy@amd.com>
    Signed-off-by: Rijo Thomas <Rijo-john.Thomas@amd.com>
    Acked-by: Gary R Hook <gary.hook@amd.com>
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit c64ab8280e61fa55543de9dced87043814b44024
Author: Hawking Zhang <Hawking.Zhang@amd.com>
Date:   Mon Dec 2 13:16:09 2019 +0800

    drm/amdgpu: drop asd shared memory
    
    asd shared memory is not needed since drivers doesn't
    invoke any further cmd to asd directly after the asd
    loading. trust application is the one who needs
    to talk to asd after the initialization
    
    Signed-off-by: Hawking Zhang <Hawking.Zhang@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Acked-by: Evan Quan <evan.quan@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit d5c65159f2895379e11ca13f62feabe93278985d
Author: Kalle Valo <kvalo@codeaurora.org>
Date:   Sat Nov 23 09:58:40 2019 +0200

    ath11k: driver for Qualcomm IEEE 802.11ax devices
    
    ath11k is a new driver for Qualcomm IEEE 802.11ax devices, first
    supporting only IPQ8074 SoC using the shared memory AHB bus. ath11k
    uses mac80211 and supports AP, Station and Mesh modes.
    
    Even though ath11k has some similar code as with ath10k (especially
    the WMI layer) it was concluded to be simpler to have a "clean start"
    for ath11k code base and not try to share the code with ath10k. This
    makes maintenance easier and avoids major changes in ath10k, which
    would have significantly increased the risk of regressions in existing
    setups.
    
    Even though the driver is very similar with ath10k but there are major
    differences as well. The datapath is completely different. ath11k
    supports multiple MACs, called "soc" in the firmware interface. And
    there's only one WMI interface to support.
    
    Currently ath11k supports only IEEE 802.11ac mode, but patches for
    802.11ax are available and they will be submitted after ath11k is
    accepted to upstream.
    
    The firmware images are available from ath11k-firmware repository but
    they will be also submitted to linux-firmware:
    
    https://github.com/kvalo/ath11k-firmware
    
    This was tested with firmware version WLAN.HK.2.1.0.1-00629-QCAHKSWPL_SILICONZ-1.
    
    The driver has had multiple authors who are listed in alphabetical
    order below.
    
    Signed-off-by: Anilkumar Kolli <akolli@codeaurora.org>
    Signed-off-by: Bhagavathi Perumal S <bperumal@codeaurora.org>
    Signed-off-by: Ganesh Sesetti <gseset@codeaurora.org>
    Signed-off-by: Govindaraj Saminathan <gsamin@codeaurora.org>
    Signed-off-by: John Crispin <john@phrozen.org>
    Signed-off-by: Julia Lawall <julia.lawall@lip6.fr>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>
    Signed-off-by: Karthikeyan Periyasamy <periyasa@codeaurora.org>
    Signed-off-by: kbuild test robot <lkp@intel.com>
    Signed-off-by: Maharaja Kennadyrajan <mkenna@codeaurora.org>
    Signed-off-by: Manikanta Pubbisetty <mpubbise@codeaurora.org>
    Signed-off-by: Miles Hu <milehu@codeaurora.org>
    Signed-off-by: Muna Sinada <msinada@codeaurora.org>
    Signed-off-by: Pradeep Kumar Chitrapu <pradeepc@codeaurora.org>
    Signed-off-by: Rajkumar Manoharan <rmanohar@codeaurora.org>
    Signed-off-by: Sathishkumar Muruganandam <murugana@codeaurora.org>
    Signed-off-by: Shashidhar Lakkavalli <slakkavalli@datto.com>
    Signed-off-by: Sriram R <srirrama@codeaurora.org>
    Signed-off-by: Sven Eckelmann <seckelmann@datto.com>
    Signed-off-by: Vasanthakumar Thiagarajan <vthiagar@codeaurora.org>
    Signed-off-by: Venkateswara Naralasetty <vnaralas@codeaurora.org>

commit 91a43fa61f102e045d9bac07a4b7739a4bbe623a
Author: peter chang <dpf@google.com>
Date:   Thu Nov 14 15:39:05 2019 +0530

    scsi: pm80xx: Fix command issue sizing
    
    The commands to the controller are sent in fixed sized chunks which are set
    per-chip-generation and stashed in iomb_size. The driver fills in structs
    matching the register layout and memcpy this to memory shared with the
    controller. However, there are two problem cases:
    
            1) Things like phy_start_req are too large because they share the
            sas_identify_frame definition with libsas, and it includes the crc
            word. This means that it's overwriting the start of the next
            command block, that's ok except if it happens at the end of the
            shared memory area.
    
            2) Things like set_nvm_data_req which are shared between the HAL
            layers. This means that it's sending 'random' data for things that
            are in the reserved area. So far we haven't found a case where the
            controller FW cares, but sending possible gibberish (for most of
            the structures this is in the reserved area so previously zeroed)
            is not recommended.
    
    Link: https://lore.kernel.org/r/20191114100910.6153-9-deepak.ukey@microchip.com
    Acked-by: Jack Wang <jinpu.wang@cloud.ionos.com>
    Signed-off-by: peter chang <dpf@google.com>
    Signed-off-by: Deepak Ukey <deepak.ukey@microchip.com>
    Signed-off-by: Viswas G <Viswas.G@microchip.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>

commit db6efda85437d783dd921da5d67ec818826adb12
Merge: 002d3c65ee81 03212e347f94
Author: Olof Johansson <olof@lixom.net>
Date:   Sat Nov 16 15:38:57 2019 -0800

    Merge tag 'tee-fixes-for-v5.4' of git://git.linaro.org/people/jens.wiklander/linux-tee into arm/fixes
    
    Two OP-TE driver fixes:
    - Add proper cleanup on optee_enumerate_devices() failure
    - Make sure to register kernel allocations of dynamic shared memory
    
    * tag 'tee-fixes-for-v5.4' of git://git.linaro.org/people/jens.wiklander/linux-tee: (591 commits)
      tee: optee: fix device enumeration error handling
      tee: optee: Fix dynamic shm pool allocations
      Linux 5.4-rc3
      tracing: Initialize iter->seq after zeroing in tracing_read_pipe()
      tracing/hwlat: Don't ignore outer-loop duration when calculating max_latency
      tracing/hwlat: Report total time spent in all NMIs during the sample
      recordmcount: Fix nop_mcount() function
      tracing: Do not create tracefs files if tracefs lockdown is in effect
      tracing: Add locked_down checks to the open calls of files created for tracefs
      tracing: Add tracing_check_open_get_tr()
      tracing: Have trace events system open call tracing_open_generic_tr()
      tracing: Get trace_array reference for available_tracers files
      ftrace: Get a reference counter for the trace_array on filter files
      tracefs: Revert ccbd54ff54e8 ("tracefs: Restrict tracefs when the kernel is locked down")
      perf/x86/cstate: Add Tiger Lake CPU support
      perf/x86/msr: Add Tiger Lake CPU support
      perf/x86/intel: Add Tiger Lake CPU support
      perf/x86/cstate: Update C-state counters for Ice Lake
      perf/x86/msr: Add new CPU model numbers for Ice Lake
      perf/x86/cstate: Add Comet Lake CPU support
      ...
    
    Link: https://lore.kernel.org/r/20191115105353.GA26176@jax
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit a249dd200d03791cab23e47571f3e13d9c72af6c
Author: Sumit Garg <sumit.garg@linaro.org>
Date:   Fri Nov 8 16:57:14 2019 +0530

    tee: optee: Fix dynamic shm pool allocations
    
    In case of dynamic shared memory pool, kernel memory allocated using
    dmabuf_mgr pool needs to be registered with OP-TEE prior to its usage
    during optee_open_session() or optee_invoke_func().
    
    So fix dmabuf_mgr pool allocations via an additional call to
    optee_shm_register().
    
    Also, allow kernel pages to be registered as shared memory with OP-TEE.
    
    Fixes: 9733b072a12a ("optee: allow to work without static shared memory")
    Signed-off-by: Sumit Garg <sumit.garg@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

commit 3fe5a963c63119f2d762327fba8e8b3fdd731fb4
Author: Tzung-Bi Shih <tzungbi@google.com>
Date:   Thu Oct 17 22:00:11 2019 +0800

    ASoC: dt-bindings: cros_ec_codec: add SHM bindings
    
    - Add "reg" for binding to shared memory exposed by EC.
    - Add "memory-region" for binding to memory region shared by AP.
    
    Acked-by: Rob Herring <robh@kernel.org>
    Acked-by: Benson Leung <bleung@chromium.org>
    Signed-off-by: Tzung-Bi Shih <tzungbi@google.com>
    Link: https://lore.kernel.org/r/20191017213539.06.I0df85fe54162426e31f60a589d9b461c65df2faa@changeid
    Signed-off-by: Mark Brown <broonie@kernel.org>

commit 5de4deebd5490b25a1f0ddfbf43f144204264233
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Mon Jul 8 15:48:36 2019 +0100

    firmware: arm_scmi: Check if platform has released shmem before using
    
    [ Upstream commit 9dc34d635c67e57051853855c43249408641a5ab ]
    
    Sometimes platfom may take too long to respond to the command and OS
    might timeout before platform transfer the ownership of the shared
    memory region to the OS with the response.
    
    Since the mailbox channel associated with the channel is freed and new
    commands are dispatch on the same channel, OS needs to wait until it
    gets back the ownership. If not, either OS may end up overwriting the
    platform response for the last command(which is fine as OS timed out
    that command) or platform might overwrite the payload for the next
    command with the response for the old.
    
    The latter is problematic as platform may end up interpretting the
    response as the payload. In order to avoid such race, let's wait until
    the OS gets back the ownership before we prepare the shared memory with
    the payload for the next command.
    
    Reported-by: Jim Quinlan <james.quinlan@broadcom.com>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit fc31f1c241b0e8fad6df8417b4d3c94c6b3651f2
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Mon Jul 8 15:48:36 2019 +0100

    firmware: arm_scmi: Check if platform has released shmem before using
    
    [ Upstream commit 9dc34d635c67e57051853855c43249408641a5ab ]
    
    Sometimes platfom may take too long to respond to the command and OS
    might timeout before platform transfer the ownership of the shared
    memory region to the OS with the response.
    
    Since the mailbox channel associated with the channel is freed and new
    commands are dispatch on the same channel, OS needs to wait until it
    gets back the ownership. If not, either OS may end up overwriting the
    platform response for the last command(which is fine as OS timed out
    that command) or platform might overwrite the payload for the next
    command with the response for the old.
    
    The latter is problematic as platform may end up interpretting the
    response as the payload. In order to avoid such race, let's wait until
    the OS gets back the ownership before we prepare the shared memory with
    the payload for the next command.
    
    Reported-by: Jim Quinlan <james.quinlan@broadcom.com>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 6e9d45022d2607d37b645505416a3c926cf69ad3
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Mon Jul 8 15:48:36 2019 +0100

    firmware: arm_scmi: Check if platform has released shmem before using
    
    [ Upstream commit 9dc34d635c67e57051853855c43249408641a5ab ]
    
    Sometimes platfom may take too long to respond to the command and OS
    might timeout before platform transfer the ownership of the shared
    memory region to the OS with the response.
    
    Since the mailbox channel associated with the channel is freed and new
    commands are dispatch on the same channel, OS needs to wait until it
    gets back the ownership. If not, either OS may end up overwriting the
    platform response for the last command(which is fine as OS timed out
    that command) or platform might overwrite the payload for the next
    command with the response for the old.
    
    The latter is problematic as platform may end up interpretting the
    response as the payload. In order to avoid such race, let's wait until
    the OS gets back the ownership before we prepare the shared memory with
    the payload for the next command.
    
    Reported-by: Jim Quinlan <james.quinlan@broadcom.com>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 8495f7e6732ed248b648d36439795b42ec650b9e
Author: Sai Praneeth Prakhya <sai.praneeth.prakhya@intel.com>
Date:   Wed Sep 25 16:47:27 2019 -0700

    fork: improve error message for corrupted page tables
    
    When a user process exits, the kernel cleans up the mm_struct of the user
    process and during cleanup, check_mm() checks the page tables of the user
    process for corruption (E.g: unexpected page flags set/cleared).  For
    corrupted page tables, the error message printed by check_mm() isn't very
    clear as it prints the loop index instead of page table type (E.g:
    Resident file mapping pages vs Resident shared memory pages).  The loop
    index in check_mm() is used to index rss_stat[] which represents
    individual memory type stats.  Hence, instead of printing index, print
    memory type, thereby improving error message.
    
    Without patch:
    --------------
    [  204.836425] mm/pgtable-generic.c:29: bad p4d 0000000089eb4e92(800000025f941467)
    [  204.836544] BUG: Bad rss-counter state mm:00000000f75895ea idx:0 val:2
    [  204.836615] BUG: Bad rss-counter state mm:00000000f75895ea idx:1 val:5
    [  204.836685] BUG: non-zero pgtables_bytes on freeing mm: 20480
    
    With patch:
    -----------
    [   69.815453] mm/pgtable-generic.c:29: bad p4d 0000000084653642(800000025ca37467)
    [   69.815872] BUG: Bad rss-counter state mm:00000000014a6c03 type:MM_FILEPAGES val:2
    [   69.815962] BUG: Bad rss-counter state mm:00000000014a6c03 type:MM_ANONPAGES val:5
    [   69.816050] BUG: non-zero pgtables_bytes on freeing mm: 20480
    
    Also, change print function (from printk(KERN_ALERT, ..) to pr_alert()) so
    that it matches the other print statement.
    
    Link: http://lkml.kernel.org/r/da75b5153f617f4c5739c08ee6ebeb3d19db0fbc.1565123758.git.sai.praneeth.prakhya@intel.com
    Signed-off-by: Sai Praneeth Prakhya <sai.praneeth.prakhya@intel.com>
    Reviewed-by: Anshuman Khandual <anshuman.khandual@arm.com>
    Suggested-by: Dave Hansen <dave.hansen@intel.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Acked-by: Vlastimil Babka <vbabka@suse.cz>
    Acked-by: Dave Hansen <dave.hansen@intel.com>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 28eb3c80871951cae59b9c1b7385262e5d045ac3
Author: Miles Chen <miles.chen@mediatek.com>
Date:   Mon Sep 23 15:39:34 2019 -0700

    shmem: fix obsolete comment in shmem_getpage_gfp()
    
    Replace "fault_mm" with "vmf" in code comment because commit cfda05267f7b
    ("userfaultfd: shmem: add userfaultfd hook for shared memory faults") has
    changed the prototpye of shmem_getpage_gfp() - pass vmf instead of
    fault_mm to the function.
    
    Before:
    static int shmem_getpage_gfp(struct inode *inode, pgoff_t index,
                    struct page **pagep, enum sgp_type sgp,
                    gfp_t gfp, struct mm_struct *fault_mm, int *fault_type);
    After:
    static int shmem_getpage_gfp(struct inode *inode, pgoff_t index,
                    struct page **pagep, enum sgp_type sgp,
                    gfp_t gfp, struct vm_area_struct *vma,
                    struct vm_fault *vmf, vm_fault_t *fault_type);
    
    Link: http://lkml.kernel.org/r/20190816100204.9781-1-miles.chen@mediatek.com
    Signed-off-by: Miles Chen <miles.chen@mediatek.com>
    Cc: Hugh Dickins <hughd@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit a62a8ef9d97da23762a588592c8b8eb50a8deb6a
Author: Stefan Hajnoczi <stefanha@redhat.com>
Date:   Tue Jun 12 09:41:17 2018 +0100

    virtio-fs: add virtiofs filesystem
    
    Add a basic file system module for virtio-fs.  This does not yet contain
    shared data support between host and guest or metadata coherency speedups.
    However it is already significantly faster than virtio-9p.
    
    Design Overview
    ===============
    
    With the goal of designing something with better performance and local file
    system semantics, a bunch of ideas were proposed.
    
     - Use fuse protocol (instead of 9p) for communication between guest and
       host.  Guest kernel will be fuse client and a fuse server will run on
       host to serve the requests.
    
     - For data access inside guest, mmap portion of file in QEMU address space
       and guest accesses this memory using dax.  That way guest page cache is
       bypassed and there is only one copy of data (on host).  This will also
       enable mmap(MAP_SHARED) between guests.
    
     - For metadata coherency, there is a shared memory region which contains
       version number associated with metadata and any guest changing metadata
       updates version number and other guests refresh metadata on next access.
       This is yet to be implemented.
    
    How virtio-fs differs from existing approaches
    ==============================================
    
    The unique idea behind virtio-fs is to take advantage of the co-location of
    the virtual machine and hypervisor to avoid communication (vmexits).
    
    DAX allows file contents to be accessed without communication with the
    hypervisor.  The shared memory region for metadata avoids communication in
    the common case where metadata is unchanged.
    
    By replacing expensive communication with cheaper shared memory accesses,
    we expect to achieve better performance than approaches based on network
    file system protocols.  In addition, this also makes it easier to achieve
    local file system semantics (coherency).
    
    These techniques are not applicable to network file system protocols since
    the communications channel is bypassed by taking advantage of shared memory
    on a local machine.  This is why we decided to build virtio-fs rather than
    focus on 9P or NFS.
    
    Caching Modes
    =============
    
    Like virtio-9p, different caching modes are supported which determine the
    coherency level as well.  The “cache=FOO” and “writeback” options control
    the level of coherence between the guest and host filesystems.
    
     - cache=none
       metadata, data and pathname lookup are not cached in guest.  They are
       always fetched from host and any changes are immediately pushed to host.
    
     - cache=always
       metadata, data and pathname lookup are cached in guest and never expire.
    
     - cache=auto
       metadata and pathname lookup cache expires after a configured amount of
       time (default is 1 second).  Data is cached while the file is open
       (close to open consistency).
    
     - writeback/no_writeback
       These options control the writeback strategy.  If writeback is disabled,
       then normal writes will immediately be synchronized with the host fs.
       If writeback is enabled, then writes may be cached in the guest until
       the file is closed or an fsync(2) performed.  This option has no effect
       on mmap-ed writes or writes going through the DAX mechanism.
    
    Signed-off-by: Stefan Hajnoczi <stefanha@redhat.com>
    Signed-off-by: Vivek Goyal <vgoyal@redhat.com>
    Acked-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>

commit 4a79ce748f318773464d786cf816dba759d22a49
Merge: 77fda29f9c48 6311b6521bcc
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Sep 3 21:47:37 2019 +0200

    Merge tag 'icc-5.4-rc1' of https://git.linaro.org/people/georgi.djakov/linux into char-misc-next
    
    Georgi writes:
    
    interconnect patches for 5.4
    
    Here are the interconnect driver updates for the 5.4-rc1 merge window.
    
    - New feature is the path tagging support that helps with grouping and
    aggregating the bandwidth requests into separate buckets based on a tag.
    - The first user of the path tagging is the Qualcomm sdm845 driver that
    now implements support for wake/sleep sets. This allows consumer drivers
    to express their bandwidth needs for the different CPU power states.
    - New interconnect driver for the qcs404 platforms and a driver that
    communicates bandwidth requests with remote processor over shared memory.
    - Cleanups and fixes.
    
    Signed-off-by: Georgi Djakov <georgi.djakov@linaro.org>
    
    * tag 'icc-5.4-rc1' of https://git.linaro.org/people/georgi.djakov/linux:
      drivers: qcom: Add BCM vote macro to header
      interconnect: qcom: remove COMPILE_TEST from CONFIG_INTERCONNECT_QCOM_QCS404
      interconnect: qcom: Add QCS404 interconnect provider driver
      interconnect: qcom: Add interconnect RPM over SMD driver
      dt-bindings: interconnect: Add Qualcomm QCS404 DT bindings
      interconnect: qcom: Add tagging and wake/sleep support for sdm845
      interconnect: Add pre_aggregate() callback
      interconnect: Add support for path tags

commit 2efbc58f157a39ad9e9199b92d9c47736023a2fe
Author: Anshuman Khandual <khandual@linux.vnet.ibm.com>
Date:   Mon Aug 19 23:13:24 2019 -0300

    powerpc/pseries/svm: Force SWIOTLB for secure guests
    
    SWIOTLB checks range of incoming CPU addresses to be bounced and sees if
    the device can access it through its DMA window without requiring bouncing.
    In such cases it just chooses to skip bouncing. But for cases like secure
    guests on powerpc platform all addresses need to be bounced into the shared
    pool of memory because the host cannot access it otherwise. Hence the need
    to do the bouncing is not related to device's DMA window and use of bounce
    buffers is forced by setting swiotlb_force.
    
    Also, connect the shared memory conversion functions into the
    ARCH_HAS_MEM_ENCRYPT hooks and call swiotlb_update_mem_attributes() to
    convert SWIOTLB's memory pool to shared memory.
    
    Signed-off-by: Anshuman Khandual <khandual@linux.vnet.ibm.com>
    [ bauerman: Use ARCH_HAS_MEM_ENCRYPT hooks to share swiotlb memory pool. ]
    Signed-off-by: Thiago Jung Bauermann <bauerman@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20190820021326.6884-15-bauerman@linux.ibm.com

commit d5394c059da9786043934bed474562cde124e7d3
Author: Anshuman Khandual <khandual@linux.vnet.ibm.com>
Date:   Mon Aug 19 23:13:19 2019 -0300

    powerpc/pseries/svm: Use shared memory for Debug Trace Log (DTL)
    
    Secure guests need to share the DTL buffers with the hypervisor. To that
    end, use a kmem_cache constructor which converts the underlying buddy
    allocated SLUB cache pages into shared memory.
    
    Signed-off-by: Anshuman Khandual <khandual@linux.vnet.ibm.com>
    Signed-off-by: Thiago Jung Bauermann <bauerman@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20190820021326.6884-10-bauerman@linux.ibm.com

commit bd104e6db6f0ad124e507a9ecf1a468efe5697db
Author: Anshuman Khandual <khandual@linux.vnet.ibm.com>
Date:   Mon Aug 19 23:13:18 2019 -0300

    powerpc/pseries/svm: Use shared memory for LPPACA structures
    
    LPPACA structures need to be shared with the host. Hence they need to be in
    shared memory. Instead of allocating individual chunks of memory for a
    given structure from memblock, a contiguous chunk of memory is allocated
    and then converted into shared memory. Subsequent allocation requests will
    come from the contiguous chunk which will be always shared memory for all
    structures.
    
    While we are able to use a kmem_cache constructor for the Debug Trace Log,
    LPPACAs are allocated very early in the boot process (before SLUB is
    available) so we need to use a simpler scheme here.
    
    Introduce helper is_svm_platform() which uses the S bit of the MSR to tell
    whether we're running as a secure guest.
    
    Signed-off-by: Anshuman Khandual <khandual@linux.vnet.ibm.com>
    Signed-off-by: Thiago Jung Bauermann <bauerman@linux.ibm.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>
    Link: https://lore.kernel.org/r/20190820021326.6884-9-bauerman@linux.ibm.com

commit 7e8343060fc2f97a50bd64dd373fbe27939ba5bb
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Sat Mar 16 14:21:19 2019 +1100

    mac8390: Fix mmio access size probe
    
    commit bb9e5c5bcd76f4474eac3baf643d7a39f7bac7bb upstream.
    
    The bug that Stan reported is as follows. After a restart, a 16-bit NIC
    may be incorrectly identified as a 32-bit NIC and stop working.
    
    mac8390 slot.E: Memory length resource not found, probing
    mac8390 slot.E: Farallon EtherMac II-C (type farallon)
    mac8390 slot.E: MAC 00:00:c5:30:c2:99, IRQ 61, 32 KB shared memory at 0xfeed0000, 32-bit access.
    
    The bug never arises after a cold start and only intermittently after a
    warm start. (I didn't investigate why the bug is intermittent.)
    
    It turns out that memcpy_toio() is deprecated and memcmp_withio() also
    has issues. Replacing these calls with mmio accessors fixes the problem.
    
    Reported-and-tested-by: Stan Johnson <userm57@yahoo.com>
    Fixes: 2964db0f5904 ("m68k: Mac DP8390 update")
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit ffbf23d50353915dc2622a3b7b4ddc678165f92d
Author: Daniel Baluta <daniel.baluta@nxp.com>
Date:   Thu Aug 1 12:56:36 2019 +0300

    firmware: imx: Add DSP IPC protocol interface
    
    Some of i.MX8 processors (e.g i.MX8QM, i.MX8QXP) contain
    the Tensilica HiFi4 DSP for advanced pre- and post-audio
    processing.
    
    The communication between Host CPU and DSP firmware is
    taking place using a shared memory area for message passing
    and a dedicated Messaging Unit for notifications.
    
    DSP IPC protocol offers a doorbell interface using
    imx-mailbox API.
    
    We use 4 MU channels (2 x TXDB, 2 x RXDB) to implement a
    request-reply protocol.
    
    Connection 0 (txdb0, rxdb0):
            - Host writes messasge to shared memory [SHMEM]
            - Host sends a request [MU]
            - DSP handles request [SHMEM]
            - DSP sends reply [MU]
    
    Connection 1 (txdb1, rxdb1):
            - DSP writes a message to shared memory [SHMEM]
            - DSP sends a request [MU]
            - Host handles request [SHMEM]
            - Host sends reply [MU]
    
    The protocol interface will be used by a Host client to
    communicate with the DSP. First client will be the i.MX8
    part from Sound Open Firmware infrastructure.
    
    The protocol offers the following interface:
    
    On Tx:
       - imx_dsp_ring_doorbell, will be called to notify the DSP
       that it needs to handle a request.
    
    On Rx:
       - clients need to provide two callbacks:
            .handle_reply
            .handle_request
      - the callbacks will be used by the protocol on
        notification arrival from DSP.
    
    Signed-off-by: Daniel Baluta <daniel.baluta@nxp.com>
    Reviewed-by: Oleksij Rempel <o.rempel@pengutronix.de>
    Signed-off-by: Shawn Guo <shawnguo@kernel.org>

commit 9dc34d635c67e57051853855c43249408641a5ab
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Mon Jul 8 15:48:36 2019 +0100

    firmware: arm_scmi: Check if platform has released shmem before using
    
    Sometimes platfom may take too long to respond to the command and OS
    might timeout before platform transfer the ownership of the shared
    memory region to the OS with the response.
    
    Since the mailbox channel associated with the channel is freed and new
    commands are dispatch on the same channel, OS needs to wait until it
    gets back the ownership. If not, either OS may end up overwriting the
    platform response for the last command(which is fine as OS timed out
    that command) or platform might overwrite the payload for the next
    command with the response for the old.
    
    The latter is problematic as platform may end up interpretting the
    response as the payload. In order to avoid such race, let's wait until
    the OS gets back the ownership before we prepare the shared memory with
    the payload for the next command.
    
    Reported-by: Jim Quinlan <james.quinlan@broadcom.com>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>

commit e83234d7ef237931148b4b17834dadf57eb46c12
Author: Radoslaw Burny <rburny@google.com>
Date:   Tue Jul 16 16:26:51 2019 -0700

    fs/proc/proc_sysctl.c: fix the default values of i_uid/i_gid on /proc/sys inodes.
    
    commit 5ec27ec735ba0477d48c80561cc5e856f0c5dfaf upstream.
    
    Normally, the inode's i_uid/i_gid are translated relative to s_user_ns,
    but this is not a correct behavior for proc.  Since sysctl permission
    check in test_perm is done against GLOBAL_ROOT_[UG]ID, it makes more
    sense to use these values in u_[ug]id of proc inodes.  In other words:
    although uid/gid in the inode is not read during test_perm, the inode
    logically belongs to the root of the namespace.  I have confirmed this
    with Eric Biederman at LPC and in this thread:
      https://lore.kernel.org/lkml/87k1kzjdff.fsf@xmission.com
    
    Consequences
    ============
    
    Since the i_[ug]id values of proc nodes are not used for permissions
    checks, this change usually makes no functional difference.  However, it
    causes an issue in a setup where:
    
     * a namespace container is created without root user in container -
       hence the i_[ug]id of proc nodes are set to INVALID_[UG]ID
    
     * container creator tries to configure it by writing /proc/sys files,
       e.g. writing /proc/sys/kernel/shmmax to configure shared memory limit
    
    Kernel does not allow to open an inode for writing if its i_[ug]id are
    invalid, making it impossible to write shmmax and thus - configure the
    container.
    
    Using a container with no root mapping is apparently rare, but we do use
    this configuration at Google.  Also, we use a generic tool to configure
    the container limits, and the inability to write any of them causes a
    failure.
    
    History
    =======
    
    The invalid uids/gids in inodes first appeared due to 81754357770e (fs:
    Update i_[ug]id_(read|write) to translate relative to s_user_ns).
    However, AFAIK, this did not immediately cause any issues.  The
    inability to write to these "invalid" inodes was only caused by a later
    commit 0bd23d09b874 (vfs: Don't modify inodes with a uid or gid unknown
    to the vfs).
    
    Tested: Used a repro program that creates a user namespace without any
    mapping and stat'ed /proc/$PID/root/proc/sys/kernel/shmmax from outside.
    Before the change, it shows the overflow uid, with the change it's 0.
    The overflow uid indicates that the uid in the inode is not correct and
    thus it is not possible to open the file for writing.
    
    Link: http://lkml.kernel.org/r/20190708115130.250149-1-rburny@google.com
    Fixes: 0bd23d09b874 ("vfs: Don't modify inodes with a uid or gid unknown to the vfs")
    Signed-off-by: Radoslaw Burny <rburny@google.com>
    Acked-by: Luis Chamberlain <mcgrof@kernel.org>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: "Eric W . Biederman" <ebiederm@xmission.com>
    Cc: Seth Forshee <seth.forshee@canonical.com>
    Cc: John Sperbeck <jsperbeck@google.com>
    Cc: Alexey Dobriyan <adobriyan@gmail.com>
    Cc: <stable@vger.kernel.org>    [4.8+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2cbf2af144f0cd08a3361c6299b2e6086b7d21d9
Author: Radoslaw Burny <rburny@google.com>
Date:   Tue Jul 16 16:26:51 2019 -0700

    fs/proc/proc_sysctl.c: fix the default values of i_uid/i_gid on /proc/sys inodes.
    
    commit 5ec27ec735ba0477d48c80561cc5e856f0c5dfaf upstream.
    
    Normally, the inode's i_uid/i_gid are translated relative to s_user_ns,
    but this is not a correct behavior for proc.  Since sysctl permission
    check in test_perm is done against GLOBAL_ROOT_[UG]ID, it makes more
    sense to use these values in u_[ug]id of proc inodes.  In other words:
    although uid/gid in the inode is not read during test_perm, the inode
    logically belongs to the root of the namespace.  I have confirmed this
    with Eric Biederman at LPC and in this thread:
      https://lore.kernel.org/lkml/87k1kzjdff.fsf@xmission.com
    
    Consequences
    ============
    
    Since the i_[ug]id values of proc nodes are not used for permissions
    checks, this change usually makes no functional difference.  However, it
    causes an issue in a setup where:
    
     * a namespace container is created without root user in container -
       hence the i_[ug]id of proc nodes are set to INVALID_[UG]ID
    
     * container creator tries to configure it by writing /proc/sys files,
       e.g. writing /proc/sys/kernel/shmmax to configure shared memory limit
    
    Kernel does not allow to open an inode for writing if its i_[ug]id are
    invalid, making it impossible to write shmmax and thus - configure the
    container.
    
    Using a container with no root mapping is apparently rare, but we do use
    this configuration at Google.  Also, we use a generic tool to configure
    the container limits, and the inability to write any of them causes a
    failure.
    
    History
    =======
    
    The invalid uids/gids in inodes first appeared due to 81754357770e (fs:
    Update i_[ug]id_(read|write) to translate relative to s_user_ns).
    However, AFAIK, this did not immediately cause any issues.  The
    inability to write to these "invalid" inodes was only caused by a later
    commit 0bd23d09b874 (vfs: Don't modify inodes with a uid or gid unknown
    to the vfs).
    
    Tested: Used a repro program that creates a user namespace without any
    mapping and stat'ed /proc/$PID/root/proc/sys/kernel/shmmax from outside.
    Before the change, it shows the overflow uid, with the change it's 0.
    The overflow uid indicates that the uid in the inode is not correct and
    thus it is not possible to open the file for writing.
    
    Link: http://lkml.kernel.org/r/20190708115130.250149-1-rburny@google.com
    Fixes: 0bd23d09b874 ("vfs: Don't modify inodes with a uid or gid unknown to the vfs")
    Signed-off-by: Radoslaw Burny <rburny@google.com>
    Acked-by: Luis Chamberlain <mcgrof@kernel.org>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: "Eric W . Biederman" <ebiederm@xmission.com>
    Cc: Seth Forshee <seth.forshee@canonical.com>
    Cc: John Sperbeck <jsperbeck@google.com>
    Cc: Alexey Dobriyan <adobriyan@gmail.com>
    Cc: <stable@vger.kernel.org>    [4.8+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 2c7b50c7b1d036f71acd9a917a8cb0f9b6e43dab
Author: Radoslaw Burny <rburny@google.com>
Date:   Tue Jul 16 16:26:51 2019 -0700

    fs/proc/proc_sysctl.c: fix the default values of i_uid/i_gid on /proc/sys inodes.
    
    commit 5ec27ec735ba0477d48c80561cc5e856f0c5dfaf upstream.
    
    Normally, the inode's i_uid/i_gid are translated relative to s_user_ns,
    but this is not a correct behavior for proc.  Since sysctl permission
    check in test_perm is done against GLOBAL_ROOT_[UG]ID, it makes more
    sense to use these values in u_[ug]id of proc inodes.  In other words:
    although uid/gid in the inode is not read during test_perm, the inode
    logically belongs to the root of the namespace.  I have confirmed this
    with Eric Biederman at LPC and in this thread:
      https://lore.kernel.org/lkml/87k1kzjdff.fsf@xmission.com
    
    Consequences
    ============
    
    Since the i_[ug]id values of proc nodes are not used for permissions
    checks, this change usually makes no functional difference.  However, it
    causes an issue in a setup where:
    
     * a namespace container is created without root user in container -
       hence the i_[ug]id of proc nodes are set to INVALID_[UG]ID
    
     * container creator tries to configure it by writing /proc/sys files,
       e.g. writing /proc/sys/kernel/shmmax to configure shared memory limit
    
    Kernel does not allow to open an inode for writing if its i_[ug]id are
    invalid, making it impossible to write shmmax and thus - configure the
    container.
    
    Using a container with no root mapping is apparently rare, but we do use
    this configuration at Google.  Also, we use a generic tool to configure
    the container limits, and the inability to write any of them causes a
    failure.
    
    History
    =======
    
    The invalid uids/gids in inodes first appeared due to 81754357770e (fs:
    Update i_[ug]id_(read|write) to translate relative to s_user_ns).
    However, AFAIK, this did not immediately cause any issues.  The
    inability to write to these "invalid" inodes was only caused by a later
    commit 0bd23d09b874 (vfs: Don't modify inodes with a uid or gid unknown
    to the vfs).
    
    Tested: Used a repro program that creates a user namespace without any
    mapping and stat'ed /proc/$PID/root/proc/sys/kernel/shmmax from outside.
    Before the change, it shows the overflow uid, with the change it's 0.
    The overflow uid indicates that the uid in the inode is not correct and
    thus it is not possible to open the file for writing.
    
    Link: http://lkml.kernel.org/r/20190708115130.250149-1-rburny@google.com
    Fixes: 0bd23d09b874 ("vfs: Don't modify inodes with a uid or gid unknown to the vfs")
    Signed-off-by: Radoslaw Burny <rburny@google.com>
    Acked-by: Luis Chamberlain <mcgrof@kernel.org>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: "Eric W . Biederman" <ebiederm@xmission.com>
    Cc: Seth Forshee <seth.forshee@canonical.com>
    Cc: John Sperbeck <jsperbeck@google.com>
    Cc: Alexey Dobriyan <adobriyan@gmail.com>
    Cc: <stable@vger.kernel.org>    [4.8+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 7eb45a94c279dd5af4cafaa738ae93737517eef4
Author: Radoslaw Burny <rburny@google.com>
Date:   Tue Jul 16 16:26:51 2019 -0700

    fs/proc/proc_sysctl.c: fix the default values of i_uid/i_gid on /proc/sys inodes.
    
    commit 5ec27ec735ba0477d48c80561cc5e856f0c5dfaf upstream.
    
    Normally, the inode's i_uid/i_gid are translated relative to s_user_ns,
    but this is not a correct behavior for proc.  Since sysctl permission
    check in test_perm is done against GLOBAL_ROOT_[UG]ID, it makes more
    sense to use these values in u_[ug]id of proc inodes.  In other words:
    although uid/gid in the inode is not read during test_perm, the inode
    logically belongs to the root of the namespace.  I have confirmed this
    with Eric Biederman at LPC and in this thread:
      https://lore.kernel.org/lkml/87k1kzjdff.fsf@xmission.com
    
    Consequences
    ============
    
    Since the i_[ug]id values of proc nodes are not used for permissions
    checks, this change usually makes no functional difference.  However, it
    causes an issue in a setup where:
    
     * a namespace container is created without root user in container -
       hence the i_[ug]id of proc nodes are set to INVALID_[UG]ID
    
     * container creator tries to configure it by writing /proc/sys files,
       e.g. writing /proc/sys/kernel/shmmax to configure shared memory limit
    
    Kernel does not allow to open an inode for writing if its i_[ug]id are
    invalid, making it impossible to write shmmax and thus - configure the
    container.
    
    Using a container with no root mapping is apparently rare, but we do use
    this configuration at Google.  Also, we use a generic tool to configure
    the container limits, and the inability to write any of them causes a
    failure.
    
    History
    =======
    
    The invalid uids/gids in inodes first appeared due to 81754357770e (fs:
    Update i_[ug]id_(read|write) to translate relative to s_user_ns).
    However, AFAIK, this did not immediately cause any issues.  The
    inability to write to these "invalid" inodes was only caused by a later
    commit 0bd23d09b874 (vfs: Don't modify inodes with a uid or gid unknown
    to the vfs).
    
    Tested: Used a repro program that creates a user namespace without any
    mapping and stat'ed /proc/$PID/root/proc/sys/kernel/shmmax from outside.
    Before the change, it shows the overflow uid, with the change it's 0.
    The overflow uid indicates that the uid in the inode is not correct and
    thus it is not possible to open the file for writing.
    
    Link: http://lkml.kernel.org/r/20190708115130.250149-1-rburny@google.com
    Fixes: 0bd23d09b874 ("vfs: Don't modify inodes with a uid or gid unknown to the vfs")
    Signed-off-by: Radoslaw Burny <rburny@google.com>
    Acked-by: Luis Chamberlain <mcgrof@kernel.org>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: "Eric W . Biederman" <ebiederm@xmission.com>
    Cc: Seth Forshee <seth.forshee@canonical.com>
    Cc: John Sperbeck <jsperbeck@google.com>
    Cc: Alexey Dobriyan <adobriyan@gmail.com>
    Cc: <stable@vger.kernel.org>    [4.8+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 14cc90952cef94bfa89a6b4a2f55fd9a70f50a16
Author: Radoslaw Burny <rburny@google.com>
Date:   Tue Jul 16 16:26:51 2019 -0700

    fs/proc/proc_sysctl.c: fix the default values of i_uid/i_gid on /proc/sys inodes.
    
    commit 5ec27ec735ba0477d48c80561cc5e856f0c5dfaf upstream.
    
    Normally, the inode's i_uid/i_gid are translated relative to s_user_ns,
    but this is not a correct behavior for proc.  Since sysctl permission
    check in test_perm is done against GLOBAL_ROOT_[UG]ID, it makes more
    sense to use these values in u_[ug]id of proc inodes.  In other words:
    although uid/gid in the inode is not read during test_perm, the inode
    logically belongs to the root of the namespace.  I have confirmed this
    with Eric Biederman at LPC and in this thread:
      https://lore.kernel.org/lkml/87k1kzjdff.fsf@xmission.com
    
    Consequences
    ============
    
    Since the i_[ug]id values of proc nodes are not used for permissions
    checks, this change usually makes no functional difference.  However, it
    causes an issue in a setup where:
    
     * a namespace container is created without root user in container -
       hence the i_[ug]id of proc nodes are set to INVALID_[UG]ID
    
     * container creator tries to configure it by writing /proc/sys files,
       e.g. writing /proc/sys/kernel/shmmax to configure shared memory limit
    
    Kernel does not allow to open an inode for writing if its i_[ug]id are
    invalid, making it impossible to write shmmax and thus - configure the
    container.
    
    Using a container with no root mapping is apparently rare, but we do use
    this configuration at Google.  Also, we use a generic tool to configure
    the container limits, and the inability to write any of them causes a
    failure.
    
    History
    =======
    
    The invalid uids/gids in inodes first appeared due to 81754357770e (fs:
    Update i_[ug]id_(read|write) to translate relative to s_user_ns).
    However, AFAIK, this did not immediately cause any issues.  The
    inability to write to these "invalid" inodes was only caused by a later
    commit 0bd23d09b874 (vfs: Don't modify inodes with a uid or gid unknown
    to the vfs).
    
    Tested: Used a repro program that creates a user namespace without any
    mapping and stat'ed /proc/$PID/root/proc/sys/kernel/shmmax from outside.
    Before the change, it shows the overflow uid, with the change it's 0.
    The overflow uid indicates that the uid in the inode is not correct and
    thus it is not possible to open the file for writing.
    
    Link: http://lkml.kernel.org/r/20190708115130.250149-1-rburny@google.com
    Fixes: 0bd23d09b874 ("vfs: Don't modify inodes with a uid or gid unknown to the vfs")
    Signed-off-by: Radoslaw Burny <rburny@google.com>
    Acked-by: Luis Chamberlain <mcgrof@kernel.org>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: "Eric W . Biederman" <ebiederm@xmission.com>
    Cc: Seth Forshee <seth.forshee@canonical.com>
    Cc: John Sperbeck <jsperbeck@google.com>
    Cc: Alexey Dobriyan <adobriyan@gmail.com>
    Cc: <stable@vger.kernel.org>    [4.8+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bec5545edef658f81cd9721dbe8fbebeb3c7534d
Merge: f1a3b43cc1f5 d9c53aa440b3
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Sun Jul 21 09:46:59 2019 -0700

    Merge tag 'ntb-5.3' of git://github.com/jonmason/ntb
    
    Pull NTB updates from Jon Mason:
     "New feature to add support for NTB virtual MSI interrupts, the ability
      to test and use this feature in the NTB transport layer.
    
      Also, bug fixes for the AMD and Switchtec drivers, as well as some
      general patches"
    
    * tag 'ntb-5.3' of git://github.com/jonmason/ntb: (22 commits)
      NTB: Describe the ntb_msi_test client in the documentation.
      NTB: Add MSI interrupt support to ntb_transport
      NTB: Add ntb_msi_test support to ntb_test
      NTB: Introduce NTB MSI Test Client
      NTB: Introduce MSI library
      NTB: Rename ntb.c to support multiple source files in the module
      NTB: Introduce functions to calculate multi-port resource index
      NTB: Introduce helper functions to calculate logical port number
      PCI/switchtec: Add module parameter to request more interrupts
      PCI/MSI: Support allocating virtual MSI interrupts
      ntb_hw_switchtec: Fix setup MW with failure bug
      ntb_hw_switchtec: Skip unnecessary re-setup of shared memory window for crosslink case
      ntb_hw_switchtec: Remove redundant steps of switchtec_ntb_reinit_peer() function
      NTB: correct ntb_dev_ops and ntb_dev comment typos
      NTB: amd: Silence shift wrapping warning in amd_ntb_db_vector_mask()
      ntb_hw_switchtec: potential shift wrapping bug in switchtec_ntb_init_sndev()
      NTB: ntb_transport: Ensure qp->tx_mw_dma_addr is initaliazed
      NTB: ntb_hw_amd: set peer limit register
      NTB: ntb_perf: Clear stale values in doorbell and command SPAD register
      NTB: ntb_perf: Disable NTB link after clearing peer XLAT registers
      ...

commit 5ec27ec735ba0477d48c80561cc5e856f0c5dfaf
Author: Radoslaw Burny <rburny@google.com>
Date:   Tue Jul 16 16:26:51 2019 -0700

    fs/proc/proc_sysctl.c: fix the default values of i_uid/i_gid on /proc/sys inodes.
    
    Normally, the inode's i_uid/i_gid are translated relative to s_user_ns,
    but this is not a correct behavior for proc.  Since sysctl permission
    check in test_perm is done against GLOBAL_ROOT_[UG]ID, it makes more
    sense to use these values in u_[ug]id of proc inodes.  In other words:
    although uid/gid in the inode is not read during test_perm, the inode
    logically belongs to the root of the namespace.  I have confirmed this
    with Eric Biederman at LPC and in this thread:
      https://lore.kernel.org/lkml/87k1kzjdff.fsf@xmission.com
    
    Consequences
    ============
    
    Since the i_[ug]id values of proc nodes are not used for permissions
    checks, this change usually makes no functional difference.  However, it
    causes an issue in a setup where:
    
     * a namespace container is created without root user in container -
       hence the i_[ug]id of proc nodes are set to INVALID_[UG]ID
    
     * container creator tries to configure it by writing /proc/sys files,
       e.g. writing /proc/sys/kernel/shmmax to configure shared memory limit
    
    Kernel does not allow to open an inode for writing if its i_[ug]id are
    invalid, making it impossible to write shmmax and thus - configure the
    container.
    
    Using a container with no root mapping is apparently rare, but we do use
    this configuration at Google.  Also, we use a generic tool to configure
    the container limits, and the inability to write any of them causes a
    failure.
    
    History
    =======
    
    The invalid uids/gids in inodes first appeared due to 81754357770e (fs:
    Update i_[ug]id_(read|write) to translate relative to s_user_ns).
    However, AFAIK, this did not immediately cause any issues.  The
    inability to write to these "invalid" inodes was only caused by a later
    commit 0bd23d09b874 (vfs: Don't modify inodes with a uid or gid unknown
    to the vfs).
    
    Tested: Used a repro program that creates a user namespace without any
    mapping and stat'ed /proc/$PID/root/proc/sys/kernel/shmmax from outside.
    Before the change, it shows the overflow uid, with the change it's 0.
    The overflow uid indicates that the uid in the inode is not correct and
    thus it is not possible to open the file for writing.
    
    Link: http://lkml.kernel.org/r/20190708115130.250149-1-rburny@google.com
    Fixes: 0bd23d09b874 ("vfs: Don't modify inodes with a uid or gid unknown to the vfs")
    Signed-off-by: Radoslaw Burny <rburny@google.com>
    Acked-by: Luis Chamberlain <mcgrof@kernel.org>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: "Eric W . Biederman" <ebiederm@xmission.com>
    Cc: Seth Forshee <seth.forshee@canonical.com>
    Cc: John Sperbeck <jsperbeck@google.com>
    Cc: Alexey Dobriyan <adobriyan@gmail.com>
    Cc: <stable@vger.kernel.org>    [4.8+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 6f4992b0e2db5f8a182bfb75e710ce47555b10ff
Author: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
Date:   Tue May 14 09:19:01 2019 -0400

    drm/amd/display: Copy stream updates onto streams
    
    [Why]
    Almost every function in DC that works with stream state expects that
    the current state on the stream is the one that it should be writing
    out. These functions are typically triggered by specifying a particular
    stream update - but the actual contents of the stream update itself
    are ignored, leaving it to the DM to actually update the stream state
    itself.
    
    The problem with doing this in DM is a matter of timing. On Linux
    most of this is incorrectly done in atomic check, when we actually want
    it to be done during atomic commit tail while access to DC is locked.
    
    To give an example, a commit requesting to modify color management
    state for DM could come in, be rejected, but still have modified
    the actual system state for the stream since it's shared memory. The
    next time color management gets programmed it'll use the rejected
    color management info - which might not even still be around if it's
    a custom transfer function.
    
    So a reasonable place to perform this is within DC itself and this is
    the model that's currently in use for surface updates. DC can even
    compare the current system state to the incoming surface update to
    determine update level, something that can't currnetly be done with the
    framework for stream updates.
    
    [How]
    Duplicate the framework used for surface updates for stream updates
    as well. Copy all the updates after checking the update type.
    
    Signed-off-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Reviewed-by: Harry Wentland <Harry.Wentland@amd.com>
    Acked-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 48720ba56891570e3b750b271d80efb631478630
Author: Halil Pasic <pasic@linux.ibm.com>
Date:   Mon Oct 1 19:01:58 2018 +0200

    virtio/s390: use DMA memory for ccw I/O and classic notifiers
    
    Before virtio-ccw could get away with not using DMA API for the pieces of
    memory it does ccw I/O with. With protected virtualization this has to
    change, since the hypervisor needs to read and sometimes also write these
    pieces of memory.
    
    The hypervisor is supposed to poke the classic notifiers, if these are
    used, out of band with regards to ccw I/O. So these need to be allocated
    as DMA memory (which is shared memory for protected virtualization
    guests).
    
    Let us factor out everything from struct virtio_ccw_device that needs to
    be DMA memory in a satellite that is allocated as such.
    
    Note: The control blocks of I/O instructions do not need to be shared.
    These are marshalled by the ultravisor.
    
    Signed-off-by: Halil Pasic <pasic@linux.ibm.com>
    Reviewed-by: Pierre Morel <pmorel@linux.ibm.com>
    Reviewed-by: Cornelia Huck <cohuck@redhat.com>
    Reviewed-by: Michael Mueller <mimu@linux.ibm.com>
    Tested-by: Michael Mueller <mimu@linux.ibm.com>
    Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>

commit a944ccc3b0aedb7f3a24b8c90624fe182e8a8851
Author: Joey Zhang <joey.zhang@microchip.com>
Date:   Thu Jun 6 15:09:44 2019 +0800

    ntb_hw_switchtec: Fix setup MW with failure bug
    
    Switchtec does not support setting multiple MWs simultaneously. The
    driver takes a hardware lock to ensure that two peers are not doing this
    simultaneously and it fails if someone else takes the lock. In most
    cases, this is fine as clients only setup the MWs once on one side of
    the link.
    
    However, there's a race condition when a re-initialization is caused by
    a link event. The driver will re-setup the shared memory window
    asynchronously and this races with the client setting up it's memory
    windows on the link up event.
    
    To fix this we ensure do the entire initialization in a work queue and
    signal the client once it's done.
    
    Signed-off-by: Joey Zhang <joey.zhang@microchip.com>
    Signed-off-by: Wesley Sheng <wesley.sheng@microchip.com>
    Signed-off-by: Jon Mason <jdmason@kudzu.us>

commit f0f43e766bdb314b3816ac891fb18cea5de4123d
Author: Wesley Sheng <wesley.sheng@microchip.com>
Date:   Thu Jun 6 15:09:43 2019 +0800

    ntb_hw_switchtec: Skip unnecessary re-setup of shared memory window for crosslink case
    
    In case of NTB crosslink topology, the setting of shared memory window in
    the virtual partition doesn't reset on peer's reboot. So skip the
    unnecessary re-setup of shared memory window for that case.
    
    Signed-off-by: Wesley Sheng <wesley.sheng@microchip.com>
    Signed-off-by: Jon Mason <jdmason@kudzu.us>

commit 28e339f100e34608a8f40c5ec6a6f8ef7b826028
Author: Joey Zhang <joey.zhang@microchip.com>
Date:   Thu Jun 6 15:09:42 2019 +0800

    ntb_hw_switchtec: Remove redundant steps of switchtec_ntb_reinit_peer() function
    
    When a re-initialization is caused by a link event, the driver will
    re-setup the shared memory window. But at that time, the shared memory
    is still valid, and it's unnecessary to free, reallocate and then
    initialize it again. We only need to reconfigure the hardware
    registers. Remove the redundant steps from
    switchtec_ntb_reinit_peer() function.
    
    Signed-off-by: Joey Zhang <joey.zhang@microchip.com>
    Signed-off-by: Wesley Sheng <wesley.sheng@microchip.com>
    Reviewed-by: Logan Gunthorpe <logang@deltatee.com>
    Signed-off-by: Jon Mason <jdmason@kudzu.us>

commit 6e5155ae6b66054db35d8f3c64f9863b9d0466c1
Author: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
Date:   Tue May 14 09:19:01 2019 -0400

    drm/amd/display: Copy stream updates onto streams
    
    [Why]
    Almost every function in DC that works with stream state expects that
    the current state on the stream is the one that it should be writing
    out. These functions are typically triggered by specifying a particular
    stream update - but the actual contents of the stream update itself
    are ignored, leaving it to the DM to actually update the stream state
    itself.
    
    The problem with doing this in DM is a matter of timing. On Linux
    most of this is incorrectly done in atomic check, when we actually want
    it to be done during atomic commit tail while access to DC is locked.
    
    To give an example, a commit requesting to modify color management
    state for DM could come in, be rejected, but still have modified
    the actual system state for the stream since it's shared memory. The
    next time color management gets programmed it'll use the rejected
    color management info - which might not even still be around if it's
    a custom transfer function.
    
    So a reasonable place to perform this is within DC itself and this is
    the model that's currently in use for surface updates. DC can even
    compare the current system state to the incoming surface update to
    determine update level, something that can't currnetly be done with the
    framework for stream updates.
    
    [How]
    Duplicate the framework used for surface updates for stream updates
    as well. Copy all the updates after checking the update type.
    
    Signed-off-by: Nicholas Kazlauskas <nicholas.kazlauskas@amd.com>
    Reviewed-by: Harry Wentland <Harry.Wentland@amd.com>
    Acked-by: Bhawanpreet Lakha <Bhawanpreet.Lakha@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 702156cd1a9a755b07d0e86c732957fab43b5c72
Author: Ard Biesheuvel <ard.biesheuvel@linaro.org>
Date:   Thu May 16 23:31:59 2019 +0200

    fbdev/efifb: Ignore framebuffer memmap entries that lack any memory types
    
    commit f8585539df0a1527c78b5d760665c89fe1c105a9 upstream.
    
    The following commit:
    
      38ac0287b7f4 ("fbdev/efifb: Honour UEFI memory map attributes when mapping the FB")
    
    updated the EFI framebuffer code to use memory mappings for the linear
    framebuffer that are permitted by the memory attributes described by the
    EFI memory map for the particular region, if the framebuffer happens to
    be covered by the EFI memory map (which is typically only the case for
    framebuffers in shared memory). This is required since non-x86 systems
    may require cacheable attributes for memory mappings that are shared
    with other masters (such as GPUs), and this information cannot be
    described by the Graphics Output Protocol (GOP) EFI protocol itself,
    and so we rely on the EFI memory map for this.
    
    As reported by James, this breaks some x86 systems:
    
      [ 1.173368] efifb: probing for efifb
      [ 1.173386] efifb: abort, cannot remap video memory 0x1d5000 @ 0xcf800000
      [ 1.173395] Trying to free nonexistent resource <00000000cf800000-00000000cf9d4bff>
      [ 1.173413] efi-framebuffer: probe of efi-framebuffer.0 failed with error -5
    
    The problem turns out to be that the memory map entry that describes the
    framebuffer has no memory attributes listed at all, and so we end up with
    a mem_flags value of 0x0.
    
    So work around this by ensuring that the memory map entry's attribute field
    has a sane value before using it to mask the set of usable attributes.
    
    Reported-by: James Hilliard <james.hilliard1@gmail.com>
    Tested-by: James Hilliard <james.hilliard1@gmail.com>
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Cc: <stable@vger.kernel.org> # v4.19+
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: James Morse <james.morse@arm.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Matt Fleming <matt@codeblueprint.co.uk>
    Cc: Peter Jones <pjones@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-efi@vger.kernel.org
    Fixes: 38ac0287b7f4 ("fbdev/efifb: Honour UEFI memory map attributes when ...")
    Link: http://lkml.kernel.org/r/20190516213159.3530-2-ard.biesheuvel@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cfe31930dac8f6af9b974c00c70bf11096c02b66
Author: Ard Biesheuvel <ard.biesheuvel@linaro.org>
Date:   Thu May 16 23:31:59 2019 +0200

    fbdev/efifb: Ignore framebuffer memmap entries that lack any memory types
    
    commit f8585539df0a1527c78b5d760665c89fe1c105a9 upstream.
    
    The following commit:
    
      38ac0287b7f4 ("fbdev/efifb: Honour UEFI memory map attributes when mapping the FB")
    
    updated the EFI framebuffer code to use memory mappings for the linear
    framebuffer that are permitted by the memory attributes described by the
    EFI memory map for the particular region, if the framebuffer happens to
    be covered by the EFI memory map (which is typically only the case for
    framebuffers in shared memory). This is required since non-x86 systems
    may require cacheable attributes for memory mappings that are shared
    with other masters (such as GPUs), and this information cannot be
    described by the Graphics Output Protocol (GOP) EFI protocol itself,
    and so we rely on the EFI memory map for this.
    
    As reported by James, this breaks some x86 systems:
    
      [ 1.173368] efifb: probing for efifb
      [ 1.173386] efifb: abort, cannot remap video memory 0x1d5000 @ 0xcf800000
      [ 1.173395] Trying to free nonexistent resource <00000000cf800000-00000000cf9d4bff>
      [ 1.173413] efi-framebuffer: probe of efi-framebuffer.0 failed with error -5
    
    The problem turns out to be that the memory map entry that describes the
    framebuffer has no memory attributes listed at all, and so we end up with
    a mem_flags value of 0x0.
    
    So work around this by ensuring that the memory map entry's attribute field
    has a sane value before using it to mask the set of usable attributes.
    
    Reported-by: James Hilliard <james.hilliard1@gmail.com>
    Tested-by: James Hilliard <james.hilliard1@gmail.com>
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Cc: <stable@vger.kernel.org> # v4.19+
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: James Morse <james.morse@arm.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Matt Fleming <matt@codeblueprint.co.uk>
    Cc: Peter Jones <pjones@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-efi@vger.kernel.org
    Fixes: 38ac0287b7f4 ("fbdev/efifb: Honour UEFI memory map attributes when ...")
    Link: http://lkml.kernel.org/r/20190516213159.3530-2-ard.biesheuvel@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 6623270e4672f67face73b9ffe24dcb59952559c
Author: Ard Biesheuvel <ard.biesheuvel@linaro.org>
Date:   Thu May 16 23:31:59 2019 +0200

    fbdev/efifb: Ignore framebuffer memmap entries that lack any memory types
    
    commit f8585539df0a1527c78b5d760665c89fe1c105a9 upstream.
    
    The following commit:
    
      38ac0287b7f4 ("fbdev/efifb: Honour UEFI memory map attributes when mapping the FB")
    
    updated the EFI framebuffer code to use memory mappings for the linear
    framebuffer that are permitted by the memory attributes described by the
    EFI memory map for the particular region, if the framebuffer happens to
    be covered by the EFI memory map (which is typically only the case for
    framebuffers in shared memory). This is required since non-x86 systems
    may require cacheable attributes for memory mappings that are shared
    with other masters (such as GPUs), and this information cannot be
    described by the Graphics Output Protocol (GOP) EFI protocol itself,
    and so we rely on the EFI memory map for this.
    
    As reported by James, this breaks some x86 systems:
    
      [ 1.173368] efifb: probing for efifb
      [ 1.173386] efifb: abort, cannot remap video memory 0x1d5000 @ 0xcf800000
      [ 1.173395] Trying to free nonexistent resource <00000000cf800000-00000000cf9d4bff>
      [ 1.173413] efi-framebuffer: probe of efi-framebuffer.0 failed with error -5
    
    The problem turns out to be that the memory map entry that describes the
    framebuffer has no memory attributes listed at all, and so we end up with
    a mem_flags value of 0x0.
    
    So work around this by ensuring that the memory map entry's attribute field
    has a sane value before using it to mask the set of usable attributes.
    
    Reported-by: James Hilliard <james.hilliard1@gmail.com>
    Tested-by: James Hilliard <james.hilliard1@gmail.com>
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Cc: <stable@vger.kernel.org> # v4.19+
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: James Morse <james.morse@arm.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Matt Fleming <matt@codeblueprint.co.uk>
    Cc: Peter Jones <pjones@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-efi@vger.kernel.org
    Fixes: 38ac0287b7f4 ("fbdev/efifb: Honour UEFI memory map attributes when ...")
    Link: http://lkml.kernel.org/r/20190516213159.3530-2-ard.biesheuvel@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f8585539df0a1527c78b5d760665c89fe1c105a9
Author: Ard Biesheuvel <ard.biesheuvel@linaro.org>
Date:   Thu May 16 23:31:59 2019 +0200

    fbdev/efifb: Ignore framebuffer memmap entries that lack any memory types
    
    The following commit:
    
      38ac0287b7f4 ("fbdev/efifb: Honour UEFI memory map attributes when mapping the FB")
    
    updated the EFI framebuffer code to use memory mappings for the linear
    framebuffer that are permitted by the memory attributes described by the
    EFI memory map for the particular region, if the framebuffer happens to
    be covered by the EFI memory map (which is typically only the case for
    framebuffers in shared memory). This is required since non-x86 systems
    may require cacheable attributes for memory mappings that are shared
    with other masters (such as GPUs), and this information cannot be
    described by the Graphics Output Protocol (GOP) EFI protocol itself,
    and so we rely on the EFI memory map for this.
    
    As reported by James, this breaks some x86 systems:
    
      [ 1.173368] efifb: probing for efifb
      [ 1.173386] efifb: abort, cannot remap video memory 0x1d5000 @ 0xcf800000
      [ 1.173395] Trying to free nonexistent resource <00000000cf800000-00000000cf9d4bff>
      [ 1.173413] efi-framebuffer: probe of efi-framebuffer.0 failed with error -5
    
    The problem turns out to be that the memory map entry that describes the
    framebuffer has no memory attributes listed at all, and so we end up with
    a mem_flags value of 0x0.
    
    So work around this by ensuring that the memory map entry's attribute field
    has a sane value before using it to mask the set of usable attributes.
    
    Reported-by: James Hilliard <james.hilliard1@gmail.com>
    Tested-by: James Hilliard <james.hilliard1@gmail.com>
    Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
    Cc: <stable@vger.kernel.org> # v4.19+
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: James Morse <james.morse@arm.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Matt Fleming <matt@codeblueprint.co.uk>
    Cc: Peter Jones <pjones@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: linux-efi@vger.kernel.org
    Fixes: 38ac0287b7f4 ("fbdev/efifb: Honour UEFI memory map attributes when ...")
    Link: http://lkml.kernel.org/r/20190516213159.3530-2-ard.biesheuvel@linaro.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit dc413a90edbe715bebebe859dc072ef73d490d70
Merge: e8a1d7011711 80d0c6492442
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu May 16 09:19:14 2019 -0700

    Merge tag 'armsoc-drivers' of git://git.kernel.org/pub/scm/linux/kernel/git/soc/soc
    
    Pull ARM SoC-related driver updates from Olof Johansson:
     "Various driver updates for platforms and a couple of the small driver
      subsystems we merge through our tree:
    
      Among the larger pieces:
    
       - Power management improvements for TI am335x and am437x (RTC
         suspend/wake)
    
       - Misc new additions for Amlogic (socinfo updates)
    
       - ZynqMP FPGA manager
    
       - Nvidia improvements for reset/powergate handling
    
       - PMIC wrapper for Mediatek MT8516
    
       - Misc fixes/improvements for ARM SCMI, TEE, NXP i.MX SCU drivers"
    
    * tag 'armsoc-drivers' of git://git.kernel.org/pub/scm/linux/kernel/git/soc/soc: (57 commits)
      soc: aspeed: fix Kconfig
      soc: add aspeed folder and misc drivers
      spi: zynqmp: Fix build break
      soc: imx: Add generic i.MX8 SoC driver
      MAINTAINERS: Update email for Qualcomm SoC maintainer
      memory: tegra: Fix a typos for "fdcdwr2" mc client
      Revert "ARM: tegra: Restore memory arbitration on resume from LP1 on Tegra30+"
      memory: tegra: Replace readl-writel with mc_readl-mc_writel
      memory: tegra: Fix integer overflow on tick value calculation
      memory: tegra: Fix missed registers values latching
      ARM: tegra: cpuidle: Handle tick broadcasting within cpuidle core on Tegra20/30
      optee: allow to work without static shared memory
      soc/tegra: pmc: Move powergate initialisation to probe
      soc/tegra: pmc: Remove reset sysfs entries on error
      soc/tegra: pmc: Fix reset sources and levels
      soc: amlogic: meson-gx-pwrc-vpu: Add support for G12A
      soc: amlogic: meson-gx-pwrc-vpu: Fix power on/off register bitmask
      fpga manager: Adding FPGA Manager support for Xilinx zynqmp
      dt-bindings: fpga: Add bindings for ZynqMP fpga driver
      firmware: xilinx: Add fpga API's
      ...

commit aaf75f2b53b7dfbc99b85b9707ffd4115cfce7ac
Merge: 7f26bb130a94 9733b072a12a
Author: Olof Johansson <olof@lixom.net>
Date:   Sun Apr 28 23:21:27 2019 -0700

    Merge tag 'tee-optee-for-5.2' of http://git.linaro.org:/people/jens.wiklander/linux-tee into arm/drivers
    
    Allow OP-TEE driver to work without static shared memory
    
    * tag 'tee-optee-for-5.2' of http://git.linaro.org:/people/jens.wiklander/linux-tee:
      optee: allow to work without static shared memory
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 9733b072a12a422e2bf17bc7ba8b39769853d4a2
Author: Volodymyr Babchuk <vlad.babchuk@gmail.com>
Date:   Fri Sep 7 21:37:07 2018 +0300

    optee: allow to work without static shared memory
    
    On virtualized systems it is possible that OP-TEE will provide
    only dynamic shared memory support. So it is fine to boot
    without static SHM enabled if dymanic one is supported.
    
    Signed-off-by: Volodymyr Babchuk <vlad.babchuk@gmail.com>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

commit 780e62a6a021bb136a8e297dd3f432eb2dda3361
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Sat Mar 16 14:21:19 2019 +1100

    mac8390: Fix mmio access size probe
    
    [ Upstream commit bb9e5c5bcd76f4474eac3baf643d7a39f7bac7bb ]
    
    The bug that Stan reported is as follows. After a restart, a 16-bit NIC
    may be incorrectly identified as a 32-bit NIC and stop working.
    
    mac8390 slot.E: Memory length resource not found, probing
    mac8390 slot.E: Farallon EtherMac II-C (type farallon)
    mac8390 slot.E: MAC 00:00:c5:30:c2:99, IRQ 61, 32 KB shared memory at 0xfeed0000, 32-bit access.
    
    The bug never arises after a cold start and only intermittently after a
    warm start. (I didn't investigate why the bug is intermittent.)
    
    It turns out that memcpy_toio() is deprecated and memcmp_withio() also
    has issues. Replacing these calls with mmio accessors fixes the problem.
    
    Reported-and-tested-by: Stan Johnson <userm57@yahoo.com>
    Fixes: 2964db0f5904 ("m68k: Mac DP8390 update")
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit e0f8c06f45c3e251a11e84793ab00c528e10cac6
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Sat Mar 16 14:21:19 2019 +1100

    mac8390: Fix mmio access size probe
    
    [ Upstream commit bb9e5c5bcd76f4474eac3baf643d7a39f7bac7bb ]
    
    The bug that Stan reported is as follows. After a restart, a 16-bit NIC
    may be incorrectly identified as a 32-bit NIC and stop working.
    
    mac8390 slot.E: Memory length resource not found, probing
    mac8390 slot.E: Farallon EtherMac II-C (type farallon)
    mac8390 slot.E: MAC 00:00:c5:30:c2:99, IRQ 61, 32 KB shared memory at 0xfeed0000, 32-bit access.
    
    The bug never arises after a cold start and only intermittently after a
    warm start. (I didn't investigate why the bug is intermittent.)
    
    It turns out that memcpy_toio() is deprecated and memcmp_withio() also
    has issues. Replacing these calls with mmio accessors fixes the problem.
    
    Reported-and-tested-by: Stan Johnson <userm57@yahoo.com>
    Fixes: 2964db0f5904 ("m68k: Mac DP8390 update")
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit f8a85be02fb76fcce4ebf623d42cce4ffbefddb9
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Sat Mar 16 14:21:19 2019 +1100

    mac8390: Fix mmio access size probe
    
    [ Upstream commit bb9e5c5bcd76f4474eac3baf643d7a39f7bac7bb ]
    
    The bug that Stan reported is as follows. After a restart, a 16-bit NIC
    may be incorrectly identified as a 32-bit NIC and stop working.
    
    mac8390 slot.E: Memory length resource not found, probing
    mac8390 slot.E: Farallon EtherMac II-C (type farallon)
    mac8390 slot.E: MAC 00:00:c5:30:c2:99, IRQ 61, 32 KB shared memory at 0xfeed0000, 32-bit access.
    
    The bug never arises after a cold start and only intermittently after a
    warm start. (I didn't investigate why the bug is intermittent.)
    
    It turns out that memcpy_toio() is deprecated and memcmp_withio() also
    has issues. Replacing these calls with mmio accessors fixes the problem.
    
    Reported-and-tested-by: Stan Johnson <userm57@yahoo.com>
    Fixes: 2964db0f5904 ("m68k: Mac DP8390 update")
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b731b5d0e134a2fbee5b37f1964cd50670e7275a
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Sat Mar 16 14:21:19 2019 +1100

    mac8390: Fix mmio access size probe
    
    [ Upstream commit bb9e5c5bcd76f4474eac3baf643d7a39f7bac7bb ]
    
    The bug that Stan reported is as follows. After a restart, a 16-bit NIC
    may be incorrectly identified as a 32-bit NIC and stop working.
    
    mac8390 slot.E: Memory length resource not found, probing
    mac8390 slot.E: Farallon EtherMac II-C (type farallon)
    mac8390 slot.E: MAC 00:00:c5:30:c2:99, IRQ 61, 32 KB shared memory at 0xfeed0000, 32-bit access.
    
    The bug never arises after a cold start and only intermittently after a
    warm start. (I didn't investigate why the bug is intermittent.)
    
    It turns out that memcpy_toio() is deprecated and memcmp_withio() also
    has issues. Replacing these calls with mmio accessors fixes the problem.
    
    Reported-and-tested-by: Stan Johnson <userm57@yahoo.com>
    Fixes: 2964db0f5904 ("m68k: Mac DP8390 update")
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 48b22ac589985f10153afe09624950bb91aeb99a
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Sat Mar 16 14:21:19 2019 +1100

    mac8390: Fix mmio access size probe
    
    [ Upstream commit bb9e5c5bcd76f4474eac3baf643d7a39f7bac7bb ]
    
    The bug that Stan reported is as follows. After a restart, a 16-bit NIC
    may be incorrectly identified as a 32-bit NIC and stop working.
    
    mac8390 slot.E: Memory length resource not found, probing
    mac8390 slot.E: Farallon EtherMac II-C (type farallon)
    mac8390 slot.E: MAC 00:00:c5:30:c2:99, IRQ 61, 32 KB shared memory at 0xfeed0000, 32-bit access.
    
    The bug never arises after a cold start and only intermittently after a
    warm start. (I didn't investigate why the bug is intermittent.)
    
    It turns out that memcpy_toio() is deprecated and memcmp_withio() also
    has issues. Replacing these calls with mmio accessors fixes the problem.
    
    Reported-and-tested-by: Stan Johnson <userm57@yahoo.com>
    Fixes: 2964db0f5904 ("m68k: Mac DP8390 update")
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1801ffbc7de8bc5627eb1395a130ab769244a515
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Sat Mar 16 14:21:19 2019 +1100

    mac8390: Fix mmio access size probe
    
    [ Upstream commit bb9e5c5bcd76f4474eac3baf643d7a39f7bac7bb ]
    
    The bug that Stan reported is as follows. After a restart, a 16-bit NIC
    may be incorrectly identified as a 32-bit NIC and stop working.
    
    mac8390 slot.E: Memory length resource not found, probing
    mac8390 slot.E: Farallon EtherMac II-C (type farallon)
    mac8390 slot.E: MAC 00:00:c5:30:c2:99, IRQ 61, 32 KB shared memory at 0xfeed0000, 32-bit access.
    
    The bug never arises after a cold start and only intermittently after a
    warm start. (I didn't investigate why the bug is intermittent.)
    
    It turns out that memcpy_toio() is deprecated and memcmp_withio() also
    has issues. Replacing these calls with mmio accessors fixes the problem.
    
    Reported-and-tested-by: Stan Johnson <userm57@yahoo.com>
    Fixes: 2964db0f5904 ("m68k: Mac DP8390 update")
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bb9e5c5bcd76f4474eac3baf643d7a39f7bac7bb
Author: Finn Thain <fthain@telegraphics.com.au>
Date:   Sat Mar 16 14:21:19 2019 +1100

    mac8390: Fix mmio access size probe
    
    The bug that Stan reported is as follows. After a restart, a 16-bit NIC
    may be incorrectly identified as a 32-bit NIC and stop working.
    
    mac8390 slot.E: Memory length resource not found, probing
    mac8390 slot.E: Farallon EtherMac II-C (type farallon)
    mac8390 slot.E: MAC 00:00:c5:30:c2:99, IRQ 61, 32 KB shared memory at 0xfeed0000, 32-bit access.
    
    The bug never arises after a cold start and only intermittently after a
    warm start. (I didn't investigate why the bug is intermittent.)
    
    It turns out that memcpy_toio() is deprecated and memcmp_withio() also
    has issues. Replacing these calls with mmio accessors fixes the problem.
    
    Reported-and-tested-by: Stan Johnson <userm57@yahoo.com>
    Fixes: 2964db0f5904 ("m68k: Mac DP8390 update")
    Signed-off-by: Finn Thain <fthain@telegraphics.com.au>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ab3948f58ff841e51feb845720624665ef5b7ef3
Author: Joel Fernandes (Google) <joel@joelfernandes.org>
Date:   Tue Mar 5 15:47:54 2019 -0800

    mm/memfd: add an F_SEAL_FUTURE_WRITE seal to memfd
    
    Android uses ashmem for sharing memory regions.  We are looking forward
    to migrating all usecases of ashmem to memfd so that we can possibly
    remove the ashmem driver in the future from staging while also
    benefiting from using memfd and contributing to it.  Note staging
    drivers are also not ABI and generally can be removed at anytime.
    
    One of the main usecases Android has is the ability to create a region
    and mmap it as writeable, then add protection against making any
    "future" writes while keeping the existing already mmap'ed
    writeable-region active.  This allows us to implement a usecase where
    receivers of the shared memory buffer can get a read-only view, while
    the sender continues to write to the buffer.  See CursorWindow
    documentation in Android for more details:
    
      https://developer.android.com/reference/android/database/CursorWindow
    
    This usecase cannot be implemented with the existing F_SEAL_WRITE seal.
    To support the usecase, this patch adds a new F_SEAL_FUTURE_WRITE seal
    which prevents any future mmap and write syscalls from succeeding while
    keeping the existing mmap active.
    
    A better way to do F_SEAL_FUTURE_WRITE seal was discussed [1] last week
    where we don't need to modify core VFS structures to get the same
    behavior of the seal.  This solves several side-effects pointed by Andy.
    self-tests are provided in later patch to verify the expected semantics.
    
    [1] https://lore.kernel.org/lkml/20181111173650.GA256781@google.com/
    
    Thanks a lot to Andy for suggestions to improve code.
    
    Link: http://lkml.kernel.org/r/20190112203816.85534-2-joel@joelfernandes.org
    Signed-off-by: Joel Fernandes (Google) <joel@joelfernandes.org>
    Acked-by: John Stultz <john.stultz@linaro.org>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Minchan Kim <minchan@kernel.org>
    Cc: Jann Horn <jannh@google.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: J. Bruce Fields <bfields@fieldses.org>
    Cc: Jeff Layton <jlayton@kernel.org>
    Cc: Marc-Andr Lureau <marcandre.lureau@redhat.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: Shuah Khan <shuah@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 0ebcebbef1cc50fb94ae17917208b04868de9c38
Author: Sudarsana Reddy Kalluru <skalluru@marvell.com>
Date:   Thu Feb 21 06:03:31 2019 -0800

    qed: Read device port count from the shmem
    
    Read port count from the shared memory instead of driver deriving this
    value. This change simplifies the driver implementation and also avoids
    any dependencies for finding the port-count.
    
    Signed-off-by: Sudarsana Reddy Kalluru <skalluru@marvell.com>
    Signed-off-by: Michal Kalderon <mkalderon@marvell.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 030672aea826adf3dee9100ee8ac303b62c8fe7f
Merge: 24dc83635ffe 5801169a2ed2
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Dec 28 20:08:34 2018 -0800

    Merge tag 'devicetree-for-4.21' of git://git.kernel.org/pub/scm/linux/kernel/git/robh/linux
    
    Pull Devicetree updates from Rob Herring:
     "The biggest highlight here is the start of using json-schema for DT
      bindings. Being able to validate bindings has been discussed for years
      with little progress.
    
       - Initial support for DT bindings using json-schema language. This is
         the start of converting DT bindings from free-form text to a
         structured format.
    
       - Reworking of initrd address initialization. This moves to using the
         phys address instead of virt addr in the DT parsing code. This
         rework was motivated by CONFIG_DEV_BLK_INITRD causing unnecessary
         rebuilding of lots of files.
    
       - Fix stale phandle entries in phandle cache
    
       - DT overlay validation improvements. This exposed several memory
         leak bugs which have been fixed.
    
       - Use node name and device_type helper functions in DT code
    
       - Last remaining conversions to using %pOFn printk specifier instead
         of device_node.name directly
    
       - Create new common RTC binding doc and move all trivial RTC devices
         out of trivial-devices.txt.
    
       - New bindings for Freescale MAG3110 magnetometer, Cadence Sierra
         PHY, and Xen shared memory
    
       - Update dtc to upstream version v1.4.7-57-gf267e674d145"
    
    * tag 'devicetree-for-4.21' of git://git.kernel.org/pub/scm/linux/kernel/git/robh/linux: (68 commits)
      of: __of_detach_node() - remove node from phandle cache
      of: of_node_get()/of_node_put() nodes held in phandle cache
      gpio-omap.txt: add reg and interrupts properties
      dt-bindings: mrvl,intc: fix a trivial typo
      dt-bindings: iio: magnetometer: add dt-bindings for freescale mag3110
      dt-bindings: Convert trivial-devices.txt to json-schema
      dt-bindings: arm: mrvl: amend Browstone compatible string
      dt-bindings: arm: Convert Tegra board/soc bindings to json-schema
      dt-bindings: arm: Convert ZTE board/soc bindings to json-schema
      dt-bindings: arm: Add missing Xilinx boards
      dt-bindings: arm: Convert Xilinx board/soc bindings to json-schema
      dt-bindings: arm: Convert VIA board/soc bindings to json-schema
      dt-bindings: arm: Convert ST STi board/soc bindings to json-schema
      dt-bindings: arm: Convert SPEAr board/soc bindings to json-schema
      dt-bindings: arm: Convert CSR SiRF board/soc bindings to json-schema
      dt-bindings: arm: Convert QCom board/soc bindings to json-schema
      dt-bindings: arm: Convert TI nspire board/soc bindings to json-schema
      dt-bindings: arm: Convert TI davinci board/soc bindings to json-schema
      dt-bindings: arm: Convert Calxeda board/soc bindings to json-schema
      dt-bindings: arm: Convert Altera board/soc bindings to json-schema
      ...

commit 852b2876a8a82f2c618da40b881bb07c2d42eb5c
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Mon Dec 10 22:11:58 2018 +0100

    staging: vchiq: rework remove_event handling
    
    I had started the removal of semaphores in this driver without knowing
    that Nicolas Saenz Julienne also worked on this. In case of the "remote
    event" infrastructure, my solution seemed significantly better, so I'm
    proposing this as a change on top.
    
    The problem with using either semaphores or completions here is that
    it's an overly complex way of waking up a thread, and it looks like the
    'count' of the semaphore can easily get out of sync, even though I found
    it hard to come up with a specific example.
    
    Changing it to a 'wait_queue_head_t' instead of a completion simplifies
    this by letting us wait directly on the 'event->fired' variable that is
    set by the videocore.
    
    Another simplification is passing the wait queue directly into the helper
    functions instead of going through the fragile logic of recording the
    offset inside of a structure as part of a shared memory variable. This
    also avoids one uncached memory read and should be faster.
    
    Note that I'm changing it back to 'killable' after the previous patch
    changed 'killable' to 'interruptible', apparently based on a misunderstanding
    of the subtle down_interruptible() macro override in vchiq_killable.h.
    
    Fixes: f27e47bc6b8b ("staging: vchiq: use completions instead of semaphores")
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3c15ddb97c77f34ba009910becd5921f169770a2
Author: Victor Chong <victor.chong@linaro.org>
Date:   Wed Apr 11 10:19:53 2018 +0100

    tee: optee: log message if dynamic shm is enabled
    
    When dynamic shared memory support is enabled in the OP-TEE Trusted
    OS, it doesn't mean that the driver supports it, which can confuse
    users during debugging. Log a message when dynamic shared memory is
    enabled in the driver, to let users know for sure.
    
    Suggested-by: Jerome Forissier <jerome.forissier@linaro.org>
    Signed-off-by: Victor Chong <victor.chong@linaro.org>
    Reviewed-by: Jerome Forissier <jerome.forissier@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

commit cae7ed256d772766dd2fe3ad9a08ec77f24b9503
Author: Mike Rapoport <rppt@linux.vnet.ibm.com>
Date:   Wed Sep 6 16:22:56 2017 -0700

    shmem: shmem_charge: verify max_block is not exceeded before inode update
    
    commit b1cc94ab2f2ba31fcb2c59df0b9cf03f6d720553 upstream.
    
    Patch series "userfaultfd: enable zeropage support for shmem".
    
    These patches enable support for UFFDIO_ZEROPAGE for shared memory.
    
    The first two patches are not strictly related to userfaultfd, they are
    just minor refactoring to reduce amount of code duplication.
    
    This patch (of 7):
    
    Currently we update inode and shmem_inode_info before verifying that
    used_blocks will not exceed max_blocks.  In case it will, we undo the
    update.  Let's switch the order and move the verification of the blocks
    count before the inode and shmem_inode_info update.
    
    Link: http://lkml.kernel.org/r/1497939652-16528-2-git-send-email-rppt@linux.vnet.ibm.com
    Signed-off-by: Mike Rapoport <rppt@linux.vnet.ibm.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>
    Cc: Hillf Danton <hillf.zj@alibaba-inc.com>
    Cc: Pavel Emelyanov <xemul@virtuozzo.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

commit 9c2d16bbfda645cbcf7191f8822f23f93149ffbe
Author: Jerome Brunet <jbrunet@baylibre.com>
Date:   Thu Nov 8 14:53:50 2018 +0100

    arm64: dts: meson-axg: correct sram shared mem unit-address
    
    Correct the unit-address in the node name of the SRAM shared memory
    
    Signed-off-by: Jerome Brunet <jbrunet@baylibre.com>
    Reviewed-by: Neil Armstrong <narmstrong@baylibre.com>
    Signed-off-by: Kevin Hilman <khilman@baylibre.com>

commit 60e03c62c5db22c5eb63bcb6ce226cf05f4ee47c
Author: Karsten Graul <kgraul@linux.ibm.com>
Date:   Thu Nov 22 10:26:42 2018 +0100

    net/smc: add infrastructure to send delete rkey messages
    
    Add the infrastructure to send LLC messages of type DELETE RKEY to
    unregister a shared memory region at the peer.
    
    Signed-off-by: Karsten Graul <kgraul@linux.ibm.com>
    Signed-off-by: Ursula Braun <ubraun@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 95d16ca7c1af98059f39ca43c17aa2f02d652a0c
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Fri Mar 23 00:42:21 2018 -0500

    ipc/msg: Fix msgctl(..., IPC_STAT, ...) between pid namespaces
    
    commit 39a4940eaa185910bb802ca9829c12268fd2c855 upstream.
    
    Today msg_lspid and msg_lrpid are remembered in the pid namespace of
    the creator and the processes that last send or received a sysvipc
    message.  If you have processes in multiple pid namespaces that is
    just wrong.  The process ids reported will not make the least bit of
    sense.
    
    This fix is slightly more susceptible to a performance problem than
    the related fix for System V shared memory.  By definition the pids
    are updated by msgsnd and msgrcv, the fast path of System V message
    queues.  The only concern over the previous implementation is the
    incrementing and decrementing of the pid reference count.  As that is
    the only difference and multiple updates by of the task_tgid by
    threads in the same process have been shown in af_unix sockets to
    create a cache line ping-pong between cpus of the same processor.
    
    In this case I don't expect cache lines holding pid reference counts
    to ping pong between cpus.  As senders and receivers update different
    pids there is a natural separation there.  Further if multiple threads
    of the same process either send or receive messages the pid will be
    updated to the same value and ipc_update_pid will avoid the reference
    count update.
    
    Which means in the common case I expect msg_lspid and msg_lrpid to
    remain constant, and reference counts not to be updated when messages
    are sent.
    
    In rare cases it may be possible to trigger the issue which was
    observed for af_unix sockets, but it will require multiple processes
    with multiple threads to be either sending or receiving messages.  It
    just does not feel likely that anyone would do that in practice.
    
    This change updates msgctl(..., IPC_STAT, ...) to return msg_lspid and
    msg_lrpid in the pid namespace of the process calling stat.
    
    This change also updates cat /proc/sysvipc/msg to return print msg_lspid
    and msg_lrpid in the pid namespace of the process that opened the proc
    file.
    
    Fixes: b488893a390e ("pid namespaces: changes to show virtual ids to user")
    Reviewed-by: Nagarathnam Muthusamy <nagarathnam.muthusamy@oracle.com>
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
    [bwh: Backported to 3.16: adjust filename, context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 2b62f4850d9f1572f7e199993f0fee64fe760d43
Author: Eric Biggers <ebiggers@google.com>
Date:   Fri Apr 13 15:35:30 2018 -0700

    ipc/shm: fix use-after-free of shm file via remap_file_pages()
    
    commit 3f05317d9889ab75c7190dcd39491d2a97921984 upstream.
    
    syzbot reported a use-after-free of shm_file_data(file)->file->f_op in
    shm_get_unmapped_area(), called via sys_remap_file_pages().
    
    Unfortunately it couldn't generate a reproducer, but I found a bug which
    I think caused it.  When remap_file_pages() is passed a full System V
    shared memory segment, the memory is first unmapped, then a new map is
    created using the ->vm_file.  Between these steps, the shm ID can be
    removed and reused for a new shm segment.  But, shm_mmap() only checks
    whether the ID is currently valid before calling the underlying file's
    ->mmap(); it doesn't check whether it was reused.  Thus it can use the
    wrong underlying file, one that was already freed.
    
    Fix this by making the "outer" shm file (the one that gets put in
    ->vm_file) hold a reference to the real shm file, and by making
    __shm_open() require that the file associated with the shm ID matches
    the one associated with the "outer" file.
    
    Taking the reference to the real shm file is needed to fully solve the
    problem, since otherwise sfd->file could point to a freed file, which
    then could be reallocated for the reused shm ID, causing the wrong shm
    segment to be mapped (and without the required permission checks).
    
    Commit 1ac0b6dec656 ("ipc/shm: handle removed segments gracefully in
    shm_mmap()") almost fixed this bug, but it didn't go far enough because
    it didn't consider the case where the shm ID is reused.
    
    The following program usually reproduces this bug:
    
            #include <stdlib.h>
            #include <sys/shm.h>
            #include <sys/syscall.h>
            #include <unistd.h>
    
            int main()
            {
                    int is_parent = (fork() != 0);
                    srand(getpid());
                    for (;;) {
                            int id = shmget(0xF00F, 4096, IPC_CREAT|0700);
                            if (is_parent) {
                                    void *addr = shmat(id, NULL, 0);
                                    usleep(rand() % 50);
                                    while (!syscall(__NR_remap_file_pages, addr, 4096, 0, 0, 0));
                            } else {
                                    usleep(rand() % 50);
                                    shmctl(id, IPC_RMID, NULL);
                            }
                    }
            }
    
    It causes the following NULL pointer dereference due to a 'struct file'
    being used while it's being freed.  (I couldn't actually get a KASAN
    use-after-free splat like in the syzbot report.  But I think it's
    possible with this bug; it would just take a more extraordinary race...)
    
            BUG: unable to handle kernel NULL pointer dereference at 0000000000000058
            PGD 0 P4D 0
            Oops: 0000 [#1] SMP NOPTI
            CPU: 9 PID: 258 Comm: syz_ipc Not tainted 4.16.0-05140-gf8cf2f16a7c95 #189
            Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.11.0-20171110_100015-anatol 04/01/2014
            RIP: 0010:d_inode include/linux/dcache.h:519 [inline]
            RIP: 0010:touch_atime+0x25/0xd0 fs/inode.c:1724
            [...]
            Call Trace:
             file_accessed include/linux/fs.h:2063 [inline]
             shmem_mmap+0x25/0x40 mm/shmem.c:2149
             call_mmap include/linux/fs.h:1789 [inline]
             shm_mmap+0x34/0x80 ipc/shm.c:465
             call_mmap include/linux/fs.h:1789 [inline]
             mmap_region+0x309/0x5b0 mm/mmap.c:1712
             do_mmap+0x294/0x4a0 mm/mmap.c:1483
             do_mmap_pgoff include/linux/mm.h:2235 [inline]
             SYSC_remap_file_pages mm/mmap.c:2853 [inline]
             SyS_remap_file_pages+0x232/0x310 mm/mmap.c:2769
             do_syscall_64+0x64/0x1a0 arch/x86/entry/common.c:287
             entry_SYSCALL_64_after_hwframe+0x42/0xb7
    
    [ebiggers@google.com: add comment]
      Link: http://lkml.kernel.org/r/20180410192850.235835-1-ebiggers3@gmail.com
    Link: http://lkml.kernel.org/r/20180409043039.28915-1-ebiggers3@gmail.com
    Reported-by: syzbot+d11f321e7f1923157eac80aa990b446596f46439@syzkaller.appspotmail.com
    Fixes: c8d78c1823f4 ("mm: replace remap_file_pages() syscall with emulation")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Acked-by: Davidlohr Bueso <dbueso@suse.de>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Cc: "Eric W . Biederman" <ebiederm@xmission.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    [bwh: Backported to 3.16: adjust context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit ecc23ca1da7596dcf39d2ef98fe33e4e05532a8a
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Fri Mar 23 00:29:57 2018 -0500

    ipc/shm: Fix shmctl(..., IPC_STAT, ...) between pid namespaces.
    
    commit 98f929b1bd4d0b7c7a77d0d9776d1b924db2e454 upstream.
    
    Today shm_cpid and shm_lpid are remembered in the pid namespace of the
    creator and the processes that last touched a sysvipc shared memory
    segment.   If you have processes in multiple pid namespaces that
    is just wrong, and I don't know how this has been over-looked for
    so long.
    
    As only creation and shared memory attach and shared memory detach
    update the pids I do not expect there to be a repeat of the issues
    when struct pid was attached to each af_unix skb, which in some
    notable cases cut the performance in half.  The problem was threads of
    the same process updating same struct pid from different cpus causing
    the cache line to be highly contended and bounce between cpus.
    
    As creation, attach, and detach are expected to be rare operations for
    sysvipc shared memory segments I do not expect that kind of cache line
    ping pong to cause probems.  In addition because the pid is at a fixed
    location in the structure instead of being dynamic on a skb, the
    reference count of the pid does not need to be updated on each
    operation if the pid is the same.  This ability to simply skip the pid
    reference count changes if the pid is unchanging further reduces the
    likelihood of the a cache line holding a pid reference count
    ping-ponging between cpus.
    
    Fixes: b488893a390e ("pid namespaces: changes to show virtual ids to user")
    Reviewed-by: Nagarathnam Muthusamy <nagarathnam.muthusamy@oracle.com>
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>
    [bwh: Backported to 3.16: adjust filename, context]
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit ba94c753ccb471bafe8bd824b744fda6fee0001e
Author: Govind Singh <govinds@codeaurora.org>
Date:   Thu Oct 11 13:16:26 2018 +0300

    ath10k: add QMI message handshake for wcn3990 client
    
    Add WCN3990 QMI client handshakes for Q6 integrated WLAN connectivity
    subsystem. This layer is responsible for communicating qmi control
    messages to wifi fw QMI service using QMI messaging protocol.
    
    Qualcomm MSM Interface(QMI) is a messaging format used to communicate
    between components running between remote processors with underlying
    transport layer based on integrated chipset(shared memory) or
    discrete chipset(PCI/USB/SDIO/UART).
    
    Signed-off-by: Govind Singh <govinds@codeaurora.org>
    Reviewed-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Acked-by: Niklas Cassel <niklas.cassel@linaro.org>
    Reviewed-by: Brian Norris <briannorris@chromium.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit a6deaa99591098a3e558978c6cec0054fd1d3b97
Merge: e40a826a6cbc 1f2cf1b39b93
Author: David S. Miller <davem@davemloft.net>
Date:   Wed Oct 10 10:06:03 2018 -0700

    Merge branch 'octeontx2-af-Add-RVU-Admin-Function-driver'
    
    Sunil Goutham says:
    
    ====================
    octeontx2-af: Add RVU Admin Function driver
    
    Resource virtualization unit (RVU) on Marvell's OcteonTX2 SOC maps HW
    resources from the network, crypto and other functional blocks into
    PCI-compatible physical and virtual functions. Each functional block
    again has multiple local functions (LFs) for provisioning to PCI devices.
    RVU supports multiple PCIe SRIOV physical functions (PFs) and virtual
    functions (VFs). PF0 is called the administrative / admin function (AF)
    and has privileges to provision RVU functional block's LFs to each of the
    PF/VF.
    
    RVU managed networking functional blocks
     - Network pool allocator (NPA)
     - Network interface controller (NIX)
     - Network parser CAM (NPC)
     - Schedule/Synchronize/Order unit (SSO)
    
    RVU managed non-networking functional blocks
     - Crypto accelerator (CPT)
     - Scheduled timers unit (TIM)
     - Schedule/Synchronize/Order unit (SSO)
       Used for both networking and non networking usecases
     - Compression (upcoming in future variants of the silicons)
    
    Resource provisioning examples
     - A PF/VF with NIX-LF & NPA-LF resources works as a pure network device
     - A PF/VF with CPT-LF resource works as a pure cyrpto offload device.
    
    This admin function driver neither receives any data nor processes it i.e
    no I/O, a configuration only driver.
    
    PF/VFs communicates with AF via a shared memory region (mailbox). Upon
    receiving requests from PF/VF, AF does resource provisioning and other
    HW configuration. AF is always attached to host, but PF/VFs may be used
    by host kernel itself, or attached to VMs or to userspace applications
    like DPDK etc. So AF has to handle provisioning/configuration requests
    sent by any device from any domain.
    
    This patch series adds logic for the following
     - RVU AF driver with functional blocks provisioning support.
     - Mailbox infrastructure for communication between AF and PFs.
     - CGX (MAC controller) driver which communicates with firmware for
       managing  physical ethernet interfaces. AF collects info from this
       driver and forwards the same to the PF/VFs uaing these interfaces.
    
    This is the first set of patches out of 80+ patches.
    
    Changes from v8:
     1 Removed unnecessary typecasts in entire series
       - Suggested by David Miller
     2 Added COMPILE_TEST to AF driver
       - Suggested by Arnd Bergmann
     3 Changed udelay() to usleep_range() in rvu_poll_reg
       - Suggested by Arnd Bergmann
     4 MSIX vector base IOMMU mapping is done using dma_map_resource()
       API instead of dma_map_single() as it accepts physical address.
       - Issue pointed by Arnd Bergmann
    
    Changes from v7:
     1 Removed unnecessary typecasts in mbox infra code.
       - Suggested by David Miller
     2 Fixed MAINTAINERS patch
       - Suggested by Joe Perches
    
    Changes from v6:
     Fixed ordering of local variables from longest to shortest line.
       - Suggested by David Miller
    
    Changes from v5:
     Modified bitfield based command structures to bitmasks for communication
     with firmware, to address endianness issues.
       - Suggested by Arnd Bergmann
    
    Changes from v4:
     1 Removed module author/version/description from CGX driver as it's now
       merged with AF driver module.
       - Suggested by Arnd Bergmann
     2 Added big-endian bitfields for CGX's kernel <=> firmware communication
       command structures.
       - Suggested by Arnd Bergmann
    
    Changes from v3:
     Moved driver from drivers/soc to drivers/net/ethernet
       - Suggested by Arnd Bergmann
     https://patchwork.kernel.org/cover/10587635/
    
    Changes from v2:
     No changes, submitted again with netdev mailing list in loop.
       - Suggested by Arnd Bergmann and Andrew Lunn
    
    Changes from v1:
     1 Merged RVU admin function and CGX drivers into a single module
       - Suggested by Arnd Bergmann
     2 Pulled mbox communication APIs into a separate module to remove
       admin function driver dependency in a VM where AF is not attached.
       - Suggested by Arnd Bergmann
    ====================
    
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c92f3fd58489ff848ac4cb64d928d27988a2d5a7
Author: Tomer Tayar <Tomer.Tayar@cavium.com>
Date:   Mon Aug 20 00:01:42 2018 +0300

    qed: Wait for ready indication before rereading the shmem
    
    [ Upstream commit f00d25f3154b676fcea4502a25b94bd7f142ca74 ]
    
    The MFW might be reset and re-update its shared memory.
    Upon the detection of such a reset the driver rereads this memory, but it
    has to wait till the data is valid.
    This patch adds the missing wait for a data ready indication.
    
    Signed-off-by: Tomer Tayar <Tomer.Tayar@cavium.com>
    Signed-off-by: Ariel Elior <Ariel.Elior@cavium.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 33906ae926e0634e8eea89ec36858ab4a36bcd28
Author: Tomer Tayar <Tomer.Tayar@cavium.com>
Date:   Mon Aug 20 00:01:42 2018 +0300

    qed: Wait for ready indication before rereading the shmem
    
    [ Upstream commit f00d25f3154b676fcea4502a25b94bd7f142ca74 ]
    
    The MFW might be reset and re-update its shared memory.
    Upon the detection of such a reset the driver rereads this memory, but it
    has to wait till the data is valid.
    This patch adds the missing wait for a data ready indication.
    
    Signed-off-by: Tomer Tayar <Tomer.Tayar@cavium.com>
    Signed-off-by: Ariel Elior <Ariel.Elior@cavium.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c91ab927a8b7116967e8ed4d108ab7a44c06cfd4
Author: Tomer Tayar <Tomer.Tayar@cavium.com>
Date:   Mon Aug 20 00:01:42 2018 +0300

    qed: Wait for ready indication before rereading the shmem
    
    [ Upstream commit f00d25f3154b676fcea4502a25b94bd7f142ca74 ]
    
    The MFW might be reset and re-update its shared memory.
    Upon the detection of such a reset the driver rereads this memory, but it
    has to wait till the data is valid.
    This patch adds the missing wait for a data ready indication.
    
    Signed-off-by: Tomer Tayar <Tomer.Tayar@cavium.com>
    Signed-off-by: Ariel Elior <Ariel.Elior@cavium.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4daacc950d4d005929a5c73ecbb8d97b930a8ed9
Author: Erik Stromdahl <erik.stromdahl@gmail.com>
Date:   Tue Sep 4 15:06:13 2018 +0300

    ath10k: htt: RX ring config HL support
    
    Special HTT RX ring config message used by high latency
    devices.
    
    The main difference between HL and LL is that HL devices
    do not use shared memory between device and host and thus,
    no host paddr's are added to the RX config message.
    
    Signed-off-by: Erik Stromdahl <erik.stromdahl@gmail.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit f00d25f3154b676fcea4502a25b94bd7f142ca74
Author: Tomer Tayar <Tomer.Tayar@cavium.com>
Date:   Mon Aug 20 00:01:42 2018 +0300

    qed: Wait for ready indication before rereading the shmem
    
    The MFW might be reset and re-update its shared memory.
    Upon the detection of such a reset the driver rereads this memory, but it
    has to wait till the data is valid.
    This patch adds the missing wait for a data ready indication.
    
    Signed-off-by: Tomer Tayar <Tomer.Tayar@cavium.com>
    Signed-off-by: Ariel Elior <Ariel.Elior@cavium.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 80755071c18c1cf1155fe533c1d0901f894b43ea
Author: Jane Chu <jane.chu@oracle.com>
Date:   Thu Aug 2 15:36:05 2018 -0700

    ipc/shm.c add ->pagesize function to shm_vm_ops
    
    commit eec3636ad198d4ac61e574cb122cb67e9bef5492 upstream.
    
    Commit 05ea88608d4e ("mm, hugetlbfs: introduce ->pagesize() to
    vm_operations_struct") adds a new ->pagesize() function to
    hugetlb_vm_ops, intended to cover all hugetlbfs backed files.
    
    With System V shared memory model, if "huge page" is specified, the
    "shared memory" is backed by hugetlbfs files, but the mappings initiated
    via shmget/shmat have their original vm_ops overwritten with shm_vm_ops,
    so we need to add a ->pagesize function to shm_vm_ops.  Otherwise,
    vma_kernel_pagesize() returns PAGE_SIZE given a hugetlbfs backed vma,
    result in below BUG:
    
      fs/hugetlbfs/inode.c
            443             if (unlikely(page_mapped(page))) {
            444                     BUG_ON(truncate_op);
    
    resulting in
    
      hugetlbfs: oracle (4592): Using mlock ulimits for SHM_HUGETLB is deprecated
      ------------[ cut here ]------------
      kernel BUG at fs/hugetlbfs/inode.c:444!
      Modules linked in: nfsv3 rpcsec_gss_krb5 nfsv4 ...
      CPU: 35 PID: 5583 Comm: oracle_5583_sbt Not tainted 4.14.35-1829.el7uek.x86_64 #2
      RIP: 0010:remove_inode_hugepages+0x3db/0x3e2
      ....
      Call Trace:
        hugetlbfs_evict_inode+0x1e/0x3e
        evict+0xdb/0x1af
        iput+0x1a2/0x1f7
        dentry_unlink_inode+0xc6/0xf0
        __dentry_kill+0xd8/0x18d
        dput+0x1b5/0x1ed
        __fput+0x18b/0x216
        ____fput+0xe/0x10
        task_work_run+0x90/0xa7
        exit_to_usermode_loop+0xdd/0x116
        do_syscall_64+0x187/0x1ae
        entry_SYSCALL_64_after_hwframe+0x150/0x0
    
    [jane.chu@oracle.com: relocate comment]
      Link: http://lkml.kernel.org/r/20180731044831.26036-1-jane.chu@oracle.com
    Link: http://lkml.kernel.org/r/20180727211727.5020-1-jane.chu@oracle.com
    Fixes: 05ea88608d4e13 ("mm, hugetlbfs: introduce ->pagesize() to vm_operations_struct")
    Signed-off-by: Jane Chu <jane.chu@oracle.com>
    Suggested-by: Mike Kravetz <mike.kravetz@oracle.com>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Acked-by: Davidlohr Bueso <dave@stgolabs.net>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Jan Kara <jack@suse.cz>
    Cc: Jérôme Glisse <jglisse@redhat.com>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit eec3636ad198d4ac61e574cb122cb67e9bef5492
Author: Jane Chu <jane.chu@oracle.com>
Date:   Thu Aug 2 15:36:05 2018 -0700

    ipc/shm.c add ->pagesize function to shm_vm_ops
    
    Commit 05ea88608d4e ("mm, hugetlbfs: introduce ->pagesize() to
    vm_operations_struct") adds a new ->pagesize() function to
    hugetlb_vm_ops, intended to cover all hugetlbfs backed files.
    
    With System V shared memory model, if "huge page" is specified, the
    "shared memory" is backed by hugetlbfs files, but the mappings initiated
    via shmget/shmat have their original vm_ops overwritten with shm_vm_ops,
    so we need to add a ->pagesize function to shm_vm_ops.  Otherwise,
    vma_kernel_pagesize() returns PAGE_SIZE given a hugetlbfs backed vma,
    result in below BUG:
    
      fs/hugetlbfs/inode.c
            443             if (unlikely(page_mapped(page))) {
            444                     BUG_ON(truncate_op);
    
    resulting in
    
      hugetlbfs: oracle (4592): Using mlock ulimits for SHM_HUGETLB is deprecated
      ------------[ cut here ]------------
      kernel BUG at fs/hugetlbfs/inode.c:444!
      Modules linked in: nfsv3 rpcsec_gss_krb5 nfsv4 ...
      CPU: 35 PID: 5583 Comm: oracle_5583_sbt Not tainted 4.14.35-1829.el7uek.x86_64 #2
      RIP: 0010:remove_inode_hugepages+0x3db/0x3e2
      ....
      Call Trace:
        hugetlbfs_evict_inode+0x1e/0x3e
        evict+0xdb/0x1af
        iput+0x1a2/0x1f7
        dentry_unlink_inode+0xc6/0xf0
        __dentry_kill+0xd8/0x18d
        dput+0x1b5/0x1ed
        __fput+0x18b/0x216
        ____fput+0xe/0x10
        task_work_run+0x90/0xa7
        exit_to_usermode_loop+0xdd/0x116
        do_syscall_64+0x187/0x1ae
        entry_SYSCALL_64_after_hwframe+0x150/0x0
    
    [jane.chu@oracle.com: relocate comment]
      Link: http://lkml.kernel.org/r/20180731044831.26036-1-jane.chu@oracle.com
    Link: http://lkml.kernel.org/r/20180727211727.5020-1-jane.chu@oracle.com
    Fixes: 05ea88608d4e13 ("mm, hugetlbfs: introduce ->pagesize() to vm_operations_struct")
    Signed-off-by: Jane Chu <jane.chu@oracle.com>
    Suggested-by: Mike Kravetz <mike.kravetz@oracle.com>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Acked-by: Davidlohr Bueso <dave@stgolabs.net>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Jan Kara <jack@suse.cz>
    Cc: Jérôme Glisse <jglisse@redhat.com>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 684b89bc39ce4f204b1a2b180f39f2eb36a6b695
Author: Sebastian Ott <sebott@linux.ibm.com>
Date:   Thu Jun 28 19:05:13 2018 +0200

    s390/ism: add device driver for internal shared memory
    
    Add support for the Internal Shared Memory vPCI Adapter.
    This driver implements the interfaces of the SMC-D protocol.
    
    Signed-off-by: Sebastian Ott <sebott@linux.ibm.com>
    Signed-off-by: Ursula Braun <ubraun@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c6ba7c9ba43de1b57e9a53946e7ff988554c84ed
Author: Hans Wippel <hwippel@linux.ibm.com>
Date:   Thu Jun 28 19:05:07 2018 +0200

    net/smc: add base infrastructure for SMC-D and ISM
    
    SMC supports two variants: SMC-R and SMC-D. For data transport, SMC-R
    uses RDMA devices, SMC-D uses so-called Internal Shared Memory (ISM)
    devices. An ISM device only allows shared memory communication between
    SMC instances on the same machine. For example, this allows virtual
    machines on the same host to communicate via SMC without RDMA devices.
    
    This patch adds the base infrastructure for SMC-D and ISM devices to
    the existing SMC code. It contains the following:
    
    * ISM driver interface:
      This interface allows an ISM driver to register ISM devices in SMC. In
      the process, the driver provides a set of device ops for each device.
      SMC uses these ops to execute SMC specific operations on or transfer
      data over the device.
    
    * Core SMC-D link group, connection, and buffer support:
      Link groups, SMC connections and SMC buffers (in smc_core) are
      extended to support SMC-D.
    
    * SMC type checks:
      Some type checks are added to prevent using SMC-R specific code for
      SMC-D and vice versa.
    
    To actually use SMC-D, additional changes to pnetid, CLC, CDC, etc. are
    required. These are added in follow-up patches.
    
    Signed-off-by: Hans Wippel <hwippel@linux.ibm.com>
    Signed-off-by: Ursula Braun <ubraun@linux.ibm.com>
    Suggested-by: Thomas Richter <tmricht@linux.ibm.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 46d6ee12fa9dc094193b06be3d4db236cfa564a9
Author: Etienne Carriere <etienne.carriere@linaro.org>
Date:   Sun Apr 29 14:22:29 2018 +0200

    tee: check shm references are consistent in offset/size
    
    [ Upstream commit ab9d3db5b320a052452b9cd035599ee3c84bbee9 ]
    
    This change prevents userland from referencing TEE shared memory
    outside the area initially allocated by its owner. Prior this change an
    application could not reference or access memory it did not own but
    it could reference memory not explicitly allocated by owner but still
    allocated to the owner due to the memory allocation granule.
    
    Reported-by: Alexandre Jutras <alexandre.jutras@nxp.com>
    Signed-off-by: Etienne Carriere <etienne.carriere@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit c6735890bcdf6256b8f89c1dcfd7e61c43e6db38
Author: Etienne Carriere <etienne.carriere@linaro.org>
Date:   Sun Apr 29 14:22:29 2018 +0200

    tee: check shm references are consistent in offset/size
    
    [ Upstream commit ab9d3db5b320a052452b9cd035599ee3c84bbee9 ]
    
    This change prevents userland from referencing TEE shared memory
    outside the area initially allocated by its owner. Prior this change an
    application could not reference or access memory it did not own but
    it could reference memory not explicitly allocated by owner but still
    allocated to the owner due to the memory allocation granule.
    
    Reported-by: Alexandre Jutras <alexandre.jutras@nxp.com>
    Signed-off-by: Etienne Carriere <etienne.carriere@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 3249527f19d660c5adfb2b6f4ffd4ca0506b8755
Author: Sahil Malhotra <sahil.malhotra@nxp.com>
Date:   Fri Jun 8 12:38:13 2018 +0530

    tee: optee: making OPTEE_SHM_NUM_PRIV_PAGES configurable via Kconfig
    
    This change adds KCONFIG option to set number of pages out of
    whole shared memory to be used for OP-TEE driver private data
    structures.
    
    Signed-off-by: Sahil Malhotra <sahil.malhotra@nxp.com>
    [jw: fixing trivial merge conflict]
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

commit b5fabb080062e7685b898e9c0ec4d95f4d526ed2
Author: Sudarsana Reddy Kalluru <sudarsana.kalluru@cavium.com>
Date:   Thu May 31 18:47:37 2018 -0700

    qed: Fix use of incorrect shmem address.
    
    Incorrect shared memory address is used while deriving the values
    for tc and pri_type. Use shmem address corresponding to 'oem_cfg_func'
    where the management firmare saves tc/pri_type values.
    
    Fixes: cac6f691 ("qed: Add support for Unified Fabric Port")
    Signed-off-by: Sudarsana Reddy Kalluru <Sudarsana.Kalluru@cavium.com>
    Signed-off-by: Ariel Elior <ariel.elior@cavium.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 5e9f20359a166de934b5bd02cb54c0be0e8c2890
Author: Sudarsana Reddy Kalluru <sudarsana.kalluru@cavium.com>
Date:   Thu May 31 18:47:36 2018 -0700

    qed: Fix shared memory inconsistency between driver and the MFW.
    
    The structure shared between driver and management firmware (MFW)
    differ in sizes. The additional field defined by the MFW is not
    relevant to the current driver. Add a dummy field to the structure.
    
    Fixes: cac6f691 ("qed: Add support for Unified Fabric Port")
    Signed-off-by: Sudarsana Reddy Kalluru <Sudarsana.Kalluru@cavium.com>
    Signed-off-by: Ariel Elior <ariel.elior@cavium.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9f8fd53cd05596f6792f769c9fd5fd2b0d624507
Author: Martin Brandenburg <martin@omnibond.com>
Date:   Thu May 31 16:36:59 2018 +0000

    orangefs: revamp block sizes
    
    Now the superblock block size is PAGE_SIZE.  The inode block size is
    PAGE_SIZE for directories and symlinks, but is the server-reported
    block size for regular files.
    
    The block size in the OrangeFS private inode is now deleted.  Stat
    now reports PAGE_SIZE for directories and symlinks and the
    server-reported block size for regular files.
    
    The user-space visible change is that the block size for directores
    and symlinks and the superblock is now PAGE_SIZE rather than the size of
    the client-core shared memory buffers, which was typically four
    megabytes.
    
    Reported-by: Becky Ligon <ligon@clemson.edu>
    Signed-off-by: Martin Brandenburg <martin@omnibond.com>
    Cc: hubcap@omnibond.com
    Cc: walt@omnibond.com
    Signed-off-by: Mike Marshall <hubcap@omnibond.com>

commit 7070874973eeccd867628a5c9eaefee3e832ccaa
Author: Alex Elder <elder@linaro.org>
Date:   Tue Apr 10 17:25:37 2018 -0500

    soc: qcom: smem: fix first cache entry calculation
    
    Cached items are found at the high end of an smem partition.  A
    cached item's shared memory precedes the private entry structure
    that describes it.
    
    The address of the structure describing the first cached item should
    be returned by phdr_to_first_cached_entry().  However the function
    calculates the start address using the wrong structure size.
    
    Fix this by computing the first item's entry structure address by
    subtracting the size of a private entry structure rather than a
    partition header structure.
    
    Signed-off-by: Alex Elder <elder@linaro.org>
    Reviewed-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Andy Gross <andy.gross@linaro.org>

commit 312416d9171a1460b7ed8d182b5b540c910ce80d
Author: Mahesh Sivasubramanian <msivasub@codeaurora.org>
Date:   Tue Apr 10 11:57:23 2018 -0600

    drivers: qcom: add command DB driver
    
    Command DB is a simple database in the shared memory of QCOM SoCs, that
    provides information regarding shared resources. Some shared resources
    in the SoC have properties that are probed dynamically at boot by the
    remote processor. The information pertaining to the SoC and the platform
    are made available in the shared memory. Drivers can query this
    information using predefined strings.
    
    Signed-off-by: Mahesh Sivasubramanian <msivasub@codeaurora.org>
    Signed-off-by: Lina Iyer <ilina@codeaurora.org>
    Reviewed-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Reviewed-by: Stephen Boyd <swboyd@chromium.org>
    Signed-off-by: Andy Gross <andy.gross@linaro.org>

commit 9a81cc23dfef24e254d3ff15c52bf46f0736f4c2
Author: Daniel Mack <daniel@zonque.org>
Date:   Wed May 23 11:14:22 2018 +0300

    wcn36xx: fix buffer commit logic on TX path
    
    When wcn36xx_dxe_tx_frame() is entered while the device is still processing
    the queue asyncronously, we are racing against the firmware code with
    updates to the buffer descriptors. Presumably, the firmware scans the ring
    buffer that holds the descriptors and scans for a valid control descriptor,
    and then assumes that the next descriptor contains the payload. If, however,
    the control descriptor is marked valid, but the payload descriptor isn't,
    the packet is not sent out.
    
    Another issue with the current code is that is lacks memory barriers before
    descriptors are marked valid. This is important because the CPU may reorder
    writes to memory, even if it is allocated as coherent DMA area, and hence
    the device may see incompletely written data.
    
    To fix this, the code in wcn36xx_dxe_tx_frame() was restructured a bit so
    that the payload descriptor is made valid before the control descriptor.
    Memory barriers are added to ensure coherency of shared memory areas.
    
    Signed-off-by: Daniel Mack <daniel@zonque.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit 290fa8d708e08f419b37c7f18445dcf6de5b7e5c
Author: Mahesh Sivasubramanian <msivasub@codeaurora.org>
Date:   Tue Apr 10 11:57:24 2018 -0600

    dt-bindings: introduce Command DB for QCOM SoCs
    
    Command DB provides information on shared resources like clocks,
    regulators etc., probed at boot by the remote subsytem and made
    available in shared memory.
    
    Cc: devicetree@vger.kernel.org
    Signed-off-by: Mahesh Sivasubramanian <msivasub@codeaurora.org>
    Signed-off-by: Lina Iyer <ilina@codeaurora.org>
    Reviewed-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Reviewed-by: Rob Herring <robh@kernel.org>
    Reviewed-by: Stephen Boyd <swboyd@chromium.org>
    Reviewed-by: Evan Green <evgreen@chromium.org>
    Signed-off-by: Andy Gross <andy.gross@linaro.org>

commit 2528c389936efbbece25088426fe7c3c91ff355f
Author: Sudarsana Reddy Kalluru <sudarsana.kalluru@cavium.com>
Date:   Tue May 22 00:28:38 2018 -0700

    qed: Add support for tlv request processing.
    
    The patch adds driver support for processing TLV requests/repsonses
    from the mfw and upper driver layers respectively. The implementation
    reads the requested TLVs from the shared memory, requests the values
    from upper layer drivers, populates this info (TLVs) shared memory and
    notifies MFW about the TLV values.
    
    Signed-off-by: Sudarsana Reddy Kalluru <Sudarsana.Kalluru@cavium.com>
    Signed-off-by: Ariel Elior <ariel.elior@cavium.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ae0db7d167ae098307f0c0c27d6a30ae90ca6940
Author: Eric Biggers <ebiggers@google.com>
Date:   Fri Apr 13 15:35:30 2018 -0700

    ipc/shm: fix use-after-free of shm file via remap_file_pages()
    
    [ Upstream commit 3f05317d9889ab75c7190dcd39491d2a97921984 ]
    
    syzbot reported a use-after-free of shm_file_data(file)->file->f_op in
    shm_get_unmapped_area(), called via sys_remap_file_pages().
    
    Unfortunately it couldn't generate a reproducer, but I found a bug which
    I think caused it.  When remap_file_pages() is passed a full System V
    shared memory segment, the memory is first unmapped, then a new map is
    created using the ->vm_file.  Between these steps, the shm ID can be
    removed and reused for a new shm segment.  But, shm_mmap() only checks
    whether the ID is currently valid before calling the underlying file's
    ->mmap(); it doesn't check whether it was reused.  Thus it can use the
    wrong underlying file, one that was already freed.
    
    Fix this by making the "outer" shm file (the one that gets put in
    ->vm_file) hold a reference to the real shm file, and by making
    __shm_open() require that the file associated with the shm ID matches
    the one associated with the "outer" file.
    
    Taking the reference to the real shm file is needed to fully solve the
    problem, since otherwise sfd->file could point to a freed file, which
    then could be reallocated for the reused shm ID, causing the wrong shm
    segment to be mapped (and without the required permission checks).
    
    Commit 1ac0b6dec656 ("ipc/shm: handle removed segments gracefully in
    shm_mmap()") almost fixed this bug, but it didn't go far enough because
    it didn't consider the case where the shm ID is reused.
    
    The following program usually reproduces this bug:
    
            #include <stdlib.h>
            #include <sys/shm.h>
            #include <sys/syscall.h>
            #include <unistd.h>
    
            int main()
            {
                    int is_parent = (fork() != 0);
                    srand(getpid());
                    for (;;) {
                            int id = shmget(0xF00F, 4096, IPC_CREAT|0700);
                            if (is_parent) {
                                    void *addr = shmat(id, NULL, 0);
                                    usleep(rand() % 50);
                                    while (!syscall(__NR_remap_file_pages, addr, 4096, 0, 0, 0));
                            } else {
                                    usleep(rand() % 50);
                                    shmctl(id, IPC_RMID, NULL);
                            }
                    }
            }
    
    It causes the following NULL pointer dereference due to a 'struct file'
    being used while it's being freed.  (I couldn't actually get a KASAN
    use-after-free splat like in the syzbot report.  But I think it's
    possible with this bug; it would just take a more extraordinary race...)
    
            BUG: unable to handle kernel NULL pointer dereference at 0000000000000058
            PGD 0 P4D 0
            Oops: 0000 [#1] SMP NOPTI
            CPU: 9 PID: 258 Comm: syz_ipc Not tainted 4.16.0-05140-gf8cf2f16a7c95 #189
            Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.11.0-20171110_100015-anatol 04/01/2014
            RIP: 0010:d_inode include/linux/dcache.h:519 [inline]
            RIP: 0010:touch_atime+0x25/0xd0 fs/inode.c:1724
            [...]
            Call Trace:
             file_accessed include/linux/fs.h:2063 [inline]
             shmem_mmap+0x25/0x40 mm/shmem.c:2149
             call_mmap include/linux/fs.h:1789 [inline]
             shm_mmap+0x34/0x80 ipc/shm.c:465
             call_mmap include/linux/fs.h:1789 [inline]
             mmap_region+0x309/0x5b0 mm/mmap.c:1712
             do_mmap+0x294/0x4a0 mm/mmap.c:1483
             do_mmap_pgoff include/linux/mm.h:2235 [inline]
             SYSC_remap_file_pages mm/mmap.c:2853 [inline]
             SyS_remap_file_pages+0x232/0x310 mm/mmap.c:2769
             do_syscall_64+0x64/0x1a0 arch/x86/entry/common.c:287
             entry_SYSCALL_64_after_hwframe+0x42/0xb7
    
    [ebiggers@google.com: add comment]
      Link: http://lkml.kernel.org/r/20180410192850.235835-1-ebiggers3@gmail.com
    Link: http://lkml.kernel.org/r/20180409043039.28915-1-ebiggers3@gmail.com
    Reported-by: syzbot+d11f321e7f1923157eac80aa990b446596f46439@syzkaller.appspotmail.com
    Fixes: c8d78c1823f4 ("mm: replace remap_file_pages() syscall with emulation")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Acked-by: Davidlohr Bueso <dbueso@suse.de>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Cc: "Eric W . Biederman" <ebiederm@xmission.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <alexander.levin@microsoft.com>

commit ab9d3db5b320a052452b9cd035599ee3c84bbee9
Author: Etienne Carriere <etienne.carriere@linaro.org>
Date:   Sun Apr 29 14:22:29 2018 +0200

    tee: check shm references are consistent in offset/size
    
    This change prevents userland from referencing TEE shared memory
    outside the area initially allocated by its owner. Prior this change an
    application could not reference or access memory it did not own but
    it could reference memory not explicitly allocated by owner but still
    allocated to the owner due to the memory allocation granule.
    
    Reported-by: Alexandre Jutras <alexandre.jutras@nxp.com>
    Signed-off-by: Etienne Carriere <etienne.carriere@linaro.org>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

commit ba1d1726d7afd4aebc038213f096e4fe054729ef
Author: Eric Biggers <ebiggers@google.com>
Date:   Fri Apr 13 15:35:30 2018 -0700

    ipc/shm: fix use-after-free of shm file via remap_file_pages()
    
    commit 3f05317d9889ab75c7190dcd39491d2a97921984 upstream.
    
    syzbot reported a use-after-free of shm_file_data(file)->file->f_op in
    shm_get_unmapped_area(), called via sys_remap_file_pages().
    
    Unfortunately it couldn't generate a reproducer, but I found a bug which
    I think caused it.  When remap_file_pages() is passed a full System V
    shared memory segment, the memory is first unmapped, then a new map is
    created using the ->vm_file.  Between these steps, the shm ID can be
    removed and reused for a new shm segment.  But, shm_mmap() only checks
    whether the ID is currently valid before calling the underlying file's
    ->mmap(); it doesn't check whether it was reused.  Thus it can use the
    wrong underlying file, one that was already freed.
    
    Fix this by making the "outer" shm file (the one that gets put in
    ->vm_file) hold a reference to the real shm file, and by making
    __shm_open() require that the file associated with the shm ID matches
    the one associated with the "outer" file.
    
    Taking the reference to the real shm file is needed to fully solve the
    problem, since otherwise sfd->file could point to a freed file, which
    then could be reallocated for the reused shm ID, causing the wrong shm
    segment to be mapped (and without the required permission checks).
    
    Commit 1ac0b6dec656 ("ipc/shm: handle removed segments gracefully in
    shm_mmap()") almost fixed this bug, but it didn't go far enough because
    it didn't consider the case where the shm ID is reused.
    
    The following program usually reproduces this bug:
    
            #include <stdlib.h>
            #include <sys/shm.h>
            #include <sys/syscall.h>
            #include <unistd.h>
    
            int main()
            {
                    int is_parent = (fork() != 0);
                    srand(getpid());
                    for (;;) {
                            int id = shmget(0xF00F, 4096, IPC_CREAT|0700);
                            if (is_parent) {
                                    void *addr = shmat(id, NULL, 0);
                                    usleep(rand() % 50);
                                    while (!syscall(__NR_remap_file_pages, addr, 4096, 0, 0, 0));
                            } else {
                                    usleep(rand() % 50);
                                    shmctl(id, IPC_RMID, NULL);
                            }
                    }
            }
    
    It causes the following NULL pointer dereference due to a 'struct file'
    being used while it's being freed.  (I couldn't actually get a KASAN
    use-after-free splat like in the syzbot report.  But I think it's
    possible with this bug; it would just take a more extraordinary race...)
    
            BUG: unable to handle kernel NULL pointer dereference at 0000000000000058
            PGD 0 P4D 0
            Oops: 0000 [#1] SMP NOPTI
            CPU: 9 PID: 258 Comm: syz_ipc Not tainted 4.16.0-05140-gf8cf2f16a7c95 #189
            Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.11.0-20171110_100015-anatol 04/01/2014
            RIP: 0010:d_inode include/linux/dcache.h:519 [inline]
            RIP: 0010:touch_atime+0x25/0xd0 fs/inode.c:1724
            [...]
            Call Trace:
             file_accessed include/linux/fs.h:2063 [inline]
             shmem_mmap+0x25/0x40 mm/shmem.c:2149
             call_mmap include/linux/fs.h:1789 [inline]
             shm_mmap+0x34/0x80 ipc/shm.c:465
             call_mmap include/linux/fs.h:1789 [inline]
             mmap_region+0x309/0x5b0 mm/mmap.c:1712
             do_mmap+0x294/0x4a0 mm/mmap.c:1483
             do_mmap_pgoff include/linux/mm.h:2235 [inline]
             SYSC_remap_file_pages mm/mmap.c:2853 [inline]
             SyS_remap_file_pages+0x232/0x310 mm/mmap.c:2769
             do_syscall_64+0x64/0x1a0 arch/x86/entry/common.c:287
             entry_SYSCALL_64_after_hwframe+0x42/0xb7
    
    [ebiggers@google.com: add comment]
      Link: http://lkml.kernel.org/r/20180410192850.235835-1-ebiggers3@gmail.com
    Link: http://lkml.kernel.org/r/20180409043039.28915-1-ebiggers3@gmail.com
    Reported-by: syzbot+d11f321e7f1923157eac80aa990b446596f46439@syzkaller.appspotmail.com
    Fixes: c8d78c1823f4 ("mm: replace remap_file_pages() syscall with emulation")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Acked-by: Davidlohr Bueso <dbueso@suse.de>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Cc: "Eric W . Biederman" <ebiederm@xmission.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 703eee654360679660c813a591176c7bf4016254
Author: Eric Biggers <ebiggers@google.com>
Date:   Fri Apr 13 15:35:30 2018 -0700

    ipc/shm: fix use-after-free of shm file via remap_file_pages()
    
    commit 3f05317d9889ab75c7190dcd39491d2a97921984 upstream.
    
    syzbot reported a use-after-free of shm_file_data(file)->file->f_op in
    shm_get_unmapped_area(), called via sys_remap_file_pages().
    
    Unfortunately it couldn't generate a reproducer, but I found a bug which
    I think caused it.  When remap_file_pages() is passed a full System V
    shared memory segment, the memory is first unmapped, then a new map is
    created using the ->vm_file.  Between these steps, the shm ID can be
    removed and reused for a new shm segment.  But, shm_mmap() only checks
    whether the ID is currently valid before calling the underlying file's
    ->mmap(); it doesn't check whether it was reused.  Thus it can use the
    wrong underlying file, one that was already freed.
    
    Fix this by making the "outer" shm file (the one that gets put in
    ->vm_file) hold a reference to the real shm file, and by making
    __shm_open() require that the file associated with the shm ID matches
    the one associated with the "outer" file.
    
    Taking the reference to the real shm file is needed to fully solve the
    problem, since otherwise sfd->file could point to a freed file, which
    then could be reallocated for the reused shm ID, causing the wrong shm
    segment to be mapped (and without the required permission checks).
    
    Commit 1ac0b6dec656 ("ipc/shm: handle removed segments gracefully in
    shm_mmap()") almost fixed this bug, but it didn't go far enough because
    it didn't consider the case where the shm ID is reused.
    
    The following program usually reproduces this bug:
    
            #include <stdlib.h>
            #include <sys/shm.h>
            #include <sys/syscall.h>
            #include <unistd.h>
    
            int main()
            {
                    int is_parent = (fork() != 0);
                    srand(getpid());
                    for (;;) {
                            int id = shmget(0xF00F, 4096, IPC_CREAT|0700);
                            if (is_parent) {
                                    void *addr = shmat(id, NULL, 0);
                                    usleep(rand() % 50);
                                    while (!syscall(__NR_remap_file_pages, addr, 4096, 0, 0, 0));
                            } else {
                                    usleep(rand() % 50);
                                    shmctl(id, IPC_RMID, NULL);
                            }
                    }
            }
    
    It causes the following NULL pointer dereference due to a 'struct file'
    being used while it's being freed.  (I couldn't actually get a KASAN
    use-after-free splat like in the syzbot report.  But I think it's
    possible with this bug; it would just take a more extraordinary race...)
    
            BUG: unable to handle kernel NULL pointer dereference at 0000000000000058
            PGD 0 P4D 0
            Oops: 0000 [#1] SMP NOPTI
            CPU: 9 PID: 258 Comm: syz_ipc Not tainted 4.16.0-05140-gf8cf2f16a7c95 #189
            Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.11.0-20171110_100015-anatol 04/01/2014
            RIP: 0010:d_inode include/linux/dcache.h:519 [inline]
            RIP: 0010:touch_atime+0x25/0xd0 fs/inode.c:1724
            [...]
            Call Trace:
             file_accessed include/linux/fs.h:2063 [inline]
             shmem_mmap+0x25/0x40 mm/shmem.c:2149
             call_mmap include/linux/fs.h:1789 [inline]
             shm_mmap+0x34/0x80 ipc/shm.c:465
             call_mmap include/linux/fs.h:1789 [inline]
             mmap_region+0x309/0x5b0 mm/mmap.c:1712
             do_mmap+0x294/0x4a0 mm/mmap.c:1483
             do_mmap_pgoff include/linux/mm.h:2235 [inline]
             SYSC_remap_file_pages mm/mmap.c:2853 [inline]
             SyS_remap_file_pages+0x232/0x310 mm/mmap.c:2769
             do_syscall_64+0x64/0x1a0 arch/x86/entry/common.c:287
             entry_SYSCALL_64_after_hwframe+0x42/0xb7
    
    [ebiggers@google.com: add comment]
      Link: http://lkml.kernel.org/r/20180410192850.235835-1-ebiggers3@gmail.com
    Link: http://lkml.kernel.org/r/20180409043039.28915-1-ebiggers3@gmail.com
    Reported-by: syzbot+d11f321e7f1923157eac80aa990b446596f46439@syzkaller.appspotmail.com
    Fixes: c8d78c1823f4 ("mm: replace remap_file_pages() syscall with emulation")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Acked-by: Davidlohr Bueso <dbueso@suse.de>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Cc: "Eric W . Biederman" <ebiederm@xmission.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 570ef10de6304dc20239d30a47b36c12e341d4be
Author: Eric Biggers <ebiggers@google.com>
Date:   Fri Apr 13 15:35:30 2018 -0700

    ipc/shm: fix use-after-free of shm file via remap_file_pages()
    
    commit 3f05317d9889ab75c7190dcd39491d2a97921984 upstream.
    
    syzbot reported a use-after-free of shm_file_data(file)->file->f_op in
    shm_get_unmapped_area(), called via sys_remap_file_pages().
    
    Unfortunately it couldn't generate a reproducer, but I found a bug which
    I think caused it.  When remap_file_pages() is passed a full System V
    shared memory segment, the memory is first unmapped, then a new map is
    created using the ->vm_file.  Between these steps, the shm ID can be
    removed and reused for a new shm segment.  But, shm_mmap() only checks
    whether the ID is currently valid before calling the underlying file's
    ->mmap(); it doesn't check whether it was reused.  Thus it can use the
    wrong underlying file, one that was already freed.
    
    Fix this by making the "outer" shm file (the one that gets put in
    ->vm_file) hold a reference to the real shm file, and by making
    __shm_open() require that the file associated with the shm ID matches
    the one associated with the "outer" file.
    
    Taking the reference to the real shm file is needed to fully solve the
    problem, since otherwise sfd->file could point to a freed file, which
    then could be reallocated for the reused shm ID, causing the wrong shm
    segment to be mapped (and without the required permission checks).
    
    Commit 1ac0b6dec656 ("ipc/shm: handle removed segments gracefully in
    shm_mmap()") almost fixed this bug, but it didn't go far enough because
    it didn't consider the case where the shm ID is reused.
    
    The following program usually reproduces this bug:
    
            #include <stdlib.h>
            #include <sys/shm.h>
            #include <sys/syscall.h>
            #include <unistd.h>
    
            int main()
            {
                    int is_parent = (fork() != 0);
                    srand(getpid());
                    for (;;) {
                            int id = shmget(0xF00F, 4096, IPC_CREAT|0700);
                            if (is_parent) {
                                    void *addr = shmat(id, NULL, 0);
                                    usleep(rand() % 50);
                                    while (!syscall(__NR_remap_file_pages, addr, 4096, 0, 0, 0));
                            } else {
                                    usleep(rand() % 50);
                                    shmctl(id, IPC_RMID, NULL);
                            }
                    }
            }
    
    It causes the following NULL pointer dereference due to a 'struct file'
    being used while it's being freed.  (I couldn't actually get a KASAN
    use-after-free splat like in the syzbot report.  But I think it's
    possible with this bug; it would just take a more extraordinary race...)
    
            BUG: unable to handle kernel NULL pointer dereference at 0000000000000058
            PGD 0 P4D 0
            Oops: 0000 [#1] SMP NOPTI
            CPU: 9 PID: 258 Comm: syz_ipc Not tainted 4.16.0-05140-gf8cf2f16a7c95 #189
            Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.11.0-20171110_100015-anatol 04/01/2014
            RIP: 0010:d_inode include/linux/dcache.h:519 [inline]
            RIP: 0010:touch_atime+0x25/0xd0 fs/inode.c:1724
            [...]
            Call Trace:
             file_accessed include/linux/fs.h:2063 [inline]
             shmem_mmap+0x25/0x40 mm/shmem.c:2149
             call_mmap include/linux/fs.h:1789 [inline]
             shm_mmap+0x34/0x80 ipc/shm.c:465
             call_mmap include/linux/fs.h:1789 [inline]
             mmap_region+0x309/0x5b0 mm/mmap.c:1712
             do_mmap+0x294/0x4a0 mm/mmap.c:1483
             do_mmap_pgoff include/linux/mm.h:2235 [inline]
             SYSC_remap_file_pages mm/mmap.c:2853 [inline]
             SyS_remap_file_pages+0x232/0x310 mm/mmap.c:2769
             do_syscall_64+0x64/0x1a0 arch/x86/entry/common.c:287
             entry_SYSCALL_64_after_hwframe+0x42/0xb7
    
    [ebiggers@google.com: add comment]
      Link: http://lkml.kernel.org/r/20180410192850.235835-1-ebiggers3@gmail.com
    Link: http://lkml.kernel.org/r/20180409043039.28915-1-ebiggers3@gmail.com
    Reported-by: syzbot+d11f321e7f1923157eac80aa990b446596f46439@syzkaller.appspotmail.com
    Fixes: c8d78c1823f4 ("mm: replace remap_file_pages() syscall with emulation")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Acked-by: Davidlohr Bueso <dbueso@suse.de>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Cc: "Eric W . Biederman" <ebiederm@xmission.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b7e06a79c2e3a7e16ad1ed4887cad9a103ca355d
Author: Eric Biggers <ebiggers@google.com>
Date:   Fri Apr 13 15:35:30 2018 -0700

    ipc/shm: fix use-after-free of shm file via remap_file_pages()
    
    commit 3f05317d9889ab75c7190dcd39491d2a97921984 upstream.
    
    syzbot reported a use-after-free of shm_file_data(file)->file->f_op in
    shm_get_unmapped_area(), called via sys_remap_file_pages().
    
    Unfortunately it couldn't generate a reproducer, but I found a bug which
    I think caused it.  When remap_file_pages() is passed a full System V
    shared memory segment, the memory is first unmapped, then a new map is
    created using the ->vm_file.  Between these steps, the shm ID can be
    removed and reused for a new shm segment.  But, shm_mmap() only checks
    whether the ID is currently valid before calling the underlying file's
    ->mmap(); it doesn't check whether it was reused.  Thus it can use the
    wrong underlying file, one that was already freed.
    
    Fix this by making the "outer" shm file (the one that gets put in
    ->vm_file) hold a reference to the real shm file, and by making
    __shm_open() require that the file associated with the shm ID matches
    the one associated with the "outer" file.
    
    Taking the reference to the real shm file is needed to fully solve the
    problem, since otherwise sfd->file could point to a freed file, which
    then could be reallocated for the reused shm ID, causing the wrong shm
    segment to be mapped (and without the required permission checks).
    
    Commit 1ac0b6dec656 ("ipc/shm: handle removed segments gracefully in
    shm_mmap()") almost fixed this bug, but it didn't go far enough because
    it didn't consider the case where the shm ID is reused.
    
    The following program usually reproduces this bug:
    
            #include <stdlib.h>
            #include <sys/shm.h>
            #include <sys/syscall.h>
            #include <unistd.h>
    
            int main()
            {
                    int is_parent = (fork() != 0);
                    srand(getpid());
                    for (;;) {
                            int id = shmget(0xF00F, 4096, IPC_CREAT|0700);
                            if (is_parent) {
                                    void *addr = shmat(id, NULL, 0);
                                    usleep(rand() % 50);
                                    while (!syscall(__NR_remap_file_pages, addr, 4096, 0, 0, 0));
                            } else {
                                    usleep(rand() % 50);
                                    shmctl(id, IPC_RMID, NULL);
                            }
                    }
            }
    
    It causes the following NULL pointer dereference due to a 'struct file'
    being used while it's being freed.  (I couldn't actually get a KASAN
    use-after-free splat like in the syzbot report.  But I think it's
    possible with this bug; it would just take a more extraordinary race...)
    
            BUG: unable to handle kernel NULL pointer dereference at 0000000000000058
            PGD 0 P4D 0
            Oops: 0000 [#1] SMP NOPTI
            CPU: 9 PID: 258 Comm: syz_ipc Not tainted 4.16.0-05140-gf8cf2f16a7c95 #189
            Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.11.0-20171110_100015-anatol 04/01/2014
            RIP: 0010:d_inode include/linux/dcache.h:519 [inline]
            RIP: 0010:touch_atime+0x25/0xd0 fs/inode.c:1724
            [...]
            Call Trace:
             file_accessed include/linux/fs.h:2063 [inline]
             shmem_mmap+0x25/0x40 mm/shmem.c:2149
             call_mmap include/linux/fs.h:1789 [inline]
             shm_mmap+0x34/0x80 ipc/shm.c:465
             call_mmap include/linux/fs.h:1789 [inline]
             mmap_region+0x309/0x5b0 mm/mmap.c:1712
             do_mmap+0x294/0x4a0 mm/mmap.c:1483
             do_mmap_pgoff include/linux/mm.h:2235 [inline]
             SYSC_remap_file_pages mm/mmap.c:2853 [inline]
             SyS_remap_file_pages+0x232/0x310 mm/mmap.c:2769
             do_syscall_64+0x64/0x1a0 arch/x86/entry/common.c:287
             entry_SYSCALL_64_after_hwframe+0x42/0xb7
    
    [ebiggers@google.com: add comment]
      Link: http://lkml.kernel.org/r/20180410192850.235835-1-ebiggers3@gmail.com
    Link: http://lkml.kernel.org/r/20180409043039.28915-1-ebiggers3@gmail.com
    Reported-by: syzbot+d11f321e7f1923157eac80aa990b446596f46439@syzkaller.appspotmail.com
    Fixes: c8d78c1823f4 ("mm: replace remap_file_pages() syscall with emulation")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Acked-by: Davidlohr Bueso <dbueso@suse.de>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Cc: "Eric W . Biederman" <ebiederm@xmission.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9ff6fde86fd27a0c733c01114eb0d46bd3a33fb7
Author: Daniel Mack <daniel@zonque.org>
Date:   Tue Apr 10 19:35:58 2018 +0200

    wcn36xx: use READ_ONCE() to access desc->ctrl
    
    When accessing shared memory to check for the stat of submitted
    descriptors, make sure to use READ_ONCE(). This will guarantee the
    compiler treats these memory locations as volatile and doesn't apply
    any caching.
    
    While this doesn't fix any particular problem I ran into, it's best
    practice to do it this way.
    
    Note that this patch also removes the superflous extra condition check
    in the do-while loop in reap_tx_dxes(), as the loop will break
    instantly anyway in that case.
    
    Signed-off-by: Daniel Mack <daniel@zonque.org>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit 3f05317d9889ab75c7190dcd39491d2a97921984
Author: Eric Biggers <ebiggers@google.com>
Date:   Fri Apr 13 15:35:30 2018 -0700

    ipc/shm: fix use-after-free of shm file via remap_file_pages()
    
    syzbot reported a use-after-free of shm_file_data(file)->file->f_op in
    shm_get_unmapped_area(), called via sys_remap_file_pages().
    
    Unfortunately it couldn't generate a reproducer, but I found a bug which
    I think caused it.  When remap_file_pages() is passed a full System V
    shared memory segment, the memory is first unmapped, then a new map is
    created using the ->vm_file.  Between these steps, the shm ID can be
    removed and reused for a new shm segment.  But, shm_mmap() only checks
    whether the ID is currently valid before calling the underlying file's
    ->mmap(); it doesn't check whether it was reused.  Thus it can use the
    wrong underlying file, one that was already freed.
    
    Fix this by making the "outer" shm file (the one that gets put in
    ->vm_file) hold a reference to the real shm file, and by making
    __shm_open() require that the file associated with the shm ID matches
    the one associated with the "outer" file.
    
    Taking the reference to the real shm file is needed to fully solve the
    problem, since otherwise sfd->file could point to a freed file, which
    then could be reallocated for the reused shm ID, causing the wrong shm
    segment to be mapped (and without the required permission checks).
    
    Commit 1ac0b6dec656 ("ipc/shm: handle removed segments gracefully in
    shm_mmap()") almost fixed this bug, but it didn't go far enough because
    it didn't consider the case where the shm ID is reused.
    
    The following program usually reproduces this bug:
    
            #include <stdlib.h>
            #include <sys/shm.h>
            #include <sys/syscall.h>
            #include <unistd.h>
    
            int main()
            {
                    int is_parent = (fork() != 0);
                    srand(getpid());
                    for (;;) {
                            int id = shmget(0xF00F, 4096, IPC_CREAT|0700);
                            if (is_parent) {
                                    void *addr = shmat(id, NULL, 0);
                                    usleep(rand() % 50);
                                    while (!syscall(__NR_remap_file_pages, addr, 4096, 0, 0, 0));
                            } else {
                                    usleep(rand() % 50);
                                    shmctl(id, IPC_RMID, NULL);
                            }
                    }
            }
    
    It causes the following NULL pointer dereference due to a 'struct file'
    being used while it's being freed.  (I couldn't actually get a KASAN
    use-after-free splat like in the syzbot report.  But I think it's
    possible with this bug; it would just take a more extraordinary race...)
    
            BUG: unable to handle kernel NULL pointer dereference at 0000000000000058
            PGD 0 P4D 0
            Oops: 0000 [#1] SMP NOPTI
            CPU: 9 PID: 258 Comm: syz_ipc Not tainted 4.16.0-05140-gf8cf2f16a7c95 #189
            Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.11.0-20171110_100015-anatol 04/01/2014
            RIP: 0010:d_inode include/linux/dcache.h:519 [inline]
            RIP: 0010:touch_atime+0x25/0xd0 fs/inode.c:1724
            [...]
            Call Trace:
             file_accessed include/linux/fs.h:2063 [inline]
             shmem_mmap+0x25/0x40 mm/shmem.c:2149
             call_mmap include/linux/fs.h:1789 [inline]
             shm_mmap+0x34/0x80 ipc/shm.c:465
             call_mmap include/linux/fs.h:1789 [inline]
             mmap_region+0x309/0x5b0 mm/mmap.c:1712
             do_mmap+0x294/0x4a0 mm/mmap.c:1483
             do_mmap_pgoff include/linux/mm.h:2235 [inline]
             SYSC_remap_file_pages mm/mmap.c:2853 [inline]
             SyS_remap_file_pages+0x232/0x310 mm/mmap.c:2769
             do_syscall_64+0x64/0x1a0 arch/x86/entry/common.c:287
             entry_SYSCALL_64_after_hwframe+0x42/0xb7
    
    [ebiggers@google.com: add comment]
      Link: http://lkml.kernel.org/r/20180410192850.235835-1-ebiggers3@gmail.com
    Link: http://lkml.kernel.org/r/20180409043039.28915-1-ebiggers3@gmail.com
    Reported-by: syzbot+d11f321e7f1923157eac80aa990b446596f46439@syzkaller.appspotmail.com
    Fixes: c8d78c1823f4 ("mm: replace remap_file_pages() syscall with emulation")
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Acked-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Acked-by: Davidlohr Bueso <dbueso@suse.de>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Cc: "Eric W . Biederman" <ebiederm@xmission.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit c21a6970ae727839a2f300cd8dd957de0d0238c3
Author: Davidlohr Bueso <dave@stgolabs.net>
Date:   Tue Apr 10 16:35:23 2018 -0700

    ipc/shm: introduce shmctl(SHM_STAT_ANY)
    
    Patch series "sysvipc: introduce STAT_ANY commands", v2.
    
    The following patches adds the discussed (see [1]) new command for shm
    as well as for sems and msq as they are subject to the same
    discrepancies for ipc object permission checks between the syscall and
    via procfs.  These new commands are justified in that (1) we are stuck
    with this semantics as changing syscall and procfs can break userland;
    and (2) some users can benefit from performance (for large amounts of
    shm segments, for example) from not having to parse the procfs
    interface.
    
    Once merged, I will submit the necesary manpage updates.  But I'm thinking
    something like:
    
    : diff --git a/man2/shmctl.2 b/man2/shmctl.2
    : index 7bb503999941..bb00bbe21a57 100644
    : --- a/man2/shmctl.2
    : +++ b/man2/shmctl.2
    : @@ -41,6 +41,7 @@
    :  .\" 2005-04-25, mtk -- noted aberrant Linux behavior w.r.t. new
    :  .\"  attaches to a segment that has already been marked for deletion.
    :  .\" 2005-08-02, mtk: Added IPC_INFO, SHM_INFO, SHM_STAT descriptions.
    : +.\" 2018-02-13, dbueso: Added SHM_STAT_ANY description.
    :  .\"
    :  .TH SHMCTL 2 2017-09-15 "Linux" "Linux Programmer's Manual"
    :  .SH NAME
    : @@ -242,6 +243,18 @@ However, the
    :  argument is not a segment identifier, but instead an index into
    :  the kernel's internal array that maintains information about
    :  all shared memory segments on the system.
    : +.TP
    : +.BR SHM_STAT_ANY " (Linux-specific)"
    : +Return a
    : +.I shmid_ds
    : +structure as for
    : +.BR SHM_STAT .
    : +However, the
    : +.I shm_perm.mode
    : +is not checked for read access for
    : +.IR shmid ,
    : +resembing the behaviour of
    : +/proc/sysvipc/shm.
    :  .PP
    :  The caller can prevent or allow swapping of a shared
    :  memory segment with the following \fIcmd\fP values:
    : @@ -287,7 +300,7 @@ operation returns the index of the highest used entry in the
    :  kernel's internal array recording information about all
    :  shared memory segments.
    :  (This information can be used with repeated
    : -.B SHM_STAT
    : +.B SHM_STAT/SHM_STAT_ANY
    :  operations to obtain information about all shared memory segments
    :  on the system.)
    :  A successful
    : @@ -328,7 +341,7 @@ isn't accessible.
    :  \fIshmid\fP is not a valid identifier, or \fIcmd\fP
    :  is not a valid command.
    :  Or: for a
    : -.B SHM_STAT
    : +.B SHM_STAT/SHM_STAT_ANY
    :  operation, the index value specified in
    :  .I shmid
    :  referred to an array slot that is currently unused.
    
    This patch (of 3):
    
    There is a permission discrepancy when consulting shm ipc object metadata
    between /proc/sysvipc/shm (0444) and the SHM_STAT shmctl command.  The
    later does permission checks for the object vs S_IRUGO.  As such there can
    be cases where EACCESS is returned via syscall but the info is displayed
    anyways in the procfs files.
    
    While this might have security implications via info leaking (albeit no
    writing to the shm metadata), this behavior goes way back and showing all
    the objects regardless of the permissions was most likely an overlook - so
    we are stuck with it.  Furthermore, modifying either the syscall or the
    procfs file can cause userspace programs to break (ie ipcs).  Some
    applications require getting the procfs info (without root privileges) and
    can be rather slow in comparison with a syscall -- up to 500x in some
    reported cases.
    
    This patch introduces a new SHM_STAT_ANY command such that the shm ipc
    object permissions are ignored, and only audited instead.  In addition,
    I've left the lsm security hook checks in place, as if some policy can
    block the call, then the user has no other choice than just parsing the
    procfs file.
    
    [1] https://lkml.org/lkml/2017/12/19/220
    
    Link: http://lkml.kernel.org/r/20180215162458.10059-2-dave@stgolabs.net
    Signed-off-by: Davidlohr Bueso <dbueso@suse.de>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Michael Kerrisk <mtk.manpages@gmail.com>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Cc: Eric W. Biederman <ebiederm@xmission.com>
    Cc: Kees Cook <keescook@chromium.org>
    Cc: Robert Kettler <robert.kettler@outlook.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 39a4940eaa185910bb802ca9829c12268fd2c855
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Fri Mar 23 00:42:21 2018 -0500

    ipc/msg: Fix msgctl(..., IPC_STAT, ...) between pid namespaces
    
    Today msg_lspid and msg_lrpid are remembered in the pid namespace of
    the creator and the processes that last send or received a sysvipc
    message.  If you have processes in multiple pid namespaces that is
    just wrong.  The process ids reported will not make the least bit of
    sense.
    
    This fix is slightly more susceptible to a performance problem than
    the related fix for System V shared memory.  By definition the pids
    are updated by msgsnd and msgrcv, the fast path of System V message
    queues.  The only concern over the previous implementation is the
    incrementing and decrementing of the pid reference count.  As that is
    the only difference and multiple updates by of the task_tgid by
    threads in the same process have been shown in af_unix sockets to
    create a cache line ping-pong between cpus of the same processor.
    
    In this case I don't expect cache lines holding pid reference counts
    to ping pong between cpus.  As senders and receivers update different
    pids there is a natural separation there.  Further if multiple threads
    of the same process either send or receive messages the pid will be
    updated to the same value and ipc_update_pid will avoid the reference
    count update.
    
    Which means in the common case I expect msg_lspid and msg_lrpid to
    remain constant, and reference counts not to be updated when messages
    are sent.
    
    In rare cases it may be possible to trigger the issue which was
    observed for af_unix sockets, but it will require multiple processes
    with multiple threads to be either sending or receiving messages.  It
    just does not feel likely that anyone would do that in practice.
    
    This change updates msgctl(..., IPC_STAT, ...) to return msg_lspid and
    msg_lrpid in the pid namespace of the process calling stat.
    
    This change also updates cat /proc/sysvipc/msg to return print msg_lspid
    and msg_lrpid in the pid namespace of the process that opened the proc
    file.
    
    Fixes: b488893a390e ("pid namespaces: changes to show virtual ids to user")
    Reviewed-by: Nagarathnam Muthusamy <nagarathnam.muthusamy@oracle.com>
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>

commit 98f929b1bd4d0b7c7a77d0d9776d1b924db2e454
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Fri Mar 23 00:29:57 2018 -0500

    ipc/shm: Fix shmctl(..., IPC_STAT, ...) between pid namespaces.
    
    Today shm_cpid and shm_lpid are remembered in the pid namespace of the
    creator and the processes that last touched a sysvipc shared memory
    segment.   If you have processes in multiple pid namespaces that
    is just wrong, and I don't know how this has been over-looked for
    so long.
    
    As only creation and shared memory attach and shared memory detach
    update the pids I do not expect there to be a repeat of the issues
    when struct pid was attached to each af_unix skb, which in some
    notable cases cut the performance in half.  The problem was threads of
    the same process updating same struct pid from different cpus causing
    the cache line to be highly contended and bounce between cpus.
    
    As creation, attach, and detach are expected to be rare operations for
    sysvipc shared memory segments I do not expect that kind of cache line
    ping pong to cause probems.  In addition because the pid is at a fixed
    location in the structure instead of being dynamic on a skb, the
    reference count of the pid does not need to be updated on each
    operation if the pid is the same.  This ability to simply skip the pid
    reference count changes if the pid is unchanging further reduces the
    likelihood of the a cache line holding a pid reference count
    ping-ponging between cpus.
    
    Fixes: b488893a390e ("pid namespaces: changes to show virtual ids to user")
    Reviewed-by: Nagarathnam Muthusamy <nagarathnam.muthusamy@oracle.com>
    Signed-off-by: "Eric W. Biederman" <ebiederm@xmission.com>

commit 68ae3d0cac449136407fca8dc7ad2078341d67de
Author: Bjorn Andersson <bjorn.andersson@linaro.org>
Date:   Mon Feb 12 17:37:24 2018 -0800

    arm64: dts: msm8996: Add rmtfs sharedmem node
    
    A 2MB shared memory region is used on MSM8996 for exchanging sector data
    in rmtfs. Add this chunk of reserved memory now that we have the
    rmtfs-mem compatible to describe it and its memory protection
    properties.
    
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Andy Gross <andy.gross@linaro.org>

commit f46f11dc1e86270935041fbc3920ba71a050a5fd
Merge: 819d38e95f8a 02f208c5c605
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Wed Mar 7 16:45:07 2018 +0100

    Merge tag 'scmi-updates-4.17' of ssh://gitolite.kernel.org/pub/scm/linux/kernel/git/sudeep.holla/linux into next/drivers
    
    Pull "ARM SCMI support for v4.17" from Sudeep Holla:
    
    ARM System Control and Management Interface(SCMI)[1] is more flexible and
    easily extensible than any of the existing interfaces.
    
    Few existing as well as future ARM platforms provide micro-controllers
    to abstract various power and other system management tasks which have
    similar interfaces, both in terms of the functions that are provided by
    them, and in terms of how requests are communicated to them.
    
    There are quite a few protocols like ARM SCPI, TI SCI, QCOM RPM, Nvidia Tegra
    BPMP, and so on already. This specification is to standardize and avoid any
    further fragmentation in the design of such interface by various vendors.
    
    The current SCMI driver implementation is very basic and initial support.
    It lacks support for notifications, asynchronous/delayed response, perf/power
    statistics region and sensor register region.
    
    Mailbox is the only form of transport supported currently in the driver.
    SCMI supports interrupt based mailbox communication, where, on completion
    of the processing of a message, the caller receives an interrupt as well as
    polling for completion.
    
    SCMI is designed to minimize the dependency on the mailbox/transport
    hardware. So in terms of SCMI, each channel in the mailbox includes
    memory area, doorbell and completion interrupt.
    
    However the doorbell and completion interrupt is highly mailbox dependent
    which was bit of controversial as part of SCMI/mailbox discussions.
    
    Arnd and me discussed about the few aspects of SCMI and the mailbox framework:
    
    1. Use of mailbox framework for doorbell type mailbox controller:
       - Such hardware may not require any data to be sent to signal the remote
         about the presence of a message. The channel will have in-built
         information on how to trigger the signal to the remote.
         There are few mailbox controller drivers which are purely doorbell based.
         e.g.QCOM IPC, STM, Tegra, ACPI PCC,..etc
    
    2. Supporting other mailbox controller:
       - SCMI just needs a mechanism to signal the remote firmware. Such
         controller may need fixed message to be sent to trigger a doorbell.
         In such case we may need to get that data from DT and pass the same
         to the controller. It's not covered in the current DT binding, but
         can be extended as optional property in future.
    
         However handling notifications may be interesting on such mailbox, but
         again there is no way to interpret what the data field(remote message)
         means, it could be a bit mask or a number or don't-care.
    
    Arnd mentioned that he doesn't like the way the mailbox binding deals
    with doorbell-type hardware, but we do have quite a few precedent drivers
    already and changing the binding to add a data field would not make it any
    better, but could cause other problems. So he is happy with the status quo
    of SCMI implementation.
    
    [1] http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.den0056a/index.html
    
    * tag 'scmi-updates-4.17' of ssh://gitolite.kernel.org/pub/scm/linux/kernel/git/sudeep.holla/linux:
      cpufreq: scmi: add support for fast frequency switching
      cpufreq: add support for CPU DVFS based on SCMI message protocol
      hwmon: add support for sensors exported via ARM SCMI
      hwmon: (core) Add hwmon_max to hwmon_sensor_types enumeration
      clk: add support for clocks provided by SCMI
      firmware: arm_scmi: add device power domain support using genpd
      firmware: arm_scmi: add per-protocol channels support using idr objects
      firmware: arm_scmi: refactor in preparation to support per-protocol channels
      firmware: arm_scmi: add option for polling based performance domain operations
      firmware: arm_scmi: add support for polling based SCMI transfers
      firmware: arm_scmi: probe and initialise all the supported protocols
      firmware: arm_scmi: add initial support for sensor protocol
      firmware: arm_scmi: add initial support for power protocol
      firmware: arm_scmi: add initial support for clock protocol
      firmware: arm_scmi: add initial support for performance protocol
      firmware: arm_scmi: add scmi protocol bus to enumerate protocol devices
      firmware: arm_scmi: add common infrastructure and support for base protocol
      firmware: arm_scmi: add basic driver infrastructure for SCMI
      dt-bindings: arm: add support for ARM System Control and Management Interface(SCMI) protocol
      dt-bindings: mailbox: add support for mailbox client shared memory

commit d4c3751a8de2deeaae546b97650f895b62bbd1b4
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Thu Jul 20 14:39:57 2017 +0100

    firmware: arm_scmi: add support for polling based SCMI transfers
    
    It would be useful to have options to perform some SCMI transfers
    atomically by polling for the completion flag instead of interrupt
    driven. The SCMI specification has option to disable the interrupt and
    poll for the completion flag in the shared memory.
    
    This patch adds support for polling based SCMI transfers using that
    option. This might be used for uninterrupted/atomic DVFS operations
    from the scheduler context.
    
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>

commit aa4f886f3893f88146e8e02fd1e9c5c9e43cbcc1
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Tue Mar 28 11:36:07 2017 +0100

    firmware: arm_scmi: add basic driver infrastructure for SCMI
    
    The SCMI is intended to allow OSPM to manage various functions that are
    provided by the hardware platform it is running on, including power and
    performance functions. SCMI provides two levels of abstraction, protocols
    and transports. Protocols define individual groups of system control and
    management messages. A protocol specification describes the messages
    that it supports. Transports describe the method by which protocol
    messages are communicated between agents and the platform.
    
    This patch adds basic infrastructure to manage the message allocation,
    initialisation, packing/unpacking and shared memory management.
    
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>

commit 07455e4e4321129af0053c61191707ccf8289fc7
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Mon Jun 26 16:02:39 2017 +0100

    dt-bindings: mailbox: add support for mailbox client shared memory
    
    Many users of the mailbox controllers depend on the shared memory
    between the two end points to exchange the main data while using simple
    doorbell mechanism to alert the end points of the presence of a message.
    
    This patch defines device tree bindings to represent such shared memory
    in a generic way.
    
    Cc: Mark Rutland <mark.rutland@arm.com>
    Acked-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>

commit 9c4e6b1a7027f102990c0395296015a812525f4d
Author: Shakeel Butt <shakeelb@google.com>
Date:   Wed Feb 21 14:45:28 2018 -0800

    mm, mlock, vmscan: no more skipping pagevecs
    
    When a thread mlocks an address space backed either by file pages which
    are currently not present in memory or swapped out anon pages (not in
    swapcache), a new page is allocated and added to the local pagevec
    (lru_add_pvec), I/O is triggered and the thread then sleeps on the page.
    On I/O completion, the thread can wake on a different CPU, the mlock
    syscall will then sets the PageMlocked() bit of the page but will not be
    able to put that page in unevictable LRU as the page is on the pagevec
    of a different CPU.  Even on drain, that page will go to evictable LRU
    because the PageMlocked() bit is not checked on pagevec drain.
    
    The page will eventually go to right LRU on reclaim but the LRU stats
    will remain skewed for a long time.
    
    This patch puts all the pages, even unevictable, to the pagevecs and on
    the drain, the pages will be added on their LRUs correctly by checking
    their evictability.  This resolves the mlocked pages on pagevec of other
    CPUs issue because when those pagevecs will be drained, the mlocked file
    pages will go to unevictable LRU.  Also this makes the race with munlock
    easier to resolve because the pagevec drains happen in LRU lock.
    
    However there is still one place which makes a page evictable and does
    PageLRU check on that page without LRU lock and needs special attention.
    TestClearPageMlocked() and isolate_lru_page() in clear_page_mlock().
    
            #0: __pagevec_lru_add_fn        #1: clear_page_mlock
    
            SetPageLRU()                    if (!TestClearPageMlocked())
                                              return
            smp_mb() // <--required
                                            // inside does PageLRU
            if (!PageMlocked())             if (isolate_lru_page())
              move to evictable LRU           putback_lru_page()
            else
              move to unevictable LRU
    
    In '#1', TestClearPageMlocked() provides full memory barrier semantics
    and thus the PageLRU check (inside isolate_lru_page) can not be
    reordered before it.
    
    In '#0', without explicit memory barrier, the PageMlocked() check can be
    reordered before SetPageLRU().  If that happens, '#0' can put a page in
    unevictable LRU and '#1' might have just cleared the Mlocked bit of that
    page but fails to isolate as PageLRU fails as '#0' still hasn't set
    PageLRU bit of that page.  That page will be stranded on the unevictable
    LRU.
    
    There is one (good) side effect though.  Without this patch, the pages
    allocated for System V shared memory segment are added to evictable LRUs
    even after shmctl(SHM_LOCK) on that segment.  This patch will correctly
    put such pages to unevictable LRU.
    
    Link: http://lkml.kernel.org/r/20171121211241.18877-1-shakeelb@google.com
    Signed-off-by: Shakeel Butt <shakeelb@google.com>
    Acked-by: Vlastimil Babka <vbabka@suse.cz>
    Cc: Jérôme Glisse <jglisse@redhat.com>
    Cc: Huang Ying <ying.huang@intel.com>
    Cc: Tim Chen <tim.c.chen@linux.intel.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: Greg Thelen <gthelen@google.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Balbir Singh <bsingharora@gmail.com>
    Cc: Minchan Kim <minchan@kernel.org>
    Cc: Shaohua Li <shli@fb.com>
    Cc: Jan Kara <jack@suse.cz>
    Cc: Nicholas Piggin <npiggin@gmail.com>
    Cc: Dan Williams <dan.j.williams@intel.com>
    Cc: Mel Gorman <mgorman@suse.de>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit c5f58bd58f432be5d92df33c5458e0bcbee3aadf
Author: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date:   Mon Jan 29 15:20:13 2018 -0500

    membarrier: Provide GLOBAL_EXPEDITED command
    
    Allow expedited membarrier to be used for data shared between processes
    through shared memory.
    
    Processes wishing to receive the membarriers register with
    MEMBARRIER_CMD_REGISTER_GLOBAL_EXPEDITED. Those which want to issue
    membarrier invoke MEMBARRIER_CMD_GLOBAL_EXPEDITED.
    
    This allows extremely simple kernel-level implementation: we have almost
    everything we need with the PRIVATE_EXPEDITED barrier code. All we need
    to do is to add a flag in the mm_struct that will be used to check
    whether we need to send the IPI to the current thread of each CPU.
    
    There is a slight downside to this approach compared to targeting
    specific shared memory users: when performing a membarrier operation,
    all registered "global" receivers will get the barrier, even if they
    don't share a memory mapping with the sender issuing
    MEMBARRIER_CMD_GLOBAL_EXPEDITED.
    
    This registration approach seems to fit the requirement of not
    disturbing processes that really deeply care about real-time: they
    simply should not register with MEMBARRIER_CMD_REGISTER_GLOBAL_EXPEDITED.
    
    In order to align the membarrier command names, the "MEMBARRIER_CMD_SHARED"
    command is renamed to "MEMBARRIER_CMD_GLOBAL", keeping an alias of
    MEMBARRIER_CMD_SHARED to MEMBARRIER_CMD_GLOBAL for UAPI header backward
    compatibility.
    
    Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
    Acked-by: Thomas Gleixner <tglx@linutronix.de>
    Acked-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Andrea Parri <parri.andrea@gmail.com>
    Cc: Andrew Hunter <ahh@google.com>
    Cc: Andy Lutomirski <luto@kernel.org>
    Cc: Avi Kivity <avi@scylladb.com>
    Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Cc: Boqun Feng <boqun.feng@gmail.com>
    Cc: Dave Watson <davejwatson@fb.com>
    Cc: David Sehr <sehr@google.com>
    Cc: Greg Hackmann <ghackmann@google.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Maged Michael <maged.michael@gmail.com>
    Cc: Michael Ellerman <mpe@ellerman.id.au>
    Cc: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
    Cc: Paul Mackerras <paulus@samba.org>
    Cc: Russell King <linux@armlinux.org.uk>
    Cc: Will Deacon <will.deacon@arm.com>
    Cc: linux-api@vger.kernel.org
    Link: http://lkml.kernel.org/r/20180129202020.8515-5-mathieu.desnoyers@efficios.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit e9d586a8217882eb4068e3ed94a5234ba6dead34
Author: Marc-André Lureau <marcandre.lureau@redhat.com>
Date:   Wed Jan 31 16:19:14 2018 -0800

    shmem: unexport shmem_add_seals()/shmem_get_seals()
    
    Patch series "memfd: add sealing to hugetlb-backed memory", v3.
    
    Recently, Mike Kravetz added hugetlbfs support to memfd.  However, he
    didn't add sealing support.  One of the reasons to use memfd is to have
    shared memory sealing when doing IPC or sharing memory with another
    process with some extra safety.  qemu uses shared memory & hugetables
    with vhost-user (used by dpdk), so it is reasonable to use memfd now
    instead for convenience and security reasons.
    
    This patch (of 9):
    
    The functions are called through shmem_fcntl() only.  And no danger in
    removing the EXPORTs as the routines only work with shmem file structs.
    
    Link: http://lkml.kernel.org/r/20171107122800.25517-2-marcandre.lureau@redhat.com
    Signed-off-by: Marc-André Lureau <marcandre.lureau@redhat.com>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: Michal Hocko <mhocko@kernel.org>
    Cc: David Herrmann <dh.herrmann@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 140eb5227767c6754742020a16d2691222b9c19b
Author: Doug Meyer <dmeyer@gigaio.com>
Date:   Tue Oct 17 13:22:53 2017 -0700

    NTB: ntb_hw_switchtec: Fix peer BAR bug in switchtec_ntb_init_shared_mw
    
    This resolves a bug which may incorrectly configure the peer host's
    LUT for shared memory window access. The code was using the local
    host's first BAR number, rather than the peer hosts's first BAR
    number, to determine what peer NT control register to program.
    
    The bug will cause the Switchtec NTB link to work only if both peers
    have the same first NTB BAR configured. In all other configurations,
    the link will not come up, failing silently.
    
    When both hosts have the same first BAR, the configuration works only
    because the first BAR numbers happent to be the same. When the hosts
    do not have the same first BAR, then the LUT translation will not be
    configured in the correct peer LUT and will not give the peer the
    shared memory window access required for the link to operate.
    
    Signed-off-by: Doug Meyer <dmeyer@gigaio.com>
    Reviewed-by: Logan Gunthorpe <logang@deltatee.com>
    Fixes: 678784a44ae8 ("NTB: switchtec_ntb: Initialize hardware for memory windows")
    Signed-off-by: Jon Mason <jdmason@kudzu.us>

commit ffdc98c4f25b1f4fb96cd9190917b53a760f3fec
Merge: be60566ea9b0 2490cdf6435b
Author: Olof Johansson <olof@lixom.net>
Date:   Thu Jan 11 18:05:06 2018 -0800

    Merge tag 'tee-drv-dynamic-shm+fixes-for-v4.16' of https://git.linaro.org/people/jens.wiklander/linux-tee into next/drivers
    
    This pull request updates the previous tee-drv-dynamic-shm-for-v4.16 pull
    request with five new patches fixing review comments and errors.
    
    Apart from three small fixes there's two larger patches that in the end
    checks that memory to be registered really is normal cached memory.
    
    * tag 'tee-drv-dynamic-shm+fixes-for-v4.16' of https://git.linaro.org/people/jens.wiklander/linux-tee:
      tee: shm: Potential NULL dereference calling tee_shm_register()
      tee: shm: don't put_page on null shm->pages
      tee: shm: make function __tee_shm_alloc static
      tee: optee: check type of registered shared memory
      tee: add start argument to shm_register callback
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit cdbcf83d29c1bf2aaa65260e74beaac1bcdc231c
Author: Jens Wiklander <jens.wiklander@linaro.org>
Date:   Thu Dec 28 11:14:05 2017 +0100

    tee: optee: check type of registered shared memory
    
    Checks the memory type of the pages to be registered as shared memory.
    Only normal cached memory is allowed.
    
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

commit bad19e0d0460564a067f901b6848c0cc0c403c52
Merge: f9988fbb93c8 ef8e08d24ca8
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Thu Dec 21 17:23:52 2017 +0100

    Merge tag 'tee-drv-dynamic-shm-for-v4.16' of https://git.linaro.org/people/jens.wiklander/linux-tee into next/drivers
    
    Pull "tee dynamic shm for v4.16" from Jens Wiklander:
    
    This pull request enables dynamic shared memory support in the TEE
    subsystem as a whole and in OP-TEE in particular.
    
    Global Platform TEE specification [1] allows client applications
    to register part of own memory as a shared buffer between
    application and TEE. This allows fast zero-copy communication between
    TEE and REE. But current implementation of TEE in Linux does not support
    this feature.
    
    Also, current implementation of OP-TEE transport uses fixed size
    pre-shared buffer for all communications with OP-TEE OS. This is okay
    in the most use cases. But this prevents use of OP-TEE in virtualized
    environments, because:
     a) We can't share the same buffer between different virtual machines
     b) Physically contiguous memory as seen by VM can be non-contiguous
        in reality (and as seen by OP-TEE OS) due to second stage of
        MMU translation.
     c) Size of this pre-shared buffer is limited.
    
    So, first part of this pull request adds generic register/unregister
    interface to tee subsystem. The second part adds necessary features into
    OP-TEE driver, so it can use not only static pre-shared buffer, but
    whole RAM to communicate with OP-TEE OS.
    
    This change is backwards compatible allowing older secure world or
    user space to work with newer kernels and vice versa.
    
    [1] https://www.globalplatform.org/specificationsdevice.asp
    
    * tag 'tee-drv-dynamic-shm-for-v4.16' of https://git.linaro.org/people/jens.wiklander/linux-tee:
      tee: shm: inline tee_shm_get_id()
      tee: use reference counting for tee_context
      tee: optee: enable dynamic SHM support
      tee: optee: add optee-specific shared pool implementation
      tee: optee: store OP-TEE capabilities in private data
      tee: optee: add registered buffers handling into RPC calls
      tee: optee: add registered shared parameters handling
      tee: optee: add shared buffer registration functions
      tee: optee: add page list manipulation functions
      tee: optee: Update protocol definitions
      tee: shm: add page accessor functions
      tee: shm: add accessors for buffer size and page offset
      tee: add register user memory
      tee: flexible shared memory pool creation

commit f58e236c9d665ad0af99c908de4a9b6f07e74dda
Author: Volodymyr Babchuk <vlad.babchuk@gmail.com>
Date:   Wed Nov 29 14:48:36 2017 +0200

    tee: optee: enable dynamic SHM support
    
    Previous patches added various features that are needed for dynamic SHM.
    Dynamic SHM allows Normal World to share any buffers with OP-TEE.
    While original design suggested to use pre-allocated region (usually of
    1M to 2M of size), this new approach allows to use all non-secure RAM for
    command buffers, RPC allocations and TA parameters.
    
    This patch checks capability OPTEE_SMC_SEC_CAP_DYNAMIC_SHM. If it was set
    by OP-TEE, then kernel part of OP-TEE will use kernel page allocator
    to allocate command buffers. Also it will set TEE_GEN_CAP_REG_MEM
    capability to tell userspace that it supports shared memory registration.
    
    Signed-off-by: Volodymyr Babchuk <vlad.babchuk@gmail.com>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

commit abd135ba215c05ca84f9809e6047db25fc28b835
Author: Volodymyr Babchuk <vlad.babchuk@gmail.com>
Date:   Wed Nov 29 14:48:35 2017 +0200

    tee: optee: add optee-specific shared pool implementation
    
    This is simple pool that uses kernel page allocator. This pool can be
    used in case OP-TEE supports dynamic shared memory.
    
    Signed-off-by: Volodymyr Babchuk <vlad.babchuk@gmail.com>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

commit 53a107c812de3dd74707458aa751eb457718ff9e
Author: Volodymyr Babchuk <vlad.babchuk@gmail.com>
Date:   Wed Nov 29 14:48:33 2017 +0200

    tee: optee: add registered buffers handling into RPC calls
    
    With latest changes to OP-TEE we can use any buffers as a shared memory.
    Thus, it is possible for supplicant to provide part of own memory
    when OP-TEE asks to allocate a shared buffer.
    
    This patch adds support for such feature into RPC handling code.
    Now when OP-TEE asks supplicant to allocate shared buffer, supplicant
    can use TEE_IOC_SHM_REGISTER to provide such buffer. RPC handler is
    aware of this, so it will pass list of allocated pages to OP-TEE.
    
    Signed-off-by: Volodymyr Babchuk <vlad.babchuk@gmail.com>
    [jw: fix parenthesis alignment in free_pages_list()]
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

commit 06ca79179c4e00efe53cfe43456f1586f944f04f
Author: Volodymyr Babchuk <vlad.babchuk@gmail.com>
Date:   Wed Nov 29 14:48:31 2017 +0200

    tee: optee: add shared buffer registration functions
    
    This change adds ops for shm_(un)register functions in tee interface.
    Client application can use these functions to (un)register an own shared
    buffer in OP-TEE address space. This allows zero copy data sharing between
    Normal and Secure Worlds.
    
    Please note that while those functions were added to optee code,
    it does not report to userspace that those functions are available.
    OP-TEE code does not set TEE_GEN_CAP_REG_MEM flag. This flag will be
    enabled only after all other features of dynamic shared memory will be
    implemented in subsequent patches. Of course user can ignore presence of
    TEE_GEN_CAP_REG_MEM flag and try do call those functions. This is okay,
    driver will register shared buffer in OP-TEE, but any attempts to use
    this shared buffer will fail.
    
    Signed-off-by: Volodymyr Babchuk <vlad.babchuk@gmail.com>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

commit 3bb48ba5cd60f9685aa8f1ccd9b14a72e237c13f
Author: Volodymyr Babchuk <vlad.babchuk@gmail.com>
Date:   Wed Nov 29 14:48:30 2017 +0200

    tee: optee: add page list manipulation functions
    
    These functions will be used to pass information about shared
    buffers to OP-TEE. ABI between Linux and OP-TEE is defined
    in optee_msg.h and optee_smc.h.
    
    optee_msg.h defines OPTEE_MSG_ATTR_NONCONTIG attribute
    for shared memory references and describes how such references
    should be passed. Note that it uses 64-bit page addresses even
    on 32 bit systems. This is done to support LPAE and to unify
    interface.
    
    Signed-off-by: Volodymyr Babchuk <vlad.babchuk@gmail.com>
    [jw: replacing uint64_t with u64 in optee_fill_pages_list()]
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

commit b25946ad951c013c31d0a0e82d2017004bdc8fed
Author: Volodymyr Babchuk <vlad.babchuk@gmail.com>
Date:   Wed Nov 29 14:48:27 2017 +0200

    tee: shm: add accessors for buffer size and page offset
    
    These two function will be needed for shared memory registration in OP-TEE
    
    Signed-off-by: Volodymyr Babchuk <vlad.babchuk@gmail.com>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

commit 033ddf12bcf5326b93bd604f50a7474a434a35f9
Author: Jens Wiklander <jens.wiklander@linaro.org>
Date:   Wed Nov 29 14:48:26 2017 +0200

    tee: add register user memory
    
    Added new ioctl to allow users register own buffers as a shared memory.
    
    Signed-off-by: Volodymyr Babchuk <vlad.babchuk@gmail.com>
    [jw: moved tee_shm_is_registered() declaration]
    [jw: added space after __tee_shm_alloc() implementation]
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

commit e2aca5d8928acb9cc9a87802b02102d4f9b9b596
Author: Jens Wiklander <jens.wiklander@linaro.org>
Date:   Wed Nov 29 14:48:25 2017 +0200

    tee: flexible shared memory pool creation
    
    Makes creation of shm pools more flexible by adding new more primitive
    functions to allocate a shm pool. This makes it easier to add driver
    specific shm pool management.
    
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
    Signed-off-by: Volodymyr Babchuk <vlad.babchuk@gmail.com>

commit 4f16f7ff3bc02f6e1845677235fea157bdc0e59c
Author: Kaihua Zhong <zhongkaihua@huawei.com>
Date:   Fri Nov 17 17:27:31 2017 +0800

    clk: hisilicon: Add support for Hi3660 stub clocks
    
    Hi3660 has four stub clocks, which are big and LITTLE cluster clocks,
    GPU clock and DDR clock.  These clocks ask MCU for frequency scaling
    by sending message through mailbox.
    
    This commit adds support for stub clocks, it requests the dedicated
    mailbox channel at initialization; then later uses this channel to send
    message to MCU to execute frequency scaling. The four stub clocks share
    the same mailbox channel, but every stub clock has its own command id so
    MCU can distinguish the requirement coming for which clock.
    
    A shared memory is used to present effective frequency value, so the
    clock driver uses I/O mapping for the memory and reads back rate value.
    
    Reviewed-by: Leo Yan <leo.yan@linaro.org>
    Signed-off-by: Kai Zhao <zhaokai1@hisilicon.com>
    Signed-off-by: Tao Wang <kevin.wangtao@hisilicon.com>
    Signed-off-by: Ruyi Wang <wangruyi@huawei.com>
    Signed-off-by: Kaihua Zhong <zhongkaihua@huawei.com>
    [sboyd: Fix possible out of bounds access in hi3660_stub_clk_hw_get(),
            use devm_of_clk_add_hw_provider(), devm_ioremap() returns
            NULL not error pointers]
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>

commit b9a4acac282eff60cba800bdbc5a3b57c33c10be
Author: Logan Gunthorpe <logang@deltatee.com>
Date:   Thu Aug 3 12:19:52 2017 -0600

    NTB: switchtec_ntb: Implement scratchpad registers
    
    Seeing there is no dedicated hardware for this, we simply add
    these as entries in the shared memory window. Thus, we could support
    any number of them but 128 seems like enough, for now.
    
    Signed-off-by: Logan Gunthorpe <logang@deltatee.com>
    Reviewed-by: Stephen Bates <sbates@raithlin.com>
    Reviewed-by: Kurt Schwemmer <kurt.schwemmer@microsemi.com>
    Acked-by: Allen Hubbe <Allen.Hubbe@dell.com>
    Signed-off-by: Jon Mason <jdmason@kudzu.us>

commit 0ee28f26f378b31e87d35ae7a33e9b50b3283c84
Author: Logan Gunthorpe <logang@deltatee.com>
Date:   Thu Aug 3 12:19:50 2017 -0600

    NTB: switchtec_ntb: Add link management
    
    switchtec_ntb checks for a link by looking at the shared memory
    window. If the magic number is correct and the other side indicates
    their link is enabled then we take the link to be up.
    
    Whenever we change our local link status we send a msg to the
    other side to check whether it's up and change their status.
    
    The current status is maintained in a flag so ntb_is_link_up
    can return quickly.
    
    We utilize Switchtec's link status notifier to also check link changes
    when the switch notices a port changes state.
    
    Signed-off-by: Logan Gunthorpe <logang@deltatee.com>
    Reviewed-by: Stephen Bates <sbates@raithlin.com>
    Reviewed-by: Kurt Schwemmer <kurt.schwemmer@microsemi.com>
    Acked-by: Allen Hubbe <Allen.Hubbe@dell.com>
    Signed-off-by: Jon Mason <jdmason@kudzu.us>

commit ec0467ccbdeb69a86c8729073057bda7bce00eec
Author: Logan Gunthorpe <logang@deltatee.com>
Date:   Thu Aug 3 12:19:47 2017 -0600

    NTB: switchtec_ntb: Initialize hardware for memory windows
    
    Add the code to initialize the memory windows in the hardware.
    This includes setting up the requester ID table, and figuring out
    which BAR corresponds to which memory window. (Seeing the switch
    can be configured with any number of BARs.)
    
    Also, seeing the device doesn't have hardware for scratchpads or
    determining the link status, we create a shared memory window that has
    these features. A magic number with a version component will be used
    to determine if the other side's driver is actually up.
    
    The shared memory window also informs the other side of the
    size and count of the local memory windows.
    
    Signed-off-by: Logan Gunthorpe <logang@deltatee.com>
    Reviewed-by: Stephen Bates <sbates@raithlin.com>
    Reviewed-by: Kurt Schwemmer <kurt.schwemmer@microsemi.com>
    Acked-by: Allen Hubbe <Allen.Hubbe@dell.com>
    Signed-off-by: Jon Mason <jdmason@kudzu.us>

commit cb46e434ba111d1fd83dcb8bcc44c404e9d12a16
Author: zhong jiang <zhongjiang@huawei.com>
Date:   Fri Aug 18 15:16:24 2017 -0700

    mm/mempolicy: fix use after free when calling get_mempolicy
    
    commit 73223e4e2e3867ebf033a5a8eb2e5df0158ccc99 upstream.
    
    I hit a use after free issue when executing trinity and repoduced it
    with KASAN enabled.  The related call trace is as follows.
    
      BUG: KASan: use after free in SyS_get_mempolicy+0x3c8/0x960 at addr ffff8801f582d766
      Read of size 2 by task syz-executor1/798
    
      INFO: Allocated in mpol_new.part.2+0x74/0x160 age=3 cpu=1 pid=799
         __slab_alloc+0x768/0x970
         kmem_cache_alloc+0x2e7/0x450
         mpol_new.part.2+0x74/0x160
         mpol_new+0x66/0x80
         SyS_mbind+0x267/0x9f0
         system_call_fastpath+0x16/0x1b
      INFO: Freed in __mpol_put+0x2b/0x40 age=4 cpu=1 pid=799
         __slab_free+0x495/0x8e0
         kmem_cache_free+0x2f3/0x4c0
         __mpol_put+0x2b/0x40
         SyS_mbind+0x383/0x9f0
         system_call_fastpath+0x16/0x1b
      INFO: Slab 0xffffea0009cb8dc0 objects=23 used=8 fp=0xffff8801f582de40 flags=0x200000000004080
      INFO: Object 0xffff8801f582d760 @offset=5984 fp=0xffff8801f582d600
    
      Bytes b4 ffff8801f582d750: ae 01 ff ff 00 00 00 00 5a 5a 5a 5a 5a 5a 5a 5a  ........ZZZZZZZZ
      Object ffff8801f582d760: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b  kkkkkkkkkkkkkkkk
      Object ffff8801f582d770: 6b 6b 6b 6b 6b 6b 6b a5                          kkkkkkk.
      Redzone ffff8801f582d778: bb bb bb bb bb bb bb bb                          ........
      Padding ffff8801f582d8b8: 5a 5a 5a 5a 5a 5a 5a 5a                          ZZZZZZZZ
      Memory state around the buggy address:
      ffff8801f582d600: fb fb fb fc fc fc fc fc fc fc fc fc fc fc fc fc
      ffff8801f582d680: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
      >ffff8801f582d700: fc fc fc fc fc fc fc fc fc fc fc fc fb fb fb fc
    
    !shared memory policy is not protected against parallel removal by other
    thread which is normally protected by the mmap_sem.  do_get_mempolicy,
    however, drops the lock midway while we can still access it later.
    
    Early premature up_read is a historical artifact from times when
    put_user was called in this path see https://lwn.net/Articles/124754/
    but that is gone since 8bccd85ffbaf ("[PATCH] Implement sys_* do_*
    layering in the memory policy layer.").  but when we have the the
    current mempolicy ref count model.  The issue was introduced
    accordingly.
    
    Fix the issue by removing the premature release.
    
    Link: http://lkml.kernel.org/r/1502950924-27521-1-git-send-email-zhongjiang@huawei.com
    Signed-off-by: zhong jiang <zhongjiang@huawei.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Minchan Kim <minchan@kernel.org>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Mel Gorman <mgorman@techsingularity.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 7bd0cdad74409e093556f200b788f45cdb2064ee
Author: zhong jiang <zhongjiang@huawei.com>
Date:   Fri Aug 18 15:16:24 2017 -0700

    mm/mempolicy: fix use after free when calling get_mempolicy
    
    commit 73223e4e2e3867ebf033a5a8eb2e5df0158ccc99 upstream.
    
    I hit a use after free issue when executing trinity and repoduced it
    with KASAN enabled.  The related call trace is as follows.
    
      BUG: KASan: use after free in SyS_get_mempolicy+0x3c8/0x960 at addr ffff8801f582d766
      Read of size 2 by task syz-executor1/798
    
      INFO: Allocated in mpol_new.part.2+0x74/0x160 age=3 cpu=1 pid=799
         __slab_alloc+0x768/0x970
         kmem_cache_alloc+0x2e7/0x450
         mpol_new.part.2+0x74/0x160
         mpol_new+0x66/0x80
         SyS_mbind+0x267/0x9f0
         system_call_fastpath+0x16/0x1b
      INFO: Freed in __mpol_put+0x2b/0x40 age=4 cpu=1 pid=799
         __slab_free+0x495/0x8e0
         kmem_cache_free+0x2f3/0x4c0
         __mpol_put+0x2b/0x40
         SyS_mbind+0x383/0x9f0
         system_call_fastpath+0x16/0x1b
      INFO: Slab 0xffffea0009cb8dc0 objects=23 used=8 fp=0xffff8801f582de40 flags=0x200000000004080
      INFO: Object 0xffff8801f582d760 @offset=5984 fp=0xffff8801f582d600
    
      Bytes b4 ffff8801f582d750: ae 01 ff ff 00 00 00 00 5a 5a 5a 5a 5a 5a 5a 5a  ........ZZZZZZZZ
      Object ffff8801f582d760: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b  kkkkkkkkkkkkkkkk
      Object ffff8801f582d770: 6b 6b 6b 6b 6b 6b 6b a5                          kkkkkkk.
      Redzone ffff8801f582d778: bb bb bb bb bb bb bb bb                          ........
      Padding ffff8801f582d8b8: 5a 5a 5a 5a 5a 5a 5a 5a                          ZZZZZZZZ
      Memory state around the buggy address:
      ffff8801f582d600: fb fb fb fc fc fc fc fc fc fc fc fc fc fc fc fc
      ffff8801f582d680: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
      >ffff8801f582d700: fc fc fc fc fc fc fc fc fc fc fc fc fb fb fb fc
    
    !shared memory policy is not protected against parallel removal by other
    thread which is normally protected by the mmap_sem.  do_get_mempolicy,
    however, drops the lock midway while we can still access it later.
    
    Early premature up_read is a historical artifact from times when
    put_user was called in this path see https://lwn.net/Articles/124754/
    but that is gone since 8bccd85ffbaf ("[PATCH] Implement sys_* do_*
    layering in the memory policy layer.").  but when we have the the
    current mempolicy ref count model.  The issue was introduced
    accordingly.
    
    Fix the issue by removing the premature release.
    
    Link: http://lkml.kernel.org/r/1502950924-27521-1-git-send-email-zhongjiang@huawei.com
    Signed-off-by: zhong jiang <zhongjiang@huawei.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Minchan Kim <minchan@kernel.org>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Mel Gorman <mgorman@techsingularity.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 819aeee065e5d1b417ecd633897427c89f3253ec
Author: Brijesh Singh <brijesh.singh@amd.com>
Date:   Fri Oct 20 09:30:59 2017 -0500

    X86/KVM: Clear encryption attribute when SEV is active
    
    The guest physical memory area holding the struct pvclock_wall_clock and
    struct pvclock_vcpu_time_info are shared with the hypervisor. It
    periodically updates the contents of the memory.
    
    When SEV is active, the encryption attributes from the shared memory pages
    must be cleared so that both hypervisor and guest can access the data.
    
    Signed-off-by: Brijesh Singh <brijesh.singh@amd.com>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Borislav Petkov <bp@suse.de>
    Tested-by: Borislav Petkov <bp@suse.de>
    Cc: Tom Lendacky <thomas.lendacky@amd.com>
    Cc: kvm@vger.kernel.org
    Cc: Radim Krčmář <rkrcmar@redhat.com>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Link: https://lkml.kernel.org/r/20171020143059.3291-18-brijesh.singh@amd.com

commit da24b8240fe6afdeef388a2ef1da662b25675a5a
Author: Hoan Tran <hotran@apm.com>
Date:   Mon Oct 30 15:24:16 2017 -0700

    i2c: xgene-slimpro: Support v2
    
    This patch supports xgene-slimpro-i2c v2 which uses the non-cachable memory
    as the PCC shared memory.
    
    Signed-off-by: Hoan Tran <hotran@apm.com>
    Reviewed-by: Andy Shevchenko <andriy.shevchenko@linux.intel.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>

commit 749d782d80de6db454af4336a4f4c8dfe79a5fc4
Author: hotran <hotran@apm.com>
Date:   Tue Oct 17 11:28:34 2017 -0700

    hwmon: (xgene) Support hwmon v2
    
    This patch supports xgene-hwmon v2 which uses the non-cachable memory
    as the PCC shared memory.
    
    Signed-off-by: Hoan Tran <hotran@apm.com>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>

commit d1de6d6c639b7827c42c4750b8101ed1049e1c72
Author: Bjorn Andersson <bjorn.andersson@linaro.org>
Date:   Mon Oct 16 13:17:08 2017 -0500

    soc: qcom: Remote filesystem memory driver
    
    The Qualcomm remote file system protocol is used by certain remoteprocs,
    in particular the modem, to read and write persistent storage in
    platforms where only the application CPU has physical storage access.
    
    The protocol is based on a set of QMI-encoded control-messages and a
    shared memory buffer for exchaning the data. This driver implements the
    latter, providing the user space service access to the carved out chunk
    of memory.
    
    Acked-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Andy Gross <andy.gross@linaro.org>

commit 2501ec14048d24d98651d2204cdf9cb33a127199
Author: Bjorn Andersson <bjorn.andersson@linaro.org>
Date:   Tue Oct 10 22:08:55 2017 -0700

    dt-binding: soc: qcom: Add binding for rmtfs memory
    
    This adds the binding for describing shared memory used to exchange file
    system blocks between the RMTFS client and service. A client for this is
    generally found in the modem firmware and is used for accessing
    persistent storage for things such as radio calibration.
    
    Acked-by: Rob Herring <robh@kernel.org>
    Signed-off-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Andy Gross <andy.gross@linaro.org>

commit efb397b8e61b3c01f17480eaf0b6d7c72489a281
Author: Sergey Senozhatsky <sergey.senozhatsky.work@gmail.com>
Date:   Tue Oct 3 16:16:45 2017 -0700

    lib/ratelimit.c: use deferred printk() version
    
    commit 656d61ce9666209c4c4a13c71902d3ee70d1ff6f upstream.
    
    printk_ratelimit() invokes ___ratelimit() which may invoke a normal
    printk() (pr_warn() in this particular case) to warn about suppressed
    output.  Given that printk_ratelimit() may be called from anywhere, that
    pr_warn() is dangerous - it may end up deadlocking the system.  Fix
    ___ratelimit() by using deferred printk().
    
    Sasha reported the following lockdep error:
    
     : Unregister pv shared memory for cpu 8
     : select_fallback_rq: 3 callbacks suppressed
     : process 8583 (trinity-c78) no longer affine to cpu8
     :
     : ======================================================
     : WARNING: possible circular locking dependency detected
     : 4.14.0-rc2-next-20170927+ #252 Not tainted
     : ------------------------------------------------------
     : migration/8/62 is trying to acquire lock:
     : (&port_lock_key){-.-.}, at: serial8250_console_write()
     :
     : but task is already holding lock:
     : (&rq->lock){-.-.}, at: sched_cpu_dying()
     :
     : which lock already depends on the new lock.
     :
     :
     : the existing dependency chain (in reverse order) is:
     :
     : -> #3 (&rq->lock){-.-.}:
     : __lock_acquire()
     : lock_acquire()
     : _raw_spin_lock()
     : task_fork_fair()
     : sched_fork()
     : copy_process.part.31()
     : _do_fork()
     : kernel_thread()
     : rest_init()
     : start_kernel()
     : x86_64_start_reservations()
     : x86_64_start_kernel()
     : verify_cpu()
     :
     : -> #2 (&p->pi_lock){-.-.}:
     : __lock_acquire()
     : lock_acquire()
     : _raw_spin_lock_irqsave()
     : try_to_wake_up()
     : default_wake_function()
     : woken_wake_function()
     : __wake_up_common()
     : __wake_up_common_lock()
     : __wake_up()
     : tty_wakeup()
     : tty_port_default_wakeup()
     : tty_port_tty_wakeup()
     : uart_write_wakeup()
     : serial8250_tx_chars()
     : serial8250_handle_irq.part.25()
     : serial8250_default_handle_irq()
     : serial8250_interrupt()
     : __handle_irq_event_percpu()
     : handle_irq_event_percpu()
     : handle_irq_event()
     : handle_level_irq()
     : handle_irq()
     : do_IRQ()
     : ret_from_intr()
     : native_safe_halt()
     : default_idle()
     : arch_cpu_idle()
     : default_idle_call()
     : do_idle()
     : cpu_startup_entry()
     : rest_init()
     : start_kernel()
     : x86_64_start_reservations()
     : x86_64_start_kernel()
     : verify_cpu()
     :
     : -> #1 (&tty->write_wait){-.-.}:
     : __lock_acquire()
     : lock_acquire()
     : _raw_spin_lock_irqsave()
     : __wake_up_common_lock()
     : __wake_up()
     : tty_wakeup()
     : tty_port_default_wakeup()
     : tty_port_tty_wakeup()
     : uart_write_wakeup()
     : serial8250_tx_chars()
     : serial8250_handle_irq.part.25()
     : serial8250_default_handle_irq()
     : serial8250_interrupt()
     : __handle_irq_event_percpu()
     : handle_irq_event_percpu()
     : handle_irq_event()
     : handle_level_irq()
     : handle_irq()
     : do_IRQ()
     : ret_from_intr()
     : native_safe_halt()
     : default_idle()
     : arch_cpu_idle()
     : default_idle_call()
     : do_idle()
     : cpu_startup_entry()
     : rest_init()
     : start_kernel()
     : x86_64_start_reservations()
     : x86_64_start_kernel()
     : verify_cpu()
     :
     : -> #0 (&port_lock_key){-.-.}:
     : check_prev_add()
     : __lock_acquire()
     : lock_acquire()
     : _raw_spin_lock_irqsave()
     : serial8250_console_write()
     : univ8250_console_write()
     : console_unlock()
     : vprintk_emit()
     : vprintk_default()
     : vprintk_func()
     : printk()
     : ___ratelimit()
     : __printk_ratelimit()
     : select_fallback_rq()
     : sched_cpu_dying()
     : cpuhp_invoke_callback()
     : take_cpu_down()
     : multi_cpu_stop()
     : cpu_stopper_thread()
     : smpboot_thread_fn()
     : kthread()
     : ret_from_fork()
     :
     : other info that might help us debug this:
     :
     : Chain exists of:
     :   &port_lock_key --> &p->pi_lock --> &rq->lock
     :
     :  Possible unsafe locking scenario:
     :
     :        CPU0                    CPU1
     :        ----                    ----
     :   lock(&rq->lock);
     :                                lock(&p->pi_lock);
     :                                lock(&rq->lock);
     :   lock(&port_lock_key);
     :
     :  *** DEADLOCK ***
     :
     : 4 locks held by migration/8/62:
     : #0: (&p->pi_lock){-.-.}, at: sched_cpu_dying()
     : #1: (&rq->lock){-.-.}, at: sched_cpu_dying()
     : #2: (printk_ratelimit_state.lock){....}, at: ___ratelimit()
     : #3: (console_lock){+.+.}, at: vprintk_emit()
     :
     : stack backtrace:
     : CPU: 8 PID: 62 Comm: migration/8 Not tainted 4.14.0-rc2-next-20170927+ #252
     : Call Trace:
     : dump_stack()
     : print_circular_bug()
     : check_prev_add()
     : ? add_lock_to_list.isra.26()
     : ? check_usage()
     : ? kvm_clock_read()
     : ? kvm_sched_clock_read()
     : ? sched_clock()
     : ? check_preemption_disabled()
     : __lock_acquire()
     : ? __lock_acquire()
     : ? add_lock_to_list.isra.26()
     : ? debug_check_no_locks_freed()
     : ? memcpy()
     : lock_acquire()
     : ? serial8250_console_write()
     : _raw_spin_lock_irqsave()
     : ? serial8250_console_write()
     : serial8250_console_write()
     : ? serial8250_start_tx()
     : ? lock_acquire()
     : ? memcpy()
     : univ8250_console_write()
     : console_unlock()
     : ? __down_trylock_console_sem()
     : vprintk_emit()
     : vprintk_default()
     : vprintk_func()
     : printk()
     : ? show_regs_print_info()
     : ? lock_acquire()
     : ___ratelimit()
     : __printk_ratelimit()
     : select_fallback_rq()
     : sched_cpu_dying()
     : ? sched_cpu_starting()
     : ? rcutree_dying_cpu()
     : ? sched_cpu_starting()
     : cpuhp_invoke_callback()
     : ? cpu_disable_common()
     : take_cpu_down()
     : ? trace_hardirqs_off_caller()
     : ? cpuhp_invoke_callback()
     : multi_cpu_stop()
     : ? __this_cpu_preempt_check()
     : ? cpu_stop_queue_work()
     : cpu_stopper_thread()
     : ? cpu_stop_create()
     : smpboot_thread_fn()
     : ? sort_range()
     : ? schedule()
     : ? __kthread_parkme()
     : kthread()
     : ? sort_range()
     : ? kthread_create_on_node()
     : ret_from_fork()
     : process 9121 (trinity-c78) no longer affine to cpu8
     : smpboot: CPU 8 is now offline
    
    Link: http://lkml.kernel.org/r/20170928120405.18273-1-sergey.senozhatsky@gmail.com
    Fixes: 6b1d174b0c27b ("ratelimit: extend to print suppressed messages on release")
    Signed-off-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
    Reported-by: Sasha Levin <levinsasha928@gmail.com>
    Reviewed-by: Petr Mladek <pmladek@suse.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1c0891295a5a49f63ccb38f9aeed664ce63eb404
Author: Sergey Senozhatsky <sergey.senozhatsky.work@gmail.com>
Date:   Tue Oct 3 16:16:45 2017 -0700

    lib/ratelimit.c: use deferred printk() version
    
    commit 656d61ce9666209c4c4a13c71902d3ee70d1ff6f upstream.
    
    printk_ratelimit() invokes ___ratelimit() which may invoke a normal
    printk() (pr_warn() in this particular case) to warn about suppressed
    output.  Given that printk_ratelimit() may be called from anywhere, that
    pr_warn() is dangerous - it may end up deadlocking the system.  Fix
    ___ratelimit() by using deferred printk().
    
    Sasha reported the following lockdep error:
    
     : Unregister pv shared memory for cpu 8
     : select_fallback_rq: 3 callbacks suppressed
     : process 8583 (trinity-c78) no longer affine to cpu8
     :
     : ======================================================
     : WARNING: possible circular locking dependency detected
     : 4.14.0-rc2-next-20170927+ #252 Not tainted
     : ------------------------------------------------------
     : migration/8/62 is trying to acquire lock:
     : (&port_lock_key){-.-.}, at: serial8250_console_write()
     :
     : but task is already holding lock:
     : (&rq->lock){-.-.}, at: sched_cpu_dying()
     :
     : which lock already depends on the new lock.
     :
     :
     : the existing dependency chain (in reverse order) is:
     :
     : -> #3 (&rq->lock){-.-.}:
     : __lock_acquire()
     : lock_acquire()
     : _raw_spin_lock()
     : task_fork_fair()
     : sched_fork()
     : copy_process.part.31()
     : _do_fork()
     : kernel_thread()
     : rest_init()
     : start_kernel()
     : x86_64_start_reservations()
     : x86_64_start_kernel()
     : verify_cpu()
     :
     : -> #2 (&p->pi_lock){-.-.}:
     : __lock_acquire()
     : lock_acquire()
     : _raw_spin_lock_irqsave()
     : try_to_wake_up()
     : default_wake_function()
     : woken_wake_function()
     : __wake_up_common()
     : __wake_up_common_lock()
     : __wake_up()
     : tty_wakeup()
     : tty_port_default_wakeup()
     : tty_port_tty_wakeup()
     : uart_write_wakeup()
     : serial8250_tx_chars()
     : serial8250_handle_irq.part.25()
     : serial8250_default_handle_irq()
     : serial8250_interrupt()
     : __handle_irq_event_percpu()
     : handle_irq_event_percpu()
     : handle_irq_event()
     : handle_level_irq()
     : handle_irq()
     : do_IRQ()
     : ret_from_intr()
     : native_safe_halt()
     : default_idle()
     : arch_cpu_idle()
     : default_idle_call()
     : do_idle()
     : cpu_startup_entry()
     : rest_init()
     : start_kernel()
     : x86_64_start_reservations()
     : x86_64_start_kernel()
     : verify_cpu()
     :
     : -> #1 (&tty->write_wait){-.-.}:
     : __lock_acquire()
     : lock_acquire()
     : _raw_spin_lock_irqsave()
     : __wake_up_common_lock()
     : __wake_up()
     : tty_wakeup()
     : tty_port_default_wakeup()
     : tty_port_tty_wakeup()
     : uart_write_wakeup()
     : serial8250_tx_chars()
     : serial8250_handle_irq.part.25()
     : serial8250_default_handle_irq()
     : serial8250_interrupt()
     : __handle_irq_event_percpu()
     : handle_irq_event_percpu()
     : handle_irq_event()
     : handle_level_irq()
     : handle_irq()
     : do_IRQ()
     : ret_from_intr()
     : native_safe_halt()
     : default_idle()
     : arch_cpu_idle()
     : default_idle_call()
     : do_idle()
     : cpu_startup_entry()
     : rest_init()
     : start_kernel()
     : x86_64_start_reservations()
     : x86_64_start_kernel()
     : verify_cpu()
     :
     : -> #0 (&port_lock_key){-.-.}:
     : check_prev_add()
     : __lock_acquire()
     : lock_acquire()
     : _raw_spin_lock_irqsave()
     : serial8250_console_write()
     : univ8250_console_write()
     : console_unlock()
     : vprintk_emit()
     : vprintk_default()
     : vprintk_func()
     : printk()
     : ___ratelimit()
     : __printk_ratelimit()
     : select_fallback_rq()
     : sched_cpu_dying()
     : cpuhp_invoke_callback()
     : take_cpu_down()
     : multi_cpu_stop()
     : cpu_stopper_thread()
     : smpboot_thread_fn()
     : kthread()
     : ret_from_fork()
     :
     : other info that might help us debug this:
     :
     : Chain exists of:
     :   &port_lock_key --> &p->pi_lock --> &rq->lock
     :
     :  Possible unsafe locking scenario:
     :
     :        CPU0                    CPU1
     :        ----                    ----
     :   lock(&rq->lock);
     :                                lock(&p->pi_lock);
     :                                lock(&rq->lock);
     :   lock(&port_lock_key);
     :
     :  *** DEADLOCK ***
     :
     : 4 locks held by migration/8/62:
     : #0: (&p->pi_lock){-.-.}, at: sched_cpu_dying()
     : #1: (&rq->lock){-.-.}, at: sched_cpu_dying()
     : #2: (printk_ratelimit_state.lock){....}, at: ___ratelimit()
     : #3: (console_lock){+.+.}, at: vprintk_emit()
     :
     : stack backtrace:
     : CPU: 8 PID: 62 Comm: migration/8 Not tainted 4.14.0-rc2-next-20170927+ #252
     : Call Trace:
     : dump_stack()
     : print_circular_bug()
     : check_prev_add()
     : ? add_lock_to_list.isra.26()
     : ? check_usage()
     : ? kvm_clock_read()
     : ? kvm_sched_clock_read()
     : ? sched_clock()
     : ? check_preemption_disabled()
     : __lock_acquire()
     : ? __lock_acquire()
     : ? add_lock_to_list.isra.26()
     : ? debug_check_no_locks_freed()
     : ? memcpy()
     : lock_acquire()
     : ? serial8250_console_write()
     : _raw_spin_lock_irqsave()
     : ? serial8250_console_write()
     : serial8250_console_write()
     : ? serial8250_start_tx()
     : ? lock_acquire()
     : ? memcpy()
     : univ8250_console_write()
     : console_unlock()
     : ? __down_trylock_console_sem()
     : vprintk_emit()
     : vprintk_default()
     : vprintk_func()
     : printk()
     : ? show_regs_print_info()
     : ? lock_acquire()
     : ___ratelimit()
     : __printk_ratelimit()
     : select_fallback_rq()
     : sched_cpu_dying()
     : ? sched_cpu_starting()
     : ? rcutree_dying_cpu()
     : ? sched_cpu_starting()
     : cpuhp_invoke_callback()
     : ? cpu_disable_common()
     : take_cpu_down()
     : ? trace_hardirqs_off_caller()
     : ? cpuhp_invoke_callback()
     : multi_cpu_stop()
     : ? __this_cpu_preempt_check()
     : ? cpu_stop_queue_work()
     : cpu_stopper_thread()
     : ? cpu_stop_create()
     : smpboot_thread_fn()
     : ? sort_range()
     : ? schedule()
     : ? __kthread_parkme()
     : kthread()
     : ? sort_range()
     : ? kthread_create_on_node()
     : ret_from_fork()
     : process 9121 (trinity-c78) no longer affine to cpu8
     : smpboot: CPU 8 is now offline
    
    Link: http://lkml.kernel.org/r/20170928120405.18273-1-sergey.senozhatsky@gmail.com
    Fixes: 6b1d174b0c27b ("ratelimit: extend to print suppressed messages on release")
    Signed-off-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
    Reported-by: Sasha Levin <levinsasha928@gmail.com>
    Reviewed-by: Petr Mladek <pmladek@suse.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit a05502e5cfa9abe17a16592be82c2f5692c91f35
Author: Horace Chen <horace.chen@amd.com>
Date:   Fri Sep 29 14:41:57 2017 +0800

    drm/amdgpu: Reserve shared memory on VRAM for SR-IOV
    
    SR-IOV need to reserve a piece of shared VRAM at the exact place
    to exchange data betweem PF and VF. The start address and size of
    the shared mem are passed to guest through VBIOS structure
    VRAM_UsageByFirmware.
    
    VRAM_UsageByFirmware is a general feature in VBIOS, it indicates
    that VBIOS need to reserve a piece of memory on the VRAM.
    
    Because the mem address is specified. Reserve it early in
    amdgpu_ttm_init to make sure that it can monoplize the space.
    
    Signed-off-by: Horace Chen <horace.chen@amd.com>
    Reviewed-by: Christian König <christian.koenig@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit fd30faeaf0f5163356ec053ba9eb1d3b7923062c
Author: zhong jiang <zhongjiang@huawei.com>
Date:   Fri Aug 18 15:16:24 2017 -0700

    mm/mempolicy: fix use after free when calling get_mempolicy
    
    [ Upstream commit 73223e4e2e3867ebf033a5a8eb2e5df0158ccc99 ]
    
    I hit a use after free issue when executing trinity and repoduced it
    with KASAN enabled.  The related call trace is as follows.
    
      BUG: KASan: use after free in SyS_get_mempolicy+0x3c8/0x960 at addr ffff8801f582d766
      Read of size 2 by task syz-executor1/798
    
      INFO: Allocated in mpol_new.part.2+0x74/0x160 age=3 cpu=1 pid=799
         __slab_alloc+0x768/0x970
         kmem_cache_alloc+0x2e7/0x450
         mpol_new.part.2+0x74/0x160
         mpol_new+0x66/0x80
         SyS_mbind+0x267/0x9f0
         system_call_fastpath+0x16/0x1b
      INFO: Freed in __mpol_put+0x2b/0x40 age=4 cpu=1 pid=799
         __slab_free+0x495/0x8e0
         kmem_cache_free+0x2f3/0x4c0
         __mpol_put+0x2b/0x40
         SyS_mbind+0x383/0x9f0
         system_call_fastpath+0x16/0x1b
      INFO: Slab 0xffffea0009cb8dc0 objects=23 used=8 fp=0xffff8801f582de40 flags=0x200000000004080
      INFO: Object 0xffff8801f582d760 @offset=5984 fp=0xffff8801f582d600
    
      Bytes b4 ffff8801f582d750: ae 01 ff ff 00 00 00 00 5a 5a 5a 5a 5a 5a 5a 5a  ........ZZZZZZZZ
      Object ffff8801f582d760: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b  kkkkkkkkkkkkkkkk
      Object ffff8801f582d770: 6b 6b 6b 6b 6b 6b 6b a5                          kkkkkkk.
      Redzone ffff8801f582d778: bb bb bb bb bb bb bb bb                          ........
      Padding ffff8801f582d8b8: 5a 5a 5a 5a 5a 5a 5a 5a                          ZZZZZZZZ
      Memory state around the buggy address:
      ffff8801f582d600: fb fb fb fc fc fc fc fc fc fc fc fc fc fc fc fc
      ffff8801f582d680: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
      >ffff8801f582d700: fc fc fc fc fc fc fc fc fc fc fc fc fb fb fb fc
    
    !shared memory policy is not protected against parallel removal by other
    thread which is normally protected by the mmap_sem.  do_get_mempolicy,
    however, drops the lock midway while we can still access it later.
    
    Early premature up_read is a historical artifact from times when
    put_user was called in this path see https://lwn.net/Articles/124754/
    but that is gone since 8bccd85ffbaf ("[PATCH] Implement sys_* do_*
    layering in the memory policy layer.").  but when we have the the
    current mempolicy ref count model.  The issue was introduced
    accordingly.
    
    Fix the issue by removing the premature release.
    
    Link: http://lkml.kernel.org/r/1502950924-27521-1-git-send-email-zhongjiang@huawei.com
    Signed-off-by: zhong jiang <zhongjiang@huawei.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Minchan Kim <minchan@kernel.org>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Mel Gorman <mgorman@techsingularity.net>
    Cc: <stable@vger.kernel.org>    [2.6+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Sasha Levin <alexander.levin@verizon.com>

commit 656d61ce9666209c4c4a13c71902d3ee70d1ff6f
Author: Sergey Senozhatsky <sergey.senozhatsky.work@gmail.com>
Date:   Tue Oct 3 16:16:45 2017 -0700

    lib/ratelimit.c: use deferred printk() version
    
    printk_ratelimit() invokes ___ratelimit() which may invoke a normal
    printk() (pr_warn() in this particular case) to warn about suppressed
    output.  Given that printk_ratelimit() may be called from anywhere, that
    pr_warn() is dangerous - it may end up deadlocking the system.  Fix
    ___ratelimit() by using deferred printk().
    
    Sasha reported the following lockdep error:
    
     : Unregister pv shared memory for cpu 8
     : select_fallback_rq: 3 callbacks suppressed
     : process 8583 (trinity-c78) no longer affine to cpu8
     :
     : ======================================================
     : WARNING: possible circular locking dependency detected
     : 4.14.0-rc2-next-20170927+ #252 Not tainted
     : ------------------------------------------------------
     : migration/8/62 is trying to acquire lock:
     : (&port_lock_key){-.-.}, at: serial8250_console_write()
     :
     : but task is already holding lock:
     : (&rq->lock){-.-.}, at: sched_cpu_dying()
     :
     : which lock already depends on the new lock.
     :
     :
     : the existing dependency chain (in reverse order) is:
     :
     : -> #3 (&rq->lock){-.-.}:
     : __lock_acquire()
     : lock_acquire()
     : _raw_spin_lock()
     : task_fork_fair()
     : sched_fork()
     : copy_process.part.31()
     : _do_fork()
     : kernel_thread()
     : rest_init()
     : start_kernel()
     : x86_64_start_reservations()
     : x86_64_start_kernel()
     : verify_cpu()
     :
     : -> #2 (&p->pi_lock){-.-.}:
     : __lock_acquire()
     : lock_acquire()
     : _raw_spin_lock_irqsave()
     : try_to_wake_up()
     : default_wake_function()
     : woken_wake_function()
     : __wake_up_common()
     : __wake_up_common_lock()
     : __wake_up()
     : tty_wakeup()
     : tty_port_default_wakeup()
     : tty_port_tty_wakeup()
     : uart_write_wakeup()
     : serial8250_tx_chars()
     : serial8250_handle_irq.part.25()
     : serial8250_default_handle_irq()
     : serial8250_interrupt()
     : __handle_irq_event_percpu()
     : handle_irq_event_percpu()
     : handle_irq_event()
     : handle_level_irq()
     : handle_irq()
     : do_IRQ()
     : ret_from_intr()
     : native_safe_halt()
     : default_idle()
     : arch_cpu_idle()
     : default_idle_call()
     : do_idle()
     : cpu_startup_entry()
     : rest_init()
     : start_kernel()
     : x86_64_start_reservations()
     : x86_64_start_kernel()
     : verify_cpu()
     :
     : -> #1 (&tty->write_wait){-.-.}:
     : __lock_acquire()
     : lock_acquire()
     : _raw_spin_lock_irqsave()
     : __wake_up_common_lock()
     : __wake_up()
     : tty_wakeup()
     : tty_port_default_wakeup()
     : tty_port_tty_wakeup()
     : uart_write_wakeup()
     : serial8250_tx_chars()
     : serial8250_handle_irq.part.25()
     : serial8250_default_handle_irq()
     : serial8250_interrupt()
     : __handle_irq_event_percpu()
     : handle_irq_event_percpu()
     : handle_irq_event()
     : handle_level_irq()
     : handle_irq()
     : do_IRQ()
     : ret_from_intr()
     : native_safe_halt()
     : default_idle()
     : arch_cpu_idle()
     : default_idle_call()
     : do_idle()
     : cpu_startup_entry()
     : rest_init()
     : start_kernel()
     : x86_64_start_reservations()
     : x86_64_start_kernel()
     : verify_cpu()
     :
     : -> #0 (&port_lock_key){-.-.}:
     : check_prev_add()
     : __lock_acquire()
     : lock_acquire()
     : _raw_spin_lock_irqsave()
     : serial8250_console_write()
     : univ8250_console_write()
     : console_unlock()
     : vprintk_emit()
     : vprintk_default()
     : vprintk_func()
     : printk()
     : ___ratelimit()
     : __printk_ratelimit()
     : select_fallback_rq()
     : sched_cpu_dying()
     : cpuhp_invoke_callback()
     : take_cpu_down()
     : multi_cpu_stop()
     : cpu_stopper_thread()
     : smpboot_thread_fn()
     : kthread()
     : ret_from_fork()
     :
     : other info that might help us debug this:
     :
     : Chain exists of:
     :   &port_lock_key --> &p->pi_lock --> &rq->lock
     :
     :  Possible unsafe locking scenario:
     :
     :        CPU0                    CPU1
     :        ----                    ----
     :   lock(&rq->lock);
     :                                lock(&p->pi_lock);
     :                                lock(&rq->lock);
     :   lock(&port_lock_key);
     :
     :  *** DEADLOCK ***
     :
     : 4 locks held by migration/8/62:
     : #0: (&p->pi_lock){-.-.}, at: sched_cpu_dying()
     : #1: (&rq->lock){-.-.}, at: sched_cpu_dying()
     : #2: (printk_ratelimit_state.lock){....}, at: ___ratelimit()
     : #3: (console_lock){+.+.}, at: vprintk_emit()
     :
     : stack backtrace:
     : CPU: 8 PID: 62 Comm: migration/8 Not tainted 4.14.0-rc2-next-20170927+ #252
     : Call Trace:
     : dump_stack()
     : print_circular_bug()
     : check_prev_add()
     : ? add_lock_to_list.isra.26()
     : ? check_usage()
     : ? kvm_clock_read()
     : ? kvm_sched_clock_read()
     : ? sched_clock()
     : ? check_preemption_disabled()
     : __lock_acquire()
     : ? __lock_acquire()
     : ? add_lock_to_list.isra.26()
     : ? debug_check_no_locks_freed()
     : ? memcpy()
     : lock_acquire()
     : ? serial8250_console_write()
     : _raw_spin_lock_irqsave()
     : ? serial8250_console_write()
     : serial8250_console_write()
     : ? serial8250_start_tx()
     : ? lock_acquire()
     : ? memcpy()
     : univ8250_console_write()
     : console_unlock()
     : ? __down_trylock_console_sem()
     : vprintk_emit()
     : vprintk_default()
     : vprintk_func()
     : printk()
     : ? show_regs_print_info()
     : ? lock_acquire()
     : ___ratelimit()
     : __printk_ratelimit()
     : select_fallback_rq()
     : sched_cpu_dying()
     : ? sched_cpu_starting()
     : ? rcutree_dying_cpu()
     : ? sched_cpu_starting()
     : cpuhp_invoke_callback()
     : ? cpu_disable_common()
     : take_cpu_down()
     : ? trace_hardirqs_off_caller()
     : ? cpuhp_invoke_callback()
     : multi_cpu_stop()
     : ? __this_cpu_preempt_check()
     : ? cpu_stop_queue_work()
     : cpu_stopper_thread()
     : ? cpu_stop_create()
     : smpboot_thread_fn()
     : ? sort_range()
     : ? schedule()
     : ? __kthread_parkme()
     : kthread()
     : ? sort_range()
     : ? kthread_create_on_node()
     : ret_from_fork()
     : process 9121 (trinity-c78) no longer affine to cpu8
     : smpboot: CPU 8 is now offline
    
    Link: http://lkml.kernel.org/r/20170928120405.18273-1-sergey.senozhatsky@gmail.com
    Fixes: 6b1d174b0c27b ("ratelimit: extend to print suppressed messages on release")
    Signed-off-by: Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
    Reported-by: Sasha Levin <levinsasha928@gmail.com>
    Reviewed-by: Petr Mladek <pmladek@suse.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: Borislav Petkov <bp@suse.de>
    Cc: Steven Rostedt <rostedt@goodmis.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 20a3a71da542974a7ba30b121c5f81b83579c828
Author: Horace Chen <horace.chen@amd.com>
Date:   Wed Sep 27 16:13:17 2017 +0800

    drm/amdgpu: Add a new flag for SR-IOV to share memory between PF & VF
    
    Add ATOM_VRAM_BLOCK_SRIOV_MSG_SHARE_RESERVATION to identify whether
    driver need to reserve VRAM for SR-IOV shared memory.
    
    Signed-off-by: Horace Chen <horace.chen@amd.com>
    Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

commit 21e7daef7e5e6fc79e8d7d84651ccc9a07b22042
Author: Suman Anna <s-anna@ti.com>
Date:   Mon Sep 18 19:28:31 2017 -0500

    ARM: dts: da850: Add DSP node
    
    The TI Davinci DA8xx family of SoCs have a single DSP subsystem
    that is comprised of TI's standard TMS320C674x megamodule and
    several blocks of internal memory (L1P, L1D and L2 RAMs). Add
    the DT node for this DSP processor sub-system. The processor
    does not have an MMU, and uses a chip-level signalling register
    and shared memory for inter-processor communication with the
    ARM core.
    
    The node has been added in disabled state, and can be enabled
    in the respective board dts file with an associated reserved
    memory block.
    
    Signed-off-by: Suman Anna <s-anna@ti.com>
    Signed-off-by: Sekhar Nori <nsekhar@ti.com>

commit 2d6d6f5a09a96cc1fec7ed992b825e05f64cb50e
Author: Prakash Sangappa <prakash.sangappa@oracle.com>
Date:   Wed Sep 6 16:23:39 2017 -0700

    mm: userfaultfd: add feature to request for a signal delivery
    
    In some cases, userfaultfd mechanism should just deliver a SIGBUS signal
    to the faulting process, instead of the page-fault event.  Dealing with
    page-fault event using a monitor thread can be an overhead in these
    cases.  For example applications like the database could use the
    signaling mechanism for robustness purpose.
    
    Database uses hugetlbfs for performance reason.  Files on hugetlbfs
    filesystem are created and huge pages allocated using fallocate() API.
    Pages are deallocated/freed using fallocate() hole punching support.
    These files are mmapped and accessed by many processes as shared memory.
    The database keeps track of which offsets in the hugetlbfs file have
    pages allocated.
    
    Any access to mapped address over holes in the file, which can occur due
    to bugs in the application, is considered invalid and expect the process
    to simply receive a SIGBUS.  However, currently when a hole in the file
    is accessed via the mapped address, kernel/mm attempts to automatically
    allocate a page at page fault time, resulting in implicitly filling the
    hole in the file.  This may not be the desired behavior for applications
    like the database that want to explicitly manage page allocations of
    hugetlbfs files.
    
    Using userfaultfd mechanism with this support to get a signal, database
    application can prevent pages from being allocated implicitly when
    processes access mapped address over holes in the file.
    
    This patch adds UFFD_FEATURE_SIGBUS feature to userfaultfd mechnism to
    request for a SIGBUS signal.
    
    See following for previous discussion about the database requirement
    leading to this proposal as suggested by Andrea.
    
    http://www.spinics.net/lists/linux-mm/msg129224.html
    
    Link: http://lkml.kernel.org/r/1501552446-748335-2-git-send-email-prakash.sangappa@oracle.com
    Signed-off-by: Prakash Sangappa <prakash.sangappa@oracle.com>
    Reviewed-by: Mike Rapoport <rppt@linux.vnet.ibm.com>
    Reviewed-by: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: Shuah Khan <shuah@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit b1cc94ab2f2ba31fcb2c59df0b9cf03f6d720553
Author: Mike Rapoport <rppt@linux.vnet.ibm.com>
Date:   Wed Sep 6 16:22:56 2017 -0700

    shmem: shmem_charge: verify max_block is not exceeded before inode update
    
    Patch series "userfaultfd: enable zeropage support for shmem".
    
    These patches enable support for UFFDIO_ZEROPAGE for shared memory.
    
    The first two patches are not strictly related to userfaultfd, they are
    just minor refactoring to reduce amount of code duplication.
    
    This patch (of 7):
    
    Currently we update inode and shmem_inode_info before verifying that
    used_blocks will not exceed max_blocks.  In case it will, we undo the
    update.  Let's switch the order and move the verification of the blocks
    count before the inode and shmem_inode_info update.
    
    Link: http://lkml.kernel.org/r/1497939652-16528-2-git-send-email-rppt@linux.vnet.ibm.com
    Signed-off-by: Mike Rapoport <rppt@linux.vnet.ibm.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>
    Cc: Hillf Danton <hillf.zj@alibaba-inc.com>
    Cc: Pavel Emelyanov <xemul@virtuozzo.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 6b2676ed32bad395689998bea6ce2d64aeda02a6
Author: zhong jiang <zhongjiang@huawei.com>
Date:   Fri Aug 18 15:16:24 2017 -0700

    mm/mempolicy: fix use after free when calling get_mempolicy
    
    commit 73223e4e2e3867ebf033a5a8eb2e5df0158ccc99 upstream.
    
    I hit a use after free issue when executing trinity and repoduced it
    with KASAN enabled.  The related call trace is as follows.
    
      BUG: KASan: use after free in SyS_get_mempolicy+0x3c8/0x960 at addr ffff8801f582d766
      Read of size 2 by task syz-executor1/798
    
      INFO: Allocated in mpol_new.part.2+0x74/0x160 age=3 cpu=1 pid=799
         __slab_alloc+0x768/0x970
         kmem_cache_alloc+0x2e7/0x450
         mpol_new.part.2+0x74/0x160
         mpol_new+0x66/0x80
         SyS_mbind+0x267/0x9f0
         system_call_fastpath+0x16/0x1b
      INFO: Freed in __mpol_put+0x2b/0x40 age=4 cpu=1 pid=799
         __slab_free+0x495/0x8e0
         kmem_cache_free+0x2f3/0x4c0
         __mpol_put+0x2b/0x40
         SyS_mbind+0x383/0x9f0
         system_call_fastpath+0x16/0x1b
      INFO: Slab 0xffffea0009cb8dc0 objects=23 used=8 fp=0xffff8801f582de40 flags=0x200000000004080
      INFO: Object 0xffff8801f582d760 @offset=5984 fp=0xffff8801f582d600
    
      Bytes b4 ffff8801f582d750: ae 01 ff ff 00 00 00 00 5a 5a 5a 5a 5a 5a 5a 5a  ........ZZZZZZZZ
      Object ffff8801f582d760: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b  kkkkkkkkkkkkkkkk
      Object ffff8801f582d770: 6b 6b 6b 6b 6b 6b 6b a5                          kkkkkkk.
      Redzone ffff8801f582d778: bb bb bb bb bb bb bb bb                          ........
      Padding ffff8801f582d8b8: 5a 5a 5a 5a 5a 5a 5a 5a                          ZZZZZZZZ
      Memory state around the buggy address:
      ffff8801f582d600: fb fb fb fc fc fc fc fc fc fc fc fc fc fc fc fc
      ffff8801f582d680: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
      >ffff8801f582d700: fc fc fc fc fc fc fc fc fc fc fc fc fb fb fb fc
    
    !shared memory policy is not protected against parallel removal by other
    thread which is normally protected by the mmap_sem.  do_get_mempolicy,
    however, drops the lock midway while we can still access it later.
    
    Early premature up_read is a historical artifact from times when
    put_user was called in this path see https://lwn.net/Articles/124754/
    but that is gone since 8bccd85ffbaf ("[PATCH] Implement sys_* do_*
    layering in the memory policy layer.").  but when we have the the
    current mempolicy ref count model.  The issue was introduced
    accordingly.
    
    Fix the issue by removing the premature release.
    
    Link: http://lkml.kernel.org/r/1502950924-27521-1-git-send-email-zhongjiang@huawei.com
    Signed-off-by: zhong jiang <zhongjiang@huawei.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Minchan Kim <minchan@kernel.org>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Mel Gorman <mgorman@techsingularity.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 91105f2c621ef0b3c40d6725475b6896eb06f954
Author: zhong jiang <zhongjiang@huawei.com>
Date:   Fri Aug 18 15:16:24 2017 -0700

    mm/mempolicy: fix use after free when calling get_mempolicy
    
    commit 73223e4e2e3867ebf033a5a8eb2e5df0158ccc99 upstream.
    
    I hit a use after free issue when executing trinity and repoduced it
    with KASAN enabled.  The related call trace is as follows.
    
      BUG: KASan: use after free in SyS_get_mempolicy+0x3c8/0x960 at addr ffff8801f582d766
      Read of size 2 by task syz-executor1/798
    
      INFO: Allocated in mpol_new.part.2+0x74/0x160 age=3 cpu=1 pid=799
         __slab_alloc+0x768/0x970
         kmem_cache_alloc+0x2e7/0x450
         mpol_new.part.2+0x74/0x160
         mpol_new+0x66/0x80
         SyS_mbind+0x267/0x9f0
         system_call_fastpath+0x16/0x1b
      INFO: Freed in __mpol_put+0x2b/0x40 age=4 cpu=1 pid=799
         __slab_free+0x495/0x8e0
         kmem_cache_free+0x2f3/0x4c0
         __mpol_put+0x2b/0x40
         SyS_mbind+0x383/0x9f0
         system_call_fastpath+0x16/0x1b
      INFO: Slab 0xffffea0009cb8dc0 objects=23 used=8 fp=0xffff8801f582de40 flags=0x200000000004080
      INFO: Object 0xffff8801f582d760 @offset=5984 fp=0xffff8801f582d600
    
      Bytes b4 ffff8801f582d750: ae 01 ff ff 00 00 00 00 5a 5a 5a 5a 5a 5a 5a 5a  ........ZZZZZZZZ
      Object ffff8801f582d760: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b  kkkkkkkkkkkkkkkk
      Object ffff8801f582d770: 6b 6b 6b 6b 6b 6b 6b a5                          kkkkkkk.
      Redzone ffff8801f582d778: bb bb bb bb bb bb bb bb                          ........
      Padding ffff8801f582d8b8: 5a 5a 5a 5a 5a 5a 5a 5a                          ZZZZZZZZ
      Memory state around the buggy address:
      ffff8801f582d600: fb fb fb fc fc fc fc fc fc fc fc fc fc fc fc fc
      ffff8801f582d680: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
      >ffff8801f582d700: fc fc fc fc fc fc fc fc fc fc fc fc fb fb fb fc
    
    !shared memory policy is not protected against parallel removal by other
    thread which is normally protected by the mmap_sem.  do_get_mempolicy,
    however, drops the lock midway while we can still access it later.
    
    Early premature up_read is a historical artifact from times when
    put_user was called in this path see https://lwn.net/Articles/124754/
    but that is gone since 8bccd85ffbaf ("[PATCH] Implement sys_* do_*
    layering in the memory policy layer.").  but when we have the the
    current mempolicy ref count model.  The issue was introduced
    accordingly.
    
    Fix the issue by removing the premature release.
    
    Link: http://lkml.kernel.org/r/1502950924-27521-1-git-send-email-zhongjiang@huawei.com
    Signed-off-by: zhong jiang <zhongjiang@huawei.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Minchan Kim <minchan@kernel.org>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Mel Gorman <mgorman@techsingularity.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cc971fa12bd2dff6c0432c860d784c6cdaf5a04b
Author: zhong jiang <zhongjiang@huawei.com>
Date:   Fri Aug 18 15:16:24 2017 -0700

    mm/mempolicy: fix use after free when calling get_mempolicy
    
    commit 73223e4e2e3867ebf033a5a8eb2e5df0158ccc99 upstream.
    
    I hit a use after free issue when executing trinity and repoduced it
    with KASAN enabled.  The related call trace is as follows.
    
      BUG: KASan: use after free in SyS_get_mempolicy+0x3c8/0x960 at addr ffff8801f582d766
      Read of size 2 by task syz-executor1/798
    
      INFO: Allocated in mpol_new.part.2+0x74/0x160 age=3 cpu=1 pid=799
         __slab_alloc+0x768/0x970
         kmem_cache_alloc+0x2e7/0x450
         mpol_new.part.2+0x74/0x160
         mpol_new+0x66/0x80
         SyS_mbind+0x267/0x9f0
         system_call_fastpath+0x16/0x1b
      INFO: Freed in __mpol_put+0x2b/0x40 age=4 cpu=1 pid=799
         __slab_free+0x495/0x8e0
         kmem_cache_free+0x2f3/0x4c0
         __mpol_put+0x2b/0x40
         SyS_mbind+0x383/0x9f0
         system_call_fastpath+0x16/0x1b
      INFO: Slab 0xffffea0009cb8dc0 objects=23 used=8 fp=0xffff8801f582de40 flags=0x200000000004080
      INFO: Object 0xffff8801f582d760 @offset=5984 fp=0xffff8801f582d600
    
      Bytes b4 ffff8801f582d750: ae 01 ff ff 00 00 00 00 5a 5a 5a 5a 5a 5a 5a 5a  ........ZZZZZZZZ
      Object ffff8801f582d760: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b  kkkkkkkkkkkkkkkk
      Object ffff8801f582d770: 6b 6b 6b 6b 6b 6b 6b a5                          kkkkkkk.
      Redzone ffff8801f582d778: bb bb bb bb bb bb bb bb                          ........
      Padding ffff8801f582d8b8: 5a 5a 5a 5a 5a 5a 5a 5a                          ZZZZZZZZ
      Memory state around the buggy address:
      ffff8801f582d600: fb fb fb fc fc fc fc fc fc fc fc fc fc fc fc fc
      ffff8801f582d680: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
      >ffff8801f582d700: fc fc fc fc fc fc fc fc fc fc fc fc fb fb fb fc
    
    !shared memory policy is not protected against parallel removal by other
    thread which is normally protected by the mmap_sem.  do_get_mempolicy,
    however, drops the lock midway while we can still access it later.
    
    Early premature up_read is a historical artifact from times when
    put_user was called in this path see https://lwn.net/Articles/124754/
    but that is gone since 8bccd85ffbaf ("[PATCH] Implement sys_* do_*
    layering in the memory policy layer.").  but when we have the the
    current mempolicy ref count model.  The issue was introduced
    accordingly.
    
    Fix the issue by removing the premature release.
    
    Link: http://lkml.kernel.org/r/1502950924-27521-1-git-send-email-zhongjiang@huawei.com
    Signed-off-by: zhong jiang <zhongjiang@huawei.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Minchan Kim <minchan@kernel.org>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Mel Gorman <mgorman@techsingularity.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d5a76b2ba6871a875fdcd598548176ce3464aa30
Author: zhong jiang <zhongjiang@huawei.com>
Date:   Fri Aug 18 15:16:24 2017 -0700

    mm/mempolicy: fix use after free when calling get_mempolicy
    
    commit 73223e4e2e3867ebf033a5a8eb2e5df0158ccc99 upstream.
    
    I hit a use after free issue when executing trinity and repoduced it
    with KASAN enabled.  The related call trace is as follows.
    
      BUG: KASan: use after free in SyS_get_mempolicy+0x3c8/0x960 at addr ffff8801f582d766
      Read of size 2 by task syz-executor1/798
    
      INFO: Allocated in mpol_new.part.2+0x74/0x160 age=3 cpu=1 pid=799
         __slab_alloc+0x768/0x970
         kmem_cache_alloc+0x2e7/0x450
         mpol_new.part.2+0x74/0x160
         mpol_new+0x66/0x80
         SyS_mbind+0x267/0x9f0
         system_call_fastpath+0x16/0x1b
      INFO: Freed in __mpol_put+0x2b/0x40 age=4 cpu=1 pid=799
         __slab_free+0x495/0x8e0
         kmem_cache_free+0x2f3/0x4c0
         __mpol_put+0x2b/0x40
         SyS_mbind+0x383/0x9f0
         system_call_fastpath+0x16/0x1b
      INFO: Slab 0xffffea0009cb8dc0 objects=23 used=8 fp=0xffff8801f582de40 flags=0x200000000004080
      INFO: Object 0xffff8801f582d760 @offset=5984 fp=0xffff8801f582d600
    
      Bytes b4 ffff8801f582d750: ae 01 ff ff 00 00 00 00 5a 5a 5a 5a 5a 5a 5a 5a  ........ZZZZZZZZ
      Object ffff8801f582d760: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b  kkkkkkkkkkkkkkkk
      Object ffff8801f582d770: 6b 6b 6b 6b 6b 6b 6b a5                          kkkkkkk.
      Redzone ffff8801f582d778: bb bb bb bb bb bb bb bb                          ........
      Padding ffff8801f582d8b8: 5a 5a 5a 5a 5a 5a 5a 5a                          ZZZZZZZZ
      Memory state around the buggy address:
      ffff8801f582d600: fb fb fb fc fc fc fc fc fc fc fc fc fc fc fc fc
      ffff8801f582d680: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
      >ffff8801f582d700: fc fc fc fc fc fc fc fc fc fc fc fc fb fb fb fc
    
    !shared memory policy is not protected against parallel removal by other
    thread which is normally protected by the mmap_sem.  do_get_mempolicy,
    however, drops the lock midway while we can still access it later.
    
    Early premature up_read is a historical artifact from times when
    put_user was called in this path see https://lwn.net/Articles/124754/
    but that is gone since 8bccd85ffbaf ("[PATCH] Implement sys_* do_*
    layering in the memory policy layer.").  but when we have the the
    current mempolicy ref count model.  The issue was introduced
    accordingly.
    
    Fix the issue by removing the premature release.
    
    Link: http://lkml.kernel.org/r/1502950924-27521-1-git-send-email-zhongjiang@huawei.com
    Signed-off-by: zhong jiang <zhongjiang@huawei.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Minchan Kim <minchan@kernel.org>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Mel Gorman <mgorman@techsingularity.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 73223e4e2e3867ebf033a5a8eb2e5df0158ccc99
Author: zhong jiang <zhongjiang@huawei.com>
Date:   Fri Aug 18 15:16:24 2017 -0700

    mm/mempolicy: fix use after free when calling get_mempolicy
    
    I hit a use after free issue when executing trinity and repoduced it
    with KASAN enabled.  The related call trace is as follows.
    
      BUG: KASan: use after free in SyS_get_mempolicy+0x3c8/0x960 at addr ffff8801f582d766
      Read of size 2 by task syz-executor1/798
    
      INFO: Allocated in mpol_new.part.2+0x74/0x160 age=3 cpu=1 pid=799
         __slab_alloc+0x768/0x970
         kmem_cache_alloc+0x2e7/0x450
         mpol_new.part.2+0x74/0x160
         mpol_new+0x66/0x80
         SyS_mbind+0x267/0x9f0
         system_call_fastpath+0x16/0x1b
      INFO: Freed in __mpol_put+0x2b/0x40 age=4 cpu=1 pid=799
         __slab_free+0x495/0x8e0
         kmem_cache_free+0x2f3/0x4c0
         __mpol_put+0x2b/0x40
         SyS_mbind+0x383/0x9f0
         system_call_fastpath+0x16/0x1b
      INFO: Slab 0xffffea0009cb8dc0 objects=23 used=8 fp=0xffff8801f582de40 flags=0x200000000004080
      INFO: Object 0xffff8801f582d760 @offset=5984 fp=0xffff8801f582d600
    
      Bytes b4 ffff8801f582d750: ae 01 ff ff 00 00 00 00 5a 5a 5a 5a 5a 5a 5a 5a  ........ZZZZZZZZ
      Object ffff8801f582d760: 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b  kkkkkkkkkkkkkkkk
      Object ffff8801f582d770: 6b 6b 6b 6b 6b 6b 6b a5                          kkkkkkk.
      Redzone ffff8801f582d778: bb bb bb bb bb bb bb bb                          ........
      Padding ffff8801f582d8b8: 5a 5a 5a 5a 5a 5a 5a 5a                          ZZZZZZZZ
      Memory state around the buggy address:
      ffff8801f582d600: fb fb fb fc fc fc fc fc fc fc fc fc fc fc fc fc
      ffff8801f582d680: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
      >ffff8801f582d700: fc fc fc fc fc fc fc fc fc fc fc fc fb fb fb fc
    
    !shared memory policy is not protected against parallel removal by other
    thread which is normally protected by the mmap_sem.  do_get_mempolicy,
    however, drops the lock midway while we can still access it later.
    
    Early premature up_read is a historical artifact from times when
    put_user was called in this path see https://lwn.net/Articles/124754/
    but that is gone since 8bccd85ffbaf ("[PATCH] Implement sys_* do_*
    layering in the memory policy layer.").  but when we have the the
    current mempolicy ref count model.  The issue was introduced
    accordingly.
    
    Fix the issue by removing the premature release.
    
    Link: http://lkml.kernel.org/r/1502950924-27521-1-git-send-email-zhongjiang@huawei.com
    Signed-off-by: zhong jiang <zhongjiang@huawei.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Minchan Kim <minchan@kernel.org>
    Cc: Vlastimil Babka <vbabka@suse.cz>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Mel Gorman <mgorman@techsingularity.net>
    Cc: <stable@vger.kernel.org>    [2.6+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit a1b7cb92b488abaa91e14722d954fc318aee0e26
Author: Suman Anna <s-anna@ti.com>
Date:   Sat Aug 12 10:58:10 2017 -0700

    ARM: dts: keystone-k2g: Add DSP node
    
    The Keystone 2 66AK2G SoC has a single TMS320C66x DSP Core
    Subsystem (C66x CorePac), containing a C66x Fixed/Floating-Point
    DSP Core, and 32 KB of L1P & L1D SRAMs and a 1 MB L2 SRAM. Add
    the DT node for this DSP processor sub-system.
    
    The DT node has a new property 'power-domains' and no 'clocks'
    properties, and uses slightly different property values for
    'resets' compared to other Keystone 2 SoCs. The processor does
    not have an MMU, and uses various IPC Generation registers and
    shared memory for inter-processor communication. The alias with
    a stem 'rproc' has also been added for the DSP, it provides a
    fixed remoteproc id for the DSP processor.
    
    Signed-off-by: Andrew F. Davis <afd@ti.com>
    Signed-off-by: Suman Anna <s-anna@ti.com>
    Signed-off-by: Santosh Shilimkar <ssantosh@kernel.org>

commit d0b813fcdc22d091f8c9eee3a1484dca162667c8
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Thu Jun 1 14:44:40 2017 +0200

    iwlwifi: refactor shared mem parsing
    
    Refactor the shared memory command parsing into common code.
    
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>

commit 7d856409db4e95fdf98660872d50d5c4ffbffb55
Author: Suman Anna <s-anna@ti.com>
Date:   Sun Jul 30 20:50:05 2017 -0700

    ARM: dts: keystone-k2e: Add DSP node
    
    The Keystone 2 66AK2E SoC has one TMS320C66x DSP Core Subsystem
    (C66x CorePac), with a 1.4 GHz C66x Fixed or Floating-Point DSP
    Core, and 32 KB of L1P & L1D SRAMs and a 1 MB L2 SRAM. Add the
    DT node for this DSP processor sub-system. The processor does
    not have a MMU, and uses various IPC Generation registers and
    shared memory for inter-processor communication. The alias with
    a stem 'rproc' has also been added for the DSP, it provides a
    fixed remoteproc id for the DSP processor.
    
    Signed-off-by: Suman Anna <s-anna@ti.com>
    Signed-off-by: Sam Nelson <sam.nelson@ti.com>
    Signed-off-by: Andrew F. Davis <afd@ti.com>
    Signed-off-by: Santosh Shilimkar <ssantosh@kernel.org>

commit a6f0102bb685fe411c8c8108abccabea987d4391
Author: Suman Anna <s-anna@ti.com>
Date:   Sun Jul 30 20:50:05 2017 -0700

    ARM: dts: keystone-k2l: Add DSP nodes
    
    The Keystone 2 66AK2L SoCs have 4 TMS320C66x DSP Core Subsystems
    (C66x CorePacs), each with a 1.0 GHz or 1.2 GHz C66x Fixed /
    Floating-Point DSP Core, and 32 KB of L1P & L1D SRAMs and a 1 MB
    L2 SRAM. Add the DT nodes for these DSP processor sub-systems.
    The processors do not have an MMU, and use various IPC Generation
    registers and shared memory for inter-processor communication.
    The aliases with a stem 'rproc' have also been added for all the
    DSPs, they provide a fixed remoteproc id to each DSP processor.
    
    Signed-off-by: Suman Anna <s-anna@ti.com>
    Signed-off-by: Sam Nelson <sam.nelson@ti.com>
    Signed-off-by: Andrew F. Davis <afd@ti.com>
    Signed-off-by: Santosh Shilimkar <ssantosh@kernel.org>

commit 877ad77f9a65a5956a5b08feddfcb154fb7b780f
Author: Suman Anna <s-anna@ti.com>
Date:   Sun Jul 30 20:50:05 2017 -0700

    ARM: dts: keystone-k2hk: Add DSP nodes
    
    The Keystone 2 66AK2H/66AK2K SoCs have upto 8 TMS320C66x DSP Core
    Subsystems (C66x CorePacs), each with a 1.0 GHz or 1.2 GHz C66x
    Fixed/Floating-Point DSP Core, and 32 KB of L1P & L1D SRAMs and a
    1 MB L2 SRAM. Add the DT nodes for these DSP processor sub-systems.
    The processors do not have an MMU, and use various IPC Generation
    registers and shared memory for inter-processor communication.
    The aliases with a stem 'rproc' have also been added for all the
    DSPs, they provide a fixed remoteproc id to each DSP processor.
    
    Signed-off-by: Suman Anna <s-anna@ti.com>
    Signed-off-by: Sam Nelson <sam.nelson@ti.com>
    Signed-off-by: Andrew F. Davis <afd@ti.com>
    Signed-off-by: Santosh Shilimkar <ssantosh@kernel.org>

commit 3ac8093cf5f7203140a3d8c28785d0d0dd89cd7c
Author: Georgi Djakov <georgi.djakov@linaro.org>
Date:   Wed Jul 19 15:55:13 2017 +0300

    arm64: defconfig: enable missing HWSPINLOCK
    
    The hardware spinlock drivers now depend on HWSPINLOCK (instead of
    selecting it), so we need to explicitly enable it after commit
    35fc8a07d7f9 ("Make HWSPINLOCK a menuconfig to ease disabling")
    
    Without HWSPINLOCK, various drivers are left with unsatisfied
    dependencies and Qcom boards using shared memory based communication
    to request regulators are failing to boot and mount rootfs.
    
    Fix this by explicitly enabling HWSPINLOCK in defconfig.
    
    Signed-off-by: Georgi Djakov <georgi.djakov@linaro.org>
    Signed-off-by: Andy Gross <andy.gross@linaro.org>

commit 7ba31340920f6fe6c97a29bccc2ba434395525bd
Author: Fathi Boudra <fathi.boudra@linaro.org>
Date:   Mon Mar 20 12:18:22 2017 +0200

    selftests: vm: add CONFIG_SYSVIPC=y to the config fragment
    
    vm tests rely on shared memory settings. Enable system V IPC to run these
    tests.
    
    Signed-off-by: Fathi Boudra <fathi.boudra@linaro.org>
    Tested-by: Naresh Kamboju <naresh.kamboju@linaro.org>
    Signed-off-by: Shuah Khan <shuahkh@osg.samsung.com>

commit 4fb0a5eb364d239722e745c02aef0dbd4e0f1ad2
Author: Jens Wiklander <jens.wiklander@linaro.org>
Date:   Tue Apr 14 14:33:20 2015 +0200

    tee: add OP-TEE driver
    
    Adds a OP-TEE driver which also can be compiled as a loadable module.
    
    * Targets ARM and ARM64
    * Supports using reserved memory from OP-TEE as shared memory
    * Probes OP-TEE version using SMCs
    * Accepts requests on privileged and unprivileged device
    * Uses OPTEE message protocol version 2 to communicate with secure world
    
    Acked-by: Andreas Dannenberg <dannenberg@ti.com>
    Tested-by: Jerome Forissier <jerome.forissier@linaro.org> (HiKey)
    Tested-by: Volodymyr Babchuk <vlad.babchuk@gmail.com> (RCAR H3)
    Tested-by: Scott Branden <scott.branden@broadcom.com>
    Reviewed-by: Javier González <javier@javigon.com>
    Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>

commit 419624daf0e827452837177c4b983dc0f1b6429f
Author: Mike Rapoport <rppt@linux.vnet.ibm.com>
Date:   Wed Feb 22 15:43:46 2017 -0800

    userfaultfd: shmem: add userfaultfd_shmem test
    
    The test verifies that anonymous shared mapping can be used with userfault
    using the existing testing method.  The shared memory area is allocated
    using mmap(..., MAP_SHARED | MAP_ANONYMOUS, ...) and released using
    madvise(MADV_REMOVE)
    
    Link: http://lkml.kernel.org/r/20161216144821.5183-35-aarcange@redhat.com
    Signed-off-by: Mike Rapoport <rppt@linux.vnet.ibm.com>
    Signed-off-by: Andrea Arcangeli <aarcange@redhat.com>
    Cc: "Dr. David Alan Gilbert" <dgilbert@redhat.com>
    Cc: Hillf Danton <hillf.zj@alibaba-inc.com>
    Cc: Michael Rapoport <RAPOPORT@il.ibm.com>
    Cc: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: Pavel Emelyanov <xemul@parallels.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit cac673292b9b39493bb0ff526b96c83ace6fdcd0
Author: Mike Rapoport <rppt@linux.vnet.ibm.com>
Date:   Wed Feb 22 15:43:40 2017 -0800

    userfaultfd: shmem: allow registration of shared memory ranges
    
    Expand the userfaultfd_register/unregister routines to allow shared
    memory VMAs.
    
    Currently, there is no UFFDIO_ZEROPAGE and write-protection support for
    shared memory VMAs, which is reflected in ioctl methods supported by
    uffdio_register.
    
    Link: http://lkml.kernel.org/r/20161216144821.5183-34-aarcange@redhat.com
    Signed-off-by: Mike Rapoport <rppt@linux.vnet.ibm.com>
    Signed-off-by: Andrea Arcangeli <aarcange@redhat.com>
    Cc: "Dr. David Alan Gilbert" <dgilbert@redhat.com>
    Cc: Hillf Danton <hillf.zj@alibaba-inc.com>
    Cc: Michael Rapoport <RAPOPORT@il.ibm.com>
    Cc: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: Pavel Emelyanov <xemul@parallels.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit cfda05267f7bd02b5ae5ac6a37fbbdf3b9c41b57
Author: Mike Rapoport <rppt@linux.vnet.ibm.com>
Date:   Wed Feb 22 15:43:37 2017 -0800

    userfaultfd: shmem: add userfaultfd hook for shared memory faults
    
    When processing a page fault in shared memory area for not present page,
    check the VMA determine if faults are to be handled by userfaultfd.  If
    so, delegate the page fault to handle_userfault.
    
    Link: http://lkml.kernel.org/r/20161216144821.5183-33-aarcange@redhat.com
    Signed-off-by: Mike Rapoport <rppt@linux.vnet.ibm.com>
    Signed-off-by: Andrea Arcangeli <aarcange@redhat.com>
    Cc: "Dr. David Alan Gilbert" <dgilbert@redhat.com>
    Cc: Hillf Danton <hillf.zj@alibaba-inc.com>
    Cc: Michael Rapoport <RAPOPORT@il.ibm.com>
    Cc: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: Pavel Emelyanov <xemul@parallels.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 26071cedc519b822f69cc42dba9be969d2cdeb19
Author: Mike Rapoport <rppt@linux.vnet.ibm.com>
Date:   Wed Feb 22 15:43:34 2017 -0800

    userfaultfd: shmem: use shmem_mcopy_atomic_pte for shared memory
    
    The shmem_mcopy_atomic_pte implements low lever part of UFFDIO_COPY
    operation for shared memory VMAs.  It's based on mcopy_atomic_pte with
    adjustments necessary for shared memory pages.
    
    Link: http://lkml.kernel.org/r/20161216144821.5183-32-aarcange@redhat.com
    Signed-off-by: Mike Rapoport <rppt@linux.vnet.ibm.com>
    Signed-off-by: Andrea Arcangeli <aarcange@redhat.com>
    Cc: "Dr. David Alan Gilbert" <dgilbert@redhat.com>
    Cc: Hillf Danton <hillf.zj@alibaba-inc.com>
    Cc: Michael Rapoport <RAPOPORT@il.ibm.com>
    Cc: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: Pavel Emelyanov <xemul@parallels.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 4c27fe4c4c84f3afd504ecff2420cc1ad420d38e
Author: Mike Rapoport <rppt@linux.vnet.ibm.com>
Date:   Wed Feb 22 15:43:25 2017 -0800

    userfaultfd: shmem: add shmem_mcopy_atomic_pte for userfaultfd support
    
    shmem_mcopy_atomic_pte is the low level routine that implements the
    userfaultfd UFFDIO_COPY command.  It is based on the existing
    mcopy_atomic_pte routine with modifications for shared memory pages.
    
    Link: http://lkml.kernel.org/r/20161216144821.5183-29-aarcange@redhat.com
    Signed-off-by: Mike Rapoport <rppt@linux.vnet.ibm.com>
    Signed-off-by: Andrea Arcangeli <aarcange@redhat.com>
    Cc: "Dr. David Alan Gilbert" <dgilbert@redhat.com>
    Cc: Hillf Danton <hillf.zj@alibaba-inc.com>
    Cc: Michael Rapoport <RAPOPORT@il.ibm.com>
    Cc: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: Pavel Emelyanov <xemul@parallels.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit ffb6bca6899f85c6c8b1609aeac3e004d18f8071
Author: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
Date:   Mon Nov 16 12:40:48 2015 -0500

    xen/pciback: Save xen_pci_op commands before processing it
    
    commit 8135cf8b092723dbfcc611fe6fdcb3a36c9951c5 upstream.
    
    Double fetch vulnerabilities that happen when a variable is
    fetched twice from shared memory but a security check is only
    performed the first time.
    
    The xen_pcibk_do_op function performs a switch statements on the op->cmd
    value which is stored in shared memory. Interestingly this can result
    in a double fetch vulnerability depending on the performed compiler
    optimization.
    
    This patch fixes it by saving the xen_pci_op command before
    processing it. We also use 'barrier' to make sure that the
    compiler does not perform any optimization.
    
    This is part of XSA155.
    
    Reviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Signed-off-by: Jan Beulich <JBeulich@suse.com>
    Signed-off-by: David Vrabel <david.vrabel@citrix.com>
    Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Cc: "Jan Beulich" <JBeulich@suse.com>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit 4ce33ec2e42d4661bf05289e213bc088eecb9132
Author: Davidlohr Bueso <dave@stgolabs.net>
Date:   Wed Dec 14 15:06:37 2016 -0800

    ipc/sem: optimize perform_atomic_semop()
    
    This is the main workhorse that deals with semop user calls such that
    the waitforzero or semval update operations, on the set, can complete on
    not as the sma currently stands.  Currently, the set is iterated twice
    (setting semval, then backwards for the sempid value).  Slowpaths, and
    particularly SEM_UNDO calls, must undo any altered sem when it is
    detected that the caller must block or has errored-out.
    
    With larger sets, there can occur situations where this involves a lot
    of cycles and can obviously be a suboptimal use of cached resources in
    shared memory.  Ie, discarding CPU caches that are also calling semop
    and have the sembuf cached (and can complete), while the current lock
    holder doing the semop will block, error, or does a waitforzero
    operation.
    
    This patch proposes still iterating the set twice, but the first scan is
    read-only, and we perform the actual updates afterward, once we know
    that the call will succeed.  In order to not suffer from the overhead of
    dealing with sops that act on the same sem_num, such (rare) cases use
    perform_atomic_semop_slow(), which is exactly what we have now.
    Duplicates are detected before grabbing sem_lock, and uses simple a
    32/64-bit hash array variable to based on the sem_num we are working on.
    
    In addition add some comments to when we expect to the caller to block.
    
    [akpm@linux-foundation.org: coding-style fixes]
    [colin.king@canonical.com: ensure we left shift a ULL rather than a 32 bit integer]
      Link: http://lkml.kernel.org/r/20161028181129.7311-1-colin.king@canonical.com
    Link: http://lkml.kernel.org/r/20160921194603.GB21438@linux-80c1.suse
    Signed-off-by: Davidlohr Bueso <dbueso@suse.de>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit be4b092cab84b2ecc01ee7f4da6a044279430b6f
Author: Franky Lin <franky.lin@broadcom.com>
Date:   Wed Nov 23 10:25:20 2016 +0000

    brcmfmac: add pcie host dongle interface rev6 support
    
    In rev6 of pcie host dongle interface protocol, host needs to maximum
    supported ring number from dongle shared memory and set up ring buffer
    and ring indices offset accordingly.
    
    Reviewed-by: Hante Meuleman <hante.meuleman@broadcom.com>
    Reviewed-by: Pieter-Paul Giesberts <pieter-paul.giesberts@broadcom.com>
    Reviewed-by: Arend van Spriel <arend.vanspriel@broadcom.com>
    Signed-off-by: Franky Lin <franky.lin@broadcom.com>
    Signed-off-by: Arend van Spriel <arend.vanspriel@broadcom.com>
    Signed-off-by: Kalle Valo <kvalo@codeaurora.org>

commit e40719dd011425d484f4c627a7c27f085dc44c44
Merge: dd3eedd33834 b704ed8095ee
Author: Olof Johansson <olof@lixom.net>
Date:   Fri Nov 18 18:28:14 2016 -0800

    Merge tag 'tegra-for-4.10-firmware' of git://git.kernel.org/pub/scm/linux/kernel/git/tegra/linux into next/drivers
    
    firmware: Add Tegra IVC and BPMP support
    
    IVC is an inter-processor communication protocol that uses shared memory
    to exchange data between processors. The BPMP driver makes use of this
    to communicate with the Boot and Power Management Processor (BPMP) and
    uses an additional hardware synchronization primitive from the HSP block
    to signal availability of new data (doorbell).
    
    Firmware running on the BPMP implements a number of services such as the
    control of clocks and resets within the system, or the ability to ungate
    or gate power partitions.
    
    * tag 'tegra-for-4.10-firmware' of git://git.kernel.org/pub/scm/linux/kernel/git/tegra/linux:
      dt-bindings: firmware: Allow child nodes inside the Tegra BPMP
      dt-bindings: Add power domains to Tegra BPMP firmware
      firmware: tegra: Add BPMP support
      firmware: tegra: Add IVC library
      dt-bindings: firmware: Add bindings for Tegra BPMP
    
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit ee17692c20ba3efde25a39e8a1ba7430ecdc18a7
Author: spjoshi@codeaurora.org <spjoshi@codeaurora.org>
Date:   Fri Oct 21 16:19:16 2016 -0700

    arm64: dts: msm8996: Add SMEM reserve-memory node
    
    Add DT node to carveout memory for shared memory region.
    
    Reviewed-by: Bjorn Andersson <bjorn.andersson@linaro.org>
    Signed-off-by: Sarangdhar Joshi <spjoshi@codeaurora.org>
    Signed-off-by: Andy Gross <andy.gross@linaro.org>

commit 00f64b58874e14dec2b9c02f7d63147315e0a09b
Author: Georgi Djakov <georgi.djakov@linaro.org>
Date:   Wed Nov 2 17:56:56 2016 +0200

    clk: qcom: Add support for SMD-RPM Clocks
    
    This adds initial support for clocks controlled by the Resource
    Power Manager (RPM) processor on some Qualcomm SoCs, which use
    the qcom_smd_rpm driver to communicate with RPM.
    Such platforms are msm8916, apq8084 and msm8974.
    
    The RPM is a dedicated hardware engine for managing the shared
    SoC resources in order to keep the lowest power profile. It
    communicates with other hardware subsystems via shared memory
    and accepts clock requests, aggregates the requests and turns
    the clocks on/off or scales them on demand.
    
    This driver is based on the codeaurora.org driver:
    https://www.codeaurora.org/cgit/quic/la/kernel/msm-3.10/tree/drivers/clk/qcom/clock-rpm.c
    
    Signed-off-by: Georgi Djakov <georgi.djakov@linaro.org>
    Acked-by: Rob Herring <robh@kernel.org>
    [sboyd@codeaurora.org: Remove useless braces for single line if]
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>

commit 2ea15699281e81960cc4daadff4d325a1c94bf09
Author: Michael Zoran <mzoran@crowfest.net>
Date:   Tue Nov 1 08:21:14 2016 -0700

    staging: vc04_services: parse_rx_slots() - Fix compiler warning
    
    vc04_services contains a debug logging mechanism.  The log is
    maintained in a shared memory area between the kernel and the
    firmware.  Changing the sizes of the data in this area would
    require a firmware change which is distributed independently
    from the kernel binary.
    
    One of the items logged is the address of received messages.
    This address is a pointer, but the debugging slot used to store
    the information is a 32 bit integer.
    
    Luckily, this value is never interpreted by anything other
    then debug tools and it is expected that a human debugging
    the kernel interpret it.
    
    This change adds a cast to long before the original cast
    to int to silence the warning.
    
    Signed-off-by: Michael Zoran <mzoran@crowfest.net>
    Reviewed-by: Eric Anholt <eric@anholt.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 550fe2571866702ec3951ad67574175fcd0bf9e7
Author: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
Date:   Mon Nov 16 12:40:48 2015 -0500

    xen/pciback: Save xen_pci_op commands before processing it
    
    commit 8135cf8b092723dbfcc611fe6fdcb3a36c9951c5 upstream.
    
    Double fetch vulnerabilities that happen when a variable is
    fetched twice from shared memory but a security check is only
    performed the first time.
    
    The xen_pcibk_do_op function performs a switch statements on the op->cmd
    value which is stored in shared memory. Interestingly this can result
    in a double fetch vulnerability depending on the performed compiler
    optimization.
    
    This patch fixes it by saving the xen_pci_op command before
    processing it. We also use 'barrier' to make sure that the
    compiler does not perform any optimization.
    
    This is part of XSA155.
    
    Reviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Signed-off-by: Jan Beulich <JBeulich@suse.com>
    Signed-off-by: David Vrabel <david.vrabel@citrix.com>
    Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Signed-off-by: Zefan Li <lizefan@huawei.com>

commit db06f04dafa1c1d94db1ef162addaff778f6457a
Author: Sara Sharon <sara.sharon@intel.com>
Date:   Tue Jul 5 17:37:58 2016 +0300

    iwlwifi: mvm: support new shared memory config API
    
    In a000 devices we have 15 fifos, so in the shared memory
    config the number of tx fifos in the array was changed
    accordingly.
    As it is in the middle of the struct, the parsing code needs
    to be duplicated.
    To minimize the duplication, do not save variables we never
    actually use.
    
    Signed-off-by: Sara Sharon <sara.sharon@intel.com>
    Signed-off-by: Luca Coelho <luciano.coelho@intel.com>

commit c7cefce03e691270c0e5e117248e14661e9c9cad
Author: Arnd Bergmann <arnd@arndb.de>
Date:   Fri Sep 9 22:10:45 2016 +0200

    hwmon: (xgene) access mailbox as RAM
    
    The newly added hwmon driver fails to build in an allmodconfig
    kernel:
    
          ERROR: "memblock_is_memory" [drivers/hwmon/xgene-hwmon.ko] undefined!
    
    According to comments in the code, the mailbox is a shared memory region,
    not a set of MMIO registers, so we should use memremap() for mapping it
    instead of ioremap or acpi_os_ioremap, and pointer dereferences instead
    of readl/writel.
    
    The driver already uses plain kernel pointers, so it's a bit unusual
    to work with functions that operate on __iomem pointers, and this
    fixes that part too.
    
    I'm using READ_ONCE/WRITE_ONCE here to keep the existing behavior
    regarding the ordering of the accesses from the CPU, but note that
    there are no barriers (also unchanged from before).
    
    I'm also keeping the endianness behavior, though I'm unsure whether
    the message data was supposed to be in LE32 format in the first
    place, it's possible this was meant to be interpreted as a byte
    stream instead.
    
    Signed-off-by: Arnd Bergmann <arnd@arndb.de>
    Acked-by: Hoan Tran <hotran@apm.com>
    Tested-by: Hoan Tran <hotran@apm.com>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>

commit 2ca492e22cb70a001749377506bd22eb06f60ecc
Author: hotran <hotran@apm.com>
Date:   Thu Sep 8 09:33:10 2016 -0700

    hwmon: (xgene) Fix crash when alarm occurs before driver probe
    
    The system crashes during probing xgene-hwmon driver when temperature
    alarm interrupt occurs before.
    It's because
     - xgene_hwmon_probe() requests mailbox channel which also enables
       the mailbox interrupt.
     - As temperature alarm interrupt is pending, ISR runs and crashes when
       accesses into invalid resourse as unmapped PCC shared memory.
    
    This patch fixes this issue by saving this alarm message and scheduling a
    bottom handler after xgene_hwmon_probe() finish.
    
    Signed-off-by: Hoan Tran <hotran@apm.com>
    Reported-by: Itaru Kitayama <itaru.kitayama@riken.jp>
    Signed-off-by: Guenter Roeck <linux@roeck-us.net>

commit f7978a0c581a8a840a28306f8da43e06e7fef3bf
Author: Chris Wilson <chris@chris-wilson.co.uk>
Date:   Mon Aug 22 09:03:36 2016 +0100

    drm/i915: Allow the user to pass a context to any ring
    
    With full-ppgtt, we want the user to have full control over their memory
    layout, with a separate instance per context. Forcing them to use a
    shared memory layout for !RCS not only duplicates the amount of work we
    have to do, but also defeats the memory segregation on offer.
    
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
    Link: http://patchwork.freedesktop.org/patch/msgid/20160822080350.4964-4-chris@chris-wilson.co.uk
    Reviewed-by: John Harrison <john.c.harrison@intel.com>
    Reviewed-by: Thomas Daniel <thomas.daniel@intel.com>
    Acked-by: Daniel Vetter <daniel.vetter@ffwll.ch>

commit fdb7777512785f90e712a7cb665a9adbaf673bd0
Author: Lino Sanfilippo <LinoSanfilippo@gmx.de>
Date:   Fri Jul 22 23:09:18 2016 +0200

    staging: slicoss: improve implementation concerning the shared memory
    
    Remove the volatile specifiers of struct slic_shmem. Furthermore store the
    bus addresses for the isr pointer, link status and statistics separately
    and access the upper and lower word of these addresses by means of
    [lower|upper]_32_bits(). By doing this take the endianness into account.
    
    Signed-off-by: Lino Sanfilippo <LinoSanfilippo@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 0e289e534af1b20417a1940c8eba549588671cd8
Author: Lee Jones <lee.jones@linaro.org>
Date:   Fri Jun 17 13:44:18 2016 +0200

    ARM: dts: STi: stih407-family: Disable reserved-memory co-processor nodes
    
    This patch fixes a non-booting issue in Mainline.
    
    When booting with a compressed kernel, we need to be careful how we
    populate memory close to DDR start.  AUTO_ZRELADDR is enabled by default
    in multi-arch enabled configurations, which place some restrictions on
    where the kernel is placed and where it will be uncompressed to on boot.
    
    AUTO_ZRELADDR takes the decompressor code's start address and masks out
    the bottom 28 bits to obtain an address to uncompress the kernel to
    (thus a load address of 0x42000000 means that the kernel will be
    uncompressed to 0x40000000 i.e. DDR START on this platform).
    
    Even changing the load address to after the co-processor's shared memory
    won't render a booting platform, since the AUTO_ZRELADDR algorithm still
    ensures the kernel is uncompressed into memory shared with the first
    co-processor (0x40000000).
    
    Another option would be to move loading to 0x4A000000, since this will
    mean the decompressor will decompress the kernel to 0x48000000. However,
    this would mean a large chunk (0x44000000 => 0x48000000 (64MB)) of
    memory would essentially be wasted for no good reason.
    
    Until we can work with ST to find a suitable memory location to
    relocate co-processor shared memory, let's disable the shared memory
    nodes.  This will ensure a working platform in the mean time.
    
    NB: The more observant of you will notice that we're leaving the DMU
    shared memory node enabled; this is because a) it is the only one in
    active use at the time of this writing and b) it is not affected by
    the current default behaviour which is causing issues.
    
    Fixes: fe135c6 (ARM: dts: STiH407: Move over to using the 'reserved-memory' API for obtaining DMA memory)
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Reviewed-by Peter Griffin <peter.griffin@linaro.org>
    Signed-off-by: Maxime Coquelin <maxime.coquelin@st.com>
    Signed-off-by: Olof Johansson <olof@lixom.net>

commit 3d69d142d6431c9daecc6e47daf22abd386311af
Author: Ilia Mirkin <imirkin@alum.mit.edu>
Date:   Wed Oct 7 18:39:32 2015 -0400

    drm/nouveau/gr: document mp error 0x10
    
    [ Upstream commit 3988f645f053a6889d00324dac3e57bd62cb8900 ]
    
    NVIDIA provided the documentation for mp error 0x10, INVALID_ADDR_SPACE,
    which apparently happens when trying to use an atomic operation on
    local or shared memory (instead of global memory).
    
    Signed-off-by: Ilia Mirkin <imirkin@alum.mit.edu>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
    Signed-off-by: Sasha Levin <sasha.levin@oracle.com>

commit f35c7480f81b70f9c3030d96a3807e8faba34cf7
Author: Shrikrishna Khare <skhare@vmware.com>
Date:   Thu Jun 16 10:51:54 2016 -0700

    vmxnet3: introduce generalized command interface to configure the device
    
    Shared memory is used to exchange information between the vmxnet3 driver
    and the emulation. In order to request emulation to perform a task, the
    driver first populates specific fields in this shared memory and then
    issues corresponding command by writing to the command register(CMD). The
    layout of the shared memory was defined by vmxnet3 version 1 and cannot
    be extended for every new command without breaking backward compatibility.
    
    To address this problem, in vmxnet3 version 3, the emulation repurposed
    a reserved field in the shared memory to represent command information
    instead. For new commands, the driver first populates the command
    information field in the shared memory and then issues the command. The
    emulation interprets the data written to the command information depending
    on the type of the command. This patch exposes this capability to the driver.
    
    Signed-off-by: Guolin Yang <gyang@vmware.com>
    Signed-off-by: Shrikrishna Khare <skhare@vmware.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 6ad8c632ee48ae099aa13704ef18a641220fe211
Author: Sudarsana Reddy Kalluru <sudarsana.kalluru@qlogic.com>
Date:   Wed Jun 8 06:22:10 2016 -0400

    qed: Add support for query/config dcbx.
    
    Query API reads the dcbx data from the device shared memory and return it
    to the caller. The config API configures the user provided dcbx values on
    the device, and initiates the dcbx negotiation with the peer.
    
    Signed-off-by: Sudarsana Reddy Kalluru <sudarsana.kalluru@qlogic.com>
    Signed-off-by: Yuval Mintz <Yuval.Mintz@qlogic.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit f2edc4e1b0786a285d4eb312cc052b029faa813d
Author: Bhaktipriya Shridhar <bhaktipriya96@gmail.com>
Date:   Thu Jun 2 15:00:57 2016 +0530

    net: fjes: fjes_main: Remove create_workqueue
    
    alloc_workqueue replaces deprecated create_workqueue().
    
    The workqueue adapter->txrx_wq has workitem
    &adapter->raise_intr_rxdata_task per adapter. Extended Socket Network
    Device is shared memory based, so someone's transmission denotes other's
    reception.  raise_intr_rxdata_task raises interruption of receivers from
    the sender in order to notify receivers.
    
    The workqueue adapter->control_wq has workitem
    &adapter->interrupt_watch_task per adapter. interrupt_watch_task is used
    to prevent delay of interrupts.
    
    Dedicated workqueues have been used in both cases since the workitems
    on the workqueues are involved in normal device operation and require
    forward progress under memory pressure.
    
    max_active has been set to 0 since there is no need for throttling
    the number of active work items.
    
    Since network devices  may be used for memory reclaim,
    WQ_MEM_RECLAIM has been set to guarantee forward progress.
    
    Signed-off-by: Bhaktipriya Shridhar <bhaktipriya96@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit ab6d7cc3eab4093caf91ba8b27590c4080d7d01c
Author: Maya Erez <qca_merez@qca.qualcomm.com>
Date:   Mon May 16 22:23:31 2016 +0300

    wil6210: guarantee safe access to rx descriptors shared memory
    
    add memory barrier after allocating new rx descriptors, before
    updating the hwtail.
    This will guarantee that all writes to descriptors (shared memory)
    are done before committing them to HW.
    
    Signed-off-by: Maya Erez <qca_merez@qca.qualcomm.com>
    Signed-off-by: Kalle Valo <kvalo@qca.qualcomm.com>

commit 63678c32e209bd165f33432bbed72b2954ce5ae4
Author: Rich Felker <dalias@libc.org>
Date:   Fri May 20 16:57:47 2016 -0700

    tmpfs/ramfs: fix VM_MAYSHARE mappings for NOMMU
    
    The nommu do_mmap expects f_op->get_unmapped_area to either succeed or
    return -ENOSYS for VM_MAYSHARE (e.g. private read-only) mappings.
    Returning addr in the non-MAP_SHARED case was completely wrong, and only
    happened to work because addr was 0.  However, it prevented VM_MAYSHARE
    mappings from sharing backing with the fs cache, and forced such
    mappings (including shareable program text) to be copied whenever the
    number of mappings transitioned from 0 to 1, impacting performance and
    memory usage.  Subsequent mappings beyond the first still correctly
    shared memory with the first.
    
    Instead, treat VM_MAYSHARE identically to VM_SHARED at the file ops level;
    do_mmap already handles the semantic differences between them.
    
    Signed-off-by: Rich Felker <dalias@libc.org>
    Cc: Michal Hocko <mhocko@suse.com>
    Cc: Greg Ungerer <gerg@uclinux.org>
    Cc: Geert Uytterhoeven <geert@linux-m68k.org>
    Cc: Yoshinori Sato <ysato@users.sourceforge.jp>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit cb80b2a38bd609b2f5a650e9ab87ea50105ad5ea
Author: Leonid Yegoshin <Leonid.Yegoshin@imgtec.com>
Date:   Thu Nov 19 17:38:21 2015 -0800

    MIPS: remove aliasing alignment if HW has antialising support
    
    MIPS hardware may have an antialising support and it works even
    page size is small.
    
    Setup a shared memory aliasing mask to page size if hardware has
    an antialising support. Big shared memory mask forces a disruption
    in page address assignment and that corrupts Android library memory
    handling.
    
    Signed-off-by: Leonid Yegoshin <Leonid.Yegoshin@imgtec.com>
    Cc: cernekee@gmail.com
    Cc: paul.gortmaker@windriver.com
    Cc: kumba@gentoo.org
    Cc: linux-mips@linux-mips.org
    Cc: linux-kernel@vger.kernel.org
    Patchwork: https://patchwork.linux-mips.org/patch/11516/
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit 16d5d05d88c55f41fe6e87aa205ecc0d2d9a2567
Author: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
Date:   Mon Nov 16 12:40:48 2015 -0500

    xen/pciback: Save xen_pci_op commands before processing it
    
    commit 8135cf8b092723dbfcc611fe6fdcb3a36c9951c5 upstream.
    
    Double fetch vulnerabilities that happen when a variable is
    fetched twice from shared memory but a security check is only
    performed the first time.
    
    The xen_pcibk_do_op function performs a switch statements on the op->cmd
    value which is stored in shared memory. Interestingly this can result
    in a double fetch vulnerability depending on the performed compiler
    optimization.
    
    This patch fixes it by saving the xen_pci_op command before
    processing it. We also use 'barrier' to make sure that the
    compiler does not perform any optimization.
    
    This is part of XSA155.
    
    Reviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Signed-off-by: Jan Beulich <JBeulich@suse.com>
    Signed-off-by: David Vrabel <david.vrabel@citrix.com>
    Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Cc: "Jan Beulich" <JBeulich@suse.com>
    Signed-off-by: Jiri Slaby <jslaby@suse.cz>

commit b131129d96575479e2447d134cb1797cf430b3a4
Author: Rajkumar Manoharan <rmanohar@qti.qualcomm.com>
Date:   Thu Apr 7 12:07:29 2016 +0530

    ath10k: fix calibration init sequence of qca99x0
    
    pre-calibration is meant for qca4019 which contains only caldata
    whereas calibration file is used by ar9888 and qca99x0 that contains
    both board data and caldata. So by definition both pre-cal-file and
    cal-file can not coexist. Keeping them in shared memory (union), is
    breaking boot sequence of qca99x0. Fix it by storing both binaries
    in separate memories. This issue is reported in ipq8064 platform which
    includes caldata in flash memory.
    
    Fixes: 3d9195ea19e4 ("ath10k: incorporate qca4019 cal data download sequence")
    Reported-by: Sebastian Gottschall <s.gottschall@dd-wrt.com>
    Signed-off-by: Rajkumar Manoharan <rmanohar@qti.qualcomm.com>
    Signed-off-by: Kalle Valo <kvalo@qca.qualcomm.com>

commit 5b086414293f906d8c5692cbbfa3500458982e5d
Author: Golan Ben-Ami <golan.ben.ami@intel.com>
Date:   Tue Feb 9 12:57:16 2016 +0200

    iwlwifi: mvm: support dumping UMAC internal txfifos
    
    In case of FW error, support dumping the UMAC internal txfifos.
    To do so, support version 2 of shared memory cfg command, which
    contains the sizes of the internal txfifos, and move the command
    to the system group.
    
    Signed-off-by: Golan Ben-Ami <golan.ben.ami@intel.com>
    Signed-off-by: Emmanuel Grumbach <emmanuel.grumbach@intel.com>

commit 5529bad98f10f742e3ab490733bed8e108508759
Author: Tomer Tayar <Tomer.Tayar@qlogic.com>
Date:   Wed Mar 9 09:16:24 2016 +0200

    qed: Major changes to MB locking
    
    Driver interaction with the managemnt firmware is done via mailbox
    commands which the management firmware periodically sample, as well
    as placing of additional data in set places in the shared memory.
    Each PF has a single designated mailbox address, and all flows that
    require messaging to the management should use it.
    
    This patch does 2 things:
     1. It re-defines the critical section surrounding the mailbox sending -
    that section should include the setting of the shared memory as well as
    the sending of the command [otherwise a race might send a command with
    the data of a different command].
     2. It moves the locking scheme from using mutices into using spinlocks.
    This lays the groundwork for sending MFW commands from non-sleepable
    contexts.
    
    Signed-off-by: Tomer Tayar <Tomer.Tayar@qlogic.com>
    Signed-off-by: Yuval Mintz <Yuval.Mintz@qlogic.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c801e64a896b0e6d338dbd72ea027ba21c05e702
Author: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
Date:   Mon Nov 16 12:40:48 2015 -0500

    xen/pciback: Save xen_pci_op commands before processing it
    
    [ Upstream commit 8135cf8b092723dbfcc611fe6fdcb3a36c9951c5 ]
    
    Double fetch vulnerabilities that happen when a variable is
    fetched twice from shared memory but a security check is only
    performed the first time.
    
    The xen_pcibk_do_op function performs a switch statements on the op->cmd
    value which is stored in shared memory. Interestingly this can result
    in a double fetch vulnerability depending on the performed compiler
    optimization.
    
    This patch fixes it by saving the xen_pci_op command before
    processing it. We also use 'barrier' to make sure that the
    compiler does not perform any optimization.
    
    This is part of XSA155.
    
    CC: stable@vger.kernel.org
    Reviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Signed-off-by: Jan Beulich <JBeulich@suse.com>
    Signed-off-by: David Vrabel <david.vrabel@citrix.com>
    Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Signed-off-by: Sasha Levin <sasha.levin@oracle.com>

commit b0a4f565b1dba16cb98842d3129fa0f57445b044
Author: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
Date:   Mon Nov 16 12:40:48 2015 -0500

    xen/pciback: Save xen_pci_op commands before processing it
    
    [ Upstream commit 8135cf8b092723dbfcc611fe6fdcb3a36c9951c5 ]
    
    Double fetch vulnerabilities that happen when a variable is
    fetched twice from shared memory but a security check is only
    performed the first time.
    
    The xen_pcibk_do_op function performs a switch statements on the op->cmd
    value which is stored in shared memory. Interestingly this can result
    in a double fetch vulnerability depending on the performed compiler
    optimization.
    
    This patch fixes it by saving the xen_pci_op command before
    processing it. We also use 'barrier' to make sure that the
    compiler does not perform any optimization.
    
    This is part of XSA155.
    
    CC: stable@vger.kernel.org
    Reviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Signed-off-by: Jan Beulich <JBeulich@suse.com>
    Signed-off-by: David Vrabel <david.vrabel@citrix.com>
    Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Signed-off-by: Sasha Levin <sasha.levin@oracle.com>

commit 2c756feb18d9ec258dbb3a3d11c47e28820690d7
Author: Christopher S. Hall <christopher.s.hall@intel.com>
Date:   Mon Feb 22 03:15:23 2016 -0800

    time: Add history to cross timestamp interface supporting slower devices
    
    Another representative use case of time sync and the correlated
    clocksource (in addition to PTP noted above) is PTP synchronized
    audio.
    
    In a streaming application, as an example, samples will be sent and/or
    received by multiple devices with a presentation time that is in terms
    of the PTP master clock. Synchronizing the audio output on these
    devices requires correlating the audio clock with the PTP master
    clock. The more precise this correlation is, the better the audio
    quality (i.e. out of sync audio sounds bad).
    
    From an application standpoint, to correlate the PTP master clock with
    the audio device clock, the system clock is used as a intermediate
    timebase. The transforms such an application would perform are:
    
        System Clock <-> Audio clock
        System Clock <-> Network Device Clock [<-> PTP Master Clock]
    
    Modern Intel platforms can perform a more accurate cross timestamp in
    hardware (ART,audio device clock).  The audio driver requires
    ART->system time transforms -- the same as required for the network
    driver. These platforms offload audio processing (including
    cross-timestamps) to a DSP which to ensure uninterrupted audio
    processing, communicates and response to the host only once every
    millsecond. As a result is takes up to a millisecond for the DSP to
    receive a request, the request is processed by the DSP, the audio
    output hardware is polled for completion, the result is copied into
    shared memory, and the host is notified. All of these operation occur
    on a millisecond cadence.  This transaction requires about 2 ms, but
    under heavier workloads it may take up to 4 ms.
    
    Adding a history allows these slow devices the option of providing an
    ART value outside of the current interval. In this case, the callback
    provided is an accessor function for the previously obtained counter
    value. If get_system_device_crosststamp() receives a counter value
    previous to cycle_last, it consults the history provided as an
    argument in history_ref and interpolates the realtime and monotonic
    raw system time using the provided counter value. If there are any
    clock discontinuities, e.g. from calling settimeofday(), the monotonic
    raw time is interpolated in the usual way, but the realtime clock time
    is adjusted by scaling the monotonic raw adjustment.
    
    When an accessor function is used a history argument *must* be
    provided. The history is initialized using ktime_get_snapshot() and
    must be called before the counter values are read.
    
    Cc: Prarit Bhargava <prarit@redhat.com>
    Cc: Richard Cochran <richardcochran@gmail.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: kevin.b.stanton@intel.com
    Cc: kevin.j.clarke@intel.com
    Cc: hpa@zytor.com
    Cc: jeffrey.t.kirsher@intel.com
    Cc: netdev@vger.kernel.org
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Christopher S. Hall <christopher.s.hall@intel.com>
    [jstultz: Fixed up cycles_t/cycle_t type confusion]
    Signed-off-by: John Stultz <john.stultz@linaro.org>

commit ee3b8d377ca014b0ec4ea8988ba6fbe8463bd8d9
Author: Martin Brandenburg <martin@omnibond.com>
Date:   Wed Feb 17 12:55:42 2016 -0500

    orangefs: free readdir buffer index before the dir_emit loop
    
    We only need it while the service operation is actually in progress
    since it is only used to co-ordinate the client-core's memory use. The
    kernel allocates its own space.
    
    Also clean up some comments which mislead the reader into thinking
    the readdir buffers are shared memory.
    
    Signed-off-by: Martin Brandenburg <martin@omnibond.com>
    Signed-off-by: Mike Marshall <hubcap@omnibond.com>

commit 569aa0b961d42d518393e813329b613577d5dd76
Author: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
Date:   Mon Nov 16 12:40:48 2015 -0500

    xen/pciback: Save xen_pci_op commands before processing it
    
    commit 8135cf8b092723dbfcc611fe6fdcb3a36c9951c5 upstream.
    
    Double fetch vulnerabilities that happen when a variable is
    fetched twice from shared memory but a security check is only
    performed the first time.
    
    The xen_pcibk_do_op function performs a switch statements on the op->cmd
    value which is stored in shared memory. Interestingly this can result
    in a double fetch vulnerability depending on the performed compiler
    optimization.
    
    This patch fixes it by saving the xen_pci_op command before
    processing it. We also use 'barrier' to make sure that the
    compiler does not perform any optimization.
    
    This is part of XSA155.
    
    Reviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Signed-off-by: Jan Beulich <JBeulich@suse.com>
    Signed-off-by: David Vrabel <david.vrabel@citrix.com>
    Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Signed-off-by: Luis Henriques <luis.henriques@canonical.com>

commit 9cbc2b03e6d123d551db7e02c60545a1484fe5e2
Author: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
Date:   Mon Nov 16 12:40:48 2015 -0500

    xen/pciback: Save xen_pci_op commands before processing it
    
    commit 8135cf8b092723dbfcc611fe6fdcb3a36c9951c5 upstream.
    
    Double fetch vulnerabilities that happen when a variable is
    fetched twice from shared memory but a security check is only
    performed the first time.
    
    The xen_pcibk_do_op function performs a switch statements on the op->cmd
    value which is stored in shared memory. Interestingly this can result
    in a double fetch vulnerability depending on the performed compiler
    optimization.
    
    This patch fixes it by saving the xen_pci_op command before
    processing it. We also use 'barrier' to make sure that the
    compiler does not perform any optimization.
    
    This is part of XSA155.
    
    Reviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Signed-off-by: Jan Beulich <JBeulich@suse.com>
    Signed-off-by: David Vrabel <david.vrabel@citrix.com>
    Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 875fc4f5ddf35605581f9a5900c14afef48611f2
Merge: 7d1fc01afc5a 7dfa4612204b
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Jan 15 11:41:44 2016 -0800

    Merge branch 'akpm' (patches from Andrew)
    
    Merge first patch-bomb from Andrew Morton:
    
     - A few hotfixes which missed 4.4 becasue I was asleep.  cc'ed to
       -stable
    
     - A few misc fixes
    
     - OCFS2 updates
    
     - Part of MM.  Including pretty large changes to page-flags handling
       and to thp management which have been buffered up for 2-3 cycles now.
    
      I have a lot of MM material this time.
    
    [ It turns out the THP part wasn't quite ready, so that got dropped from
      this series  - Linus ]
    
    * emailed patches from Andrew Morton <akpm@linux-foundation.org>: (117 commits)
      zsmalloc: reorganize struct size_class to pack 4 bytes hole
      mm/zbud.c: use list_last_entry() instead of list_tail_entry()
      zram/zcomp: do not zero out zcomp private pages
      zram: pass gfp from zcomp frontend to backend
      zram: try vmalloc() after kmalloc()
      zram/zcomp: use GFP_NOIO to allocate streams
      mm: add tracepoint for scanning pages
      drivers/base/memory.c: fix kernel warning during memory hotplug on ppc64
      mm/page_isolation: use macro to judge the alignment
      mm: fix noisy sparse warning in LIBCFS_ALLOC_PRE()
      mm: rework virtual memory accounting
      include/linux/memblock.h: fix ordering of 'flags' argument in comments
      mm: move lru_to_page to mm_inline.h
      Documentation/filesystems: describe the shared memory usage/accounting
      memory-hotplug: don't BUG() in register_memory_resource()
      hugetlb: make mm and fs code explicitly non-modular
      mm/swapfile.c: use list_for_each_entry_safe in free_swap_count_continuations
      mm: /proc/pid/clear_refs: no need to clear VM_SOFTDIRTY in clear_soft_dirty_pmd()
      mm: make sure isolate_lru_page() is never called for tail page
      vmstat: make vmstat_updater deferrable again and shut down on idle
      ...

commit 0bc126d460453736c0e03d9da7ae0e9d4fcf86b3
Author: Rodrigo Freire <rfreire@redhat.com>
Date:   Thu Jan 14 15:21:58 2016 -0800

    Documentation/filesystems: describe the shared memory usage/accounting
    
    The Shared Memory accounting support is present in Kernel since commit
    4b02108ac1b3 ("mm: oom analysis: add shmem vmstat") and in userland
    free(1) since 2014.  This patch updates the Documentation to reflect
    this change.
    
    Signed-off-by: Rodrigo Freire <rfreire@redhat.com>
    Acked-by: Vlastimil Babka <vbabka@suse.cz>
    Cc: Hugh Dickins <hughd@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 8cee852ec53fb530f10ccabf1596734209ae336b
Author: Jerome Marchand <jmarchan@redhat.com>
Date:   Thu Jan 14 15:19:29 2016 -0800

    mm, procfs: breakdown RSS for anon, shmem and file in /proc/pid/status
    
    There are several shortcomings with the accounting of shared memory
    (SysV shm, shared anonymous mapping, mapping of a tmpfs file).  The
    values in /proc/<pid>/status and <...>/statm don't allow to distinguish
    between shmem memory and a shared mapping to a regular file, even though
    theirs implication on memory usage are quite different: during reclaim,
    file mapping can be dropped or written back on disk, while shmem needs a
    place in swap.
    
    Also, to distinguish the memory occupied by anonymous and file mappings,
    one has to read the /proc/pid/statm file, which has a field for the file
    mappings (again, including shmem) and total memory occupied by these
    mappings (i.e.  equivalent to VmRSS in the <...>/status file.  Getting
    the value for anonymous mappings only is thus not exactly user-friendly
    (the statm file is intended to be rather efficiently machine-readable).
    
    To address both of these shortcomings, this patch adds a breakdown of
    VmRSS in /proc/<pid>/status via new fields RssAnon, RssFile and
    RssShmem, making use of the previous preparatory patch.  These fields
    tell the user the memory occupied by private anonymous pages, mapped
    regular files and shmem, respectively.  Other existing fields in /status
    and /statm files are left without change.  The /statm file can be
    extended in the future, if there's a need for that.
    
    Example (part of) /proc/pid/status output including the new Rss* fields:
    
    VmPeak:  2001008 kB
    VmSize:  2001004 kB
    VmLck:         0 kB
    VmPin:         0 kB
    VmHWM:      5108 kB
    VmRSS:      5108 kB
    RssAnon:              92 kB
    RssFile:            1324 kB
    RssShmem:           3692 kB
    VmData:      192 kB
    VmStk:       136 kB
    VmExe:         4 kB
    VmLib:      1784 kB
    VmPTE:      3928 kB
    VmPMD:        20 kB
    VmSwap:        0 kB
    HugetlbPages:          0 kB
    
    [vbabka@suse.cz: forward-porting, tweak changelog]
    Signed-off-by: Jerome Marchand <jmarchan@redhat.com>
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
    Acked-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Acked-by: Hugh Dickins <hughd@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit bf9683d6990589390b5178dafe8fd06808869293
Author: Vlastimil Babka <vbabka@suse.cz>
Date:   Thu Jan 14 15:19:14 2016 -0800

    mm, documentation: clarify /proc/pid/status VmSwap limitations for shmem
    
    This series is based on Jerome Marchand's [1] so let me quote the first
    paragraph from there:
    
    There are several shortcomings with the accounting of shared memory
    (sysV shm, shared anonymous mapping, mapping to a tmpfs file).  The
    values in /proc/<pid>/status and statm don't allow to distinguish
    between shmem memory and a shared mapping to a regular file, even though
    their implications on memory usage are quite different: at reclaim, file
    mapping can be dropped or written back on disk while shmem needs a place
    in swap.  As for shmem pages that are swapped-out or in swap cache, they
    aren't accounted at all.
    
    The original motivation for myself is that a customer found (IMHO
    rightfully) confusing that e.g.  top output for process swap usage is
    unreliable with respect to swapped out shmem pages, which are not
    accounted for.
    
    The fundamental difference between private anonymous and shmem pages is
    that the latter has PTE's converted to pte_none, and not swapents.  As
    such, they are not accounted to the number of swapents visible e.g.  in
    /proc/pid/status VmSwap row.  It might be theoretically possible to use
    swapents when swapping out shmem (without extra cost, as one has to
    change all mappers anyway), and on swap in only convert the swapent for
    the faulting process, leaving swapents in other processes until they
    also fault (so again no extra cost).  But I don't know how many
    assumptions this would break, and it would be too disruptive change for
    a relatively small benefit.
    
    Instead, my approach is to document the limitation of VmSwap, and
    provide means to determine the swap usage for shmem areas for those who
    are interested and willing to pay the price, using /proc/pid/smaps.
    Because outside of ipcs, I don't think it's possible to currently to
    determine the usage at all.  The previous patchset [1] did introduce new
    shmem-specific fields into smaps output, and functions to determine the
    values.  I take a simpler approach, noting that smaps output already has
    a "Swap: X kB" line, where currently X == 0 always for shmem areas.  I
    think we can just consider this a bug and provide the proper value by
    consulting the radix tree, as e.g.  mincore_page() does.  In the patch
    changelog I explain why this is also not perfect (and cannot be without
    swapents), but still arguably much better than showing a 0.
    
    The last two patches are adapted from Jerome's patchset and provide a
    VmRSS breakdown to RssAnon, RssFile and RssShm in /proc/pid/status.
    Hugh noted that this is a welcome addition, and I agree that it might
    help e.g.  debugging process memory usage at albeit non-zero, but still
    rather low cost of extra per-mm counter and some page flag checks.
    
    [1] http://lwn.net/Articles/611966/
    
    This patch (of 6):
    
    The documentation for /proc/pid/status does not mention that the value
    of VmSwap counts only swapped out anonymous private pages, and not
    swapped out pages of the underlying shmem objects (for shmem mappings).
    This is not obvious, so document this limitation.
    
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
    Acked-by: Konstantin Khlebnikov <khlebnikov@yandex-team.ru>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Acked-by: Jerome Marchand <jmarchan@redhat.com>
    Acked-by: Hugh Dickins <hughd@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 8135cf8b092723dbfcc611fe6fdcb3a36c9951c5
Author: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
Date:   Mon Nov 16 12:40:48 2015 -0500

    xen/pciback: Save xen_pci_op commands before processing it
    
    Double fetch vulnerabilities that happen when a variable is
    fetched twice from shared memory but a security check is only
    performed the first time.
    
    The xen_pcibk_do_op function performs a switch statements on the op->cmd
    value which is stored in shared memory. Interestingly this can result
    in a double fetch vulnerability depending on the performed compiler
    optimization.
    
    This patch fixes it by saving the xen_pci_op command before
    processing it. We also use 'barrier' to make sure that the
    compiler does not perform any optimization.
    
    This is part of XSA155.
    
    CC: stable@vger.kernel.org
    Reviewed-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    Signed-off-by: Jan Beulich <JBeulich@suse.com>
    Signed-off-by: David Vrabel <david.vrabel@citrix.com>
    Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>

commit 3988f645f053a6889d00324dac3e57bd62cb8900
Author: Ilia Mirkin <imirkin@alum.mit.edu>
Date:   Wed Oct 7 18:39:32 2015 -0400

    drm/nouveau/gr: document mp error 0x10
    
    NVIDIA provided the documentation for mp error 0x10, INVALID_ADDR_SPACE,
    which apparently happens when trying to use an atomic operation on
    local or shared memory (instead of global memory).
    
    Signed-off-by: Ilia Mirkin <imirkin@alum.mit.edu>
    Signed-off-by: Ben Skeggs <bskeggs@redhat.com>

commit 8ea4484d0c2bb4e2152261943fa1a3522654b1c7
Author: Lee Jones <lee.jones@linaro.org>
Date:   Fri Oct 16 08:21:30 2015 +0100

    mailbox: Add generic mechanism for testing Mailbox Controllers
    
    This particular Client implementation uses shared memory in order
    to pass messages between Mailbox users; however, it can be easily
    hacked to support any type of Controller.
    
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Jassi Brar <jaswinder.singh@linaro.org>

commit 9ef4546cbd7eed2412ec6f1161c2b92362379150
Author: Lee Jones <lee.jones@linaro.org>
Date:   Fri Oct 16 08:21:28 2015 +0100

    mailbox: Add support for ST's Mailbox IP
    
    ST's platforms currently support a maximum of 5 Mailboxes, one for
    each of the supported co-processors situated on the platform.  Each
    Mailbox is divided up into 4 instances which consist of 32 channels.
    Messages are passed between the application and co-processors using
    shared memory areas.  It is the Client's responsibility to manage
    these areas.
    
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Jassi Brar <jaswinder.singh@linaro.org>

commit ff9a6262b9b87204146427a3abefc73ab990c21f
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Wed Jun 3 14:18:21 2015 +0100

    arm64: dts: add SRAM, MHU mailbox and SCPI support on Juno
    
    This patch adds support for the MHU mailbox peripheral used on Juno by
    application processors to communicate with remote SCP handling most of
    the CPU/system power management. It also adds the SRAM reserving the
    shared memory and SCPI message protocol using that shared memory.
    
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Acked-by: Liviu Dudau <Liviu.Dudau@arm.com>
    Cc: Jon Medhurst (Tixy) <tixy@linaro.org>

commit 25edd8bffd0f7563f0c04c1d219eb89061ce9886
Author: Andrea Arcangeli <aarcange@redhat.com>
Date:   Fri Sep 4 15:46:00 2015 -0700

    userfaultfd: linux/Documentation/vm/userfaultfd.txt
    
    This is the latest userfaultfd patchset.  The postcopy live migration
    feature on the qemu side is mostly ready to be merged and it entirely
    depends on the userfaultfd syscall to be merged as well.  So it'd be great
    if this patchset could be reviewed for merging in -mm.
    
    Userfaults allow to implement on demand paging from userland and more
    generally they allow userland to more efficiently take control of the
    behavior of page faults than what was available before (PROT_NONE +
    SIGSEGV trap).
    
    The use cases are:
    
    1) KVM postcopy live migration (one form of cloud memory
       externalization).
    
       KVM postcopy live migration is the primary driver of this work:
    
        http://blog.zhaw.ch/icclab/setting-up-post-copy-live-migration-in-openstack/
        http://lists.gnu.org/archive/html/qemu-devel/2015-02/msg04873.html
    
    2) postcopy live migration of binaries inside linux containers:
    
        http://thread.gmane.org/gmane.linux.kernel.mm/132662
    
    3) KVM postcopy live snapshotting (allowing to limit/throttle the
       memory usage, unlike fork would, plus the avoidance of fork
       overhead in the first place).
    
       While the wrprotect tracking is not implemented yet, the syscall API is
       already contemplating the wrprotect fault tracking and it's generic enough
       to allow its later implementation in a backwards compatible fashion.
    
    4) KVM userfaults on shared memory. The UFFDIO_COPY lowlevel method
       should be extended to work also on tmpfs and then the
       uffdio_register.ioctls will notify userland that UFFDIO_COPY is
       available even when the registered virtual memory range is tmpfs
       backed.
    
    5) alternate mechanism to notify web browsers or apps on embedded
       devices that volatile pages have been reclaimed. This basically
       avoids the need to run a syscall before the app can access with the
       CPU the virtual regions marked volatile. This depends on point 4)
       to be fulfilled first, as volatile pages happily apply to tmpfs.
    
    Even though there wasn't a real use case requesting it yet, it also
    allows to implement distributed shared memory in a way that readonly
    shared mappings can exist simultaneously in different hosts and they
    can be become exclusive at the first wrprotect fault.
    
    This patch (of 22):
    
    Add documentation.
    
    Signed-off-by: Andrea Arcangeli <aarcange@redhat.com>
    Acked-by: Pavel Emelyanov <xemul@parallels.com>
    Cc: Sanidhya Kashyap <sanidhya.gatech@gmail.com>
    Cc: zhang.zhanghailiang@huawei.com
    Cc: "Kirill A. Shutemov" <kirill@shutemov.name>
    Cc: Andres Lagar-Cavilla <andreslc@google.com>
    Cc: Dave Hansen <dave.hansen@intel.com>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Rik van Riel <riel@redhat.com>
    Cc: Mel Gorman <mgorman@suse.de>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Hugh Dickins <hughd@google.com>
    Cc: Peter Feiner <pfeiner@google.com>
    Cc: "Dr. David Alan Gilbert" <dgilbert@redhat.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: "Huangpeng (Peter)" <peter.huangpeng@huawei.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 56fff0a01fa056502a28d67cb5a2714d64780415
Merge: 4a89ba04ecc6 786eec27cbb1
Author: David S. Miller <davem@davemloft.net>
Date:   Mon Aug 24 14:06:37 2015 -0700

    Merge branch 'fjes'
    
    Taku Izumi says:
    
    ====================
    FUJITSU Extended Socket network device driver
    
    This patchsets adds FUJITSU Extended Socket network device driver.
    Extended Socket network device is a shared memory based high-speed
    network interface between Extended Partitions of PRIMEQUEST 2000 E2
    series.
    
    You can get some information about Extended Partition and Extended
    Socket by referring the following manual.
    
    http://globalsp.ts.fujitsu.com/dmsp/Publications/public/CA92344-0537.pdf
        3.2.1 Extended Partitioning
        3.2.2 Extended Socke
    
    v2.2 -> v3:
       - Fix up according to David's comment (No functional change)
    ====================
    
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit b772b9dc63df0ca8a750ceac9ab356376022f0b6
Author: Taku Izumi <izumi.taku@jp.fujitsu.com>
Date:   Fri Aug 21 17:29:25 2015 +0900

    fjes: raise_intr_rxdata_task
    
    This patch add raise_intr_rxdata_task.
    Extended Socket Network Device is shared memory
    based, so someone's transmission denotes other's
    reception. In order to notify receivers, sender
    has to raise interruption of receivers.
    raise_intr_rxdata_task does this work.
    
    Signed-off-by: Taku Izumi <izumi.taku@jp.fujitsu.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 9cc137a3ffa3162a0d5af822149a5cec1b42c24e
Author: Wentao Xu <wentaox@codeaurora.org>
Date:   Mon Jul 6 16:35:30 2015 -0400

    drm/msm/mdp5: use 2 memory clients for YUV formats on newer mdp5
    
    Newer MDP5 uses 2 shared memory pool clients for certain YUV formats.
    For example, if VIG0 is used to fetch data in YUYV format, it will use
    VIG0_Y for Y component, and VIG0_Cr for UV packed.
    
    Signed-off-by: Wentao Xu <wentaox@codeaurora.org>
    [rebase]
    Signed-off-by: Stephane Viau <sviau@codeaurora.org>

commit 657c63f0af2d0b44446c840cd42228ef1ebcdce4
Author: Wentao Xu <wentaox@codeaurora.org>
Date:   Fri Jun 19 14:03:42 2015 -0400

    drm/msm/mdp5: release SMB (shared memory blocks) in various cases
    
    Release all blocks after the pipe is disabled, even when vsync
    didn't happen in some error cases. Allow requesting SMB multiple
    times before configuring to hardware, by releasing blocks not
    programmed to hardware yet for shrinking case.
    
    This fixes a potential leak of shared memory pool blocks.
    
    Signed-off-by: Wentao Xu <wentaox@codeaurora.org>
    Tested-by: Archit Taneja <architt@codeaurora.org>
    Signed-off-by: Rob Clark <robdclark@gmail.com>

commit fd56d1d66afce096f643faedfe1505488bdf1edd
Merge: 8400935737bf bdce3e7c7299
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Jul 31 12:05:02 2015 -0700

    Merge branch 'drm-fixes' of git://people.freedesktop.org/~airlied/linux
    
    Pull drm fixes from Dave Airlie:
     "This has a bunch of nouveau fixes, as Ben has been hibernating and has
      lots of small fixes for lots of bugs across nouveau.
    
      Radeon has one major fix for hdmi/dp audio regression that is larger
      than Alex would like, but seems to fix up a fair few bugs, along with
      some misc fixes.
    
      And a few msm fixes, one of which is also a bit large.
    
      But nothing in here seems insane or crazy for this stage, just more
      than I'd like"
    
    * 'drm-fixes' of git://people.freedesktop.org/~airlied/linux: (33 commits)
      drm/msm/mdp5: release SMB (shared memory blocks) in various cases
      drm/msm: change to uninterruptible wait in atomic commit
      drm/msm: mdp4: Fix drm_framebuffer dereference crash
      drm/msm: fix msm_gem_prime_get_sg_table()
      drm/amdgpu: add new parameter to seperate map and unmap
      drm/amdgpu: hdp_flush is not needed for inside IB
      drm/amdgpu: different emit_ib for gfx and compute
      drm/amdgpu: information leak in amdgpu_info_ioctl()
      drm/amdgpu: clean up init sequence for failures
      drm/radeon/combios: add some validation of lvds values
      drm/radeon: rework audio modeset to handle non-audio hdmi features
      drm/radeon: rework audio detect (v4)
      drm/amdgpu: Drop drm/ prefix for including drm.h in amdgpu_drm.h
      drm/radeon: Drop drm/ prefix for including drm.h in radeon_drm.h
      drm/nouveau/nouveau/ttm: fix tiled system memory with Maxwell
      drm/nouveau/kms/nv50-: guard against enabling cursor on disabled heads
      drm/nouveau/fbcon/g80: reduce PUSH_SPACE alloc, fire ring on accel init
      drm/nouveau/fbcon/gf100-: reduce RING_SPACE allocation
      drm/nouveau/fbcon/nv11-: correctly account for ring space usage
      drm/nouveau/bios: add proper support for opcode 0x59
      ...

commit bdce3e7c729907e303396690b2b23b972c6717be
Merge: d698291cd4fe b4cba04f05ed
Author: Dave Airlie <airlied@redhat.com>
Date:   Thu Jul 30 12:41:44 2015 +1000

    Merge branch 'msm-fixes-4.2' of git://people.freedesktop.org/~robclark/linux into drm-fixes
    
    Fix for nasty crash on mdp4 in disable path, fix for dma-buf export,
    smb leak on mdp5 which could result in intermittent modeset fails, and
    don't let interrupted system call disturb atomic commit once we are
    past the point of no return.
    
    * 'msm-fixes-4.2' of git://people.freedesktop.org/~robclark/linux:
      drm/msm/mdp5: release SMB (shared memory blocks) in various cases
      drm/msm: change to uninterruptible wait in atomic commit
      drm/msm: mdp4: Fix drm_framebuffer dereference crash
      drm/msm: fix msm_gem_prime_get_sg_table()

commit b4cba04f05ed6b9b2278547295ecc5c40180e612
Author: Wentao Xu <wentaox@codeaurora.org>
Date:   Fri Jun 19 14:03:42 2015 -0400

    drm/msm/mdp5: release SMB (shared memory blocks) in various cases
    
    Release all blocks after the pipe is disabled, even when vsync
    didn't happen in some error cases. Allow requesting SMB multiple
    times before configuring to hardware, by releasing blocks not
    programmed to hardware yet for shrinking case.
    
    This fixes a potential leak of shared memory pool blocks.
    
    Signed-off-by: Wentao Xu <wentaox@codeaurora.org>
    Tested-by: Archit Taneja <architt@codeaurora.org>
    Signed-off-by: Rob Clark <robdclark@gmail.com>

commit ba68227e610cec8e0bef7da7e04af3f479d9797d
Author: Bjorn Andersson <bjorn.andersson@sonymobile.com>
Date:   Mon Jul 27 20:20:31 2015 -0700

    devicetree: soc: Add Qualcomm SMD based RPM DT binding
    
    Add binding documentation for the Qualcomm Resource Power Manager (RPM)
    using shared memory (Qualcomm SMD) as transport mechanism. This is found
    in 8974 and newer based devices.
    
    The binding currently describes the rpm itself and the regulator
    subnodes.
    
    Signed-off-by: Bjorn Andersson <bjorn.andersson@sonymobile.com>
    Signed-off-by: Andy Gross <agross@codeaurora.org>

commit 23ad69aafec5d3815fdbe59aea56ec4b59dcae60
Author: Herbert Xu <herbert@gondor.apana.org.au>
Date:   Wed Jul 8 21:40:39 2015 +0800

    crypto: nx/842 - Fix context corruption
    
    The transform context is shared memory and must not be written
    to without locking.  This patch adds locking to nx-842 to prevent
    context corruption.
    
    Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>

commit f8b5918495be32807c4f878de959540eb63a9b9f
Author: Davidlohr Bueso <dave@stgolabs.net>
Date:   Tue Jun 30 14:58:45 2015 -0700

    ipc,sysv: make return -EIDRM when racing with RMID consistent
    
    The ipc_lock helper is used by all forms of sysv ipc to acquire the ipc
    object's spinlock.  Upon error (bogus identifier), we always return
    -EINVAL, whether the problem be in the idr path or because we raced with a
    task performing RMID.  For the later, however, all ipc related manpages,
    state the that for:
    
           EIDRM  <ID> points to a removed identifier.
    
    And return:
    
           EINVAL Invalid <ID> value, or unaligned, etc.
    
    Which (EINVAL) should only return once the ipc resource is deleted.  For
    all types of ipc this is done immediately upon a RMID command.  However,
    shared memory behaves slightly different as it can merely mark a segment
    for deletion, and delay the actual freeing until there are no more active
    consumers.  Per shmctl(IPC_RMID) manpage:
    
    ""
    Mark  the  segment to be destroyed.  The segment will only actually
    be destroyed after the last process detaches it (i.e., when the
    shm_nattch member of the associated structure shmid_ds is zero).
    ""
    
    Unlike ipc_lock, paths that behave "correctly", at least per the manpage,
    involve controlling the ipc resource via *ctl(), doing the exact same
    validity check as ipc_lock after right acquiring the spinlock:
    
            if (!ipc_valid_object()) {
                    err = -EIDRM;
                    goto out_unlock;
            }
    
    Thus make ipc_lock consistent with the rest of ipc code and return -EIDRM
    in ipc_lock when !ipc_valid_object().
    
    Signed-off-by: Davidlohr Bueso <dbueso@suse.de>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 14aa02449064541217836b9f3d3295e241d5ae9c
Merge: 79319a052cb0 2c33ce009ca2
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Mon Apr 20 14:06:06 2015 -0700

    Merge branch 'drm-next-merged' of git://people.freedesktop.org/~airlied/linux
    
    Pull drm updates from Dave Airlie:
     "Highlights:
    
      Core:
       - Virtual GEM layer merged, this has been around for a long time, and
         it provides a software backed device that allows userspace to use
         it as a GEM shared memory handler.  This makes it a lot easier to
         do certain things when you have no GPU but still have to deal with
         DRI expectations.
       - atomic helper updates.
       - framebuffer modifier interface added.
       - i2c over auxch displayport fixes.
       - fb width/height confusion fixes.
       - new driver for ps8622/ps8625 bridge chips
       - lots of new panels
    
      i915:
       - more plane atomic conversion
       - vGPU guest support for XenGT
       - Skylake workarounds and fixes
       - Y-tiling support
       - work on dynamic pagetable allocation
       - EU count report param for gen9+
       - CHV fixes (no longer prelim)
       - remove ilk rc6
       - frontbuffer tracking for fbc
       - Displayport link rate refactoring
       - sprite colorkey refactor
    
      radeon:
       - Displayport MST support (not enabled by default)
       - non-ATOM native hw auxch support (DCE5+)
       - output csc support
       - new queries for userspace debug support
       - new VCE packet
    
      nouveau:
       - gk20a iommu support
       - gm107 graphics support
       - more gm20x bringup (waiting on signed nvidia fw).
    
      amdkfd:
       - multiple kgd instance support
       - use 64-bit time accessors
    
      msm:
       - stolen memory support
       - DSI and dual-DSI support
       - snapdragon 410 support
    
      exynos:
       - cleanups for atomic and pageflip
    
      imx-drm:
       - more media-bus formats
       - TV output prep
       - drm panel support
    
      tegra:
       - hw vblank counter using host1x syncpoints
    
      omap:
       - universal plane support
       - prep work for atomic modesetting
    
      rcar-du:
       - ported to atomic modesetting
    
      atmel-hlcdc:
       - ported to atomic modesetting
       - added suspend/resume support
    
      sti:
       - ported to atomic modesetting
    
      dwhdmi:
       - more compliant audio support
       - update rockchip phy support
    
      tda998x:
       - DT probing for attached crtcs
       - simplified EDID reading
    
      rockchip:
       - fixes
    
      adv7511:
       - fixes"
    
    * 'drm-next-merged' of git://people.freedesktop.org/~airlied/linux: (689 commits)
      media-bus: Fixup RGB444_1X12, RGB565_1X16, and YUV8_1X24 media bus format
      drm/i915: Dont enable CS_PARSER_ERROR interrupts at all
      drm/i915: Move drm_framebuffer_unreference out of struct_mutex for takeover
      drm: fix trivial typo mistake
      drm: Make integer overflow checking cover universal cursor updates (v2)
      drm/nouveau/bios: fix fetching from acpi on certain systems
      drm/nouveau/gr/gm206: initial init+ctx code
      drm/nouveau/ce/gm206: enable support via gm204 code
      drm/nouveau/fifo/gm206: enable support via gm204 code
      drm/nouveau/gr/gm204: initial init+ctx code
      drm/nouveau: support for buffer moves via MaxwellDmaCopyA
      drm/nouveau/ce/gm204: initial support
      drm/nouveau: add support for gm20x fifo channels
      drm/nouveau/fifo/gm204: initial support
      drm/nouveau/gr/gk104-: prevent reading non-existent regs in intr handler
      drm/nouveau/gr/gm107: very slightly demagic part of attrib cb setup
      drm/nouveau/gr/gk104-: correct crop/zrop num_active_fbps setting
      drm/nouveau/gr/gf100-: add symbolic names for classes
      drm/nouveau/gr/gm107: support tpc "strand" ctxsw in gpccs ucode
      drm/nouveau/gr/gf100-: support mmio access with gpc offset from gpccs ucode
      ...

commit 80d6b94bd69a7a49b52bf503ef6a841f43cf5bbb
Author: David Rientjes <rientjes@google.com>
Date:   Wed Apr 15 16:14:26 2015 -0700

    mm, doc: cleanup and clarify munmap behavior for hugetlb memory
    
    munmap(2) of hugetlb memory requires a length that is hugepage aligned,
    otherwise it may fail.  Add this to the documentation.
    
    This also cleans up the documentation and separates it into logical units:
    one part refers to MAP_HUGETLB and another part refers to requirements for
    shared memory segments.
    
    Signed-off-by: David Rientjes <rientjes@google.com>
    Cc: Jonathan Corbet <corbet@lwn.net>
    Cc: Davide Libenzi <davidel@xmailserver.org>
    Cc: Luiz Capitulino <lcapitulino@redhat.com>
    Cc: Shuah Khan <shuahkh@osg.samsung.com>
    Acked-by: Hugh Dickins <hughd@google.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Joern Engel <joern@logfs.org>
    Cc: Jianguo Wu <wujianguo@huawei.com>
    Cc: Eric B Munson <emunson@akamai.com>
    Cc: Michael Ellerman <mpe@ellerman.id.au>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit fcd02d27b5c543f2d4538d2ac402fed1154c6dfb
Author: Yaniv Rosner <Yaniv.Rosner@qlogic.com>
Date:   Sun Mar 29 10:05:00 2015 +0300

    bnx2x: Count number of link changes
    
    Number of link changes are now being stored in shared memory [by all possible
    link owners], for management use [as well as possible debug information for
    dumps].
    
    Signed-off-by: Yaniv Rosner <Yaniv.Rosner@qlogic.com>
    Signed-off-by: Yuval Mintz <Yuval.Mintz@qlogic.com>
    Signed-off-by: Ariel Elior <Ariel.Elior@qlogic.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2541f7f4c14e2198ed8d8c61c854b86cae238cf1
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Mon Jan 19 17:22:55 2015 +0100

    i2c: slave-eeprom: fix boundary check when using sysfs
    
    Due to a copy&paste error, the last byte of the shared memory was not
    accessible via sysfs.
    
    Reported-by: Debora Grosse <debora@mds.com>
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Acked-by: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>

commit 389be323cfac383e4d71dfeeaa1b0c3aec722a5f
Author: Wolfram Sang <wsa+renesas@sang-engineering.com>
Date:   Tue Nov 18 17:04:54 2014 +0100

    i2c: slave-eeprom: add eeprom simulator driver
    
    The first user of the i2c-slave interface is an eeprom simulator. It is
    a shared memory which can be accessed by the remote master via I2C and
    locally via sysfs.
    
    Signed-off-by: Wolfram Sang <wsa+renesas@sang-engineering.com>
    Signed-off-by: Wolfram Sang <wsa@the-dreams.de>

commit 52f5592e549c013feb9bb71cab3e6fd624633577
Author: Jungseung Lee <js07.lee@gmail.com>
Date:   Wed Dec 10 15:52:16 2014 -0800

    fs/binfmt_elf.c: fix internal inconsistency relating to vma dump size
    
    vma_dump_size() has been used several times on actual dumper and it is
    supposed to return the same value for the same vma.  But vma_dump_size()
    could return different values for same vma.
    
    The known problem case is concurrent shared memory removal.  If a vma is
    used for a shared memory and that shared memory is removed between
    writing program header and dumping vma memory, this will result in a
    dump file which is internally consistent.
    
    To fix the problem, we set baseline to get dump size and store the size
    into vma_filesz and always use the same vma dump size which is stored in
    vma_filsz.  The consistnecy with reality is not actually guranteed, but
    it's tolerable since that is fully consistent with base line.
    
    Signed-off-by: Jungseung Lee <js07.lee@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 97b0c7bd2e86c6e1e00c6b7178cf953d5f70c71a
Author: Sudeep Holla <sudeep.holla@arm.com>
Date:   Tue Nov 11 18:33:01 2014 +0000

    mailbox: add tx_prepare client callback
    
    If the mailbox controller expects the payload is in place before
    initiating the transmit, then it's impossible to reuse the list
    maintained by core mailbox code currently. Maintaining another list
    for sending the message in the controller seems totally unnecessary
    as core mailbox library already provides that feature.
    
    This patch introduces tx_prepare callback in mbox_client which
    can be used by the core mailbox library before initiating the
    transaction through mbox->ops->send_data. The client driver can
    implement this callback to ensure the payload is copied to the
    shared memory.
    
    Signed-off-by: Sudeep Holla <sudeep.holla@arm.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Jassi Brar <jaswinder.singh@linaro.org>

commit 673d659f5c5918b7ddbafebf1f129c9eb82973b4
Author: Alexander Yarygin <yarygin@linux.vnet.ibm.com>
Date:   Fri Oct 3 18:40:12 2014 +0400

    perf kvm stat live: Enable events copying
    
    Process of analyzing events caused by 2 functions: mmap_read() and
    finished_round().
    
    During mmap_read(), perf receives events from shared memory, queues
    their pointers for further processing in finished_round() and notifies
    the kernel that the events have been processed.
    
    By the time when finished_round() is invoked, queued events can be
    overwritten by the kernel, so the finished_round() occurs on potentially
    corrupted memory.
    
    Since there is no place where the event can be safely consumed, let's
    copy events when queueing.
    
    Signed-off-by: Alexander Yarygin <yarygin@linux.vnet.ibm.com>
    Cc: Christian Borntraeger <borntraeger@de.ibm.com>
    Cc: David Ahern <dsahern@gmail.com>
    Cc: Frederic Weisbecker <fweisbec@gmail.com>
    Cc: Ingo Molnar <mingo@kernel.org>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Mike Galbraith <efault@gmx.de>
    Cc: Namhyung Kim <namhyung.kim@lge.com>
    Cc: Paul Mackerras <paulus@samba.org>
    Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
    Cc: Stephane Eranian <eranian@google.com>
    Link: http://lkml.kernel.org/r/1412347212-28237-3-git-send-email-yarygin@linux.vnet.ibm.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

commit 06b2afc0b9a26e7673856a24ab57bfb307dad394
Author: Don Zickus <dzickus@redhat.com>
Date:   Wed Aug 20 23:25:11 2014 -0400

    perf machine: Fallback to MAP__FUNCTION if daddr maps are NULL
    
    As we run "perf c2c" on more applications, we noticed we're missing
    significant samples from a common customer's application.  Looking at
    the /proc/<pid>/maps file for the app, we see "rwxs" and "rwxp"
    permissions on many of the shared memory & heap regions, and on all the
    thread stacks.
    
    Because those regions have the "x" bit set, perf marks them with a
    MAP_FUNCTION type.  Hence ip_resolve_data() never finds load or store
    events coming from them.
    
    We fixed this by re-calling thread__find_addr_location with
    MAP__FUNCTION in the case where map is NULL as a last ditch effort to
    map the sample before giving up and dropping it.
    
    Reported-by: Joe Mario <jmario@redhat.com>
    Tested-by: Joe Mario <jmario@redhat.com>
    Signed-off-by: Don Zickus <dzickus@redhat.com>
    Acked-by: Jiri Olsa <jolsa@kernel.org>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Joe Mario <jmario@redhat.com>
    Cc: Stephane Eranian <eranian@google.com>
    Link: http://lkml.kernel.org/r/1408591511-57884-1-git-send-email-dzickus@redhat.com
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

commit ab602f799159393143d567e5c04b936fec79d6bd
Author: Jack Miller <millerjo@us.ibm.com>
Date:   Fri Aug 8 14:23:19 2014 -0700

    shm: make exit_shm work proportional to task activity
    
    This is small set of patches our team has had kicking around for a few
    versions internally that fixes tasks getting hung on shm_exit when there
    are many threads hammering it at once.
    
    Anton wrote a simple test to cause the issue:
    
      http://ozlabs.org/~anton/junkcode/bust_shm_exit.c
    
    Before applying this patchset, this test code will cause either hanging
    tracebacks or pthread out of memory errors.
    
    After this patchset, it will still produce output like:
    
      root@somehost:~# ./bust_shm_exit 1024 160
      ...
      INFO: rcu_sched detected stalls on CPUs/tasks: {} (detected by 116, t=2111 jiffies, g=241, c=240, q=7113)
      INFO: Stall ended before state dump start
      ...
    
    But the task will continue to run along happily, so we consider this an
    improvement over hanging, even if it's a bit noisy.
    
    This patch (of 3):
    
    exit_shm obtains the ipc_ns shm rwsem for write and holds it while it
    walks every shared memory segment in the namespace.  Thus the amount of
    work is related to the number of shm segments in the namespace not the
    number of segments that might need to be cleaned.
    
    In addition, this occurs after the task has been notified the thread has
    exited, so the number of tasks waiting for the ns shm rwsem can grow
    without bound until memory is exausted.
    
    Add a list to the task struct of all shmids allocated by this task.  Init
    the list head in copy_process.  Use the ns->rwsem for locking.  Add
    segments after id is added, remove before removing from id.
    
    On unshare of NEW_IPCNS orphan any ids as if the task had exited, similar
    to handling of semaphore undo.
    
    I chose a define for the init sequence since its a simple list init,
    otherwise it would require a function call to avoid include loops between
    the semaphore code and the task struct.  Converting the list_del to
    list_del_init for the unshare cases would remove the exit followed by
    init, but I left it blow up if not inited.
    
    Signed-off-by: Milton Miller <miltonm@bga.com>
    Signed-off-by: Jack Miller <millerjo@us.ibm.com>
    Cc: Davidlohr Bueso <davidlohr@hp.com>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Cc: Anton Blanchard <anton@samba.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit cc7452b6dca384400960d40090a98d0eb920ab22
Author: Rafael Aquini <aquini@redhat.com>
Date:   Wed Aug 6 16:06:38 2014 -0700

    mm: export NR_SHMEM via sysinfo(2) / si_meminfo() interfaces
    
    Historically, we exported shared pages to userspace via sysinfo(2)
    sharedram and /proc/meminfo's "MemShared" fields.  With the advent of
    tmpfs, from kernel v2.4 onward, that old way for accounting shared mem
    was deemed inaccurate and we started to export a hard-coded 0 for
    sysinfo.sharedram.  Later on, during the 2.6 timeframe, "MemShared" got
    re-introduced to /proc/meminfo re-branded as "Shmem", but we're still
    reporting sysinfo.sharedmem as that old hard-coded zero, which makes the
    "shared memory" report inconsistent across interfaces.
    
    This patch leverages the addition of explicit accounting for pages used
    by shmem/tmpfs -- "4b02108 mm: oom analysis: add shmem vmstat" -- in
    order to make the users of sysinfo(2) and si_meminfo*() friends aware of
    that vmstat entry and make them report it consistently across the
    interfaces, as well to make sysinfo(2) returned data consistent with our
    current API documentation states.
    
    Signed-off-by: Rafael Aquini <aquini@redhat.com>
    Acked-by: Rik van Riel <riel@redhat.com>
    Cc: Mel Gorman <mgorman@suse.de>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Cc: Hugh Dickins <hughd@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 9d7e3ea73c6be20538a69c14ab8bfb3b36f8d1a8
Merge: 13e9b9972fa0 4d276eb6a478
Author: David S. Miller <davem@davemloft.net>
Date:   Tue Jul 29 11:40:07 2014 -0700

    Merge branch 'syststamp-removal'
    
    Willem de Bruijn says:
    
    ====================
    net: remove deprecated syststamp
    
    The network stack can generate two kinds of hardware timestamps:
    - hwtstamp stores a hw timestamp in device-specific raw format
    - syststamp convers the raw format to system time
    
    The second is deprecated and only implemented by a single device
    driver. The suggested alternative is to communicate hwtstamp +
    directly expose the NIC PTP clock device through ptp_clock_info.
    The remaining driver (octeon) does not expose such a standard
    interface as of now. It does have its own PTP library that depends
    on its own shared memory PTP clock interface.
    
    This patchset
    1. reverts the syststamp code in the one driver (octeon)
    2. reverts an unnecessary zero initialization in another (vxge)
    3. modifies PF_PACKET to use syststamp is != 0 (because always == 0)
    4. modifies SCM_TIMESTAMPING in the same way
    
    For backwards compatibility, the interfaces are not removed.
    Applications can still request SOF_TIMESTAMPING_SYS_HARDWARE. The
    response field in scm_timestamping also remains. As was the case
    for hardware/drivers that did not implement the feature, the
    setsockopt succeeds, but the response field is always zero.
    ====================
    
    Acked-by: Richard Cochran <richardcochran@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit c6d5fefaa35eda3dcab5c78a16def6ed555b685c
Author: Willem de Bruijn <willemb@google.com>
Date:   Fri Jul 25 18:01:29 2014 -0400

    octeon: remove deprecated syststamp timestamp
    
    Hardware timestamps can be exposed to userspace in raw hardware format
    (hwtstamp) as well as converted to system time (syststamp). The second
    variant is deprecated and only implemented by this driver.
    
    The preferred method of hardware timestamp generation is to combine
    hwtstamp with a device PTP clock. Octeon has its own PTP library
    that relies on a shared memory interface to the PTP clock device.
    
    Signed-off-by: Willem de Bruijn <willemb@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 581d9baa21dbd69b5b02cd654d858d064c400769
Author: Ben Hutchings <ben@decadent.org.uk>
Date:   Sun Jun 8 23:49:34 2014 +0100

    farsync: Fix confusion about DMA address and buffer offset types
    
    Use dma_addr_t for DMA address parameters and u32 for shared memory
    offset parameters.
    
    Do not assume that dma_addr_t is the same as unsigned long; it will
    not be in PAE configurations.  Truncate DMA addresses to 32 bits when
    printing them.  This is OK because the DMA mask for this device is
    32-bit (per default).
    
    Also rename the DMA address parameters from 'skb' to 'dma'.
    
    Compile-tested only.
    
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 060028bac94bf60a65415d1d55a359c3a17d5c31
Author: Manfred Spraul <manfred@colorfullife.com>
Date:   Fri Jun 6 14:37:42 2014 -0700

    ipc/shm.c: increase the defaults for SHMALL, SHMMAX
    
    System V shared memory
    
    a) can be abused to trigger out-of-memory conditions and the standard
       measures against out-of-memory do not work:
    
        - it is not possible to use setrlimit to limit the size of shm segments.
    
        - segments can exist without association with any processes, thus
          the oom-killer is unable to free that memory.
    
    b) is typically used for shared information - today often multiple GB.
       (e.g. database shared buffers)
    
    The current default is a maximum segment size of 32 MB and a maximum
    total size of 8 GB.  This is often too much for a) and not enough for
    b), which means that lots of users must change the defaults.
    
    This patch increases the default limits (nearly) to the maximum, which
    is perfect for case b).  The defaults are used after boot and as the
    initial value for each new namespace.
    
    Admins/distros that need a protection against a) should reduce the
    limits and/or enable shm_rmid_forced.
    
    Unix has historically required setting these limits for shared memory,
    and Linux inherited such behavior.  The consequence of this is added
    complexity for users and administrators.  One very common example are
    Database setup/installation documents and scripts, where users must
    manually calculate the values for these limits.  This also requires
    (some) knowledge of how the underlying memory management works, thus
    causing, in many occasions, the limits to just be flat out wrong.
    Disabling these limits sooner could have saved companies a lot of time,
    headaches and money for support.  But it's never too late, simplify
    users life now.
    
    Further notes:
    - The patch only changes default, overrides behave as before:
            # sysctl kernel.shmall=33554432
      would recreate the previous limit for SHMMAX (for the current namespace).
    
    - Disabling sysv shm allocation is possible with:
            # sysctl kernel.shmall=0
      (not a new feature, also per-namespace)
    
    - The limits are intentionally set to a value slightly less than ULONG_MAX,
      to avoid triggering overflows in user space apps.
      [not unreasonable, see http://marc.info/?l=linux-mm&m=139638334330127]
    
    Signed-off-by: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Davidlohr Bueso <davidlohr@hp.com>
    Reported-by: Davidlohr Bueso <davidlohr@hp.com>
    Acked-by: Michael Kerrisk <mtk.manpages@gmail.com>
    Acked-by: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 1376327ce1f790070ec7128b285e2d8965e760a5
Author: Manfred Spraul <manfred@colorfullife.com>
Date:   Fri Jun 6 14:37:41 2014 -0700

    ipc/shm.c: check for integer overflow during shmget.
    
    SHMMAX is the upper limit for the size of a shared memory segment, counted
    in bytes.  The actual allocation is that size, rounded up to the next full
    page.
    
    Add a check that prevents the creation of segments where the rounded up
    size causes an integer overflow.
    
    Signed-off-by: Manfred Spraul <manfred@colorfullife.com>
    Acked-by: Davidlohr Bueso <davidlohr@hp.com>
    Acked-by: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Acked-by: Michael Kerrisk <mtk.manpages@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 1cf35d47712dd5dc4d62c6ce984f04ac6eab0408
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Apr 25 16:05:40 2014 -0700

    mm: split 'tlb_flush_mmu()' into tlb flushing and memory freeing parts
    
    The mmu-gather operation 'tlb_flush_mmu()' has done two things: the
    actual tlb flush operation, and the batched freeing of the pages that
    the TLB entries pointed at.
    
    This splits the operation into separate phases, so that the forced
    batched flushing done by zap_pte_range() can now do the actual TLB flush
    while still holding the page table lock, but delay the batched freeing
    of all the pages to after the lock has been dropped.
    
    This in turn allows us to avoid a race condition between
    set_page_dirty() (as called by zap_pte_range() when it finds a dirty
    shared memory pte) and page_mkclean(): because we now flush all the
    dirty page data from the TLB's while holding the pte lock,
    page_mkclean() will be held up walking the (recently cleaned) page
    tables until after the TLB entries have been flushed from all CPU's.
    
    Reported-by: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Tested-by: Dave Hansen <dave.hansen@intel.com>
    Acked-by: Hugh Dickins <hughd@google.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Russell King - ARM Linux <linux@arm.linux.org.uk>
    Cc: Tony Luck <tony.luck@intel.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 10f39042711ba21773763f267b4943a2c66c8bef
Author: Rik van Riel <riel@redhat.com>
Date:   Mon Jan 27 17:03:44 2014 -0500

    sched/numa, mm: Use active_nodes nodemask to limit numa migrations
    
    Use the active_nodes nodemask to make smarter decisions on NUMA migrations.
    
    In order to maximize performance of workloads that do not fit in one NUMA
    node, we want to satisfy the following criteria:
    
      1) keep private memory local to each thread
    
      2) avoid excessive NUMA migration of pages
    
      3) distribute shared memory across the active nodes, to
         maximize memory bandwidth available to the workload
    
    This patch accomplishes that by implementing the following policy for
    NUMA migrations:
    
      1) always migrate on a private fault
    
      2) never migrate to a node that is not in the set of active nodes
         for the numa_group
    
      3) always migrate from a node outside of the set of active nodes,
         to a node that is in that set
    
      4) within the set of active nodes in the numa_group, only migrate
         from a node with more NUMA page faults, to a node with fewer
         NUMA page faults, with a 25% margin to avoid ping-ponging
    
    This results in most pages of a workload ending up on the actively
    used nodes, with reduced ping-ponging of pages between those nodes.
    
    Signed-off-by: Rik van Riel <riel@redhat.com>
    Acked-by: Mel Gorman <mgorman@suse.de>
    Signed-off-by: Peter Zijlstra <peterz@infradead.org>
    Cc: Chegu Vinod <chegu_vinod@hp.com>
    Link: http://lkml.kernel.org/r/1390860228-21539-6-git-send-email-riel@redhat.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 34e431b0ae398fc54ea69ff85ec700722c9da773
Author: Rik van Riel <riel@redhat.com>
Date:   Tue Jan 21 15:49:05 2014 -0800

    /proc/meminfo: provide estimated available memory
    
    Many load balancing and workload placing programs check /proc/meminfo to
    estimate how much free memory is available.  They generally do this by
    adding up "free" and "cached", which was fine ten years ago, but is
    pretty much guaranteed to be wrong today.
    
    It is wrong because Cached includes memory that is not freeable as page
    cache, for example shared memory segments, tmpfs, and ramfs, and it does
    not include reclaimable slab memory, which can take up a large fraction
    of system memory on mostly idle systems with lots of files.
    
    Currently, the amount of memory that is available for a new workload,
    without pushing the system into swap, can be estimated from MemFree,
    Active(file), Inactive(file), and SReclaimable, as well as the "low"
    watermarks from /proc/zoneinfo.
    
    However, this may change in the future, and user space really should not
    be expected to know kernel internals to come up with an estimate for the
    amount of free memory.
    
    It is more convenient to provide such an estimate in /proc/meminfo.  If
    things change in the future, we only have to change it in one place.
    
    Signed-off-by: Rik van Riel <riel@redhat.com>
    Reported-by: Erik Mouw <erik.mouw_2@nxp.com>
    Acked-by: Johannes Weiner <hannes@cmpxchg.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 7ed1d8009cc6f1b534ed94388cb7980b4a55797e
Author: Andi Kleen <ak@linux.intel.com>
Date:   Wed Apr 24 17:03:02 2013 -0700

    perf tools: Handle JITed code in shared memory
    
    commit 89365e6c9ad4c0e090e4c6a4b67a3ce319381d89 upstream.
    
    Need to check for /dev/zero.
    
    Most likely more strings are missing too.
    
    Signed-off-by: Andi Kleen <ak@linux.intel.com>
    Link: http://lkml.kernel.org/r/1366848182-30449-1-git-send-email-andi@firstfloor.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit f8afd1fd31f4e263ee407f20f65b7afb8bef23b9
Author: Davidlohr Bueso <davidlohr.bueso@hp.com>
Date:   Wed Sep 11 14:26:15 2013 -0700

    ipc,shm: introduce lockless functions to obtain the ipc object
    
    commit 8b8d52ac382b17a19906b930cd69e2edb0aca8ba upstream.
    
    This is the third and final patchset that deals with reducing the amount
    of contention we impose on the ipc lock (kern_ipc_perm.lock).  These
    changes mostly deal with shared memory, previous work has already been
    done for semaphores and message queues:
    
      http://lkml.org/lkml/2013/3/20/546 (sems)
      http://lkml.org/lkml/2013/5/15/584 (mqueues)
    
    With these patches applied, a custom shm microbenchmark stressing shmctl
    doing IPC_STAT with 4 threads a million times, reduces the execution
    time by 50%.  A similar run, this time with IPC_SET, reduces the
    execution time from 3 mins and 35 secs to 27 seconds.
    
    Patches 1-8: replaces blindly taking the ipc lock for a smarter
    combination of rcu and ipc_obtain_object, only acquiring the spinlock
    when updating.
    
    Patch 9: renames the ids rw_mutex to rwsem, which is what it already was.
    
    Patch 10: is a trivial mqueue leftover cleanup
    
    Patch 11: adds a brief lock scheme description, requested by Andrew.
    
    This patch:
    
    Add shm_obtain_object() and shm_obtain_object_check(), which will allow us
    to get the ipc object without acquiring the lock.  Just as with other
    forms of ipc, these functions are basically wrappers around
    ipc_obtain_object*().
    
    Signed-off-by: Davidlohr Bueso <davidlohr.bueso@hp.com>
    Tested-by: Sedat Dilek <sedat.dilek@gmail.com>
    Cc: Rik van Riel <riel@redhat.com>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mike Galbraith <efault@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 1b2ad167481aed32347ef7726d14bb2b9f63c4c9
Author: Davidlohr Bueso <davidlohr.bueso@hp.com>
Date:   Wed Sep 11 14:26:15 2013 -0700

    ipc,shm: introduce lockless functions to obtain the ipc object
    
    commit 8b8d52ac382b17a19906b930cd69e2edb0aca8ba upstream.
    
    This is the third and final patchset that deals with reducing the amount
    of contention we impose on the ipc lock (kern_ipc_perm.lock).  These
    changes mostly deal with shared memory, previous work has already been
    done for semaphores and message queues:
    
      http://lkml.org/lkml/2013/3/20/546 (sems)
      http://lkml.org/lkml/2013/5/15/584 (mqueues)
    
    With these patches applied, a custom shm microbenchmark stressing shmctl
    doing IPC_STAT with 4 threads a million times, reduces the execution
    time by 50%.  A similar run, this time with IPC_SET, reduces the
    execution time from 3 mins and 35 secs to 27 seconds.
    
    Patches 1-8: replaces blindly taking the ipc lock for a smarter
    combination of rcu and ipc_obtain_object, only acquiring the spinlock
    when updating.
    
    Patch 9: renames the ids rw_mutex to rwsem, which is what it already was.
    
    Patch 10: is a trivial mqueue leftover cleanup
    
    Patch 11: adds a brief lock scheme description, requested by Andrew.
    
    This patch:
    
    Add shm_obtain_object() and shm_obtain_object_check(), which will allow us
    to get the ipc object without acquiring the lock.  Just as with other
    forms of ipc, these functions are basically wrappers around
    ipc_obtain_object*().
    
    Signed-off-by: Davidlohr Bueso <davidlohr.bueso@hp.com>
    Tested-by: Sedat Dilek <sedat.dilek@gmail.com>
    Cc: Rik van Riel <riel@redhat.com>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mike Galbraith <efault@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 34b2092419a3f73bb69c55247fe71ca4941faad2
Author: Davidlohr Bueso <davidlohr.bueso@hp.com>
Date:   Mon Jul 8 16:01:09 2013 -0700

    ipc: move rcu lock out of ipc_addid
    
    commit dbfcd91f06f0e2d5564b2fd184e9c2a43675f9ab upstream.
    
    This patchset continues the work that began in the sysv ipc semaphore
    scaling series, see
    
      https://lkml.org/lkml/2013/3/20/546
    
    Just like semaphores used to be, sysv shared memory and msg queues also
    abuse the ipc lock, unnecessarily holding it for operations such as
    permission and security checks.
    
    This patchset mostly deals with mqueues, and while shared mem can be
    done in a very similar way, I want to get these patches out in the open
    first.  It also does some pending cleanups, mostly focused on the two
    level locking we have in ipc code, taking care of ipc_addid() and
    ipcctl_pre_down_nolock() - yes there are still functions that need to be
    updated as well.
    
    This patch:
    
    Make all callers explicitly take and release the RCU read lock.
    
    This addresses the two level locking seen in newary(), newseg() and
    newqueue().  For the last two, explicitly unlock the ipc object and the
    rcu lock, instead of calling the custom shm_unlock and msg_unlock
    functions.  The next patch will deal with the open coded locking for
    ->perm.lock
    
    Signed-off-by: Davidlohr Bueso <davidlohr.bueso@hp.com>
    Cc: Andi Kleen <andi@firstfloor.org>
    Cc: Rik van Riel <riel@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Mike Galbraith <efault@gmx.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fc3147245d193bd0f57307859c698fa28a20b0fe
Author: Mel Gorman <mgorman@suse.de>
Date:   Mon Oct 7 11:29:09 2013 +0100

    mm: numa: Limit NUMA scanning to migrate-on-fault VMAs
    
    There is a 90% regression observed with a large Oracle performance test
    on a 4 node system. Profiles indicated that the overhead was due to
    contention on sp_lock when looking up shared memory policies. These
    policies do not have the appropriate flags to allow them to be
    automatically balanced so trapping faults on them is pointless. This
    patch skips VMAs that do not have MPOL_F_MOF set.
    
    [riel@redhat.com: Initial patch]
    
    Signed-off-by: Mel Gorman <mgorman@suse.de>
    Reported-and-tested-by: Joe Mario <jmario@redhat.com>
    Reviewed-by: Rik van Riel <riel@redhat.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
    Signed-off-by: Peter Zijlstra <peterz@infradead.org>
    Link: http://lkml.kernel.org/r/1381141781-10992-32-git-send-email-mgorman@suse.de
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit b726b7dfb400c937546fa91cf8523dcb1aa2fc6e
Author: Mel Gorman <mgorman@suse.de>
Date:   Mon Oct 7 11:28:53 2013 +0100

    Revert "mm: sched: numa: Delay PTE scanning until a task is scheduled on a new node"
    
    PTE scanning and NUMA hinting fault handling is expensive so commit
    5bca2303 ("mm: sched: numa: Delay PTE scanning until a task is scheduled
    on a new node") deferred the PTE scan until a task had been scheduled on
    another node. The problem is that in the purely shared memory case that
    this may never happen and no NUMA hinting fault information will be
    captured. We are not ruling out the possibility that something better
    can be done here but for now, this patch needs to be reverted and depend
    entirely on the scan_delay to avoid punishing short-lived processes.
    
    Signed-off-by: Mel Gorman <mgorman@suse.de>
    Reviewed-by: Rik van Riel <riel@redhat.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Srikar Dronamraju <srikar@linux.vnet.ibm.com>
    Signed-off-by: Peter Zijlstra <peterz@infradead.org>
    Link: http://lkml.kernel.org/r/1381141781-10992-16-git-send-email-mgorman@suse.de
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 71828ed93986ea0f89c0daf739e13aadb870a3ef
Author: Andi Kleen <ak@linux.intel.com>
Date:   Wed Apr 24 17:03:02 2013 -0700

    perf tools: Handle JITed code in shared memory
    
    commit 89365e6c9ad4c0e090e4c6a4b67a3ce319381d89 upstream.
    
    Need to check for /dev/zero.
    
    Most likely more strings are missing too.
    
    Signed-off-by: Andi Kleen <ak@linux.intel.com>
    Link: http://lkml.kernel.org/r/1366848182-30449-1-git-send-email-andi@firstfloor.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Vinson Lee <vlee@freedesktop.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 4d75da4294e10475b3b255e34f446999832f4d17
Author: Andi Kleen <ak@linux.intel.com>
Date:   Wed Apr 24 17:03:02 2013 -0700

    perf tools: Handle JITed code in shared memory
    
    commit 89365e6c9ad4c0e090e4c6a4b67a3ce319381d89 upstream.
    
    Need to check for /dev/zero.
    
    Most likely more strings are missing too.
    
    Signed-off-by: Andi Kleen <ak@linux.intel.com>
    Link: http://lkml.kernel.org/r/1366848182-30449-1-git-send-email-andi@firstfloor.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Vinson Lee <vlee@freedesktop.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit fe826cd4ead9e72cdb0815660a306e267eab34d1
Author: Andi Kleen <ak@linux.intel.com>
Date:   Wed Apr 24 17:03:02 2013 -0700

    perf tools: Handle JITed code in shared memory
    
    commit 89365e6c9ad4c0e090e4c6a4b67a3ce319381d89 upstream.
    
    Need to check for /dev/zero.
    
    Most likely more strings are missing too.
    
    Signed-off-by: Andi Kleen <ak@linux.intel.com>
    Link: http://lkml.kernel.org/r/1366848182-30449-1-git-send-email-andi@firstfloor.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
    Cc: Vinson Lee <vlee@freedesktop.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 8b8d52ac382b17a19906b930cd69e2edb0aca8ba
Author: Davidlohr Bueso <davidlohr.bueso@hp.com>
Date:   Wed Sep 11 14:26:15 2013 -0700

    ipc,shm: introduce lockless functions to obtain the ipc object
    
    This is the third and final patchset that deals with reducing the amount
    of contention we impose on the ipc lock (kern_ipc_perm.lock).  These
    changes mostly deal with shared memory, previous work has already been
    done for semaphores and message queues:
    
      http://lkml.org/lkml/2013/3/20/546 (sems)
      http://lkml.org/lkml/2013/5/15/584 (mqueues)
    
    With these patches applied, a custom shm microbenchmark stressing shmctl
    doing IPC_STAT with 4 threads a million times, reduces the execution
    time by 50%.  A similar run, this time with IPC_SET, reduces the
    execution time from 3 mins and 35 secs to 27 seconds.
    
    Patches 1-8: replaces blindly taking the ipc lock for a smarter
    combination of rcu and ipc_obtain_object, only acquiring the spinlock
    when updating.
    
    Patch 9: renames the ids rw_mutex to rwsem, which is what it already was.
    
    Patch 10: is a trivial mqueue leftover cleanup
    
    Patch 11: adds a brief lock scheme description, requested by Andrew.
    
    This patch:
    
    Add shm_obtain_object() and shm_obtain_object_check(), which will allow us
    to get the ipc object without acquiring the lock.  Just as with other
    forms of ipc, these functions are basically wrappers around
    ipc_obtain_object*().
    
    Signed-off-by: Davidlohr Bueso <davidlohr.bueso@hp.com>
    Tested-by: Sedat Dilek <sedat.dilek@gmail.com>
    Cc: Rik van Riel <riel@redhat.com>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 13d7a2410fa637f450a29ecb515ac318ee40c741
Author: Stephane Eranian <eranian@google.com>
Date:   Wed Aug 21 12:10:24 2013 +0200

    perf: Add attr->mmap2 attribute to an event
    
    Adds a new PERF_RECORD_MMAP2 record type which is essence
    an expanded version of PERF_RECORD_MMAP.
    
    Used to request mmap records with more information about
    the mapping, including device major, minor and the inode
    number and generation for mappings associated with files
    or shared memory segments. Works for code and data
    (with attr->mmap_data set).
    
    Existing PERF_RECORD_MMAP record is unmodified by this patch.
    
    Signed-off-by: Stephane Eranian <eranian@google.com>
    Signed-off-by: Peter Zijlstra <peterz@infradead.org>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Link: http://lkml.kernel.org/r/1377079825-19057-2-git-send-email-eranian@google.com
    [ Added Al to the Cc:. Are the ino, maj/min exports of vma->vm_file OK? ]
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

commit 977a5d5d32f4797ace5ef65ee3f2232a1c88a274
Author: Laurence Evans <levans@solarflare.com>
Date:   Thu Mar 7 11:46:58 2013 +0000

    sfc: Add a function pointer to abstract write of host time into NIC shared memory
    
    Signed-off-by: Ben Hutchings <bhutchings@solarflare.com>

commit 21c6af6b69b609b7934caaccda1b4535dceb402c
Author: Gabor Juhos <juhosg@openwrt.org>
Date:   Thu Aug 22 20:53:21 2013 +0200

    rt2x00: rt2800lib: add rt2800_hw_beacon_base helper
    
    The HW_BEACON_BASE() macro returns the base address
    of a given beacon, however the returned values are
    not usable on all chipsets. On devices which have
    selectable shared memory parts, some beacon may be
    located in the high part of the shared memory.
    
    Instead of extending the already complicated macro,
    add a new helper function and use that to get the
    base address of a given beacon.
    
    The actual patch contains no functional changes, the
    helper function will be extended in a further patch
    to handle different chipsets' requirements.
    
    Signed-off-by: Gabor Juhos <juhosg@openwrt.org>
    Acked-by: Helmut Schaa <helmut.schaa@googlemail.com>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit f2b0befd1dd2f0b08feff8e66741d56b239af7b8
Author: Ben Hutchings <bhutchings@solarflare.com>
Date:   Tue Aug 20 20:35:50 2013 +0100

    sfc: Update MCDI protocol definitions for EF10
    
    EF10 controllers do not have shared memory for communication with the
    MC; instead it reads requests and writes responses in host memory,
    which allows for longer messages.  It is also responsible for all
    datapath control operations and hardware resource allocation, which
    requires a large number of new commands and adds more possible error
    cases.  MCDI v2 extends the message header to support this.
    
    Update the MCDI protocol definition header to include v2 lengths,
    errors and messages, and a few definitions specific to the
    SFC9100 family (codenames Farmingdale and Huntington) which is
    the first generation of EF10.
    
    Some messages have been extended, so adjust the code accordingly:
    - The request for MC_CMD_DRV_ATTACH now includes a datapath firmware
      ID.  This is ignored by Siena but we should fill it in anyway,
      initially always specifying low-latency datapath.
    - The response for MC_CMD_GET_LOOPBACK_MODES now includes a 40G
      field.  Accept shorter responses that don't include it.
    
    Signed-off-by: Ben Hutchings <bhutchings@solarflare.com>

commit aeeddb8b9e76d1f250d58b40e8dba8614d61368b
Author: Yuval Mintz <yuvalmin@broadcom.com>
Date:   Mon Aug 19 09:11:59 2013 +0300

    bnx2x: prevent VF benign attentions
    
    During probe, VFs might erroneously try to access the shared memory (which
    only PFs are capabale of accessing), causing benign attentions to appear.
    
    Signed-off-by: Yuval Mintz <yuvalmin@broadcom.com>
    Signed-off-by: Ariel Elior <ariele@broadcom.com>
    Signed-off-by: Eilon Greenstein <eilong@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit dbfcd91f06f0e2d5564b2fd184e9c2a43675f9ab
Author: Davidlohr Bueso <davidlohr.bueso@hp.com>
Date:   Mon Jul 8 16:01:09 2013 -0700

    ipc: move rcu lock out of ipc_addid
    
    This patchset continues the work that began in the sysv ipc semaphore
    scaling series, see
    
      https://lkml.org/lkml/2013/3/20/546
    
    Just like semaphores used to be, sysv shared memory and msg queues also
    abuse the ipc lock, unnecessarily holding it for operations such as
    permission and security checks.
    
    This patchset mostly deals with mqueues, and while shared mem can be
    done in a very similar way, I want to get these patches out in the open
    first.  It also does some pending cleanups, mostly focused on the two
    level locking we have in ipc code, taking care of ipc_addid() and
    ipcctl_pre_down_nolock() - yes there are still functions that need to be
    updated as well.
    
    This patch:
    
    Make all callers explicitly take and release the RCU read lock.
    
    This addresses the two level locking seen in newary(), newseg() and
    newqueue().  For the last two, explicitly unlock the ipc object and the
    rcu lock, instead of calling the custom shm_unlock and msg_unlock
    functions.  The next patch will deal with the open coded locking for
    ->perm.lock
    
    Signed-off-by: Davidlohr Bueso <davidlohr.bueso@hp.com>
    Cc: Andi Kleen <andi@firstfloor.org>
    Cc: Rik van Riel <riel@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit f0bb4c0ab064a8aeeffbda1cee380151a594eaab
Merge: a4883ef6af5e 983433b5812c
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Jul 2 16:15:23 2013 -0700

    Merge branch 'perf-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip
    
    Pull perf updates from Ingo Molnar:
     "Kernel improvements:
    
       - watchdog driver improvements by Li Zefan
       - Power7 CPI stack events related improvements by Sukadev Bhattiprolu
       - event multiplexing via hrtimers and other improvements by Stephane
         Eranian
       - kernel stack use optimization by Andrew Hunter
       - AMD IOMMU uncore PMU support by Suravee Suthikulpanit
       - NMI handling rate-limits by Dave Hansen
       - various hw_breakpoint fixes by Oleg Nesterov
       - hw_breakpoint overflow period sampling and related signal handling
         fixes by Jiri Olsa
       - Intel Haswell PMU support by Andi Kleen
    
      Tooling improvements:
    
       - Reset SIGTERM handler in workload child process, fix from David
         Ahern.
       - Makefile reorganization, prep work for Kconfig patches, from Jiri
         Olsa.
       - Add automated make test suite, from Jiri Olsa.
       - Add --percent-limit option to 'top' and 'report', from Namhyung
         Kim.
       - Sorting improvements, from Namhyung Kim.
       - Expand definition of sysfs format attribute, from Michael Ellerman.
    
      Tooling fixes:
    
       - 'perf tests' fixes from Jiri Olsa.
       - Make Power7 CPI stack events available in sysfs, from Sukadev
         Bhattiprolu.
       - Handle death by SIGTERM in 'perf record', fix from David Ahern.
       - Fix printing of perf_event_paranoid message, from David Ahern.
       - Handle realloc failures in 'perf kvm', from David Ahern.
       - Fix divide by 0 in variance, from David Ahern.
       - Save parent pid in thread struct, from David Ahern.
       - Handle JITed code in shared memory, from Andi Kleen.
       - Fixes for 'perf diff', from Jiri Olsa.
       - Remove some unused struct members, from Jiri Olsa.
       - Add missing liblk.a dependency for python/perf.so, fix from Jiri
         Olsa.
       - Respect CROSS_COMPILE in liblk.a, from Rabin Vincent.
       - No need to do locking when adding hists in perf report, only 'top'
         needs that, from Namhyung Kim.
       - Fix alignment of symbol column in in the hists browser (top,
         report) when -v is given, from NAmhyung Kim.
       - Fix 'perf top' -E option behavior, from Namhyung Kim.
       - Fix bug in isupper() and islower(), from Sukadev Bhattiprolu.
       - Fix compile errors in bp_signal 'perf test', from Sukadev
         Bhattiprolu.
    
      ... and more things"
    
    * 'perf-core-for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/tip/tip: (102 commits)
      perf/x86: Disable PEBS-LL in intel_pmu_pebs_disable()
      perf/x86: Fix shared register mutual exclusion enforcement
      perf/x86/intel: Support full width counting
      x86: Add NMI duration tracepoints
      perf: Drop sample rate when sampling is too slow
      x86: Warn when NMI handlers take large amounts of time
      hw_breakpoint: Introduce "struct bp_cpuinfo"
      hw_breakpoint: Simplify *register_wide_hw_breakpoint()
      hw_breakpoint: Introduce cpumask_of_bp()
      hw_breakpoint: Simplify the "weight" usage in toggle_bp_slot() paths
      hw_breakpoint: Simplify list/idx mess in toggle_bp_slot() paths
      perf/x86/intel: Add mem-loads/stores support for Haswell
      perf/x86/intel: Support Haswell/v4 LBR format
      perf/x86/intel: Move NMI clearing to end of PMI handler
      perf/x86/intel: Add Haswell PEBS support
      perf/x86/intel: Add simple Haswell PMU support
      perf/x86/intel: Add Haswell PEBS record support
      perf/x86/intel: Fix sparse warning
      perf/x86/amd: AMD IOMMU Performance Counter PERF uncore PMU implementation
      perf/x86/amd: Add IOMMU Performance Counter resource management
      ...

commit 65f918123bd108a9b50bceaf4b32ac173b9e3f3e
Author: Igor Mammedov <imammedo@redhat.com>
Date:   Mon Jun 10 18:31:11 2013 +0200

    x86: kvmclock: zero initialize pvclock shared memory area
    
    commit 07868fc6aaf57847b0f3a3d53086b7556eb83f4a upstream.
    
    kernel might hung in pvclock_clocksource_read() due to
    uninitialized memory might contain odd version value in
    following cycle:
    
            do {
                    version = __pvclock_read_cycles(src, &ret, &flags);
            } while ((src->version & 1) || version != src->version);
    
    if secondary kvmclock is accessed before it's registered with kvm.
    
    Clear garbage in pvclock shared memory area right after it's
    allocated to avoid this issue.
    
    Ref: https://bugzilla.kernel.org/show_bug.cgi?id=59521
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    [See BZ for analysis.  We may want a different fix for 3.11, but
     this is the safest for now - Paolo]
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9d0be540d73dc8256e8eff85285bd3b682e3c1d1
Merge: 92616ee65422 07868fc6aaf5
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Jun 21 06:29:22 2013 -1000

    Merge tag 'for-linus' of git://git.kernel.org/pub/scm/virt/kvm/kvm
    
    Pull KVM fixes from Paolo Bonzini:
     "Three one-line fixes for my first pull request; one for x86 host, one
      for x86 guest, one for PPC"
    
    * tag 'for-linus' of git://git.kernel.org/pub/scm/virt/kvm/kvm:
      x86: kvmclock: zero initialize pvclock shared memory area
      kvm/ppc/booke: Delay kvmppc_lazy_ee_enable
      KVM: x86: remove vcpu's CPL check in host-invoked XCR set

commit 07868fc6aaf57847b0f3a3d53086b7556eb83f4a
Author: Igor Mammedov <imammedo@redhat.com>
Date:   Mon Jun 10 18:31:11 2013 +0200

    x86: kvmclock: zero initialize pvclock shared memory area
    
    kernel might hung in pvclock_clocksource_read() due to
    uninitialized memory might contain odd version value in
    following cycle:
    
            do {
                    version = __pvclock_read_cycles(src, &ret, &flags);
            } while ((src->version & 1) || version != src->version);
    
    if secondary kvmclock is accessed before it's registered with kvm.
    
    Clear garbage in pvclock shared memory area right after it's
    allocated to avoid this issue.
    
    Ref: https://bugzilla.kernel.org/show_bug.cgi?id=59521
    Signed-off-by: Igor Mammedov <imammedo@redhat.com>
    [See BZ for analysis.  We may want a different fix for 3.11, but
     this is the safest for now - Paolo]
    Cc: <stable@vger.kernel.org> # 3.8
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

commit afb71193a4d8e4a3c4c52a80a8cbee76582f0e90
Merge: c0ffaf3655fa c3c44709b509
Author: Ingo Molnar <mingo@kernel.org>
Date:   Fri May 31 13:03:12 2013 +0200

    Merge tag 'perf-core-for-mingo' of git://git.kernel.org/pub/scm/linux/kernel/git/acme/linux into perf/core
    
    perf/core improvements and fixes:
    
     * Reset SIGTERM handler in workload child process, fix from David Ahern.
    
     * Handle death by SIGTERM in 'perf record', fix from David Ahern.
    
     * Fix printing of perf_event_paranoid message, from David Ahern.
    
     * Handle realloc failures in 'perf kvm', from David Ahern.
    
     * Fix divide by 0 in variance, from David Ahern.
    
     * Save parent pid in thread struct, from David Ahern.
    
     * Handle JITed code in shared memory, from Andi Kleen.
    
     * Makefile reorganization, prep work for Kconfig patches, from Jiri Olsa.
    
     * Fixes for 'perf diff', from Jiri Olsa.
    
     * Add automated make test suite, from Jiri Olsa.
    
     * 'perf tests' fixes from Jiri Olsa.
    
     * Remove some unused struct members, from Jiri Olsa.
    
     * Add missing liblk.a dependency for python/perf.so, fix from Jiri Olsa.
    
     * Respect CROSS_COMPILE in liblk.a, from Rabin Vincent.
    
     * Expand definition of sysfs format attribute, from Michael Ellerman.
    
     * No need to do locking when adding hists in perf report, only 'top'
       needs that, from Namhyung Kim.
    
     * Sorting improvements, from Namhyung Kim.
    
     * Fix alignment of symbol column in in the hists browser (top, report)
       when -v is given, from NAmhyung Kim.
    
     * Add --percent-limit option to 'top' and 'report', from Namhyung Kim.
    
     * Fix 'perf top' -E option behavior, from Namhyung Kim.
    
     * Fix bug in isupper() and islower(), from Sukadev Bhattiprolu.
    
     * Fix compile errors in bp_signal 'perf test', from Sukadev Bhattiprolu.
    
     * Make Power7 CPI stack events available in sysfs, from Sukadev Bhattiprolu.
    
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

commit 89365e6c9ad4c0e090e4c6a4b67a3ce319381d89
Author: Andi Kleen <ak@linux.intel.com>
Date:   Wed Apr 24 17:03:02 2013 -0700

    perf tools: Handle JITed code in shared memory
    
    Need to check for /dev/zero.
    
    Most likely more strings are missing too.
    
    Signed-off-by: Andi Kleen <ak@linux.intel.com>
    Link: http://lkml.kernel.org/r/1366848182-30449-1-git-send-email-andi@firstfloor.org
    Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>

commit e68072ef46bcfb609ea16d45f115896a0dfbd3ff
Author: Yuval Mintz <yuvalmin@broadcom.com>
Date:   Wed May 22 21:21:51 2013 +0000

    bnx2x: Wait for MCP validity during AER
    
    During PCIe advanced error recovery, the secondary bus reset will cause FW
    to reset; This will cause the shared memory between it and the driver to be
    invalidated.
    
    During the driver's recovery flow, the driver should not make any assumption
    on the validity of that memory and instead re-initialize it.
    
    This also removes a redundant re-initialization of a previously
    initialized mutex.
    
    Signed-off-by: Yuval Mintz <yuvalmin@broadcom.com>
    Signed-off-by: Ariel Elior <ariele@broadcom.com>
    Signed-off-by: Eilon Greenstein <eilong@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8431bc6fb3dc3784973cc9471197e34b16f38b3b
Author: David S. Miller <davem@davemloft.net>
Date:   Fri Apr 19 17:26:26 2013 -0400

    sparc64: Fix race in TLB batch processing.
    
    [ Commits f36391d2790d04993f48da6a45810033a2cdf847 and
      f0af97070acbad5d6a361f485828223a4faaa0ee upstream. ]
    
    As reported by Dave Kleikamp, when we emit cross calls to do batched
    TLB flush processing we have a race because we do not synchronize on
    the sibling cpus completing the cross call.
    
    So meanwhile the TLB batch can be reset (tb->tlb_nr set to zero, etc.)
    and either flushes are missed or flushes will flush the wrong
    addresses.
    
    Fix this by using generic infrastructure to synchonize on the
    completion of the cross call.
    
    This first required getting the flush_tlb_pending() call out from
    switch_to() which operates with locks held and interrupts disabled.
    The problem is that smp_call_function_many() cannot be invoked with
    IRQs disabled and this is explicitly checked for with WARN_ON_ONCE().
    
    We get the batch processing outside of locked IRQ disabled sections by
    using some ideas from the powerpc port. Namely, we only batch inside
    of arch_{enter,leave}_lazy_mmu_mode() calls.  If we're not in such a
    region, we flush TLBs synchronously.
    
    1) Get rid of xcall_flush_tlb_pending and per-cpu type
       implementations.
    
    2) Do TLB batch cross calls instead via:
    
            smp_call_function_many()
                    tlb_pending_func()
                            __flush_tlb_pending()
    
    3) Batch only in lazy mmu sequences:
    
            a) Add 'active' member to struct tlb_batch
            b) Define __HAVE_ARCH_ENTER_LAZY_MMU_MODE
            c) Set 'active' in arch_enter_lazy_mmu_mode()
            d) Run batch and clear 'active' in arch_leave_lazy_mmu_mode()
            e) Check 'active' in tlb_batch_add_one() and do a synchronous
               flush if it's clear.
    
    4) Add infrastructure for synchronous TLB page flushes.
    
            a) Implement __flush_tlb_page and per-cpu variants, patch
               as needed.
            b) Likewise for xcall_flush_tlb_page.
            c) Implement smp_flush_tlb_page() to invoke the cross-call.
            d) Wire up global_flush_tlb_page() to the right routine based
               upon CONFIG_SMP
    
    5) It turns out that singleton batches are very common, 2 out of every
       3 batch flushes have only a single entry in them.
    
       The batch flush waiting is very expensive, both because of the poll
       on sibling cpu completeion, as well as because passing the tlb batch
       pointer to the sibling cpus invokes a shared memory dereference.
    
       Therefore, in flush_tlb_pending(), if there is only one entry in
       the batch perform a completely asynchronous global_flush_tlb_page()
       instead.
    
    Reported-by: Dave Kleikamp <dave.kleikamp@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Acked-by: Dave Kleikamp <dave.kleikamp@oracle.com>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit 5a467624b1c06db5a47bf2fe58e41347686af512
Author: Robin Holt <holt@sgi.com>
Date:   Tue Apr 30 19:15:54 2013 -0700

    ipc: sysv shared memory limited to 8TiB
    
    commit d69f3bad4675ac519d41ca2b11e1c00ca115cecd upstream.
    
    Trying to run an application which was trying to put data into half of
    memory using shmget(), we found that having a shmall value below 8EiB-8TiB
    would prevent us from using anything more than 8TiB.  By setting
    kernel.shmall greater than 8EiB-8TiB would make the job work.
    
    In the newseg() function, ns->shm_tot which, at 8TiB is INT_MAX.
    
    ipc/shm.c:
     458 static int newseg(struct ipc_namespace *ns, struct ipc_params *params)
     459 {
    ...
     465         int numpages = (size + PAGE_SIZE -1) >> PAGE_SHIFT;
    ...
     474         if (ns->shm_tot + numpages > ns->shm_ctlall)
     475                 return -ENOSPC;
    
    [akpm@linux-foundation.org: make ipc/shm.c:newseg()'s numpages size_t, not int]
    Signed-off-by: Robin Holt <holt@sgi.com>
    Reported-by: Alex Thorlton <athorlton@sgi.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>

commit c10d1bc5fb9601b375ded6fe4b383284bf86e07f
Author: Robin Holt <holt@sgi.com>
Date:   Tue Apr 30 19:15:54 2013 -0700

    ipc: sysv shared memory limited to 8TiB
    
    commit d69f3bad4675ac519d41ca2b11e1c00ca115cecd upstream.
    
    Trying to run an application which was trying to put data into half of
    memory using shmget(), we found that having a shmall value below 8EiB-8TiB
    would prevent us from using anything more than 8TiB.  By setting
    kernel.shmall greater than 8EiB-8TiB would make the job work.
    
    In the newseg() function, ns->shm_tot which, at 8TiB is INT_MAX.
    
    ipc/shm.c:
     458 static int newseg(struct ipc_namespace *ns, struct ipc_params *params)
     459 {
    ...
     465         int numpages = (size + PAGE_SIZE -1) >> PAGE_SHIFT;
    ...
     474         if (ns->shm_tot + numpages > ns->shm_ctlall)
     475                 return -ENOSPC;
    
    [akpm@linux-foundation.org: make ipc/shm.c:newseg()'s numpages size_t, not int]
    Signed-off-by: Robin Holt <holt@sgi.com>
    Reported-by: Alex Thorlton <athorlton@sgi.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit d7a47d57560718f0d2f96e2a3f89887ff1be2669
Author: Michael Grzeschik <m.grzeschik@pengutronix.de>
Date:   Thu Apr 4 13:13:46 2013 +0300

    usb: chipidea: udc: fix memory access of shared memory on armv5 machines
    
    commit a9c174302b1590ef3ead485d804a303c5f89174b upstream.
    
    The udc uses an shared dma memory space between hard and software. This
    memory layout is described in ci13xxx_qh and ci13xxx_td which are marked
    with the attribute ((packed)).
    
    The compiler currently does not know about the alignment of the memory
    layout, and will create strb and ldrb operations.
    
    The Datasheet of the synopsys core describes, that some operations on
    the mapped memory need to be atomic double word operations. I.e. the
    next pointer addressing in the qhead, as otherwise the hardware will
    read wrong data and totally stuck.
    
    This is also possible while working with the current active td queue,
    and preparing the td->ptr.next in software while the hardware is still
    working with the current active td which is supposed to be changed:
    
    writeb(0xde, &td->ptr.next + 0x0); /* strb */
    writeb(0xad, &td->ptr.next + 0x1); /* strb */
    
    <----- hardware reads value of td->ptr.next and get stuck!
    
    writeb(0xbe, &td->ptr.next + 0x2); /* strb */
    writeb(0xef, &td->ptr.next + 0x3); /* strb */
    
    This appeares on armv5 machines where the hardware does not support
    unaligned 32bit operations.
    
    This patch adds the attribute ((aligned(4))) to the structures to tell
    the compiler to use 32bit operations. It also adds an wmb() for the
    prepared TD data before it gets enqueued into the qhead.
    
    Signed-off-by: Michael Grzeschik <m.grzeschik@pengutronix.de>
    Reviewed-by: Felipe Balbi <balbi@ti.com>
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 870ef91261887958df8b91a14386bd9fc4485325
Author: Robin Holt <holt@sgi.com>
Date:   Tue Apr 30 19:15:54 2013 -0700

    ipc: sysv shared memory limited to 8TiB
    
    commit d69f3bad4675ac519d41ca2b11e1c00ca115cecd upstream.
    
    Trying to run an application which was trying to put data into half of
    memory using shmget(), we found that having a shmall value below 8EiB-8TiB
    would prevent us from using anything more than 8TiB.  By setting
    kernel.shmall greater than 8EiB-8TiB would make the job work.
    
    In the newseg() function, ns->shm_tot which, at 8TiB is INT_MAX.
    
    ipc/shm.c:
     458 static int newseg(struct ipc_namespace *ns, struct ipc_params *params)
     459 {
    ...
     465         int numpages = (size + PAGE_SIZE -1) >> PAGE_SHIFT;
    ...
     474         if (ns->shm_tot + numpages > ns->shm_ctlall)
     475                 return -ENOSPC;
    
    [akpm@linux-foundation.org: make ipc/shm.c:newseg()'s numpages size_t, not int]
    Signed-off-by: Robin Holt <holt@sgi.com>
    Reported-by: Alex Thorlton <athorlton@sgi.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b52693dafea15c2f4b0feec336678395b5dfed8e
Author: Michael Grzeschik <m.grzeschik@pengutronix.de>
Date:   Thu Apr 4 13:13:46 2013 +0300

    usb: chipidea: udc: fix memory access of shared memory on armv5 machines
    
    commit a9c174302b1590ef3ead485d804a303c5f89174b upstream.
    
    The udc uses an shared dma memory space between hard and software. This
    memory layout is described in ci13xxx_qh and ci13xxx_td which are marked
    with the attribute ((packed)).
    
    The compiler currently does not know about the alignment of the memory
    layout, and will create strb and ldrb operations.
    
    The Datasheet of the synopsys core describes, that some operations on
    the mapped memory need to be atomic double word operations. I.e. the
    next pointer addressing in the qhead, as otherwise the hardware will
    read wrong data and totally stuck.
    
    This is also possible while working with the current active td queue,
    and preparing the td->ptr.next in software while the hardware is still
    working with the current active td which is supposed to be changed:
    
    writeb(0xde, &td->ptr.next + 0x0); /* strb */
    writeb(0xad, &td->ptr.next + 0x1); /* strb */
    
    <----- hardware reads value of td->ptr.next and get stuck!
    
    writeb(0xbe, &td->ptr.next + 0x2); /* strb */
    writeb(0xef, &td->ptr.next + 0x3); /* strb */
    
    This appeares on armv5 machines where the hardware does not support
    unaligned 32bit operations.
    
    This patch adds the attribute ((aligned(4))) to the structures to tell
    the compiler to use 32bit operations. It also adds an wmb() for the
    prepared TD data before it gets enqueued into the qhead.
    
    Signed-off-by: Michael Grzeschik <m.grzeschik@pengutronix.de>
    Reviewed-by: Felipe Balbi <balbi@ti.com>
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9b2bdb66b65fcbdd4f3a3d08c28e4c46b4a59364
Author: Robin Holt <holt@sgi.com>
Date:   Tue Apr 30 19:15:54 2013 -0700

    ipc: sysv shared memory limited to 8TiB
    
    commit d69f3bad4675ac519d41ca2b11e1c00ca115cecd upstream.
    
    Trying to run an application which was trying to put data into half of
    memory using shmget(), we found that having a shmall value below 8EiB-8TiB
    would prevent us from using anything more than 8TiB.  By setting
    kernel.shmall greater than 8EiB-8TiB would make the job work.
    
    In the newseg() function, ns->shm_tot which, at 8TiB is INT_MAX.
    
    ipc/shm.c:
     458 static int newseg(struct ipc_namespace *ns, struct ipc_params *params)
     459 {
    ...
     465         int numpages = (size + PAGE_SIZE -1) >> PAGE_SHIFT;
    ...
     474         if (ns->shm_tot + numpages > ns->shm_ctlall)
     475                 return -ENOSPC;
    
    [akpm@linux-foundation.org: make ipc/shm.c:newseg()'s numpages size_t, not int]
    Signed-off-by: Robin Holt <holt@sgi.com>
    Reported-by: Alex Thorlton <athorlton@sgi.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit b7d885f21da64b75066f42246da6968e3769b951
Author: Robin Holt <holt@sgi.com>
Date:   Tue Apr 30 19:15:54 2013 -0700

    ipc: sysv shared memory limited to 8TiB
    
    commit d69f3bad4675ac519d41ca2b11e1c00ca115cecd upstream.
    
    Trying to run an application which was trying to put data into half of
    memory using shmget(), we found that having a shmall value below 8EiB-8TiB
    would prevent us from using anything more than 8TiB.  By setting
    kernel.shmall greater than 8EiB-8TiB would make the job work.
    
    In the newseg() function, ns->shm_tot which, at 8TiB is INT_MAX.
    
    ipc/shm.c:
     458 static int newseg(struct ipc_namespace *ns, struct ipc_params *params)
     459 {
    ...
     465         int numpages = (size + PAGE_SIZE -1) >> PAGE_SHIFT;
    ...
     474         if (ns->shm_tot + numpages > ns->shm_ctlall)
     475                 return -ENOSPC;
    
    [akpm@linux-foundation.org: make ipc/shm.c:newseg()'s numpages size_t, not int]
    Signed-off-by: Robin Holt <holt@sgi.com>
    Reported-by: Alex Thorlton <athorlton@sgi.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 619aeac5a41c5845758a848c800b0197ed6027ff
Author: David S. Miller <davem@davemloft.net>
Date:   Fri Apr 19 17:26:26 2013 -0400

    sparc64: Fix race in TLB batch processing.
    
    [ Commits f36391d2790d04993f48da6a45810033a2cdf847 and
      f0af97070acbad5d6a361f485828223a4faaa0ee upstream. ]
    
    As reported by Dave Kleikamp, when we emit cross calls to do batched
    TLB flush processing we have a race because we do not synchronize on
    the sibling cpus completing the cross call.
    
    So meanwhile the TLB batch can be reset (tb->tlb_nr set to zero, etc.)
    and either flushes are missed or flushes will flush the wrong
    addresses.
    
    Fix this by using generic infrastructure to synchonize on the
    completion of the cross call.
    
    This first required getting the flush_tlb_pending() call out from
    switch_to() which operates with locks held and interrupts disabled.
    The problem is that smp_call_function_many() cannot be invoked with
    IRQs disabled and this is explicitly checked for with WARN_ON_ONCE().
    
    We get the batch processing outside of locked IRQ disabled sections by
    using some ideas from the powerpc port. Namely, we only batch inside
    of arch_{enter,leave}_lazy_mmu_mode() calls.  If we're not in such a
    region, we flush TLBs synchronously.
    
    1) Get rid of xcall_flush_tlb_pending and per-cpu type
       implementations.
    
    2) Do TLB batch cross calls instead via:
    
            smp_call_function_many()
                    tlb_pending_func()
                            __flush_tlb_pending()
    
    3) Batch only in lazy mmu sequences:
    
            a) Add 'active' member to struct tlb_batch
            b) Define __HAVE_ARCH_ENTER_LAZY_MMU_MODE
            c) Set 'active' in arch_enter_lazy_mmu_mode()
            d) Run batch and clear 'active' in arch_leave_lazy_mmu_mode()
            e) Check 'active' in tlb_batch_add_one() and do a synchronous
               flush if it's clear.
    
    4) Add infrastructure for synchronous TLB page flushes.
    
            a) Implement __flush_tlb_page and per-cpu variants, patch
               as needed.
            b) Likewise for xcall_flush_tlb_page.
            c) Implement smp_flush_tlb_page() to invoke the cross-call.
            d) Wire up global_flush_tlb_page() to the right routine based
               upon CONFIG_SMP
    
    5) It turns out that singleton batches are very common, 2 out of every
       3 batch flushes have only a single entry in them.
    
       The batch flush waiting is very expensive, both because of the poll
       on sibling cpu completeion, as well as because passing the tlb batch
       pointer to the sibling cpus invokes a shared memory dereference.
    
       Therefore, in flush_tlb_pending(), if there is only one entry in
       the batch perform a completely asynchronous global_flush_tlb_page()
       instead.
    
    Reported-by: Dave Kleikamp <dave.kleikamp@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Acked-by: Dave Kleikamp <dave.kleikamp@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit bf6f841f7fde2731ea39698064a81492ce777fa6
Author: David S. Miller <davem@davemloft.net>
Date:   Fri Apr 19 17:26:26 2013 -0400

    sparc64: Fix race in TLB batch processing.
    
    [ Commits f36391d2790d04993f48da6a45810033a2cdf847 and
      f0af97070acbad5d6a361f485828223a4faaa0ee upstream. ]
    
    As reported by Dave Kleikamp, when we emit cross calls to do batched
    TLB flush processing we have a race because we do not synchronize on
    the sibling cpus completing the cross call.
    
    So meanwhile the TLB batch can be reset (tb->tlb_nr set to zero, etc.)
    and either flushes are missed or flushes will flush the wrong
    addresses.
    
    Fix this by using generic infrastructure to synchonize on the
    completion of the cross call.
    
    This first required getting the flush_tlb_pending() call out from
    switch_to() which operates with locks held and interrupts disabled.
    The problem is that smp_call_function_many() cannot be invoked with
    IRQs disabled and this is explicitly checked for with WARN_ON_ONCE().
    
    We get the batch processing outside of locked IRQ disabled sections by
    using some ideas from the powerpc port. Namely, we only batch inside
    of arch_{enter,leave}_lazy_mmu_mode() calls.  If we're not in such a
    region, we flush TLBs synchronously.
    
    1) Get rid of xcall_flush_tlb_pending and per-cpu type
       implementations.
    
    2) Do TLB batch cross calls instead via:
    
            smp_call_function_many()
                    tlb_pending_func()
                            __flush_tlb_pending()
    
    3) Batch only in lazy mmu sequences:
    
            a) Add 'active' member to struct tlb_batch
            b) Define __HAVE_ARCH_ENTER_LAZY_MMU_MODE
            c) Set 'active' in arch_enter_lazy_mmu_mode()
            d) Run batch and clear 'active' in arch_leave_lazy_mmu_mode()
            e) Check 'active' in tlb_batch_add_one() and do a synchronous
               flush if it's clear.
    
    4) Add infrastructure for synchronous TLB page flushes.
    
            a) Implement __flush_tlb_page and per-cpu variants, patch
               as needed.
            b) Likewise for xcall_flush_tlb_page.
            c) Implement smp_flush_tlb_page() to invoke the cross-call.
            d) Wire up global_flush_tlb_page() to the right routine based
               upon CONFIG_SMP
    
    5) It turns out that singleton batches are very common, 2 out of every
       3 batch flushes have only a single entry in them.
    
       The batch flush waiting is very expensive, both because of the poll
       on sibling cpu completeion, as well as because passing the tlb batch
       pointer to the sibling cpus invokes a shared memory dereference.
    
       Therefore, in flush_tlb_pending(), if there is only one entry in
       the batch perform a completely asynchronous global_flush_tlb_page()
       instead.
    
    Reported-by: Dave Kleikamp <dave.kleikamp@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Acked-by: Dave Kleikamp <dave.kleikamp@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 9758b79c56ae6dc93f660928a0d389ba45e530ed
Author: David S. Miller <davem@davemloft.net>
Date:   Fri Apr 19 17:26:26 2013 -0400

    sparc64: Fix race in TLB batch processing.
    
    [ Commits f36391d2790d04993f48da6a45810033a2cdf847 and
      f0af97070acbad5d6a361f485828223a4faaa0ee upstream. ]
    
    As reported by Dave Kleikamp, when we emit cross calls to do batched
    TLB flush processing we have a race because we do not synchronize on
    the sibling cpus completing the cross call.
    
    So meanwhile the TLB batch can be reset (tb->tlb_nr set to zero, etc.)
    and either flushes are missed or flushes will flush the wrong
    addresses.
    
    Fix this by using generic infrastructure to synchonize on the
    completion of the cross call.
    
    This first required getting the flush_tlb_pending() call out from
    switch_to() which operates with locks held and interrupts disabled.
    The problem is that smp_call_function_many() cannot be invoked with
    IRQs disabled and this is explicitly checked for with WARN_ON_ONCE().
    
    We get the batch processing outside of locked IRQ disabled sections by
    using some ideas from the powerpc port. Namely, we only batch inside
    of arch_{enter,leave}_lazy_mmu_mode() calls.  If we're not in such a
    region, we flush TLBs synchronously.
    
    1) Get rid of xcall_flush_tlb_pending and per-cpu type
       implementations.
    
    2) Do TLB batch cross calls instead via:
    
            smp_call_function_many()
                    tlb_pending_func()
                            __flush_tlb_pending()
    
    3) Batch only in lazy mmu sequences:
    
            a) Add 'active' member to struct tlb_batch
            b) Define __HAVE_ARCH_ENTER_LAZY_MMU_MODE
            c) Set 'active' in arch_enter_lazy_mmu_mode()
            d) Run batch and clear 'active' in arch_leave_lazy_mmu_mode()
            e) Check 'active' in tlb_batch_add_one() and do a synchronous
               flush if it's clear.
    
    4) Add infrastructure for synchronous TLB page flushes.
    
            a) Implement __flush_tlb_page and per-cpu variants, patch
               as needed.
            b) Likewise for xcall_flush_tlb_page.
            c) Implement smp_flush_tlb_page() to invoke the cross-call.
            d) Wire up global_flush_tlb_page() to the right routine based
               upon CONFIG_SMP
    
    5) It turns out that singleton batches are very common, 2 out of every
       3 batch flushes have only a single entry in them.
    
       The batch flush waiting is very expensive, both because of the poll
       on sibling cpu completeion, as well as because passing the tlb batch
       pointer to the sibling cpus invokes a shared memory dereference.
    
       Therefore, in flush_tlb_pending(), if there is only one entry in
       the batch perform a completely asynchronous global_flush_tlb_page()
       instead.
    
    Reported-by: Dave Kleikamp <dave.kleikamp@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Acked-by: Dave Kleikamp <dave.kleikamp@oracle.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 823e75f723aa3fefd5d2eecbf8636184ca4790fc
Merge: 149b306089b8 d69f3bad4675
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed May 1 08:17:51 2013 -0700

    Merge branch 'ipc-scalability'
    
    Merge IPC cleanup and scalability patches from Andrew Morton.
    
    This cleans up many of the oddities in the IPC code, uses the list
    iterator helpers, splits out locking and adds per-semaphore locks for
    greater scalability of the IPC semaphore code.
    
    Most normal user-level locking by now uses futexes (ie pthreads, but
    also a lot of specialized locks), but SysV IPC semaphores are apparently
    still used in some big applications, either for portability reasons, or
    because they offer tracking and undo (and you don't need to have a
    special shared memory area for them).
    
    Our IPC semaphore scalability was pitiful.  We used to lock much too big
    ranges, and we used to have a single ipc lock per ipc semaphore array.
    Most loads never cared, but some do.  There are some numbers in the
    individual commits.
    
    * ipc-scalability:
      ipc: sysv shared memory limited to 8TiB
      ipc/msg.c: use list_for_each_entry_[safe] for list traversing
      ipc,sem: fine grained locking for semtimedop
      ipc,sem: have only one list in struct sem_queue
      ipc,sem: open code and rename sem_lock
      ipc,sem: do not hold ipc lock more than necessary
      ipc: introduce lockless pre_down ipcctl
      ipc: introduce obtaining a lockless ipc object
      ipc: remove bogus lock comment for ipc_checkid
      ipc/msgutil.c: use linux/uaccess.h
      ipc: refactor msg list search into separate function
      ipc: simplify msg list search
      ipc: implement MSG_COPY as a new receive mode
      ipc: remove msg handling from queue scan
      ipc: set EFAULT as default error in load_msg()
      ipc: tighten msg copy loops
      ipc: separate msg allocation from userspace copy
      ipc: clamp with min()

commit d69f3bad4675ac519d41ca2b11e1c00ca115cecd
Author: Robin Holt <holt@sgi.com>
Date:   Tue Apr 30 19:15:54 2013 -0700

    ipc: sysv shared memory limited to 8TiB
    
    Trying to run an application which was trying to put data into half of
    memory using shmget(), we found that having a shmall value below 8EiB-8TiB
    would prevent us from using anything more than 8TiB.  By setting
    kernel.shmall greater than 8EiB-8TiB would make the job work.
    
    In the newseg() function, ns->shm_tot which, at 8TiB is INT_MAX.
    
    ipc/shm.c:
     458 static int newseg(struct ipc_namespace *ns, struct ipc_params *params)
     459 {
    ...
     465         int numpages = (size + PAGE_SIZE -1) >> PAGE_SHIFT;
    ...
     474         if (ns->shm_tot + numpages > ns->shm_ctlall)
     475                 return -ENOSPC;
    
    [akpm@linux-foundation.org: make ipc/shm.c:newseg()'s numpages size_t, not int]
    Signed-off-by: Robin Holt <holt@sgi.com>
    Reported-by: Alex Thorlton <athorlton@sgi.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit f36391d2790d04993f48da6a45810033a2cdf847
Author: David S. Miller <davem@davemloft.net>
Date:   Fri Apr 19 17:26:26 2013 -0400

    sparc64: Fix race in TLB batch processing.
    
    As reported by Dave Kleikamp, when we emit cross calls to do batched
    TLB flush processing we have a race because we do not synchronize on
    the sibling cpus completing the cross call.
    
    So meanwhile the TLB batch can be reset (tb->tlb_nr set to zero, etc.)
    and either flushes are missed or flushes will flush the wrong
    addresses.
    
    Fix this by using generic infrastructure to synchonize on the
    completion of the cross call.
    
    This first required getting the flush_tlb_pending() call out from
    switch_to() which operates with locks held and interrupts disabled.
    The problem is that smp_call_function_many() cannot be invoked with
    IRQs disabled and this is explicitly checked for with WARN_ON_ONCE().
    
    We get the batch processing outside of locked IRQ disabled sections by
    using some ideas from the powerpc port. Namely, we only batch inside
    of arch_{enter,leave}_lazy_mmu_mode() calls.  If we're not in such a
    region, we flush TLBs synchronously.
    
    1) Get rid of xcall_flush_tlb_pending and per-cpu type
       implementations.
    
    2) Do TLB batch cross calls instead via:
    
            smp_call_function_many()
                    tlb_pending_func()
                            __flush_tlb_pending()
    
    3) Batch only in lazy mmu sequences:
    
            a) Add 'active' member to struct tlb_batch
            b) Define __HAVE_ARCH_ENTER_LAZY_MMU_MODE
            c) Set 'active' in arch_enter_lazy_mmu_mode()
            d) Run batch and clear 'active' in arch_leave_lazy_mmu_mode()
            e) Check 'active' in tlb_batch_add_one() and do a synchronous
               flush if it's clear.
    
    4) Add infrastructure for synchronous TLB page flushes.
    
            a) Implement __flush_tlb_page and per-cpu variants, patch
               as needed.
            b) Likewise for xcall_flush_tlb_page.
            c) Implement smp_flush_tlb_page() to invoke the cross-call.
            d) Wire up global_flush_tlb_page() to the right routine based
               upon CONFIG_SMP
    
    5) It turns out that singleton batches are very common, 2 out of every
       3 batch flushes have only a single entry in them.
    
       The batch flush waiting is very expensive, both because of the poll
       on sibling cpu completeion, as well as because passing the tlb batch
       pointer to the sibling cpus invokes a shared memory dereference.
    
       Therefore, in flush_tlb_pending(), if there is only one entry in
       the batch perform a completely asynchronous global_flush_tlb_page()
       instead.
    
    Reported-by: Dave Kleikamp <dave.kleikamp@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Acked-by: Dave Kleikamp <dave.kleikamp@oracle.com>

commit 92b38f851470f8d8ea7ed638d546f83b5268bc12
Author: Sjur Brændeland <sjur.brandeland@stericsson.com>
Date:   Thu Feb 21 18:15:39 2013 +0100

    remoteproc: support virtio config space.
    
    Support virtio configuration space and device status. The virtio
    device can now access the resource table in shared memory.
    
    Signed-off-by: Sjur Brændeland <sjur.brandeland@stericsson.com>
    Acked-by: Ido Yariv <ido@wizery.com>
    [rebase and style changes]
    Signed-off-by: Ohad Ben-Cohen <ohad@wizery.com>

commit a9c174302b1590ef3ead485d804a303c5f89174b
Author: Michael Grzeschik <m.grzeschik@pengutronix.de>
Date:   Thu Apr 4 13:13:46 2013 +0300

    usb: chipidea: udc: fix memory access of shared memory on armv5 machines
    
    The udc uses an shared dma memory space between hard and software. This
    memory layout is described in ci13xxx_qh and ci13xxx_td which are marked
    with the attribute ((packed)).
    
    The compiler currently does not know about the alignment of the memory
    layout, and will create strb and ldrb operations.
    
    The Datasheet of the synopsys core describes, that some operations on
    the mapped memory need to be atomic double word operations. I.e. the
    next pointer addressing in the qhead, as otherwise the hardware will
    read wrong data and totally stuck.
    
    This is also possible while working with the current active td queue,
    and preparing the td->ptr.next in software while the hardware is still
    working with the current active td which is supposed to be changed:
    
    writeb(0xde, &td->ptr.next + 0x0); /* strb */
    writeb(0xad, &td->ptr.next + 0x1); /* strb */
    
    <----- hardware reads value of td->ptr.next and get stuck!
    
    writeb(0xbe, &td->ptr.next + 0x2); /* strb */
    writeb(0xef, &td->ptr.next + 0x3); /* strb */
    
    This appeares on armv5 machines where the hardware does not support
    unaligned 32bit operations.
    
    This patch adds the attribute ((aligned(4))) to the structures to tell
    the compiler to use 32bit operations. It also adds an wmb() for the
    prepared TD data before it gets enqueued into the qhead.
    
    Cc: stable <stable@vger.kernel.org> # v3.5
    Signed-off-by: Michael Grzeschik <m.grzeschik@pengutronix.de>
    Reviewed-by: Felipe Balbi <balbi@ti.com>
    Signed-off-by: Alexander Shishkin <alexander.shishkin@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 95f9578163bc25bcbf391420373cf797d5321830
Author: Sjur Brændeland <sjur.brandeland@stericsson.com>
Date:   Thu Feb 21 18:15:34 2013 +0100

    remoteproc: add find_loaded_rsc_table firmware ops
    
    Add function find_loaded_rsc_table to firmware ops. This function
    returns the location of the resource table in shared memory
    after loading.
    
    Signed-off-by: Sjur Brændeland <sjur.brandeland@stericsson.com>
    Acked-by: Ido Yariv <ido@wizery.com>
    [align function name with existing terminology, update commit log]
    [document new function, rebase patch, small cleanups]
    Signed-off-by: Ohad Ben-Cohen <ohad@wizery.com>

commit 0d2e1a2926b1839a4b74519e660739b2566c9386
Author: Erwan Yvin <erwan.yvin@stericsson.com>
Date:   Wed Mar 20 13:52:24 2013 +1030

    caif_virtio: Introduce caif over virtio
    
    Add the CAIF Virtio shared memory driver for talking
    to a modem.
    
    This CAIF Link layer communicates to the modem over
    shared memory. It is implemented as a virtio_driver.
    The underlying virtio device is managed by the remoteproc
    framework. The Virtio queue is used for transmitting data
    to the modem, and the new vringh is used for receiving data.
    
    Genalloc is used for managing the shared memory used for TX
    data. The default dma-alloc-coherent allocator can only
    allocate whole pages, and this wastes too much shared memory.
    
    Flow control is implemented by stopping the TX-queues if the
    virtio queues go full or we run out of memory. Queued are
    reopened when queues are below the watermark.
    
    NAPI is used in RX path, and a dedicated tasklet is used
    for releasing TX buffers.
    
    Signed-off-by: Erwan Yvin <erwan.yvin@stericsson.com>
    Acked-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Rusty Russell <rusty@rustcorp.com.au> (minor fixes)

commit e9f5b8145af9a0ee34e98cf01dcd3afb87225538
Author: Serban Constantinescu <serban.constantinescu@arm.com>
Date:   Tue Mar 5 15:27:38 2013 +0000

    staging: android: ashmem: Add support for 32bit ashmem calls in a 64bit kernel
    
    Android's shared memory subsystem, Ashmem, does not support calls from a
    32bit userspace in a 64 bit kernel. This patch adds support for syscalls
    coming from a 32bit userspace in a 64bit kernel.
    
    The patch has been successfully tested on ARMv8 AEM(64bit
    platform model) and Versatile Express A9(32bit platform).
    
    v2: Fix missing compat.h include.
    
    Signed-off-by: Serban Constantinescu <serban.constantinescu@arm.com>
    Acked-by: Arve Hjønnevåg <arve@android.com>
    Acked-by: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit de73b6b1bd7480301c8e8fbe58184448b1757945
Author: Max Filippov <jcmvbkbc@gmail.com>
Date:   Sat Dec 22 06:35:04 2012 +0400

    xtensa: avoid mmap cache aliasing
    
    Provide arch_get_unmapped_area function aligning shared memory mapping
    addresses to the biggest of the page size or the cache way size. That
    guarantees that corresponding virtual addresses of shared mappings are
    cached by the same cache sets.
    
    Signed-off-by: Max Filippov <jcmvbkbc@gmail.com>
    Signed-off-by: Chris Zankel <chris@zankel.net>

commit 5f4b9fc5c1d3c8fc6037fa99d527ad3264dc0038
Author: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
Date:   Fri Feb 22 16:35:53 2013 -0800

    HWPOISON: change order of error_states[]'s elements
    
    error_states[] has two separate states "unevictable LRU page" and
    "mlocked LRU page", and the former one has the higher priority now.  But
    because of that the latter one is rarely chosen because pages with
    PageMlocked highly likely have PG_unevictable set.  On the other hand,
    PG_unevictable without PageMlocked is common for ramfs or SHM_LOCKed
    shared memory, so reversing the priority of these two states helps us
    clearly distinguish them.
    
    Signed-off-by: Naoya Horiguchi <n-horiguchi@ah.jp.nec.com>
    Cc: Andi Kleen <andi@firstfloor.org>
    Cc: Chen Gong <gong.chen@linux.intel.com>
    Cc: Tony Luck <tony.luck@intel.com>
    Cc: Wu Fengguang <fengguang.wu@intel.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit e0f4fec030ce412666cc127702adbf0a6cfa0855
Author: Mian Yousaf Kaukab <mian.yousaf.kaukab@stericsson.com>
Date:   Fri Jan 27 11:22:16 2012 +0100

    mfd: abx500-core: Provide an API to dump all ABx500 registers
    
    Some drivers can detect subsystem failures e.g. shared memory driver
    can detect modem sub system failures. It would be helpful in analyzing
    these failures if AB register dump is available at that point. This
    patch adds the API for the drivers to dump AB registers in the kernel
    log.
    
    Signed-off-by: Lee Jones <lee.jones@linaro.org>
    Signed-off-by: Mian Yousaf Kaukab <mian.yousaf.kaukab@stericsson.com>
    Reviewed-by: Linus WALLEIJ <linus.walleij@stericsson.com>
    Reviewed-by: Jonas ABERG <jonas.aberg@stericsson.com>

commit fce3cd45e66672744fbd58fd620c5780f3159a53
Author: Paul Gortmaker <paul.gortmaker@windriver.com>
Date:   Mon Jan 14 20:32:46 2013 -0500

    drivers/net: delete the really obsolete 8390 based 10Mbit ISA drivers
    
    This is an area I know all too well, after being author of several 8390
    drivers, and maintainer of all 8390 drivers during a large part of their
    active lifecycle.
    
    To that end, I can say this with a reasonable degree of confidence.
    The drivers deleted here represent the earliest (as in early 1990)
    hardware and/or rare hardware.  The remaining hardware not deleted
    here is the more modern/sane of the lot, with ISA-PnP and jumperless
    "soft configuration" like the wd and smc cards had.
    
    The original ne2000 driver (ne.c) gets a pass at this time since
    AT/LANTIC based cards that could be both ne2000 or wd-like (with
    shared memory) and with jumperless configuration were made in the
    mid to late 1990's, and performed reasonably well for their era.
    
    Signed-off-by: Paul Gortmaker <paul.gortmaker@windriver.com>

commit 857001f06f6bec17cafd567a03b24968902a4744
Author: Michael Chan <mchan@broadcom.com>
Date:   Sun Jan 6 12:51:09 2013 +0000

    tg3: Improve PCI function number detection.
    
    Simplify the code to detect PCI function number on 5717, 5719, and 5720.
    If shared memory does not have proper signature, read the function number
    from register directly.
    
    Signed-off-by: Michael Chan <mchan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 03f595668017f1a1fb971c02fc37140bc6e7bb1c
Author: Stanislav Kinsbursky <skinsbursky@parallels.com>
Date:   Fri Jan 4 15:34:50 2013 -0800

    ipc: add sysctl to specify desired next object id
    
    Add 3 new variables and sysctls to tune them (by one "next_id" variable
    for messages, semaphores and shared memory respectively).  This variable
    can be used to set desired id for next allocated IPC object.  By default
    it's equal to -1 and old behaviour is preserved.  If this variable is
    non-negative, then desired idr will be extracted from it and used as a
    start value to search for free IDR slot.
    
    Notes:
    
    1) this patch doesn't guarantee that the new object will have desired
       id.  So it's up to user space how to handle new object with wrong id.
    
    2) After a sucessful id allocation attempt, "next_id" will be set back
       to -1 (if it was non-negative).
    
    [akpm@linux-foundation.org: checkpatch fixes]
    Signed-off-by: Stanislav Kinsbursky <skinsbursky@parallels.com>
    Cc: Serge Hallyn <serge.hallyn@canonical.com>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: Pavel Emelyanov <xemul@parallels.com>
    Cc: Al Viro <viro@zeniv.linux.org.uk>
    Cc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Cc: Michael Kerrisk <mtk.manpages@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 7069ed67635b8d574541af426d752cd7fbd465a6
Author: Marcelo Tosatti <mtosatti@redhat.com>
Date:   Tue Nov 27 23:28:48 2012 -0200

    x86: kvmclock: allocate pvclock shared memory area
    
    We want to expose the pvclock shared memory areas, which
    the hypervisor periodically updates, to userspace.
    
    For a linear mapping from userspace, it is necessary that
    entire page sized regions are used for array of pvclock
    structures.
    
    There is no such guarantee with per cpu areas, therefore move
    to memblock_alloc based allocation.
    
    Acked-by: Glauber Costa <glommer@parallels.com>
    Signed-off-by: Marcelo Tosatti <mtosatti@redhat.com>

commit 32d6448a08bdbe6d22fcff1dfffb8399003282df
Merge: 86b7d3f77979 e60304f8cb7b
Author: Jason Cooper <jason@lakedaemon.net>
Date:   Wed Nov 21 20:02:46 2012 +0000

    Merge tag 'marvell-hwiocc-for-3.8' of git://github.com/MISL-EBU-System-SW/mainline-public into mvebu/everything
    
    Add hardware I/O coherency support for Armada 370/XP
    
    The purpose of this patch set is to add hardware I/O Coherency support
    for Armada 370 and Armada XP. Theses SoCs come with an unit called
    coherency fabric. A beginning of the support for this unit have been
    introduced with the SMP patch set. This series extend this support:
    the coherency fabric unit allows to use the Armada XP and the Armada
    370 as nearly coherent architectures.
    
    The third patches enables this new feature and register our own set
    of DMA ops, to benefit this hardware enhancement.
    
    The first patches exports a dma operation function needed to register
    our own set of dma ops.
    
    The second patch introduces a new flag for the address decoding
    configuration in order to be able to set the memory windows as
    shared memory.

commit 0a8704a51f386cab7394e38ff1d66eef924d8ab8
Author: Roger Pau Monne <roger.pau@citrix.com>
Date:   Wed Oct 24 18:58:45 2012 +0200

    xen/blkback: Persistent grant maps for xen blk drivers
    
    This patch implements persistent grants for the xen-blk{front,back}
    mechanism. The effect of this change is to reduce the number of unmap
    operations performed, since they cause a (costly) TLB shootdown. This
    allows the I/O performance to scale better when a large number of VMs
    are performing I/O.
    
    Previously, the blkfront driver was supplied a bvec[] from the request
    queue. This was granted to dom0; dom0 performed the I/O and wrote
    directly into the grant-mapped memory and unmapped it; blkfront then
    removed foreign access for that grant. The cost of unmapping scales
    badly with the number of CPUs in Dom0. An experiment showed that when
    Dom0 has 24 VCPUs, and guests are performing parallel I/O to a
    ramdisk, the IPIs from performing unmap's is a bottleneck at 5 guests
    (at which point 650,000 IOPS are being performed in total). If more
    than 5 guests are used, the performance declines. By 10 guests, only
    400,000 IOPS are being performed.
    
    This patch improves performance by only unmapping when the connection
    between blkfront and back is broken.
    
    On startup blkfront notifies blkback that it is using persistent
    grants, and blkback will do the same. If blkback is not capable of
    persistent mapping, blkfront will still use the same grants, since it
    is compatible with the previous protocol, and simplifies the code
    complexity in blkfront.
    
    To perform a read, in persistent mode, blkfront uses a separate pool
    of pages that it maps to dom0. When a request comes in, blkfront
    transmutes the request so that blkback will write into one of these
    free pages. Blkback keeps note of which grefs it has already
    mapped. When a new ring request comes to blkback, it looks to see if
    it has already mapped that page. If so, it will not map it again. If
    the page hasn't been previously mapped, it is mapped now, and a record
    is kept of this mapping. Blkback proceeds as usual. When blkfront is
    notified that blkback has completed a request, it memcpy's from the
    shared memory, into the bvec supplied. A record that the {gref, page}
    tuple is mapped, and not inflight is kept.
    
    Writes are similar, except that the memcpy is peformed from the
    supplied bvecs, into the shared pages, before the request is put onto
    the ring.
    
    Blkback stores a mapping of grefs=>{page mapped to by gref} in
    a red-black tree. As the grefs are not known apriori, and provide no
    guarantees on their ordering, we have to perform a search
    through this tree to find the page, for every gref we receive. This
    operation takes O(log n) time in the worst case. In blkfront grants
    are stored using a single linked list.
    
    The maximum number of grants that blkback will persistenly map is
    currently set to RING_SIZE * BLKIF_MAX_SEGMENTS_PER_REQUEST, to
    prevent a malicios guest from attempting a DoS, by supplying fresh
    grefs, causing the Dom0 kernel to map excessively. If a guest
    is using persistent grants and exceeds the maximum number of grants to
    map persistenly the newly passed grefs will be mapped and unmaped.
    Using this approach, we can have requests that mix persistent and
    non-persistent grants, and we need to handle them correctly.
    This allows us to set the maximum number of persistent grants to a
    lower value than RING_SIZE * BLKIF_MAX_SEGMENTS_PER_REQUEST, although
    setting it will lead to unpredictable performance.
    
    In writing this patch, the question arrises as to if the additional
    cost of performing memcpys in the guest (to/from the pool of granted
    pages) outweigh the gains of not performing TLB shootdowns. The answer
    to that question is `no'. There appears to be very little, if any
    additional cost to the guest of using persistent grants. There is
    perhaps a small saving, from the reduced number of hypercalls
    performed in granting, and ending foreign access.
    
    Signed-off-by: Oliver Chick <oliver.chick@citrix.com>
    Signed-off-by: Roger Pau Monne <roger.pau@citrix.com>
    Signed-off-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>
    [v1: Fixed up the misuse of bool as int]

commit 7de8a0cf48a023058642c69145630d51709aa174
Author: Omar Ramirez Luna <omar.ramirez@copitl.com>
Date:   Wed Oct 24 17:09:18 2012 -0500

    staging: tidspbridge: ioremap dsp sync addr
    
    Change the type of sync_addr to 'void __iomem *' and ioremap the
    physical address in the shared memory so we can access it using
    _raw_*. While at it, drop 'dw_' prefix.
    
    Fix the warning associated with dsp's sync_addr:
    
    warning: passing argument 2 of '__raw_writel' makes pointer from integer without a cast
    ../io.h:88: note: expected 'volatile void *' but argument is of type 'u32'
    
    Signed-off-by: Omar Ramirez Luna <omar.ramirez@copitl.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit cf31cd1a0c692a1445c80756055875088fa29982
Author: Srivatsa S. Bhat <srivatsa.bhat@linux.vnet.ibm.com>
Date:   Mon Oct 8 13:43:08 2012 +0530

    ACPI idle, CPU hotplug: Fix NULL pointer dereference during hotplug
    
    On a KVM guest, when a CPU is taken offline and brought back online, we hit
    the following NULL pointer dereference:
    
    [   45.400843] Unregister pv shared memory for cpu 1
    [   45.412331] smpboot: CPU 1 is now offline
    [   45.529894] SMP alternatives: lockdep: fixing up alternatives
    [   45.533472] smpboot: Booting Node 0 Processor 1 APIC 0x1
    [   45.411526] kvm-clock: cpu 1, msr 0:7d14601, secondary cpu clock
    [   45.571370] KVM setup async PF for cpu 1
    [   45.572331] kvm-stealtime: cpu 1, msr 7d0e040
    [   45.575031] BUG: unable to handle kernel NULL pointer dereference at           (null)
    [   45.576017] IP: [<ffffffff81519f98>] cpuidle_disable_device+0x18/0x80
    [   45.576017] PGD 5dfb067 PUD 5da8067 PMD 0
    [   45.576017] Oops: 0000 [#1] SMP
    [   45.576017] Modules linked in:
    [   45.576017] CPU 0
    [   45.576017] Pid: 607, comm: stress_cpu_hotp Not tainted 3.6.0-padata-tp-debug #3 Bochs Bochs
    [   45.576017] RIP: 0010:[<ffffffff81519f98>]  [<ffffffff81519f98>] cpuidle_disable_device+0x18/0x80
    [   45.576017] RSP: 0018:ffff880005d93ce8  EFLAGS: 00010286
    [   45.576017] RAX: ffff880005d93fd8 RBX: 0000000000000000 RCX: 0000000000000006
    [   45.576017] RDX: 0000000000000006 RSI: 2222222222222222 RDI: 0000000000000000
    [   45.576017] RBP: ffff880005d93cf8 R08: 2222222222222222 R09: 2222222222222222
    [   45.576017] R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000000
    [   45.576017] R13: 0000000000000000 R14: ffffffff81c8cca0 R15: 0000000000000001
    [   45.576017] FS:  00007f91936ae700(0000) GS:ffff880007c00000(0000) knlGS:0000000000000000
    [   45.576017] CS:  0010 DS: 0000 ES: 0000 CR0: 000000008005003b
    [   45.576017] CR2: 0000000000000000 CR3: 0000000005db3000 CR4: 00000000000006f0
    [   45.576017] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
    [   45.576017] DR3: 0000000000000000 DR6: 00000000ffff0ff0 DR7: 0000000000000400
    [   45.576017] Process stress_cpu_hotp (pid: 607, threadinfo ffff880005d92000, task ffff8800066bbf40)
    [   45.576017] Stack:
    [   45.576017]  ffff880007a96400 0000000000000000 ffff880005d93d28 ffffffff813ac689
    [   45.576017]  ffff880007a96400 ffff880007a96400 0000000000000002 ffffffff81cd8d01
    [   45.576017]  ffff880005d93d58 ffffffff813aa498 0000000000000001 00000000ffffffdd
    [   45.576017] Call Trace:
    [   45.576017]  [<ffffffff813ac689>] acpi_processor_hotplug+0x55/0x97
    [   45.576017]  [<ffffffff813aa498>] acpi_cpu_soft_notify+0x93/0xce
    [   45.576017]  [<ffffffff816ae47d>] notifier_call_chain+0x5d/0x110
    [   45.576017]  [<ffffffff8109730e>] __raw_notifier_call_chain+0xe/0x10
    [   45.576017]  [<ffffffff81069050>] __cpu_notify+0x20/0x40
    [   45.576017]  [<ffffffff81069085>] cpu_notify+0x15/0x20
    [   45.576017]  [<ffffffff816978f1>] _cpu_up+0xee/0x137
    [   45.576017]  [<ffffffff81697983>] cpu_up+0x49/0x59
    [   45.576017]  [<ffffffff8168758d>] store_online+0x9d/0xe0
    [   45.576017]  [<ffffffff8140a9f8>] dev_attr_store+0x18/0x30
    [   45.576017]  [<ffffffff812322c0>] sysfs_write_file+0xe0/0x150
    [   45.576017]  [<ffffffff811b389c>] vfs_write+0xac/0x180
    [   45.576017]  [<ffffffff811b3be2>] sys_write+0x52/0xa0
    [   45.576017]  [<ffffffff816b31e9>] system_call_fastpath+0x16/0x1b
    [   45.576017] Code: 48 c7 c7 40 e5 ca 81 e8 07 d0 18 00 5d c3 0f 1f 44 00 00 0f 1f 44 00 00 55 48 89 e5 48 83 ec 10 48 89 5d f0 4c 89 65 f8 48 89 fb <f6> 07 02 75 13 48 8b 5d f0 4c 8b 65 f8 c9 c3 66 0f 1f 84 00 00
    [   45.576017] RIP  [<ffffffff81519f98>] cpuidle_disable_device+0x18/0x80
    [   45.576017]  RSP <ffff880005d93ce8>
    [   45.576017] CR2: 0000000000000000
    [   45.656079] ---[ end trace 433d6c9ac0b02cef ]---
    
    Analysis:
    Commit 3d339dc (cpuidle / ACPI : move cpuidle_device field out of the
    acpi_processor_power structure()) made the allocation of the dev structure
    (struct cpuidle) of a CPU dynamic, whereas previously it was statically
    allocated. And this dynamic allocation occurs in acpi_processor_power_init()
    if pr->flags.power evaluates to non-zero.
    
    On KVM guests, pr->flags.power evaluates to zero, hence dev is never
    allocated. This causes the NULL pointer (dev) dereference in
    cpuidle_disable_device() during a subsequent CPU online operation. Fix this
    by ensuring that dev is non-NULL before dereferencing.
    
    Signed-off-by: Srivatsa S. Bhat <srivatsa.bhat@linux.vnet.ibm.com>
    Signed-off-by: Len Brown <len.brown@intel.com>

commit 77a788fc2d4089c64eb355a004f1f16b22eb3ab1
Author: Arun Kumar K <arun.kk@samsung.com>
Date:   Wed Oct 3 22:19:07 2012 -0300

    [media] s5p-mfc: Prepare driver for callback based re-architecture
    
    The patch renames hardware specific opr and cmd files to
    opr_v5 and cmd_v5 respectively. This is done for accomodating
    firmware v6. Also the shared memory management files are removed
    and the functionality is added to the opr_v5 file.
    
    Signed-off-by: Arun Kumar K <arun.kk@samsung.com>
    Acked-by: Kamil Debski <k.debski@samsung.com>
    Signed-off-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
    Signed-off-by: Mauro Carvalho Chehab <mchehab@redhat.com>

commit ec4d02d9180f407c41f8310a13b34e473c671fbb
Author: Sjur Brændeland <sjur.brandeland@stericsson.com>
Date:   Thu Sep 20 18:32:56 2012 +0200

    remoteproc: Add STE modem driver
    
    Add support for the STE modem shared memory driver.
    This driver hooks into the remoteproc framework
    in order to manage configuration and the virtio
    devices.
    
    This driver adds custom firmware handlers, because
    STE modem uses a custom firmware layout.
    
    Signed-off-by: Sjur Brændeland <sjur.brandeland@stericsson.com>
    cc: Linus Walleij <linus.walleij@linaro.org>
    cc: Alan Cox <alan@lxorguk.ukuu.org.uk>
    [ohad: validate mdev->ops, move setup() to probe/remove, trivial style changes]
    Signed-off-by: Ohad Ben-Cohen <ohad@wizery.com>

commit 1547cb80db5587c465be609b9a15bfb2dfd73099
Merge: 1568d9f425c3 8335eafc2859
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Sep 14 17:53:55 2012 -0700

    Merge tag 'ecryptfs-3.6-rc6-fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/tyhicks/ecryptfs
    
    Pull ecryptfs fixes from Tyler Hicks:
    
     - Fixes a regression, introduced in 3.6-rc1, when a file is closed
       before its shared memory mapping is dirtied and unmapped.  The lower
       file was being released when the eCryptfs file was closed and the
       dirtied pages could not be written out.
     - Adds a call to the lower filesystem's ->flush() from
       ecryptfs_flush().
     - Fixes a regression, introduced in 2.6.39, when a file is renamed on
       top of another file.  The target file's inode was not being evicted
       and the space taken by the file was not reclaimed until eCryptfs was
       unmounted.
    
    * tag 'ecryptfs-3.6-rc6-fixes' of git://git.kernel.org/pub/scm/linux/kernel/git/tyhicks/ecryptfs:
      eCryptfs: Copy up attributes of the lower target inode after rename
      eCryptfs: Call lower ->flush() from ecryptfs_flush()
      eCryptfs: Write out all dirty pages just before releasing the lower file

commit cb03af01c612ba97621a927225791a98357959c1
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Mon Sep 10 10:33:08 2012 -0700

    ARM: msm: Allow msm_iomap-8x60 and msm_iomap-8960 to coexist
    
    Remove the unused GCC, ACC, and shared memory definitions in the
    8660 static mappings. This allows the 8660 header file to be
    included in msm_iomap.h unconditionally.
    
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Signed-off-by: David Brown <davidb@codeaurora.org>

commit ae7a2a3fb6f8b784c2752863f4f1f20c656f76fb
Author: Michael S. Tsirkin <mst@redhat.com>
Date:   Sun Jun 24 19:25:07 2012 +0300

    KVM: host side for eoi optimization
    
    Implementation of PV EOI using shared memory.
    This reduces the number of exits an interrupt
    causes as much as by half.
    
    The idea is simple: there's a bit, per APIC, in guest memory,
    that tells the guest that it does not need EOI.
    We set it before injecting an interrupt and clear
    before injecting a nested one. Guest tests it using
    a test and clear operation - this is necessary
    so that host can detect interrupt nesting -
    and if set, it can skip the EOI MSR.
    
    There's a new MSR to set the address of said register
    in guest memory. Otherwise not much changed:
    - Guest EOI is not required
    - Register is tested & ISR is automatically cleared on exit
    
    For testing results see description of previous patch
    'kvm_para: guest side for eoi avoidance'.
    
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Signed-off-by: Avi Kivity <avi@redhat.com>

commit 46edaedaf3842164281d0f86c41bc152f4b4d32e
Merge: 513335f964a1 40af1bbdca47
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Thu Jun 7 15:05:43 2012 -0700

    Merge branch 'akpm' (Andrew's fixups)
    
    Merge random fixes from Andrew Morton.
    
    * emailed from Andrew Morton <akpm@linux-foundation.org>: (11 patches)
      mm: correctly synchronize rss-counters at exit/exec
      btree: catch NULL value before it does harm
      btree: fix tree corruption in btree_get_prev()
      ipc: shm: restore MADV_REMOVE functionality on shared memory segments
      drivers/platform/x86/acerhdf.c: correct Boris' mail address
      c/r: prctl: drop VMA flags test on PR_SET_MM_ stack data assignment
      c/r: prctl: add ability to get clear_tid_address
      c/r: prctl: add minimal address test to PR_SET_MM
      c/r: prctl: update prctl_set_mm_exe_file() after mm->num_exe_file_vmas removal
      MAINTAINERS: whitespace fixes
      shmem: replace_page must flush_dcache and others

commit 7d8a45695cc8f9fcdf4121fcbd897ecb63f758e4
Author: Will Deacon <will.deacon@arm.com>
Date:   Thu Jun 7 14:21:13 2012 -0700

    ipc: shm: restore MADV_REMOVE functionality on shared memory segments
    
    Commit 17cf28afea2a ("mm/fs: remove truncate_range") removed the
    truncate_range inode operation in favour of the fallocate file
    operation.
    
    When using SYSV IPC shared memory segments, calling madvise with the
    MADV_REMOVE advice on an area of shared memory will attempt to invoke
    the .fallocate function for the shm_file_operations, which is NULL and
    therefore returns -EOPNOTSUPP to userspace.  The previous behaviour
    would inherit the inode_operations from the underlying tmpfs file and
    invoke truncate_range there.
    
    This patch restores the previous behaviour by wrapping the underlying
    fallocate function in shm_fallocate, as we do for fsync.
    
    [hughd@google.com: use -ENOTSUPP in shm_fallocate()]
    Signed-off-by: Will Deacon <will.deacon@arm.com>
    Acked-by: Hugh Dickins <hughd@google.com>
    Signed-off-by: Hugh Dickins <hughd@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit ab9094fa038106675b40dbb5ee78b60255d6c436
Author: Mel Gorman <mgorman@suse.de>
Date:   Wed May 23 12:48:13 2012 +0100

    mm: mempolicy: Let vma_merge and vma_split handle vma->vm_policy linkages
    
    commit 05f144a0d5c2207a0349348127f996e104ad7404 upstream.
    
    Dave Jones' system call fuzz testing tool "trinity" triggered the
    following bug error with slab debugging enabled
    
        =============================================================================
        BUG numa_policy (Not tainted): Poison overwritten
        -----------------------------------------------------------------------------
    
        INFO: 0xffff880146498250-0xffff880146498250. First byte 0x6a instead of 0x6b
        INFO: Allocated in mpol_new+0xa3/0x140 age=46310 cpu=6 pid=32154
         __slab_alloc+0x3d3/0x445
         kmem_cache_alloc+0x29d/0x2b0
         mpol_new+0xa3/0x140
         sys_mbind+0x142/0x620
         system_call_fastpath+0x16/0x1b
        INFO: Freed in __mpol_put+0x27/0x30 age=46268 cpu=6 pid=32154
         __slab_free+0x2e/0x1de
         kmem_cache_free+0x25a/0x260
         __mpol_put+0x27/0x30
         remove_vma+0x68/0x90
         exit_mmap+0x118/0x140
         mmput+0x73/0x110
         exit_mm+0x108/0x130
         do_exit+0x162/0xb90
         do_group_exit+0x4f/0xc0
         sys_exit_group+0x17/0x20
         system_call_fastpath+0x16/0x1b
        INFO: Slab 0xffffea0005192600 objects=27 used=27 fp=0x          (null) flags=0x20000000004080
        INFO: Object 0xffff880146498250 @offset=592 fp=0xffff88014649b9d0
    
    This implied a reference counting bug and the problem happened during
    mbind().
    
    mbind() applies a new memory policy to a range and uses mbind_range() to
    merge existing VMAs or split them as necessary.  In the event of splits,
    mpol_dup() will allocate a new struct mempolicy and maintain existing
    reference counts whose rules are documented in
    Documentation/vm/numa_memory_policy.txt .
    
    The problem occurs with shared memory policies.  The vm_op->set_policy
    increments the reference count if necessary and split_vma() and
    vma_merge() have already handled the existing reference counts.
    However, policy_vma() screws it up by replacing an existing
    vma->vm_policy with one that potentially has the wrong reference count
    leading to a premature free.  This patch removes the damage caused by
    policy_vma().
    
    With this patch applied Dave's trinity tool runs an mbind test for 5
    minutes without error.  /proc/slabinfo reported that there are no
    numa_policy or shared_policy_node objects allocated after the test
    completed and the shared memory region was deleted.
    
    Signed-off-by: Mel Gorman <mgorman@suse.de>
    Cc: Dave Jones <davej@redhat.com>
    Cc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Cc: Stephen Wilson <wilsons@start.ca>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 29fdad4cf1cd116ff029456bf85d62d032c2c3e2
Author: Mel Gorman <mgorman@suse.de>
Date:   Wed May 23 12:48:13 2012 +0100

    mm: mempolicy: Let vma_merge and vma_split handle vma->vm_policy linkages
    
    commit 05f144a0d5c2207a0349348127f996e104ad7404 upstream.
    
    Dave Jones' system call fuzz testing tool "trinity" triggered the
    following bug error with slab debugging enabled
    
        =============================================================================
        BUG numa_policy (Not tainted): Poison overwritten
        -----------------------------------------------------------------------------
    
        INFO: 0xffff880146498250-0xffff880146498250. First byte 0x6a instead of 0x6b
        INFO: Allocated in mpol_new+0xa3/0x140 age=46310 cpu=6 pid=32154
         __slab_alloc+0x3d3/0x445
         kmem_cache_alloc+0x29d/0x2b0
         mpol_new+0xa3/0x140
         sys_mbind+0x142/0x620
         system_call_fastpath+0x16/0x1b
        INFO: Freed in __mpol_put+0x27/0x30 age=46268 cpu=6 pid=32154
         __slab_free+0x2e/0x1de
         kmem_cache_free+0x25a/0x260
         __mpol_put+0x27/0x30
         remove_vma+0x68/0x90
         exit_mmap+0x118/0x140
         mmput+0x73/0x110
         exit_mm+0x108/0x130
         do_exit+0x162/0xb90
         do_group_exit+0x4f/0xc0
         sys_exit_group+0x17/0x20
         system_call_fastpath+0x16/0x1b
        INFO: Slab 0xffffea0005192600 objects=27 used=27 fp=0x          (null) flags=0x20000000004080
        INFO: Object 0xffff880146498250 @offset=592 fp=0xffff88014649b9d0
    
    This implied a reference counting bug and the problem happened during
    mbind().
    
    mbind() applies a new memory policy to a range and uses mbind_range() to
    merge existing VMAs or split them as necessary.  In the event of splits,
    mpol_dup() will allocate a new struct mempolicy and maintain existing
    reference counts whose rules are documented in
    Documentation/vm/numa_memory_policy.txt .
    
    The problem occurs with shared memory policies.  The vm_op->set_policy
    increments the reference count if necessary and split_vma() and
    vma_merge() have already handled the existing reference counts.
    However, policy_vma() screws it up by replacing an existing
    vma->vm_policy with one that potentially has the wrong reference count
    leading to a premature free.  This patch removes the damage caused by
    policy_vma().
    
    With this patch applied Dave's trinity tool runs an mbind test for 5
    minutes without error.  /proc/slabinfo reported that there are no
    numa_policy or shared_policy_node objects allocated after the test
    completed and the shared memory region was deleted.
    
    Signed-off-by: Mel Gorman <mgorman@suse.de>
    Cc: Dave Jones <davej@redhat.com>
    Cc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Cc: Stephen Wilson <wilsons@start.ca>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit beb9576530bc9a2685847fa1fcbf96b97686fcaf
Author: Mel Gorman <mgorman@suse.de>
Date:   Wed May 23 12:48:13 2012 +0100

    mm: mempolicy: Let vma_merge and vma_split handle vma->vm_policy linkages
    
    commit 05f144a0d5c2207a0349348127f996e104ad7404 upstream.
    
    Dave Jones' system call fuzz testing tool "trinity" triggered the
    following bug error with slab debugging enabled
    
        =============================================================================
        BUG numa_policy (Not tainted): Poison overwritten
        -----------------------------------------------------------------------------
    
        INFO: 0xffff880146498250-0xffff880146498250. First byte 0x6a instead of 0x6b
        INFO: Allocated in mpol_new+0xa3/0x140 age=46310 cpu=6 pid=32154
         __slab_alloc+0x3d3/0x445
         kmem_cache_alloc+0x29d/0x2b0
         mpol_new+0xa3/0x140
         sys_mbind+0x142/0x620
         system_call_fastpath+0x16/0x1b
        INFO: Freed in __mpol_put+0x27/0x30 age=46268 cpu=6 pid=32154
         __slab_free+0x2e/0x1de
         kmem_cache_free+0x25a/0x260
         __mpol_put+0x27/0x30
         remove_vma+0x68/0x90
         exit_mmap+0x118/0x140
         mmput+0x73/0x110
         exit_mm+0x108/0x130
         do_exit+0x162/0xb90
         do_group_exit+0x4f/0xc0
         sys_exit_group+0x17/0x20
         system_call_fastpath+0x16/0x1b
        INFO: Slab 0xffffea0005192600 objects=27 used=27 fp=0x          (null) flags=0x20000000004080
        INFO: Object 0xffff880146498250 @offset=592 fp=0xffff88014649b9d0
    
    This implied a reference counting bug and the problem happened during
    mbind().
    
    mbind() applies a new memory policy to a range and uses mbind_range() to
    merge existing VMAs or split them as necessary.  In the event of splits,
    mpol_dup() will allocate a new struct mempolicy and maintain existing
    reference counts whose rules are documented in
    Documentation/vm/numa_memory_policy.txt .
    
    The problem occurs with shared memory policies.  The vm_op->set_policy
    increments the reference count if necessary and split_vma() and
    vma_merge() have already handled the existing reference counts.
    However, policy_vma() screws it up by replacing an existing
    vma->vm_policy with one that potentially has the wrong reference count
    leading to a premature free.  This patch removes the damage caused by
    policy_vma().
    
    With this patch applied Dave's trinity tool runs an mbind test for 5
    minutes without error.  /proc/slabinfo reported that there are no
    numa_policy or shared_policy_node objects allocated after the test
    completed and the shared memory region was deleted.
    
    Signed-off-by: Mel Gorman <mgorman@suse.de>
    Cc: Dave Jones <davej@redhat.com>
    Cc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Cc: Stephen Wilson <wilsons@start.ca>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

commit 05f144a0d5c2207a0349348127f996e104ad7404
Author: Mel Gorman <mgorman@suse.de>
Date:   Wed May 23 12:48:13 2012 +0100

    mm: mempolicy: Let vma_merge and vma_split handle vma->vm_policy linkages
    
    Dave Jones' system call fuzz testing tool "trinity" triggered the
    following bug error with slab debugging enabled
    
        =============================================================================
        BUG numa_policy (Not tainted): Poison overwritten
        -----------------------------------------------------------------------------
    
        INFO: 0xffff880146498250-0xffff880146498250. First byte 0x6a instead of 0x6b
        INFO: Allocated in mpol_new+0xa3/0x140 age=46310 cpu=6 pid=32154
         __slab_alloc+0x3d3/0x445
         kmem_cache_alloc+0x29d/0x2b0
         mpol_new+0xa3/0x140
         sys_mbind+0x142/0x620
         system_call_fastpath+0x16/0x1b
        INFO: Freed in __mpol_put+0x27/0x30 age=46268 cpu=6 pid=32154
         __slab_free+0x2e/0x1de
         kmem_cache_free+0x25a/0x260
         __mpol_put+0x27/0x30
         remove_vma+0x68/0x90
         exit_mmap+0x118/0x140
         mmput+0x73/0x110
         exit_mm+0x108/0x130
         do_exit+0x162/0xb90
         do_group_exit+0x4f/0xc0
         sys_exit_group+0x17/0x20
         system_call_fastpath+0x16/0x1b
        INFO: Slab 0xffffea0005192600 objects=27 used=27 fp=0x          (null) flags=0x20000000004080
        INFO: Object 0xffff880146498250 @offset=592 fp=0xffff88014649b9d0
    
    This implied a reference counting bug and the problem happened during
    mbind().
    
    mbind() applies a new memory policy to a range and uses mbind_range() to
    merge existing VMAs or split them as necessary.  In the event of splits,
    mpol_dup() will allocate a new struct mempolicy and maintain existing
    reference counts whose rules are documented in
    Documentation/vm/numa_memory_policy.txt .
    
    The problem occurs with shared memory policies.  The vm_op->set_policy
    increments the reference count if necessary and split_vma() and
    vma_merge() have already handled the existing reference counts.
    However, policy_vma() screws it up by replacing an existing
    vma->vm_policy with one that potentially has the wrong reference count
    leading to a premature free.  This patch removes the damage caused by
    policy_vma().
    
    With this patch applied Dave's trinity tool runs an mbind test for 5
    minutes without error.  /proc/slabinfo reported that there are no
    numa_policy or shared_policy_node objects allocated after the test
    completed and the shared memory region was deleted.
    
    Signed-off-by: Mel Gorman <mgorman@suse.de>
    Cc: Dave Jones <davej@redhat.com>
    Cc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Cc: Stephen Wilson <wilsons@start.ca>
    Cc: Christoph Lameter <cl@linux.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 42be35d0390b966253136a285f507f5ad00fd9e8
Author: Gilad Ben-Yossef <gilad@benyossef.com>
Date:   Wed Mar 28 14:42:45 2012 -0700

    fs: only send IPI to invalidate LRU BH when needed
    
    In several code paths, such as when unmounting a file system (but not
    only) we send an IPI to ask each cpu to invalidate its local LRU BHs.
    
    For multi-cores systems that have many cpus that may not have any LRU BH
    because they are idle or because they have not performed any file system
    accesses since last invalidation (e.g.  CPU crunching on high perfomance
    computing nodes that write results to shared memory or only using
    filesystems that do not use the bh layer.) This can lead to loss of
    performance each time someone switches the KVM (the virtual keyboard and
    screen type, not the hypervisor) if it has a USB storage stuck in.
    
    This patch attempts to only send an IPI to cpus that have LRU BH.
    
    Signed-off-by: Gilad Ben-Yossef <gilad@benyossef.com>
    Acked-by: Peter Zijlstra <a.p.zijlstra@chello.nl>
    Cc: Alexander Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 9ce392d4fa43c3abb9ab02a29e225084ed84451e
Author: Yuval Mintz <yuvalmin@broadcom.com>
Date:   Mon Mar 12 08:53:11 2012 +0000

    bnx2x: mark functions as loaded on shared memory
    
    This change enables the FW to make more accurate decisions regarding the
    active functions.
    
    Signed-off-by: Yuval Mintz <yuvalmin@broadcom.com>
    Signed-off-by: Eilon Greenstein <eilong@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit bcabbccabffe7326f046f25737ba1084f463c65c
Author: Ohad Ben-Cohen <ohad@wizery.com>
Date:   Thu Oct 20 21:10:55 2011 +0200

    rpmsg: add virtio-based remote processor messaging bus
    
    Add a virtio-based inter-processor communication bus, which enables
    kernel drivers to communicate with entities, running on remote
    processors, over shared memory using a simple messaging protocol.
    
    Every pair of AMP processors share two vrings, which are used to send
    and receive the messages over shared memory.
    
    The header of every message sent on the rpmsg bus contains src and dst
    addresses, which make it possible to multiplex several rpmsg channels on
    the same vring.
    
    Every rpmsg channel is a device on this bus. When a channel is added,
    and an appropriate rpmsg driver is found and probed, it is also assigned
    a local rpmsg address, which is then bound to the driver's callback.
    
    When inbound messages carry the local address of a bound driver,
    its callback is invoked by the bus.
    
    This patch provides a kernel interface only; user space interfaces
    will be later exposed by kernel users of this rpmsg bus.
    
    Designed with Brian Swetland <swetland@google.com>.
    
    Signed-off-by: Ohad Ben-Cohen <ohad@wizery.com>
    Acked-by: Rusty Russell <rusty@rustcorp.com.au> (virtio_ids.h)
    Cc: Brian Swetland <swetland@google.com>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Grant Likely <grant.likely@secretlab.ca>
    Cc: Tony Lindgren <tony@atomide.com>
    Cc: Russell King <linux@arm.linux.org.uk>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Cc: Greg KH <greg@kroah.com>
    Cc: Stephen Boyd <sboyd@codeaurora.org>

commit 3372f5a7d005dd42e754490fed6a0171c4a018c6
Author: Alexander Stein <alexander.stein@systec-electronic.com>
Date:   Mon Jan 23 15:45:56 2012 +0100

    m68k: Do not set global share for non-kernel shared pages
    
    If the SG bit is set in MMUTR the page is accessible for all
    userspace processes (ignoring the ASID). So a process might randomly
    access a page from a different process which had a shared page
    (from shared memory) in its context.
    
    Signed-off-by: Alexander Stein <alexander.stein@systec-electronic.com>
    Signed-off-by: Greg Ungerer <gerg@uclinux.org>

commit 788ec41cc843f12e8d0eba5f2b37af18b76654a5
Author: Ben Hutchings <bhutchings@solarflare.com>
Date:   Tue Dec 20 23:52:02 2011 +0000

    sfc: Use new names for MC shared memory layout constants
    
    These are defined alongside the firmware protocol in mcdi_pcol.h.
    
    Signed-off-by: Ben Hutchings <bhutchings@solarflare.com>

commit 3f713bf4dd9f7ef2a2c5e9ec124b3d992a2669db
Author: Ben Hutchings <bhutchings@solarflare.com>
Date:   Tue Dec 20 23:39:31 2011 +0000

    sfc: Make handling of MC reboot more reliable
    
    When the MC reboots, either as part of a firmware upgrade or due to a
    bug, it attempts to complete (with an error) any requests that were
    outstanding before the reboot.  Since there is an inherent race
    condition in checking this, it will also write to a status word in
    shared memory.
    
    If we look at each of these separately, we may detect each reboot
    twice, resulting in a spurious command failure after a firmware
    upgrade or frustrating recovery from a firmware bug.  Instead, if a
    request completion indicates a reboot, we must poll and clear the
    status word.
    
    This bug was previously masked by use of an incorrect address for the
    status word.  Fix that, using the definition now included in
    mcdi_pcol.h.
    
    Signed-off-by: Ben Hutchings <bhutchings@solarflare.com>

commit 2a4073c2bb288193f5e7a0d57e9cf2f9786dddc3
Author: Hugh Dickins <hughd@google.com>
Date:   Fri Jan 20 14:34:19 2012 -0800

    SHM_UNLOCK: fix long unpreemptible section
    
    commit 85046579bde15e532983438f86b36856e358f417 upstream.
    
    scan_mapping_unevictable_pages() is used to make SysV SHM_LOCKed pages
    evictable again once the shared memory is unlocked.  It does this with
    pagevec_lookup()s across the whole object (which might occupy most of
    memory), and takes 300ms to unlock 7GB here.  A cond_resched() every
    PAGEVEC_SIZE pages would be good.
    
    However, KOSAKI-san points out that this is called under shmem.c's
    info->lock, and it's also under shm.c's shm_lock(), both spinlocks.
    There is no strong reason for that: we need to take these pages off the
    unevictable list soonish, but those locks are not required for it.
    
    So move the call to scan_mapping_unevictable_pages() from shmem.c's
    unlock handling up to shm.c's unlock handling.  Remove the recently
    added barrier, not needed now we have spin_unlock() before the scan.
    
    Use get_file(), with subsequent fput(), to make sure we have a reference
    to mapping throughout scan_mapping_unevictable_pages(): that's something
    that was previously guaranteed by the shm_lock().
    
    Remove shmctl's lru_add_drain_all(): we don't fault in pages at SHM_LOCK
    time, and we lazily discover them to be Unevictable later, so it serves
    no purpose for SHM_LOCK; and serves no purpose for SHM_UNLOCK, since
    pages still on pagevec are not marked Unevictable.
    
    The original code avoided redundant rescans by checking VM_LOCKED flag
    at its level: now avoid them by checking shp's SHM_LOCKED.
    
    The original code called scan_mapping_unevictable_pages() on a locked
    area at shm_destroy() time: perhaps we once had accounting cross-checks
    which required that, but not now, so skip the overhead and just let
    inode eviction deal with them.
    
    Put check_move_unevictable_page() and scan_mapping_unevictable_pages()
    under CONFIG_SHMEM (with stub for the TINY case when ramfs is used),
    more as comment than to save space; comment them used for SHM_UNLOCK.
    
    Signed-off-by: Hugh Dickins <hughd@google.com>
    Reviewed-by: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Cc: Minchan Kim <minchan.kim@gmail.com>
    Cc: Rik van Riel <riel@redhat.com>
    Cc: Shaohua Li <shaohua.li@intel.com>
    Cc: Eric Dumazet <eric.dumazet@gmail.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Michel Lespinasse <walken@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 85046579bde15e532983438f86b36856e358f417
Author: Hugh Dickins <hughd@google.com>
Date:   Fri Jan 20 14:34:19 2012 -0800

    SHM_UNLOCK: fix long unpreemptible section
    
    scan_mapping_unevictable_pages() is used to make SysV SHM_LOCKed pages
    evictable again once the shared memory is unlocked.  It does this with
    pagevec_lookup()s across the whole object (which might occupy most of
    memory), and takes 300ms to unlock 7GB here.  A cond_resched() every
    PAGEVEC_SIZE pages would be good.
    
    However, KOSAKI-san points out that this is called under shmem.c's
    info->lock, and it's also under shm.c's shm_lock(), both spinlocks.
    There is no strong reason for that: we need to take these pages off the
    unevictable list soonish, but those locks are not required for it.
    
    So move the call to scan_mapping_unevictable_pages() from shmem.c's
    unlock handling up to shm.c's unlock handling.  Remove the recently
    added barrier, not needed now we have spin_unlock() before the scan.
    
    Use get_file(), with subsequent fput(), to make sure we have a reference
    to mapping throughout scan_mapping_unevictable_pages(): that's something
    that was previously guaranteed by the shm_lock().
    
    Remove shmctl's lru_add_drain_all(): we don't fault in pages at SHM_LOCK
    time, and we lazily discover them to be Unevictable later, so it serves
    no purpose for SHM_LOCK; and serves no purpose for SHM_UNLOCK, since
    pages still on pagevec are not marked Unevictable.
    
    The original code avoided redundant rescans by checking VM_LOCKED flag
    at its level: now avoid them by checking shp's SHM_LOCKED.
    
    The original code called scan_mapping_unevictable_pages() on a locked
    area at shm_destroy() time: perhaps we once had accounting cross-checks
    which required that, but not now, so skip the overhead and just let
    inode eviction deal with them.
    
    Put check_move_unevictable_page() and scan_mapping_unevictable_pages()
    under CONFIG_SHMEM (with stub for the TINY case when ramfs is used),
    more as comment than to save space; comment them used for SHM_UNLOCK.
    
    Signed-off-by: Hugh Dickins <hughd@google.com>
    Reviewed-by: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Cc: Minchan Kim <minchan.kim@gmail.com>
    Cc: Rik van Riel <riel@redhat.com>
    Cc: Shaohua Li <shaohua.li@intel.com>
    Cc: Eric Dumazet <eric.dumazet@gmail.com>
    Cc: Johannes Weiner <hannes@cmpxchg.org>
    Cc: Michel Lespinasse <walken@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 11980c2ac4ccfad21a5f8ee9e12059f1e687bb40
Author: Robert Love <rlove@google.com>
Date:   Tue Dec 20 16:49:48 2011 -0800

    ashmem: Anonymous shared memory subsystem
    
    The anonymous shared memory (ashmem) subsystem provides a
    Unix-y,file-based shared memory interface to user-space. It
    works like anonymous memory (e.g. mmapping fd=0) except if
    you share the file descriptor via the usual means, you will
    share the mapping. The shared memory can be accessed via both
    mmap or file I/O. The backing store is a simple shmem file.
    
    Additionally, ashmem introduces the concept of page pinning.
    Pinned pages (the default) behave like any anonymous memory.
    Unpinned pages are available to the kernel for eviction during
    VM pressure. When repinning the pages, the return value
    instructs user-space as to any eviction. In this manner,
    user-space processes may implement caching and similar
    resource management that efficiently integrates with kernel
    memory management.
    
    Signed-off-by: Robert Love <rlove@google.com>
    
    ashmem: Don't install fault handler for private mmaps.
    
    Ashmem is used to create named private heaps. If this heap is backed
    by a tmpfs file it will allocate two pages for every page touched.
    In 2.6.27, the extra page would later be freed, but 2.6.29 does not
    scan anonymous pages when running without swap so the memory is not
    freed while the file is referenced. This change changes the behavior
    of private ashmem mmaps to match /dev/zero instead tmpfs.
    
    Signed-off-by: Arve Hjønnevåg <arve@android.com>
    
    ashmem: Add common prefix to name reported in /proc/pid/maps
    
    Signed-off-by: Arve Hjønnevåg <arve@android.com>
    
    ashmem: don't require a page aligned size
    
    This makes ashmem more similar to shmem and mmap, by
    not requiring the specified size to be page aligned,
    instead rounding it internally as needed.
    
    Signed-off-by: Marco Nelissen <marcone@android.com>
    [jstultz: Improved commit subject and included patch description
    from rlove. Also moved ashmem files to staging dir, and reworked
    code to avoid touching mm/shmem.c while we're in staging.]
    CC: Brian Swetland <swetland@google.com>
    CC: Colin Cross <ccross@android.com>
    CC: Arve Hjønnevåg <arve@android.com>
    CC: Dima Zavin <dima@android.com>
    CC: Robert Love <rlove@google.com>
    Signed-off-by: John Stultz <john.stultz@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit fcf634098c00dd9cd247447368495f0b79be12d1
Author: Christopher Yeoh <cyeoh@au1.ibm.com>
Date:   Mon Oct 31 17:06:39 2011 -0700

    Cross Memory Attach
    
    The basic idea behind cross memory attach is to allow MPI programs doing
    intra-node communication to do a single copy of the message rather than a
    double copy of the message via shared memory.
    
    The following patch attempts to achieve this by allowing a destination
    process, given an address and size from a source process, to copy memory
    directly from the source process into its own address space via a system
    call.  There is also a symmetrical ability to copy from the current
    process's address space into a destination process's address space.
    
    - Use of /proc/pid/mem has been considered, but there are issues with
      using it:
      - Does not allow for specifying iovecs for both src and dest, assuming
        preadv or pwritev was implemented either the area read from or
      written to would need to be contiguous.
      - Currently mem_read allows only processes who are currently
      ptrace'ing the target and are still able to ptrace the target to read
      from the target. This check could possibly be moved to the open call,
      but its not clear exactly what race this restriction is stopping
      (reason  appears to have been lost)
      - Having to send the fd of /proc/self/mem via SCM_RIGHTS on unix
      domain socket is a bit ugly from a userspace point of view,
      especially when you may have hundreds if not (eventually) thousands
      of processes  that all need to do this with each other
      - Doesn't allow for some future use of the interface we would like to
      consider adding in the future (see below)
      - Interestingly reading from /proc/pid/mem currently actually
      involves two copies! (But this could be fixed pretty easily)
    
    As mentioned previously use of vmsplice instead was considered, but has
    problems.  Since you need the reader and writer working co-operatively if
    the pipe is not drained then you block.  Which requires some wrapping to
    do non blocking on the send side or polling on the receive.  In all to all
    communication it requires ordering otherwise you can deadlock.  And in the
    example of many MPI tasks writing to one MPI task vmsplice serialises the
    copying.
    
    There are some cases of MPI collectives where even a single copy interface
    does not get us the performance gain we could.  For example in an
    MPI_Reduce rather than copy the data from the source we would like to
    instead use it directly in a mathops (say the reduce is doing a sum) as
    this would save us doing a copy.  We don't need to keep a copy of the data
    from the source.  I haven't implemented this, but I think this interface
    could in the future do all this through the use of the flags - eg could
    specify the math operation and type and the kernel rather than just
    copying the data would apply the specified operation between the source
    and destination and store it in the destination.
    
    Although we don't have a "second user" of the interface (though I've had
    some nibbles from people who may be interested in using it for intra
    process messaging which is not MPI).  This interface is something which
    hardware vendors are already doing for their custom drivers to implement
    fast local communication.  And so in addition to this being useful for
    OpenMPI it would mean the driver maintainers don't have to fix things up
    when the mm changes.
    
    There was some discussion about how much faster a true zero copy would
    go. Here's a link back to the email with some testing I did on that:
    
    http://marc.info/?l=linux-mm&m=130105930902915&w=2
    
    There is a basic man page for the proposed interface here:
    
    http://ozlabs.org/~cyeoh/cma/process_vm_readv.txt
    
    This has been implemented for x86 and powerpc, other architecture should
    mainly (I think) just need to add syscall numbers for the process_vm_readv
    and process_vm_writev. There are 32 bit compatibility versions for
    64-bit kernels.
    
    For arch maintainers there are some simple tests to be able to quickly
    verify that the syscalls are working correctly here:
    
    http://ozlabs.org/~cyeoh/cma/cma-test-20110718.tgz
    
    Signed-off-by: Chris Yeoh <yeohc@au1.ibm.com>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: "H. Peter Anvin" <hpa@zytor.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Arnd Bergmann <arnd@arndb.de>
    Cc: Paul Mackerras <paulus@samba.org>
    Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Cc: David Howells <dhowells@redhat.com>
    Cc: James Morris <jmorris@namei.org>
    Cc: <linux-man@vger.kernel.org>
    Cc: <linux-arch@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 702e1430bdab6a184d9f34881ab6da832c7fbae5
Author: Alwin Beukers <alwin@broadcom.com>
Date:   Tue Oct 4 23:19:03 2011 +0200

    staging: brcm80211: cleanup of shared memory related wrapper functions
    
    - removed brcms_c_read_shm and brcms_c_write_shm functions.
    - removed redundant argument check from brcms_c_copyto_shm function.
    
    Reported-by: Johannes Berg <johannes@sipsolutions.net>
    Reviewed-by: Arend van Spriel <arend@broadcom.com>
    Reviewed-by: Pieter-Paul Giesberts <pieterpg@broadcom.com>
    Reviewed-by: Roland Vossen <rvossen@broadcom.com>
    Signed-off-by: Arend van Spriel <arend@broadcom.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 5243960777a8d5f0dfabd0e67035d13ac6eaf304
Author: Bhanu Prakash Gollapudi <bprakash@broadcom.com>
Date:   Thu Aug 4 17:38:50 2011 -0700

    [SCSI] bnx2fc: Obtain WWNN/WWPN from the shared memory
    
    bnx2x driver would obtain the WWNN/WWPN from the shared memory and can be
    obtained by the bnx2fc driver via ndo_fcoe_get_wwn.
    
    Signed-off-by: Bhanu Prakash Gollapudi <bprakash@broadcom.com>
    Signed-off-by: James Bottomley <JBottomley@Parallels.com>

commit 9e775ad19f52d70a53797b4d0eb740c52b0a9567
Author: Stephen Boyd <sboyd@codeaurora.org>
Date:   Fri Aug 12 00:14:28 2011 +0100

    ARM: 7012/1: Set proper TEXT_OFFSET for newer MSMs
    
    MSMs post 8x50 have 2Mb at the beginning of RAM reserved for
    shared memory. Since the kernel hasn't typically been told this
    RAM exists, PHYS_OFFSET has been set to 0xN0200000 and the memory
    atags passed to the kernel have matched. This doesn't play nicely
    with things such as AUTO_ZRELADDR, which doesn't work at all, and
    dynamic phys to virt, which requires an MSM specific workaround.
    
    Work around these issues by telling the kernel RAM starts at
    0xN0000000 (it actually does) and fixup the atags from the
    bootloader (if necessary) to say the same. In addition, make sure
    to set TEXT_OFFSET at least 2Mb beyond the start of RAM so that
    the kernel doesn't end up being decompressed into shared memory.
    
    After doing this, AUTO_ZRELADDR should work on MSM with no
    problems and ARM_PATCH_PHYS_VIRT_16BIT should no longer be
    necessary.
    
    Signed-off-by: Stephen Boyd <sboyd@codeaurora.org>
    Acked-by: Nicolas Pitre <nicolas.pitre@linaro.org>
    Acked-by: David Brown <davidb@codeaurora.org>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit b34a6b1da371ed8af1221459a18c67970f7e3d53
Author: Vasiliy Kulikov <segoon@openwall.com>
Date:   Tue Jul 26 16:08:48 2011 -0700

    ipc: introduce shm_rmid_forced sysctl
    
    Add support for the shm_rmid_forced sysctl.  If set to 1, all shared
    memory objects in current ipc namespace will be automatically forced to
    use IPC_RMID.
    
    The POSIX way of handling shmem allows one to create shm objects and
    call shmdt(), leaving shm object associated with no process, thus
    consuming memory not counted via rlimits.
    
    With shm_rmid_forced=1 the shared memory object is counted at least for
    one process, so OOM killer may effectively kill the fat process holding
    the shared memory.
    
    It obviously breaks POSIX - some programs relying on the feature would
    stop working.  So set shm_rmid_forced=1 only if you're sure nobody uses
    "orphaned" memory.  Use shm_rmid_forced=0 by default for compatability
    reasons.
    
    The feature was previously impemented in -ow as a configure option.
    
    [akpm@linux-foundation.org: fix documentation, per Randy]
    [akpm@linux-foundation.org: fix warning]
    [akpm@linux-foundation.org: readability/conventionality tweaks]
    [akpm@linux-foundation.org: fix shm_rmid_forced/shm_forced_rmid confusion, use standard comment layout]
    Signed-off-by: Vasiliy Kulikov <segoon@openwall.com>
    Cc: Randy Dunlap <rdunlap@xenotime.net>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Cc: "Serge E. Hallyn" <serge.hallyn@canonical.com>
    Cc: Daniel Lezcano <daniel.lezcano@free.fr>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Tejun Heo <tj@kernel.org>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: Alan Cox <alan@lxorguk.ukuu.org.uk>
    Cc: Solar Designer <solar@openwall.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 41c2178adce37b249147063624f8a27b064b471e
Author: Michael Chan <mchan@broadcom.com>
Date:   Wed Jul 13 17:24:22 2011 +0000

    bnx2: Read iSCSI config from shared memory during ->probe()
    
    The scratchpad location that we were reading from has not been
    initialized yet during ->probe(), so we were getting inaccurate
    information.
    
    Update version to 2.1.10.
    
    Signed-off-by: Michael Chan <mchan@broadcom.com>
    Reviewed-by: Matt Carlson <mcarlson@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 867955f5682f7157fdafe8670804b9f8ea077bc7
Author: Ben Hutchings <bhutchings@solarflare.com>
Date:   Mon May 16 06:13:49 2011 +0000

    sfc: Fix oops in register dump after mapping change
    
    Commit 747df2258b1b9a2e25929ef496262c339c380009 ('sfc: Always map MCDI
    shared memory as uncacheable') introduced a separate mapping for the
    MCDI shared memory (MC_TREG_SMEM).  This means we can no longer easily
    include it in the register dump.  Since it is not particularly useful
    in debugging, substitute a recognisable dummy value.
    
    Signed-off-by: Ben Hutchings <bhutchings@solarflare.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 298eaaad0edc004912513d7b9e18163bc053539b
Merge: cf70cc5b9d6a cb68552858c6
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri May 13 15:20:51 2011 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net-2.6
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net-2.6:
      bridge: fix forwarding of IPv6
      bonding,llc: Fix structure sizeof incompatibility for some PDUs
      ipv6: restore correct ECN handling on TCP xmit
      ne-h8300: Fix regression caused during net_device_ops conversion
      hydra: Fix regression caused during net_device_ops conversion
      zorro8390: Fix regression caused during net_device_ops conversion
      sfc: Always map MCDI shared memory as uncacheable
      ehea: Fix memory hotplug oops
      libertas: fix cmdpendingq locking
      iwlegacy: fix IBSS mode crashes
      ath9k: Fix a warning due to a queued work during S3 state
      mac80211: don't start the dynamic ps timer if not associated

commit 747df2258b1b9a2e25929ef496262c339c380009
Author: Ben Hutchings <bhutchings@solarflare.com>
Date:   Wed May 11 17:41:18 2011 +0100

    sfc: Always map MCDI shared memory as uncacheable
    
    We enabled write-combining for memory-mapped registers in commit
    65f0b417dee94f779ce9b77102b7d73c93723b39, but inhibited it for the
    MCDI shared memory where this is not supported.  However,
    write-combining mappings also allow read-reordering, which may also
    be a problem.
    
    I found that when an SFC9000-family controller is connected to an
    Intel 3000 chipset, and write-combining is enabled, the controller
    stops responding to PCIe read requests during driver initialisation
    while the driver is polling for completion of an MCDI command.  This
    results in an NMI and system hang.  Adding read memory barriers
    between all reads to the shared memory area appears to reduce but not
    eliminate the probability of this.
    
    We have not yet established whether this is a bug in our BIU or in the
    PCIe bridge.  For now, work around by mapping the shared memory area
    separately.
    
    Signed-off-by: Ben Hutchings <bhutchings@solarflare.com>

commit f1a304e7941cc76353363a139cbb6a4b1ca7c737
Author: Pratheesh Gangadhar <pratheesh@ti.com>
Date:   Sat Mar 5 04:30:17 2011 +0530

    UIO: add PRUSS UIO driver support
    
    This patch implements PRUSS (Programmable Real-time Unit Sub System)
    UIO driver which exports SOC resources associated with PRUSS like
    I/O, memories and IRQs to user space. PRUSS is dual 32-bit RISC
    processors which is efficient in performing embedded tasks that
    require manipulation of packed memory mapped data structures and
    handling system events that have tight real time constraints. This
    driver is currently supported on Texas Instruments DA850, AM18xx and
    OMAP-L138 devices.
    For example, PRUSS runs firmware for real-time critical industrial
    communication data link layer and communicates with application stack
    running in user space via shared memory and IRQs.
    
    Signed-off-by: Pratheesh Gangadhar <pratheesh@ti.com>
    Reviewed-by: Thomas Gleixner <tglx@linutronix.de>
    Reviewed-by: Arnd Bergmann <arnd@arndb.de>
    Signed-off-by: Hans J. Koch <hjk@hansjkoch.de>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 74c2d1f63f6fff26503f538ddacf0e45feb15f0d
Author: Ionut Nicu <ionut.nicu@gmail.com>
Date:   Fri Nov 5 17:01:50 2010 +0000

    staging: tidspbridge: fix kernel oops in bridge_io_get_proc_load
    
    The DSP shared memory area gets initialized only when
    a COFF file is loaded.
    
    If bridge_io_get_proc_load is called before loading a base
    image into the DSP, the shared_mem member of the io manager
    will be NULL, resulting in a kernel oops when it's dereferenced.
    
    Also made some coding style changes to bridge_io_create.
    
    Signed-off-by: Ionut Nicu <ionut.nicu@mindbit.ro>
    Signed-off-by: Omar Ramirez Luna <omar.ramirez@ti.com>

commit b705120e4198315f4ae043de06c62f65e0851fd3
Author: Michael Karcher <kernel@mkarcher.dialup.fu-berlin.de>
Date:   Sun Jan 23 18:17:17 2011 +0000

    drm/i915: Use consistent mappings for OpRegion between ACPI and i915
    
    The opregion is a shared memory region between ACPI and the graphics
    driver. As the ACPI mapping has been changed to cachable in commit
    6d5bbf00d251cc73223a71422d69e069dc2e0b8d, mapping the intel opregion
    non-cachable now fails. As no bus-master hardware is involved in the
    opregion, cachable map should do no harm.
    
    Tested on a Fujitsu Lifebook P8010.
    
    Signed-off-by: Michael Karcher <kernel@mkarcher.dialup.fu-berlin.de>
    [ickle: convert to acpi_os_ioremap for consistency]
    Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>

commit 4aacb7afb6afd78efe26427e74fa56a5fc72fad3
Author: Michael Chan <mchan@broadcom.com>
Date:   Thu Dec 23 07:43:01 2010 +0000

    cnic: Support NIC Partition mode
    
    Add a common function cnic_read_bnx2x_iscsi_mac() to read the iSCSI
    MAC address at any specified shared memory location.  In NIC Partition
    mode, we need to get the MAC address from the MF_CFG area of shared
    memory.
    
    Signed-off-by: Michael Chan <mchan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e83293233faf6e49870e7bfdcddf5374cb463d54
Author: Kim Lilliestierna XX <kim.xx.lilliestierna@stericsson.com>
Date:   Tue Nov 30 09:11:22 2010 +0000

    CAIF: Fix U5500 compile error for shared memory driver
    
    Rearrange pr_fmt so it compiles.
    
    Signed-off-by: Sjur Braendeland <sjur.brandeland@stericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1c32ca9f63d2a103dd33eae72e5aff53a23fe650
Merge: 00dad7fa9970 94fb7c9c5d40
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Fri Nov 12 17:14:20 2010 -0800

    Merge branch 'staging-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/staging-2.6
    
    * 'staging-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/staging-2.6: (38 commits)
      Revert "staging: tidspbridge: replace iommu custom for opensource implementation"
      Revert "staging: tidspbridge - move shared memory iommu maps to tiomap3430.c"
      Revert "staging: tidspbridge - rename bridge_brd_mem_map/unmap to a proper name"
      Revert "staging: tidspbridge - remove custom mmu code from tiomap3430.c"
      Revert "staging: tidspbridge - fix mmufault support"
      Revert "staging: tidspbridge - remove hw directory"
      Revert "staging: tidspbridge - move all iommu related code to a new file"
      Revert "staging: tidspbridge: remove dw_dmmu_base from cfg_hostres struct"
      Revert "staging: tidspbridge - remove reserved memory clean up"
      Revert "staging: tidspbridge - deprecate reserve/unreserve_memory funtions"
      Revert "staging: tidspbridge - remove dmm custom module"
      Revert "staging: tidspbridge - update Kconfig to select IOMMU module"
      staging: tidspbridge: hardcode SCM macros while fix is upstreamed
      Staging: keucr driver: fix uninitialized variable & proper memset length
      omap: dsp: remove shm from normal memory
      Staging: wlan-ng: Fix wrong #ifdef #endif sequence
      Staging: Update parameters for cfg80211 key management operation
      Staging: ath6kl: Fix pointer casts on 64-bit architectures
      Staging: batman-adv: suppress false warning when changing the mac address
      Staging: batman-adv: fix interface alternating and bonding reggression
      ...

commit 1cf3fb2d359a87880a6a6e0cb25b2ec2d493b119
Author: Felipe Contreras <felipe.contreras@gmail.com>
Date:   Wed Nov 10 12:12:19 2010 -0600

    Revert "staging: tidspbridge - move shared memory iommu maps to tiomap3430.c"
    
    This reverts commit 0c10e91b6cc9d1c6a23e9eed3e0653f30b6eb3d3.
    
    Signed-off-by: Felipe Contreras <felipe.contreras@gmail.com>
    Signed-off-by: Omar Ramirez Luna <omar.ramirez@ti.com>

commit 22cdbd1d5789cc16c37102eb6f62c3ae377b849e
Merge: 55f335a8857d ce45b873028f
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Oct 27 18:28:00 2010 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/davem/net-2.6
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/davem/net-2.6: (108 commits)
      ehea: Fixing statistics
      bonding: Fix lockdep warning after bond_vlan_rx_register()
      tunnels: Fix tunnels change rcu protection
      caif-u5500: Build config for CAIF shared mem driver
      caif-u5500: CAIF shared memory mailbox interface
      caif-u5500: CAIF shared memory transport protocol
      caif-u5500: Adding shared memory include
      drivers/isdn: delete double assignment
      drivers/net/typhoon.c: delete double assignment
      drivers/net/sb1000.c: delete double assignment
      qlcnic: define valid vlan id range
      qlcnic: reduce rx ring size
      qlcnic: fix mac learning
      ehea: fix use after free
      inetpeer: __rcu annotations
      fib_rules: __rcu annotates ctarget
      tunnels: add __rcu annotations
      net: add __rcu annotations to protocol
      ipv4: add __rcu annotations to routes.c
      qlge: bugfix: Restoring the vlan setting.
      ...

commit b795218075a1e1183169abb66a90dcdcf30367f9
Author: Helge Deller <deller@gmx.de>
Date:   Wed Oct 27 15:34:16 2010 -0700

    ipc/shm.c: add RSS and swap size information to /proc/sysvipc/shm
    
    The kernel currently provides no functionality to analyze the RSS and swap
    space usage of each individual sysvipc shared memory segment.
    
    This patch adds this info for each existing shm segment by extending the
    output of /proc/sysvipc/shm by two columns for RSS and swap.
    
    Since shmctl(SHM_INFO) already provides a similiar calculation (it
    currently sums up all RSS/swap info for all segments), I did split out a
    static function which is now used by the /proc/sysvipc/shm output and
    shmctl(SHM_INFO).
    
    SAP products (esp.  the SAP Netweaver ABAP Kernel) uses lots of big shared
    memory segments (we often have Linux systems with >= 16GB shm usage).
    Sometimes we get customer reports about "slow" system responses and while
    looking into their configurations we often find massive swapping activity
    on the system.  With this patch it's now easy to see from the command line
    if and which shm segments gets swapped out (and how much) and can more
    easily give recommendations for system tuning.  Without the patch it's
    currently not possible to do such shm analysis at all.
    
    Also...
    
    Add some spaces in front of the "size" field for 64bit kernels to get the
    columns correct if you cat the contents of the file.  In
    sysvipc_shm_proc_show() the kernel prints the size value in "SPEC_SIZE"
    format, which is defined like this:
    
    #if BITS_PER_LONG <= 32
    #define SIZE_SPEC "%10lu"
    #else
    #define SIZE_SPEC "%21lu"
    #endif
    
    So, if the header is not adjusted, the columns are not correctly aligned.
    I actually tested this on 32- and 64-bit and it seems correct now.
    
    Signed-off-by: Helge Deller <deller@gmx.de>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Acked-by: Hugh Dickins <hughd@google.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit e57731f4dda7a5d0c82ec3cc9ba91691b826b76e
Author: Amarnath Revanna <amarnath.bangalore.revanna@stericsson.com>
Date:   Wed Oct 27 08:34:41 2010 +0000

    caif-u5500: CAIF shared memory mailbox interface
    
    Signed-off-by: Sjur Braendeland <sjur.brandeland@stericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit dfae55d6a5873718fe0d996fc929519073a85ff7
Author: sjur.brandeland@stericsson.com <sjur.brandeland@stericsson.com>
Date:   Wed Oct 27 08:34:40 2010 +0000

    caif-u5500: CAIF shared memory transport protocol
    
    Signed-off-by: Sjur Braendeland <sjur.brandeland@stericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit a10c02036f82b1fa30d69a62f7c7d9a927e8adbc
Author: Amarnath Revanna <amarnath.bangalore.revanna@stericsson.com>
Date:   Wed Oct 27 08:34:39 2010 +0000

    caif-u5500: Adding shared memory include
    
    Signed-off-by: Sjur Braendeland <sjur.brandeland@stericsson.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 78159788e1d0909ffa6beb714dcca7f3aa4574a2
Author: Rafał Miłecki <zajec5@gmail.com>
Date:   Wed Oct 6 07:50:08 2010 +0200

    b43: N-PHY: don't duplicate setting channel in shared memory
    
    It's already set in PHY common code.
    
    Signed-off-by: Rafał Miłecki <zajec5@gmail.com>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit 0c10e91b6cc9d1c6a23e9eed3e0653f30b6eb3d3
Author: Fernando Guzman Lugo <x0095840@ti.com>
Date:   Tue Oct 5 15:35:35 2010 -0500

    staging: tidspbridge - move shared memory iommu maps to tiomap3430.c
    
    Now iommu maps of shared memory segments are done in
    bridge_brd_start and unmaped in bridge_brd_stop.
    
    Signed-off-by: Fernando Guzman Lugo <x0095840@ti.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 2a0cfeb826df6751933fd95a797ac18371992c3b
Author: Helmut Schaa <helmut.schaa@googlemail.com>
Date:   Sat Oct 2 11:26:17 2010 +0200

    rt2x00: Don't overwrite beacon buffers in pairwise key setup
    
    rt2800 devices use parts of the pariwise key table to store the beacon
    frames for beacon 6 and 7. To not overwrite the beacon frame buffers
    limit the number of entries we store in the pairwise key table to 222.
    
    Also add some descriptive comments about this shared memory usage.
    
    Signed-off-by: Helmut Schaa <helmut.schaa@googlemail.com>
    Signed-off-by: Ivo van Doorn <IvDoorn@gmail.com>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit dc6d074457f1551f9357f773a4eda09a3d5ef150
Author: Matt Carlson <mcarlson@broadcom.com>
Date:   Wed Sep 15 08:59:55 2010 +0000

    tg3: Don't send APE events for NCSI firmware
    
    NCSI firmware does not accept APE events.  It relies on a "driver state"
    location in shared memory to tell it what the driver's current state is.
    
    This patch pivots the code to use the new driver state scheme.
    
    Reviewed-by: Benjamin Li <benli@broadcom.com>
    Reviewed-by: Michael Chan <mchan@broadcom.com>
    Signed-off-by: Matt Carlson <mcarlson@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit e40f6f19040c83453a98da6ad5c87ccfac0d64e7
Author: Michal Hocko <mhocko@suse.cz>
Date:   Wed Jun 30 09:51:19 2010 +0200

    futex: futex_find_get_task remove credentails check
    
    commit 7a0ea09ad5352efce8fe79ed853150449903b9f5 upstream.
    
    futex_find_get_task is currently used (through lookup_pi_state) from two
    contexts, futex_requeue and futex_lock_pi_atomic.  None of the paths
    looks it needs the credentials check, though.  Different (e)uids
    shouldn't matter at all because the only thing that is important for
    shared futex is the accessibility of the shared memory.
    
    The credentail check results in glibc assert failure or process hang (if
    glibc is compiled without assert support) for shared robust pthread
    mutex with priority inheritance if a process tries to lock already held
    lock owned by a process with a different euid:
    
    pthread_mutex_lock.c:312: __pthread_mutex_lock_full: Assertion `(-(e)) != 3 || !robust' failed.
    
    The problem is that futex_lock_pi_atomic which is called when we try to
    lock already held lock checks the current holder (tid is stored in the
    futex value) to get the PI state.  It uses lookup_pi_state which in turn
    gets task struct from futex_find_get_task.  ESRCH is returned either
    when the task is not found or if credentials check fails.
    
    futex_lock_pi_atomic simply returns if it gets ESRCH.  glibc code,
    however, doesn't expect that robust lock returns with ESRCH because it
    should get either success or owner died.
    
    Signed-off-by: Michal Hocko <mhocko@suse.cz>
    Acked-by: Darren Hart <dvhltc@us.ibm.com>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Nick Piggin <npiggin@suse.de>
    Cc: Alexey Kuznetsov <kuznet@ms2.inr.ac.ru>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit e2d2ea45007eec639bf458357d0ee7545d14be52
Author: Michal Hocko <mhocko@suse.cz>
Date:   Wed Jun 30 09:51:19 2010 +0200

    futex: futex_find_get_task remove credentails check
    
    commit 7a0ea09ad5352efce8fe79ed853150449903b9f5 upstream.
    
    futex_find_get_task is currently used (through lookup_pi_state) from two
    contexts, futex_requeue and futex_lock_pi_atomic.  None of the paths
    looks it needs the credentials check, though.  Different (e)uids
    shouldn't matter at all because the only thing that is important for
    shared futex is the accessibility of the shared memory.
    
    The credentail check results in glibc assert failure or process hang (if
    glibc is compiled without assert support) for shared robust pthread
    mutex with priority inheritance if a process tries to lock already held
    lock owned by a process with a different euid:
    
    pthread_mutex_lock.c:312: __pthread_mutex_lock_full: Assertion `(-(e)) != 3 || !robust' failed.
    
    The problem is that futex_lock_pi_atomic which is called when we try to
    lock already held lock checks the current holder (tid is stored in the
    futex value) to get the PI state.  It uses lookup_pi_state which in turn
    gets task struct from futex_find_get_task.  ESRCH is returned either
    when the task is not found or if credentials check fails.
    
    futex_lock_pi_atomic simply returns if it gets ESRCH.  glibc code,
    however, doesn't expect that robust lock returns with ESRCH because it
    should get either success or owner died.
    
    Signed-off-by: Michal Hocko <mhocko@suse.cz>
    Acked-by: Darren Hart <dvhltc@us.ibm.com>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Nick Piggin <npiggin@suse.de>
    Cc: Alexey Kuznetsov <kuznet@ms2.inr.ac.ru>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 29540fc633e3f0ce474cf8d46806c0f92d1dd6f7
Author: Michal Hocko <mhocko@suse.cz>
Date:   Wed Jun 30 09:51:19 2010 +0200

    futex: futex_find_get_task remove credentails check
    
    commit 7a0ea09ad5352efce8fe79ed853150449903b9f5 upstream.
    
    futex_find_get_task is currently used (through lookup_pi_state) from two
    contexts, futex_requeue and futex_lock_pi_atomic.  None of the paths
    looks it needs the credentials check, though.  Different (e)uids
    shouldn't matter at all because the only thing that is important for
    shared futex is the accessibility of the shared memory.
    
    The credentail check results in glibc assert failure or process hang (if
    glibc is compiled without assert support) for shared robust pthread
    mutex with priority inheritance if a process tries to lock already held
    lock owned by a process with a different euid:
    
    pthread_mutex_lock.c:312: __pthread_mutex_lock_full: Assertion `(-(e)) != 3 || !robust' failed.
    
    The problem is that futex_lock_pi_atomic which is called when we try to
    lock already held lock checks the current holder (tid is stored in the
    futex value) to get the PI state.  It uses lookup_pi_state which in turn
    gets task struct from futex_find_get_task.  ESRCH is returned either
    when the task is not found or if credentials check fails.
    
    futex_lock_pi_atomic simply returns if it gets ESRCH.  glibc code,
    however, doesn't expect that robust lock returns with ESRCH because it
    should get either success or owner died.
    
    Signed-off-by: Michal Hocko <mhocko@suse.cz>
    Acked-by: Darren Hart <dvhltc@us.ibm.com>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Nick Piggin <npiggin@suse.de>
    Cc: Alexey Kuznetsov <kuznet@ms2.inr.ac.ru>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit c18c9c910dbcc4cc55a440c38fad300f1ecf8dbb
Author: Armando Uribe <x0095078@ti.com>
Date:   Thu Jul 22 20:25:28 2010 -0500

    staging: tidspbridge: Change macros to static inline functions in io_sm
    
    This patch change to macros to static inline functions, these
    macros are used to perform write/read operations in shared memory
    
    Signed-off-by: Armando Uribe <x0095078@ti.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 9e342489d7b8a8ac4ba4a728169564e4ab205bbd
Author: Armando Uribe <x0095078@ti.com>
Date:   Thu Jul 22 20:25:27 2010 -0500

    staging: tidspbridge: Remove redundant macros in io_sm.c
    
    This patch removes 4 redundant macros used to perform
    read/write operations in shared memory region from io_sm.c.
    
    Signed-off-by: Armando Uribe <x0095078@ti.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 7a0ea09ad5352efce8fe79ed853150449903b9f5
Author: Michal Hocko <mhocko@suse.cz>
Date:   Wed Jun 30 09:51:19 2010 +0200

    futex: futex_find_get_task remove credentails check
    
    futex_find_get_task is currently used (through lookup_pi_state) from two
    contexts, futex_requeue and futex_lock_pi_atomic.  None of the paths
    looks it needs the credentials check, though.  Different (e)uids
    shouldn't matter at all because the only thing that is important for
    shared futex is the accessibility of the shared memory.
    
    The credentail check results in glibc assert failure or process hang (if
    glibc is compiled without assert support) for shared robust pthread
    mutex with priority inheritance if a process tries to lock already held
    lock owned by a process with a different euid:
    
    pthread_mutex_lock.c:312: __pthread_mutex_lock_full: Assertion `(-(e)) != 3 || !robust' failed.
    
    The problem is that futex_lock_pi_atomic which is called when we try to
    lock already held lock checks the current holder (tid is stored in the
    futex value) to get the PI state.  It uses lookup_pi_state which in turn
    gets task struct from futex_find_get_task.  ESRCH is returned either
    when the task is not found or if credentials check fails.
    
    futex_lock_pi_atomic simply returns if it gets ESRCH.  glibc code,
    however, doesn't expect that robust lock returns with ESRCH because it
    should get either success or owner died.
    
    Signed-off-by: Michal Hocko <mhocko@suse.cz>
    Acked-by: Darren Hart <dvhltc@us.ibm.com>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: Nick Piggin <npiggin@suse.de>
    Cc: Alexey Kuznetsov <kuznet@ms2.inr.ac.ru>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit d42a8f464ba14467e5d45dc0eb8f789c82bd0679
Author: Ben Hutchings <bhutchings@solarflare.com>
Date:   Tue Jun 1 11:32:43 2010 +0000

    sfc: Get port number from CS_PORT_NUM, not PCI function number
    
    A single shared memory region used to communicate with firmware is
    mapped into both PCI PFs of the SFC9020 and SFL9021.  Drivers must be
    able to identify which port they are addressing in order to use the
    correct sub-region.  Currently we use the PCI function number, but the
    PCI address may be virtualised.  Use the CS_PORT_NUM register field
    defined for just this purpose.
    
    Signed-off-by: Ben Hutchings <bhutchings@solarflare.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit dd8f61d7ff92eb8a4626565ca37b209b3a8a9ce2
Author: Ben Hutchings <bhutchings@solarflare.com>
Date:   Tue Jun 1 11:32:43 2010 +0000

    sfc: Get port number from CS_PORT_NUM, not PCI function number
    
    A single shared memory region used to communicate with firmware is
    mapped into both PCI PFs of the SFC9020 and SFL9021.  Drivers must be
    able to identify which port they are addressing in order to use the
    correct sub-region.  Currently we use the PCI function number, but the
    PCI address may be virtualised.  Use the CS_PORT_NUM register field
    defined for just this purpose.
    
    Signed-off-by: Ben Hutchings <bhutchings@solarflare.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 2eb44eb9c8026f3f548bfbc903156b6aea54ed24
Author: Brian Swetland <swetland@google.com>
Date:   Mon Sep 29 16:00:48 2008 -0700

    [ARM] msm: shared memory interface for baseband processor ipc
    
    This code provides the low level interface to the "shared memory
    state machine" (smsm), and the virtual serial channels (smd), used
    to communicate with the baseband processor.  Higher level transports
    (rpc, ethernet, AT command channel, etc) ride on top of this.
    
    Signed-off-by: Brian Swetland <swetland@google.com>

commit a0a4650a9de3ceab90cd3b0588843886513bae77
Author: Larry Finger <Larry.Finger@lwfinger.net>
Date:   Tue Feb 2 10:08:19 2010 -0600

    b43: Fix throughput regression
    
    commit b6c3f5be7c6ac3375f44de4545c1ffe216b34022 upstream.
    
    Commit c7ab5ef9bcd281135c21b4732c9be779585181be entitled "b43: implement
    short slot and basic rate handling" reduced the transmit throughput for
    my BCM4311 device from 18 Mb/s to 0.7 Mb/s. The basic rate handling
    portion is OK, the problem is in the short slot handling.
    
    Prior to this change, the short slot enable/disable routines were never
    called. Experimentation showed that the critical part was changing the
    value at offset 0x0010 in the shared memory. This is supposed to contain
    the 802.11 Slot Time in usec, but if it is changed from its initial value
    of zero, performance is destroyed. On the other hand, changing the value
    in the MMIO register corresponding to the Interframe Slot Time increased
    performance from 18 to 22 Mb/s. A BCM4306/3 also shows dramatic
    improvement of the transmit rate from 5.3 to 19.0 Mb/s.
    
    Other changes in the patch include removal of the magic number for the
    MMIO register, and allowing the slot time to be set for any PHY operating
    in the 2.4 GHz band. Previously, the routine was executed only for G PHYs.
    
    Signed-off-by: Larry Finger <Larry.Finger@lwfinger.net>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 45575f5a426c01ec68cd33d998267ba2f6278fac
Author: Anton Blanchard <anton@samba.org>
Date:   Mon Mar 22 17:47:59 2010 +1100

    ppc64 sys_ipc breakage in 2.6.34-rc2
    
    I chased down a fail on ppc64 on 2.6.34-rc2 where an application that
    uses shared memory was getting a SEGV.
    
    Commit baed7fc9b580bd3fb8252ff1d9b36eaf1f86b670 ("Add generic sys_ipc
    wrapper") changed the second argument from an unsigned long to an int.
    When we call shmget the system call wrappers for sys_ipc will sign
    extend second (ie the size) which truncates it.  It took a while to
    track down because the call succeeds and strace shows the untruncated
    size :)
    
    The patch below changes second from an int to an unsigned long which
    fixes shmget on ppc64 (and I assume s390, sparc64 and mips64).
    
    Signed-off-by: Anton Blanchard <anton@samba.org>
    --
    
    I assume the function prototypes for the other IPC methods would cause us
    to sign or zero extend second where appropriate (avoiding any security
    issues). Come to think of it, the syscall wrappers for each method should do
    that for us as well.
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 51a53302d168c9c6089cb931acebfbc5a2e81a48
Author: Larry Finger <Larry.Finger@lwfinger.net>
Date:   Tue Feb 2 10:08:19 2010 -0600

    b43: Fix throughput regression
    
    commit b6c3f5be7c6ac3375f44de4545c1ffe216b34022 upstream.
    
    Commit c7ab5ef9bcd281135c21b4732c9be779585181be entitled "b43: implement
    short slot and basic rate handling" reduced the transmit throughput for
    my BCM4311 device from 18 Mb/s to 0.7 Mb/s. The basic rate handling
    portion is OK, the problem is in the short slot handling.
    
    Prior to this change, the short slot enable/disable routines were never
    called. Experimentation showed that the critical part was changing the
    value at offset 0x0010 in the shared memory. This is supposed to contain
    the 802.11 Slot Time in usec, but if it is changed from its initial value
    of zero, performance is destroyed. On the other hand, changing the value
    in the MMIO register corresponding to the Interframe Slot Time increased
    performance from 18 to 22 Mb/s. A BCM4306/3 also shows dramatic
    improvement of the transmit rate from 5.3 to 19.0 Mb/s.
    
    Other changes in the patch include removal of the magic number for the
    MMIO register, and allowing the slot time to be set for any PHY operating
    in the 2.4 GHz band. Previously, the routine was executed only for G PHYs.
    
    Signed-off-by: Larry Finger <Larry.Finger@lwfinger.net>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit b6c3f5be7c6ac3375f44de4545c1ffe216b34022
Author: Larry Finger <Larry.Finger@lwfinger.net>
Date:   Tue Feb 2 10:08:19 2010 -0600

    b43: Fix throughput regression
    
    Commit c7ab5ef9bcd281135c21b4732c9be779585181be entitled "b43: implement
    short slot and basic rate handling" reduced the transmit throughput for
    my BCM4311 device from 18 Mb/s to 0.7 Mb/s. The basic rate handling
    portion is OK, the problem is in the short slot handling.
    
    Prior to this change, the short slot enable/disable routines were never
    called. Experimentation showed that the critical part was changing the
    value at offset 0x0010 in the shared memory. This is supposed to contain
    the 802.11 Slot Time in usec, but if it is changed from its initial value
    of zero, performance is destroyed. On the other hand, changing the value
    in the MMIO register corresponding to the Interframe Slot Time increased
    performance from 18 to 22 Mb/s. A BCM4306/3 also shows dramatic
    improvement of the transmit rate from 5.3 to 19.0 Mb/s.
    
    Other changes in the patch include removal of the magic number for the
    MMIO register, and allowing the slot time to be set for any PHY operating
    in the 2.4 GHz band. Previously, the routine was executed only for G PHYs.
    
    Signed-off-by: Larry Finger <Larry.Finger@lwfinger.net>
    Cc: Stable <stable@kernel.org> [Any stable version back through 2.6.28]
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit 76a4db303d06066792bbc0e886def2cf99b232ef
Author: Rafał Miłecki <zajec5@gmail.com>
Date:   Fri Jan 15 12:27:46 2010 +0100

    b43: N-PHY: add shared memory offsets definitions
    
    Signed-off-by: Rafał Miłecki <zajec5@gmail.com>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit d8046582d5ee24448800e71c6933fdb6813aa062
Author: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com>
Date:   Tue Dec 15 16:47:09 2009 -0800

    memcg: make memcg's file mapped consistent with global VM
    
    In global VM, FILE_MAPPED is used but memcg uses MAPPED_FILE.  This makes
    grep difficult.  Replace memcg's MAPPED_FILE with FILE_MAPPED
    
    And in global VM, mapped shared memory is accounted into FILE_MAPPED.
    But memcg doesn't. fix it.
    Note:
      page_is_file_cache() just checks SwapBacked or not.
      So, we need to check PageAnon.
    
    Cc: Balbir Singh <balbir@in.ibm.com>
    Reviewed-by: Daisuke Nishimura <nishimura@mxp.nes.nec.co.jp>
    Signed-off-by: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit ef1ff6b8c08954bc203b59e887d1e580dd91755a
Author: From: Mel Gorman <mel@csn.ul.ie>
Date:   Wed Sep 23 15:56:05 2009 -0700

    hugetlbfs: do not call user_shm_lock() for MAP_HUGETLB fix
    
    Commit 6bfde05bf5c ("hugetlbfs: allow the creation of files suitable for
    MAP_PRIVATE on the vfs internal mount") altered can_do_hugetlb_shm() to
    check if a file is being created for shared memory or mmap().  If this
    returns false, we then unconditionally call user_shm_lock() triggering a
    warning.  This block should never be entered for MAP_HUGETLB.  This
    patch partially reverts the problem and fixes the check.
    
    Signed-off-by: Eric B Munson <ebmunson@us.ibm.com>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Mel Gorman <mel@csn.ul.ie>
    Cc: Adam Litke <agl@us.ibm.com>
    Cc: David Gibson <david@gibson.dropbear.id.au>
    Cc: Lee Schermerhorn <lee.schermerhorn@hp.com>
    Cc: Nick Piggin <nickpiggin@yahoo.com.au>
    Cc: Hugh Dickins <hugh.dickins@tiscali.co.uk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 8314c4f24a0a5c9b1f7544e9fa83a1d5367ddaa7
Author: Hugh Dickins <hugh.dickins@tiscali.co.uk>
Date:   Mon Sep 21 17:02:25 2009 -0700

    ksm: remove VM_MERGEABLE_FLAGS
    
    KSM originally stood for Kernel Shared Memory: but the kernel has long
    supported shared memory, and VM_SHARED and VM_MAYSHARE vmas, and KSM is
    something else.  So we switched to saying "merge" instead of "share".
    
    But Chris Wright points out that this is confusing where mmap.c merges
    adjacent vmas: most especially in the name VM_MERGEABLE_FLAGS, used by
    is_mergeable_vma() to let vmas be merged despite flags being different.
    
    Call it VMA_MERGE_DESPITE_FLAGS?  Perhaps, but at present it consists
    only of VM_CAN_NONLINEAR: so for now it's clearer on all sides to use
    that directly, with a comment on it in is_mergeable_vma().
    
    Signed-off-by: Hugh Dickins <hugh.dickins@tiscali.co.uk>
    Acked-by: Izik Eidus <ieidus@redhat.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 790cf1b912d3166746c8a1e1e807019a397d85d9
Author: Alan Cox <alan@linux.intel.com>
Date:   Fri Aug 7 19:25:16 2009 +0100

    Staging: sep: Try and get kernel address and user address types right
    
    We will need to tackle this in order to begin doing something about the
    bus handled and shared memory object mess.
    
    Signed-off-by: Alan Cox <alan@linux.intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 0d8dc6b05bf2645181eeac1f7e0cc4b105911565
Author: Brian Swetland <swetland@google.com>
Date:   Fri Jul 17 13:08:15 2009 +0200

    Staging: HTC Dream: add smd code
    
    Infrastructure to support the Qualcomm "shared memory driver"
    interface, used to communicate with the baseband processor on MSM7k
    SoCs.  The smd core provides low level facilities to interact with the
    shared memory comms region, and a "virtual serial channel" interface
    that higher level transports (AT command channel, rmnet virtual
    ethernet, qmi network management protocol, and oncrpc, for example)
    are routed over.
    
    Signed-off-by: Pavel Machek <pavel@ucw.cz>
    Cc: Brian Swetland <swetland@google.com>
    Cc: Iliyan Malchev <ibm@android.com>
    Cc: San Mehat <san@android.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit d69b042f3d7406ddba560143b1796020df760800
Author: Balbir Singh <balbir@linux.vnet.ibm.com>
Date:   Wed Jun 17 16:26:34 2009 -0700

    memcg: add file-based RSS accounting
    
    Add file RSS tracking per memory cgroup
    
    We currently don't track file RSS, the RSS we report is actually anon RSS.
     All the file mapped pages, come in through the page cache and get
    accounted there.  This patch adds support for accounting file RSS pages.
    It should
    
    1. Help improve the metrics reported by the memory resource controller
    2. Will form the basis for a future shared memory accounting heuristic
       that has been proposed by Kamezawa.
    
    Unfortunately, we cannot rename the existing "rss" keyword used in
    memory.stat to "anon_rss".  We however, add "mapped_file" data and hope to
    educate the end user through documentation.
    
    [hugh.dickins@tiscali.co.uk: fix mem_cgroup_update_mapped_file_stat oops]
    Signed-off-by: Balbir Singh <balbir@linux.vnet.ibm.com>
    Acked-by: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com>
    Cc: Li Zefan <lizf@cn.fujitsu.cn>
    Cc: Paul Menage <menage@google.com>
    Cc: Dhaval Giani <dhaval@linux.vnet.ibm.com>
    Cc: Daisuke Nishimura <nishimura@mxp.nes.nec.co.jp>
    Cc: YAMAMOTO Takashi <yamamoto@valinux.co.jp>
    Cc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Cc: David Rientjes <rientjes@google.com>
    Signed-off-by: Hugh Dickins <hugh.dickins@tiscali.co.uk>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 93f152e56bb0930e252d3b2b979f6ac0dfdf6170
Author: Mel Gorman <mel@csn.ul.ie>
Date:   Thu May 28 14:34:40 2009 -0700

    mm: account for MAP_SHARED mappings using VM_MAYSHARE and not VM_SHARED in hugetlbfs
    
    commit f83a275dbc5ca1721143698e844243fcadfabf6a upstream.
    
    Addresses http://bugzilla.kernel.org/show_bug.cgi?id=13302
    
    hugetlbfs reserves huge pages but does not fault them at mmap() time to
    ensure that future faults succeed.  The reservation behaviour differs
    depending on whether the mapping was mapped MAP_SHARED or MAP_PRIVATE.
    For MAP_SHARED mappings, hugepages are reserved when mmap() is first
    called and are tracked based on information associated with the inode.
    Other processes mapping MAP_SHARED use the same reservation.  MAP_PRIVATE
    track the reservations based on the VMA created as part of the mmap()
    operation.  Each process mapping MAP_PRIVATE must make its own
    reservation.
    
    hugetlbfs currently checks if a VMA is MAP_SHARED with the VM_SHARED flag
    and not VM_MAYSHARE.  For file-backed mappings, such as hugetlbfs,
    VM_SHARED is set only if the mapping is MAP_SHARED and the file was opened
    read-write.  If a shared memory mapping was mapped shared-read-write for
    populating of data and mapped shared-read-only by other processes, then
    hugetlbfs would account for the mapping as if it was MAP_PRIVATE.  This
    causes processes to fail to map the file MAP_SHARED even though it should
    succeed as the reservation is there.
    
    This patch alters mm/hugetlb.c and replaces VM_SHARED with VM_MAYSHARE
    when the intent of the code was to check whether the VMA was mapped
    MAP_SHARED or MAP_PRIVATE.
    
    Signed-off-by: Mel Gorman <mel@csn.ul.ie>
    Cc: Hugh Dickins <hugh.dickins@tiscali.co.uk>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: Lee Schermerhorn <Lee.Schermerhorn@hp.com>
    Cc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Cc: <starlight@binnacle.cx>
    Cc: Eric B Munson <ebmunson@us.ibm.com>
    Cc: Adam Litke <agl@us.ibm.com>
    Cc: Andy Whitcroft <apw@canonical.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit f823c237fba7c7c7f2eec63359a89dfca11a1e6c
Author: Mel Gorman <mel@csn.ul.ie>
Date:   Thu May 28 14:34:37 2009 -0700

    x86: ignore VM_LOCKED when determining if hugetlb-backed page tables can be shared or not
    
    commit 32b154c0b0bae2879bf4e549d861caf1759a3546 upstream.
    
    Addresses http://bugzilla.kernel.org/show_bug.cgi?id=13302
    
    On x86 and x86-64, it is possible that page tables are shared beween
    shared mappings backed by hugetlbfs.  As part of this,
    page_table_shareable() checks a pair of vma->vm_flags and they must match
    if they are to be shared.  All VMA flags are taken into account, including
    VM_LOCKED.
    
    The problem is that VM_LOCKED is cleared on fork().  When a process with a
    shared memory segment forks() to exec() a helper, there will be shared
    VMAs with different flags.  The impact is that the shared segment is
    sometimes considered shareable and other times not, depending on what
    process is checking.
    
    What happens is that the segment page tables are being shared but the
    count is inaccurate depending on the ordering of events.  As the page
    tables are freed with put_page(), bad pmd's are found when some of the
    children exit.  The hugepage counters also get corrupted and the Total and
    Free count will no longer match even when all the hugepage-backed regions
    are freed.  This requires a reboot of the machine to "fix".
    
    This patch addresses the problem by comparing all flags except VM_LOCKED
    when deciding if pagetables should be shared or not for hugetlbfs-backed
    mapping.
    
    Signed-off-by: Mel Gorman <mel@csn.ul.ie>
    Acked-by: Hugh Dickins <hugh.dickins@tiscali.co.uk>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: Lee Schermerhorn <Lee.Schermerhorn@hp.com>
    Cc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Cc: <starlight@binnacle.cx>
    Cc: Eric B Munson <ebmunson@us.ibm.com>
    Cc: Adam Litke <agl@us.ibm.com>
    Cc: Andy Whitcroft <apw@canonical.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit a1f36c3727c032c6190d04098928d7c95962a82e
Author: Mel Gorman <mel@csn.ul.ie>
Date:   Thu May 28 14:34:37 2009 -0700

    x86: ignore VM_LOCKED when determining if hugetlb-backed page tables can be shared or not
    
    commit 32b154c0b0bae2879bf4e549d861caf1759a3546 upstream.
    
    Addresses http://bugzilla.kernel.org/show_bug.cgi?id=13302
    
    On x86 and x86-64, it is possible that page tables are shared beween
    shared mappings backed by hugetlbfs.  As part of this,
    page_table_shareable() checks a pair of vma->vm_flags and they must match
    if they are to be shared.  All VMA flags are taken into account, including
    VM_LOCKED.
    
    The problem is that VM_LOCKED is cleared on fork().  When a process with a
    shared memory segment forks() to exec() a helper, there will be shared
    VMAs with different flags.  The impact is that the shared segment is
    sometimes considered shareable and other times not, depending on what
    process is checking.
    
    What happens is that the segment page tables are being shared but the
    count is inaccurate depending on the ordering of events.  As the page
    tables are freed with put_page(), bad pmd's are found when some of the
    children exit.  The hugepage counters also get corrupted and the Total and
    Free count will no longer match even when all the hugepage-backed regions
    are freed.  This requires a reboot of the machine to "fix".
    
    This patch addresses the problem by comparing all flags except VM_LOCKED
    when deciding if pagetables should be shared or not for hugetlbfs-backed
    mapping.
    
    Signed-off-by: Mel Gorman <mel@csn.ul.ie>
    Acked-by: Hugh Dickins <hugh.dickins@tiscali.co.uk>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: Lee Schermerhorn <Lee.Schermerhorn@hp.com>
    Cc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Cc: <starlight@binnacle.cx>
    Cc: Eric B Munson <ebmunson@us.ibm.com>
    Cc: Adam Litke <agl@us.ibm.com>
    Cc: Andy Whitcroft <apw@canonical.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit e36ccb57c0089ee645aca4c33c4bd8651e7a6f35
Author: Mel Gorman <mel@csn.ul.ie>
Date:   Thu May 28 14:34:40 2009 -0700

    mm: account for MAP_SHARED mappings using VM_MAYSHARE and not VM_SHARED in hugetlbfs
    
    commit f83a275dbc5ca1721143698e844243fcadfabf6a upstream.
    
    Addresses http://bugzilla.kernel.org/show_bug.cgi?id=13302
    
    hugetlbfs reserves huge pages but does not fault them at mmap() time to
    ensure that future faults succeed.  The reservation behaviour differs
    depending on whether the mapping was mapped MAP_SHARED or MAP_PRIVATE.
    For MAP_SHARED mappings, hugepages are reserved when mmap() is first
    called and are tracked based on information associated with the inode.
    Other processes mapping MAP_SHARED use the same reservation.  MAP_PRIVATE
    track the reservations based on the VMA created as part of the mmap()
    operation.  Each process mapping MAP_PRIVATE must make its own
    reservation.
    
    hugetlbfs currently checks if a VMA is MAP_SHARED with the VM_SHARED flag
    and not VM_MAYSHARE.  For file-backed mappings, such as hugetlbfs,
    VM_SHARED is set only if the mapping is MAP_SHARED and the file was opened
    read-write.  If a shared memory mapping was mapped shared-read-write for
    populating of data and mapped shared-read-only by other processes, then
    hugetlbfs would account for the mapping as if it was MAP_PRIVATE.  This
    causes processes to fail to map the file MAP_SHARED even though it should
    succeed as the reservation is there.
    
    This patch alters mm/hugetlb.c and replaces VM_SHARED with VM_MAYSHARE
    when the intent of the code was to check whether the VMA was mapped
    MAP_SHARED or MAP_PRIVATE.
    
    Signed-off-by: Mel Gorman <mel@csn.ul.ie>
    Cc: Hugh Dickins <hugh.dickins@tiscali.co.uk>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: Lee Schermerhorn <Lee.Schermerhorn@hp.com>
    Cc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Cc: <starlight@binnacle.cx>
    Cc: Eric B Munson <ebmunson@us.ibm.com>
    Cc: Adam Litke <agl@us.ibm.com>
    Cc: Andy Whitcroft <apw@canonical.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit f83a275dbc5ca1721143698e844243fcadfabf6a
Author: Mel Gorman <mel@csn.ul.ie>
Date:   Thu May 28 14:34:40 2009 -0700

    mm: account for MAP_SHARED mappings using VM_MAYSHARE and not VM_SHARED in hugetlbfs
    
    Addresses http://bugzilla.kernel.org/show_bug.cgi?id=13302
    
    hugetlbfs reserves huge pages but does not fault them at mmap() time to
    ensure that future faults succeed.  The reservation behaviour differs
    depending on whether the mapping was mapped MAP_SHARED or MAP_PRIVATE.
    For MAP_SHARED mappings, hugepages are reserved when mmap() is first
    called and are tracked based on information associated with the inode.
    Other processes mapping MAP_SHARED use the same reservation.  MAP_PRIVATE
    track the reservations based on the VMA created as part of the mmap()
    operation.  Each process mapping MAP_PRIVATE must make its own
    reservation.
    
    hugetlbfs currently checks if a VMA is MAP_SHARED with the VM_SHARED flag
    and not VM_MAYSHARE.  For file-backed mappings, such as hugetlbfs,
    VM_SHARED is set only if the mapping is MAP_SHARED and the file was opened
    read-write.  If a shared memory mapping was mapped shared-read-write for
    populating of data and mapped shared-read-only by other processes, then
    hugetlbfs would account for the mapping as if it was MAP_PRIVATE.  This
    causes processes to fail to map the file MAP_SHARED even though it should
    succeed as the reservation is there.
    
    This patch alters mm/hugetlb.c and replaces VM_SHARED with VM_MAYSHARE
    when the intent of the code was to check whether the VMA was mapped
    MAP_SHARED or MAP_PRIVATE.
    
    Signed-off-by: Mel Gorman <mel@csn.ul.ie>
    Cc: Hugh Dickins <hugh.dickins@tiscali.co.uk>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: <stable@kernel.org>
    Cc: Lee Schermerhorn <Lee.Schermerhorn@hp.com>
    Cc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Cc: <starlight@binnacle.cx>
    Cc: Eric B Munson <ebmunson@us.ibm.com>
    Cc: Adam Litke <agl@us.ibm.com>
    Cc: Andy Whitcroft <apw@canonical.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 32b154c0b0bae2879bf4e549d861caf1759a3546
Author: Mel Gorman <mel@csn.ul.ie>
Date:   Thu May 28 14:34:37 2009 -0700

    x86: ignore VM_LOCKED when determining if hugetlb-backed page tables can be shared or not
    
    Addresses http://bugzilla.kernel.org/show_bug.cgi?id=13302
    
    On x86 and x86-64, it is possible that page tables are shared beween
    shared mappings backed by hugetlbfs.  As part of this,
    page_table_shareable() checks a pair of vma->vm_flags and they must match
    if they are to be shared.  All VMA flags are taken into account, including
    VM_LOCKED.
    
    The problem is that VM_LOCKED is cleared on fork().  When a process with a
    shared memory segment forks() to exec() a helper, there will be shared
    VMAs with different flags.  The impact is that the shared segment is
    sometimes considered shareable and other times not, depending on what
    process is checking.
    
    What happens is that the segment page tables are being shared but the
    count is inaccurate depending on the ordering of events.  As the page
    tables are freed with put_page(), bad pmd's are found when some of the
    children exit.  The hugepage counters also get corrupted and the Total and
    Free count will no longer match even when all the hugepage-backed regions
    are freed.  This requires a reboot of the machine to "fix".
    
    This patch addresses the problem by comparing all flags except VM_LOCKED
    when deciding if pagetables should be shared or not for hugetlbfs-backed
    mapping.
    
    Signed-off-by: Mel Gorman <mel@csn.ul.ie>
    Acked-by: Hugh Dickins <hugh.dickins@tiscali.co.uk>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: <stable@kernel.org>
    Cc: Lee Schermerhorn <Lee.Schermerhorn@hp.com>
    Cc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Cc: <starlight@binnacle.cx>
    Cc: Eric B Munson <ebmunson@us.ibm.com>
    Cc: Adam Litke <agl@us.ibm.com>
    Cc: Andy Whitcroft <apw@canonical.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit d98aac7592114241f378bc8d5b3e424cced7ded2
Author: Linus Walleij <linus.walleij@stericsson.com>
Date:   Mon Apr 27 10:21:46 2009 +0100

    [ARM] 5480/1: U300-v5 integrate into the ARM architecture
    
    This hooks the U300 support into Kbuild and makes a small hook
    in mmu.c for supporting an odd memory alignment with shared memory
    on these systems.
    
    This is rebased to RMK:s GIT HEAD. This patch tries to add the
    Kconfig option in alphabetic order by option text and the Makefile
    entry after config symbol.
    
    Signed-off-by: Linus Walleij <linus.walleij@stericsson.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit daba2a631d2b7831b6a021b36d61314a9153526e
Author: Matt Carlson <mcarlson@broadcom.com>
Date:   Mon Apr 20 06:58:52 2009 +0000

    tg3: Restore LAA sooner in shutdown sequence
    
    After a shutdown reset, the LAA needs to be restored before posting the
    post-reset signature in shared memory.  If the LAA is not restored
    before then, the bootcode will assume the factory default MAC address
    and WOL will not work with the LAA.
    
    Signed-off-by: Matt Carlson <mcarlson@broadcom.com>
    Signed-off-by: Michael Chan <mchan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 7fccfc00c003c855936970facdbb667bae9dbe9a
Author: Aaro Koskinen <aaro.koskinen@nokia.com>
Date:   Tue Apr 14 13:07:35 2009 +0100

    [ARM] 5450/1: Flush only the needed range when unmapping a VMA
    
    When unmapping N pages (e.g. shared memory) the amount of TLB flushes
    done can be (N*PAGE_SIZE/ZAP_BLOCK_SIZE)*N although it should be N at
    maximum. With PREEMPT kernel ZAP_BLOCK_SIZE is 8 pages, so there is a
    noticeable performance penalty when unmapping a large VMA and the system
    is spending its time in flush_tlb_range().
    
    The problem is that tlb_end_vma() is always flushing the full VMA
    range. The subrange that needs to be flushed can be calculated by
    tlb_remove_tlb_entry(). This approach was suggested by Hugh Dickins,
    and is also used by other arches.
    
    The speed increase is roughly 3x for 8M mappings and for larger mappings
    even more.
    
    Signed-off-by: Aaro Koskinen <Aaro.Koskinen@nokia.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit c20351846efcb755ba849d9fb701fbd9a1ffb7c2
Author: Paul Mundt <lethal@linux-sh.org>
Date:   Tue Mar 17 21:19:49 2009 +0900

    sh: Flush only the needed range when unmapping a VMA.
    
    This follows the ARM change from Aaro Koskinen:
    
            When unmapping N pages (e.g. shared memory) the amount of TLB
            flushes done can be (N*PAGE_SIZE/ZAP_BLOCK_SIZE)*N although it
            should be N at maximum. With PREEMPT kernel ZAP_BLOCK_SIZE is 8
            pages, so there is a noticeable performance penalty when
            unmapping a large VMA and the system is spending its time in
            flush_tlb_range().
    
            The problem is that tlb_end_vma() is always flushing the full VMA
            range. The subrange that needs to be flushed can be calculated by
            tlb_remove_tlb_entry(). This approach was suggested by Hugh
            Dickins, and is also used by other arches.
    
            The speed increase is roughly 3x for 8M mappings and for larger
            mappings even more.
    
    Bits and peices are taken from the ARM patch as well as the existing
    arch/um implementation that is quite similar.
    
    The end result is a significant reduction in both partial and full TLB
    flushes initiated through flush_tlb_range().
    
    At the same time, the nommu implementation was broken, had a superfluous
    cache flush, and subsequently would have triggered a BUG_ON() if a
    code-path had triggered it. Tidy this up for correctness and provide a
    nopped-out implementation there.
    
    More background on the initial discussion can be found at:
    
            http://marc.info/?t=123609820900002&r=1&w=2
            http://marc.info/?t=123660375800003&r=1&w=2
    
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit d4ba53db2ea845ac7cad8a56d8fc40f1d8c250f4
Author: Lubomir Rintel <lkundrak@v3.sk>
Date:   Tue Mar 10 12:55:54 2009 -0700

    intel-agp: fix a panic with 1M of shared memory, no GTT entries
    
    commit 9c1e8a4ebcc04226cb6f3a1bf1d72f4cafd6b089 upstream.
    
    When GTT size is equal to amount of video memory, the amount of GTT
    entries is computed lower than zero, which is invalid and leads to
    off-by-one error in intel_i915_configure()
    
    Originally posted here:
    http://bugzilla.kernel.org/show_bug.cgi?id=12539
    http://bugzilla.redhat.com/show_bug.cgi?id=445592
    
    Signed-off-by: Lubomir Rintel <lkundrak@v3.sk>
    Cc: Lubomir Rintel <lkundrak@v3.sk>
    Cc: Dave Airlie <airlied@linux.ie>
    Reviewed-by: Eric Anholt <eric@anholt.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit ca912f23933fd14fcab90465af245597dbee9272
Author: Lubomir Rintel <lkundrak@v3.sk>
Date:   Tue Mar 10 12:55:54 2009 -0700

    intel-agp: fix a panic with 1M of shared memory, no GTT entries
    
    commit 9c1e8a4ebcc04226cb6f3a1bf1d72f4cafd6b089 upstream.
    
    When GTT size is equal to amount of video memory, the amount of GTT
    entries is computed lower than zero, which is invalid and leads to
    off-by-one error in intel_i915_configure()
    
    Originally posted here:
    http://bugzilla.kernel.org/show_bug.cgi?id=12539
    http://bugzilla.redhat.com/show_bug.cgi?id=445592
    
    Signed-off-by: Lubomir Rintel <lkundrak@v3.sk>
    Cc: Lubomir Rintel <lkundrak@v3.sk>
    Cc: Dave Airlie <airlied@linux.ie>
    Reviewed-by: Eric Anholt <eric@anholt.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 9c1e8a4ebcc04226cb6f3a1bf1d72f4cafd6b089
Author: Lubomir Rintel <lkundrak@v3.sk>
Date:   Tue Mar 10 12:55:54 2009 -0700

    intel-agp: fix a panic with 1M of shared memory, no GTT entries
    
    When GTT size is equal to amount of video memory, the amount of GTT
    entries is computed lower than zero, which is invalid and leads to
    off-by-one error in intel_i915_configure()
    
    Originally posted here:
    http://bugzilla.kernel.org/show_bug.cgi?id=12539
    http://bugzilla.redhat.com/show_bug.cgi?id=445592
    
    Signed-off-by: Lubomir Rintel <lkundrak@v3.sk>
    Cc: Lubomir Rintel <lkundrak@v3.sk>
    Cc: Dave Airlie <airlied@linux.ie>
    Reviewed-by: Eric Anholt <eric@anholt.net>
    Cc: <stable@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 5cd65a93e9335393d5e1f18d35d337b7ba1280f8
Author: Eilon Greenstein <eilong@broadcom.com>
Date:   Thu Feb 12 08:38:11 2009 +0000

    bnx2x: Better struct naming
    
    This is the device info from the chip shared memory - rename to avoid confusion
    
    Signed-off-by: Eilon Greenstein <eilong@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 1df9f0a73178718969ae47d813b8e7aab2cf073c
Author: Mimi Zohar <zohar@linux.vnet.ibm.com>
Date:   Wed Feb 4 09:07:02 2009 -0500

    Integrity: IMA file free imbalance
    
    The number of calls to ima_path_check()/ima_file_free()
    should be balanced.  An extra call to fput(), indicates
    the file could have been accessed without first being
    measured.
    
    Although f_count is incremented/decremented in places other
    than fget/fput, like fget_light/fput_light and get_file, the
    current task must already hold a file refcnt.  The call to
    __fput() is delayed until the refcnt becomes 0, resulting
    in ima_file_free() flagging any changes.
    
    - add hook to increment opencount for IPC shared memory(SYSV),
      shmat files, and /dev/zero
    - moved NULL iint test in opencount_get()
    
    Signed-off-by: Mimi Zohar <zohar@us.ibm.com>
    Acked-by: Serge Hallyn <serue@us.ibm.com>
    Signed-off-by: James Morris <jmorris@namei.org>

commit 7420b73dc05ae1faa36b49774210a13d29349c53
Merge: 3e1c4005134e de8696203e64
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Feb 3 16:52:10 2009 -0800

    Merge master.kernel.org:/home/rmk/linux-2.6-arm
    
    * master.kernel.org:/home/rmk/linux-2.6-arm:
      NVRAM depends on RTC_DRV_CMOS
      rename platform_driver name "flash" to "sa1100-mtd"
      annotate that [fp, #-4] is the saved lr
      Use __SPIN_LOCK_UNLOCKED to initialize bad_irq_desc.lock
      ARM: OMAP: fix fault in enter_full_retention()
      ARM: OMAP: Mask interrupts when disabling interrupts, v2
      ARM: OMAP: gptimer min_delta_ns corrected
      ARM: OMAP: Fix hsmmc init, v2
      ARM: OMAP: Fix omap34xx revision detection for ES3.1
      ARM: OMAP: DMA: Fix uninitialized channel flags
      ARM: OMAP: Fix race in OMAP2/3 DMA IRQ handling
      ARM: OMAP: Fix McBSP spin_lock deadlock
      [ARM] 5366/1: fix shared memory coherency with VIVT L1 + L2 caches
      [ARM] call undefined instruction exception handler with irqs enabled
      [ARM] msm: fix build errors
      [ARM] etherh: continue fixing build failure

commit 08e445bd6a98fa09befe0cf6d67705324f913fc6
Author: Nicolas Pitre <nico@cam.org>
Date:   Fri Jan 16 23:02:54 2009 +0100

    [ARM] 5366/1: fix shared memory coherency with VIVT L1 + L2 caches
    
    When there are multiple L1-aliasing userland mappings of the same physical
    page, we currently remap each of them uncached, to prevent VIVT cache
    aliasing issues. (E.g. writes to one of the mappings not being immediately
    visible via another mapping.)  However, when we do this remapping, there
    could still be stale data in the L2 cache, and an uncached mapping might
    bypass L2 and go straight to RAM.  This would cause reads from such
    mappings to see old data (until the dirty L2 line is eventually evicted.)
    
    This issue is solved by forcing a L2 cache flush whenever the shared page
    is made L1 uncacheable.
    
    Ideally, we would make L1 uncacheable and L2 cacheable as L2 is PIPT. But
    Feroceon does not support that combination, and the TEX=5 C=0 B=0 encoding
    for XSc3 doesn't appear to work in practice.
    
    Signed-off-by: Nicolas Pitre <nico@marvell.com>
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit 8feae13110d60cc6287afabc2887366b0eb226c2
Author: David Howells <dhowells@redhat.com>
Date:   Thu Jan 8 12:04:47 2009 +0000

    NOMMU: Make VMAs per MM as for MMU-mode linux
    
    Make VMAs per mm_struct as for MMU-mode linux.  This solves two problems:
    
     (1) In SYSV SHM where nattch for a segment does not reflect the number of
         shmat's (and forks) done.
    
     (2) In mmap() where the VMA's vm_mm is set to point to the parent mm by an
         exec'ing process when VM_EXECUTABLE is specified, regardless of the fact
         that a VMA might be shared and already have its vm_mm assigned to another
         process or a dead process.
    
    A new struct (vm_region) is introduced to track a mapped region and to remember
    the circumstances under which it may be shared and the vm_list_struct structure
    is discarded as it's no longer required.
    
    This patch makes the following additional changes:
    
     (1) Regions are now allocated with alloc_pages() rather than kmalloc() and
         with no recourse to __GFP_COMP, so the pages are not composite.  Instead,
         each page has a reference on it held by the region.  Anything else that is
         interested in such a page will have to get a reference on it to retain it.
         When the pages are released due to unmapping, each page is passed to
         put_page() and will be freed when the page usage count reaches zero.
    
     (2) Excess pages are trimmed after an allocation as the allocation must be
         made as a power-of-2 quantity of pages.
    
     (3) VMAs are added to the parent MM's R/B tree and mmap lists.  As an MM may
         end up with overlapping VMAs within the tree, the VMA struct address is
         appended to the sort key.
    
     (4) Non-anonymous VMAs are now added to the backing inode's prio list.
    
     (5) Holes may be punched in anonymous VMAs with munmap(), releasing parts of
         the backing region.  The VMA and region structs will be split if
         necessary.
    
     (6) sys_shmdt() only releases one attachment to a SYSV IPC shared memory
         segment instead of all the attachments at that addresss.  Multiple
         shmat()'s return the same address under NOMMU-mode instead of different
         virtual addresses as under MMU-mode.
    
     (7) Core dumping for ELF-FDPIC requires fewer exceptions for NOMMU-mode.
    
     (8) /proc/maps is now the global list of mapped regions, and may list bits
         that aren't actually mapped anywhere.
    
     (9) /proc/meminfo gains a line (tagged "MmapCopy") that indicates the amount
         of RAM currently allocated by mmap to hold mappable regions that can't be
         mapped directly.  These are copies of the backing device or file if not
         anonymous.
    
    These changes make NOMMU mode more similar to MMU mode.  The downside is that
    NOMMU mode requires some extra memory to track things over NOMMU without this
    patch (VMAs are no longer shared, and there are now region structs).
    
    Signed-off-by: David Howells <dhowells@redhat.com>
    Tested-by: Mike Frysinger <vapier.adi@gmail.com>
    Acked-by: Paul Mundt <lethal@linux-sh.org>

commit 4c728ef583b3d82266584da5cb068294c09df31e
Author: Christoph Hellwig <hch@lst.de>
Date:   Mon Dec 22 21:11:15 2008 +0100

    add a vfs_fsync helper
    
    Fsync currently has a fdatawrite/fdatawait pair around the method call,
    and a mutex_lock/unlock of the inode mutex.  All callers of fsync have
    to duplicate this, but we have a few and most of them don't quite get
    it right.  This patch adds a new vfs_fsync that takes care of this.
    It's a little more complicated as usual as ->fsync might get a NULL file
    pointer and just a dentry from nfsd, but otherwise gets afile and we
    want to take the mapping and file operations from it when it is there.
    
    Notes on the fsync callers:
    
     - ecryptfs wasn't calling filemap_fdatawrite / filemap_fdatawait on the
            lower file
     - coda wasn't calling filemap_fdatawrite / filemap_fdatawait on the host
            file, and returning 0 when ->fsync was missing
     - shm wasn't calling either filemap_fdatawrite / filemap_fdatawait nor
       taking i_mutex.  Now given that shared memory doesn't have disk
       backing not doing anything in fsync seems fine and I left it out of
       the vfs_fsync conversion for now, but in that case we might just
       not pass it through to the lower file at all but just call the no-op
       simple_sync_file directly.
    
    [and now actually export vfs_fsync]
    
    Signed-off-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

commit 89e004ea55abe201b29e2d6e35124101f1288ef7
Author: Lee Schermerhorn <Lee.Schermerhorn@hp.com>
Date:   Sat Oct 18 20:26:43 2008 -0700

    SHM_LOCKED pages are unevictable
    
    Shmem segments locked into memory via shmctl(SHM_LOCKED) should not be
    kept on the normal LRU, since scanning them is a waste of time and might
    throw off kswapd's balancing algorithms.  Place them on the unevictable
    LRU list instead.
    
    Use the AS_UNEVICTABLE flag to mark address_space of SHM_LOCKed shared
    memory regions as unevictable.  Then these pages will be culled off the
    normal LRU lists during vmscan.
    
    Add new wrapper function to clear the mapping's unevictable state when/if
    shared memory segment is munlocked.
    
    Add 'scan_mapping_unevictable_page()' to mm/vmscan.c to scan all pages in
    the shmem segment's mapping [struct address_space] for evictability now
    that they're no longer locked.  If so, move them to the appropriate zone
    lru list.
    
    Changes depend on [CONFIG_]UNEVICTABLE_LRU.
    
    [kosaki.motohiro@jp.fujitsu.com: revert shm change]
    Signed-off-by: Lee Schermerhorn <lee.schermerhorn@hp.com>
    Signed-off-by: Rik van Riel <riel@redhat.com>
    Signed-off-by: Kosaki Motohiro <kosaki.motohiro@jp.fujitsu.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 62695a84eb8f2e718bf4dfb21700afaa7a08e0ea
Author: Nick Piggin <npiggin@suse.de>
Date:   Sat Oct 18 20:26:09 2008 -0700

    vmscan: move isolate_lru_page() to vmscan.c
    
    On large memory systems, the VM can spend way too much time scanning
    through pages that it cannot (or should not) evict from memory.  Not only
    does it use up CPU time, but it also provokes lock contention and can
    leave large systems under memory presure in a catatonic state.
    
    This patch series improves VM scalability by:
    
    1) putting filesystem backed, swap backed and unevictable pages
       onto their own LRUs, so the system only scans the pages that it
       can/should evict from memory
    
    2) switching to two handed clock replacement for the anonymous LRUs,
       so the number of pages that need to be scanned when the system
       starts swapping is bound to a reasonable number
    
    3) keeping unevictable pages off the LRU completely, so the
       VM does not waste CPU time scanning them. ramfs, ramdisk,
       SHM_LOCKED shared memory segments and mlock()ed VMA pages
       are keept on the unevictable list.
    
    This patch:
    
    isolate_lru_page logically belongs to be in vmscan.c than migrate.c.
    
    It is tough, because we don't need that function without memory migration
    so there is a valid argument to have it in migrate.c.  However a
    subsequent patch needs to make use of it in the core mm, so we can happily
    move it to vmscan.c.
    
    Also, make the function a little more generic by not requiring that it
    adds an isolated page to a given list.  Callers can do that.
    
            Note that we now have '__isolate_lru_page()', that does
            something quite different, visible outside of vmscan.c
            for use with memory controller.  Methinks we need to
            rationalize these names/purposes.       --lts
    
    [akpm@linux-foundation.org: fix mm/memory_hotplug.c build]
    Signed-off-by: Nick Piggin <npiggin@suse.de>
    Signed-off-by: Rik van Riel <riel@redhat.com>
    Signed-off-by: Lee Schermerhorn <Lee.Schermerhorn@hp.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit e00de30a9decf48793ac83173144884a1f33de82
Author: Victor Gallardo <vgallardo@amcc.com>
Date:   Wed Oct 1 23:29:06 2008 -0700

    powerpc/44x: Add AMCC Arches eval board support
    
    The Arches Evaluation board is based on the AMCC 460GT SoC chip.
    This board is a dual processor board with each processor providing
    independent resources for Rapid IO, Gigabit Ethernet, and serial
    communications.  Each 460GT has it's own 512MB DDR2 memory, 32MB NOR FLASH,
    UART, EEPROM and temperature sensor, along with a shared debug port.
    The two 460GT's will communicate with each other via shared memory,
    Gigabit Ethernet and x1 PCI-Express.
    
    Signed-off-by: Victor Gallardo <vgallardo@amcc.com>
    Signed-off-by: Josh Boyer <jwboyer@linux.vnet.ibm.com>

commit c5b0079c0a7641caac3fedab75e8e63aeb54d7e2
Merge: 5f22ca9b1355 7d0e367ab3f3
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Wed Aug 20 08:42:53 2008 -0700

    Merge git://git.kernel.org/pub/scm/linux/kernel/git/jejb/scsi-rc-fixes-2.6
    
    * git://git.kernel.org/pub/scm/linux/kernel/git/jejb/scsi-rc-fixes-2.6: (22 commits)
      [SCSI] ibmvfc: Driver version 1.0.2
      [SCSI] ibmvfc: Add details to async event log
      [SCSI] ibmvfc: Sanitize response lengths
      [SCSI] ibmvfc: Fix for lost async events
      [SCSI] ibmvfc: Fixup host state during reinit
      [SCSI] ibmvfc: Fix another hang on module removal
      [SCSI] ibmvscsi: Fixup desired DMA value for shared memory partitions
      [SCSI] megaraid_sas: remove sysfs dbg_lvl world writeable permissions
      [SCSI] qla2xxx: Update version number to 8.02.01-k7.
      [SCSI] qla2xxx: Explicitly tear-down vports during PCI remove_one().
      [SCSI] qla2xxx: Reference proper ha during SBR handling.
      [SCSI] qla2xxx: Set npiv_supported flag for FCoE HBAs.
      [SCSI] qla2xxx: Don't leak SG-DMA mappings while aborting commands.
      [SCSI] qla2xxx: Correct vport-state management issues during ISP-ABORT.
      [SCSI] qla2xxx: Correct synchronization of software/firmware fcport states.
      [SCSI] scsi_dh: Initialize lun_state in check_ownership()
      [SCSI] scsi_dh: Do not use scsilun in rdac hardware handler
      [SCSI] megaraid_sas: version and Documentation Update
      [SCSI] megaraid_sas: add new controllers (0x78 0x79)
      [SCSI] megaraid_sas: add the shutdown DCMD cmd to driver shutdown routine
      ...

commit ac22429df22c1c793245c3cca33ccde4046d9c1f
Author: Robert Jennings <rcj@linux.vnet.ibm.com>
Date:   Sat Aug 16 05:10:18 2008 +1000

    powerpc: Add CMO enabled flag and paging space data to lparcfg
    
    Add a field in lparcfg output to indicate whether the kernel is
    running on a dedicated or shared memory lpar.  Added fields to show
    the paging space pool IDs and the CMO page size.
    
    Submitted-by: Robert Jennings <rcj@linux.vnet.ibm.com>
    
    Signed-off-by: Paul Mackerras <paulus@samba.org>

commit 004dd5e88673516a408f0e8e43edbe6a4424be2f
Author: Brian King <brking@linux.vnet.ibm.com>
Date:   Fri Aug 15 10:48:47 2008 -0500

    [SCSI] ibmvscsi: Fixup desired DMA value for shared memory partitions
    
    When running ibmvscsi in a shared memory partition, it must provide
    a default value for the amount of DMA resources it will need in order to
    perform reasonably well. This was being calculated in sectors rather than
    bytes, as it should. This patch fixes this.
    
    Signed-off-by: Brian King <brking@linux.vnet.ibm.com>
    Signed-off-by: James Bottomley <James.Bottomley@HansenPartnership.com>

commit a9daf36746b1fb5c2db8d164ca70c30c63a0d7b2
Author: Matt Carlson <mcarlson@broadcom.com>
Date:   Sun May 25 23:49:44 2008 -0700

    tg3: Add shmem options.
    
    This patch adds some options obtained through shared memory.
    
    Signed-off-by: Matt Carlson <mcarlson@broadcom.com>
    Signed-off-by: Michael Chan <mchan@broadcom.com>
    Signed-off-by: Benjamin Li <benli@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit d67f5489d8d9be09bc8e1615ec6c57c3120a731d
Author: Ron Rindjunsky <ron.rindjunsky@intel.com>
Date:   Mon May 5 10:22:49 2008 +0800

    iwlwifi: handle shared memory Rx index access
    
    This patch splits ucode's and driver's shared memory Rx index access to
    match 4965 and 5000 offsets.
    
    Signed-off-by: Ron Rindjunsky <ron.rindjunsky@intel.com>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit d4100dd985dcc13cc7bd1712ce10dea51b7c8261
Author: Ron Rindjunsky <ron.rindjunsky@intel.com>
Date:   Thu Apr 24 11:55:33 2008 -0700

    iwlwifi-5000: add iwl 5000 shared memory handlers
    
    This patch fills the needed handlers for shared memory for
    iwl 5000 family
    
    Signed-off-by: Ron Rindjunsky <ron.rindjunsky@intel.com>
    Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit 399f490067992715044cbf2be1923e2f613b2e18
Author: Ron Rindjunsky <ron.rindjunsky@intel.com>
Date:   Wed Apr 23 17:14:56 2008 -0700

    iwlwifi: handle shared memory
    
    This patch generalize the use of shared memory, as size of this memory is
    now allocated and freed by handlers, and also changes the location of those
    actions for better resource management
    
    Signed-off-by: Ron Rindjunsky <ron.rindjunsky@intel.com>
    Signed-off-by: Tomas Winkler <tomas.winkler@intel.com>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit 0bfe151cc4049f3f304adf28b37ea5437d02ad96
Author: Olaf Kirch <okir@lst.de>
Date:   Tue Apr 29 13:46:53 2008 -0700

    IB/mthca: Avoid recycling old FMR R_Keys too soon
    
    When a FMR is unmapped, mthca resets the map count to 0, and clears
    the upper part of the R_Key which is used as the sequence counter.
    
    This poses a problem for RDS, which uses ib_fmr_unmap as a fence
    operation.  RDS assumes that after issuing an unmap, the old R_Keys
    will be invalid for a "reasonable" period of time. For instance,
    Oracle processes uses shared memory buffers allocated from a pool of
    buffers.  When a process dies, we want to reclaim these buffers -- but
    we must make sure there are no pending RDMA operations to/from those
    buffers.  The only way to achieve that is by using unmap and sync the
    TPT.
    
    However, when the sequence count is reset on unmap, there is a high
    likelihood that a new mapping will be given the same R_Key that was
    issued a few milliseconds ago.
    
    To prevent this, don't reset the sequence count when unmapping a FMR.
    
    Signed-off-by: Olaf Kirch <olaf.kirch@oracle.com>
    Signed-off-by: Roland Dreier <rolandd@cisco.com>

commit bbdc2821db041fb07ffa52e4a0e1ebb5410790e9
Author: Olaf Kirch <okir@lst.de>
Date:   Tue Apr 29 13:46:53 2008 -0700

    mlx4_core: Avoid recycling old FMR R_Keys too soon
    
    When a FMR is unmapped, mlx4 resets the map count to 0, and clears the
    upper part of the R_Key which is used as the sequence counter.
    
    This poses a problem for RDS, which uses ib_fmr_unmap as a fence
    operation.  RDS assumes that after issuing an unmap, the old R_Keys
    will be invalid for a "reasonable" period of time. For instance,
    Oracle processes uses shared memory buffers allocated from a pool of
    buffers.  When a process dies, we want to reclaim these buffers -- but
    we must make sure there are no pending RDMA operations to/from those
    buffers.  The only way to achieve that is by using unmap and sync the
    TPT.
    
    However, when the sequence count is reset on unmap, there is a high
    likelihood that a new mapping will be given the same R_Key that was
    issued a few milliseconds ago.
    
    To prevent this, don't reset the sequence count when unmapping a FMR.
    
    Signed-off-by: Olaf Kirch <olaf.kirch@oracle.com>
    Signed-off-by: Roland Dreier <rolandd@cisco.com>

commit 8d4cc8b5c5e5bac526618ee704f3cfdcad954e0c
Author: Pierre Peiffer <pierre.peiffer@bull.net>
Date:   Tue Apr 29 01:00:47 2008 -0700

    IPC/shared memory: introduce shmctl_down
    
    Currently, the way the different commands are handled in sys_shmctl introduces
    some duplicated code.
    
    This patch introduces the shmctl_down function to handle all the commands
    requiring the rwmutex to be taken in write mode (ie IPC_SET and IPC_RMID for
    now).  It is the equivalent function of semctl_down for shared memory.
    
    This removes some duplicated code for handling these both commands and
    harmonizes the way they are handled among all IPCs.
    
    Signed-off-by: Pierre Peiffer <pierre.peiffer@bull.net>
    Acked-by: Serge Hallyn <serue@us.ibm.com>
    Cc: Nadia Derbey <Nadia.Derbey@bull.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 3f226aa1cbc006f9d90f22084f519ad2a1286cd8
Author: Lee Schermerhorn <lee.schermerhorn@hp.com>
Date:   Mon Apr 28 02:13:24 2008 -0700

    mempolicy: support mpol=local tmpfs mount option
    
    For tmpfs/shmem shared policies, MPOL_DEFAULT is not necessarily equivalent to
    "local allocation".  Because shared policies are at the same "scope" level
    [see Documentation/vm/numa_memory_policy.txt], as vma policies MPOL_DEFAULT
    means "fall back to current task policy".
    
    This patch extends the memory policy string parsing function to display
    "local" for MPOL_PREFERRED + MPOL_F_LOCAL.  This allows one to specify local
    allocation as the default policy for shared memory areas via the tmpfs mpol
    mount option, regardless of the current task's policy.
    
    Also, "local" is now displayed for this policy.  This patch allows us to
    accept the same input format as the display.
    
    Signed-off-by: Lee Schermerhorn <lee.schermerhorn@hp.com>
    Cc: Christoph Lameter <clameter@sgi.com>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Mel Gorman <mel@csn.ul.ie>
    Cc: Andi Kleen <ak@suse.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 5042c5070daaa6a3c033e4510439e3ac02a1df60
Author: Michael Buesch <mb@bu3sch.de>
Date:   Sat Apr 5 15:05:00 2008 +0200

    b43: Fix PHY TX control words in SHM
    
    This fixes the initialization of the PHY TX control words in
    shared memory. These control words are used for management frames
    like beacons.
    
    Signed-off-by: Michael Buesch <mb@bu3sch.de>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit f14106478e372e64be54a3cdab1e2fa83a5c8a35
Author: Eliezer Tamir <eliezert@broadcom.com>
Date:   Thu Feb 28 11:51:50 2008 -0800

    [BNX2X]: Correct Link management
    
    Properly protect PHY access between two devices on the same board with
    a HW lock.
    
    Use GPIO to clear all previous configurations before changing link
    parameters.
    
    Shut down the external PHY in case of fan failure.
    
    Reducing the MDC/MDIO clock to 2.5MHz due to problems with some
    devices.
    
    Resolve the flow control response according to autoneg with external
    PHY.
    
    Unmasking all PHY interrupts in single write to prevent a race in the
    interrupts order.
    
    LASI indication fixes to work with peculiarities of PHYs.
    
    Disable MAC RX to avoid a HW bug when closing the MAC under traffic.
    
    Disable parallel detection on HiGig due to HW limitation.
    
    Updating the shared memory structure to work with the current
    bootcode.
    
    Signed-off-by: Eliezer Tamir <eliezert@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 52d82ef12a172124ee4aab06656c877868efc407
Author: Jesper Nilsson <jesper.nilsson@axis.com>
Date:   Fri Jan 25 18:08:07 2008 +0100

    CRIS v32: Avoid work when switching between tasks with shared memory descriptors in mm/tlb.c
    
    There is no need to do all this work if they share memory descriptors.
    Also, fix some minor whitespace and long lines.

commit 4f073eff3fb738dce5ad0d8a3d126e5c09cbfba7
Author: Jesper Nilsson <jesper.nilsson@axis.com>
Date:   Mon Jan 21 11:28:16 2008 +0100

    CRIS v10: Don't call get_mmu_context when switching between tasks with shared memory descriptors
    
    Also, cleanup formatting and fix whitespace errors.

commit 2726d6e126c0c16efeba30356d4ae105f1854d1e
Author: Michael Chan <mchan@broadcom.com>
Date:   Tue Jan 29 21:35:05 2008 -0800

    [BNX2]: Remove REG_WR_IND/REG_RD_IND macros.
    
    The REG_WR_IND/REG_RD_IND macros are unnecessary and obfuscate the
    code.  Many callers to these macros read and write shared memory from
    the bp->shmem_base, so we add 2 similar functions that automatically
    add the shared memory base.
    
    Signed-off-by: Michael Chan <mchan@broadcom.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

commit 8cc085c7aceb78d26d0a5355e111b2330f089161
Author: Al Viro <viro@ftp.linux.org.uk>
Date:   Fri Dec 21 06:21:03 2007 +0000

    typhoon: memory corruptor on big-endian if TSO is enabled
    
    txlo_dma_addr should be host-endian; we pass it to typhoon_tso_fill(),
    which does arithmetics on it, converts to l-e and passes it to card.
    Unfortunately, we forgot le32_to_cpu() when initializing it from
    face->txLoAddr, which sits in shared memory and is little-endian.
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
    Signed-off-by: Jeff Garzik <jeff@garzik.org>

commit 4de97a2d6f8793f7623106fe76da1947933a4f5c
Author: Herbert van den Bergh <Herbert.van.den.Bergh@oracle.com>
Date:   Sun Jul 15 23:38:25 2007 -0700

    [PATCH] do not limit locked memory when RLIMIT_MEMLOCK is RLIM_INFINITY
    
    Fix a bug in mm/mlock.c on 32-bit architectures that prevents a user from
    locking more than 4GB of shared memory, or allocating more than 4GB of
    shared memory in hugepages, when rlim[RLIMIT_MEMLOCK] is set to
    RLIM_INFINITY.
    
    Signed-off-by: Herbert van den Bergh <herbert.van.den.bergh@oracle.com>
    Acked-by: Chris Mason <chris.mason@oracle.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
    Signed-off-by: Willy Tarreau <w@1wt.eu>

commit ed173ab97b4faeeb2809a81c2fa0e6e4f979d5bb
Author: Herbert van den Bergh <Herbert.van.den.Bergh@oracle.com>
Date:   Sun Jul 15 23:38:25 2007 -0700

    do not limit locked memory when RLIMIT_MEMLOCK is RLIM_INFINITY
    
    Fix a bug in mm/mlock.c on 32-bit architectures that prevents a user from
    locking more than 4GB of shared memory, or allocating more than 4GB of
    shared memory in hugepages, when rlim[RLIMIT_MEMLOCK] is set to
    RLIM_INFINITY.
    
    Signed-off-by: Herbert van den Bergh <herbert.van.den.bergh@oracle.com>
    Acked-by: Chris Mason <chris.mason@oracle.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit c1228d7339dff95df5ea093f174372be5c1268b7
Author: Adam Litke <agl@us.ibm.com>
Date:   Sat Jun 16 10:16:15 2007 -0700

    hugetlb: fix get_policy for stacked shared memory files
    
    Here's another breakage as a result of shared memory stacked files :(
    
    The NUMA policy for a VMA is determined by checking the following (in the
    order given):
    
    1) vma->vm_ops->get_policy() (if defined)
    2) vma->vm_policy (if defined)
    3) task->mempolicy (if defined)
    4) Fall back to default_policy
    
    By switching to stacked files for shared memory, get_policy() is now always
    set to shm_get_policy which is a wrapper function.  This causes us to stop
    at step 1, which yields NULL for hugetlb instead of task->mempolicy which
    was the previous (and correct) result.
    
    This patch modifies the shm_get_policy() wrapper to maintain steps 1-3 for
    the wrapped vm_ops.
    
    (akpm: the refcounting of mempolicies is busted and this patch does nothing to
    improve it)
    
    Signed-off-by: Adam Litke <agl@us.ibm.com>
    Acked-by: William Irwin <bill.irwin@oracle.com>
    Cc: dean gaudet <dean@arctic.org>
    Cc: Christoph Lameter <clameter@sgi.com>
    Cc: Andi Kleen <ak@suse.de>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Chris Wright <chrisw@sous-sol.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 76fdbb25f963de5dc1e308325f0578a2f92b1c2d
Author: Kawai, Hidehiro <hidehiro.kawai.ez@hitachi.com>
Date:   Thu Jul 19 01:48:26 2007 -0700

    coredump masking: bound suid_dumpable sysctl
    
    This patch series is version 5 of the core dump masking feature, which
    controls which VMAs should be dumped based on their memory types and
    per-process flags.
    
    I adopted most of Andrew's suggestion at the previous version.  He also
    suggested using system call instead of /proc/<pid>/ interface, I decided to
    use the latter continuously because adding new system call with pid argument
    will give a big impact on the kernel.
    
    You can access the per-process flags via /proc/<pid>/coredump_filter
    interface.  coredump_filter represents a bitmask of memory types, and if a bit
    is set, VMAs of corresponding memory type are written into a core file when
    the process is dumped.  The bitmask is inherited from the parent process when
    a process is created.
    
    The original purpose is to avoid longtime system slowdown when a number of
    processes which share a huge shared memory are dumped at the same time.  To
    achieve this purpose, this patch series adds an ability to suppress dumping
    anonymous shared memory for specified processes.  In this version, three other
    memory types are also supported.
    
    Here are the coredump_filter bits:
      bit 0: anonymous private memory
      bit 1: anonymous shared memory
      bit 2: file-backed private memory
      bit 3: file-backed shared memory
    
    The default value of coredump_filter is 0x3.  This means the new core dump
    routine has the same behavior as conventional behavior by default.
    
    In this version, coredump_filter bits and mm.dumpable are merged into
    mm.flags, and it is accessed by atomic bitops.
    
    The supported core file formats are ELF and ELF-FDPIC.  ELF has been tested,
    but ELF-FDPIC has not been built and tested because I don't have the test
    environment.
    
    This patch limits a value of suid_dumpable sysctl to the range of 0 to 2.
    
    Signed-off-by: Hidehiro Kawai <hidehiro.kawai.ez@hitachi.com>
    Cc: Alan Cox <alan@lxorguk.ukuu.org.uk>
    Cc: David Howells <dhowells@redhat.com>
    Cc: Hugh Dickins <hugh@veritas.com>
    Cc: Nick Piggin <nickpiggin@yahoo.com.au>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 4a19542e5f694cd408a32c3d9dc593ba9366e2d7
Author: Ulrich Drepper <drepper@redhat.com>
Date:   Sun Jul 15 23:40:34 2007 -0700

    O_CLOEXEC for SCM_RIGHTS
    
    Part two in the O_CLOEXEC saga: adding support for file descriptors received
    through Unix domain sockets.
    
    The patch is once again pretty minimal, it introduces a new flag for recvmsg
    and passes it just like the existing MSG_CMSG_COMPAT flag.  I think this bit
    is not used otherwise but the networking people will know better.
    
    This new flag is not recognized by recvfrom and recv.  These functions cannot
    be used for that purpose and the asymmetry this introduces is not worse than
    the already existing MSG_CMSG_COMPAT situations.
    
    The patch must be applied on the patch which introduced O_CLOEXEC.  It has to
    remove static from the new get_unused_fd_flags function but since scm.c cannot
    live in a module the function still hasn't to be exported.
    
    Here's a test program to make sure the code works.  It's so much longer than
    the actual patch...
    
    #include <errno.h>
    #include <error.h>
    #include <fcntl.h>
    #include <stdio.h>
    #include <string.h>
    #include <unistd.h>
    #include <sys/socket.h>
    #include <sys/un.h>
    
    #ifndef O_CLOEXEC
    # define O_CLOEXEC 02000000
    #endif
    #ifndef MSG_CMSG_CLOEXEC
    # define MSG_CMSG_CLOEXEC 0x40000000
    #endif
    
    int
    main (int argc, char *argv[])
    {
      if (argc > 1)
        {
          int fd = atol (argv[1]);
          printf ("child: fd = %d\n", fd);
          if (fcntl (fd, F_GETFD) == 0 || errno != EBADF)
            {
              puts ("file descriptor valid in child");
              return 1;
            }
          return 0;
    
        }
    
      struct sockaddr_un sun;
      strcpy (sun.sun_path, "./testsocket");
      sun.sun_family = AF_UNIX;
    
      char databuf[] = "hello";
      struct iovec iov[1];
      iov[0].iov_base = databuf;
      iov[0].iov_len = sizeof (databuf);
    
      union
      {
        struct cmsghdr hdr;
        char bytes[CMSG_SPACE (sizeof (int))];
      } buf;
      struct msghdr msg = { .msg_iov = iov, .msg_iovlen = 1,
                            .msg_control = buf.bytes,
                            .msg_controllen = sizeof (buf) };
      struct cmsghdr *cmsg = CMSG_FIRSTHDR (&msg);
    
      cmsg->cmsg_level = SOL_SOCKET;
      cmsg->cmsg_type = SCM_RIGHTS;
      cmsg->cmsg_len = CMSG_LEN (sizeof (int));
    
      msg.msg_controllen = cmsg->cmsg_len;
    
      pid_t child = fork ();
      if (child == -1)
        error (1, errno, "fork");
      if (child == 0)
        {
          int sock = socket (PF_UNIX, SOCK_STREAM, 0);
          if (sock < 0)
            error (1, errno, "socket");
    
          if (bind (sock, (struct sockaddr *) &sun, sizeof (sun)) < 0)
            error (1, errno, "bind");
          if (listen (sock, SOMAXCONN) < 0)
            error (1, errno, "listen");
    
          int conn = accept (sock, NULL, NULL);
          if (conn == -1)
            error (1, errno, "accept");
    
          *(int *) CMSG_DATA (cmsg) = sock;
          if (sendmsg (conn, &msg, MSG_NOSIGNAL) < 0)
            error (1, errno, "sendmsg");
    
          return 0;
        }
    
      /* For a test suite this should be more robust like a
         barrier in shared memory.  */
      sleep (1);
    
      int sock = socket (PF_UNIX, SOCK_STREAM, 0);
      if (sock < 0)
        error (1, errno, "socket");
    
      if (connect (sock, (struct sockaddr *) &sun, sizeof (sun)) < 0)
        error (1, errno, "connect");
      unlink (sun.sun_path);
    
      *(int *) CMSG_DATA (cmsg) = -1;
    
      if (recvmsg (sock, &msg, MSG_CMSG_CLOEXEC) < 0)
        error (1, errno, "recvmsg");
    
      int fd = *(int *) CMSG_DATA (cmsg);
      if (fd == -1)
        error (1, 0, "no descriptor received");
    
      char fdname[20];
      snprintf (fdname, sizeof (fdname), "%d", fd);
      execl ("/proc/self/exe", argv[0], fdname, NULL);
      puts ("execl failed");
      return 1;
    }
    
    [akpm@linux-foundation.org: Fix fastcall inconsistency noted by Michael Buesch]
    [akpm@linux-foundation.org: build fix]
    Signed-off-by: Ulrich Drepper <drepper@redhat.com>
    Cc: Ingo Molnar <mingo@elte.hu>
    Cc: Michael Buesch <mb@bu3sch.de>
    Cc: Michael Kerrisk <mtk-manpages@gmx.net>
    Acked-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 5ed44a401ddfc60e11c3484e86f0c8285051139a
Author: Herbert van den Bergh <Herbert.van.den.Bergh@oracle.com>
Date:   Sun Jul 15 23:38:25 2007 -0700

    do not limit locked memory when RLIMIT_MEMLOCK is RLIM_INFINITY
    
    Fix a bug in mm/mlock.c on 32-bit architectures that prevents a user from
    locking more than 4GB of shared memory, or allocating more than 4GB of
    shared memory in hugepages, when rlim[RLIMIT_MEMLOCK] is set to
    RLIM_INFINITY.
    
    Signed-off-by: Herbert van den Bergh <herbert.van.den.bergh@oracle.com>
    Acked-by: Chris Mason <chris.mason@oracle.com>
    Cc: <stable@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 4fc570bcbe77f823aae183dd824869f79e74cc97
Author: Ralph Campbell <ralph.campbell@qlogic.com>
Date:   Fri Jul 6 12:48:23 2007 -0700

    IB/ipath: Add barrier before updating WC head in shared memory
    
    Add a barrier to make sure the CPU doesn't reorder writes to memory,
    since user programs can be polling on the head index update and the
    entry should be written before that.
    
    Signed-off-by: Ralph Campbell <ralph.campbell@qlogic.com>
    Signed-off-by: Roland Dreier <rolandd@cisco.com>

commit 9d66586f7723b73c5925c7c7819c260484627851
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Sat Jun 16 10:16:16 2007 -0700

    shm: fix the filename of hugetlb sysv shared memory
    
    Some user space tools need to identify SYSV shared memory when examining
    /proc/<pid>/maps.  To do so they look for a block device with major zero, a
    dentry named SYSV<sysv key>, and having the minor of the internal sysv
    shared memory kernel mount.
    
    To help these tools and to make it easier for people just browsing
    /proc/<pid>/maps this patch modifies hugetlb sysv shared memory to use the
    SYSV<key> dentry naming convention.
    
    User space tools will still have to be aware that hugetlb sysv shared
    memory lives on a different internal kernel mount and so has a different
    block device minor number from the rest of sysv shared memory.
    
    Signed-off-by: Eric W. Biederman <ebiederm@xmission.com>
    Cc: "Serge E. Hallyn" <serge@hallyn.com>
    Cc: Albert Cahalan <acahalan@gmail.com>
    Cc: Badari Pulavarty <pbadari@us.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 22741925d268e8479ef66312749bd8d96ed35365
Author: Adam Litke <agl@us.ibm.com>
Date:   Sat Jun 16 10:16:15 2007 -0700

    hugetlb: fix get_policy for stacked shared memory files
    
    Here's another breakage as a result of shared memory stacked files :(
    
    The NUMA policy for a VMA is determined by checking the following (in the
    order given):
    
    1) vma->vm_ops->get_policy() (if defined)
    2) vma->vm_policy (if defined)
    3) task->mempolicy (if defined)
    4) Fall back to default_policy
    
    By switching to stacked files for shared memory, get_policy() is now always
    set to shm_get_policy which is a wrapper function.  This causes us to stop
    at step 1, which yields NULL for hugetlb instead of task->mempolicy which
    was the previous (and correct) result.
    
    This patch modifies the shm_get_policy() wrapper to maintain steps 1-3 for
    the wrapped vm_ops.
    
    (akpm: the refcounting of mempolicies is busted and this patch does nothing to
    improve it)
    
    Signed-off-by: Adam Litke <agl@us.ibm.com>
    Acked-by: William Irwin <bill.irwin@oracle.com>
    Cc: dean gaudet <dean@arctic.org>
    Cc: Christoph Lameter <clameter@sgi.com>
    Cc: Andi Kleen <ak@suse.de>
    Cc: <stable@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 30475cc12a50816f290828fb7e3cd7036cd622df
Author: Badari Pulavarty <pbadari@us.ibm.com>
Date:   Sat Jun 16 10:15:59 2007 -0700

    Restore shmid as inode# to fix /proc/pid/maps ABI breakage
    
    shmid used to be stored as inode# for shared memory segments. Some of
    the proc-ps tools use this from /proc/pid/maps.  Recent cleanups
    to newseg() changed it.  This patch sets inode number back to shared
    memory id to fix breakage.
    
    Signed-off-by: Badari Pulavarty <pbadari@us.ibm.com>
    Cc: "Albert Cahalan" <acahalan@gmail.com>
    Cc: "Eric W. Biederman" <ebiederm@xmission.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 8e4a8227450fb3327c244642fca616daa6ca7879
Author: Ken Chen <kenchen@google.com>
Date:   Wed May 9 02:33:09 2007 -0700

    [PATCH] fix leaky resv_huge_pages when cpuset is in use
    
    The internal hugetlb resv_huge_pages variable can permanently leak nonzero
    value in the error path of hugetlb page fault handler when hugetlb page is
    used in combination of cpuset.  The leaked count can permanently trap N
    number of hugetlb pages in unusable "reserved" state.
    
    Steps to reproduce the bug:
    
      (1) create two cpuset, user1 and user2
      (2) reserve 50 htlb pages in cpuset user1
      (3) attempt to shmget/shmat 50 htlb page inside cpuset user2
      (4) kernel oom the user process in step 3
      (5) ipcrm the shm segment
    
    At this point resv_huge_pages will have a count of 49, even though
    there are no active hugetlbfs file nor hugetlb shared memory segment
    in the system.  The leak is permanent and there is no recovery method
    other than system reboot. The leaked count will hold up all future use
    of that many htlb pages in all cpusets.
    
    The culprit is that the error path of alloc_huge_page() did not
    properly undo the change it made to resv_huge_page, causing
    inconsistent state.
    
    Signed-off-by: Ken Chen <kenchen@google.com>
    Cc: David Gibson <david@gibson.dropbear.id.au>
    Cc: Adam Litke <agl@us.ibm.com>
    Cc: Martin Bligh <mbligh@google.com>
    Acked-by: David Gibson <dwg@au1.ibm.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Chris Wright <chrisw@sous-sol.org>

commit ace4bd29c248b51db3f8a97e9b59740dc6caa074
Author: Ken Chen <kenchen@google.com>
Date:   Wed May 9 02:33:09 2007 -0700

    fix leaky resv_huge_pages when cpuset is in use
    
    The internal hugetlb resv_huge_pages variable can permanently leak nonzero
    value in the error path of hugetlb page fault handler when hugetlb page is
    used in combination of cpuset.  The leaked count can permanently trap N
    number of hugetlb pages in unusable "reserved" state.
    
    Steps to reproduce the bug:
    
      (1) create two cpuset, user1 and user2
      (2) reserve 50 htlb pages in cpuset user1
      (3) attempt to shmget/shmat 50 htlb page inside cpuset user2
      (4) kernel oom the user process in step 3
      (5) ipcrm the shm segment
    
    At this point resv_huge_pages will have a count of 49, even though
    there are no active hugetlbfs file nor hugetlb shared memory segment
    in the system.  The leak is permanent and there is no recovery method
    other than system reboot. The leaked count will hold up all future use
    of that many htlb pages in all cpusets.
    
    The culprit is that the error path of alloc_huge_page() did not
    properly undo the change it made to resv_huge_page, causing
    inconsistent state.
    
    Signed-off-by: Ken Chen <kenchen@google.com>
    Cc: David Gibson <david@gibson.dropbear.id.au>
    Cc: Adam Litke <agl@us.ibm.com>
    Cc: Martin Bligh <mbligh@google.com>
    Acked-by: David Gibson <dwg@au1.ibm.com>
    Cc: <stable@kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit fc467a2623029976899261d6d379779c950ddcba
Author: Manuel Lauss <mano@roarinelk.homelinux.net>
Date:   Wed May 9 17:36:15 2007 +0900

    sh: SH7760 DMABRG support.
    
    The DMABRG is a special DMA unit within the SH7760 which does data
    transfers from main memory to Audio units and USB shared memory.
    It has 3 IRQ lines which generate 10 events, which have to be masked
    unmasked and acked in a single 32bit register. It works independently
    from the tradition SH DMAC, but blocks usage of DMAC channel 0.
    
    This patch adds 2 functions to associate callbacks with DMABRG events
    and initialization.
    
    Signed-off-by: Manuel Lauss <mano@roarinelk.homelinux.net>
    Signed-off-by: Paul Mundt <lethal@linux-sh.org>

commit 61dcc6f4d9ed5db71f4f0be9026bdd09f1a7dc06
Author: Ralf Baechle <ralf@linux-mips.org>
Date:   Thu Mar 15 17:10:16 2007 +0000

    [MIPS] RTLX: Harden against compiler reordering and optimization.
    
    RTLX communication is based on lock-free shared memory buffers.  It
    happened to be working by luck so far but relies on the optimizer doing
    certain optimizations but no reordering.
    
    Fixed by inserting proper barriers in rtlx_read and rtlx_write, and careful
    pointer dereferencing.
    
    Signed-off-by: Ralf Baechle <ralf@linux-mips.org>

commit 516dffdcd8827a40532798602830dfcfc672294c
Author: Adam Litke <agl@us.ibm.com>
Date:   Thu Mar 1 15:46:08 2007 -0800

    [PATCH] Fix get_unmapped_area and fsync for hugetlb shm segments
    
    This patch provides the following hugetlb-related fixes to the recent stacked
    shm files changes:
     - Update is_file_hugepages() so it will reconize hugetlb shm segments.
     - get_unmapped_area must be called with the nested file struct to handle
       the sfd->file->f_ops->get_unmapped_area == NULL case.
     - The fsync f_op must be wrapped since it is specified in the hugetlbfs
       f_ops.
    
    This is based on proposed fixes from Eric Biederman that were debugged and
    tested by me.  Without it, attempting to use hugetlb shared memory segments
    on powerpc (and likely ia64) will kill your box.
    
    Signed-off-by: Adam Litke <agl@us.ibm.com>
    Cc: Eric Biederman <ebiederm@xmission.com>
    Cc: Andrew Morton <akpm@linux-foundation.org>
    Acked-by: William Irwin <bill.irwin@oracle.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit 4f1e627105e55e1e2ee6d6e9138912880c186dd0
Author: Badari Pulavarty <pbadari@us.ibm.com>
Date:   Fri Dec 22 01:06:23 2006 -0800

    Fix for shmem_truncate_range() BUG_ON()
    
    Ran into BUG() while doing madvise(REMOVE) testing.  If we are punching a
    hole into shared memory segment using madvise(REMOVE) and the entire hole
    is below the indirect blocks, we hit following assert.
    
                    BUG_ON(limit <= SHMEM_NR_DIRECT);
    
    Signed-off-by: Badari Pulavarty <pbadari@us.ibm.com>
    Cc: Hugh Dickins <hugh@veritas.com>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Chris Wright <chrisw@sous-sol.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit bc56bba8f31bd99f350a5ebfd43d50f411b620c7
Author: Eric W. Biederman <ebiederm@xmission.com>
Date:   Tue Feb 20 13:57:53 2007 -0800

    [PATCH] shm: make sysv ipc shared memory use stacked files
    
    The current ipc shared memory code runs into several problems because it
    does not quite use files like the rest of the kernel.  With the option of
    backing ipc shared memory with either hugetlbfs or ordinary shared memory
    the problems got worse.  With the added support for ipc namespaces things
    behaved so unexpected that we now have several bad namespace reference
    counting bugs when using what appears at first glance to be a reasonable
    idiom.
    
    So to attack these problems and hopefully make the code more maintainable
    this patch simply uses the files provided by other parts of the kernel and
    builds it's own files out of them.  The shm files are allocated in do_shmat
    and freed when their reference count drops to zero with their last unmap.
    The file and vm operations that we don't want to implement or we don't
    implement completely we just delegate to the operations of our backing
    file.
    
    This means that we now get an accurate shm_nattch count for we have a
    hugetlbfs inode for backing store, and the shm accounting of last attach
    and last detach time work as well.
    
    This means that getting a reference to the ipc namespace when we create the
    file and dropping the referenece in the release method is now safe and
    correct.
    
    This means we no longer need a special case for clearing VM_MAYWRITE
    as our file descriptor now only has write permissions when we have
    requested write access when calling shmat.  Although VM_SHARED is now
    cleared as well which I believe is harmless and is mostly likely a
    minor bug fix.
    
    By using the same set of operations for both the hugetlb case and regular
    shared memory case shmdt is not simplified and made slightly more correct
    as now the test "vma->vm_ops == &shm_vm_ops" is 100% accurate in spotting
    all shared memory regions generated from sysvipc shared memory.
    
    Signed-off-by: Eric W. Biederman <ebiederm@xmission.com>
    Cc: Michal Piotrowski <michal.k.k.piotrowski@gmail.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

commit cb57fcaf9b8c1946aa1e436821a7a4901dc926d0
Author: Badari Pulavarty <pbadari@us.ibm.com>
Date:   Fri Dec 22 01:06:23 2006 -0800

    [PATCH] Fix for shmem_truncate_range() BUG_ON()
    
    Ran into BUG() while doing madvise(REMOVE) testing.  If we are punching a
    hole into shared memory segment using madvise(REMOVE) and the entire hole
    is below the indirect blocks, we hit following assert.
    
                    BUG_ON(limit <= SHMEM_NR_DIRECT);
    
    Signed-off-by: Badari Pulavarty <pbadari@us.ibm.com>
    Cc: Hugh Dickins <hugh@veritas.com>
    Cc: <stable@kernel.org>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Chris Wright <chrisw@sous-sol.org>

commit ac7663f17a4b5dc08776eb71f870bde40a0e5a37
Author: Badari Pulavarty <pbadari@us.ibm.com>
Date:   Sun Jan 7 00:58:15 2007 +0100

    Fix for shmem_truncate_range() BUG_ON()
    
    Ran into BUG() while doing madvise(REMOVE) testing.  If we are punching a
    hole into shared memory segment using madvise(REMOVE) and the entire hole
    is below the indirect blocks, we hit following assert.
    
                BUG_ON(limit <= SHMEM_NR_DIRECT);
    
    Signed-off-by: Badari Pulavarty <pbadari@us.ibm.com>
    Forwarded-by: Jordan Neumeyer
    Signed-off-by: Adrian Bunk <bunk@stusta.de>

commit 92a3d03aab912624cae799e5772a6eb2ef55083f
Author: Badari Pulavarty <pbadari@us.ibm.com>
Date:   Fri Dec 22 01:06:23 2006 -0800

    [PATCH] Fix for shmem_truncate_range() BUG_ON()
    
    Ran into BUG() while doing madvise(REMOVE) testing.  If we are punching a
    hole into shared memory segment using madvise(REMOVE) and the entire hole
    is below the indirect blocks, we hit following assert.
    
                    BUG_ON(limit <= SHMEM_NR_DIRECT);
    
    Signed-off-by: Badari Pulavarty <pbadari@us.ibm.com>
    Cc: Hugh Dickins <hugh@veritas.com>
    Cc: <stable@kernel.org>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit f4eb07c17df2e6cf9bd58bfcd9cc9e05e9489d07
Author: Heiko Carstens <heiko.carstens@de.ibm.com>
Date:   Fri Dec 8 15:56:07 2006 +0100

    [S390] Virtual memmap for s390.
    
    Virtual memmap support for s390. Inspired by the ia64 implementation.
    
    Unlike ia64 we need a mechanism which allows us to dynamically attach
    shared memory regions.
    These memory regions are accessed via the dcss device driver. dcss
    implements the 'direct_access' operation, which requires struct pages
    for every single shared page.
    Therefore this implementation provides an interface to attach/detach
    shared memory:
    
    int add_shared_memory(unsigned long start, unsigned long size);
    int remove_shared_memory(unsigned long start, unsigned long size);
    
    The purpose of the add_shared_memory function is to add the given
    memory range to the 1:1 mapping and to make sure that the
    corresponding range in the vmemmap is backed with physical pages.
    It also initialises the new struct pages.
    
    remove_shared_memory in turn only invalidates the page table
    entries in the 1:1 mapping. The page tables and the memory used for
    struct pages in the vmemmap are currently not freed. They will be
    reused when the next segment will be attached.
    Given that the maximum size of a shared memory region is 2GB and
    in addition all regions must reside below 2GB this is not too much of
    a restriction, but there is room for improvement.
    
    Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

commit 39dde65c9940c97fcd178a3d2b1c57ed8b7b68aa
Author: Chen, Kenneth W <kenneth.w.chen@intel.com>
Date:   Wed Dec 6 20:32:03 2006 -0800

    [PATCH] shared page table for hugetlb page
    
    Following up with the work on shared page table done by Dave McCracken.  This
    set of patch target shared page table for hugetlb memory only.
    
    The shared page table is particular useful in the situation of large number of
    independent processes sharing large shared memory segments.  In the normal
    page case, the amount of memory saved from process' page table is quite
    significant.  For hugetlb, the saving on page table memory is not the primary
    objective (as hugetlb itself already cuts down page table overhead
    significantly), instead, the purpose of using shared page table on hugetlb is
    to allow faster TLB refill and smaller cache pollution upon TLB miss.
    
    With PT sharing, pte entries are shared among hundreds of processes, the cache
    consumption used by all the page table is smaller and in return, application
    gets much higher cache hit ratio.  One other effect is that cache hit ratio
    with hardware page walker hitting on pte in cache will be higher and this
    helps to reduce tlb miss latency.  These two effects contribute to higher
    application performance.
    
    Signed-off-by: Ken Chen <kenneth.w.chen@intel.com>
    Acked-by: Hugh Dickins <hugh@veritas.com>
    Cc: Dave McCracken <dmccr@us.ibm.com>
    Cc: William Lee Irwin III <wli@holomorphy.com>
    Cc: "Luck, Tony" <tony.luck@intel.com>
    Cc: Paul Mackerras <paulus@samba.org>
    Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
    Cc: David Gibson <david@gibson.dropbear.id.au>
    Cc: Adam Litke <agl@us.ibm.com>
    Cc: Paul Mundt <lethal@linux-sh.org>
    Cc: "David S. Miller" <davem@davemloft.net>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit 97f78759ea1cb7d27b61095582de78b8e7486e85
Author: FUJITA Tomonori <fujita.tomonori@lab.ntt.co.jp>
Date:   Thu Nov 16 19:24:16 2006 +0900

    [SCSI] scsi tgt: scsi target user and kernel communication interface
    
    The user-space daemon and tgt kernel module need bi-directional
    kernel/user high-performance interface, however, mainline provides no
    standard interface like that.
    
    This patch adds shared memory interface between kernel and user spaces
    like some other drivers do by using own character device. The
    user-space daemon and tgt kernel module creates shared memory via mmap
    and use it like ring buffer. poll (kernel to user) and write (user to
    kernel) system calls are used for notification.
    
    Signed-off-by: FUJITA Tomonori <fujita.tomonori@lab.ntt.co.jp>
    Signed-off-by: Mike Christie <michaelc@cs.wisc.edu>
    Signed-off-by: James Bottomley <James.Bottomley@SteelEye.com>

commit 0112c4c6461fed12ed9bcb249f967bc17a23f6c4
Author: David Howells <dhowells@redhat.com>
Date:   Wed Sep 27 01:50:21 2006 -0700

    [PATCH] NOMMU: Add docs about shared memory
    
    Add documentation about using shared memory in NOMMU mode.
    
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit 21ff821630c0e64f5d2fab96ced72000d77fa90b
Author: David Howells <dhowells@redhat.com>
Date:   Mon Jul 10 04:44:52 2006 -0700

    [PATCH] NOMMU: Fix execution off of ramfs with mmap()
    
    Fix execution through the FDPIC binfmt of programs stored on ramfs by
    preventing the ramfs mmap() returning successfully on a private mapping of
    a ramfs file.  This causes NOMMU mmap to make a copy of the mapped portion
    of the file and map that instead.
    
    This could be improved by granting direct mapping access to read-only
    private mappings for which the data is stored on a contiguous run of pages.
     However, this is only likely to be the case if the file was extended with
    truncate before being written.
    
    ramfs is left to map the file directly for shared mappings so that SYSV IPC
    and POSIX shared memory both still work.
    
    Signed-off-by: David Howells <dhowells@redhat.com>
    Cc: Hugh Dickins <hugh@veritas.com>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit 75178298c6c807a7274ab48ef9c4d6be7d0114d8
Author: Lee Schermerhorn <Lee.Schermerhorn@hp.com>
Date:   Sat Apr 22 02:35:48 2006 -0700

    [PATCH] add migratepage address space op to shmem
    
    Basic problem: pages of a shared memory segment can only be migrated once.
    
    In 2.6.16 through 2.6.17-rc1, shared memory mappings do not have a
    migratepage address space op.  Therefore, migrate_pages() falls back to
    default processing.  In this path, it will try to pageout() dirty pages.
    Once a shared memory page has been migrated it becomes dirty, so
    migrate_pages() will try to page it out.  However, because the page count
    is 3 [cache + current + pte], pageout() will return PAGE_KEEP because
    is_page_cache_freeable() returns false.  This will abort all subsequent
    migrations.
    
    This patch adds a migratepage address space op to shared memory segments to
    avoid taking the default path.  We use the "migrate_page()" function
    because it knows how to migrate dirty pages.  This allows shared memory
    segment pages to migrate, subject to other conditions such as # pte's
    referencing the page [page_mapcount(page)], when requested.
    
    I think this is safe.  If we're migrating a shared memory page, then we
    found the page via a page table, so it must be in memory.
    
    Can be verified with memtoy and the shmem-mbind-test script, both
    available at:  http://free.linux.hp.com/~lts/Tools/
    
    Signed-off-by: Lee Schermerhorn <lee.schermerhorn@hp.com>
    Acked-by: Christoph Lameter <clameter@sgi.com>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
    Signed-off-by: Chris Wright <chrisw@sous-sol.org>

commit 304dbdb7a4fbb7f40a6ad5c5836fdd456c233c63
Author: Lee Schermerhorn <Lee.Schermerhorn@hp.com>
Date:   Sat Apr 22 02:35:48 2006 -0700

    [PATCH] add migratepage address space op to shmem
    
    Basic problem: pages of a shared memory segment can only be migrated once.
    
    In 2.6.16 through 2.6.17-rc1, shared memory mappings do not have a
    migratepage address space op.  Therefore, migrate_pages() falls back to
    default processing.  In this path, it will try to pageout() dirty pages.
    Once a shared memory page has been migrated it becomes dirty, so
    migrate_pages() will try to page it out.  However, because the page count
    is 3 [cache + current + pte], pageout() will return PAGE_KEEP because
    is_page_cache_freeable() returns false.  This will abort all subsequent
    migrations.
    
    This patch adds a migratepage address space op to shared memory segments to
    avoid taking the default path.  We use the "migrate_page()" function
    because it knows how to migrate dirty pages.  This allows shared memory
    segment pages to migrate, subject to other conditions such as # pte's
    referencing the page [page_mapcount(page)], when requested.
    
    I think this is safe.  If we're migrating a shared memory page, then we
    found the page via a page table, so it must be in memory.
    
    Can be verified with memtoy and the shmem-mbind-test script, both
    available at:  http://free.linux.hp.com/~lts/Tools/
    
    Signed-off-by: Lee Schermerhorn <lee.schermerhorn@hp.com>
    Acked-by: Christoph Lameter <clameter@sgi.com>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit 966a082f80a073af1564c5ed6313ef2f0587dde3
Author: Rob Landley <rob@landley.net>
Date:   Tue Apr 18 22:21:43 2006 -0700

    [PATCH] uml: physical memory map file fixes
    
    UML really wants shared memory semantics form its physical memory map file,
    and the place for that is /dev/shm.  So move the default, and fix the error
    messages to recognize that this value can be overridden.
    
    Signed-off-by: Rob Landley <rob@landley.net>
    Signed-off-by: Jeff Dike <jdike@addtoit.com>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit b78b6af66a5fbaf17d7e6bfc32384df5e34408c8
Author: Hugh Dickins <hugh@veritas.com>
Date:   Wed Apr 12 14:34:27 2006 -0700

    [PATCH] shmat: stop mprotect from giving write permission to a readonly attachment (CVE-2006-1524)
    
    I found that all of 2.4 and 2.6 have been letting mprotect give write
    permission to a readonly attachment of shared memory, whether or not IPC
    would give the caller that permission.
    
    SUS says "The behaviour of this function [mprotect] is unspecified if the
    mapping was not established by a call to mmap", but I don't think we can
    interpret that as allowing it to subvert IPC permissions.
    
    I haven't tried 2.2, but the 2.2.26 source looks like it gets it right; and
    the patch below reproduces that behaviour - mprotect cannot be used to add
    write permission to a shared memory segment attached readonly.
    
    This patch is simple, and I'm sure it's what we should have done in 2.4.0:
    if you want to go on to switch write permission on and off with mprotect,
    just don't attach the segment readonly in the first place.
    
    However, we could have accumulated apps which attach readonly (even though
    they would be permitted to attach read/write), and which subsequently use
    mprotect to switch write permission on and off: it's not unreasonable.
    
    I was going to add a second ipcperms check in do_shmat, to check for
    writable when readonly, and if not writable find_vma and clear VM_MAYWRITE.
     But security_ipc_permission might do auditing, and it seems wrong to
    report an attempt for write permission when there has been none.  Or we
    could flag the vma as SHM, note the shmid or shp in vm_private_data, and
    then get mprotect to check.
    
    But the patch below is a lot simpler: I'd rather stick with it, if we can
    convince ourselves somehow that it'll be safe.
    
    Signed-off-by: Hugh Dickins <hugh@veritas.com>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 512dba41bae0ec8de72269167f23b75a4770097d
Author: Hugh Dickins <hugh@veritas.com>
Date:   Wed Apr 12 14:34:27 2006 -0700

    [PATCH] shmat: stop mprotect from giving write permission to a readonly attachment (CVE-2006-1524)
    
    I found that all of 2.4 and 2.6 have been letting mprotect give write
    permission to a readonly attachment of shared memory, whether or not IPC
    would give the caller that permission.
    
    SUS says "The behaviour of this function [mprotect] is unspecified if the
    mapping was not established by a call to mmap", but I don't think we can
    interpret that as allowing it to subvert IPC permissions.
    
    I haven't tried 2.2, but the 2.2.26 source looks like it gets it right; and
    the patch below reproduces that behaviour - mprotect cannot be used to add
    write permission to a shared memory segment attached readonly.
    
    This patch is simple, and I'm sure it's what we should have done in 2.4.0:
    if you want to go on to switch write permission on and off with mprotect,
    just don't attach the segment readonly in the first place.
    
    However, we could have accumulated apps which attach readonly (even though
    they would be permitted to attach read/write), and which subsequently use
    mprotect to switch write permission on and off: it's not unreasonable.
    
    I was going to add a second ipcperms check in do_shmat, to check for
    writable when readonly, and if not writable find_vma and clear VM_MAYWRITE.
     But security_ipc_permission might do auditing, and it seems wrong to
    report an attempt for write permission when there has been none.  Or we
    could flag the vma as SHM, note the shmid or shp in vm_private_data, and
    then get mprotect to check.
    
    But the patch below is a lot simpler: I'd rather stick with it, if we can
    convince ourselves somehow that it'll be safe.
    
    Signed-off-by: Hugh Dickins <hugh@veritas.com>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit df1e2fb540368d0f9640045235f81923fa63acb7
Author: Hugh Dickins <hugh@veritas.com>
Date:   Fri Mar 24 03:18:06 2006 -0800

    [PATCH] shmdt: check address alignment
    
    SUSv3 says the shmdt() function shall fail with EINVAL if the value of
    shmaddr is not the data segment start address of a shared memory segment:
    our sys_shmdt needs to reject a shmaddr which is not page-aligned.
    
    Does it have the potential to break existing apps?
    
    Hugh says
    
      "sys_shmdt() just does the wrong (unexpected) thing with a misaligned
      address: it'll fail on what you might expect it to succeed on, and only
      succeed on what it should definitely fail on.
    
      "That is, I think it behaves as if shmaddr gets rounded up, when the only
      understandable behaviour would be if it rounded it down.
    
      "Which does mean you'd have to be devious to see anything but EINVAL from
      a misaligned shmaddr there, so it's not terribly important."
    
    Signed-off-by: Hugh Dickins <hugh@veritas.com>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit 61572d33e60ea237051a99f8effafadfdd91ac4f
Author: Andi Kleen <ak@suse.de>
Date:   Tue Feb 7 00:18:55 2006 +0100

    [PATCH] x86_64: Let impossible CPUs point to reference per cpu data
    
    Don't mark the reference per cpu data init data (so it stays
    around after boot) and point all impossible CPUs to it. This way
    they reference some valid - although shared memory. Usually
    this is only initialization like INIT_LIST_HEADs and there
    won't be races because these CPUs never run. Still somewhat hackish.
    
    Signed-off-by: Andi Kleen <ak@suse.de>
    Signed-off-by: Chris Wright <chrisw@sous-sol.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

commit 14c3f8558717adb192c364f58b0d63dfc850ecca
Author: Andi Kleen <ak@suse.de>
Date:   Fri Feb 3 21:51:56 2006 +0100

    [PATCH] x86_64: Let impossible CPUs point to reference per cpu data
    
    Hack for 2.6.16. In 2.6.17 all code that uses NR_CPUs should
    be audited and changed to only touch possible CPUs.
    
    Don't mark the reference per cpu data init data (so it stays
    around after boot) and point all impossible CPUs to it. This way
    they reference some valid - although shared memory. Usually
    this is only initialization like INIT_LIST_HEADs and there
    won't be races because these CPUs never run. Still somewhat hackish.
    
    Signed-off-by: Andi Kleen <ak@suse.de>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit b0e15190ead07056ab0c3844a499ff35e66d27cc
Author: David Howells <dhowells@redhat.com>
Date:   Fri Jan 6 00:11:42 2006 -0800

    [PATCH] NOMMU: Make SYSV IPC SHM use ramfs facilities on NOMMU
    
    The attached patch makes the SYSV IPC shared memory facilities use the new
    ramfs facilities on a no-MMU kernel.
    
    The following changes are made:
    
     (1) There are now shmem_mmap() and shmem_get_unmapped_area() functions to
         allow the IPC SHM facilities to commune with the tiny-shmem and shmem
         code.
    
     (2) ramfs files now need resizing using do_truncate() rather than by modifying
         the inode size directly (see shmem_file_setup()). This causes ramfs to
         attempt to bind a block of pages of sufficient size to the inode.
    
     (3) CONFIG_SYSVIPC is no longer contingent on CONFIG_MMU.
    
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit 642fb4d1f1dd2417aa69189fe5ceb81e4fb72900
Author: David Howells <dhowells@redhat.com>
Date:   Fri Jan 6 00:11:41 2006 -0800

    [PATCH] NOMMU: Provide shared-writable mmap support on ramfs
    
    The attached patch makes ramfs support shared-writable mmaps by:
    
     (1) Attempting to perform a contiguous block allocation to the requested size
         when truncate attempts to increase the file from zero size, such as
         happens when:
    
            fd = shm_open("/file/on/ramfs", ...):
            ftruncate(fd, size_requested);
            addr = mmap(NULL, subsize, PROT_READ|PROT_WRITE|PROT_EXEC, MAP_SHARED,
                        fd, offset);
    
     (2) Permitting any shared-writable mapping over any contiguous set of extant
         pages. get_unmapped_area() will return the address into the actual ramfs
         pages. The mapping may start anywhere and be of any size, but may not go
         over the end of file. Multiple mappings may overlap in any way.
    
     (3) Not permitting a file to be shrunk if it would truncate any shared
         mappings (private mappings are copied).
    
    Thus this patch provides support for POSIX shared memory on NOMMU kernels,
    with certain limitations such as there being a large enough block of pages
    available to support the allocation and it only working on directly mappable
    filesystems.
    
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit f6b3ec238d12c8cc6cc71490c6e3127988460349
Author: Badari Pulavarty <pbadari@us.ibm.com>
Date:   Fri Jan 6 00:10:38 2006 -0800

    [PATCH] madvise(MADV_REMOVE): remove pages from tmpfs shm backing store
    
    Here is the patch to implement madvise(MADV_REMOVE) - which frees up a
    given range of pages & its associated backing store.  Current
    implementation supports only shmfs/tmpfs and other filesystems return
    -ENOSYS.
    
    "Some app allocates large tmpfs files, then when some task quits and some
    client disconnect, some memory can be released.  However the only way to
    release tmpfs-swap is to MADV_REMOVE". - Andrea Arcangeli
    
    Databases want to use this feature to drop a section of their bufferpool
    (shared memory segments) - without writing back to disk/swap space.
    
    This feature is also useful for supporting hot-plug memory on UML.
    
    Concerns raised by Andrew Morton:
    
    - "We have no plan for holepunching!  If we _do_ have such a plan (or
      might in the future) then what would the API look like?  I think
      sys_holepunch(fd, start, len), so we should start out with that."
    
    - Using madvise is very weird, because people will ask "why do I need to
      mmap my file before I can stick a hole in it?"
    
    - None of the other madvise operations call into the filesystem in this
      manner.  A broad question is: is this capability an MM operation or a
      filesytem operation?  truncate, for example, is a filesystem operation
      which sometimes has MM side-effects.  madvise is an mm operation and with
      this patch, it gains FS side-effects, only they're really, really
      significant ones."
    
    Comments:
    
    - Andrea suggested the fs operation too but then it's more efficient to
      have it as a mm operation with fs side effects, because they don't
      immediatly know fd and physical offset of the range.  It's possible to
      fixup in userland and to use the fs operation but it's more expensive,
      the vmas are already in the kernel and we can use them.
    
    Short term plan &  Future Direction:
    
    - We seem to need this interface only for shmfs/tmpfs files in the short
      term.  We have to add hooks into the filesystem for correctness and
      completeness.  This is what this patch does.
    
    - In the future, plan is to support both fs and mmap apis also.  This
      also involves (other) filesystem specific functions to be implemented.
    
    - Current patch doesn't support VM_NONLINEAR - which can be addressed in
      the future.
    
    Signed-off-by: Badari Pulavarty <pbadari@us.ibm.com>
    Cc: Hugh Dickins <hugh@veritas.com>
    Cc: Andrea Arcangeli <andrea@suse.de>
    Cc: Michael Kerrisk <mtk-manpages@gmx.net>
    Cc: Ulrich Drepper <drepper@redhat.com>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit 792d2b9a12594522111fbe2a7f17460a4d7edff7
Author: Dave Airlie <airlied@starflyer.(none)>
Date:   Fri Nov 11 23:30:27 2005 +1100

    drm: drop mtrr from i915
    
    Alan Hourihane wants to set MTRR in the DDX only as otherwise
    we get problems with the shared memory chipset.
    
    From: Alan Hourihane <alanh@fairlite.demon.co.uk>
    Signed-off-by: Dave Airlie <airlied@linux.ie>

commit bf8f972d3a1daf969cf44f64cc36d53bfd76441f
Author: Badari Pulavarty <pbadari@us.ibm.com>
Date:   Mon Nov 7 00:59:27 2005 -0800

    [PATCH] SHM_NORESERVE flags for shmget()
    
    Add SHM_NORESERVE functionality similar to MAP_NORESERVE for shared memory
    segments.
    
    This is mainly to avoid abuse of OVERCOMMIT_ALWAYS and this flag is ignored
    for OVERCOMMIT_NEVER.
    
    Signed-off-by: Badari Pulavarty <pbadari@us.ibm.com>
    Cc: Hugh Dickins <hugh@veritas.com>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit cd03adb0812fe0fb06cdb935e61ec9514254e951
Author: Russell King <rmk@dyn-67.arm.linux.org.uk>
Date:   Mon Nov 7 10:10:28 2005 +0000

    [ARM SMP] Add support for shared memory attribute
    
    We need to set the shared memory attribute in the page tables
    on SMP systems to allow the cache coherency to operate.
    
    Signed-off-by: Russell King <rmk+kernel@arm.linux.org.uk>

commit e3648b3d8de3b37fae7acbb57db1e001a19cd3b7
Author: Michael Chan <mchan@broadcom.com>
Date:   Fri Nov 4 08:51:21 2005 -0800

    [PATCH] bnx2: update firmware handshake for 5708
    
    Dynamically determine the shared memory location where eeprom
    parameters are stored instead of using a fixed location.
    
    Add speed reporting to management firmware. This allows management
    firmware to know the current speed without contending for MII
    registers.
    
    Signed-off-by: Michael Chan <mchan@broadcom.com>
    Signed-off-by: John W. Linville <linville@tuxdriver.com>

commit 2e9b367c2273ed21c9852a04d90944d472c4f3e6
Author: Adam Litke <agl@us.ibm.com>
Date:   Sat Oct 29 18:16:47 2005 -0700

    [PATCH] hugetlb: overcommit accounting check
    
    Basic overcommit checking for hugetlb_file_map() based on an implementation
    used with demand faulting in SLES9.
    
    Since demand faulting can't guarantee the availability of pages at mmap
    time, this patch implements a basic sanity check to ensure that the number
    of huge pages required to satisfy the mmap are currently available.
    Despite the obvious race, I think it is a good start on doing proper
    accounting.  I'd like to work towards an accounting system that mimics the
    semantics of normal pages (especially for the MAP_PRIVATE/COW case).  That
    work is underway and builds on what this patch starts.
    
    Huge page shared memory segments are simpler and still maintain their
    commit on shmget semantics.
    
    Signed-off-by: Adam Litke <agl@us.ibm.com>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit d992895ba2b27cf5adf1ba0ad6d27662adc54c5e
Author: Nick Piggin <nickpiggin@yahoo.com.au>
Date:   Sun Aug 28 16:49:11 2005 +1000

    [PATCH] Lazy page table copies in fork()
    
    Defer copying of ptes until fault time when it is possible to reconstruct
    the pte from backing store. Idea from Andi Kleen and Nick Piggin.
    
    Thanks to input from Rik van Riel and Linus and to Hugh for correcting
    my blundering.
    
    Ray Fucillo <fucillo@intersystems.com> reports:
    
      "I applied this latest patch to a 2.6.12 kernel and found that it does
       resolve the problem.  Prior to the patch on this machine, I was
       seeing about 23ms spent in fork for ever 100MB of shared memory
       segment.
    
       After applying the patch, fork is taking about 1ms regardless of the
       shared memory size."
    
    Signed-off-by: Nick Piggin <npiggin@suse.de>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>

commit d56d6f9502a15ef64395cb3a6fc7bfdc365b1e3d
Author: Roland Dreier <roland@topspin.com>
Date:   Mon Jun 27 14:36:43 2005 -0700

    [PATCH] IB/mthca: Split off MTT allocation
    
    Split allocation of MTT range from creation of MR.  This will be useful for
    implementing shared memory regions and userspace verbs.
    
    Signed-off-by: Roland Dreier <roland@topspin.com>
    Signed-off-by: Andrew Morton <akpm@osdl.org>
    Signed-off-by: Linus Torvalds <torvalds@osdl.org>
